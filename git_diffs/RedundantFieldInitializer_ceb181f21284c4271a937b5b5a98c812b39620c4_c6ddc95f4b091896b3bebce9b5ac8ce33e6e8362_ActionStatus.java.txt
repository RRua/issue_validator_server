diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
index 955a573..0e2739f 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
@@ -22,7 +22,7 @@ public class ActionStatus {
 
 
     @SerializedName("status")
-    private int status = 0;
+    private int status;
 
     public ActionStatus(int status) {
         this.status = status;
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java
deleted file mode 100644
index a308c95..0000000
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.developerfromjokela.motioneyeclient.classes;
-
-public class CameraImageError {
-    private String errorCode;
-    private String errorCause;
-    private boolean displayRetry = true;
-
-    public CameraImageError(String errorCode, String errorCause, boolean displayRetry) {
-        this.errorCode = errorCode;
-        this.errorCause = errorCause;
-        this.displayRetry = displayRetry;
-    }
-
-    public String getErrorCode() {
-        return errorCode;
-    }
-
-    public void setErrorCode(String errorCode) {
-        this.errorCode = errorCode;
-    }
-
-    public String getErrorCause() {
-        return errorCause;
-    }
-
-    public void setErrorCause(String errorCause) {
-        this.errorCause = errorCause;
-    }
-
-    public boolean isDisplayRetry() {
-        return displayRetry;
-    }
-
-    public void setDisplayRetry(boolean displayRetry) {
-        this.displayRetry = displayRetry;
-    }
-}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java
deleted file mode 100644
index f966612..0000000
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.developerfromjokela.motioneyeclient.classes;
-
-import android.graphics.Bitmap;
-
-import java.sql.Time;
-import java.util.ArrayList;
-import java.util.List;
-
-
-/**
- * This class is for video frame transmitting to the RecyclerView
- */
-public class CameraImageFrame {
-    private Camera camera;
-    private Device device;
-    private Bitmap bitmap;
-    private boolean initialLoadDone = false;
-    private String frameRateText = "";
-    private CameraImageError error = null;
-    private List<Long> times = new ArrayList<>();
-
-
-    public CameraImageFrame(Camera camera, Device device, Bitmap bitmap, boolean initialLoadDone) {
-        this.camera = camera;
-        this.device = device;
-        this.bitmap = bitmap;
-        this.initialLoadDone = initialLoadDone;
-    }
-
-    public List<Long> getTimes() {
-        return times;
-    }
-
-    public CameraImageError getError() {
-        return error;
-    }
-
-    public void setError(CameraImageError error) {
-        this.error = error;
-    }
-
-    public String getFrameRateText() {
-        return frameRateText;
-    }
-
-    public void setFrameRateText(String frameRateText) {
-        this.frameRateText = frameRateText;
-    }
-
-    public Camera getCamera() {
-        return camera;
-    }
-
-    public void setCamera(Camera camera) {
-        this.camera = camera;
-    }
-
-    public Device getDevice() {
-        return device;
-    }
-
-    public void setDevice(Device device) {
-        this.device = device;
-    }
-
-    public Bitmap getBitmap() {
-        return bitmap;
-    }
-
-    public void setBitmap(Bitmap bitmap) {
-        this.bitmap = bitmap;
-    }
-
-    public boolean isInitialLoadDone() {
-        return initialLoadDone;
-    }
-
-    public void setInitialLoadDone(boolean initialLoadDone) {
-        this.initialLoadDone = initialLoadDone;
-    }
-}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java
deleted file mode 100644
index e5fd5d3..0000000
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.developerfromjokela.motioneyeclient.classes;
-
-import com.google.gson.annotations.SerializedName;
-
-public class ErrorResponse {
-    @SerializedName("prompt")
-    private boolean prompt;
-    @SerializedName("error")
-    private String error;
-
-    public ErrorResponse(boolean prompt, String error) {
-        this.prompt = prompt;
-        this.error = error;
-    }
-
-    public boolean isPrompt() {
-        return prompt;
-    }
-
-    public void setPrompt(boolean prompt) {
-        this.prompt = prompt;
-    }
-
-    public String getError() {
-        return error;
-    }
-
-    public void setError(String error) {
-        this.error = error;
-    }
-}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
index c15cbe4..bb16475 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
@@ -18,42 +18,27 @@ package com.developerfromjokela.motioneyeclient.ui.activities;
 
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
-import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Handler;
 import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.GridLayoutManager;
-import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
 import android.util.Log;
-import android.util.Range;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ProgressBar;
-import android.widget.TextView;
 
 import com.developerfromjokela.motioneyeclient.R;
 import com.developerfromjokela.motioneyeclient.api.ApiInterface;
 import com.developerfromjokela.motioneyeclient.api.MotionEyeHelper;
 import com.developerfromjokela.motioneyeclient.api.ServiceGenerator;
 import com.developerfromjokela.motioneyeclient.classes.Camera;
-import com.developerfromjokela.motioneyeclient.classes.CameraImage;
-import com.developerfromjokela.motioneyeclient.classes.CameraImageError;
-import com.developerfromjokela.motioneyeclient.classes.CameraImageFrame;
 import com.developerfromjokela.motioneyeclient.classes.Cameras;
 import com.developerfromjokela.motioneyeclient.classes.Device;
-import com.developerfromjokela.motioneyeclient.classes.ErrorResponse;
 import com.developerfromjokela.motioneyeclient.database.Source;
 import com.developerfromjokela.motioneyeclient.other.Utils;
 import com.developerfromjokela.motioneyeclient.ui.adapters.HttpCamerasAdapter;
@@ -64,22 +49,12 @@ import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 
 import java.io.IOException;
-import java.io.InputStream;
-import java.lang.annotation.Annotation;
-import java.net.URL;
-import java.net.URLConnection;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
 import java.util.Date;
-import java.util.List;
-import java.util.Map;
 
 import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.Callback;
-import retrofit2.Converter;
 import retrofit2.Response;
-import retrofit2.Retrofit;
 
 import static android.app.DownloadManager.Request.NETWORK_MOBILE;
 
@@ -89,9 +64,6 @@ public class CameraViewer extends AppCompatActivity {
     private Device device;
     private String ID;
     private Source source;
-    private List<CameraImageFrame> cameraImageFrames = new ArrayList<>();
-    private boolean sleeping = false;
-    private GridLayoutManager manager;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -110,6 +82,8 @@ public class CameraViewer extends AppCompatActivity {
         source = new Source(this);
         if (intent.getExtras() != null) {
             ID = intent.getStringExtra("DeviceId");
+
+
         } else {
             finish();
         }
@@ -119,35 +93,22 @@ public class CameraViewer extends AppCompatActivity {
     @Override
     public void onResume() {
         super.onResume();
-        sleeping = false;
         try {
             device = source.get(ID);
-
             setTitle(device.getDeviceName());
             Log.e(CameraViewer.class.getSimpleName(), new Gson().toJson(device));
             RecyclerView recyclerView = findViewById(R.id.cameras);
-            manager = new GridLayoutManager(this, 1);
-            recyclerView.setLayoutManager(manager);
-            recyclerView.setItemAnimator(null);
-            for (Camera camera : device.getCameras()) {
-                CameraImageFrame frame = new CameraImageFrame(camera, device, null, false);
-                cameraImageFrames.add(frame);
-            }
-            adapter = new HttpCamerasAdapter(new HttpCamerasAdapter.CamerasAdapterListener() {
+            recyclerView.setLayoutManager(new GridLayoutManager(this, 1));
+            adapter = new HttpCamerasAdapter(this, new HttpCamerasAdapter.CamerasAdapterListener() {
                 @Override
-                public void onImageClick(int position, CameraImageFrame camera) {
+                public void onImageClick(int position, Camera camera) {
                     Intent fullscreen = new Intent(CameraViewer.this, FullCameraViewer.class);
                     fullscreen.putExtra("DeviceId", ID);
-                    fullscreen.putExtra("Camera", new Gson().toJson(camera.getCamera()));
+                    fullscreen.putExtra("Camera", new Gson().toJson(camera));
                     startActivity(fullscreen);
                 }
 
-                @Override
-                public void onRefreshRequest(int position, CameraImageFrame cameraImageFrame) {
-                    getRunnableForCamera(position).run();
-                }
-
-            }, cameraImageFrames);
+            }, device);
             recyclerView.setAdapter(adapter);
             adapter.notifyDataSetChanged();
             String baseurl;
@@ -207,15 +168,6 @@ public class CameraViewer extends AppCompatActivity {
                                                 device.setMotioneyeVersion(paramValue);
 
                                         }
-
-                                        cameraImageFrames.clear();
-
-                                        for (Camera camera : device.getCameras()) {
-                                            CameraImageFrame frame = new CameraImageFrame(camera, device, null, false);
-                                            cameraImageFrames.add(frame);
-                                            getRunnableForCamera(cameraImageFrames.size() - 1).run();
-                                        }
-
                                         adapter.notifyDataSetChanged();
                                         setTitle(device.getDeviceName());
 
@@ -223,15 +175,9 @@ public class CameraViewer extends AppCompatActivity {
 
 
                                     } catch (IOException e) {
-                                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
-                                            cameraImageFrame.setError(new CameraImageError("motioneye_error5", e.getMessage(), true));
-                                        }
-                                        adapter.notifyDataSetChanged();
+                                        e.printStackTrace();
                                     } catch (Exception e) {
-                                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
-                                            cameraImageFrame.setError(new CameraImageError("motioneye_error6", e.getMessage(), true));
-                                        }
-                                        adapter.notifyDataSetChanged();
+                                        e.printStackTrace();
                                     }
 
 
@@ -241,28 +187,15 @@ public class CameraViewer extends AppCompatActivity {
 
                             @Override
                             public void onFailure(Call<ResponseBody> call, Throwable t) {
-                                for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
-                                    cameraImageFrame.setError(new CameraImageError("motioneye_error2", t.getMessage(), true));
-                                }
-                                adapter.notifyDataSetChanged();
-                            }
-                        });
-                    } else {
 
-                        ErrorResponse message = new Gson().fromJson(response.errorBody().charStream(), ErrorResponse.class);
-                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
-                            cameraImageFrame.setError(new CameraImageError("motioneye_error4", message.getError(), true));
                         }
-                        adapter.notifyDataSetChanged();
+                        });
                     }
                 }
 
                 @Override
                 public void onFailure(Call<Cameras> call, Throwable t) {
-                    for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
-                        cameraImageFrame.setError(new CameraImageError("motioneye_error3", t.getMessage(), true));
-                    }
-                    adapter.notifyDataSetChanged();
+
                 }
             });
 
@@ -270,20 +203,23 @@ public class CameraViewer extends AppCompatActivity {
         } catch (Exception e) {
             e.printStackTrace();
         }
-
+        if (adapter != null)
+            adapter.onResume();
 
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        sleeping = true;
+        if (adapter != null)
+            adapter.onPause();
     }
 
     @Override
     public void onDestroy() {
         super.onDestroy();
-        sleeping = true;
+        if (adapter != null)
+            adapter.onDestroy();
     }
 
     @Override
@@ -305,144 +241,6 @@ public class CameraViewer extends AppCompatActivity {
         }
     }
 
-    private Runnable getRunnableForCamera(int position) {
-        return new Runnable() {
-            @Override
-            public void run() {
-                MotionEyeHelper helper = new MotionEyeHelper();
-                helper.setUsername(device.getUser().getUsername());
-                try {
-                    helper.setPasswordHash(device.getUser().getPassword());
-                } catch (NoSuchAlgorithmException e) {
-                    e.printStackTrace();
-                }
-
-
-                CameraImageFrame frame = cameraImageFrames.get(position);
-                String cameraId = frame.getCamera().getId();
-                String serverurl;
-                if (device.getDdnsURL().length() > 5) {
-                    if ((Utils.getNetworkType(CameraViewer.this)) == NETWORK_MOBILE) {
-                        serverurl = device.getDDNSUrlCombo();
-                    } else if (device.getWlan().networkId == Utils.getCurrentWifiNetworkId(CameraViewer.this)) {
-                        serverurl = device.getDeviceUrlCombo();
-
-                    } else {
-                        serverurl = device.getDDNSUrlCombo();
-
-                    }
-                } else {
-                    serverurl = device.getDeviceUrlCombo();
-
-                }
-                String baseurl;
-                if (!serverurl.contains("://"))
-                    baseurl = removeSlash("http://" + serverurl);
-                else
-                    baseurl = removeSlash(serverurl);
-
-                String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
-                url = helper.addAuthParams("GET", url, "");
-                String finalUrl = url;
-                boolean visible = position >= manager.findFirstVisibleItemPosition() && position <= manager.findLastVisibleItemPosition();
-                if (!sleeping) {
-                    if (visible)
-                        new DownloadImageFromInternet(position, frame, this).execute(finalUrl);
-                    if (!visible)
-                        new Handler().postDelayed(this, Utils.imageRefreshInterval); //Start timer after 1 sec
-                }
-
-            }
-        };
-    }
-
-
-    private class DownloadImageFromInternet extends AsyncTask<String, Void, CameraImage> {
-        Runnable timerRunnable;
-        CameraImageFrame camera;
-        int position;
-        Handler timeHandler;
-
-        public DownloadImageFromInternet(int position, CameraImageFrame camera, Runnable timerRunnable) {
-            this.camera = camera;
-            this.timerRunnable = timerRunnable;
-            this.position = position;
-            timeHandler = new Handler();
-        }
-
-        protected void onPreExecute() {
-        }
-
-        protected CameraImage doInBackground(String... urls) {
-
-            String imageURL = urls[0];
-
-
-            try {
-                URL url = new URL(imageURL);
-                URLConnection connection = url.openConnection();
-                Map<String, List<String>> fps = connection.getHeaderFields();
-                InputStream in = url.openStream();
-                final Bitmap decoded = BitmapFactory.decodeStream(in);
-                in.close();
-                for (Map.Entry<String, List<String>> key : fps.entrySet()) {
-                    for (String string : key.getValue()) {
-                        if (string.contains("capture_fps")) {
-                            double d = Double.parseDouble(string.split("capture_fps_" + camera.getCamera().getId() + "=")[1].split(";")[0].trim());
-                            String humanReadableFPS = String.valueOf(Math.round((int) d));
-                            return new CameraImage(humanReadableFPS, decoded, true);
-
-                        }
-
-                    }
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-                return new CameraImage(false, e.getMessage());
-            }
-            return null;
-
-        }
-
-        protected void onPostExecute(CameraImage result) {
-
-            camera.setError(null);
-            if (result.isSuccessful()) {
-                if (!camera.isInitialLoadDone()) {
-                    camera.setInitialLoadDone(true);
-                }
-                camera.setBitmap(result.getBitmap());
-                List<Long> time = camera.getTimes();
-
-                if (time.size() == Utils.fpsLen) {
-
-                    long streamingFps = time.size() * 1000 / (time.get(time.size() - 1) - time.get(0));
-                    int fpsDeliv = Math.round(streamingFps);
-                    camera.setFrameRateText((fpsDeliv + "/" + result.getFps() + " fps"));
-
-                }
-
-                long timeNow = new Date().getTime();
-                time.add(timeNow);
-                if (time.size() > Utils.fpsLen) {
-                    time.remove(0);
-                }
-
-                if (!isFinishing()) {
-                    timeHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
-                }
-
-            } else {
-                camera.setInitialLoadDone(false);
-                camera.setError(new CameraImageError("motioneye_err1", result.getErrorString(), true));
-            }
-
-            adapter.notifyItemChanged(position);
-
-        }
-    }
-
-
 
 
     private static String removeSlash(String url) {
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
index 6f84b75..bba9d3b 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
@@ -91,15 +91,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     private String baseurl;
     private Device device;
     private Camera camera;
-    private ImageView cameraImage;
-    private LinearLayout loadingBar;
-    private RelativeLayout cameraFrame;
-    private LinearLayout bottomBar;
-    private LinearLayout topBar;
-    private TextView fps;
-    private ProgressBar loadingCircle;
-    private List<Long> time;
-    private String finalUrl;
+
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -110,13 +102,13 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
         getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                 WindowManager.LayoutParams.FLAG_FULLSCREEN);
         setContentView(R.layout.activity_full_camera_viewer);
-        cameraImage = findViewById(R.id.cameraFullImage);
-        loadingBar = findViewById(R.id.progressBar);
-        cameraFrame = findViewById(R.id.cameraFrame);
-        bottomBar = findViewById(R.id.bottomBar);
-        topBar = findViewById(R.id.topBar);
-        fps = findViewById(R.id.cameraFPS);
-        loadingCircle = findViewById(R.id.progressBar2);
+        ImageView cameraImage = findViewById(R.id.cameraFullImage);
+        LinearLayout loadingBar = findViewById(R.id.progressBar);
+        RelativeLayout cameraFrame = findViewById(R.id.cameraFrame);
+        LinearLayout bottomBar = findViewById(R.id.bottomBar);
+        LinearLayout topBar = findViewById(R.id.topBar);
+        TextView fps = findViewById(R.id.cameraFPS);
+        ProgressBar loadingCircle = findViewById(R.id.progressBar2);
         TextView cameraName = findViewById(R.id.cameraName);
         RecyclerView actions = findViewById(R.id.actions);
         LinearLayout joystick = findViewById(R.id.dircontrols);
@@ -212,7 +204,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                         }
                     }
                 });
-                time = new ArrayList<>();
+                List<Long> time = new ArrayList<>();
 
                 Device finalDevice = device;
                 timerRunnable = new Runnable() {
@@ -251,7 +243,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                 };
                 String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
                 url = helper.addAuthParams("GET", url, "");
-                finalUrl = url;
+                String finalUrl = url;
                 new DownloadImageFromInternet(cameraImage, loadingBar, fps, status, loadingCircle, camera, time, cameraFrame).execute(finalUrl);
 
 
@@ -270,9 +262,8 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     }
 
     @Override
-    public void onActionClicked(String action, View button) {
+    public void onActionClicked(int position, String action, View button) {
 
-        Log.e("FCV", "Action clicked");
         try {
             String url = baseurl + "/action/" + camera.getId() + "/" + action + "/?_=" + new Date().getTime();
             MotionEyeHelper helper = new MotionEyeHelper();
@@ -284,9 +275,6 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
             apiInterface.peformAction(url).enqueue(new Callback<ActionStatus>() {
                 @Override
                 public void onResponse(Call<ActionStatus> call, Response<ActionStatus> response) {
-                    if (response.body() != null && response.body().getStatus() != 0)
-                        Toast.makeText(FullCameraViewer.this, getString(R.string.task_failed, String.valueOf(response.body().getStatus())), Toast.LENGTH_SHORT).show();
-
                     button.setEnabled(true);
 
                 }
@@ -294,7 +282,8 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                 @Override
                 public void onFailure(Call<ActionStatus> call, Throwable t) {
                     button.setEnabled(true);
-                    Toast.makeText(FullCameraViewer.this, t.getMessage(), Toast.LENGTH_LONG).show();
+
+                    Toast.makeText(FullCameraViewer.this, t.getMessage(), Toast.LENGTH_SHORT).show();
                 }
             });
         } catch (NoSuchAlgorithmException e) {
@@ -476,8 +465,6 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     public void onResume() {
         super.onResume();
         attached = true;
-        new DownloadImageFromInternet(cameraImage, loadingBar, fps, status, loadingCircle, camera, time, cameraFrame).execute(finalUrl);
-
     }
 
     @Override
@@ -536,19 +523,19 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
             if (actionString.contains("up")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 up.setVisibility(View.VISIBLE);
-                up.setOnClickListener(v -> listener.onActionClicked("up", up));
+                up.setOnClickListener(v -> listener.onActionClicked(-1, "up", up));
             } else if (actionString.contains("right")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 right.setVisibility(View.VISIBLE);
-                right.setOnClickListener(v -> listener.onActionClicked("right", right));
+                right.setOnClickListener(v -> listener.onActionClicked(-1, "right", right));
             } else if (actionString.contains("down")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 down.setVisibility(View.VISIBLE);
-                down.setOnClickListener(v -> listener.onActionClicked("down", down));
+                down.setOnClickListener(v -> listener.onActionClicked(-1, "down", down));
             } else if (actionString.contains("left")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 left.setVisibility(View.VISIBLE);
-                left.setOnClickListener(v -> listener.onActionClicked("left", left));
+                left.setOnClickListener(v -> listener.onActionClicked(-1, "left", left));
             }
         }
         if (left.getVisibility() == View.GONE && right.getVisibility() == View.GONE)
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
index ba9f79d..52c5dad 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
@@ -20,7 +20,6 @@ import android.content.Context;
 import android.support.v7.widget.AppCompatImageView;
 import android.support.v7.widget.CardView;
 import android.support.v7.widget.RecyclerView;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -130,16 +129,14 @@ public class ActionsAdapter extends RecyclerView.Adapter<ActionsAdapter.ActionsV
         holder.action.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Log.e("AA", "Action clicked");
-                listener.onActionClicked(actionString, v);
+                listener.onActionClicked(position, actionString, v);
             }
         });
-
     }
 
     public interface ActionsAdapterListener {
 
-        void onActionClicked(String action, View button);
+        void onActionClicked(int position, String action, View button);
     }
 
     @Override
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
index 8de2c6b..3a186c4 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
@@ -21,10 +21,8 @@ import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.AsyncTask;
 import android.os.Handler;
-import android.support.annotation.NonNull;
 import android.support.v7.widget.CardView;
 import android.support.v7.widget.RecyclerView;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -38,7 +36,6 @@ import com.developerfromjokela.motioneyeclient.R;
 import com.developerfromjokela.motioneyeclient.api.MotionEyeHelper;
 import com.developerfromjokela.motioneyeclient.classes.Camera;
 import com.developerfromjokela.motioneyeclient.classes.CameraImage;
-import com.developerfromjokela.motioneyeclient.classes.CameraImageFrame;
 import com.developerfromjokela.motioneyeclient.classes.Device;
 import com.developerfromjokela.motioneyeclient.other.Utils;
 
@@ -50,15 +47,17 @@ import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
 
 import static android.app.DownloadManager.Request.NETWORK_MOBILE;
 
 public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.CamerasViewHolder> {
 
+    private Context mContext;
     private CamerasAdapterListener listener;
-    private List<CameraImageFrame> cameraImageFrames;
+    private Device device;
 
+    private boolean attached = true;
+    private Handler timerHandler = new Handler();
 
 
     public class CamerasViewHolder extends RecyclerView.ViewHolder {
@@ -69,11 +68,9 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
         ProgressBar progressBar;
         Button tryagain;
         CardView itemCard;
-        boolean attached;
 
         CamerasViewHolder(View itemView) {
             super(itemView);
-
             cameraImage = itemView.findViewById(R.id.cameraImage);
             loadingBar = itemView.findViewById(R.id.cameraBar);
             itemCard = itemView.findViewById(R.id.itemCard);
@@ -81,25 +78,15 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
             status = itemView.findViewById(R.id.status);
             progressBar = itemView.findViewById(R.id.progressar);
             tryagain = itemView.findViewById(R.id.tryagain);
-            attached = false;
         }
-
-
     }
 
-    public HttpCamerasAdapter(CamerasAdapterListener listener, List<CameraImageFrame> cameraImageFrames) {
+    public HttpCamerasAdapter(Context mContext, CamerasAdapterListener listener, Device device) {
+        this.mContext = mContext;
         this.listener = listener;
-        this.cameraImageFrames = cameraImageFrames;
-    }
 
-    @Override
-    public void onViewDetachedFromWindow(@NonNull CamerasViewHolder holder) {
-        holder.attached = false;
-    }
+        this.device = device;
 
-    @Override
-    public void onViewAttachedToWindow(@NonNull CamerasViewHolder holder) {
-        holder.attached = true;
     }
 
     @Override
@@ -109,64 +96,229 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
     }
 
     @Override
-    public void onBindViewHolder(final HttpCamerasAdapter.CamerasViewHolder holder, int position) {
-        final CameraImageFrame camera = cameraImageFrames.get(position);
-
-        if (camera.getError() != null) {
-            holder.cameraImage.setVisibility(View.GONE);
-            holder.fps.setVisibility(View.GONE);
-            holder.loadingBar.setVisibility(View.VISIBLE);
-            holder.progressBar.setVisibility(View.GONE);
-            holder.tryagain.setVisibility(camera.getError().isDisplayRetry() ? View.VISIBLE : View.GONE);
-            holder.status.setText(camera.getError().getErrorCause());
-
-
-        } else {
-            if (camera.getBitmap() != null && camera.isInitialLoadDone()) {
-                holder.loadingBar.setVisibility(View.GONE);
-                holder.cameraImage.setVisibility(View.VISIBLE);
-                holder.fps.setVisibility(View.VISIBLE);
-                holder.cameraImage.setImageBitmap(camera.getBitmap());
-                holder.fps.setText(camera.getFrameRateText());
-            } else {
-                holder.cameraImage.setVisibility(View.GONE);
-                holder.fps.setVisibility(View.GONE);
-                holder.loadingBar.setVisibility(View.VISIBLE);
-                holder.progressBar.setVisibility(View.VISIBLE);
-                holder.status.setText(R.string.loading);
-            }
-        }
+    public void onBindViewHolder(final HttpCamerasAdapter.CamerasViewHolder holder, final int position) {
+        boolean loaded = false;
+        final Camera camera = device.getCameras().get(position);
+        holder.cameraImage.setId(Integer.valueOf(camera.getId()));
+        holder.loadingBar.setId(Integer.valueOf(camera.getId()) + 4495);
+
+        int framerate = Integer.valueOf(camera.getFramerate());
+        List<Long> time = new ArrayList<>();
+        Runnable timerRunnable = new Runnable() {
+            @Override
+            public void run() {
+                // Here you can update your adapter data
+                MotionEyeHelper helper = new MotionEyeHelper();
+                helper.setUsername(device.getUser().getUsername());
+                try {
+                    helper.setPasswordHash(device.getUser().getPassword());
+                } catch (NoSuchAlgorithmException e) {
+                    e.printStackTrace();
+                }
+
+                String cameraId = camera.getId();
+                String serverurl;
+                if (device.getDdnsURL().length() > 5) {
+                    if ((Utils.getNetworkType(mContext)) == NETWORK_MOBILE) {
+                        serverurl = device.getDDNSUrlCombo();
+                    } else if (device.getWlan().networkId == Utils.getCurrentWifiNetworkId(mContext)) {
+                        serverurl = device.getDeviceUrlCombo();
+
+                    } else {
+                        serverurl = device.getDDNSUrlCombo();
+
+                    }
+                } else {
+                    serverurl = device.getDeviceUrlCombo();
+
+                }
+                String baseurl;
+                if (!serverurl.contains("://"))
+                    baseurl = removeSlash("http://" + serverurl);
+                else
+                    baseurl = removeSlash(serverurl);
+
+                String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
+                url = helper.addAuthParams("GET", url, "");
+                String finalUrl = url;
+
+                new DownloadImageFromInternet(holder, camera, this, time, loaded).execute(finalUrl);
 
 
+            }
+        };
+
         holder.tryagain.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                listener.onRefreshRequest(position, camera);
+                timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
+
             }
         });
+        timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
 
-        holder.itemView.setOnClickListener(new View.OnClickListener() {
+        holder.itemCard.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 listener.onImageClick(position, camera);
             }
         });
-
-
     }
 
     public interface CamerasAdapterListener {
 
-        void onImageClick(int position, CameraImageFrame cameraImageFrame);
-
-        void onRefreshRequest(int position, CameraImageFrame cameraImageFrame);
+        void onImageClick(int position, Camera camera);
     }
 
     @Override
     public int getItemCount() {
-        return cameraImageFrames.size();
+        return device.getCameras().size();
     }
 
+    private static String removeSlash(String url) {
+        if (!url.endsWith("/"))
+            return url;
+        String[] parts = url.split("/");
+
+        return parts[0];
+    }
+
+    private class DownloadImageFromInternet extends AsyncTask<String, Void, CameraImage> {
+        ImageView imageView;
+        LinearLayout progressBar;
+        ProgressBar loading;
+        TextView fps, status;
+        Camera camera;
+        boolean loaded;
+        Runnable timerRunnable;
+        Button tryagain;
+        List<Long> time;
+
+        public DownloadImageFromInternet(CamerasViewHolder viewholder, Camera camera, Runnable timerRunnable, List<Long> time, boolean loaded) {
+            this.imageView = viewholder.cameraImage;
+            this.progressBar = viewholder.loadingBar;
+            this.loaded = loaded;
+            this.fps = viewholder.fps;
+            this.loading = viewholder.progressBar;
+            this.status = viewholder.status;
+            this.camera = camera;
+            this.timerRunnable = timerRunnable;
+            this.tryagain = viewholder.tryagain;
+            this.time = time;
+
+        }
+
+        protected void onPreExecute() {
+
+            status.setText(R.string.loading);
+            loading.setVisibility(View.VISIBLE);
+            tryagain.setVisibility(View.GONE);
+        }
+
+        protected CameraImage doInBackground(String... urls) {
+            String imageURL = urls[0];
+
+
+            try {
+                URL url = new URL(imageURL);
+                URLConnection connection = url.openConnection();
+                Map<String, List<String>> fps = connection.getHeaderFields();
+                String humanReadableFPS = "0";
+                InputStream in = url.openStream();
+                final Bitmap decoded = BitmapFactory.decodeStream(in);
+                in.close();
+                for (Map.Entry<String, List<String>> key : fps.entrySet()) {
+                    for (String string : key.getValue()) {
+                        if (string.contains("capture_fps")) {
+                            int ii = 0;
+
+                            double d = Double.parseDouble(string.split("capture_fps_" + camera.getId() + "=")[1].split(";")[0].trim());
+                            ii = (int) d;
+                            humanReadableFPS = String.valueOf(Math.round(ii));
+                            return new CameraImage(humanReadableFPS, decoded, true);
+
+                        }
+
+                    }
+                }
+
+
+            } catch (Exception e) {
+                e.printStackTrace();
+                return new CameraImage(false, e.getMessage());
+            }
+            return null;
+
+        }
+
+        protected void onPostExecute(CameraImage result) {
+            if (result.isSuccessful()) {
+                if (!loaded) {
+                    progressBar.setVisibility(View.GONE);
+
+                    imageView.setVisibility(View.VISIBLE);
+                    loaded = true;
+
+                }
+                imageView.setImageBitmap(result.getBitmap());
+                cameraViewVisible(loaded, progressBar, imageView);
+
+                if (time.size() == Utils.fpsLen) {
+
+                    long streamingFps = time.size() * 1000 / (time.get(time.size() - 1) - time.get(0));
+                    int fpsDeliv = Math.round(streamingFps);
+                    fps.setText(fpsDeliv + "/" + result.getFps() + " fps");
+
+                }
+
+                long timeNow = new Date().getTime();
+                time.add(timeNow);
+                if (time.size() > Utils.fpsLen) {
+                    time.remove(0);
+                }
+
+                if (attached) {
+                    timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
+
+                }
+
+            } else {
+                loaded = false;
+                imageView.setVisibility(View.GONE);
+                progressBar.setVisibility(View.VISIBLE);
+                loading.setVisibility(View.GONE);
+                tryagain.setVisibility(View.VISIBLE);
+                status.setText(result.getErrorString());
+            }
+
+
+        }
+    }
+
+
+    public void onPause() {
+        attached = false;
+    }
+
+    public void onResume() {
+        attached = true;
+        notifyDataSetChanged();
+    }
+
+    public void onDestroy() {
+        attached = false;
+    }
+
+
+    private void cameraViewVisible(boolean loaded, LinearLayout progressBar, ImageView imageView) {
+        if (!loaded) {
+            progressBar.setVisibility(View.GONE);
+            imageView.setVisibility(View.VISIBLE);
+            loaded = true;
+
+
+        }
+    }
 
 
 }
