diff --git a/app/src/main/java/com/apk/editor/MainActivity.java b/app/src/main/java/com/apk/editor/MainActivity.java
index db56c15..6da1fc7 100644
--- a/app/src/main/java/com/apk/editor/MainActivity.java
+++ b/app/src/main/java/com/apk/editor/MainActivity.java
@@ -8,11 +8,12 @@ import androidx.appcompat.widget.AppCompatImageButton;
 
 import com.apk.editor.activities.SettingsActivity;
 import com.apk.editor.fragments.ApplicationsFragment;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.BottomNavView;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
 import com.google.android.material.navigation.NavigationBarView;
 
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -22,7 +23,7 @@ public class MainActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         // Set App Language
-        APKEditorUtils.setLanguage(this);
+        sUtils.setLanguage(this);
         setContentView(R.layout.activity_main);
 
         BottomNavigationView mBottomNav = findViewById(R.id.bottom_navigation);
diff --git a/app/src/main/java/com/apk/editor/activities/APKInstallerActivity.java b/app/src/main/java/com/apk/editor/activities/APKInstallerActivity.java
index 7b7d1dd..6a453d5 100644
--- a/app/src/main/java/com/apk/editor/activities/APKInstallerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/APKInstallerActivity.java
@@ -17,16 +17,11 @@ import androidx.appcompat.widget.LinearLayoutCompat;
 import androidx.viewpager.widget.ViewPager;
 
 import com.apk.editor.R;
-import com.apk.editor.adapters.PagerAdapter;
 import com.apk.editor.fragments.APKDetailsFragment;
 import com.apk.editor.fragments.CertificateFragment;
 import com.apk.editor.fragments.ManifestFragment;
 import com.apk.editor.fragments.PermissionsFragment;
-import com.apk.editor.utils.APKCertificate;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.ExternalAPKData;
 import com.apk.editor.utils.SplitAPKInstaller;
@@ -37,9 +32,12 @@ import com.google.android.material.tabs.TabLayout;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
+
+import in.sunilpaulmathew.sCommon.Adapters.sPagerAdapter;
+import in.sunilpaulmathew.sCommon.Utils.sAPKCertificateUtils;
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 27, 2021
@@ -76,8 +74,8 @@ public class APKInstallerActivity extends AppCompatActivity {
         }
     }
 
-    private AsyncTasks manageInstallation(Uri uri, Activity activity) {
-        return new AsyncTasks() {
+    private sExecutor manageInstallation(Uri uri, Activity activity) {
+        return new sExecutor() {
             private ProgressDialog mProgressDialog;
 
             @Override
@@ -86,7 +84,7 @@ public class APKInstallerActivity extends AppCompatActivity {
                 mProgressDialog.setMessage(activity.getString(R.string.loading));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
-                APKEditorUtils.delete(getExternalFilesDir("APK").getAbsolutePath());
+                sUtils.delete(getExternalFilesDir("APK"));
                 mExtension = ExternalAPKData.getExtension(uri, activity);
                 mFile = new File(getExternalFilesDir("APK"), "tmp." + mExtension);
                 Common.getAPKList().clear();
@@ -94,14 +92,7 @@ public class APKInstallerActivity extends AppCompatActivity {
 
             @Override
             public void doInBackground() {
-                try (FileOutputStream outputStream = new FileOutputStream(mFile, false)) {
-                    InputStream inputStream = getContentResolver().openInputStream(uri);
-                    int read;
-                    byte[] bytes = new byte[8192];
-                    while ((read = inputStream.read(bytes)) != -1) {
-                        outputStream.write(bytes, 0, read);
-                    }
-                } catch (IOException ignored) {}
+                sUtils.copy(uri, mFile, activity);
                 try {
                     APKItems mAPKData = ExternalAPKData.getAPKData(mFile.getAbsolutePath(), activity);
                     if (mAPKData != null) {
@@ -120,8 +111,8 @@ public class APKInstallerActivity extends AppCompatActivity {
                         if (mAPKData.getManifest() != null) {
                             ExternalAPKData.setManifest(mAPKData.getManifest());
                         }
-                        if (APKCertificate.getCertificateDetails(mFile.getAbsolutePath(), activity) != null) {
-                            ExternalAPKData.setCertificate(APKCertificate.getCertificateDetails(mFile.getAbsolutePath(), activity));
+                        if (new sAPKCertificateUtils(mFile,null, activity).getCertificateDetails() != null) {
+                            ExternalAPKData.setCertificate(new sAPKCertificateUtils(mFile,null, activity).getCertificateDetails());
                         }
                         if (mAPKData.getVersionName() != null) {
                             ExternalAPKData.setVersionInfo(getString(R.string.version, mAPKData.getVersionName() + " (" + mAPKData.getVersionCode() + ")"));
@@ -132,7 +123,7 @@ public class APKInstallerActivity extends AppCompatActivity {
                         if (mAPKData.getMinSDKVersion() != null) {
                             ExternalAPKData.setMinSDKVersion(mAPKData.getMinSDKVersion(), activity);
                         }
-                        ExternalAPKData.setSize(getString(R.string.size, AppData.getAPKSize(mFile.length())) + " (" + mFile.length() + " bytes)");
+                        ExternalAPKData.setSize(getString(R.string.size, sAPKUtils.getAPKSize(mFile.getAbsolutePath())) + " (" + mFile.length() + " bytes)");
                     }
                 } catch (Exception ignored) {
                 }
@@ -146,7 +137,6 @@ public class APKInstallerActivity extends AppCompatActivity {
                 }
                 if (mFile.exists()) {
                     if (mName != null || mPackageName != null || mIcon != null) {
-                        ExternalAPKData.setAPKFile(mFile);
                         ExternalAPKData.isFMInstall(true);
                         loadAPKDetails(activity);
                     } else if (mExtension.equals("apkm") || mExtension.equals("apks") || mExtension.equals("xapk")) {
@@ -181,7 +171,7 @@ public class APKInstallerActivity extends AppCompatActivity {
     }
 
     private void loadAPKDetails(Activity activity) {
-        PagerAdapter adapter = new PagerAdapter(getSupportFragmentManager());
+        sPagerAdapter adapter = new sPagerAdapter(getSupportFragmentManager());
         try {
             if (mName != null) {
                 mAppName.setText(mName);
diff --git a/app/src/main/java/com/apk/editor/activities/APKSignActivity.java b/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
index 7d56380..3b61ad4 100644
--- a/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
@@ -14,7 +14,6 @@ import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.AppCompatImageButton;
 
 import com.apk.editor.R;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.Common;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
@@ -24,6 +23,8 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 19, 2021
  */
@@ -85,12 +86,12 @@ public class APKSignActivity extends AppCompatActivity {
     }
 
     private void setStatus() {
-        if (APKEditorUtils.getString("PrivateKey", null, this) != null) {
-            mKeySummary.setText(APKEditorUtils.getString("PrivateKey", null, this));
+        if (sUtils.getString("PrivateKey", null, this) != null) {
+            mKeySummary.setText(sUtils.getString("PrivateKey", null, this));
             mClearKey.setColorFilter(Color.RED);
             mClearKey.setVisibility(View.VISIBLE);
             mClearKey.setOnClickListener(v -> {
-                APKEditorUtils.saveString("PrivateKey", null, this);
+                sUtils.saveString("PrivateKey", null, this);
                 new File(getFilesDir(), "signing/APKEditor.pk8").delete();
                 mKeySummary.setText(getString(R.string.private_key_summary));
                 mClearKey.setVisibility(View.GONE);
@@ -99,12 +100,12 @@ public class APKSignActivity extends AppCompatActivity {
             mClearKey.setVisibility(View.GONE);
         }
 
-        if (APKEditorUtils.getString("RSATemplate", null, this) != null) {
-            mRSASummary.setText(APKEditorUtils.getString("RSATemplate", null, this));
+        if (sUtils.getString("RSATemplate", null, this) != null) {
+            mRSASummary.setText(sUtils.getString("RSATemplate", null, this));
             mClearRSA.setColorFilter(Color.RED);
             mClearRSA.setVisibility(View.VISIBLE);
             mClearRSA.setOnClickListener(v -> {
-                APKEditorUtils.saveString("RSATemplate", null, this);
+                sUtils.saveString("RSATemplate", null, this);
                 new File(getFilesDir(), "signing/APKEditor").delete();
                 mRSASummary.setText(getString(R.string.rsa_template_summary));
                 mClearRSA.setVisibility(View.GONE);
@@ -140,10 +141,10 @@ public class APKSignActivity extends AppCompatActivity {
                         })
                         .setPositiveButton(R.string.select, (dialog, id) -> {
                             if (requestCode == 0) {
-                                APKEditorUtils.saveString("PrivateKey", new File(getFilesDir(), "signing/APKEditor.pk8").getAbsolutePath(), this);
+                                sUtils.saveString("PrivateKey", new File(getFilesDir(), "signing/APKEditor.pk8").getAbsolutePath(), this);
                                 writeFile(new File(getFilesDir(), "signing/APKEditor.pk8"), uri);
                             } else if (requestCode == 1) {
-                                APKEditorUtils.saveString("RSATemplate", new File(getFilesDir(), "signing/APKEditor").getAbsolutePath(), this);
+                                sUtils.saveString("RSATemplate", new File(getFilesDir(), "signing/APKEditor").getAbsolutePath(), this);
                                 writeFile(new File(getFilesDir(), "signing/APKEditor"), uri);
                             }
 
diff --git a/app/src/main/java/com/apk/editor/activities/CreditsActivity.java b/app/src/main/java/com/apk/editor/activities/CreditsActivity.java
deleted file mode 100644
index c21a405..0000000
--- a/app/src/main/java/com/apk/editor/activities/CreditsActivity.java
+++ /dev/null
@@ -1,164 +0,0 @@
-package com.apk.editor.activities;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.graphics.Paint;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.widget.AppCompatImageButton;
-import androidx.recyclerview.widget.GridLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.apk.editor.BuildConfig;
-import com.apk.editor.R;
-import com.apk.editor.utils.APKEditorUtils;
-import com.google.android.material.snackbar.Snackbar;
-import com.google.android.material.textview.MaterialTextView;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 10, 2021
- */
-public class CreditsActivity extends AppCompatActivity {
-
-    private final ArrayList <RecycleViewItem> mData = new ArrayList<>();
-
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_credits);
-
-        AppCompatImageButton mBack = findViewById(R.id.back);
-        MaterialTextView mVersion = findViewById(R.id.version);
-        MaterialTextView mCopyright = findViewById(R.id.copyright);
-        RecyclerView mRecyclerView = findViewById(R.id.recycler_view);
-
-        mData.add(new RecycleViewItem("Willi Ye", "Kernel Adiutor", "https://github.com/Grarak/KernelAdiutor"));
-        mData.add(new RecycleViewItem("Hsiafan", "APK parser", "https://github.com/hsiafan/apk-parser"));
-        mData.add(new RecycleViewItem("Srikanth Reddy Lingala", "Zip4j", "https://github.com/srikanth-lingala/zip4j"));
-        if (APKEditorUtils.isFullVersion(this)) {
-            mData.add(new RecycleViewItem("Aefyr", "PseudoApkSigner", "https://github.com/Aefyr/PseudoApkSigner"));
-        }
-        mData.add(new RecycleViewItem("Connor Tumbleson", "Apktool", "https://github.com/iBotPeaches/Apktool/"));
-        mData.add(new RecycleViewItem("Ben Gruver", "smali/baksmali", "https://github.com/JesusFreke/smali/"));
-
-        mData.add(new RecycleViewItem("sunilpaulmathew", "Package Manager", "https://github.com/SmartPack/PackageManager"));
-        mData.add(new RecycleViewItem("Gospel Gilbert", "App Icon", "https://t.me/gilgreat0295"));
-        mData.add(new RecycleViewItem("Mohammed Qubati", "Arabic Translation", "https://t.me/Alqubati_MrK"));
-        mData.add(new RecycleViewItem("wushidi", "Chinese (Simplified) Translation", "https://t.me/wushidi"));
-        mData.add(new RecycleViewItem("fossdd", "German Translation", "https://chaos.social/@fossdd"));
-        mData.add(new RecycleViewItem("bruh", "Vietnamese Translation", null));
-        mData.add(new RecycleViewItem("Bruno", "French Translation", null));
-        mData.add(new RecycleViewItem("Miloš Koliáš", "Czech Translation", null));
-        mData.add(new RecycleViewItem("Mehmet Un", "Turkish Translation", null));
-        mData.add(new RecycleViewItem("Jander Mander", "Arabic Translation", null));
-        mData.add(new RecycleViewItem("Diego", "Spanish Translation", "https://github.com/sguinetti"));
-        mData.add(new RecycleViewItem("tommynok", "Russian Translation", null));
-        mData.add(new RecycleViewItem("Alexander Steiner", "Russian Translation", null));
-        mData.add(new RecycleViewItem("Hoa Gia Đại Thiếu", "Vietnamese Translation", null));
-        mData.add(new RecycleViewItem("mezysinc", "Portuguese (Brazilian) Translation", "https://github.com/mezysinc"));
-        mData.add(new RecycleViewItem("Andreaugustoqueiroz999", "Portuguese (Portugal) Translation", null));
-        mData.add(new RecycleViewItem("Dodi Studio", "Indonesian Translation", "null"));
-        mData.add(new RecycleViewItem("Cooky", "Polish Translation", null));
-
-        mRecyclerView.setLayoutManager(new GridLayoutManager(this, 1));
-        RecycleViewAdapter mRecycleViewAdapter = new RecycleViewAdapter(mData);
-        mRecyclerView.setAdapter(mRecycleViewAdapter);
-
-        mVersion.setText(getString(R.string.version, BuildConfig.VERSION_NAME));
-        mCopyright.setText(getString(R.string.copyright, "2021-2022, APK Explorer & Editor"));
-
-        mBack.setOnClickListener(v -> finish());
-    }
-
-    private static class RecycleViewAdapter extends RecyclerView.Adapter<RecycleViewAdapter.ViewHolder> {
-
-        private static ArrayList<RecycleViewItem> data;
-
-        public RecycleViewAdapter(ArrayList<RecycleViewItem> data) {
-            RecycleViewAdapter.data = data;
-        }
-
-        @NonNull
-        @Override
-        public RecycleViewAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-            View rowItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycle_view_credits, parent, false);
-            return new RecycleViewAdapter.ViewHolder(rowItem);
-        }
-
-        @SuppressLint("UseCompatLoadingForDrawables")
-        @Override
-        public void onBindViewHolder(@NonNull RecycleViewAdapter.ViewHolder holder, int position) {
-            holder.Title.setText(data.get(position).getTitle());
-            holder.Description.setText(data.get(position).getDescription());
-            holder.Description.setPaintFlags(holder.Description.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
-            holder.Description.setTextColor(APKEditorUtils.getThemeAccentColor(holder.Title.getContext()));
-            holder.Description.setOnClickListener(v -> {
-                if (data.get(position).getURL() != null) {
-                    APKEditorUtils.launchUrl(data.get(position).getURL(), (Activity) v.getContext());
-                }
-            });
-        }
-
-        @Override
-        public int getItemCount() {
-            return data.size();
-        }
-
-        public static class ViewHolder extends RecyclerView.ViewHolder {
-            private final MaterialTextView Title, Description;
-
-            public ViewHolder(View view) {
-                super(view);
-                this.Title = view.findViewById(R.id.title);
-                this.Description = view.findViewById(R.id.description);
-            }
-        }
-    }
-
-    private static class RecycleViewItem implements Serializable {
-
-        private final String mDescription, mTitle, mURL;
-
-        public RecycleViewItem(String title, String description, String url) {
-            this.mTitle = title;
-            this.mDescription = description;
-            this.mURL = url;
-        }
-
-        public String getTitle() {
-            return mTitle;
-        }
-
-        public String getDescription() {
-            return mDescription;
-        }
-
-        public String getURL() {
-            return mURL;
-        }
-
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-
-        Snackbar snackbar = Snackbar.make(findViewById(android.R.id.content), getString(R.string.credits_message), Snackbar.LENGTH_INDEFINITE);
-        snackbar.setAction(R.string.translate, v -> {
-            APKEditorUtils.launchUrl("https://poeditor.com/join/project?hash=QztabxONOp", this);
-            snackbar.dismiss();
-        });
-        snackbar.show();
-    }
-
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
index 9ab2750..1b063fb 100644
--- a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
@@ -20,9 +20,7 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.adapters.FilePickerAdapter;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -31,6 +29,10 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 05, 2021
  */
@@ -54,12 +56,15 @@ public class FilePickerActivity extends AppCompatActivity {
 
         mBack.setOnClickListener(v -> super.onBackPressed());
 
-        if (APKExplorer.isPermissionDenied(this)) {
+        if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,this)) {
             LinearLayout mPermissionLayout = findViewById(R.id.permission_layout);
             MaterialCardView mPermissionGrant = findViewById(R.id.grant_card);
             mPermissionLayout.setVisibility(View.VISIBLE);
             mRecyclerView.setVisibility(View.GONE);
-            mPermissionGrant.setOnClickListener(v -> APKExplorer.requestPermission(this));
+            mPermissionGrant.setOnClickListener(v -> sPermissionUtils.requestPermission(
+                    new String[] {
+                            android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                    },this));
             return;
         }
 
@@ -83,17 +88,17 @@ public class FilePickerActivity extends AppCompatActivity {
                         })
                         .setPositiveButton(Common.getFileToReplace() != null ? R.string.replace : R.string.select, (dialog, id) -> {
                             if (Common.getFileToReplace() != null) {
-                                APKEditorUtils.copy(APKExplorer.getData(getFilesList(), true, this).get(position), Common.getFileToReplace());
+                                sUtils.copy(new File(APKExplorer.getData(getFilesList(), true, this).get(position)), new File(Common.getFileToReplace()));
                                 Common.setFileToReplace(null);
                             }  else {
                                 new File(getFilesDir(), "signing").mkdirs();
                                 if (Common.hasPrivateKey()) {
-                                    APKEditorUtils.saveString("PrivateKey", APKExplorer.getData(getFilesList(), true, this).get(position), this);
-                                    APKEditorUtils.copy(APKExplorer.getData(getFilesList(), true, this).get(position), getFilesDir()+ "/signing/APKEditor.pk8");
+                                    sUtils.saveString("PrivateKey", APKExplorer.getData(getFilesList(), true, this).get(position), this);
+                                    sUtils.copy(new File(APKExplorer.getData(getFilesList(), true, this).get(position)), new File(getFilesDir(), "signing/APKEditor.pk8"));
                                     Common.setPrivateKeyStatus(false);
                                 } else {
-                                    APKEditorUtils.saveString("RSATemplate", APKExplorer.getData(getFilesList(), true, this).get(position), this);
-                                    APKEditorUtils.copy(APKExplorer.getData(getFilesList(), true, this).get(position), getFilesDir()+ "/signing/APKEditor");
+                                    sUtils.saveString("RSATemplate", APKExplorer.getData(getFilesList(), true, this).get(position), this);
+                                    sUtils.copy(new File(APKExplorer.getData(getFilesList(), true, this).get(position)), new File(getFilesDir(), "signing/APKEditor"));
                                     Common.setRSATemplateStatus(false);
                                 }
                             }
@@ -106,10 +111,10 @@ public class FilePickerActivity extends AppCompatActivity {
             PopupMenu popupMenu = new PopupMenu(this, mSortButton);
             Menu menu = popupMenu.getMenu();
             menu.add(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("az_order", true, this));
+                    .setChecked(sUtils.getBoolean("az_order", true, this));
             popupMenu.setOnMenuItemClickListener(item -> {
                 if (item.getItemId() == 0) {
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, this), this);
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, this), this);
                     reload(this);
                 }
                 return false;
@@ -129,7 +134,7 @@ public class FilePickerActivity extends AppCompatActivity {
     }
 
     private void reload(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
diff --git a/app/src/main/java/com/apk/editor/activities/ImageViewActivity.java b/app/src/main/java/com/apk/editor/activities/ImageViewActivity.java
index 37418a3..945daf1 100644
--- a/app/src/main/java/com/apk/editor/activities/ImageViewActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/ImageViewActivity.java
@@ -29,7 +29,6 @@ import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.card.MaterialCardView;
@@ -39,6 +38,10 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.io.IOException;
 
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -48,7 +51,7 @@ public class ImageViewActivity extends AppCompatActivity {
     private File mFile = null;
     public static final String PATH_INTENT = "path";
 
-    @SuppressLint("UseCompatLoadingForDrawables")
+    @SuppressLint({"UseCompatLoadingForDrawables", "Range"})
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -62,12 +65,15 @@ public class ImageViewActivity extends AppCompatActivity {
         String path = getIntent().getStringExtra(PATH_INTENT);
 
         if (getIntent().getData() != null) {
-            if (APKExplorer.isPermissionDenied(this)) {
+            if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, this)) {
                 LinearLayoutCompat mPermissionLayout = findViewById(R.id.permission_layout);
                 MaterialCardView mPermissionGrant = findViewById(R.id.grant_card);
                 mPermissionLayout.setVisibility(View.VISIBLE);
                 mMainLayout.setVisibility(View.GONE);
-                mPermissionGrant.setOnClickListener(v -> APKExplorer.requestPermission(this));
+                mPermissionGrant.setOnClickListener(v -> sPermissionUtils.requestPermission(
+                        new String[] {
+                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                        },this));
                 return;
             }
             Uri uri = getIntent().getData();
@@ -115,8 +121,8 @@ public class ImageViewActivity extends AppCompatActivity {
                 mTitle.setText(new File(path).getName());
                 mImage.setImageURI(APKExplorer.getIconFromPath(path));
             } else {
-                mTitle.setText(AppData.getAppName(Common.getAppID(), this));
-                mImage.setImageDrawable(AppData.getAppIcon(Common.getAppID(), this));
+                mTitle.setText(sPackageUtils.getAppName(Common.getAppID(), this));
+                mImage.setImageDrawable(sPackageUtils.getAppIcon(Common.getAppID(), this));
             }
             mMenu.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_export));
         }
@@ -159,12 +165,15 @@ public class ImageViewActivity extends AppCompatActivity {
                         .setNegativeButton(getString(R.string.cancel), (dialog, id) -> {
                         })
                         .setPositiveButton(getString(R.string.export), (dialog, id) -> {
-                            if (APKExplorer.isPermissionDenied(this)) {
-                                APKExplorer.requestPermission(this);
+                            if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,this)) {
+                                sPermissionUtils.requestPermission(
+                                        new String[] {
+                                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                                        },this);
                             } else {
                                 String mExportPath;
                                 if (Build.VERSION.SDK_INT < 29) {
-                                    APKEditorUtils.mkdir(Projects.getExportPath(this) + "/" + Common.getAppID());
+                                    sUtils.mkdir(new File(Projects.getExportPath(this), Common.getAppID()));
                                     mExportPath = Projects.getExportPath(this) + "/" + Common.getAppID();
                                 } else {
                                     mExportPath = Projects.getExportPath(this);
diff --git a/app/src/main/java/com/apk/editor/activities/InstallerActivity.java b/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
index 56747c7..87cfe5f 100644
--- a/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/InstallerActivity.java
@@ -13,7 +13,6 @@ import androidx.appcompat.widget.AppCompatImageButton;
 
 import com.apk.editor.R;
 import com.apk.editor.utils.APKData;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.recyclerViewItems.PackageItems;
@@ -23,6 +22,10 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -50,9 +53,9 @@ public class InstallerActivity extends AppCompatActivity {
         String path = getIntent().getStringExtra(PATH_INTENT);
         if (path != null) {
             try {
-                Common.setPackageName(Objects.requireNonNull(APKData.getAppID(path, this)).toString());
-                mTitle.setText(APKData.getAppName(path, this));
-                mIcon.setImageDrawable(APKData.getAppIcon(path, this));
+                Common.setPackageName(Objects.requireNonNull(sAPKUtils.getPackageName(path, this)).toString());
+                mTitle.setText(sAPKUtils.getAPKName(path, this));
+                mIcon.setImageDrawable(sAPKUtils.getAPKIcon(path, this));
             } catch (NullPointerException ignored) {}
         } else {
             Common.setPackageName(APKData.findPackageName(this));
@@ -83,11 +86,11 @@ public class InstallerActivity extends AppCompatActivity {
                     while (!isInterrupted()) {
                         Thread.sleep(500);
                         runOnUiThread(() -> {
-                            String installationStatus = APKEditorUtils.getString("installationStatus", "waiting", activity);
+                            String installationStatus = sUtils.getString("installationStatus", "waiting", activity);
                             if (installationStatus.equals("waiting")) {
                                 try {
                                     if (getIntent().getStringExtra(PATH_INTENT) != null) {
-                                        mStatus.setText(getString(R.string.installing, APKData.getAppName(getIntent().getStringExtra(PATH_INTENT), activity)));
+                                        mStatus.setText(getString(R.string.installing, sAPKUtils.getAPKName(getIntent().getStringExtra(PATH_INTENT), activity)));
                                     } else {
                                         mStatus.setText(getString(R.string.installing, getName()));
                                     }
@@ -98,8 +101,8 @@ public class InstallerActivity extends AppCompatActivity {
                                 mCancel.setVisibility(View.VISIBLE);
                                 if (installationStatus.equals(getString(R.string.installation_status_success))) {
                                     try {
-                                        mTitle.setText(AppData.getAppName(Common.getPackageName(), activity));
-                                        mIcon.setImageDrawable(AppData.getAppIcon(Common.getPackageName(), activity));
+                                        mTitle.setText(sPackageUtils.getAppName(Common.getPackageName(), activity));
+                                        mIcon.setImageDrawable(sPackageUtils.getAppIcon(Common.getPackageName(), activity));
                                         mOpen.setVisibility(View.VISIBLE);
                                     } catch (NullPointerException ignored) {}
                                 }
@@ -114,8 +117,8 @@ public class InstallerActivity extends AppCompatActivity {
     private CharSequence getName() {
         CharSequence name = null;
         for (String mAPKs : Common.getAPKList()) {
-            if (APKData.getAppName(mAPKs, this) != null) {
-                name = APKData.getAppName(mAPKs, this);
+            if (sAPKUtils.getAPKName(mAPKs, this) != null) {
+                name = sAPKUtils.getAPKName(mAPKs, this);
             }
         }
         return name;
@@ -124,8 +127,8 @@ public class InstallerActivity extends AppCompatActivity {
     private Drawable getIcon() {
         Drawable icon = null;
         for (String mAPKs : Common.getAPKList()) {
-            if (APKData.getAppIcon(mAPKs, this) != null) {
-                icon = APKData.getAppIcon(mAPKs, this);
+            if (sAPKUtils.getAPKIcon(mAPKs, this) != null) {
+                icon = sAPKUtils.getAPKIcon(mAPKs, this);
             }
         }
         return icon;
@@ -133,22 +136,22 @@ public class InstallerActivity extends AppCompatActivity {
 
     @Override
     public void onBackPressed() {
-        if (APKEditorUtils.getString("installationStatus", "waiting", this).equals("waiting")) {
+        if (sUtils.getString("installationStatus", "waiting", this).equals("waiting")) {
             return;
         }
-        if (APKEditorUtils.getString("installationStatus", "waiting", this).equals(getString(R.string.installation_status_success))) {
+        if (sUtils.getString("installationStatus", "waiting", this).equals(getString(R.string.installation_status_success))) {
             Common.getPackageData().add(new PackageItems(
-                    AppData.getAppName(Common.getPackageName(), this).toString(),
+                    sPackageUtils.getAppName(Common.getPackageName(), this).toString(),
                     Common.getPackageName(),
-                    AppData.getVersionName(AppData.getSourceDir(Common.getPackageName(), this), this),
-                    new File(AppData.getSourceDir(Common.getPackageName(), this)).length(),
+                    sAPKUtils.getVersionName(sPackageUtils.getSourceDir(Common.getPackageName(), this), this),
+                    new File(sPackageUtils.getSourceDir(Common.getPackageName(), this)).length(),
                     Objects.requireNonNull(AppData.getPackageInfo(Common.getPackageName(), this)).firstInstallTime,
                     Objects.requireNonNull(AppData.getPackageInfo(Common.getPackageName(), this)).lastUpdateTime,
-                    AppData.getAppIcon(Common.getPackageName(), this)
+                    sPackageUtils.getAppIcon(Common.getPackageName(), this)
             ));
         }
-        if (APKEditorUtils.exist(getCacheDir().getPath() + "/splits")) {
-            APKEditorUtils.delete(getCacheDir().getPath() + "/splits");
+        if (sUtils.exist(new File(getCacheDir(),"splits"))) {
+            sUtils.delete(new File(getCacheDir(),"splits"));
         }
         super.onBackPressed();
     }
diff --git a/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java b/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
index 500c8ff..dab146b 100644
--- a/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/InstallerFilePickerActivity.java
@@ -20,9 +20,7 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.adapters.InstallerFilePickerAdapter;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.SplitAPKInstaller;
 import com.google.android.material.card.MaterialCardView;
@@ -32,6 +30,10 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 21, 2021
  */
@@ -58,12 +60,15 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
 
         mBack.setOnClickListener(v -> super.onBackPressed());
 
-        if (APKExplorer.isPermissionDenied(this)) {
+        if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,this)) {
             LinearLayoutCompat mPermissionLayout = findViewById(R.id.permission_layout);
             MaterialCardView mPermissionGrant = findViewById(R.id.grant_card);
             mPermissionLayout.setVisibility(View.VISIBLE);
             mRecyclerView.setVisibility(View.GONE);
-            mPermissionGrant.setOnClickListener(v -> APKExplorer.requestPermission(this));
+            mPermissionGrant.setOnClickListener(v -> sPermissionUtils.requestPermission(
+                    new String[] {
+                            android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                    },this));
             return;
         }
 
@@ -100,7 +105,7 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
                 mRecycleViewAdapter.notifyItemChanged(position);
                 Common.getSelectCard().setVisibility(Common.getAPKList().isEmpty() ? View.GONE : View.VISIBLE);
             } else {
-                APKEditorUtils.snackbar(findViewById(android.R.id.content), getString(R.string.wrong_extension, ".apks/.apkm/.xapk"));
+                sUtils.snackBar(findViewById(android.R.id.content), getString(R.string.wrong_extension, ".apks/.apkm/.xapk")).show();
             }
         });
 
@@ -110,10 +115,10 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
             PopupMenu popupMenu = new PopupMenu(this, mSortButton);
             Menu menu = popupMenu.getMenu();
             menu.add(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("az_order", true, this));
+                    .setChecked(sUtils.getBoolean("az_order", true, this));
             popupMenu.setOnMenuItemClickListener(item -> {
                 if (item.getItemId() == 0) {
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, this), this);
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, this), this);
                     reload(this);
                 }
                 return false;
@@ -130,7 +135,7 @@ public class InstallerFilePickerActivity extends AppCompatActivity {
     }
 
     private void reload(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
diff --git a/app/src/main/java/com/apk/editor/activities/SettingsActivity.java b/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
index ff9c4a5..800a129 100644
--- a/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/SettingsActivity.java
@@ -1,6 +1,5 @@
 package com.apk.editor.activities;
 
-import android.annotation.SuppressLint;
 import android.os.Bundle;
 
 import androidx.annotation.Nullable;
@@ -19,7 +18,6 @@ import com.apk.editor.utils.AppSettings;
  */
 public class SettingsActivity extends AppCompatActivity {
 
-    @SuppressLint({"UseCompatLoadingForDrawables", "SetTextI18n"})
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
diff --git a/app/src/main/java/com/apk/editor/activities/StartActivity.java b/app/src/main/java/com/apk/editor/activities/StartActivity.java
index 69c4d51..dd57495 100644
--- a/app/src/main/java/com/apk/editor/activities/StartActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/StartActivity.java
@@ -10,13 +10,15 @@ import androidx.appcompat.app.AppCompatActivity;
 
 import com.apk.editor.MainActivity;
 import com.apk.editor.R;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.textview.MaterialTextView;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sThemeUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -27,7 +29,7 @@ public class StartActivity extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         // Initialize app theme
-        APKEditorUtils.initializeAppTheme(this);
+        sThemeUtils.initializeAppTheme(this);
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_start);
 
@@ -35,7 +37,7 @@ public class StartActivity extends AppCompatActivity {
         MaterialTextView mText = findViewById(R.id.text);
         mProgress = findViewById(R.id.progress_bar);
 
-        if (!APKEditorUtils.getBoolean("welcome_message", false, this)) {
+        if (!sUtils.getBoolean("welcome_message", false, this)) {
             mText.setVisibility(View.VISIBLE);
             mStartCard.setVisibility(View.VISIBLE);
             mProgress.setVisibility(View.GONE);
@@ -52,11 +54,11 @@ public class StartActivity extends AppCompatActivity {
     }
 
     private void acquireData(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
-                APKEditorUtils.saveBoolean("welcome_message", true, activity);
+                sUtils.saveBoolean("welcome_message", true, activity);
             }
 
             @Override
diff --git a/app/src/main/java/com/apk/editor/activities/TextEditorActivity.java b/app/src/main/java/com/apk/editor/activities/TextEditorActivity.java
index 55759d4..6ff9c36 100644
--- a/app/src/main/java/com/apk/editor/activities/TextEditorActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/TextEditorActivity.java
@@ -26,7 +26,6 @@ import androidx.core.content.FileProvider;
 import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.APKExplorer;
 import com.apk.editor.utils.AppData;
 import com.google.android.material.card.MaterialCardView;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -39,6 +38,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 25, 2021
  */
@@ -66,15 +68,18 @@ public class TextEditorActivity extends AppCompatActivity {
 
         String mPath = getIntent().getStringExtra(PATH_INTENT);
 
-        mText.setTextColor(APKEditorUtils.isDarkTheme(this) ? Color.WHITE : Color.BLACK);
+        mText.setTextColor(sUtils.isDarkTheme(this) ? Color.WHITE : Color.BLACK);
 
         if (getIntent().getData() != null) {
-            if (APKExplorer.isPermissionDenied(this)) {
+            if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,this)) {
                 LinearLayoutCompat mPermissionLayout = findViewById(R.id.permission_layout);
                 MaterialCardView mPermissionGrant = findViewById(R.id.grant_card);
                 mPermissionLayout.setVisibility(View.VISIBLE);
                 mMainLayout.setVisibility(View.GONE);
-                mPermissionGrant.setOnClickListener(v -> APKExplorer.requestPermission(this));
+                mPermissionGrant.setOnClickListener(v -> sPermissionUtils.requestPermission(
+                        new String[] {
+                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                        },this));
                 return;
             }
 
@@ -106,6 +111,7 @@ public class TextEditorActivity extends AppCompatActivity {
                     if (Build.VERSION.SDK_INT >= 29) {
                         mMenu.setVisibility(View.GONE);
                         mSave.setVisibility(View.GONE);
+                        mText.setFocusable(false);
                     } else {
                         mSave.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_save));
                         mMenu.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_dots));
@@ -126,10 +132,10 @@ public class TextEditorActivity extends AppCompatActivity {
                         .setCancelable(false)
                         .setPositiveButton(R.string.cancel, (dialogInterface, i) -> finish()).show();
             }
-        } else if (mPath != null && APKEditorUtils.exist(mPath)) {
+        } else if (mPath != null && sUtils.exist(new File(mPath))) {
             mTitle.setText(new File(mPath).getName());
-            mText.setText(APKEditorUtils.read(mPath));
-            mTextContents = APKEditorUtils.read(mPath);
+            mText.setText(sUtils.read(new File(mPath)));
+            mTextContents = sUtils.read(new File(mPath));
             mSave.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_save));
             mSave.setVisibility(View.VISIBLE);
         }
@@ -184,11 +190,11 @@ public class TextEditorActivity extends AppCompatActivity {
                 .setNegativeButton(getString(R.string.cancel), (dialog, id) -> {
                 })
                 .setPositiveButton(getString(R.string.save), (dialog, id) -> {
-                    APKEditorUtils.create(text, path);
+                    sUtils.create(text, new File(path));
                     if (mExternalFile == null && path.contains("classes") && path.contains(".dex")) {
                         String parentPath = path.split(".dex")[0] + ".dex";
-                        if (!APKEditorUtils.exist(new File(parentPath, "edited").getAbsolutePath())) {
-                            APKEditorUtils.create("# Edited", new File(parentPath, "edited").getAbsolutePath());
+                        if (!sUtils.exist(new File(parentPath, "edited"))) {
+                            sUtils.create("# Edited", new File(parentPath, "edited"));
                         }
                     }
                     finish();
diff --git a/app/src/main/java/com/apk/editor/activities/TextViewActivity.java b/app/src/main/java/com/apk/editor/activities/TextViewActivity.java
index 0eb0851..670f780 100644
--- a/app/src/main/java/com/apk/editor/activities/TextViewActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/TextViewActivity.java
@@ -25,8 +25,8 @@ import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
+
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
@@ -104,8 +104,11 @@ public class TextViewActivity extends AppCompatActivity {
                 .setNegativeButton(getString(R.string.cancel), (dialog, id) -> {
                 })
                 .setPositiveButton(getString(R.string.export), (dialog, id) -> {
-                    if (APKExplorer.isPermissionDenied(this)) {
-                        APKExplorer.requestPermission(this);
+                    if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE,this)) {
+                        sPermissionUtils.requestPermission(
+                                new String[] {
+                                        android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                                },this);
                     } else {
                         Projects.exportToStorage(mPath, new File(mPath).getName(), Common.getAppID(), this).execute();
                     }
diff --git a/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java b/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
index d9b9f8f..343d0d8 100644
--- a/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/APKExplorerAdapter.java
@@ -16,10 +16,8 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.FilePickerActivity;
-import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
@@ -28,6 +26,10 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -53,7 +55,7 @@ public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.
     public void onBindViewHolder(@NonNull APKExplorerAdapter.ViewHolder holder, int position) {
         if (new File(data.get(position)).isDirectory()) {
             holder.mIcon.setImageDrawable(ContextCompat.getDrawable(holder.mTitle.getContext(), R.drawable.ic_folder));
-            if (APKEditorUtils.isDarkTheme(holder.mIcon.getContext())) {
+            if (sUtils.isDarkTheme(holder.mIcon.getContext())) {
                 holder.mIcon.setBackground(ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_circle));
             }
             holder.mIcon.setColorFilter(APKEditorUtils.getThemeAccentColor(holder.mTitle.getContext()));
@@ -68,7 +70,7 @@ public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.
                     APKExplorer.setIcon(holder.mIcon, ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_file), holder.mIcon.getContext());
                 }
             } else if (data.get(position).endsWith(".apk")) {
-                holder.mIcon.setImageDrawable(APKData.getAppIcon(data.get(position), holder.mIcon.getContext()));
+                holder.mIcon.setImageDrawable(sAPKUtils.getAPKIcon(data.get(position), holder.mIcon.getContext()));
             } else {
                 if (data.get(position).endsWith(".xml")) {
                     APKExplorer.setIcon(holder.mIcon, ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_xml), holder.mIcon.getContext());
@@ -78,7 +80,7 @@ public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.
             }
         }
         holder.mTitle.setText(new File(data.get(position)).getName());
-        holder.mDescription.setText(AppData.getAPKSize(new File(data.get(position)).length()));
+        holder.mDescription.setText(sAPKUtils.getAPKSize(data.get(position)));
         holder.mSettings.setOnClickListener(v -> {
             PopupMenu popupMenu = new PopupMenu(v.getContext(), v);
             Menu menu = popupMenu.getMenu();
@@ -97,7 +99,7 @@ public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.
                                 .setNegativeButton(R.string.cancel, (dialog, id) -> {
                                 })
                                 .setPositiveButton(R.string.delete, (dialog, id) -> {
-                                    APKEditorUtils.delete(data.get(position));
+                                    sUtils.delete(new File(data.get(position)));
                                     data.remove(position);
                                     notifyDataSetChanged();
                                 }).show();
@@ -110,8 +112,11 @@ public class APKExplorerAdapter extends RecyclerView.Adapter<APKExplorerAdapter.
                                 .setNegativeButton(v.getContext().getString(R.string.cancel), (dialog, id) -> {
                                 })
                                 .setPositiveButton(v.getContext().getString(R.string.export), (dialog, id) -> {
-                                    if (APKExplorer.isPermissionDenied(v.getContext())) {
-                                        APKExplorer.requestPermission((Activity) v.getContext());
+                                    if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, v.getContext())) {
+                                        sPermissionUtils.requestPermission(
+                                                new String[] {
+                                                        android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                                                }, (Activity) v.getContext());
                                     } else {
                                         Projects.exportToStorage(data.get(position), new File(data.get(position)).getName(), Common.getAppID(), v.getContext()).execute();
                                     }
diff --git a/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java b/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
index 7905688..3470fb2 100644
--- a/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/APKsAdapter.java
@@ -19,7 +19,6 @@ import androidx.recyclerview.widget.RecyclerView;
 import com.apk.editor.R;
 import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.SplitAPKInstaller;
 import com.google.android.material.card.MaterialCardView;
@@ -30,6 +29,9 @@ import java.io.File;
 import java.util.List;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -53,8 +55,8 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
     public void onBindViewHolder(@NonNull APKsAdapter.ViewHolder holder, int position) {
         try {
             if (new File(data.get(position)).isDirectory()) {
-                if (APKData.getAppIcon(data.get(position) + "/base.apk", holder.mAppName.getContext()) != null) {
-                    holder.mAppIcon.setImageDrawable(APKData.getAppIcon(data.get(position) + "/base.apk", holder.mAppName.getContext()));
+                if (sAPKUtils.getAPKIcon(data.get(position) + "/base.apk", holder.mAppName.getContext()) != null) {
+                    holder.mAppIcon.setImageDrawable(sAPKUtils.getAPKIcon(data.get(position) + "/base.apk", holder.mAppName.getContext()));
                 } else {
                     holder.mAppIcon.setImageDrawable(ContextCompat.getDrawable(holder.mAppIcon.getContext(), R.drawable.ic_android));
                     holder.mAppIcon.setColorFilter(APKEditorUtils.getThemeAccentColor(holder.mAppIcon.getContext()));
@@ -65,15 +67,15 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                 } else {
                     holder.mAppName.setText(new File(data.get(position)).getName());
                 }
-                if (APKData.getAppID(data.get(position) + "/base.apk", holder.mAppName.getContext()) == null) {
+                if (sAPKUtils.getPackageName(data.get(position) + "/base.apk", holder.mAppName.getContext()) == null) {
                     holder.mAppName.setPaintFlags(Paint.STRIKE_THRU_TEXT_FLAG);
-                    holder.mCard.setOnClickListener(v -> APKEditorUtils.snackbar(v, v.getContext().getString(R.string.apk_corrupted)));
+                    holder.mCard.setOnClickListener(v -> sUtils.snackBar(v, v.getContext().getString(R.string.apk_corrupted)).show());
                 }
-                if (APKData.getVersionName(data.get(position) + "/base.apk", holder.mAppName.getContext()) != null) {
-                    holder.mVersion.setText(holder.mVersion.getContext().getString(R.string.version, APKData.getVersionName(data.get(position) + "/base.apk", holder.mAppName.getContext())));
+                if (sAPKUtils.getVersionName(data.get(position) + "/base.apk", holder.mAppName.getContext()) != null) {
+                    holder.mVersion.setText(holder.mVersion.getContext().getString(R.string.version, sAPKUtils.getVersionName(data.get(position) + "/base.apk", holder.mAppName.getContext())));
                 }
                 holder.mCard.setOnClickListener(v -> {
-                    if (APKEditorUtils.isFullVersion(v.getContext()) && data.get(position).contains("_aee-signed") && !APKEditorUtils.getBoolean("signature_warning", false, v.getContext())) {
+                    if (APKEditorUtils.isFullVersion(v.getContext()) && data.get(position).contains("_aee-signed") && !sUtils.getBoolean("signature_warning", false, v.getContext())) {
                         APKData.showSignatureErrorDialog(v.getContext());
                     } else {
                         new MaterialAlertDialogBuilder(v.getContext())
@@ -109,18 +111,18 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                     return false;
                 });
             } else {
-                if (APKData.getAppIcon(data.get(position), holder.mAppName.getContext()) != null) {
-                    holder.mAppIcon.setImageDrawable(APKData.getAppIcon(data.get(position), holder.mAppName.getContext()));
+                if (sAPKUtils.getAPKIcon(data.get(position), holder.mAppName.getContext()) != null) {
+                    holder.mAppIcon.setImageDrawable(sAPKUtils.getAPKIcon(data.get(position), holder.mAppName.getContext()));
                 } else {
                     holder.mAppIcon.setImageDrawable(ContextCompat.getDrawable(holder.mAppIcon.getContext(), R.drawable.ic_android));
                     holder.mAppIcon.setColorFilter(APKEditorUtils.getThemeAccentColor(holder.mAppIcon.getContext()));
                 }
-                if (APKData.getAppName(data.get(position), holder.mAppName.getContext()) != null) {
-                    if (Common.getSearchWord() != null && Common.isTextMatched(Objects.requireNonNull(APKData.getAppName(data.get(position), holder.mAppName.getContext())).toString(), Common.getSearchWord())) {
-                        holder.mAppName.setText(APKEditorUtils.fromHtml(Objects.requireNonNull(APKData.getAppName(data.get(position), holder.mAppName.getContext())).toString().replace(Common.getSearchWord(),
+                if (sAPKUtils.getAPKName(data.get(position), holder.mAppName.getContext()) != null) {
+                    if (Common.getSearchWord() != null && Common.isTextMatched(Objects.requireNonNull(sAPKUtils.getAPKName(data.get(position), holder.mAppName.getContext())).toString(), Common.getSearchWord())) {
+                        holder.mAppName.setText(APKEditorUtils.fromHtml(Objects.requireNonNull(sAPKUtils.getAPKName(data.get(position), holder.mAppName.getContext())).toString().replace(Common.getSearchWord(),
                                 "<b><i><font color=\"" + Color.RED + "\">" + Common.getSearchWord() + "</font></i></b>")));
                     } else {
-                        holder.mAppName.setText(APKData.getAppName(data.get(position), holder.mAppName.getContext()));
+                        holder.mAppName.setText(sAPKUtils.getAPKName(data.get(position), holder.mAppName.getContext()));
                     }
                 } else {
                     if (Common.getSearchWord() != null && Common.isTextMatched(new File(data.get(position)).getName(), Common.getSearchWord())) {
@@ -130,19 +132,19 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                         holder.mAppName.setText(new File(data.get(position)).getName());
                     }
                     holder.mAppName.setPaintFlags(Paint.STRIKE_THRU_TEXT_FLAG);
-                    holder.mCard.setOnClickListener(v -> APKEditorUtils.snackbar(v, v.getContext().getString(R.string.apk_corrupted)));
+                    holder.mCard.setOnClickListener(v -> sUtils.snackBar(v, v.getContext().getString(R.string.apk_corrupted)).show());
                 }
-                if (!APKEditorUtils.isDarkTheme(holder.mCard.getContext())) {
+                if (!sUtils.isDarkTheme(holder.mCard.getContext())) {
                     holder.mCard.setCardBackgroundColor(Color.LTGRAY);
                 }
-                if (APKData.getVersionName(data.get(position), holder.mAppName.getContext()) != null) {
-                    holder.mVersion.setText(holder.mVersion.getContext().getString(R.string.version, APKData.getVersionName(data.get(position), holder.mAppName.getContext())));
+                if (sAPKUtils.getVersionName(data.get(position), holder.mAppName.getContext()) != null) {
+                    holder.mVersion.setText(holder.mVersion.getContext().getString(R.string.version, sAPKUtils.getVersionName(data.get(position), holder.mAppName.getContext())));
                 }
-                holder.mSize.setText(holder.mSize.getContext().getString(R.string.size, AppData.getAPKSize(new File(data.get(position)).length())));
-                holder.mSize.setTextColor(APKEditorUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
+                holder.mSize.setText(holder.mSize.getContext().getString(R.string.size, sAPKUtils.getAPKSize(data.get(position))));
+                holder.mSize.setTextColor(sUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
                 holder.mSize.setVisibility(View.VISIBLE);
                 holder.mCard.setOnClickListener(v -> {
-                    if (APKEditorUtils.isFullVersion(v.getContext()) && data.get(position).contains("_aee-signed.apk") && !APKEditorUtils.getBoolean("signature_warning", false, v.getContext())) {
+                    if (APKEditorUtils.isFullVersion(v.getContext()) && data.get(position).contains("_aee-signed.apk") && !sUtils.getBoolean("signature_warning", false, v.getContext())) {
                         APKData.showSignatureErrorDialog(v.getContext());
                     } else {
                         new MaterialAlertDialogBuilder(v.getContext())
@@ -163,7 +165,7 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                         popupMenu.setOnMenuItemClickListener(item -> {
                             switch (item.getItemId()) {
                                 case 0:
-                                    APKData.shareAPK(data.get(position), v.getContext()).show();
+                                    APKData.shareAPK(data.get(position), v.getContext());
                                     break;
                                 case 1:
                                     APKData.saveToDownloads(new File(data.get(position)), v.getContext()).execute();
@@ -173,7 +175,14 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                         });
                         popupMenu.show();
                     } else {
-                        APKData.shareAPK(data.get(position), v.getContext()).show();
+                        new MaterialAlertDialogBuilder(v.getContext())
+                                .setIcon(R.mipmap.ic_launcher)
+                                .setTitle(R.string.app_name)
+                                .setMessage(v.getContext().getString(R.string.share_message, sAPKUtils.getAPKName(data.get(position), v.getContext())))
+                                .setNegativeButton(v.getContext().getString(R.string.cancel), (dialog, id) -> {
+                                })
+                                .setPositiveButton(v.getContext().getString(R.string.share), (dialog, id) ->
+                                        APKData.shareAPK(data.get(position), v.getContext())).show();
                     }
                     return false;
                 });
@@ -189,7 +198,7 @@ public class APKsAdapter extends RecyclerView.Adapter<APKsAdapter.ViewHolder> {
                 .setNegativeButton(R.string.cancel, (dialog, id) -> {
                 })
                 .setPositiveButton(R.string.delete, (dialog, id) -> {
-                    APKEditorUtils.delete(data.get(position));
+                    sUtils.delete(new File(data.get(position)));
                     data.remove(position);
                     notifyItemRemoved(position);
                     notifyDataSetChanged();
diff --git a/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java b/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
index 1692ae8..45eab49 100644
--- a/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/AboutAdapter.java
@@ -1,6 +1,5 @@
 package com.apk.editor.adapters;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
 import android.graphics.Color;
@@ -17,22 +16,26 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
-import com.apk.editor.activities.CreditsActivity;
 import com.apk.editor.activities.DocumentationActivity;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.recyclerViewItems.AboutItems;
+import com.apk.editor.utils.AppSettings;
 import com.google.android.material.textview.MaterialTextView;
 
-import java.util.ArrayList;
+import java.util.List;
+
+import in.sunilpaulmathew.sCommon.Utils.sCreditsUtils;
+import in.sunilpaulmathew.sCommon.Utils.sSerializableItems;
+import in.sunilpaulmathew.sCommon.Utils.sTranslatorUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
 public class AboutAdapter extends RecyclerView.Adapter<AboutAdapter.ViewHolder> {
 
-    private static ArrayList<AboutItems> data;
+    private static List<sSerializableItems> data;
 
-    public AboutAdapter(ArrayList<AboutItems> data) {
+    public AboutAdapter(List<sSerializableItems> data) {
         AboutAdapter.data = data;
     }
 
@@ -43,21 +46,20 @@ public class AboutAdapter extends RecyclerView.Adapter<AboutAdapter.ViewHolder>
         return new AboutAdapter.ViewHolder(rowItem);
     }
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     @Override
     public void onBindViewHolder(@NonNull AboutAdapter.ViewHolder holder, int position) {
-        holder.Title.setText(data.get(position).getTitle());
-        holder.Description.setText(data.get(position).getDescription());
-        if (APKEditorUtils.isDarkTheme(holder.Title.getContext())) {
+        holder.Title.setText(data.get(position).getTextOne());
+        holder.Description.setText(data.get(position).getTextTwo());
+        if (sUtils.isDarkTheme(holder.Title.getContext())) {
             holder.Title.setTextColor(APKEditorUtils.getThemeAccentColor(holder.Title.getContext()));
         }
         if (position != 0) {
-            holder.mIcon.setColorFilter(APKEditorUtils.isDarkTheme(holder.Title.getContext()) ? Color.WHITE : Color.BLACK);
+            holder.mIcon.setColorFilter(sUtils.isDarkTheme(holder.Title.getContext()) ? Color.WHITE : Color.BLACK);
         }
         holder.mIcon.setImageDrawable(data.get(position).getIcon());
         holder.mRVLayout.setOnClickListener(v -> {
-            if (data.get(position).getURL() != null) {
-                APKEditorUtils.launchUrl(data.get(position).getURL(), (Activity) v.getContext());
+            if (data.get(position).getTextThree() != null) {
+                sUtils.launchUrl(data.get(position).getTextThree(), (Activity) v.getContext());
             } else if (position == 0) {
                 Intent settings = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                 settings.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -68,8 +70,15 @@ public class AboutAdapter extends RecyclerView.Adapter<AboutAdapter.ViewHolder>
                 Intent documentation = new Intent(v.getContext(), DocumentationActivity.class);
                 v.getContext().startActivity(documentation);
             } else if (position == 6) {
-                Intent credits = new Intent(v.getContext(), CreditsActivity.class);
-                v.getContext().startActivity(credits);
+                new sTranslatorUtils(v.getContext().getString(R.string.app_name_short), "https://poeditor.com/join/project?hash=QztabxONOp",
+                        (Activity) v.getContext()).show();
+            } else if (position == 7) {
+                new sCreditsUtils(AppSettings.getCredits(v.getContext()),
+                        sUtils.getDrawable(R.mipmap.ic_launcher, v.getContext()),
+                        sUtils.getDrawable(R.drawable.ic_back, v.getContext()),
+                        sUtils.getColor(R.color.colorBlue, v.getContext()),
+                        18, v.getContext().getString(R.string.app_name), "2021-2022, APK Explorer & Editor",
+                        BuildConfig.VERSION_NAME).launchCredits(v.getContext());
             } else {
                 Intent share_app = new Intent();
                 share_app.setAction(Intent.ACTION_SEND);
diff --git a/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
index 3b6f97b..dafabb7 100644
--- a/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ApplicationsAdapter.java
@@ -25,6 +25,11 @@ import com.google.android.material.textview.MaterialTextView;
 
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -60,32 +65,36 @@ public class ApplicationsAdapter extends RecyclerView.Adapter<ApplicationsAdapte
                 holder.mAppName.setText(data.get(position).getAppName());
             }
             holder.mVersion.setText(holder.mAppName.getContext().getString(R.string.version, data.get(position).getAppVersion()));
-            holder.mSize.setText(holder.mAppName.getContext().getString(R.string.size, AppData.getAPKSize(data.get(position).getAPKSize())));
+            holder.mSize.setText(holder.mAppName.getContext().getString(R.string.size, sAPKUtils.getAPKSize(sPackageUtils
+                    .getSourceDir(data.get(position).getPackageName(), holder.mAppName.getContext()))));
             holder.mVersion.setTextColor(Color.RED);
-            holder.mSize.setTextColor(APKEditorUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
+            holder.mSize.setTextColor(sUtils.isDarkTheme(holder.mSize.getContext()) ? Color.GREEN : Color.BLACK);
             holder.mAppIcon.setOnClickListener(v -> {
                 Common.setAppID(data.get(position).getPackageName());
                 Intent imageView = new Intent(v.getContext(), ImageViewActivity.class);
                 v.getContext().startActivity(imageView);
             });
-            if (!APKEditorUtils.isDarkTheme(holder.mCard.getContext())) {
+            if (!sUtils.isDarkTheme(holder.mCard.getContext())) {
                 holder.mCard.setCardBackgroundColor(Color.LTGRAY);
             }
             holder.mSize.setVisibility(View.VISIBLE);
             holder.mVersion.setVisibility(View.VISIBLE);
             holder.mCard.setOnLongClickListener(v -> {
-                if (APKExplorer.isPermissionDenied(v.getContext()) && APKEditorUtils.getString("exportAPKsPath", "externalFiles",
+                if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, v.getContext()) && sUtils.getString("exportAPKsPath", "externalFiles",
                         v.getContext()).equals("internalStorage")) {
-                    APKExplorer.requestPermission((Activity) v.getContext());
+                    sPermissionUtils.requestPermission(
+                            new String[] {
+                                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                            },(Activity) v.getContext());
                     return true;
                 }
                 if (APKEditorUtils.isFullVersion(v.getContext())) {
-                    if (APKEditorUtils.getString("exportAPKs", null, v.getContext()) == null) {
+                    if (sUtils.getString("exportAPKs", null, v.getContext()) == null) {
                         AppData.getExportOptionsMenu(data.get(position).getPackageName(), v.getContext()).show();
-                    } else if (APKEditorUtils.getString("exportAPKs", null, v.getContext()).equals(v.getContext().getString(R.string.export_storage))) {
+                    } else if (sUtils.getString("exportAPKs", null, v.getContext()).equals(v.getContext().getString(R.string.export_storage))) {
                         APKData.exportApp(data.get(position).getPackageName(), v.getContext());
                     } else {
-                        if (!APKEditorUtils.getBoolean("firstSigning", false, v.getContext())) {
+                        if (!sUtils.getBoolean("firstSigning", false, v.getContext())) {
                             AppData.getSigningOptionsMenu(data.get(position).getPackageName(), v.getContext()).show();
                         } else {
                             APKData.reSignAPKs(data.get(position).getPackageName(), false, (Activity) v.getContext());
diff --git a/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java b/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
index 411dd1e..ef957aa 100644
--- a/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/FilePickerAdapter.java
@@ -11,7 +11,6 @@ import androidx.core.content.ContextCompat;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
 import com.google.android.material.textview.MaterialTextView;
@@ -19,6 +18,9 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 05, 2021
  */
@@ -44,7 +46,7 @@ public class FilePickerAdapter extends RecyclerView.Adapter<FilePickerAdapter.Vi
     public void onBindViewHolder(@NonNull FilePickerAdapter.ViewHolder holder, int position) {
         if (new File(this.data.get(position)).isDirectory()) {
             holder.mIcon.setImageDrawable(ContextCompat.getDrawable(holder.mTitle.getContext(), R.drawable.ic_folder));
-            if (APKEditorUtils.isDarkTheme(holder.mIcon.getContext())) {
+            if (sUtils.isDarkTheme(holder.mIcon.getContext())) {
                 holder.mIcon.setBackground(ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_circle));
             }
             holder.mIcon.setColorFilter(APKEditorUtils.getThemeAccentColor(holder.mTitle.getContext()));
@@ -56,7 +58,7 @@ public class FilePickerAdapter extends RecyclerView.Adapter<FilePickerAdapter.Vi
                     APKExplorer.setIcon(holder.mIcon, ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_file), holder.mIcon.getContext());
                 }
             } else if (this.data.get(position).endsWith(".apk")) {
-                holder.mIcon.setImageDrawable(APKData.getAppIcon(data.get(position), holder.mIcon.getContext()));
+                holder.mIcon.setImageDrawable(sAPKUtils.getAPKIcon(data.get(position), holder.mIcon.getContext()));
             } else if (data.get(position).endsWith(".xml")) {
                 APKExplorer.setIcon(holder.mIcon, ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_xml), holder.mIcon.getContext());
             } else {
diff --git a/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java b/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
index d6671b4..8c0dda6 100644
--- a/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/InstallerFilePickerAdapter.java
@@ -11,9 +11,7 @@ import androidx.core.content.ContextCompat;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
-import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.google.android.material.checkbox.MaterialCheckBox;
 import com.google.android.material.textview.MaterialTextView;
@@ -21,6 +19,9 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 21, 2021
  */
@@ -47,7 +48,7 @@ public class InstallerFilePickerAdapter extends RecyclerView.Adapter<InstallerFi
         try {
             if (new File(this.data.get(position)).isDirectory()) {
                 holder.mIcon.setImageDrawable(ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_folder));
-                if (APKEditorUtils.isDarkTheme(holder.mIcon.getContext())) {
+                if (sUtils.isDarkTheme(holder.mIcon.getContext())) {
                     holder.mIcon.setBackground(ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_circle));
                 }
                 holder.mIcon.setColorFilter(APKEditorUtils.getThemeAccentColor(holder.mIcon.getContext()));
@@ -55,9 +56,9 @@ public class InstallerFilePickerAdapter extends RecyclerView.Adapter<InstallerFi
                 holder.mSize.setVisibility(View.GONE);
                 holder.mCheckBox.setVisibility(View.GONE);
             } else if (this.data.get(position).endsWith(".apk")) {
-                holder.mIcon.setImageDrawable(APKData.getAppIcon(data.get(position), holder.mIcon.getContext()));
-                if (APKData.getAppID(data.get(position), holder.mIcon.getContext()) != null) {
-                    holder.mDescription.setText(APKData.getAppID(data.get(position), holder.mIcon.getContext()));
+                holder.mIcon.setImageDrawable(sAPKUtils.getAPKIcon(data.get(position), holder.mIcon.getContext()));
+                if (sAPKUtils.getPackageName(data.get(position), holder.mIcon.getContext()) != null) {
+                    holder.mDescription.setText(sAPKUtils.getPackageName(data.get(position), holder.mIcon.getContext()));
                     holder.mDescription.setVisibility(View.VISIBLE);
                 }
                 holder.mCheckBox.setChecked(Common.getAPKList().contains(this.data.get(position)));
@@ -69,14 +70,14 @@ public class InstallerFilePickerAdapter extends RecyclerView.Adapter<InstallerFi
                     }
                     Common.getSelectCard().setVisibility(Common.getAPKList().isEmpty() ? View.GONE : View.VISIBLE);
                 });
-                holder.mSize.setText(AppData.getAPKSize(new File(data.get(position)).length()));
+                holder.mSize.setText(sAPKUtils.getAPKSize(data.get(position)));
                 holder.mSize.setVisibility(View.VISIBLE);
                 holder.mCheckBox.setVisibility(View.VISIBLE);
             } else {
                 holder.mIcon.setImageDrawable(ContextCompat.getDrawable(holder.mIcon.getContext(), R.drawable.ic_bundle));
-                holder.mIcon.setColorFilter(APKEditorUtils.isDarkTheme(holder.mIcon.getContext()) ? ContextCompat.getColor(
+                holder.mIcon.setColorFilter(sUtils.isDarkTheme(holder.mIcon.getContext()) ? ContextCompat.getColor(
                         holder.mIcon.getContext(), R.color.colorWhite) : ContextCompat.getColor(holder.mIcon.getContext(), R.color.colorBlack));
-                holder.mSize.setText(AppData.getAPKSize(new File(data.get(position)).length()));
+                holder.mSize.setText(sAPKUtils.getAPKSize(data.get(position)));
                 holder.mSize.setVisibility(View.VISIBLE);
             }
             holder.mTitle.setText(new File(this.data.get(position)).getName());
diff --git a/app/src/main/java/com/apk/editor/adapters/PagerAdapter.java b/app/src/main/java/com/apk/editor/adapters/PagerAdapter.java
deleted file mode 100644
index f52da94..0000000
--- a/app/src/main/java/com/apk/editor/adapters/PagerAdapter.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.apk.editor.adapters;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentManager;
-import androidx.fragment.app.FragmentPagerAdapter;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
- */
-public class PagerAdapter extends FragmentPagerAdapter {
-
-    private final List<Fragment> fragmentList = new ArrayList<>();
-    private final List<String> fragmentListTitles = new ArrayList<>();
-
-    public PagerAdapter(FragmentManager fm) {
-        super(fm);
-    }
-
-    @NonNull
-    @Override
-    public Fragment getItem(int position) {
-        return fragmentList.get(position);
-    }
-
-    @Override
-    public int getCount() {
-        return fragmentListTitles.size();
-    }
-
-    @Override
-    public CharSequence getPageTitle(int position) {
-        return fragmentListTitles.get(position);
-    }
-    public void AddFragment(Fragment fragment, String title) {
-        fragmentList.add(fragment);
-        fragmentListTitles.add(title);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
index a28e892..24fa364 100644
--- a/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/ProjectsAdapter.java
@@ -17,8 +17,6 @@ import androidx.recyclerview.widget.RecyclerView;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKExploreActivity;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.APKExplorer;
-import com.apk.editor.utils.AppData;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.card.MaterialCardView;
@@ -29,6 +27,10 @@ import java.io.File;
 import java.text.DateFormat;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 06, 2021
  */
@@ -51,13 +53,13 @@ public class ProjectsAdapter extends RecyclerView.Adapter<ProjectsAdapter.ViewHo
     @Override
     public void onBindViewHolder(@NonNull ProjectsAdapter.ViewHolder holder, int position) {
         try {
-            if (AppData.isAppInstalled(new File(data.get(position)).getName(), holder.mAppIcon.getContext())) {
-                holder.mAppIcon.setImageDrawable(AppData.getAppIcon(new File(data.get(position)).getName(), holder.mAppIcon.getContext()));
-                if (Common.getSearchWord() != null && Common.isTextMatched(AppData.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()).toString(), Common.getSearchWord())) {
-                    holder.mAppName.setText(APKEditorUtils.fromHtml(AppData.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()).toString().replace(Common.getSearchWord(),
+            if (sPackageUtils.isPackageInstalled(new File(data.get(position)).getName(), holder.mAppIcon.getContext())) {
+                holder.mAppIcon.setImageDrawable(sPackageUtils.getAppIcon(new File(data.get(position)).getName(), holder.mAppIcon.getContext()));
+                if (Common.getSearchWord() != null && Common.isTextMatched(sPackageUtils.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()).toString(), Common.getSearchWord())) {
+                    holder.mAppName.setText(APKEditorUtils.fromHtml(sPackageUtils.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()).toString().replace(Common.getSearchWord(),
                             "<b><i><font color=\"" + Color.RED + "\">" + Common.getSearchWord() + "</font></i></b>")));
                 } else {
-                    holder.mAppName.setText(AppData.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()));
+                    holder.mAppName.setText(sPackageUtils.getAppName(new File(data.get(position)).getName(), holder.mAppName.getContext()));
                 }
             } else {
                 holder.mAppIcon.setImageDrawable(ContextCompat.getDrawable(holder.mAppIcon.getContext(), R.drawable.ic_projects));
@@ -71,7 +73,7 @@ public class ProjectsAdapter extends RecyclerView.Adapter<ProjectsAdapter.ViewHo
             holder.mTotalSize.setText(holder.mAppName.getContext().getString(R.string.last_modified, DateFormat.getDateTimeInstance()
                     .format(new File(data.get(position)).lastModified())));
             holder.mCard.setOnClickListener(v -> {
-                if (AppData.isAppInstalled(data.get(position).replace(v.getContext().getCacheDir().getPath() + "/",""), v.getContext())) {
+                if (sPackageUtils.isPackageInstalled(data.get(position).replace(v.getContext().getCacheDir().getPath() + "/",""), v.getContext())) {
                     Common.setAppID(data.get(position).replace(v.getContext().getCacheDir().getPath() + "/",""));
                 } else {
                     Common.setAppID(null);
@@ -89,21 +91,24 @@ public class ProjectsAdapter extends RecyclerView.Adapter<ProjectsAdapter.ViewHo
                         .setNegativeButton(R.string.cancel, (dialog, id) -> {
                         })
                         .setPositiveButton(R.string.export, (dialog, id) -> {
-                            if (APKExplorer.isPermissionDenied(v.getContext())) {
-                                APKExplorer.requestPermission((Activity) v.getContext());
+                            if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, v.getContext())) {
+                                sPermissionUtils.requestPermission(
+                                        new String[] {
+                                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                                        },(Activity) v.getContext());
                             } else {
                                 APKEditorUtils.dialogEditText(null,
                                         (dialogInterface, i) -> {
                                         }, text -> {
                                             if (text.isEmpty()) {
-                                                APKEditorUtils.snackbar(v, v.getContext().getString(R.string.name_empty));
+                                                sUtils.snackBar(v, v.getContext().getString(R.string.name_empty)).show();
                                                 return;
                                             }
                                             if (text.contains(" ")) {
                                                 text = text.replace(" ", "_");
                                             }
                                             String mName = text;
-                                            if (APKEditorUtils.exist(Projects.getExportPath(v.getContext()) + "/" + text)) {
+                                            if (sUtils.exist(new File(Projects.getExportPath(v.getContext()), text))) {
                                                 new MaterialAlertDialogBuilder(v.getContext())
                                                         .setMessage(v.getContext().getString(R.string.export_project_replace, text))
                                                         .setNegativeButton(R.string.cancel, (dialogInterface, i) -> {
@@ -132,7 +137,7 @@ public class ProjectsAdapter extends RecyclerView.Adapter<ProjectsAdapter.ViewHo
                         notifyDataSetChanged();
                     }).show());
             holder.mTotalSize.setVisibility(View.VISIBLE);
-            holder.mTotalSize.setTextColor(APKEditorUtils.isDarkTheme(holder.mTotalSize.getContext()) ? Color.GREEN : Color.BLACK);
+            holder.mTotalSize.setTextColor(sUtils.isDarkTheme(holder.mTotalSize.getContext()) ? Color.GREEN : Color.BLACK);
             holder.mDelete.setColorFilter(Color.RED);
         } catch (NullPointerException ignored) {}
     }
diff --git a/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
index e9e2943..072ed47 100644
--- a/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/SettingsAdapter.java
@@ -14,11 +14,13 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.recyclerViewItems.SettingsItems;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.util.ArrayList;
 
+import in.sunilpaulmathew.sCommon.Utils.sSerializableItems;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 31, 2021
  */
@@ -26,9 +28,9 @@ public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.ViewHo
 
     private static ClickListener clickListener;
 
-    private static ArrayList<SettingsItems> data;
+    private static ArrayList<sSerializableItems> data;
 
-    public SettingsAdapter(ArrayList<SettingsItems> data) {
+    public SettingsAdapter(ArrayList<sSerializableItems> data) {
         SettingsAdapter.data = data;
     }
 
@@ -42,16 +44,16 @@ public class SettingsAdapter extends RecyclerView.Adapter<SettingsAdapter.ViewHo
     @SuppressLint("UseCompatLoadingForDrawables")
     @Override
     public void onBindViewHolder(@NonNull SettingsAdapter.ViewHolder holder, int position) {
-        holder.Title.setText(data.get(position).getTitle());
-        if (data.get(position).getDescription() != null) {
-            holder.Description.setText(data.get(position).getDescription());
+        holder.Title.setText(data.get(position).getTextOne());
+        if (data.get(position).getTextTwo() != null) {
+            holder.Description.setText(data.get(position).getTextTwo());
         } else {
             holder.Description.setVisibility(View.GONE);
         }
-        if (APKEditorUtils.isDarkTheme(holder.Title.getContext())) {
+        if (sUtils.isDarkTheme(holder.Title.getContext())) {
             holder.Title.setTextColor(APKEditorUtils.getThemeAccentColor(holder.Title.getContext()));
         }
-        holder.mIcon.setColorFilter(APKEditorUtils.isDarkTheme(holder.Title.getContext()) ? Color.WHITE : Color.BLACK);
+        holder.mIcon.setColorFilter(sUtils.isDarkTheme(holder.Title.getContext()) ? Color.WHITE : Color.BLACK);
         if (data.get(position).getIcon() != null) {
             holder.mIcon.setImageDrawable(data.get(position).getIcon());
         } else {
diff --git a/app/src/main/java/com/apk/editor/adapters/TextViewAdapter.java b/app/src/main/java/com/apk/editor/adapters/TextViewAdapter.java
index 2aa64bd..cc6c099 100644
--- a/app/src/main/java/com/apk/editor/adapters/TextViewAdapter.java
+++ b/app/src/main/java/com/apk/editor/adapters/TextViewAdapter.java
@@ -15,6 +15,8 @@ import com.google.android.material.textview.MaterialTextView;
 
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
  */
@@ -49,13 +51,13 @@ public class TextViewAdapter extends RecyclerView.Adapter<TextViewAdapter.ViewHo
         } else if (data.get(position).contains("<uses-permission")) {
             holder.mText.setTextColor(Color.RED);
         } else if (data.get(position).contains("<activity") || data.get(position).startsWith(".method") || data.get(position).startsWith(".annotation")) {
-            holder.mText.setTextColor(APKEditorUtils.isDarkTheme(holder.mText.getContext()) ? Color.GREEN : Color.MAGENTA);
+            holder.mText.setTextColor(sUtils.isDarkTheme(holder.mText.getContext()) ? Color.GREEN : Color.MAGENTA);
         } else if (data.get(position).contains("<service") || data.get(position).startsWith(".end method") || data.get(position).startsWith(".end annotation")) {
-            holder.mText.setTextColor(APKEditorUtils.isDarkTheme(holder.mText.getContext()) ? Color.MAGENTA : Color.BLUE);
+            holder.mText.setTextColor(sUtils.isDarkTheme(holder.mText.getContext()) ? Color.MAGENTA : Color.BLUE);
         } else if (data.get(position).contains("<provider") || data.get(position).contains("</provider>")) {
-            holder.mText.setTextColor(APKEditorUtils.isDarkTheme(holder.mText.getContext()) ? Color.LTGRAY : Color.DKGRAY);
+            holder.mText.setTextColor(sUtils.isDarkTheme(holder.mText.getContext()) ? Color.LTGRAY : Color.DKGRAY);
         } else {
-            holder.mText.setTextColor(APKEditorUtils.isDarkTheme(holder.mText.getContext()) ? Color.WHITE : Color.BLACK);
+            holder.mText.setTextColor(sUtils.isDarkTheme(holder.mText.getContext()) ? Color.WHITE : Color.BLACK);
         }
         if (data.get(position).startsWith("#")) {
             holder.mText.setAlpha((float) 0.5);
diff --git a/app/src/main/java/com/apk/editor/fragments/APKDetailsFragment.java b/app/src/main/java/com/apk/editor/fragments/APKDetailsFragment.java
index a0f26bb..ff17157 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKDetailsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKDetailsFragment.java
@@ -12,9 +12,10 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.adapters.APKDetailsAdapter;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.ExternalAPKData;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
  */
@@ -28,7 +29,7 @@ public class APKDetailsFragment extends Fragment {
         RecyclerView mRecyclerView = mRootView.findViewById(R.id.recycler_view);
         mRecyclerView.setLayoutManager(new LinearLayoutManager(requireActivity()));
         
-        new AsyncTasks() {
+        new sExecutor() {
             private APKDetailsAdapter mAdapter;
             @Override
             public void onPreExecute() {
diff --git a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
index c5c49da..40fa9a5 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKExplorerFragment.java
@@ -26,8 +26,8 @@ import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
 import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
+import com.apk.editor.utils.ExternalAPKData;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
@@ -35,6 +35,12 @@ import com.google.android.material.textview.MaterialTextView;
 import java.io.File;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sSingleItemDialog;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 05, 2021
  */
@@ -59,7 +65,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
         mProgressLayout = mRootView.findViewById(R.id.progress_layout);
         mRecyclerView = mRootView.findViewById(R.id.recycler_view);
 
-        mTitle.setText(Common.getAppID() != null ? AppData.getAppName(Common.getAppID(), requireActivity()) : new File(Common.getPath()).getName());
+        mTitle.setText(Common.getAppID() != null ? sPackageUtils.getAppName(Common.getAppID(), requireActivity()) : new File(Common.getPath()).getName());
 
         mBack.setOnClickListener(v -> retainDialog());
 
@@ -70,18 +76,20 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
                 .setNegativeButton(getString(R.string.cancel), (dialog, id) -> {
                 })
                 .setPositiveButton(getString(R.string.build), (dialog, id) -> {
-                    if (!APKEditorUtils.getBoolean("firstSigning", false, requireActivity())) {
-                        new MaterialAlertDialogBuilder(requireActivity())
-                                .setItems(AppData.getSigningOptionsMenu(requireActivity()), (d, itemPosition) -> {
-                                    APKEditorUtils.saveBoolean("firstSigning", true, requireActivity());
-                                    if (itemPosition == 0) {
-                                        APKData.prepareSignedAPK(requireActivity());
-                                    } else {
-                                        Intent signing = new Intent(requireActivity(), APKSignActivity.class);
-                                        startActivity(signing);
-                                    }
-                                    dialog.dismiss();
-                                }).show();
+                    if (!sUtils.getBoolean("firstSigning", false, requireActivity())) {
+                        new sSingleItemDialog(0, null, AppData.getSigningOptionsMenu(requireActivity()), requireActivity()) {
+
+                            @Override
+                            public void onItemSelected(int itemPosition) {
+                                sUtils.saveBoolean("firstSigning", true, requireActivity());
+                                if (itemPosition == 0) {
+                                    APKData.prepareSignedAPK(requireActivity());
+                                } else {
+                                    Intent signing = new Intent(requireActivity(), APKSignActivity.class);
+                                    startActivity(signing);
+                                }
+                            }
+                        }.show();
                     } else {
                         APKData.prepareSignedAPK(requireActivity());
                     }
@@ -98,7 +106,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
             mRecyclerView.setAdapter(mRecycleViewAdapter);
         } catch (NullPointerException ignored) {
             mRecyclerView.setVisibility(View.GONE);
-            mError.setText(getString(R.string.explore_error_status, AppData.getAppName(Common.getAppID(), requireActivity())));
+            mError.setText(getString(R.string.explore_error_status, sPackageUtils.getAppName(Common.getAppID(), requireActivity())));
             mError.setVisibility(View.VISIBLE);
         }
 
@@ -106,10 +114,10 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
             PopupMenu popupMenu = new PopupMenu(requireActivity(), mSortButton);
             Menu menu = popupMenu.getMenu();
             menu.add(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("az_order", true, requireActivity()));
+                    .setChecked(sUtils.getBoolean("az_order", true, requireActivity()));
             popupMenu.setOnMenuItemClickListener(item -> {
                 if (item.getItemId() == 0) {
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
                     reload(requireActivity());
                 }
                 return false;
@@ -126,6 +134,9 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
                 imageView.putExtra(ImageViewActivity.PATH_INTENT, APKExplorer.getData(getFilesList(), true, requireActivity()).get(position));
                 startActivity(imageView);
             } else if (APKExplorer.isTextFile(APKExplorer.getData(getFilesList(), true, requireActivity()).get(position))) {
+                if (ExternalAPKData.isFMInstall()) {
+                    ExternalAPKData.isFMInstall(false);
+                }
                 Intent textView = new Intent(requireActivity(), TextViewActivity.class);
                 textView.putExtra(TextViewActivity.PATH_INTENT, APKExplorer.getData(getFilesList(), true, requireActivity()).get(position));
                 startActivity(textView);
@@ -146,8 +157,11 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
                         .setNeutralButton(getString(R.string.cancel), (dialog, id) -> {
                         })
                         .setNegativeButton(getString(R.string.export), (dialog, id) -> {
-                            if (APKExplorer.isPermissionDenied(requireActivity())) {
-                                APKExplorer.requestPermission(requireActivity());
+                            if (sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, requireActivity())) {
+                                sPermissionUtils.requestPermission(
+                                        new String[] {
+                                                android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                                        },requireActivity());
                             } else {
                                 Projects.exportToStorage(APKExplorer.getData(getFilesList(), true, requireActivity()).get(position),
                                         new File(APKExplorer.getData(getFilesList(),true, requireActivity()).get(position)).getName(),
@@ -178,7 +192,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
     }
 
     private void retainDialog() {
-        if (APKEditorUtils.getString("projectAction", null, requireActivity()) == null) {
+        if (sUtils.getString("projectAction", null, requireActivity()) == null) {
             new MaterialAlertDialogBuilder(requireActivity())
                     .setIcon(R.mipmap.ic_launcher)
                     .setTitle(R.string.app_name)
@@ -191,7 +205,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
                         requireActivity().finish();
                     })
                     .setPositiveButton(getString(R.string.save), (dialog, id) -> requireActivity().finish()).show();
-        } else if (APKEditorUtils.getString("projectAction", null, requireActivity()).equals(getString(R.string.delete))) {
+        } else if (sUtils.getString("projectAction", null, requireActivity()).equals(getString(R.string.delete))) {
             Projects.deleteProject(new File(requireActivity().getCacheDir().getPath(), Common.getAppID() != null ? Common.getAppID() :
                     new File(Common.getPath()).getName()), requireActivity());
             requireActivity().finish();
@@ -206,7 +220,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
 
     @SuppressLint("StaticFieldLeak")
     private void reload(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
@@ -223,7 +237,7 @@ public class APKExplorerFragment extends androidx.fragment.app.Fragment {
             public void onPostExecute() {
                 if (Common.getAppID() != null) {
                     mTitle.setText(Common.getAppID().equals(requireActivity().getCacheDir().getPath() + "/" + (Common.getAppID() != null ?
-                            Common.getAppID() : new File(Common.getPath()).getName()) + File.separator) ? AppData.getAppName(Common.getAppID(), activity)
+                            Common.getAppID() : new File(Common.getPath()).getName()) + File.separator) ? sPackageUtils.getAppName(Common.getAppID(), activity)
                             : new File(Common.getPath()).getName());
                 }
                 mRecyclerView.setAdapter(mRecycleViewAdapter);
diff --git a/app/src/main/java/com/apk/editor/fragments/APKsFragment.java b/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
index 18d5cca..76e34f1 100644
--- a/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/APKsFragment.java
@@ -32,7 +32,6 @@ import com.apk.editor.utils.APKData;
 import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.APKExplorer;
 import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.ExternalAPKData;
 import com.apk.editor.utils.SplitAPKInstaller;
@@ -47,6 +46,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -91,17 +93,17 @@ public class APKsFragment extends Fragment {
         mTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
             @Override
             public void onTabSelected(TabLayout.Tab tab) {
-                String mStatus = APKEditorUtils.getString("apkTypes", "apks", requireActivity());
+                String mStatus = sUtils.getString("apkTypes", "apks", requireActivity());
                 switch (tab.getPosition()) {
                     case 0:
                         if (!mStatus.equals("apks")) {
-                            APKEditorUtils.saveString("apkTypes", "apks", requireActivity());
+                            sUtils.saveString("apkTypes", "apks", requireActivity());
                             loadAPKs(requireActivity());
                         }
                         break;
                     case 1:
                         if (!mStatus.equals("bundles")) {
-                            APKEditorUtils.saveString("apkTypes", "bundles", requireActivity());
+                            sUtils.saveString("apkTypes", "bundles", requireActivity());
                             loadAPKs(requireActivity());
                         }
                         break;
@@ -134,10 +136,10 @@ public class APKsFragment extends Fragment {
             PopupMenu popupMenu = new PopupMenu(requireActivity(), mSortButton);
             Menu menu = popupMenu.getMenu();
             menu.add(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("az_order", true, requireActivity()));
+                    .setChecked(sUtils.getBoolean("az_order", true, requireActivity()));
             popupMenu.setOnMenuItemClickListener(item -> {
                 if (item.getItemId() == 0) {
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
                     loadAPKs(requireActivity());
                 }
                 return false;
@@ -184,7 +186,7 @@ public class APKsFragment extends Fragment {
                         mExit = false;
                         requireActivity().finish();
                     } else {
-                        APKEditorUtils.snackbar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back));
+                        sUtils.snackBar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back)).show();
                         mExit = true;
                         mHandler.postDelayed(() -> mExit = false, 2000);
                     }
@@ -196,7 +198,7 @@ public class APKsFragment extends Fragment {
     }
 
     private int getTabPosition(Activity activity) {
-        String mStatus = APKEditorUtils.getString("apkTypes", "apks", activity);
+        String mStatus = sUtils.getString("apkTypes", "apks", activity);
         if (mStatus.equals("bundles")) {
             return 1;
         } else {
@@ -205,14 +207,14 @@ public class APKsFragment extends Fragment {
     }
 
     private void launchInstallerFilePicker() {
-        if (!APKEditorUtils.getBoolean("firstInstall", false, requireActivity())) {
+        if (!sUtils.getBoolean("firstInstall", false, requireActivity())) {
             new MaterialAlertDialogBuilder(requireActivity())
                     .setIcon(R.mipmap.ic_launcher)
                     .setTitle(R.string.split_apk_installer)
                     .setMessage(getString(R.string.installer_message))
                     .setCancelable(false)
                     .setPositiveButton(getString(R.string.got_it), (dialog, id) -> {
-                        APKEditorUtils.saveBoolean("firstInstall", true, requireActivity());
+                        sUtils.saveBoolean("firstInstall", true, requireActivity());
                         launchAEEInstaller();
                     }).show();
         } else {
@@ -236,7 +238,7 @@ public class APKsFragment extends Fragment {
     }
 
     private void loadAPKs(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
@@ -259,31 +261,23 @@ public class APKsFragment extends Fragment {
         }.execute();
     }
 
-    private AsyncTasks handleSingleInstallationEvent(Uri uriFile, Activity activity) {
-        return new AsyncTasks() {
+    private sExecutor handleSingleInstallationEvent(Uri uriFile, Activity activity) {
+        return new sExecutor() {
             private File mFile = null;
             private String mExtension = null;
 
             @Override
             public void onPreExecute() {
                 mProgress.setVisibility(View.VISIBLE);
-                APKEditorUtils.delete(activity.getExternalFilesDir("APK").getAbsolutePath());
+                sUtils.delete(activity.getExternalFilesDir("APK"));
                 Common.getAPKList().clear();
             }
 
             @Override
             public void doInBackground() {
                 mExtension = ExternalAPKData.getExtension(uriFile, requireActivity());
-                mFile = new File(activity.getExternalFilesDir("APK"), "APK." + mExtension);
-                try (FileOutputStream outputStream = new FileOutputStream(mFile, false)) {
-                    InputStream inputStream = activity.getContentResolver().openInputStream(uriFile);
-                    int read;
-                    byte[] bytes = new byte[8192];
-                    while ((read = inputStream.read(bytes)) != -1) {
-                        outputStream.write(bytes, 0, read);
-                    }
-                } catch (IOException ignored) {
-                }
+                mFile = new File(activity.getExternalFilesDir("APK"), "tmp." + mExtension);
+                sUtils.copy(uriFile, mFile, activity);
             }
 
             @Override
@@ -316,13 +310,13 @@ public class APKsFragment extends Fragment {
         };
     }
 
-    private AsyncTasks handleMultipleAPKs(ClipData uriFiles, Activity activity) {
-        return new AsyncTasks() {
+    private sExecutor handleMultipleAPKs(ClipData uriFiles, Activity activity) {
+        return new sExecutor() {
 
             @Override
             public void onPreExecute() {
                 mProgress.setVisibility(View.VISIBLE);
-                APKEditorUtils.delete(activity.getExternalFilesDir("APK").getAbsolutePath());
+                sUtils.delete(activity.getExternalFilesDir("APK"));
                 Common.getAPKList().clear();
             }
 
diff --git a/app/src/main/java/com/apk/editor/fragments/AboutFragment.java b/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
index 1ac4535..999f07c 100644
--- a/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/AboutFragment.java
@@ -1,6 +1,5 @@
 package com.apk.editor.fragments;
 
-import android.annotation.SuppressLint;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.os.Handler;
@@ -10,7 +9,6 @@ import android.view.ViewGroup;
 
 import androidx.activity.OnBackPressedCallback;
 import androidx.annotation.Nullable;
-import androidx.core.content.ContextCompat;
 import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.GridLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
@@ -19,9 +17,12 @@ import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
 import com.apk.editor.adapters.AboutAdapter;
 import com.apk.editor.utils.APKEditorUtils;
-import com.apk.editor.utils.recyclerViewItems.AboutItems;
 
 import java.util.ArrayList;
+import java.util.List;
+
+import in.sunilpaulmathew.sCommon.Utils.sSerializableItems;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
@@ -30,31 +31,15 @@ public class AboutFragment extends Fragment {
 
     private boolean mExit;
     private final Handler mHandler = new Handler();
-    private final ArrayList <AboutItems> mData = new ArrayList<>();
 
-    @SuppressLint("UseCompatLoadingForDrawables")
     @Nullable
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         View mRootView = inflater.inflate(R.layout.fragment_about, container, false);
 
-        mData.add(new AboutItems(getString(R.string.app_name), getString(R.string.version, BuildConfig.VERSION_NAME), ContextCompat.getDrawable(requireActivity(), R.mipmap.ic_launcher), null));
-        mData.add(new AboutItems(getString(R.string.source_code), getString(R.string.source_code_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_github), "https://github.com/apk-editor/APK-Explorer-Editor"));
-        mData.add(new AboutItems(getString(R.string.support_group), getString(R.string.support_group_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_support), "https://t.me/apkexplorer"));
-        mData.add(new AboutItems(getString(R.string.report_issue), getString(R.string.report_issue_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_issue), "https://github.com/apk-editor/APK-Explorer-Editor/issues/new"));
-        mData.add(new AboutItems(getString(R.string.invite_friends), getString(R.string.invite_friends_Summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_share), null));
-        mData.add(new AboutItems(getString(R.string.documentation), getString(R.string.documentation_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_book), null));
-        mData.add(new AboutItems(getString(R.string.credits), getString(R.string.credits_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_credits), null));
-        if (APKEditorUtils.isFullVersion(requireActivity())) {
-            mData.add(new AboutItems(getString(R.string.donations), getString(R.string.donations_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_donate), "https://www.paypal.me/menacherry/"));
-        } else {
-            mData.add(new AboutItems(getString(R.string.privacy_policy), getString(R.string.privacy_policy_summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_privacy), "https://github.com/apk-editor/APK-Explorer-Editor/blob/master/privacy-policy.md"));
-            mData.add(new AboutItems(getString(R.string.rate_us), getString(R.string.rate_us_Summary), ContextCompat.getDrawable(requireActivity(), R.drawable.ic_rate), "https://play.google.com/store/apps/details?id=com.apk.explorer"));
-        }
-
         RecyclerView mRecyclerView = mRootView.findViewById(R.id.recycler_view);
-        mRecyclerView.setLayoutManager(new GridLayoutManager(requireActivity(), APKEditorUtils.getOrientation(requireActivity()) == Configuration.ORIENTATION_LANDSCAPE ? 3 : 2));
-        AboutAdapter mRecycleViewAdapter = new AboutAdapter(mData);
+        mRecyclerView.setLayoutManager(new GridLayoutManager(requireActivity(), sUtils.getOrientation(requireActivity()) == Configuration.ORIENTATION_LANDSCAPE ? 3 : 2));
+        AboutAdapter mRecycleViewAdapter = new AboutAdapter(getData());
         mRecyclerView.setAdapter(mRecycleViewAdapter);
 
         requireActivity().getOnBackPressedDispatcher().addCallback(new OnBackPressedCallback(true) {
@@ -64,7 +49,7 @@ public class AboutFragment extends Fragment {
                     mExit = false;
                     requireActivity().finish();
                 } else {
-                    APKEditorUtils.snackbar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back));
+                    sUtils.snackBar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back)).show();
                     mExit = true;
                     mHandler.postDelayed(() -> mExit = false, 2000);
                 }
@@ -73,5 +58,24 @@ public class AboutFragment extends Fragment {
 
         return mRootView;
     }
+
+    private List<sSerializableItems> getData() {
+        List<sSerializableItems> mData = new ArrayList<>();
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.mipmap.ic_launcher, requireActivity()), getString(R.string.app_name), getString(R.string.version, BuildConfig.VERSION_NAME),null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_github, requireActivity()), getString(R.string.source_code), getString(R.string.source_code_summary),"https://github.com/apk-editor/APK-Explorer-Editor"));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_support, requireActivity()), getString(R.string.support_group), getString(R.string.support_group_summary), "https://t.me/apkexplorer"));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_issue, requireActivity()), getString(R.string.report_issue), getString(R.string.report_issue_summary), "https://github.com/apk-editor/APK-Explorer-Editor/issues/new"));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_share, requireActivity()), getString(R.string.invite_friends), getString(R.string.invite_friends_Summary), null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_book, requireActivity()),getString(R.string.documentation), getString(R.string.documentation_summary), null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_translate, requireActivity()), getString(R.string.translations), getString(R.string.translations_summary),null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_credits, requireActivity()), getString(R.string.credits), getString(R.string.credits_summary), null));
+        if (APKEditorUtils.isFullVersion(requireActivity())) {
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_donate, requireActivity()), getString(R.string.donations), getString(R.string.donations_summary),"https://www.paypal.me/menacherry/"));
+        } else {
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_privacy, requireActivity()), getString(R.string.privacy_policy), getString(R.string.privacy_policy_summary), "https://github.com/apk-editor/APK-Explorer-Editor/blob/master/privacy-policy.md"));
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_rate, requireActivity()),getString(R.string.rate_us), getString(R.string.rate_us_Summary), "https://play.google.com/store/apps/details?id=com.apk.explorer"));
+        }
+        return mData;
+    }
     
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java b/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
index 06bfc19..d92b871 100644
--- a/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/ApplicationsFragment.java
@@ -24,15 +24,16 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.adapters.ApplicationsAdapter;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.google.android.material.tabs.TabLayout;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -74,23 +75,23 @@ public class ApplicationsFragment extends Fragment {
         mTabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
             @Override
             public void onTabSelected(TabLayout.Tab tab) {
-                String mStatus = APKEditorUtils.getString("appTypes", "all", requireActivity());
+                String mStatus = sUtils.getString("appTypes", "all", requireActivity());
                 switch (tab.getPosition()) {
                     case 0:
                         if (!mStatus.equals("all")) {
-                            APKEditorUtils.saveString("appTypes", "all", requireActivity());
+                            sUtils.saveString("appTypes", "all", requireActivity());
                             loadApps(requireActivity());
                         }
                         break;
                     case 1:
                         if (!mStatus.equals("system")) {
-                            APKEditorUtils.saveString("appTypes", "system", requireActivity());
+                            sUtils.saveString("appTypes", "system", requireActivity());
                             loadApps(requireActivity());
                         }
                         break;
                     case 2:
                         if (!mStatus.equals("user")) {
-                            APKEditorUtils.saveString("appTypes", "user", requireActivity());
+                            sUtils.saveString("appTypes", "user", requireActivity());
                             loadApps(requireActivity());
                         }
                         break;
@@ -156,7 +157,7 @@ public class ApplicationsFragment extends Fragment {
                     mExit = false;
                     requireActivity().finish();
                 } else {
-                    APKEditorUtils.snackbar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back));
+                    sUtils.snackBar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back)).show();
                     mExit = true;
                     mHandler.postDelayed(() -> mExit = false, 2000);
                 }
@@ -167,7 +168,7 @@ public class ApplicationsFragment extends Fragment {
     }
 
     private int getTabPosition(Activity activity) {
-        String mStatus = APKEditorUtils.getString("appTypes", "all", activity);
+        String mStatus = sUtils.getString("appTypes", "all", activity);
         if (mStatus.equals("user")) {
             return 2;
         } else if (mStatus.equals("system")) {
@@ -178,7 +179,7 @@ public class ApplicationsFragment extends Fragment {
     }
 
     private void loadApps(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
@@ -207,19 +208,19 @@ public class ApplicationsFragment extends Fragment {
         SubMenu sort = menu.addSubMenu(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_by));
 
         sort.add(0, 1, Menu.NONE, getString(R.string.sort_by_name)).setCheckable(true)
-                .setChecked(APKEditorUtils.getBoolean("sort_name", false, activity));
+                .setChecked(sUtils.getBoolean("sort_name", false, activity));
         sort.add(0, 2, Menu.NONE, getString(R.string.sort_by_id)).setCheckable(true)
-                .setChecked(APKEditorUtils.getBoolean("sort_id", true, activity));
+                .setChecked(sUtils.getBoolean("sort_id", true, activity));
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             sort.add(0, 3, Menu.NONE, getString(R.string.sort_by_installed)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("sort_installed", false, activity));
+                    .setChecked(sUtils.getBoolean("sort_installed", false, activity));
             sort.add(0, 4, Menu.NONE, getString(R.string.sort_by_updated)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("sort_updated", false, activity));
+                    .setChecked(sUtils.getBoolean("sort_updated", false, activity));
             sort.add(0, 5, Menu.NONE, getString(R.string.sort_by_size)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("sort_size", false, activity));
+                    .setChecked(sUtils.getBoolean("sort_size", false, activity));
         }
-        menu.add(Menu.NONE, 6, Menu.NONE, getString(APKEditorUtils.getBoolean("sort_size", false, activity) ?
-                R.string.sort_size : R.string.sort_order)).setCheckable(true).setChecked(APKEditorUtils.getBoolean(
+        menu.add(Menu.NONE, 6, Menu.NONE, getString(sUtils.getBoolean("sort_size", false, activity) ?
+                R.string.sort_size : R.string.sort_order)).setCheckable(true).setChecked(sUtils.getBoolean(
                         "az_order", true, activity));
         sort.setGroupCheckable(0, true, true);
         popupMenu.setOnMenuItemClickListener(item -> {
@@ -227,57 +228,57 @@ public class ApplicationsFragment extends Fragment {
                 case 0:
                     break;
                 case 1:
-                    if (!APKEditorUtils.getBoolean("sort_name", false, activity)) {
-                        APKEditorUtils.saveBoolean("sort_name", true, activity);
-                        APKEditorUtils.saveBoolean("sort_id", false, activity);
-                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
-                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
-                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                    if (!sUtils.getBoolean("sort_name", false, activity)) {
+                        sUtils.saveBoolean("sort_name", true, activity);
+                        sUtils.saveBoolean("sort_id", false, activity);
+                        sUtils.saveBoolean("sort_installed", false, activity);
+                        sUtils.saveBoolean("sort_updated", false, activity);
+                        sUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 2:
-                    if (!APKEditorUtils.getBoolean("sort_id", true, activity)) {
-                        APKEditorUtils.saveBoolean("sort_name", false, activity);
-                        APKEditorUtils.saveBoolean("sort_id", true, activity);
-                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
-                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
-                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                    if (!sUtils.getBoolean("sort_id", true, activity)) {
+                        sUtils.saveBoolean("sort_name", false, activity);
+                        sUtils.saveBoolean("sort_id", true, activity);
+                        sUtils.saveBoolean("sort_installed", false, activity);
+                        sUtils.saveBoolean("sort_updated", false, activity);
+                        sUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 3:
-                    if (!APKEditorUtils.getBoolean("sort_installed", false, activity)) {
-                        APKEditorUtils.saveBoolean("sort_name", false, activity);
-                        APKEditorUtils.saveBoolean("sort_id", false, activity);
-                        APKEditorUtils.saveBoolean("sort_installed", true, activity);
-                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
-                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                    if (!sUtils.getBoolean("sort_installed", false, activity)) {
+                        sUtils.saveBoolean("sort_name", false, activity);
+                        sUtils.saveBoolean("sort_id", false, activity);
+                        sUtils.saveBoolean("sort_installed", true, activity);
+                        sUtils.saveBoolean("sort_updated", false, activity);
+                        sUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 4:
-                    if (!APKEditorUtils.getBoolean("sort_updated", false, activity)) {
-                        APKEditorUtils.saveBoolean("sort_name", false, activity);
-                        APKEditorUtils.saveBoolean("sort_id", false, activity);
-                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
-                        APKEditorUtils.saveBoolean("sort_updated", true, activity);
-                        APKEditorUtils.saveBoolean("sort_size", false, activity);
+                    if (!sUtils.getBoolean("sort_updated", false, activity)) {
+                        sUtils.saveBoolean("sort_name", false, activity);
+                        sUtils.saveBoolean("sort_id", false, activity);
+                        sUtils.saveBoolean("sort_installed", false, activity);
+                        sUtils.saveBoolean("sort_updated", true, activity);
+                        sUtils.saveBoolean("sort_size", false, activity);
                         loadApps(activity);
                     }
                     break;
                 case 5:
-                    if (!APKEditorUtils.getBoolean("sort_size", false, activity)) {
-                        APKEditorUtils.saveBoolean("sort_name", false, activity);
-                        APKEditorUtils.saveBoolean("sort_id", false, activity);
-                        APKEditorUtils.saveBoolean("sort_installed", false, activity);
-                        APKEditorUtils.saveBoolean("sort_updated", false, activity);
-                        APKEditorUtils.saveBoolean("sort_size", true, activity);
+                    if (!sUtils.getBoolean("sort_size", false, activity)) {
+                        sUtils.saveBoolean("sort_name", false, activity);
+                        sUtils.saveBoolean("sort_id", false, activity);
+                        sUtils.saveBoolean("sort_installed", false, activity);
+                        sUtils.saveBoolean("sort_updated", false, activity);
+                        sUtils.saveBoolean("sort_size", true, activity);
                         loadApps(activity);
                     }
                     break;
                 case 6:
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, activity), activity);
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, activity), activity);
                     loadApps(activity);
                     break;
             }
diff --git a/app/src/main/java/com/apk/editor/fragments/CertificateFragment.java b/app/src/main/java/com/apk/editor/fragments/CertificateFragment.java
index a3c4e06..8c45738 100644
--- a/app/src/main/java/com/apk/editor/fragments/CertificateFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/CertificateFragment.java
@@ -9,7 +9,6 @@ import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
 
 import com.apk.editor.R;
-import com.apk.editor.utils.APKCertificate;
 import com.apk.editor.utils.ExternalAPKData;
 import com.google.android.material.textview.MaterialTextView;
 
@@ -27,9 +26,7 @@ public class CertificateFragment extends Fragment {
 
         if (ExternalAPKData.getCertificate() != null) {
             try {
-                if (APKCertificate.getCertificateDetails(ExternalAPKData.getAPKFile().getAbsolutePath(), requireActivity()) != null) {
-                    mText.setText(ExternalAPKData.getCertificate());
-                }
+                mText.setText(ExternalAPKData.getCertificate());
             } catch (Exception ignored) {
             }
         }
diff --git a/app/src/main/java/com/apk/editor/fragments/PermissionsFragment.java b/app/src/main/java/com/apk/editor/fragments/PermissionsFragment.java
index 4c5acc1..e021fc8 100644
--- a/app/src/main/java/com/apk/editor/fragments/PermissionsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/PermissionsFragment.java
@@ -12,6 +12,8 @@ import com.apk.editor.R;
 import com.apk.editor.utils.ExternalAPKData;
 import com.google.android.material.textview.MaterialTextView;
 
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
  */
@@ -28,7 +30,8 @@ public class PermissionsFragment extends Fragment {
             try {
                 StringBuilder sb = new StringBuilder();
                 for (String permission : ExternalAPKData.getPermissions()) {
-                    sb.append(permission).append("\n\n");
+                    sb.append(permission).append("\n").append(sPermissionUtils.getDescription(permission.replace(
+                            "android.permission.",""), requireActivity())).append("\n\n");
                 }
                 mText.setText(sb.toString());
             } catch (Exception ignored) {
diff --git a/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java b/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
index 253cdf3..a63c377 100644
--- a/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
+++ b/app/src/main/java/com/apk/editor/fragments/ProjectsFragment.java
@@ -22,13 +22,14 @@ import androidx.recyclerview.widget.RecyclerView;
 
 import com.apk.editor.R;
 import com.apk.editor.adapters.ProjectsAdapter;
-import com.apk.editor.utils.APKEditorUtils;
 import com.apk.editor.utils.AppData;
-import com.apk.editor.utils.AsyncTasks;
 import com.apk.editor.utils.Common;
 import com.apk.editor.utils.Projects;
 import com.google.android.material.textview.MaterialTextView;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 06, 2021
  */
@@ -74,10 +75,10 @@ public class ProjectsFragment extends Fragment {
             PopupMenu popupMenu = new PopupMenu(requireActivity(), mSortButton);
             Menu menu = popupMenu.getMenu();
             menu.add(Menu.NONE, 0, Menu.NONE, getString(R.string.sort_order)).setCheckable(true)
-                    .setChecked(APKEditorUtils.getBoolean("az_order", true, requireActivity()));
+                    .setChecked(sUtils.getBoolean("az_order", true, requireActivity()));
             popupMenu.setOnMenuItemClickListener(item -> {
                 if (item.getItemId() == 0) {
-                    APKEditorUtils.saveBoolean("az_order", !APKEditorUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
+                    sUtils.saveBoolean("az_order", !sUtils.getBoolean("az_order", true, requireActivity()), requireActivity());
                     loadProjects(requireActivity());
                 }
                 return false;
@@ -120,7 +121,7 @@ public class ProjectsFragment extends Fragment {
                     mExit = false;
                     requireActivity().finish();
                 } else {
-                    APKEditorUtils.snackbar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back));
+                    sUtils.snackBar(requireActivity().findViewById(android.R.id.content), getString(R.string.press_back)).show();
                     mExit = true;
                     mHandler.postDelayed(() -> mExit = false, 2000);
                 }
@@ -131,7 +132,7 @@ public class ProjectsFragment extends Fragment {
     }
 
     private void loadProjects(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
diff --git a/app/src/main/java/com/apk/editor/services/InstallerService.java b/app/src/main/java/com/apk/editor/services/InstallerService.java
index 890fcb2..8e59684 100644
--- a/app/src/main/java/com/apk/editor/services/InstallerService.java
+++ b/app/src/main/java/com/apk/editor/services/InstallerService.java
@@ -5,8 +5,7 @@ import android.content.Intent;
 import android.content.pm.PackageInstaller;
 import android.os.IBinder;
 
-import com.apk.editor.R;
-import com.apk.editor.utils.APKEditorUtils;
+import in.sunilpaulmathew.sCommon.Utils.sInstallerUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
@@ -15,43 +14,7 @@ public class InstallerService extends Service {
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        int status = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, -999);
-        switch (status) {
-            case PackageInstaller.STATUS_PENDING_USER_ACTION:
-                APKEditorUtils.saveString("installationStatus", "waiting", this);
-                Intent confirmationIntent = intent.getParcelableExtra(Intent.EXTRA_INTENT);
-                assert confirmationIntent != null;
-                confirmationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                try {
-                    startActivity(confirmationIntent);
-                } catch (Exception ignored) {
-                }
-                break;
-            case PackageInstaller.STATUS_SUCCESS:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_success), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_ABORTED:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_aborted), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_BLOCKED:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_blocked), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_CONFLICT:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_conflict), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_INCOMPATIBLE:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_incompatible), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_INVALID:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_bad_apks), this);
-                break;
-            case PackageInstaller.STATUS_FAILURE_STORAGE:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_storage), this);
-                break;
-            default:
-                APKEditorUtils.saveString("installationStatus", getString(R.string.installation_status_failed), this);
-                break;
-        }
+        sInstallerUtils.setStatus(intent.getIntExtra(PackageInstaller.EXTRA_STATUS, -999), intent, this);
         stopSelf();
         return START_NOT_STICKY;
     }
diff --git a/app/src/main/java/com/apk/editor/utils/APKCertificate.java b/app/src/main/java/com/apk/editor/utils/APKCertificate.java
deleted file mode 100644
index a74a03a..0000000
--- a/app/src/main/java/com/apk/editor/utils/APKCertificate.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package com.apk.editor.utils;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-import java.math.BigInteger;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.security.PublicKey;
-import java.security.cert.CertificateEncodingException;
-import java.security.cert.CertificateException;
-import java.security.cert.CertificateFactory;
-import java.security.cert.X509Certificate;
-import java.util.Locale;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
- * Ref: https://gitlab.com/guardianproject/checkey/-/blob/master/app/src/main/java/info/guardianproject/checkey/Utils.java
- */
-public class APKCertificate {
-
-    private static String getCertificateFingerprint(X509Certificate cert, String hashAlgorithm) {
-        String hash;
-        try {
-            MessageDigest md = MessageDigest.getInstance(hashAlgorithm);
-            byte[] rawCert = cert.getEncoded();
-            hash = toHexString(md.digest(rawCert));
-            md.reset();
-        } catch (CertificateEncodingException e) {
-            hash = "CertificateEncodingException";
-            e.printStackTrace();
-        } catch (NoSuchAlgorithmException e) {
-            hash = "NoSuchAlgorithm";
-            e.printStackTrace();
-        }
-        return hash;
-    }
-
-    private static X509Certificate[] getX509Certificates(String path, Context context) {
-        X509Certificate[] certs = null;
-        CertificateFactory certificateFactory;
-        try {
-            @SuppressLint("PackageManagerGetSignatures")
-            PackageInfo pkgInfo = AppData.getPackageManager(context).getPackageArchiveInfo(path, PackageManager.GET_SIGNATURES);
-            certificateFactory = CertificateFactory.getInstance("X509");
-            certs = new X509Certificate[pkgInfo.signatures.length];
-            for (int i = 0; i < certs.length; i++) {
-                byte[] cert = pkgInfo.signatures[i].toByteArray();
-                InputStream inStream = new ByteArrayInputStream(cert);
-                certs[i] = (X509Certificate) certificateFactory.generateCertificate(inStream);
-            }
-        } catch (CertificateException ignored) {
-        }
-        return certs;
-    }
-
-    private static String toHexString(byte[] bytes) {
-        BigInteger bi = new BigInteger(1, bytes);
-        return String.format("%0" + (bytes.length << 1) + "X", bi);
-    }
-
-    public static String getCertificateDetails(String path, Context context) {
-        StringBuilder sb = new StringBuilder();
-        X509Certificate[] certs = getX509Certificates(path, context);
-        if (certs == null || certs.length < 1) {
-            return null;
-        }
-        X509Certificate cert = certs[0];
-
-        PublicKey publickey = cert.getPublicKey();
-        try {
-            sb.append("Subject: ").append(cert.getSubjectDN().getName()).append("\n\n");
-            sb.append("Issuer: ").append(cert.getIssuerDN().getName()).append("\n\n");
-            sb.append("Issued Date: ").append(cert.getNotBefore().toString()).append("\n");
-            sb.append("Expiry Date: ").append(cert.getNotAfter().toString()).append("\n");
-            sb.append("Algorithm: ").append(cert.getSigAlgName()).append(", Type: ").append(publickey.getFormat()).append(", Version: ").append(cert.getVersion()).append("\n");
-            sb.append("Serial Number: ").append(cert.getSerialNumber().toString(16)).append("\n");
-            sb.append("\nChecksums\n").append("MD5: ").append(getCertificateFingerprint(cert, "MD5").toLowerCase(Locale.ENGLISH)).append("\n");
-            sb.append("SHA1: ").append(getCertificateFingerprint(cert, "SHA1").toLowerCase(Locale.ENGLISH)).append("\n");
-            sb.append("SHA-256: ").append(getCertificateFingerprint(cert, "SHA-256").toLowerCase(Locale.ENGLISH)).append("\n");
-            sb.append("\nPublic Key\n").append(publickey.toString().split("=")[1].split(",")[0]);
-        } catch (Exception ignored) {}
-        return sb.toString();
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/APKData.java b/app/src/main/java/com/apk/editor/utils/APKData.java
index 22cabda..942b302 100644
--- a/app/src/main/java/com/apk/editor/utils/APKData.java
+++ b/app/src/main/java/com/apk/editor/utils/APKData.java
@@ -5,8 +5,6 @@ import android.app.ProgressDialog;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
@@ -14,7 +12,6 @@ import android.provider.MediaStore;
 import android.view.WindowManager;
 
 import androidx.annotation.RequiresApi;
-import androidx.core.content.ContextCompat;
 import androidx.core.content.FileProvider;
 
 import com.apk.editor.BuildConfig;
@@ -33,6 +30,11 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -41,8 +43,8 @@ public class APKData {
     public static List<String> getData(Context context) {
         List<String> mData = new ArrayList<>();
         for (File mFile : getAPKList(context)) {
-            if (APKEditorUtils.getString("apkTypes", "apks", context).equals("bundles")) {
-                if (mFile.exists() && mFile.isDirectory() && APKEditorUtils.exist(mFile.toString() + "/base.apk")) {
+            if (sUtils.getString("apkTypes", "apks", context).equals("bundles")) {
+                if (mFile.exists() && mFile.isDirectory() && sUtils.exist(new File(mFile.toString(), "base.apk"))) {
                     if (Common.getSearchWord() == null) {
                         mData.add(mFile.getAbsolutePath());
                     } else if (Common.isTextMatched(mFile.getAbsolutePath(), Common.getSearchWord())) {
@@ -53,7 +55,7 @@ public class APKData {
                 if (mFile.exists() && mFile.getName().endsWith(".apk")) {
                     if (Common.getSearchWord() == null) {
                         mData.add(mFile.getAbsolutePath());
-                    } else if (getAppName(mFile.getAbsolutePath(), context) != null && Common.isTextMatched(Objects.requireNonNull(getAppName(
+                    } else if (sAPKUtils.getAPKName(mFile.getAbsolutePath(), context) != null && Common.isTextMatched(Objects.requireNonNull(sAPKUtils.getAPKName(
                             mFile.getAbsolutePath(), context)).toString(), Common.getSearchWord())) {
                         mData.add(mFile.getAbsolutePath());
                     } else if (Common.isTextMatched(mFile.getName(), Common.getSearchWord())) {
@@ -63,7 +65,7 @@ public class APKData {
             }
         }
         Collections.sort(mData);
-        if (!APKEditorUtils.getBoolean("az_order", true, context)) {
+        if (!sUtils.getBoolean("az_order", true, context)) {
             Collections.reverse(mData);
         }
         return mData;
@@ -71,56 +73,19 @@ public class APKData {
 
     private static File[] getAPKList(Context context) {
         if (!getExportAPKsPath(context).exists()) {
-            APKEditorUtils.mkdir(getExportAPKsPath(context).toString());
+            sUtils.mkdir(getExportAPKsPath(context));
         }
         return getExportAPKsPath(context).listFiles();
     }
 
     public static File getExportAPKsPath(Context context) {
-        if (Build.VERSION.SDK_INT < 29 && APKEditorUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
+        if (Build.VERSION.SDK_INT < 29 && sUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
             return new File(Environment.getExternalStorageDirectory(), "/AEE/exportedAPKs");
         } else {
             return context.getExternalFilesDir("");
         }
     }
 
-    private static PackageInfo getPackageInfo(String path, Context context) {
-        return AppData.getPackageManager(context).getPackageArchiveInfo(path, 0);
-    }
-
-    public static CharSequence getAppName(String path, Context context) {
-        try {
-            return getPackageInfo(path, context).applicationInfo.loadLabel(AppData.getPackageManager(context));
-        } catch (Exception ignored) {
-            return null;
-        }
-    }
-
-    public static CharSequence getAppID(String path, Context context) {
-        if (getPackageInfo(path, context) != null) {
-            return getPackageInfo(path, context).applicationInfo.packageName;
-        } else {
-            return null;
-        }
-    }
-
-    public static Drawable getAppIcon(String path, Context context) {
-        if (getPackageInfo(path, context) != null) {
-            return getPackageInfo(path, context).applicationInfo.loadIcon(AppData.getPackageManager(context));
-        } else {
-            Drawable drawable = ContextCompat.getDrawable(context, R.drawable.ic_android);
-            if (drawable != null) {
-                drawable.setTint(ContextCompat.getColor(context, APKEditorUtils.isDarkTheme(context) ?
-                        R.color.colorWhite : R.color.colorBlack));
-            }
-            return drawable;
-        }
-    }
-
-    public static String getVersionName(String path, Context context) {
-        return Objects.requireNonNull(AppData.getPackageManager(context).getPackageArchiveInfo(path, 0)).versionName;
-    }
-
     public static void signApks(File apk, File signedAPK, Context context) {
         try {
             checkAndPrepareSigningEnvironment(context);
@@ -130,7 +95,7 @@ public class APKData {
         } catch (Exception ignored) {}
     }
 
-    private static void checkAndPrepareSigningEnvironment(Context context) throws Exception {
+    private static void checkAndPrepareSigningEnvironment(Context context) {
         File signingEnvironment = getSigningEnvironmentDir(context);
         File pastFile = new File(signingEnvironment, "APKEditor");
         File privateKeyFile = new File(signingEnvironment, "APKEditor.pk8");
@@ -140,23 +105,23 @@ public class APKData {
 
         signingEnvironment.mkdir();
 
-        APKEditorUtils.copyFileFromAssets(context, "APKEditor", pastFile);
-        APKEditorUtils.copyFileFromAssets(context, "APKEditor.pk8", privateKeyFile);
+        sUtils.copyAssetFile("APKEditor", pastFile, context);
+        sUtils.copyAssetFile("APKEditor.pk8", privateKeyFile, context);
     }
 
     private static File getSigningEnvironmentDir(Context context) {
         return new File(context.getFilesDir(), "signing");
     }
 
-    public static String getParentFile(String path) {
+    private static String getParentFile(String path) {
         return Objects.requireNonNull(new File(path).getParentFile()).toString();
     }
 
     public static String findPackageName(Context context) {
         String name = null;
         for (String mAPKs : Common.getAPKList()) {
-            if (APKData.getAppID(mAPKs, context) != null) {
-                name = Objects.requireNonNull(APKData.getAppID(mAPKs, context)).toString();
+            if (sAPKUtils.getPackageName(mAPKs, context) != null) {
+                name = Objects.requireNonNull(sAPKUtils.getPackageName(mAPKs, context));
             }
         }
         return name;
@@ -184,33 +149,44 @@ public class APKData {
                 && file.getName().endsWith(".dex");
     }
 
+    public static void shareAPK(String apkPath, Context context) {
+        Uri uriFile = FileProvider.getUriForFile(context,
+                BuildConfig.APPLICATION_ID + ".provider", new File(apkPath));
+        Intent share = new Intent(Intent.ACTION_SEND);
+        share.setType("application/java-archive");
+        share.putExtra(Intent.EXTRA_TEXT, context.getString(R.string.share_summary, BuildConfig.VERSION_NAME));
+        share.putExtra(Intent.EXTRA_STREAM, uriFile);
+        share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+        context.startActivity(Intent.createChooser(share, context.getString(R.string.share_with)));
+    }
+
     public static void showSignatureErrorDialog(Context context) {
         new MaterialAlertDialogBuilder(context)
                 .setIcon(R.mipmap.ic_launcher)
                 .setTitle(R.string.app_name)
                 .setMessage(context.getString(R.string.signature_warning))
                 .setPositiveButton(R.string.got_it, (dialog, id) ->
-                        APKEditorUtils.saveBoolean("signature_warning", true, context)).show();
+                        sUtils.saveBoolean("signature_warning", true, context)).show();
     }
 
     private static void prepareSource(File buildDir, File exportPath, File backupPath, Context context) {
         for (File file : Objects.requireNonNull(exportPath.listFiles())) {
             if (!fileToExclude(file)) {
                 if (file.isDirectory()) {
-                    APKEditorUtils.copyDir(file, new File(buildDir, file.getName()));
+                    sUtils.copyDir(file, new File(buildDir, file.getName()));
                 } else {
-                    APKEditorUtils.copy(file.getAbsolutePath(), new File(buildDir, file.getName()).getAbsolutePath());
+                    sUtils.copy(file, new File(buildDir, file.getName()));
                 }
             }
             if (file.isDirectory() && file.getName().startsWith("classes") && file.getName().endsWith(".dex")) {
                 // Build new dex file if the smali files are modified
-                if (APKEditorUtils.exist(new File(file, "edited").getAbsolutePath())) {
+                if (sUtils.exist(new File(file, "edited"))) {
                     Common.setStatus(context.getString(R.string.building, file.getName()));
                     new SmaliToDex(file, new File(buildDir, file.getName()), 0, context).execute();
                 } else {
                     // Otherwise, use the original one from the backup folder
-                    if (APKEditorUtils.exist(new File(backupPath, file.getName()).getAbsolutePath())) {
-                        APKEditorUtils.copy(new File(backupPath, file.getName()).getAbsolutePath(), new File(buildDir, file.getName()).getAbsolutePath());
+                    if (sUtils.exist(new File(backupPath, file.getName()))) {
+                        sUtils.copy(new File(backupPath, file.getName()), new File(buildDir, file.getName()));
                     }
                 }
             }
@@ -218,7 +194,7 @@ public class APKData {
     }
 
     public static void prepareSignedAPK(Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
             private File mBackUpPath = null, mBuildDir = null;
             private final File mExportPath = new File(activity.getCacheDir(), Common.getAppID() != null ?
                     Common.getAppID() : new File(Common.getPath()).getName()), mTMPZip = new File(activity
@@ -237,12 +213,12 @@ public class APKData {
                 mBuildDir = new File(mExportPath, ".aeeBuild");
                 mBackUpPath = new File(mExportPath, ".aeeBackup");
                 if (mBuildDir.exists()) {
-                    APKEditorUtils.delete(mBuildDir.getAbsolutePath());
+                    sUtils.delete(mBuildDir);
                 }
                 mBuildDir.mkdirs();
 
                 if (mTMPZip.exists()) {
-                    APKEditorUtils.delete(mTMPZip.getAbsolutePath());
+                    sUtils.delete(mTMPZip);
                 }
             }
 
@@ -254,13 +230,13 @@ public class APKData {
                     return;
                 }
                 APKEditorUtils.zip(mBuildDir, mTMPZip);
-                if (Common.getAppID() != null && APKData.isAppBundle(AppData.getSourceDir(Common.getAppID(), activity))) {
+                if (Common.getAppID() != null && APKData.isAppBundle(sPackageUtils.getSourceDir(Common.getAppID(), activity))) {
                     File mParent = new File(getExportAPKsPath(activity), Common.getAppID() + "_aee-signed");
                     if (mParent.exists()) {
-                        APKEditorUtils.delete(mParent.getAbsolutePath());
+                        sUtils.delete(mParent);
                     }
                     mParent.mkdirs();
-                    for (String mSplits : splitApks(AppData.getSourceDir(Common.getAppID(), activity))) {
+                    for (String mSplits : splitApks(sPackageUtils.getSourceDir(Common.getAppID(), activity))) {
                         if (!new File(mSplits).getName().equals("base.apk")) {
                             Common.setStatus(activity.getString(R.string.signing, new File(mSplits).getName()));
                             signApks(new File(mSplits), new File(mParent, new File(mSplits).getName()), activity);
@@ -272,7 +248,7 @@ public class APKData {
                     File mParent = new File(getExportAPKsPath(activity), (Common.getAppID() != null ? Common.getAppID() :
                             new File(Common.getPath()).getName()) + "_aee-signed.apk");
                     if (mParent.exists()) {
-                        APKEditorUtils.delete(mParent.getAbsolutePath());
+                        sUtils.delete(mParent);
                     }
                     Common.setStatus(activity.getString(R.string.signing, mParent.getName()));
                     signApks(mTMPZip, mParent, activity);
@@ -281,8 +257,8 @@ public class APKData {
 
             @Override
             public void onPostExecute() {
-                APKEditorUtils.delete(mTMPZip.getAbsolutePath());
-                APKEditorUtils.delete(mBuildDir.getAbsolutePath());
+                sUtils.delete(mTMPZip);
+                sUtils.delete(mBuildDir);
                 if (!Common.isFinished()) {
                     Common.setFinishStatus(true);
                 }
@@ -292,7 +268,7 @@ public class APKData {
     }
 
     public static void reSignAPKs(String packageName, boolean install, Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
             private File mParent = null;
             private ProgressDialog mProgressDialog;
             private String mPackageName = null;
@@ -300,7 +276,7 @@ public class APKData {
             @Override
             public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(activity);
-                mProgressDialog.setMessage(packageName != null ? activity.getString(R.string.signing, AppData.getAppName(
+                mProgressDialog.setMessage(packageName != null ? activity.getString(R.string.signing, sPackageUtils.getAppName(
                         packageName, activity)) : activity.getString(R.string.resigning_apks));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
@@ -317,10 +293,10 @@ public class APKData {
             public void doInBackground() {
                 if (packageName != null) {
                     Common.getAPKList().clear();
-                    if (APKData.isAppBundle(AppData.getSourceDir(packageName, activity))) {
-                        Common.getAPKList().addAll(splitApks(AppData.getSourceDir(packageName, activity)));
+                    if (APKData.isAppBundle(sPackageUtils.getSourceDir(packageName, activity))) {
+                        Common.getAPKList().addAll(splitApks(sPackageUtils.getSourceDir(packageName, activity)));
                     } else {
-                        Common.getAPKList().add(AppData.getSourceDir(packageName, activity));
+                        Common.getAPKList().add(sPackageUtils.getSourceDir(packageName, activity));
                     }
                 }
                 if (mPackageName != null || packageName != null) {
@@ -337,7 +313,7 @@ public class APKData {
                             mParent = new File(getExportAPKsPath(activity), apkNameString + "_aee-signed");
                         }
                         if (mParent.exists()) {
-                            APKEditorUtils.delete(mParent.getAbsolutePath());
+                            sUtils.delete(mParent);
                         }
                         mParent.mkdirs();
                         for (String mSplits : Common.getAPKList()) {
@@ -350,7 +326,7 @@ public class APKData {
                             mParent = new File(getExportAPKsPath(activity), apkNameString + "_aee-signed.apk");
                         }
                         if (mParent.exists()) {
-                            APKEditorUtils.delete(mParent.getAbsolutePath());
+                            sUtils.delete(mParent);
                         }
                         signApks(new File(Common.getAPKList().get(0)), mParent, activity);
                     }
@@ -364,7 +340,7 @@ public class APKData {
                 } catch (IllegalArgumentException ignored) {
                 }
                 if (mPackageName == null && packageName == null) {
-                    APKEditorUtils.snackbar(activity.findViewById(android.R.id.content), activity.getString(R.string.installation_status_bad_apks));
+                    sUtils.snackBar(activity.findViewById(android.R.id.content), activity.getString(R.string.installation_status_bad_apks)).show();
                 } else {
                     if (packageName == null) {
                         activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
@@ -405,13 +381,13 @@ public class APKData {
     }
 
     public static void exportApp(String packageName, Context context) {
-        new AsyncTasks() {
+        new sExecutor() {
             private ProgressDialog mProgressDialog;
 
             @Override
             public void onPreExecute() {
                 mProgressDialog = new ProgressDialog(context);
-                mProgressDialog.setMessage(context.getString(R.string.exporting, AppData.getAppName(packageName, context)));
+                mProgressDialog.setMessage(context.getString(R.string.exporting, sPackageUtils.getAppName(packageName, context)));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
                 if (!getExportAPKsPath(context).exists()) {
@@ -421,20 +397,20 @@ public class APKData {
 
             @Override
             public void doInBackground() {
-                if (APKData.isAppBundle(AppData.getSourceDir(packageName, context))) {
+                if (APKData.isAppBundle(sPackageUtils.getSourceDir(packageName, context))) {
                     File mParent = new File(getExportAPKsPath(context) , packageName);
                     if (mParent.exists()) {
-                        APKEditorUtils.delete(mParent.getAbsolutePath());
+                        sUtils.delete(mParent);
                     } else {
                         mParent.mkdirs();
                     }
-                    for (String mSplits : splitApks(AppData.getSourceDir(packageName, context))) {
+                    for (String mSplits : splitApks(sPackageUtils.getSourceDir(packageName, context))) {
                         if (mSplits.endsWith(".apk")) {
-                            APKEditorUtils.copy(mSplits, new File(mParent, new File(mSplits).getName()).getAbsolutePath());
+                            sUtils.copy(new File(mSplits), new File(mParent, new File(mSplits).getName()));
                         }
                     }
                 } else {
-                    APKEditorUtils.copy(AppData.getSourceDir(packageName, context), new File(getExportAPKsPath(context),  packageName + ".apk").getAbsolutePath());
+                    sUtils.copy(new File(sPackageUtils.getSourceDir(packageName, context)), new File(getExportAPKsPath(context),  packageName + ".apk"));
                 }
             }
 
@@ -448,25 +424,6 @@ public class APKData {
         }.execute();
     }
 
-    public static MaterialAlertDialogBuilder shareAPK(String apkPath, Context context) {
-        return new MaterialAlertDialogBuilder(context)
-                .setIcon(R.mipmap.ic_launcher)
-                .setTitle(R.string.app_name)
-                .setMessage(context.getString(R.string.share_message, APKData.getAppName(apkPath, context)))
-                .setNegativeButton(context.getString(R.string.cancel), (dialog, id) -> {
-                })
-                .setPositiveButton(context.getString(R.string.share), (dialog, id) -> {
-                    Uri uriFile = FileProvider.getUriForFile(context,
-                            BuildConfig.APPLICATION_ID + ".provider", new File(apkPath));
-                    Intent share = new Intent(Intent.ACTION_SEND);
-                    share.setType("application/java-archive");
-                    share.putExtra(Intent.EXTRA_TEXT, context.getString(R.string.share_summary, BuildConfig.VERSION_NAME));
-                    share.putExtra(Intent.EXTRA_STREAM, uriFile);
-                    share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-                    context.startActivity(Intent.createChooser(share, context.getString(R.string.share_with)));
-                });
-    }
-
     public static MaterialAlertDialogBuilder shareAppBundleDialog(String path, Context context) {
         return new MaterialAlertDialogBuilder(context)
                 .setIcon(R.mipmap.ic_launcher)
@@ -478,8 +435,8 @@ public class APKData {
                         shareAppBundle(path, false, context).execute());
     }
 
-    public static AsyncTasks shareAppBundle(String path, boolean exportOnly, Context context) {
-        return new AsyncTasks() {
+    public static sExecutor shareAppBundle(String path, boolean exportOnly, Context context) {
+        return new sExecutor() {
             private File mFile;
             private ProgressDialog mProgressDialog;
 
@@ -489,8 +446,8 @@ public class APKData {
                 mProgressDialog.setMessage(context.getString(exportOnly ? R.string.saving : R.string.preparing_bundle));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
-                if (!APKEditorUtils.exist(Projects.getExportPath(context))) {
-                    APKEditorUtils.mkdir(Projects.getExportPath(context));
+                if (!sUtils.exist(new File(Projects.getExportPath(context)))) {
+                    sUtils.mkdir(new File(Projects.getExportPath(context)));
                 }
                 mFile = new File(Projects.getExportPath(context), new File(path).getName() + ".xapk");
             }
@@ -523,8 +480,8 @@ public class APKData {
         };
     }
 
-    public static AsyncTasks saveToDownloads(File file, Context context) {
-        return new AsyncTasks() {
+    public static sExecutor saveToDownloads(File file, Context context) {
+        return new sExecutor() {
             private ProgressDialog mProgressDialog;
 
             @Override
@@ -546,7 +503,7 @@ public class APKData {
                     values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS);
                     Uri uri = context.getContentResolver().insert(MediaStore.Files.getContentUri("external"), values);
                     OutputStream outputStream = context.getContentResolver().openOutputStream(uri);
-                    APKEditorUtils.copyStream(inputStream, outputStream);
+                    sUtils.copyStream(inputStream, outputStream);
                 } catch (IOException ignored) {
                 }
             }
diff --git a/app/src/main/java/com/apk/editor/utils/APKEditorUtils.java b/app/src/main/java/com/apk/editor/utils/APKEditorUtils.java
index 1051b57..3353ccb 100644
--- a/app/src/main/java/com/apk/editor/utils/APKEditorUtils.java
+++ b/app/src/main/java/com/apk/editor/utils/APKEditorUtils.java
@@ -1,44 +1,25 @@
 package com.apk.editor.utils;
 
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.content.res.Resources;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
-import android.preference.PreferenceManager;
 import android.text.Html;
-import android.util.DisplayMetrics;
 import android.util.TypedValue;
 import android.view.Gravity;
-import android.view.View;
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 
-import androidx.appcompat.app.AppCompatDelegate;
 import androidx.appcompat.widget.AppCompatEditText;
 
 import com.apk.editor.R;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
-import com.google.android.material.snackbar.Snackbar;
 
 import net.lingala.zip4j.ZipFile;
 import net.lingala.zip4j.exception.ZipException;
 
-import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
-import java.util.Locale;
 import java.util.Objects;
 
 /*
@@ -52,49 +33,10 @@ public class APKEditorUtils {
         return value.data;
     }
 
-    public static boolean isDarkTheme(Context context) {
-        int currentNightMode = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
-        return currentNightMode == Configuration.UI_MODE_NIGHT_YES;
-    }
-
-    public static void initializeAppTheme(Context context) {
-        String appTheme = getString("appTheme", "Auto", context);
-        if (appTheme.equals("Dark")) {
-            AppCompatDelegate.setDefaultNightMode(
-                    AppCompatDelegate.MODE_NIGHT_YES);
-        } else if (appTheme.equals("Light")) {
-            AppCompatDelegate.setDefaultNightMode(
-                    AppCompatDelegate.MODE_NIGHT_NO);
-        } else {
-            AppCompatDelegate.setDefaultNightMode(
-                    AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
-        }
-    }
-
-    public static void setLanguage(Context context) {
-        Locale myLocale = new Locale(getString("appLanguage", java.util.Locale.getDefault()
-                .getLanguage(), context));
-        Resources res = context.getResources();
-        DisplayMetrics dm = res.getDisplayMetrics();
-        Configuration conf = res.getConfiguration();
-        conf.locale = myLocale;
-        res.updateConfiguration(conf, dm);
-    }
-
-    public static String getLanguage(Context context) {
-        return getString("appLanguage", java.util.Locale.getDefault().getLanguage(),
-                context);
-    }
-
     public static boolean isFullVersion(Context context) {
         return context.getPackageName().equals("com.apk.editor");
     }
 
-    public static int getOrientation(Activity activity) {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && activity.isInMultiWindowMode() ?
-                Configuration.ORIENTATION_PORTRAIT : activity.getResources().getConfiguration().orientation;
-    }
-
     public interface OnDialogEditTextListener {
         void onClick(String text);
     }
@@ -141,24 +83,6 @@ public class APKEditorUtils {
         return dialog;
     }
 
-    public static void delete(String path) {
-        if (new File(path).isDirectory())
-            for (File child : Objects.requireNonNull(new File(path).listFiles()))
-                delete(child.getAbsolutePath());
-
-        new File(path).delete();
-    }
-
-    public static void mkdir(String path) {
-       new File(path).mkdirs();
-    }
-
-    public static void snackbar(View view, String message) {
-        Snackbar snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG);
-        snackbar.setAction(R.string.dismiss, v -> snackbar.dismiss());
-        snackbar.show();
-    }
-
     public static CharSequence fromHtml(String text) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             return Html.fromHtml(text, Html.FROM_HTML_MODE_LEGACY);
@@ -167,97 +91,6 @@ public class APKEditorUtils {
         }
     }
 
-    public static void create(String text, String path) {
-        try {
-            File logFile = new File(path);
-            logFile.createNewFile();
-            FileOutputStream fOut = new FileOutputStream(logFile);
-            OutputStreamWriter myOutWriter =
-                    new OutputStreamWriter(fOut);
-            myOutWriter.append(text);
-            myOutWriter.close();
-            fOut.close();
-        } catch (Exception ignored) {
-        }
-    }
-
-    public static void copy(String source, String dest) {
-        if (!exist(Objects.requireNonNull(new File(dest).getParentFile()).toString())) {
-            mkdir(Objects.requireNonNull(new File(dest).getParentFile()).toString());
-        }
-        try {
-            FileInputStream inputStream = new FileInputStream(source);
-            FileOutputStream outputStream = new FileOutputStream(dest);
-
-            copyStream(inputStream, outputStream);
-
-            inputStream.close();
-            outputStream.close();
-        } catch (IOException ignored) {}
-    }
-
-    public static void copyDir(File sourceDir, File destDir) {
-        if (!destDir.exists()) {
-            destDir.mkdirs();
-        }
-        for (File mFile : Objects.requireNonNull(sourceDir.listFiles())) {
-            if (mFile.isDirectory()) {
-                copyDir(mFile, new File(destDir.getAbsoluteFile(), mFile.getName()));
-            } else {
-                copy(mFile.getAbsolutePath(), destDir.getAbsolutePath() + "/" + mFile.getName());
-            }
-        }
-    }
-
-    public static String read(String file) {
-        BufferedReader buf = null;
-        try {
-            buf = new BufferedReader(new FileReader(file));
-
-            StringBuilder stringBuilder = new StringBuilder();
-            String line;
-            while ((line = buf.readLine()) != null) {
-                stringBuilder.append(line).append("\n");
-            }
-
-            return stringBuilder.toString().trim();
-        } catch (IOException ignored) {
-        } finally {
-            try {
-                if (buf != null) buf.close();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-        return null;
-    }
-
-    public static void copyFileFromAssets(Context context, String assetFileName, File destination) throws IOException {
-        InputStream inputStream = context.getAssets().open(assetFileName);
-        FileOutputStream outputStream = new FileOutputStream(destination);
-
-        byte[] buf = new byte[1024 * 1024];
-        int len;
-        while ((len = inputStream.read(buf)) > 0) {
-            outputStream.write(buf, 0, len);
-        }
-
-        inputStream.close();
-        outputStream.close();
-    }
-
-    public static void copyStream(InputStream from, OutputStream to) throws IOException {
-        byte[] buf = new byte[1024 * 1024];
-        int len;
-        while ((len = from.read(buf)) > 0) {
-            to.write(buf, 0, len);
-        }
-    }
-
-    public static boolean exist(String file) {
-        return new File(file).exists();
-    }
-
     public static void unzip(String zip, String path) {
         try {
             new ZipFile(zip).extractAll(path);
@@ -277,16 +110,6 @@ public class APKEditorUtils {
         } catch (ZipException ignored) {}
     }
 
-    public static void launchUrl(String url, Activity activity) {
-        if (url == null) return;
-        try {
-            Intent i = new Intent(Intent.ACTION_VIEW);
-            i.setData(Uri.parse(url));
-            activity.startActivity(i);
-        } catch (ActivityNotFoundException ignored) {
-        }
-    }
-
     public static boolean isDocumentsUI(Uri uri) {
         return "com.android.providers.downloads.documents".equals(uri.getAuthority());
     }
@@ -318,20 +141,4 @@ public class APKEditorUtils {
         return path;
     }
 
-    public static boolean getBoolean(String name, boolean defaults, Context context) {
-        return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(name, defaults);
-    }
-
-    public static void saveBoolean(String name, boolean value, Context context) {
-        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(name, value).apply();
-    }
-
-    public static String getString(String name, String defaults, Context context) {
-        return PreferenceManager.getDefaultSharedPreferences(context).getString(name, defaults);
-    }
-
-    public static void saveString(String name, String value, Context context) {
-        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(name, value).apply();
-    }
-
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/APKExplorer.java b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
index 035afd4..4fd5c68 100644
--- a/app/src/main/java/com/apk/editor/utils/APKExplorer.java
+++ b/app/src/main/java/com/apk/editor/utils/APKExplorer.java
@@ -1,11 +1,9 @@
 package com.apk.editor.utils;
 
-import android.Manifest;
 import android.app.Activity;
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
@@ -17,13 +15,11 @@ import android.os.Environment;
 import android.provider.MediaStore;
 
 import androidx.appcompat.widget.AppCompatImageButton;
-import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.APKExploreActivity;
 import com.apk.editor.activities.APKTasksActivity;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -33,6 +29,11 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sSingleItemDialog;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -48,7 +49,7 @@ public class APKExplorer {
                 }
             }
             Collections.sort(mDir, String.CASE_INSENSITIVE_ORDER);
-            if (!APKEditorUtils.getBoolean("az_order", true, activity)) {
+            if (!sUtils.getBoolean("az_order", true, activity)) {
                 Collections.reverse(mDir);
             }
             mData.addAll(mDir);
@@ -64,7 +65,7 @@ public class APKExplorer {
                 }
             }
             Collections.sort(mFiles, String.CASE_INSENSITIVE_ORDER);
-            if (!APKEditorUtils.getBoolean("az_order", true, activity)) {
+            if (!sUtils.getBoolean("az_order", true, activity)) {
                 Collections.reverse(mFiles);
             }
             mData.addAll(mFiles);
@@ -92,31 +93,14 @@ public class APKExplorer {
         return path.endsWith(".apk") || path.endsWith(".apks") || path.endsWith(".apkm") || path.endsWith(".xapk");
     }
 
-    public static boolean isPermissionDenied(Context context) {
-        if (Build.VERSION.SDK_INT < 29) {
-            String permission = android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
-            return (context.checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED);
-        } else {
-            return false;
-        }
-    }
-
-    public static void requestPermission(Activity activity) {
-        if (Build.VERSION.SDK_INT < 29) {
-            ActivityCompat.requestPermissions(activity, new String[] {
-                    Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
-            APKEditorUtils.snackbar(activity.findViewById(android.R.id.content), activity.getString(R.string.permission_denied_message));
-        }
-    }
-
     public static void setIcon(AppCompatImageButton icon, Drawable drawable, Context context) {
         icon.setImageDrawable(drawable);
-        icon.setColorFilter(APKEditorUtils.isDarkTheme(context) ? ContextCompat.getColor(context, R.color.colorWhite) :
+        icon.setColorFilter(sUtils.isDarkTheme(context) ? ContextCompat.getColor(context, R.color.colorWhite) :
                 ContextCompat.getColor(context, R.color.colorBlack));
     }
 
     public static int getSpanCount(Activity activity) {
-        return APKEditorUtils.getOrientation(activity) == Configuration.ORIENTATION_LANDSCAPE ? 2 : 1;
+        return sUtils.getOrientation(activity) == Configuration.ORIENTATION_LANDSCAPE ? 2 : 1;
     }
 
     public static List<String> getTextViewData(String path, Context context) {
@@ -125,10 +109,10 @@ public class APKExplorer {
         if (ExternalAPKData.isFMInstall()) {
             text = path;
         } else if (Common.getAppID() != null && APKExplorer.isBinaryXML(path)) {
-            text = ExternalAPKData.readXMLFromAPK(AppData.getSourceDir(Common.getAppID(), context), path.replace(
+            text = ExternalAPKData.readXMLFromAPK(sPackageUtils.getSourceDir(Common.getAppID(), context), path.replace(
                     context.getCacheDir().getPath() + "/" + Common.getAppID() + "/", ""));
         } else {
-            text = APKEditorUtils.read(path);
+            text = sUtils.read(new File(path));
         }
         if (text != null) {
             for (String line : text.split("\\r?\\n")) {
@@ -189,11 +173,6 @@ public class APKExplorer {
         return bitmap;
     }
 
-    private static CharSequence[] getInstallerMenu(Context context) {
-        return new CharSequence[]{context.getString(R.string.install), context.getString(R.string.install_resign),
-                context.getString(R.string.resign_only)};
-    }
-
     private static void installAPKs(Activity activity) {
         if (APKData.findPackageName(activity) != null) {
             if (Common.getAPKList().size() > 1) {
@@ -205,36 +184,43 @@ public class APKExplorer {
                 activity.finish();
             }
         } else {
-            APKEditorUtils.snackbar(activity.findViewById(android.R.id.content), activity.getString(R.string.installation_status_bad_apks));
+            sUtils.snackBar(activity.findViewById(android.R.id.content), activity.getString(R.string.installation_status_bad_apks)).show();
         }
     }
 
     public static void handleAPKs(Activity activity) {
         if (APKEditorUtils.isFullVersion(activity)) {
-            if (APKEditorUtils.getString("installerAction", null, activity) == null) {
-                new MaterialAlertDialogBuilder(activity)
-                        .setItems(getInstallerMenu(activity), (dialog, itemPosition) -> {
-                            if (itemPosition == 0) {
-                                installAPKs(activity);
-                            } else if (itemPosition == 1) {
-                                if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
-                                    AppData.getSigningOptionsMenu(null, activity).show();
-                                } else {
-                                    APKData.reSignAPKs(null, true, activity);
-                                }
+            if (sUtils.getString("installerAction", null, activity) == null) {
+                new sSingleItemDialog(0, null, new String[] {
+                        activity.getString(R.string.install),
+                        activity.getString(R.string.install_resign),
+                        activity.getString(R.string.resign_only)
+                }, activity) {
+
+                    @Override
+                    public void onItemSelected(int itemPosition) {
+                        sUtils.saveBoolean("firstSigning", true, activity);
+                        if (itemPosition == 0) {
+                            installAPKs(activity);
+                        } else if (itemPosition == 1) {
+                            if (!sUtils.getBoolean("firstSigning", false, activity)) {
+                                AppData.getSigningOptionsMenu(null, activity).show();
                             } else {
-                                if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
-                                    AppData.getSigningOptionsMenu(null, activity).show();
-                                } else {
-                                    APKData.reSignAPKs(null, false, activity);
-                                }
+                                APKData.reSignAPKs(null, true, activity);
                             }
-                            dialog.dismiss();
-                        }).show();
-            } else if (APKEditorUtils.getString("installerAction", null, activity).equals(activity.getString(R.string.install))) {
+                        } else {
+                            if (!sUtils.getBoolean("firstSigning", false, activity)) {
+                                AppData.getSigningOptionsMenu(null, activity).show();
+                            } else {
+                                APKData.reSignAPKs(null, false, activity);
+                            }
+                        }
+                    }
+                }.show();
+            } else if (sUtils.getString("installerAction", null, activity).equals(activity.getString(R.string.install))) {
                 installAPKs(activity);
             } else {
-                if (!APKEditorUtils.getBoolean("firstSigning", false, activity)) {
+                if (!sUtils.getBoolean("firstSigning", false, activity)) {
                     AppData.getSigningOptionsMenu(null, activity).show();
                 } else {
                     APKData.reSignAPKs(null,true, activity);
@@ -246,7 +232,7 @@ public class APKExplorer {
     }
 
     public static void exploreAPK(String packageName, Context context) {
-        new AsyncTasks() {
+        new sExecutor() {
             private File mBackUpPath, mExplorePath;
 
             @Override
@@ -260,7 +246,7 @@ public class APKExplorer {
                     Common.setStatus(null);
                     Intent apkTasks = new Intent(context, APKTasksActivity.class);
                     context.startActivity(apkTasks);
-                    Common.setStatus(context.getString(R.string.exploring, AppData.getAppName(packageName, context)));
+                    Common.setStatus(context.getString(R.string.exploring, sPackageUtils.getAppName(packageName, context)));
                 }
             }
 
@@ -268,17 +254,17 @@ public class APKExplorer {
             public void doInBackground() {
                 if (!mExplorePath.exists()) {
                     mExplorePath.mkdirs();
-                    APKEditorUtils.unzip(AppData.getSourceDir(packageName, context), mExplorePath.getAbsolutePath());
+                    APKEditorUtils.unzip(sPackageUtils.getSourceDir(packageName, context), mExplorePath.getAbsolutePath());
                     // Decompile dex file(s)
                     for (File files : Objects.requireNonNull(mExplorePath.listFiles())) {
                         if (files.getName().startsWith("classes") && files.getName().endsWith(".dex")) {
                             mBackUpPath.mkdirs();
-                            APKEditorUtils.copy(files.getAbsolutePath(), new File(mBackUpPath, files.getName()).getAbsolutePath());
-                            APKEditorUtils.delete(files.getAbsolutePath());
+                            sUtils.copy(files, new File(mBackUpPath, files.getName()));
+                            sUtils.delete(files);
                             File mDexExtractPath = new File(mExplorePath, files.getName());
                             mDexExtractPath.mkdirs();
                             Common.setStatus(context.getString(R.string.decompiling, files.getName()));
-                            new DexToSmali(false, new File(AppData.getSourceDir(Common.getAppID(), context)), mDexExtractPath, 0, files.getName()).execute();
+                            new DexToSmali(false, new File(sPackageUtils.getSourceDir(Common.getAppID(), context)), mDexExtractPath, 0, files.getName()).execute();
                         }
                     }
                 }
diff --git a/app/src/main/java/com/apk/editor/utils/AppData.java b/app/src/main/java/com/apk/editor/utils/AppData.java
index c3f2b5a..89f2ea1 100644
--- a/app/src/main/java/com/apk/editor/utils/AppData.java
+++ b/app/src/main/java/com/apk/editor/utils/AppData.java
@@ -6,7 +6,6 @@ import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
-import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.view.inputmethod.InputMethodManager;
 
@@ -15,7 +14,6 @@ import androidx.appcompat.widget.AppCompatEditText;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.utils.recyclerViewItems.PackageItems;
-import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -24,6 +22,11 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+import in.sunilpaulmathew.sCommon.Utils.sPackageUtils;
+import in.sunilpaulmathew.sCommon.Utils.sSingleItemDialog;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -31,16 +34,16 @@ public class AppData {
 
     public static List<PackageItems> getRawData(Context context) {
         List<PackageItems> mData = new ArrayList<>();
-        List<ApplicationInfo> packages = getPackageManager(context).getInstalledApplications(PackageManager.GET_META_DATA);
+        List<ApplicationInfo> packages = context.getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
         for (ApplicationInfo packageInfo: packages) {
             mData.add(new PackageItems(
-                    getAppName(packageInfo.packageName, context).toString(),
+                    sPackageUtils.getAppName(packageInfo.packageName, context).toString(),
                     packageInfo.packageName,
-                    getVersionName(getSourceDir(packageInfo.packageName, context), context),
-                    new File(getSourceDir(packageInfo.packageName, context)).length(),
+                    sAPKUtils.getVersionName(sPackageUtils.getSourceDir(packageInfo.packageName, context), context),
+                    new File(sPackageUtils.getSourceDir(packageInfo.packageName, context)).length(),
                     Objects.requireNonNull(getPackageInfo(packageInfo.packageName, context)).firstInstallTime,
                     Objects.requireNonNull(getPackageInfo(packageInfo.packageName, context)).lastUpdateTime,
-                    getAppIcon(packageInfo.packageName, context)
+                    sPackageUtils.getAppIcon(packageInfo.packageName, context)
             ));
         }
         return mData;
@@ -51,10 +54,10 @@ public class AppData {
         try {
             boolean mAppType;
             for (PackageItems packageItem : Common.getPackageData()) {
-                if (APKEditorUtils.getString("appTypes", "all", context).equals("system")) {
-                    mAppType = isSystemApp(packageItem.getPackageName(), context);
-                } else if (APKEditorUtils.getString("appTypes", "all", context).equals("user")) {
-                    mAppType = !isSystemApp(packageItem.getPackageName(), context);
+                if (sUtils.getString("appTypes", "all", context).equals("system")) {
+                    mAppType = sPackageUtils.isSystemApp(packageItem.getPackageName(), context);
+                } else if (sUtils.getString("appTypes", "all", context).equals("user")) {
+                    mAppType = !sPackageUtils.isSystemApp(packageItem.getPackageName(), context);
                 } else {
                     mAppType = true;
                 }
@@ -67,18 +70,18 @@ public class AppData {
                     }
                 }
             }
-            if (APKEditorUtils.getBoolean("sort_name", false, context)) {
+            if (sUtils.getBoolean("sort_name", false, context)) {
                 Collections.sort(mData, (lhs, rhs) -> String.CASE_INSENSITIVE_ORDER.compare(lhs.getAppName(), rhs.getAppName()));
-            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_size", false, context)) {
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && sUtils.getBoolean("sort_size", false, context)) {
                 Collections.sort(mData, Comparator.comparingLong(PackageItems::getAPKSize));
-            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_installed", false, context)) {
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && sUtils.getBoolean("sort_installed", false, context)) {
                 Collections.sort(mData, Comparator.comparingLong(PackageItems::getInstalledTime));
-            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && APKEditorUtils.getBoolean("sort_updated", false, context)) {
+            } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && sUtils.getBoolean("sort_updated", false, context)) {
                 Collections.sort(mData, Comparator.comparingLong(PackageItems::getUpdatedTime));
             } else {
                 Collections.sort(mData, (lhs, rhs) -> String.CASE_INSENSITIVE_ORDER.compare(lhs.getPackageName(), rhs.getPackageName()));
             }
-            if (!APKEditorUtils.getBoolean("az_order", true, context)) {
+            if (!sUtils.getBoolean("az_order", true, context)) {
                 Collections.reverse(mData);
             }
         } catch (NullPointerException ignored) {}
@@ -87,7 +90,7 @@ public class AppData {
 
     public static PackageInfo getPackageInfo(String packageName, Context context) {
         try {
-            return getPackageManager(context).getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
+            return context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
         } catch (Exception ignored) {
         }
         return null;
@@ -108,103 +111,51 @@ public class AppData {
         }
     }
 
-    public static PackageManager getPackageManager(Context context) {
-        return context.getPackageManager();
-    }
-
-    public static ApplicationInfo getAppInfo(String packageName, Context context) {
-        try {
-            return getPackageManager(context).getApplicationInfo(packageName, PackageManager.GET_META_DATA);
-        } catch (Exception ignored) {
-        }
-        return null;
-    }
-
-    public static CharSequence getAppName(String packageName, Context context) {
-        return getPackageManager(context).getApplicationLabel(Objects.requireNonNull(getAppInfo(
-                packageName, context)));
-    }
-
-    private static CharSequence[] getExportOptionsMenu(Context context) {
-        return new CharSequence[] {
-                context.getString(R.string.export_storage),
-                context.getString(R.string.export_resign)
-        };
-    }
-
-    public static CharSequence[] getSigningOptionsMenu(Context context) {
-        return new CharSequence[] {
+    public static String[] getSigningOptionsMenu(Context context) {
+        return new String[] {
                 context.getString(R.string.signing_default),
                 context.getString(R.string.signing_custom)
         };
     }
 
-    public static Drawable getAppIcon(String packageName, Context context) {
-        return getPackageManager(context).getApplicationIcon(Objects.requireNonNull(getAppInfo(packageName, context)));
-    }
-
-    public static MaterialAlertDialogBuilder getExportOptionsMenu(String packageName, Context context) {
-        return new MaterialAlertDialogBuilder(context)
-                .setItems(getExportOptionsMenu(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKData.exportApp(packageName, context);
-                    } else {
-                        if (!APKEditorUtils.getBoolean("firstSigning", false, context)) {
-                            getSigningOptionsMenu(packageName, context).show();
-                        } else {
-                            APKData.reSignAPKs(packageName, false, (Activity) context);
-                        }
-                    }
-                    dialog.dismiss();
-                });
-    }
+    public static sSingleItemDialog getExportOptionsMenu(String packageName, Context context) {
+        return new sSingleItemDialog(0, null, new String[] {
+                context.getString(R.string.export_storage),
+                context.getString(R.string.export_resign)
+        }, context) {
 
-    public static MaterialAlertDialogBuilder getSigningOptionsMenu(String packageName, Context context) {
-        return new MaterialAlertDialogBuilder(context)
-                .setItems(getSigningOptionsMenu(context), (dialog, itemPosition) -> {
-                    APKEditorUtils.saveBoolean("firstSigning", true, context);
-                    if (itemPosition == 0) {
-                        APKData.reSignAPKs(packageName,false, (Activity) context);
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    APKData.exportApp(packageName, context);
+                } else {
+                    if (!sUtils.getBoolean("firstSigning", false, context)) {
+                        getSigningOptionsMenu(packageName, context).show();
                     } else {
-                        Intent signing = new Intent(context, APKSignActivity.class);
-                        context.startActivity(signing);
+                        APKData.reSignAPKs(packageName, false, (Activity) context);
                     }
-                    dialog.dismiss();
-                });
-    }
-
-    public static String getSourceDir(String packageName, Context context) {
-        return Objects.requireNonNull(getAppInfo(packageName, context)).sourceDir;
-    }
-
-    public static boolean isAppInstalled(String packageName, Context context) {
-        try {
-            getPackageManager(context).getApplicationInfo(packageName, 0);
-            return true;
-        } catch (PackageManager.NameNotFoundException ignored) {
-            return false;
-        }
-    }
-
-    public static boolean isSystemApp(String packageName, Context context) {
-        try {
-            return (Objects.requireNonNull(getAppInfo(packageName, context)).flags & ApplicationInfo.FLAG_SYSTEM) != 0;
-        } catch (NullPointerException ignored) {}
-        return false;
+                }
+            }
+        };
     }
 
-    public static String getAPKSize(long apkSize) {
-        long size = apkSize / 1024;
-        long decimal = (size - 1024) / 1024;
-        if (size > 1024) {
-            return size / 1024 + "." + decimal + " MB";
-        } else {
-            return size  + " KB";
-        }
-    }
+    public static sSingleItemDialog getSigningOptionsMenu(String packageName, Context context) {
+        return new sSingleItemDialog(0, null, new String[] {
+                context.getString(R.string.signing_default),
+                context.getString(R.string.signing_custom)
+        }, context) {
 
-    public static String getVersionName(String path, Context context) {
-        return getPackageManager(context).getPackageArchiveInfo(path, 0).versionName;
+            @Override
+            public void onItemSelected(int itemPosition) {
+                sUtils.saveBoolean("firstSigning", true, context);
+                if (itemPosition == 0) {
+                    APKData.reSignAPKs(packageName,false, (Activity) context);
+                } else {
+                    Intent signing = new Intent(context, APKSignActivity.class);
+                    context.startActivity(signing);
+                }
+            }
+        };
     }
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/AppSettings.java b/app/src/main/java/com/apk/editor/utils/AppSettings.java
index e8c20fa..f8db1b3 100644
--- a/app/src/main/java/com/apk/editor/utils/AppSettings.java
+++ b/app/src/main/java/com/apk/editor/utils/AppSettings.java
@@ -7,44 +7,46 @@ import android.content.Intent;
 import android.os.Build;
 import android.os.Environment;
 
-import androidx.appcompat.app.AppCompatDelegate;
-import androidx.core.content.ContextCompat;
-
 import com.apk.editor.MainActivity;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKSignActivity;
 import com.apk.editor.adapters.SettingsAdapter;
-import com.apk.editor.utils.recyclerViewItems.SettingsItems;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.List;
+
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sPermissionUtils;
+import in.sunilpaulmathew.sCommon.Utils.sSerializableItems;
+import in.sunilpaulmathew.sCommon.Utils.sSingleChoiceDialog;
+import in.sunilpaulmathew.sCommon.Utils.sThemeUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
 
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 25, 2021
  */
 public class AppSettings {
 
-    private static final ArrayList <SettingsItems> mData = new ArrayList<>();
-
-    public static ArrayList<SettingsItems> getData(Context context) {
-        mData.clear();
-        mData.add(new SettingsItems(context.getString(R.string.user_interface), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.app_theme), getAppTheme(context), ContextCompat.getDrawable(context, R.drawable.ic_theme)));
-        mData.add(new SettingsItems(context.getString(R.string.language), getLanguage(context), ContextCompat.getDrawable(context, R.drawable.ic_translate)));
-        mData.add(new SettingsItems(context.getString(R.string.settings_general), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
-        mData.add(new SettingsItems(context.getString(R.string.export_path_apks), getExportAPKsPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
-        mData.add(new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
+    public static ArrayList<sSerializableItems> getData(Context context) {
+        ArrayList <sSerializableItems> mData = new ArrayList<>();
+        mData.add(new sSerializableItems(null, context.getString(R.string.user_interface), null, null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_theme, context), context.getString(R.string.app_theme), sThemeUtils.getAppTheme(context), null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_translate, context), context.getString(R.string.language), getLanguage(context), null));
+        mData.add(new sSerializableItems(null, context.getString(R.string.settings_general), null, null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_projects, context), context.getString(R.string.project_exist_action), getProjectExistAction(context), null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_apks), getExportAPKsPath(context), null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_resources), getExportPath(context), null));
         if (APKEditorUtils.isFullVersion(context)) {
-            mData.add(new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
-            mData.add(new SettingsItems(context.getString(R.string.signing_title), null, null));
-            mData.add(new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
-            mData.add(new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
-            mData.add(new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_edit, context), context.getString(R.string.text_editing), getEditingOptions(context), null));
+            mData.add(new sSerializableItems(null, context.getString(R.string.signing_title), null, null));
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_android, context), context.getString(R.string.export_options), getAPKs(context), null));
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_installer, context), context.getString(R.string.installer_action), getInstallerAction(context), null));
+            mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_key, context), context.getString(R.string.sign_apk_with), getAPKSign(context), null));
         }
-        mData.add(new SettingsItems(context.getString(R.string.settings_misc), null, null));
-        mData.add(new SettingsItems(context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), ContextCompat.getDrawable(context, R.drawable.ic_delete)));
+        mData.add(new sSerializableItems(null, context.getString(R.string.settings_misc), null, null));
+        mData.add(new sSerializableItems(sUtils.getDrawable(R.drawable.ic_delete, context), context.getString(R.string.clear_cache), context.getString(R.string.clear_cache_summary), null));
         return mData;
     }
 
@@ -56,15 +58,6 @@ public class AppSettings {
         }
     }
 
-    private static int getAppThemePosition(Context context) {
-        for (int i = 0; i < getAppThemeMenu(context).length; i++) {
-            if (getAppTheme(context).equals(getAppThemeMenu(context)[i])) {
-                return i;
-            }
-        }
-        return 0;
-    }
-
     private static int getAppLanguagePosition(Context context) {
         for (int i = 0; i < getAppLanguageMenu(context).length; i++) {
             if (getLanguage(context).equals(getAppLanguageMenu(context)[i])) {
@@ -75,7 +68,7 @@ public class AppSettings {
     }
 
     private static int getEditingOptionsPosition(Context context) {
-        if (APKEditorUtils.getBoolean("editText", false, context)) {
+        if (sUtils.getBoolean("editText", false, context)) {
             return 1;
         } else {
             return 0;
@@ -126,19 +119,40 @@ public class AppSettings {
         return 2;
     }
 
-    private static String getAppTheme(Context context) {
-        String appTheme = APKEditorUtils.getString("appTheme", "Auto", context);
-        if (appTheme.equals("Dark")) {
-            return context.getString(R.string.app_theme_dark);
-        } else if (appTheme.equals("Light")) {
-            return context.getString(R.string.app_theme_light);
-        } else {
-            return context.getString(R.string.app_theme_auto);
+    public static List<sSerializableItems> getCredits(Context context) {
+        List<sSerializableItems> mData = new ArrayList<>();
+        mData.add(new sSerializableItems(null, "Willi Ye", "Kernel Adiutor", "https://github.com/Grarak/KernelAdiutor"));
+        mData.add(new sSerializableItems(null, "Hsiafan", "APK parser", "https://github.com/hsiafan/apk-parser"));
+        mData.add(new sSerializableItems(null, "Srikanth Reddy Lingala", "Zip4j", "https://github.com/srikanth-lingala/zip4j"));
+        if (APKEditorUtils.isFullVersion(context)) {
+            mData.add(new sSerializableItems(null, "Aefyr", "PseudoApkSigner", "https://github.com/Aefyr/PseudoApkSigner"));
         }
+        mData.add(new sSerializableItems(null, "Connor Tumbleson", "Apktool", "https://github.com/iBotPeaches/Apktool/"));
+        mData.add(new sSerializableItems(null, "Ben Gruver", "smali/baksmali", "https://github.com/JesusFreke/smali/"));
+
+        mData.add(new sSerializableItems(null, "sunilpaulmathew", "Package Manager", "https://github.com/SmartPack/PackageManager"));
+        mData.add(new sSerializableItems(null, "Gospel Gilbert", "App Icon", "https://t.me/gilgreat0295"));
+        mData.add(new sSerializableItems(null, "Mohammed Qubati", "Arabic Translation", "https://t.me/Alqubati_MrK"));
+        mData.add(new sSerializableItems(null, "wushidi", "Chinese (Simplified) Translation", "https://t.me/wushidi"));
+        mData.add(new sSerializableItems(null, "fossdd", "German Translation", "https://chaos.social/@fossdd"));
+        mData.add(new sSerializableItems(null, "bruh", "Vietnamese Translation", null));
+        mData.add(new sSerializableItems(null, "Bruno", "French Translation", null));
+        mData.add(new sSerializableItems(null, "Miloš Koliáš", "Czech Translation", null));
+        mData.add(new sSerializableItems(null, "Mehmet Un", "Turkish Translation", null));
+        mData.add(new sSerializableItems(null, "Jander Mander", "Arabic Translation", null));
+        mData.add(new sSerializableItems(null, "Diego", "Spanish Translation", "https://github.com/sguinetti"));
+        mData.add(new sSerializableItems(null, "tommynok", "Russian Translation", null));
+        mData.add(new sSerializableItems(null, "Alexander Steiner", "Russian Translation", null));
+        mData.add(new sSerializableItems(null, "Hoa Gia Đại Thiếu", "Vietnamese Translation", null));
+        mData.add(new sSerializableItems(null, "mezysinc", "Portuguese (Brazilian) Translation", "https://github.com/mezysinc"));
+        mData.add(new sSerializableItems(null, "Andreaugustoqueiroz999", "Portuguese (Portugal) Translation", null));
+        mData.add(new sSerializableItems(null, "Dodi Studio", "Indonesian Translation", "null"));
+        mData.add(new sSerializableItems(null, "Cooky", "Polish Translation", null));
+        return mData;
     }
 
     private static String getLanguage(Context context) {
-        switch (APKEditorUtils.getLanguage(context)) {
+        switch (sUtils.getLanguage(context)) {
             case "en_US":
                 return context.getString(R.string.language_en);
             case "ar":
@@ -169,7 +183,7 @@ public class AppSettings {
     }
 
     private static String getExportAPKsPath(Context context) {
-        String exportAPKPath = APKEditorUtils.getString("exportAPKsPath", "externalFiles", context);
+        String exportAPKPath = sUtils.getString("exportAPKsPath", "externalFiles", context);
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && exportAPKPath.equals("internalStorage")) {
             return context.getString(R.string.export_path_default);
         } else {
@@ -179,9 +193,9 @@ public class AppSettings {
 
     private static String getExportPath(Context context) {
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
-            if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString())) {
+            if (sUtils.getString("exportPath", null, context) != null && sUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString())) {
                 return context.getString(R.string.sdcard);
-            } else if (APKEditorUtils.getString("exportPath", null, context) != null && APKEditorUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString() + "/AEE")) {
+            } else if (sUtils.getString("exportPath", null, context) != null && sUtils.getString("exportPath", null, context).equals(Environment.getExternalStorageDirectory().toString() + "/AEE")) {
                 return context.getString(R.string.export_path_default);
             } else {
                 return context.getString(R.string.export_path_download);
@@ -192,23 +206,23 @@ public class AppSettings {
     }
 
     private static String getAPKs(Context context) {
-        if (APKEditorUtils.getString("exportAPKs", null, context) != null) {
-            return APKEditorUtils.getString("exportAPKs", null, context);
+        if (sUtils.getString("exportAPKs", null, context) != null) {
+            return sUtils.getString("exportAPKs", null, context);
         } else {
             return context.getString(R.string.prompt);
         }
     }
 
     private static String getProjectExistAction(Context context) {
-        if (APKEditorUtils.getString("projectAction", null, context) != null) {
-            return APKEditorUtils.getString("projectAction", null, context);
+        if (sUtils.getString("projectAction", null, context) != null) {
+            return sUtils.getString("projectAction", null, context);
         } else {
             return context.getString(R.string.prompt);
         }
     }
 
     private static String getEditingOptions(Context context) {
-        if (APKEditorUtils.getBoolean("editText", false, context)) {
+        if (sUtils.getBoolean("editText", false, context)) {
             return context.getString(R.string.enable);
         } else {
             return context.getString(R.string.disable);
@@ -216,8 +230,8 @@ public class AppSettings {
     }
 
     private static String getInstallerAction(Context context) {
-        if (APKEditorUtils.getString("installerAction", null, context) != null) {
-            return APKEditorUtils.getString("installerAction", null, context);
+        if (sUtils.getString("installerAction", null, context) != null) {
+            return sUtils.getString("installerAction", null, context);
         } else {
             return context.getString(R.string.prompt);
         }
@@ -231,21 +245,6 @@ public class AppSettings {
         }
     }
 
-    private static String[] getAPKSignMenu(Context context) {
-        return new String[] {
-                context.getString(R.string.sign_apk_default),
-                context.getString(R.string.sign_apk_custom)
-        };
-    }
-
-    private static String[] getAppThemeMenu(Context context) {
-        return new String[] {
-                context.getString(R.string.app_theme_auto),
-                context.getString(R.string.app_theme_dark),
-                context.getString(R.string.app_theme_light)
-        };
-    }
-
     private static String[] getAppLanguageMenu(Context context) {
         return new String[] {
                 context.getString(R.string.app_theme_auto),
@@ -317,22 +316,28 @@ public class AppSettings {
     }
 
     public static void handleSettingsActions(SettingsAdapter adapter, int position, Activity activity) {
-        if (getData(activity).get(position).getDescription() != null) {
+        if (getData(activity).get(position).getTextTwo() != null) {
             if (position == 1) {
-                setAppTheme(activity);
+                sThemeUtils.setAppTheme(activity);
             } else if (position == 2) {
                 setLanguage(activity);
             } else if (position == 4) {
                 setProjectExistAction(adapter, position,activity);
             } else if (position == 5) {
-                if (APKExplorer.isPermissionDenied(activity)) {
-                    APKExplorer.requestPermission(activity);
+                if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, activity)) {
+                    sPermissionUtils.requestPermission(
+                            new String[] {
+                                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                            }, activity);
                 } else {
                     setExportAPKsPath(adapter, position, activity);
                 }
             } else if (position == 6) {
-                if (APKExplorer.isPermissionDenied(activity)) {
-                    APKExplorer.requestPermission(activity);
+                if (Build.VERSION.SDK_INT < 29 && sPermissionUtils.isPermissionDenied(android.Manifest.permission.WRITE_EXTERNAL_STORAGE, activity)) {
+                    sPermissionUtils.requestPermission(
+                            new String[] {
+                                    android.Manifest.permission.WRITE_EXTERNAL_STORAGE
+                            },activity);
                 } else {
                     setExportPath(adapter, position, activity);
                 }
@@ -350,216 +355,240 @@ public class AppSettings {
         }
     }
 
-    private static void setAppTheme(Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getAppThemeMenu(context), getAppThemePosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKEditorUtils.saveString("appTheme", "Auto", context);
-                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
-                    } else if (itemPosition == 1) {
-                        APKEditorUtils.saveString("appTheme", "Dark", context);
-                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
-                    } else {
-                        APKEditorUtils.saveString("appTheme", "Light", context);
-                        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
-                    }
-                    dialog.dismiss();
-                }).show();
-    }
-
     private static void setLanguage(Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getAppLanguageMenu(context), getAppLanguagePosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKEditorUtils.saveString("appLanguage", java.util.Locale.getDefault().getLanguage(), context);
+        new sSingleChoiceDialog(R.drawable.ic_translate, context.getString(R.string.language),
+                getAppLanguageMenu(context), getAppLanguagePosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                switch (itemPosition) {
+                    case  0:
+                        sUtils.saveString("appLanguage", java.util.Locale.getDefault().getLanguage(), context);
                         restartApp(context);
-                    } else if (itemPosition == 1) {
-                        APKEditorUtils.saveString("appLanguage", "ar", context);
+                        break;
+                    case 1:
+                        sUtils.saveString("appLanguage", "ar", context);
                         restartApp(context);
-                    } else if (itemPosition == 2) {
-                        APKEditorUtils.saveString("appLanguage", "zh", context);
+                        break;
+                    case 2:
+                        sUtils.saveString("appLanguage", "zh", context);
                         restartApp(context);
-                    } else if (itemPosition == 3) {
-                        APKEditorUtils.saveString("appLanguage", "cs", context);
+                        break;
+                    case 3:
+                        sUtils.saveString("appLanguage", "cs", context);
                         restartApp(context);
-                    } else if (itemPosition == 4) {
-                        APKEditorUtils.saveString("appLanguage", "de", context);
+                        break;
+                    case 4:
+                        sUtils.saveString("appLanguage", "de", context);
                         restartApp(context);
-                    } else if (itemPosition == 5) {
-                        APKEditorUtils.saveString("appLanguage", "en_US", context);
+                        break;
+                    case 5:
+                        sUtils.saveString("appLanguage", "en_US", context);
                         restartApp(context);
-                    } else if (itemPosition == 6) {
-                        APKEditorUtils.saveString("appLanguage", "fr", context);
+                        break;
+                    case 6:
+                        sUtils.saveString("appLanguage", "fr", context);
                         restartApp(context);
-                    } else if (itemPosition == 7) {
-                        APKEditorUtils.saveString("appLanguage", "es", context);
+                        break;
+                    case 7:
+                        sUtils.saveString("appLanguage", "es", context);
                         restartApp(context);
-                    } else if (itemPosition == 8) {
-                        APKEditorUtils.saveString("appLanguage", "ru", context);
+                        break;
+                    case 8:
+                        sUtils.saveString("appLanguage", "ru", context);
                         restartApp(context);
-                    } else if (itemPosition == 9) {
-                        APKEditorUtils.saveString("appLanguage", "tr", context);
+                        break;
+                    case 9:
+                        sUtils.saveString("appLanguage", "tr", context);
                         restartApp(context);
-                    } else if (itemPosition == 10) {
-                        APKEditorUtils.saveString("appLanguage", "vi", context);
+                        break;
+                    case 10:
+                        sUtils.saveString("appLanguage", "vi", context);
                         restartApp(context);
-                    } else if (itemPosition == 11) {
-                        APKEditorUtils.saveString("appLanguage", "pl", context);
+                        break;
+                    case 11:
+                        sUtils.saveString("appLanguage", "pl", context);
                         restartApp(context);
-                    } else if (itemPosition == 12) {
-                        APKEditorUtils.saveString("appLanguage", "in", context);
+                        break;
+                    case 12:
+                        sUtils.saveString("appLanguage", "in", context);
                         restartApp(context);
+                        break;
                     }
-                    dialog.dismiss();
-                }).show();
+            }
+        }.show();
     }
 
-    private static void setExportAPKsPath(SettingsAdapter adapter, int position, Activity activity) {
+    private static void setExportAPKsPath(SettingsAdapter adapter, int position, Context context) {
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
-            new MaterialAlertDialogBuilder(activity)
-                    .setSingleChoiceItems(getAPKExportPathMenu(activity), getExportAPKsPathPosition(activity), (dialog, itemPosition) -> {
-                        if (itemPosition == 0) {
-                            APKEditorUtils.saveString("exportAPKsPath", "externalFiles", activity);
-                            mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), ContextCompat.getDrawable(activity, R.drawable.ic_export)));
-                            adapter.notifyItemChanged(position);
-                            transferExportedApps(activity);
-                        } else if (itemPosition == 1) {
-                            APKEditorUtils.saveString("exportAPKsPath", "internalStorage", activity);
-                            mData.set(position, new SettingsItems(activity.getString(R.string.export_path_apks), getExportAPKsPath(activity), ContextCompat.getDrawable(activity, R.drawable.ic_export)));
-                            adapter.notifyItemChanged(position);
-                            transferExportedApps(activity);
-                        }
-                        dialog.dismiss();
-                    }).show();
+            new sSingleChoiceDialog(R.drawable.ic_export, context.getString(R.string.export_path_apks),
+                    getAPKExportPathMenu(context), getExportAPKsPathPosition(context), context) {
+
+                @Override
+                public void onItemSelected(int itemPosition) {
+                    if (itemPosition == 0) {
+                        sUtils.saveString("exportAPKsPath", "externalFiles", context);
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_apks), getExportAPKsPath(context), null));
+                        adapter.notifyItemChanged(position);
+                        transferExportedApps(context);
+                    } else if (itemPosition == 1) {
+                        sUtils.saveString("exportAPKsPath", "internalStorage", context);
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_apks), getExportAPKsPath(context), null));
+                        adapter.notifyItemChanged(position);
+                        transferExportedApps(context);
+                    }
+                }
+            }.show();
         }
     }
 
     private static void setExportPath(SettingsAdapter adapter, int position, Context context) {
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
-            new MaterialAlertDialogBuilder(context)
-                    .setSingleChoiceItems(getExportPathMenu(context), getExportPathPosition(context), (dialog, itemPosition) -> {
-                        if (itemPosition == 0) {
-                            APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString(), context);
-                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
-                            adapter.notifyItemChanged(position);
-                        } else if (itemPosition == 1) {
-                            APKEditorUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString() + "/AEE", context);
-                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
-                            adapter.notifyItemChanged(position);
-                        } else {
-                            APKEditorUtils.saveString("exportPath", null, context);
-                            mData.set(position, new SettingsItems(context.getString(R.string.export_path_resources), getExportPath(context), ContextCompat.getDrawable(context, R.drawable.ic_export)));
-                            adapter.notifyItemChanged(position);
-                        }
-                        dialog.dismiss();
-                    }).show();
-        }
-    }
+            new sSingleChoiceDialog(R.drawable.ic_export, context.getString(R.string.export_path_resources),
+                    getExportPathMenu(context), getExportPathPosition(context), context) {
 
-    private static void setAPKs(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getExportingAPKMenu(context), getExportingAPKsPosition(context), (dialog, itemPosition) -> {
+                @Override
+                public void onItemSelected(int itemPosition) {
                     if (itemPosition == 0) {
-                        APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_storage), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        sUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString(), context);
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_resources), getExportPath(context), null));
                         adapter.notifyItemChanged(position);
                     } else if (itemPosition == 1) {
-                        APKEditorUtils.saveString("exportAPKs", context.getString(R.string.export_resign), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        sUtils.saveString("exportPath", Environment.getExternalStorageDirectory().toString() + "/AEE", context);
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_resources), getExportPath(context), null));
                         adapter.notifyItemChanged(position);
                     } else {
-                        APKEditorUtils.saveString("exportAPKs", null, context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.export_options), getAPKs(context), ContextCompat.getDrawable(context, R.drawable.ic_android)));
+                        sUtils.saveString("exportPath", null, context);
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_export, context), context.getString(R.string.export_path_resources), getExportPath(context), null));
                         adapter.notifyItemChanged(position);
                     }
-                    dialog.dismiss();
-                }).show();
+                }
+            }.show();
+        }
+    }
+
+    private static void setAPKs(SettingsAdapter adapter, int position, Context context) {
+        new sSingleChoiceDialog(R.drawable.ic_android, context.getString(R.string.export_options),
+                getExportingAPKMenu(context), getExportingAPKsPosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    sUtils.saveString("exportAPKs", context.getString(R.string.export_storage), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_android, context), context.getString(R.string.export_options), getAPKs(context), null));
+                    adapter.notifyItemChanged(position);
+                } else if (itemPosition == 1) {
+                    sUtils.saveString("exportAPKs", context.getString(R.string.export_resign), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_android, context), context.getString(R.string.export_options), getAPKs(context), null));
+                    adapter.notifyItemChanged(position);
+                } else {
+                    sUtils.saveString("exportAPKs", null, context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_android, context), context.getString(R.string.export_options), getAPKs(context), null));
+                    adapter.notifyItemChanged(position);
+                }
+            }
+        }.show();
     }
 
     private static void setProjectExistAction(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getProjectExitingMenu(context), getProjectExitingMenuPosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKEditorUtils.saveString("projectAction", context.getString(R.string.save), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
-                        adapter.notifyItemChanged(position);
-                    } else if (itemPosition == 1) {
-                        APKEditorUtils.saveString("projectAction", context.getString(R.string.delete), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
-                        adapter.notifyItemChanged(position);
-                    } else {
-                        APKEditorUtils.saveString("projectAction", null, context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.project_exist_action), getProjectExistAction(context), ContextCompat.getDrawable(context, R.drawable.ic_projects)));
-                        adapter.notifyItemChanged(position);
-                    }
-                    dialog.dismiss();
-                }).show();
+        new sSingleChoiceDialog(R.drawable.ic_projects, context.getString(R.string.project_exist_action),
+                getProjectExitingMenu(context), getProjectExitingMenuPosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    sUtils.saveString("projectAction", context.getString(R.string.save), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_projects, context), context.getString(R.string.project_exist_action), getProjectExistAction(context), null));
+                    adapter.notifyItemChanged(position);
+                } else if (itemPosition == 1) {
+                    sUtils.saveString("projectAction", context.getString(R.string.delete), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_projects, context), context.getString(R.string.project_exist_action), getProjectExistAction(context), null));
+                    adapter.notifyItemChanged(position);
+                } else {
+                    sUtils.saveString("projectAction", null, context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_projects, context), context.getString(R.string.project_exist_action), getProjectExistAction(context), null));
+                    adapter.notifyItemChanged(position);
+                }
+            }
+        }.show();
     }
 
     private static void setEditingOptions(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getEditingOptionsMenu(context), getEditingOptionsPosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKEditorUtils.saveBoolean("editText", false, context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
-                        adapter.notifyItemChanged(position);
-                    } else {
-                        new MaterialAlertDialogBuilder(context)
-                                .setIcon(R.mipmap.ic_launcher)
-                                .setTitle(R.string.warning)
-                                .setMessage(context.getString(R.string.text_editing_summary))
-                                .setNegativeButton(context.getString(R.string.cancel), (d, id) -> {
-                                })
-                                .setPositiveButton(context.getString(R.string.enable), (d, id) -> {
-                                    APKEditorUtils.saveBoolean("editText", true, context);
-                                    mData.set(position, new SettingsItems(context.getString(R.string.text_editing), getEditingOptions(context), ContextCompat.getDrawable(context, R.drawable.ic_edit)));
-                                    adapter.notifyItemChanged(position);
-                                }).show();
-                    }
-                    dialog.dismiss();
-                }).show();
+        new sSingleChoiceDialog(R.drawable.ic_edit, context.getString(R.string.text_editing),
+                getEditingOptionsMenu(context), getEditingOptionsPosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    sUtils.saveBoolean("editText", false, context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_edit, context), context.getString(R.string.text_editing), getEditingOptions(context), null));
+                    adapter.notifyItemChanged(position);
+                } else {
+                    new MaterialAlertDialogBuilder(context)
+                            .setIcon(R.mipmap.ic_launcher)
+                            .setTitle(R.string.warning)
+                            .setMessage(context.getString(R.string.text_editing_summary))
+                            .setNegativeButton(context.getString(R.string.cancel), (d, id) -> {
+                            })
+                            .setPositiveButton(context.getString(R.string.enable), (d, id) -> {
+                                sUtils.saveBoolean("editText", true, context);
+                                getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_edit, context), context.getString(R.string.text_editing), getEditingOptions(context), null));
+                                adapter.notifyItemChanged(position);
+                            }).show();
+                }
+            }
+        }.show();
     }
 
     private static void setInstallerAction(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getInstallerMenu(context), getInstallerMenuPosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        APKEditorUtils.saveString("installerAction", context.getString(R.string.install), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
-                        adapter.notifyItemChanged(position);
-                    } else if (itemPosition == 1) {
-                        APKEditorUtils.saveString("installerAction", context.getString(R.string.install_resign), context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
-                        adapter.notifyItemChanged(position);
-                    } else {
-                        APKEditorUtils.saveString("installerAction", null, context);
-                        mData.set(position, new SettingsItems(context.getString(R.string.installer_action), getInstallerAction(context), ContextCompat.getDrawable(context, R.drawable.ic_installer)));
-                        adapter.notifyItemChanged(position);
-                    }
-                    dialog.dismiss();
-                }).show();
+        new sSingleChoiceDialog(R.drawable.ic_installer, context.getString(R.string.installer_action),
+                getInstallerMenu(context), getInstallerMenuPosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    sUtils.saveString("installerAction", context.getString(R.string.install), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_installer, context), context.getString(R.string.installer_action), getInstallerAction(context), null));
+                    adapter.notifyItemChanged(position);
+                } else if (itemPosition == 1) {
+                    sUtils.saveString("installerAction", context.getString(R.string.install_resign), context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_installer, context), context.getString(R.string.installer_action), getInstallerAction(context), null));
+                    adapter.notifyItemChanged(position);
+                } else {
+                    sUtils.saveString("installerAction", null, context);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_installer, context), context.getString(R.string.installer_action), getInstallerAction(context), null));
+                    adapter.notifyItemChanged(position);
+                }
+            }
+        }.show();
     }
 
     private static void setAPKSign(SettingsAdapter adapter, int position, Context context) {
-        new MaterialAlertDialogBuilder(context)
-                .setSingleChoiceItems(getAPKSignMenu(context), getAPKSignPosition(context), (dialog, itemPosition) -> {
-                    if (itemPosition == 0) {
-                        if (isCustomKey(context)) {
-                            APKEditorUtils.saveString("PrivateKey", null, context);
-                            new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
-                            APKEditorUtils.saveString("RSATemplate", null, context);
-                            new File(context.getFilesDir(), "signing/APKEditor").delete();
-                            mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
-                            adapter.notifyItemChanged(position);
-                        }
-                    } else {
-                        Intent signing = new Intent(context, APKSignActivity.class);
-                        context.startActivity(signing);
-                        mData.set(position, new SettingsItems(context.getString(R.string.sign_apk_with), getAPKSign(context), ContextCompat.getDrawable(context, R.drawable.ic_key)));
+        new sSingleChoiceDialog(R.drawable.ic_key, context.getString(R.string.sign_apk_with),
+                new String[] {
+                        context.getString(R.string.sign_apk_default),
+                        context.getString(R.string.sign_apk_custom)
+                }, getAPKSignPosition(context), context) {
+
+            @Override
+            public void onItemSelected(int itemPosition) {
+                if (itemPosition == 0) {
+                    if (isCustomKey(context)) {
+                        sUtils.saveString("PrivateKey", null, context);
+                        new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
+                        sUtils.saveString("RSATemplate", null, context);
+                        new File(context.getFilesDir(), "signing/APKEditor").delete();
+                        getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_key, context), context.getString(R.string.sign_apk_with), getAPKSign(context), null));
                         adapter.notifyItemChanged(position);
                     }
-                    dialog.dismiss();
-                }).show();
+                } else {
+                    Intent signing = new Intent(context, APKSignActivity.class);
+                    context.startActivity(signing);
+                    getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_key, context), context.getString(R.string.sign_apk_with), getAPKSign(context), null));
+                    adapter.notifyItemChanged(position);
+                }
+            }
+        }.show();
     }
 
     private static void deleteAppSettings(Activity activity) {
@@ -570,18 +599,18 @@ public class AppSettings {
                 .setNegativeButton(activity.getString(R.string.cancel), (dialog, id) -> {
                 })
                 .setPositiveButton(activity.getString(R.string.delete), (dialog, id) -> {
-                    APKEditorUtils.delete(activity.getCacheDir().getAbsolutePath());
-                    APKEditorUtils.delete(activity.getFilesDir().getAbsolutePath());
+                    sUtils.delete(activity.getCacheDir());
+                    sUtils.delete(activity.getFilesDir());
                     if (APKEditorUtils.isFullVersion(activity) && isCustomKey(activity)) {
-                        APKEditorUtils.saveString("PrivateKey", null, activity);
-                        APKEditorUtils.saveString("RSATemplate", null, activity);
+                        sUtils.saveString("PrivateKey", null, activity);
+                        sUtils.saveString("RSATemplate", null, activity);
                     }
                     activity.finish();
                 }).show();
     }
 
     private static void transferExportedApps(Context context) {
-        new AsyncTasks() {
+        new sExecutor() {
             private File sourceDir;
             private ProgressDialog mProgressDialog;
 
@@ -596,19 +625,19 @@ public class AppSettings {
             @Override
             public void doInBackground() {
                 File destDir;
-                if (APKEditorUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
+                if (sUtils.getString("exportAPKsPath", "externalFiles", context).equals("internalStorage")) {
                     sourceDir = context.getExternalFilesDir("");
                     destDir = new File(Environment.getExternalStorageDirectory(), "/AEE/exportedAPKs");
                 } else {
                     destDir = context.getExternalFilesDir("");
                     sourceDir = new File(Environment.getExternalStorageDirectory(), "/AEE/exportedAPKs");
                 }
-                APKEditorUtils.copyDir(sourceDir, destDir);
+                sUtils.copyDir(sourceDir, destDir);
             }
 
             @Override
             public void onPostExecute() {
-                APKEditorUtils.delete(sourceDir.getAbsolutePath());
+                sUtils.delete(sourceDir);
                 try {
                     mProgressDialog.dismiss();
                 } catch (IllegalArgumentException ignored) {
@@ -618,12 +647,12 @@ public class AppSettings {
     }
 
     private static boolean isCustomKey(Context context) {
-        return APKEditorUtils.getString("PrivateKey", null, context) != null &&
-                APKEditorUtils.getString("RSATemplate", null, context) != null;
+        return sUtils.getString("PrivateKey", null, context) != null &&
+                sUtils.getString("RSATemplate", null, context) != null;
     }
 
     public static boolean isTextEditingEnabled(Context context) {
-        return APKEditorUtils.getBoolean("editText", false, context);
+        return sUtils.getBoolean("editText", false, context);
     }
 
     private static void restartApp(Context context) {
diff --git a/app/src/main/java/com/apk/editor/utils/AsyncTasks.java b/app/src/main/java/com/apk/editor/utils/AsyncTasks.java
deleted file mode 100644
index 52a7cf2..0000000
--- a/app/src/main/java/com/apk/editor/utils/AsyncTasks.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright (C) 2021-2022 sunilpaulmathew <sunil.kde@gmail.com>
- *
- * This file is part of Package Manager, a simple, yet powerful application
- * to manage other application installed on an android device.
- *
- */
-
-package com.apk.editor.utils;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on September 05, 2021
- * Ref: https://stackoverflow.com/questions/58767733/android-asynctask-api-deprecating-in-android-11-what-are-the-alternatives
- */
-public abstract class AsyncTasks {
-    private final ExecutorService executors;
-
-    public AsyncTasks() {
-        this.executors = Executors.newSingleThreadExecutor();
-    }
-
-    private void startBackground() {
-        onPreExecute();
-        executors.execute(() -> {
-            doInBackground();
-            new Handler(Looper.getMainLooper()).post(() -> {
-                onPostExecute();
-                if (!executors.isShutdown()) executors.shutdown();
-            });
-        });
-    }
-
-    public void execute() {
-        startBackground();
-    }
-
-    public abstract void onPreExecute();
-
-    public abstract void doInBackground();
-
-    public abstract void onPostExecute();
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/ExternalAPKData.java b/app/src/main/java/com/apk/editor/utils/ExternalAPKData.java
index df48f6e..021f40e 100644
--- a/app/src/main/java/com/apk/editor/utils/ExternalAPKData.java
+++ b/app/src/main/java/com/apk/editor/utils/ExternalAPKData.java
@@ -19,6 +19,8 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sAPKUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on November 07, 2021
  * Ref: https://gitlab.com/guardianproject/checkey/-/blob/master/app/src/main/java/info/guardianproject/checkey/Utils.java
@@ -26,7 +28,6 @@ import java.util.List;
 public class ExternalAPKData {
 
     private static boolean mFMInstall = false;
-    private static File mAPKFile = null;
     private static List<String> mPermissions = null;
     private static String mCertificate = null, mManifest = null, mMinSDKVersion = null, mSDKVersion = null,
             mSize = null, mVersion = null;
@@ -37,7 +38,7 @@ public class ExternalAPKData {
             APKItems mAPKData = new APKItems(apkMeta.getLabel(), apkMeta.getPackageName(),
                     apkMeta.getVersionName(), readXMLFromAPK(apk, "AndroidManifest.xml"),
                     apkMeta.getCompileSdkVersion(), apkMeta.getMinSdkVersion(),
-                    APKData.getAppIcon(apk, context), apkMeta.getVersionCode(),
+                    sAPKUtils.getAPKIcon(apk, context), apkMeta.getVersionCode(),
                     apkMeta.getUsesPermissions());
             apkFile.close();
             return mAPKData;
@@ -50,10 +51,6 @@ public class ExternalAPKData {
         return mFMInstall;
     }
 
-    public static File getAPKFile() {
-        return mAPKFile;
-    }
-
     public static List<String> getData() {
         List<String> mData = new ArrayList<>();
         try {
@@ -184,10 +181,6 @@ public class ExternalAPKData {
         mFMInstall = b;
     }
 
-    public static void setAPKFile(File file) {
-        mAPKFile = file;
-    }
-
     public static void setCertificate(String certificate) {
         mCertificate = certificate;
     }
diff --git a/app/src/main/java/com/apk/editor/utils/Projects.java b/app/src/main/java/com/apk/editor/utils/Projects.java
index e7a5345..48d9de9 100644
--- a/app/src/main/java/com/apk/editor/utils/Projects.java
+++ b/app/src/main/java/com/apk/editor/utils/Projects.java
@@ -19,6 +19,9 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
@@ -36,14 +39,14 @@ public class Projects {
             }
         }
         Collections.sort(mData);
-        if (!APKEditorUtils.getBoolean("az_order", true, context)) {
+        if (!sUtils.getBoolean("az_order", true, context)) {
             Collections.reverse(mData);
         }
         return mData;
     }
 
-    public static AsyncTasks exportToStorage(String source, String name, String folder, Context context) {
-        return new AsyncTasks() {
+    public static sExecutor exportToStorage(String source, String name, String folder, Context context) {
+        return new sExecutor() {
             private String mExportPath;
             @Override
             public void onPreExecute() {
@@ -52,7 +55,7 @@ public class Projects {
             @Override
             public void doInBackground() {
                 if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
-                    APKEditorUtils.mkdir(getExportPath(context) + "/" + folder);
+                    sUtils.mkdir(new File(getExportPath(context), folder));
                     mExportPath = getExportPath(context) + "/" + Common.getAppID();
                 } else {
                     mExportPath = getExportPath(context);
@@ -65,12 +68,12 @@ public class Projects {
                         values.put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS);
                         Uri uri = context.getContentResolver().insert(MediaStore.Files.getContentUri("external"), values);
                         OutputStream outputStream = context.getContentResolver().openOutputStream(uri);
-                        outputStream.write(Objects.requireNonNull(APKEditorUtils.read(source)).getBytes());
+                        outputStream.write(Objects.requireNonNull(sUtils.read(new File(source))).getBytes());
                         outputStream.close();
                     } catch (IOException ignored) {
                     }
                 } else {
-                    APKEditorUtils.copy(source, new File(mExportPath, name).getAbsolutePath());
+                    sUtils.copy(new File(source), new File(mExportPath, name));
                 }
             }
 
@@ -87,15 +90,15 @@ public class Projects {
     }
 
     public static String getExportPath(Context context) {
-        if (Build.VERSION.SDK_INT < 29 && APKEditorUtils.getString("exportPath", null, context) != null) {
-            return APKEditorUtils.getString("exportPath", null, context);
+        if (Build.VERSION.SDK_INT < 29 && sUtils.getString("exportPath", null, context) != null) {
+            return sUtils.getString("exportPath", null, context);
         } else {
             return Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString();
         }
     }
 
     public static void exportProject(File path, String name, Context context) {
-        new AsyncTasks() {
+        new sExecutor() {
             private ProgressDialog mProgressDialog;
 
             @Override
@@ -104,14 +107,14 @@ public class Projects {
                 mProgressDialog.setMessage(context.getString(R.string.exporting, path.getName()));
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
-                if (APKEditorUtils.exist(getExportPath(context) + "/" + name)) {
-                    APKEditorUtils.delete(getExportPath(context) + "/" + name);
+                if (sUtils.exist(new File(getExportPath(context), name))) {
+                    sUtils.delete(new File(getExportPath(context), name));
                 }
             }
 
             @Override
             public void doInBackground() {
-                APKEditorUtils.copyDir(path, new File(getExportPath(context), name));
+                sUtils.copyDir(path, new File(getExportPath(context), name));
             }
 
             @Override
@@ -125,7 +128,7 @@ public class Projects {
     }
 
     public static void deleteProject(File path, Context context) {
-        new AsyncTasks() {
+        new sExecutor() {
             private ProgressDialog mProgressDialog;
 
             @Override
@@ -138,7 +141,7 @@ public class Projects {
 
             @Override
             public void doInBackground() {
-                APKEditorUtils.delete(path.getAbsolutePath());
+                sUtils.delete(path);
             }
 
             @Override
diff --git a/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java b/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
index 1ec2594..91c92f6 100644
--- a/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
+++ b/app/src/main/java/com/apk/editor/utils/SplitAPKInstaller.java
@@ -1,11 +1,9 @@
 package com.apk.editor.utils;
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.app.PendingIntent;
 import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.Intent;
-import android.content.pm.PackageInstaller;
 
 import com.apk.editor.R;
 import com.apk.editor.activities.InstallerActivity;
@@ -13,96 +11,20 @@ import com.apk.editor.activities.InstallerFilePickerActivity;
 import com.apk.editor.services.InstallerService;
 
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.util.List;
 
+import in.sunilpaulmathew.sCommon.Utils.sExecutor;
+import in.sunilpaulmathew.sCommon.Utils.sInstallerParams;
+import in.sunilpaulmathew.sCommon.Utils.sInstallerUtils;
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  */
 public class SplitAPKInstaller {
 
-    private static int runInstallCreate(InstallParams installParams, Activity activity) {
-        return doCreateSession(installParams.sessionParams, activity);
-    }
-
-    private static int doCreateSession(PackageInstaller.SessionParams params, Activity activity) {
-        int sessionId = 0 ;
-        try {
-            sessionId = getPackageInstaller(activity).createSession(params);
-        } catch (IOException ignored) {
-        }
-        return sessionId;
-    }
-
-    private static void runInstallWrite(long size, int sessionId, String splitName, String path, Activity activity) {
-        long sizeBytes;
-        sizeBytes = size;
-        doWriteSession(sessionId, path, sizeBytes, splitName, activity);
-    }
-
-    private static void doWriteSession(int sessionId, String path, long sizeBytes, String splitName, Activity activity) {
-        PackageInstaller.Session session = null;
-        InputStream in = null;
-        OutputStream out = null;
-        try {
-            session = getPackageInstaller(activity).openSession(sessionId);
-            if (path != null) {
-                in = new FileInputStream(path);
-            }
-            out = session.openWrite(splitName, 0, sizeBytes);
-            byte[] buffer = new byte[65536];
-            int c;
-            assert in != null;
-            while ((c = in.read(buffer)) != -1) {
-                out.write(buffer, 0, c);
-            }
-            session.fsync(out);
-        } catch (IOException ignored) {
-        } finally {
-            try {
-                assert out != null;
-                out.close();
-                assert in != null;
-                in.close();
-                session.close();
-            } catch (IOException ignored) {
-            }
-        }
-    }
-
-    private static void doCommitSession(int sessionId, Activity activity) {
-        PackageInstaller.Session session = null;
-        try {
-            try {
-                session = getPackageInstaller(activity).openSession(sessionId);
-            } catch (IOException ignored) {
-            }
-            Intent callbackIntent = new Intent(activity, InstallerService.class);
-            @SuppressLint("UnspecifiedImmutableFlag")
-            PendingIntent pendingIntent = PendingIntent.getService(activity, 0, callbackIntent, 0);
-            assert session != null;
-            session.commit(pendingIntent.getIntentSender());
-            session.close();
-        } finally {
-            assert session != null;
-            session.close();
-        }
-    }
-
-    private static InstallParams makeInstallParams(long totalSize) {
-        final PackageInstaller.SessionParams sessionParams = new PackageInstaller.SessionParams(
-                PackageInstaller.SessionParams.MODE_FULL_INSTALL);
-        final InstallParams params = new InstallParams();
-        params.sessionParams = sessionParams;
-        sessionParams.setSize(totalSize);
-        return params;
-    }
-
-    private static PackageInstaller getPackageInstaller(Activity activity) {
-        return AppData.getPackageManager(activity).getPackageInstaller();
+    private static Intent getCallbackIntent(Context context) {
+        return new Intent(context, InstallerService.class);
     }
 
     private static long getTotalSize(String path) {
@@ -116,7 +38,7 @@ public class SplitAPKInstaller {
             }
         } else if (Common.getAPKList().size() > 0) {
             for (String string : Common.getAPKList()) {
-                if (APKEditorUtils.exist(string)) {
+                if (sUtils.exist(new File(string))) {
                     File mFile = new File(string);
                     if (mFile.exists() && mFile.getName().endsWith(".apk")) {
                         totalSize += mFile.length();
@@ -127,12 +49,8 @@ public class SplitAPKInstaller {
         return totalSize;
     }
 
-    private static class InstallParams {
-        PackageInstaller.SessionParams sessionParams;
-    }
-
     public static void handleAppBundle(String path, Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
             private final File mSplits = new File(activity.getCacheDir(), "splits");
             private ProgressDialog mProgressDialog;
 
@@ -143,7 +61,7 @@ public class SplitAPKInstaller {
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
                 if (mSplits.exists()) {
-                    APKEditorUtils.delete(mSplits.getAbsolutePath());
+                    sUtils.delete(mSplits);
                 }
             }
 
@@ -172,7 +90,7 @@ public class SplitAPKInstaller {
     }
 
     public static void installSplitAPKs(List<String> apks, String path, Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
@@ -180,7 +98,7 @@ public class SplitAPKInstaller {
                     ExternalAPKData.isFMInstall(false);
                     activity.finish();
                 }
-                APKEditorUtils.saveString("installationStatus", "waiting", activity);
+                sUtils.saveString("installationStatus", "waiting", activity);
                 Intent installIntent = new Intent(activity, InstallerActivity.class);
                 installIntent.putExtra(InstallerActivity.HEADING_INTENT, activity.getString(R.string.split_apk_installer));
                 installIntent.putExtra(InstallerActivity.PATH_INTENT, path);
@@ -190,28 +108,28 @@ public class SplitAPKInstaller {
             @Override
             public void doInBackground() {
                 int sessionId;
-                final InstallParams installParams = makeInstallParams(getTotalSize(path));
-                sessionId = runInstallCreate(installParams, activity);
+                final sInstallerParams installParams = sInstallerUtils.makeInstallParams(getTotalSize(path));
+                sessionId = sInstallerUtils.runInstallCreate(installParams, activity);
                 try {
                     if (path != null) {
                         for (String mSplits : APKData.splitApks(path)) {
                             File mFile = new File(mSplits);
                             if (mFile.exists()) {
-                                runInstallWrite(mFile.length(), sessionId, mFile.getName(), mFile.toString(), activity);
+                                sInstallerUtils.runInstallWrite(mFile.length(), sessionId, mFile.getName(), mFile.toString(), activity);
                             }
                         }
                     } else {
                         for (String string : apks) {
-                            if (APKEditorUtils.exist(string)) {
+                            if (sUtils.exist(new File(string))) {
                                 File mFile = new File(string);
                                 if (mFile.exists() && mFile.getName().endsWith(".apk")) {
-                                    runInstallWrite(mFile.length(), sessionId, mFile.getName(), mFile.toString(), activity);
+                                    sInstallerUtils.runInstallWrite(mFile.length(), sessionId, mFile.getName(), mFile.toString(), activity);
                                 }
                             }
                         }
                     }
                 } catch (NullPointerException ignored) {}
-                doCommitSession(sessionId, activity);
+                sInstallerUtils.doCommitSession(sessionId, getCallbackIntent(activity), activity);
             }
 
             @Override
@@ -222,7 +140,7 @@ public class SplitAPKInstaller {
     }
 
     public static void installAPK(File APK, Activity activity) {
-        new AsyncTasks() {
+        new sExecutor() {
 
             @Override
             public void onPreExecute() {
@@ -230,7 +148,7 @@ public class SplitAPKInstaller {
                     ExternalAPKData.isFMInstall(false);
                     activity.finish();
                 }
-                APKEditorUtils.saveString("installationStatus", "waiting", activity);
+                sUtils.saveString("installationStatus", "waiting", activity);
                 Intent installIntent = new Intent(activity, InstallerActivity.class);
                 installIntent.putExtra(InstallerActivity.HEADING_INTENT, activity.getString(R.string.apk_installer));
                 installIntent.putExtra(InstallerActivity.PATH_INTENT, APK.getAbsolutePath());
@@ -240,12 +158,12 @@ public class SplitAPKInstaller {
             @Override
             public void doInBackground() {
                 int sessionId;
-                final InstallParams installParams = makeInstallParams(APK.length());
-                sessionId = runInstallCreate(installParams, activity);
+                final sInstallerParams installParams = sInstallerUtils.makeInstallParams(APK.length());
+                sessionId = sInstallerUtils.runInstallCreate(installParams, activity);
                 try {
-                    runInstallWrite(APK.length(), sessionId, APK.getName(), APK.getAbsolutePath(), activity);
+                    sInstallerUtils.runInstallWrite(APK.length(), sessionId, APK.getName(), APK.getAbsolutePath(), activity);
                 } catch (NullPointerException ignored) {}
-                doCommitSession(sessionId, activity);
+                sInstallerUtils.doCommitSession(sessionId, getCallbackIntent(activity), activity);
             }
 
             @Override
diff --git a/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java b/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
index b080a9f..0af249c 100644
--- a/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
+++ b/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
@@ -1,7 +1,5 @@
 package com.apk.editor.utils.apkSigner;
 
-import com.apk.editor.utils.APKEditorUtils;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -18,6 +16,8 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 import java.util.zip.ZipOutputStream;
 
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
 /*
  * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
  * Based on the original work of Aefyr for https://github.com/Aefyr/PseudoApkSigner
@@ -50,7 +50,7 @@ public class ApkSigner {
             InputStream entryInputStream = apkZipFile.getInputStream(zipEntry);
 
             zipOutputStream.putNextEntry(new ZipEntry(zipEntry.getName()));
-            APKEditorUtils.copyStream(entryInputStream, zipOutputStream);
+            sUtils.copyStream(entryInputStream, zipOutputStream);
             zipOutputStream.closeEntry();
         }
 
diff --git a/app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java
deleted file mode 100644
index 8111873..0000000
--- a/app/src/main/java/com/apk/editor/utils/recyclerViewItems/AboutItems.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.apk.editor.utils.recyclerViewItems;
-
-import android.graphics.drawable.Drawable;
-
-import java.io.Serializable;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
- */
-public class AboutItems implements Serializable {
-
-    private final String mDescription, mTitle, mURL;
-    private final Drawable mIcon;
-
-    public AboutItems(String title, String description, Drawable icon, String url) {
-        this.mTitle = title;
-        this.mDescription = description;
-        this.mIcon = icon;
-        this.mURL = url;
-    }
-
-    public String getTitle() {
-        return mTitle;
-    }
-
-    public String getDescription() {
-        return mDescription;
-    }
-
-    public Drawable getIcon() {
-        return mIcon;
-    }
-
-    public String getURL() {
-        return mURL;
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java b/app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java
deleted file mode 100644
index af49a43..0000000
--- a/app/src/main/java/com/apk/editor/utils/recyclerViewItems/SettingsItems.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.apk.editor.utils.recyclerViewItems;
-
-import android.graphics.drawable.Drawable;
-
-import java.io.Serializable;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 31, 2021
- */
-public class SettingsItems implements Serializable {
-
-    private final String mDescription, mTitle;
-    private final Drawable mIcon;
-
-    public SettingsItems(String title, String description, Drawable icon) {
-        this.mTitle = title;
-        this.mDescription = description;
-        this.mIcon = icon;
-    }
-
-    public String getTitle() {
-        return mTitle;
-    }
-
-    public String getDescription() {
-        return mDescription;
-    }
-
-    public Drawable getIcon() {
-        return mIcon;
-    }
-
-}
\ No newline at end of file
