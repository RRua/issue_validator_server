diff --git a/src/com/ichi2/anki/DeckPicker.java b/src/com/ichi2/anki/DeckPicker.java
index 14694621eb..295c6a484a 100644
--- a/src/com/ichi2/anki/DeckPicker.java
+++ b/src/com/ichi2/anki/DeckPicker.java
@@ -748,16 +748,38 @@ public class DeckPicker extends Activity {
 
 		mDeckList = new ArrayList<HashMap<String, String>>();
 		mDeckListView = (ListView) findViewById(R.id.files);
-		mDeckListAdapter = new ThemedAdapter(this, mDeckList,
-				R.layout.deck_item, new String[] { "name", "new", "lrn", "rev", "complMat", "complAll" }, new int[] {
+		mDeckListAdapter = new SimpleAdapter(this, mDeckList,
+				R.layout.deck_item, new String[] { "name", "new", "lrn", "rev", "complMat", "complAll", "sep" }, new int[] {
 						R.id.DeckPickerName, R.id.deckpicker_new, R.id.deckpicker_lrn, 
-						R.id.deckpicker_rev, R.id.DeckPickerCompletionMat, R.id.DeckPickerCompletionAll });
+						R.id.deckpicker_rev, R.id.DeckPickerCompletionMat, R.id.DeckPickerCompletionAll, R.id.DeckPickerName });
 		mDeckListAdapter.setViewBinder(new SimpleAdapter.ViewBinder() {
 			@Override
 			public boolean setViewValue(View view, Object data, String text) {
-				if (!text.equals("-1") && view.getVisibility() == View.INVISIBLE) {
-					view.setVisibility(View.VISIBLE);
-					view.setAnimation(ViewAnimation.fade(ViewAnimation.FADE_IN, 500, 0));
+				if (view.getVisibility() == View.INVISIBLE) {
+					if (!text.equals("-1")) {
+						view.setVisibility(View.VISIBLE);
+						view.setAnimation(ViewAnimation.fade(ViewAnimation.FADE_IN, 500, 0));
+						return false;						
+					} else {
+						view.setVisibility(View.INVISIBLE);
+						return false;
+					}
+				}
+				if (view.getId() == R.id.DeckPickerName) {
+					View parent = (View) view.getParent().getParent();
+					if (text.equals("top")) {
+						parent.setBackgroundResource(R.drawable.white_deckpicker_top);
+						return true;
+					} else if (text.equals("bot")) {
+						parent.setBackgroundResource(R.drawable.white_deckpicker_bottom);
+						return true;
+					} else if (text.equals("ful")) {
+						parent.setBackgroundResource(R.drawable.white_deckpicker_full);
+						return true;
+					} else if (text.equals("cen")) {
+						parent.setBackgroundResource(R.drawable.white_deckpicker_center);						
+						return true;
+					}
 					return false;
 				}
 //				if (view.getId() == R.id.DeckPickerCompletionMat || view.getId() == R.id.DeckPickerCompletionAll) {
@@ -1699,8 +1721,29 @@ public class DeckPicker extends Activity {
         	m.put("rev", ((Integer)d[4]).toString());
         	m.put("complMat", "1");
         	m.put("complAll", "1");
+        	if (name.length == 1) {
+            	m.put("sep", "top");
+            	if (mDeckList.size() > 0) {
+            		HashMap<String, String> map = mDeckList.get(mDeckList.size() - 1);
+            		if (map.get("sep").equals("top")) {
+            			map.put("sep", "ful");
+            		} else {
+                		map.put("sep", "bot");
+            		}
+            	}
+        	} else {
+            	m.put("sep", "cen");
+        	}
         	mDeckList.add(m);
         }
+    	if (mDeckList.size() > 0) {
+    		HashMap<String, String> map = mDeckList.get(mDeckList.size() - 1);
+    		if (map.get("sep").equals("top")) {
+        		map.put("sep", "ful");
+    		} else {
+        		map.put("sep", "bot");    			
+    		}
+    	}
 		mDeckListAdapter.notifyDataSetChanged();
 	}
 
@@ -1710,18 +1753,18 @@ public class DeckPicker extends Activity {
 	// ----------------------------------------------------------------------------
 
 
-    private class ThemedAdapter extends SimpleAdapter {
-    	    public ThemedAdapter(Context context, ArrayList<HashMap<String, String>> items, int resource, String[] from, int[] to) {
-    	        super(context, items, resource, from, to);
-    	    }
-
-    	    @Override
-    	    public View getView(int position, View convertView, ViewGroup parent) {
-	    	  View view = super.getView(position, convertView, parent);
-	    	  Themes.setContentStyle(view, Themes.CALLER_DECKPICKER_DECK);
-    	      return view;
-    	    }
-    }
+//    private class ThemedAdapter extends SimpleAdapter {
+//    	    public ThemedAdapter(Context context, ArrayList<HashMap<String, String>> items, int resource, String[] from, int[] to) {
+//    	        super(context, items, resource, from, to);
+//    	    }
+//
+////    	    @Override
+////    	    public View getView(int position, View convertView, ViewGroup parent) {
+////	    	  View view = super.getView(position, convertView, parent);
+////	    	  Themes.setContentStyle(view, Themes.CALLER_DECKPICKER_DECK);
+////    	      return view;
+////    	    }
+//    }
 
 
 	class MyGestureDetector extends SimpleOnGestureListener {	
diff --git a/src/com/ichi2/anki/Reviewer.java b/src/com/ichi2/anki/Reviewer.java
index c3c2cb3b39..0f3d137cec 100644
--- a/src/com/ichi2/anki/Reviewer.java
+++ b/src/com/ichi2/anki/Reviewer.java
@@ -1601,8 +1601,7 @@ public class Reviewer extends Activity implements IButtonListener{
         // Increment number reps counter
         mSessionCurrReps++;
         setNextCardAnimation(false);
-//        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler, new DeckTask.TaskData(
-//                mCurrentEase, deck, mCurrentCard));
+        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_ANSWER_CARD, mAnswerCardHandler, new DeckTask.TaskData(mSched, mCurrentCard, mCurrentEase));
     }
 
     // Set the content view to the one provided and initialize accessors.
@@ -2278,10 +2277,6 @@ public class Reviewer extends Activity implements IButtonListener{
             }
 
             displayString = enrichWithQADiv(question, false);
-            // Show an horizontal line as separation when question is shown in answer
-            if (isQuestionDisplayed()) {
-                displayString = displayString + "<hr/>";
-            }
 
             if (mSpeakText && Integer.valueOf(android.os.Build.VERSION.SDK) > 3) {
 //                ReadText.setLanguageInformation(Models.getModel(DeckManager.getMainDeck(), mCurrentCard.getCardModelId(), false).getId(), mCurrentCard.getCardModelId());          
@@ -2310,22 +2305,12 @@ public class Reviewer extends Activity implements IButtonListener{
         sDisplayAnswer = true;
         setFlipCardAnimation();
 
-        String answer = getAnswer(), question = getQuestion();
+        String answer = getAnswer();
 
         String displayString = "";
         
         if (mSimpleInterface) {
         	SpannableStringBuilder sb = new SpannableStringBuilder();
-		if (isQuestionDisplayed()) {
-	        	Spanned ques = Html.fromHtml(question);
-	        	if (ques.length() == 0) {
-	        		ques = new SpannableString(getResources().getString(R.string.simple_interface_hint, R.string.card_details_question));
-	        		((SpannableString)ques).setSpan(new StyleSpan(Typeface.ITALIC), 0, mCardContent.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-			}
-	        	sb.append(ques);
-	        	sb.append("\n─────\n");
-        	}
-
         	Spanned ans = Html.fromHtml(answer);
         	if (ans.length() == 0) {
         		SpannableString hint = new SpannableString(getResources().getString(R.string.simple_interface_hint, R.string.card_details_answer));
@@ -2340,7 +2325,6 @@ public class Reviewer extends Activity implements IButtonListener{
             if(mPrefFixArabic) {
             	// reshape
             	answer = ArabicUtilities.reshapeSentence(answer, true);
-            	question = ArabicUtilities.reshapeSentence(question, true);
             }
 
             // If the user wrote an answer
@@ -2376,15 +2360,6 @@ public class Reviewer extends Activity implements IButtonListener{
             } else {
                 displayString = enrichWithQADiv(answer, true);
             }
-
-            // Depending on preferences do or do not show the question
-            if (isQuestionDisplayed()) {
-                StringBuffer sb = new StringBuffer();
-                sb.append(enrichWithQADiv(question, false));
-                sb.append("<a name=\"question\"></a><hr/>");
-                sb.append(displayString);
-                displayString = sb.toString();
-            }
         }
 
         mIsSelecting = false;
@@ -2443,20 +2418,12 @@ public class Reviewer extends Activity implements IButtonListener{
         int questionStartsAt = content.indexOf("<a name=\"question\"></a><hr/>");
         String question = "";
         String answer = "";
-        if (isQuestionDisplayed()) {
-        	if (sDisplayAnswer && (questionStartsAt != -1)) {
-                question = Sound.parseSounds(mBaseUrl, content.substring(0, questionStartsAt), mSpeakText, MetaDB.LANGUAGES_QA_QUESTION);
-                answer = Sound.parseSounds(mBaseUrl, content.substring(questionStartsAt, content.length()), mSpeakText, MetaDB.LANGUAGES_QA_ANSWER);
-        	} else {
-                question = Sound.parseSounds(mBaseUrl, content.substring(0, content.length() - 5), mSpeakText, MetaDB.LANGUAGES_QA_QUESTION) + "<hr/>";
-        	}
-        } else {
-            int qa = MetaDB.LANGUAGES_QA_QUESTION;
-        	if (sDisplayAnswer) {
-                qa = MetaDB.LANGUAGES_QA_ANSWER;
-        	}
-        	answer = Sound.parseSounds(mBaseUrl, content, mSpeakText, qa);
-        }
+
+        int qa = MetaDB.LANGUAGES_QA_QUESTION;
+    	if (sDisplayAnswer) {
+            qa = MetaDB.LANGUAGES_QA_ANSWER;
+    	}
+    	answer = Sound.parseSounds(mBaseUrl, content, mSpeakText, qa);
 
         // Parse out the LaTeX images
 //        question = LaTeX.parseLaTeX(DeckManager.getMainDeck(), question);
@@ -2712,24 +2679,6 @@ public class Reviewer extends Activity implements IButtonListener{
     }
 
 
-    private boolean isQuestionDisplayed() {
-        switch (mPrefHideQuestionInAnswer) {
-            case HQIA_DO_HIDE:
-                return false;
-
-            case HQIA_DO_SHOW:
-                return true;
-
-            case HQIA_CARD_MODEL:
-//                return (Models.getModel(DeckManager.getMainDeck(), mCurrentCard.getCardModelId(), false).getCardModel(
-//                        mCurrentCard.getCardModelId()).isQuestionInAnswer());
-
-            default:
-                return true;
-        }
-    }
-
-
     public static Card getEditorCard() {
         return sEditorCard;
     }
diff --git a/src/com/ichi2/anki/StudyOptions.java b/src/com/ichi2/anki/StudyOptions.java
index 5bfd2b27f8..5a292036db 100644
--- a/src/com/ichi2/anki/StudyOptions.java
+++ b/src/com/ichi2/anki/StudyOptions.java
@@ -193,7 +193,6 @@ public class StudyOptions extends Activity implements IButtonListener {
     private boolean mInDeckPicker;
     private boolean mInReviewer;
     private int mStartedByBigWidget;
-    private String mDeckFilename;
     private int mStartupMode;
     private boolean mSwipeEnabled;
 
@@ -674,7 +673,7 @@ public class StudyOptions extends Activity implements IButtonListener {
                         Log.i(AnkiDroidApp.TAG, "mUnmountReceiver - Action = Media Mounted");
                         mSdCardAvailable = true;
                         if (!mInDeckPicker) {
-                            loadPreviousDeck();
+//                            loadPreviousDeck();
                         }
                     }
                 }
@@ -849,13 +848,6 @@ public class StudyOptions extends Activity implements IButtonListener {
     }
 
 
-    private void loadPreviousDeck() {
-        Intent deckLoadIntent = new Intent();
-        deckLoadIntent.putExtra(OPT_DB, mDeckFilename);
-        onActivityResult(PICK_DECK_REQUEST, RESULT_OK, deckLoadIntent);
-    }
-
-
     private void initAllContentViews() {
         // The main study options view that will be used when there are reviews left.
         mStudyOptionsView = getLayoutInflater().inflate(R.layout.studyoptions, null);
@@ -1375,33 +1367,33 @@ public class StudyOptions extends Activity implements IButtonListener {
 	        dialog = builder.create();
 	        break;
 
-		case DIALOG_DB_ERROR:
-			builder.setTitle(R.string.answering_error_title);
-	        builder.setIcon(android.R.drawable.ic_dialog_alert);
-			builder.setMessage(R.string.answering_error_message);
-	        builder.setPositiveButton(res.getString(R.string.backup_repair_deck), new OnClickListener() {
-	            @Override
-	            public void onClick(DialogInterface dialog, int which) {
-	            	DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK, mRepairDeckHandler, new DeckTask.TaskData(mDeckFilename != null ? mDeckFilename : mRepairFileName));
-	            }
-	        });
-	        builder.setNeutralButton(res.getString(R.string.answering_error_report), new OnClickListener() {
-	            @Override
-	            public void onClick(DialogInterface dialog, int which) {
-	                mShowRepairDialog = true;
-	                Intent i = new Intent(StudyOptions.this, Feedback.class);
-	                dialog.dismiss();
-	                startActivityForResult(i, REPORT_ERROR);
-	                if (UIUtils.getApiLevel() > 4) {
-	                	ActivityTransitionAnimation.slide(StudyOptions.this, ActivityTransitionAnimation.FADE);
-		        	}
-	            }
-	        });	        	
-			builder.setNegativeButton(res.getString(R.string.close), null);
-	        builder.setCancelable(true);
-		    dialog = builder.create();
-			break;
-
+//		case DIALOG_DB_ERROR:
+//			builder.setTitle(R.string.answering_error_title);
+//	        builder.setIcon(android.R.drawable.ic_dialog_alert);
+//			builder.setMessage(R.string.answering_error_message);
+//	        builder.setPositiveButton(res.getString(R.string.backup_repair_deck), new OnClickListener() {
+//	            @Override
+//	            public void onClick(DialogInterface dialog, int which) {
+//	            	DeckTask.launchDeckTask(DeckTask.TASK_TYPE_REPAIR_DECK, mRepairDeckHandler, new DeckTask.TaskData(mDeckFilename != null ? mDeckFilename : mRepairFileName));
+//	            }
+//	        });
+//	        builder.setNeutralButton(res.getString(R.string.answering_error_report), new OnClickListener() {
+//	            @Override
+//	            public void onClick(DialogInterface dialog, int which) {
+//	                mShowRepairDialog = true;
+//	                Intent i = new Intent(StudyOptions.this, Feedback.class);
+//	                dialog.dismiss();
+//	                startActivityForResult(i, REPORT_ERROR);
+//	                if (UIUtils.getApiLevel() > 4) {
+//	                	ActivityTransitionAnimation.slide(StudyOptions.this, ActivityTransitionAnimation.FADE);
+//		        	}
+//	            }
+//	        });	        	
+//			builder.setNegativeButton(res.getString(R.string.close), null);
+//	        builder.setCancelable(true);
+//		    dialog = builder.create();
+//			break;
+//
 		case DIALOG_SELECT_HELP:
 	        builder.setTitle(res.getString(R.string.help_title));
 	        builder.setItems(new String[] {res.getString(R.string.help_tutorial), res.getString(R.string.help_online), res.getString(R.string.help_faq)}, new OnClickListener() {
@@ -1667,17 +1659,28 @@ public class StudyOptions extends Activity implements IButtonListener {
 
         Sched sched = mCol.getSched();
     	int[] counts = sched.counts();
-        String name;
+        String[] name;
 		try {
-			name = mCol.getDecks().current().getString("name");
+			name = mCol.getDecks().current().getString("name").split("::");
 		} catch (JSONException e) {
 			throw new RuntimeException(e);
 		}
 
+		StringBuilder nameBuilder = new StringBuilder();
+		if (name.length > 0) {
+			nameBuilder.append(name[0]);
+		}
+		if (name.length > 2) {
+			nameBuilder.append("...");
+		}
+		if (name.length > 1) {
+			nameBuilder.append("\n").append(name[name.length - 1]);
+		}
+		
 		int dues = counts[0] + counts[1] + counts[2];
         setTitle(res.getQuantityString(R.plurals.studyoptions_window_title, dues, name, dues, 0));
 
-        mTextDeckName.setText(name);
+        mTextDeckName.setText(nameBuilder.toString());
         mTextTodayNew.setText(String.valueOf(counts[0]));
         mTextTodayLrn.setText(String.valueOf(counts[1]));
         mTextTodayRev.setText(String.valueOf(counts[2]));
@@ -1775,12 +1778,12 @@ public class StudyOptions extends Activity implements IButtonListener {
 
     @Override
     protected void onSaveInstanceState(Bundle outState) {
-        Log.i(AnkiDroidApp.TAG, "onSaveInstanceState: " + mDeckFilename);
-        // Remember current deck's filename.
-        if (mDeckFilename != null) {
-            outState.putString("deckFilename", mDeckFilename);
-        }
-        Log.i(AnkiDroidApp.TAG, "onSaveInstanceState - Ending");
+//        Log.i(AnkiDroidApp.TAG, "onSaveInstanceState: " + mDeckFilename);
+//        // Remember current deck's filename.
+//        if (mDeckFilename != null) {
+//            outState.putString("deckFilename", mDeckFilename);
+//        }
+//        Log.i(AnkiDroidApp.TAG, "onSaveInstanceState - Ending");
     }
 
 
@@ -1929,7 +1932,7 @@ public class StudyOptions extends Activity implements IButtonListener {
         // If decks directory does not exist, create it.
         File decksDirectory = new File(mPrefDeckPath);
         AnkiDroidApp.createDecksDirectoryIfMissing(decksDirectory);
-        mDeckFilename = mPrefDeckPath + "/" + SAMPLE_DECK_NAME;
+//        mDeckFilename = mPrefDeckPath + "/" + SAMPLE_DECK_NAME;
         savePreferences("deckFilename");
 //        DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_TUTORIAL, mLoadDeckHandler, new DeckTask.TaskData(mDeckFilename));        	
     }
@@ -2011,18 +2014,18 @@ public class StudyOptions extends Activity implements IButtonListener {
                 Log.i(AnkiDroidApp.TAG, "onActivityResult - Deck browser returned without picking new deck");
                 // Make sure we open the database again in onResume() if user pressed "back"
                 // deckSelected = false;
-            	if (mDeckFilename == null || !(new File(mDeckFilename).exists())) {
-//                    DeckManager.closeMainDeck();
-                    mCompat.invalidateOptionsMenu(this);
-//                    showContentView(CONTENT_NO_DECK);
-            	} else {
-                	showContentView(CONTENT_STUDY_OPTIONS);
-//                    if (DeckManager.getMainDeck() == null || !DeckManager.getMainDeckPath().equals(mDeckFilename)) {
-//                    	if (resultCode != RESULT_DONT_RELOAD_DECK) {
-//                            displayProgressDialogAndLoadDeck();
-//                        }
-//                    }
-            	}
+//            	if (mDeckFilename == null || !(new File(mDeckFilename).exists())) {
+////                    DeckManager.closeMainDeck();
+//                    mCompat.invalidateOptionsMenu(this);
+////                    showContentView(CONTENT_NO_DECK);
+//            	} else {
+//                	showContentView(CONTENT_STUDY_OPTIONS);
+////                    if (DeckManager.getMainDeck() == null || !DeckManager.getMainDeckPath().equals(mDeckFilename)) {
+////                    	if (resultCode != RESULT_DONT_RELOAD_DECK) {
+////                            displayProgressDialogAndLoadDeck();
+////                        }
+////                    }
+//            	}
                 return;
             }
 
@@ -2030,16 +2033,15 @@ public class StudyOptions extends Activity implements IButtonListener {
                 Log.e(AnkiDroidApp.TAG, "onActivityResult - Deck browser returned null intent");
                 // Make sure we open the database again in onResume()
                 // deckSelected = false;
-                displayProgressDialogAndLoadDeck();
                 return;
             }
             // A deck was picked. Save it in preferences and use it.
             Log.i(AnkiDroidApp.TAG, "onActivityResult = OK");
-            mDeckFilename = intent.getExtras().getString(OPT_DB);
-            savePreferences("deckFilename");
-            if (mDeckFilename == null || !new File(mDeckFilename).exists()) {
-//            	showContentView(CONTENT_NO_DECK);
-            }
+//            mDeckFilename = intent.getExtras().getString(OPT_DB);
+//            savePreferences("deckFilename");
+//            if (mDeckFilename == null || !new File(mDeckFilename).exists()) {
+////            	showContentView(CONTENT_NO_DECK);
+//            }
             // Log.i(AnkiDroidApp.TAG, "onActivityResult - deckSelected = " + deckSelected);
 //            if (DeckManager.getMainDeck() == null || !DeckManager.getMainDeckPath().equals(mDeckFilename)) {
 //                boolean updateAllCards = (requestCode == DOWNLOAD_SHARED_DECK);
@@ -2052,7 +2054,6 @@ public class StudyOptions extends Activity implements IButtonListener {
             if (resultCode == RESULT_RESTART) {
             	restartApp();
             } else if (resultCode == RESULT_RELOAD_DECK) {
-            	displayProgressDialogAndLoadDeck();
             }
             // If there is no deck loaded the controls have not to be shown
             // if(deckLoaded && cardsToReview)
@@ -2078,8 +2079,7 @@ public class StudyOptions extends Activity implements IButtonListener {
                     break;
                 case Reviewer.RESULT_DECK_CLOSED:
                 	showContentView(CONTENT_STUDY_OPTIONS);
-                	mDeckFilename = PrefSettings.getSharedPrefs(getBaseContext()).getString("deckFilename", null);
-                	displayProgressDialogAndLoadDeck();
+//                	mDeckFilename = PrefSettings.getSharedPrefs(getBaseContext()).getString("deckFilename", null);
                 	break;
                 case Reviewer.RESULT_DEFAULT:
 //                    DeckTask.launchDeckTask(DeckTask.TASK_TYPE_SAVE_DECK, mSaveAndResetDeckHandler, new DeckTask.TaskData(DeckManager.getMainDeck(), 0));
@@ -2131,7 +2131,7 @@ public class StudyOptions extends Activity implements IButtonListener {
         SharedPreferences preferences = PrefSettings.getSharedPrefs(getBaseContext());
         Editor editor = preferences.edit();
         if (str.equals("deckFilename")) {
-            editor.putString("deckFilename", mDeckFilename);
+//            editor.putString("deckFilename", mDeckFilename);
         } else if (str.equals("invertedColors")) {
             editor.putBoolean("invertedColors", mInvertedColors);
         } else if (str.equals("swapqa")) {
@@ -2186,17 +2186,6 @@ public class StudyOptions extends Activity implements IButtonListener {
     }
 
 
-    private String getVersion() {
-    	String versionNumber;
-    	try {
-            String pkg = this.getPackageName();
-            versionNumber = this.getPackageManager().getPackageInfo(pkg, 0).versionName;
-        } catch (NameNotFoundException e) {
-            versionNumber = "?";
-        }
-        return versionNumber;
-    }
-
     private void setLanguage(String language) {
     	Locale locale;
     	if (language.equals("")) {
@@ -2210,54 +2199,6 @@ public class StudyOptions extends Activity implements IButtonListener {
     }
 
 
-    private void displayProgressDialogAndLoadDeck() {
-        displayProgressDialogAndLoadDeck(false);
-    }
-
-
-    private void displayProgressDialogAndLoadDeck(boolean updateAllCards) {
-        Log.i(AnkiDroidApp.TAG, "displayProgressDialogAndLoadDeck - Loading deck " + mDeckFilename);
-
-        // Don't open database again in onResume() until we know for sure this attempt to load the deck is finished
-        // deckSelected = true;
-
-        // if(isSdCardMounted())
-        // {
-        if (mDeckFilename != null && new File(mDeckFilename).exists()) {
-            // showControls(false);
-
-        	mToggleCram.setChecked(false);
-        	mToggleLimit.setEnabled(true);
-
-        	// close previous deck
-//        	DeckManager.closeMainDeck(DeckManager.REQUESTING_ACTIVITY_STUDYOPTIONS);
-//
-//            if (updateAllCards) {
-//                DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_DECK_AND_UPDATE_CARDS, mLoadDeckHandler,
-//                        new DeckTask.TaskData(DeckManager.REQUESTING_ACTIVITY_STUDYOPTIONS, mDeckFilename));
-//            } else {
-//                DeckTask.launchDeckTask(DeckTask.TASK_TYPE_LOAD_DECK, mLoadDeckHandler, new DeckTask.TaskData(DeckManager.REQUESTING_ACTIVITY_STUDYOPTIONS, mDeckFilename));
-//            }
-        } else {
-            if (mDeckFilename == null) {
-                Log.i(AnkiDroidApp.TAG, "displayProgressDialogAndLoadDeck - SD card unmounted.");
-            } else if (!new File(mDeckFilename).exists()) {
-                Log.i(AnkiDroidApp.TAG, "displayProgressDialogAndLoadDeck - The deck " + mDeckFilename + " does not exist.");
-            }
-
-            // Show message informing that no deck has been loaded
-            // displayDeckNotLoaded();
-        }
-        // } else
-        // {
-        // Log.i(AnkiDroidApp.TAG, "displayProgressDialogAndLoadDeck - SD card unmounted.");
-        // deckSelected = false;
-        // Log.i(AnkiDroidApp.TAG, "displayProgressDialogAndLoadDeck - deckSelected = " + deckSelected);
-        // displaySdError();
-        // }
-    }
-
-
     DeckTask.TaskListener mRepairDeckHandler = new DeckTask.TaskListener() {
 
     	@Override
@@ -2270,7 +2211,7 @@ public class StudyOptions extends Activity implements IButtonListener {
         @Override
         public void onPostExecute(DeckTask.TaskData result) {
         	if (result.getBoolean()) {
-        		displayProgressDialogAndLoadDeck();
+//        		displayProgressDialogAndLoadDeck();
         	} else {
         		Themes.showThemedToast(StudyOptions.this, getResources().getString(R.string.deck_repair_error), true);
         	}
@@ -2303,7 +2244,7 @@ public class StudyOptions extends Activity implements IButtonListener {
         public void onPostExecute(DeckTask.TaskData result) {
 			switch (result.getInt()) {
     		case BackupManager.RETURN_DECK_RESTORED:
-    			displayProgressDialogAndLoadDeck();
+//    			displayProgressDialogAndLoadDeck();
     			return;    			
     		case BackupManager.RETURN_ERROR:
 //    			showDialog(DIALOG_DECK_NOT_LOADED);
@@ -2618,10 +2559,10 @@ public class StudyOptions extends Activity implements IButtonListener {
         super.onNewIntent(intent);
         String deck = intent.getStringExtra(EXTRA_DECK);
         Log.d(AnkiDroidApp.TAG, "StudyOptions.onNewIntent: " + intent + ", deck=" + deck);
-        if (deck != null && !deck.equals(mDeckFilename)) {
-            mDeckFilename = deck;
-            loadPreviousDeck();
-        }
+//        if (deck != null && !deck.equals(mDeckFilename)) {
+//            mDeckFilename = deck;
+////            loadPreviousDeck();
+//        }
     }
 
 
diff --git a/src/com/ichi2/libanki/Card.java b/src/com/ichi2/libanki/Card.java
index 5e557920c4..b2a61bb2bf 100644
--- a/src/com/ichi2/libanki/Card.java
+++ b/src/com/ichi2/libanki/Card.java
@@ -212,6 +212,7 @@ public class Card {
 
     public String css() {
         try {
+//			return (new StringBuilder()).append("<style type=\"text/css\">").append(template().get("css")).append("</style>").toString();
 			return (new StringBuilder()).append("<style>").append(template().get("css")).append("</style>").toString();
 		} catch (JSONException e) {
 			throw new RuntimeException(e);
diff --git a/src/com/ichi2/themes/Themes.java b/src/com/ichi2/themes/Themes.java
index d0ab7689a2..315704a85a 100644
--- a/src/com/ichi2/themes/Themes.java
+++ b/src/com/ichi2/themes/Themes.java
@@ -184,10 +184,14 @@ public class Themes {
 				lv.setDividerHeight(0);
 				break;
 			case THEME_WHITE:
-				lv.setBackgroundResource(R.drawable.white_textview);
 				lv.setSelector(R.drawable.white_deckpicker_list_selector);
-				lv.setDivider(mContext.getResources().getDrawable(R.drawable.white_listdivider));
-		        setMargins(view, LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT, 4f, 4f, 4f, 4f);
+				lv.setOverScrollMode(View.OVER_SCROLL_NEVER);
+				lv.setFadingEdgeLength(15);
+				lv.setDividerHeight(0);
+				lv.setBackgroundResource(R.drawable.white_deckpicker_lv_background);
+				view.setBackgroundResource(mWallpaper);
+//				lv.setDivider(mContext.getResources().getDrawable(R.drawable.white_listdivider));
+//		        setMargins(view, LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT, 4f, 4f, 4f, 4f);
 				break;
 			default:
 				break;
