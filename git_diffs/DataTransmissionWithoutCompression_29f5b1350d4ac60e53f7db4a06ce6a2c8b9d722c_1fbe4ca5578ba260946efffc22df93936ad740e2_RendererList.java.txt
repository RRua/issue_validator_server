diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayer.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayer.java
index dc8e9137..e64e2ac7 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayer.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.map.mapsforge;
 
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
 import android.graphics.Paint;
 import android.graphics.Rect;
 
@@ -21,6 +22,7 @@ import ch.bailu.aat.map.MapContext;
 import ch.bailu.aat.map.layer.MapLayerInterface;
 import ch.bailu.aat.map.tile.TileProviderInterface;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.ui.AppLog;
 
 public class MapsForgeTileLayer extends Layer implements MapLayerInterface, Observer {
 
@@ -45,8 +47,6 @@ public class MapsForgeTileLayer extends Layer implements MapLayerInterface, Obse
     @Override
     public void draw(BoundingBox box, byte zoom, Canvas c, Point tlp) {
 
-
-
         if (scontext.lock()) {
             isZoomSupported =
                     (zoom <= provider.getMaximumZoomLevel() && zoom >= provider.getMinimumZoomLevel());
@@ -90,9 +90,14 @@ public class MapsForgeTileLayer extends Layer implements MapLayerInterface, Obse
                 r.right = r.left + tileSize;
                 r.bottom = r.top + tileSize;
 
+                Bitmap androidbitmap = AndroidGraphicFactory.getBitmap(bitmap);
+                if (androidbitmap == null) {
+                    AppLog.d(this, provider.getSource().getName());
+                } else {
 
-                AndroidGraphicFactory.getCanvas(canvas).
-                    drawBitmap(AndroidGraphicFactory.getBitmap(bitmap), null, r, paint);
+                    AndroidGraphicFactory.getCanvas(canvas).
+                            drawBitmap(androidbitmap, null, r, paint);
+                }
             }
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
index 8afa245d..89cbd1f8 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
@@ -157,7 +157,6 @@ public class TileProvider implements TileProviderInterface {
         if (scontext.lock()) {
             String id = source.getID(mapTile, scontext.getContext());
 
-
             ObjectHandle handle = scontext.getCacheService().getObject(
                     id,
                     source.getFactory(mapTile)
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
index 1770b88d..a01bbb82 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
@@ -15,12 +15,12 @@ public class MapsForgeSource extends Source {
 
     public static final String NAME = "MapsForge";
     private final String themeFile;
-    private final String idName;
+    private final String themeIdName;
 
 
     public MapsForgeSource(String xmlThemeFileName) {
         themeFile = xmlThemeFileName;
-        idName = "MF_" + new File(themeFile).getName().replace(".xml", "");
+        themeIdName = "MF_" + new File(themeFile).getName().replace(".xml", "");
     }
 
     public String getName() {
@@ -29,7 +29,7 @@ public class MapsForgeSource extends Source {
 
     @Override
     public String getID(Tile t, Context x) {
-        return genID(t, idName);
+        return genID(t, themeIdName);
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java b/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
index 7e326ca3..f8bfe52b 100644
--- a/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
@@ -10,7 +10,6 @@ import ch.bailu.aat.R;
 import ch.bailu.aat.activities.ActivitySwitcher;
 import ch.bailu.aat.activities.NominatimActivity;
 import ch.bailu.aat.coordinates.BoundingBoxE6;
-import ch.bailu.aat.preferences.SolidAutopause;
 import ch.bailu.aat.preferences.SolidBacklight;
 import ch.bailu.aat.preferences.SolidMapTileStack;
 import ch.bailu.aat.preferences.SolidOverlayFileList;
@@ -22,7 +21,7 @@ import ch.bailu.aat.views.preferences.SolidCheckListDialog;
 import ch.bailu.aat.views.preferences.SolidIndexListDialog;
 
 public class OptionsMenu extends AbsMenu {
-    private MenuItem start, pause, backlight, autopause, map, overlays, nominatim;
+    private MenuItem start, pause, backlight, map, overlays, nominatim;
 
     private final ServiceContext scontext;
     
@@ -84,9 +83,6 @@ public class OptionsMenu extends AbsMenu {
         } else if (item == backlight) {
             new SolidIndexListDialog(new SolidBacklight(c, new SolidPreset(c).getIndex()));
 
-        } else if (item == autopause) {
-            new SolidIndexListDialog(new SolidAutopause(c, new SolidPreset(c).getIndex()));
-
         } else if (item == map) {
             new SolidCheckListDialog(new SolidMapTileStack(c, new SolidPreset(c).getIndex()));
 
@@ -108,5 +104,4 @@ public class OptionsMenu extends AbsMenu {
 
         return true;
     }
-
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
index 335268a1..9aa71651 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
@@ -32,6 +32,27 @@ public class SolidRenderTheme extends SolidFile {
     }
 
 
+
+    public String getValueAsThemeID() {
+        return toThemeID(getValueAsString());
+    }
+
+
+    public static String toThemeID(String name) {
+        if (name.equals(InternalRenderTheme.DEFAULT.toString())) {
+            return name;
+        } else if (name.equals(InternalRenderTheme.OSMARENDER.toString())) {
+            return name;
+        } else {
+            try {
+                new ExternalRenderTheme(new File(name));
+                return name;
+            } catch (FileNotFoundException e1) {
+                return InternalRenderTheme.DEFAULT.toString();
+            }
+        }
+    }
+
     public static XmlRenderTheme toRenderTheme(String name) {
 
         XmlRenderTheme theme = InternalRenderTheme.DEFAULT;
@@ -47,6 +68,7 @@ public class SolidRenderTheme extends SolidFile {
                 theme = InternalRenderTheme.DEFAULT;
             }
         }
+
         return theme;
 
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
index b81e8d59..14f8368d 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
@@ -5,9 +5,7 @@ import android.graphics.Bitmap;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 import org.mapsforge.map.model.common.Observer;
-import org.mapsforge.map.rendertheme.XmlRenderTheme;
 
-import ch.bailu.aat.preferences.SolidRenderTheme;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
@@ -18,20 +16,20 @@ public class MapsForgeTileObject extends TileObject implements Observer {
 
     private final SyncTileBitmap bitmap = new SyncTileBitmap();
 
-    private final XmlRenderTheme renderTheme;
+    private final String themeID;
 
-    public MapsForgeTileObject(String id, ServiceContext sc, Tile t, XmlRenderTheme theme) {
+    public MapsForgeTileObject(String id, ServiceContext sc, Tile t, String tID) {
         super(id);
         scontext = sc;
         tile = t;
-        renderTheme = theme;
+        themeID = tID;
 
         sc.getRenderService().lockToCache(this);
         retreiveBitmap();
     }
 
     private void retreiveBitmap() {
-        TileBitmap b = scontext.getRenderService().getTile(tile, renderTheme);
+        TileBitmap b = scontext.getRenderService().getTile(this);
 
         if (b != null) {
             bitmap.set(b);
@@ -41,6 +39,12 @@ public class MapsForgeTileObject extends TileObject implements Observer {
         }
     }
 
+
+    public String getThemeID() {
+        return themeID;
+    }
+
+
     @Override
     public Bitmap getBitmap() {
         return bitmap.getAndroidBitmap();
@@ -49,6 +53,8 @@ public class MapsForgeTileObject extends TileObject implements Observer {
 
 
 
+
+
     @Override
     public void reDownload(ServiceContext sc) {
 
@@ -100,17 +106,17 @@ public class MapsForgeTileObject extends TileObject implements Observer {
 
     public static class Factory extends ObjectHandle.Factory {
         private final Tile mapTile;
-        private final XmlRenderTheme renderTheme;
+        private final String themeID;
 
-        public Factory(Tile t, String theme) {
+        public Factory(Tile t, String tID) {
 
-            renderTheme = SolidRenderTheme.toRenderTheme(theme);
+            themeID = tID;
             mapTile=t;
         }
 
         @Override
         public ObjectHandle factory(String id, ServiceContext sc) {
-            return  new MapsForgeTileObject(id, sc, mapTile, renderTheme);
+            return  new MapsForgeTileObject(id, sc, mapTile, themeID);
         }
 
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Cache.java b/app/src/main/java/ch/bailu/aat/services/render/Cache.java
index 79f3a82e..cbb4789d 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Cache.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Cache.java
@@ -49,6 +49,10 @@ public class Cache implements TileCache {
         return cache.size();
     }
 
+    public boolean isEmpty() {
+        return cache.size()==0;
+    }
+
     @Override
     public int getCapacityFirstLevel() {
         return getCapacity();
@@ -61,6 +65,7 @@ public class Cache implements TileCache {
 
     @Override
     public void purge() {
+        AppLog.d(this, "Purge " + cache.size() + " files. (FIXME)");
         for (int i = 0; i< cache.size(); i++) {
             Entry e = cache.valueAt(i);
             if (e != null && e.bitmap != null) {
@@ -77,7 +82,12 @@ public class Cache implements TileCache {
 
             if (e != null) {
                 bitmap.incrementRefCount();
-                e.bitmap = bitmap; // FIXME old bitmap decrementRefCount ???
+
+                if (e.bitmap != null) {
+                    AppLog.d(this, "bitmap is NOT NULL (FIXME: needs decrementRefcount?) ");
+                }
+                e.bitmap = bitmap;
+
                 e.observer.onChange();
             }
         }
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Caches.java b/app/src/main/java/ch/bailu/aat/services/render/Caches.java
new file mode 100644
index 00000000..7ad17e6b
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/render/Caches.java
@@ -0,0 +1,44 @@
+package ch.bailu.aat.services.render;
+
+import java.util.HashMap;
+
+import ch.bailu.aat.services.cache.MapsForgeTileObject;
+import ch.bailu.aat.util.ui.AppLog;
+
+public class Caches {
+    private HashMap<String, Cache> caches = new HashMap<>(5);
+
+
+    public void lockToCache(MapsForgeTileObject o) {
+        get(o.getThemeID()).lockToCache(o);
+    }
+
+
+    public void freeFromCache(MapsForgeTileObject o) {
+        Cache cache = caches.get(o.getThemeID());
+
+        if (cache == null) {
+            AppLog.d(this, "FIXME: missing cache");
+            return;
+        }
+
+
+        cache.freeFromCache(o);
+
+        if (cache.isEmpty()) {
+            //caches.remove(o.getThemeID());
+            AppLog.d(this, o.getThemeID() + " is empty");
+        }
+    }
+
+
+    public Cache get(String themeID) {
+        Cache cache = caches.get(themeID);
+
+        if (cache == null) {
+            cache = new Cache();
+            caches.put(themeID, cache);
+        }
+        return cache;
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Configuration.java b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
new file mode 100644
index 00000000..22a23c02
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
@@ -0,0 +1,64 @@
+package ch.bailu.aat.services.render;
+
+import org.mapsforge.core.graphics.TileBitmap;
+import org.mapsforge.map.rendertheme.XmlRenderTheme;
+
+import java.io.File;
+import java.io.FilenameFilter;
+import java.util.ArrayList;
+
+import ch.bailu.aat.services.cache.MapsForgeTileObject;
+
+public class Configuration {
+    private final ArrayList<File> mapFiles = new ArrayList<>(10);
+
+    private Renderer renderer;
+    private String themeID;
+
+
+    public TileBitmap getTile(MapsForgeTileObject o) {
+        if (isConfigured() && themeID.equals(o.getThemeID()))
+            return renderer.getTile(o.getTile());
+
+        return null;
+    }
+
+
+    public boolean isConfigured() {
+        return renderer != null;     }
+
+
+    public boolean configure(File mapDir, Caches caches, XmlRenderTheme theme, String tID) {
+        if (isConfigured() == false && configureMapList(mapDir)) {
+            themeID = tID;
+            renderer = new Renderer(theme, caches.get(themeID), mapFiles);
+        }
+        return isConfigured();
+    }
+
+    public void destroy() {
+        if (isConfigured()) {
+            renderer.destroy();
+            renderer = null;
+        }
+    }
+
+
+    private boolean configureMapList(File dir) {
+        mapFiles.clear();
+
+
+        dir.list(new FilenameFilter() {
+            @Override
+            public boolean accept(File dir, String name) {
+                if (name.endsWith(".map")) {
+                    File file = new File(dir, name);
+                    if (file.isFile()) mapFiles.add(file);
+                }
+                return false;
+            }
+        });
+
+        return mapFiles.size() > 0;
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/render/MapList.java b/app/src/main/java/ch/bailu/aat/services/render/MapList.java
deleted file mode 100644
index 319e6239..00000000
--- a/app/src/main/java/ch/bailu/aat/services/render/MapList.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package ch.bailu.aat.services.render;
-
-import org.mapsforge.core.model.BoundingBox;
-import org.mapsforge.core.model.Tile;
-import org.mapsforge.map.reader.MapFile;
-import org.mapsforge.map.reader.header.MapFileException;
-import org.mapsforge.map.reader.header.MapFileInfo;
-
-import java.io.File;
-import java.io.FileFilter;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-
-import ch.bailu.aat.util.ui.AppLog;
-
-public class MapList {
-    private final static int MIN_SIZE=1024*1024;
-
-    private final ArrayList<Entry> mapFiles = new ArrayList(10);
-
-
-    private static  class Entry {
-        public final File file;
-        public final MapFileInfo info;
-
-        public final boolean isWorld;
-
-
-        public Entry(File f, MapFileInfo i) {
-            file = f;
-            info = i;
-
-            isWorld = info.zoomLevelMin == 0 && info.zoomLevelMax == 7;
-
-            AppLog.d(this, f.toString() + " " +info.zoomLevelMin + " " + info.zoomLevelMax);
-        }
-
-
-        public boolean contains(BoundingBox b) {
-            return info.boundingBox.contains(b.maxLatitude, b.maxLongitude) &&
-                    info.boundingBox.contains(b.minLatitude, b.minLongitude);
-        }
-
-        public boolean intersects(BoundingBox b) {
-            return info.boundingBox.intersects(b);
-        }
-
-        public boolean includesZoom(byte zoom) {
-            return (info.zoomLevelMax >= zoom && info.zoomLevelMin <= zoom);
-        }
-
-    }
-
-
-    public MapList(File directory) {
-        fillList(getFiles(directory));
-        sortList();
-    }
-
-    private File[] getFiles(File d) {
-        File[] files;
-
-        try {
-            files = d.listFiles(new FileFilter() {
-                @Override
-                public boolean accept(File f) {
-                    return (
-                            f.exists() &&
-                                    f.isFile() &&
-                                    f.length() > MIN_SIZE &&
-                                    f.getName().endsWith(".map"));
-                }
-            });
-        } catch (SecurityException e) {
-            files = null;
-        }
-
-        if (files == null) {
-            files = new File[0];
-        }
-        return files;
-    }
-
-    private void fillList(File[] files) {
-        for (File f : files) {
-            MapFile map = null;
-            try {
-                map = new MapFile(f);
-                MapFileInfo info = map.getMapFileInfo();
-                mapFiles.add(new Entry(f, info));
-
-            } catch (MapFileException e) {
-                AppLog.d(this, f.toString() + ": not valid!");
-
-            } finally {
-                if (map != null)
-                    map.close();
-            }
-        }
-    }
-
-
-    private void sortList() {
-        Collections.sort(mapFiles, new Comparator<Entry>() {
-
-            @Override
-            public int compare(Entry a, Entry b) {
-                if (a.info.zoomLevelMax < b.info.zoomLevelMax) {
-                    return -1;
-                } else if (a.info.zoomLevelMax > b.info.zoomLevelMax) {
-                    return 1;
-                }
-
-                return 0;
-            }
-
-
-        });
-    }
-
-
-
-    public ArrayList<File> getFiles(Tile tile) {
-        BoundingBox b = tile.getBoundingBox();
-
-        ArrayList<File> files = new ArrayList(4);
-
-        String log = "?-> ";
-
-        for (Entry e: mapFiles) {
-            boolean Z = e.includesZoom(tile.zoomLevel);
-            boolean C = e.contains(b);
-            boolean E = e.intersects(b);
-
-
-            if (Z) log += "Z";
-            if (C) log += "C";
-            if (E) log += "E";
-
-            log += "  | ";
-
-            if (Z && (C || E)) {
-
-
-
-                if (e.isWorld) {
-
-                    if (files.size() == 0) {
-                        files.add(e.file);
-
-//                        log += " W " + files.size();
-                        //AppLog.d(this, log);
-                        return files;
-                    }
-                    log += " wrong order!!";
-
-
-                } else {
-                    files.add(e.file);
-
-                }
-            }
-
-
-
-        }
-
-//        log += files.size();
-        //AppLog.d(this, log);
-        return files;
-    }
-}
diff --git a/app/src/main/java/ch/bailu/aat/services/render/RenderService.java b/app/src/main/java/ch/bailu/aat/services/render/RenderService.java
index d5e6e6ed..1b2bb148 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/RenderService.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/RenderService.java
@@ -3,13 +3,9 @@ package ch.bailu.aat.services.render;
 import android.content.SharedPreferences;
 
 import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.model.Tile;
-import org.mapsforge.map.rendertheme.XmlRenderTheme;
-
-import java.io.File;
-import java.util.ArrayList;
 
 import ch.bailu.aat.preferences.SolidMapsForgeDirectory;
+import ch.bailu.aat.preferences.SolidRenderTheme;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
 import ch.bailu.aat.services.cache.MapsForgeTileObject;
@@ -17,40 +13,47 @@ import ch.bailu.aat.services.cache.MapsForgeTileObject;
 public class RenderService  extends VirtualService
         implements SharedPreferences.OnSharedPreferenceChangeListener {
 
-    private final Cache cache = new Cache();
 
     private final SolidMapsForgeDirectory sdirectory;
+    private final SolidRenderTheme stheme;
 
-    private MapList mapList;
-    private RendererList rendererList;
+    private final Configuration configuration = new Configuration();
+    private final Caches caches= new Caches();
 
 
     public RenderService(ServiceContext sc) {
         super(sc);
 
         sdirectory = new SolidMapsForgeDirectory(sc.getContext());
-
-        rendererList = new RendererList(cache);
-
-
-        mapList = new MapList(sdirectory.getValueAsFile());
+        stheme = new SolidRenderTheme(sc.getContext());
 
         sdirectory.getStorage().register(this);
+        reconfigureRenderer();
     }
 
 
+    private void reconfigureRenderer() {
+        configuration.destroy();
+        configuration.configure(
+                sdirectory.getValueAsFile(),
+                caches,
+                stheme.getValueAsRenderTheme(),
+                stheme.getValueAsThemeID());
+    }
+
 
-    public TileBitmap getTile(Tile tile, XmlRenderTheme theme) {
-        ArrayList<File> files = mapList.getFiles(tile);
-        return rendererList.getTile(files, tile, theme);
+    public TileBitmap getTile(MapsForgeTileObject o) {
+        return configuration.getTile(o);
     }
 
 
     public void lockToCache(MapsForgeTileObject o) {
-        cache.lockToCache(o);
+        caches.lockToCache(o);
     }
+
+
     public void freeFromCache(MapsForgeTileObject o) {
-        cache.freeFromCache(o);
+        caches.freeFromCache(o);
     }
 
 
@@ -63,15 +66,14 @@ public class RenderService  extends VirtualService
     @Override
     public void close() {
         sdirectory.getStorage().unregister(this);
-        rendererList.destroy();
-        cache.destroy();
+        configuration.destroy();
     }
 
 
     @Override
     public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-        if (sdirectory.hasKey(key)) {
-            mapList = new MapList(sdirectory.getValueAsFile());
+        if (sdirectory.hasKey(key) || stheme.hasKey(key)) {
+            reconfigureRenderer();
         }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Renderer.java b/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
index 83703329..9a5db63b 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
@@ -1,7 +1,6 @@
 package ch.bailu.aat.services.render;
 
 import org.mapsforge.core.graphics.Canvas;
-import org.mapsforge.core.graphics.GraphicFactory;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.BoundingBox;
 import org.mapsforge.core.model.Point;
@@ -34,7 +33,7 @@ public class Renderer extends RendererBase<RendererJob> {
     private final RenderThemeFuture renderThemeFuture;
 
     public Renderer(XmlRenderTheme t, TileCache cache, ArrayList<File> files) {
-        super(cache, new Model()); // TODO: move model to context
+        super(cache, new Model());
 
         renderThemeFuture = createTheme(t);
 
@@ -55,7 +54,7 @@ public class Renderer extends RendererBase<RendererJob> {
 
         final  DatabaseRenderer databaseRenderer = new DatabaseRenderer(
                 mapDataStore,
-                AndroidGraphicFactory.INSTANCE, // TODO: move to context
+                AndroidGraphicFactory.INSTANCE,
                 cache,
                 null,
                 RENDER_LABELS,
@@ -77,9 +76,9 @@ public class Renderer extends RendererBase<RendererJob> {
 
     private static RenderThemeFuture createTheme(XmlRenderTheme t) {
         RenderThemeFuture theme = new RenderThemeFuture(
-                AndroidGraphicFactory.INSTANCE,   // TODO: move to context
+                AndroidGraphicFactory.INSTANCE,
                 t,
-                new Model().displayModel);        // TODO: move to context
+                new Model().displayModel);
         new Thread(theme).start();
         return theme;
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/render/RendererList.java b/app/src/main/java/ch/bailu/aat/services/render/RendererList.java
deleted file mode 100644
index 0e988617..00000000
--- a/app/src/main/java/ch/bailu/aat/services/render/RendererList.java
+++ /dev/null
@@ -1,130 +0,0 @@
-package ch.bailu.aat.services.render;
-
-import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.model.Tile;
-import org.mapsforge.map.layer.cache.TileCache;
-import org.mapsforge.map.rendertheme.XmlRenderTheme;
-
-import java.io.File;
-import java.util.ArrayList;
-
-import ch.bailu.aat.util.ui.AppLog;
-
-public class RendererList {
-    private final static int LIMIT=5;
-
-    private final ArrayList<Entry> renderer = new ArrayList(LIMIT);
-    private final TileCache cache;
-
-    public RendererList(TileCache c) {
-
-        cache = c;
-
-    }
-
-
-    private class Entry {
-        public final Renderer renderer;
-        public final XmlRenderTheme theme;
-        public final ArrayList<File> files;
-        private long stamp;
-
-
-        public Entry(ArrayList<File> f, XmlRenderTheme t) {
-            theme = t;
-            files = f;
-            renderer = new Renderer(theme, cache, files);
-            use();
-        }
-
-
-
-
-        public void use() {
-            stamp = System.currentTimeMillis();
-        }
-
-        public long getStamp() {
-            return stamp;
-        }
-
-        public boolean hasSameFiles(ArrayList<File> files) {
-            if (files.size() == this.files.size()) {
-                for (File f: files) {
-                    if (hasFile(f) == false) return false;
-                }
-                return true;
-            }
-            return false;
-        }
-
-        private boolean hasFile(File f) {
-            for (File b: files) {
-                if (b.equals(f)) return true;
-            }
-            return false;
-        }
-
-        public boolean hasSameTheme(XmlRenderTheme t) {
-            return theme.equals(t);
-        }
-    }
-
-
-    public TileBitmap getTile(ArrayList<File> files, Tile tile, XmlRenderTheme theme) {
-        if (files.size() > 0) {
-            Renderer r = get(files, theme);
-            if (r != null) {
-                return r.getTile(tile);
-            }
-        }
-        return null;
-    }
-
-
-    private Renderer get(ArrayList<File> files, XmlRenderTheme theme) {
-
-        for (Entry e: renderer) {
-            if (e.hasSameTheme(theme) && e.hasSameFiles(files)) {
-                return e.renderer;
-            }
-        }
-
-        AppLog.d(this, "add_w renderer");
-        Entry e = add(files, theme);
-        e.use();
-        return e.renderer;
-    }
-
-    private Entry add(ArrayList<File> files, XmlRenderTheme theme) {
-        if (renderer.size() == LIMIT) {
-            removeOldest();
-        }
-        Entry e = new Entry(files, theme);
-        renderer.add(e);
-        return e;
-    }
-
-
-    private void removeOldest() {
-        int toRemove =0;
-
-        for (int i = 1; i< renderer.size(); i++) {
-            if (renderer.get(i).getStamp() < renderer.get(toRemove).getStamp()) {
-                toRemove = i;
-            }
-
-        }
-
-        renderer.get(toRemove).renderer.destroy();
-        renderer.remove(toRemove);
-    }
-
-
-    public void destroy() {
-        for (Entry e: renderer) {
-            e.renderer.destroy();
-        }
-        renderer.clear();
-    }
-}
