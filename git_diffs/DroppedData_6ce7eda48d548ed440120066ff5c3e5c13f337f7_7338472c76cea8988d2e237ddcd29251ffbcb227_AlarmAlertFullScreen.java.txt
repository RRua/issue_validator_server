diff --git a/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.java b/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.java
deleted file mode 100644
index f2e5441b..00000000
--- a/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.java
+++ /dev/null
@@ -1,280 +0,0 @@
-/*
- * Copyright (C) 2009 The Android Open Source Project
- * Copyright (C) 2012 Yuriy Kulikov yuriy.kulikov.87@gmail.com
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.better.alarm.alert;
-
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.Window;
-import android.view.WindowManager;
-import android.widget.Button;
-import android.widget.TextView;
-
-import androidx.fragment.app.FragmentActivity;
-
-import com.better.alarm.R;
-import com.better.alarm.background.Event;
-import com.better.alarm.configuration.InjectKt;
-import com.better.alarm.configuration.Prefs;
-import com.better.alarm.configuration.Store;
-import com.better.alarm.interfaces.Alarm;
-import com.better.alarm.interfaces.IAlarmsManager;
-import com.better.alarm.interfaces.Intents;
-import com.better.alarm.logger.Logger;
-import com.better.alarm.presenter.DynamicThemeHandler;
-import com.better.alarm.presenter.PickedTime;
-import com.better.alarm.presenter.TimePickerDialogFragment;
-import com.better.alarm.util.Optional;
-
-import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.disposables.Disposables;
-import io.reactivex.functions.Consumer;
-import io.reactivex.functions.Predicate;
-
-import static com.better.alarm.configuration.Prefs.LONGCLICK_DISMISS_DEFAULT;
-import static com.better.alarm.configuration.Prefs.LONGCLICK_DISMISS_KEY;
-
-/**
- * Alarm Clock alarm alert: pops visible indicator and plays alarm tone. This
- * activity is the full screen version which shows over the lock screen with the
- * wallpaper as the background.
- */
-public class AlarmAlertFullScreen extends FragmentActivity {
-    protected static final String SCREEN_OFF = "screen_off";
-    private final Store store = InjectKt.globalInject(Store.class).getValue();
-    private final IAlarmsManager alarmsManager = InjectKt.globalInject(IAlarmsManager.class).getValue();
-    private final Prefs sp = InjectKt.globalInject(Prefs.class).getValue();
-    private final Logger logger = InjectKt.globalLogger("AlarmAlertFullScreen").getValue();
-    private final DynamicThemeHandler dynamicThemeHandler = InjectKt.globalInject(DynamicThemeHandler.class).getValue();
-
-    protected Alarm mAlarm;
-
-    private boolean longClickToDismiss;
-
-    private Disposable disposableDialog = Disposables.disposed();
-    private Disposable subscription;
-
-    @Override
-    protected void onCreate(Bundle icicle) {
-        setTheme(dynamicThemeHandler.getIdForName(getClassName()));
-        super.onCreate(icicle);
-
-        if (getResources().getBoolean(R.bool.isTablet)) {
-            // preserve initial rotation and disable rotation change
-            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
-                setRequestedOrientation(getRequestedOrientation());
-            } else {
-                setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-            }
-        } else {
-            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-        }
-
-        final int id = getIntent().getIntExtra(Intents.EXTRA_ID, -1);
-        try {
-            mAlarm = alarmsManager.getAlarm(id);
-
-            final Window win = getWindow();
-            win.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
-            // Turn on the screen unless we are being launched from the
-            // AlarmAlert
-            // subclass as a result of the screen turning off.
-            if (!getIntent().getBooleanExtra(SCREEN_OFF, false)) {
-                win.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
-                        | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON
-                        | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON);
-            }
-
-            updateLayout();
-
-            // Register to get the alarm killed/snooze/dismiss intent.
-            subscription = store.getEvents()
-                    .filter(new Predicate<Event>() {
-                        @Override
-                        public boolean test(Event event) throws Exception {
-                            return (event instanceof Event.SnoozedEvent && ((Event.SnoozedEvent) event).getId() == id)
-                                    || (event instanceof Event.DismissEvent && ((Event.DismissEvent) event).getId() == id)
-                                    || (event instanceof Event.Autosilenced && ((Event.Autosilenced) event).getId() == id);
-                        }
-                    }).subscribe(new Consumer<Event>() {
-                        @Override
-                        public void accept(Event event) throws Exception {
-                            finish();
-                        }
-                    });
-        } catch (Exception e) {
-            logger.e("Alarm not found", e);
-        }
-    }
-
-    private void setTitle() {
-        final String titleText = mAlarm.getLabelOrDefault();
-        setTitle(titleText);
-        TextView textView = findViewById(R.id.alarm_alert_label);
-        textView.setText(titleText);
-    }
-
-    protected int getLayoutResId() {
-        return R.layout.alert_fullscreen;
-    }
-
-    protected String getClassName() {
-        return AlarmAlertFullScreen.class.getName();
-    }
-
-    private void updateLayout() {
-        LayoutInflater inflater = LayoutInflater.from(this);
-
-        setContentView(inflater.inflate(getLayoutResId(), null));
-
-        /*
-         * snooze behavior: pop a snooze confirmation view, kick alarm manager.
-         */
-        final Button snooze = (Button) findViewById(R.id.alert_button_snooze);
-        snooze.requestFocus();
-        snooze.setOnClickListener(new Button.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                snoozeIfEnabledInSettings();
-            }
-        });
-
-        snooze.setOnLongClickListener(new Button.OnLongClickListener() {
-            @Override
-            public boolean onLongClick(View v) {
-                if (isSnoozeEnabled()) {
-                    disposableDialog = TimePickerDialogFragment.showTimePicker(getSupportFragmentManager())
-                            .subscribe(new Consumer<Optional<PickedTime>>() {
-                                @Override
-                                public void accept(@NonNull Optional<PickedTime> picked) {
-                                    if (picked.isPresent()) {
-                                        mAlarm.snooze(picked.get().getHour(), picked.get().getMinute());
-                                    } else {
-                                        AlarmAlertFullScreen.this.sendBroadcast(new Intent(Intents.ACTION_DEMUTE));
-                                    }
-                                }
-                            });
-                    store.getEvents().onNext(new Event.MuteEvent());
-                    new android.os.Handler().postDelayed(new Runnable() {
-                        @Override
-                        public void run() {
-                            store.getEvents().onNext(new Event.DemuteEvent());
-                        }
-                    }, 10000);
-                }
-                return true;
-            }
-        });
-
-        /* dismiss button: close notification */
-        final Button dismissButton = (Button) findViewById(R.id.alert_button_dismiss);
-        dismissButton.setOnClickListener(new Button.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (longClickToDismiss) {
-                    dismissButton.setText(getString(R.string.alarm_alert_hold_the_button_text));
-                } else {
-                    dismiss();
-                }
-            }
-        });
-
-        dismissButton.setOnLongClickListener(new Button.OnLongClickListener() {
-            @Override
-            public boolean onLongClick(View v) {
-                dismiss();
-                return true;
-            }
-        });
-
-        /* Set the title from the passed in alarm */
-        setTitle();
-    }
-
-    // Attempt to snooze this alert.
-    private void snoozeIfEnabledInSettings() {
-        if (isSnoozeEnabled()) {
-            alarmsManager.snooze(mAlarm);
-        }
-    }
-
-    // Dismiss the alarm.
-    private void dismiss() {
-        alarmsManager.dismiss(mAlarm);
-        getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
-    }
-
-    private boolean isSnoozeEnabled() {
-        return sp.getSnoozeDuration().getValue() != -1;
-    }
-
-    /**
-     * this is called when a second alarm is triggered while a previous alert
-     * window is still active.
-     */
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-
-        logger.d("AlarmAlert.OnNewIntent()");
-
-        int id = intent.getIntExtra(Intents.EXTRA_ID, -1);
-        try {
-            mAlarm = alarmsManager.getAlarm(id);
-            setTitle();
-        } catch (Exception e) {
-            logger.d("Alarm not found");
-        }
-
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        longClickToDismiss = PreferenceManager.getDefaultSharedPreferences(this).getBoolean(LONGCLICK_DISMISS_KEY,
-                LONGCLICK_DISMISS_DEFAULT);
-
-        Button snooze = findViewById(R.id.alert_button_snooze);
-        View snoozeText = findViewById(R.id.alert_text_snooze);
-        if (snooze != null) snooze.setEnabled(isSnoozeEnabled());
-        if (snoozeText != null) snoozeText.setEnabled(isSnoozeEnabled());
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        disposableDialog.dispose();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        // No longer care about the alarm being killed.
-        subscription.dispose();
-    }
-
-    @Override
-    public void onBackPressed() {
-        // Don't allow back to dismiss
-    }
-}
diff --git a/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.kt b/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.kt
new file mode 100644
index 00000000..719304af
--- /dev/null
+++ b/app/src/main/java/com/better/alarm/alert/AlarmAlertFullScreen.kt
@@ -0,0 +1,208 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ * Copyright (C) 2012 Yuriy Kulikov yuriy.kulikov.87@gmail.com
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.better.alarm.alert
+
+import android.content.Intent
+import android.content.pm.ActivityInfo
+import android.content.res.Configuration
+import android.os.Build
+import android.os.Bundle
+import android.view.View
+import android.view.WindowManager
+import android.widget.Button
+import android.widget.TextView
+import androidx.fragment.app.FragmentActivity
+import com.better.alarm.R
+import com.better.alarm.background.Event.Autosilenced
+import com.better.alarm.background.Event.DemuteEvent
+import com.better.alarm.background.Event.DismissEvent
+import com.better.alarm.background.Event.MuteEvent
+import com.better.alarm.background.Event.SnoozedEvent
+import com.better.alarm.configuration.Prefs
+import com.better.alarm.configuration.Store
+import com.better.alarm.configuration.globalInject
+import com.better.alarm.configuration.globalLogger
+import com.better.alarm.interfaces.Alarm
+import com.better.alarm.interfaces.IAlarmsManager
+import com.better.alarm.interfaces.Intents
+import com.better.alarm.presenter.DynamicThemeHandler
+import com.better.alarm.presenter.TimePickerDialogFragment
+import io.reactivex.Observable
+import io.reactivex.android.schedulers.AndroidSchedulers
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import io.reactivex.disposables.Disposables
+import java.util.concurrent.TimeUnit
+
+/**
+ * Alarm Clock alarm alert: pops visible indicator and plays alarm tone. This
+ * activity is the full screen version which shows over the lock screen with the
+ * wallpaper as the background.
+ */
+class AlarmAlertFullScreen : FragmentActivity() {
+    private val store: Store by globalInject()
+    private val alarmsManager: IAlarmsManager by globalInject()
+    private val sp: Prefs by globalInject()
+    private val logger by globalLogger("AlarmAlertFullScreen")
+    private val dynamicThemeHandler: DynamicThemeHandler by globalInject()
+    private var mAlarm: Alarm? = null
+    private var disposableDialog = Disposables.empty()
+    private var subscription: Disposable? = null
+
+    override fun onCreate(icicle: Bundle?) {
+        setTheme(dynamicThemeHandler.getIdForName(AlarmAlertFullScreen::class.java.name))
+        super.onCreate(icicle)
+        requestedOrientation = when {
+            // portrait on smartphone
+            !resources.getBoolean(R.bool.isTablet) -> ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
+            // preserve initial rotation and disable rotation change on tablets
+            resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT -> requestedOrientation
+            else -> ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
+        }
+        val id = intent.getIntExtra(Intents.EXTRA_ID, -1)
+
+        mAlarm = alarmsManager.getAlarm(id)
+
+        if (Build.VERSION.SDK_INT >= 27) {
+            setShowWhenLocked(true)
+            setTurnScreenOn(true)
+        } else {
+            @Suppress("DEPRECATION")
+            window.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED)
+            @Suppress("DEPRECATION")
+            window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON)
+        }
+
+        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
+                or WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON)
+        updateLayout()
+
+        // Register to get the alarm killed/snooze/dismiss intent.
+        subscription = store.events
+                .filter { event ->
+                    (event is SnoozedEvent && event.id == id
+                            || event is DismissEvent && event.id == id
+                            || event is Autosilenced && event.id == id)
+                }
+                .take(1)
+                .subscribe { finish() }
+
+    }
+
+    private fun setTitle() {
+        val titleText = mAlarm?.labelOrDefault ?: ""
+        title = titleText
+        findViewById<TextView>(R.id.alarm_alert_label).text = titleText
+    }
+
+    private fun updateLayout() {
+        setContentView(R.layout.alert_fullscreen)
+
+        findViewById<Button>(R.id.alert_button_snooze).run {
+            requestFocus()
+            setOnClickListener {
+                if (isSnoozeEnabled) {
+                    mAlarm?.snooze()
+                }
+            }
+            setOnLongClickListener {
+                if (isSnoozeEnabled) {
+                    showSnoozePicker()
+                }
+                true
+            }
+        }
+        findViewById<Button>(R.id.alert_button_dismiss).run {
+            setOnClickListener {
+                if (sp.longClickDismiss.value) {
+                    text = getString(R.string.alarm_alert_hold_the_button_text)
+                } else {
+                    dismiss()
+                }
+            }
+            setOnLongClickListener {
+                dismiss()
+                true
+            }
+        }
+
+        setTitle()
+    }
+
+    /**
+     * Shows a time picker to pick the next snooze time. Mutes the sound for the first 10
+     * seconds to let the user choose the time. Demutes after cancel or after 10 seconds to
+     * deal with unintentional clicks.
+     */
+    private fun showSnoozePicker() {
+        store.events.onNext(MuteEvent())
+        val timer = Observable.timer(10, TimeUnit.SECONDS, AndroidSchedulers.mainThread())
+                .subscribe { store.events.onNext(DemuteEvent()) }
+
+        val dialog = TimePickerDialogFragment.showTimePicker(supportFragmentManager).subscribe { picked ->
+            timer.dispose()
+            if (picked.isPresent()) {
+                mAlarm?.snooze(picked.get().hour, picked.get().minute)
+            } else {
+                store.events.onNext(DemuteEvent())
+            }
+        }
+
+        disposableDialog = CompositeDisposable(dialog, timer)
+    }
+
+    private fun dismiss() {
+        mAlarm?.dismiss()
+    }
+
+    private val isSnoozeEnabled: Boolean
+        get() = sp.snoozeDuration.value != -1
+
+    /**
+     * this is called when a second alarm is triggered while a previous alert
+     * window is still active.
+     */
+    override fun onNewIntent(intent: Intent) {
+        super.onNewIntent(intent)
+        logger.debug { "AlarmAlert.OnNewIntent()" }
+        val id = intent.getIntExtra(Intents.EXTRA_ID, -1)
+        mAlarm = alarmsManager.getAlarm(id)
+        setTitle()
+    }
+
+    override fun onResume() {
+        super.onResume()
+        findViewById<Button>(R.id.alert_button_snooze)?.isEnabled = isSnoozeEnabled
+        findViewById<View>(R.id.alert_text_snooze)?.isEnabled = isSnoozeEnabled
+    }
+
+    override fun onPause() {
+        super.onPause()
+        disposableDialog.dispose()
+    }
+
+    public override fun onDestroy() {
+        super.onDestroy()
+        // No longer care about the alarm being killed.
+        subscription?.dispose()
+        disposableDialog.dispose()
+    }
+
+    override fun onBackPressed() {
+        // Don't allow back to dismiss
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/better/alarm/configuration/Prefs.kt b/app/src/main/java/com/better/alarm/configuration/Prefs.kt
index f7417a36..98d5d6de 100644
--- a/app/src/main/java/com/better/alarm/configuration/Prefs.kt
+++ b/app/src/main/java/com/better/alarm/configuration/Prefs.kt
@@ -23,7 +23,8 @@ class Prefs private constructor(
         val autoSilence: RxDataStore<Int>,
         val fadeInTimeInSeconds: RxDataStore<Int>,
         val vibrate: RxDataStore<Boolean>,
-        val skipDuration: RxDataStore<Int>
+        val skipDuration: RxDataStore<Int>,
+        val longClickDismiss: RxDataStore<Boolean>,
 ) {
     fun layout(): Layout {
         return listRowLayout
@@ -52,7 +53,8 @@ class Prefs private constructor(
                     autoSilence = factory.intStringDataStore("auto_silence", 10),
                     fadeInTimeInSeconds = factory.intStringDataStore(Prefs.KEY_FADE_IN_TIME_SEC, 30),
                     vibrate = factory.booleanDataStore("vibrate", true),
-                    skipDuration = factory.intStringDataStore(SKIP_DURATION_KEY, -1)
+                    skipDuration = factory.intStringDataStore(SKIP_DURATION_KEY, -1),
+                    longClickDismiss = factory.booleanDataStore(LONGCLICK_DISMISS_KEY, LONGCLICK_DISMISS_DEFAULT),
             )
         }
 
@@ -62,7 +64,7 @@ class Prefs private constructor(
         const val KEY_AUTO_SILENCE = "auto_silence"
         const val KEY_PREALARM_DURATION = "prealarm_duration"
         const val KEY_FADE_IN_TIME_SEC = "fade_in_time_sec"
-        const val LONGCLICK_DISMISS_DEFAULT = false
+        const val LONGCLICK_DISMISS_DEFAULT = true
         const val LONGCLICK_DISMISS_KEY = "longclick_dismiss_key"
         const val MAX_PREALARM_VOLUME = 10
         const val DEFAULT_PREALARM_VOLUME = 5
diff --git a/app/src/main/java/com/better/alarm/presenter/AlarmsListActivity.kt b/app/src/main/java/com/better/alarm/presenter/AlarmsListActivity.kt
index 21836cef..da9237f1 100644
--- a/app/src/main/java/com/better/alarm/presenter/AlarmsListActivity.kt
+++ b/app/src/main/java/com/better/alarm/presenter/AlarmsListActivity.kt
@@ -181,8 +181,7 @@ class AlarmsListActivity : AppCompatActivity() {
 
         this.mActionBarHandler = ActionBarHandler(this, uiStore, alarms, globalGet())
 
-        val isTablet = !resources.getBoolean(R.bool.isTablet)
-        if (isTablet) {
+        if (!resources.getBoolean(R.bool.isTablet)) {
             requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
         }
 
