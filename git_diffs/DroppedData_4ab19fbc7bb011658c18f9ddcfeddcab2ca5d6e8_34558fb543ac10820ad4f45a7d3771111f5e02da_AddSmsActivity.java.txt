diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/AddSmsActivity.java b/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/AddSmsActivity.java
index 17e3631..c22af73 100644
--- a/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/AddSmsActivity.java
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/AddSmsActivity.java
@@ -2,53 +2,48 @@ package com.github.yeriomin.smsscheduler.Activity;
 
 import android.Manifest;
 import android.app.Activity;
-import android.app.AlarmManager;
-import android.app.PendingIntent;
-import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.database.Cursor;
 import android.os.Build;
 import android.os.Bundle;
-import android.provider.ContactsContract;
-import android.text.Editable;
 import android.text.TextWatcher;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
-import android.widget.AdapterView;
 import android.widget.AutoCompleteTextView;
-import android.widget.Button;
-import android.widget.DatePicker;
 import android.widget.EditText;
-import android.widget.SimpleAdapter;
-import android.widget.TimePicker;
 import android.widget.Toast;
 
-import com.github.yeriomin.smsscheduler.AlarmReceiver;
 import com.github.yeriomin.smsscheduler.DbHelper;
 import com.github.yeriomin.smsscheduler.R;
+import com.github.yeriomin.smsscheduler.Scheduler;
 import com.github.yeriomin.smsscheduler.SmsModel;
+import com.github.yeriomin.smsscheduler.view.BuilderCancel;
+import com.github.yeriomin.smsscheduler.view.BuilderContact;
+import com.github.yeriomin.smsscheduler.view.BuilderDate;
+import com.github.yeriomin.smsscheduler.view.BuilderMessage;
+import com.github.yeriomin.smsscheduler.view.BuilderTime;
+import com.github.yeriomin.smsscheduler.view.EmptinessTextWatcher;
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Calendar;
 import java.util.GregorianCalendar;
-import java.util.HashMap;
 import java.util.List;
 
 public class AddSmsActivity extends Activity {
 
     final public static int RESULT_SCHEDULED = 1;
     final public static int RESULT_UNSCHEDULED = 2;
+    final public static String INTENT_SMS_ID = "INTENT_SMS_ID";
 
+    final private static String SMS_STATE = "SMS_STATE";
     final private static int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;
     final private String[] permissionsRequired = new String[] {
             Manifest.permission.SEND_SMS,
             Manifest.permission.READ_CONTACTS
     };
 
-    private GregorianCalendar timeScheduled = new GregorianCalendar();
     private SmsModel sms;
     private ArrayList<String> permissionsGranted = new ArrayList<>();
 
@@ -77,116 +72,18 @@ public class AddSmsActivity extends Activity {
     }
 
     private void buildForm() {
-        timeScheduled = new GregorianCalendar();
-        String recipient = "", message = "";
-
-        final AutoCompleteTextView formContact = (AutoCompleteTextView) findViewById(R.id.form_input_contact);
-        final EditText formMessage = (EditText) findViewById(R.id.form_input_message);
-        final TimePicker formTime = (TimePicker) findViewById(R.id.form_time);
-        final DatePicker formDate = (DatePicker) findViewById(R.id.form_date);
-        final Button buttonCancel = (Button) findViewById(R.id.button_cancel);
-
-        // Filling form with data if provided
-        if (sms.getTimestampCreated() > 0) {
-            timeScheduled.setTimeInMillis(sms.getTimestampScheduled());
-            recipient = sms.getRecipientName().length() > 0
-                    ? getString(R.string.contact_format, sms.getRecipientName(), sms.getRecipientNumber())
-                    : sms.getRecipientNumber()
-            ;
-            message = sms.getMessage();
-        }
-        formTime.setIs24HourView(android.text.format.DateFormat.is24HourFormat(this));
-        formTime.setCurrentHour(timeScheduled.get(Calendar.HOUR_OF_DAY));
-        formTime.setCurrentMinute(timeScheduled.get(Calendar.MINUTE));
-        formDate.updateDate(
-                timeScheduled.get(GregorianCalendar.YEAR),
-                timeScheduled.get(GregorianCalendar.MONTH),
-                timeScheduled.get(GregorianCalendar.DAY_OF_MONTH)
-        );
-        formContact.setText(recipient);
-        formMessage.setText(message);
-        buttonCancel.setVisibility(sms.getTimestampCreated() > 0 ? View.VISIBLE : View.GONE);
-        int stringId = sms.getStatus().contentEquals(SmsModel.STATUS_PENDING)
-                ? R.string.form_button_cancel
-                : R.string.form_button_delete
-                ;
-        buttonCancel.setText(getString(stringId));
-
-        // Filling contacts list
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                final SimpleAdapter adapter = new SimpleAdapter(
-                        getApplicationContext(),
-                        getContacts(),
-                        R.layout.item_contact,
-                        new String[]{"Name", "Phone"},
-                        new int[]{R.id.account_name, R.id.account_number}
-                );
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        formContact.setAdapter(adapter);
-                    }
-                });
-            }
-        }).start();
-        formContact.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                HashMap<String, String> recipient = (HashMap<String, String>) parent.getItemAtPosition(position);
-                String name = recipient.get("Name"), phone = recipient.get("Phone");
-                formContact.setText(getString(R.string.contact_format, name, phone));
-                sms.setRecipientName(name);
-                sms.setRecipientNumber(phone);
-            }
-        });
-        TextWatcher watcher = new TextWatcher() {
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {
-                if (!formContact.isPerformingCompletion()) {
-                    sms.setRecipientName("");
-                    sms.setRecipientNumber(String.valueOf(s));
-                }
-            }
-
-            @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-            }
-
-            @Override
-            public void afterTextChanged(Editable s) {
-            }
-        };
-        formContact.addTextChangedListener(watcher);
-
-        // Adding emptiness checks
-        TextWatcher watcherEmptiness = new TextWatcher() {
-            @Override
-            public void onTextChanged(CharSequence s, int start, int before, int count) {
-            }
-
-            @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-            }
-
-            @Override
-            public void afterTextChanged(Editable s) {
-                final Button button = (Button) findViewById(R.id.button_add);
-                button.setEnabled(formContact.getText().length() > 0 && formMessage.getText().length() > 0);
-            }
-        };
+        EditText formMessage = (EditText) findViewById(R.id.form_input_message);
+        formMessage = (EditText) new BuilderMessage().setView(formMessage).setSms(sms).build();
+        AutoCompleteTextView formContact = (AutoCompleteTextView) findViewById(R.id.form_input_contact);
+        formContact = (AutoCompleteTextView) new BuilderContact().setView(formContact).setSms(sms).setActivity(this).build();
+        TextWatcher watcherEmptiness = new EmptinessTextWatcher(this, formContact, formMessage);
         formContact.addTextChangedListener(watcherEmptiness);
         formMessage.addTextChangedListener(watcherEmptiness);
 
-        // Adding time event listeners
-        formTime.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {
-            @Override
-            public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {
-                timeScheduled.set(GregorianCalendar.HOUR_OF_DAY, hourOfDay);
-                timeScheduled.set(GregorianCalendar.MINUTE, minute);
-            }
-        });
+        new BuilderTime().setActivity(this).setView(findViewById(R.id.form_time)).setSms(sms).build();
+        new BuilderDate().setActivity(this).setView(findViewById(R.id.form_date)).setSms(sms).build();
+
+        new BuilderCancel().setView(findViewById(R.id.button_cancel)).setSms(sms).build();
     }
 
     @Override
@@ -207,137 +104,57 @@ public class AddSmsActivity extends Activity {
         setContentView(R.layout.add_sms);
 
         // Filling existing sms info if possible
-        long smsId = getSmsId(savedInstanceState);
+        long smsId = getIntent().getLongExtra(INTENT_SMS_ID, 0L);
         if (smsId > 0) {
+            Log.i(getClass().getName(), "Sms id passed with intent: " + smsId);
             sms = DbHelper.getDbHelper(this).get(smsId);
-        } else {
+        } else if (null != savedInstanceState) {
+            Log.i(getClass().getName(), "Getting sms object from saved instance state");
+            sms = savedInstanceState.getParcelable(SMS_STATE);
+        }
+        if (null == sms) {
+            Log.i(getClass().getName(), "New sms form");
+            sms = new SmsModel();
+        }
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (null != sms) {
+            outState.putParcelable(SMS_STATE, sms);
+        }
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+        super.onRestoreInstanceState(savedInstanceState);
+        if (null == sms) {
+            sms = savedInstanceState.getParcelable(SMS_STATE);
+        }
+        if (null == sms) {
             sms = new SmsModel();
         }
     }
 
     public void scheduleSms(View view) {
-        DatePicker formDate = (DatePicker) findViewById(R.id.form_date);
-        timeScheduled.set(GregorianCalendar.YEAR, formDate.getYear());
-        timeScheduled.set(GregorianCalendar.MONTH, formDate.getMonth());
-        timeScheduled.set(GregorianCalendar.DAY_OF_MONTH, formDate.getDayOfMonth());
-        if (timeScheduled.getTimeInMillis() < GregorianCalendar.getInstance().getTimeInMillis()) {
+        if (sms.getTimestampScheduled() < GregorianCalendar.getInstance().getTimeInMillis()) {
             Toast.makeText(getApplicationContext(), getString(R.string.form_validation_datetime), Toast.LENGTH_SHORT).show();
             return;
         }
-        sms.setTimestampScheduled(timeScheduled.getTimeInMillis());
-
-        EditText formMessage = (EditText) findViewById(R.id.form_input_message);
-        sms.setMessage(formMessage.getText().toString());
-
-        sms.setStatus(SmsModel.STATUS_PENDING);
-
         DbHelper.getDbHelper(this).save(sms);
-
-        scheduleAlarm(sms);
-
-        Intent returnIntent = new Intent();
-        setResult(RESULT_SCHEDULED, returnIntent);
+        new Scheduler(getApplicationContext()).schedule(sms);
+        setResult(RESULT_SCHEDULED, new Intent());
         finish();
     }
 
     public void unscheduleSms(View view) {
         DbHelper.getDbHelper(this).delete(sms.getTimestampCreated());
-
-        unscheduleAlarm(sms);
-
-        Intent returnIntent = new Intent();
-        setResult(RESULT_UNSCHEDULED, returnIntent);
+        new Scheduler(getApplicationContext()).unschedule(sms);
+        setResult(RESULT_UNSCHEDULED, new Intent());
         finish();
     }
 
-    private List<? extends HashMap<String, ?>> getContacts() {
-        ArrayList<HashMap<String, String>> contacts = new ArrayList<>();
-        HashMap<String, String> names = new HashMap<>();
-
-        // Getting contact names
-        String[] projectionPeople = new String[] {
-                ContactsContract.Contacts._ID,
-                ContactsContract.Contacts.DISPLAY_NAME
-        };
-        Cursor people = getContentResolver().query(
-                ContactsContract.Contacts.CONTENT_URI,
-                projectionPeople,
-                null,
-                null,
-                ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME + " ASC"
-        );
-        if (null != people) {
-            int columnIndexId = people.getColumnIndex(ContactsContract.Contacts._ID);
-            int columnIndexName = people.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);
-            while (people.moveToNext()) {
-                names.put(people.getString(columnIndexId), people.getString(columnIndexName));
-            }
-            people.close();
-        }
-
-        // Getting phones
-        String[] projectionPhones = new String[] {
-                ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
-                ContactsContract.CommonDataKinds.Phone.NUMBER
-        };
-        Cursor phones = getContentResolver().query(
-                ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
-                projectionPhones,
-                null,
-                null,
-                null
-        );
-        if (null != phones) {
-            int columnIndexId = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID);
-            int columnIndexPhone = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
-            while (phones.moveToNext()) {
-                String contactId = phones.getString(columnIndexId);
-                String phoneNumber = phones.getString(columnIndexPhone);
-                HashMap<String, String> NamePhoneType = new HashMap<>();
-                NamePhoneType.put("Name", names.get(contactId));
-                NamePhoneType.put("Phone", phoneNumber);
-                contacts.add(NamePhoneType);
-            }
-            phones.close();
-        }
-
-        return contacts;
-    }
-
-    private long getSmsId(Bundle savedInstanceState) {
-        String smsId = "0";
-        if (savedInstanceState == null) {
-            Bundle extras = getIntent().getExtras();
-            if (extras != null) {
-                smsId = extras.getString(DbHelper.COLUMN_TIMESTAMP_CREATED);
-            }
-        } else {
-            smsId = (String) savedInstanceState.getSerializable(DbHelper.COLUMN_TIMESTAMP_CREATED);
-        }
-        return Long.parseLong(smsId);
-    }
-
-    private void scheduleAlarm(SmsModel sms) {
-        AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
-        alarmMgr.set(AlarmManager.RTC_WAKEUP, sms.getTimestampScheduled(), getAlarmPendingIntent(sms));
-    }
-
-    private void unscheduleAlarm(SmsModel sms) {
-        AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
-        alarmMgr.cancel(getAlarmPendingIntent(sms));
-    }
-    
-    private PendingIntent getAlarmPendingIntent(SmsModel sms) {
-        Intent intent = new Intent(AlarmReceiver.INTENT_FILTER);
-        intent.putExtra(DbHelper.COLUMN_TIMESTAMP_CREATED, sms.getTimestampCreated());
-        return PendingIntent.getBroadcast(
-                this,
-                sms.getId(),
-                intent,
-                PendingIntent.FLAG_UPDATE_CURRENT & Intent.FILL_IN_DATA
-        );
-    }
-
     private boolean permissionsGranted() {
         boolean granted = true;
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
@@ -362,23 +179,20 @@ public class AddSmsActivity extends Activity {
     public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
         switch (requestCode) {
             case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:
-            {
                 List<String> requiredPermissions = Arrays.asList(this.permissionsRequired);
                 String permission;
                 for (int i = 0; i < permissions.length; i++) {
                     permission = permissions[i];
-                    if (requiredPermissions.contains(permission)
-                            && grantResults[i] == PackageManager.PERMISSION_GRANTED) {
+                    if (requiredPermissions.contains(permission) && grantResults[i] == PackageManager.PERMISSION_GRANTED) {
                         this.permissionsGranted.add(permission);
                     }
                 }
                 if (this.permissionsGranted.size() == this.permissionsRequired.length) {
                     buildForm();
                 }
-            }
-            break;
+                break;
             default:
                 super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/SmsListActivity.java b/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/SmsListActivity.java
index 990719c..4913f4a 100644
--- a/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/SmsListActivity.java
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/Activity/SmsListActivity.java
@@ -30,32 +30,30 @@ public class SmsListActivity extends ListActivity {
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_settings:
-                startActivityForResult(new Intent(this, SmsSchedulerPreferenceActivity.class), 1);
-                break;
+        if (item.getItemId() == R.id.menu_settings) {
+            startActivityForResult(new Intent(this, SmsSchedulerPreferenceActivity.class), 1);
         }
         return true;
     }
 
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == REQUEST_CODE && resultCode != 0) {
-            int messageId;
-            switch (resultCode) {
-                case AddSmsActivity.RESULT_SCHEDULED:
-                    messageId = R.string.successfully_scheduled;
-                    break;
-                case AddSmsActivity.RESULT_UNSCHEDULED:
-                    messageId = R.string.successfully_unscheduled;
-                    break;
-                default:
-                    messageId = R.string.error_generic;
-                    System.out.println("Unknown AddSmsActivity result code: " + resultCode);
-                    break;
-            }
-            Toast.makeText(getApplicationContext(), getString(messageId), Toast.LENGTH_SHORT).show();
+        if (requestCode != REQUEST_CODE || resultCode == 0) {
+            return;
+        }
+        int messageId;
+        switch (resultCode) {
+            case AddSmsActivity.RESULT_SCHEDULED:
+                messageId = R.string.successfully_scheduled;
+                break;
+            case AddSmsActivity.RESULT_UNSCHEDULED:
+                messageId = R.string.successfully_unscheduled;
+                break;
+            default:
+                messageId = R.string.error_generic;
+                break;
         }
+        Toast.makeText(getApplicationContext(), getString(messageId), Toast.LENGTH_SHORT).show();
     }
 
     @Override
@@ -92,7 +90,7 @@ public class SmsListActivity extends ListActivity {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 Intent intent = new Intent(getApplicationContext(), AddSmsActivity.class);
-                intent.putExtra(DbHelper.COLUMN_TIMESTAMP_CREATED, String.valueOf(id));
+                intent.putExtra(AddSmsActivity.INTENT_SMS_ID, id);
                 startActivityForResult(intent, REQUEST_CODE);
             }
         });
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/NotificationUtil.java b/app/src/main/java/com/github/yeriomin/smsscheduler/NotificationUtil.java
deleted file mode 100644
index cd609c1..0000000
--- a/app/src/main/java/com/github/yeriomin/smsscheduler/NotificationUtil.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.github.yeriomin.smsscheduler;
-
-import android.annotation.TargetApi;
-import android.app.Notification;
-import android.app.PendingIntent;
-import android.content.Context;
-import android.os.Build;
-
-import java.lang.reflect.Method;
-
-public class NotificationUtil {
-    public static Notification createNotification(Context context, PendingIntent pendingIntent, String title, String text, int iconId) {
-        Notification notification;
-        if (isNotificationBuilderSupported()) {
-            notification = buildNotificationWithBuilder(context, pendingIntent, title, text, iconId);
-        } else {
-            notification = buildNotificationPreHoneycomb(context, pendingIntent, title, text, iconId);
-        }
-        return notification;
-    }
-
-    public static boolean isNotificationBuilderSupported() {
-        try {
-            return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) && Class.forName("android.app.Notification.Builder") != null;
-        } catch (ClassNotFoundException e) {
-            return false;
-        }
-    }
-
-    @SuppressWarnings("deprecation")
-    private static Notification buildNotificationPreHoneycomb(Context context, PendingIntent pendingIntent, String title, String text, int iconId) {
-        Notification notification = new Notification(iconId, "", System.currentTimeMillis());
-        try {
-            // try to call "setLatestEventInfo" if available
-            Method m = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
-            m.invoke(notification, context, title, text, pendingIntent);
-            notification.flags |= Notification.FLAG_AUTO_CANCEL;
-        } catch (Exception e) {
-            // do nothing
-        }
-        return notification;
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    @SuppressWarnings("deprecation")
-    private static Notification buildNotificationWithBuilder(Context context, PendingIntent pendingIntent, String title, String text, int iconId) {
-        android.app.Notification.Builder builder = new android.app.Notification.Builder(context)
-                .setContentTitle(title)
-                .setContentText(text)
-                .setContentIntent(pendingIntent)
-                .setSmallIcon(iconId)
-                .setAutoCancel(true);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            return builder.build();
-        } else {
-            return builder.getNotification();
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/Scheduler.java b/app/src/main/java/com/github/yeriomin/smsscheduler/Scheduler.java
new file mode 100644
index 0000000..06b6f16
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/Scheduler.java
@@ -0,0 +1,37 @@
+package com.github.yeriomin.smsscheduler;
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+
+public class Scheduler {
+
+    private Context context;
+
+    public Scheduler(Context context) {
+        this.context = context;
+    }
+
+    public void schedule(SmsModel sms) {
+//        AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
+//        alarmMgr.set(AlarmManager.RTC_WAKEUP, sms.getTimestampScheduled(), getAlarmPendingIntent(sms));
+    }
+
+    public void unschedule(SmsModel sms) {
+        AlarmManager alarmMgr = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
+        alarmMgr.cancel(getAlarmPendingIntent(sms));
+    }
+
+    private PendingIntent getAlarmPendingIntent(SmsModel sms) {
+        Intent intent = new Intent(AlarmReceiver.INTENT_FILTER);
+        intent.putExtra(DbHelper.COLUMN_TIMESTAMP_CREATED, sms.getTimestampCreated());
+        return PendingIntent.getBroadcast(
+            context,
+            sms.getId(),
+            intent,
+            PendingIntent.FLAG_UPDATE_CURRENT & Intent.FILL_IN_DATA
+        );
+    }
+
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/SmsModel.java b/app/src/main/java/com/github/yeriomin/smsscheduler/SmsModel.java
index b09d728..e2f886d 100644
--- a/app/src/main/java/com/github/yeriomin/smsscheduler/SmsModel.java
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/SmsModel.java
@@ -1,6 +1,11 @@
 package com.github.yeriomin.smsscheduler;
 
-public class SmsModel {
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import java.util.GregorianCalendar;
+
+public class SmsModel implements Parcelable {
 
     public static final String ERROR_UNKNOWN = "UNKNOWN";
     public static final String ERROR_GENERIC = "GENERIC";
@@ -14,13 +19,17 @@ public class SmsModel {
     public static final String STATUS_FAILED = "FAILED";
 
     private long timestampCreated;
-    private long timestampScheduled;
     private String recipientNumber;
     private String recipientName;
     private String message;
     private String status = STATUS_PENDING;
 
     private String result = "";
+    private GregorianCalendar calendar = new GregorianCalendar();
+
+    public SmsModel() {
+        calendar.setTimeInMillis(System.currentTimeMillis());
+    }
 
     public int getId() {
         return (int) (getTimestampCreated() / 1000);
@@ -35,11 +44,11 @@ public class SmsModel {
     }
 
     public Long getTimestampScheduled() {
-        return timestampScheduled;
+        return calendar.getTimeInMillis();
     }
 
     public void setTimestampScheduled(long timestampScheduled) {
-        this.timestampScheduled = timestampScheduled;
+        calendar.setTimeInMillis(timestampScheduled);
     }
 
     public String getRecipientNumber() {
@@ -81,4 +90,44 @@ public class SmsModel {
     public void setResult(String result) {
         this.result = result;
     }
+
+    public GregorianCalendar getCalendar() {
+        return calendar;
+    }
+
+    public SmsModel(Parcel in) {
+        timestampCreated = in.readLong();
+        calendar.setTimeInMillis(in.readLong());
+        recipientNumber = in.readString();
+        recipientName = in.readString();
+        message = in.readString();
+        status = in.readString();
+        result = in.readString();
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeLong(timestampCreated);
+        dest.writeLong(calendar.getTimeInMillis());
+        dest.writeString(recipientNumber);
+        dest.writeString(recipientName);
+        dest.writeString(message);
+        dest.writeString(status);
+        dest.writeString(result);
+    }
+
+    public static final Parcelable.Creator CREATOR = new Parcelable.Creator() {
+        public SmsModel createFromParcel(Parcel in) {
+            return new SmsModel(in);
+        }
+
+        public SmsModel[] newArray(int size) {
+            return new SmsModel[size];
+        }
+    };
 }
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/SmsSentService.java b/app/src/main/java/com/github/yeriomin/smsscheduler/SmsSentService.java
index 801347e..8b9ac1b 100644
--- a/app/src/main/java/com/github/yeriomin/smsscheduler/SmsSentService.java
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/SmsSentService.java
@@ -3,13 +3,12 @@ package com.github.yeriomin.smsscheduler;
 import android.app.Activity;
 import android.app.IntentService;
 import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
 import android.telephony.SmsManager;
 
 import com.github.yeriomin.smsscheduler.Activity.SmsListActivity;
+import com.github.yeriomin.smsscheduler.notification.NotificationManagerWrapper;
 
 public class SmsSentService extends IntentService {
 
@@ -65,14 +64,16 @@ public class SmsSentService extends IntentService {
             message = context.getString(R.string.notification_message_failure, sms.getRecipientName(), errorString);
         }
         DbHelper.getDbHelper(context).save(sms);
-        notify(context, intent, title, message, sms.getId());
+        notify(context, title, message, sms.getId());
     }
 
-    private void notify(Context context, Intent intent, String title, String message, int id) {
-        Intent myIntent = new Intent(context, SmsListActivity.class);
-        PendingIntent pendingIntent = PendingIntent.getActivity(context, 1, myIntent, 0);
-        Notification notification = NotificationUtil.createNotification(context, pendingIntent, title, message, R.drawable.ic_notification);
-        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-        notificationManager.notify(id, notification);
+    private void notify(Context context, String title, String message, int id) {
+        Notification notification = NotificationManagerWrapper.getBuilder(context)
+            .setIntent(new Intent(context, SmsListActivity.class))
+            .setMessage(message)
+            .setTitle(title)
+            .build()
+        ;
+        new NotificationManagerWrapper(context).show(id, notification);
     }
 }
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilder.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilder.java
new file mode 100644
index 0000000..07b4e12
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilder.java
@@ -0,0 +1,32 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.app.Notification;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+
+abstract public class NotificationBuilder {
+
+    protected Context context;
+
+    abstract public NotificationBuilder setTitle(String title);
+    abstract public NotificationBuilder setMessage(String message);
+    abstract public NotificationBuilder setIntent(Intent intent);
+    abstract public Notification build();
+
+    public NotificationBuilder addAction(int iconId, int stringId, PendingIntent pendingIntent) {
+        return this;
+    }
+
+    public NotificationBuilder setProgress(int max, int progress) {
+        return this;
+    }
+
+    public NotificationBuilder(Context context) {
+        this.context = context;
+    }
+
+    protected PendingIntent getPendingIntent(Intent intent) {
+        return PendingIntent.getActivity(context, 1, intent, 0);
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderHoneycomb.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderHoneycomb.java
new file mode 100644
index 0000000..eb308ef
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderHoneycomb.java
@@ -0,0 +1,46 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.annotation.TargetApi;
+import android.app.Notification;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+
+import com.github.yeriomin.smsscheduler.R;
+
+@TargetApi(Build.VERSION_CODES.HONEYCOMB)
+class NotificationBuilderHoneycomb extends NotificationBuilder {
+
+    protected Notification.Builder builder;
+
+    @Override
+    public NotificationBuilder setTitle(String title) {
+        builder.setContentTitle(title);
+        return this;
+    }
+
+    @Override
+    public NotificationBuilder setMessage(String message) {
+        builder.setContentText(message);
+        return this;
+    }
+
+    @Override
+    public NotificationBuilder setIntent(Intent intent) {
+        builder.setContentIntent(getPendingIntent(intent));
+        return this;
+    }
+
+    @Override
+    public Notification build() {
+        return builder.getNotification();
+    }
+
+    public NotificationBuilderHoneycomb(Context context) {
+        super(context);
+        builder = new Notification.Builder(context)
+            .setSmallIcon(R.drawable.ic_notification)
+            .setAutoCancel(true)
+        ;
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderIcs.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderIcs.java
new file mode 100644
index 0000000..3f30e04
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderIcs.java
@@ -0,0 +1,19 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+
+@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+class NotificationBuilderIcs extends NotificationBuilderHoneycomb {
+
+    @Override
+    public NotificationBuilder setProgress(int max, int progress) {
+        builder.setProgress(max, progress, false);
+        return this;
+    }
+
+    public NotificationBuilderIcs(Context context) {
+        super(context);
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderJellybean.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderJellybean.java
new file mode 100644
index 0000000..daeec97
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderJellybean.java
@@ -0,0 +1,20 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.annotation.TargetApi;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.os.Build;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+class NotificationBuilderJellybean extends NotificationBuilderIcs {
+
+    @Override
+    public NotificationBuilder addAction(int iconId, int stringId, PendingIntent pendingIntent) {
+        builder.addAction(iconId, context.getString(stringId), pendingIntent);
+        return this;
+    }
+
+    public NotificationBuilderJellybean(Context context) {
+        super(context);
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderLegacy.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderLegacy.java
new file mode 100644
index 0000000..59e963a
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationBuilderLegacy.java
@@ -0,0 +1,53 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.app.Notification;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+
+import com.github.yeriomin.smsscheduler.R;
+
+import java.lang.reflect.Method;
+
+class NotificationBuilderLegacy extends NotificationBuilder {
+
+    private String title;
+    private String message;
+    private Intent intent;
+
+    @Override
+    public NotificationBuilder setTitle(String title) {
+        this.title = title;
+        return this;
+    }
+
+    @Override
+    public NotificationBuilder setMessage(String message) {
+        this.message = message;
+        return this;
+    }
+
+    @Override
+    public NotificationBuilder setIntent(Intent intent) {
+        this.intent = intent;
+        return this;
+    }
+
+    @Override
+    public Notification build() {
+        Notification notification = new Notification(R.drawable.ic_notification, "", System.currentTimeMillis());
+        try {
+            // try to call "setLatestEventInfo" if available
+            Method m = notification.getClass().getMethod("setLatestEventInfo", Context.class, CharSequence.class, CharSequence.class, PendingIntent.class);
+            m.invoke(notification, context, title, message, getPendingIntent(intent));
+            notification.flags |= Notification.FLAG_AUTO_CANCEL;
+        } catch (Exception e) {
+            // do nothing
+        }
+        return notification;
+    }
+
+    public NotificationBuilderLegacy(Context context) {
+        super(context);
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationManagerWrapper.java b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationManagerWrapper.java
new file mode 100644
index 0000000..4faf116
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/notification/NotificationManagerWrapper.java
@@ -0,0 +1,37 @@
+package com.github.yeriomin.smsscheduler.notification;
+
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.content.Context;
+import android.os.Build;
+
+public class NotificationManagerWrapper {
+
+    protected Context context;
+    protected NotificationManager manager;
+
+    static public NotificationBuilder getBuilder(Context context) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            return new NotificationBuilderJellybean(context);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            return new NotificationBuilderHoneycomb(context);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+            return new NotificationBuilderIcs(context);
+        } else {
+            return new NotificationBuilderLegacy(context);
+        }
+    }
+
+    public NotificationManagerWrapper(Context context) {
+        this.context = context;
+        manager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+    }
+
+    public void show(int id, Notification notification) {
+        manager.notify(id, notification);
+    }
+
+    public void cancel(int id) {
+        manager.cancel(id);
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/Builder.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/Builder.java
new file mode 100644
index 0000000..d990086
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/Builder.java
@@ -0,0 +1,31 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.view.View;
+
+import com.github.yeriomin.smsscheduler.Activity.AddSmsActivity;
+import com.github.yeriomin.smsscheduler.SmsModel;
+
+public abstract class Builder {
+
+    protected View view;
+    protected SmsModel sms;
+    protected AddSmsActivity activity;
+
+    abstract protected View getView();
+    abstract public View build();
+
+    public Builder setView(View view) {
+        this.view = view;
+        return this;
+    }
+
+    public Builder setSms(SmsModel sms) {
+        this.sms = sms;
+        return this;
+    }
+
+    public Builder setActivity(AddSmsActivity activity) {
+        this.activity = activity;
+        return this;
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderCancel.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderCancel.java
new file mode 100644
index 0000000..08a23fa
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderCancel.java
@@ -0,0 +1,25 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.view.View;
+import android.widget.Button;
+
+import com.github.yeriomin.smsscheduler.R;
+import com.github.yeriomin.smsscheduler.SmsModel;
+
+public class BuilderCancel extends Builder {
+
+    @Override
+    protected Button getView() {
+        return (Button) view;
+    }
+
+    @Override
+    public Button build() {
+        getView().setVisibility(sms.getTimestampCreated() > 0 ? View.VISIBLE : View.GONE);
+        getView().setText(sms.getStatus().contentEquals(SmsModel.STATUS_PENDING)
+            ? R.string.form_button_cancel
+            : R.string.form_button_delete
+        );
+        return getView();
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderContact.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderContact.java
new file mode 100644
index 0000000..1280769
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderContact.java
@@ -0,0 +1,60 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.AutoCompleteTextView;
+
+import com.github.yeriomin.smsscheduler.R;
+
+import java.util.HashMap;
+
+public class BuilderContact extends Builder {
+
+    @Override
+    protected AutoCompleteTextView getView() {
+        return (AutoCompleteTextView) view;
+    }
+
+    @Override
+    public AutoCompleteTextView build() {
+        ContactsTask task = new ContactsTask();
+        task.setActivity(activity);
+        task.setContactsView(getView());
+        task.execute();
+        getView().setText(!TextUtils.isEmpty(sms.getRecipientName())
+            ? activity.getString(R.string.contact_format, sms.getRecipientName(), sms.getRecipientNumber())
+            : sms.getRecipientNumber()
+        );
+        getView().setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                HashMap<String, String> recipient = (HashMap<String, String>) parent.getItemAtPosition(position);
+                String name = recipient.get("Name"), phone = recipient.get("Phone");
+                getView().setText(activity.getString(R.string.contact_format, name, phone));
+                sms.setRecipientName(name);
+                sms.setRecipientNumber(phone);
+            }
+        });
+        getView().addTextChangedListener(new TextWatcher() {
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                if (!getView().isPerformingCompletion()) {
+                    sms.setRecipientName("");
+                    sms.setRecipientNumber(String.valueOf(s));
+                }
+            }
+
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+            }
+        });
+        return getView();
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderDate.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderDate.java
new file mode 100644
index 0000000..4c547a1
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderDate.java
@@ -0,0 +1,31 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.widget.DatePicker;
+
+import java.util.GregorianCalendar;
+
+public class BuilderDate extends Builder {
+
+    @Override
+    protected DatePicker getView() {
+        return (DatePicker) view;
+    }
+
+    @Override
+    public DatePicker build() {
+        getView().init(
+            sms.getCalendar().get(GregorianCalendar.YEAR),
+            sms.getCalendar().get(GregorianCalendar.MONTH),
+            sms.getCalendar().get(GregorianCalendar.DAY_OF_MONTH),
+            new DatePicker.OnDateChangedListener() {
+                @Override
+                public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+                    sms.getCalendar().set(GregorianCalendar.YEAR, year);
+                    sms.getCalendar().set(GregorianCalendar.MONTH, monthOfYear);
+                    sms.getCalendar().set(GregorianCalendar.DAY_OF_MONTH, dayOfMonth);
+                }
+            }
+        );
+        return getView();
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderMessage.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderMessage.java
new file mode 100644
index 0000000..c4bb6fa
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderMessage.java
@@ -0,0 +1,35 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.widget.EditText;
+
+public class BuilderMessage extends Builder {
+
+    @Override
+    protected EditText getView() {
+        return (EditText) view;
+    }
+
+    @Override
+    public EditText build() {
+        getView().setText(sms.getMessage());
+        getView().addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+                sms.setMessage(String.valueOf(s));
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+
+            }
+        });
+        return getView();
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderTime.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderTime.java
new file mode 100644
index 0000000..58d7516
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/BuilderTime.java
@@ -0,0 +1,29 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.widget.TimePicker;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+public class BuilderTime extends Builder {
+
+    @Override
+    protected TimePicker getView() {
+        return (TimePicker) view;
+    }
+
+    @Override
+    public TimePicker build() {
+        getView().setIs24HourView(android.text.format.DateFormat.is24HourFormat(activity));
+        getView().setCurrentHour(sms.getCalendar().get(Calendar.HOUR_OF_DAY));
+        getView().setCurrentMinute(sms.getCalendar().get(Calendar.MINUTE));
+        getView().setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {
+            @Override
+            public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {
+                sms.getCalendar().set(GregorianCalendar.HOUR_OF_DAY, hourOfDay);
+                sms.getCalendar().set(GregorianCalendar.MINUTE, minute);
+            }
+        });
+        return getView();
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/ContactsTask.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/ContactsTask.java
new file mode 100644
index 0000000..675f73c
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/ContactsTask.java
@@ -0,0 +1,100 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.database.Cursor;
+import android.os.AsyncTask;
+import android.provider.ContactsContract;
+import android.widget.AutoCompleteTextView;
+import android.widget.SimpleAdapter;
+
+import com.github.yeriomin.smsscheduler.Activity.AddSmsActivity;
+import com.github.yeriomin.smsscheduler.R;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+
+public class ContactsTask extends AsyncTask<Void, Void, List<? extends HashMap<String, ?>>> {
+
+    private AddSmsActivity activity;
+    private AutoCompleteTextView contactsView;
+
+    public void setContactsView(AutoCompleteTextView contactsView) {
+        this.contactsView = contactsView;
+    }
+
+    public void setActivity(AddSmsActivity activity) {
+        this.activity = activity;
+    }
+
+    @Override
+    protected void onPostExecute(List<? extends HashMap<String, ?>> contacts) {
+        contactsView.setAdapter(new SimpleAdapter(
+            activity,
+            contacts,
+            R.layout.item_contact,
+            new String[]{"Name", "Phone"},
+            new int[]{R.id.account_name, R.id.account_number}
+        ));
+    }
+
+    @Override
+    protected List<? extends HashMap<String, ?>> doInBackground(Void... voids) {
+        HashMap<String, String> names = getNames();
+
+        // Getting phones
+        Cursor phones = activity.getContentResolver().query(
+            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
+            new String[] {
+                ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
+                ContactsContract.CommonDataKinds.Phone.NUMBER
+            },
+            null,
+            null,
+            null
+        );
+        ArrayList<HashMap<String, String>> contacts = new ArrayList<>();
+        if (null != phones) {
+            int columnIndexId = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.CONTACT_ID);
+            int columnIndexPhone = phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
+            while (phones.moveToNext()) {
+                String contactId = phones.getString(columnIndexId);
+                String phoneNumber = phones.getString(columnIndexPhone);
+                HashMap<String, String> NamePhoneType = new HashMap<>();
+                NamePhoneType.put("Name", names.get(contactId));
+                NamePhoneType.put("Phone", phoneNumber);
+                contacts.add(NamePhoneType);
+            }
+            phones.close();
+        }
+
+        return contacts;
+    }
+
+    private HashMap<String, String> getNames() {
+        HashMap<String, String> names = new HashMap<>();
+
+        // Getting contact names
+        String[] projectionPeople = new String[] {
+            ContactsContract.Contacts._ID,
+            ContactsContract.Contacts.DISPLAY_NAME
+        };
+        Cursor people = activity.getContentResolver().query(
+            ContactsContract.Contacts.CONTENT_URI,
+            projectionPeople,
+            null,
+            null,
+            ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME + " ASC"
+        );
+        if (null != people) {
+            int columnIndexId = people.getColumnIndex(ContactsContract.Contacts._ID);
+            int columnIndexName = people.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);
+            while (people.moveToNext()) {
+                names.put(people.getString(columnIndexId), people.getString(columnIndexName));
+            }
+            people.close();
+        }
+
+        return names;
+    }
+}
diff --git a/app/src/main/java/com/github/yeriomin/smsscheduler/view/EmptinessTextWatcher.java b/app/src/main/java/com/github/yeriomin/smsscheduler/view/EmptinessTextWatcher.java
new file mode 100644
index 0000000..af82c61
--- /dev/null
+++ b/app/src/main/java/com/github/yeriomin/smsscheduler/view/EmptinessTextWatcher.java
@@ -0,0 +1,36 @@
+package com.github.yeriomin.smsscheduler.view;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.EditText;
+
+import com.github.yeriomin.smsscheduler.Activity.AddSmsActivity;
+import com.github.yeriomin.smsscheduler.R;
+
+public class EmptinessTextWatcher implements TextWatcher {
+    private AddSmsActivity addSmsActivity;
+    private final AutoCompleteTextView formContact;
+    private final EditText formMessage;
+
+    public EmptinessTextWatcher(AddSmsActivity addSmsActivity, AutoCompleteTextView formContact, EditText formMessage) {
+        this.addSmsActivity = addSmsActivity;
+        this.formContact = formContact;
+        this.formMessage = formMessage;
+    }
+
+    @Override
+    public void onTextChanged(CharSequence s, int start, int before, int count) {
+    }
+
+    @Override
+    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+    }
+
+    @Override
+    public void afterTextChanged(Editable s) {
+        final Button button = (Button) addSmsActivity.findViewById(R.id.button_add);
+        button.setEnabled(formContact.getText().length() > 0 && formMessage.getText().length() > 0);
+    }
+}
