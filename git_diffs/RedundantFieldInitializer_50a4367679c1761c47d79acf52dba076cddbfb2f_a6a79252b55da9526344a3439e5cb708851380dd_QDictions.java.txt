diff --git a/madmanLib/src/main/java/com/mmt/widget/ActionButton.java b/madmanLib/src/main/java/com/mmt/widget/ActionButton.java
deleted file mode 100644
index f771934..0000000
--- a/madmanLib/src/main/java/com/mmt/widget/ActionButton.java
+++ /dev/null
@@ -1,1435 +0,0 @@
-/*
- * Copyright 2015 Shell Software Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- *
- * File created: 2015-01-17 10:39:13
- */
-
-package com.mmt.widget;
-
-import com.mmt.widget.R;
-
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewOutlineProvider;
-import android.view.animation.Animation;
-import android.view.animation.AnimationUtils;
-
-/**
- * This class represents a <b>Action Button</b>, which is used in 
- * <a href="http://www.google.com.ua/design/spec/components/buttons.html">Material Design</a>
- *
- */
-public class ActionButton extends View {
-
-	/**
-	 * Logging tag
-	 */
-	private static final String LOG_TAG = "M2t";
-
-	/**
-	 * <b>Action Button</b> type
-	 */
-	private Type type = Type.DEFAULT;
-
-	/**
-	 * <b>Action Button</b> state
-	 */
-	private State state = State.NORMAL;
-
-	/**
-	 * <b>Action Button</b> color in {@link State#NORMAL} state 
-	 */
-	private int buttonColor = Color.LTGRAY;
-
-	/**
-	 * <b>Action Button</b> color in {@link State#PRESSED} state 
-	 */
-	private int buttonColorPressed = Color.DKGRAY;
-
-	/**
-	 * Shadow radius expressed in actual pixels
-	 */
-	private float shadowRadius = MetricsConverter.dpToPx(getContext(), 2.0f);
-
-	/**
-	 * Shadow X-axis offset expressed in actual pixels
-	 */
-	private float shadowXOffset = MetricsConverter.dpToPx(getContext(), 1.0f);
-
-	/**
-	 * Shadow Y-axis offset expressed in actual pixels 
-	 */
-	private float shadowYOffset = MetricsConverter.dpToPx(getContext(), 1.5f);
-
-	/**
-	 * Shadow color 
-	 */
-	private int shadowColor = Color.parseColor("#757575");
-
-	/**
-	 * Stroke width 
-	 */
-	private float strokeWidth = 0.0f;
-
-	/**
-	 * Stroke color 
-	 */
-	private int strokeColor = Color.BLACK;
-
-	/**
-	 * <b>Action Button</b> image drawable centered inside the view  
-	 */
-	private Drawable image;
-
-	/**
-	 * Size of the <b>Action Button</b> image inside the view
-	 */
-	private float imageSize = MetricsConverter.dpToPx(getContext(), 24.0f);
-
-	/**
-	 * Animation, which is used while showing <b>Action Button</b>
-	 */
-	private Animation showAnimation;
-
-	/**
-	 * Animation, which is used while hiding or dismissing <b>Action Button</b> 
-	 */
-	private Animation hideAnimation;
-
-	/**
-	 * {@link android.graphics.Paint}, which is used for drawing the elements of
-	 * <b>Action Button</b>
-	 */
-	protected final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
-
-	/**
-	 * Creates an instance of the <b>Action Button</b>
-	 * <p> 
-	 * Used when instantiating <b>Action Button</b> programmatically
-	 *  
-	 * @param context context the view is running in
-	 */
-	public ActionButton(Context context) {
-		super(context);
-		initActionButton();
-	}
-
-	/**
-	 * Creates an instance of the <b>Action Button</b>
-	 * <p> 
-	 * Used when inflating the declared <b>Action Button</b> 
-	 * within XML resource
-	 *
-	 * @param context context the view is running in
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	public ActionButton(Context context, AttributeSet attrs) {
-		super(context, attrs);
-		initActionButton(context, attrs, 0, 0);
-	}
-
-	/**
-	 * Creates an instance of the <b>Action Button</b>
-	 * <p> 
-	 * Used when inflating the declared <b>Action Button</b> 
-	 * within XML resource
-	 *
-	 * @param context context the view is running in
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 * @param defStyleAttr attribute in the current theme that contains a
-	 *        reference to a style resource that supplies default values for
-	 *        the view. Can be 0 to not look for defaults
-	 */
-	public ActionButton(Context context, AttributeSet attrs, int defStyleAttr) {
-		super(context, attrs, defStyleAttr);
-		initActionButton(context, attrs, defStyleAttr, 0);
-	}
-
-	/**
-	 * Creates an instance of the <b>Action Button</b>
-	 * <p>
-	 * Used when inflating the declared <b>Action Button</b> 
-	 * within XML resource
-	 * <p>
-	 * Might be called if target API is LOLLIPOP (21) and higher
-	 *  
-	 * @param context context the view is running in
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 * @param defStyleAttr attribute in the current theme that contains a
-	 *        reference to a style resource that supplies default values for
-	 *        the view. Can be 0 to not look for defaults
-	 * @param defStyleRes resource identifier of a style resource that
-	 *        supplies default values for the view, used only if
-	 *        defStyleAttr is 0 or can not be found in the theme. Can be 0
-	 *        to not look for defaults
-	 */
-	@TargetApi(Build.VERSION_CODES.LOLLIPOP)
-	public ActionButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
-		super(context, attrs, defStyleAttr, defStyleRes);
-		initActionButton(context, attrs, defStyleAttr, defStyleRes);
-	}
-
-	/**
-	 * Initializes the <b>Action Button</b>, which is created programmatically 
-	 */
-	private void initActionButton() {
-		initLayerType();
-		Log.v(LOG_TAG, "Action Button initialized");
-	}
-
-	/**
-	 * Initializes the <b>Action Button</b>, which is declared within XML resource
-	 * <p>
-	 * Makes calls to different initialization methods for parameters initialization.
-	 * For those parameters, which are not declared in the XML resource, 
-	 * the default value will be used 
-	 *
-	 * @param context context the view is running in
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 * @param defStyleAttr attribute in the current theme that contains a
-	 *        reference to a style resource that supplies default values for
-	 *        the view. Can be 0 to not look for defaults
-	 * @param defStyleRes resource identifier of a style resource that
-	 *        supplies default values for the view, used only if
-	 *        defStyleAttr is 0 or can not be found in the theme. Can be 0
-	 *        to not look for defaults
-	 */
-	private void initActionButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
-		initLayerType();
-		TypedArray attributes = context.getTheme().obtainStyledAttributes(attrs, R.styleable.ActionButton,
-				defStyleAttr, defStyleRes);
-		try {
-			initType(attributes);
-			initButtonColor(attributes);
-			initButtonColorPressed(attributes);
-			initShadowRadius(attributes);
-			initShadowXOffset(attributes);
-			initShadowYOffset(attributes);
-			initShadowColor(attributes);
-			initStrokeWidth(attributes);
-			initStrokeColor(attributes);
-			initImage(attributes);
-			initImageSize(attributes);
-			initShowAnimation(attributes);
-			initHideAnimation(attributes);
-		} catch (Exception e) {
-			Log.e(LOG_TAG, "Unable to read attr", e);
-		} finally {
-			attributes.recycle();
-		}
-		Log.v(LOG_TAG, "Action Button initialized");
-	}
-
-	/**
-	 * Initializes the layer type needed for shadows drawing
-	 * <p>
-	 * Might be called if target API is HONEYCOMB (11) and higher
-	 */
-	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
-	private void initLayerType() {
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-			setLayerType(LAYER_TYPE_SOFTWARE, paint);
-			Log.v(LOG_TAG, "Layer type initialized");
-		}
-	}
-
-	/**
-	 * Initializes the {@link Type} of <b>Action Button</b>
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initType(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_type)) {
-			final int id = attrs.getInteger(R.styleable.ActionButton_type, type.getId());
-			type = Type.forId(id);
-			Log.v(LOG_TAG, "Initialized type: " + getType());
-		}
-	}
-
-	/**
-	 * Initializes the <b>Action Button</b> color for 
-	 * {@link #state} set to {@link State#NORMAL} 
-	 *  
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initButtonColor(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_button_color)) {
-			buttonColor = attrs.getColor(R.styleable.ActionButton_button_color, buttonColor);
-			Log.v(LOG_TAG, "Initialized button color: " + getButtonColor());
-		}
-	}
-
-	/**
-	 * Initializes the <b>Action Button</b> color for
-	 * {@link #state} set to {@link State#PRESSED}
-	 * 
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initButtonColorPressed(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_button_colorPressed)) {
-			buttonColorPressed = attrs.getColor(R.styleable.ActionButton_button_colorPressed,
-					buttonColorPressed);
-			Log.v(LOG_TAG, "Initialized button color pressed: " + getButtonColorPressed());
-		}
-	}
-
-	/**
-	 * Initializes the shadow radius
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initShadowRadius(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_shadow_radius)) {
-			shadowRadius = attrs.getDimension(R.styleable.ActionButton_shadow_radius, shadowRadius);
-			Log.v(LOG_TAG, "Initialized shadow radius: " + getShadowRadius());
-		}
-	}
-
-	/**
-	 * Initializes the shadow X-axis offset
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initShadowXOffset(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_shadow_xOffset)) {
-			shadowXOffset = attrs.getDimension(R.styleable.ActionButton_shadow_xOffset, shadowXOffset);
-			Log.v(LOG_TAG, "Initialized shadow X-axis offset: " + getShadowXOffset());
-		}
-	}
-
-	/**
-	 * Initializes the shadow Y-axis offset
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initShadowYOffset(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_shadow_yOffset)) {
-			shadowYOffset = attrs.getDimension(R.styleable.ActionButton_shadow_yOffset, shadowYOffset);
-			Log.v(LOG_TAG, "Initialized shadow Y-axis offset: " + getShadowYOffset());
-		}
-	}
-
-	/**
-	 * Initializes the shadow color
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initShadowColor(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_shadow_color)) {
-			shadowColor = attrs.getColor(R.styleable.ActionButton_shadow_color, shadowColor);
-			Log.v(LOG_TAG, "Initialized shadow color: " + getShadowColor());
-		}
-	}
-
-	/**
-	 * Initializes the stroke width
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initStrokeWidth(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_stroke_width)) {
-			strokeWidth = attrs.getDimension(R.styleable.ActionButton_stroke_width, strokeWidth);
-			Log.v(LOG_TAG, "Initialized stroke width: " + getStrokeWidth());
-		}
-	}
-
-	/**
-	 * Initializes the stroke color
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initStrokeColor(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_stroke_color)) {
-			strokeColor = attrs.getColor(R.styleable.ActionButton_stroke_color, strokeColor);
-			Log.v(LOG_TAG, "Initialized stroke color: " + getStrokeColor());
-		}
-	}
-
-	/**
-	 * Initializes the animation, which is used while showing 
-	 * <b>Action Button</b>
-	 *  
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initShowAnimation(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_show_animation)) {
-			final int animResId = attrs.getResourceId(R.styleable.ActionButton_show_animation,
-					Animations.NONE.animResId);
-			showAnimation = Animations.load(getContext(), animResId);
-			Log.v(LOG_TAG, "Initialized animation on show");
-		}
-	}
-
-	/**
-	 * Initializes the animation, which is used while hiding or dismissing
-	 * <b>Action Button</b>
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initHideAnimation(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_hide_animation)) {
-			final int animResId = attrs.getResourceId(R.styleable.ActionButton_hide_animation,
-					Animations.NONE.animResId);
-			hideAnimation = Animations.load(getContext(), animResId);
-			Log.v(LOG_TAG, "Initialized animation on hide");
-		}
-	}
-
-	/**
-	 * Initializes the image inside <b>Action Button</b>
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initImage(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_image)) {
-			image = attrs.getDrawable(R.styleable.ActionButton_image);
-			Log.v(LOG_TAG, "Initialized image");
-		}
-	}
-
-	/**
-	 * Initializes the image size inside <b>Action Button</b>
-	 * <p>
-	 * Changing the default size of the image breaks the rules of 
-	 * <a href="http://www.google.com/design/spec/components/buttons.html">Material Design</a>
-	 *
-	 * @param attrs attributes of the XML tag that is inflating the view
-	 */
-	private void initImageSize(TypedArray attrs) {
-		if (attrs.hasValue(R.styleable.ActionButton_image_size)) {
-			imageSize = attrs.getDimension(R.styleable.ActionButton_image_size, imageSize);
-			Log.v(LOG_TAG, "Initialized image size: " + getImageSize());
-		}
-	}
-
-	/**
-	 * Plays the {@link #showAnimation} if set
-	 */
-	public void playShowAnimation() {
-		startAnimation(getShowAnimation());
-	}
-
-	/**
-	 * Plays the {@link #hideAnimation} if set
-	 */
-	public void playHideAnimation() {
-		startAnimation(getHideAnimation());
-	}
-
-	/**
-	 * Makes the <b>Action Button</b> to appear and 
-	 * sets its visibility to {@link #VISIBLE}
-	 * <p>
-	 * {@link #showAnimation} is played if set
-	 */
-	public void show() {
-		if (isHidden()) {
-			playShowAnimation();
-			setVisibility(VISIBLE);
-			Log.v(LOG_TAG, "Action Button shown");
-		}
-	}
-
-	/**
-	 * Makes the <b>Action Button</b> to disappear and
-	 * sets its visibility to {@link #INVISIBLE}
-	 * <p>
-	 * {@link #hideAnimation} is played if set
-	 */
-	public void hide() {
-		if (!isHidden() && !isDismissed()) {
-			playHideAnimation();
-			setVisibility(INVISIBLE);
-			Log.v(LOG_TAG, "Action Button hidden");
-		}
-	}
-
-	/**
-	 * Completely dismisses the <b>Action Button</b>,
-	 * sets its visibility to {@link #GONE} and removes it from the parent view
-	 * <p>
-	 * After calling this method any calls to {@link #show()} won't result in showing
-	 * the <b>Action Button</b> so far as it is removed from the parent View
-	 * <p> 
-	 * {@link #hideAnimation} is played if set
-	 */
-	public void dismiss() {
-		if (!isDismissed()) {
-			if (!isHidden()) {
-				playHideAnimation();
-			}
-			setVisibility(GONE);
-			ViewGroup parent = (ViewGroup) getParent();
-			parent.removeView(this);
-			Log.v(LOG_TAG, "Action Button dismissed");
-		}
-	}
-
-	/**
-	 * Checks whether <b>Action Button</b> is hidden
-	 *  
-	 * @return true if <b>Action Button</b> is hidden, otherwise false
-	 */
-	public boolean isHidden() {
-		return getVisibility() == INVISIBLE;
-	}
-
-	/**
-	 * Checks whether <b>Action Button</b> is dismissed
-	 *
-	 * @return true if <b>Action Button</b> is dismissed, otherwise false
-	 */
-	public boolean isDismissed() {
-		ViewGroup parent = (ViewGroup) getParent();
-		return parent == null;
-	}
-
-	/**
-	 * Returns the size of the <b>Action Button</b> in actual pixels (px).
-	 * Size of the <b>Action Button</b> is the diameter of the main circle
-	 *  
-	 * @return size of the <b>Action Button</b> in actual pixels (px)
-	 */
-	public int getButtonSize() {
-		final int buttonSize = (int) type.getSize(getContext());
-		Log.v(LOG_TAG, "Button size is: " + buttonSize);
-		return buttonSize;
-	}
-
-	/**
-	 * Returns the type of the <b>Action Button</b>
-	 *  
-	 * @return type of the <b>Action Button</b>
-	 */
-	public Type getType() {
-		return type;
-	}
-
-	/**
-	 * Sets the type of the <b>Action Button</b> and 
-	 * invalidates the layout of the view
-	 *
-	 * @param type type of the <b>Action Button</b>
-	 */
-	public void setType(Type type) {
-		this.type = type;
-		requestLayout();
-		Log.v(LOG_TAG, "Type changed to: " + getType());
-	}
-
-	/**
-	 * Returns the current state of the <b>Action Button</b> 
-	 *  
-	 * @return current state of the <b>Action Button</b>
-	 */
-	public State getState() {
-		return state;
-	}
-
-	/**
-	 * Sets the current state of the <b>Action Button</b> and 
-	 * invalidates the view
-	 *  
-	 * @param state new state of the <b>Action Button</b>
-	 */
-	public void setState(State state) {
-		this.state = state;
-		invalidate();
-		Log.v(LOG_TAG, "State changed to: " + getState());
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> color when in 
-	 * {@link State#NORMAL} state
-	 * 
-	 * @return <b>Action Button</b> color when in 
-	 * {@link State#NORMAL} state 
-	 */
-	public int getButtonColor() {
-		return buttonColor;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> color when in 
-	 * {@link State#NORMAL} state and invalidates the view
-	 *  
-	 * @param buttonColor <b>Action Button</b> color 
-	 *                    when in {@link State#NORMAL} state
-	 */
-	public void setButtonColor(int buttonColor) {
-		this.buttonColor = buttonColor;
-		invalidate();
-		Log.v(LOG_TAG, "Color changed to: " + getButtonColor());
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> color when in
-	 * {@link State#PRESSED} state
-	 *  
-	 * @return <b>Action Button</b> color when in
-	 * {@link State#PRESSED} state 
-	 */
-	public int getButtonColorPressed() {
-		return buttonColorPressed;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> color when in
-	 * {@link State#PRESSED} state and invalidates the view
-	 * 
-	 * @param buttonColorPressed <b>Action Button</b> color
-	 *                           when in {@link State#PRESSED} state                              
-	 */
-	public void setButtonColorPressed(int buttonColorPressed) {
-		this.buttonColorPressed = buttonColorPressed;
-		invalidate();
-		Log.v(LOG_TAG, "Pressed color changed to: " + getButtonColorPressed());
-	}
-
-	/**
-	 * Checks whether <b>Action Button</b> has shadow by determining shadow radius
-	 * <p>
-	 * Shadow is disabled if elevation is set API level is {@code 21 Lollipop} and higher     
-	 *  
-	 * @return true if <b>Action Button</b> has radius, otherwise false
-	 */
-	public boolean hasShadow() {
-		return !hasElevation() && getShadowRadius() > 0.0f;
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> shadow radius in actual 
-	 * pixels (px)
-	 *  
-	 * @return <b>Action Button</b> shadow radius in actual pixels (px)
-	 */
-	public float getShadowRadius() {
-		return shadowRadius;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> shadow radius and 
-	 * invalidates the layout of the view
-	 * <p>
-	 * Must be specified in density-independent (dp) pixels, which are
-	 * then converted into actual pixels (px). If shadow radius is set to 0, 
-	 * shadow is removed
-	 *
-	 * @param shadowRadius shadow radius specified in density-independent 
-	 *                     (dp) pixels
-	 */
-	public void setShadowRadius(float shadowRadius) {
-		this.shadowRadius = MetricsConverter.dpToPx(getContext(), shadowRadius);
-		requestLayout();
-		Log.v(LOG_TAG, "Shadow radius changed to:" + getShadowRadius());
-	}
-
-	/**
-	 * Removes the <b>Action Button</b> shadow by setting its radius to 0
-	 */
-	public void removeShadow() {
-		if (hasShadow()) {
-			setShadowRadius(0.0f);
-		}
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> shadow X-axis offset 
-	 * in actual pixels (px)
-	 * <p>
-	 * If X-axis offset is greater than 0 shadow is shifted right. 
-	 * If X-axis offset is lesser than 0 shadow is shifted left.
-	 * 0 X-axis offset means that shadow is not X-axis shifted at all
-	 *  
-	 * @return <b>Action Button</b> shadow X-axis offset 
-	 * in actual pixels (px)
-	 */
-	public float getShadowXOffset() {
-		return shadowXOffset;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> shadow X-axis offset and 
-	 * invalidates the layout of the view
-	 * <p>
-	 * If X-axis offset is greater than 0 shadow is shifted right. 
-	 * If X-axis offset is lesser than 0 shadow is shifted left.
-	 * 0 X-axis offset means that shadow is not shifted at all
-	 * <p>
-	 * Must be specified in density-independent (dp) pixels, which are
-	 * then converted into actual pixels (px)
-	 *      
-	 * @param shadowXOffset shadow X-axis offset specified in density-independent
-	 *                      (dp) pixels                         
-	 */
-	public void setShadowXOffset(float shadowXOffset) {
-		this.shadowXOffset = MetricsConverter.dpToPx(getContext(), shadowXOffset);
-		requestLayout();
-		Log.v(LOG_TAG, "Shadow X offset changed to: " + getShadowXOffset());
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> shadow Y-axis offset 
-	 * in actual pixels (px)
-	 * <p>
-	 * If Y-axis offset is greater than 0 shadow is shifted down.
-	 * If Y-axis offset is lesser than 0 shadow is shifted up.
-	 * 0 Y-axis offset means that shadow is not Y-axis shifted at all
-	 *  
-	 * @return <b>Action Button</b> shadow Y-axis offset 
-	 * in actual pixels (px)
-	 */
-	public float getShadowYOffset() {
-		return shadowYOffset;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> shadow Y-axis offset and
-	 * invalidates the layout of the view
-	 * <p>
-	 * If Y-axis offset is greater than 0 shadow is shifted down.
-	 * If Y-axis offset is lesser than 0 shadow is shifted up.
-	 * 0 Y-axis offset means that shadow is not Y-axis shifted at all
-	 * <p>
-	 * Must be specified in density-independent (dp) pixels, which are
-	 * then converted into actual pixels (px)
-	 *  
-	 * @param shadowYOffset shadow Y-axis offset specified in density-independent
-	 *                      (dp) pixels                         
-	 */
-	public void setShadowYOffset(float shadowYOffset) {
-		this.shadowYOffset = MetricsConverter.dpToPx(getContext(), shadowYOffset);
-		requestLayout();
-		Log.v(LOG_TAG, "Shadow Y offset changed to:" + getShadowYOffset());
-	}
-
-	/**
-	 * Returns <b>Action Button</b> shadow color
-	 *  
-	 * @return <b>Action Button</b> shadow color
-	 */
-	public int getShadowColor() {
-		return shadowColor;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> shadow color and
-	 * invalidates the view
-	 *  
-	 * @param shadowColor <b>Action Button</b> color
-	 */
-	public void setShadowColor(int shadowColor) {
-		this.shadowColor = shadowColor;
-		invalidate();
-		Log.v(LOG_TAG, "Shadow color changed to: " + getShadowColor());
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> stroke width in actual 
-	 * pixels (px)
-	 *  
-	 * @return <b>Action Button</b> stroke width in actual 
-	 * pixels (px)
-	 */
-	public float getStrokeWidth() {
-		return strokeWidth;
-	}
-
-	/**
-	 * Checks whether <b>Action Button</b> has stroke by checking 
-	 * stroke width
-	 *  
-	 * @return true if <b>Action Button</b> has stroke, otherwise false
-	 */
-	public boolean hasStroke() {
-		return getStrokeWidth() > 0.0f;		
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> stroke width and
-	 * invalidates the layout of the view
-	 * <p>
-	 * Stroke width value must be greater than 0. If stroke width is 
-	 * set to 0 stroke is removed     
-	 * <p>
-	 * Must be specified in density-independent (dp) pixels, which are
-	 * then converted into actual pixels (px)
-	 *  
-	 * @param strokeWidth stroke width specified in density-independent
-	 *                    (dp) pixels                       
-	 */
-	public void setStrokeWidth(float strokeWidth) {
-		this.strokeWidth = MetricsConverter.dpToPx(getContext(), strokeWidth);
-		requestLayout();
-		Log.v(LOG_TAG, "Stroke width changed to: " + getStrokeWidth());
-	}
-
-	/**
-	 * Removes the <b>Action Button</b> stroke by setting its width to 0 
-	 */
-	public void removeStroke() {
-		if (hasStroke()) {
-			setStrokeWidth(0.0f);
-		}
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> stroke color
-	 *
-	 * @return <b>Action Button</b> stroke color
-	 */
-	public int getStrokeColor() {
-		return strokeColor;
-	}
-
-	/**
-	 * Sets the <b>Action Button</b> stroke color and 
-	 * invalidates the view
-	 *  
-	 * @param strokeColor <b>Action Button</b> stroke color
-	 */
-	public void setStrokeColor(int strokeColor) {
-		this.strokeColor = strokeColor;
-		invalidate();
-		Log.v(LOG_TAG, "Stroke color changed to: " + getStrokeColor());
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> image drawable centered 
-	 * inside the view
-	 *  
-	 * @return <b>Action Button</b> image drawable centered 
-	 * inside the view
-	 */
-	public Drawable getImage() {
-		return image;
-	}
-
-	/**
-	 * Checks whether <b>Action Button</b> has an image centered 
-	 * inside the view
-	 *  
-	 * @return true if <b>Action Button</b> has an image centered 
-	 * inside the view, otherwise false 
-	 */
-	public boolean hasImage() {
-		return getImage() != null;
-	}
-
-	/**
-	 * Places the image drawable centered inside the view and
-	 * invalidates the view 
-	 * <p>
-	 * Size of the image while drawing is fit to {@link #imageSize}     
-	 *     
-	 * @param image image drawable, which will be placed centered 
-	 *              inside the view                 
-	 */
-	public void setImageDrawable(Drawable image) {
-		this.image = image;
-		invalidate();
-		Log.v(LOG_TAG, "Image drawable set");
-	}
-
-	/**
-	 * Resolves the drawable resource id and places the resolved image drawable
-	 * centered inside the view
-	 * 
-	 * @param resId drawable resource id, which is to be resolved to 
-	 *              image drawable and used as parameter when calling
-	 *              {@link #setImageDrawable(android.graphics.drawable.Drawable)}              
-	 */
-	@SuppressWarnings("deprecation")
-	public void setImageResource(int resId) {
-		setImageDrawable(getResources().getDrawable(resId));
-	}
-
-	/**
-	 * Creates the {@link android.graphics.drawable.BitmapDrawable} from the given
-	 * {@link android.graphics.Bitmap} and places it centered inside the view 
-	 *  
-	 * @param bitmap bitmap, from which {@link android.graphics.drawable.BitmapDrawable}
-	 *               is created and used as parameter when calling
-	 *               {@link #setImageDrawable(android.graphics.drawable.Drawable)}               
-	 */
-	public void setImageBitmap(Bitmap bitmap) {
-		setImageDrawable(new BitmapDrawable(getResources(), bitmap));
-	}
-
-	/**
-	 * Removes the <b>Action Button</b> image by setting its value to null 
-	 */
-	public void removeImage() {
-		if (hasImage()) {
-			setImageDrawable(null);
-		}
-	}
-
-	/**
-	 * Returns the <b>Action Button</b> image size in actual pixels (px).
-	 * If <b>Action Button</b> image is not set returns 0 
-	 *   
-	 * @return <b>Action Button</b> image size in actual pixels (px), 
-	 * 0 if image is not set
-	 */
-	public float getImageSize() {
-		return getImage() != null ? imageSize : 0.0f;
-	}
-
-	/**
-	 * Sets the size of the <b>Action Button</b> image
-	 * <p>
-	 * Changing the default size of the image breaks the rules of 
-	 * <a href="http://www.google.com/design/spec/components/buttons.html">Material Design</a>
-	 * <p>
-	 * Must be specified in density-independent (dp) pixels, which are
-	 * then converted into actual pixels (px)     
-	 *
-	 * @param size size of the <b>Action Button</b> image
-	 *             specified in density-independent (dp) pixels                
-	 */
-	public void setImageSize(float size) {
-		this.imageSize = MetricsConverter.dpToPx(getContext(), size);
-		Log.v(LOG_TAG, "Image size changed to: " + getImageSize());
-	}
-
-	/**
-	 * Returns an animation, which is used while showing <b>Action Button</b>
-	 *
-	 * @return animation, which is used while showing <b>Action Button</b>
-	 */
-	public Animation getShowAnimation() {
-		return showAnimation;
-	}
-
-	/**
-	 * Sets the animation, which is used while showing <b>Action Button</b>
-	 *
-	 * @param animation animation, which is to be used while showing 
-	 *                  <b>Action Button</b>
-	 */
-	public void setShowAnimation(Animation animation) {
-		this.showAnimation = animation;
-		Log.v(LOG_TAG, "Show animation set");
-	}
-
-	/**
-	 * Sets one of the {@link Animations} as animation, which is used while showing
-	 * <b>Action Button</b>
-	 *
-	 * @param animation one of the {@link Animations}, which is to be used while
-	 *                  showing <b>Action Button</b>                     
-	 */
-	public void setShowAnimation(Animations animation) {
-		setShowAnimation(Animations.load(getContext(), animation.animResId));
-	}
-
-	/**
-	 * Removes the animation, which is used while showing <b>Action Button</b> 
-	 */
-	public void removeShowAnimation() {
-		setShowAnimation(Animations.NONE);
-		Log.v(LOG_TAG, "Show animation removed");
-	}
-
-	/**
-	 * Returns an animation, which is used while hiding <b>Action Button</b>
-	 *
-	 * @return animation, which is used while hiding <b>Action Button</b>
-	 */
-	public Animation getHideAnimation() {
-		return hideAnimation;
-	}
-
-	/**
-	 * Sets the animation, which is used while hiding <b>Action Button</b>
-	 *
-	 * @param animation animation, which is to be used while hiding 
-	 *                  <b>Action Button</b>
-	 */
-	public void setHideAnimation(Animation animation) {
-		this.hideAnimation = animation;
-		Log.v(LOG_TAG, "Hide animation set");
-	}
-
-	/**
-	 * Sets one of the {@link Animations} as animation, which is used while hiding
-	 * <b>Action Button</b>
-	 *
-	 * @param animation one of the {@link Animations}, which is to be used while
-	 *                  hiding <b>Action Button</b>                     
-	 */
-	public void setHideAnimation(Animations animation) {
-		setHideAnimation(Animations.load(getContext(), animation.animResId));
-	}
-	
-	public void removeHideAnimation() {
-		setHideAnimation(Animations.NONE);
-		Log.v(LOG_TAG, "Hide animation removed");
-	}
-	
-	/**
-	 * Adds additional actions on motion events:
-	 * 1. Changes the <b>Action Button</b> {@link #state} to {@link State#PRESSED}
-	 *    on {@link android.view.MotionEvent#ACTION_DOWN}
-	 * 2. Changes the <b>Action Button</b> {@link #state} to {@link State#NORMAL}
-	 *    on {@link android.view.MotionEvent#ACTION_UP}
-	 *        
-	 * @param event motion event
-	 * @return true if event was handled, otherwise false
-	 */
-	@SuppressWarnings("all")
-	@SuppressLint("ClickableViewAccessibility")
-	@Override
-	public boolean onTouchEvent(MotionEvent event) {
-		super.onTouchEvent(event);
-		final int action = event.getAction();
-		switch (action) {
-			case MotionEvent.ACTION_DOWN:
-				Log.v(LOG_TAG, "Motion event action down detected");
-				setState(State.PRESSED);
-				return true;
-			case MotionEvent.ACTION_UP:
-				Log.v(LOG_TAG, "Motion event action up detected");
-				setState(State.NORMAL);
-				return true;
-			default:
-				Log.v(LOG_TAG, "Unrecognized motion event detected");
-				return false;
-		}
-	}
-
-	/**
-	 * Adds additional checking whether animation is null before starting to play it
-	 *  
-	 * @param animation animation to play
-	 */
-	@SuppressWarnings("all")
-	@Override
-	public void startAnimation(Animation animation) {
-		if (animation != null) {
-			super.startAnimation(animation);
-		}
-	}
-
-	/**
-	 * Resets the paint to its default values and sets initial flags to it
-	 * <p>
-	 * Use this method before drawing the new element of the view     
-	 */
-	protected final void resetPaint() {
-		paint.reset();
-		paint.setFlags(Paint.ANTI_ALIAS_FLAG);
-		Log.v(LOG_TAG, "Paint reset");
-	}
-
-	/**
-	 * Draws the elements of the <b>Action Button</b>
-	 *  
-	 * @param canvas canvas, on which the drawing is to be performed
-	 */
-	@SuppressWarnings("all")
-	@Override
-	protected void onDraw(Canvas canvas) {
-		super.onDraw(canvas);
-		Log.v(LOG_TAG, "Action Button onDraw called");
-		drawCircle(canvas);
-		if (hasElevation()) {
-			drawElevation();
-		}
-		if (hasStroke()) {
-			drawStroke(canvas);
-		}
-		if (hasImage()) {
-			drawImage(canvas);
-		}
-	}
-
-	/**
-	 * Draws the main circle of the <b>Action Button</b> and calls
-	 * {@link #drawShadow()} to draw the shadow if present
-	 *  
-	 * @param canvas canvas, on which circle is to be drawn
-	 */
-	protected void drawCircle(Canvas canvas) {
-		resetPaint();
-		if (hasShadow()) {
-			drawShadow();
-		}
-		paint.setStyle(Paint.Style.FILL);
-		paint.setColor(getState() == State.PRESSED ? getButtonColorPressed() : getButtonColor());
-		canvas.drawCircle(calculateCenterX(), calculateCenterY(), calculateCircleRadius(), paint);
-		Log.v(LOG_TAG, "Circle drawn");
-	}
-
-	/**
-	 * Calculates the X-axis center coordinate of the entire view
-	 *
-	 * @return X-axis center coordinate of the entire view
-	 */
-	protected float calculateCenterX() {
-		final float centerX = getMeasuredWidth() / 2;
-		Log.v(LOG_TAG, "Calculated center X = " + centerX);
-		return centerX;
-	}
-
-	/**
-	 * Calculates the Y-axis center coordinate of the entire view
-	 *
-	 * @return Y-axis center coordinate of the entire view
-	 */
-	protected float calculateCenterY() {
-		final float centerY = getMeasuredHeight() / 2;
-		Log.v(LOG_TAG, "Calculated center Y = " + centerY);
-		return centerY;
-	}
-
-	/**
-	 * Calculates the radius of the main circle
-	 *
-	 * @return radius of the main circle
-	 */
-	protected final float calculateCircleRadius() {
-		final float circleRadius = getButtonSize() / 2;
-		Log.v(LOG_TAG, "Calculated circle circleRadius = " + circleRadius);
-		return circleRadius;
-	}	
-
-	/**
-	 * Draws the shadow if view elevation is not enabled
-	 */
-	protected void drawShadow() {
-		paint.setShadowLayer(getShadowRadius(), getShadowXOffset(), getShadowYOffset(), getShadowColor());
-		Log.v(LOG_TAG, "Shadow drawn");
-	}
-	
-	/**
-	 * Draws the elevation around the main circle
-	 * <p>
-	 * Uses the stroke corrective, which helps to avoid the elevation overlapping issue     
-	 */
-	@TargetApi(Build.VERSION_CODES.LOLLIPOP)
-	protected void drawElevation() {
-		final int strokeWeightCorrective = (int) (getStrokeWidth() / 1.5f);
-		final int width = getWidth() - strokeWeightCorrective;
-		final int height = getHeight() - strokeWeightCorrective;
-		final ViewOutlineProvider outlineProvider = new ActionButtonOutlineProvider(width, height);
-		setOutlineProvider(outlineProvider);
-		Log.v(LOG_TAG, "Elevation drawn");
-	}
-
-	/**
-	 * Checks whether view elevation is enabled
-	 *  
-	 * @return true if view elevation enabled, otherwise false
-	 */
-	@TargetApi(Build.VERSION_CODES.LOLLIPOP)
-	private boolean hasElevation() {
-		return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && getElevation() > 0.0f;
-	}
-
-	/**
-	 * Draws stroke around the main circle
-	 *
-	 * @param canvas canvas, on which circle is to be drawn
-	 */
-	protected void drawStroke(Canvas canvas) {
-		resetPaint();
-		paint.setStyle(Paint.Style.STROKE);
-		paint.setStrokeWidth(getStrokeWidth());
-		paint.setColor(getStrokeColor());
-		canvas.drawCircle(calculateCenterX(), calculateCenterY(), calculateCircleRadius(), paint);
-		Log.v(LOG_TAG, "Stroke drawn");
-	}
-
-	/**
-	 * Draws the image centered inside the view
-	 *
-	 * @param canvas canvas, on which circle is to be drawn
-	 */
-	protected void drawImage(Canvas canvas) {
-		final int startPointX = (int) (calculateCenterX() - getImageSize() / 2);
-		final int startPointY = (int) (calculateCenterY() - getImageSize() / 2);
-		final int endPointX = (int) (startPointX + getImageSize());
-		final int endPointY = (int) (startPointY + getImageSize());
-		getImage().setBounds(startPointX, startPointY, endPointX, endPointY);
-		getImage().draw(canvas);
-		Log.v(LOG_TAG, String.format("Image drawn on canvas with coordinates: startPointX = %s, startPointY = %s, " +
-				"endPointX = %s, endPointY = %s", startPointX, startPointY, endPointX, endPointY));
-	}
-
-	/**
-	 * Sets the measured dimension for the entire view
-	 *
-	 * @param widthMeasureSpec horizontal space requirements as imposed by the parent.
-	 *                         The requirements are encoded with
-	 *                         {@link android.view.View.MeasureSpec}
-	 * @param heightMeasureSpec vertical space requirements as imposed by the parent.
-	 *                         The requirements are encoded with
-	 *                         {@link android.view.View.MeasureSpec}
-	 */
-	@Override
-	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-		Log.v(LOG_TAG, "Action Button onMeasure called");
-		setMeasuredDimension(calculateMeasuredWidth(), calculateMeasuredHeight());
-		Log.v(LOG_TAG, String.format("View size measured with: height = %s, width = %s", getHeight(), getWidth()));
-	}
-
-	/**
-	 * Calculates the measured width in actual pixels for the entire view
-	 *  
-	 * @return measured width in actual pixels for the entire view
-	 */
-	private int calculateMeasuredWidth() {
-		final int measuredWidth = getButtonSize() + calculateShadowWidth() + calculateStrokeWeight();
-		Log.v(LOG_TAG, "Calculated measured width = " + measuredWidth);
-		return measuredWidth;
-	}
-
-	/**
-	 * Calculates the measured height in actual pixels for the entire view
-	 *  
-	 * @return measured width in actual pixels for the entire view
-	 */
-	private int calculateMeasuredHeight() {
-		final int measuredHeight = getButtonSize() + calculateShadowHeight() + calculateStrokeWeight();
-		Log.v(LOG_TAG, "Calculated measured height = " + measuredHeight);
-		return measuredHeight;
-	}
-
-	/**
-	 * Calculates shadow width in actual pixels
-	 *  
-	 * @return shadow width in actual pixels
-	 */
-	private int calculateShadowWidth() {
-		final int shadowWidth = hasShadow() ? (int) ((getShadowRadius() + Math.abs(getShadowXOffset())) * 2) : 0;
-		Log.v(LOG_TAG, "Calculated shadow width = " + shadowWidth);
-		return shadowWidth;
-	}
-
-	/**
-	 * Calculates shadow height in actual pixels
-	 *  
-	 * @return shadow height in actual pixels
-	 */
-	private int calculateShadowHeight() {
-		final int shadowHeight = hasShadow() ? (int) ((getShadowRadius() + Math.abs(getShadowYOffset())) * 2) : 0;
-		Log.v(LOG_TAG, "Calculated shadow height = " + shadowHeight);
-		return shadowHeight;
-	}
-
-	/**
-	 * Calculates the stroke weight in actual pixels
-	 * *
-	 * @return stroke weight in actual pixels
-	 */
-	private int calculateStrokeWeight() {
-		final int strokeWeight = (int) (getStrokeWidth() * 2.0f);
-		Log.v(LOG_TAG, "Calculated stroke weight is: " + strokeWeight);
-		return strokeWeight;
-	}
-
-	/**
-	 * Determines the <b>Action Button</b> types 
-	 */
-	public enum Type {
-
-		/**
-		 * <b>Action Button</b> default (56dp) type
-		 */
-		DEFAULT {
-			@Override
-			int getId() {
-				return 0;
-			}
-		
-			@Override
-			float getSize(Context context) {
-				return MetricsConverter.dpToPx(context, 56.0f);
-			}
-		},
-
-		/**
-		 * <b>Action Button</b> mini (40dp) type 
-		 */
-		MINI {
-			@Override
-			int getId() {
-				return 1;
-			}
-
-			@Override
-			float getSize(Context context) {
-				return MetricsConverter.dpToPx(context, 40.0f);
-			}
-		};
-
-		/**
-		 * Returns an {@code id} for specific <b>Action Button</b> 
-		 * type, which is defined in attributes  
-		 *  
-		 * @return {@code id} for particular <b>Action Button</b> type,
-		 * which is defined in attributes 
-		 */
-		abstract int getId();
-
-		/**
-		 * Returns the size of the specific type of the <b>Action Button</b>
-		 *
-		 * @param context context the view is running in
-		 * @return size of the particular type of the <b>Action Button</b>
-		 */
-		abstract float getSize(Context context);
-
-		/**
-		 * Returns the <b>Action Button</b> type for a specific {@code id}
-		 *  
-		 * @param id an {@code id}, for which <b>Action Button</b> type required
-		 * @return <b>Action Button</b> type
-		 */
-		static Type forId(int id) {
-			for (Type type : values()) {
-				if (type.getId() == id) {
-					return type;
-				}
-			}
-			return DEFAULT;
-		}
-		
-	}
-
-	/**
-	 * Determines the <b>Action Button</b> states 
-	 */
-	public enum State {
-
-		/**
-		 * <b>Action Button</b> normal state  
-		 */
-		NORMAL,
-
-		/**
-		 * <b>Action Button</b> pressed state 
-		 */
-		PRESSED
-		
-	}
-	
-	public enum Animations {
-
-		/**
-		 * None. Animation absent 
-		 */
-		NONE                (0),
-
-		/**
-		 * Fade in animation 
-		 */
-		FADE_IN             (R.anim.mmt_fade_in),
-
-		/**
-		 * Fade out animation 
-		 */
-		FADE_OUT            (R.anim.mmt_fade_out),
-
-		/**
-		 * Scale up animation 
-		 */
-		SCALE_UP            (R.anim.mmt_scale_up),
-
-		/**
-		 * Scale down animation 
-		 */
-		SCALE_DOWN          (R.anim.mmt_scale_down),
-
-		/**
-		 * Roll from down animation 
-		 */
-		ROLL_FROM_DOWN      (R.anim.mmt_roll_from_down),
-
-		/**
-		 * Roll to down animation 
-		 */
-		ROLL_TO_DOWN        (R.anim.mmt_roll_to_down),
-
-		/**
-		 * Roll from right animation 
-		 */
-		ROLL_FROM_RIGHT     (R.anim.mmt_roll_from_right),
-
-		/**
-		 * Roll to right animation 
-		 */
-		ROLL_TO_RIGHT       (R.anim.mmt_roll_to_right),
-
-		/**
-		 * Jump from down animation 
-		 */
-		JUMP_FROM_DOWN      (R.anim.mmt_jump_from_down),
-
-		/**
-		 * Jump to down animation 
-		 */
-		JUMP_TO_DOWN        (R.anim.mmt_jump_to_down),
-
-		/**
-		 * Jump from right animation 
-		 */
-		JUMP_FROM_RIGHT     (R.anim.mmt_jump_from_right),
-
-		/**
-		 * Jump to right animation 
-		 */
-		JUMP_TO_RIGHT       (R.anim.mmt_jump_to_right);
-
-		/**
-		 * Correspondent animation resource id 
-		 */
-		final int animResId;
-		
-		private Animations(int animResId) {
-			this.animResId = animResId;
-		}
-
-		/**
-		 * Loads an animation from animation resource id
-		 *
-		 * @param context context the view is running in
-		 * @param animResId resource id of the animation, which is to be loaded
-		 * @return loaded animation
-		 */
-		protected static Animation load(Context context, int animResId) {
-			return animResId == NONE.animResId ? null : AnimationUtils.loadAnimation(context, animResId);
-		}
-
-	}
-
-}
diff --git a/qDict/src/main/java/com/annie/dictionary/BaseActivity.java b/qDict/src/main/java/com/annie/dictionary/BaseActivity.java
index adc67c3..45d2808 100644
--- a/qDict/src/main/java/com/annie/dictionary/BaseActivity.java
+++ b/qDict/src/main/java/com/annie/dictionary/BaseActivity.java
@@ -9,15 +9,16 @@ import android.content.res.Configuration;
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.Settings;
-import android.support.annotation.NonNull;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentTransaction;
 import android.text.TextUtils;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
+
 import com.annie.dictionary.frags.ListDictFragment;
 import com.annie.dictionary.frags.NavigatorFragment;
 import com.annie.dictionary.utils.Utils;
@@ -43,13 +44,7 @@ public abstract class BaseActivity extends SlidingFragmentActivity {
     protected SharedPreferences mSharedPreferences;
     protected int mThemeIndex;
     String mCurrentLanguage;
-    OnClosedListener mOnClosedListener = new OnClosedListener() {
-
-        @Override
-        public void onClosed() {
-            onMenuClose();
-        }
-    };
+    OnClosedListener mOnClosedListener = () -> onMenuClose();
 
     public void checkPermission(int requestCode) {
         switch (requestCode) {
@@ -121,7 +116,7 @@ public abstract class BaseActivity extends SlidingFragmentActivity {
         boolean headerShow;
         try {
             headerShow = getResources().getBoolean(R.bool.header_menu_visiable);
-        }catch (Exception e){
+        } catch (Exception e) {
             headerShow = false;
         }
         findViewById(R.id.img_header).setVisibility(headerShow ? View.VISIBLE : View.GONE);
diff --git a/qDict/src/main/java/com/annie/dictionary/DictSpeechEng.java b/qDict/src/main/java/com/annie/dictionary/DictSpeechEng.java
index ffc7263..5c4dfd9 100644
--- a/qDict/src/main/java/com/annie/dictionary/DictSpeechEng.java
+++ b/qDict/src/main/java/com/annie/dictionary/DictSpeechEng.java
@@ -8,7 +8,7 @@ import java.util.Locale;
 
 public class DictSpeechEng {
     private static DictSpeechEng mSpeechEng;
-    private TextToSpeech mTts = null;
+    private TextToSpeech mTts;
     private boolean mCanSpeak = false;
 
     private DictSpeechEng(Context context) {
@@ -59,15 +59,12 @@ public class DictSpeechEng {
     class TtsInitListener implements TextToSpeech.OnInitListener {
         @Override
         public void onInit(final int status) {
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    if (status == TextToSpeech.SUCCESS && mTts.setLanguage(Locale.US) == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) {
-                        mCanSpeak = true;
-                    } else {
-                        // Initialization failed.
-                        mCanSpeak = false;
-                    }
+            new Thread(() -> {
+                if (status == TextToSpeech.SUCCESS && mTts.setLanguage(Locale.US) == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) {
+                    mCanSpeak = true;
+                } else {
+                    // Initialization failed.
+                    mCanSpeak = false;
                 }
             }).start();
 
diff --git a/qDict/src/main/java/com/annie/dictionary/DictWebViewClient.java b/qDict/src/main/java/com/annie/dictionary/DictWebViewClient.java
index c7b0099..9c03716 100644
--- a/qDict/src/main/java/com/annie/dictionary/DictWebViewClient.java
+++ b/qDict/src/main/java/com/annie/dictionary/DictWebViewClient.java
@@ -13,7 +13,7 @@ import com.mmt.widget.M2tToast;
 
 public class DictWebViewClient extends WebViewClient {
 
-    private WebViewClientCallback mCallback = null;
+    private WebViewClientCallback mCallback;
 
     private Context mContext;
 
diff --git a/qDict/src/main/java/com/annie/dictionary/MainActivity.java b/qDict/src/main/java/com/annie/dictionary/MainActivity.java
index ef84379..2794315 100644
--- a/qDict/src/main/java/com/annie/dictionary/MainActivity.java
+++ b/qDict/src/main/java/com/annie/dictionary/MainActivity.java
@@ -1,6 +1,5 @@
 package com.annie.dictionary;
 
-import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.Dialog;
 import android.app.ProgressDialog;
@@ -11,18 +10,13 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.graphics.Canvas;
 import android.graphics.Typeface;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Message;
 import android.os.SystemClock;
 import android.speech.RecognizerIntent;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v7.widget.Toolbar;
 import android.text.Editable;
 import android.text.Selection;
 import android.text.TextUtils;
@@ -34,15 +28,19 @@ import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.EditText;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.LinearLayout.LayoutParams;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.widget.AppCompatEditText;
+import androidx.appcompat.widget.Toolbar;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+
 import com.annie.dictionary.frags.ListDictFragment;
 import com.annie.dictionary.frags.NavigatorFragment.NavigationCallbacks;
 import com.annie.dictionary.frags.RecentFragment;
@@ -88,13 +86,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
     String tempKeyword;
     int tempPos;
     boolean onNavig = false;
-    private CanvasTransformer mTransformer = new CanvasTransformer() {
-
-        @Override
-        public void transformCanvas(Canvas canvas, float percentOpen) {
-            canvas.scale(percentOpen, 1, 0, 0);
-        }
-    };
+    private CanvasTransformer mTransformer = (canvas, percentOpen) -> canvas.scale(percentOpen, 1, 0, 0);
     // UI
     private SlidingUpPanelLayout mLayout;
     // dict
@@ -152,21 +144,17 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
     }
 
     public void initClipboard() {
-        if (Utils.hasHcAbove()) {
-            if (mClipboardManager == null) {
-                mClipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
-                mClipboardManager.addPrimaryClipChangedListener(mClipboardListener);
-            }
+        if (mClipboardManager == null) {
+            mClipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
+            mClipboardManager.addPrimaryClipChangedListener(mClipboardListener);
         }
     }
 
     public void releaseClipboard() {
-        if (Utils.hasHcAbove()) {
-            if (mClipboardManager != null) {
-                mClipboardManager.removePrimaryClipChangedListener(mClipboardListener);
-            }
-            mClipboardManager = null;
+        if (mClipboardManager != null) {
+            mClipboardManager.removePrimaryClipChangedListener(mClipboardListener);
         }
+        mClipboardManager = null;
     }
 
     private void clipboardCheck() {
@@ -202,8 +190,11 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
         mToolbar = (Toolbar) findViewById(R.id.main_toolbar);
         mToolbar.setTitle(null);
         setSupportActionBar(mToolbar);
-        getSupportActionBar().setDefaultDisplayHomeAsUpEnabled(true);
-        getSupportActionBar().setHomeButtonEnabled(true);
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setDefaultDisplayHomeAsUpEnabled(true);
+            actionBar.setHomeButtonEnabled(true);
+        }
         mLayout = (SlidingUpPanelLayout) findViewById(R.id.sliding_layout);
         mLayout.setPanelState(PanelState.HIDDEN);
         mLayout.setTouchEnabled(false);
@@ -246,30 +237,21 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
         mShowKeyboardHander = new Handler();
         mProgressCBHandler = new Handler() {
             @Override
-            public void handleMessage(Message msg) {
+            public void handleMessage(@NonNull Message msg) {
                 int progress = msg.arg1;
                 if (null != mProgressDialog)
                     mProgressDialog.setProgress(progress);
             }
         };
-        mShowKeyboarRunable = new Runnable() {
-            @Override
-            public void run() {
-                mDictKeywordView.requestFocus();
-                mDictKeywordView.dispatchTouchEvent(MotionEvent.obtain(SystemClock.uptimeMillis(),
-                        SystemClock.uptimeMillis(), MotionEvent.ACTION_DOWN, 0, 0, 0));
-                mDictKeywordView.dispatchTouchEvent(MotionEvent.obtain(SystemClock.uptimeMillis(),
-                        SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, 0, 0, 0));
-            }
+        mShowKeyboarRunable = () -> {
+            mDictKeywordView.requestFocus();
+            mDictKeywordView.dispatchTouchEvent(MotionEvent.obtain(SystemClock.uptimeMillis(),
+                    SystemClock.uptimeMillis(), MotionEvent.ACTION_DOWN, 0, 0, 0));
+            mDictKeywordView.dispatchTouchEvent(MotionEvent.obtain(SystemClock.uptimeMillis(),
+                    SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, 0, 0, 0));
         };
-        if (Utils.hasHcAbove()){
-            mClipboardListener = new OnPrimaryClipChangedListener() {
-                public void onPrimaryClipChanged() {
-                    clipboardCheck();
-                }
-            };
+        mClipboardListener = this::clipboardCheck;
 
-        }
         startService();
         registerReceiver(mUIReceiver, new IntentFilter(ACTION_UPDATE_UI));
     }
@@ -291,12 +273,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
             if (!QDictService.RUNNING)
                 startService(i);
             if (!isSucess) {
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        Toast.makeText(MainActivity.this, R.string.msg_do_not_show_popup, Toast.LENGTH_SHORT).show();
-                    }
-                });
+                runOnUiThread(() -> Toast.makeText(MainActivity.this, R.string.msg_do_not_show_popup, Toast.LENGTH_SHORT).show());
             }
         }
     }
@@ -325,36 +302,27 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
         mDictKeywordsPopupList.setFocusable(true);
         mDictKeywordsPopupList.setFocusableInTouchMode(true);
         mDictKeywordsPopupList.setListSelectionHidden(false);
-        mDictKeywordsPopupList.setOnItemClickListener(new OnItemClickListener() {
-
-            @Override
-            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
-
-                TextView textView = (TextView) v;
-                String keyword = textView.getText().toString();
-
-                mReplaceKeyword = true; // Don't response the
-                // onTextChanged event this
-                // time.
-
-                mDictKeywordView.setText(keyword);
-                mInfoSearch.setVisibility(View.GONE);
-                mActionWordsList.setVisibility(View.GONE);
-                mInfoSearch.setText(null);
-                // make sure we keep the caret at the end of the text
-                // view
-                Editable spannable = mDictKeywordView.getText();
-                Selection.setSelection(spannable, spannable.length());
-                showSearchContent();
-            }
+        mDictKeywordsPopupList.setOnItemClickListener((parent, v, position, id) -> {
+
+            TextView textView = (TextView) v;
+            String keyword = textView.getText().toString();
+
+            mReplaceKeyword = true; // Don't response the
+            // onTextChanged event this
+            // time.
+
+            mDictKeywordView.setText(keyword);
+            mInfoSearch.setVisibility(View.GONE);
+            mActionWordsList.setVisibility(View.GONE);
+            mInfoSearch.setText(null);
+            // make sure we keep the caret at the end of the text
+            // view
+            Editable spannable = mDictKeywordView.getText();
+            Selection.setSelection(spannable, spannable.length());
+            showSearchContent();
         });
         mPopupWordsListHandler = new Handler();
-        mPopupWordsListRunnable = new Runnable() {
-            @Override
-            public void run() {
-                startKeywordsList();
-            }
-        };
+        mPopupWordsListRunnable = this::startKeywordsList;
 
     }
 
@@ -402,12 +370,9 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
         mProgressDialog.setMessage(getResources().getString(R.string.keywords_search));
         mProgressDialog.setCancelable(false);
         mProgressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, getResources().getString(R.string.cancel),
-                new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int i) {
-                        mDictions.cancelLookup();
-                        dialog.cancel();
-                    }
+                (dialog, i) -> {
+                    mDictions.cancelLookup();
+                    dialog.cancel();
                 });
         mProgressDialog.show();
     }
@@ -440,11 +405,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
             if (LIST_WORDS_NORMAL != listType)
                 showProgressDialog();
             ListWordsTask mListWordsTask = new ListWordsTask(listType);
-            if (Build.VERSION.SDK_INT > 10)
-                mListWordsTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, keyword);
-            else {
-                mListWordsTask.execute(keyword);
-            }
+            mListWordsTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, keyword);
         }
     }
 
@@ -492,7 +453,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
         InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
         // check if no view has focus:
         View view = getCurrentFocus();
-        if (view != null) {
+        if (view != null && inputManager != null) {
             inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
         }
     }
@@ -624,12 +585,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
                 String keyword = results.get(0);
                 if (!TextUtils.isEmpty(keyword)) {
                     mDictKeywordView.setText(keyword);
-                    runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            showSearchContent();
-                        }
-                    });
+                    runOnUiThread(() -> showSearchContent());
 
                 }
             }
@@ -677,7 +633,7 @@ public class MainActivity extends BaseActivity implements NavigationCallbacks, O
     }
 
     // Extend classes.
-    private class DictEditTextView extends EditText {
+    private class DictEditTextView extends AppCompatEditText {
 
         int type = LIST_WORDS_NORMAL;
 
diff --git a/qDict/src/main/java/com/annie/dictionary/MyArrayAdapter.java b/qDict/src/main/java/com/annie/dictionary/MyArrayAdapter.java
index 18b8232..24acf54 100644
--- a/qDict/src/main/java/com/annie/dictionary/MyArrayAdapter.java
+++ b/qDict/src/main/java/com/annie/dictionary/MyArrayAdapter.java
@@ -9,6 +9,9 @@ import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
 
@@ -34,8 +37,9 @@ public class MyArrayAdapter extends ArrayAdapter<String> {
         return mObjects;
     }
 
+    @NonNull
     @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
+    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
         TextView view = (TextView) convertView;
         if (view == null) {
             view = (TextView) inflater.inflate(R.layout.simple_dropdown_item_1line_left, parent, false);
diff --git a/qDict/src/main/java/com/annie/dictionary/PathSelectActivity.java b/qDict/src/main/java/com/annie/dictionary/PathSelectActivity.java
index c4a1c38..59709fa 100644
--- a/qDict/src/main/java/com/annie/dictionary/PathSelectActivity.java
+++ b/qDict/src/main/java/com/annie/dictionary/PathSelectActivity.java
@@ -7,7 +7,6 @@ import android.graphics.drawable.Drawable;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.AdapterView.OnItemClickListener;
@@ -67,39 +66,32 @@ public class PathSelectActivity extends ActionBarListActivity implements OnItemC
             mSelectType = SELECT_TYPE_FOLDER;
         }
 
-        mDictPath = (TextView) findViewById(R.id.dictPath);
-        QButton buttonConfirm = (QButton) findViewById(R.id.buttonConfirm);
+        mDictPath = findViewById(R.id.dictPath);
+        QButton buttonConfirm = findViewById(R.id.buttonConfirm);
         getListView().setOnItemClickListener(this);
-        buttonConfirm.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                String filePath;
-                if (SELECT_TYPE_FILE == mSelectType) {
-                    if (null == mFilePath) {
-                        finish();
-                        return;
-                    }
-                    filePath = mFilePath;
-                } else {
-                    filePath = curPath;
+        buttonConfirm.setOnClickListener(v -> {
+            String filePath;
+            if (SELECT_TYPE_FILE == mSelectType) {
+                if (null == mFilePath) {
+                    finish();
+                    return;
                 }
-
-                Intent intent = new Intent(SettingFragment.DATA_SOURCE_INTENT);
-                Bundle bundle = new Bundle();
-                bundle.putString("filePath", filePath);
-                intent.putExtras(bundle);
-                sendBroadcast(intent);
-                finish();
+                filePath = mFilePath;
+            } else {
+                filePath = curPath;
             }
-        });
 
-        QButton buttonCancle = (QButton) findViewById(R.id.buttonCancle);
-        buttonCancle.setOnClickListener(new OnClickListener() {
-
-            public void onClick(View v) {
-                finish();
-            }
+            Intent intent1 = new Intent(SettingFragment.DATA_SOURCE_INTENT);
+            Bundle bundle1 = new Bundle();
+            bundle1.putString("filePath", filePath);
+            intent1.putExtras(bundle1);
+            sendBroadcast(intent1);
+            finish();
         });
 
+        QButton buttonCancle = findViewById(R.id.buttonCancle);
+        buttonCancle.setOnClickListener(v -> finish());
+
         getFileDir(curPath);
     }
 
@@ -129,7 +121,7 @@ public class PathSelectActivity extends ActionBarListActivity implements OnItemC
             }
         }
 
-        if (f.exists()) {
+        if (f.exists() && files != null) {
             for (File file : files) {
                 if (file.canRead()) {
                     items.add(file.getName());
@@ -192,8 +184,8 @@ public class PathSelectActivity extends ActionBarListActivity implements OnItemC
             if (convertView == null) {
                 convertView = mInflater.inflate(R.layout.file_row, null);
                 holder = new ViewHolder();
-                holder.text = (TextView) convertView.findViewById(R.id.text);
-                holder.icon = (ImageView) convertView.findViewById(R.id.icon);
+                holder.text = convertView.findViewById(R.id.text);
+                holder.icon = convertView.findViewById(R.id.icon);
                 convertView.setTag(holder);
             } else {
                 holder = (ViewHolder) convertView.getTag();
diff --git a/qDict/src/main/java/com/annie/dictionary/QDictions.java b/qDict/src/main/java/com/annie/dictionary/QDictions.java
index 57327da..9963061 100644
--- a/qDict/src/main/java/com/annie/dictionary/QDictions.java
+++ b/qDict/src/main/java/com/annie/dictionary/QDictions.java
@@ -23,9 +23,9 @@ public class QDictions {
 
     String mEmptyList = "";
 
-    private WeakReference<Context> mContext = null;
+    private WeakReference<Context> mContext;
 
-    private QDictEng mQDictEng = null;
+    private QDictEng mQDictEng;
 
     private SharedPreferences mSharedPrefs;
 
@@ -196,6 +196,8 @@ public class QDictions {
 
         int k = 0;
         File[] files = f.listFiles();
+        if (files == null)
+            return;
         String dictFolders[] = new String[files.length];
         String dictNames[] = new String[files.length];
 
diff --git a/qDict/src/main/java/com/annie/dictionary/SettingsActivity.java b/qDict/src/main/java/com/annie/dictionary/SettingsActivity.java
index 62f333b..80e054b 100644
--- a/qDict/src/main/java/com/annie/dictionary/SettingsActivity.java
+++ b/qDict/src/main/java/com/annie/dictionary/SettingsActivity.java
@@ -4,19 +4,20 @@ import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.ActionBarActivity;
 import android.view.MenuItem;
 import android.view.Window;
 import android.view.WindowManager;
 
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
+
 import com.annie.dictionary.frags.SettingFragment;
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
 import com.mmt.app.SystemBarTintManager;
 
-public class SettingsActivity extends ActionBarActivity {
+public class SettingsActivity extends AppCompatActivity {
 
     protected Fragment mFrag;
 
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/BaseListFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/BaseListFragment.java
index 1f6582a..201dcd7 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/BaseListFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/BaseListFragment.java
@@ -1,12 +1,12 @@
 package com.annie.dictionary.frags;
 
 import android.os.Bundle;
-import android.support.v4.app.ListFragment;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.fragment.app.ListFragment;
+
 public abstract class BaseListFragment extends ListFragment {
     public boolean hasInitializedRootView = false;
 
@@ -16,19 +16,9 @@ public abstract class BaseListFragment extends ListFragment {
         if (rootView == null) {
             // Inflate the layout for this fragment
             rootView = inflater.inflate(layout, null);
-            Log.e("NAMND", "Create New View");
         } else {
-            // Do not inflate the layout again.
-            // The returned View of onCreateView will be added into the
-            // fragment.
-            // However it is not allowed to be added twice even if the parent is
-            // same.
-            // So we must remove rootView from the existing parent view group
-            // (it will be added back).
             ((ViewGroup) rootView.getParent()).removeView(rootView);
-            Log.e("NAMND", "No Create new View");
         }
-
         return rootView;
     }
 
@@ -39,10 +29,7 @@ public abstract class BaseListFragment extends ListFragment {
         if (!hasInitializedRootView) {
             hasInitializedRootView = true;
             // Do initial setup of UI
-            Log.e("NAMND", "doInitialSetUpOfUI");
             doInitialSetUpOfUI();
-        } else {
-            Log.e("NAMND", "No doInitialSetUpOfUI");
         }
     }
 
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/ListDictFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/ListDictFragment.java
index 18ad012..b51e6cc 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/ListDictFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/ListDictFragment.java
@@ -5,8 +5,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.ListFragment;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -20,6 +18,9 @@ import android.widget.ImageButton;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import androidx.annotation.Nullable;
+import androidx.fragment.app.ListFragment;
+
 import com.annie.dictionary.MainActivity;
 import com.annie.dictionary.QDictions;
 import com.annie.dictionary.R;
@@ -92,50 +93,38 @@ public class ListDictFragment extends ListFragment implements Def, OnItemClickLi
         View root = inflater.inflate(R.layout.layout_list_dict, container, false);
         SharedPreferences shares = getActivity().getSharedPreferences(Def.APP_NAME, Context.MODE_PRIVATE);
         mDictsPath = Utils.getRootDictFolder(shares) + Def.DICT_FOLDER;
-        mCheckBox = (CheckBox) root.findViewById(R.id.check_all);
-        mEmptyDictLayout = (RelativeLayout) root.findViewById(R.id.layout_empty);
-        mEmptyDictTv = (TextView) root.findViewById(R.id.tv_empty);
-        mDictCountTv = (TextView) root.findViewById(R.id.tv_dict_count);
-        Button gotoFTPServer = (Button) root.findViewById(R.id.goto_ftp_server);
-        gotoFTPServer.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent();
-                intent.setClassName("com.m2t.ftpserver", "com.m2t.ftpserver.FTPServerActivity");
-                intent.putExtra("stay_in_folder", mDictsPath);
-                if (getActivity().getPackageManager().resolveActivity(intent, 0) != null) {
-                    getActivity().startActivity(intent);
-                } else {
-                    try {
-                        Intent ftpIntent = Utils.goToFTPServer();
-                        getActivity().startActivity(ftpIntent);
-                    } catch (ActivityNotFoundException ex) {
-                        Intent ftpIntent = Utils.goToFTPServerLink();
-                        getActivity().startActivity(ftpIntent);
-                    }
+        mCheckBox = root.findViewById(R.id.check_all);
+        mEmptyDictLayout = root.findViewById(R.id.layout_empty);
+        mEmptyDictTv = root.findViewById(R.id.tv_empty);
+        mDictCountTv = root.findViewById(R.id.tv_dict_count);
+        Button gotoFTPServer = root.findViewById(R.id.goto_ftp_server);
+        gotoFTPServer.setOnClickListener(v -> {
+            Intent intent = new Intent();
+            intent.setClassName("com.m2t.ftpserver", "com.m2t.ftpserver.FTPServerActivity");
+            intent.putExtra("stay_in_folder", mDictsPath);
+            if (getActivity().getPackageManager().resolveActivity(intent, 0) != null) {
+                getActivity().startActivity(intent);
+            } else {
+                try {
+                    Intent ftpIntent = Utils.goToFTPServer();
+                    getActivity().startActivity(ftpIntent);
+                } catch (ActivityNotFoundException ex) {
+                    Intent ftpIntent = Utils.goToFTPServerLink();
+                    getActivity().startActivity(ftpIntent);
                 }
-
             }
-        });
-        mCheckBox.setOnClickListener(new View.OnClickListener() {
 
-            @Override
-            public void onClick(View v) {
-                mCheckBox.setChecked(mCheckBox.isChecked());
-                checked(mCheckBox.isChecked());
-                isCurrentCheckAll();
-            }
         });
-        ImageButton backBtn = (ImageButton) root.findViewById(R.id.action_back);
-        backBtn.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(MainActivity.ACTION_UPDATE_UI);
-                intent.putExtra(MainActivity.ACTION_UPDATE_KEY, RECV_UI.SELECT_DICT);
-                getActivity().sendBroadcast(intent);
-            }
+        mCheckBox.setOnClickListener(v -> {
+            mCheckBox.setChecked(mCheckBox.isChecked());
+            checked(mCheckBox.isChecked());
+            isCurrentCheckAll();
+        });
+        ImageButton backBtn = root.findViewById(R.id.action_back);
+        backBtn.setOnClickListener(v -> {
+            Intent intent = new Intent(MainActivity.ACTION_UPDATE_UI);
+            intent.putExtra(MainActivity.ACTION_UPDATE_KEY, RECV_UI.SELECT_DICT);
+            getActivity().sendBroadcast(intent);
         });
         return root;
     }
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/NavigatorFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/NavigatorFragment.java
index 27a75c2..feca788 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/NavigatorFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/NavigatorFragment.java
@@ -1,9 +1,7 @@
 package com.annie.dictionary.frags;
 
-import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -13,14 +11,17 @@ import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
 import com.annie.dictionary.R;
 import com.mmt.widget.M2tListView;
 
 public class NavigatorFragment extends Fragment implements OnItemClickListener {
 
-    NavigatorAdapter mAdapter1, mAdapter2;
-    String[] mFunctionLables;
-    String[] mSystemLables;
+    private NavigatorAdapter mAdapter1, mAdapter2;
+    private String[] mFunctionLabels, mSystemLabels;
     private M2tListView mListView1, mListView2;
     /**
      * A pointer to the current callbacks instance (the Activity).
@@ -33,8 +34,8 @@ public class NavigatorFragment extends Fragment implements OnItemClickListener {
 
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View root = inflater.inflate(R.layout.layout_navigatior, container, false);
-        mListView1 = (M2tListView) root.findViewById(R.id.list1);
-        mListView2 = (M2tListView) root.findViewById(R.id.list2);
+        mListView1 = root.findViewById(R.id.list1);
+        mListView2 = root.findViewById(R.id.list2);
         mListView1.setExpanded(true);
         mListView2.setExpanded(true);
         return root;
@@ -43,16 +44,16 @@ public class NavigatorFragment extends Fragment implements OnItemClickListener {
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         mAdapter1 = new NavigatorAdapter(getActivity());
-        mFunctionLables = getResources().getStringArray(R.array.function_lables);
-        mAdapter1.add(new NavigatorItem(mFunctionLables[0], R.drawable.ic_guide));
-        mAdapter1.add(new NavigatorItem(mFunctionLables[1], R.drawable.ic_recent));
-        mAdapter1.add(new NavigatorItem(mFunctionLables[2], R.drawable.ic_favorite));
+        mFunctionLabels = getResources().getStringArray(R.array.function_lables);
+        mAdapter1.add(new NavigatorItem(mFunctionLabels[0], R.drawable.ic_guide));
+        mAdapter1.add(new NavigatorItem(mFunctionLabels[1], R.drawable.ic_recent));
+        mAdapter1.add(new NavigatorItem(mFunctionLabels[2], R.drawable.ic_favorite));
         mListView1.setAdapter(mAdapter1);
-        mSystemLables = getResources().getStringArray(R.array.system_lables);
+        mSystemLabels = getResources().getStringArray(R.array.system_lables);
         mAdapter2 = new NavigatorAdapter(getActivity());
-        mAdapter2.add(new NavigatorItem(mSystemLables[0], R.drawable.ic_select_dict));
-        mAdapter2.add(new NavigatorItem(mSystemLables[1], R.drawable.ic_setting));
-        mAdapter2.add(new NavigatorItem(mSystemLables[2], R.drawable.ic_facebook));
+        mAdapter2.add(new NavigatorItem(mSystemLabels[0], R.drawable.ic_select_dict));
+        mAdapter2.add(new NavigatorItem(mSystemLabels[1], R.drawable.ic_setting));
+        mAdapter2.add(new NavigatorItem(mSystemLabels[2], R.drawable.ic_facebook));
         mListView2.setAdapter(mAdapter2);
         mListView1.setOnItemClickListener(this);
         mListView2.setOnItemClickListener(this);
@@ -61,19 +62,19 @@ public class NavigatorFragment extends Fragment implements OnItemClickListener {
     @Override
     public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
         if (parent.getId() == R.id.list1) {
-            mCallbacks.onNavigationItemSelected(mFunctionLables[position], position);
+            mCallbacks.onNavigationItemSelected(mFunctionLabels[position], position);
         } else if (parent.getId() == R.id.list2) {
-            mCallbacks.onNavigationItemSelected(mSystemLables[position], position + mAdapter1.getCount());
+            mCallbacks.onNavigationItemSelected(mSystemLabels[position], position + mAdapter1.getCount());
         }
     }
 
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
+    public void onAttach(Context context) {
+        super.onAttach(context);
         try {
-            mCallbacks = (NavigationCallbacks) activity;
+            mCallbacks = (NavigationCallbacks) context;
         } catch (ClassCastException e) {
-            throw new ClassCastException("Activity must implement NavigationCallbacks.");
+            throw new ClassCastException("Context must implement NavigationCallbacks.");
         }
     }
 
@@ -100,17 +101,18 @@ public class NavigatorFragment extends Fragment implements OnItemClickListener {
             super(context, 0);
         }
 
-        public View getView(int position, View convertView, ViewGroup parent) {
+        @NonNull
+        @Override
+        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
             if (convertView == null) {
                 convertView = LayoutInflater.from(getContext()).inflate(R.layout.navi_row, parent, false);
             }
-            ImageView icon = (ImageView) convertView.findViewById(R.id.row_icon);
+            ImageView icon = convertView.findViewById(R.id.row_icon);
             icon.setImageResource(getItem(position).iconRes);
-            TextView title = (TextView) convertView.findViewById(R.id.row_title);
+            TextView title = convertView.findViewById(R.id.row_title);
             title.setText(getItem(position).tag);
             return convertView;
         }
-
     }
 
     private class NavigatorItem {
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/PreferenceFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/PreferenceFragment.java
index 4eded18..3e6c38b 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/PreferenceFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/PreferenceFragment.java
@@ -8,7 +8,6 @@ import android.preference.Preference;
 import android.preference.PreferenceGroup;
 import android.preference.PreferenceManager;
 import android.preference.PreferenceScreen;
-import android.support.v4.app.Fragment;
 import android.util.Log;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
@@ -17,6 +16,8 @@ import android.view.View.OnKeyListener;
 import android.view.ViewGroup;
 import android.widget.ListView;
 
+import androidx.fragment.app.Fragment;
+
 import com.annie.dictionary.R;
 import com.annie.dictionary.utils.Utils;
 
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/PreferenceManagerCompat.java b/qDict/src/main/java/com/annie/dictionary/frags/PreferenceManagerCompat.java
index d6f9812..b914a8a 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/PreferenceManagerCompat.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/PreferenceManagerCompat.java
@@ -10,7 +10,6 @@ import android.util.Log;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 
@@ -53,15 +52,11 @@ public class PreferenceManagerCompat {
                 Object proxy = Proxy.newProxyInstance(onPreferenceTreeClickListener.getType().getClassLoader(),
                         new Class[]{
                                 onPreferenceTreeClickListener.getType()
-                        }, new InvocationHandler() {
-                            @Override
-                            public Object invoke(Object proxy, Method method, Object[] args) {
-                                if (method.getName().equals("onPreferenceTreeClick")) {
-                                    return Boolean.valueOf(
-                                            listener.onPreferenceTreeClick((PreferenceScreen) args[0], (Preference) args[1]));
-                                } else {
-                                    return null;
-                                }
+                        }, (proxy1, method, args) -> {
+                            if (method.getName().equals("onPreferenceTreeClick")) {
+                                return listener.onPreferenceTreeClick((PreferenceScreen) args[0], (Preference) args[1]);
+                            } else {
+                                return null;
                             }
                         });
                 onPreferenceTreeClickListener.set(manager, proxy);
@@ -93,8 +88,7 @@ public class PreferenceManagerCompat {
             Method m = PreferenceManager.class.getDeclaredMethod("inflateFromIntent", Intent.class,
                     PreferenceScreen.class);
             m.setAccessible(true);
-            PreferenceScreen prefScreen = (PreferenceScreen) m.invoke(manager, intent, screen);
-            return prefScreen;
+            return (PreferenceScreen) m.invoke(manager, intent, screen);
         } catch (Exception e) {
             Log.w(TAG, "Couldn't call PreferenceManager.inflateFromIntent by reflection", e);
         }
@@ -119,8 +113,7 @@ public class PreferenceManagerCompat {
             Method m = PreferenceManager.class.getDeclaredMethod("inflateFromResource", Context.class, int.class,
                     PreferenceScreen.class);
             m.setAccessible(true);
-            PreferenceScreen prefScreen = (PreferenceScreen) m.invoke(manager, activity, resId, screen);
-            return prefScreen;
+            return (PreferenceScreen) m.invoke(manager, activity, resId, screen);
         } catch (Exception e) {
             Log.w(TAG, "Couldn't call PreferenceManager.inflateFromResource by reflection", e);
         }
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/RecentFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/RecentFragment.java
index 37d8d9d..e03f712 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/RecentFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/RecentFragment.java
@@ -1,15 +1,11 @@
 package com.annie.dictionary.frags;
 
-import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.graphics.Color;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v7.app.ActionBarActivity;
 import android.text.TextUtils;
 import android.view.ActionMode;
 import android.view.LayoutInflater;
@@ -18,14 +14,16 @@ import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+
 import com.annie.dictionary.MainActivity;
 import com.annie.dictionary.R;
-import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
 import com.annie.dictionary.utils.Utils.NAVIG;
 import com.annie.dictionary.utils.Utils.RECV_UI;
@@ -44,7 +42,7 @@ public class RecentFragment extends BaseListFragment {
     private HashMap<Integer, Boolean> mSelection = new HashMap<>();
     private SharedPreferences mShares;
     private WordsFileUtils mHistoryFileUtils;
-    private ActionBarActivity activity;
+    private AppCompatActivity activity;
     private WordsListAdapter mAdapter;
     private TextView mEmpty, mTvRecentTitle, mTvCount;
     private boolean mIsFavorite = false;
@@ -56,54 +54,52 @@ public class RecentFragment extends BaseListFragment {
     }
 
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
+    public void onAttach(Context context) {
+        super.onAttach(context);
         setHasOptionsMenu(true);
     }
 
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
-        if(Utils.hasHcAbove()) {
-            mActionModeCallback = new ActionMode.Callback() {
-
-                @Override
-                public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-                    // Inflate a menu resource providing context menu items
-                    MenuInflater inflater = mode.getMenuInflater();
-                    inflater.inflate(R.menu.cabselection_menu, menu);
-                    return true;
-                }
+        mActionModeCallback = new ActionMode.Callback() {
 
-                // Called each time the action mode is shown. Always called after
-                // onCreateActionMode, but
-                // may be called multiple times if the mode is invalidated.
-                @Override
-                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-                    return false; // Return false if nothing is done
-                }
+            @Override
+            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                // Inflate a menu resource providing context menu items
+                MenuInflater inflater = mode.getMenuInflater();
+                inflater.inflate(R.menu.cabselection_menu, menu);
+                return true;
+            }
 
-                // Called when the user selects a contextual menu item
-                @Override
-                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-                    switch (item.getItemId()) {
-                        case R.id.action_delete:
-                            questionDeleteDlg(mode, mIsFavorite);
-                            return true;
-                        default:
-                            return false;
-                    }
-                }
+            // Called each time the action mode is shown. Always called after
+            // onCreateActionMode, but
+            // may be called multiple times if the mode is invalidated.
+            @Override
+            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+                return false; // Return false if nothing is done
+            }
 
-                // Called when the user exits the action mode
-                @Override
-                public void onDestroyActionMode(ActionMode mode) {
-                    mAdapter.clearSelection();
-                    mActionMode = null;
+            // Called when the user selects a contextual menu item
+            @Override
+            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                switch (item.getItemId()) {
+                    case R.id.action_delete:
+                        questionDeleteDlg(mode, mIsFavorite);
+                        return true;
+                    default:
+                        return false;
                 }
+            }
 
-            };
-        }
+            // Called when the user exits the action mode
+            @Override
+            public void onDestroyActionMode(ActionMode mode) {
+                mAdapter.clearSelection();
+                mActionMode = null;
+            }
+
+        };
         return getPersistentView(inflater, container, savedInstanceState, R.layout.fragment_recent);
     }
 
@@ -113,10 +109,10 @@ public class RecentFragment extends BaseListFragment {
         Bundle b = getArguments();
         if (b != null)
             mIsFavorite = b.getBoolean("qdict_is_favorite", false);
-        activity = (ActionBarActivity) getActivity();
-        mTvRecentTitle = (TextView) rootView.findViewById(R.id.tv_title);
-        mTvCount = (TextView) rootView.findViewById(R.id.tv_count);
-        mEmpty = (TextView) rootView.findViewById(R.id.tv_empty);
+        activity = (AppCompatActivity) getActivity();
+        mTvRecentTitle = rootView.findViewById(R.id.tv_title);
+        mTvCount = rootView.findViewById(R.id.tv_count);
+        mEmpty = rootView.findViewById(R.id.tv_empty);
         mShares = activity.getSharedPreferences(Def.APP_NAME, Context.MODE_PRIVATE);
         mCheckedColor = getResources().getColor(R.color.mmt_grey_500);
     }
@@ -150,7 +146,7 @@ public class RecentFragment extends BaseListFragment {
     }
 
     @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
         menu.clear();
         inflater.inflate(R.menu.recent_menu, menu);
@@ -176,34 +172,19 @@ public class RecentFragment extends BaseListFragment {
     }
 
     private void questionDeleteAllDlg(final boolean favorite) {
-        AlertDialog.Builder alertDialogBuilder;
-        if (Utils.hasHcAbove()) {
-            alertDialogBuilder = new AlertDialog.Builder(activity, R.style.QDialog);
-        } else {
-            alertDialogBuilder = new AlertDialog.Builder(activity);
-        }
+        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity, R.style.QDialog);
 
         alertDialogBuilder
                 .setMessage(favorite ? R.string.delete_all_favorite_summary : R.string.delete_all_recent_summary);
-        alertDialogBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-            }
-        });
-        alertDialogBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                mHistoryFileUtils.removeAll();
-                mHistoryFileUtils.save();
-                mWordsArrayList.clear();
-                mAdapter.notifyDataSetChanged();
-                mEmpty.setVisibility(View.VISIBLE);
-                activity.invalidateOptionsMenu();
-                dialog.dismiss();
-            }
+        alertDialogBuilder.setNegativeButton(R.string.cancel, (dialog, which) -> dialog.dismiss());
+        alertDialogBuilder.setPositiveButton(R.string.ok, (dialog, which) -> {
+            mHistoryFileUtils.removeAll();
+            mHistoryFileUtils.save();
+            mWordsArrayList.clear();
+            mAdapter.notifyDataSetChanged();
+            mEmpty.setVisibility(View.VISIBLE);
+            activity.invalidateOptionsMenu();
+            dialog.dismiss();
         });
         alertDialogBuilder.show();
     }
@@ -211,39 +192,31 @@ public class RecentFragment extends BaseListFragment {
     private void questionDeleteDlg(final ActionMode mode, final boolean favorite) {
         AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
         alertDialogBuilder.setMessage(favorite ? R.string.delete_favorite_summary : R.string.delete_recent_summary);
-        alertDialogBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-            }
-        });
-        alertDialogBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                StringBuilder sb = new StringBuilder();
-                Set<Integer> set = mAdapter.getCurrentCheckedPosition();
-                List<String> keywords = new ArrayList<>();
-                for (Integer pos : set) {
-                    String keyword = mAdapter.getItem(pos);
-                    if (!TextUtils.isEmpty(keyword)) {
-                        sb.append(keyword).append("\n ");
-                        keywords.add(keyword);
-                    }
-                }
-                for (String key : keywords) {
-                    mHistoryFileUtils.remove(key);
+        alertDialogBuilder.setNegativeButton(R.string.cancel, (dialog, which) -> dialog.dismiss());
+        alertDialogBuilder.setPositiveButton(R.string.ok, (dialog, which) -> {
+            StringBuilder sb = new StringBuilder();
+            Set<Integer> set = mAdapter.getCurrentCheckedPosition();
+            List<String> keywords = new ArrayList<>();
+            for (Integer pos : set) {
+                String keyword = mAdapter.getItem(pos);
+                if (!TextUtils.isEmpty(keyword)) {
+                    sb.append(keyword).append("\n ");
+                    keywords.add(keyword);
                 }
-                if (set.size() > 0) {
-                    mWordsArrayList = mHistoryFileUtils.getArrayList();
-                    checkUIInfor();
-                    sb.append("\n has deleted.");
-                }
-                M2tToast.makeText(activity, sb.toString(), M2tToast.LENGTH_LONG).show();
-                // clear selection android finish actionmode
-                mAdapter.clearSelection();
-                dialog.dismiss();
-                mode.finish();
             }
+            for (String key : keywords) {
+                mHistoryFileUtils.remove(key);
+            }
+            if (set.size() > 0) {
+                mWordsArrayList = mHistoryFileUtils.getArrayList();
+                checkUIInfor();
+                sb.append("\n has deleted.");
+            }
+            M2tToast.makeText(activity, sb.toString(), M2tToast.LENGTH_LONG).show();
+            // clear selection android finish actionmode
+            mAdapter.clearSelection();
+            dialog.dismiss();
+            mode.finish();
         });
         alertDialogBuilder.show();
     }
@@ -252,23 +225,17 @@ public class RecentFragment extends BaseListFragment {
         mWordsArrayList = mHistoryFileUtils.getArrayList();
         mAdapter = new WordsListAdapter(mWordsArrayList);
         setListAdapter(mAdapter);
-        if (Utils.hasHcAbove()) {
-            getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-                @Override
-                public boolean onItemLongClick(AdapterView<?> listview, View item, int position, long id) {
-                    getListView().setItemChecked(position, true);
-                    if (mActionMode != null) {
-                        return false;
-                    }
-                    mAdapter.setNewSelection(position, true);
-                    mActionMode = ((MainActivity) activity).getToolbar().startActionMode(mActionModeCallback);
-                    int count = mAdapter.getCheckCount();
-                    mActionMode.setTitle(getResources().getQuantityString(R.plurals.items_count, count, count));
-                    return true;
-                }
-
-            });
-        }
+        getListView().setOnItemLongClickListener((listview, item, position, id) -> {
+            getListView().setItemChecked(position, true);
+            if (mActionMode != null) {
+                return false;
+            }
+            mAdapter.setNewSelection(position, true);
+            mActionMode = ((MainActivity) activity).getToolbar().startActionMode(mActionModeCallback);
+            int count = mAdapter.getCheckCount();
+            mActionMode.setTitle(getResources().getQuantityString(R.plurals.items_count, count, count));
+            return true;
+        });
         checkUIInfor();
     }
 
@@ -280,13 +247,12 @@ public class RecentFragment extends BaseListFragment {
             mEmpty.setVisibility(View.VISIBLE);
         }
         mTvCount.setText(getResources().getQuantityString(R.plurals.words_count, count, count));
-        if (Utils.hasHcAbove())
-            activity.invalidateOptionsMenu();
+        activity.invalidateOptionsMenu();
     }
 
     @Override
     public void onListItemClick(ListView l, View v, int position, long id) {
-        if (Utils.hasHcAbove() && mActionMode != null) {
+        if (mActionMode != null) {
             boolean check = !mAdapter.isPositionChecked(position);
             if (check)
                 mAdapter.setNewSelection(position, true);
@@ -358,15 +324,15 @@ public class RecentFragment extends BaseListFragment {
             notifyDataSetChanged();
         }
 
+        @NonNull
         @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
+        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
             TextView text = (TextView) convertView;
-
             if (text == null) {
                 text = (TextView) inflater.inflate(R.layout.simple_list_item_1, null);
             }
             if (mWordsArrayList == null || mWordsArrayList.size() == 0)
-                return null;
+                return super.getView(position, convertView, parent);
 
             text.setText(mListWords.get(position));
             if (mSelection.get(position) != null) {
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/SearchFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/SearchFragment.java
index d3c1342..c443b24 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/SearchFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/SearchFragment.java
@@ -5,8 +5,6 @@ import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Build;
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -19,6 +17,9 @@ import android.webkit.WebView;
 import android.widget.ImageButton;
 import android.widget.TextView;
 
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
 import com.annie.dictionary.DictSpeechEng;
 import com.annie.dictionary.DictWebViewClient;
 import com.annie.dictionary.MainActivity;
diff --git a/qDict/src/main/java/com/annie/dictionary/frags/SettingFragment.java b/qDict/src/main/java/com/annie/dictionary/frags/SettingFragment.java
index 73d8497..0cd7807 100644
--- a/qDict/src/main/java/com/annie/dictionary/frags/SettingFragment.java
+++ b/qDict/src/main/java/com/annie/dictionary/frags/SettingFragment.java
@@ -3,7 +3,6 @@ package com.annie.dictionary.frags;
 import android.app.AlertDialog;
 import android.content.BroadcastReceiver;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
@@ -16,7 +15,6 @@ import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.Preference.OnPreferenceChangeListener;
 import android.preference.Preference.OnPreferenceClickListener;
-import android.support.v4.app.FragmentActivity;
 import android.text.SpannableStringBuilder;
 import android.text.Spanned;
 import android.text.TextPaint;
@@ -26,6 +24,8 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.fragment.app.FragmentActivity;
+
 import com.annie.dictionary.DictSpeechEng;
 import com.annie.dictionary.MainActivity;
 import com.annie.dictionary.PathSelectActivity;
@@ -255,9 +255,9 @@ public class SettingFragment extends PreferenceFragment implements Def, OnPrefer
             return true;
         } else if (preference == mLangPreference) {
             int index = mLangPreference.findIndexOfValue(newValue.toString());
-            CharSequence[] entrieValues = mLangPreference.getEntryValues();
+            CharSequence[] entriesValues = mLangPreference.getEntryValues();
             CharSequence[] entries = mLangPreference.getEntries();
-            String lang = entrieValues[index].toString();
+            String lang = entriesValues[index].toString();
             if (!mCurrentLang.equalsIgnoreCase(lang)) {
                 mSharedPreferences.edit().putString("prefs_key_languages", lang).apply();
                 mLangPreference.setSummary(entries[index].toString());
@@ -280,27 +280,13 @@ public class SettingFragment extends PreferenceFragment implements Def, OnPrefer
 
     @SuppressWarnings("unused")
     private void questionResetDlg() {
-        AlertDialog.Builder alertDialogBuilder;
-        if (Utils.hasHcAbove()) {
-            alertDialogBuilder = new AlertDialog.Builder(activity, R.style.QDialog);
-        } else {
-            alertDialogBuilder = new AlertDialog.Builder(activity);
-        }
-        alertDialogBuilder.setMessage(R.string.app_name);
-        alertDialogBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity, R.style.QDialog);
 
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.dismiss();
-            }
-        });
-        alertDialogBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                reset();
-                dialog.dismiss();
-            }
+        alertDialogBuilder.setMessage(R.string.app_name);
+        alertDialogBuilder.setNegativeButton(R.string.cancel, (dialog, which) -> dialog.dismiss());
+        alertDialogBuilder.setPositiveButton(R.string.ok, (dialog, which) -> {
+            reset();
+            dialog.dismiss();
         });
         alertDialogBuilder.show();
     }
diff --git a/qDict/src/main/java/com/annie/dictionary/service/QDictService.java b/qDict/src/main/java/com/annie/dictionary/service/QDictService.java
index 5c2aa87..3f6d597 100644
--- a/qDict/src/main/java/com/annie/dictionary/service/QDictService.java
+++ b/qDict/src/main/java/com/annie/dictionary/service/QDictService.java
@@ -11,7 +11,6 @@ import android.text.Editable;
 import android.text.Selection;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.webkit.WebSettings;
@@ -75,15 +74,8 @@ public class QDictService extends StandOutWindow {
 
     private ClipboardManager mClipboardManager = null;
 
-    @SuppressWarnings("deprecation")
-    private android.text.ClipboardManager mClipboardManagerGINGER = null;
-
     private ExecutorService mThreadPool = Executors.newSingleThreadExecutor();
-    private OnPrimaryClipChangedListener mClipboardListener = new OnPrimaryClipChangedListener() {
-        public void onPrimaryClipChanged() {
-            clipboardCheck();
-        }
-    };
+    private OnPrimaryClipChangedListener mClipboardListener = this::clipboardCheck;
 
     public QDictService() {
     }
@@ -112,16 +104,11 @@ public class QDictService extends StandOutWindow {
             mKeywordLable.setText(word);
     }
 
-    @SuppressWarnings("deprecation")
     private void clipboardCheck() {
         String clipboardText;
         CharSequence s = null;
-        if (Utils.hasHcAbove()) {
-            if (mClipboardManager.hasPrimaryClip()) {
-                s = mClipboardManager.getPrimaryClip().getItemAt(0).getText();
-            }
-        } else {
-            s = mClipboardManagerGINGER.getText();
+        if (mClipboardManager.hasPrimaryClip()) {
+            s = mClipboardManager.getPrimaryClip().getItemAt(0).getText();
         }
         if (TextUtils.isEmpty(s)) {
             return;
@@ -168,40 +155,17 @@ public class QDictService extends StandOutWindow {
 
         OPENED_WIDTH = (int) (880 * scale);
         OPENED_HEIGHT = (int) (960 * scale);
-        if (!Utils.hasHcAbove())
-            mClipboardTask = new Runnable() {
-                @Override
-                public void run() {
-                    clipboardCheck();
-                    mHandler.postDelayed(mClipboardTask, Def.CLIPBOARD_TIMER);
-                    Log.e("NAMND", "mClipboardTask");
-                }
-            };
-        mInitServiceTask = new Runnable() {
-            @Override
-            public void run() {
-                initClipboardService();
-                if (!Utils.hasHcAbove())
-                    mHandler.postDelayed(mClipboardTask, Def.CLIPBOARD_TIMER);
-                Log.e("NAMND", "mInitServiceTask");
-            }
-        };
+
+        mInitServiceTask = this::initClipboardService;
         mHandler.postDelayed(mInitServiceTask, Def.CLIPBOARD_TIMER);
         super.onCreate();
         RUNNING = true;
     }
 
-    @SuppressWarnings("deprecation")
     @Override
     public void initClipboardService() {
-        if (Utils.hasHcAbove()) {
-            mClipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
-            mClipboardManager.addPrimaryClipChangedListener(mClipboardListener);
-        } else {
-            mClipboardManagerGINGER = (android.text.ClipboardManager) getSystemService(CLIPBOARD_SERVICE);
-            if (mClipboardManagerGINGER.hasText())
-                mClipboardText = mClipboardManagerGINGER.getText().toString().trim();
-        }
+        mClipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
+        mClipboardManager.addPrimaryClipChangedListener(mClipboardListener);
     }
 
     @Override
@@ -275,14 +239,14 @@ public class QDictService extends StandOutWindow {
     public void createAndAttachView(int id, FrameLayout frame) {
         LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
         View view = inflater.inflate(R.layout.capture_window, frame, true);
-        mDictViewContent = (WebView) view.findViewById(R.id.dictContentView);
-        mKeywordLable = (TextView) view.findViewById(R.id.tv_title);
+        mDictViewContent = view.findViewById(R.id.dictContentView);
+        mKeywordLable = view.findViewById(R.id.tv_title);
         WebSettings webSettings = mDictViewContent.getSettings();
         webSettings.setLayoutAlgorithm(Utils.getLayoutAlgorithm(true));
         webSettings.setJavaScriptEnabled(true);
         webSettings.setDefaultTextEncodingName("UTF-8");
         // webSettings.setSupportZoom(true);
-        mSpeakImg = (ImageButton) view.findViewById(R.id.action_speak);
+        mSpeakImg = view.findViewById(R.id.action_speak);
         mSpeakImg.setVisibility(/* tts ? View.VISIBLE : */View.GONE);
     }
 
diff --git a/qDict/src/main/java/com/annie/dictionary/standout/StandOutFlags.java b/qDict/src/main/java/com/annie/dictionary/standout/StandOutFlags.java
index 640fd4e..286feb0 100644
--- a/qDict/src/main/java/com/annie/dictionary/standout/StandOutFlags.java
+++ b/qDict/src/main/java/com/annie/dictionary/standout/StandOutFlags.java
@@ -62,9 +62,6 @@ public class StandOutFlags {
 
     /**
      * Setting this flag indicates that windows are able to be hidden, that
-     * {@link StandOutWindow#getHiddenIcon(int)},
-     * {@link StandOutWindow#getHiddenTitle(int)}, and
-     * {@link StandOutWindow#getHiddenMessage(int)} are implemented, and that
      * the system window decorator should provide a hide button if
      * {@link #FLAG_DECORATION_SYSTEM} is set.
      */
@@ -134,9 +131,6 @@ public class StandOutFlags {
      * The benefit of disabling focus is that your window will not consume any
      * key events. Normally, focused windows will consume the Back and Menu
      * keys.
-     *
-     * @see {@link StandOutWindow#focus(int)}
-     * @see {@link StandOutWindow#unfocus(int)}
      */
     public static final int FLAG_WINDOW_FOCUSABLE_DISABLE = 1 << flag_bit++;
 
@@ -152,21 +146,13 @@ public class StandOutFlags {
 
     /**
      * Setting this flag indicates that the system should disable all
-     * compatibility workarounds. The default behavior is to run
-     * {@link Window#fixCompatibility(View, int)} on the view returned by the
-     * implementation.
-     *
-     * @see {@link Window#fixCompatibility(View, int)}
+     * compatibility workarounds.
      */
     public static final int FLAG_FIX_COMPATIBILITY_ALL_DISABLE = 1 << flag_bit++;
 
     /**
      * Setting this flag indicates that the system should disable all additional
-     * functionality. The default behavior is to run
-     * {@link Window#addFunctionality(View, int)} on the view returned by the
-     * implementation.
-     *
-     * @see {@link StandOutWindow#addFunctionality(View, int)}
+     * functionality.
      */
     public static final int FLAG_ADD_FUNCTIONALITY_ALL_DISABLE = 1 << flag_bit++;
 
@@ -176,8 +162,6 @@ public class StandOutFlags {
      * <p/>
      * If {@link #FLAG_DECORATION_SYSTEM} is set, the user will always be able
      * to resize the window with the default corner.
-     *
-     * @see {@link Window#addFunctionality(View, int)}
      */
     public static final int FLAG_ADD_FUNCTIONALITY_RESIZE_DISABLE = 1 << flag_bit++;
 
@@ -188,8 +172,6 @@ public class StandOutFlags {
      * <p/>
      * If {@link #FLAG_DECORATION_SYSTEM} is set, the user will always be able
      * to show the drop down menu with the default window icon.
-     *
-     * @see {@link Window#addFunctionality(View, int)}
      */
     public static final int FLAG_ADD_FUNCTIONALITY_DROP_DOWN_DISABLE = 1 << flag_bit++;
 }
diff --git a/qDict/src/main/java/com/annie/dictionary/standout/StandOutWindow.java b/qDict/src/main/java/com/annie/dictionary/standout/StandOutWindow.java
index d10457a..902ce38 100644
--- a/qDict/src/main/java/com/annie/dictionary/standout/StandOutWindow.java
+++ b/qDict/src/main/java/com/annie/dictionary/standout/StandOutWindow.java
@@ -12,7 +12,6 @@ import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.IBinder;
-import android.support.v4.app.NotificationCompat;
 import android.util.Log;
 import android.view.Display;
 import android.view.Gravity;
@@ -20,7 +19,6 @@ import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.view.animation.Animation;
@@ -33,6 +31,8 @@ import android.widget.LinearLayout;
 import android.widget.PopupWindow;
 import android.widget.TextView;
 
+import androidx.core.app.NotificationCompat;
+
 import com.annie.dictionary.MainActivity;
 import com.annie.dictionary.R;
 import com.annie.dictionary.utils.Utils.Def;
@@ -46,7 +46,7 @@ import java.util.Set;
  * Extend this class to easily create and manage floating StandOut windows.
  *
  * @author Mark Wei <markwei@gmail.com> Contributors: Jason
- *         <github.com/jasonconnery>
+ * <github.com/jasonconnery>
  */
 public abstract class StandOutWindow extends Service {
     /**
@@ -662,18 +662,12 @@ public abstract class StandOutWindow extends Service {
         if (dropDownListItems != null) {
             items = dropDownListItems;
         } else {
-            items = new ArrayList<StandOutWindow.DropDownListItem>();
+            items = new ArrayList<>();
         }
 
         // add default drop down items
         items.add(new DropDownListItem((sThemeIndex == 0) ? R.drawable.ic_dlg_close_orange : R.drawable.ic_dlg_close,
-                getResources().getString(R.string.close), new Runnable() {
-
-            @Override
-            public void run() {
-                closeAll();
-            }
-        }));
+                getResources().getString(R.string.close), () -> closeAll()));
 
         // turn item list into views in PopupWindow
         LinearLayout list = new LinearLayout(this);
@@ -686,19 +680,15 @@ public abstract class StandOutWindow extends Service {
             ViewGroup listItem = (ViewGroup) mLayoutInflater.inflate(R.layout.drop_down_list_item, null);
             list.addView(listItem);
 
-            ImageView icon = (ImageView) listItem.findViewById(R.id.icon);
+            ImageView icon = listItem.findViewById(R.id.icon);
             icon.setImageResource(item.icon);
 
-            TextView description = (TextView) listItem.findViewById(R.id.description);
+            TextView description = listItem.findViewById(R.id.description);
             description.setText(item.description);
 
-            listItem.setOnClickListener(new OnClickListener() {
-
-                @Override
-                public void onClick(View v) {
-                    item.action.run();
-                    dropDown.dismiss();
-                }
+            listItem.setOnClickListener(v -> {
+                item.action.run();
+                dropDown.dismiss();
             });
         }
 
@@ -1157,7 +1147,7 @@ public abstract class StandOutWindow extends Service {
     }
 
     /**
-     * Send {@link Parceleable} data in a {@link Bundle} to a new or existing
+     * Send data in a {@link Bundle} to a new or existing
      * windows. The implementation of the recipient window can handle what to do
      * with the data. To receive a result, provide the id of the sender.
      *
diff --git a/qDict/src/main/java/com/annie/dictionary/standout/WindowCache.java b/qDict/src/main/java/com/annie/dictionary/standout/WindowCache.java
index 886c7dd..22d670b 100644
--- a/qDict/src/main/java/com/annie/dictionary/standout/WindowCache.java
+++ b/qDict/src/main/java/com/annie/dictionary/standout/WindowCache.java
@@ -11,7 +11,7 @@ public class WindowCache {
     public Map<Class<? extends StandOutWindow>, SparseArray<Window>> sWindows;
 
     public WindowCache() {
-        sWindows = new HashMap<Class<? extends StandOutWindow>, SparseArray<Window>>();
+        sWindows = new HashMap<>();
     }
 
     /**
diff --git a/qDict/src/main/java/com/annie/dictionary/utils/Utils.java b/qDict/src/main/java/com/annie/dictionary/utils/Utils.java
index fe842cf..ccb6b5c 100644
--- a/qDict/src/main/java/com/annie/dictionary/utils/Utils.java
+++ b/qDict/src/main/java/com/annie/dictionary/utils/Utils.java
@@ -4,7 +4,6 @@ import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
@@ -103,20 +102,10 @@ public class Utils {
     public static Dialog createAboutDialog(final Context context) {
         LayoutInflater inflater = LayoutInflater.from(context);
         AlertDialog.Builder builder;
-        if (Utils.hasHcAbove()) {
-            builder = new AlertDialog.Builder(context, R.style.QDialog);
-        } else {
-            builder = new AlertDialog.Builder(context);
-        }
+        builder = new AlertDialog.Builder(context, R.style.QDialog);
         builder.setView(inflater.inflate(R.layout.about, null));
         builder.setTitle(R.string.about_lable);
-        builder.setNeutralButton(R.string.btn_more_apps, new DialogInterface.OnClickListener() {
-
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                context.startActivity(goToMoreApp());
-            }
-        });
+        builder.setNeutralButton(R.string.btn_more_apps, (dialog, which) -> context.startActivity(goToMoreApp()));
         builder.setPositiveButton(R.string.ok, null);
         return builder.create();
     }
@@ -128,20 +117,11 @@ public class Utils {
 
     public static Dialog createWhatsNewDialog(Context context) {
         AlertDialog.Builder builder;
-        if (Utils.hasHcAbove()) {
-            builder = new AlertDialog.Builder(context, R.style.QDialog);
-        } else {
-            builder = new AlertDialog.Builder(context);
-        }
+        builder = new AlertDialog.Builder(context, R.style.QDialog);
         builder.setIcon(android.R.drawable.ic_dialog_info);
         builder.setTitle(R.string.prefs_title_whatsnew);
         builder.setMessage(getTextFromAssets(context, "whatsnew.txt"));
-        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {
-            @Override
-            public void onClick(DialogInterface dialog, int which) {
-                dialog.cancel();
-            }
-        });
+        builder.setNeutralButton(R.string.ok, (dialog, which) -> dialog.cancel());
         return builder.create();
 
     }
@@ -323,14 +303,6 @@ public class Utils {
         return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;
     }
 
-    /**
-     * Uses static final constants to detect if the device's platform version is
-     * Kitkat or later.
-     */
-    public static boolean hasHcAbove() {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;
-    }
-
     /**
      * Uses static final constants to detect if the device's platform version is
      * Kikat.
diff --git a/qDict/src/main/java/com/mmt/app/ActionBarListActivity.java b/qDict/src/main/java/com/mmt/app/ActionBarListActivity.java
index cd78256..7f75a91 100644
--- a/qDict/src/main/java/com/mmt/app/ActionBarListActivity.java
+++ b/qDict/src/main/java/com/mmt/app/ActionBarListActivity.java
@@ -1,17 +1,18 @@
 package com.mmt.app;
 
-import android.support.v7.app.ActionBarActivity;
 import android.widget.HeaderViewListAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
 
-public abstract class ActionBarListActivity extends ActionBarActivity {
+import androidx.appcompat.app.AppCompatActivity;
+
+public abstract class ActionBarListActivity extends AppCompatActivity {
 
     private ListView mListView;
 
     protected ListView getListView() {
         if (mListView == null) {
-            mListView = (ListView) findViewById(android.R.id.list);
+            mListView = findViewById(android.R.id.list);
         }
         return mListView;
     }
diff --git a/qDict/src/main/java/com/mmt/app/SlidingActivityHelper.java b/qDict/src/main/java/com/mmt/app/SlidingActivityHelper.java
index b2e25e2..05baad7 100644
--- a/qDict/src/main/java/com/mmt/app/SlidingActivityHelper.java
+++ b/qDict/src/main/java/com/mmt/app/SlidingActivityHelper.java
@@ -72,17 +72,15 @@ public class SlidingActivityHelper {
             open = false;
             secondary = false;
         }
-        new Handler().post(new Runnable() {
-            public void run() {
-                if (open) {
-                    if (secondary) {
-                        mSlidingMenu.showSecondaryMenu(false);
-                    } else {
-                        mSlidingMenu.showMenu(false);
-                    }
+        new Handler().post(() -> {
+            if (open) {
+                if (secondary) {
+                    mSlidingMenu.showSecondaryMenu(false);
                 } else {
-                    mSlidingMenu.showContent(false);
+                    mSlidingMenu.showMenu(false);
                 }
+            } else {
+                mSlidingMenu.showContent(false);
             }
         });
     }
diff --git a/qDict/src/main/java/com/mmt/app/SlidingFragmentActivity.java b/qDict/src/main/java/com/mmt/app/SlidingFragmentActivity.java
index 9c1ac08..a9b2c2b 100644
--- a/qDict/src/main/java/com/mmt/app/SlidingFragmentActivity.java
+++ b/qDict/src/main/java/com/mmt/app/SlidingFragmentActivity.java
@@ -1,14 +1,15 @@
 package com.mmt.app;
 
 import android.os.Bundle;
-import android.support.v7.app.ActionBarActivity;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 import com.mmt.widget.slidemenu.SlidingMenu;
 
-public abstract class SlidingFragmentActivity extends ActionBarActivity implements SlidingActivityBase {
+public abstract class SlidingFragmentActivity extends AppCompatActivity implements SlidingActivityBase {
 
     private SlidingActivityHelper mHelper;
 
diff --git a/qDict/src/main/java/com/mmt/app/SystemBarTintManager.java b/qDict/src/main/java/com/mmt/app/SystemBarTintManager.java
index e1cdd61..264dd65 100644
--- a/qDict/src/main/java/com/mmt/app/SystemBarTintManager.java
+++ b/qDict/src/main/java/com/mmt/app/SystemBarTintManager.java
@@ -277,11 +277,8 @@ public class SystemBarTintManager {
      *
      * @param alpha The alpha to use
      */
-    @TargetApi(11)
     public void setNavigationBarAlpha(float alpha) {
-        if (mNavBarAvailable && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            mNavBarTintView.setAlpha(alpha);
-        }
+        mNavBarTintView.setAlpha(alpha);
     }
 
     /**
@@ -435,10 +432,8 @@ public class SystemBarTintManager {
         private int getNavigationBarWidth(Context context) {
             Resources res = context.getResources();
             int result = 0;
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-                if (hasNavBar(context)) {
-                    return getInternalDimensionSize(res, NAV_BAR_WIDTH_RES_NAME);
-                }
+            if (hasNavBar(context)) {
+                return getInternalDimensionSize(res, NAV_BAR_WIDTH_RES_NAME);
             }
             return result;
         }
diff --git a/qDict/src/main/java/com/mmt/widget/ActionButton.java b/qDict/src/main/java/com/mmt/widget/ActionButton.java
new file mode 100644
index 0000000..330925d
--- /dev/null
+++ b/qDict/src/main/java/com/mmt/widget/ActionButton.java
@@ -0,0 +1,1432 @@
+/*
+ * Copyright 2015 Shell Software Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * File created: 2015-01-17 10:39:13
+ */
+
+package com.mmt.widget;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewOutlineProvider;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+
+import com.annie.dictionary.R;
+
+
+/**
+ * This class represents a <b>Action Button</b>, which is used in
+ * <a href="http://www.google.com.ua/design/spec/components/buttons.html">Material Design</a>
+ */
+public class ActionButton extends View {
+
+    /**
+     * Logging tag
+     */
+    private static final String LOG_TAG = "M2t";
+
+    /**
+     * <b>Action Button</b> type
+     */
+    private Type type = Type.DEFAULT;
+
+    /**
+     * <b>Action Button</b> state
+     */
+    private State state = State.NORMAL;
+
+    /**
+     * <b>Action Button</b> color in {@link State#NORMAL} state
+     */
+    private int buttonColor = Color.LTGRAY;
+
+    /**
+     * <b>Action Button</b> color in {@link State#PRESSED} state
+     */
+    private int buttonColorPressed = Color.DKGRAY;
+
+    /**
+     * Shadow radius expressed in actual pixels
+     */
+    private float shadowRadius = MetricsConverter.dpToPx(getContext(), 2.0f);
+
+    /**
+     * Shadow X-axis offset expressed in actual pixels
+     */
+    private float shadowXOffset = MetricsConverter.dpToPx(getContext(), 1.0f);
+
+    /**
+     * Shadow Y-axis offset expressed in actual pixels
+     */
+    private float shadowYOffset = MetricsConverter.dpToPx(getContext(), 1.5f);
+
+    /**
+     * Shadow color
+     */
+    private int shadowColor = Color.parseColor("#757575");
+
+    /**
+     * Stroke width
+     */
+    private float strokeWidth = 0.0f;
+
+    /**
+     * Stroke color
+     */
+    private int strokeColor = Color.BLACK;
+
+    /**
+     * <b>Action Button</b> image drawable centered inside the view
+     */
+    private Drawable image;
+
+    /**
+     * Size of the <b>Action Button</b> image inside the view
+     */
+    private float imageSize = MetricsConverter.dpToPx(getContext(), 24.0f);
+
+    /**
+     * Animation, which is used while showing <b>Action Button</b>
+     */
+    private Animation showAnimation;
+
+    /**
+     * Animation, which is used while hiding or dismissing <b>Action Button</b>
+     */
+    private Animation hideAnimation;
+
+    /**
+     * {@link Paint}, which is used for drawing the elements of
+     * <b>Action Button</b>
+     */
+    protected final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
+
+    /**
+     * Creates an instance of the <b>Action Button</b>
+     * <p>
+     * Used when instantiating <b>Action Button</b> programmatically
+     *
+     * @param context context the view is running in
+     */
+    public ActionButton(Context context) {
+        super(context);
+        initActionButton();
+    }
+
+    /**
+     * Creates an instance of the <b>Action Button</b>
+     * <p>
+     * Used when inflating the declared <b>Action Button</b>
+     * within XML resource
+     *
+     * @param context context the view is running in
+     * @param attrs   attributes of the XML tag that is inflating the view
+     */
+    public ActionButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initActionButton(context, attrs, 0, 0);
+    }
+
+    /**
+     * Creates an instance of the <b>Action Button</b>
+     * <p>
+     * Used when inflating the declared <b>Action Button</b>
+     * within XML resource
+     *
+     * @param context      context the view is running in
+     * @param attrs        attributes of the XML tag that is inflating the view
+     * @param defStyleAttr attribute in the current theme that contains a
+     *                     reference to a style resource that supplies default values for
+     *                     the view. Can be 0 to not look for defaults
+     */
+    public ActionButton(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        initActionButton(context, attrs, defStyleAttr, 0);
+    }
+
+    /**
+     * Creates an instance of the <b>Action Button</b>
+     * <p>
+     * Used when inflating the declared <b>Action Button</b>
+     * within XML resource
+     * <p>
+     * Might be called if target API is LOLLIPOP (21) and higher
+     *
+     * @param context      context the view is running in
+     * @param attrs        attributes of the XML tag that is inflating the view
+     * @param defStyleAttr attribute in the current theme that contains a
+     *                     reference to a style resource that supplies default values for
+     *                     the view. Can be 0 to not look for defaults
+     * @param defStyleRes  resource identifier of a style resource that
+     *                     supplies default values for the view, used only if
+     *                     defStyleAttr is 0 or can not be found in the theme. Can be 0
+     *                     to not look for defaults
+     */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public ActionButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        initActionButton(context, attrs, defStyleAttr, defStyleRes);
+    }
+
+    /**
+     * Initializes the <b>Action Button</b>, which is created programmatically
+     */
+    private void initActionButton() {
+        initLayerType();
+        Log.v(LOG_TAG, "Action Button initialized");
+    }
+
+    /**
+     * Initializes the <b>Action Button</b>, which is declared within XML resource
+     * <p>
+     * Makes calls to different initialization methods for parameters initialization.
+     * For those parameters, which are not declared in the XML resource,
+     * the default value will be used
+     *
+     * @param context      context the view is running in
+     * @param attrs        attributes of the XML tag that is inflating the view
+     * @param defStyleAttr attribute in the current theme that contains a
+     *                     reference to a style resource that supplies default values for
+     *                     the view. Can be 0 to not look for defaults
+     * @param defStyleRes  resource identifier of a style resource that
+     *                     supplies default values for the view, used only if
+     *                     defStyleAttr is 0 or can not be found in the theme. Can be 0
+     *                     to not look for defaults
+     */
+    private void initActionButton(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        initLayerType();
+        TypedArray attributes = context.getTheme().obtainStyledAttributes(attrs, R.styleable.ActionButton,
+                defStyleAttr, defStyleRes);
+        try {
+            initType(attributes);
+            initButtonColor(attributes);
+            initButtonColorPressed(attributes);
+            initShadowRadius(attributes);
+            initShadowXOffset(attributes);
+            initShadowYOffset(attributes);
+            initShadowColor(attributes);
+            initStrokeWidth(attributes);
+            initStrokeColor(attributes);
+            initImage(attributes);
+            initImageSize(attributes);
+            initShowAnimation(attributes);
+            initHideAnimation(attributes);
+        } catch (Exception e) {
+            Log.e(LOG_TAG, "Unable to read attr", e);
+        } finally {
+            attributes.recycle();
+        }
+        Log.v(LOG_TAG, "Action Button initialized");
+    }
+
+    /**
+     * Initializes the layer type needed for shadows drawing
+     * <p>
+     * Might be called if target API is HONEYCOMB (11) and higher
+     */
+    private void initLayerType() {
+        setLayerType(LAYER_TYPE_SOFTWARE, paint);
+    }
+
+    /**
+     * Initializes the {@link Type} of <b>Action Button</b>
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initType(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_type)) {
+            final int id = attrs.getInteger(R.styleable.ActionButton_type, type.getId());
+            type = Type.forId(id);
+            Log.v(LOG_TAG, "Initialized type: " + getType());
+        }
+    }
+
+    /**
+     * Initializes the <b>Action Button</b> color for
+     * {@link #state} set to {@link State#NORMAL}
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initButtonColor(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_button_color)) {
+            buttonColor = attrs.getColor(R.styleable.ActionButton_button_color, buttonColor);
+            Log.v(LOG_TAG, "Initialized button color: " + getButtonColor());
+        }
+    }
+
+    /**
+     * Initializes the <b>Action Button</b> color for
+     * {@link #state} set to {@link State#PRESSED}
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initButtonColorPressed(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_button_colorPressed)) {
+            buttonColorPressed = attrs.getColor(R.styleable.ActionButton_button_colorPressed,
+                    buttonColorPressed);
+            Log.v(LOG_TAG, "Initialized button color pressed: " + getButtonColorPressed());
+        }
+    }
+
+    /**
+     * Initializes the shadow radius
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initShadowRadius(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_shadow_radius)) {
+            shadowRadius = attrs.getDimension(R.styleable.ActionButton_shadow_radius, shadowRadius);
+            Log.v(LOG_TAG, "Initialized shadow radius: " + getShadowRadius());
+        }
+    }
+
+    /**
+     * Initializes the shadow X-axis offset
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initShadowXOffset(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_shadow_xOffset)) {
+            shadowXOffset = attrs.getDimension(R.styleable.ActionButton_shadow_xOffset, shadowXOffset);
+            Log.v(LOG_TAG, "Initialized shadow X-axis offset: " + getShadowXOffset());
+        }
+    }
+
+    /**
+     * Initializes the shadow Y-axis offset
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initShadowYOffset(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_shadow_yOffset)) {
+            shadowYOffset = attrs.getDimension(R.styleable.ActionButton_shadow_yOffset, shadowYOffset);
+            Log.v(LOG_TAG, "Initialized shadow Y-axis offset: " + getShadowYOffset());
+        }
+    }
+
+    /**
+     * Initializes the shadow color
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initShadowColor(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_shadow_color)) {
+            shadowColor = attrs.getColor(R.styleable.ActionButton_shadow_color, shadowColor);
+            Log.v(LOG_TAG, "Initialized shadow color: " + getShadowColor());
+        }
+    }
+
+    /**
+     * Initializes the stroke width
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initStrokeWidth(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_stroke_width)) {
+            strokeWidth = attrs.getDimension(R.styleable.ActionButton_stroke_width, strokeWidth);
+            Log.v(LOG_TAG, "Initialized stroke width: " + getStrokeWidth());
+        }
+    }
+
+    /**
+     * Initializes the stroke color
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initStrokeColor(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_stroke_color)) {
+            strokeColor = attrs.getColor(R.styleable.ActionButton_stroke_color, strokeColor);
+            Log.v(LOG_TAG, "Initialized stroke color: " + getStrokeColor());
+        }
+    }
+
+    /**
+     * Initializes the animation, which is used while showing
+     * <b>Action Button</b>
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initShowAnimation(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_show_animation)) {
+            final int animResId = attrs.getResourceId(R.styleable.ActionButton_show_animation,
+                    Animations.NONE.animResId);
+            showAnimation = Animations.load(getContext(), animResId);
+            Log.v(LOG_TAG, "Initialized animation on show");
+        }
+    }
+
+    /**
+     * Initializes the animation, which is used while hiding or dismissing
+     * <b>Action Button</b>
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initHideAnimation(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_hide_animation)) {
+            final int animResId = attrs.getResourceId(R.styleable.ActionButton_hide_animation,
+                    Animations.NONE.animResId);
+            hideAnimation = Animations.load(getContext(), animResId);
+            Log.v(LOG_TAG, "Initialized animation on hide");
+        }
+    }
+
+    /**
+     * Initializes the image inside <b>Action Button</b>
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initImage(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_image)) {
+            image = attrs.getDrawable(R.styleable.ActionButton_image);
+            Log.v(LOG_TAG, "Initialized image");
+        }
+    }
+
+    /**
+     * Initializes the image size inside <b>Action Button</b>
+     * <p>
+     * Changing the default size of the image breaks the rules of
+     * <a href="http://www.google.com/design/spec/components/buttons.html">Material Design</a>
+     *
+     * @param attrs attributes of the XML tag that is inflating the view
+     */
+    private void initImageSize(TypedArray attrs) {
+        if (attrs.hasValue(R.styleable.ActionButton_image_size)) {
+            imageSize = attrs.getDimension(R.styleable.ActionButton_image_size, imageSize);
+            Log.v(LOG_TAG, "Initialized image size: " + getImageSize());
+        }
+    }
+
+    /**
+     * Plays the {@link #showAnimation} if set
+     */
+    public void playShowAnimation() {
+        startAnimation(getShowAnimation());
+    }
+
+    /**
+     * Plays the {@link #hideAnimation} if set
+     */
+    public void playHideAnimation() {
+        startAnimation(getHideAnimation());
+    }
+
+    /**
+     * Makes the <b>Action Button</b> to appear and
+     * sets its visibility to {@link #VISIBLE}
+     * <p>
+     * {@link #showAnimation} is played if set
+     */
+    public void show() {
+        if (isHidden()) {
+            playShowAnimation();
+            setVisibility(VISIBLE);
+            Log.v(LOG_TAG, "Action Button shown");
+        }
+    }
+
+    /**
+     * Makes the <b>Action Button</b> to disappear and
+     * sets its visibility to {@link #INVISIBLE}
+     * <p>
+     * {@link #hideAnimation} is played if set
+     */
+    public void hide() {
+        if (!isHidden() && !isDismissed()) {
+            playHideAnimation();
+            setVisibility(INVISIBLE);
+            Log.v(LOG_TAG, "Action Button hidden");
+        }
+    }
+
+    /**
+     * Completely dismisses the <b>Action Button</b>,
+     * sets its visibility to {@link #GONE} and removes it from the parent view
+     * <p>
+     * After calling this method any calls to {@link #show()} won't result in showing
+     * the <b>Action Button</b> so far as it is removed from the parent View
+     * <p>
+     * {@link #hideAnimation} is played if set
+     */
+    public void dismiss() {
+        if (!isDismissed()) {
+            if (!isHidden()) {
+                playHideAnimation();
+            }
+            setVisibility(GONE);
+            ViewGroup parent = (ViewGroup) getParent();
+            parent.removeView(this);
+            Log.v(LOG_TAG, "Action Button dismissed");
+        }
+    }
+
+    /**
+     * Checks whether <b>Action Button</b> is hidden
+     *
+     * @return true if <b>Action Button</b> is hidden, otherwise false
+     */
+    public boolean isHidden() {
+        return getVisibility() == INVISIBLE;
+    }
+
+    /**
+     * Checks whether <b>Action Button</b> is dismissed
+     *
+     * @return true if <b>Action Button</b> is dismissed, otherwise false
+     */
+    public boolean isDismissed() {
+        ViewGroup parent = (ViewGroup) getParent();
+        return parent == null;
+    }
+
+    /**
+     * Returns the size of the <b>Action Button</b> in actual pixels (px).
+     * Size of the <b>Action Button</b> is the diameter of the main circle
+     *
+     * @return size of the <b>Action Button</b> in actual pixels (px)
+     */
+    public int getButtonSize() {
+        final int buttonSize = (int) type.getSize(getContext());
+        Log.v(LOG_TAG, "Button size is: " + buttonSize);
+        return buttonSize;
+    }
+
+    /**
+     * Returns the type of the <b>Action Button</b>
+     *
+     * @return type of the <b>Action Button</b>
+     */
+    public Type getType() {
+        return type;
+    }
+
+    /**
+     * Sets the type of the <b>Action Button</b> and
+     * invalidates the layout of the view
+     *
+     * @param type type of the <b>Action Button</b>
+     */
+    public void setType(Type type) {
+        this.type = type;
+        requestLayout();
+        Log.v(LOG_TAG, "Type changed to: " + getType());
+    }
+
+    /**
+     * Returns the current state of the <b>Action Button</b>
+     *
+     * @return current state of the <b>Action Button</b>
+     */
+    public State getState() {
+        return state;
+    }
+
+    /**
+     * Sets the current state of the <b>Action Button</b> and
+     * invalidates the view
+     *
+     * @param state new state of the <b>Action Button</b>
+     */
+    public void setState(State state) {
+        this.state = state;
+        invalidate();
+        Log.v(LOG_TAG, "State changed to: " + getState());
+    }
+
+    /**
+     * Returns the <b>Action Button</b> color when in
+     * {@link State#NORMAL} state
+     *
+     * @return <b>Action Button</b> color when in
+     * {@link State#NORMAL} state
+     */
+    public int getButtonColor() {
+        return buttonColor;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> color when in
+     * {@link State#NORMAL} state and invalidates the view
+     *
+     * @param buttonColor <b>Action Button</b> color
+     *                    when in {@link State#NORMAL} state
+     */
+    public void setButtonColor(int buttonColor) {
+        this.buttonColor = buttonColor;
+        invalidate();
+        Log.v(LOG_TAG, "Color changed to: " + getButtonColor());
+    }
+
+    /**
+     * Sets the <b>Action Button</b> color when in
+     * {@link State#PRESSED} state
+     *
+     * @return <b>Action Button</b> color when in
+     * {@link State#PRESSED} state
+     */
+    public int getButtonColorPressed() {
+        return buttonColorPressed;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> color when in
+     * {@link State#PRESSED} state and invalidates the view
+     *
+     * @param buttonColorPressed <b>Action Button</b> color
+     *                           when in {@link State#PRESSED} state
+     */
+    public void setButtonColorPressed(int buttonColorPressed) {
+        this.buttonColorPressed = buttonColorPressed;
+        invalidate();
+        Log.v(LOG_TAG, "Pressed color changed to: " + getButtonColorPressed());
+    }
+
+    /**
+     * Checks whether <b>Action Button</b> has shadow by determining shadow radius
+     * <p>
+     * Shadow is disabled if elevation is set API level is {@code 21 Lollipop} and higher
+     *
+     * @return true if <b>Action Button</b> has radius, otherwise false
+     */
+    public boolean hasShadow() {
+        return !hasElevation() && getShadowRadius() > 0.0f;
+    }
+
+    /**
+     * Returns the <b>Action Button</b> shadow radius in actual
+     * pixels (px)
+     *
+     * @return <b>Action Button</b> shadow radius in actual pixels (px)
+     */
+    public float getShadowRadius() {
+        return shadowRadius;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> shadow radius and
+     * invalidates the layout of the view
+     * <p>
+     * Must be specified in density-independent (dp) pixels, which are
+     * then converted into actual pixels (px). If shadow radius is set to 0,
+     * shadow is removed
+     *
+     * @param shadowRadius shadow radius specified in density-independent
+     *                     (dp) pixels
+     */
+    public void setShadowRadius(float shadowRadius) {
+        this.shadowRadius = MetricsConverter.dpToPx(getContext(), shadowRadius);
+        requestLayout();
+        Log.v(LOG_TAG, "Shadow radius changed to:" + getShadowRadius());
+    }
+
+    /**
+     * Removes the <b>Action Button</b> shadow by setting its radius to 0
+     */
+    public void removeShadow() {
+        if (hasShadow()) {
+            setShadowRadius(0.0f);
+        }
+    }
+
+    /**
+     * Returns the <b>Action Button</b> shadow X-axis offset
+     * in actual pixels (px)
+     * <p>
+     * If X-axis offset is greater than 0 shadow is shifted right.
+     * If X-axis offset is lesser than 0 shadow is shifted left.
+     * 0 X-axis offset means that shadow is not X-axis shifted at all
+     *
+     * @return <b>Action Button</b> shadow X-axis offset
+     * in actual pixels (px)
+     */
+    public float getShadowXOffset() {
+        return shadowXOffset;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> shadow X-axis offset and
+     * invalidates the layout of the view
+     * <p>
+     * If X-axis offset is greater than 0 shadow is shifted right.
+     * If X-axis offset is lesser than 0 shadow is shifted left.
+     * 0 X-axis offset means that shadow is not shifted at all
+     * <p>
+     * Must be specified in density-independent (dp) pixels, which are
+     * then converted into actual pixels (px)
+     *
+     * @param shadowXOffset shadow X-axis offset specified in density-independent
+     *                      (dp) pixels
+     */
+    public void setShadowXOffset(float shadowXOffset) {
+        this.shadowXOffset = MetricsConverter.dpToPx(getContext(), shadowXOffset);
+        requestLayout();
+        Log.v(LOG_TAG, "Shadow X offset changed to: " + getShadowXOffset());
+    }
+
+    /**
+     * Returns the <b>Action Button</b> shadow Y-axis offset
+     * in actual pixels (px)
+     * <p>
+     * If Y-axis offset is greater than 0 shadow is shifted down.
+     * If Y-axis offset is lesser than 0 shadow is shifted up.
+     * 0 Y-axis offset means that shadow is not Y-axis shifted at all
+     *
+     * @return <b>Action Button</b> shadow Y-axis offset
+     * in actual pixels (px)
+     */
+    public float getShadowYOffset() {
+        return shadowYOffset;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> shadow Y-axis offset and
+     * invalidates the layout of the view
+     * <p>
+     * If Y-axis offset is greater than 0 shadow is shifted down.
+     * If Y-axis offset is lesser than 0 shadow is shifted up.
+     * 0 Y-axis offset means that shadow is not Y-axis shifted at all
+     * <p>
+     * Must be specified in density-independent (dp) pixels, which are
+     * then converted into actual pixels (px)
+     *
+     * @param shadowYOffset shadow Y-axis offset specified in density-independent
+     *                      (dp) pixels
+     */
+    public void setShadowYOffset(float shadowYOffset) {
+        this.shadowYOffset = MetricsConverter.dpToPx(getContext(), shadowYOffset);
+        requestLayout();
+        Log.v(LOG_TAG, "Shadow Y offset changed to:" + getShadowYOffset());
+    }
+
+    /**
+     * Returns <b>Action Button</b> shadow color
+     *
+     * @return <b>Action Button</b> shadow color
+     */
+    public int getShadowColor() {
+        return shadowColor;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> shadow color and
+     * invalidates the view
+     *
+     * @param shadowColor <b>Action Button</b> color
+     */
+    public void setShadowColor(int shadowColor) {
+        this.shadowColor = shadowColor;
+        invalidate();
+        Log.v(LOG_TAG, "Shadow color changed to: " + getShadowColor());
+    }
+
+    /**
+     * Returns the <b>Action Button</b> stroke width in actual
+     * pixels (px)
+     *
+     * @return <b>Action Button</b> stroke width in actual
+     * pixels (px)
+     */
+    public float getStrokeWidth() {
+        return strokeWidth;
+    }
+
+    /**
+     * Checks whether <b>Action Button</b> has stroke by checking
+     * stroke width
+     *
+     * @return true if <b>Action Button</b> has stroke, otherwise false
+     */
+    public boolean hasStroke() {
+        return getStrokeWidth() > 0.0f;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> stroke width and
+     * invalidates the layout of the view
+     * <p>
+     * Stroke width value must be greater than 0. If stroke width is
+     * set to 0 stroke is removed
+     * <p>
+     * Must be specified in density-independent (dp) pixels, which are
+     * then converted into actual pixels (px)
+     *
+     * @param strokeWidth stroke width specified in density-independent
+     *                    (dp) pixels
+     */
+    public void setStrokeWidth(float strokeWidth) {
+        this.strokeWidth = MetricsConverter.dpToPx(getContext(), strokeWidth);
+        requestLayout();
+        Log.v(LOG_TAG, "Stroke width changed to: " + getStrokeWidth());
+    }
+
+    /**
+     * Removes the <b>Action Button</b> stroke by setting its width to 0
+     */
+    public void removeStroke() {
+        if (hasStroke()) {
+            setStrokeWidth(0.0f);
+        }
+    }
+
+    /**
+     * Returns the <b>Action Button</b> stroke color
+     *
+     * @return <b>Action Button</b> stroke color
+     */
+    public int getStrokeColor() {
+        return strokeColor;
+    }
+
+    /**
+     * Sets the <b>Action Button</b> stroke color and
+     * invalidates the view
+     *
+     * @param strokeColor <b>Action Button</b> stroke color
+     */
+    public void setStrokeColor(int strokeColor) {
+        this.strokeColor = strokeColor;
+        invalidate();
+        Log.v(LOG_TAG, "Stroke color changed to: " + getStrokeColor());
+    }
+
+    /**
+     * Returns the <b>Action Button</b> image drawable centered
+     * inside the view
+     *
+     * @return <b>Action Button</b> image drawable centered
+     * inside the view
+     */
+    public Drawable getImage() {
+        return image;
+    }
+
+    /**
+     * Checks whether <b>Action Button</b> has an image centered
+     * inside the view
+     *
+     * @return true if <b>Action Button</b> has an image centered
+     * inside the view, otherwise false
+     */
+    public boolean hasImage() {
+        return getImage() != null;
+    }
+
+    /**
+     * Places the image drawable centered inside the view and
+     * invalidates the view
+     * <p>
+     * Size of the image while drawing is fit to {@link #imageSize}
+     *
+     * @param image image drawable, which will be placed centered
+     *              inside the view
+     */
+    public void setImageDrawable(Drawable image) {
+        this.image = image;
+        invalidate();
+        Log.v(LOG_TAG, "Image drawable set");
+    }
+
+    /**
+     * Resolves the drawable resource id and places the resolved image drawable
+     * centered inside the view
+     *
+     * @param resId drawable resource id, which is to be resolved to
+     *              image drawable and used as parameter when calling
+     *              {@link #setImageDrawable(Drawable)}
+     */
+    @SuppressWarnings("deprecation")
+    public void setImageResource(int resId) {
+        setImageDrawable(getResources().getDrawable(resId));
+    }
+
+    /**
+     * Creates the {@link BitmapDrawable} from the given
+     * {@link Bitmap} and places it centered inside the view
+     *
+     * @param bitmap bitmap, from which {@link BitmapDrawable}
+     *               is created and used as parameter when calling
+     *               {@link #setImageDrawable(Drawable)}
+     */
+    public void setImageBitmap(Bitmap bitmap) {
+        setImageDrawable(new BitmapDrawable(getResources(), bitmap));
+    }
+
+    /**
+     * Removes the <b>Action Button</b> image by setting its value to null
+     */
+    public void removeImage() {
+        if (hasImage()) {
+            setImageDrawable(null);
+        }
+    }
+
+    /**
+     * Returns the <b>Action Button</b> image size in actual pixels (px).
+     * If <b>Action Button</b> image is not set returns 0
+     *
+     * @return <b>Action Button</b> image size in actual pixels (px),
+     * 0 if image is not set
+     */
+    public float getImageSize() {
+        return getImage() != null ? imageSize : 0.0f;
+    }
+
+    /**
+     * Sets the size of the <b>Action Button</b> image
+     * <p>
+     * Changing the default size of the image breaks the rules of
+     * <a href="http://www.google.com/design/spec/components/buttons.html">Material Design</a>
+     * <p>
+     * Must be specified in density-independent (dp) pixels, which are
+     * then converted into actual pixels (px)
+     *
+     * @param size size of the <b>Action Button</b> image
+     *             specified in density-independent (dp) pixels
+     */
+    public void setImageSize(float size) {
+        this.imageSize = MetricsConverter.dpToPx(getContext(), size);
+        Log.v(LOG_TAG, "Image size changed to: " + getImageSize());
+    }
+
+    /**
+     * Returns an animation, which is used while showing <b>Action Button</b>
+     *
+     * @return animation, which is used while showing <b>Action Button</b>
+     */
+    public Animation getShowAnimation() {
+        return showAnimation;
+    }
+
+    /**
+     * Sets the animation, which is used while showing <b>Action Button</b>
+     *
+     * @param animation animation, which is to be used while showing
+     *                  <b>Action Button</b>
+     */
+    public void setShowAnimation(Animation animation) {
+        this.showAnimation = animation;
+        Log.v(LOG_TAG, "Show animation set");
+    }
+
+    /**
+     * Sets one of the {@link Animations} as animation, which is used while showing
+     * <b>Action Button</b>
+     *
+     * @param animation one of the {@link Animations}, which is to be used while
+     *                  showing <b>Action Button</b>
+     */
+    public void setShowAnimation(Animations animation) {
+        setShowAnimation(Animations.load(getContext(), animation.animResId));
+    }
+
+    /**
+     * Removes the animation, which is used while showing <b>Action Button</b>
+     */
+    public void removeShowAnimation() {
+        setShowAnimation(Animations.NONE);
+        Log.v(LOG_TAG, "Show animation removed");
+    }
+
+    /**
+     * Returns an animation, which is used while hiding <b>Action Button</b>
+     *
+     * @return animation, which is used while hiding <b>Action Button</b>
+     */
+    public Animation getHideAnimation() {
+        return hideAnimation;
+    }
+
+    /**
+     * Sets the animation, which is used while hiding <b>Action Button</b>
+     *
+     * @param animation animation, which is to be used while hiding
+     *                  <b>Action Button</b>
+     */
+    public void setHideAnimation(Animation animation) {
+        this.hideAnimation = animation;
+        Log.v(LOG_TAG, "Hide animation set");
+    }
+
+    /**
+     * Sets one of the {@link Animations} as animation, which is used while hiding
+     * <b>Action Button</b>
+     *
+     * @param animation one of the {@link Animations}, which is to be used while
+     *                  hiding <b>Action Button</b>
+     */
+    public void setHideAnimation(Animations animation) {
+        setHideAnimation(Animations.load(getContext(), animation.animResId));
+    }
+
+    public void removeHideAnimation() {
+        setHideAnimation(Animations.NONE);
+        Log.v(LOG_TAG, "Hide animation removed");
+    }
+
+    /**
+     * Adds additional actions on motion events:
+     * 1. Changes the <b>Action Button</b> {@link #state} to {@link State#PRESSED}
+     * on {@link MotionEvent#ACTION_DOWN}
+     * 2. Changes the <b>Action Button</b> {@link #state} to {@link State#NORMAL}
+     * on {@link MotionEvent#ACTION_UP}
+     *
+     * @param event motion event
+     * @return true if event was handled, otherwise false
+     */
+    @SuppressWarnings("all")
+    @SuppressLint("ClickableViewAccessibility")
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        super.onTouchEvent(event);
+        final int action = event.getAction();
+        switch (action) {
+            case MotionEvent.ACTION_DOWN:
+                Log.v(LOG_TAG, "Motion event action down detected");
+                setState(State.PRESSED);
+                return true;
+            case MotionEvent.ACTION_UP:
+                Log.v(LOG_TAG, "Motion event action up detected");
+                setState(State.NORMAL);
+                return true;
+            default:
+                Log.v(LOG_TAG, "Unrecognized motion event detected");
+                return false;
+        }
+    }
+
+    /**
+     * Adds additional checking whether animation is null before starting to play it
+     *
+     * @param animation animation to play
+     */
+    @SuppressWarnings("all")
+    @Override
+    public void startAnimation(Animation animation) {
+        if (animation != null) {
+            super.startAnimation(animation);
+        }
+    }
+
+    /**
+     * Resets the paint to its default values and sets initial flags to it
+     * <p>
+     * Use this method before drawing the new element of the view
+     */
+    protected final void resetPaint() {
+        paint.reset();
+        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
+        Log.v(LOG_TAG, "Paint reset");
+    }
+
+    /**
+     * Draws the elements of the <b>Action Button</b>
+     *
+     * @param canvas canvas, on which the drawing is to be performed
+     */
+    @SuppressWarnings("all")
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        Log.v(LOG_TAG, "Action Button onDraw called");
+        drawCircle(canvas);
+        if (hasElevation()) {
+            drawElevation();
+        }
+        if (hasStroke()) {
+            drawStroke(canvas);
+        }
+        if (hasImage()) {
+            drawImage(canvas);
+        }
+    }
+
+    /**
+     * Draws the main circle of the <b>Action Button</b> and calls
+     * {@link #drawShadow()} to draw the shadow if present
+     *
+     * @param canvas canvas, on which circle is to be drawn
+     */
+    protected void drawCircle(Canvas canvas) {
+        resetPaint();
+        if (hasShadow()) {
+            drawShadow();
+        }
+        paint.setStyle(Paint.Style.FILL);
+        paint.setColor(getState() == State.PRESSED ? getButtonColorPressed() : getButtonColor());
+        canvas.drawCircle(calculateCenterX(), calculateCenterY(), calculateCircleRadius(), paint);
+        Log.v(LOG_TAG, "Circle drawn");
+    }
+
+    /**
+     * Calculates the X-axis center coordinate of the entire view
+     *
+     * @return X-axis center coordinate of the entire view
+     */
+    protected float calculateCenterX() {
+        final float centerX = getMeasuredWidth() / 2;
+        Log.v(LOG_TAG, "Calculated center X = " + centerX);
+        return centerX;
+    }
+
+    /**
+     * Calculates the Y-axis center coordinate of the entire view
+     *
+     * @return Y-axis center coordinate of the entire view
+     */
+    protected float calculateCenterY() {
+        final float centerY = getMeasuredHeight() / 2;
+        Log.v(LOG_TAG, "Calculated center Y = " + centerY);
+        return centerY;
+    }
+
+    /**
+     * Calculates the radius of the main circle
+     *
+     * @return radius of the main circle
+     */
+    protected final float calculateCircleRadius() {
+        final float circleRadius = getButtonSize() / 2;
+        Log.v(LOG_TAG, "Calculated circle circleRadius = " + circleRadius);
+        return circleRadius;
+    }
+
+    /**
+     * Draws the shadow if view elevation is not enabled
+     */
+    protected void drawShadow() {
+        paint.setShadowLayer(getShadowRadius(), getShadowXOffset(), getShadowYOffset(), getShadowColor());
+        Log.v(LOG_TAG, "Shadow drawn");
+    }
+
+    /**
+     * Draws the elevation around the main circle
+     * <p>
+     * Uses the stroke corrective, which helps to avoid the elevation overlapping issue
+     */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    protected void drawElevation() {
+        final int strokeWeightCorrective = (int) (getStrokeWidth() / 1.5f);
+        final int width = getWidth() - strokeWeightCorrective;
+        final int height = getHeight() - strokeWeightCorrective;
+        final ViewOutlineProvider outlineProvider = new ActionButtonOutlineProvider(width, height);
+        setOutlineProvider(outlineProvider);
+        Log.v(LOG_TAG, "Elevation drawn");
+    }
+
+    /**
+     * Checks whether view elevation is enabled
+     *
+     * @return true if view elevation enabled, otherwise false
+     */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    private boolean hasElevation() {
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && getElevation() > 0.0f;
+    }
+
+    /**
+     * Draws stroke around the main circle
+     *
+     * @param canvas canvas, on which circle is to be drawn
+     */
+    protected void drawStroke(Canvas canvas) {
+        resetPaint();
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeWidth(getStrokeWidth());
+        paint.setColor(getStrokeColor());
+        canvas.drawCircle(calculateCenterX(), calculateCenterY(), calculateCircleRadius(), paint);
+        Log.v(LOG_TAG, "Stroke drawn");
+    }
+
+    /**
+     * Draws the image centered inside the view
+     *
+     * @param canvas canvas, on which circle is to be drawn
+     */
+    protected void drawImage(Canvas canvas) {
+        final int startPointX = (int) (calculateCenterX() - getImageSize() / 2);
+        final int startPointY = (int) (calculateCenterY() - getImageSize() / 2);
+        final int endPointX = (int) (startPointX + getImageSize());
+        final int endPointY = (int) (startPointY + getImageSize());
+        getImage().setBounds(startPointX, startPointY, endPointX, endPointY);
+        getImage().draw(canvas);
+        Log.v(LOG_TAG, String.format("Image drawn on canvas with coordinates: startPointX = %s, startPointY = %s, " +
+                "endPointX = %s, endPointY = %s", startPointX, startPointY, endPointX, endPointY));
+    }
+
+    /**
+     * Sets the measured dimension for the entire view
+     *
+     * @param widthMeasureSpec  horizontal space requirements as imposed by the parent.
+     *                          The requirements are encoded with
+     *                          {@link MeasureSpec}
+     * @param heightMeasureSpec vertical space requirements as imposed by the parent.
+     *                          The requirements are encoded with
+     *                          {@link MeasureSpec}
+     */
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        Log.v(LOG_TAG, "Action Button onMeasure called");
+        setMeasuredDimension(calculateMeasuredWidth(), calculateMeasuredHeight());
+        Log.v(LOG_TAG, String.format("View size measured with: height = %s, width = %s", getHeight(), getWidth()));
+    }
+
+    /**
+     * Calculates the measured width in actual pixels for the entire view
+     *
+     * @return measured width in actual pixels for the entire view
+     */
+    private int calculateMeasuredWidth() {
+        final int measuredWidth = getButtonSize() + calculateShadowWidth() + calculateStrokeWeight();
+        Log.v(LOG_TAG, "Calculated measured width = " + measuredWidth);
+        return measuredWidth;
+    }
+
+    /**
+     * Calculates the measured height in actual pixels for the entire view
+     *
+     * @return measured width in actual pixels for the entire view
+     */
+    private int calculateMeasuredHeight() {
+        final int measuredHeight = getButtonSize() + calculateShadowHeight() + calculateStrokeWeight();
+        Log.v(LOG_TAG, "Calculated measured height = " + measuredHeight);
+        return measuredHeight;
+    }
+
+    /**
+     * Calculates shadow width in actual pixels
+     *
+     * @return shadow width in actual pixels
+     */
+    private int calculateShadowWidth() {
+        final int shadowWidth = hasShadow() ? (int) ((getShadowRadius() + Math.abs(getShadowXOffset())) * 2) : 0;
+        Log.v(LOG_TAG, "Calculated shadow width = " + shadowWidth);
+        return shadowWidth;
+    }
+
+    /**
+     * Calculates shadow height in actual pixels
+     *
+     * @return shadow height in actual pixels
+     */
+    private int calculateShadowHeight() {
+        final int shadowHeight = hasShadow() ? (int) ((getShadowRadius() + Math.abs(getShadowYOffset())) * 2) : 0;
+        Log.v(LOG_TAG, "Calculated shadow height = " + shadowHeight);
+        return shadowHeight;
+    }
+
+    /**
+     * Calculates the stroke weight in actual pixels
+     * *
+     *
+     * @return stroke weight in actual pixels
+     */
+    private int calculateStrokeWeight() {
+        final int strokeWeight = (int) (getStrokeWidth() * 2.0f);
+        Log.v(LOG_TAG, "Calculated stroke weight is: " + strokeWeight);
+        return strokeWeight;
+    }
+
+    /**
+     * Determines the <b>Action Button</b> types
+     */
+    public enum Type {
+
+        /**
+         * <b>Action Button</b> default (56dp) type
+         */
+        DEFAULT {
+            @Override
+            int getId() {
+                return 0;
+            }
+
+            @Override
+            float getSize(Context context) {
+                return MetricsConverter.dpToPx(context, 56.0f);
+            }
+        },
+
+        /**
+         * <b>Action Button</b> mini (40dp) type
+         */
+        MINI {
+            @Override
+            int getId() {
+                return 1;
+            }
+
+            @Override
+            float getSize(Context context) {
+                return MetricsConverter.dpToPx(context, 40.0f);
+            }
+        };
+
+        /**
+         * Returns an {@code id} for specific <b>Action Button</b>
+         * type, which is defined in attributes
+         *
+         * @return {@code id} for particular <b>Action Button</b> type,
+         * which is defined in attributes
+         */
+        abstract int getId();
+
+        /**
+         * Returns the size of the specific type of the <b>Action Button</b>
+         *
+         * @param context context the view is running in
+         * @return size of the particular type of the <b>Action Button</b>
+         */
+        abstract float getSize(Context context);
+
+        /**
+         * Returns the <b>Action Button</b> type for a specific {@code id}
+         *
+         * @param id an {@code id}, for which <b>Action Button</b> type required
+         * @return <b>Action Button</b> type
+         */
+        static Type forId(int id) {
+            for (Type type : values()) {
+                if (type.getId() == id) {
+                    return type;
+                }
+            }
+            return DEFAULT;
+        }
+
+    }
+
+    /**
+     * Determines the <b>Action Button</b> states
+     */
+    public enum State {
+
+        /**
+         * <b>Action Button</b> normal state
+         */
+        NORMAL,
+
+        /**
+         * <b>Action Button</b> pressed state
+         */
+        PRESSED
+
+    }
+
+    public enum Animations {
+
+        /**
+         * None. Animation absent
+         */
+        NONE(0),
+
+        /**
+         * Fade in animation
+         */
+        FADE_IN(R.anim.mmt_fade_in),
+
+        /**
+         * Fade out animation
+         */
+        FADE_OUT(R.anim.mmt_fade_out),
+
+        /**
+         * Scale up animation
+         */
+        SCALE_UP(R.anim.mmt_scale_up),
+
+        /**
+         * Scale down animation
+         */
+        SCALE_DOWN(R.anim.mmt_scale_down),
+
+        /**
+         * Roll from down animation
+         */
+        ROLL_FROM_DOWN(R.anim.mmt_roll_from_down),
+
+        /**
+         * Roll to down animation
+         */
+        ROLL_TO_DOWN(R.anim.mmt_roll_to_down),
+
+        /**
+         * Roll from right animation
+         */
+        ROLL_FROM_RIGHT(R.anim.mmt_roll_from_right),
+
+        /**
+         * Roll to right animation
+         */
+        ROLL_TO_RIGHT(R.anim.mmt_roll_to_right),
+
+        /**
+         * Jump from down animation
+         */
+        JUMP_FROM_DOWN(R.anim.mmt_jump_from_down),
+
+        /**
+         * Jump to down animation
+         */
+        JUMP_TO_DOWN(R.anim.mmt_jump_to_down),
+
+        /**
+         * Jump from right animation
+         */
+        JUMP_FROM_RIGHT(R.anim.mmt_jump_from_right),
+
+        /**
+         * Jump to right animation
+         */
+        JUMP_TO_RIGHT(R.anim.mmt_jump_to_right);
+
+        /**
+         * Correspondent animation resource id
+         */
+        final int animResId;
+
+        private Animations(int animResId) {
+            this.animResId = animResId;
+        }
+
+        /**
+         * Loads an animation from animation resource id
+         *
+         * @param context   context the view is running in
+         * @param animResId resource id of the animation, which is to be loaded
+         * @return loaded animation
+         */
+        protected static Animation load(Context context, int animResId) {
+            return animResId == NONE.animResId ? null : AnimationUtils.loadAnimation(context, animResId);
+        }
+
+    }
+
+}
diff --git a/madmanLib/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java b/qDict/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java
similarity index 50%
rename from madmanLib/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java
rename to qDict/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java
index ad067c7..47090bf 100644
--- a/madmanLib/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java
+++ b/qDict/src/main/java/com/mmt/widget/ActionButtonOutlineProvider.java
@@ -25,10 +25,10 @@ import android.view.View;
 import android.view.ViewOutlineProvider;
 
 /**
- * An implementation of the {@link android.view.ViewOutlineProvider}
+ * An implementation of the {@link ViewOutlineProvider}
  * for <b>Action Button</b>
- * 
- * Used for drawing the elevation shadow for {@code API 21 Lollipop} and higher 
+ * <p>
+ * Used for drawing the elevation shadow for {@code API 21 Lollipop} and higher
  *
  * @author Vladislav
  * @version 1.0.0
@@ -36,39 +36,39 @@ import android.view.ViewOutlineProvider;
  */
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 class ActionButtonOutlineProvider extends ViewOutlineProvider {
-	
-	/**
-	 * Outline provider width 
-	 */
-	private int width;
 
-	/**
-	 * Outline provider height
-	 */
-	private int height;
+    /**
+     * Outline provider width
+     */
+    private int width;
 
-	/**
-	 * Creates an instance of the {@link com.mmt.widget.ActionButtonOutlineProvider}
-	 *  
-	 * @param width initial outline provider width
-	 * @param height initial outline provider height
-	 */
-	ActionButtonOutlineProvider(int width, int height) {
-		this.width = width;
-		this.height = height;
-	}
+    /**
+     * Outline provider height
+     */
+    private int height;
+
+    /**
+     * Creates an instance of the {@link ActionButtonOutlineProvider}
+     *
+     * @param width  initial outline provider width
+     * @param height initial outline provider height
+     */
+    ActionButtonOutlineProvider(int width, int height) {
+        this.width = width;
+        this.height = height;
+    }
+
+    /**
+     * Called to get the provider to populate the Outline. This method will be called by a View
+     * when its owned Drawables are invalidated, when the View's size changes, or if invalidateOutline()
+     * is called explicitly. The input outline is empty and has an alpha of 1.0f
+     *
+     * @param view    a view, which builds the outline
+     * @param outline an empty outline, which is to be populated
+     */
+    @Override
+    public void getOutline(View view, Outline outline) {
+        outline.setOval(0, 0, width, height);
+    }
 
-	/**
-	 * Called to get the provider to populate the Outline. This method will be called by a View 
-	 * when its owned Drawables are invalidated, when the View's size changes, or if invalidateOutline()
-	 * is called explicitly. The input outline is empty and has an alpha of 1.0f
-	 *
-	 * @param view a view, which builds the outline
-	 * @param outline an empty outline, which is to be populated
-	 */
-	@Override
-	public void getOutline(View view, Outline outline) {
-		outline.setOval(0, 0, width, height);
-	}
-	
 }
diff --git a/qDict/src/main/java/com/mmt/widget/DragSortListView.java b/qDict/src/main/java/com/mmt/widget/DragSortListView.java
index 61fc981..42bee1b 100644
--- a/qDict/src/main/java/com/mmt/widget/DragSortListView.java
+++ b/qDict/src/main/java/com/mmt/widget/DragSortListView.java
@@ -729,8 +729,6 @@ public class DragSortListView extends ListView {
      *
      * @param position
      * @param top
-     * @param height   Height of item at position. If -1, this function calculates
-     *                 this height.
      * @return Shuffle line between position-1 and position (for the given view
      * of the list; that is, for when top of item at position has
      * y-coord of given `top`). If floating View (treated as horizontal
diff --git a/qDict/src/main/java/com/mmt/widget/M2tToast.java b/qDict/src/main/java/com/mmt/widget/M2tToast.java
index 635c053..8995348 100644
--- a/qDict/src/main/java/com/mmt/widget/M2tToast.java
+++ b/qDict/src/main/java/com/mmt/widget/M2tToast.java
@@ -33,7 +33,7 @@ public class M2tToast extends Toast {
         LayoutInflater inflate = (LayoutInflater) context.getApplicationContext()
                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         View v = inflate.inflate(R.layout.transient_notification, null);
-        tvMessage = (TextView) v.findViewById(android.R.id.message);
+        tvMessage = v.findViewById(android.R.id.message);
         tvMessage.setGravity(Gravity.CENTER_VERTICAL);
         tvMessage.setText(text);
         tvMessage.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
diff --git a/madmanLib/src/main/java/com/mmt/widget/MetricsConverter.java b/qDict/src/main/java/com/mmt/widget/MetricsConverter.java
similarity index 61%
rename from madmanLib/src/main/java/com/mmt/widget/MetricsConverter.java
rename to qDict/src/main/java/com/mmt/widget/MetricsConverter.java
index ac785bd..b20a376 100644
--- a/madmanLib/src/main/java/com/mmt/widget/MetricsConverter.java
+++ b/qDict/src/main/java/com/mmt/widget/MetricsConverter.java
@@ -29,22 +29,22 @@ import android.content.Context;
  */
 public final class MetricsConverter {
 
-	/**
-	 * Prevents from creating {@link com.mmt.widget.MetricsConverter} instances 
-	 */
-	private MetricsConverter() {
-	}
+    /**
+     * Prevents from creating {@link MetricsConverter} instances
+     */
+    private MetricsConverter() {
+    }
+
+    /**
+     * Converts the density-independent value into real pixel value based on display metrics
+     *
+     * @param context application context
+     * @param dp      density-independent value
+     * @return converted real pixel value
+     */
+    public static float dpToPx(Context context, float dp) {
+        final float scale = context.getResources().getDisplayMetrics().density;
+        return dp * scale;
+    }
 
-	/**
-	 * Converts the density-independent value into real pixel value based on display metrics
-	 *
-	 * @param context application context
-	 * @param dp density-independent value
-	 * @return converted real pixel value
-	 */
-	public static float dpToPx(Context context, float dp) {
-		final float scale = context.getResources().getDisplayMetrics().density;
-		return dp * scale;
-	}
-	
 }
diff --git a/qDict/src/main/java/com/mmt/widget/QButton.java b/qDict/src/main/java/com/mmt/widget/QButton.java
index 4ef6d3e..b23e127 100644
--- a/qDict/src/main/java/com/mmt/widget/QButton.java
+++ b/qDict/src/main/java/com/mmt/widget/QButton.java
@@ -5,7 +5,8 @@ import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.Typeface;
 import android.util.AttributeSet;
-import android.widget.Button;
+
+import androidx.appcompat.widget.AppCompatButton;
 
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
@@ -13,7 +14,7 @@ import com.annie.dictionary.utils.Utils.Def;
 /**
  * Extends widget.Button: Custom font for Button
  */
-public class QButton extends Button {
+public class QButton extends AppCompatButton {
 
     public QButton(Context context, AttributeSet attrs) {
         super(context, attrs);
diff --git a/qDict/src/main/java/com/mmt/widget/QCheckedTextView.java b/qDict/src/main/java/com/mmt/widget/QCheckedTextView.java
index 1193e41..380b357 100644
--- a/qDict/src/main/java/com/mmt/widget/QCheckedTextView.java
+++ b/qDict/src/main/java/com/mmt/widget/QCheckedTextView.java
@@ -5,7 +5,8 @@ import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.Typeface;
 import android.util.AttributeSet;
-import android.widget.CheckedTextView;
+
+import androidx.appcompat.widget.AppCompatCheckedTextView;
 
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
@@ -13,7 +14,7 @@ import com.annie.dictionary.utils.Utils.Def;
 /**
  * Extends widget.CheckedTextView: Custom font for CheckedTextView
  */
-public class QCheckedTextView extends CheckedTextView {
+public class QCheckedTextView extends AppCompatCheckedTextView {
 
     public QCheckedTextView(Context context, AttributeSet attrs) {
         super(context, attrs);
diff --git a/qDict/src/main/java/com/mmt/widget/QEditText.java b/qDict/src/main/java/com/mmt/widget/QEditText.java
index e1c054a..bbaa574 100644
--- a/qDict/src/main/java/com/mmt/widget/QEditText.java
+++ b/qDict/src/main/java/com/mmt/widget/QEditText.java
@@ -5,7 +5,8 @@ import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.Typeface;
 import android.util.AttributeSet;
-import android.widget.EditText;
+
+import androidx.appcompat.widget.AppCompatEditText;
 
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
@@ -13,7 +14,7 @@ import com.annie.dictionary.utils.Utils.Def;
 /**
  * Extends widget.EditText: Custom font for EditText
  */
-public class QEditText extends EditText {
+public class QEditText extends AppCompatEditText {
 
     public QEditText(Context context, AttributeSet attrs) {
         super(context, attrs);
diff --git a/qDict/src/main/java/com/mmt/widget/QTextView.java b/qDict/src/main/java/com/mmt/widget/QTextView.java
index 06f04d3..f42889d 100644
--- a/qDict/src/main/java/com/mmt/widget/QTextView.java
+++ b/qDict/src/main/java/com/mmt/widget/QTextView.java
@@ -5,7 +5,8 @@ import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.Typeface;
 import android.util.AttributeSet;
-import android.widget.TextView;
+
+import androidx.appcompat.widget.AppCompatTextView;
 
 import com.annie.dictionary.utils.Utils;
 import com.annie.dictionary.utils.Utils.Def;
@@ -13,7 +14,7 @@ import com.annie.dictionary.utils.Utils.Def;
 /**
  * Extends View.TextView: Custom font for TextView
  */
-public class QTextView extends TextView {
+public class QTextView extends AppCompatTextView {
 
     public QTextView(Context context, AttributeSet attrs) {
         super(context, attrs);
diff --git a/qDict/src/main/java/com/mmt/widget/SlidingUpPanelLayout.java b/qDict/src/main/java/com/mmt/widget/SlidingUpPanelLayout.java
index b2b213e..5901dc4 100644
--- a/qDict/src/main/java/com/mmt/widget/SlidingUpPanelLayout.java
+++ b/qDict/src/main/java/com/mmt/widget/SlidingUpPanelLayout.java
@@ -1,6 +1,5 @@
 package com.mmt.widget;
 
-import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
@@ -8,11 +7,8 @@ import android.graphics.Paint;
 import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.support.v4.view.MotionEventCompat;
-import android.support.v4.view.ViewCompat;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -20,9 +16,11 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
 
+import androidx.core.view.MotionEventCompat;
+import androidx.core.view.ViewCompat;
+
 import com.annie.dictionary.R;
 import com.mmt.widget.slidemenu.SlidingMenu;
-import com.nineoldandroids.view.animation.AnimatorProxy;
 
 public class SlidingUpPanelLayout extends ViewGroup {
 
@@ -355,7 +353,6 @@ public class SlidingUpPanelLayout extends ViewGroup {
         if (getPanelState() == PanelState.COLLAPSED) {
             smoothToBottom();
             invalidate();
-            return;
         }
     }
 
@@ -420,21 +417,18 @@ public class SlidingUpPanelLayout extends ViewGroup {
             mDragView.setClickable(true);
             mDragView.setFocusable(false);
             mDragView.setFocusableInTouchMode(false);
-            mDragView.setOnClickListener(new OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (!isEnabled() || !isTouchEnabled())
-                        return;
-                    if (mSlideState != PanelState.EXPANDED
+            mDragView.setOnClickListener(v -> {
+                if (!isEnabled() || !isTouchEnabled())
+                    return;
+                if (mSlideState != PanelState.EXPANDED
                     /* && mSlideState != PanelState.ANCHORED */) {
-                        if (mAnchorPoint < 1.0f) {
-                            setPanelState(PanelState.HIDDEN); // old COLLAPSED
-                        } else {
-                            setPanelState(PanelState.EXPANDED);
-                        }
-                    } else {
+                    if (mAnchorPoint < 1.0f) {
                         setPanelState(PanelState.HIDDEN); // old COLLAPSED
+                    } else {
+                        setPanelState(PanelState.EXPANDED);
                     }
+                } else {
+                    setPanelState(PanelState.HIDDEN); // old COLLAPSED
                 }
             });
             ;
@@ -499,7 +493,7 @@ public class SlidingUpPanelLayout extends ViewGroup {
     /**
      * Sets whether or not the main content is clipped to the top of the panel
      *
-     * @param overlayed
+     * @param clip
      */
     public void setClipPanel(boolean clip) {
         mClipPanel = clip;
@@ -912,15 +906,9 @@ public class SlidingUpPanelLayout extends ViewGroup {
     /**
      * Update the parallax based on the current slide offset.
      */
-    @SuppressLint("NewApi")
     private void applyParallaxForCurrentSlideOffset() {
         if (mParallaxOffset > 0) {
-            int mainViewOffset = getCurrentParalaxOffset();
-            if (Build.VERSION.SDK_INT > 10) {
-                mMainView.setTranslationY(mainViewOffset);
-            } else {
-                AnimatorProxy.wrap(mMainView).setTranslationY(mainViewOffset);
-            }
+            mMainView.setTranslationY(getCurrentParalaxOffset());
         }
     }
 
@@ -951,7 +939,7 @@ public class SlidingUpPanelLayout extends ViewGroup {
     @Override
     protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
         boolean result;
-        final int save = canvas.save(Canvas.CLIP_SAVE_FLAG);
+        final int save = canvas.save();
 
         if (mSlideableView != child) { // if main view
             // Clip against the slider; no sense drawing what will immediately
@@ -1159,32 +1147,6 @@ public class SlidingUpPanelLayout extends ViewGroup {
         public void onPanelHidden(View panel);
     }
 
-    /**
-     * No-op stubs for {@link PanelSlideListener}. If you only want to implement
-     * a subset of the listener methods you can extend this instead of implement
-     * the full interface.
-     */
-    public static class SimplePanelSlideListener implements PanelSlideListener {
-        @Override
-        public void onPanelSlide(View panel, float slideOffset) {
-        }
-
-        @Override
-        public void onPanelCollapsed(View panel) {
-        }
-
-        @Override
-        public void onPanelExpanded(View panel) {
-        }
-
-        @Override
-        public void onPanelAnchored(View panel) {
-        }
-
-        @Override
-        public void onPanelHidden(View panel) {
-        }
-    }
 
     public static class LayoutParams extends ViewGroup.MarginLayoutParams {
         private static final int[] ATTRS = new int[]{
diff --git a/qDict/src/main/java/com/mmt/widget/ViewDragHelper.java b/qDict/src/main/java/com/mmt/widget/ViewDragHelper.java
index 67d1646..eae84c4 100644
--- a/qDict/src/main/java/com/mmt/widget/ViewDragHelper.java
+++ b/qDict/src/main/java/com/mmt/widget/ViewDragHelper.java
@@ -17,16 +17,13 @@
 package com.mmt.widget;
 
 import android.content.Context;
-import android.support.v4.view.MotionEventCompat;
-import android.support.v4.view.VelocityTrackerCompat;
-import android.support.v4.view.ViewCompat;
-import android.support.v4.widget.ScrollerCompat;
 import android.view.MotionEvent;
 import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.view.animation.Interpolator;
+import android.widget.OverScroller;
 
 import java.util.Arrays;
 
@@ -108,11 +105,9 @@ public class ViewDragHelper {
     /**
      * Interpolator defining the animation curve for mScroller
      */
-    private static final Interpolator sInterpolator = new Interpolator() {
-        public float getInterpolation(float t) {
-            t -= 1.0f;
-            return t * t * t * t * t + 1.0f;
-        }
+    private static final Interpolator sInterpolator = t -> {
+        t -= 1.0f;
+        return t * t * t * t * t + 1.0f;
     };
     private final Callback mCallback;
     private final ViewGroup mParentView;
@@ -135,13 +130,9 @@ public class ViewDragHelper {
     private float mMinVelocity;
     private int mEdgeSize;
     private int mTrackingEdges;
-    private ScrollerCompat mScroller;
+    private OverScroller mScroller;
     private View mCapturedView;
-    private final Runnable mSetIdleRunnable = new Runnable() {
-        public void run() {
-            setDragState(STATE_IDLE);
-        }
-    };
+    private final Runnable mSetIdleRunnable = () -> setDragState(STATE_IDLE);
     private boolean mReleaseInProgress;
 
     /**
@@ -170,7 +161,7 @@ public class ViewDragHelper {
         mTouchSlop = vc.getScaledTouchSlop();
         mMaxVelocity = vc.getScaledMaximumFlingVelocity();
         mMinVelocity = vc.getScaledMinimumFlingVelocity();
-        mScroller = ScrollerCompat.create(context, sInterpolator);
+        mScroller = new OverScroller(context, sInterpolator);
     }
 
     /**
@@ -384,8 +375,8 @@ public class ViewDragHelper {
         }
 
         return forceSettleCapturedViewAt(finalLeft, finalTop,
-                (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),
-                (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId));
+                (int) mVelocityTracker.getXVelocity(mActivePointerId),
+                (int) mVelocityTracker.getYVelocity(mActivePointerId));
     }
 
     /**
@@ -519,8 +510,8 @@ public class ViewDragHelper {
         }
 
         mScroller.fling(mCapturedView.getLeft(), mCapturedView.getTop(),
-                (int) VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),
-                (int) VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId), minLeft, maxLeft, minTop,
+                (int) mVelocityTracker.getXVelocity(mActivePointerId),
+                (int) mVelocityTracker.getYVelocity(mActivePointerId), minLeft, maxLeft, minTop,
                 maxTop);
 
         setDragState(STATE_SETTLING);
@@ -665,11 +656,11 @@ public class ViewDragHelper {
     }
 
     private void saveLastMotion(MotionEvent ev) {
-        final int pointerCount = MotionEventCompat.getPointerCount(ev);
+        final int pointerCount = ev.getPointerCount();
         for (int i = 0; i < pointerCount; i++) {
-            final int pointerId = MotionEventCompat.getPointerId(ev, i);
-            final float x = MotionEventCompat.getX(ev, i);
-            final float y = MotionEventCompat.getY(ev, i);
+            final int pointerId = ev.getPointerId(i);
+            final float x = ev.getX(i);
+            final float y = ev.getY(i);
             if (mLastMotionX != null && mLastMotionY != null) {
                 mLastMotionX[pointerId] = x;
                 mLastMotionY[pointerId] = y;
@@ -761,7 +752,7 @@ public class ViewDragHelper {
             }
         }
 
-        return checkV && (ViewCompat.canScrollHorizontally(v, -dx) || ViewCompat.canScrollVertically(v, -dy));
+        return checkV && (v.canScrollHorizontally(-dx) || v.canScrollVertically(-dy));
     }
 
     /**
@@ -774,8 +765,8 @@ public class ViewDragHelper {
      * onInterceptTouchEvent
      */
     public boolean shouldInterceptTouchEvent(MotionEvent ev) {
-        final int action = MotionEventCompat.getActionMasked(ev);
-        final int actionIndex = MotionEventCompat.getActionIndex(ev);
+        final int action = ev.getAction();
+        final int actionIndex = ev.getActionIndex();
 
         if (action == MotionEvent.ACTION_DOWN) {
             // Reset things for a new event stream, just in case we didn't get
@@ -792,7 +783,7 @@ public class ViewDragHelper {
             case MotionEvent.ACTION_DOWN: {
                 final float x = ev.getX();
                 final float y = ev.getY();
-                final int pointerId = MotionEventCompat.getPointerId(ev, 0);
+                final int pointerId = ev.getPointerId(0);
                 saveInitialMotion(x, y, pointerId);
 
                 final View toCapture = findTopChildUnder((int) x, (int) y);
@@ -809,10 +800,10 @@ public class ViewDragHelper {
                 break;
             }
 
-            case MotionEventCompat.ACTION_POINTER_DOWN: {
-                final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);
-                final float x = MotionEventCompat.getX(ev, actionIndex);
-                final float y = MotionEventCompat.getY(ev, actionIndex);
+            case MotionEvent.ACTION_POINTER_DOWN: {
+                final int pointerId = ev.getPointerId(actionIndex);
+                final float x = ev.getX(actionIndex);
+                final float y = ev.getY(actionIndex);
 
                 saveInitialMotion(x, y, pointerId);
 
@@ -835,14 +826,14 @@ public class ViewDragHelper {
             case MotionEvent.ACTION_MOVE: {
                 // First to cross a touch slop over a draggable view wins. Also
                 // report edge drags.
-                final int pointerCount = MotionEventCompat.getPointerCount(ev);
+                final int pointerCount = ev.getPointerCount();
                 for (int i = 0; i < pointerCount && mInitialMotionX != null && mInitialMotionY != null; i++) {
-                    final int pointerId = MotionEventCompat.getPointerId(ev, i);
+                    final int pointerId = ev.getPointerId(i);
                     if (pointerId >= mInitialMotionX.length || pointerId >= mInitialMotionY.length) {
                         continue;
                     }
-                    final float x = MotionEventCompat.getX(ev, i);
-                    final float y = MotionEventCompat.getY(ev, i);
+                    final float x = ev.getX(i);
+                    final float y = ev.getY(i);
                     final float dx = x - mInitialMotionX[pointerId];
                     final float dy = y - mInitialMotionY[pointerId];
 
@@ -863,8 +854,8 @@ public class ViewDragHelper {
                 break;
             }
 
-            case MotionEventCompat.ACTION_POINTER_UP: {
-                final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);
+            case MotionEvent.ACTION_POINTER_UP: {
+                final int pointerId = ev.getPointerId(actionIndex);
                 clearMotionHistory(pointerId);
                 break;
             }
@@ -887,8 +878,8 @@ public class ViewDragHelper {
      * @param ev The touch event received by the parent view
      */
     public void processTouchEvent(MotionEvent ev) {
-        final int action = MotionEventCompat.getActionMasked(ev);
-        final int actionIndex = MotionEventCompat.getActionIndex(ev);
+        final int action = ev.getAction();
+        final int actionIndex = ev.getActionIndex();
 
         if (action == MotionEvent.ACTION_DOWN) {
             // Reset things for a new event stream, just in case we didn't get
@@ -905,7 +896,7 @@ public class ViewDragHelper {
             case MotionEvent.ACTION_DOWN: {
                 final float x = ev.getX();
                 final float y = ev.getY();
-                final int pointerId = MotionEventCompat.getPointerId(ev, 0);
+                final int pointerId = ev.getPointerId(0);
                 final View toCapture = findTopChildUnder((int) x, (int) y);
 
                 saveInitialMotion(x, y, pointerId);
@@ -923,10 +914,10 @@ public class ViewDragHelper {
                 break;
             }
 
-            case MotionEventCompat.ACTION_POINTER_DOWN: {
-                final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);
-                final float x = MotionEventCompat.getX(ev, actionIndex);
-                final float y = MotionEventCompat.getY(ev, actionIndex);
+            case MotionEvent.ACTION_POINTER_DOWN: {
+                final int pointerId = ev.getPointerId(actionIndex);
+                final float x = ev.getX(actionIndex);
+                final float y = ev.getY(actionIndex);
 
                 saveInitialMotion(x, y, pointerId);
 
@@ -958,9 +949,9 @@ public class ViewDragHelper {
 
             case MotionEvent.ACTION_MOVE: {
                 if (mDragState == STATE_DRAGGING) {
-                    final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);
-                    final float x = MotionEventCompat.getX(ev, index);
-                    final float y = MotionEventCompat.getY(ev, index);
+                    final int index = ev.findPointerIndex(mActivePointerId);
+                    final float x = ev.getX(index);
+                    final float y = ev.getY(index);
                     final int idx = (int) (x - mLastMotionX[mActivePointerId]);
                     final int idy = (int) (y - mLastMotionY[mActivePointerId]);
 
@@ -969,11 +960,11 @@ public class ViewDragHelper {
                     saveLastMotion(ev);
                 } else {
                     // Check to see if any pointer is now over a draggable view.
-                    final int pointerCount = MotionEventCompat.getPointerCount(ev);
+                    final int pointerCount = ev.getPointerCount();
                     for (int i = 0; i < pointerCount; i++) {
-                        final int pointerId = MotionEventCompat.getPointerId(ev, i);
-                        final float x = MotionEventCompat.getX(ev, i);
-                        final float y = MotionEventCompat.getY(ev, i);
+                        final int pointerId = ev.getPointerId(i);
+                        final float x = ev.getX(i);
+                        final float y = ev.getY(i);
                         final float dx = x - mInitialMotionX[pointerId];
                         final float dy = y - mInitialMotionY[pointerId];
 
@@ -993,23 +984,23 @@ public class ViewDragHelper {
                 break;
             }
 
-            case MotionEventCompat.ACTION_POINTER_UP: {
-                final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex);
+            case MotionEvent.ACTION_POINTER_UP: {
+                final int pointerId = ev.getPointerId(actionIndex);
                 if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) {
                     // Try to find another pointer that's still holding on to
                     // the
                     // captured view.
                     int newActivePointer = INVALID_POINTER;
-                    final int pointerCount = MotionEventCompat.getPointerCount(ev);
+                    final int pointerCount = ev.getPointerCount();
                     for (int i = 0; i < pointerCount; i++) {
-                        final int id = MotionEventCompat.getPointerId(ev, i);
+                        final int id = ev.getPointerId(i);
                         if (id == mActivePointerId) {
                             // This one's going away, skip.
                             continue;
                         }
 
-                        final float x = MotionEventCompat.getX(ev, i);
-                        final float y = MotionEventCompat.getY(ev, i);
+                        final float x = ev.getX(i);
+                        final float y = ev.getY(i);
                         if (findTopChildUnder((int) x, (int) y) == mCapturedView
                                 && tryCaptureViewForDrag(mCapturedView, id)) {
                             newActivePointer = mActivePointerId;
@@ -1214,9 +1205,9 @@ public class ViewDragHelper {
 
     private void releaseViewForPointerUp() {
         mVelocityTracker.computeCurrentVelocity(1000, mMaxVelocity);
-        final float xvel = clampMag(VelocityTrackerCompat.getXVelocity(mVelocityTracker, mActivePointerId),
+        final float xvel = clampMag(mVelocityTracker.getXVelocity(mActivePointerId),
                 mMinVelocity, mMaxVelocity);
-        final float yvel = clampMag(VelocityTrackerCompat.getYVelocity(mVelocityTracker, mActivePointerId),
+        final float yvel = clampMag(mVelocityTracker.getYVelocity(mActivePointerId),
                 mMinVelocity, mMaxVelocity);
         dispatchViewReleased(xvel, yvel);
     }
diff --git a/qDict/src/main/java/com/mmt/widget/draglistview/DragSortCursorAdapter.java b/qDict/src/main/java/com/mmt/widget/draglistview/DragSortCursorAdapter.java
index 9d058d0..4a25ed5 100644
--- a/qDict/src/main/java/com/mmt/widget/draglistview/DragSortCursorAdapter.java
+++ b/qDict/src/main/java/com/mmt/widget/draglistview/DragSortCursorAdapter.java
@@ -2,12 +2,13 @@ package com.mmt.widget.draglistview;
 
 import android.content.Context;
 import android.database.Cursor;
-import android.support.v4.widget.CursorAdapter;
 import android.util.SparseIntArray;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ListAdapter;
 
+import androidx.cursoradapter.widget.CursorAdapter;
+
 import com.mmt.widget.DragSortListView;
 import com.mmt.widget.DragSortListView.DragSortListener;
 
diff --git a/qDict/src/main/java/com/mmt/widget/slidemenu/CustomViewAbove.java b/qDict/src/main/java/com/mmt/widget/slidemenu/CustomViewAbove.java
index e951a78..5072500 100644
--- a/qDict/src/main/java/com/mmt/widget/slidemenu/CustomViewAbove.java
+++ b/qDict/src/main/java/com/mmt/widget/slidemenu/CustomViewAbove.java
@@ -3,12 +3,6 @@ package com.mmt.widget.slidemenu;
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Rect;
-import android.os.Build;
-import android.support.v4.view.KeyEventCompat;
-import android.support.v4.view.MotionEventCompat;
-import android.support.v4.view.VelocityTrackerCompat;
-import android.support.v4.view.ViewCompat;
-import android.support.v4.view.ViewConfigurationCompat;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.FocusFinder;
@@ -22,6 +16,11 @@ import android.view.ViewGroup;
 import android.view.animation.Interpolator;
 import android.widget.Scroller;
 
+import androidx.core.view.MotionEventCompat;
+import androidx.core.view.VelocityTrackerCompat;
+import androidx.core.view.ViewCompat;
+import androidx.core.view.ViewConfigurationCompat;
+
 import com.mmt.widget.slidemenu.SlidingMenu.OnClosedListener;
 import com.mmt.widget.slidemenu.SlidingMenu.OnOpenedListener;
 
@@ -883,16 +882,14 @@ public class CustomViewAbove extends ViewGroup {
                     handled = arrowScroll(FOCUS_RIGHT);
                     break;
                 case KeyEvent.KEYCODE_TAB:
-                    if (Build.VERSION.SDK_INT >= 11) {
-                        // The focus finder had a bug handling FOCUS_FORWARD and
-                        // FOCUS_BACKWARD
-                        // before Android 3.0. Ignore the tab key on those
-                        // devices.
-                        if (KeyEventCompat.hasNoModifiers(event)) {
-                            handled = arrowScroll(FOCUS_FORWARD);
-                        } else if (KeyEventCompat.hasModifiers(event, KeyEvent.META_SHIFT_ON)) {
-                            handled = arrowScroll(FOCUS_BACKWARD);
-                        }
+                    // The focus finder had a bug handling FOCUS_FORWARD and
+                    // FOCUS_BACKWARD
+                    // before Android 3.0. Ignore the tab key on those
+                    // devices.
+                    if (event.hasNoModifiers()) {
+                        handled = arrowScroll(FOCUS_FORWARD);
+                    } else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
+                        handled = arrowScroll(FOCUS_BACKWARD);
                     }
                     break;
             }
diff --git a/qDict/src/main/java/com/mmt/widget/slidemenu/SlidingMenu.java b/qDict/src/main/java/com/mmt/widget/slidemenu/SlidingMenu.java
index 1a5ca36..65697b1 100644
--- a/qDict/src/main/java/com/mmt/widget/slidemenu/SlidingMenu.java
+++ b/qDict/src/main/java/com/mmt/widget/slidemenu/SlidingMenu.java
@@ -906,25 +906,22 @@ public class SlidingMenu extends RelativeLayout {
         int rightPadding = insets.right;
         int topPadding = insets.top;
         int bottomPadding = insets.bottom;
-        String brand = android.os.Build.BRAND;
-        if (Utils.hasLlAbove() && !(brand.equalsIgnoreCase("Bkav") || brand.equalsIgnoreCase("Samsung") || brand.equalsIgnoreCase("Xiaomi"))) {
-
-            Resources resources = getContent().getResources();
-            boolean isBottom = isSystemBarOnBottom(resources);
-            Configuration cfg = resources.getConfiguration();
-            int orientation = cfg.orientation;
-            int resourceId = 0;
-            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-                resourceId = resources.getIdentifier("navigation_bar_width", "dimen", "android");
-            } else {
-                resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
-            }
-            if (resourceId > 0) {
-                if (isBottom)
-                    bottomPadding += resources.getDimensionPixelSize(resourceId);
-                else {
-                    rightPadding += resources.getDimensionPixelSize(resourceId);
-                }
+
+        Resources resources = getContent().getResources();
+        boolean isBottom = isSystemBarOnBottom(resources);
+        Configuration cfg = resources.getConfiguration();
+        int orientation = cfg.orientation;
+        int resourceId;
+        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
+            resourceId = resources.getIdentifier("navigation_bar_width", "dimen", "android");
+        } else {
+            resourceId = resources.getIdentifier("navigation_bar_height", "dimen", "android");
+        }
+        if (resourceId > 0) {
+            if (isBottom)
+                bottomPadding += resources.getDimensionPixelSize(resourceId);
+            else {
+                rightPadding += resources.getDimensionPixelSize(resourceId);
             }
         }
 
@@ -942,23 +939,17 @@ public class SlidingMenu extends RelativeLayout {
         return (!canMove || dm.widthPixels < dm.heightPixels);
     }
 
-    @TargetApi(11)
     public void manageLayers(float percentOpen) {
-        if (!Utils.hasHcAbove())
-            return;
-
         boolean layer = percentOpen > 0.0f && percentOpen < 1.0f;
         final int layerType = layer ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_NONE;
 
         if (layerType != getContent().getLayerType()) {
-            getHandler().post(new Runnable() {
-                public void run() {
-                    Log.v(TAG, "changing layerType. hardware? " + (layerType == View.LAYER_TYPE_HARDWARE));
-                    getContent().setLayerType(layerType, null);
-                    getMenu().setLayerType(layerType, null);
-                    if (getSecondaryMenu() != null) {
-                        getSecondaryMenu().setLayerType(layerType, null);
-                    }
+            getHandler().post(() -> {
+                Log.v(TAG, "changing layerType. hardware? " + (layerType == View.LAYER_TYPE_HARDWARE));
+                getContent().setLayerType(layerType, null);
+                getMenu().setLayerType(layerType, null);
+                if (getSecondaryMenu() != null) {
+                    getSecondaryMenu().setLayerType(layerType, null);
                 }
             });
         }
