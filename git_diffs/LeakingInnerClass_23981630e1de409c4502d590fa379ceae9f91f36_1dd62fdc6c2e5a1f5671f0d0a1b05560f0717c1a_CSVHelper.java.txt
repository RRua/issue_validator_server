M	QuoteUnquote.cloudLib
M	QuoteUnquote.cloudLib.functions
M	QuoteUnquote.utilsLib
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetScraperTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetScraperTest.kt
new file mode 100755
index 0000000..26d5cd9
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetScraperTest.kt
@@ -0,0 +1,145 @@
+package com.github.jameshnsears.quoteunquote
+
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity
+import com.github.jameshnsears.quoteunquote.utils.ImportHelper
+import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
+import io.mockk.every
+import io.mockk.spyk
+import org.junit.Assert.assertEquals
+import org.junit.Before
+import org.junit.Test
+
+class WidgetScraperTest : QuoteUnquoteModelUtility() {
+    @Before
+    fun setup() {
+        insertDefaultQuotation()
+    }
+
+    @Test
+    fun reuseDefault() {
+        val quoteUnquoteWidget = spyk(QuoteUnquoteWidget())
+        every {
+            quoteUnquoteWidget.getQuotationsPreferences(
+                any(),
+                any(),
+            )
+        } returns
+            getQuotationsPreferences(
+                context,
+                WidgetIdHelper.WIDGET_ID_01,
+                false,
+                true,
+            )
+
+        quoteUnquoteWidget.quoteUnquoteModel = quoteUnquoteModelDouble
+
+        quoteUnquoteWidget.displayAppropriateScrapedQuotation(
+            context,
+            WidgetIdHelper.WIDGET_ID_01,
+            "q1",
+            "a1",
+        )
+
+        assertEquals(
+            ImportHelper.DEFAULT_DIGEST,
+            databaseRepositoryDouble.getCurrentQuotation(WidgetIdHelper.WIDGET_ID_01).digest,
+        )
+    }
+
+    @Test
+    fun new() {
+        val quoteUnquoteWidget = spyk(QuoteUnquoteWidget())
+        every {
+            quoteUnquoteWidget.getQuotationsPreferences(
+                any(),
+                any(),
+            )
+        } returns
+            getQuotationsPreferences(
+                context,
+                WidgetIdHelper.WIDGET_ID_01,
+                false,
+                true,
+            )
+
+        quoteUnquoteWidget.quoteUnquoteModel = quoteUnquoteModelDouble
+
+        val secondQuotation = QuotationEntity(
+            ImportHelper.makeDigest("q2", "a2"),
+            "?",
+            "a2",
+            "q2",
+        )
+        quoteUnquoteWidget.displayAppropriateScrapedQuotation(
+            context,
+            WidgetIdHelper.WIDGET_ID_01,
+            secondQuotation.quotation,
+            secondQuotation.author,
+        )
+
+        assertEquals(
+            "1/1",
+            quoteUnquoteModelDouble.getCurrentPosition(
+                WidgetIdHelper.WIDGET_ID_01,
+                QuotationsPreferences(WidgetIdHelper.WIDGET_ID_01, context),
+            ),
+        )
+
+        val thirdQuotation = QuotationEntity(
+            ImportHelper.makeDigest("q2", "a2"),
+            "?",
+            "a1",
+            "q1",
+        )
+        quoteUnquoteWidget.displayAppropriateScrapedQuotation(
+            context,
+            WidgetIdHelper.WIDGET_ID_01,
+            thirdQuotation.quotation,
+            thirdQuotation.author,
+        )
+
+        assertEquals(
+            "1/1",
+            quoteUnquoteModelDouble.getCurrentPosition(
+                WidgetIdHelper.WIDGET_ID_01,
+                QuotationsPreferences(WidgetIdHelper.WIDGET_ID_01, context),
+            ),
+        )
+    }
+
+    private fun getQuotationsPreferences(
+        mockContext: Context,
+        widgetId: Int,
+        databaseInternal: Boolean,
+        databaseExternal: Boolean,
+    ): QuotationsPreferences {
+        val quotationsPreferencesDouble = spyk(QuotationsPreferences(widgetId, mockContext))
+        every { quotationsPreferencesDouble.databaseInternal } returns databaseInternal
+        every { quotationsPreferencesDouble.databaseExternalCsv } returns databaseExternal
+
+        return quotationsPreferencesDouble
+    }
+
+    private fun insertDefaultQuotation() {
+        DatabaseRepository.useInternalDatabase = false
+
+        databaseRepositoryDouble.insertQuotationExternal(
+            QuotationEntity(
+                ImportHelper.DEFAULT_DIGEST,
+                "?",
+                "a1",
+                "q1",
+            ),
+        )
+
+        assertEquals(1, databaseRepositoryDouble.countAll().blockingGet())
+
+        databaseRepositoryDouble.markAsCurrent(
+            WidgetIdHelper.WIDGET_ID_01,
+            ImportHelper.DEFAULT_DIGEST,
+        )
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
index 8cef18e..4ce4249 100755
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
@@ -134,5 +134,10 @@ class TransferBackupSettingsTest : GsonTestHelper() {
         "",
         true,
         false,
+        false,
+        "",
+        "",
+        "",
+        true,
     )
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/ImportHelperTest.kt
similarity index 68%
rename from app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt
rename to app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/ImportHelperTest.kt
index cd82cc1..03c964e 100755
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/CSVHelperTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/utils/ImportHelperTest.kt
@@ -7,13 +7,13 @@ import junit.framework.TestCase.fail
 import org.junit.Test
 import java.io.InputStream
 
-class CSVHelperTest : QuoteUnquoteModelUtility() {
+class ImportHelperTest : QuoteUnquoteModelUtility() {
     @Test
     fun csvExportOfFavourites() {
         val inputStream: InputStream = getCsvAsset("Favourites.csv")
 
-        val cvsHelper = CSVHelper()
-        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+        val importHelper = ImportHelper()
+        val quotationEntityLinkedHashSet = importHelper.csvImportDatabase(inputStream)
 
         assertEquals(2, quotationEntityLinkedHashSet.size)
     }
@@ -22,8 +22,8 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseWithHeader() {
         val inputStream: InputStream = getCsvAsset("ImportWithHeader.csv")
 
-        val cvsHelper = CSVHelper()
-        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+        val importHelper = ImportHelper()
+        val quotationEntityLinkedHashSet = importHelper.csvImportDatabase(inputStream)
 
         // header is treated as actual data
         assertEquals(2, quotationEntityLinkedHashSet.size)
@@ -33,8 +33,8 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseWithoutHeader() {
         val inputStream: InputStream = getCsvAsset("ImportMissingHeader.csv")
 
-        val cvsHelper = CSVHelper()
-        val quotationEntityLinkedHashSet = cvsHelper.csvImportDatabase(inputStream)
+        val importHelper = ImportHelper()
+        val quotationEntityLinkedHashSet = importHelper.csvImportDatabase(inputStream)
 
         assertEquals(1, quotationEntityLinkedHashSet.size)
     }
@@ -43,11 +43,11 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseOnlyAuthorNoDelimiter() {
         val inputStream: InputStream = getCsvAsset("ImportOnlyAuthorNoDelimiter.csv")
 
-        val cvsHelper = CSVHelper()
+        val importHelper = ImportHelper()
         try {
-            cvsHelper.csvImportDatabase(inputStream)
+            importHelper.csvImportDatabase(inputStream)
             fail()
-        } catch (exception: CSVHelper.CVSHelperException) {
+        } catch (exception: ImportHelper.ImportHelperException) {
             assertEquals(
                 "Index for header 'Quotation' is 1 but CSVRecord only has 1 values!",
                 exception.message,
@@ -59,11 +59,11 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseOnlyAuthorWithDelimiter() {
         val inputStream: InputStream = getCsvAsset("ImportOnlyAuthorWithDelimiter.csv")
 
-        val cvsHelper = CSVHelper()
+        val importHelper = ImportHelper()
         try {
-            cvsHelper.csvImportDatabase(inputStream)
+            importHelper.csvImportDatabase(inputStream)
             fail()
-        } catch (exception: CSVHelper.CVSHelperException) {
+        } catch (exception: ImportHelper.ImportHelperException) {
             assertEquals(
                 "empty quotation",
                 exception.message,
@@ -75,11 +75,11 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseEmptyButWithDelimiter() {
         val inputStream: InputStream = getCsvAsset("ImportEmptyButWithDelimiter.csv")
 
-        val cvsHelper = CSVHelper()
+        val importHelper = ImportHelper()
         try {
-            cvsHelper.csvImportDatabase(inputStream)
+            importHelper.csvImportDatabase(inputStream)
             fail()
-        } catch (exception: CSVHelper.CVSHelperException) {
+        } catch (exception: ImportHelper.ImportHelperException) {
             assertEquals("empty author", exception.message)
         }
     }
@@ -88,11 +88,11 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseMissingQuotation() {
         val inputStream: InputStream = getCsvAsset("ImportMissingQuotation.csv")
 
-        val cvsHelper = CSVHelper()
+        val importHelper = ImportHelper()
         try {
-            cvsHelper.csvImportDatabase(inputStream)
+            importHelper.csvImportDatabase(inputStream)
             fail()
-        } catch (exception: CSVHelper.CVSHelperException) {
+        } catch (exception: ImportHelper.ImportHelperException) {
             assertEquals(
                 "empty quotation",
                 exception.message,
@@ -104,11 +104,11 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
     fun csvImportDatabaseImportEmpty() {
         val inputStream: InputStream = getCsvAsset("ImportEmpty.csv")
 
-        val cvsHelper = CSVHelper()
+        val importHelper = ImportHelper()
         try {
-            cvsHelper.csvImportDatabase(inputStream)
+            importHelper.csvImportDatabase(inputStream)
             fail()
-        } catch (exception: CSVHelper.CVSHelperException) {
+        } catch (exception: ImportHelper.ImportHelperException) {
             assertEquals("empty file", exception.message)
         }
     }
@@ -124,7 +124,7 @@ class CSVHelperTest : QuoteUnquoteModelUtility() {
         // confirm same as from python
         assertEquals(
             "e5da2450",
-            CSVHelper().makeDigest(
+            ImportHelper.makeDigest(
                 "The only thing that interferes with my learning is my education.",
                 "Albert Einstein",
             ),
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
index 364bdfb..e9ebe6e 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
@@ -1,6 +1,9 @@
 package com.github.jameshnsears.quoteunquote;
 
 import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
@@ -12,7 +15,15 @@ import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
 import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.ImportHelper;
 import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+import com.github.jameshnsears.quoteunquote.utils.scraper.Scraper;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperData;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperQuotationException;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperSourceException;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperUrlException;
+
+import org.jsoup.nodes.Document;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -45,10 +56,10 @@ public class QuoteUnquoteModel {
 
         if (widgetId != -1) {
             QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
-            if (quotationsPreferences.getDatabaseExternal()) {
-                databaseRepository.useInternalDatabase = false;
-            } else {
+            if (quotationsPreferences.getDatabaseInternal()) {
                 databaseRepository.useInternalDatabase = true;
+            } else {
+                databaseRepository.useInternalDatabase = false;
             }
         }
     }
@@ -634,13 +645,74 @@ public class QuoteUnquoteModel {
 
     @NonNull
     public Single<List<Integer>> authorsQuotationCount() {
-        return databaseRepository.getAuthorsQuotationCount();
+        final Future<Single<List<Integer>>> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.getAuthorsQuotationCount());
+
+        Single<List<Integer>> authorsQuotationCount = null;
+
+        try {
+            authorsQuotationCount = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return authorsQuotationCount;
+    }
+
+    @NonNull
+    public List<Integer> authorsQuotationCountAsList() {
+        final Future<List<Integer>> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.getAuthorsQuotationCount().blockingGet());
+
+        List<Integer> authorsQuotationCount = null;
+
+        try {
+            authorsQuotationCount = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return authorsQuotationCount;
     }
 
     @NonNull
     public Single<List<AuthorPOJO>> authors(int authorCount) {
-        return databaseRepository.getAuthorsAndQuotationCounts(
-                (authorCount == -1) ? 1 : authorCount);
+        final Future<Single<List<AuthorPOJO>>> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.getAuthorsAndQuotationCounts((authorCount == -1) ? 1 : authorCount));
+
+        Single<List<AuthorPOJO>> authors = null;
+
+        try {
+            authors = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return authors;
+    }
+
+    @NonNull
+    public List<AuthorPOJO> authorsAsList(int authorCount) {
+        final Future<List<AuthorPOJO>> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> {
+            Single<List<AuthorPOJO>> list
+                    = databaseRepository.getAuthorsAndQuotationCounts((authorCount == -1) ? 1 : authorCount);
+            return list.blockingGet();
+        });
+
+        List<AuthorPOJO> authors = null;
+
+        try {
+            authors = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return authors;
     }
 
     @NonNull
@@ -676,8 +748,6 @@ public class QuoteUnquoteModel {
                 index++;
             }
         }
-
-        Timber.d("index=%s; author=%s", index, author);
         return index;
     }
 
@@ -769,4 +839,130 @@ public class QuoteUnquoteModel {
             Thread.currentThread().interrupt();
         }
     }
+
+    @NonNull
+    public void insertQuotationExternal(int widgetId, QuotationEntity quotation) {
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            DatabaseRepository.useInternalDatabase = false;
+            databaseRepository.insertQuotationExternal(quotation);
+
+            QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+
+            if (databaseRepository.findPositionInPrevious(widgetId, quotationsPreferences) + 1
+                    == databaseRepository.countNext(quotationsPreferences)) {
+                // as a courtesy, move to latest quotation if user was at adjacent previous
+                markAsCurrentNext(widgetId, false);
+            }
+        });
+
+        try {
+            future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+    }
+
+    public ScraperData getWebPage(
+            @NonNull final Context context,
+            @NonNull final String url,
+            @NonNull final String xpathQuotation,
+            @NonNull final String xpathSource
+    ) {
+        final Future<ScraperData> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            Handler handler = new Handler(Looper.getMainLooper());
+
+            try {
+                Scraper scraper = new Scraper();
+                Document document = scraper.getDocumentFromUrl(url);
+
+                return new ScraperData(
+                        true,
+                        scraper.getQuotation(document, xpathQuotation),
+                        scraper.getSource(document, xpathSource)
+                );
+            } catch (ScraperUrlException e) {
+                handler.post(() -> Toast.makeText(
+                        context,
+                        context.getString(R.string.fragment_quotations_database_scrape_endpoint_error),
+                        Toast.LENGTH_SHORT).show());
+            } catch (ScraperQuotationException e) {
+                handler.post(() -> Toast.makeText(
+                        context,
+                        context.getString(R.string.fragment_quotations_database_scrape_xpath_error_quotation),
+                        Toast.LENGTH_SHORT).show());
+            } catch (ScraperSourceException e) {
+                handler.post(() -> Toast.makeText(
+                        context,
+                        context.getString(R.string.fragment_quotations_database_scrape_xpath_error_source),
+                        Toast.LENGTH_SHORT).show());
+            }
+
+            return new ScraperData();
+        });
+
+        try {
+            return future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return new ScraperData();
+    }
+
+    public void insertWebPage(
+            final int widgetId,
+            @NonNull final String quotation,
+            @NonNull final String source,
+            @NonNull final String digest
+    ) {
+        Timber.d("scraper: %s; %s; %s", digest, source, quotation);
+
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            if (digest.equals(ImportHelper.DEFAULT_DIGEST)) {
+                databaseRepository.erase();
+            }
+
+            insertQuotationExternal(
+                    widgetId,
+                    new QuotationEntity(
+                            digest,
+                            "?",
+                            source,
+                            quotation));
+        });
+
+        try {
+            future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+    }
+
+    public String getPosition(int widgetId, String digest) {
+        final Future<String> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+
+            String quotationPosition = getCurrentPosition(
+                    widgetId,
+                    quotationsPreferences);
+
+            if (digest.equals(getLastPreviousDigest(widgetId, quotationsPreferences.getContentSelection()))) {
+                quotationPosition = "\u2316  " + quotationPosition + " ";
+            }
+
+            return quotationPosition;
+        });
+
+        try {
+            return future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return "";
+    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
index a4f0ec6..b930edc 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
@@ -7,13 +7,9 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.graphics.Color;
-import android.os.Build;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
 import android.view.View;
 import android.widget.RemoteViews;
-import android.widget.Toast;
 
 import androidx.annotation.IdRes;
 import androidx.annotation.NonNull;
@@ -27,11 +23,10 @@ import com.github.jameshnsears.quoteunquote.cloud.CloudTransferHelper;
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences;
 import com.github.jameshnsears.quoteunquote.configure.fragment.notifications.NotificationsPreferences;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.listview.ListViewService;
-import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.ImportHelper;
 import com.github.jameshnsears.quoteunquote.utils.IntentFactoryHelper;
 import com.github.jameshnsears.quoteunquote.utils.notification.NotificationContent;
 import com.github.jameshnsears.quoteunquote.utils.notification.NotificationCoordinator;
@@ -40,17 +35,12 @@ import com.github.jameshnsears.quoteunquote.utils.notification.NotificationHelpe
 import com.github.jameshnsears.quoteunquote.utils.notification.NotificationsBihourlyAlarm;
 import com.github.jameshnsears.quoteunquote.utils.notification.NotificationsDailyAlarm;
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperAlarm;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperData;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.LinkedHashSet;
-import java.util.UUID;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
 import timber.log.Timber;
@@ -67,7 +57,6 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
     private static volatile boolean receiversRegistered;
     @Nullable
     private static NotificationHelper notificationHelper;
-    private static UUID testWorkerRequestUid = null;
     @Nullable
     public QuoteUnquoteModel quoteUnquoteModel;
     @Nullable
@@ -126,100 +115,6 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         return new QuotationsPreferences(widgetId, context);
     }
 
-    public static Future externalObserver;
-    public static long externalObserverInternal = 1000;
-
-    public void launchExternalObserver(
-            @NonNull final Context context,
-            int widgetId,
-            @NonNull final QuoteUnquoteModel quoteUnquoteModel) {
-        final QuotationsPreferences quotationsPreferences = getQuotationsPreferences(context, widgetId);
-
-        if (quotationsPreferences.getDatabaseInternal() ||
-                !quotationsPreferences.getDatabaseExternalWatch()) {
-            if (externalObserver != null) {
-                externalObserver.cancel(true);
-                externalObserver = null;
-            }
-        }
-
-        if (quotationsPreferences.getDatabaseExternal() && quotationsPreferences.getDatabaseExternalWatch()) {
-            if (externalObserver == null) {
-                String path = quotationsPreferences.getDatabaseExternalPath();
-
-                externalObserver = getExecutorService().submit(() -> {
-                    Thread.currentThread().setName("externalObserver");
-                    Timber.d("ExternalObserver.start: %s", path);
-
-                    // adb push app/src/androidTest/assets/externalWatch/1/VerseOfTheDay.csv /sdcard/Download
-                    // adb shell dumpsys cpuinfo | grep quoteunquote
-                    try {
-                        File externalFile = new File(path); // uses a fd in its path, not actual filenam!
-                        long originalFileId = externalFile.lastModified();
-
-                        while (!Thread.currentThread().isInterrupted()) {
-                            Thread.sleep(externalObserverInternal);
-
-                            long currentFileId = new File(path).lastModified();
-                            // API >= 32: currentFileId ALWAYS == 0
-
-                            Timber.d("ExternalObserver.poll: %d; %d", originalFileId, currentFileId);
-                            if (currentFileId != originalFileId) {
-                                Timber.d("ExternalObserver.difference: %s", path);
-
-                                try {
-                                    importExternalCsv(context, widgetId, externalFile, quoteUnquoteModel);
-
-                                    onUpdate(context, AppWidgetManager.getInstance(context), new int[]{widgetId});
-
-                                    originalFileId = currentFileId;
-                                } catch (final CSVHelper.CVSHelperException | FileNotFoundException e) {
-                                    new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(
-                                            context,
-                                            context.getString(
-                                                    R.string.fragment_quotations_database_invalid_watch_format),
-                                            Toast.LENGTH_SHORT).show());
-
-                                    Thread.sleep(externalObserverInternal * 5);
-                                }
-                            }
-                        }
-                    } catch (InterruptedException e) {
-                        Timber.d("ExternalObserver.stop");
-                    }
-                });
-            }
-        }
-    }
-
-    private void importExternalCsv(
-            @NonNull final Context context,
-            int widgetId,
-            @NonNull final File file,
-            @NonNull final QuoteUnquoteModel quoteUnquoteModel) throws FileNotFoundException, CSVHelper.CVSHelperException {
-        FileInputStream fileInputStream = null;
-
-        try {
-            fileInputStream = new FileInputStream(file);
-
-            final CSVHelper csvHelper = new CSVHelper();
-            final LinkedHashSet<QuotationEntity> quotations = csvHelper.csvImportDatabase(fileInputStream);
-
-            quoteUnquoteModel.insertQuotationsExternal(quotations);
-
-            DatabaseRepository.useInternalDatabase = false;
-            quoteUnquoteModel.markAsCurrentDefault(widgetId);
-        } finally {
-            try {
-                if (fileInputStream != null) {
-                    fileInputStream.close();
-                }
-            } catch (IOException e) {
-                Timber.e(e.getMessage());
-            }
-        }
-    }
-
     @Override
     public void onEnabled(@NonNull final Context context) {
         final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(context);
@@ -329,6 +224,7 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         try {
             final NotificationsDailyAlarm notificationsDailyAlarm = new NotificationsDailyAlarm(context, widgetId);
             final NotificationsBihourlyAlarm notificationsBihourlyAlarm = new NotificationsBihourlyAlarm(context, widgetId);
+            final ScraperAlarm scraperAlarm = new ScraperAlarm(context, widgetId);
 
             switch (intent.getAction()) {
                 case Intent.ACTION_MY_PACKAGE_REPLACED:
@@ -363,7 +259,8 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
                             context,
                             widgetId,
                             notificationsDailyAlarm,
-                            notificationsBihourlyAlarm);
+                            notificationsBihourlyAlarm,
+                            scraperAlarm);
                     break;
 
                 case IntentFactoryHelper.DAILY_ALARM:
@@ -374,6 +271,10 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
                     onReceiveBihourlyAlarm(context, widgetId, notificationsBihourlyAlarm);
                     break;
 
+                case IntentFactoryHelper.SCRAPER_ALARM:
+                    onReceiveScraperAlarm(context, widgetId, appWidgetManager, scraperAlarm);
+                    break;
+
                 case IntentFactoryHelper.TOOLBAR_PRESSED_FIRST:
                     onReceiveToolbarPressedFirst(context, widgetId, appWidgetManager);
                     break;
@@ -437,18 +338,19 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
     private void onReceiveActionAppwidgetEnabled(@NonNull final Context context,
                                                  @NonNull final AppWidgetManager appWidgetManager) {
-        NotificationsDailyAlarm notificationsDailyAlarm;
-        NotificationsBihourlyAlarm notificationsBihourlyAlarm;
-
         int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class));
         for (final int widgetId : widgetIds) {
             Timber.d("setDailyAlarm: %d", widgetId);
-            notificationsDailyAlarm = new NotificationsDailyAlarm(context, widgetId);
+            NotificationsDailyAlarm notificationsDailyAlarm = new NotificationsDailyAlarm(context, widgetId);
             notificationsDailyAlarm.setAlarm();
 
             Timber.d("setBihourlyAlarm: %d", widgetId);
-            notificationsBihourlyAlarm = new NotificationsBihourlyAlarm(context, widgetId);
+            NotificationsBihourlyAlarm notificationsBihourlyAlarm = new NotificationsBihourlyAlarm(context, widgetId);
             notificationsBihourlyAlarm.setAlarm();
+
+            Timber.d("scraperAlarm: %d", widgetId);
+            ScraperAlarm scraperAlarm = new ScraperAlarm(context, widgetId);
+            scraperAlarm.setAlarm();
         }
     }
 
@@ -653,31 +555,91 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
         scheduleEvent(context, widgetId, NotificationEvent.EVENT_DAILY);
     }
 
-    private boolean isNextQuotationDifferentFromCurrentQuotation(
+    private void onReceiveBihourlyAlarm(
             @NonNull final Context context,
-            final int widgetId) {
-        QuotationEntity currentQuotation
-                = getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId);
+            final int widgetId,
+            @NonNull final NotificationsBihourlyAlarm notificationsBihourlyAlarm) {
+        notificationsBihourlyAlarm.setAlarm();
+        scheduleEvent(context, widgetId, NotificationEvent.BIHOURLY);
+    }
 
-        NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
+    private void onReceiveScraperAlarm(
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager,
+            @NonNull final ScraperAlarm scraperAlarm) {
+        scraperAlarm.setAlarm();
 
-        QuotationEntity nextQuotation
-                = getQuoteUnquoteModel(widgetId, context).getNextQuotation(
-                widgetId,
-                notificationsPreferences.getEventNextRandom());
+        QuotationsPreferences quotationsPreferences = getQuotationsPreferences(context, widgetId);
 
-        Timber.d("notificationId via: currentDigest=%s; nextDigest=%s",
-                currentQuotation.digest, nextQuotation.digest);
+        ScraperData scraperData = getQuoteUnquoteModel(widgetId, context).getWebPage(
+                context,
+                quotationsPreferences.getDatabaseWebUrl(),
+                quotationsPreferences.getDatabaseWebXpathQuotation(),
+                quotationsPreferences.getDatabaseWebXpathSource()
+        );
+
+        if (scraperData.getScrapeResult()) {
+            displayAppropriateScrapedQuotation(
+                    context,
+                    widgetId,
+                    scraperData.getQuotation(),
+                    scraperData.getSource() // + " : " + Calendar.getInstance().get(Calendar.MINUTE);
+            );
 
-        return !currentQuotation.digest.equals(nextQuotation.digest);
+            appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
+        }
     }
 
-    private void onReceiveBihourlyAlarm(
-            @NonNull final Context context,
-            final int widgetId,
-            @NonNull final NotificationsBihourlyAlarm notificationsBihourlyAlarm) {
-        notificationsBihourlyAlarm.setAlarm();
-        scheduleEvent(context, widgetId, NotificationEvent.BIHOURLY);
+    public void displayAppropriateScrapedQuotation(
+            @NonNull Context context,
+            int widgetId,
+            @NonNull String quotation,
+            @NonNull String source) {
+
+        if (getQuotationsPreferences(context, widgetId).getDatabaseWebKeepLatestOnly()) {
+            Timber.w("scraper: keep latest only");
+            getQuoteUnquoteModel(widgetId, context).insertWebPage(
+                    widgetId,
+                    quotation,
+                    source,
+                    ImportHelper.DEFAULT_DIGEST
+            );
+            return;
+        }
+
+        QuotationEntity currentQuotation
+                = getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId);
+        if (currentQuotation.quotation.equals(quotation)
+                && currentQuotation.author.equals(source)) {
+            Timber.w("scraper: current");
+            return;
+        }
+
+        QuotationEntity defaultQuotation
+                = getQuoteUnquoteModel(widgetId, context).getQuotation(ImportHelper.DEFAULT_DIGEST);
+        if (defaultQuotation != null
+                && defaultQuotation.quotation.equals(quotation)
+                && defaultQuotation.author.equals(source)) {
+            Timber.w("scraper: previous, default");
+            getQuoteUnquoteModel(widgetId, context).markAsCurrent(widgetId, ImportHelper.DEFAULT_DIGEST);
+            return;
+        }
+
+        String digest = ImportHelper.makeDigest(quotation, source);
+        if (getQuoteUnquoteModel(widgetId, context).getQuotation(digest) != null) {
+            Timber.w("scraper: previous");
+            getQuoteUnquoteModel(widgetId, context).markAsCurrent(widgetId, digest);
+            return;
+        }
+
+        Timber.d("scraper: new");
+        getQuoteUnquoteModel(widgetId, context).insertWebPage(
+                widgetId,
+                quotation,
+                source,
+                digest
+        );
     }
 
     private void scheduleEvent(
@@ -876,11 +838,8 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull final Context context,
             final int widgetId,
             @NonNull final NotificationsDailyAlarm notificationsDailyAlarm,
-            @NonNull final NotificationsBihourlyAlarm notificationsBihourlyAlarm) {
-
-        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) {
-            launchExternalObserver(context, widgetId, getQuoteUnquoteModel(widgetId, context));
-        }
+            @NonNull final NotificationsBihourlyAlarm notificationsBihourlyAlarm,
+            @NonNull final ScraperAlarm scraperAlarm) {
 
         if (getQuoteUnquoteModel(widgetId, context).getCurrentQuotation(widgetId) == null) {
             getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
@@ -891,8 +850,24 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             getQuoteUnquoteModel(widgetId, context).markAsCurrentDefault(widgetId);
         }
 
-        NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
+        manageAlarms(context, widgetId,
+                notificationsDailyAlarm, notificationsBihourlyAlarm, scraperAlarm);
+    }
+
+    private void manageAlarms(
+            @NonNull Context context, int widgetId,
+            @NonNull NotificationsDailyAlarm notificationsDailyAlarm,
+            @NonNull NotificationsBihourlyAlarm notificationsBihourlyAlarm,
+            @NonNull ScraperAlarm scraperAlarm) {
+
+        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+        if (quotationsPreferences.getDatabaseExternalWeb()) {
+            scraperAlarm.setAlarm();
+        } else {
+            scraperAlarm.resetAlarm();
+        }
 
+        NotificationsPreferences notificationsPreferences = new NotificationsPreferences(widgetId, context);
         if (notificationsPreferences.getEventDaily()) {
             notificationsDailyAlarm.setAlarm();
         } else {
@@ -1095,6 +1070,9 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
 
             final NotificationsBihourlyAlarm notificationsBihourlyAlarm = new NotificationsBihourlyAlarm(context, widgetId);
             notificationsBihourlyAlarm.resetAlarm();
+
+            final ScraperAlarm scraperAlarm = new ScraperAlarm(context, widgetId);
+            scraperAlarm.resetAlarm();
         }
     }
 
@@ -1129,6 +1107,12 @@ public class QuoteUnquoteWidget extends AppWidgetProvider {
             int widgetId, @NonNull final Context context) {
         if (quoteUnquoteModel == null) {
             quoteUnquoteModel = new QuoteUnquoteModel(widgetId, context);
+        } else {
+            if (getQuotationsPreferences(context, widgetId).getDatabaseInternal()) {
+                quoteUnquoteModel.databaseRepository.useInternalDatabase = true;
+            } else {
+                quoteUnquoteModel.databaseRepository.useInternalDatabase = false;
+            }
         }
 
         return quoteUnquoteModel;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
index 1bcc534..9a27012 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
@@ -65,7 +65,12 @@ open class TransferBackupSettings(val context: Context) {
             quotationPreferences.contentSelectionSearch,
 
             quotationPreferences.databaseInternal,
-            quotationPreferences.databaseExternal,
+            quotationPreferences.databaseExternalCsv,
+            quotationPreferences.databaseExternalWeb,
+            quotationPreferences.databaseWebUrl,
+            quotationPreferences.databaseWebXpathQuotation,
+            quotationPreferences.databaseWebXpathSource,
+            quotationPreferences.databaseWebKeepLatestOnly,
         )
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
index 6df4e13..b88154f 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
@@ -283,7 +283,12 @@ class TransferRestore : TransferCommon() {
 
         // we always move back to the Internal after a restore
         quotationsPreferences.databaseInternal = true
-        quotationsPreferences.databaseExternal = false
+        quotationsPreferences.databaseExternalCsv = false
+        quotationsPreferences.databaseExternalWeb = false
+        quotationsPreferences.databaseWebUrl = quotations.databaseWebUrl
+        quotationsPreferences.databaseWebXpathQuotation = quotations.databaseWebXpathQuotation
+        quotationsPreferences.databaseWebXpathSource = quotations.databaseWebXpathSource
+        quotationsPreferences.databaseWebKeepLatestOnly = quotations.databaseWebKeepLatestOnly
     }
 
     private fun restoreSettingsAppearance(
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
index 7fddf53..ee6158c 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
@@ -1,5 +1,8 @@
 package com.github.jameshnsears.quoteunquote.configure.fragment;
 
+import android.widget.Button;
+
+import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 
 public class FragmentCommon extends Fragment {
@@ -12,4 +15,8 @@ public class FragmentCommon extends Fragment {
     public FragmentCommon(final int theWidgetId) {
         widgetId = theWidgetId;
     }
+
+    public void makeButtonAlpha(@NonNull final Button button, final boolean enable) {
+        button.setAlpha(enable ? 1 : 0.25f);
+    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java
index 2da382c..e7922cd 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentStateAdapter.java
@@ -34,12 +34,6 @@ public class QuotationsFragmentStateAdapter extends FragmentStateAdapter {
         }
     }
 
-    public static void alignSelectionFragmentWithSelectedDatabase(int widgetId, @NonNull Context context) {
-        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
-        quotationsPreferences.setContentSelection(ContentSelection.ALL);
-        quotationsPreferences.setContentSelectionAuthor("");
-    }
-
     @Override
     public int getItemCount() {
         return 2;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
index 803fd3a..444750c 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
@@ -24,8 +24,31 @@ public class QuotationsPreferences extends PreferencesFacade {
 
     public static final String DATABASE_INTERNAL = "DATABASE_INTERNAL";
     public static final String DATABASE_EXTERNAL = "DATABASE_EXTERNAL";
-    public static final String DATABASE_EXTERNAL_PATH = "DATABASE_EXTERNAL_PATH";
-    public static final String DATABASE_EXTERNAL_WATCH = "DATABASE_EXTERNAL_WATCH";
+    public static final String DATABASE_EXTERNAL_WEB = "DATABASE_EXTERNAL_WEB";
+    public static final String DATABASE_WEB_URL = "DATABASE_WEB_URL";
+    public static final String DATABASE_WEB_XPATH_QUOTATION = "DATABASE_WEB_XPATH_QUOTATION";
+    public static final String DATABASE_WEB_XPATH_SOURCE = "DATABASE_WEB_XPATH_SOURCE";
+    public static final String DATABASE_WEB_KEEP_LATEST_ONLY = "DATABASE_WEB_KEEP_LATEST_ONLY";
+
+    public static final String DATABASE_EXTERNAL_CONTENT = "DATABASE_EXTERNAL_CONTENT";
+
+    @NonNull
+    public boolean getDatabaseWebKeepLatestOnly() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_KEEP_LATEST_ONLY), true);
+    }
+
+    public void setDatabaseWebKeepLatestOnly(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_KEEP_LATEST_ONLY), value);
+    }
+
+    @NonNull
+    public String getDatabaseExternalContent() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(DATABASE_EXTERNAL_CONTENT));
+    }
+
+    public void setDatabaseExternalContent(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(DATABASE_EXTERNAL_CONTENT), value);
+    }
 
     @NonNull
     public boolean getDatabaseInternal() {
@@ -37,30 +60,48 @@ public class QuotationsPreferences extends PreferencesFacade {
     }
 
     @NonNull
-    public String getDatabaseExternalPath() {
-        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_PATH));
+    public boolean getDatabaseExternalCsv() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), false);
     }
 
-    public void setDatabaseExternalPath(@NonNull String value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_PATH), value);
+    public void setDatabaseExternalCsv(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), value);
     }
 
     @NonNull
-    public boolean getDatabaseExternal() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), false);
+    public String getDatabaseWebXpathSource() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_XPATH_SOURCE));
     }
 
-    public void setDatabaseExternal(@NonNull boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL), value);
+    public void setDatabaseWebXpathSource(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_XPATH_SOURCE), value);
+    }
+
+    @NonNull
+    public String getDatabaseWebXpathQuotation() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_XPATH_QUOTATION));
+    }
+
+    public void setDatabaseWebXpathQuotation(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_XPATH_QUOTATION), value);
+    }
+
+    @NonNull
+    public String getDatabaseWebUrl() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_URL));
+    }
+
+    public void setDatabaseWebUrl(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_WEB_URL), value);
     }
 
     @NonNull
-    public boolean getDatabaseExternalWatch() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_WATCH), false);
+    public boolean getDatabaseExternalWeb() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_WEB), false);
     }
 
-    public void setDatabaseExternalWatch(@NonNull boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_WATCH), value);
+    public void setDatabaseExternalWeb(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.DATABASE_EXTERNAL_WEB), value);
     }
 
     public QuotationsPreferences(@NonNull Context applicationContext) {
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java
index 1dfd733..b24413b 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/database/QuotationsDatabaseFragment.java
@@ -1,12 +1,7 @@
 package com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.database;
 
-import static android.view.View.VISIBLE;
-
-import android.Manifest;
 import android.app.Activity;
 import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.ParcelFileDescriptor;
 import android.text.method.LinkMovementMethod;
@@ -21,25 +16,27 @@ import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import androidx.core.content.ContextCompat;
 
+import com.github.jameshnsears.quoteunquote.BuildConfig;
 import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
-import com.github.jameshnsears.quoteunquote.QuoteUnquoteWidget;
 import com.github.jameshnsears.quoteunquote.R;
 import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
 import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
-import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragmentStateAdapter;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.tabs.filter.QuotationsFilterFragment;
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsTabDatabaseBinding;
-import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.ImportHelper;
+import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+import com.github.jameshnsears.quoteunquote.utils.scraper.ScraperData;
 
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
 
 import timber.log.Timber;
 
@@ -107,99 +104,110 @@ public class QuotationsDatabaseFragment extends FragmentCommon {
         this.setDatabase();
 
         this.createListenerRadioInternal();
-        this.createListenerRadioExternal();
-        this.createListenerButtonImport();
-        this.createListenerSwitchWatch();
 
-        this.setHandleImport();
+        this.createListenerRadioExternalCsv();
+        this.createListenerButtonImportCsv();
+
+        this.createListenerRadioExternalWeb();
+        createListenerToolbarShareNoSource();
+        this.createListenerButtonImportWebPage();
 
-        setSwitchWatch();
+        this.setHandleImportCsv();
     }
 
-    private void setSwitchWatch() {
-        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) {
-            fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setVisibility(VISIBLE);
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        this.fragmentQuotationsTabDatabaseBinding = null;
+    }
+
+    private void setDatabase() {
+        if (BuildConfig.DEBUG) {
+            String url = "https://www.bible.com/verse-of-the-day";
+            if (BuildConfig.DATABASE_QUOTATIONS.contains(".db.dev")) {
+                // javalin - Listening on http://localhost:7070/
+                url = "http://10.0.2.2:7070/verse-of-the-day";
+            }
+            fragmentQuotationsTabDatabaseBinding.editTextUrl.setText(url);
+            fragmentQuotationsTabDatabaseBinding.editTextXpathQuotation
+                    .setText(getContext().getString(R.string.fragment_quotations_database_scrape_quotation_example));
+            fragmentQuotationsTabDatabaseBinding.editTextXpathSource.setText(
+                    getContext().getString(R.string.fragment_quotations_database_scrape_source_example));
+        }
+
+        if (this.quotationsPreferences.getDatabaseInternal()) {
+            setDatabaseInternal();
 
-            if (quotationsPreferences.getDatabaseExternalWatch()) {
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setChecked(true);
-            } else {
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setChecked(false);
+            String databseExternalContent = quotationsPreferences.getDatabaseExternalContent();
+            if (databseExternalContent.equals(QuotationsPreferences.DATABASE_EXTERNAL)) {
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setEnabled(true);
             }
 
-            if (quotationsPreferences.getDatabaseInternal()) {
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setEnabled(false);
-            } else {
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setEnabled(true);
+            if (databseExternalContent.equals(QuotationsPreferences.DATABASE_EXTERNAL_WEB)) {
+                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setEnabled(true);
             }
         }
-    }
 
-    private void createListenerSwitchWatch() {
-        fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setOnCheckedChangeListener((buttonView, isChecked) -> {
+        if (this.quotationsPreferences.getDatabaseExternalCsv()) {
+            setDatabaseExternalCsv();
+        }
 
-            if (buttonView.isPressed()) {
-                if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) {
-                    if (ContextCompat.checkSelfPermission(
-                            getContext(), Manifest.permission.READ_EXTERNAL_STORAGE) ==
-                            PackageManager.PERMISSION_DENIED) {
+        if (this.quotationsPreferences.getDatabaseExternalWeb()) {
+            setDatabaseExternalWeb();
+        }
 
-                        ConfigureActivity.launcherInvoked = true;
-                        requestPermissionLauncher.launch(
-                                Manifest.permission.READ_EXTERNAL_STORAGE);
-                    }
-                }
+        this.fragmentQuotationsTabDatabaseBinding.switchKeepLatestResponseOnly.setChecked(
+                this.quotationsPreferences.getDatabaseWebKeepLatestOnly()
+        );
+    }
 
-                quotationsPreferences.setDatabaseExternalWatch(isChecked);
-            }
-        });
+    private void setDatabaseInternal() {
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(true);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setChecked(false);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setChecked(false);
+
+        this.quotationsPreferences.setDatabaseInternal(true);
+        this.quotationsPreferences.setDatabaseExternalCsv(false);
+        this.quotationsPreferences.setDatabaseExternalWeb(false);
+
+        DatabaseRepository.useInternalDatabase = true;
     }
 
-    private final ActivityResultLauncher<String> requestPermissionLauncher =
-            registerForActivityResult(new ActivityResultContracts.RequestPermission(), isPermissionAllowed -> {
-                if (!isPermissionAllowed) {
-                    Toast.makeText(
-                            getContext(),
-                            getContext().getString(R.string.fragment_quotations_database_external_watch_permission),
-                            Toast.LENGTH_LONG).show();
-
-                    fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setChecked(false);
-                    quotationsPreferences.setDatabaseExternalWatch(false);
-                } else {
-                    quotationsPreferences.setDatabaseExternalWatch(true);
-                }
-            });
+    private void setDatabaseExternalCsv() {
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setChecked(true);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setEnabled(true);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setChecked(false);
 
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        this.fragmentQuotationsTabDatabaseBinding = null;
+        this.quotationsPreferences.setDatabaseInternal(false);
+        this.quotationsPreferences.setDatabaseExternalCsv(true);
+        this.quotationsPreferences.setDatabaseExternalWeb(false);
+        this.quotationsPreferences.setDatabaseExternalContent(QuotationsPreferences.DATABASE_EXTERNAL);
+
+        DatabaseRepository.useInternalDatabase = false;
     }
 
-    private void setDatabase() {
-        if (this.quotationsPreferences.getDatabaseInternal()) {
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(true);
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(false);
-            this.quotationsPreferences.setDatabaseInternal(true);
-            this.quotationsPreferences.setDatabaseExternal(false);
-
-            DatabaseRepository.useInternalDatabase = true;
-        } else {
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
-            this.quotationsPreferences.setDatabaseInternal(false);
-            this.quotationsPreferences.setDatabaseExternal(true);
-
-            DatabaseRepository.useInternalDatabase = false;
-        }
+    private void setDatabaseExternalWeb() {
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setChecked(false);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setChecked(true);
+        this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setEnabled(true);
 
-        if (quoteUnquoteModel.externalDatabaseContainsQuotations()) {
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
-        } else {
-            this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(false);
-        }
+        this.quotationsPreferences.setDatabaseInternal(false);
+        this.quotationsPreferences.setDatabaseExternalCsv(false);
+        this.quotationsPreferences.setDatabaseExternalWeb(true);
+        this.quotationsPreferences.setDatabaseExternalContent(QuotationsPreferences.DATABASE_EXTERNAL_WEB);
+
+        fragmentQuotationsTabDatabaseBinding.editTextUrl.setText(quotationsPreferences.getDatabaseWebUrl());
+        fragmentQuotationsTabDatabaseBinding.editTextXpathQuotation.setText(quotationsPreferences.getDatabaseWebXpathQuotation());
+        fragmentQuotationsTabDatabaseBinding.editTextXpathSource.setText(quotationsPreferences.getDatabaseWebXpathSource());
+
+        DatabaseRepository.useInternalDatabase = false;
     }
 
-    protected void createListenerButtonImport() {
+    protected void createListenerButtonImportCsv() {
+        // adb push app/src/androidTest/assets/Favourites.csv /sdcard/Download
+
         // invoke Storage Access Framework
         fragmentQuotationsTabDatabaseBinding.buttonImport.setOnClickListener(v -> {
             if (fragmentQuotationsTabDatabaseBinding.buttonImport.isEnabled()) {
@@ -217,141 +225,202 @@ public class QuotationsDatabaseFragment extends FragmentCommon {
         final RadioButton radioButtonDatabaseInternal = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal;
         radioButtonDatabaseInternal.setOnCheckedChangeListener((buttonView, isChecked) -> {
             if (isChecked) {
-                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(true);
-                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(false);
-                this.quotationsPreferences.setDatabaseInternal(true);
-                this.quotationsPreferences.setDatabaseExternal(false);
-
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setEnabled(false);
-
-                DatabaseRepository.useInternalDatabase = true;
+                setDatabaseInternal();
+                updateQuotationsUI();
+            }
+        });
+    }
 
+    private void createListenerRadioExternalCsv() {
+        final RadioButton radioButtonDatabaseExternalCsv = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv;
+        radioButtonDatabaseExternalCsv.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (isChecked) {
+                setDatabaseExternalCsv();
                 updateQuotationsUI();
             }
         });
     }
 
-    private void createListenerRadioExternal() {
-        final RadioButton radioButtonDatabaseCSV = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal;
-        radioButtonDatabaseCSV.setOnCheckedChangeListener((buttonView, isChecked) -> {
+    private void createListenerRadioExternalWeb() {
+        final RadioButton radioButtonDatabaseExternalWeb = this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb;
+        radioButtonDatabaseExternalWeb.setOnCheckedChangeListener((buttonView, isChecked) -> {
             if (isChecked) {
-                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseInternal.setChecked(false);
-                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
-                this.fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
+                setDatabaseExternalWeb();
+                updateQuotationsUI();
+            }
+        });
+    }
 
-                this.quotationsPreferences.setDatabaseInternal(false);
-                this.quotationsPreferences.setDatabaseExternal(true);
+    private String getWebUrl() {
+        String url = fragmentQuotationsTabDatabaseBinding.editTextUrl.getText().toString();
+        Timber.d("url=%s", url);
+        this.quotationsPreferences.setDatabaseWebUrl(url);
+        return url;
+    }
 
-                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setEnabled(true);
+    private String getWebXpathQuotation() {
+        String xpathQuotation = fragmentQuotationsTabDatabaseBinding.editTextXpathQuotation.getText().toString();
+        Timber.d("xpathQuotation=%s", xpathQuotation);
+        this.quotationsPreferences.setDatabaseWebXpathQuotation(xpathQuotation);
+        return xpathQuotation;
+    }
 
-                DatabaseRepository.useInternalDatabase = false;
+    private String getWebXpathSource() {
+        String xpathSource = fragmentQuotationsTabDatabaseBinding.editTextXpathSource.getText().toString();
+        Timber.d("xpathSource=%s", xpathSource);
+        this.quotationsPreferences.setDatabaseWebXpathSource(xpathSource);
+        return xpathSource;
+    }
 
-                updateQuotationsUI();
+
+    private void createListenerToolbarShareNoSource() {
+        fragmentQuotationsTabDatabaseBinding.switchKeepLatestResponseOnly.setOnCheckedChangeListener((buttonView, isChecked) ->
+                this.quotationsPreferences.setDatabaseWebKeepLatestOnly(isChecked)
+        );
+    }
+
+    private void createListenerButtonImportWebPage() {
+        fragmentQuotationsTabDatabaseBinding.buttonImportWebPage.setOnClickListener(v -> {
+            if (fragmentQuotationsTabDatabaseBinding.buttonImportWebPage.isPressed()) {
+                if (fragmentQuotationsTabDatabaseBinding.buttonImportWebPage.isEnabled()) {
+
+                    String url = getWebUrl();
+                    String xpathQuotation = getWebXpathQuotation();
+                    String xpathSource = getWebXpathSource();
+
+                    if (url.equals("") || xpathQuotation.equals("") | xpathSource.equals("")
+                    || url.length() < 10) {
+                        Toast.makeText(
+                                getContext(),
+                                getContext().getString(R.string.fragment_quotations_database_scrape_fields_error_incomplete),
+                                Toast.LENGTH_SHORT).show();
+                    } else {
+                        Toast.makeText(
+                                this.getContext(),
+                                this.getContext().getString(R.string.fragment_quotations_database_scrape_importing),
+                                Toast.LENGTH_SHORT).show();
+
+                        ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+                        properties.put("WebPage",
+                                "url=" + url + "; xpathQuotation=" + xpathQuotation + "; xpathSource=" + xpathSource);
+                        AuditEventHelper.auditEvent("WEB_PAGE", properties);
+
+                        ScraperData scraperData = quoteUnquoteModel.getWebPage(
+                                getContext(), url, xpathQuotation, xpathSource);
+
+                        if (scraperData.getScrapeResult()) {
+                            quoteUnquoteModel.insertWebPage(
+                                    widgetId,
+                                    scraperData.getQuotation(),
+                                    scraperData.getSource(),
+                                    ImportHelper.DEFAULT_DIGEST
+                            );
+
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setEnabled(false);
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setChecked(false);
+
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setEnabled(true);
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setChecked(true);
+
+                            importWasSuccessful();
+
+                            Toast.makeText(
+                                    getContext(),
+                                    getContext().getString(R.string.fragment_quotations_database_scrape_test_success),
+                                    Toast.LENGTH_SHORT).show();
+                        }
+                    }
+                }
             }
         });
     }
 
-    private void setHandleImport() {
+    private void importWasSuccessful() {
+        quotationsPreferences.setContentSelectionSearchCount(0);
+        quotationsPreferences.setContentSelectionSearch("");
+
+        DatabaseRepository.useInternalDatabase = false;
+
+        updateQuotationsUI();
+    }
+
+    private void setHandleImportCsv() {
         // default: /storage/emulated/0/Download/
         this.storageAccessFrameworkActivityResultCSV = this.registerForActivityResult(
                 new ActivityResultContracts.StartActivityForResult(),
                 activityResult -> {
                     Timber.d("%d", activityResult.getResultCode());
 
-                    if (activityResult.getResultCode() == Activity.RESULT_CANCELED) {
+                    if (activityResult.getResultCode() == Activity.RESULT_OK) {
                         Toast.makeText(
                                 this.getContext(),
-                                this.getContext().getString(R.string.fragment_quotations_database_import_no_csv_selected),
+                                this.getContext().getString(R.string.fragment_quotations_database_import_importing),
                                 Toast.LENGTH_SHORT).show();
-                    } else {
-                        if (activityResult.getResultCode() == Activity.RESULT_OK) {
+
+                        ParcelFileDescriptor parcelFileDescriptor = null;
+                        FileInputStream fileInputStream = null;
+
+                        try {
+                            parcelFileDescriptor = this.getContext().getContentResolver().openFileDescriptor(
+                                    activityResult.getData().getData(), "r");
+                            fileInputStream
+                                    = new FileInputStream(parcelFileDescriptor.getFileDescriptor());
+
+                            final ImportHelper importHelper = new ImportHelper();
+                            final LinkedHashSet<QuotationEntity> quotations = importHelper.csvImportDatabase(fileInputStream);
+                            quoteUnquoteModel.insertQuotationsExternal(quotations);
+
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setEnabled(true);
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalCsv.setChecked(true);
+
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setEnabled(false);
+                            fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternalWeb.setChecked(false);
+
+                            importWasSuccessful();
+
                             Toast.makeText(
                                     this.getContext(),
-                                    this.getContext().getString(R.string.fragment_quotations_database_import_importing),
+                                    this.getContext().getString(R.string.fragment_quotations_database_import_success),
                                     Toast.LENGTH_SHORT).show();
 
-                            stopExternalObserver();
-
-                            ParcelFileDescriptor parcelFileDescriptor = null;
-                            FileInputStream fileInputStream = null;
-
+                        } catch (final ImportHelper.ImportHelperException | IOException e) {
+                            Toast.makeText(
+                                    this.getContext(),
+                                    this.getContext().getString(
+                                            R.string.fragment_quotations_database_import_contents,
+                                            e.getMessage()),
+                                    Toast.LENGTH_LONG).show();
+                        } finally {
                             try {
-                                parcelFileDescriptor = this.getContext().getContentResolver().openFileDescriptor(
-                                        activityResult.getData().getData(), "r");
-
-                                fileInputStream
-                                        = new FileInputStream(parcelFileDescriptor.getFileDescriptor());
-
-                                final CSVHelper csvHelper = new CSVHelper();
-                                final LinkedHashSet<QuotationEntity> quotations = csvHelper.csvImportDatabase(fileInputStream);
-
-                                quoteUnquoteModel.insertQuotationsExternal(quotations);
-
-                                fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setEnabled(true);
-                                fragmentQuotationsTabDatabaseBinding.radioButtonDatabaseExternal.setChecked(true);
-
-                                quotationsPreferences.setContentSelectionSearchCount(0);
-                                quotationsPreferences.setContentSelectionSearch("");
-
-                                DatabaseRepository.useInternalDatabase = false;
-
-                                File file = new File("/proc/self/fd/" + parcelFileDescriptor.getFd());
-                                quotationsPreferences.setDatabaseExternalPath(file.getCanonicalPath());
-
-                                fragmentQuotationsTabDatabaseBinding.switchExternalWatch.setEnabled(true);
-
-                                updateQuotationsUI();
-
-                                Toast.makeText(
-                                        this.getContext(),
-                                        this.getContext().getString(R.string.fragment_quotations_database_import_success),
-                                        Toast.LENGTH_SHORT).show();
-
-                            } catch (final CSVHelper.CVSHelperException | IOException e) {
-                                Toast.makeText(
-                                        this.getContext(),
-                                        this.getContext().getString(
-                                                R.string.fragment_quotations_database_import_contents,
-                                                e.getMessage()),
-                                        Toast.LENGTH_LONG).show();
-                            } finally {
-                                try {
-                                    if (fileInputStream != null) {
-                                        fileInputStream.close();
-                                    }
-                                    if (parcelFileDescriptor != null) {
-                                        parcelFileDescriptor.close();
-                                    }
-                                } catch (IOException e) {
-                                    Timber.e(e.getMessage());
+                                if (fileInputStream != null) {
+                                    fileInputStream.close();
                                 }
+                                if (parcelFileDescriptor != null) {
+                                    parcelFileDescriptor.close();
+                                }
+                            } catch (IOException e) {
+                                Timber.e(e.getMessage());
                             }
                         }
-
-                        ConfigureActivity.launcherInvoked = false;
                     }
-                });
-    }
-
-    public void stopExternalObserver() {
-        if (fragmentQuotationsTabDatabaseBinding.switchExternalWatch.isChecked()) {
 
-            try {
-                if (QuoteUnquoteWidget.externalObserver != null) {
-                    Timber.d("ExternalObserver.stop.request");
-                    QuoteUnquoteWidget.externalObserver.cancel(true);
-                    Thread.sleep(QuoteUnquoteWidget.externalObserverInternal);
-                    QuoteUnquoteWidget.externalObserver = null;
-                }
-            } catch (InterruptedException e) {
-                Timber.e(e.getMessage());
-            }
-        }
+                    ConfigureActivity.launcherInvoked = false;
+                });
     }
 
     private void updateQuotationsUI() {
-        QuotationsFragmentStateAdapter.alignSelectionFragmentWithSelectedDatabase(widgetId, getContext());
+        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, getContext());
+        quotationsPreferences.setContentSelection(ContentSelection.ALL);
+        quotationsPreferences.setContentSelectionAuthorCount(-1);
+        quotationsPreferences.setContentSelectionAuthor("");
+
         quotationsFilterFragment.shutdown();
         quotationsFilterFragment.initUi();
+
+        List<Integer> quotationsCountAsList = quoteUnquoteModel.authorsQuotationCountAsList();
+        quotationsFilterFragment.populateAuthorsQuotationCount(quotationsCountAsList);
+
+        int authorCount = quotationsPreferences.getContentSelectionAuthorCount().intValue();
+        quotationsFilterFragment.populateAuthors(quoteUnquoteModel.authorsAsList(authorCount));
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/filter/QuotationsFilterFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/filter/QuotationsFilterFragment.java
index 98145ba..f12e96d 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/filter/QuotationsFilterFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/tabs/filter/QuotationsFilterFragment.java
@@ -11,7 +11,6 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.RadioButton;
 import android.widget.Toast;
@@ -29,7 +28,7 @@ import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
 import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
 import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
 import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsTabSelectionBinding;
-import com.github.jameshnsears.quoteunquote.utils.CSVHelper;
+import com.github.jameshnsears.quoteunquote.utils.ImportHelper;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
 import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
 import com.jakewharton.rxbinding2.widget.RxTextView;
@@ -241,6 +240,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
         setExclusions();
 
         setAuthorsQuotationCount();
+        setAuthors();
 
         setFavouriteCount();
 
@@ -346,15 +346,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
                         new DisposableSingleObserver<List<Integer>>() {
                             @Override
                             public void onSuccess(@NonNull final List<Integer> authorCountList) {
-                                final ArrayAdapter<Integer> adapter = new ArrayAdapter<>(
-                                        getContext(),
-                                        R.layout.spinner_item,
-                                        authorCountList);
-                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                                fragmentQuotationsTabSelectionBinding.spinnerAuthorsCount.setAdapter(adapter);
-
-                                fragmentQuotationsTabSelectionBinding.spinnerAuthorsCount.setSelection(
-                                        authorCountList.indexOf(quotationsPreferences.getContentSelectionAuthorCount()));
+                                populateAuthorsQuotationCount(authorCountList);
                             }
 
                             @Override
@@ -364,6 +356,18 @@ public class QuotationsFilterFragment extends FragmentCommon {
                         }));
     }
 
+    public void populateAuthorsQuotationCount(@NonNull List<Integer> authorCountList) {
+        final ArrayAdapter<Integer> adapter = new ArrayAdapter<>(
+                getContext(),
+                R.layout.spinner_item,
+                authorCountList);
+        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        fragmentQuotationsTabSelectionBinding.spinnerAuthorsCount.setAdapter(adapter);
+
+        fragmentQuotationsTabSelectionBinding.spinnerAuthorsCount.setSelection(
+                authorCountList.indexOf(quotationsPreferences.getContentSelectionAuthorCount()));
+    }
+
     public void setAuthors() {
         disposables.add(quoteUnquoteModel.authors(
                         quotationsPreferences.getContentSelectionAuthorCount().intValue()
@@ -374,28 +378,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
                         new DisposableSingleObserver<List<AuthorPOJO>>() {
                             @Override
                             public void onSuccess(@NonNull final List<AuthorPOJO> authorPOJOList) {
-                                final List<String> authors
-                                        = quoteUnquoteModel.authorsSorted(authorPOJOList);
-
-                                final ArrayAdapter<String> adapter = new ArrayAdapter<>(
-                                        getContext(),
-                                        R.layout.spinner_item,
-                                        authors);
-                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                                fragmentQuotationsTabSelectionBinding.spinnerAuthors.setAdapter(adapter);
-
-                                // first time usage
-                                if ("".equals(quotationsPreferences.getContentSelectionAuthor())) {
-                                    quotationsPreferences.setContentSelectionAuthor(authors.get(0));
-                                }
-
-                                if (authors.contains(quotationsPreferences.getContentSelectionAuthor())) {
-                                    // author is within quotation count range
-                                    setAuthorName(quotationsPreferences.getContentSelectionAuthor());
-                                } else {
-                                    quotationsPreferences.setContentSelectionAuthor(authors.get(0));
-                                    setAuthorName(authors.get(0));
-                                }
+                                populateAuthors(authorPOJOList);
                             }
 
                             @Override
@@ -405,8 +388,32 @@ public class QuotationsFilterFragment extends FragmentCommon {
                         }));
     }
 
-    protected void setAuthorName(final String authorPreference) {
+    public void populateAuthors(@NonNull List<AuthorPOJO> authorPOJOList) {
+        final List<String> authors
+                = quoteUnquoteModel.authorsSorted(authorPOJOList);
+
+        final ArrayAdapter<String> adapter = new ArrayAdapter<>(
+                getContext(),
+                R.layout.spinner_item,
+                authors);
+        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        fragmentQuotationsTabSelectionBinding.spinnerAuthors.setAdapter(adapter);
 
+        // first time usage
+        if ("".equals(quotationsPreferences.getContentSelectionAuthor())) {
+            quotationsPreferences.setContentSelectionAuthor(authors.get(0));
+        }
+
+        if (authors.contains(quotationsPreferences.getContentSelectionAuthor())) {
+            // author is within quotation count range
+            setAuthorName(quotationsPreferences.getContentSelectionAuthor());
+        } else {
+            quotationsPreferences.setContentSelectionAuthor(authors.get(0));
+            setAuthorName(authors.get(0));
+        }
+    }
+
+    protected void setAuthorName(final String authorPreference) {
         fragmentQuotationsTabSelectionBinding.spinnerAuthors.setSelection(
                 quoteUnquoteModel.authorsIndex(authorPreference));
 
@@ -430,7 +437,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
 
                                     fragmentQuotationsTabSelectionBinding.buttonExport.setEnabled(false);
                                     QuotationsFilterFragment.this.makeButtonAlpha(fragmentQuotationsTabSelectionBinding.buttonExport, false);
-                                    fragmentQuotationsTabSelectionBinding.textViewLocalStorageInstructions.setEnabled(false);
+                                    fragmentQuotationsTabSelectionBinding.textViewInformationExternal.setEnabled(false);
 
                                     // in case another widget instance changes favourites
                                     if (QuotationsFilterFragment.this.quotationsPreferences.getContentSelection().equals(ContentSelection.FAVOURITES)) {
@@ -439,7 +446,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
                                 } else {
                                     fragmentQuotationsTabSelectionBinding.buttonExport.setEnabled(true);
                                     QuotationsFilterFragment.this.makeButtonAlpha(fragmentQuotationsTabSelectionBinding.buttonExport, true);
-                                    fragmentQuotationsTabSelectionBinding.textViewLocalStorageInstructions.setEnabled(true);
+                                    fragmentQuotationsTabSelectionBinding.textViewInformationExternal.setEnabled(true);
                                 }
 
                                 fragmentQuotationsTabSelectionBinding.radioButtonFavourites.setText(
@@ -614,10 +621,6 @@ public class QuotationsFilterFragment extends FragmentCommon {
 
     }
 
-    public void makeButtonAlpha(@NonNull final Button button, final boolean enable) {
-        button.setAlpha(enable ? 1 : 0.25f);
-    }
-
     private void enableSearch(final boolean enable) {
         fragmentQuotationsTabSelectionBinding.editTextSearchText.setEnabled(enable);
 
@@ -634,7 +637,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
         }
     }
 
-    protected void createListenerAuthorsQuotationCount() {
+    public void createListenerAuthorsQuotationCount() {
         fragmentQuotationsTabSelectionBinding.spinnerAuthorsCount.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
             public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
@@ -718,7 +721,7 @@ public class QuotationsFilterFragment extends FragmentCommon {
                             final FileOutputStream fileOutputStream
                                     = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
 
-                            new CSVHelper()
+                            new ImportHelper()
                                     .csvExportFavourites(
                                             fileOutputStream,
                                             (ArrayList) quoteUnquoteModel.exportFavourites());
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
index 4616dc8..7bea8e2 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/sync/SyncFragment.java
@@ -509,7 +509,7 @@ public class SyncFragment extends FragmentCommon {
 
     public void enableButton(@NonNull final Button button, @NonNull final Boolean enabled) {
         button.setEnabled(enabled);
-        button.setAlpha(enabled ? 1 : 0.25f);
+        makeButtonAlpha(button, enabled);
     }
 
     public void alignLocalCodeWithRestoredcode() {
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
index f96afae..60d81db 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
@@ -733,9 +733,12 @@ public class DatabaseRepository {
 
     public void insertQuotationsExternal(
             @NonNull final LinkedHashSet<QuotationEntity> quotationEntityList) {
-
         for (final QuotationEntity quotationEntity : quotationEntityList) {
-            quotationExternalDAO.insertQuotation(quotationEntity);
+            insertQuotationExternal(quotationEntity);
         }
     }
+
+    public void insertQuotationExternal(QuotationEntity quotationEntity) {
+        quotationExternalDAO.insertQuotation(quotationEntity);
+    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
index 5d58e5f..0b99ba3 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
@@ -37,6 +37,9 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     @Nullable
     private final QuotationEntity quotationEntity;
 
+    @Nullable
+    private final String postion;
+
     @Nullable
     public QuoteUnquoteModel quoteUnquoteModel;
 
@@ -49,24 +52,9 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
             setQuoteUnquoteModel(new QuoteUnquoteModel(widgetId, context));
 
             quotationEntity = getQuoteUnquoteModel().getCurrentQuotation(widgetId);
-        }
-    }
 
-    private String getPosition() {
-        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
-
-        String quotationPosition = getQuoteUnquoteModel().getCurrentPosition(
-                widgetId,
-                quotationsPreferences);
-
-        String lastPreviousDigest = getQuoteUnquoteModel().
-                getLastPreviousDigest(widgetId, quotationsPreferences.getContentSelection());
-
-        if (quotationEntity.digest.equals(lastPreviousDigest)) {
-            quotationPosition = "\u2316  " + quotationPosition + " ";
+            postion = getQuoteUnquoteModel().getPosition(widgetId, quotationEntity.digest);
         }
-
-        return quotationPosition;
     }
 
     @Nullable
@@ -90,7 +78,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
                 // first time call
                 quotationList.add(quotationEntity.theQuotation());
                 quotationList.add(quotationEntity.theAuthor());
-                quotationList.add(getPosition());
+                quotationList.add(postion);
             } else {
                 // subsequent calls
                 if (quotationEntity != null) {
@@ -99,7 +87,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
                                 && !quotationList.get(0).equals(quotationEntity.theQuotation())) {
                             quotationList.set(0, quotationEntity.theQuotation());
                             quotationList.set(1, quotationEntity.theAuthor());
-                            quotationList.set(2, getPosition());
+                            quotationList.set(2, postion);
                         }
                     } catch (NullPointerException e) {
                         Timber.e(e.getMessage());
@@ -233,7 +221,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
 
         if (!quotationList.isEmpty()
                 && !"".equals(quotationEntity.theQuotation())
-                && !"".equals(getPosition())) {
+                && !"".equals(postion)) {
             setRemoteViewQuotation(remoteViews);
             setRemoteViewAuthor(remoteViews);
             setRemoteViewPosition(remoteViews);
@@ -282,7 +270,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     private void setRemoteViewPosition(RemoteViews remoteViews) {
         AppearancePreferences appearancePreferences = new AppearancePreferences(widgetId, context);
 
-        setText(remoteViews, R.id.textViewRowPosition, getPosition());
+        setText(remoteViews, R.id.textViewRowPosition, postion);
         setTextSize(remoteViews, R.id.textViewRowPosition, appearancePreferences.getAppearancePositionTextSize());
         setTextColour(remoteViews, R.id.textViewRowPosition, appearancePreferences.getAppearancePositionTextColour());
         setTextPaintFlags(remoteViews, R.id.textViewRowPosition, Paint.ANTI_ALIAS_FLAG);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ImportHelper.java
similarity index 86%
rename from app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java
rename to app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ImportHelper.java
index d0bf5f8..53988fe 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/CSVHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ImportHelper.java
@@ -20,7 +20,7 @@ import java.util.LinkedHashSet;
 
 import timber.log.Timber;
 
-public class CSVHelper {
+public class ImportHelper {
     private static String[] headers = {"Author", "Quotation"};
 
     public void csvExportFavourites(FileOutputStream fileOutputStream, ArrayList<QuotationEntity> exportableFavourites) throws IOException {
@@ -71,7 +71,7 @@ public class CSVHelper {
                 .build();
     }
 
-    public LinkedHashSet<QuotationEntity> csvImportDatabase(InputStream inputStream) throws CVSHelperException {
+    public LinkedHashSet<QuotationEntity> csvImportDatabase(InputStream inputStream) throws ImportHelperException {
         CSVParser parser = null;
 
         LinkedHashSet<QuotationEntity> quotationEntityLinkedHashSet = new LinkedHashSet<>();
@@ -102,7 +102,7 @@ public class CSVHelper {
             }
         } catch (IllegalStateException | IllegalArgumentException | IOException exception) {
             Timber.e("%s", exception.getMessage());
-            throw new CVSHelperException(exception.getMessage());
+            throw new ImportHelperException(exception.getMessage());
         } finally {
             if (parser != null) {
                 try {
@@ -114,43 +114,45 @@ public class CSVHelper {
         }
 
         if (quotationEntityLinkedHashSet.size() == 0) {
-            throw new CVSHelperException("empty file");
+            throw new ImportHelperException("empty file");
         }
 
         return quotationEntityLinkedHashSet;
     }
 
+    public static String DEFAULT_DIGEST = "00000000";
+
     private String makeDigest(int recordCount, String author, String quotation) {
         String digest;
         if (recordCount == 0) {
-            digest = "00000000";
+            digest = DEFAULT_DIGEST;
         } else {
             digest = makeDigest(quotation, author);
         }
         return digest;
     }
 
-    private void testNotEmptyQuotation(String quotation) throws CVSHelperException {
+    private void testNotEmptyQuotation(String quotation) throws ImportHelperException {
         if (quotation.equals("") || quotation.length() <= 1) {
-            throw new CVSHelperException("empty quotation");
+            throw new ImportHelperException("empty quotation");
         }
     }
 
-    private void testNotEmptyAuthor(String author) throws CVSHelperException {
+    private void testNotEmptyAuthor(String author) throws ImportHelperException {
         if (author.equals("")) {
-            throw new CVSHelperException("empty author");
+            throw new ImportHelperException("empty author");
         }
     }
 
-    public String makeDigest(String quotation, String author) {
+    public static String makeDigest(String quotation, String author) {
         String rawString = quotation + author;
         return Hashing.sha256()
                 .hashBytes(rawString.getBytes(StandardCharsets.UTF_8))
                 .toString().substring(0, 8);
     }
 
-    public class CVSHelperException extends Exception {
-        public CVSHelperException(String errorMessage) {
+    public class ImportHelperException extends Exception {
+        public ImportHelperException(String errorMessage) {
             super(errorMessage);
         }
     }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
index 82d74c2..9d727c8 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
@@ -47,6 +47,8 @@ public class IntentFactoryHelper {
     @NonNull
     public static final String BIHOURLY_ALARM = "BIHOURLY_ALARM";
     @NonNull
+    public static final String SCRAPER_ALARM = "WEB_PAGE_ALARM";
+    @NonNull
     private static final SecureRandom SECURE_RANDOM = new SecureRandom();
 
     @NonNull
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsBihourlyAlarm.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsBihourlyAlarm.java
index 95871c9..f2b74dc 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsBihourlyAlarm.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsBihourlyAlarm.java
@@ -30,7 +30,7 @@ public class NotificationsBihourlyAlarm extends NotificationsDailyAlarm {
             if (currentHour % 2 == 0) {
                 calendar.add(Calendar.HOUR_OF_DAY, 2);
             } else {
-                    calendar.add(Calendar.HOUR_OF_DAY, 1);
+                calendar.add(Calendar.HOUR_OF_DAY, 1);
             }
             calendar.set(Calendar.MINUTE, calendar.getMinimum(Calendar.MINUTE));
             calendar.set(Calendar.SECOND, calendar.getMinimum(Calendar.SECOND));
@@ -46,7 +46,7 @@ public class NotificationsBihourlyAlarm extends NotificationsDailyAlarm {
                     = IntentFactoryHelper.createClickPendingIntent(
                     this.context, this.widgetId, IntentFactoryHelper.BIHOURLY_ALARM);
 
-            alarmManager.setExact(
+            alarmManager.setExactAndAllowWhileIdle(
                     AlarmManager.RTC_WAKEUP,
                     calendar.getTimeInMillis(),
                     alarmPendingIntent);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsDailyAlarm.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsDailyAlarm.java
index 6902555..959b52f 100755
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsDailyAlarm.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/notification/NotificationsDailyAlarm.java
@@ -60,7 +60,7 @@ public class NotificationsDailyAlarm {
                     = IntentFactoryHelper.createClickPendingIntent(
                             context, widgetId, IntentFactoryHelper.DAILY_ALARM);
 
-            alarmManager.setExact(
+            alarmManager.setExactAndAllowWhileIdle(
                     AlarmManager.RTC_WAKEUP,
                     calendar.getTimeInMillis(),
                     alarmPendingIntent);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/Scraper.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/Scraper.kt
new file mode 100644
index 0000000..552d69a
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/Scraper.kt
@@ -0,0 +1,79 @@
+package com.github.jameshnsears.quoteunquote.utils.scraper
+
+import okhttp3.OkHttpClient
+import okhttp3.Request
+import org.jsoup.Jsoup
+import org.jsoup.nodes.Document
+import timber.log.Timber
+
+class Scraper {
+    fun getDocumentFromResources(resource: String): Document {
+        val html = this.javaClass.getResource(resource).readText()
+        return Jsoup.parse(html)
+    }
+
+    @Throws(ScraperUrlException::class)
+    fun getDocumentFromUrl(url: String = "https://www.bible.com/verse-of-the-day/"): Document {
+        try {
+            val response = OkHttpClient().newCall(requestBuilder(url)).execute()
+            val html = response.body?.string()
+            return Jsoup.parse(html)
+        } catch (e: Exception) {
+            Timber.e("scraper: Exception=%s", e.message)
+            throw ScraperUrlException(e.message)
+        }
+    }
+
+    fun requestBuilder(url: String): Request {
+        // https://www.baeldung.com/okhttp-timeouts
+        return Request.Builder()
+            .url(url)
+            .header(
+                "User-Agent",
+                "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/110.0",
+            )
+            .header("Accept-Language", "en-US,en;q=0.5")
+            .build()
+    }
+
+    @Throws(ScraperQuotationException::class)
+    fun getQuotation(
+        document: Document,
+        xpath: String = "//*[@id=\"votd_wrapper\"]/div/div/div[1]/div[2]/p[1]",
+    ): String {
+        try {
+            val quotation = getXpath(document, xpath)
+            return quotation
+        } catch (e: ScraperXpathException) {
+            throw ScraperQuotationException(e.message)
+        }
+    }
+
+    @Throws(ScraperSourceException::class)
+    fun getSource(
+        document: Document,
+        xpath: String = "//*[@id=\"votd_wrapper\"]/div/div/div[1]/div[2]/p[2]",
+    ): String {
+        try {
+            val source = getXpath(document, xpath)
+            return source
+        } catch (e: ScraperXpathException) {
+            throw ScraperSourceException(e.message)
+        }
+    }
+
+    private fun getXpath(document: Document, xpath: String): String {
+        try {
+            val xpathResult = document.selectXpath(xpath).text()
+
+            if (xpathResult == "") throw ScraperXpathException("")
+
+            val maxLength = 1000
+            if (xpathResult.length >= maxLength) throw ScraperXpathException("length")
+
+            return xpathResult
+        } catch (e: Exception) {
+            throw ScraperXpathException(e.message)
+        }
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperAlarm.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperAlarm.java
new file mode 100755
index 0000000..50ce991
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperAlarm.java
@@ -0,0 +1,79 @@
+package com.github.jameshnsears.quoteunquote.utils.scraper;
+
+import android.annotation.SuppressLint;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
+import com.github.jameshnsears.quoteunquote.utils.IntentFactoryHelper;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Locale;
+
+import timber.log.Timber;
+
+public class ScraperAlarm {
+    @Nullable
+    protected final QuotationsPreferences quotationsPreferences;
+    @NonNull
+    protected final Context context;
+    protected final int widgetId;
+
+    public ScraperAlarm(
+            @NonNull final Context widgetContext, final int theWidgetId) {
+        this.context = widgetContext;
+        this.widgetId = theWidgetId;
+        quotationsPreferences = new QuotationsPreferences(theWidgetId, widgetContext);
+    }
+
+    @SuppressLint("MissingPermission")
+    public void setAlarm() {
+        if (quotationsPreferences.getDatabaseExternalWeb()) {
+
+            Calendar calendar = Calendar.getInstance();
+            int currentMinute = calendar.get(Calendar.MINUTE);
+
+//            calendar.add(Calendar.MINUTE, 1);
+
+            if (currentMinute == 0 || currentMinute == 30) {
+                calendar.add(Calendar.MINUTE, 30);
+            } else {
+                calendar.add(Calendar.MINUTE, 60 - currentMinute);
+            }
+            calendar.set(Calendar.SECOND, calendar.getMinimum(Calendar.SECOND));
+            calendar.set(Calendar.MILLISECOND, calendar.getMinimum(Calendar.MILLISECOND));
+
+            final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm.ss", Locale.getDefault());
+            Timber.d("scraperAlarm: %s", sdf.format(calendar.getTime()));
+
+            AlarmManager alarmManager =
+                    (AlarmManager) this.context.getSystemService(Context.ALARM_SERVICE);
+
+            PendingIntent alarmPendingIntent
+                    = IntentFactoryHelper.createClickPendingIntent(
+                    this.context, this.widgetId, IntentFactoryHelper.SCRAPER_ALARM);
+
+            alarmManager.setExactAndAllowWhileIdle(
+                    AlarmManager.RTC_WAKEUP,
+                    calendar.getTimeInMillis(),
+                    alarmPendingIntent);
+        }
+    }
+
+    public void resetAlarm() {
+        if (!quotationsPreferences.getDatabaseExternalWeb()) {
+
+            final AlarmManager alarmManager =
+                    (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
+            if (alarmManager != null) {
+                alarmManager.cancel(IntentFactoryHelper.createClickPendingIntent(
+                        context, widgetId, IntentFactoryHelper.SCRAPER_ALARM));
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperData.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperData.kt
new file mode 100644
index 0000000..9870a16
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperData.kt
@@ -0,0 +1,7 @@
+package com.github.jameshnsears.quoteunquote.utils.scraper
+
+data class ScraperData(
+    val scrapeResult: Boolean = false,
+    val quotation: String = "",
+    val source: String = "",
+)
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperException.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperException.kt
new file mode 100644
index 0000000..4f3cb96
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperException.kt
@@ -0,0 +1,11 @@
+package com.github.jameshnsears.quoteunquote.utils.scraper
+
+open class ScraperException(message: String?) : java.lang.Exception(message)
+
+class ScraperUrlException(message: String?) : ScraperException(message)
+
+open class ScraperXpathException(message: String?) : ScraperException(message)
+
+class ScraperQuotationException(message: String?) : ScraperXpathException(message)
+
+class ScraperSourceException(message: String?) : ScraperXpathException(message)
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt
index 6a683a8..ab72d62 100755
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidgetTest.kt
@@ -7,7 +7,6 @@ import io.mockk.every
 import io.mockk.mockk
 import io.mockk.spyk
 import org.junit.After
-import org.junit.Assert.assertTrue
 import org.junit.Before
 import org.junit.Test
 import timber.log.Timber
@@ -31,26 +30,20 @@ class QuoteUnquoteWidgetTest {
     }
 
     @Test
-    fun `cancel an already active externalObserver`() {
-        launchExternalObserver(
-            mockContext,
-            widgetId,
+    fun `empty stub for testing`() {
+        val quoteUnquoteWidgetSpy = spyk(QuoteUnquoteWidget())
+        every {
+            quoteUnquoteWidgetSpy.getQuotationsPreferences(
+                mockContext,
+                widgetId,
+            )
+        } returns
             getQuotationsPreferences(
                 widgetId,
                 mockContext,
                 false,
                 true,
-                "externalWatch/1/VerseOfTheDay.csv",
-                true,
-            ),
-        )
-
-        // now cancel the externalObserver
-        Thread.sleep(QuoteUnquoteWidget.externalObserverInternal)
-        QuoteUnquoteWidget.externalObserver.cancel(true)
-        Thread.sleep(QuoteUnquoteWidget.externalObserverInternal * 2)
-
-        assertTrue(QuoteUnquoteWidget.externalObserver.isCancelled)
+            )
     }
 
     private fun getQuotationsPreferences(
@@ -58,33 +51,11 @@ class QuoteUnquoteWidgetTest {
         mockContext: Context,
         databaseInternal: Boolean,
         databaseExternal: Boolean,
-        databaseExternalPath: String,
-        databaseExternalWatch: Boolean,
     ): QuotationsPreferences {
         val quotationsPreferencesDouble = spyk(QuotationsPreferences(widgetId, mockContext))
         every { quotationsPreferencesDouble.databaseInternal } returns databaseInternal
-        every { quotationsPreferencesDouble.databaseExternal } returns databaseExternal
-        every { quotationsPreferencesDouble.databaseExternalPath } returns javaClass.classLoader.getResource(
-            databaseExternalPath,
-        ).getPath()
-        every { quotationsPreferencesDouble.databaseExternalWatch } returns databaseExternalWatch
+        every { quotationsPreferencesDouble.databaseExternalCsv } returns databaseExternal
 
         return quotationsPreferencesDouble
     }
-
-    private fun launchExternalObserver(
-        mockContext: Context,
-        widgetId: Int,
-        quotationsPreferencesDouble: QuotationsPreferences,
-    ) {
-        val quoteUnquoteWidgetSpy = spyk(QuoteUnquoteWidget())
-        every {
-            quoteUnquoteWidgetSpy.getQuotationsPreferences(
-                mockContext,
-                widgetId,
-            )
-        } returns quotationsPreferencesDouble
-
-        quoteUnquoteWidgetSpy.launchExternalObserver(mockContext, 1, mockk())
-    }
 }
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperTest.kt
new file mode 100644
index 0000000..ab5240d
--- /dev/null
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/utils/scraper/ScraperTest.kt
@@ -0,0 +1,82 @@
+package com.github.jameshnsears.quoteunquote.utils.scraper
+
+import io.mockk.every
+import io.mockk.spyk
+import kotlinx.coroutines.test.runTest
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class ScraperTest {
+    private val scraper = Scraper()
+
+    // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test
+    @Test
+    fun `valid parameters`() = runTest {
+        val document1 =
+            scraper.getDocumentFromResources("/ExternalDatabaseWeb/1/Bible Verse of the Day _ YouVersion.xml")
+
+        assertEquals(
+            "As the hart panteth after the water brooks, So panteth my soul after thee, O God.",
+            scraper.getQuotation(document1),
+        )
+
+        assertEquals("Psalm 42:1 (KJV)", scraper.getSource(document1))
+
+        val document2 =
+            scraper.getDocumentFromResources("/ExternalDatabaseWeb/2/Bible Verse of the Day _ YouVersion.xml")
+
+        assertEquals(
+            "Behold, I send you forth as sheep in the midst of wolves: be ye therefore wise as serpents, and harmless as doves.",
+            scraper.getQuotation(document2),
+        )
+
+        assertEquals("Matthew 10:16 (KJV)", scraper.getSource(document2))
+    }
+
+    @Test(expected = ScraperUrlException::class)
+    fun `Unable to contact URL - empty`() {
+        scraper.getDocumentFromUrl("")
+    }
+
+    @Test(expected = ScraperUrlException::class)
+    fun `Unable to contact URL - Expected URL scheme`() {
+        scraper.getDocumentFromUrl("hoot://pop.com")
+    }
+
+    @Test(expected = ScraperUrlException::class)
+    fun `Unable to contact URL - Name or service not known`() {
+        scraper.getDocumentFromUrl("https://bible.zom")
+    }
+
+    @Test(expected = ScraperUrlException::class)
+    fun `Unable to contact URL - Timeout`() {
+        val scraperSpy = spyk(Scraper())
+        every { scraperSpy.requestBuilder(any()) } throws java.net.SocketTimeoutException("Timeout")
+
+        scraperSpy.getDocumentFromUrl()
+    }
+
+    @Test(expected = ScraperUrlException::class)
+    fun `Unable to contact URL - Interrupted`() {
+        val scraperSpy = spyk(Scraper())
+        every { scraperSpy.requestBuilder(any()) } throws java.net.SocketTimeoutException("Interrupted")
+
+        scraperSpy.getDocumentFromUrl()
+    }
+
+    @Test(expected = ScraperQuotationException::class)
+    fun `invalid Xpaths - ScraperQuotationException`() {
+        val document =
+            scraper.getDocumentFromResources("/ExternalDatabaseWeb/1/Bible Verse of the Day _ YouVersion.xml")
+
+        scraper.getQuotation(document, "/")
+    }
+
+    @Test(expected = ScraperSourceException::class)
+    fun `invalid Xpaths - ScraperSourceException`() {
+        val document =
+            scraper.getDocumentFromResources("/ExternalDatabaseWeb/1/Bible Verse of the Day _ YouVersion.xml")
+
+        scraper.getSource(document, "/1")
+    }
+}
diff --git a/bin/javalin/webpage/src/main/kotlin/Main.kt b/bin/javalin/webpage/src/main/kotlin/Main.kt
new file mode 100644
index 0000000..fae0561
--- /dev/null
+++ b/bin/javalin/webpage/src/main/kotlin/Main.kt
@@ -0,0 +1,37 @@
+import ch.qos.logback.classic.Level
+import io.javalin.Javalin
+
+import org.slf4j.LoggerFactory
+import org.slf4j.Logger
+
+val rootLogger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME) as ch.qos.logback.classic.Logger
+val logger = LoggerFactory.getLogger(object {}.javaClass)
+
+var pagesServed = 0;
+
+fun main() {
+    // https://www.jetbrains.com/help/idea/create-your-first-kotlin-app.html#package-as-jar
+    // https://kotlinlang.org/docs/command-line.html
+    rootLogger.level = Level.INFO
+
+    val app = Javalin.create().start(7070)
+    app.get("/verse-of-the-day") { ctx ->
+        ctx.result(returnCorrectFile())
+    }
+}
+
+fun returnCorrectFile() : String {
+    pagesServed ++
+    if (pagesServed % 2 == 0) {
+        return readResourceFile("Psalm.html")
+    }
+
+    return readResourceFile("Matthew.html")
+}
+
+fun readResourceFile(fileName: String): String {
+    logger.info("pagesServed=${pagesServed}; fileName=${fileName}")
+
+    val inputStream = object {}.javaClass.classLoader.getResourceAsStream(fileName)
+    return inputStream.bufferedReader().use { it.readText() }
+}
\ No newline at end of file
