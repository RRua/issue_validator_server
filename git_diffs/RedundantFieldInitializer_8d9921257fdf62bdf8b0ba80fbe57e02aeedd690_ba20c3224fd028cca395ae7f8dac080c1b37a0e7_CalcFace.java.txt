diff --git a/app/src/main/java/com/jovial/jrpn/CalcFace.java b/app/src/main/java/com/jovial/jrpn/CalcFace.java
index 2fd00a6..c9bdca3 100644
--- a/app/src/main/java/com/jovial/jrpn/CalcFace.java
+++ b/app/src/main/java/com/jovial/jrpn/CalcFace.java
@@ -22,9 +22,8 @@ import android.content.Context;
 import android.graphics.*;
 import android.util.AttributeSet;
 import android.util.Log;
-import android.widget.AbsoluteLayout;
 
-public class CalcFace extends AbsoluteLayout {
+public class CalcFace extends MyAbsoluteLayout {
 
     /**
      * This represents the bit of yellow text above the buttons
@@ -107,13 +106,11 @@ public class CalcFace extends AbsoluteLayout {
     }
 
 
-    OnResizeListener pListener = null;
-
     public YellowText[] yellowText;
     private ScaleInfo scaleInfo;
     private static String faceText = "E M M E T - G R A Y / J O V I A L";
     private float faceTextWidth;
-
+    private fmMain myMain;
 
     public CalcFace(Context context) {
         super(context);
@@ -127,17 +124,14 @@ public class CalcFace extends AbsoluteLayout {
         super(context, attrs, defStyle);
     }
 
-    public void SetOnResizeListener(OnResizeListener listener) {
-        pListener = listener;
+    void setMain(fmMain myMain) {
+        this.myMain = myMain;
     }
 
     @Override
     protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
-
-        if (pListener != null) {
-            pListener.OnResize(this.getId(), w, h, oldw, oldh);
-        }
+        myMain.doResize(w, h);
     }
 
     void setScaleInfo(ScaleInfo scaleInfo) {
@@ -154,13 +148,13 @@ public class CalcFace extends AbsoluteLayout {
         p.setStrokeWidth(1.1f * (float) scaleInfo.drawScaleNumerator / (float) scaleInfo.drawScaleDenominator);
         p.setStrokeJoin(Paint.Join.ROUND);
         p.setTextSize(scaleInfo.scale(10f));
-        p.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
+        p.setTypeface(fmMain.EMBEDDED_FONT);
 
         p = scaleInfo.faceTextPaint;
         p.setColor(Color.argb(255, 231, 231, 231));
         p.setStyle(Paint.Style.FILL);
         p.setTextSize(scaleInfo.scale(12f));
-        p.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
+        p.setTypeface(fmMain.EMBEDDED_FONT);
 
         p=scaleInfo.faceBgPaint;
         p.setColor(Color.argb(255, 66, 66, 66));
@@ -173,8 +167,7 @@ public class CalcFace extends AbsoluteLayout {
         } else {
             p.setTextSize(scaleInfo.scale(10f));
         }
-        p.setTypeface(Typeface.SANS_SERIF);
-        p.setTypeface(Typeface.create("sans-serif", Typeface.BOLD));
+        p.setTypeface(fmMain.EMBEDDED_FONT);
 
         for (YellowText yt : yellowText) {
             yt.alignText(scaleInfo);
diff --git a/app/src/main/java/com/jovial/jrpn/GButton.java b/app/src/main/java/com/jovial/jrpn/GButton.java
index 9edd1e9..bda4e07 100644
--- a/app/src/main/java/com/jovial/jrpn/GButton.java
+++ b/app/src/main/java/com/jovial/jrpn/GButton.java
@@ -37,10 +37,10 @@ public class GButton extends android.support.v7.widget.AppCompatImageButton {
 
     public static void setupScaleInfo(ScaleInfo scaleInfo) {
         scaleInfo.whitePaint.setTextSize(scaleInfo.scale(14f));
-        scaleInfo.whitePaint.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
+        scaleInfo.whitePaint.setTypeface(fmMain.EMBEDDED_FONT);
         scaleInfo.whitePaint.setColor(Color.argb(255, 255, 255, 255));
         scaleInfo.bluePaint.setTextSize(scaleInfo.scale(9f));
-        scaleInfo.bluePaint.setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));
+        scaleInfo.bluePaint.setTypeface(fmMain.EMBEDDED_FONT);
         // Color taken to match the G key.  This is a lighter
         // blue than Emmet's original, but I think it's more readable.
         // Originally it was 0,100,255
@@ -50,6 +50,7 @@ public class GButton extends android.support.v7.widget.AppCompatImageButton {
     public void setScaleInfo(ScaleInfo info) {
         scaleInfo = info;
     }
+
     public GButton(Context context) {
         super(context);
         init();
diff --git a/app/src/main/java/com/jovial/jrpn/IconView.java b/app/src/main/java/com/jovial/jrpn/IconView.java
index 3478d72..aa638b9 100644
--- a/app/src/main/java/com/jovial/jrpn/IconView.java
+++ b/app/src/main/java/com/jovial/jrpn/IconView.java
@@ -7,7 +7,6 @@ import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.widget.AbsoluteLayout;
 
 public class IconView extends android.view.View {
 
@@ -41,7 +40,7 @@ public class IconView extends android.view.View {
         jupiter = BitmapFactory.decodeResource(getResources(), R.mipmap.jupiter);
     }
 
-    public void resize(AbsoluteLayout parent) {
+    public void resize(MyAbsoluteLayout parent) {
         logoTextWidth = scaleInfo.logoPaint.measureText(logoText);  // Move to resize
         int width = (int) (logoTextWidth * 1.2f);
         int height = (int) (width * 1.4f);
@@ -57,7 +56,7 @@ public class IconView extends android.view.View {
         float destOffset = border * 1.2f;
         jupiterDest = new RectF(destOffset, destOffset, width - destOffset, width - destOffset);
         scaleInfo.logoPaint.setStrokeWidth(border/2f);
-        parent.updateViewLayout(this, new AbsoluteLayout.LayoutParams(width, height, x, y));
+        parent.updateViewLayout(this, new MyAbsoluteLayout.LayoutParams(width, height, x, y));
     }
 
     @Override
diff --git a/app/src/main/java/com/jovial/jrpn/MyAbsoluteLayout.java b/app/src/main/java/com/jovial/jrpn/MyAbsoluteLayout.java
new file mode 100644
index 0000000..711d538
--- /dev/null
+++ b/app/src/main/java/com/jovial/jrpn/MyAbsoluteLayout.java
@@ -0,0 +1,136 @@
+package com.jovial.jrpn;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * A minimal absolute layout, replacing the long-deprecated
+ * Android AbsoluteLayout.  Android's stopped respecting
+ * the requested width of elements of the calculator at some
+ * point -- perhaps due to padding requirements or something?
+ * This caused a display bug:
+ * https://github.com/zathras/JRPN_Android/issues/1
+ */
+
+public class MyAbsoluteLayout extends ViewGroup {
+    public MyAbsoluteLayout(Context context) {
+        this(context, null);
+    }
+
+    public MyAbsoluteLayout(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public MyAbsoluteLayout(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int count = getChildCount();
+
+        int maxHeight = 0;
+        int maxWidth = 0;
+
+        // Find out how big everyone wants to be
+        measureChildren(widthMeasureSpec, heightMeasureSpec);
+
+        // Find rightmost and bottom-most child
+        for (int i = 0; i < count; i++) {
+            View child = getChildAt(i);
+            if (child.getVisibility() != GONE) {
+                int childRight;
+                int childBottom;
+
+                MyAbsoluteLayout.LayoutParams lp
+                        = (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
+
+                childRight = lp.x + child.getMeasuredWidth();
+                childBottom = lp.y + child.getMeasuredHeight();
+
+                maxWidth = Math.max(maxWidth, childRight);
+                maxHeight = Math.max(maxHeight, childBottom);
+            }
+        }
+
+        // Check against minimum height and width
+        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
+        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());
+
+        setMeasuredDimension(resolveSizeAndState(maxWidth, widthMeasureSpec, 0),
+                resolveSizeAndState(maxHeight, heightMeasureSpec, 0));
+    }
+
+    @Override
+    protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
+        return new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+        int count = getChildCount();
+
+        for (int i = 0; i < count; i++) {
+            View child = getChildAt(i);
+            if (child.getVisibility() != GONE) {
+
+                MyAbsoluteLayout.LayoutParams lp =
+                        (MyAbsoluteLayout.LayoutParams) child.getLayoutParams();
+
+                child.layout(lp.x, lp.y, lp.x + lp.width, lp.y + lp.height);
+            }
+        }
+    }
+
+    // Override to allow type-checking of LayoutParams.
+    @Override
+    protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
+        return p instanceof MyAbsoluteLayout.LayoutParams;
+    }
+
+    @Override
+    protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
+        return new LayoutParams(p.width, p.height, 0, 0);
+    }
+
+    @Override
+    public boolean shouldDelayChildPressedState() {
+        return false;
+    }
+
+    /**
+     * Per-child layout information associated with MyAbsoluteLayout.
+     */
+    public static class LayoutParams extends ViewGroup.LayoutParams {
+        /**
+         * The horizontal, or X, location of the child within the view group.
+         */
+        public int x;
+        /**
+         * The vertical, or Y, location of the child within the view group.
+         */
+        public int y;
+
+        /**
+         * Creates a new set of layout parameters with the specified width,
+         * height and location.
+         *
+         * @param width the width, either {@link #MATCH_PARENT},
+        {@link #WRAP_CONTENT} or a fixed size in pixels
+         * @param height the height, either {@link #MATCH_PARENT},
+        {@link #WRAP_CONTENT} or a fixed size in pixels
+         * @param x the X location of the child
+         * @param y the Y location of the child
+         */
+        public LayoutParams(int width, int height, int x, int y) {
+            super(width, height);
+            this.x = x;
+            this.y = y;
+        }
+
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/jovial/jrpn/fmMain.java b/app/src/main/java/com/jovial/jrpn/fmMain.java
index 5140bc4..bff3910 100644
--- a/app/src/main/java/com/jovial/jrpn/fmMain.java
+++ b/app/src/main/java/com/jovial/jrpn/fmMain.java
@@ -21,12 +21,14 @@ import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.graphics.Typeface;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.media.ToneGenerator;
 import android.net.Uri;
 import android.os.Bundle;
+import android.support.v4.content.res.ResourcesCompat;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
@@ -34,12 +36,12 @@ import android.util.Log;
 import android.util.TypedValue;
 import android.view.KeyEvent;
 import android.view.MenuInflater;
+import android.view.OrientationEventListener;
 import android.view.View;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.Window;
 import android.view.WindowManager;
-import android.widget.AbsoluteLayout;
 import android.widget.EditText;
 import android.widget.TextView;
 
@@ -74,9 +76,14 @@ public class fmMain extends AppCompatActivity {
     public final static int BUTTON_WIDTH = 37;
     public final static int BUTTON_HEIGHT = 33;
 
+    public static Typeface EMBEDDED_FONT = null;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
 
+        if (EMBEDDED_FONT == null) {
+            EMBEDDED_FONT = ResourcesCompat.getFont(this, R.font.deja_vu_sans_bold);
+        }
         // programmatically remove the status bar
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
@@ -182,9 +189,8 @@ public class fmMain extends AppCompatActivity {
         pnCalcFace = (CalcFace) findViewById(R.id.calc_face);
         jupiterIconView = (IconView) findViewById(R.id.jupiterIcon);
 
-        // attach our Resize Listener to the layout
-        pnCalcFace.SetOnResizeListener(listener);
         pnCalcFace.setFocusable(true);
+        pnCalcFace.setMain(this);
 
         cs = new CalcState();
         c = new Calculator(cs);
@@ -842,7 +848,7 @@ public class fmMain extends AppCompatActivity {
         return true;
     }
 
-    private void doResize(int w, int h) {
+    void doResize(int w, int h) {
         if (h < w) {
             // landscape mode
             scaleInfo.isLandscape = true;
@@ -901,7 +907,7 @@ public class fmMain extends AppCompatActivity {
                 }
 
                 //et.layout(x, y, x + width, y + height);
-                pnCalcFace.updateViewLayout(et, new AbsoluteLayout.LayoutParams(width,
+                pnCalcFace.updateViewLayout(et, new MyAbsoluteLayout.LayoutParams(width,
                         height, x, y));
 
                 et.setTextSizes(scaleInfo, height, width);
@@ -919,17 +925,17 @@ public class fmMain extends AppCompatActivity {
 
                     y = 55 * h / CALC_WIDTH;
                     width = 30 * w / CALC_HEIGHT;
-                    height = AbsoluteLayout.LayoutParams.WRAP_CONTENT;
+                    height = MyAbsoluteLayout.LayoutParams.WRAP_CONTENT;
                 } else {
                     x = Integer.parseInt(tv.getTag().toString()) * w
                             / CALC_WIDTH;
                     y = 57 * h / CALC_HEIGHT;
                     width = 30 * w / CALC_WIDTH;
-                    height = AbsoluteLayout.LayoutParams.WRAP_CONTENT;
+                    height = MyAbsoluteLayout.LayoutParams.WRAP_CONTENT;
                 }
 
                 //tv.layout(x, y, x + width, y + height);
-                pnCalcFace.updateViewLayout(tv, new AbsoluteLayout.LayoutParams(width,
+                pnCalcFace.updateViewLayout(tv, new MyAbsoluteLayout.LayoutParams(width,
                         height, x, y));
 
                 tv.setTextSize(scaleInfo.scale(4f));
@@ -961,8 +967,8 @@ public class fmMain extends AppCompatActivity {
                     }
                     width = BUTTON_WIDTH * w / CALC_WIDTH;
                 }
-                pnCalcFace.updateViewLayout(btn, new AbsoluteLayout.LayoutParams(width,
-                        height, x, y));
+                pnCalcFace.updateViewLayout(btn, new MyAbsoluteLayout.LayoutParams(width,
+                         height, x, y));
                 btn.alignText(width, height);
             }
         }
@@ -970,20 +976,11 @@ public class fmMain extends AppCompatActivity {
         pnCalcFace.resize();  // Sets scaleInfo, including yellowPaint
 
         jupiterIconView.resize(pnCalcFace);
+
         // process a dummy key to refresh the display
         ProcessPacket(c.ProcessKey(-1));
     }
 
-
-    // handle all of the resizing here.  I like precise control over
-    // the location and sizes.
-    OnResizeListener listener = new OnResizeListener() {
-        @Override
-        public void OnResize(int id, int w, int h, int oldw, int oldh) {
-            doResize(w, h);
-        }
-    };
-
     // the button click event
     public void GButton_Click(View v) {
         int KeyCode;
