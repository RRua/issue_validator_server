diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/AndroidUsbManager.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/AndroidUsbManager.kt
new file mode 100644
index 0000000..27af30a
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/AndroidUsbManager.kt
@@ -0,0 +1,19 @@
+package uk.co.alt236.androidusbmanager
+
+import android.hardware.usb.UsbManager
+import uk.co.alt236.androidusbmanager.model.AndroidUsbDevice
+
+class AndroidUsbManager(private val usbManager: UsbManager?) {
+
+    fun getDeviceList(): Map<String, AndroidUsbDevice> {
+        val usbDevices = usbManager?.deviceList ?: emptyMap()
+
+        val wrappedDevices = HashMap<String, AndroidUsbDevice>(usbDevices.size)
+
+        for (pair in usbDevices) {
+            wrappedDevices[pair.key] = AndroidUsbDevice(pair.value)
+        }
+
+        return wrappedDevices
+    }
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbConfiguration.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbConfiguration.kt
new file mode 100644
index 0000000..629c00a
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbConfiguration.kt
@@ -0,0 +1,31 @@
+package uk.co.alt236.androidusbmanager.model
+
+import android.hardware.usb.UsbConfiguration
+import android.os.Build
+import android.os.Parcelable
+import androidx.annotation.RequiresApi
+
+import kotlinx.parcelize.Parcelize
+
+@RequiresApi(Build.VERSION_CODES.LOLLIPOP)
+@Parcelize
+data class AndroidUsbConfiguration(
+    @Suppress("MemberVisibilityCanBePrivate") val rawConfiguration: UsbConfiguration
+) : Parcelable {
+
+    val id: Int get() = rawConfiguration.id
+    val name: String? get() = rawConfiguration.name
+    val maxPower: Int get() = rawConfiguration.maxPower
+
+    val isSelfPowered get() = rawConfiguration.isSelfPowered
+    val isRemoteWakeup get() = rawConfiguration.isRemoteWakeup
+
+    val interfaces: List<AndroidUsbInterface> by lazy {
+        val result = ArrayList<AndroidUsbInterface>(rawConfiguration.interfaceCount)
+        for (i in 0 until rawConfiguration.interfaceCount) {
+            result.add(AndroidUsbInterface(rawConfiguration.getInterface(i)))
+        }
+        result
+    }
+
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbDevice.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbDevice.kt
new file mode 100644
index 0000000..6876493
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbDevice.kt
@@ -0,0 +1,68 @@
+package uk.co.alt236.androidusbmanager.model
+
+import android.hardware.usb.UsbDevice
+import android.os.Build
+import android.os.Parcelable
+import kotlinx.parcelize.Parcelize
+import uk.co.alt236.androidusbmanager.result.ApiConditionalResult
+
+@Parcelize
+class AndroidUsbDevice(
+    @Suppress("MemberVisibilityCanBePrivate") val rawDevice: UsbDevice
+) : Parcelable {
+
+    val deviceName: String get() = rawDevice.deviceName
+
+    val manufacturerName: ApiConditionalResult<String?>
+        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            ApiConditionalResult.Success(rawDevice.manufacturerName)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+
+    val productName: ApiConditionalResult<String?>
+        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            ApiConditionalResult.Success(rawDevice.productName)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+
+    val version: ApiConditionalResult<String>
+        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            ApiConditionalResult.Success(rawDevice.version)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+
+    val vendorId: Int get() = rawDevice.vendorId
+    val deviceId: Int get() = rawDevice.deviceId
+    val productId: Int get() = rawDevice.productId
+
+    val deviceClass: Int get() = rawDevice.deviceClass
+    val deviceSubClass: Int get() = rawDevice.deviceSubclass
+    val deviceProtocol: Int get() = rawDevice.deviceProtocol
+
+    val configurations: ApiConditionalResult<List<AndroidUsbConfiguration>> by lazy {
+        mapConfigurations()
+    }
+
+    val interfaces: List<AndroidUsbInterface> by lazy {
+        val result = ArrayList<AndroidUsbInterface>(rawDevice.interfaceCount)
+        for (i in 0 until rawDevice.interfaceCount) {
+            result.add(AndroidUsbInterface(rawDevice.getInterface(i)))
+        }
+        result
+    }
+
+    private fun mapConfigurations(): ApiConditionalResult<List<AndroidUsbConfiguration>> {
+        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            val result = ArrayList<AndroidUsbConfiguration>(rawDevice.configurationCount)
+            for (i in 0 until rawDevice.configurationCount) {
+                result.add(AndroidUsbConfiguration(rawDevice.getConfiguration(i)))
+            }
+            ApiConditionalResult.Success(result)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+    }
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbEndpoint.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbEndpoint.kt
new file mode 100644
index 0000000..55cb35e
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbEndpoint.kt
@@ -0,0 +1,18 @@
+package uk.co.alt236.androidusbmanager.model
+
+import android.hardware.usb.UsbEndpoint
+import android.os.Parcelable
+import kotlinx.parcelize.Parcelize
+
+@Parcelize
+data class AndroidUsbEndpoint(val rawEndpoint: UsbEndpoint) : Parcelable {
+
+    val address: Int get() = rawEndpoint.address
+    val attributes: Int get() = rawEndpoint.attributes
+    val maxPacketSize: Int get() = rawEndpoint.maxPacketSize
+    val interval: Int get() = rawEndpoint.interval
+    val direction: Int get() = rawEndpoint.direction
+    val type: Int get() = rawEndpoint.type
+    val endpointNumber: Int get() = rawEndpoint.endpointNumber
+
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbInterface.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbInterface.kt
new file mode 100644
index 0000000..c81ae8e
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/model/AndroidUsbInterface.kt
@@ -0,0 +1,41 @@
+package uk.co.alt236.androidusbmanager.model
+
+import android.hardware.usb.UsbInterface
+import android.os.Build
+import android.os.Parcelable
+import kotlinx.parcelize.Parcelize
+import uk.co.alt236.androidusbmanager.result.ApiConditionalResult
+
+@Parcelize
+data class AndroidUsbInterface(val rawInterface: UsbInterface) : Parcelable {
+
+    val id: Int get() = rawInterface.id
+
+    val alternateSetting: ApiConditionalResult<Int>
+        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            ApiConditionalResult.Success(rawInterface.alternateSetting)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+
+    val name: ApiConditionalResult<String?>
+        get() = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            ApiConditionalResult.Success(rawInterface.name)
+        } else {
+            ApiConditionalResult.ApiTooLow
+        }
+
+    val interfaceClass: Int get() = rawInterface.interfaceClass
+    val interfaceSubclass: Int get() = rawInterface.interfaceSubclass
+    val interfaceProtocol: Int get() = rawInterface.interfaceProtocol
+
+    val endpoints: List<AndroidUsbEndpoint> by lazy {
+        val result = ArrayList<AndroidUsbEndpoint>(rawInterface.endpointCount)
+
+        for (i in 0 until rawInterface.endpointCount) {
+            result.add(AndroidUsbEndpoint(rawInterface.getEndpoint(i)))
+        }
+
+        result
+    }
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/result/ApiConditionalResult.kt b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/result/ApiConditionalResult.kt
new file mode 100644
index 0000000..a92ed50
--- /dev/null
+++ b/android-usbmanager/src/main/java/uk/co/alt236/androidusbmanager/result/ApiConditionalResult.kt
@@ -0,0 +1,7 @@
+package uk.co.alt236.androidusbmanager.result
+
+sealed interface ApiConditionalResult<out T> {
+    data class Success<T>(val result: T) : ApiConditionalResult<T>
+    data class Error<T>(val error: Exception) : ApiConditionalResult<Nothing>
+    data object ApiTooLow : ApiConditionalResult<Nothing>
+}
\ No newline at end of file
diff --git a/android-usbmanager/src/test/java/uk/co/alt236/androidusbmanager/ExampleUnitTest.kt b/android-usbmanager/src/test/java/uk/co/alt236/androidusbmanager/ExampleUnitTest.kt
new file mode 100644
index 0000000..f93c130
--- /dev/null
+++ b/android-usbmanager/src/test/java/uk/co/alt236/androidusbmanager/ExampleUnitTest.kt
@@ -0,0 +1,16 @@
+package uk.co.alt236.androidusbmanager
+
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+class ExampleUnitTest {
+    @Test
+    fun addition_isCorrect() {
+        assertEquals(4, 2 + 2)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/UsbDeviceInfoApplication.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/UsbDeviceInfoApplication.kt
new file mode 100644
index 0000000..6808815
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/UsbDeviceInfoApplication.kt
@@ -0,0 +1,10 @@
+package aws.apps.usbDeviceEnumerator
+
+import androidx.multidex.MultiDexApplication
+import dagger.hilt.android.HiltAndroidApp
+
+@HiltAndroidApp
+class UsbDeviceInfoApplication : MultiDexApplication() {
+
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/LinuxUsbPath.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/LinuxUsbPath.kt
new file mode 100644
index 0000000..7c0bd4e
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/LinuxUsbPath.kt
@@ -0,0 +1,3 @@
+package aws.apps.usbDeviceEnumerator.data
+
+data class LinuxUsbPath(val path: String)
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
index ac3dad2..70ead3f 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
@@ -70,7 +70,7 @@ import aws.apps.usbDeviceEnumerator.util.NotifyUser;
 
         if (cursor.getCount() > 0) {
             cursor.moveToFirst();
-            result = cursor.getString(cursor.getColumnIndex(colName));
+            result = getStringFromCursor(cursor, colName);
         } else {
             result = null;
         }
@@ -81,4 +81,12 @@ import aws.apps.usbDeviceEnumerator.util.NotifyUser;
 
         return result;
     }
+
+    private static String getStringFromCursor(Cursor cursor, String colName) {
+        final int colIndex = cursor.getColumnIndex(colName);
+        if (colIndex < 0) {
+            throw new IllegalArgumentException("No column with name '" + colName + "' in cursor");
+        }
+        return cursor.getString(colIndex);
+    }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/di/ApplicationModule.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/ApplicationModule.kt
new file mode 100644
index 0000000..7637c05
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/ApplicationModule.kt
@@ -0,0 +1,28 @@
+package aws.apps.usbDeviceEnumerator.di
+
+import android.content.Context
+import android.content.res.Resources
+import aws.apps.usbDeviceEnumerator.data.LinuxUsbPath
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+@Module
+@InstallIn(SingletonComponent::class)
+object ApplicationModule {
+
+    @Provides
+    @Singleton
+    fun provideLinuxUsbPath(): LinuxUsbPath {
+        val path = uk.co.alt236.usbdeviceenumerator.sysbususb.Constants.PATH_SYS_BUS_USB
+        return LinuxUsbPath(path)
+    }
+
+    @Provides
+    @Singleton
+    fun provideResources(@ApplicationContext context: Context): Resources = context.resources
+
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DataModule.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DataModule.kt
new file mode 100644
index 0000000..a72c8ad
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DataModule.kt
@@ -0,0 +1,68 @@
+package aws.apps.usbDeviceEnumerator.di
+
+import android.content.Context
+import android.hardware.usb.UsbManager
+import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo
+import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo
+import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo
+import aws.apps.usbDeviceEnumerator.data.LinuxUsbPath
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.DataFetcher
+import dagger.Module
+import dagger.Provides
+import dagger.Reusable
+import dagger.hilt.InstallIn
+import dagger.hilt.android.components.ActivityComponent
+import dagger.hilt.android.qualifiers.ApplicationContext
+import uk.co.alt236.androidusbmanager.AndroidUsbManager
+import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbManager
+
+@Module
+@InstallIn(ActivityComponent::class)
+object DataModule {
+
+    @Provides
+    @Reusable
+    fun provideDataProviderUsbInfo(@ApplicationContext context: Context): DataProviderUsbInfo {
+        return DataProviderUsbInfo(context)
+    }
+
+    @Provides
+    @Reusable
+    fun provideDataProviderCompanyInfo(@ApplicationContext context: Context): DataProviderCompanyInfo {
+        return DataProviderCompanyInfo(context)
+    }
+
+    @Provides
+    @Reusable
+    fun provideDataProviderCompanyLogo(@ApplicationContext context: Context): DataProviderCompanyLogo {
+        return DataProviderCompanyLogo(context)
+    }
+
+    @Provides
+    @Reusable
+    fun provideSysBusUsbManager(path: LinuxUsbPath): SysBusUsbManager {
+        return SysBusUsbManager(path.path)
+    }
+
+    @Provides
+    @Reusable
+    fun provideAndroidUsbManager(@ApplicationContext context: Context): AndroidUsbManager {
+        val usbman = context.getSystemService(Context.USB_SERVICE) as UsbManager?
+        return AndroidUsbManager(usbman)
+    }
+
+    @Provides
+    @Reusable
+    fun provideDataFetcher(
+        usbInfo: DataProviderUsbInfo,
+        companyInfo: DataProviderCompanyInfo,
+        logoInfo: DataProviderCompanyLogo,
+    ): DataFetcher {
+        return DataFetcher(
+            companyInfo,
+            usbInfo,
+            logoInfo
+        )
+    }
+
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DebugModule.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DebugModule.kt
new file mode 100644
index 0000000..cce1d92
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/di/DebugModule.kt
@@ -0,0 +1,42 @@
+package aws.apps.usbDeviceEnumerator.di
+
+import android.content.Context
+import aws.apps.usbDeviceEnumerator.data.LinuxUsbPath
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.device.DeviceDebugInfoDumper
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.directory.DirectoryDebugInfoDumper
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.directorynative.DirectoryNativeDebugInfoDumper
+import dagger.Module
+import dagger.Provides
+import dagger.Reusable
+import dagger.hilt.InstallIn
+import dagger.hilt.android.components.ActivityComponent
+import dagger.hilt.android.qualifiers.ApplicationContext
+
+@Module
+@InstallIn(ActivityComponent::class)
+object DebugModule {
+
+    @Provides
+    @Reusable
+    fun provideDeviceDebugInfoDumper(
+        @ApplicationContext context: Context,
+        path: LinuxUsbPath
+    ): DeviceDebugInfoDumper {
+        return DeviceDebugInfoDumper(context, path.path)
+    }
+
+    @Provides
+    @Reusable
+    fun provideDirectoryDebugInfoDumper(
+        @ApplicationContext context: Context,
+        path: LinuxUsbPath
+    ): DirectoryDebugInfoDumper {
+        return DirectoryDebugInfoDumper(context, path.path)
+    }
+
+    @Provides
+    @Reusable
+    fun provideDirectoryNativeDebugInfoDumper(path: LinuxUsbPath): DirectoryNativeDebugInfoDumper {
+        return DirectoryNativeDebugInfoDumper(path.path)
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
index e96cb08..be9b3d6 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
@@ -64,9 +64,9 @@ public class DatabaseUpdater {
             valid = false;
         } else if (!NetworkUtils.isOnline(context)) {  // If we are not online, cancel everything
             DialogFactory.createOkDialog(
-                    context,
-                    R.string.text_device_offline,
-                    R.string.text_device_offline_instructions)
+                            context,
+                            R.string.text_device_offline,
+                            R.string.text_device_offline_instructions)
                     .show();
             valid = false;
         } else {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
index 09448a5..5fc6a7d 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
@@ -14,7 +14,9 @@ import androidx.appcompat.app.AppCompatActivity;
 import androidx.fragment.app.Fragment;
 import androidx.viewpager.widget.ViewPager;
 import aws.apps.usbDeviceEnumerator.R;
+import dagger.hilt.android.AndroidEntryPoint;
 
+@AndroidEntryPoint
 public class DebugActivity extends AppCompatActivity {
     private static final String TAG = DebugActivity.class.getSimpleName();
     private static final int LAYOUT_ID = R.layout.act_viewpager;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
index 7cb22d3..830eb68 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
@@ -11,9 +11,9 @@ import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
 import androidx.fragment.app.FragmentPagerAdapter;
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DeviceDumpFragment;
-import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpFragment;
-import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragment;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.device.DeviceDumpFragment;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.directory.DirectoryDumpFragment;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.directorynative.DirectoryDumpNativeFragment;
 
 /*package*/ class TabAdapter extends FragmentPagerAdapter {
     private static final Class<?>[] FRAGMENT_ARRAY = {
@@ -30,8 +30,7 @@ import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragme
     private final Set<Fragment> registeredFragments = new HashSet<>();
     private final Context context;
 
-    public TabAdapter(Context context,
-                      FragmentManager fm) {
+    public TabAdapter(Context context, FragmentManager fm) {
         super(fm);
         this.context = context.getApplicationContext();
     }
@@ -57,7 +56,7 @@ import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragme
     @Override
     public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
         super.destroyItem(container, position, object);
-        registeredFragments.remove(object);
+        registeredFragments.remove((Fragment) object);
     }
 
     @NonNull
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/BaseDebugFragment.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/BaseDebugFragment.kt
new file mode 100644
index 0000000..ba46a44
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/BaseDebugFragment.kt
@@ -0,0 +1,46 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments
+
+import android.os.Bundle
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.TextView
+import androidx.fragment.app.Fragment
+import aws.apps.usbDeviceEnumerator.R
+import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable
+
+abstract class BaseDebugFragment : Fragment(), Reloadable {
+    private var textView: TextView? = null
+    override fun onCreateView(
+        inflater: LayoutInflater,
+        container: ViewGroup?,
+        saved: Bundle?
+    ): View? {
+        return inflater.inflate(LAYOUT_ID, container, false)
+    }
+
+    override fun onDestroyView() {
+        textView = null
+        super.onDestroyView()
+    }
+
+    override fun onViewCreated(view: View, bundle: Bundle?) {
+        super.onViewCreated(view, bundle)
+        val textView: TextView = view.findViewById(TEXT_VIEW_ID)
+        textView.maxLines = Int.MAX_VALUE
+        this.textView = textView
+    }
+
+    override fun reload() {
+        if (isAdded && activity != null && view != null) {
+            textView?.text = getData() ?: ""
+        }
+    }
+
+    abstract fun getData(): CharSequence?
+
+    private companion object {
+        private val LAYOUT_ID: Int = R.layout.fragment_monospace_textview
+        private const val TEXT_VIEW_ID: Int = android.R.id.content
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DebugInfoDumper.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DebugInfoDumper.kt
new file mode 100644
index 0000000..599c6ec
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DebugInfoDumper.kt
@@ -0,0 +1,5 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments
+
+interface DebugInfoDumper {
+    fun dump(): CharSequence
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
deleted file mode 100644
index efa52a0..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
-
-import android.content.Context;
-import android.text.Spannable;
-import android.text.SpannableStringBuilder;
-import android.text.style.CharacterStyle;
-import android.text.style.ForegroundColorSpan;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import androidx.annotation.ColorInt;
-import androidx.annotation.NonNull;
-import androidx.core.content.ContextCompat;
-import aws.apps.usbDeviceEnumerator.R;
-import uk.co.alt236.usbdeviceenumerator.sysbususb.dump.ShellSysBusDumper;
-
-/*package*/ class DeviceDump {
-    @SuppressWarnings("StringConcatenationInsideStringBufferAppend")
-    public static CharSequence getDump(@NonNull final Context context,
-                                       @NonNull final String directory) {
-        final int color = ContextCompat.getColor(context, R.color.colorAccent);
-        final SpannableStringBuilder sb = new SpannableStringBuilder();
-
-        sb.append("Directory '" + directory + "':\n\n");
-
-        final String rawDump = ShellSysBusDumper.getDump(directory);
-        if (rawDump.isEmpty()) {
-            sb.append("No data.\n\n");
-            sb.append(context.getString(R.string.debug_unexpected_result_explanation));
-        } else {
-            sb.append(rawDump);
-            colorize(sb, ShellSysBusDumper.DEVICE_START, color);
-            colorize(sb, ShellSysBusDumper.DEVICE_END, color);
-        }
-        return sb;
-    }
-
-    private static void colorize(final SpannableStringBuilder sb,
-                                 final String pattern,
-                                 @ColorInt final int color) {
-        final Pattern p = Pattern.compile(pattern);
-        final Matcher m = p.matcher(sb.toString());
-
-        while (m.find()) {
-            final CharacterStyle span = new ForegroundColorSpan(color);
-            sb.setSpan(span, m.start(), m.end(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);
-        }
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
deleted file mode 100644
index 12552c8..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
-import aws.apps.usbDeviceEnumerator.util.Constants;
-
-public class DeviceDumpFragment extends Fragment implements Reloadable {
-    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
-
-    private TextView textView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        return inflater.inflate(LAYOUT_ID, container, false);
-    }
-
-    @Override
-    public void onViewCreated(@NonNull View view, Bundle bundle) {
-        super.onViewCreated(view, bundle);
-        textView = view.findViewById(android.R.id.content);
-        textView.setMaxLines(Integer.MAX_VALUE);
-    }
-
-    @Override
-    public void reload() {
-        if (isAdded() && getActivity() != null && getView() != null) {
-            final String directory = Constants.PATH_SYS_BUS_USB;
-            textView.setText(DeviceDump.getDump(getContext(), directory));
-        }
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
deleted file mode 100644
index ddfc03e..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
-import aws.apps.usbDeviceEnumerator.util.Constants;
-
-public class DirectoryDumpFragment extends Fragment implements Reloadable {
-    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
-
-    private TextView textView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        return inflater.inflate(LAYOUT_ID, container, false);
-    }
-
-    @Override
-    public void onViewCreated(@NonNull View view, Bundle bundle) {
-        super.onViewCreated(view, bundle);
-        textView = view.findViewById(android.R.id.content);
-        textView.setMaxLines(Integer.MAX_VALUE);
-    }
-
-    @Override
-    public void reload() {
-        if (isAdded() && getActivity() != null && getView() != null) {
-            final String directory = Constants.PATH_SYS_BUS_USB;
-            textView.setText(DirectoryDump.getDump(getContext(), directory));
-        }
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
deleted file mode 100644
index 4c29aec..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
-import aws.apps.usbDeviceEnumerator.util.Constants;
-
-public class DirectoryDumpNativeFragment extends Fragment implements Reloadable {
-    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
-
-    private TextView textView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        return inflater.inflate(LAYOUT_ID, container, false);
-    }
-
-    @Override
-    public void onViewCreated(@NonNull View view, Bundle bundle) {
-        super.onViewCreated(view, bundle);
-        textView = view.findViewById(android.R.id.content);
-        textView.setMaxLines(Integer.MAX_VALUE);
-    }
-
-    @Override
-    public void reload() {
-        if (isAdded() && getActivity() != null && getView() != null) {
-            final String dirString = Constants.PATH_SYS_BUS_USB;
-            textView.setText(DirectoryDumpNative.getDump(getContext(), dirString));
-        }
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDebugInfoDumper.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDebugInfoDumper.kt
new file mode 100644
index 0000000..6614f8c
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDebugInfoDumper.kt
@@ -0,0 +1,49 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.device
+
+import android.content.Context
+import android.text.Spannable
+import android.text.SpannableStringBuilder
+import android.text.style.CharacterStyle
+import android.text.style.ForegroundColorSpan
+import androidx.annotation.ColorInt
+import androidx.core.content.ContextCompat
+import aws.apps.usbDeviceEnumerator.R
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DebugInfoDumper
+import uk.co.alt236.usbdeviceenumerator.sysbususb.dump.ShellSysBusDumper
+import java.util.regex.Pattern
+import javax.inject.Inject
+
+class DeviceDebugInfoDumper @Inject constructor(
+    private val context: Context,
+    private val directory: String
+) : DebugInfoDumper {
+
+    override fun dump(): CharSequence {
+        val color = ContextCompat.getColor(context, R.color.colorAccent)
+        val sb = SpannableStringBuilder()
+        sb.append("Directory '$directory':\n\n")
+        val rawDump = ShellSysBusDumper.getDump(directory)
+        if (rawDump.isEmpty()) {
+            sb.append("No data.\n\n")
+            sb.append(context.getString(R.string.debug_unexpected_result_explanation))
+        } else {
+            sb.append(rawDump)
+            colorize(sb, ShellSysBusDumper.DEVICE_START, color)
+            colorize(sb, ShellSysBusDumper.DEVICE_END, color)
+        }
+        return sb
+    }
+
+    private fun colorize(
+        sb: SpannableStringBuilder,
+        pattern: String,
+        @ColorInt color: Int
+    ) {
+        val p = Pattern.compile(pattern)
+        val m = p.matcher(sb.toString())
+        while (m.find()) {
+            val span: CharacterStyle = ForegroundColorSpan(color)
+            sb.setSpan(span, m.start(), m.end(), Spannable.SPAN_INCLUSIVE_INCLUSIVE)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDumpFragment.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDumpFragment.kt
new file mode 100644
index 0000000..773a7cc
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/device/DeviceDumpFragment.kt
@@ -0,0 +1,17 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.device
+
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.BaseDebugFragment
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+
+
+@AndroidEntryPoint
+class DeviceDumpFragment : BaseDebugFragment() {
+
+    @Inject
+    internal lateinit var dumper: DeviceDebugInfoDumper
+
+    override fun getData(): CharSequence {
+        return dumper.dump()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDebugInfoDumper.java
similarity index 89%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDebugInfoDumper.java
index 0799091..a4e0e1a 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDebugInfoDumper.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.directory;
 
 import android.content.Context;
 import android.text.SpannableStringBuilder;
@@ -9,15 +9,25 @@ import java.util.Comparator;
 
 import androidx.annotation.NonNull;
 import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DebugInfoDumper;
 
-/*package*/ class DirectoryDump {
+public class DirectoryDebugInfoDumper implements DebugInfoDumper {
     private static final Comparator<File> FILE_COMPARATOR = new FileComparator();
     private static final String FILE_PREFIX = "    ";
     private static final String DIR_PREFIX = "[D] ";
     private static final char BOX_CORNER = '\u2514';
 
-    public static CharSequence getDump(@NonNull final Context context,
-                                       @NonNull final String dir) {
+    private final Context context;
+    private final String dir;
+
+    public DirectoryDebugInfoDumper(final Context context, final String dir) {
+        this.context = context;
+        this.dir = dir;
+    }
+
+    @NonNull
+    @Override
+    public CharSequence dump() {
         return getDump(context, new File(dir));
     }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDumpFragment.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDumpFragment.kt
new file mode 100644
index 0000000..a7d4bac
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directory/DirectoryDumpFragment.kt
@@ -0,0 +1,16 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.directory
+
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.BaseDebugFragment
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+
+
+@AndroidEntryPoint
+class DirectoryDumpFragment : BaseDebugFragment() {
+
+    @Inject
+    internal lateinit var dumper: DirectoryDebugInfoDumper
+    override fun getData(): CharSequence {
+        return dumper.dump()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryDumpNativeFragment.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryDumpNativeFragment.kt
new file mode 100644
index 0000000..4ad65e9
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryDumpNativeFragment.kt
@@ -0,0 +1,15 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.directorynative
+
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.BaseDebugFragment
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+
+@AndroidEntryPoint
+class DirectoryDumpNativeFragment : BaseDebugFragment() {
+
+    @Inject
+    internal lateinit var dumper: DirectoryNativeDebugInfoDumper
+    override fun getData(): CharSequence {
+        return dumper.dump()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryNativeDebugInfoDumper.java
similarity index 75%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryNativeDebugInfoDumper.java
index 9838963..4a8b215 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/directorynative/DirectoryNativeDebugInfoDumper.java
@@ -1,6 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
-
-import android.content.Context;
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments.directorynative;
 
 import java.io.BufferedReader;
 import java.io.Closeable;
@@ -9,12 +7,24 @@ import java.io.InputStreamReader;
 import java.util.Arrays;
 
 import androidx.annotation.NonNull;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DebugInfoDumper;
+
+public class DirectoryNativeDebugInfoDumper implements DebugInfoDumper {
+
+    private final String dir;
 
-/*package*/ class DirectoryDumpNative {
+    public DirectoryNativeDebugInfoDumper(final String dir) {
+        this.dir = dir;
+    }
+
+    @NonNull
+    @Override
+    public CharSequence dump() {
+        return getDump(dir);
+    }
 
     @SuppressWarnings({"StringConcatenationInsideStringBufferAppend"})
-    public static CharSequence getDump(@NonNull final Context context,
-                                       @NonNull final String dir) {
+    private static CharSequence getDump(@NonNull final String dir) {
 
         final String[] command = {"ls", "-al", dir};
         final StringBuilder sb = new StringBuilder();
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
index 9ef9fa9..60f29cf 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
@@ -15,10 +15,7 @@
  */
 package aws.apps.usbDeviceEnumerator.ui.main;
 
-import android.content.Context;
 import android.content.Intent;
-import android.hardware.usb.UsbDevice;
-import android.hardware.usb.UsbManager;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.Menu;
@@ -33,6 +30,8 @@ import java.io.File;
 import java.util.Arrays;
 import java.util.Map;
 
+import javax.inject.Inject;
+
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
 import androidx.fragment.app.Fragment;
@@ -48,24 +47,28 @@ import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabController;
 import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabViewHolder;
 import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
-import aws.apps.usbDeviceEnumerator.util.Constants;
+import dagger.hilt.android.AndroidEntryPoint;
+import uk.co.alt236.androidusbmanager.AndroidUsbManager;
+import uk.co.alt236.androidusbmanager.model.AndroidUsbDevice;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbManager;
 
+@AndroidEntryPoint
 public class MainActivity extends AppCompatActivity {
     final String TAG = this.getClass().getName();
+    @Inject
+    SysBusUsbManager mUsbManagerLinux;
+    @Inject
+    AndroidUsbManager mUsbManagerAndroid;
+    @Inject
+    DataProviderUsbInfo mDbUsb;
+    @Inject
+    DataProviderCompanyInfo mDbComp;
+    @Inject
+    DataProviderCompanyLogo mZipComp;
 
-    private UsbManager mUsbManAndroid;
-    private SysBusUsbManager mUsbManagerLinux;
-
-    private DataProviderUsbInfo mDbUsb;
-    private DataProviderCompanyInfo mDbComp;
-    private DataProviderCompanyLogo mZipComp;
-
-    private Map<String, UsbDevice> mAndroidDeviceMap;
     private Map<String, SysBusUsbDevice> mLinuxDeviceMap;
 
-    private ProgressDialogControl progressDialogControl;
     private Navigation mNavigation;
 
     private TabController mTabController;
@@ -74,8 +77,8 @@ public class MainActivity extends AppCompatActivity {
         // Prompt user to DL db if it is missing.
         if (!new File(mDbUsb.getDataFilePath()).exists()) {
             DialogFactory.createOkDialog(this,
-                    R.string.alert_db_not_found_title,
-                    R.string.alert_db_not_found_instructions)
+                            R.string.alert_db_not_found_title,
+                            R.string.alert_db_not_found_instructions)
                     .show();
             Log.w(TAG, "^ Database not found: " + mDbUsb.getDataFilePath());
         }
@@ -91,29 +94,22 @@ public class MainActivity extends AppCompatActivity {
         mTabController = new TabController(this);
         mNavigation = new Navigation(this);
 
-        mUsbManAndroid = (UsbManager) getSystemService(Context.USB_SERVICE);
-        mUsbManagerLinux = new SysBusUsbManager(Constants.PATH_SYS_BUS_USB);
-
-        mDbUsb = new DataProviderUsbInfo(this);
-        mDbComp = new DataProviderCompanyInfo(this);
-        mZipComp = new DataProviderCompanyLogo(this);
-
         mTabController.setup(this::onTabChanged);
 
         // Setup android list - tab1;
         mTabController.getHolderForTag(TabController.TAB_ANDROID_INFO)
                 .getList().setOnItemClickListener((parent, view, position, id) -> {
-            ((ListView) parent).setItemChecked(position, true);
-            mNavigation.showAndroidUsbDeviceInfo(((TextView) view).getText().toString());
-        });
+                    ((ListView) parent).setItemChecked(position, true);
+                    mNavigation.showAndroidUsbDeviceInfo(((TextView) view).getText().toString());
+                });
 
 
         // Setup linux list - tab2
         mTabController.getHolderForTag(TabController.TAB_LINUX_INFO)
                 .getList().setOnItemClickListener((parent, view, position, id) -> {
-            ((ListView) parent).setItemChecked(position, true);
-            mNavigation.showLinuxUsbDeviceInfo(mLinuxDeviceMap.get(((TextView) view).getText().toString()));
-        });
+                    ((ListView) parent).setItemChecked(position, true);
+                    mNavigation.showLinuxUsbDeviceInfo(mLinuxDeviceMap.get(((TextView) view).getText().toString()));
+                });
 
 
         checkIfDbPresent();
@@ -135,23 +131,23 @@ public class MainActivity extends AppCompatActivity {
      */
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_about:
-                AboutDialogFactory.createAboutDialog(this).show();
-                return true;
-            case R.id.menu_debug:
-                final Intent intent = new Intent(this, DebugActivity.class);
-                ActivityCompat.startActivity(this, intent, null);
-                return true;
-            case R.id.menu_update_db:
-                final ProgressDialogControl control = new ProgressDialogControl(getSupportFragmentManager());
-                final DatabaseUpdater databaseUpdater = new DatabaseUpdater(control, mDbComp, mDbUsb, mZipComp);
-
-                databaseUpdater.start(this);
-                return true;
-            case R.id.menu_refresh:
-                refreshUsbDevices();
-                return true;
+        final int itemId = item.getItemId();
+        if (itemId == R.id.menu_about) {
+            AboutDialogFactory.createAboutDialog(this).show();
+            return true;
+        } else if (itemId == R.id.menu_debug) {
+            final Intent intent = new Intent(this, DebugActivity.class);
+            ActivityCompat.startActivity(this, intent, null);
+            return true;
+        } else if (itemId == R.id.menu_update_db) {
+            final ProgressDialogControl control = new ProgressDialogControl(getSupportFragmentManager());
+            final DatabaseUpdater databaseUpdater = new DatabaseUpdater(control, mDbComp, mDbUsb, mZipComp);
+
+            databaseUpdater.start(this);
+            return true;
+        } else if (itemId == R.id.menu_refresh) {
+            refreshUsbDevices();
+            return true;
         }
 
         return false;
@@ -193,7 +189,7 @@ public class MainActivity extends AppCompatActivity {
 
 
     private void refreshUsbDevices() {
-        mAndroidDeviceMap = mUsbManAndroid.getDeviceList();
+        Map<String, AndroidUsbDevice> mAndroidDeviceMap = mUsbManagerAndroid.getDeviceList();
         mLinuxDeviceMap = mUsbManagerLinux.getUsbDevices();
 
         updateList(mTabController.getHolderForTag(TabController.TAB_ANDROID_INFO), mAndroidDeviceMap);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
index 87e2c61..c113aa7 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
@@ -23,8 +23,10 @@ import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentTransaction;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
+import dagger.hilt.android.AndroidEntryPoint;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
+@AndroidEntryPoint
 public class UsbInfoActivity extends AppCompatActivity {
     public static final String EXTRA_DATA_ANDROID = UsbInfoActivity.class.getName() + ".EXTRA_DATA_ANDROID";
     public static final String EXTRA_DATA_LINUX = UsbInfoActivity.class.getName() + ".EXTRA_DATA_LINUX";
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/BottomTableBuilder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/BottomTableBuilder.java
deleted file mode 100644
index 50ad3b4..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/BottomTableBuilder.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android;
-
-import android.content.res.Resources;
-import android.hardware.usb.UsbDevice;
-import android.hardware.usb.UsbEndpoint;
-import android.hardware.usb.UsbInterface;
-import android.view.LayoutInflater;
-import android.widget.TableLayout;
-
-import androidx.annotation.StringRes;
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.TableWriter;
-import aws.apps.usbDeviceEnumerator.util.StringUtils;
-import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
-
-public class BottomTableBuilder {
-
-    private final LayoutInflater inflater;
-    private final Resources resources;
-
-    public BottomTableBuilder(final Resources resources, final LayoutInflater inflater) {
-        this.resources = resources;
-        this.inflater = inflater;
-    }
-
-    void build(TableLayout table, UsbDevice device) {
-        final TableWriter tableWriter = new TableWriter(inflater, table);
-
-        UsbInterface iFace;
-        for (int i = 0; i < device.getInterfaceCount(); i++) {
-            iFace = device.getInterface(i);
-            if (iFace != null) {
-//                final TableLayout bottomTable = viewHolder.getBottomTable();
-                final String usbClass = UsbConstantResolver.resolveUsbClass((iFace.getInterfaceClass()));
-
-                tableWriter.addDataRow(getString(R.string.interface_) + i, "");
-                tableWriter.addDataRow(getString(R.string.class_), usbClass);
-
-                if (iFace.getEndpointCount() > 0) {
-                    String endpointText;
-                    for (int j = 0; j < iFace.getEndpointCount(); j++) {
-                        endpointText = getEndpointText(iFace.getEndpoint(j), j);
-                        tableWriter.addDataRow(getString(R.string.endpoint_), endpointText);
-                    }
-                } else {
-                    tableWriter.addDataRow("\tEndpoints:", "none");
-                }
-            }
-        }
-    }
-
-    private String getEndpointText(final UsbEndpoint endpoint, final int index) {
-        final String addressInBinary = StringUtils.padLeft(Integer.toBinaryString(endpoint.getAddress()), '0', 8);
-        final String addressInHex = StringUtils.padLeft(Integer.toHexString(endpoint.getAddress()), '0', 2);
-        final String attributesInBinary = StringUtils.padLeft(Integer.toBinaryString(endpoint.getAttributes()), '0', 8);
-
-        String endpointText = "#" + index + "\n";
-        endpointText += getString(R.string.address_) + "0x" + addressInHex + " (" + addressInBinary + ")\n";
-        endpointText += getString(R.string.number_) + endpoint.getEndpointNumber() + "\n";
-        endpointText += getString(R.string.direction_) + UsbConstantResolver.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";
-        endpointText += getString(R.string.type_) + UsbConstantResolver.resolveUsbEndpointType(endpoint.getType()) + "\n";
-        endpointText += getString(R.string.poll_interval_) + endpoint.getInterval() + "\n";
-        endpointText += getString(R.string.max_packet_size_) + endpoint.getMaxPacketSize() + "\n";
-        endpointText += getString(R.string.attributes_) + attributesInBinary;
-
-        return endpointText;
-    }
-
-    private String getString(@StringRes int id) {
-        return resources.getString(id);
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/InfoFragmentAndroid.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/InfoFragmentAndroid.java
index 5707d3d..0126041 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/InfoFragmentAndroid.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/InfoFragmentAndroid.java
@@ -15,48 +15,52 @@
  */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android;
 
-import android.content.Context;
-import android.hardware.usb.UsbDevice;
-import android.hardware.usb.UsbManager;
-import android.os.Build;
 import android.os.Bundle;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import javax.inject.Inject;
+
 import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.mapper.ApiConditionalResultMapper;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.table.BottomTableBuilder;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.BaseInfoFragment;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.ViewHolder;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.sharing.SharePayloadFactory;
 import aws.apps.usbDeviceEnumerator.util.StringUtils;
+import dagger.hilt.android.AndroidEntryPoint;
+import uk.co.alt236.androidusbmanager.AndroidUsbManager;
+import uk.co.alt236.androidusbmanager.model.AndroidUsbDevice;
+import uk.co.alt236.androidusbmanager.result.ApiConditionalResult;
 import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 
+@AndroidEntryPoint
 public class InfoFragmentAndroid extends BaseInfoFragment {
     public final static String DEFAULT_STRING = "???";
     private final static String EXTRA_DATA = InfoFragmentAndroid.class.getName() + ".BUNDLE_DATA";
     private static final SharePayloadFactory SHARE_PAYLOAD_FACTORY = new SharePayloadFactory();
     private static final int LAYOUT_ID = R.layout.fragment_usb_info;
 
-    private final String TAG = this.getClass().getName();
+    @Inject
+    protected AndroidUsbManager usbManager;
+    @Inject
+    protected ApiConditionalResultMapper resultMapper;
+
     private String usbKey = DEFAULT_STRING;
     private ViewHolder viewHolder;
-    private UsbManager usbMan;
-    private UsbDevice device;
-    private boolean validData;
 
-    @Override
-    public void onAttach(@NonNull final Context context) {
-        super.onAttach(context);
-        usbMan = (UsbManager) context.getSystemService(Context.USB_SERVICE);
-    }
+    private boolean validData;
+    private AndroidUsbDevice device;
 
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        usbKey = getArguments().getString(EXTRA_DATA, DEFAULT_STRING);
-        device = usbMan.getDeviceList().get(usbKey);
+        usbKey = requireArguments().getString(EXTRA_DATA, DEFAULT_STRING);
+        device = usbManager.getDeviceList().get(usbKey);
 
         final View view;
 
@@ -76,7 +80,7 @@ public class InfoFragmentAndroid extends BaseInfoFragment {
         super.onViewCreated(view, bundle);
         viewHolder = new ViewHolder(view);
 
-        usbKey = getArguments().getString(EXTRA_DATA, DEFAULT_STRING);
+        usbKey = requireArguments().getString(EXTRA_DATA, DEFAULT_STRING);
 
         if (validData) {
             viewHolder = new ViewHolder(view);
@@ -104,15 +108,21 @@ public class InfoFragmentAndroid extends BaseInfoFragment {
 
         new BottomTableBuilder(getResources(), inflater).build(viewHolder.getBottomTable(), device);
 
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            viewHolder.getReportedVendor().setText(device.getManufacturerName());
-            viewHolder.getReportedProduct().setText(device.getProductName());
-            loadAsyncData(viewHolder, vid, pid, device.getManufacturerName());
+        final ApiConditionalResult<String> manufacturedNameResult = device.getManufacturerName();
+        final String mappedManufacturerNameValue = resultMapper.map(manufacturedNameResult);
+
+        viewHolder.getReportedVendor().setText(mappedManufacturerNameValue);
+        viewHolder.getReportedProduct().setText(resultMapper.map(device.getProductName()));
+
+        final String manufacturerName;
+        if (manufacturedNameResult instanceof ApiConditionalResult.Success<String>
+                && !TextUtils.isEmpty(mappedManufacturerNameValue)) {
+            manufacturerName = mappedManufacturerNameValue;
         } else {
-            viewHolder.getReportedVendor().setText(R.string.not_provided);
-            viewHolder.getReportedProduct().setText(R.string.not_provided);
-            loadAsyncData(viewHolder, vid, pid, null);
+            manufacturerName = null;
         }
+
+        loadAsyncData(viewHolder, vid, pid, manufacturerName);
     }
 
     @Override
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/mapper/ApiConditionalResultMapper.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/mapper/ApiConditionalResultMapper.kt
new file mode 100644
index 0000000..5dab2a2
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/mapper/ApiConditionalResultMapper.kt
@@ -0,0 +1,18 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.mapper
+
+import android.content.res.Resources
+import aws.apps.usbDeviceEnumerator.R
+import uk.co.alt236.androidusbmanager.result.ApiConditionalResult
+import javax.inject.Inject
+
+class ApiConditionalResultMapper @Inject constructor(private val resources: Resources) {
+
+    fun map(input: ApiConditionalResult<*>): String {
+        return when (input) {
+            ApiConditionalResult.ApiTooLow -> resources.getString(R.string.error_device_api_too_low)
+            is ApiConditionalResult.Error<*> -> input.error::class.java.simpleName
+            is ApiConditionalResult.Success -> input.result.toString()
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/BottomTableBuilder.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/BottomTableBuilder.kt
new file mode 100644
index 0000000..291e75b
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/BottomTableBuilder.kt
@@ -0,0 +1,86 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.table
+
+import android.content.res.Resources
+import android.view.LayoutInflater
+import android.widget.TableLayout
+import aws.apps.usbDeviceEnumerator.R
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.mapper.ApiConditionalResultMapper
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.TableWriter
+import aws.apps.usbDeviceEnumerator.util.StringUtils
+import uk.co.alt236.androidusbmanager.model.AndroidUsbDevice
+import uk.co.alt236.androidusbmanager.model.AndroidUsbEndpoint
+import uk.co.alt236.androidusbmanager.model.AndroidUsbInterface
+import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver
+
+class BottomTableBuilder(
+    resources: Resources,
+    private val inflater: LayoutInflater
+) : TableBuilder(resources) {
+    private val configurationTableBuilder = ConfigurationTableBuilder(resources)
+
+    private val resultMapper = ApiConditionalResultMapper(resources)
+
+    fun build(table: TableLayout, device: AndroidUsbDevice) {
+        val tableWriter = TableWriter(inflater, table)
+
+        configurationTableBuilder.addConfigurations(tableWriter, device.configurations)
+        tableWriter.addEmptyRow()
+        addInterfaces(tableWriter, device.interfaces)
+    }
+
+
+    private fun addInterfaces(tableWriter: TableWriter, iFaces: List<AndroidUsbInterface>) {
+        for ((index, iFace) in iFaces.withIndex()) {
+            val usbClass = UsbConstantResolver.resolveUsbClass((iFace.interfaceClass))
+            val subClass = UsbConstantResolver.resolveUsbInterfaceSubClass(iFace.interfaceSubclass)
+
+            tableWriter.addTitleRow(getString(R.string.interface_) + index)
+            tableWriter.addDataRow(R.string.id_, iFace.id.toString())
+            tableWriter.addDataRow(R.string.name_, resultMapper.map(iFace.name))
+            tableWriter.addDataRow(
+                R.string.alternate_setting_,
+                resultMapper.map(iFace.alternateSetting)
+            )
+            tableWriter.addDataRow(R.string.class_, usbClass)
+            tableWriter.addDataRow(R.string.subclass_, subClass)
+            tableWriter.addDataRow(R.string.protocol_, iFace.interfaceProtocol.toString())
+
+            addEndpoints(tableWriter, iFace)
+        }
+    }
+
+    private fun addEndpoints(tableWriter: TableWriter, iFace: AndroidUsbInterface) {
+        val title = R.string.endpoint_
+        if (iFace.endpoints.isEmpty()) {
+            tableWriter.addDataRow(title, "no endpoints")
+        } else {
+            var endpointText: String
+            for ((index, endpoint) in iFace.endpoints.withIndex()) {
+                endpointText = getEndpointText(endpoint, index)
+                tableWriter.addDataRow(title, endpointText)
+            }
+        }
+    }
+
+    private fun getEndpointText(endpoint: AndroidUsbEndpoint, index: Int): String {
+        val addressInBinary = StringUtils.padLeft(Integer.toBinaryString(endpoint.address), '0', 8)
+        val addressInHex = StringUtils.padLeft(Integer.toHexString(endpoint.address), '0', 2)
+        val attributesInBinary =
+            StringUtils.padLeft(Integer.toBinaryString(endpoint.attributes), '0', 8)
+
+        var endpointText = "#$index\n"
+        endpointText += getString(R.string.address_) + "0x" + addressInHex + " (" + addressInBinary + ")\n"
+        endpointText += getString(R.string.number_) + endpoint.endpointNumber + "\n"
+        endpointText += getString(R.string.direction_) + UsbConstantResolver.resolveUsbEndpointDirection(
+            endpoint.direction
+        ) + "\n"
+        endpointText += getString(R.string.type_) + UsbConstantResolver.resolveUsbEndpointType(
+            endpoint.type
+        ) + "\n"
+        endpointText += getString(R.string.poll_interval_) + endpoint.interval + "\n"
+        endpointText += getString(R.string.max_packet_size_) + endpoint.maxPacketSize + "\n"
+        endpointText += getString(R.string.attributes_) + attributesInBinary
+
+        return endpointText
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/ConfigurationTableBuilder.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/ConfigurationTableBuilder.kt
new file mode 100644
index 0000000..280be86
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/ConfigurationTableBuilder.kt
@@ -0,0 +1,52 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.table
+
+import android.annotation.SuppressLint
+import android.content.res.Resources
+import aws.apps.usbDeviceEnumerator.R
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.TableWriter
+import uk.co.alt236.androidusbmanager.model.AndroidUsbConfiguration
+import uk.co.alt236.androidusbmanager.result.ApiConditionalResult
+
+internal class ConfigurationTableBuilder(resources: Resources) : TableBuilder(resources) {
+
+    fun addConfigurations(
+        tableWriter: TableWriter,
+        result: ApiConditionalResult<List<AndroidUsbConfiguration>>
+    ) {
+        val title = R.string.configuration_
+        when (result) {
+            ApiConditionalResult.ApiTooLow -> tableWriter.addDataRow(
+                title,
+                getString(R.string.error_device_api_too_low)
+            )
+
+            is ApiConditionalResult.Error<*> -> tableWriter.addDataRow(
+                title,
+                result.error::class.java.simpleName
+            )
+
+            is ApiConditionalResult.Success -> {
+                addConfigurations(tableWriter, result.result)
+            }
+        }
+    }
+
+    @SuppressLint("NewApi") // the ApiConditionalResult handles the API level check
+    private fun addConfigurations(tableWriter: TableWriter, result: List<AndroidUsbConfiguration>) {
+        val title = R.string.configuration_
+
+        if (result.isEmpty()) {
+            tableWriter.addDataRow(title, "no configurations")
+        } else {
+            for ((index, config) in result.withIndex()) {
+                tableWriter.addTitleRow(getString(R.string.configuration_) + index)
+                tableWriter.addDataRow(R.string.id_, config.id.toString())
+                tableWriter.addDataRow(R.string.name_, config.name)
+                tableWriter.addDataRow(R.string.max_power_, config.maxPower.toString())
+                tableWriter.addDataRow("Self Powered:", config.isSelfPowered.toString())
+                tableWriter.addDataRow("Remote Wakeup:", config.isRemoteWakeup.toString())
+                //tableWriter.addDataRow("Interfaces:", config.interfaces.map { it.name }.toString())
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/TableBuilder.kt b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/TableBuilder.kt
new file mode 100644
index 0000000..798af6f
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/android/table/TableBuilder.kt
@@ -0,0 +1,15 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.android.table
+
+import android.content.res.Resources
+import androidx.annotation.StringRes
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base.TableWriter
+
+abstract class TableBuilder(protected val resources: Resources) {
+    protected fun TableWriter.addDataRow(@StringRes title: Int, value: String?) {
+        this.addDataRow(getString(title), value)
+    }
+
+    protected fun getString(@StringRes id: Int): String {
+        return resources.getString(id)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/BaseInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/BaseInfoFragment.java
index 060ac0a..f7f4295 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/BaseInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/BaseInfoFragment.java
@@ -15,33 +15,25 @@
  */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base;
 
-import android.content.Context;
 import android.graphics.drawable.BitmapDrawable;
 import android.os.Bundle;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 
+import javax.inject.Inject;
+
 import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.sharing.ShareUtils;
+import dagger.hilt.android.AndroidEntryPoint;
 
+@AndroidEntryPoint
 public abstract class BaseInfoFragment extends Fragment {
 
-    private DataFetcher dataFetcher;
-
-    @Override
-    public void onAttach(@NonNull final Context context) {
-        super.onAttach(context);
-        dataFetcher = new DataFetcher(
-                new DataProviderCompanyInfo(context),
-                new DataProviderUsbInfo(context),
-                new DataProviderCompanyLogo(context));
-    }
+    @Inject
+    DataFetcher dataFetcher;
 
     @Override
     public void onCreate(Bundle saved) {
@@ -59,7 +51,7 @@ public abstract class BaseInfoFragment extends Fragment {
     public boolean onOptionsItemSelected(MenuItem item) {
         if (item.getItemId() == R.id.menu_export) {
             ShareUtils.share(
-                    getActivity(),
+                    requireActivity(),
                     getString(R.string.app_name),
                     getSharePayload());
             return true;
@@ -82,7 +74,7 @@ public abstract class BaseInfoFragment extends Fragment {
                     viewHolder.getVendorFromDb().setText(vendorFromDb);
                     viewHolder.getProductFromDb().setText(productFromDb);
                     if (bitmap != null) {
-                        final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
+                        final BitmapDrawable drawable = new BitmapDrawable(getResources(), bitmap);
                         viewHolder.getLogo().setImageDrawable(drawable);
                     } else {
                         viewHolder.getLogo().setImageResource(R.drawable.no_image);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/DataFetcher.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/DataFetcher.java
index da3240a..07e2f88 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/DataFetcher.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/DataFetcher.java
@@ -7,7 +7,7 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
 
-/*package*/ class DataFetcher {
+public class DataFetcher {
 
     private final DataProviderCompanyInfo dbComp;
     private final DataProviderUsbInfo dbUsb;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/TableWriter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/TableWriter.java
index 8b73bfd..ae3200e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/TableWriter.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/base/TableWriter.java
@@ -1,5 +1,6 @@
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.base;
 
+import android.graphics.Typeface;
 import android.view.LayoutInflater;
 import android.widget.TableLayout;
 import android.widget.TableRow;
@@ -16,14 +17,29 @@ public class TableWriter {
         this.tlb = table;
     }
 
-    public void addDataRow(String cell1Text,
-                           String cell2Text) {
+    public void addDataRow(String title, int data) {
+        addDataRow(title, String.valueOf(data));
+    }
+
+    public void addDataRow(String title, String data) {
         final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
         final TextView tv1 = row.findViewById(R.id.usb_tablerow_cell1);
         final TextView tv2 = row.findViewById(R.id.usb_tablerow_cell2);
-        tv1.setText(cell1Text);
-        tv2.setText(cell2Text);
+        tv1.setText(title);
+        tv2.setText(data);
         tlb.addView(row);
     }
 
+    public void addTitleRow(String title) {
+        final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
+        final TextView tv1 = row.findViewById(R.id.usb_tablerow_cell1);
+        tv1.setTypeface(null, Typeface.BOLD);
+        tv1.setText(title);
+        tlb.addView(row);
+    }
+
+    public void addEmptyRow() {
+        addDataRow("", "");
+    }
+
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java
deleted file mode 100644
index 17dee2b..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package aws.apps.usbDeviceEnumerator.util;
-
-public class Constants {
-    public static final String PATH_SYS_BUS_USB = uk.co.alt236.usbdeviceenumerator.sysbususb.Constants.PATH_SYS_BUS_USB;
-}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
index 83931c1..6b6938d 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
@@ -50,6 +50,9 @@ public class UsbConstantResolver {
     private final static int USB_ENDPOINT_XFER_INT = 3;
 
 
+    private static final int USB_INTERFACE_SUBCLASS_BOOT = 1;
+    private static final int USB_SUBCLASS_VENDOR_SPEC = 0xff;
+
     public static String resolveUsbClass(int usbClass) {
         switch (usbClass) {
             case USB_CLASS_PER_INTERFACE:
@@ -95,6 +98,17 @@ public class UsbConstantResolver {
         }
     }
 
+    public static String resolveUsbInterfaceSubClass(int usbClass) {
+        switch (usbClass) {
+            case USB_INTERFACE_SUBCLASS_BOOT:
+                return "Boot (0x" + Integer.toHexString(usbClass) + ")";
+            case USB_SUBCLASS_VENDOR_SPEC:
+                return "Vendor Specific (0x" + Integer.toHexString(usbClass) + ")";
+            default:
+                return "Unknown (0x" + Integer.toHexString(usbClass) + ")";
+        }
+    }
+
     public static String resolveUsbClass(@Nonnull SysBusUsbDevice device) {
         try {
             return resolveUsbClass(Integer.parseInt(device.getServiceClass()));
diff --git a/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
index 6e0eff2..40e85c4 100644
--- a/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
+++ b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
@@ -5,7 +5,7 @@ import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.File;
 
