diff --git a/app/src/main/java/com/dfa/hubzilla_android/activity/MainActivity.java b/app/src/main/java/com/dfa/hubzilla_android/activity/MainActivity.java
index 663286d..ac57739 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/activity/MainActivity.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/activity/MainActivity.java
@@ -306,10 +306,11 @@ public class MainActivity extends ThemedActivity
                     BrowserFragment bf = new BrowserFragment();
                     fm.beginTransaction().add(bf, fragmentTag).commit();
                     return bf;
-                case TagListFragment.TAG:
-                    TagListFragment hlf = new TagListFragment();
-                    fm.beginTransaction().add(hlf, fragmentTag).commit();
-                    return hlf;
+            /**    case TagListFragment.TAG:
+              *      TagListFragment hlf = new TagListFragment();
+              *      fm.beginTransaction().add(hlf, fragmentTag).commit();
+              *      return hlf;
+              **/
                 case AspectListFragment.TAG:
                     AspectListFragment alf = new AspectListFragment();
                     fm.beginTransaction().add(alf, fragmentTag).commit();
@@ -446,19 +447,19 @@ public class MainActivity extends ThemedActivity
         // Hide by app settings
         navMenu.findItem(R.id.nav_exit).setVisible(_appSettings.isVisibleInNavExit());
         navMenu.findItem(R.id.nav_activities).setVisible(_appSettings.isVisibleInNavActivities());
-        navMenu.findItem(R.id.nav_aspects).setVisible(_appSettings.isVisibleInNavAspects());
+      //  navMenu.findItem(R.id.nav_aspects).setVisible(_appSettings.isVisibleInNavAspects());
         navMenu.findItem(R.id.nav_contacts).setVisible(_appSettings.isVisibleInNavContacts());
-        navMenu.findItem(R.id.nav_commented).setVisible(_appSettings.isVisibleInNavCommented());
-        navMenu.findItem(R.id.nav_followed_tags).setVisible(_appSettings.isVisibleInNavFollowed_tags());
+        //navMenu.findItem(R.id.nav_commented).setVisible(_appSettings.isVisibleInNavCommented());
+        //navMenu.findItem(R.id.nav_followed_tags).setVisible(_appSettings.isVisibleInNavFollowed_tags());
         navMenu.findItem(R.id.nav_about).setVisible(_appSettings.isVisibleInNavHelp_license());
-        navMenu.findItem(R.id.nav_liked).setVisible(_appSettings.isVisibleInNavLiked());
-        navMenu.findItem(R.id.nav_mentions).setVisible(_appSettings.isVisibleInNavMentions());
+        //navMenu.findItem(R.id.nav_liked).setVisible(_appSettings.isVisibleInNavLiked());
+        //navMenu.findItem(R.id.nav_mentions).setVisible(_appSettings.isVisibleInNavMentions());
         navMenu.findItem(R.id.nav_profile).setVisible(_appSettings.isVisibleInNavProfile());
         navMenu.findItem(R.id.nav_public).setVisible(_appSettings.isVisibleInNavPublic_activities());
         navMenu.findItem(R.id.nav_stream).setVisible(true);
-        navMenu.findItem(R.id.nav_statistics).setVisible(_appSettings.isVisibleInNavStatistics());
-        navMenu.findItem(R.id.nav_reports).setVisible(_appSettings.isVisibleInNavReports());
-        navMenu.findItem(R.id.nav_toggle_desktop_page).setVisible(_appSettings.isVisibleInNavToggleMobileDesktop());
+        //navMenu.findItem(R.id.nav_statistics).setVisible(_appSettings.isVisibleInNavStatistics());
+        //navMenu.findItem(R.id.nav_reports).setVisible(_appSettings.isVisibleInNavReports());
+        //navMenu.findItem(R.id.nav_toggle_desktop_page).setVisible(_appSettings.isVisibleInNavToggleMobileDesktop());
         navMenu.findItem(R.id.nav_events).setVisible(_appSettings.isVisibleInNavEvents());
     //    navMenu.findItem(R.id.nav_dandelion).setVisible(_appSettings.isVisibleInNavDandelionAccount());
 
@@ -564,9 +565,9 @@ public class MainActivity extends ThemedActivity
         } else if ("sc_new_post".equals(action)) {
             openDiasporaUrl(urls.getNewPostUrl());
             return;
-        } else if ("sc_nav_followed_tags".equals(action)) {
-            showFragment(getFragment(TagListFragment.TAG));
-            return;
+        //} else if ("sc_nav_followed_tags".equals(action)) {
+        //    showFragment(getFragment(TagListFragment.TAG));
+        //    return;
         } else if ("sc_aspects".equals(action)) {
             showFragment(getFragment(AspectListFragment.TAG));
             return;
@@ -1127,12 +1128,12 @@ return super.onOptionsItemSelected(item);
               }
           }
           break;
-
-            case R.id.nav_followed_tags: {
-                showFragment(getFragment(TagListFragment.TAG));
-            }
-            break;
-
+/**
+  *          case R.id.nav_followed_tags: {
+  *              showFragment(getFragment(TagListFragment.TAG));
+  *          }
+  *          break;
+**/
             case R.id.nav_aspects: {
                 showFragment(getFragment(AspectListFragment.TAG));
             }
@@ -1155,34 +1156,34 @@ return super.onOptionsItemSelected(item);
                 }
             }
             break;
-
-            case R.id.nav_liked: {
-                if (WebHelper.isOnline(MainActivity.this)) {
-                    openDiasporaUrl(urls.getLikedPostsUrl());
-                } else {
-                    snackbarNoInternet.show();
-                }
-            }
-            break;
-
-            case R.id.nav_commented: {
-                if (WebHelper.isOnline(MainActivity.this)) {
-                    openDiasporaUrl(urls.getCommentedUrl());
-                } else {
-                    snackbarNoInternet.show();
-                }
-            }
-            break;
-
-            case R.id.nav_mentions: {
-                if (WebHelper.isOnline(MainActivity.this)) {
-                    openDiasporaUrl(urls.getMentionsUrl());
-                } else {
-                    snackbarNoInternet.show();
-                }
-            }
-            break;
-
+/**
+*            case R.id.nav_liked: {
+*                if (WebHelper.isOnline(MainActivity.this)) {
+*                    openDiasporaUrl(urls.getLikedPostsUrl());
+*                } else {
+*                    snackbarNoInternet.show();
+*                }
+*            }
+*            break;
+*
+*            case R.id.nav_commented: {
+*                if (WebHelper.isOnline(MainActivity.this)) {
+*                    openDiasporaUrl(urls.getCommentedUrl());
+*                } else {
+*                    snackbarNoInternet.show();
+*                }
+*            }
+*            break;
+*
+*            case R.id.nav_mentions: {
+*                if (WebHelper.isOnline(MainActivity.this)) {
+*                    openDiasporaUrl(urls.getMentionsUrl());
+*                } else {
+*                    snackbarNoInternet.show();
+*                }
+*            }
+*            break;
+**/
             case R.id.nav_public: {
                 if (WebHelper.isOnline(MainActivity.this)) {
                     openDiasporaUrl(urls.getPubstreamUrl());
@@ -1191,30 +1192,30 @@ return super.onOptionsItemSelected(item);
                 }
             }
             break;
-
-            case R.id.nav_reports: {
-                if (WebHelper.isOnline(MainActivity.this)) {
-                    openDiasporaUrl(urls.getReportsUrl());
-                } else {
-                    snackbarNoInternet.show();
-                }
-            }
-            break;
-
-            case R.id.nav_statistics: {
-                if (WebHelper.isOnline(MainActivity.this)) {
-                    openDiasporaUrl(urls.getStatisticsUrl());
-                } else {
-                    snackbarNoInternet.show();
-                }
-            }
-            break;
-
-            case R.id.nav_toggle_desktop_page: {
-                openDiasporaUrl(urls.getToggleMobileUrl());
-            }
-            break;
 /**
+*            case R.id.nav_reports: {
+*                if (WebHelper.isOnline(MainActivity.this)) {
+*                    openDiasporaUrl(urls.getReportsUrl());
+*                } else {
+*                    snackbarNoInternet.show();
+*                }
+*            }
+*            break;
+*
+*            case R.id.nav_statistics: {
+*                if (WebHelper.isOnline(MainActivity.this)) {
+*                    openDiasporaUrl(urls.getStatisticsUrl());
+*                } else {
+*                    snackbarNoInternet.show();
+*                }
+*            }
+*            break;
+*
+*            case R.id.nav_toggle_desktop_page: {
+*                openDiasporaUrl(urls.getToggleMobileUrl());
+*            }
+*            break;
+*
   *          case R.id.nav_dandelion: {
   *              openDiasporaUrl(urls.getProfileUrl("48b78420923501341ef3782bcb452bd5"));
   *          }
diff --git a/app/src/main/java/com/dfa/hubzilla_android/activity/SettingsActivity.java b/app/src/main/java/com/dfa/hubzilla_android/activity/SettingsActivity.java
index d037259..83b9fa5 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/activity/SettingsActivity.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/activity/SettingsActivity.java
@@ -209,14 +209,14 @@ public class SettingsActivity extends ThemedActivity implements SharedPreference
                     startActivity(intent);
                     getActivity().finish();
                     return true;
-                } else if (settings.isKeyEqual(key, R.string.pref_key__manage_tags)) {
-                    Intent intent = new Intent(getActivity(), MainActivity.class);
-                    intent.setAction(MainActivity.ACTION_OPEN_URL);
-                    intent.putExtra(MainActivity.URL_MESSAGE, diasporaUrlHelper.getManageTagsUrl());
-                    startActivity(intent);
-                    getActivity().finish();
-                    return true;
-                } else if (settings.isKeyEqual(key, R.string.pref_key__manage_contacts)) {
+                }/** else if (settings.isKeyEqual(key, R.string.pref_key__manage_tags)) {
+                  *  Intent intent = new Intent(getActivity(), MainActivity.class);
+                  *  intent.setAction(MainActivity.ACTION_OPEN_URL);
+                  *  intent.putExtra(MainActivity.URL_MESSAGE, diasporaUrlHelper.getManageTagsUrl());
+                  *  startActivity(intent);
+                  *  getActivity().finish();
+                  *  return true;
+                } **/else if (settings.isKeyEqual(key, R.string.pref_key__manage_contacts)) {
                     Intent intent = new Intent(getActivity(), MainActivity.class);
                     intent.setAction(MainActivity.ACTION_OPEN_URL);
                     intent.putExtra(MainActivity.URL_MESSAGE, diasporaUrlHelper.getContactsUrl());
diff --git a/app/src/main/java/com/dfa/hubzilla_android/activity/TagListFragment.java b/app/src/main/java/com/dfa/hubzilla_android/activity/TagListFragment.java
index 8fb1c16..e69de29 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/activity/TagListFragment.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/activity/TagListFragment.java
@@ -1,206 +0,0 @@
-/*
-    This file is part of the dandelion*.
-
-    dandelion* is free software: you can redistribute it and/or modify
-    it under the terms of the GNU General Public License as published by
-    the Free Software Foundation, either version 3 of the License, or
-    (at your option) any later version.
-
-    dandelion* is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with the dandelion*.
-
-    If not, see <http://www.gnu.org/licenses/>.
- */
-package com.dfa.hubzilla_android.activity;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.os.Bundle;
-import android.support.v7.widget.AppCompatImageView;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.dfa.hubzilla_android.App;
-import com.dfa.hubzilla_android.R;
-import com.dfa.hubzilla_android.listener.OnSomethingClickListener;
-import com.dfa.hubzilla_android.ui.theme.ThemedFragment;
-import com.dfa.hubzilla_android.util.AppSettings;
-import com.dfa.hubzilla_android.util.ContextUtils;
-import com.dfa.hubzilla_android.util.DiasporaUrlHelper;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-/**
- * Fragment that shows a list of the HashTags the user follows
- */
-public class TagListFragment extends ThemedFragment implements OnSomethingClickListener<Object> {
-
-    public static final String TAG = "com.dfa.hubzilla_android.TagListFragment";
-
-    @BindView(R.id.fragment_list__recycler_view)
-    public RecyclerView followedTagsRecyclerView;
-
-    @BindView(R.id.fragment_list__spacer)
-    public View space;
-
-    @BindView(R.id.fragment_list__root)
-    public RelativeLayout rootView;
-
-    protected App app;
-    protected DiasporaUrlHelper urls;
-
-    @Override
-    protected int getLayoutResId() {
-        return R.layout.recycler_list__fragment;
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        ButterKnife.bind(this, view);
-        app = (App) getActivity().getApplication();
-        AppSettings appSettings = app.getSettings();
-        urls = new DiasporaUrlHelper(appSettings);
-
-        followedTagsRecyclerView.setHasFixedSize(true);
-        followedTagsRecyclerView.setNestedScrollingEnabled(false);
-
-        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getContext());
-        followedTagsRecyclerView.setLayoutManager(layoutManager);
-
-        final FollowedTagsAdapter adapter = new FollowedTagsAdapter(appSettings, this);
-        followedTagsRecyclerView.setAdapter(adapter);
-
-        //Set window title
-        getActivity().setTitle(R.string.nav_followed_tags);
-    }
-
-    @Override
-    public String getFragmentTag() {
-        return TAG;
-    }
-
-    @Override
-    public boolean onBackPressed() {
-        return false;
-    }
-
-    @Override
-    public void onSomethingClicked(Object null1, Integer null2, String tag) {
-        ((MainActivity) getActivity()).openDiasporaUrl(urls.getSearchTagsUrl(tag));
-    }
-
-    @Override
-    protected void applyColorToViews() {
-        followedTagsRecyclerView.invalidate();
-        if (getAppSettings().isAmoledColorMode()) {
-            rootView.setBackgroundColor(Color.BLACK);
-            space.setBackgroundColor(Color.BLACK);
-        }
-    }
-
-    public static class FollowedTagsAdapter extends RecyclerView.Adapter<FollowedTagsAdapter.ViewHolder> {
-        private boolean isAmoledColorMode;
-        private AppSettings appSettings;
-        private String[] followedTagsList;
-        private List<String> followedTagsFavsList;
-        private OnSomethingClickListener<Object> tagClickedListener;
-
-        static class ViewHolder extends RecyclerView.ViewHolder {
-            @BindView(R.id.recycler_view__list_item__text)
-            public TextView title;
-            @BindView(R.id.recycler_view__list_item__favourite)
-            AppCompatImageView favouriteImage;
-            @BindView(R.id.recycler_view__list_item__root)
-            RelativeLayout root;
-
-            ViewHolder(View v) {
-                super(v);
-                ButterKnife.bind(this, v);
-            }
-        }
-
-
-        FollowedTagsAdapter(AppSettings appSettings, OnSomethingClickListener<Object> tagClickedListener) {
-            this.appSettings = appSettings;
-            this.followedTagsList = appSettings.getFollowedTags();
-            this.followedTagsFavsList = new ArrayList<>(Arrays.asList(appSettings.getFollowedTagsFavs()));
-            this.tagClickedListener = tagClickedListener;
-            this.isAmoledColorMode = appSettings.isAmoledColorMode();
-        }
-
-        @Override
-        public int getItemCount() {
-            return followedTagsList.length;
-        }
-
-        @Override
-        public FollowedTagsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-            View v = LayoutInflater.from(parent.getContext())
-                    .inflate(R.layout.recycler_list__list_item_with_fav, parent, false);
-            return new ViewHolder(v);
-        }
-
-        @Override
-        public void onBindViewHolder(final ViewHolder holder, final int position) {
-            // Alternating colors
-            final Context c = holder.root.getContext();
-            final String tag = followedTagsList[position];
-            holder.title.setText(tag);
-            if (position % 2 == 1) {
-                holder.root.setBackgroundColor(isAmoledColorMode ? Color.BLACK : ContextUtils.get().rcolor(R.color.alternate_row_color));
-                holder.title.setTextColor(isAmoledColorMode ? Color.GRAY : Color.BLACK);
-            } else {
-                holder.root.setBackgroundColor(isAmoledColorMode ? Color.BLACK : Color.WHITE);
-                holder.title.setTextColor(isAmoledColorMode ? Color.GRAY : Color.BLACK);
-            }
-
-            // Favourite (Star) Image
-            applyFavouriteImage(holder.favouriteImage, isFollowedTagFaved(tag));
-
-            // Click on fav button
-            holder.favouriteImage.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View v) {
-                    if (isFollowedTagFaved(tag)) {
-                        followedTagsFavsList.remove(followedTagsFavsList.indexOf(tag));
-                    } else {
-                        followedTagsFavsList.add(tag);
-                    }
-                    appSettings.setFollowedTagsFavs(followedTagsFavsList);
-                    applyFavouriteImage(holder.favouriteImage, isFollowedTagFaved(tag));
-                }
-            });
-
-            holder.root.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View v) {
-                    tagClickedListener.onSomethingClicked(null, null, tag);
-                }
-            });
-        }
-
-        private boolean isFollowedTagFaved(String tag) {
-            return followedTagsFavsList.contains(tag);
-        }
-
-        private void applyFavouriteImage(AppCompatImageView imageView, boolean isFaved) {
-            imageView.setImageResource(isFaved ? R.drawable.ic_star_filled_48px : R.drawable.ic_star_border_black_48px);
-            imageView.setColorFilter(isFaved ? appSettings.getAccentColor() : (isAmoledColorMode ? Color.GRAY : 0), PorterDuff.Mode.SRC_ATOP);
-        }
-    }
-}
diff --git a/app/src/main/java/com/dfa/hubzilla_android/data/DiasporaUserProfile.java b/app/src/main/java/com/dfa/hubzilla_android/data/DiasporaUserProfile.java
index ff4f645..bbf67bb 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/data/DiasporaUserProfile.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/data/DiasporaUserProfile.java
@@ -50,7 +50,7 @@ public class DiasporaUserProfile {
     private String guid;
     private String name;
     private DiasporaAspect[] aspects;
-    private String[] followedTags;
+    //private String[] followedTags;
     private int notificationCount;
     private int unreadMessagesCount;
     private long lastVisitedPositionInStream = -1;
@@ -68,9 +68,9 @@ public class DiasporaUserProfile {
         guid = appSettings.getProfileId();
         name = appSettings.getName();
         aspects = appSettings.getAspects();
-        followedTags = appSettings.getFollowedTags();
-        notificationCount = appSettings.getNotificationCount();
-        unreadMessagesCount = appSettings.getUnreadMessageCount();
+      //  followedTags = appSettings.getFollowedTags();
+      //  notificationCount = appSettings.getNotificationCount();
+      //  unreadMessagesCount = appSettings.getUnreadMessageCount();
         lastVisitedPositionInStream = appSettings.getLastVisitedPositionInStream();
     }
 
@@ -113,14 +113,14 @@ public class DiasporaUserProfile {
             }
 
             // Unread message count
-            if (json.has("notifications_count") && loadNotificationCount(json.getInt("notifications_count"))) {
-                appSettings.setNotificationCount(notificationCount);
-            }
+        //    if (json.has("notifications_count") && loadNotificationCount(json.getInt("notifications_count"))) {
+          //      appSettings.setNotificationCount(notificationCount);
+            //}
 
             // Unread message count
-            if (json.has("unread_messages_count") && loadUnreadMessagesCount(json.getInt("unread_messages_count"))) {
-                appSettings.setUnreadMessageCount(unreadMessagesCount);
-            }
+        //    if (json.has("unread_messages_count") && loadUnreadMessagesCount(json.getInt("unread_messages_count"))) {
+          //      appSettings.setUnreadMessageCount(unreadMessagesCount);
+            //}
 
             // Aspect
             if (json.has("aspects") && loadAspects(json.getJSONArray("aspects"))) {
@@ -128,10 +128,10 @@ public class DiasporaUserProfile {
             }
 
             // Followed tags
-            if (json.has("android_app.followed_tags")
-                    && loadFollowedTags(json.getJSONArray("android_app.followed_tags"))) {
-                appSettings.setFollowedTags(followedTags);
-            }
+        //    if (json.has("android_app.followed_tags")
+        //            && loadFollowedTags(json.getJSONArray("android_app.followed_tags"))) {
+        //        appSettings.setFollowedTags(followedTags);
+        //    }
 
             isWebUserProfileLoaded = true;
         } catch (JSONException e) {
@@ -180,9 +180,9 @@ public class DiasporaUserProfile {
         return aspects;
     }
 
-    public String[] getFollowedTags() {
-        return followedTags;
-    }
+  //  public String[] getFollowedTags() {
+  //      return followedTags;
+  //  }
 
     public long getLastVisitedPositionInStream() {
         return lastVisitedPositionInStream;
@@ -272,13 +272,13 @@ public class DiasporaUserProfile {
         return true;
     }
 
-    private boolean loadFollowedTags(final JSONArray jsonTags) throws JSONException {
-        followedTags = new String[jsonTags.length()];
-        for (int i = 0; i < jsonTags.length(); i++) {
-            followedTags[i] = jsonTags.getString(i);
-        }
-        return true;
-    }
+  //  private boolean loadFollowedTags(final JSONArray jsonTags) throws JSONException {
+  //      followedTags = new String[jsonTags.length()];
+  //      for (int i = 0; i < jsonTags.length(); i++) {
+  //          followedTags[i] = jsonTags.getString(i);
+  //      }
+  //      return true;
+  //  }
 
     private boolean loadUnreadMessagesCount(final int unreadMessagesCount) {
         if (this.unreadMessagesCount != unreadMessagesCount) {
diff --git a/app/src/main/java/com/dfa/hubzilla_android/receiver/UpdateTitleReceiver.java b/app/src/main/java/com/dfa/hubzilla_android/receiver/UpdateTitleReceiver.java
index 617763f..f89d0d7 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/receiver/UpdateTitleReceiver.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/receiver/UpdateTitleReceiver.java
@@ -63,23 +63,24 @@ public class UpdateTitleReceiver extends BroadcastReceiver {
                 setTitle(R.string.conversations);
             } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_NEW_POST)) {
                 setTitle(R.string.new_post);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_STATISTICS)) {
-                setTitle(R.string.statistics);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_CONTACTS)) {
+            }// else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_STATISTICS)) {
+              //  setTitle(R.string.statistics);
+            //}
+             else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_CONTACTS)) {
                 setTitle(R.string.contacts);
             } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_PEOPLE + appSettings.getProfileId())) {
                 setTitle(R.string.nav_profile);
             } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_ACTIVITY)) {
                 setTitle(R.string.nav_activities);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_LIKED)) {
-                setTitle(R.string.nav_liked);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_COMMENTED)) {
-                setTitle(R.string.nav_commented);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_MENTIONS)) {
-                setTitle(R.string.nav_mentions);
-            } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_PUBSTREAM)) {
-                setTitle(R.string.pubstream);
-            } else if (urls.isAspectUrl(lastUrl)) {
+            }/** else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_LIKED)) {
+          *      setTitle(R.string.nav_liked);
+          *  } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_COMMENTED)) {
+          *      setTitle(R.string.nav_commented);
+          *  } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_MENTIONS)) {
+          *      setTitle(R.string.nav_mentions);
+          *  } else if (subUrl.startsWith(DiasporaUrlHelper.SUBURL_PUBSTREAM)) {
+          *      setTitle(R.string.pubstream);
+        }**/ else if (urls.isAspectUrl(lastUrl)) {
                 setTitle(urls.getAspectNameFromUrl(lastUrl, app));
             }
         } else {
diff --git a/app/src/main/java/com/dfa/hubzilla_android/util/AppSettings.java b/app/src/main/java/com/dfa/hubzilla_android/util/AppSettings.java
index d8fbf38..38357e6 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/util/AppSettings.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/util/AppSettings.java
@@ -163,22 +163,22 @@ public class AppSettings extends SharedPreferencesPropertyBackend {
         return aspects;
     }
 
-    public String[] getFollowedTags() {
-        return getStringArray(R.string.pref_key__podprofile_followed_tags, _prefPod);
-    }
-
-    public void setFollowedTags(String[] values) {
-        setStringArray(R.string.pref_key__podprofile_followed_tags, values, _prefPod);
-    }
-
-    public String[] getFollowedTagsFavs() {
-        return getStringArray(R.string.pref_key__podprofile_followed_tags_favs, _prefPod);
-    }
-
-    public void setFollowedTagsFavs(List<String> values) {
-        setStringList(R.string.pref_key__podprofile_followed_tags_favs, values, _prefPod);
-    }
-
+/**    public String[] getFollowedTags() {
+*        return getStringArray(R.string.pref_key__podprofile_followed_tags, _prefPod);
+*    }
+*
+*    public void setFollowedTags(String[] values) {
+*        setStringArray(R.string.pref_key__podprofile_followed_tags, values, _prefPod);
+*    }
+*
+*    public String[] getFollowedTagsFavs() {
+*        return getStringArray(R.string.pref_key__podprofile_followed_tags_favs, _prefPod);
+*    }
+*
+*    public void setFollowedTagsFavs(List<String> values) {
+*        setStringList(R.string.pref_key__podprofile_followed_tags_favs, values, _prefPod);
+*    }
+**/
     public String[] getAspectFavs() {
         return getStringArray(R.string.pref_key__podprofile_aspects_favs, _prefPod);
     }
@@ -186,23 +186,23 @@ public class AppSettings extends SharedPreferencesPropertyBackend {
     public void setAspectFavs(List<String> values) {
         setStringList(R.string.pref_key__podprofile_aspects_favs, values, _prefPod);
     }
-
-    public int getUnreadMessageCount() {
-        return getInt(R.string.pref_key__podprofile_unread_message_count, 0, _prefPod);
-    }
-
-    public void setUnreadMessageCount(int unreadMessageCount) {
-        setInt(R.string.pref_key__podprofile_unread_message_count, unreadMessageCount, _prefPod);
-    }
-
-    public int getNotificationCount() {
-        return getInt(R.string.pref_key__podprofile_notification_count, 0, _prefPod);
-    }
-
-    public void setNotificationCount(int notificationCount) {
-        setInt(R.string.pref_key__podprofile_notification_count, notificationCount, _prefPod);
-    }
-
+/**
+*    public int getUnreadMessageCount() {
+*        return getInt(R.string.pref_key__podprofile_unread_message_count, 0, _prefPod);
+*    }
+*
+*    public void setUnreadMessageCount(int unreadMessageCount) {
+*        setInt(R.string.pref_key__podprofile_unread_message_count, unreadMessageCount, _prefPod);
+*    }
+*
+*    public int getNotificationCount() {
+*        return getInt(R.string.pref_key__podprofile_notification_count, 0, _prefPod);
+*    }
+*
+*    public void setNotificationCount(int notificationCount) {
+*        setInt(R.string.pref_key__podprofile_notification_count, notificationCount, _prefPod);
+*    }
+**/
     public boolean isAppendSharedViaApp() {
         return getBool(R.string.pref_key__append_shared_via_app, true);
     }
@@ -306,19 +306,19 @@ public class AppSettings extends SharedPreferencesPropertyBackend {
     public boolean isVisibleInNavPublic_activities() {
         return getBool(R.string.pref_key__visibility_nav__public_activities, true);
     }
-
-    public boolean isVisibleInNavMentions() {
-        return getBool(R.string.pref_key__visibility_nav__mentions, false);
-    }
-
-    public boolean isVisibleInNavCommented() {
-        return getBool(R.string.pref_key__visibility_nav__commented, false);
-    }
-
-    public boolean isVisibleInNavLiked() {
-        return getBool(R.string.pref_key__visibility_nav__liked, false);
-    }
-
+/**
+*    public boolean isVisibleInNavMentions() {
+*        return getBool(R.string.pref_key__visibility_nav__mentions, false);
+*    }
+*
+*    public boolean isVisibleInNavCommented() {
+*        return getBool(R.string.pref_key__visibility_nav__commented, false);
+*    }
+*
+*    public boolean isVisibleInNavLiked() {
+*        return getBool(R.string.pref_key__visibility_nav__liked, false);
+*    }
+**/
     public boolean isVisibleInNavActivities() {
         return getBool(R.string.pref_key__visibility_nav__activities, true);
     }
@@ -327,9 +327,9 @@ public class AppSettings extends SharedPreferencesPropertyBackend {
         return getBool(R.string.pref_key__visibility_nav__aspects, false);
     }
 
-    public boolean isVisibleInNavFollowed_tags() {
-        return getBool(R.string.pref_key__visibility_nav__followed_tags, false);
-    }
+//    public boolean isVisibleInNavFollowed_tags() {
+//        return getBool(R.string.pref_key__visibility_nav__followed_tags, false);
+//    }
 
     public boolean isVisibleInNavProfile() {
         return getBool(R.string.pref_key__visibility_nav__profile, true);
@@ -338,23 +338,23 @@ public class AppSettings extends SharedPreferencesPropertyBackend {
     public boolean isVisibleInNavContacts() {
         return getBool(R.string.pref_key__visibility_nav__contacts, true);
     }
-
-    public boolean isVisibleInNavStatistics() {
-        return getBool(R.string.pref_key__visibility_nav__statistics, false);
-    }
-
-    public boolean isVisibleInNavReports() {
-        return getBool(R.string.pref_key__visibility_nav__reports, false);
-    }
-
-    public boolean isVisibleInNavDandelionAccount() {
-        return getBool(R.string.pref_key__visibility_nav__dandelion_account, false);
-    }
-
-    public boolean isVisibleInNavToggleMobileDesktop() {
-        return getBool(R.string.pref_key__visibility_nav__toggle_mobile_desktop, false);
-    }
-
+/**
+*    public boolean isVisibleInNavStatistics() {
+*        return getBool(R.string.pref_key__visibility_nav__statistics, false);
+*    }
+*
+*    public boolean isVisibleInNavReports() {
+*        return getBool(R.string.pref_key__visibility_nav__reports, false);
+*    }
+*
+*    public boolean isVisibleInNavDandelionAccount() {
+*        return getBool(R.string.pref_key__visibility_nav__dandelion_account, false);
+*    }
+*
+*    public boolean isVisibleInNavToggleMobileDesktop() {
+*        return getBool(R.string.pref_key__visibility_nav__toggle_mobile_desktop, false);
+*    }
+**/
     public boolean isVisibleInNavEvents() {
         return getBool(R.string.pref_key__visibility_nav__events, true);
     }
diff --git a/app/src/main/java/com/dfa/hubzilla_android/util/DiasporaUrlHelper.java b/app/src/main/java/com/dfa/hubzilla_android/util/DiasporaUrlHelper.java
index 4a30f9a..4b52898 100644
--- a/app/src/main/java/com/dfa/hubzilla_android/util/DiasporaUrlHelper.java
+++ b/app/src/main/java/com/dfa/hubzilla_android/util/DiasporaUrlHelper.java
@@ -41,26 +41,26 @@ public class DiasporaUrlHelper {
     public static final String SUBURL_NEW_POST = "/rpost?f=&body=";  //edited for hub
     public static final String SUBURL_PEOPLE = "/connections"; //edited for hub
     public static final String SUBURL_ACTIVITY = "/network"; //edited for hub
-  public static final String SUBURL_LIKED = "/liked";
-  public static final String SUBURL_COMMENTED = "/commented";
-  public static final String SUBURL_MENTIONS = "/mentions";
+//  public static final String SUBURL_LIKED = "/liked";
+//  public static final String SUBURL_COMMENTED = "/commented";
+//  public static final String SUBURL_MENTIONS = "/mentions";
     public static final String SUBURL_PUBSTREAM = "/pubstream"; //edited for hub
     public static final String SUBURL_ASPECT = "/aspects?a_ids[]=";
   public static final String SUBURL_TOGGLE_MOBILE = "/mobile/toggle";
     public static final String SUBURL_SEARCH_TAGS = "/search?search=%23"; //edited for hub
     public static final String SUBURL_SEARCH_PEOPLE = "/directory?f=1&navsearch=1&search="; //edited for hub must be better
-  public static final String SUBURL_FOLOWED_TAGS = "/followed_tags";
+//  public static final String SUBURL_FOLOWED_TAGS = "/followed_tags";
   public static final String SUBURL_ASPECTS = "/connections"; //edited for hub must be better
-  public static final String SUBURL_STATISTICS = "/statistics";
+  //public static final String SUBURL_STATISTICS = "/statistics";
     public static final String SUBURL_PERSONAL_SETTINGS = "/settings"; //edited for hub
-  public static final String SUBURL_MANAGE_TAGS = "/tag_followings/manage";
+//  public static final String SUBURL_MANAGE_TAGS = "/tag_followings/manage";
     public static final String SUBURL_SIGN_IN = "#"; //edited for hub
     public static final String SUBURL_CONTACTS = "/connections"; //edited for hub
-  public static final String SUBURL_REPORTS = "/reports";
-  public static final String SUBURL_NOTIFICATIONS_ALSO_COMMENTED = "/notifications?type=also_commented";
-  public static final String SUBURL_NOTIFICATIONS_COMMENT_ON_POST = "/notifications?type=comment_on_post";
-  public static final String SUBURL_NOTIFICATIONS_LIKED = "/notifications?type=liked";
-  public static final String SUBURL_NOTIFICATIONS_MENTIONED = "/notifications?type=mentioned";
+//  public static final String SUBURL_REPORTS = "/reports";
+//  public static final String SUBURL_NOTIFICATIONS_ALSO_COMMENTED = "/notifications?type=also_commented";
+  //public static final String SUBURL_NOTIFICATIONS_COMMENT_ON_POST = "/notifications?type=comment_on_post";
+  //public static final String SUBURL_NOTIFICATIONS_LIKED = "/notifications?type=liked";
+//  public static final String SUBURL_NOTIFICATIONS_MENTIONED = "/notifications?type=mentioned";
   public static final String SUBURL_NOTIFICATIONS_RESHARED = "/notifications?type=reshared";
   public static final String SUBURL_NOTIFICATIONS_STARTED_SHARING = "/notifications?type=started_sharing";
     public static final String SUBURL_HOME = "/channel"; //added for hub
@@ -190,30 +190,30 @@ public class DiasporaUrlHelper {
      * Return a url that points to the feed of posts that were liked by the currently registered diaspora account
      *
      * @return https://(pod-domain.tld)/liked
-     */
-    public String getLikedPostsUrl() {
-        return getPodUrl() + SUBURL_LIKED;
-    }
-
-    /**
+     *
+  *  public String getLikedPostsUrl() {
+  *      return getPodUrl() + SUBURL_LIKED;
+  *  }
+*
+*    /**
      * Return a url that points to the stream of posts that were commented by the currently registered diaspora account
      *
      * @return https://(pod-domain.tld)/commented
-     */
-    public String getCommentedUrl() {
-        return getPodUrl() + SUBURL_COMMENTED;
-    }
-
-    /**
+     *
+  *  public String getCommentedUrl() {
+  *      return getPodUrl() + SUBURL_COMMENTED;
+  *  }
+*
+*    /**
      * Return a url that points to the stream of posts in which the currently registered diaspora account has been mentioned in
      *
      * @return https://(pod-domain.tld)/mentions
-     */
-    public String getMentionsUrl() {
-        return getPodUrl() + SUBURL_MENTIONS;
-    }
-
-    /**
+     *
+  *  public String getMentionsUrl() {
+  *      return getPodUrl() + SUBURL_MENTIONS;
+  *  }
+*
+*    /**
      * Return a url that points to the stream of public posts
      *
      * @return https://(pod-domain.tld)/public
@@ -226,12 +226,12 @@ public class DiasporaUrlHelper {
      * Return a url that toggles between mobile and desktop view when opened
      *
      * @return https://(pod-domain.tld)/mobile/toggle
-     */
-    public String getToggleMobileUrl() {
-        return getPodUrl() + SUBURL_TOGGLE_MOBILE;
-    }
-
-    /**
+     *
+    *public String getToggleMobileUrl() {
+    *    return getPodUrl() + SUBURL_TOGGLE_MOBILE;
+    *}
+*
+    *
      * Return a url that queries posts for the given hashtag query
      *
      * @param query hashtag to be searched
@@ -255,22 +255,22 @@ public class DiasporaUrlHelper {
      * Return a url that points to the statistics page of the pod.
      *
      * @return https://(pod-domain.tld)/statistics
-     */
-    public String getStatisticsUrl() {
-        return getPodUrl() + SUBURL_STATISTICS;
-    }
-
-    /**
+     *
+  *  public String getStatisticsUrl() {
+  *      return getPodUrl() + SUBURL_STATISTICS;
+  *  }
+*
+*    /**
      * Return an Url that points to the reports page of a the configured pod.
      * Note: This url is only useful/visible for podmins and moderators.
      *
      * @return https://(pod-domain.tld)/reports
-     */
-    public String getReportsUrl() {
-        return getPodUrl() + SUBURL_REPORTS;
-    }
-
-    /**
+     *
+*    public String getReportsUrl() {
+*        return getPodUrl() + SUBURL_REPORTS;
+*    }
+*
+*    /**
      * Return a url that points to the sign in page of the pod.
      *
      * @return https://(pod-domain.tld)/users/sign_in
@@ -292,12 +292,12 @@ public class DiasporaUrlHelper {
      * Return a url that points to the manage tags page of the pod.
      *
      * @return https://(pod-domain.tld)/tag_followings/manage
-     */
-    public String getManageTagsUrl() {
-        return getPodUrl() + SUBURL_MANAGE_TAGS;
-    }
-
-    /**
+     *
+  *  public String getManageTagsUrl() {
+  *      return getPodUrl() + SUBURL_MANAGE_TAGS;
+  *  }
+*
+*    /**
      * Return a url that points to the Directory overview of the registered Hubzilla account
      *
      * @return https://(hub-domain.tld)/directory
@@ -325,32 +325,32 @@ public class DiasporaUrlHelper {
     public String getContactsUrl() {
         return getPodUrl() + SUBURL_CONTACTS;
     }
-
-    public String getSuburlNotificationsAlsoCommentedUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_ALSO_COMMENTED;
-    }
-
-    public String getSuburlNotificationsCommentOnPostUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_COMMENT_ON_POST;
-    }
-
-    public String getSuburlNotificationsLikedUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_LIKED;
-    }
-
-    public String getSuburlNotificationsMentionedUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_MENTIONED;
-    }
-
-    public String getSuburlNotificationsResharedUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_RESHARED;
-    }
-
-    public String getSuburlNotificationsStartedSharingUrl() {
-        return getPodUrl() + SUBURL_NOTIFICATIONS_STARTED_SHARING;
-    }
-
-    /**
+/**
+  *  public String getSuburlNotificationsAlsoCommentedUrl() {
+  *      return getPodUrl() + SUBURL_NOTIFICATIONS_ALSO_COMMENTED;
+  *  }
+*
+*    public String getSuburlNotificationsCommentOnPostUrl() {
+*        return getPodUrl() + SUBURL_NOTIFICATIONS_COMMENT_ON_POST;
+*    }
+*
+*    public String getSuburlNotificationsLikedUrl() {
+*        return getPodUrl() + SUBURL_NOTIFICATIONS_LIKED;
+*    }
+*
+*    public String getSuburlNotificationsMentionedUrl() {
+*        return getPodUrl() + SUBURL_NOTIFICATIONS_MENTIONED;
+*    }
+*
+*    public String getSuburlNotificationsResharedUrl() {
+*        return getPodUrl() + SUBURL_NOTIFICATIONS_RESHARED;
+*    }
+*
+*    public String getSuburlNotificationsStartedSharingUrl() {
+*        return getPodUrl() + SUBURL_NOTIFICATIONS_STARTED_SHARING;
+*    }
+*
+*   /**
      * Returns the url of the blank WebView
      *
      * @return about:blank
