diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
index 3c6a2b50..917ec943 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
@@ -319,7 +319,6 @@ public class LimboSDLActivity extends SDLActivity
             mouseMode = MouseMode.Trackpad;
             invalidateOptionsMenu();
             ((LimboSDLSurface) mSurface).refreshSurfaceView();
-            ((LimboSDLSurface) mSurface).notifyDisplayUpdated();
         } catch (Exception ex) {
             if (Config.debug)
                 ex.printStackTrace();
@@ -366,7 +365,6 @@ public class LimboSDLActivity extends SDLActivity
             mouseMode = MouseMode.TOUCHSCREEN;
             invalidateOptionsMenu();
             ((LimboSDLSurface) mSurface).refreshSurfaceView();
-            ((LimboSDLSurface) mSurface).notifyDisplayUpdated();
         } catch (Exception ex) {
             if (Config.debug)
                 ex.printStackTrace();
@@ -502,6 +500,7 @@ public class LimboSDLActivity extends SDLActivity
 
     private void setupListeners() {
         MachineController.getInstance().addOnStatusChangeListener(this);
+        MachineController.getInstance().addOnEventListener(this);
         setViewListener((ViewListener) Presenter.getInstance());
     }
 
@@ -690,9 +689,8 @@ public class LimboSDLActivity extends SDLActivity
                     Presenter.getInstance().onAction(MachineAction.CONTINUE_VM, null);
                 }
                 ((LimboSDLSurface) mSurface).refreshSurfaceView();
-                ((LimboSDLSurface) mSurface).notifyDisplayUpdated();
             }
-        }, 4000);
+        }, 5000);
     }
 
     public void onBackPressed() {
@@ -823,7 +821,6 @@ public class LimboSDLActivity extends SDLActivity
         }
         Log.v(TAG, "VM resolution changed to " + width + "x" + height);
         ((LimboSDLSurface) mSurface).refreshSurfaceView();
-        ((LimboSDLSurface) mSurface).notifyDisplayUpdated();
     }
 
     protected void setupVolume() {
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
index 0e3fbee9..fb5cee6e 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
@@ -66,7 +66,6 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
         Log.v(TAG, "surfaceChanged");
         super.surfaceChanged(holder, format, width, height);
         refreshSurfaceView();
-        notifyDisplayUpdated();
     }
 
     @Override
@@ -75,13 +74,20 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
         super.surfaceCreated(holder);
         setWillNotDraw(false);
         refreshSurfaceView();
-        notifyDisplayUpdated();
     }
 
     public void refreshSurfaceView() {
-        // We use QEMU keyboard shortcut for fullscreen
-        // to trigger the redraw
-        sdlActivity.sendCtrlAltKey(KeyEvent.KEYCODE_F);
+        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                // We use QEMU keyboard shortcut for fullscreen
+                // to trigger the redraw
+                sdlActivity.sendCtrlAltKey(KeyEvent.KEYCODE_F);
+                // notify the controller that our display has changed
+                Presenter.getInstance().onAction(MachineAction.DISPLAY_CHANGED,
+                        new Object[]{getWidth(), getHeight(), getResources().getConfiguration().orientation});
+            }
+        }, 1000);
     }
 
     @Override
@@ -246,17 +252,6 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
         return false;
     }
 
-    public void notifyDisplayUpdated() {
-        new Handler().postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                Presenter.getInstance().onAction(MachineAction.DISPLAY_CHANGED,
-                        new Object[]{getWidth(), getHeight(), getResources().getConfiguration().orientation});
-            }
-        }, 1000);
-
-    }
-
     class MouseState {
         public float x = 0;
         public float y = 0;
