diff --git a/src/net/kuratkoo/locusaddon/gsakdatabase/LoadActivity.java b/src/net/kuratkoo/locusaddon/gsakdatabase/LoadActivity.java
index 7542385..6392ace 100644
--- a/src/net/kuratkoo/locusaddon/gsakdatabase/LoadActivity.java
+++ b/src/net/kuratkoo/locusaddon/gsakdatabase/LoadActivity.java
@@ -14,7 +14,6 @@ import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Environment;
 import android.preference.PreferenceManager;
-import android.util.Log;
 import android.widget.Toast;
 import java.io.File;
 import java.text.SimpleDateFormat;
@@ -35,19 +34,27 @@ import menion.android.locus.addon.publiclib.utils.RequiredVersionMissingExceptio
  * LoadActivity
  * @authovr Radim -kuratkoo- Vaculik <kuratkoo@gmail.com>
  */
-public class LoadActivity extends Activity {
+public class LoadActivity extends Activity implements DialogInterface.OnDismissListener {
 
     private static final String TAG = "LocusAddonGsakDatabase|LoadActivity";
     private ProgressDialog progress;
     private ArrayList<PointsData> data;
     private File externalDir;
     private Point point;
+    private LoadAsyncTask loadAsyncTask;
+
+    public void onDismiss(DialogInterface arg0) {
+        loadAsyncTask.cancel(true);
+    }
 
     private class LoadAsyncTask extends AsyncTask<Point, Integer, Exception> {
 
+        private SQLiteDatabase db;
+
         @Override
         protected void onPreExecute() {
             progress.show();
+            db = SQLiteDatabase.openDatabase(PreferenceManager.getDefaultSharedPreferences(LoadActivity.this).getString("db", ""), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
         }
 
         @Override
@@ -55,51 +62,17 @@ public class LoadActivity extends Activity {
             progress.setMessage(getString(R.string.loading) + " " + values[0] + " " + getString(R.string.geocaches));
         }
 
-        @Override
-        protected void onPostExecute(Exception ex) {
-            progress.dismiss();
-
-            if (ex != null) {
-                Toast.makeText(LoadActivity.this, getString(R.string.unable_to_load_geocaches) + " (" + ex.getLocalizedMessage() + ")", Toast.LENGTH_LONG).show();
-                LoadActivity.this.finish();
-                return;
-            }
-
-            String filePath = externalDir.getAbsolutePath();
-            if (!filePath.endsWith("/")) {
-                filePath += "/";
-            }
-            filePath += "/Android/data/net.kuratkoo.locusaddon.gsakdatabase/data.locus";
-
-            try {
-                DisplayData.sendDataFile(LoadActivity.this,
-                        data,
-                        filePath,
-                        PreferenceManager.getDefaultSharedPreferences(LoadActivity.this).getBoolean("import", true));
-            } catch (OutOfMemoryError e) {
-                AlertDialog.Builder ad = new AlertDialog.Builder(LoadActivity.this);
-                ad.setIcon(android.R.drawable.ic_dialog_alert);
-                ad.setTitle(R.string.error);
-                ad.setMessage(R.string.out_of_memory);
-                ad.setPositiveButton(android.R.string.ok, new OnClickListener() {
-
-                    public void onClick(DialogInterface di, int arg1) {
-                        di.dismiss();
-                    }
-                });
-                ad.show();
-            } catch (RequiredVersionMissingException rvme) {
-            }
-        }
-
         protected Exception doInBackground(Point... pointSet) {
             try {
+                if (this.isCancelled()) {
+                    return null;
+                }
+
                 Point pp = pointSet[0];
                 Location curr = pp.getLocation();
                 PointsData pd = new PointsData("GSAK data");
                 Float radius = Float.valueOf(PreferenceManager.getDefaultSharedPreferences(LoadActivity.this).getString("radius", "1")) / 70;
 
-                SQLiteDatabase database = SQLiteDatabase.openDatabase(PreferenceManager.getDefaultSharedPreferences(LoadActivity.this).getString("db", ""), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
                 String[] cond = new String[]{
                     String.valueOf(curr.getLatitude() - radius),
                     String.valueOf(curr.getLatitude() + radius),
@@ -134,24 +107,27 @@ public class LoadActivity extends Activity {
                 String sqlType = "";
                 for (String geocacheType : geocacheTypes) {
                     if (first) {
-                        sqlType += "CacheType = \"" + geocacheType + "\"";
+                        sqlType += geocacheType;
                         first = false;
                     } else {
-                        sqlType += " OR CacheType = \"" + geocacheType + "\"";
+                        sqlType += " OR " + geocacheType;
                     }
                 }
                 if (!sqlType.equals("")) {
                     sql += " AND (" + sqlType + ")";
                 }
-                
+
                 sql += " AND CAST(Latitude AS REAL) > ? AND CAST(Latitude AS REAL) < ? AND CAST(Longitude AS REAL) > ? AND CAST(Longitude AS REAL) < ?";
 
-                c = database.rawQuery(sql, cond);
-                Log.d(TAG, "Total: " + c.getCount());
+                c = db.rawQuery(sql, cond);
 
                 /** Load GC codes **/
                 List<Pair> gcCodes = new ArrayList<Pair>();
                 while (c.moveToNext()) {
+                    if (this.isCancelled()) {
+                        c.close();
+                        return null;
+                    }
                     Location loc = new Location(TAG);
                     loc.setLatitude(c.getDouble(c.getColumnIndex("Latitude")));
                     loc.setLongitude(c.getDouble(c.getColumnIndex("Longitude")));
@@ -174,6 +150,9 @@ public class LoadActivity extends Activity {
                 }
 
                 for (Pair pair : gcCodes) {
+                    if (this.isCancelled()) {
+                        return null;
+                    }
                     if (limit > 0) {
                         if (count >= limit) {
                             break;
@@ -181,7 +160,7 @@ public class LoadActivity extends Activity {
                     }
                     String gcCode = pair.gcCode;
                     publishProgress(++count);
-                    c = database.rawQuery("SELECT * FROM CachesAll WHERE Code = ?", new String[]{gcCode});
+                    c = db.rawQuery("SELECT * FROM CachesAll WHERE Code = ?", new String[]{gcCode});
                     c.moveToNext();
                     Location loc = new Location(TAG);
                     loc.setLatitude(c.getDouble(c.getColumnIndex("Latitude")));
@@ -224,8 +203,12 @@ public class LoadActivity extends Activity {
                     /** Add waypoints to Geocache **/
                     ArrayList<PointGeocachingDataWaypoint> pgdws = new ArrayList<PointGeocachingDataWaypoint>();
 
-                    Cursor wp = database.rawQuery("SELECT * FROM WayAll WHERE cParent = ?", new String[]{gcData.cacheID});
+                    Cursor wp = db.rawQuery("SELECT * FROM WayAll WHERE cParent = ?", new String[]{gcData.cacheID});
                     while (wp.moveToNext()) {
+                        if (this.isCancelled()) {
+                            wp.close();
+                            return null;
+                        }
                         PointGeocachingDataWaypoint pgdw = new PointGeocachingDataWaypoint();
                         pgdw.lat = wp.getDouble(wp.getColumnIndex("cLat"));
                         pgdw.lon = wp.getDouble(wp.getColumnIndex("cLon"));
@@ -243,16 +226,64 @@ public class LoadActivity extends Activity {
                     pd.addPoint(p);
                 }
 
-                database.close();
-
                 data = new ArrayList<PointsData>();
                 data.add(pd);
 
+                if (this.isCancelled()) {
+                    return null;
+                }
                 return null;
             } catch (Exception e) {
                 return e;
             }
         }
+
+        @Override
+        protected void onPostExecute(Exception ex) {
+            progress.dismiss();
+
+            if (ex != null) {
+                Toast.makeText(LoadActivity.this, getString(R.string.unable_to_load_geocaches) + " (" + ex.getLocalizedMessage() + ")", Toast.LENGTH_LONG).show();
+                LoadActivity.this.finish();
+                return;
+            }
+
+            String filePath = externalDir.getAbsolutePath();
+            if (!filePath.endsWith("/")) {
+                filePath += "/";
+            }
+            filePath += "/Android/data/net.kuratkoo.locusaddon.gsakdatabase/data.locus";
+
+            try {
+                DisplayData.sendDataFile(LoadActivity.this,
+                        data,
+                        filePath,
+                        PreferenceManager.getDefaultSharedPreferences(LoadActivity.this).getBoolean("import", true));
+            } catch (OutOfMemoryError e) {
+                AlertDialog.Builder ad = new AlertDialog.Builder(LoadActivity.this);
+                ad.setIcon(android.R.drawable.ic_dialog_alert);
+                ad.setTitle(R.string.error);
+                ad.setMessage(R.string.out_of_memory);
+                ad.setPositiveButton(android.R.string.ok, new OnClickListener() {
+
+                    public void onClick(DialogInterface di, int arg1) {
+                        di.dismiss();
+                    }
+                });
+                ad.show();
+            } catch (RequiredVersionMissingException rvme) {
+                Toast.makeText(LoadActivity.this, "Error: " + rvme.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            }
+        }
+
+        @Override
+        protected void onCancelled() {
+            super.onCancelled();
+            db.close();
+            progress.dismiss();
+            Toast.makeText(LoadActivity.this, R.string.canceled, Toast.LENGTH_LONG).show();
+            LoadActivity.this.finish();
+        }
     }
 
     @Override
@@ -263,6 +294,7 @@ public class LoadActivity extends Activity {
         progress.setMessage(getString(R.string.loading_dots));
         progress.setIcon(android.R.drawable.ic_dialog_info);
         progress.setTitle(getString(R.string.loading));
+        progress.setOnDismissListener(this);
 
         externalDir = Environment.getExternalStorageDirectory();
         if (externalDir == null || !(externalDir.exists())) {
@@ -292,7 +324,8 @@ public class LoadActivity extends Activity {
                 }
             });
         }
-        new LoadAsyncTask().execute(point);
+        loadAsyncTask = new LoadAsyncTask();
+        loadAsyncTask.execute(point);
     }
 
     private class Pair {
diff --git a/src/net/kuratkoo/locusaddon/gsakdatabase/MainActivity.java b/src/net/kuratkoo/locusaddon/gsakdatabase/MainActivity.java
index ae31362..2c58294 100644
--- a/src/net/kuratkoo/locusaddon/gsakdatabase/MainActivity.java
+++ b/src/net/kuratkoo/locusaddon/gsakdatabase/MainActivity.java
@@ -2,6 +2,7 @@ package net.kuratkoo.locusaddon.gsakdatabase;
 
 import android.app.AlertDialog;
 import android.app.AlertDialog.Builder;
+import android.content.ActivityNotFoundException;
 import android.content.DialogInterface;
 import android.content.DialogInterface.OnClickListener;
 import android.content.Intent;
@@ -21,8 +22,6 @@ import android.view.View;
 import android.widget.Toast;
 import menion.android.locus.addon.publiclib.LocusUtils;
 
-
-
 /**
  * MainActivity
  * @author Radim -kuratkoo- Vaculik <kuratkoo@gmail.com>
@@ -55,7 +54,11 @@ public class MainActivity extends PreferenceActivity implements OnSharedPreferen
         dbPick.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
 
             public boolean onPreferenceClick(Preference pref) {
-                LocusUtils.intentPickFile(MainActivity.this, 0, getText(R.string.pref_db_pick_title).toString(), new String[]{".db3"});
+                try {
+                    LocusUtils.intentPickFile(MainActivity.this, 0, getText(R.string.pref_db_pick_title).toString(), new String[]{".db3"});
+                } catch (ActivityNotFoundException anfe) {
+                    Toast.makeText(MainActivity.this, "Error: " + anfe.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+                }
                 return true;
             }
         });
diff --git a/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/LocationReceiver.java b/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/LocationReceiver.java
index d626e70..185f5ff 100644
--- a/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/LocationReceiver.java
+++ b/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/LocationReceiver.java
@@ -3,25 +3,6 @@ package net.kuratkoo.locusaddon.gsakdatabase.receiver;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.location.Location;
-import android.os.AsyncTask;
-import android.os.Environment;
-import android.preference.PreferenceManager;
-import android.util.Log;
-import android.widget.Toast;
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import menion.android.locus.addon.publiclib.DisplayData;
-import menion.android.locus.addon.publiclib.PeriodicUpdate;
-import menion.android.locus.addon.publiclib.PeriodicUpdate.UpdateContainer;
-import menion.android.locus.addon.publiclib.geoData.Point;
-import menion.android.locus.addon.publiclib.geoData.PointGeocachingData;
-import menion.android.locus.addon.publiclib.geoData.PointsData;
-import menion.android.locus.addon.publiclib.utils.RequiredVersionMissingException;
-import net.kuratkoo.locusaddon.gsakdatabase.util.Gsak;
 
 /**
  * LocationReceiver
@@ -30,7 +11,6 @@ import net.kuratkoo.locusaddon.gsakdatabase.util.Gsak;
 public class LocationReceiver extends BroadcastReceiver {
 
     private static final String TAG = "LocusAddonGsakDatabase|LocationReceiver";
-    private Context context;
 
     @Override
     public void onReceive(final Context context, Intent intent) {
@@ -38,141 +18,9 @@ public class LocationReceiver extends BroadcastReceiver {
             return;
         }
 
-        this.context = context;
-
-        PeriodicUpdate pu = PeriodicUpdate.getInstance();
-        pu.setLocNotificationLimit(50.0);
-        pu.onReceive(context, intent, new PeriodicUpdate.OnUpdate() {
-
-            public void onUpdate(UpdateContainer update) {
-                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("livemap", false)
-                    && !PreferenceManager.getDefaultSharedPreferences(context).getString("db", "").equals("")) {
-                    if ((update.newMapCenter || update.newZoomLevel) && update.mapVisible) {
-                        Log.d(TAG, "Live map update");
-                        new MapLoadAsyncTask().execute(update);
-                    }
-                }
-            }
-
-            public void onIncorrectData() {
-            }
-        });
-    }
-
-    private class MapLoadAsyncTask extends AsyncTask<UpdateContainer, Integer, Exception> {
-
-        private PointsData pd;
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-        }
-
-        @Override
-        protected Exception doInBackground(UpdateContainer... updateSet) {
-            try {
-                SQLiteDatabase db = SQLiteDatabase.openDatabase(PreferenceManager.getDefaultSharedPreferences(context).getString("db", ""), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
-                UpdateContainer update = updateSet[0];
-                pd = new PointsData("Livemap data");
-
-                String[] cond = new String[]{
-                    String.valueOf(update.mapBottomRight.getLatitude()),
-                    String.valueOf(update.mapTopLeft.getLatitude()),
-                    String.valueOf(update.mapTopLeft.getLongitude()),
-                    String.valueOf(update.mapBottomRight.getLongitude())
-                };
-
-                String sql = "SELECT Code, Name, Latitude, Longitude, CacheType, HasCorrected, PlacedBy, Status, Found FROM Caches WHERE (status = \"A\"";
-                // Disable geocaches
-                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("disable", false)) {
-                    sql = sql + " OR status = \"T\"";
-                }
-
-                // Archived geocaches
-                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("archive", false)) {
-                    sql = sql + " OR status = \"X\"";
-                }
-
-                sql = sql + ") ";
-
-                if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean("found", false)) {
-                    sql = sql + " AND Found = 0";
-                }
-
-                if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean("own", false)) {
-                    sql = sql + " AND PlacedBy != \"" + PreferenceManager.getDefaultSharedPreferences(context).getString("nick", "") + "\"";
-                }
-
-                List<String> geocacheTypes = Gsak.geocacheTypesFromFilter(PreferenceManager.getDefaultSharedPreferences(context));
-                boolean first = true;
-                String sqlType = "";
-                for (String geocacheType : geocacheTypes) {
-                    if (first) {
-                        sqlType += "CacheType = \"" + geocacheType + "\"";
-                        first = false;
-                    } else {
-                        sqlType += " OR CacheType = \"" + geocacheType + "\"";
-                    }
-                }
-                if (!sqlType.equals("")) {
-                    sql += " AND (" + sqlType + ")";
-                }
-
-                sql += " AND CAST(Latitude AS REAL) > ? AND CAST(Latitude AS REAL) < ? AND CAST(Longitude AS REAL) > ? AND CAST(Longitude AS REAL) < ?";
-
-                Cursor c = db.rawQuery(sql, cond);
-
-                while (c.moveToNext()) {
-                    Location loc = new Location(TAG);
-                    loc.setLatitude(c.getDouble(c.getColumnIndex("Latitude")));
-                    loc.setLongitude(c.getDouble(c.getColumnIndex("Longitude")));
-                    Point p = new Point(c.getString(c.getColumnIndex("Name")), loc);
-
-                    PointGeocachingData gcData = new PointGeocachingData();
-                    gcData.cacheID = c.getString(c.getColumnIndex("Code"));
-                    gcData.name = c.getString(c.getColumnIndex("Name"));
-                    gcData.owner = c.getString(c.getColumnIndex("PlacedBy"));
-                    gcData.type = Gsak.convertCacheType(c.getString(c.getColumnIndex("CacheType")));
-                    gcData.available = Gsak.isAvailable(c.getString(c.getColumnIndex("Status")));
-                    gcData.archived = Gsak.isArchived(c.getString(c.getColumnIndex("Status")));
-                    gcData.computed = Gsak.isCorrected(c.getInt(c.getColumnIndex("HasCorrected")));
-                    gcData.found = Gsak.isFound(c.getInt(c.getColumnIndex("Found")));
-
-                    p.setGeocachingData(gcData);
-                    p.setExtraOnDisplay("net.kuratkoo.locusaddon.gsakdatabase", "net.kuratkoo.locusaddon.gsakdatabase.DetailActivity", "cacheId", gcData.cacheID);
-                    pd.addPoint(p);
-                }
-                c.close();
-                db.close();
-
-            } catch (Exception ex) {
-                return ex;
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(Exception exception) {
-            super.onPostExecute(exception);
-
-            if (exception != null) {
-                Log.w(TAG, exception);
-                Toast.makeText(context, "Error: " + exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();
-            }
-
-            try {
-                File externalDir = Environment.getExternalStorageDirectory();
-                String filePath = externalDir.getAbsolutePath();
-                if (!filePath.endsWith("/")) {
-                    filePath += "/";
-                }
-                filePath += "/Android/data/net.kuratkoo.locusaddon.gsakdatabase/livemap.locus";
-                
-                ArrayList<PointsData> data = new ArrayList<PointsData>();
-                data.add(pd);
-                DisplayData.sendDataFileSilent(context, data, filePath, true);
-            } catch (RequiredVersionMissingException ex) {
-            }
-        }
+        PointLoader pl = PointLoader.getInstance();
+        pl.setContext(context);
+        pl.setIntent(intent);
+        pl.run();
     }
 }
diff --git a/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/PointLoader.java b/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/PointLoader.java
new file mode 100644
index 0000000..eefc03a
--- /dev/null
+++ b/src/net/kuratkoo/locusaddon/gsakdatabase/receiver/PointLoader.java
@@ -0,0 +1,218 @@
+package net.kuratkoo.locusaddon.gsakdatabase.receiver;
+
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.location.Location;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.preference.PreferenceManager;
+import android.util.Log;
+import android.widget.Toast;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import menion.android.locus.addon.publiclib.DisplayData;
+import menion.android.locus.addon.publiclib.PeriodicUpdate;
+import menion.android.locus.addon.publiclib.PeriodicUpdate.UpdateContainer;
+import menion.android.locus.addon.publiclib.geoData.Point;
+import menion.android.locus.addon.publiclib.geoData.PointGeocachingData;
+import menion.android.locus.addon.publiclib.geoData.PointsData;
+import menion.android.locus.addon.publiclib.utils.RequiredVersionMissingException;
+import net.kuratkoo.locusaddon.gsakdatabase.util.Gsak;
+
+/**
+ * PointLoader
+ * @author Radim -kuratkoo- Vaculik <kuratkoo@gmail.com>
+ */
+public class PointLoader {
+
+    private static final String TAG = "LocusAddonGsakDatabase|PointLoader";
+    private static PointLoader mInstance;
+    private Context context;
+    private Intent intent;
+    private MapLoadAsyncTask mapLoadAsyncTask;
+
+    public static PointLoader getInstance() {
+        if (mInstance == null) {
+            mInstance = new PointLoader();
+        }
+        return mInstance;
+    }
+
+    private PointLoader() {
+    }
+
+    public void setContext(Context context) {
+        this.context = context;
+    }
+
+    public void setIntent(Intent intent) {
+        this.intent = intent;
+    }
+
+    public void run() {
+        PeriodicUpdate pu = PeriodicUpdate.getInstance();
+        pu.setLocNotificationLimit(50.0);
+        pu.onReceive(context, intent, new PeriodicUpdate.OnUpdate() {
+
+            public void onUpdate(UpdateContainer update) {
+                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("livemap", false)
+                        && !PreferenceManager.getDefaultSharedPreferences(context).getString("db", "").equals("")) {
+                    if ((update.newMapCenter || update.newZoomLevel) && update.mapVisible) {
+                        if (mapLoadAsyncTask instanceof AsyncTask) {
+                        }
+                        if (mapLoadAsyncTask == null || mapLoadAsyncTask.getStatus() == AsyncTask.Status.FINISHED) {
+                            mapLoadAsyncTask = new MapLoadAsyncTask();
+                            mapLoadAsyncTask.execute(update);
+                        } else {
+                            mapLoadAsyncTask.cancel(true);
+                            mapLoadAsyncTask = new MapLoadAsyncTask();
+                            mapLoadAsyncTask.execute(update);
+                        }
+                    }
+                }
+            }
+
+            public void onIncorrectData() {
+            }
+        });
+    }
+
+    private class MapLoadAsyncTask extends AsyncTask<UpdateContainer, Integer, Exception> {
+
+        private PointsData pd;
+        private SQLiteDatabase db;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            db = SQLiteDatabase.openDatabase(PreferenceManager.getDefaultSharedPreferences(context).getString("db", ""), null, SQLiteDatabase.NO_LOCALIZED_COLLATORS);
+        }
+
+        @Override
+        protected Exception doInBackground(UpdateContainer... updateSet) {
+            try {
+                if (this.isCancelled()) {
+                    return null;
+                }
+
+                UpdateContainer update = updateSet[0];
+                pd = new PointsData("GSAK live data");
+
+                String[] cond = new String[]{
+                    String.valueOf(update.mapBottomRight.getLatitude()),
+                    String.valueOf(update.mapTopLeft.getLatitude()),
+                    String.valueOf(update.mapTopLeft.getLongitude()),
+                    String.valueOf(update.mapBottomRight.getLongitude())
+                };
+
+                String sql = "SELECT Code, Name, Latitude, Longitude, CacheType, HasCorrected, PlacedBy, Status, Found FROM Caches WHERE (status = \"A\"";
+                // Disable geocaches
+                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("disable", false)) {
+                    sql = sql + " OR status = \"T\"";
+                }
+
+                // Archived geocaches
+                if (PreferenceManager.getDefaultSharedPreferences(context).getBoolean("archive", false)) {
+                    sql = sql + " OR status = \"X\"";
+                }
+
+                sql = sql + ") ";
+
+                if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean("found", false)) {
+                    sql = sql + " AND Found = 0";
+                }
+
+                if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean("own", false)) {
+                    sql = sql + " AND PlacedBy != \"" + PreferenceManager.getDefaultSharedPreferences(context).getString("nick", "") + "\"";
+                }
+
+                List<String> geocacheTypes = Gsak.geocacheTypesFromFilter(PreferenceManager.getDefaultSharedPreferences(context));
+                boolean first = true;
+                String sqlType = "";
+                for (String geocacheType : geocacheTypes) {
+                    if (first) {
+                        sqlType += geocacheType;
+                        first = false;
+                    } else {
+                        sqlType += " OR " + geocacheType;
+                    }
+                }
+                if (!sqlType.equals("")) {
+                    sql += " AND (" + sqlType + ")";
+                }
+
+                sql += " AND CAST(Latitude AS REAL) > ? AND CAST(Latitude AS REAL) < ? AND CAST(Longitude AS REAL) > ? AND CAST(Longitude AS REAL) < ?";
+
+                Cursor c = db.rawQuery(sql, cond);
+
+                if (this.isCancelled()) {
+                    c.close();
+                    return null;
+                }
+
+                while (c.moveToNext()) {
+                    if (this.isCancelled()) {
+                        c.close();
+                        return null;
+                    }
+                    Location loc = new Location(TAG);
+                    loc.setLatitude(c.getDouble(c.getColumnIndex("Latitude")));
+                    loc.setLongitude(c.getDouble(c.getColumnIndex("Longitude")));
+                    Point p = new Point(c.getString(c.getColumnIndex("Name")), loc);
+
+                    PointGeocachingData gcData = new PointGeocachingData();
+                    gcData.cacheID = c.getString(c.getColumnIndex("Code"));
+                    gcData.name = c.getString(c.getColumnIndex("Name"));
+                    gcData.owner = c.getString(c.getColumnIndex("PlacedBy"));
+                    gcData.type = Gsak.convertCacheType(c.getString(c.getColumnIndex("CacheType")));
+                    gcData.available = Gsak.isAvailable(c.getString(c.getColumnIndex("Status")));
+                    gcData.archived = Gsak.isArchived(c.getString(c.getColumnIndex("Status")));
+                    gcData.computed = Gsak.isCorrected(c.getInt(c.getColumnIndex("HasCorrected")));
+                    gcData.found = Gsak.isFound(c.getInt(c.getColumnIndex("Found")));
+
+                    p.setGeocachingData(gcData);
+                    p.setExtraOnDisplay("net.kuratkoo.locusaddon.gsakdatabase", "net.kuratkoo.locusaddon.gsakdatabase.DetailActivity", "cacheId", gcData.cacheID);
+                    pd.addPoint(p);
+                }
+                c.close();
+            } catch (Exception ex) {
+                return ex;
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Exception exception) {
+            super.onPostExecute(exception);
+            db.close();
+            if (exception != null) {
+                Log.w(TAG, exception);
+                Toast.makeText(context, "Error: " + exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            }
+
+            try {
+                File externalDir = Environment.getExternalStorageDirectory();
+                String filePath = externalDir.getAbsolutePath();
+                if (!filePath.endsWith("/")) {
+                    filePath += "/";
+                }
+                filePath += "/Android/data/net.kuratkoo.locusaddon.gsakdatabase/livemap.locus";
+
+                ArrayList<PointsData> data = new ArrayList<PointsData>();
+                data.add(pd);
+                DisplayData.sendDataFileSilent(context, data, filePath, true);
+            } catch (RequiredVersionMissingException rvme) {
+                Toast.makeText(context, "Error: " + rvme.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            }
+        }
+
+        @Override
+        protected void onCancelled() {
+            super.onCancelled();
+            db.close();
+        }
+    }
+}
diff --git a/src/net/kuratkoo/locusaddon/gsakdatabase/util/Gsak.java b/src/net/kuratkoo/locusaddon/gsakdatabase/util/Gsak.java
index a23203f..da00eb2 100644
--- a/src/net/kuratkoo/locusaddon/gsakdatabase/util/Gsak.java
+++ b/src/net/kuratkoo/locusaddon/gsakdatabase/util/Gsak.java
@@ -200,55 +200,58 @@ public class Gsak {
         List<String> geocacheTypes = new ArrayList<String>();
 
         if (sharedPref.getBoolean("gc_type_tradi", false)) {
-            geocacheTypes.add("T");
+            geocacheTypes.add("CacheType = \"T\"");
         }
         if (sharedPref.getBoolean("gc_type_multi", false)) {
-            geocacheTypes.add("M");
+            geocacheTypes.add("CacheType = \"M\"");
         }
         if (sharedPref.getBoolean("gc_type_mystery", false)) {
-            geocacheTypes.add("U");
+            geocacheTypes.add("CacheType = \"U\"");
         }
         if (sharedPref.getBoolean("gc_type_earth", false)) {
-            geocacheTypes.add("R");
+            geocacheTypes.add("CacheType = \"R\"");
         }
         if (sharedPref.getBoolean("gc_type_letter", false)) {
-            geocacheTypes.add("B");
+            geocacheTypes.add("CacheType = \"B\"");
         }
         if (sharedPref.getBoolean("gc_type_event", false)) {
-            geocacheTypes.add("E");
+            geocacheTypes.add("CacheType = \"E\"");
         }
         if (sharedPref.getBoolean("gc_type_cito", false)) {
-            geocacheTypes.add("C");
+            geocacheTypes.add("CacheType = \"C\"");
         }
         if (sharedPref.getBoolean("gc_type_mega", false)) {
-            geocacheTypes.add("Z");
+            geocacheTypes.add("CacheType = \"Z\"");
         }
         if (sharedPref.getBoolean("gc_type_wig", false)) {
-            geocacheTypes.add("I");
+            geocacheTypes.add("CacheType = \"I\"");
         }
         if (sharedPref.getBoolean("gc_type_virtual", false)) {
-            geocacheTypes.add("V");
+            geocacheTypes.add("CacheType = \"V\"");
         }
         if (sharedPref.getBoolean("gc_type_webcam", false)) {
-            geocacheTypes.add("W");
+            geocacheTypes.add("CacheType = \"W\"");
         }
         if (sharedPref.getBoolean("gc_type_loc", false)) {
-            geocacheTypes.add("L");
+            geocacheTypes.add("CacheType = \"L\"");
         }
         if (sharedPref.getBoolean("gc_type_hq", false)) {
-            geocacheTypes.add("H");
+            geocacheTypes.add("CacheType = \"H\"");
         }
         if (sharedPref.getBoolean("gc_type_gps", false)) {
-            geocacheTypes.add("X");
+            geocacheTypes.add("CacheType = \"X\"");
         }
         if (sharedPref.getBoolean("gc_type_10years", false)) {
-            geocacheTypes.add("F");
+            geocacheTypes.add("CacheType = \"F\"");
         }
         if (sharedPref.getBoolean("gc_type_benchmark", false)) {
-            geocacheTypes.add("G");
+            geocacheTypes.add("CacheType = \"G\"");
         }
         if (sharedPref.getBoolean("gc_type_ape", false)) {
-            geocacheTypes.add("A");
+            geocacheTypes.add("CacheType = \"A\"");
+        }
+        if (sharedPref.getBoolean("gc_type_corrected", false)) {
+            geocacheTypes.add("HasCorrected = 1");
         }
 
         return geocacheTypes;
