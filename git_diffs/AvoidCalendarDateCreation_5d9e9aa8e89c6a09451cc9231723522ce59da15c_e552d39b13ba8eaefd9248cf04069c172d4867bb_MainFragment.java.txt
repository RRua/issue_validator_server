diff --git a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
index 85b525a37..3872f29c5 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
@@ -275,26 +275,24 @@ public class RecyclerAdapter extends RecyclerArrayAdapter<String, RecyclerView.V
     }
 
     private void setItems(ArrayList<LayoutElementParcelable> arrayList, boolean invalidate) {
-        synchronized (arrayList) {
-            itemsDigested.clear();
-            offset = 0;
-            stoppedAnimation = false;
+        itemsDigested.clear();
+        offset = 0;
+        stoppedAnimation = false;
 
-            for (LayoutElementParcelable e : arrayList) {
-                itemsDigested.add(new ListItem(e));
-            }
+        for (LayoutElementParcelable e : arrayList) {
+            itemsDigested.add(new ListItem(e));
+        }
 
-            if (mainFrag.IS_LIST && itemsDigested.size() > 0) {
-                itemsDigested.add(new ListItem(EMPTY_LAST_ITEM));
-            }
+        if (mainFrag.IS_LIST && itemsDigested.size() > 0) {
+            itemsDigested.add(new ListItem(EMPTY_LAST_ITEM));
+        }
 
-            for (int i = 0; i < itemsDigested.size(); i++) {
-                itemsDigested.get(i).setAnimate(false);
-            }
+        for (int i = 0; i < itemsDigested.size(); i++) {
+            itemsDigested.get(i).setAnimate(false);
+        }
 
-            if(showHeaders) {
-                createHeaders(invalidate);
-            }
+        if (showHeaders) {
+            createHeaders(invalidate);
         }
     }
 
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/handlers/FileHandler.java b/app/src/main/java/com/amaze/filemanager/asynchronous/handlers/FileHandler.java
new file mode 100644
index 000000000..20266b2e9
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/handlers/FileHandler.java
@@ -0,0 +1,83 @@
+package com.amaze.filemanager.asynchronous.handlers;
+
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+
+import com.amaze.filemanager.adapters.RecyclerAdapter;
+import com.amaze.filemanager.filesystem.CustomFileObserver;
+import com.amaze.filemanager.filesystem.HybridFile;
+import com.amaze.filemanager.fragments.MainFragment;
+import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
+
+import java.io.File;
+import java.lang.ref.WeakReference;
+
+/**
+ * @author Emmanuel
+ *         on 8/11/2017, at 17:37.
+ */
+public class FileHandler extends Handler {
+    private WeakReference<MainFragment> mainFragment;
+    private UtilitiesProviderInterface utilsProvider;
+    private RecyclerView listView;
+
+    public FileHandler(MainFragment mainFragment, UtilitiesProviderInterface utilsProvider,
+                        RecyclerView listView) {
+        super(Looper.getMainLooper());
+        this.mainFragment = new WeakReference<>(mainFragment);
+        this.utilsProvider = utilsProvider;
+        this.listView = listView;
+    }
+
+    @Override
+    public void handleMessage(Message msg) {
+        super.handleMessage(msg);
+        MainFragment main = mainFragment.get();
+
+        String path = (String) msg.obj;
+
+        switch (msg.what) {
+            case CustomFileObserver.GOBACK:
+                main.goBack();
+                break;
+            case CustomFileObserver.NEW_ITEM:
+                HybridFile fileCreated = new HybridFile(main.openMode,
+                        main.getCurrentPath() + "/" + path);
+                main.addLayoutElement(fileCreated.generateLayoutElement(main,
+                        utilsProvider));
+                break;
+            case CustomFileObserver.DELETED_ITEM:
+                for (int i = 0; i < main.getLayoutElementSize(); i++) {
+                    File currentFile = new File(main.getLayoutElement(i).getDesc());
+
+                    if (currentFile.getName().equals(path)) {
+                        main.removeLayoutElement(i);
+                        break;
+                    }
+                }
+                break;
+            default://Pass along other messages from the UI
+                super.handleMessage(msg);
+                return;
+        }
+
+        if (listView.getVisibility() == View.VISIBLE) {
+            if (main.getLayoutElements().size() == 0) {
+                // no item left in list, recreate views
+                main.createViews(main.getLayoutElements(), true, main.getCurrentPath(),
+                        main.openMode, main.results, !main.IS_LIST);
+            } else {
+                // we already have some elements in list view, invalidate the adapter
+                ((RecyclerAdapter) listView.getAdapter()).setItems(main.getLayoutElements());
+            }
+        } else {
+            // there was no list view, means the directory was empty
+            main.loadlist(main.getCurrentPath(), true, main.openMode);
+        }
+
+        main.computeScroll();
+    }
+}
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/CustomFileObserver.java b/app/src/main/java/com/amaze/filemanager/filesystem/CustomFileObserver.java
new file mode 100644
index 000000000..1ad9fb4ee
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/CustomFileObserver.java
@@ -0,0 +1,89 @@
+package com.amaze.filemanager.filesystem;
+
+import android.os.FileObserver;
+import android.os.Handler;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Timer;
+import java.util.TimerTask;
+
+/**
+ * Class which monitors any change in local filesystem and updates the adapter
+ * Makes use of inotify in Linux
+ */
+public class CustomFileObserver extends FileObserver {
+
+    /**
+     * Values for what of Handler Message
+     */
+    public static final int GOBACK = -1, NEW_ITEM = 0, DELETED_ITEM = 1;
+
+    private static final int DEFER_CONSTANT = 5000;
+
+    private long lastMessagedTime = 0L;
+    private boolean messagingScheduled = false;
+
+    private Handler handler;
+    private ArrayList<String> pathsAdded = new ArrayList<>();
+    private ArrayList<String> pathsRemoved = new ArrayList<>();
+
+    public CustomFileObserver(String path, Handler handler) {
+        super(path);
+        this.handler = handler;
+    }
+
+    @Override
+    public void onEvent(int event, String path) {
+        long deltaTime = Calendar.getInstance().getTimeInMillis() - lastMessagedTime;
+
+        switch (event) {
+            case CREATE:
+            case MOVED_TO:
+                pathsAdded.add(path);
+                break;
+            case DELETE:
+            case MOVED_FROM:
+                pathsRemoved.add(path);
+                break;
+            case DELETE_SELF:
+            case MOVE_SELF:
+                handler.obtainMessage(GOBACK).sendToTarget();
+                return;
+        }
+
+        if(messagingScheduled) return;
+
+        if(deltaTime <= DEFER_CONSTANT) {
+            // defer the observer until unless it reports a change after at least 5 secs of last one
+            // keep adding files added, if there were any, to the buffer
+
+            new Timer().schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    sendMessages();
+                }
+            }, DEFER_CONSTANT - deltaTime);
+
+            messagingScheduled = true;
+        } else {
+            sendMessages();
+        }
+    }
+
+    private void sendMessages() {
+        lastMessagedTime = Calendar.getInstance().getTimeInMillis();
+        messagingScheduled = false;
+
+        for (String pathAdded : pathsAdded) {
+            handler.obtainMessage(NEW_ITEM, pathAdded).sendToTarget();
+        }
+        pathsAdded.clear();
+
+        for (String pathRemoved : pathsRemoved) {
+            handler.obtainMessage(DELETED_ITEM, pathRemoved).sendToTarget();
+        }
+        pathsRemoved.clear();
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index bb4623787..1ece5d8b6 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -35,14 +35,13 @@ import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
-import android.media.MediaScannerConnection;
 import android.graphics.drawable.Drawable;
+import android.media.MediaScannerConnection;
 import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.FileObserver;
 import android.preference.PreferenceManager;
 import android.support.design.widget.AppBarLayout;
 import android.support.v4.app.FragmentActivity;
@@ -74,10 +73,12 @@ import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.adapters.RecyclerAdapter;
 import com.amaze.filemanager.asynchronous.asynctasks.DeleteTask;
 import com.amaze.filemanager.asynchronous.asynctasks.LoadFilesListTask;
+import com.amaze.filemanager.asynchronous.handlers.FileHandler;
 import com.amaze.filemanager.database.CloudHandler;
 import com.amaze.filemanager.database.CryptHandler;
 import com.amaze.filemanager.database.models.EncryptedEntry;
 import com.amaze.filemanager.database.models.Tab;
+import com.amaze.filemanager.filesystem.CustomFileObserver;
 import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.MediaStoreHack;
@@ -99,7 +100,6 @@ import com.amaze.filemanager.utils.OnAsyncTaskFinished;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.SmbStreamer.Streamer;
 import com.amaze.filemanager.utils.Utils;
-import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.CryptUtil;
@@ -112,7 +112,6 @@ import com.amaze.filemanager.utils.theme.AppTheme;
 import java.io.File;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
-import java.util.Calendar;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -1192,29 +1191,28 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
     }
 
     private void startFileObserver() {
-
-        AppConfig.runInBackground(() -> {
-            switch (openMode) {
-                case ROOT:
-                case FILE:
-                    // watch the current directory
-                    File file = new File(CURRENT_PATH);
-
-                    if (file.isDirectory() && file.canRead()) {
-
-                        if (customFileObserver != null) {
-                            // already a watcher instantiated, first it should be stopped
-                            customFileObserver.stopWatching();
-                        }
-
-                        customFileObserver = new CustomFileObserver(CURRENT_PATH);
-                        customFileObserver.startWatching();
+        switch (openMode) {
+            case ROOT:
+            case FILE:
+                // watch the current directory
+                File file = new File(CURRENT_PATH);
+
+                if (file.isDirectory() && file.canRead()) {
+
+                    if (customFileObserver != null) {
+                        // already a watcher instantiated, first it should be stopped
+                        customFileObserver.stopWatching();
+                        customFileObserver = null;
                     }
-                    break;
-                default:
-                    break;
-            }
-        });
+
+                    customFileObserver = new CustomFileObserver(CURRENT_PATH,
+                            new FileHandler(this, utilsProvider, listView));
+                    customFileObserver.startWatching();
+                }
+                break;
+            default:
+                break;
+        }
     }
 
     /**
@@ -1746,110 +1744,4 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         return R.drawable.root;
     }
 
-    /**
-     * Inner class which monitors any change in local filesystem and updates the adapter
-     * Makes use of inotify in Linux
-     */
-    private class CustomFileObserver extends FileObserver {
-
-        CustomFileObserver(String path) {
-            super(path);
-        }
-
-        private long lastArrivalTime = 0l;
-        private static final int DEFER_CONSTANT = 5000;
-        private ArrayList<String> pathsAdded = new ArrayList<>();
-        private ArrayList<String> pathsRemoved = new ArrayList<>();
-
-        @Override
-        public void onEvent(int event, String path) {
-
-            synchronized (getLayoutElements()) {
-
-                long currentArrivalTime = Calendar.getInstance().getTimeInMillis();
-
-                if (currentArrivalTime-lastArrivalTime < DEFER_CONSTANT) {
-                    // defer the observer until unless it reports a change after at least 5 secs of last one
-                    // keep adding files added, if there were any, to the buffer
-
-                    switch (event) {
-                        case CREATE:
-                        case MOVED_TO:
-                            pathsAdded.add(path);
-                            break;
-                        case DELETE:
-                        case MOVED_FROM:
-                            pathsRemoved.add(path);
-                            break;
-                        case DELETE_SELF:
-                        case MOVE_SELF:
-                            getActivity().runOnUiThread(MainFragment.this::goBack);
-                            return;
-                        default:
-                            return;
-                    }
-                    return;
-                }
-
-                lastArrivalTime = currentArrivalTime;
-
-                switch (event) {
-                    case CREATE:
-                    case MOVED_TO:
-                        // add path for this event first
-                        pathsAdded.add(path);
-                        for (String pathAdded : pathsAdded) {
-                            HybridFile fileCreated = new HybridFile(openMode, CURRENT_PATH + "/" + pathAdded);
-                            addLayoutElement(fileCreated.generateLayoutElement(MainFragment.this, utilsProvider));
-                        }
-                        // reset the buffer after every threshold time
-                        pathsAdded = new ArrayList<>();
-                        break;
-                    case DELETE:
-                    case MOVED_FROM:
-                        pathsRemoved.add(path);
-                        for (int i = 0; i < getLayoutElementSize(); i++) {
-                            File currentFile = new File(getLayoutElement(i).getDesc());
-
-                            for (String pathRemoved : pathsRemoved) {
-
-                                if (currentFile.getName().equals(pathRemoved)) {
-                                    removeLayoutElement(i);
-                                    break;
-                                }
-                            }
-                        }
-                        pathsRemoved = new ArrayList<>();
-                        break;
-                    case DELETE_SELF:
-                    case MOVE_SELF:
-                        getActivity().runOnUiThread(MainFragment.this::goBack);
-                        return;
-                    default:
-                        return;
-                }
-
-                getActivity().runOnUiThread(() -> {
-
-                    if (listView.getVisibility() == View.VISIBLE) {
-                        if (getLayoutElements().size() == 0) {
-
-                            // no item left in list, recreate views
-                            createViews(getLayoutElements(), true, CURRENT_PATH, openMode, results, !IS_LIST);
-                        } else {
-
-                            // we already have some elements in list view, invalidate the adapter
-                            adapter.setItems(getLayoutElements());
-                        }
-                    } else {
-                        // there was no list view, means the directory was empty
-                        loadlist(CURRENT_PATH, true, openMode);
-                    }
-
-                    computeScroll();
-                });
-            }
-        }
-
-    }
 }
