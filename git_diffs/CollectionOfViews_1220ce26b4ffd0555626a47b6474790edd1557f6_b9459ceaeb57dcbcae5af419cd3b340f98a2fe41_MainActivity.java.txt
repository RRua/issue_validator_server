diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadAction.java b/app/src/main/java/com/gianlu/aria2app/DownloadAction.java
index a9eee5dd..13886ff3 100644
--- a/app/src/main/java/com/gianlu/aria2app/DownloadAction.java
+++ b/app/src/main/java/com/gianlu/aria2app/DownloadAction.java
@@ -195,8 +195,7 @@ public class DownloadAction {
         MOVE_DOWN,
         REMOVE,
         RESTART,
-        RESUME,
-        SHOW_MORE
+        RESUME
     }
 
     public interface IPause {
diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/Charting.java b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/Charting.java
index c509a58b..30418e67 100644
--- a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/Charting.java
+++ b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/Charting.java
@@ -1,13 +1,12 @@
 package com.gianlu.aria2app.DownloadsListing;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.Color;
+import android.support.v4.content.ContextCompat;
 
 import com.gianlu.aria2app.R;
 import com.gianlu.aria2app.Utils;
 import com.github.mikephil.charting.charts.LineChart;
-import com.github.mikephil.charting.components.Legend;
 import com.github.mikephil.charting.components.XAxis;
 import com.github.mikephil.charting.components.YAxis;
 import com.github.mikephil.charting.data.LineData;
@@ -15,71 +14,72 @@ import com.github.mikephil.charting.data.LineDataSet;
 import com.github.mikephil.charting.formatter.YAxisValueFormatter;
 
 public class Charting {
-    public static void newChart(Activity context, final LineChart chart) {
-        context.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                newChart(chart);
-            }
-        });
-    }
 
-    public static void newChart(final LineChart chart) {
+    public static LineChart setupChart(LineChart chart) {
         chart.clear();
 
         chart.setDescription("");
         chart.setDrawGridBackground(false);
         chart.setBackgroundColor(Color.alpha(0));
         chart.setTouchEnabled(false);
+        chart.getLegend().setEnabled(false);
 
         LineData data = new LineData();
-        data.setValueTextColor(Color.BLACK);
+        data.setValueTextColor(ContextCompat.getColor(chart.getContext(), R.color.colorPrimaryDark));
         chart.setData(data);
-        Legend l = chart.getLegend();
-        l.setForm(Legend.LegendForm.LINE);
-        l.setTextColor(Color.BLACK);
 
-        XAxis xl = chart.getXAxis();
-        xl.setTextColor(Color.BLACK);
-        xl.setDrawGridLines(false);
-        xl.setAvoidFirstLastClipping(true);
-        xl.setSpaceBetweenLabels(5);
-        xl.setEnabled(true);
+        XAxis xa = chart.getXAxis();
+        xa.setPosition(XAxis.XAxisPosition.BOTTOM);
+        xa.setAxisLineColor(ContextCompat.getColor(chart.getContext(), R.color.colorPrimaryDark));
+        xa.setTextColor(ContextCompat.getColor(chart.getContext(), R.color.colorPrimaryDark));
+        xa.setTextSize(8);
+        xa.setAxisLineWidth(2f);
+        xa.setDrawGridLines(false);
+        xa.setAvoidFirstLastClipping(true);
+        xa.setSpaceBetweenLabels(5);
+        xa.setEnabled(true);
+
+        YAxis ya = chart.getAxisLeft();
+        ya.setAxisLineColor(ContextCompat.getColor(chart.getContext(), R.color.colorPrimaryDark));
+        ya.setTextColor(ContextCompat.getColor(chart.getContext(), R.color.colorPrimaryDark));
+        ya.setTextSize(8);
+        ya.setAxisLineWidth(2f);
+        ya.setLabelCount(4, true);
+        ya.setEnabled(true);
+        ya.setAxisMinValue(0f);
+        ya.setDrawGridLines(false);
+        ya.setValueFormatter(new CustomYAxisValueFormatter());
+
+        chart.getAxisRight().setEnabled(false);
 
-        YAxis leftAxis = chart.getAxisLeft();
-        leftAxis.setTextColor(Color.BLACK);
-        leftAxis.setAxisMinValue(0f);
-        leftAxis.setDrawGridLines(true);
-        leftAxis.setValueFormatter(new CustomYAxisValueFormatter());
+        data.addDataSet(initDownloadSet(chart.getContext()));
+        data.addDataSet(initUploadSet(chart.getContext()));
 
-        YAxis rightAxis = chart.getAxisRight();
-        rightAxis.setEnabled(false);
+        return chart;
     }
 
-    public static LineDataSet InitDownloadSet(Context context) {
+    public static LineDataSet initDownloadSet(Context context) {
         LineDataSet set = new LineDataSet(null, context.getString(R.string.downloadSpeed));
         set.setAxisDependency(YAxis.AxisDependency.LEFT);
-        set.setColor(Color.rgb(154, 204, 0));
-        set.setLineWidth(2f);
+        set.setLineWidth(0f);
         set.setDrawCircles(false);
         set.setFillAlpha(65);
         set.setFillColor(Color.rgb(154, 204, 0));
         set.setDrawValues(false);
-        set.setDrawCubic(true);
+        set.setMode(LineDataSet.Mode.CUBIC_BEZIER);
         set.setDrawFilled(true);
         return set;
     }
 
-    public static LineDataSet InitUploadSet(Context context) {
+    public static LineDataSet initUploadSet(Context context) {
         LineDataSet set = new LineDataSet(null, context.getString(R.string.uploadSpeed));
         set.setAxisDependency(YAxis.AxisDependency.LEFT);
-        set.setColor(Color.rgb(51, 181, 229));
-        set.setLineWidth(2f);
+        set.setLineWidth(0f);
         set.setDrawCircles(false);
         set.setFillAlpha(65);
         set.setFillColor(Color.rgb(51, 181, 229));
         set.setDrawValues(false);
-        set.setDrawCubic(true);
+        set.setMode(LineDataSet.Mode.CUBIC_BEZIER);
         set.setDrawFilled(true);
         return set;
     }
diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItem.java b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItem.java
deleted file mode 100644
index 1f8fe723..00000000
--- a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItem.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.gianlu.aria2app.DownloadsListing;
-
-import com.gianlu.aria2app.NetIO.JTA2.Download;
-
-import java.util.Locale;
-
-public class DownloadItem {
-    public Download download;
-
-    public DownloadItem(Download download) {
-        this.download = download;
-    }
-
-    public String getDownloadName() {
-        return download.getName();
-    }
-
-    public String getDownloadGID() {
-        return download.GID;
-    }
-
-    public Download.STATUS getDownloadStatus() {
-        return download.status;
-    }
-
-    public Float getDownloadProgress() {
-        return download.completedLength.floatValue() / download.length.floatValue() * 100;
-    }
-
-    public String getDownloadPercentage() {
-        return String.format(Locale.getDefault(), "%.2f", getDownloadProgress()) + " %";
-    }
-
-    public Float getDownloadSpeed() {
-        return download.downloadSpeed.floatValue();
-    }
-
-    public Long getDownloadTime() {
-        if (download.downloadSpeed == 0) return 0L;
-        return (download.length - download.completedLength) / download.downloadSpeed;
-    }
-}
diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItemAdapter.java b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItemAdapter.java
deleted file mode 100644
index 31b9c7d1..00000000
--- a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/DownloadItemAdapter.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package com.gianlu.aria2app.DownloadsListing;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import android.widget.ImageView;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.gianlu.aria2app.NetIO.JTA2.Download;
-import com.gianlu.aria2app.R;
-import com.gianlu.aria2app.Utils;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class DownloadItemAdapter extends BaseAdapter {
-    static List<Download.STATUS> filterOut = new ArrayList<>();
-    List<DownloadItem> objs;
-    private Context context;
-
-    public DownloadItemAdapter(Context context, List<DownloadItem> objects) {
-        this.context = context;
-        objs = objects;
-    }
-
-    public DownloadItem getItem(String gid) {
-        for (DownloadItem item : objs) if (item.download.GID.equals(gid)) return item;
-        return null;
-    }
-
-    @Override
-    public int getCount() {
-        int c = 0;
-        for (int i = 0; i < objs.size(); i++) {
-            if (!filterOut.contains(objs.get(i).getDownloadStatus())) c++;
-        }
-        return c;
-    }
-
-    @Override
-    public DownloadItem getItem(int i) {
-        return objs.get(i);
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return i;
-    }
-
-    public void addFilter(Download.STATUS filter) {
-        filterOut.add(filter);
-        notifyDataSetChanged();
-    }
-
-    public void removeFilter(Download.STATUS filter) {
-        filterOut.remove(filter);
-        notifyDataSetChanged();
-    }
-
-    @SuppressLint({"InflateParams", "ViewHolder"})
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-        DownloadItem item = getItem(position);
-
-        if (filterOut.contains(item.getDownloadStatus())) {
-            position++;
-            return getView(position, null, null);
-        }
-
-        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        convertView = inflater.inflate(R.layout.download_custom_item, null);
-        TextView downloadNameTextView = (TextView) convertView.findViewById(R.id.a2_customItem_name);
-        ImageView downloadStatusImageView = (ImageView) convertView.findViewById(R.id.a2_customItem_status);
-        ProgressBar downloadProgressBar = (ProgressBar) convertView.findViewById(R.id.a2_customItem_progress);
-        TextView downloadPercentageTextView = (TextView) convertView.findViewById(R.id.a2_customItem_percentage);
-        TextView downloadSpeedTextView = (TextView) convertView.findViewById(R.id.a2_customItem_DSpeed);
-        TextView downloadTimeTextView = (TextView) convertView.findViewById(R.id.a2_customItem_time);
-
-        //Download name
-        downloadNameTextView.setText(item.getDownloadName());
-
-        //Download percentage progress
-        downloadPercentageTextView.setText(item.getDownloadPercentage());
-        downloadProgressBar.setMax(100);
-        downloadProgressBar.setProgress(Math.round(item.getDownloadProgress()));
-
-        //Download speed
-        downloadSpeedTextView.setText(Utils.SpeedFormatter(item.getDownloadSpeed()));
-
-        //Time remaining
-        downloadTimeTextView.setText(Utils.TimeFormatter(item.getDownloadTime()));
-
-        // Status image and various
-        switch (item.getDownloadStatus()) {
-            case ACTIVE:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_play_arrow_black_48dp));
-                break;
-            case WAITING:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_queue_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_waiting);
-                break;
-            case ERROR:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_error_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_error);
-                break;
-            case PAUSED:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_pause_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_paused);
-                break;
-            case COMPLETE:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_done_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_complete);
-                break;
-            case REMOVED:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_clear_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_removed);
-                break;
-            default:
-                downloadStatusImageView.setImageDrawable(context.getDrawable(R.drawable.ic_help_black_48dp));
-                downloadSpeedTextView.setText(Utils.SpeedFormatter(0));
-                downloadTimeTextView.setText(R.string.downloadStatus_unknown);
-                break;
-        }
-
-        return convertView;
-    }
-}
diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/ILoadDownloads.java b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/ILoadDownloads.java
deleted file mode 100644
index 37d31796..00000000
--- a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/ILoadDownloads.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.gianlu.aria2app.DownloadsListing;
-
-public interface ILoadDownloads {
-    void onStart();
-
-    void onException(boolean queuing, Exception ex);
-    void onEnd();
-}
diff --git a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/LoadDownloads.java b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/LoadDownloads.java
index b1ace9ad..d994b9ad 100644
--- a/app/src/main/java/com/gianlu/aria2app/DownloadsListing/LoadDownloads.java
+++ b/app/src/main/java/com/gianlu/aria2app/DownloadsListing/LoadDownloads.java
@@ -2,7 +2,6 @@ package com.gianlu.aria2app.DownloadsListing;
 
 import android.app.Activity;
 import android.preference.PreferenceManager;
-import android.widget.ListView;
 
 import com.gianlu.aria2app.NetIO.JTA2.Download;
 import com.gianlu.aria2app.NetIO.JTA2.IDownloadList;
@@ -15,15 +14,11 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class LoadDownloads implements Runnable {
-    private ListView listView;
-    private Activity context;
-    private ILoadDownloads handler;
+    private ILoading handler;
     private JTA2 jta2;
     private boolean hideMetadata;
 
-    public LoadDownloads(Activity context, ListView listView, ILoadDownloads handler) {
-        this.listView = listView;
-        this.context = context;
+    public LoadDownloads(Activity context, ILoading handler) {
         this.handler = handler;
 
         hideMetadata = PreferenceManager.getDefaultSharedPreferences(context).getBoolean("a2_hideMetadata", false);
@@ -40,8 +35,8 @@ public class LoadDownloads implements Runnable {
     public void run() {
         if (jta2 == null) return;
 
-        handler.onStart();
-        final List<DownloadItem> downloadsList = new ArrayList<>();
+        handler.onStarted();
+        final List<Download> downloadsList = new ArrayList<>();
 
         //Active
         jta2.tellActive(new IDownloadList() {
@@ -50,7 +45,7 @@ public class LoadDownloads implements Runnable {
                 for (Download download : downloads) {
                     if (hideMetadata && download.getName().startsWith("[METADATA]") && !download.followedBy.isEmpty())
                         continue;
-                    downloadsList.add(new DownloadItem(download));
+                    downloadsList.add(download);
                 }
 
                 //Waiting
@@ -60,7 +55,7 @@ public class LoadDownloads implements Runnable {
                         for (Download download : downloads) {
                             if (hideMetadata && download.getName().startsWith("[METADATA]") && !download.followedBy.isEmpty())
                                 continue;
-                            downloadsList.add(new DownloadItem(download));
+                            downloadsList.add(download);
                         }
 
                         //Stopped
@@ -70,16 +65,10 @@ public class LoadDownloads implements Runnable {
                                 for (Download download : downloads) {
                                     if (hideMetadata && download.getName().startsWith("[METADATA]") && !download.followedBy.isEmpty())
                                         continue;
-                                    downloadsList.add(new DownloadItem(download));
+                                    downloadsList.add(download);
                                 }
-                                final DownloadItemAdapter adapter = new DownloadItemAdapter(context, downloadsList);
-                                context.runOnUiThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        listView.setAdapter(adapter);
-                                        handler.onEnd();
-                                    }
-                                });
+
+                                handler.onLoaded(downloadsList);
                             }
 
                             @Override
@@ -102,4 +91,12 @@ public class LoadDownloads implements Runnable {
             }
         });
     }
+
+    public interface ILoading {
+        void onStarted();
+
+        void onLoaded(List<Download> downloads);
+
+        void onException(boolean queuing, Exception ex);
+    }
 }
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/AddTorrentActivity.java b/app/src/main/java/com/gianlu/aria2app/Main/AddTorrentActivity.java
index 68e4aa4c..979ef18d 100644
--- a/app/src/main/java/com/gianlu/aria2app/Main/AddTorrentActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/AddTorrentActivity.java
@@ -148,7 +148,13 @@ public class AddTorrentActivity extends AppCompatActivity {
                 }
             });
 
-            optionsListView.setAdapter(new OptionAdapter(this, Utils.colorToHex(this, getIntent().getBooleanExtra("torrentMode", true) ? R.color.colorTorrent_pressed : R.color.colorMetalink_pressed), headers, children));
+            int colorRes;
+            if (getIntent().getBooleanExtra("torrentMode", true))
+                colorRes = R.color.colorTorrent_pressed;
+            else
+                colorRes = R.color.colorMetalink_pressed;
+
+            optionsListView.setAdapter(new OptionAdapter(this, colorRes, headers, children));
         } catch (IOException | NoSuchAlgorithmException ex) {
             Utils.UIToast(this, Utils.TOAST_MESSAGES.WS_EXCEPTION, ex);
         }
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/CardViewHolder.java b/app/src/main/java/com/gianlu/aria2app/Main/CardViewHolder.java
new file mode 100644
index 00000000..f74c59df
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Main/CardViewHolder.java
@@ -0,0 +1,46 @@
+package com.gianlu.aria2app.Main;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.widget.Button;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gianlu.aria2app.R;
+import com.github.lzyzsd.circleprogress.DonutProgress;
+import com.github.mikephil.charting.charts.LineChart;
+
+public class CardViewHolder extends RecyclerView.ViewHolder {
+    public RelativeLayout header;
+    public DonutProgress donutProgress;
+    public TextView downloadName;
+    public TextView downloadStatus;
+    public LinearLayout details;
+    public LineChart detailsChart;
+    public TextView detailsGid;
+    public TextView detailsTotalLength;
+    public TextView detailsCompletedLength;
+    public TextView detailsUploadLength;
+    public Button more;
+    public ImageButton menu;
+
+    public CardViewHolder(View itemView) {
+        super(itemView);
+
+        header = (RelativeLayout) itemView.findViewById(R.id.downloadCardView_header);
+        donutProgress = (DonutProgress) itemView.findViewById(R.id.downloadCardView_donutProgress);
+        downloadName = (TextView) itemView.findViewById(R.id.downloadCardView_name);
+        downloadStatus = (TextView) itemView.findViewById(R.id.downloadCardView_status);
+        details = (LinearLayout) itemView.findViewById(R.id.downloadCardView_details);
+        more = (Button) itemView.findViewById(R.id.downloadCardView_actionMore);
+        menu = (ImageButton) itemView.findViewById(R.id.downloadCardView_actionMenu);
+
+        detailsChart = (LineChart) itemView.findViewById(R.id.downloadCardViewDetails_chart);
+        detailsGid = (TextView) itemView.findViewById(R.id.downloadCardViewDetails_gid);
+        detailsTotalLength = (TextView) itemView.findViewById(R.id.downloadCardViewDetails_totalLength);
+        detailsCompletedLength = (TextView) itemView.findViewById(R.id.downloadCardViewDetails_completedLength);
+        detailsUploadLength = (TextView) itemView.findViewById(R.id.downloadCardViewDetails_uploadLength);
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java b/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java
new file mode 100644
index 00000000..50a88149
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java
@@ -0,0 +1,305 @@
+package com.gianlu.aria2app.Main;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.widget.PopupMenu;
+import android.support.v7.widget.RecyclerView;
+import android.text.Html;
+import android.text.TextUtils;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gianlu.aria2app.DownloadAction;
+import com.gianlu.aria2app.DownloadsListing.Charting;
+import com.gianlu.aria2app.NetIO.JTA2.Download;
+import com.gianlu.aria2app.R;
+import com.gianlu.aria2app.Utils;
+import com.github.mikephil.charting.data.Entry;
+import com.github.mikephil.charting.data.LineData;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
+
+public class MainCardAdapter extends RecyclerView.Adapter<CardViewHolder> {
+    private Activity context;
+    private List<Download> objs = new ArrayList<>();
+    private IActionMore actionMore;
+    private IMenuSelected actionMenu;
+
+    public MainCardAdapter(Activity context, List<Download> objs, IActionMore actionMore, IMenuSelected actionMenu) {
+        this.context = context;
+        this.objs = objs;
+        this.actionMore = actionMore;
+        this.actionMenu = actionMenu;
+    }
+
+    public static List<Download> processFilters(List<Download.STATUS> filters, List<Download> objs) {
+        List<Download> downloads = new ArrayList<>(objs);
+
+        for (Download download : downloads)
+            if (filters.contains(download.status))
+                downloads.remove(download);
+
+        return downloads;
+    }
+
+    public static boolean isExpanded(View v) {
+        return v.getVisibility() == View.VISIBLE;
+    }
+
+    public static void expand(final View v) {
+        v.measure(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
+        final int targetHeight = v.getMeasuredHeight();
+
+        v.getLayoutParams().height = 0;
+        v.setVisibility(View.VISIBLE);
+        Animation a = new Animation() {
+            @Override
+            protected void applyTransformation(float interpolatedTime, Transformation t) {
+                v.getLayoutParams().height = interpolatedTime == 1
+                        ? RelativeLayout.LayoutParams.WRAP_CONTENT
+                        : (int) (targetHeight * interpolatedTime);
+                v.requestLayout();
+            }
+
+            @Override
+            public boolean willChangeBounds() {
+                return true;
+            }
+        };
+
+        a.setDuration((int) (targetHeight / v.getContext().getResources().getDisplayMetrics().density));
+        v.startAnimation(a);
+    }
+
+    public static void expandTitle(TextView v) {
+        v.setSingleLine(false);
+        v.setEllipsize(null);
+    }
+
+    public static void collapse(final View v) {
+        final int initialHeight = v.getMeasuredHeight();
+
+        Animation a = new Animation() {
+            @Override
+            protected void applyTransformation(float interpolatedTime, Transformation t) {
+                if (interpolatedTime == 1) {
+                    v.setVisibility(View.GONE);
+                } else {
+                    v.getLayoutParams().height = initialHeight - (int) (initialHeight * interpolatedTime);
+                    v.requestLayout();
+                }
+            }
+
+            @Override
+            public boolean willChangeBounds() {
+                return true;
+            }
+        };
+
+        a.setDuration((int) (initialHeight / v.getContext().getResources().getDisplayMetrics().density));
+        v.startAnimation(a);
+    }
+
+    public static void collapseTitle(TextView v) {
+        v.setSingleLine(true);
+        v.setEllipsize(TextUtils.TruncateAt.MARQUEE);
+    }
+
+    public void updateItem(final int position, final Download update) {
+        context.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                notifyItemChanged(position, update);
+            }
+        });
+    }
+
+    public Download getItem(int position) {
+        return objs.get(position);
+    }
+
+    public Download getItem(String gid) {
+        for (Download download : objs) {
+            if (download.GID.equals(gid)) return download;
+        }
+
+        return null;
+    }
+
+    @Override
+    public CardViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        return new CardViewHolder(LayoutInflater.from(context).inflate(R.layout.download_cardview, parent, false));
+    }
+
+    @Override
+    public void onBindViewHolder(CardViewHolder holder, int position, List<Object> payloads) {
+        if (payloads.isEmpty()) {
+            onBindViewHolder(holder, position);
+        } else {
+            Download item = (Download) payloads.get(0);
+
+            LineData data = holder.detailsChart.getData();
+            data.addXValue(new SimpleDateFormat("hh:mm:ss", Locale.getDefault()).format(new java.util.Date()));
+            data.addEntry(new Entry(item.downloadSpeed, data.getDataSetByIndex(0).getEntryCount()), 0);
+            data.addEntry(new Entry(item.uploadSpeed, data.getDataSetByIndex(1).getEntryCount()), 1);
+            holder.detailsChart.notifyDataSetChanged();
+            holder.detailsChart.setVisibleXRangeMaximum(90);
+            holder.detailsChart.moveViewToX(data.getXValCount() - 91);
+
+            holder.donutProgress.setProgress(item.getProgress().intValue());
+            holder.downloadName.setText(item.getName());
+            holder.downloadStatus.setText(item.status.toString());
+            holder.detailsCompletedLength.setText(Html.fromHtml(context.getString(R.string.completed_length, Utils.DimensionFormatter(item.completedLength))));
+            holder.detailsUploadLength.setText(Html.fromHtml(context.getString(R.string.uploaded_length, Utils.DimensionFormatter(item.uploadedLength))));
+        }
+    }
+
+    @Override
+    public void onBindViewHolder(final CardViewHolder holder, int position) {
+        final Download item = getItem(position);
+
+        // Static
+        final int color;
+        if (item.isBitTorrent)
+            color = ContextCompat.getColor(context, R.color.colorTorrent_pressed);
+        else
+            color = ContextCompat.getColor(context, R.color.colorAccent);
+
+        holder.detailsChart = Charting.setupChart(holder.detailsChart);
+        holder.detailsGid.setText(Html.fromHtml(context.getString(R.string.gid, item.GID)));
+        holder.donutProgress.setFinishedStrokeColor(color);
+        holder.donutProgress.setUnfinishedStrokeColor(Color.argb(26, Color.red(color), Color.green(color), Color.blue(color)));
+        holder.detailsTotalLength.setText(Html.fromHtml(context.getString(R.string.total_length, Utils.DimensionFormatter(item.length))));
+
+        holder.header.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (isExpanded(holder.details)) {
+                    collapse(holder.details);
+                    collapseTitle(holder.downloadName);
+                } else {
+                    expand(holder.details);
+                    expandTitle(holder.downloadName);
+                }
+            }
+        });
+        holder.more.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                actionMore.onClick(view, holder.getAdapterPosition(), item);
+            }
+        });
+        holder.menu.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                PopupMenu popupMenu = new PopupMenu(context, holder.menu, Gravity.BOTTOM);
+                popupMenu.inflate(R.menu.download_cardview);
+                Menu menu = popupMenu.getMenu();
+
+                switch (item.status) {
+                    case ACTIVE:
+                        menu.removeItem(R.id.downloadCardViewMenu_resume);
+                        menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveUp);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveDown);
+                        break;
+                    case WAITING:
+                        menu.removeItem(R.id.downloadCardViewMenu_pause);
+                        menu.removeItem(R.id.downloadCardViewMenu_resume);
+                        menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        break;
+                    case PAUSED:
+                        menu.removeItem(R.id.downloadCardViewMenu_pause);
+                        menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveUp);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveDown);
+                        break;
+                    case COMPLETE:
+                        menu.removeItem(R.id.downloadCardViewMenu_pause);
+                        menu.removeItem(R.id.downloadCardViewMenu_resume);
+                        menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveUp);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveDown);
+                        break;
+                    case ERROR:
+                        menu.removeItem(R.id.downloadCardViewMenu_pause);
+                        menu.removeItem(R.id.downloadCardViewMenu_resume);
+                        menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveUp);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveDown);
+                        break;
+                    case REMOVED:
+                        if (item.isBitTorrent)
+                            menu.removeItem(R.id.downloadCardViewMenu_restart);
+                        menu.removeItem(R.id.downloadCardViewMenu_pause);
+                        menu.removeItem(R.id.downloadCardViewMenu_resume);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveUp);
+                        menu.removeItem(R.id.downloadCardViewMenu_moveDown);
+                        break;
+                }
+
+                popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
+                    @Override
+                    public boolean onMenuItemClick(MenuItem menuItem) {
+                        switch (menuItem.getItemId()) {
+                            case R.id.downloadCardViewMenu_remove:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.REMOVE);
+                                break;
+                            case R.id.downloadCardViewMenu_restart:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.RESTART);
+                                break;
+                            case R.id.downloadCardViewMenu_resume:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.RESUME);
+                                break;
+                            case R.id.downloadCardViewMenu_pause:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.PAUSE);
+                                break;
+                            case R.id.downloadCardViewMenu_moveDown:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.MOVE_DOWN);
+                                break;
+                            case R.id.downloadCardViewMenu_moveUp:
+                                actionMenu.onItemSelected(item, DownloadAction.ACTION.MOVE_UP);
+                                break;
+                        }
+                        return true;
+                    }
+                });
+                popupMenu.show();
+            }
+        });
+
+
+        // Non-Static
+        holder.donutProgress.setProgress(item.getProgress().intValue());
+        holder.downloadName.setText(item.getName());
+        holder.downloadStatus.setText(item.status.toString());
+        holder.detailsCompletedLength.setText(Html.fromHtml(context.getString(R.string.completed_length, Utils.DimensionFormatter(item.completedLength))));
+        holder.detailsUploadLength.setText(Html.fromHtml(context.getString(R.string.uploaded_length, Utils.DimensionFormatter(item.uploadedLength))));
+    }
+
+    @Override
+    public int getItemCount() {
+        return objs.size();
+    }
+
+    public interface IActionMore {
+        void onClick(View view, int position, Download item);
+    }
+
+    public interface IMenuSelected {
+        void onItemSelected(Download download, DownloadAction.ACTION action);
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/Main/UpdateUI.java b/app/src/main/java/com/gianlu/aria2app/Main/UpdateUI.java
index 6b0e4632..c54bf1a5 100644
--- a/app/src/main/java/com/gianlu/aria2app/Main/UpdateUI.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/UpdateUI.java
@@ -3,10 +3,7 @@ package com.gianlu.aria2app.Main;
 import android.app.Activity;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
-import android.widget.ListView;
 
-import com.gianlu.aria2app.DownloadsListing.Charting;
-import com.gianlu.aria2app.DownloadsListing.DownloadItem;
 import com.gianlu.aria2app.Google.UncaughtExceptionHandler;
 import com.gianlu.aria2app.NetIO.JTA2.Download;
 import com.gianlu.aria2app.NetIO.JTA2.GlobalStats;
@@ -14,31 +11,23 @@ import com.gianlu.aria2app.NetIO.JTA2.IDownload;
 import com.gianlu.aria2app.NetIO.JTA2.IStats;
 import com.gianlu.aria2app.NetIO.JTA2.JTA2;
 import com.gianlu.aria2app.Utils;
-import com.github.mikephil.charting.charts.LineChart;
-import com.github.mikephil.charting.data.Entry;
-import com.github.mikephil.charting.data.LineData;
-import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
 
 import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
-import java.text.SimpleDateFormat;
-import java.util.Locale;
 
 public class UpdateUI implements Runnable {
-    private LineChart chart;
-    private ListView downloadsListView;
+    private MainCardAdapter adapter;
     private boolean _shouldStop;
     private JTA2 jta2;
     private Activity context;
     private Integer updateRate;
     private boolean _stopped;
 
-    public UpdateUI(Activity context, final LineChart chart, ListView downloadsListView) {
+    public UpdateUI(Activity context, MainCardAdapter adapter) {
         _shouldStop = false;
         _stopped = false;
         this.context = context;
-        this.chart = chart;
-        this.downloadsListView = downloadsListView;
+        this.adapter = adapter;
 
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
         updateRate = Integer.parseInt(sharedPreferences.getString("a2_updateRate", "2")) * 1000;
@@ -52,12 +41,23 @@ public class UpdateUI implements Runnable {
         }
     }
 
-    public void stop() {
+    public static void stop(UpdateUI updateUI) {
+        if (updateUI != null) updateUI.stop();
+    }
+
+    public static void stop(UpdateUI updateUI, IThread handler) {
+        if (updateUI == null)
+            handler.stopped();
+        else
+            updateUI.stop(handler);
+    }
+
+    private void stop() {
         _shouldStop = true;
     }
 
     @SuppressWarnings("StatementWithEmptyBody")
-    public void stop(IThread handler) {
+    private void stop(IThread handler) {
         _shouldStop = true;
         while (!_stopped) ;
         handler.stopped();
@@ -67,35 +67,11 @@ public class UpdateUI implements Runnable {
     public void run() {
         Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(context));
 
-        final LineData data = chart.getData();
-        ILineDataSet downloadTmp = data.getDataSetByIndex(0);
-        ILineDataSet uploadTmp = data.getDataSetByIndex(1);
-
         while ((!_shouldStop) && jta2 != null) {
-            // ---- Update chart ---- //
-            if (downloadTmp == null) {
-                downloadTmp = Charting.InitDownloadSet(context);
-                data.addDataSet(downloadTmp);
-            }
-
-            if (uploadTmp == null) {
-                uploadTmp = Charting.InitUploadSet(context);
-                data.addDataSet(uploadTmp);
-            }
-
-            final ILineDataSet downloadSet = downloadTmp;
-            final ILineDataSet uploadSet = uploadTmp;
-
             jta2.getGlobalStat(new IStats() {
                 @Override
                 public void onStats(GlobalStats stats) {
-                    data.addXValue(new SimpleDateFormat("hh:mm:ss", Locale.getDefault()).format(new java.util.Date()));
-                    data.addEntry(new Entry(stats.downloadSpeed.floatValue(), downloadSet.getEntryCount()), 0);
-                    data.addEntry(new Entry(stats.uploadSpeed.floatValue(), uploadSet.getEntryCount()), 1);
-
-                    chart.notifyDataSetChanged();
-                    chart.setVisibleXRangeMaximum(90);
-                    chart.moveViewToX(data.getXValCount() - 91);
+                    // TODO: Update main chart
                 }
 
                 @Override
@@ -105,15 +81,12 @@ public class UpdateUI implements Runnable {
                 }
             });
 
-            // ---- Update ListView ---- //
-            for (int c = 0; c < downloadsListView.getCount(); c++) {
-                final DownloadItem downloadItem = (DownloadItem) downloadsListView.getItemAtPosition(c);
-                final String downloadGID = downloadItem.getDownloadGID();
-
-                jta2.tellStatus(downloadGID, new IDownload() {
+            for (int c = 0; c < adapter.getItemCount(); c++) {
+                final int finalC = c;
+                jta2.tellStatus(adapter.getItem(c).GID, new IDownload() {
                     @Override
                     public void onDownload(Download download) {
-                        downloadItem.download = download;
+                        adapter.updateItem(finalC, download);
                     }
 
                     @Override
@@ -122,13 +95,6 @@ public class UpdateUI implements Runnable {
                         Utils.UIToast(context, Utils.TOAST_MESSAGES.FAILED_GATHERING_INFORMATION, exception);
                     }
                 });
-
-                context.runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        downloadsListView.invalidateViews();
-                    }
-                });
             }
 
             try {
diff --git a/app/src/main/java/com/gianlu/aria2app/MainActivity.java b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
index edbecf5e..50dfaf04 100644
--- a/app/src/main/java/com/gianlu/aria2app/MainActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
@@ -7,31 +7,27 @@ import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v7.app.AlertDialog;
 import android.support.v7.app.AppCompatActivity;
-import android.util.ArrayMap;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
 import android.widget.ExpandableListView;
-import android.widget.ListView;
 
 import com.getbase.floatingactionbutton.FloatingActionButton;
-import com.gianlu.aria2app.DownloadsListing.Charting;
-import com.gianlu.aria2app.DownloadsListing.DownloadItem;
-import com.gianlu.aria2app.DownloadsListing.DownloadItemAdapter;
-import com.gianlu.aria2app.DownloadsListing.ILoadDownloads;
 import com.gianlu.aria2app.DownloadsListing.LoadDownloads;
 import com.gianlu.aria2app.Google.Analytics;
 import com.gianlu.aria2app.Google.UncaughtExceptionHandler;
 import com.gianlu.aria2app.Main.AddTorrentActivity;
 import com.gianlu.aria2app.Main.AddURIActivity;
 import com.gianlu.aria2app.Main.IThread;
+import com.gianlu.aria2app.Main.MainCardAdapter;
 import com.gianlu.aria2app.Main.UpdateUI;
 import com.gianlu.aria2app.NetIO.JTA2.Download;
 import com.gianlu.aria2app.NetIO.JTA2.IOption;
@@ -44,7 +40,6 @@ import com.gianlu.aria2app.Options.OptionChild;
 import com.gianlu.aria2app.Options.OptionHeader;
 import com.gianlu.aria2app.SelectProfile.SingleModeProfileItem;
 import com.gianlu.aria2app.Services.NotificationWebSocketService;
-import com.github.mikephil.charting.charts.LineChart;
 import com.google.android.gms.analytics.HitBuilders;
 
 import org.json.JSONException;
@@ -59,13 +54,12 @@ import java.util.Timer;
 import java.util.TimerTask;
 
 public class MainActivity extends AppCompatActivity {
-    private LineChart mainChart;
-    private ListView downloadsListView;
-    private UpdateUI updater;
+    private RecyclerView mainRecyclerView;
+    private List<Download.STATUS> filtered = new ArrayList<>();
+    private LoadDownloads.ILoading loadingHandler;
+    private UpdateUI updateUI;
     private LoadDownloads loadDownloads;
-    private ILoadDownloads IloadDownloads;
     private Timer reloadDownloadsListTimer;
-    private List<AlertDialog> dialogs = new ArrayList<>();
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -75,288 +69,197 @@ public class MainActivity extends AppCompatActivity {
         UncaughtExceptionHandler.application = getApplication();
         Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(this));
 
-        mainChart = (LineChart) findViewById(R.id.mainChart);
-        Charting.newChart(this, mainChart);
-        downloadsListView = (ListView) findViewById(R.id.mainDownloadsListView);
+        mainRecyclerView = (RecyclerView) findViewById(R.id.main_recyclerView);
+        assert mainRecyclerView != null;
 
-        if (updater != null) updater.stop();
+        LinearLayoutManager llm = new LinearLayoutManager(this);
+        llm.setOrientation(LinearLayoutManager.VERTICAL);
+        mainRecyclerView.setLayoutManager(llm);
 
+        final SwipeRefreshLayout swipeLayout = (SwipeRefreshLayout) findViewById(R.id.main_swipeLayout);
+        assert swipeLayout != null;
 
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
-        if (getIntent().getParcelableExtra("profile") != null) {
-            SingleModeProfileItem profile = getIntent().getParcelableExtra("profile");
-            setTitle(getResources().getString(R.string.app_name) + " - " + profile.getGlobalProfileName());
-
-            SharedPreferences.Editor editor = sharedPreferences.edit();
-            editor.putString("a2_profileName", profile.getProfileName())
-                    .putString("a2_serverIP", profile.getFullServerAddr())
-                    .putString("a2_authMethod", profile.getAuthMethod().name())
-                    .putString("a2_serverToken", profile.getServerToken())
-                    .putString("a2_serverUsername", profile.getServerUsername())
-                    .putString("a2_serverPassword", profile.getServerPassword())
-                    .putBoolean("a2_serverSSL", profile.isServerSSL())
-                    .putBoolean("a2_directDownload", profile.isDirectDownloadEnabled());
-            if (profile.isDirectDownloadEnabled()) {
-                editor.putString("dd_addr", profile.getDirectDownload().getAddress())
-                        .putBoolean("dd_auth", profile.getDirectDownload().isAuth())
-                        .putString("dd_user", profile.getDirectDownload().getUsername())
-                        .putString("dd_passwd", profile.getDirectDownload().getPassword());
-            }
-            editor.apply();
-        } else {
-            setTitle(getResources().getString(R.string.app_name) + " - " + sharedPreferences.getString("a2_profileName", getString(R.string.unknown_profile)));
-        }
-        Integer autoReloadDownloadsListRate = Integer.parseInt(sharedPreferences.getString("a2_downloadListRate", "0")) * 1000;
-        boolean enableNotifications = sharedPreferences.getBoolean("a2_enableNotifications", true);
-
-        // Start WebSocketing and enabling event manager
-        try {
-            WebSocketing.enableEventManager(this);
-        } catch (IOException | NoSuchAlgorithmException e) {
-            e.printStackTrace();
-        }
-
-        FloatingActionButton fabAddURI = (FloatingActionButton) findViewById(R.id.mainFAB_addURI);
-        assert fabAddURI != null;
-        fabAddURI.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                startActivity(new Intent(MainActivity.this, AddURIActivity.class));
-            }
-        });
-        FloatingActionButton fabAddTorrent = (FloatingActionButton) findViewById(R.id.mainFAB_addTorrent);
-        assert fabAddTorrent != null;
-        fabAddTorrent.setOnClickListener(new View.OnClickListener() {
+        swipeLayout.setColorSchemeResources(R.color.colorAccent, R.color.colorMetalink, R.color.colorTorrent);
+        swipeLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
             @Override
-            public void onClick(View view) {
-                startActivity(new Intent(MainActivity.this, AddTorrentActivity.class).putExtra("torrentMode", true));
-            }
-        });
-        FloatingActionButton fabAddMetalink = (FloatingActionButton) findViewById(R.id.mainFAB_addMetalink);
-        assert fabAddMetalink != null;
-        fabAddMetalink.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                startActivity(new Intent(MainActivity.this, AddTorrentActivity.class).putExtra("torrentMode", false));
+            public void onRefresh() {
+                reloadPage();
             }
         });
 
-        downloadsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+        final ProgressDialog pd = Utils.fastProgressDialog(this, R.string.loading_downloads, true, false);
+        loadingHandler = new LoadDownloads.ILoading() {
             @Override
-            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                DownloadItem item = (DownloadItem) adapterView.getItemAtPosition(i);
-                Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
-                        .putExtra("gid", item.download.GID)
-                        .putExtra("name", item.download.getName())
-                        .putExtra("status", item.download.status.name());
-                if (!(item.getDownloadStatus().equals(Download.STATUS.UNKNOWN) || item.getDownloadStatus().equals(Download.STATUS.ERROR)))
-                    startActivity(launchActivity);
+            public void onStarted() {
+                MainActivity.this.runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        pd.show();
+                    }
+                });
             }
-        });
-        downloadsListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+
             @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                final DownloadItem item = (DownloadItem) adapterView.getItemAtPosition(i);
-                if (!item.getDownloadStatus().equals(Download.STATUS.UNKNOWN)) {
-                    if (updater != null) updater.stop();
-
-                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
-                    builder.setTitle(item.download.getName());
-                    final Map<DownloadAction.ACTION, String> list = new ArrayMap<>();
-                    list.put(DownloadAction.ACTION.PAUSE, getString(R.string.pause));
-                    list.put(DownloadAction.ACTION.RESUME, getString(R.string.resume));
-                    list.put(DownloadAction.ACTION.REMOVE, getString(R.string.remove));
-                    list.put(DownloadAction.ACTION.MOVE_DOWN, getString(R.string.move_down));
-                    list.put(DownloadAction.ACTION.MOVE_UP, getString(R.string.move_up));
-                    list.put(DownloadAction.ACTION.RESTART, getString(R.string.restart));
-                    list.put(DownloadAction.ACTION.SHOW_MORE, getString(R.string.show_more));
-
-                    switch (item.download.status) {
-                        case ACTIVE:
-                            list.remove(DownloadAction.ACTION.RESUME);
-                            list.remove(DownloadAction.ACTION.RESTART);
-                            list.remove(DownloadAction.ACTION.MOVE_UP);
-                            list.remove(DownloadAction.ACTION.MOVE_DOWN);
-                            break;
-                        case WAITING:
-                            list.remove(DownloadAction.ACTION.PAUSE);
-                            list.remove(DownloadAction.ACTION.RESUME);
-                            list.remove(DownloadAction.ACTION.RESTART);
-                            break;
-                        case PAUSED:
-                            list.remove(DownloadAction.ACTION.PAUSE);
-                            list.remove(DownloadAction.ACTION.RESTART);
-                            list.remove(DownloadAction.ACTION.MOVE_UP);
-                            list.remove(DownloadAction.ACTION.MOVE_DOWN);
-                            break;
-                        case COMPLETE:
-                            list.remove(DownloadAction.ACTION.PAUSE);
-                            list.remove(DownloadAction.ACTION.RESUME);
-                            list.remove(DownloadAction.ACTION.RESTART);
-                            list.remove(DownloadAction.ACTION.MOVE_UP);
-                            list.remove(DownloadAction.ACTION.MOVE_DOWN);
-                            break;
-                        case ERROR:
-                            list.remove(DownloadAction.ACTION.PAUSE);
-                            list.remove(DownloadAction.ACTION.RESUME);
-                            list.remove(DownloadAction.ACTION.RESTART);
-                            list.remove(DownloadAction.ACTION.SHOW_MORE);
-                            list.remove(DownloadAction.ACTION.MOVE_UP);
-                            list.remove(DownloadAction.ACTION.MOVE_DOWN);
-                            break;
-                        case REMOVED:
-                            if (item.download.isBitTorrent)
-                                list.remove(DownloadAction.ACTION.RESTART);
-                            list.remove(DownloadAction.ACTION.PAUSE);
-                            list.remove(DownloadAction.ACTION.RESUME);
-                            list.remove(DownloadAction.ACTION.SHOW_MORE);
-                            list.remove(DownloadAction.ACTION.MOVE_UP);
-                            list.remove(DownloadAction.ACTION.MOVE_DOWN);
-                            break;
+            public void onLoaded(List<Download> downloads) {
+                final MainCardAdapter adapter = new MainCardAdapter(MainActivity.this, downloads, new MainCardAdapter.IActionMore() {
+                    @Override
+                    public void onClick(View view, int position, Download item) {
+                        Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
+                                .putExtra("gid", item.GID)
+                                .putExtra("name", item.getName())
+                                .putExtra("status", item.status.name());
+                        if (!(item.status.equals(Download.STATUS.UNKNOWN) || item.status.equals(Download.STATUS.ERROR)))
+                            MainActivity.this.startActivity(launchActivity);
                     }
+                }, new MainCardAdapter.IMenuSelected() {
+                    @Override
+                    public void onItemSelected(Download item, DownloadAction.ACTION action) {
+                        DownloadAction downloadAction;
+                        try {
+                            downloadAction = new DownloadAction(MainActivity.this);
+                        } catch (IOException | NoSuchAlgorithmException ex) {
+                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.WS_EXCEPTION, ex);
+                            return;
+                        }
 
-                    builder.setAdapter(new ArrayAdapter<>(MainActivity.this, android.R.layout.simple_list_item_1, new ArrayList<>(list.values())), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            DownloadAction downloadAction;
-                            try {
-                                downloadAction = new DownloadAction(MainActivity.this);
-                            } catch (IOException | NoSuchAlgorithmException ex) {
-                                Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.WS_EXCEPTION, ex);
-                                return;
+                        DownloadAction.IMove iMove = new DownloadAction.IMove() {
+                            @Override
+                            public void onMoved(String gid) {
+                                Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.MOVED, gid);
                             }
 
-                            DownloadAction.ACTION action = new ArrayList<>(list.keySet()).get(i);
-                            DownloadAction.IMove iMove = new DownloadAction.IMove() {
-                                @Override
-                                public void onMoved(String gid) {
-                                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.MOVED, gid);
-                                }
+                            @Override
+                            public void onException(Exception ex) {
+                                Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_CHANGE_POSITION, ex);
+                            }
+                        };
 
-                                @Override
-                                public void onException(Exception ex) {
-                                    Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_CHANGE_POSITION, ex);
-                                }
-                            };
-
-                            switch (action) {
-                                case PAUSE:
-                                    downloadAction.pause(MainActivity.this, item.getDownloadGID(), new DownloadAction.IPause() {
-                                        @Override
-                                        public void onPaused(String gid) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.PAUSED, gid);
-                                        }
-
-                                        @Override
-                                        public void onException(Exception ex) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_PAUSE, ex);
-                                        }
-                                    });
-                                    break;
-                                case REMOVE:
-                                    downloadAction.remove(MainActivity.this, item.getDownloadGID(), item.download.status, new DownloadAction.IRemove() {
-                                        @Override
-                                        public void onRemoved(String gid) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.REMOVED, gid);
-                                        }
-
-                                        @Override
-                                        public void onRemovedResult(String gid) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.REMOVED_RESULT, gid);
-                                        }
-
-                                        @Override
-                                        public void onException(boolean b, Exception ex) {
-                                            if (b)
-                                                Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_REMOVE, ex);
-                                            else
-                                                Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_REMOVE_RESULT, ex);
-                                        }
-                                    });
-                                    break;
-                                case RESTART:
-                                    downloadAction.restart(item.getDownloadGID(), new DownloadAction.IRestart() {
-                                        @Override
-                                        public void onRestarted(String gid) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.RESTARTED);
-                                        }
-
-                                        @Override
-                                        public void onException(Exception ex) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_ADD_DOWNLOAD, ex);
-                                        }
-
-                                        @Override
-                                        public void onRemoveResultException(Exception ex) {
+                        switch (action) {
+                            case PAUSE:
+                                downloadAction.pause(MainActivity.this, item.GID, new DownloadAction.IPause() {
+                                    @Override
+                                    public void onPaused(String gid) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.PAUSED, gid);
+                                    }
+
+                                    @Override
+                                    public void onException(Exception ex) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_PAUSE, ex);
+                                    }
+                                });
+                                break;
+                            case REMOVE:
+                                downloadAction.remove(MainActivity.this, item.GID, item.status, new DownloadAction.IRemove() {
+                                    @Override
+                                    public void onRemoved(String gid) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.REMOVED, gid);
+                                    }
+
+                                    @Override
+                                    public void onRemovedResult(String gid) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.REMOVED_RESULT, gid);
+                                    }
+
+                                    @Override
+                                    public void onException(boolean b, Exception ex) {
+                                        if (b)
+                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_REMOVE, ex);
+                                        else
                                             Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_REMOVE_RESULT, ex);
-                                        }
-
-                                        @Override
-                                        public void onGatheringInformationException(Exception ex) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_GATHERING_INFORMATION, ex);
-                                        }
-                                    });
-                                    break;
-                                case RESUME:
-                                    downloadAction.unpause(item.getDownloadGID(), new DownloadAction.IUnpause() {
-                                        @Override
-                                        public void onUnpaused(String gid) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.RESUMED, gid);
-                                        }
-
-                                        @Override
-                                        public void onException(Exception ex) {
-                                            Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_UNPAUSE, ex);
-                                        }
-                                    });
-                                    break;
-                                case MOVE_DOWN:
-                                    downloadAction.moveDown(item.getDownloadGID(), iMove);
-                                    break;
-                                case MOVE_UP:
-                                    downloadAction.moveUp(item.getDownloadGID(), iMove);
-                                    break;
-                                case SHOW_MORE:
-                                    Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
-                                            .putExtra("gid", item.download.GID)
-                                            .putExtra("status", item.download.status.name())
-                                            .putExtra("name", item.download.getName());
-                                    startActivity(launchActivity);
-                                    break;
-                            }
-                        }
-                    });
+                                    }
+                                });
+                                break;
+                            case RESTART:
+                                downloadAction.restart(item.GID, new DownloadAction.IRestart() {
+                                    @Override
+                                    public void onRestarted(String gid) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.RESTARTED);
+                                    }
 
-                    AlertDialog dialog = builder.create();
-                    dialogs.add(dialog);
-                    dialog.show();
-                }
-                return true;
-            }
-        });
+                                    @Override
+                                    public void onException(Exception ex) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_ADD_DOWNLOAD, ex);
+                                    }
+
+                                    @Override
+                                    public void onRemoveResultException(Exception ex) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_REMOVE_RESULT, ex);
+                                    }
+
+                                    @Override
+                                    public void onGatheringInformationException(Exception ex) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_GATHERING_INFORMATION, ex);
+                                    }
+                                });
+                                break;
+                            case RESUME:
+                                downloadAction.unpause(item.GID, new DownloadAction.IUnpause() {
+                                    @Override
+                                    public void onUnpaused(String gid) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.RESUMED, gid);
+                                    }
+
+                                    @Override
+                                    public void onException(Exception ex) {
+                                        Utils.UIToast(MainActivity.this, Utils.TOAST_MESSAGES.FAILED_UNPAUSE, ex);
+                                    }
+                                });
+                                break;
+                            case MOVE_DOWN:
+                                downloadAction.moveDown(item.GID, iMove);
+                                break;
+                            case MOVE_UP:
+                                downloadAction.moveUp(item.GID, iMove);
+                                break;
+                        }
+                    }
+                });
 
-        final ProgressDialog pd = Utils.fastProgressDialog(this, R.string.loading_downloads, true, false);
-        IloadDownloads = new ILoadDownloads() {
-            @Override
-            public void onStart() {
                 MainActivity.this.runOnUiThread(new Runnable() {
                     @Override
                     public void run() {
-                        if (!MainActivity.this.isFinishing()) pd.show();
+                        mainRecyclerView.setAdapter(adapter);
+
+                        UpdateUI.stop(updateUI, new IThread() {
+                            @Override
+                            public void stopped() {
+                                updateUI = new UpdateUI(MainActivity.this, (MainCardAdapter) mainRecyclerView.getAdapter());
+                                new Thread(updateUI).start();
+
+                                try {
+                                    pd.dismiss();
+                                    swipeLayout.setRefreshing(false);
+                                } catch (Exception ex) {
+                                    ex.printStackTrace();
+                                }
+
+                                if (getIntent().getStringExtra("gid") != null) {
+                                    Download item = ((MainCardAdapter) mainRecyclerView.getAdapter()).getItem(getIntent().getStringExtra("gid"));
+                                    Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
+                                            .putExtra("gid", item.GID)
+                                            .putExtra("status", item.status.name())
+                                            .putExtra("name", item.getName());
+
+                                    if (item.status == Download.STATUS.UNKNOWN) return;
+                                    startActivity(launchActivity);
+                                }
+                            }
+                        });
                     }
                 });
             }
 
             @Override
-            public void onException(boolean queueing, Exception ex) {
+            public void onException(boolean queuing, Exception ex) {
                 try {
-                    if (pd.isShowing()) pd.dismiss();
+                    pd.dismiss();
+                    swipeLayout.setRefreshing(false);
                 } catch (Exception exx) {
                     exx.printStackTrace();
                 }
 
-                if (queueing) {
-                    loadDownloads = new LoadDownloads(MainActivity.this, downloadsListView, IloadDownloads);
+                if (queuing) {
+                    loadDownloads = new LoadDownloads(MainActivity.this, this);
                     new Thread(loadDownloads).start();
                     return;
                 }
@@ -384,60 +287,71 @@ public class MainActivity extends AppCompatActivity {
                         builder.create().show();
                     }
                 });
-
             }
+        };
 
-            @Override
-            public void onEnd() {
-                if (updater != null) {
-                    updater.stop(new IThread() {
-                        @Override
-                        public void stopped() {
-                            Charting.newChart(MainActivity.this, mainChart);
-                            updater = new UpdateUI(MainActivity.this, mainChart, downloadsListView);
-                            new Thread(updater).start();
-                            try {
-                                if (pd.isShowing()) pd.dismiss();
-                            } catch (Exception ex) {
-                                ex.printStackTrace();
-                            }
-
-                            if (getIntent().getStringExtra("gid") == null) return;
-
-                            Download item = ((DownloadItemAdapter) downloadsListView.getAdapter()).getItem(getIntent().getStringExtra("gid")).download;
-                            Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
-                                    .putExtra("gid", item.GID)
-                                    .putExtra("status", item.status.name())
-                                    .putExtra("name", item.getName());
+        UpdateUI.stop(updateUI);
 
-                            if (item.status == Download.STATUS.UNKNOWN) return;
-                            startActivity(launchActivity);
-                        }
-                    });
-                } else {
-                    Charting.newChart(MainActivity.this, mainChart);
-                    updater = new UpdateUI(MainActivity.this, mainChart, downloadsListView);
-                    new Thread(updater).start();
-                    try {
-                        if (pd.isShowing()) pd.dismiss();
-                    } catch (Exception ex) {
-                        ex.printStackTrace();
-                    }
+        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
+        if (getIntent().getParcelableExtra("profile") != null) {
+            SingleModeProfileItem profile = getIntent().getParcelableExtra("profile");
+            setTitle(getResources().getString(R.string.app_name) + " - " + profile.getGlobalProfileName());
 
-                    if (getIntent().getStringExtra("gid") == null) return;
+            SharedPreferences.Editor editor = sharedPreferences.edit();
+            editor.putString("a2_profileName", profile.getProfileName())
+                    .putString("a2_serverIP", profile.getFullServerAddr())
+                    .putString("a2_authMethod", profile.getAuthMethod().name())
+                    .putString("a2_serverToken", profile.getServerToken())
+                    .putString("a2_serverUsername", profile.getServerUsername())
+                    .putString("a2_serverPassword", profile.getServerPassword())
+                    .putBoolean("a2_serverSSL", profile.isServerSSL())
+                    .putBoolean("a2_directDownload", profile.isDirectDownloadEnabled());
+            if (profile.isDirectDownloadEnabled()) {
+                editor.putString("dd_addr", profile.getDirectDownload().getAddress())
+                        .putBoolean("dd_auth", profile.getDirectDownload().isAuth())
+                        .putString("dd_user", profile.getDirectDownload().getUsername())
+                        .putString("dd_passwd", profile.getDirectDownload().getPassword());
+            }
+            editor.apply();
+        } else {
+            setTitle(getResources().getString(R.string.app_name) + " - " + sharedPreferences.getString("a2_profileName", getString(R.string.unknown_profile)));
+        }
+        Integer autoReloadDownloadsListRate = Integer.parseInt(sharedPreferences.getString("a2_downloadListRate", "0")) * 1000;
+        boolean enableNotifications = sharedPreferences.getBoolean("a2_enableNotifications", true);
 
-                    Download item = ((DownloadItemAdapter) downloadsListView.getAdapter()).getItem(getIntent().getStringExtra("gid")).download;
-                    Intent launchActivity = new Intent(MainActivity.this, MoreAboutDownloadActivity.class)
-                            .putExtra("gid", item.GID)
-                            .putExtra("status", item.status.name())
-                            .putExtra("name", item.getName());
+        // Start WebSocketing and enabling event manager
+        try {
+            WebSocketing.enableEventManager(this);
+        } catch (IOException | NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        }
 
-                    if (item.status == Download.STATUS.UNKNOWN) return;
-                    startActivity(launchActivity);
-                }
+        FloatingActionButton fabAddURI = (FloatingActionButton) findViewById(R.id.mainFab_addURI);
+        assert fabAddURI != null;
+        fabAddURI.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AddURIActivity.class));
             }
-        };
-        loadDownloads = new LoadDownloads(this, downloadsListView, IloadDownloads);
+        });
+        FloatingActionButton fabAddTorrent = (FloatingActionButton) findViewById(R.id.mainFab_addTorrent);
+        assert fabAddTorrent != null;
+        fabAddTorrent.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AddTorrentActivity.class).putExtra("torrentMode", true));
+            }
+        });
+        FloatingActionButton fabAddMetalink = (FloatingActionButton) findViewById(R.id.mainFab_addMetalink);
+        assert fabAddMetalink != null;
+        fabAddMetalink.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AddTorrentActivity.class).putExtra("torrentMode", false));
+            }
+        });
+
+        loadDownloads = new LoadDownloads(this, loadingHandler);
         new Thread(loadDownloads).start();
 
         if (autoReloadDownloadsListRate != 0) {
@@ -445,10 +359,10 @@ public class MainActivity extends AppCompatActivity {
             reloadDownloadsListTimer.schedule(new TimerTask() {
                 @Override
                 public void run() {
-                    if (updater != null) updater.stop(new IThread() {
+                    UpdateUI.stop(updateUI, new IThread() {
                         @Override
                         public void stopped() {
-                            loadDownloads = new LoadDownloads(MainActivity.this, downloadsListView, IloadDownloads);
+                            loadDownloads = new LoadDownloads(MainActivity.this, loadingHandler);
                             new Thread(loadDownloads).start();
                         }
                     });
@@ -479,8 +393,6 @@ public class MainActivity extends AppCompatActivity {
     protected void onDestroy() {
         super.onDestroy();
         if (reloadDownloadsListTimer != null) reloadDownloadsListTimer.cancel();
-        if (updater != null) updater.stop();
-        for (AlertDialog dialog : dialogs) dialog.dismiss();
         finishActivity(0);
     }
 
@@ -488,26 +400,22 @@ public class MainActivity extends AppCompatActivity {
     protected void onStop() {
         super.onStop();
         if (reloadDownloadsListTimer != null) reloadDownloadsListTimer.cancel();
-        if (updater != null) updater.stop();
-        for (AlertDialog dialog : dialogs) dialog.dismiss();
         finishActivity(0);
     }
 
     public void reloadPage() {
-        if (updater != null) {
-            updater.stop(new IThread() {
-                @Override
-                public void stopped() {
-                    Charting.newChart(MainActivity.this, mainChart);
-                    loadDownloads = new LoadDownloads(MainActivity.this, downloadsListView, IloadDownloads);
-                    new Thread(loadDownloads).start();
-                }
-            });
-        } else {
-            Charting.newChart(MainActivity.this, mainChart);
-            loadDownloads = new LoadDownloads(this, downloadsListView, IloadDownloads);
-            new Thread(loadDownloads).start();
-        }
+        reloadPage(null);
+    }
+
+    public void reloadPage(final IThread handler) {
+        UpdateUI.stop(updateUI, new IThread() {
+            @Override
+            public void stopped() {
+                if (handler != null) handler.stopped();
+                loadDownloads = new LoadDownloads(MainActivity.this, loadingHandler);
+                new Thread(loadDownloads).start();
+            }
+        });
     }
 
     @Override
@@ -528,51 +436,50 @@ public class MainActivity extends AppCompatActivity {
             // Filters
             case R.id.a2menu_active:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.ACTIVE);
+                    filtered.add(Download.STATUS.ACTIVE);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.ACTIVE);
-                break;
+                    filtered.remove(Download.STATUS.ACTIVE);
             case R.id.a2menu_paused:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.PAUSED);
+                    filtered.add(Download.STATUS.PAUSED);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.PAUSED);
+                    filtered.remove(Download.STATUS.PAUSED);
                 break;
             case R.id.a2menu_error:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.ERROR);
+                    filtered.add(Download.STATUS.ERROR);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.ERROR);
+                    filtered.remove(Download.STATUS.ERROR);
                 break;
             case R.id.a2menu_waiting:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.WAITING);
+                    filtered.add(Download.STATUS.WAITING);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.WAITING);
+                    filtered.remove(Download.STATUS.WAITING);
                 break;
             case R.id.a2menu_complete:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.COMPLETE);
+                    filtered.add(Download.STATUS.COMPLETE);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.COMPLETE);
+                    filtered.remove(Download.STATUS.COMPLETE);
                 break;
             case R.id.a2menu_removed:
                 item.setChecked(!item.isChecked());
-                if (downloadsListView.getAdapter() == null) break;
+
                 if (item.isChecked())
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).removeFilter(Download.STATUS.REMOVED);
+                    filtered.add(Download.STATUS.REMOVED);
                 else
-                    ((DownloadItemAdapter) downloadsListView.getAdapter()).addFilter(Download.STATUS.REMOVED);
+                    filtered.remove(Download.STATUS.REMOVED);
                 break;
         }
         return super.onOptionsItemSelected(item);
@@ -678,7 +585,6 @@ public class MainActivity extends AppCompatActivity {
                     @Override
                     public void run() {
                         final AlertDialog dialog = builder.create();
-                        dialogs.add(dialog);
                         dialog.show();
                         dialog.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);
 
diff --git a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/UpdateUI.java b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/UpdateUI.java
index 7d8ad3d5..2737ea15 100644
--- a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/UpdateUI.java
+++ b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/UpdateUI.java
@@ -7,14 +7,11 @@ import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.res.Resources;
 import android.preference.PreferenceManager;
-import android.support.annotation.NonNull;
 import android.support.v7.app.AlertDialog;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
-import android.widget.RelativeLayout;
 import android.widget.TextView;
 
 import com.gianlu.aria2app.DownloadsListing.Charting;
@@ -26,6 +23,7 @@ import com.gianlu.aria2app.FileListing.FilesTree;
 import com.gianlu.aria2app.Google.Analytics;
 import com.gianlu.aria2app.Google.UncaughtExceptionHandler;
 import com.gianlu.aria2app.Main.IThread;
+import com.gianlu.aria2app.MoreAboutDownloadActivity;
 import com.gianlu.aria2app.NetIO.JTA2.BitTorrent;
 import com.gianlu.aria2app.NetIO.JTA2.Download;
 import com.gianlu.aria2app.NetIO.JTA2.File;
@@ -35,7 +33,6 @@ import com.gianlu.aria2app.NetIO.JTA2.ISuccess;
 import com.gianlu.aria2app.NetIO.JTA2.JTA2;
 import com.gianlu.aria2app.R;
 import com.gianlu.aria2app.Utils;
-import com.github.mikephil.charting.charts.LineChart;
 import com.github.mikephil.charting.data.Entry;
 import com.github.mikephil.charting.data.LineData;
 import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
@@ -61,28 +58,9 @@ public class UpdateUI implements Runnable {
     private boolean enableAnimations;
     private JTA2 jta2;
     private AndroidTreeView treeView;
-    private String downloadGID;
-    private RelativeLayout treeNodeContainer;
-    private LineChart chart;
-    private TextView downloadSpeed;
-    private TextView uploadSpeed;
-    private TextView time;
-    private TextView percentage;
-    private TextView completedLength;
-    private TextView totalLength;
-    private TextView uploadedLength;
-    private TextView piecesNumber;
-    private TextView piecesLength;
-    private TextView connections;
-    private TextView gidd;
-    private TextView seedersNumber;
-    private RelativeLayout bitTorrentContainer;
-    private TextView bitTorrentMode;
-    private TextView bitTorrentAnnounceList;
-    private TextView infoHash;
-    private TextView seeder;
-    private TextView bitTorrentComment;
-    private TextView bitTorrentCreationDate;
+    private String gid;
+
+
     private Resources res;
     private boolean directDownloadEnabled;
     private int updateTreeViewCount = 1;
@@ -91,39 +69,20 @@ public class UpdateUI implements Runnable {
     private int updateRate;
     private IFirstUpdate handler;
     private boolean canWrite;
+    private MoreAboutDownloadActivity.ViewHolder viewHolder;
     private boolean firstRun = true;
 
-    public UpdateUI(Activity context, IFirstUpdate handler, boolean canWrite, String gid, LineChart chart, @NonNull ViewGroup rootView) {
+
+    public UpdateUI(Activity context, IFirstUpdate handler, boolean canWrite, String gid, MoreAboutDownloadActivity.ViewHolder viewHolder) {
         this.handler = handler;
         this.canWrite = canWrite;
+        this.viewHolder = viewHolder;
         _shouldStop = false;
         _stopped = false;
         this.context = context;
-        this.chart = chart;
-        this.downloadGID = gid;
-
-        Charting.newChart(chart);
-
-        treeNodeContainer = (RelativeLayout) rootView.findViewById(R.id.moreAboutDownload_treeViewContainer);
-        downloadSpeed = (TextView) rootView.findViewById(R.id.moreAboutDownload_downloadSpeed);
-        uploadSpeed = (TextView) rootView.findViewById(R.id.moreAboutDownload_uploadSpeed);
-        time = (TextView) rootView.findViewById(R.id.moreAboutDownload_time);
-        percentage = (TextView) rootView.findViewById(R.id.moreAboutDownload_percentage);
-        completedLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_completedLength);
-        totalLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_totalLength);
-        uploadedLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_uploadedLength);
-        piecesNumber = (TextView) rootView.findViewById(R.id.moreAboutDownload_piecesNumber);
-        piecesLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_piecesLength);
-        connections = (TextView) rootView.findViewById(R.id.moreAboutDownload_connections);
-        gidd = (TextView) rootView.findViewById(R.id.moreAboutDownload_gid);
-        seedersNumber = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentSeedersNumber);
-        bitTorrentContainer = (RelativeLayout) rootView.findViewById(R.id.moreAboutDownload_bitTorrentContainer);
-        bitTorrentMode = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentMode);
-        bitTorrentAnnounceList = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentAnnounceList);
-        infoHash = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentInfoHash);
-        seeder = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentSeeder);
-        bitTorrentComment = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentComment);
-        bitTorrentCreationDate = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentCreationDate);
+        this.gid = gid;
+
+        viewHolder.chart = Charting.setupChart(viewHolder.chart);
 
         //sharedPreferences
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
@@ -142,6 +101,17 @@ public class UpdateUI implements Runnable {
         res = context.getResources();
     }
 
+    public static void stop(UpdateUI updateUI) {
+        if (updateUI != null) updateUI.stop();
+    }
+
+    public static void stop(UpdateUI updateUI, IThread handler) {
+        if (updateUI == null)
+            handler.stopped();
+        else
+            updateUI.stop(handler);
+    }
+
     public void stop() {
         _shouldStop = true;
     }
@@ -158,7 +128,7 @@ public class UpdateUI implements Runnable {
         Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(context));
 
         while ((!_shouldStop) && jta2 != null) {
-            jta2.tellStatus(downloadGID, new IDownload() {
+            jta2.tellStatus(gid, new IDownload() {
                 @Override
                 public void onDownload(final Download download) {
                     final String timeRemaining;
@@ -202,64 +172,53 @@ public class UpdateUI implements Runnable {
                     context.runOnUiThread(new Runnable() {
                         @Override
                         public void run() {
-                            downloadSpeed.setText(Utils.SpeedFormatter(download.downloadSpeed));
-                            uploadSpeed.setText(Utils.SpeedFormatter(download.uploadSpeed));
-                            time.setText(timeRemaining);
-                            percentage.setText(download.getPercentage());
-                            completedLength.setText(String.format(Locale.getDefault(), res.getString(R.string.completed_length), Utils.DimensionFormatter(download.completedLength)));
-                            totalLength.setText(String.format(Locale.getDefault(), res.getString(R.string.total_length), Utils.DimensionFormatter(download.length)));
-                            uploadedLength.setText(String.format(Locale.getDefault(), res.getString(R.string.uploaded_length), Utils.DimensionFormatter(download.uploadedLength)));
-                            piecesNumber.setText(String.format(Locale.getDefault(), res.getString(R.string.pieces), download.numPieces));
-                            piecesLength.setText(String.format(Locale.getDefault(), res.getString(R.string.pieces_length), Utils.DimensionFormatter(download.pieceLength)));
-                            connections.setText(String.format(Locale.getDefault(), res.getString(R.string.connections), download.connections));
-                            gidd.setText(String.format(Locale.getDefault(), res.getString(R.string.gid), download.GID));
+                            viewHolder.downloadSpeed.setText(Utils.SpeedFormatter(download.downloadSpeed));
+                            viewHolder.uploadSpeed.setText(Utils.SpeedFormatter(download.uploadSpeed));
+                            viewHolder.time.setText(timeRemaining);
+                            viewHolder.percentage.setText(download.getPercentage());
+                            viewHolder.completedLength.setText(String.format(Locale.getDefault(), res.getString(R.string.completed_length), Utils.DimensionFormatter(download.completedLength)));
+                            viewHolder.totalLength.setText(String.format(Locale.getDefault(), res.getString(R.string.total_length), Utils.DimensionFormatter(download.length)));
+                            viewHolder.uploadedLength.setText(String.format(Locale.getDefault(), res.getString(R.string.uploaded_length), Utils.DimensionFormatter(download.uploadedLength)));
+                            viewHolder.piecesNumber.setText(String.format(Locale.getDefault(), res.getString(R.string.pieces), download.numPieces));
+                            viewHolder.piecesLength.setText(String.format(Locale.getDefault(), res.getString(R.string.pieces_length), Utils.DimensionFormatter(download.pieceLength)));
+                            viewHolder.connections.setText(String.format(Locale.getDefault(), res.getString(R.string.connections), download.connections));
+                            viewHolder.gid.setText(String.format(Locale.getDefault(), res.getString(R.string.gid), download.GID));
 
 
                             if (download.isBitTorrent) {
-                                seedersNumber.setText(String.format(Locale.getDefault(), res.getString(R.string.numSeeder), download.numSeeders));
-                                infoHash.setText(String.format(Locale.getDefault(), res.getString(R.string.info_hash), download.infoHash));
-                                seeder.setText(String.format(Locale.getDefault(), res.getString(R.string.seeder), String.valueOf(download.seeder)));
-                                bitTorrentCreationDate.setText(String.format(Locale.getDefault(), res.getString(R.string.creation_date), download.bitTorrent.creationDate));
-                                bitTorrentComment.setText(String.format(Locale.getDefault(), res.getString(R.string.comment), download.bitTorrent.creationDate));
-                                bitTorrentMode.setText(String.format(Locale.getDefault(), res.getString(R.string.mode), download.bitTorrent.mode.equals(BitTorrent.MODE.SINGLE) ? "single" : "multi"));
-                                bitTorrentAnnounceList.setText(loadBTAnnounceList(download.bitTorrent));
+                                viewHolder.seedersNumber.setText(String.format(Locale.getDefault(), res.getString(R.string.numSeeder), download.numSeeders));
+                                viewHolder.infoHash.setText(String.format(Locale.getDefault(), res.getString(R.string.info_hash), download.infoHash));
+                                viewHolder.seeder.setText(String.format(Locale.getDefault(), res.getString(R.string.seeder), String.valueOf(download.seeder)));
+                                viewHolder.bitTorrentCreationDate.setText(String.format(Locale.getDefault(), res.getString(R.string.creation_date), download.bitTorrent.creationDate));
+                                viewHolder.bitTorrentComment.setText(String.format(Locale.getDefault(), res.getString(R.string.comment), download.bitTorrent.creationDate));
+                                viewHolder.bitTorrentMode.setText(String.format(Locale.getDefault(), res.getString(R.string.mode), download.bitTorrent.mode.equals(BitTorrent.MODE.SINGLE) ? "single" : "multi"));
+                                viewHolder.bitTorrentAnnounceList.setText(loadBTAnnounceList(download.bitTorrent));
                             } else {
-                                bitTorrentContainer.removeAllViews();
+                                viewHolder.bitTorrentContainer.removeAllViews();
                             }
                         }
                     });
 
 
                     // Chart
-                    chart.setNoDataText(noDataTextChart);
+                    viewHolder.chart.setNoDataText(noDataTextChart);
                     if (download.status.equals(Download.STATUS.ACTIVE)) {
-                        final LineData data = chart.getData();
+                        final LineData data = viewHolder.chart.getData();
                         ILineDataSet downloadSet = data.getDataSetByIndex(0);
                         ILineDataSet uploadSet = data.getDataSetByIndex(1);
 
-                        if (downloadSet == null) {
-                            downloadSet = Charting.InitDownloadSet(context);
-                            data.addDataSet(downloadSet);
-                        }
-
-                        if (uploadSet == null) {
-                            uploadSet = Charting.InitUploadSet(context);
-                            data.addDataSet(uploadSet);
-                        }
-
-
                         data.addXValue(new SimpleDateFormat("hh:mm:ss", Locale.getDefault()).format(new java.util.Date()));
                         data.addEntry(new Entry(download.downloadSpeed, downloadSet.getEntryCount()), 0);
                         data.addEntry(new Entry(download.uploadSpeed, uploadSet.getEntryCount()), 1);
 
-                        chart.notifyDataSetChanged();
-                        chart.setVisibleXRangeMaximum(90);
-                        chart.moveViewToX(data.getXValCount() - 91);
+                        viewHolder.chart.notifyDataSetChanged();
+                        viewHolder.chart.setVisibleXRangeMaximum(90);
+                        viewHolder.chart.moveViewToX(data.getXValCount() - 91);
                     } else {
                         context.runOnUiThread(new Runnable() {
                             @Override
                             public void run() {
-                                chart.clear();
+                                viewHolder.chart.clear();
                             }
                         });
                     }
@@ -283,8 +242,8 @@ public class UpdateUI implements Runnable {
                             context.runOnUiThread(new Runnable() {
                                 @Override
                                 public void run() {
-                                    treeNodeContainer.removeAllViews();
-                                    treeNodeContainer.addView(treeRealView);
+                                    viewHolder.treeNodeContainer.removeAllViews();
+                                    viewHolder.treeNodeContainer.addView(treeRealView);
                                 }
                             });
                         }
@@ -377,7 +336,7 @@ public class UpdateUI implements Runnable {
             @Override
             public void onCheckedChanged(CompoundButton compoundButton, final boolean b) {
                 final List<Integer> indexes = new ArrayList<>();
-                jta2.getOption(downloadGID, new IOption() {
+                jta2.getOption(gid, new IOption() {
                     @Override
                     public void onOptions(Map<String, String> options) {
                         if (!(options.get("select-file") == null || options.get("select-file").isEmpty())) {
@@ -408,7 +367,7 @@ public class UpdateUI implements Runnable {
                         Map<String, String> newerOptions = new HashMap<>();
                         newerOptions.put("select-file", newerValue);
 
-                        jta2.changeOption(downloadGID, newerOptions, new ISuccess() {
+                        jta2.changeOption(gid, newerOptions, new ISuccess() {
                             @Override
                             public void onSuccess() {
                                 Utils.UIToast(context, (b ? Utils.TOAST_MESSAGES.FILE_INCLUDED : Utils.TOAST_MESSAGES.FILE_EXCLUDED), "Index: " + file.index);
@@ -603,7 +562,7 @@ public class UpdateUI implements Runnable {
             public void onCheckedChanged(CompoundButton compoundButton, final boolean b) {
                 final List<Integer> indexes = new ArrayList<>();
 
-                jta2.getOption(downloadGID, new IOption() {
+                jta2.getOption(gid, new IOption() {
                     @Override
                     public void onOptions(Map<String, String> options) {
                         if (!(options.get("select-file") == null || options.get("select-file").isEmpty())) {
@@ -634,7 +593,7 @@ public class UpdateUI implements Runnable {
                         Map<String, String> newerOptions = new HashMap<>();
                         newerOptions.put("select-file", newerValue);
 
-                        jta2.changeOption(downloadGID, newerOptions, new ISuccess() {
+                        jta2.changeOption(gid, newerOptions, new ISuccess() {
                             @Override
                             public void onSuccess() {
                                 Utils.UIToast(context, (b ? Utils.TOAST_MESSAGES.FILES_INCLUDED : Utils.TOAST_MESSAGES.FILES_EXCLUDED), "Folder: " + directory.name);
@@ -672,11 +631,7 @@ public class UpdateUI implements Runnable {
             announces += "\n    " + announce;
         }
 
-        if (announces.equals("")) {
-            return res.getQuantityString(R.plurals.announceList, 0);
-        } else {
-            return String.format(Locale.getDefault(), res.getQuantityString(R.plurals.announceList, 1), announces);
-        }
+        return announces;
     }
 
     public interface IFirstUpdate {
diff --git a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownloadActivity.java b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownloadActivity.java
index dc24b074..11e8f836 100644
--- a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownloadActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownloadActivity.java
@@ -16,12 +16,12 @@ import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.widget.ExpandableListView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
 
-import com.gianlu.aria2app.DownloadsListing.Charting;
 import com.gianlu.aria2app.Google.Analytics;
 import com.gianlu.aria2app.Main.IThread;
 import com.gianlu.aria2app.MoreAboutDownload.UpdateUI;
@@ -49,8 +49,7 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
     private UpdateUI updateUI;
     private String gid;
     private Download.STATUS status;
-    private LineChart chart;
-    private ViewGroup rootView;
+    private ViewHolder holder;
     private boolean canWrite = false;
 
     @Override
@@ -60,14 +59,12 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
 
         View root = findViewById(android.R.id.content);
         assert root != null;
-        rootView = (ViewGroup) root.getRootView();
+        holder = new ViewHolder(root.getRootView());
 
         gid = getIntent().getStringExtra("gid");
         status = Download.STATUS.valueOf(getIntent().getStringExtra("status"));
         setTitle(getIntent().getStringExtra("name"));
 
-        chart = (LineChart) findViewById(R.id.moreAboutDownload_chart);
-
         if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
             canWrite = true;
         } else {
@@ -85,11 +82,11 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
             }
         }
 
-        Charting.newChart(chart);
+        // Charting.newChart(chart);
         updateUI = new UpdateUI(this, new UpdateUI.IFirstUpdate() {
             @Override
             public void onFirstUpdate(Download item) { /* NOT USED */}
-        }, canWrite, gid, chart, rootView);
+        }, canWrite, gid, holder);
         new Thread(updateUI).start();
     }
 
@@ -107,18 +104,13 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.moreAboutDownloadMenu_refresh:
-                if (updateUI != null) {
-                    updateUI.stop(new IThread() {
-                        @Override
-                        public void stopped() {
-                            updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, chart, rootView);
-                            new Thread(updateUI).start();
-                        }
-                    });
-                } else {
-                    updateUI = new UpdateUI(this, null, canWrite, gid, chart, rootView);
-                    new Thread(updateUI).start();
-                }
+                UpdateUI.stop(updateUI, new IThread() {
+                    @Override
+                    public void stopped() {
+                        updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, holder);
+                        new Thread(updateUI).start();
+                    }
+                });
                 break;
             case R.id.moreAboutDownloadMenu_options:
                 showOptionsDialog();
@@ -134,7 +126,7 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
 
     @Override
     protected void onDestroy() {
-        if (updateUI != null) updateUI.stop();
+        UpdateUI.stop(updateUI);
         finishActivity(0);
         super.onDestroy();
     }
@@ -148,7 +140,7 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
 
     @Override
     protected void onStop() {
-        if (updateUI != null) updateUI.stop();
+        UpdateUI.stop(updateUI);
         finishActivity(0);
         super.onStop();
     }
@@ -247,20 +239,13 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
                                         MoreAboutDownloadActivity.this.runOnUiThread(new Runnable() {
                                             @Override
                                             public void run() {
-                                                if (updateUI != null) {
-                                                    updateUI.stop(new IThread() {
-                                                        @Override
-                                                        public void stopped() {
-                                                            Charting.newChart(chart);
-                                                            updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, chart, rootView);
-                                                            new Thread(updateUI).start();
-                                                        }
-                                                    });
-                                                } else {
-                                                    Charting.newChart(chart);
-                                                    updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, chart, rootView);
-                                                    new Thread(updateUI).start();
-                                                }
+                                                UpdateUI.stop(updateUI, new IThread() {
+                                                    @Override
+                                                    public void stopped() {
+                                                        updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, holder);
+                                                        new Thread(updateUI).start();
+                                                    }
+                                                });
                                             }
                                         });
                                     }
@@ -280,20 +265,13 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
                         MoreAboutDownloadActivity.this.runOnUiThread(new Runnable() {
                             @Override
                             public void run() {
-                                if (updateUI != null) {
-                                    updateUI.stop(new IThread() {
-                                        @Override
-                                        public void stopped() {
-                                            Charting.newChart(chart);
-                                            updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, chart, rootView);
-                                            new Thread(updateUI).start();
-                                        }
-                                    });
-                                } else {
-                                    Charting.newChart(chart);
-                                    updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, chart, rootView);
-                                    new Thread(updateUI).start();
-                                }
+                                UpdateUI.stop(updateUI, new IThread() {
+                                    @Override
+                                    public void stopped() {
+                                        updateUI = new UpdateUI(MoreAboutDownloadActivity.this, null, canWrite, gid, holder);
+                                        new Thread(updateUI).start();
+                                    }
+                                });
                             }
                         });
                     }
@@ -325,4 +303,52 @@ public class MoreAboutDownloadActivity extends AppCompatActivity {
             }
         });
     }
+
+    public class ViewHolder {
+        public LineChart chart;
+        public TextView downloadSpeed;
+        public TextView uploadSpeed;
+        public TextView time;
+        public TextView percentage;
+        public TextView completedLength;
+        public TextView totalLength;
+        public TextView uploadedLength;
+        public TextView piecesNumber;
+        public TextView piecesLength;
+        public TextView connections;
+        public TextView gid;
+        public TextView seedersNumber;
+        public RelativeLayout bitTorrentContainer;
+        public TextView bitTorrentMode;
+        public TextView bitTorrentAnnounceList;
+        public TextView infoHash;
+        public TextView seeder;
+        public TextView bitTorrentComment;
+        public TextView bitTorrentCreationDate;
+        public RelativeLayout treeNodeContainer;
+
+        public ViewHolder(View rootView) {
+            chart = (LineChart) rootView.findViewById(R.id.moreAboutDownload_chart);
+            treeNodeContainer = (RelativeLayout) rootView.findViewById(R.id.moreAboutDownload_treeViewContainer);
+            downloadSpeed = (TextView) rootView.findViewById(R.id.moreAboutDownload_downloadSpeed);
+            uploadSpeed = (TextView) rootView.findViewById(R.id.moreAboutDownload_uploadSpeed);
+            time = (TextView) rootView.findViewById(R.id.moreAboutDownload_time);
+            percentage = (TextView) rootView.findViewById(R.id.moreAboutDownload_percentage);
+            completedLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_completedLength);
+            totalLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_totalLength);
+            uploadedLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_uploadedLength);
+            piecesNumber = (TextView) rootView.findViewById(R.id.moreAboutDownload_piecesNumber);
+            piecesLength = (TextView) rootView.findViewById(R.id.moreAboutDownload_piecesLength);
+            connections = (TextView) rootView.findViewById(R.id.moreAboutDownload_connections);
+            gid = (TextView) rootView.findViewById(R.id.moreAboutDownload_gid);
+            seedersNumber = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentSeedersNumber);
+            bitTorrentContainer = (RelativeLayout) rootView.findViewById(R.id.moreAboutDownload_bitTorrentContainer);
+            bitTorrentMode = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentMode);
+            bitTorrentAnnounceList = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentAnnounceList);
+            infoHash = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentInfoHash);
+            seeder = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentSeeder);
+            bitTorrentComment = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentComment);
+            bitTorrentCreationDate = (TextView) rootView.findViewById(R.id.moreAboutDownload_bitTorrentCreationDate);
+        }
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/gianlu/aria2app/NetIO/JTA2/Download.java b/app/src/main/java/com/gianlu/aria2app/NetIO/JTA2/Download.java
index d5746df5..5ca1b7aa 100644
--- a/app/src/main/java/com/gianlu/aria2app/NetIO/JTA2/Download.java
+++ b/app/src/main/java/com/gianlu/aria2app/NetIO/JTA2/Download.java
@@ -38,8 +38,10 @@ public class Download {
     public String infoHash;
     public BitTorrent bitTorrent;
 
-    // Empty
+    // FakeDownload (Chart card)
     public Download() {
+        GID = "0";
+        status = null;
     }
 
     // HTTP(S)/FTP
@@ -97,7 +99,7 @@ public class Download {
         try {
             return Integer.parseInt(val);
         } catch (Exception ex) {
-            return null;
+            return 0;
         }
     }
 
@@ -106,7 +108,7 @@ public class Download {
         try {
             return Long.parseLong(val);
         } catch (Exception ex) {
-            return null;
+            return 0L;
         }
     }
 
diff --git a/app/src/main/java/com/gianlu/aria2app/Options/OptionAdapter.java b/app/src/main/java/com/gianlu/aria2app/Options/OptionAdapter.java
index 4dfcb30c..77eb7061 100644
--- a/app/src/main/java/com/gianlu/aria2app/Options/OptionAdapter.java
+++ b/app/src/main/java/com/gianlu/aria2app/Options/OptionAdapter.java
@@ -3,6 +3,7 @@ package com.gianlu.aria2app.Options;
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.ColorRes;
 import android.text.Editable;
 import android.text.InputType;
 import android.text.TextWatcher;
@@ -25,10 +26,9 @@ public class OptionAdapter extends BaseExpandableListAdapter {
     private Map<OptionHeader, OptionChild> children;
     private String colorAccent;
 
-    public OptionAdapter(Context context, String hexColorAccent, List<OptionHeader> headers, Map<OptionHeader, OptionChild> children) {
+    public OptionAdapter(Context context, @ColorRes int colorAccent, List<OptionHeader> headers, Map<OptionHeader, OptionChild> children) {
         this.context = context;
-        this.colorAccent = hexColorAccent;
-        if (this.colorAccent.length() == 8) this.colorAccent = this.colorAccent.substring(2);
+        this.colorAccent = Utils.colorToHex(context, colorAccent);
         this.headers = headers;
         this.children = children;
     }
diff --git a/app/src/main/java/com/gianlu/aria2app/Utils.java b/app/src/main/java/com/gianlu/aria2app/Utils.java
index 1277029b..20a80b88 100644
--- a/app/src/main/java/com/gianlu/aria2app/Utils.java
+++ b/app/src/main/java/com/gianlu/aria2app/Utils.java
@@ -4,6 +4,7 @@ import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.graphics.Color;
 import android.preference.PreferenceManager;
 import android.support.annotation.ColorRes;
 import android.support.annotation.NonNull;
@@ -103,9 +104,9 @@ public class Utils {
     }
 
     public static String colorToHex(Context context, @ColorRes int colorRes) {
-        String hex = Integer.toHexString(ContextCompat.getColor(context, colorRes));
-        if (hex.length() == 8) return hex.substring(2);
-        return hex;
+        int color = ContextCompat.getColor(context, colorRes);
+        String hex = Integer.toHexString(Color.rgb(Color.red(color), Color.green(color), Color.blue(color)));
+        return hex.length() == 8 ? hex.substring(2) : hex;
     }
 
     public static WebSocket readyWebSocket(boolean isSSL, String url, @NonNull String username, @NonNull String password) throws IOException, NoSuchAlgorithmException {
