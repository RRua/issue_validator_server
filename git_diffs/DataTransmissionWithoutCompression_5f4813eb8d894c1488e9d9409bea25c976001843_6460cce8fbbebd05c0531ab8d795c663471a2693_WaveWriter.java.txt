diff --git a/app/src/main/java/com/intervigil/wave/WaveReader.java b/app/src/main/java/com/intervigil/wave/WaveReader.java
index 4c91b6c..2e76365 100644
--- a/app/src/main/java/com/intervigil/wave/WaveReader.java
+++ b/app/src/main/java/com/intervigil/wave/WaveReader.java
@@ -21,21 +21,16 @@ package com.intervigil.wave;
 
 import com.intervigil.wave.exception.InvalidWaveException;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 
 public class WaveReader {
     private static final int WAV_HEADER_CHUNK_ID = 0x52494646;  // "RIFF"
     private static final int WAV_FORMAT = 0x57415645;  // "WAVE"
     private static final int WAV_FORMAT_CHUNK_ID = 0x666d7420; // "fmt "
     private static final int WAV_DATA_CHUNK_ID = 0x64617461; // "data"
-    private static final int STREAM_BUFFER_SIZE = 4096;
 
-    private File mInFile;
-    private BufferedInputStream mInStream;
+    private InputStream mInputStream;
 
     private int mSampleRate;
     private int mChannels;
@@ -45,68 +40,54 @@ public class WaveReader {
 
 
     /**
-     * Constructor; initializes WaveReader to read from given file
+     * Constructor; initializes WaveReader to read from input stream
      *
-     * @param path path to input file
-     * @param name name of input file
+     * @param stream inputStream to read from
      */
-    public WaveReader(String path, String name) {
-        this.mInFile = new File(path + File.separator + name);
-    }
-
-    /**
-     * Constructor; initializes WaveReader to read from given file
-     *
-     * @param file handle to input file
-     */
-    public WaveReader(File file) {
-        this.mInFile = file;
+    public WaveReader(InputStream stream) {
+        mInputStream = stream;
     }
 
     /**
      * Open WAV file for reading
      *
-     * @throws FileNotFoundException if input file does not exist
-     * @throws InvalidWaveException  if input file is not a valid WAVE file
-     * @throws IOException           if I/O error occurred during file read
+     * @throws InvalidWaveException if input file is not a valid WAVE file
+     * @throws IOException          if I/O error occurred during file read
      */
-    public void openWave() throws FileNotFoundException, InvalidWaveException, IOException {
-        FileInputStream fileStream = new FileInputStream(mInFile);
-        mInStream = new BufferedInputStream(fileStream, STREAM_BUFFER_SIZE);
-
-        int headerId = readUnsignedInt(mInStream);  // should be "RIFF"
+    public void openWave() throws IOException {
+        int headerId = readUnsignedInt(mInputStream);  // should be "RIFF"
         if (headerId != WAV_HEADER_CHUNK_ID) {
-            throw new InvalidWaveException(String.format("Invalid WAVE header chunk ID: %d", headerId));
+            throw new InvalidWaveException(("Invalid WAVE header chunk ID: " + headerId));
         }
-        mFileSize = readUnsignedIntLE(mInStream);  // length of header
-        int format = readUnsignedInt(mInStream);  // should be "WAVE"
+        mFileSize = readUnsignedIntLE(mInputStream);  // length of header
+        int format = readUnsignedInt(mInputStream);  // should be "WAVE"
         if (format != WAV_FORMAT) {
             throw new InvalidWaveException("Invalid WAVE format");
         }
 
-        int formatId = readUnsignedInt(mInStream);  // should be "fmt "
+        int formatId = readUnsignedInt(mInputStream);  // should be "fmt "
         if (formatId != WAV_FORMAT_CHUNK_ID) {
             throw new InvalidWaveException("Invalid WAVE format chunk ID");
         }
-        int formatSize = readUnsignedIntLE(mInStream);
+        int formatSize = readUnsignedIntLE(mInputStream);
         if (formatSize != 16) {
 
         }
-        int audioFormat = readUnsignedShortLE(mInStream);
+        int audioFormat = readUnsignedShortLE(mInputStream);
         if (audioFormat != 1) {
             throw new InvalidWaveException("Not PCM WAVE format");
         }
-        mChannels = readUnsignedShortLE(mInStream);
-        mSampleRate = readUnsignedIntLE(mInStream);
-        int byteRate = readUnsignedIntLE(mInStream);
-        int blockAlign = readUnsignedShortLE(mInStream);
-        mSampleBits = readUnsignedShortLE(mInStream);
+        mChannels = readUnsignedShortLE(mInputStream);
+        mSampleRate = readUnsignedIntLE(mInputStream);
+        int byteRate = readUnsignedIntLE(mInputStream);
+        int blockAlign = readUnsignedShortLE(mInputStream);
+        mSampleBits = readUnsignedShortLE(mInputStream);
 
-        int dataId = readUnsignedInt(mInStream);
+        int dataId = readUnsignedInt(mInputStream);
         if (dataId != WAV_DATA_CHUNK_ID) {
             throw new InvalidWaveException("Invalid WAVE data chunk ID");
         }
-        mDataSize = readUnsignedIntLE(mInStream);
+        mDataSize = readUnsignedIntLE(mInputStream);
     }
 
     /**
@@ -183,7 +164,7 @@ public class WaveReader {
 
         byte[] buf = new byte[numSamples * 2];
         int index = 0;
-        int bytesRead = mInStream.read(buf, 0, numSamples * 2);
+        int bytesRead = mInputStream.read(buf, 0, numSamples * 2);
 
         for (int i = 0; i < bytesRead; i += 2) {
             dst[index] = byteToShortLE(buf[i], buf[i + 1]);
@@ -208,7 +189,7 @@ public class WaveReader {
         }
         byte[] buf = new byte[numSamples * 4];
         int index = 0;
-        int bytesRead = mInStream.read(buf, 0, numSamples * 4);
+        int bytesRead = mInputStream.read(buf, 0, numSamples * 4);
 
         for (int i = 0; i < bytesRead; i += 2) {
             short val = byteToShortLE(buf[0], buf[i + 1]);
@@ -229,8 +210,8 @@ public class WaveReader {
      * @throws IOException if I/O error occurred closing filestream
      */
     public void closeWaveFile() throws IOException {
-        if (mInStream != null) {
-            mInStream.close();
+        if (mInputStream != null) {
+            mInputStream.close();
         }
     }
 
@@ -238,7 +219,7 @@ public class WaveReader {
         return (short) (b1 & 0xFF | ((b2 & 0xFF) << 8));
     }
 
-    private static int readUnsignedInt(BufferedInputStream in) throws IOException {
+    private static int readUnsignedInt(InputStream in) throws IOException {
         int ret;
         byte[] buf = new byte[4];
         ret = in.read(buf);
@@ -252,7 +233,7 @@ public class WaveReader {
         }
     }
 
-    private static int readUnsignedIntLE(BufferedInputStream in) throws IOException {
+    private static int readUnsignedIntLE(InputStream in) throws IOException {
         int ret;
         byte[] buf = new byte[4];
         ret = in.read(buf);
@@ -266,7 +247,7 @@ public class WaveReader {
         }
     }
 
-    private static short readUnsignedShortLE(BufferedInputStream in) throws IOException {
+    private static short readUnsignedShortLE(InputStream in) throws IOException {
         int ret;
         byte[] buf = new byte[2];
         ret = in.read(buf, 0, 2);
diff --git a/app/src/main/java/com/intervigil/wave/WaveWriter.java b/app/src/main/java/com/intervigil/wave/WaveWriter.java
index 9ba0ef9..042136e 100644
--- a/app/src/main/java/com/intervigil/wave/WaveWriter.java
+++ b/app/src/main/java/com/intervigil/wave/WaveWriter.java
@@ -19,17 +19,13 @@
 
 package com.intervigil.wave;
 
-import java.io.BufferedOutputStream;
-import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.RandomAccessFile;
+import java.io.OutputStream;
 
 public class WaveWriter {
-    private static final int OUTPUT_STREAM_BUFFER = 16384;
 
-    private File mOutFile;
-    private BufferedOutputStream mOutStream;
+    private FileOutputStream mOutputStream;
 
     private int mSampleRate;
     private int mChannels;
@@ -37,43 +33,20 @@ public class WaveWriter {
 
     private int mBytesWritten;
 
-
     /**
      * Constructor; initializes WaveWriter with file name and path
      *
-     * @param path       output file path
-     * @param name       output file name
+     * @param stream     output stream
      * @param sampleRate output sample rate
      * @param channels   number of channels
      * @param sampleBits number of bits per sample (S8LE, S16LE)
      */
-    public WaveWriter(String path, String name, int sampleRate, int channels,
-                      int sampleBits) {
-        this.mOutFile = new File(path + File.separator + name);
-
-        this.mSampleRate = sampleRate;
-        this.mChannels = channels;
-        this.mSampleBits = sampleBits;
-
-        this.mBytesWritten = 0;
-    }
-
-    /**
-     * Constructor; initializes WaveWriter with file name and path
-     *
-     * @param file       output file handle
-     * @param sampleRate output sample rate
-     * @param channels   number of channels
-     * @param sampleBits number of bits per sample (S8LE, S16LE)
-     */
-    public WaveWriter(File file, int sampleRate, int channels, int sampleBits) {
-        this.mOutFile = file;
-
-        this.mSampleRate = sampleRate;
-        this.mChannels = channels;
-        this.mSampleBits = sampleBits;
-
-        this.mBytesWritten = 0;
+    public WaveWriter(FileOutputStream stream, int sampleRate, int channels, int sampleBits) {
+        mOutputStream = stream;
+        mSampleRate = sampleRate;
+        mChannels = channels;
+        mSampleBits = sampleBits;
+        mBytesWritten = 0;
     }
 
     /**
@@ -82,19 +55,9 @@ public class WaveWriter {
      * @return whether file creation succeeded
      * @throws IOException if file I/O error occurs allocating header
      */
-    public boolean createWaveFile() throws IOException {
-        if (mOutFile.exists()) {
-            mOutFile.delete();
-        }
-
-        if (mOutFile.createNewFile()) {
-            FileOutputStream fileStream = new FileOutputStream(mOutFile);
-            mOutStream = new BufferedOutputStream(fileStream, OUTPUT_STREAM_BUFFER);
-            // write 44 bytes of space for the header
-            mOutStream.write(new byte[44]);
-            return true;
-        }
-        return false;
+    public void createWaveFile() throws IOException {
+        // write 44 bytes of space for the header
+        mOutputStream.write(new byte[44]);
     }
 
     /**
@@ -111,10 +74,11 @@ public class WaveWriter {
             return;
         }
         if (offset > length) {
-            throw new IndexOutOfBoundsException(String.format("offset %d is greater than length %d", offset, length));
+            throw new IndexOutOfBoundsException(
+                    ("offset " + offset + " is greater than length " + length));
         }
         for (int i = offset; i < length; i++) {
-            writeUnsignedShortLE(mOutStream, src[i]);
+            writeUnsignedShortLE(mOutputStream, src[i]);
             mBytesWritten += 2;
         }
     }
@@ -134,11 +98,12 @@ public class WaveWriter {
             return;
         }
         if (offset > length) {
-            throw new IndexOutOfBoundsException(String.format("offset %d is greater than length %d", offset, length));
+            throw new IndexOutOfBoundsException(
+                    ("offset " + offset + " is greater than length " + length));
         }
         for (int i = offset; i < length; i++) {
-            writeUnsignedShortLE(mOutStream, left[i]);
-            writeUnsignedShortLE(mOutStream, right[i]);
+            writeUnsignedShortLE(mOutputStream, left[i]);
+            writeUnsignedShortLE(mOutputStream, right[i]);
             mBytesWritten += 4;
         }
     }
@@ -150,44 +115,48 @@ public class WaveWriter {
      * @throws IOException if file I/O error occurs writing WAV header
      */
     public void closeWaveFile() throws IOException {
-        if (mOutStream != null) {
-            this.mOutStream.flush();
-            this.mOutStream.close();
+        if (mOutputStream != null) {
+            writeWaveHeader();
+            mOutputStream.flush();
+            mOutputStream.close();
         }
-        writeWaveHeader();
     }
 
     private void writeWaveHeader() throws IOException {
         // rewind to beginning of the file
-        RandomAccessFile file = new RandomAccessFile(this.mOutFile, "rw");
-        file.seek(0);
+        mOutputStream.getChannel().position(0);
 
         int bytesPerSec = (mSampleBits + 7) / 8;
 
-        file.writeBytes("RIFF"); // WAV chunk header
-        file.writeInt(Integer.reverseBytes(mBytesWritten + 36)); // WAV chunk size
-        file.writeBytes("WAVE"); // WAV format
-
-        file.writeBytes("fmt "); // format subchunk header
-        file.writeInt(Integer.reverseBytes(16)); // format subchunk size
-        file.writeShort(Short.reverseBytes((short) 1)); // audio format
-        file.writeShort(Short.reverseBytes((short) mChannels)); // number of channels
-        file.writeInt(Integer.reverseBytes(mSampleRate)); // sample rate
-        file.writeInt(Integer.reverseBytes(mSampleRate * mChannels * bytesPerSec)); // byte rate
-        file.writeShort(Short.reverseBytes((short) (mChannels * bytesPerSec))); // block align
-        file.writeShort(Short.reverseBytes((short) mSampleBits)); // bits per sample
-
-        file.writeBytes("data"); // data subchunk header
-        file.writeInt(Integer.reverseBytes(mBytesWritten)); // data subchunk size
+        mOutputStream.write("RIFF".getBytes()); // WAV chunk header
+        writeUnsignedIntLE(mOutputStream, mBytesWritten + 36); // WAV chunk size
+        mOutputStream.write("WAVE".getBytes()); // WAV format
+
+        mOutputStream.write("fmt ".getBytes()); // format subchunk header
+        writeUnsignedIntLE(mOutputStream, 16); // format subchunk size
+        writeUnsignedShortLE(mOutputStream, (short) 1); // audio format
+        writeUnsignedShortLE(mOutputStream, (short) mChannels); // number of channels
+        writeUnsignedIntLE(mOutputStream, mSampleRate); // sample rate
+        writeUnsignedIntLE(mOutputStream, mSampleRate * mChannels * bytesPerSec); // byte rate
+        writeUnsignedShortLE(mOutputStream, (short) (mChannels * bytesPerSec)); // block align
+        writeUnsignedShortLE(mOutputStream, (short) mSampleBits); // bits per sample
+
+        mOutputStream.write("data".getBytes()); // data subchunk header
+        writeUnsignedIntLE(mOutputStream, mBytesWritten); // data subchunk size
+    }
 
-        file.close();
-        file = null;
+    private static void writeUnsignedIntLE(OutputStream stream, int sample)
+            throws IOException {
+        stream.write((sample & 0x000000ff));
+        stream.write((sample & 0x0000ff00) >> 8);
+        stream.write((sample & 0x00ff0000) >> 16);
+        stream.write((sample & 0xff000000) >> 24);
     }
 
-    private static void writeUnsignedShortLE(BufferedOutputStream stream, short sample)
+    private static void writeUnsignedShortLE(OutputStream stream, short sample)
             throws IOException {
         // write already writes the lower order byte of this short
         stream.write(sample);
         stream.write((sample >> 8));
     }
-}
+}
\ No newline at end of file
