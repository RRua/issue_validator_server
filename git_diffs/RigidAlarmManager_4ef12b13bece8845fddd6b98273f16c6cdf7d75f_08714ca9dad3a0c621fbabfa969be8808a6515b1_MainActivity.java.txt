diff --git a/app/src/androidTest/java/com/ulan/timetable/ExampleInstrumentedTest.java b/app/src/androidTest/java/com/ulan/timetable/ExampleInstrumentedTest.java
deleted file mode 100644
index 3715cca..0000000
--- a/app/src/androidTest/java/com/ulan/timetable/ExampleInstrumentedTest.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.ulan.timetable;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.junit.Assert.*;
-
-/**
- * Instrumented test, which will execute on an Android device.
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-@RunWith(AndroidJUnit4.class)
-public class ExampleInstrumentedTest {
-    @Test
-    public void useAppContext() {
-        // Context of the app under test.
-        Context appContext = InstrumentationRegistry.getTargetContext();
-
-        assertEquals("com.ulan.timetable", appContext.getPackageName());
-    }
-}
diff --git a/app/src/main/java/com/ulan/timetable/Application.java b/app/src/main/java/com/ulan/timetable/Application.java
new file mode 100644
index 0000000..2ad88e0
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/Application.java
@@ -0,0 +1,9 @@
+package com.ulan.timetable;
+
+public class Application extends android.app.Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+//        Cyanea.init(this, getResources());
+    }
+}
diff --git a/app/src/main/java/com/ulan/timetable/activities/ExamsActivity.java b/app/src/main/java/com/ulan/timetable/activities/ExamsActivity.java
index 4b549e9..08b78a8 100644
--- a/app/src/main/java/com/ulan/timetable/activities/ExamsActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/ExamsActivity.java
@@ -1,6 +1,5 @@
 package com.ulan.timetable.activities;
 
-import android.content.Context;
 import android.os.Bundle;
 import android.util.SparseBooleanArray;
 import android.view.ActionMode;
@@ -11,11 +10,12 @@ import android.view.View;
 import android.widget.AbsListView;
 import android.widget.ListView;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
+import com.ulan.timetable.R;
 import com.ulan.timetable.adapters.ExamsAdapter;
 import com.ulan.timetable.model.Exam;
-import com.ulan.timetable.R;
 import com.ulan.timetable.utils.AlertDialogsHelper;
 import com.ulan.timetable.utils.DbHelper;
 
@@ -23,7 +23,8 @@ import java.util.ArrayList;
 
 public class ExamsActivity extends AppCompatActivity {
 
-    private Context context = this;
+    @NonNull
+    private final AppCompatActivity context = this;
     private ListView listView;
     private ExamsAdapter adapter;
     private DbHelper db;
@@ -52,14 +53,14 @@ public class ExamsActivity extends AppCompatActivity {
         listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
         listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
             @Override
-            public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
+            public void onItemCheckedStateChanged(@NonNull ActionMode mode, int position, long id, boolean checked) {
                 final int checkedCount = listView.getCheckedItemCount();
                 mode.setTitle(checkedCount + " " + getResources().getString(R.string.selected));
-                if(checkedCount == 0) mode.finish();
+                if (checkedCount == 0) mode.finish();
             }
 
             @Override
-            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            public boolean onCreateActionMode(@NonNull ActionMode mode, Menu menu) {
                 MenuInflater menuInflater = mode.getMenuInflater();
                 menuInflater.inflate(R.menu.toolbar_action_mode, menu);
                 return true;
@@ -71,28 +72,26 @@ public class ExamsActivity extends AppCompatActivity {
             }
 
             @Override
-            public boolean onActionItemClicked(final ActionMode mode, MenuItem item) {
-                switch (item.getItemId()) {
-                    case R.id.action_delete:
-                        ArrayList<Exam> removelist = new ArrayList<>();
-                        SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
-                        for (int i = 0; i < checkedItems.size(); i++) {
-                            int key = checkedItems.keyAt(i);
-                            if (checkedItems.get(key)) {
-                                db.deleteExamById(adapter.getItem(key));
-                                removelist.add(adapter.getExamList().get(key));
-                            }
+            public boolean onActionItemClicked(@NonNull final ActionMode mode, @NonNull MenuItem item) {
+                if (item.getItemId() == R.id.action_delete) {
+                    ArrayList<Exam> removelist = new ArrayList<>();
+                    SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
+                    for (int i = 0; i < checkedItems.size(); i++) {
+                        int key = checkedItems.keyAt(i);
+                        if (checkedItems.get(key)) {
+                            db.deleteExamById(adapter.getItem(key));
+                            removelist.add(adapter.getExamList().get(key));
                         }
-                        adapter.getExamList().removeAll(removelist);
-                        db.updateExam(adapter.getExam());
-                        adapter.notifyDataSetChanged();
-                        mode.finish();
-                        return true;
-
-                    default:
-                        return false;
+                    }
+                    adapter.getExamList().removeAll(removelist);
+                    db.updateExam(adapter.getExam());
+                    adapter.notifyDataSetChanged();
+                    mode.finish();
+                    return true;
                 }
+                return false;
             }
+
             @Override
             public void onDestroyActionMode(ActionMode mode) {
             }
diff --git a/app/src/main/java/com/ulan/timetable/activities/HomeworksActivity.java b/app/src/main/java/com/ulan/timetable/activities/HomeworksActivity.java
index fbf8e5a..fb788cb 100644
--- a/app/src/main/java/com/ulan/timetable/activities/HomeworksActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/HomeworksActivity.java
@@ -1,6 +1,5 @@
 package com.ulan.timetable.activities;
 
-import android.content.Context;
 import android.os.Bundle;
 import android.util.SparseBooleanArray;
 import android.view.ActionMode;
@@ -11,11 +10,12 @@ import android.view.View;
 import android.widget.AbsListView;
 import android.widget.ListView;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
+import com.ulan.timetable.R;
 import com.ulan.timetable.adapters.HomeworksAdapter;
 import com.ulan.timetable.model.Homework;
-import com.ulan.timetable.R;
 import com.ulan.timetable.utils.AlertDialogsHelper;
 import com.ulan.timetable.utils.DbHelper;
 
@@ -24,7 +24,8 @@ import java.util.ArrayList;
 
 public class HomeworksActivity extends AppCompatActivity {
 
-    private Context context = this;
+    @NonNull
+    private final AppCompatActivity context = this;
     private ListView listView;
     private HomeworksAdapter adapter;
     private DbHelper db;
@@ -54,15 +55,15 @@ public class HomeworksActivity extends AppCompatActivity {
         listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
         listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
             @Override
-            public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
+            public void onItemCheckedStateChanged(@NonNull ActionMode mode, int position, long id, boolean checked) {
                 listposition = position;
                 final int checkedCount = listView.getCheckedItemCount();
                 mode.setTitle(checkedCount + " " + getResources().getString(R.string.selected));
-                if(checkedCount == 0) mode.finish();
+                if (checkedCount == 0) mode.finish();
             }
 
             @Override
-            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            public boolean onCreateActionMode(@NonNull ActionMode mode, Menu menu) {
                 MenuInflater menuInflater = mode.getMenuInflater();
                 menuInflater.inflate(R.menu.toolbar_action_mode, menu);
                 return true;
@@ -74,28 +75,26 @@ public class HomeworksActivity extends AppCompatActivity {
             }
 
             @Override
-            public boolean onActionItemClicked(final ActionMode mode, MenuItem item) {
-                switch (item.getItemId()) {
-                    case R.id.action_delete:
-                        ArrayList<Homework> removelist = new ArrayList<>();
-                        SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
-                        for (int i = 0; i < checkedItems.size(); i++) {
-                            int key = checkedItems.keyAt(i);
-                            if (checkedItems.get(key)) {
-                                db.deleteHomeworkById(adapter.getItem(key));
-                                removelist.add(adapter.getHomeworkList().get(key));
-                            }
+            public boolean onActionItemClicked(@NonNull final ActionMode mode, @NonNull MenuItem item) {
+                if (item.getItemId() == R.id.action_delete) {
+                    ArrayList<Homework> removelist = new ArrayList<>();
+                    SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
+                    for (int i = 0; i < checkedItems.size(); i++) {
+                        int key = checkedItems.keyAt(i);
+                        if (checkedItems.get(key)) {
+                            db.deleteHomeworkById(adapter.getItem(key));
+                            removelist.add(adapter.getHomeworkList().get(key));
                         }
-                        adapter.getHomeworkList().removeAll(removelist);
-                        db.updateHomework(adapter.getHomework());
-                        adapter.notifyDataSetChanged();
-                        mode.finish();
-                        return true;
-
-                    default:
-                        return false;
+                    }
+                    adapter.getHomeworkList().removeAll(removelist);
+                    db.updateHomework(adapter.getHomework());
+                    adapter.notifyDataSetChanged();
+                    mode.finish();
+                    return true;
                 }
+                return false;
             }
+
             @Override
             public void onDestroyActionMode(ActionMode mode) {
             }
diff --git a/app/src/main/java/com/ulan/timetable/activities/MainActivity.java b/app/src/main/java/com/ulan/timetable/activities/MainActivity.java
index 728723a..7499d1c 100644
--- a/app/src/main/java/com/ulan/timetable/activities/MainActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/MainActivity.java
@@ -1,42 +1,56 @@
 package com.ulan.timetable.activities;
 
-import android.app.AlarmManager;
-import android.app.PendingIntent;
+import android.Manifest;
+import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
+import android.provider.Settings;
 import android.text.TextUtils;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
+import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBarDrawerToggle;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.Toolbar;
+import androidx.browser.customtabs.CustomTabsIntent;
+import androidx.core.content.ContextCompat;
 import androidx.core.view.GravityCompat;
 import androidx.drawerlayout.widget.DrawerLayout;
 import androidx.preference.PreferenceManager;
 import androidx.viewpager.widget.ViewPager;
 
+import com.afollestad.materialdialogs.MaterialDialog;
+import com.ajts.androidmads.library.ExcelToSQLite;
+import com.ajts.androidmads.library.SQLiteToExcel;
 import com.google.android.material.navigation.NavigationView;
-import com.google.android.material.snackbar.Snackbar;
 import com.google.android.material.tabs.TabLayout;
+import com.pd.chocobar.ChocoBar;
 import com.ulan.timetable.R;
 import com.ulan.timetable.adapters.FragmentsTabAdapter;
-import com.ulan.timetable.fragments.FridayFragment;
-import com.ulan.timetable.fragments.MondayFragment;
-import com.ulan.timetable.fragments.SaturdayFragment;
-import com.ulan.timetable.fragments.SundayFragment;
-import com.ulan.timetable.fragments.ThursdayFragment;
-import com.ulan.timetable.fragments.TuesdayFragment;
-import com.ulan.timetable.fragments.WednesdayFragment;
+import com.ulan.timetable.fragments.WeekdayFragment;
 import com.ulan.timetable.utils.AlertDialogsHelper;
-import com.ulan.timetable.utils.DailyReceiver;
+import com.ulan.timetable.utils.DbHelper;
+import com.ulan.timetable.utils.NotificationUtil;
+import com.ulan.timetable.utils.PreferenceUtil;
 
+import java.io.File;
+import java.util.ArrayList;
 import java.util.Calendar;
 
-import static com.ulan.timetable.utils.BrowserUtil.openUrlInChromeCustomTab;
+import info.isuru.sheriff.enums.SheriffPermission;
+import info.isuru.sheriff.helper.Sheriff;
+import info.isuru.sheriff.interfaces.PermissionListener;
+import saschpe.android.customtabs.CustomTabsHelper;
+import saschpe.android.customtabs.WebViewFallback;
 
 
 public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
@@ -49,12 +63,27 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        NotificationUtil.sendNotificationCurrentLesson(this, false);
+        PreferenceUtil.setDoNotDisturb(this, PreferenceUtil.doNotDisturbDontAskAgain(this));
         initAll();
     }
 
     private void initAll() {
         NavigationView navigationView = findViewById(R.id.nav_view);
         navigationView.setNavigationItemSelectedListener(this);
+        View headerview = navigationView.getHeaderView(0);
+        headerview.findViewById(R.id.nav_header_main_settings).setOnClickListener((View v) -> startActivity(new Intent(this, SettingsActivity.class)));
+        TextView title = headerview.findViewById(R.id.nav_header_main_title);
+        title.setText(R.string.timetable_activity_title);
+
+        TextView desc = headerview.findViewById(R.id.nav_header_main_desc);
+        desc.setText(R.string.timetable_credit);
+
         PreferenceManager.setDefaultValues(this, R.xml.settings, false);
         Toolbar toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
@@ -65,50 +94,74 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         drawer.addDrawerListener(toggle);
         toggle.syncState();
 
+        setupSevenDaysPref();
         setupFragments();
         setupCustomDialog();
-        setupSevenDaysPref();
 
         if (switchSevenDays) changeFragments(true);
-
-        setDailyAlarm();
     }
 
     private void setupFragments() {
         adapter = new FragmentsTabAdapter(getSupportFragmentManager());
         viewPager = findViewById(R.id.viewPager);
         TabLayout tabLayout = findViewById(R.id.tabLayout);
-        Calendar calendar = Calendar.getInstance();
-        int day = calendar.get(Calendar.DAY_OF_WEEK);
-        adapter.addFragment(new MondayFragment(), getResources().getString(R.string.monday));
-        adapter.addFragment(new TuesdayFragment(), getResources().getString(R.string.tuesday));
-        adapter.addFragment(new WednesdayFragment(), getResources().getString(R.string.wednesday));
-        adapter.addFragment(new ThursdayFragment(), getResources().getString(R.string.thursday));
-        adapter.addFragment(new FridayFragment(), getResources().getString(R.string.friday));
+
+        WeekdayFragment mondayFragment = new WeekdayFragment(WeekdayFragment.KEY_MONDAY_FRAGMENT);
+        WeekdayFragment tuesdayFragment = new WeekdayFragment(WeekdayFragment.KEY_TUESDAY_FRAGMENT);
+        WeekdayFragment wednesdayFragment = new WeekdayFragment(WeekdayFragment.KEY_WEDNESDAY_FRAGMENT);
+        WeekdayFragment thursdayFragment = new WeekdayFragment(WeekdayFragment.KEY_THURSDAY_FRAGMENT);
+        WeekdayFragment fridayFragment = new WeekdayFragment(WeekdayFragment.KEY_FRIDAY_FRAGMENT);
+
+        adapter.addFragment(mondayFragment, getResources().getString(R.string.monday));
+        adapter.addFragment(tuesdayFragment, getResources().getString(R.string.tuesday));
+        adapter.addFragment(wednesdayFragment, getResources().getString(R.string.wednesday));
+        adapter.addFragment(thursdayFragment, getResources().getString(R.string.thursday));
+        adapter.addFragment(fridayFragment, getResources().getString(R.string.friday));
+
         viewPager.setAdapter(adapter);
+
+        int day = getFragmentChoosingDay();
         viewPager.setCurrentItem(day == 1 ? 6 : day - 2, true);
+
         tabLayout.setupWithViewPager(viewPager);
     }
 
     private void changeFragments(boolean isChecked) {
         if (isChecked) {
             TabLayout tabLayout = findViewById(R.id.tabLayout);
-            Calendar calendar = Calendar.getInstance();
-            int day = calendar.get(Calendar.DAY_OF_WEEK);
-            adapter.addFragment(new SaturdayFragment(), getResources().getString(R.string.saturday));
-            adapter.addFragment(new SundayFragment(), getResources().getString(R.string.sunday));
+            int day = getFragmentChoosingDay();
+            adapter.addFragment(new WeekdayFragment(WeekdayFragment.KEY_SATURDAY_FRAGMENT), getResources().getString(R.string.saturday));
+            adapter.addFragment(new WeekdayFragment(WeekdayFragment.KEY_SUNDAY_FRAGMENT), getResources().getString(R.string.sunday));
             viewPager.setAdapter(adapter);
             viewPager.setCurrentItem(day == 1 ? 6 : day - 2, true);
             tabLayout.setupWithViewPager(viewPager);
         } else {
             if (adapter.getFragmentList().size() > 5) {
-                adapter.removeFragment(new SaturdayFragment(), 5);
-                adapter.removeFragment(new SundayFragment(), 5);
+                adapter.removeFragment(new WeekdayFragment(WeekdayFragment.KEY_SATURDAY_FRAGMENT), 5);
+                adapter.removeFragment(new WeekdayFragment(WeekdayFragment.KEY_SUNDAY_FRAGMENT), 5);
             }
         }
         adapter.notifyDataSetChanged();
     }
 
+    private int getFragmentChoosingDay() {
+        Calendar calendar = Calendar.getInstance();
+        int day = calendar.get(Calendar.DAY_OF_WEEK);
+        int hour = calendar.get(Calendar.HOUR_OF_DAY);
+        //If its after 18 o'clock, show the next day
+        if (hour >= 18) {
+            day++;
+        }
+        if (day > 7) { //Calender.Saturday
+            day = day - 7; //1 = Calendar.Sunday, 2 = Calendar.Monday etc.
+        }
+        //If Saturday/Sunday are hidden, switch to Monday
+        if (!switchSevenDays && (day == Calendar.SUNDAY || day == Calendar.SATURDAY)) {
+            day = Calendar.MONDAY;
+        }
+        return day;
+    }
+
     private void setupCustomDialog() {
         final View alertLayout = getLayoutInflater().inflate(R.layout.dialog_add_subject, null);
         AlertDialogsHelper.getAddSubjectDialog(MainActivity.this, alertLayout, adapter, viewPager);
@@ -119,31 +172,6 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         switchSevenDays = sharedPref.getBoolean(SettingsActivity.KEY_SEVEN_DAYS_SETTING, false);
     }
 
-    private void setDailyAlarm() {
-        Calendar calendar = Calendar.getInstance();
-
-        calendar.set(Calendar.HOUR_OF_DAY, 0);
-        calendar.set(Calendar.MINUTE, 0);
-        calendar.set(Calendar.SECOND, 0);
-        calendar.set(Calendar.MILLISECOND, 0);
-
-        Calendar cur = Calendar.getInstance();
-
-        if (cur.after(calendar)) {
-            calendar.add(Calendar.DATE, 1);
-        }
-
-        Intent myIntent = new Intent(this, DailyReceiver.class);
-        int ALARM1_ID = 10000;
-        PendingIntent pendingIntent = PendingIntent.getBroadcast(
-                this, ALARM1_ID, myIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-        AlarmManager alarmManager = (AlarmManager) this.getSystemService(ALARM_SERVICE);
-        if (alarmManager != null) {
-            alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), AlarmManager.INTERVAL_DAY, pendingIntent);
-        }
-
-    }
-
     @Override
     public void onBackPressed() {
         DrawerLayout drawer = findViewById(R.id.drawer_layout);
@@ -155,59 +183,283 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
     }
 
     @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
+    public boolean onCreateOptionsMenu(@NonNull Menu menu) {
         getMenuInflater().inflate(R.menu.main, menu);
         return true;
     }
 
     @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.action_settings:
-                Intent settings = new Intent(MainActivity.this, SettingsActivity.class);
-                startActivity(settings);
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
+    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
+        if (item.getItemId() == R.id.action_settings) {
+            Intent settings = new Intent(MainActivity.this, SettingsActivity.class);
+            startActivity(settings);
+        } else if (item.getItemId() == R.id.action_timetable_backup) {
+            backup();
+        } else if (item.getItemId() == R.id.action_timetable_restore) {
+            restore();
+        } else if (item.getItemId() == R.id.action_timetable_remove_all) {
+            deleteAll();
         }
+        return super.onOptionsItemSelected(item);
     }
 
     @Override
     public boolean onNavigationItemSelected(@NonNull MenuItem item) {
-        final NavigationView navigationView = findViewById(R.id.nav_view);
-        switch (item.getItemId()) {
-            case R.id.schoolwebsitemenu:
-                String schoolWebsite = PreferenceManager.getDefaultSharedPreferences(this).getString(SettingsActivity.KEY_SCHOOL_WEBSITE_SETTING, null);
-                if (!TextUtils.isEmpty(schoolWebsite)) {
-                    openUrlInChromeCustomTab(getApplicationContext(), schoolWebsite);
-                } else {
-                    Snackbar.make(navigationView, R.string.school_website_snackbar, Snackbar.LENGTH_SHORT).show();
-                }
-                return true;
-            case R.id.exams:
-                Intent exams = new Intent(MainActivity.this, ExamsActivity.class);
-                startActivity(exams);
-                return true;
-            case R.id.teachers:
-                Intent teacher = new Intent(MainActivity.this, TeachersActivity.class);
-                startActivity(teacher);
-                return true;
-            case R.id.homework:
-                Intent homework = new Intent(MainActivity.this, HomeworksActivity.class);
-                startActivity(homework);
-                return true;
-            case R.id.notes:
-                Intent note = new Intent(MainActivity.this, NotesActivity.class);
-                startActivity(note);
-                return true;
-            case R.id.settings:
-                Intent settings = new Intent(MainActivity.this, SettingsActivity.class);
-                startActivity(settings);
-                return true;
-            default:
-                DrawerLayout drawer = findViewById(R.id.drawer_layout);
-                drawer.closeDrawer(GravityCompat.START);
-                return true;
+        int itemId = item.getItemId();
+        if (itemId == R.id.exams) {
+            Intent exams = new Intent(MainActivity.this, ExamsActivity.class);
+            startActivity(exams);
+        } else if (itemId == R.id.homework) {
+            Intent homework = new Intent(MainActivity.this, HomeworksActivity.class);
+            startActivity(homework);
+        } else if (itemId == R.id.notes) {
+            Intent note = new Intent(MainActivity.this, NotesActivity.class);
+            startActivity(note);
+        } else if (itemId == R.id.settings) {
+            Intent settings = new Intent(MainActivity.this, SettingsActivity.class);
+            startActivity(settings);
+        } else if (itemId == R.id.schoolwebsitemenu) {
+            String schoolWebsite = PreferenceManager.getDefaultSharedPreferences(this).getString(SettingsActivity.KEY_SCHOOL_WEBSITE_SETTING, null);
+            if (!TextUtils.isEmpty(schoolWebsite)) {
+                openUrlInChromeCustomTab(schoolWebsite);
+            } else {
+                ChocoBar.builder().setActivity(this)
+                        .setText(getString(R.string.school_website_snackbar))
+                        .setDuration(ChocoBar.LENGTH_LONG)
+                        .red()
+                        .show();
+            }
+        } else if (itemId == R.id.teachers) {
+            Intent teacher = new Intent(MainActivity.this, TeachersActivity.class);
+            startActivity(teacher);
+        }
+        DrawerLayout drawer = findViewById(R.id.drawer_layout);
+        drawer.closeDrawer(GravityCompat.START);
+        return true;
+    }
+
+    private static final String filename = "Timetable_Backup.xls";
+
+    @SuppressWarnings("deprecation")
+    public void backup() {
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
+                && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+
+            requestPermission(this::backup, SheriffPermission.STORAGE);
+            return;
+        }
+
+        String path = Environment.getExternalStoragePublicDirectory(Build.VERSION.SDK_INT >= 19 ? Environment.DIRECTORY_DOCUMENTS : Environment.DIRECTORY_DOWNLOADS).toString();
+//        SimpleDateFormat timeStampFormat = new SimpleDateFormat("yyyyMMdd");
+//        Date myDate = new Date();
+//        String filename = timeStampFormat.format(myDate);
+
+        Activity activity = this;
+
+        SQLiteToExcel sqliteToExcel = new SQLiteToExcel(this, DbHelper.DB_NAME, path);
+        sqliteToExcel.exportAllTables(filename, new SQLiteToExcel.ExportListener() {
+            @Override
+            public void onStart() {
+
+            }
+
+            @Override
+            public void onCompleted(String filePath) {
+                runOnUiThread(() -> ChocoBar.builder().setActivity(activity)
+                        .setText(getString(R.string.backup_successful, Build.VERSION.SDK_INT >= 19 ? getString(R.string.Documents) : getString(R.string.Downloads)))
+                        .setDuration(ChocoBar.LENGTH_LONG)
+                        .green()
+                        .show());
+            }
+
+            @Override
+            public void onError(Exception e) {
+                runOnUiThread(() -> ChocoBar.builder().setActivity(activity)
+                        .setText(getString(R.string.backup_failed))
+                        .setDuration(ChocoBar.LENGTH_LONG)
+                        .red()
+                        .show());
+            }
+        });
+    }
+
+    @SuppressWarnings("deprecation")
+    public void restore() {
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED
+                && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+
+            requestPermission(this::restore, SheriffPermission.STORAGE);
+            return;
+        }
+
+        String path = Environment.getExternalStoragePublicDirectory(Build.VERSION.SDK_INT >= 19 ? Environment.DIRECTORY_DOCUMENTS : Environment.DIRECTORY_DOWNLOADS).toString() + File.separator + filename;
+        File file = new File(path);
+        if (!file.exists()) {
+            ChocoBar.builder().setActivity(this)
+                    .setText(getString(R.string.no_backup_found_in_downloads, Build.VERSION.SDK_INT >= 19 ? getString(R.string.Documents) : getString(R.string.Downloads)))
+                    .setDuration(ChocoBar.LENGTH_LONG)
+                    .red()
+                    .show();
+            return;
+        }
+
+        Activity activity = this;
+        DbHelper dbHelper = new DbHelper(this);
+        dbHelper.deleteAll();
+
+        ExcelToSQLite excelToSQLite = new ExcelToSQLite(getApplicationContext(), DbHelper.DB_NAME, false);
+        excelToSQLite.importFromFile(path, new ExcelToSQLite.ImportListener() {
+            @Override
+            public void onStart() {
+
+            }
+
+            @Override
+            public void onCompleted(String filePath) {
+                runOnUiThread(() -> ChocoBar.builder().setActivity(activity)
+                        .setText(getString(R.string.import_successful))
+                        .setDuration(ChocoBar.LENGTH_LONG)
+                        .green()
+                        .show());
+                MainActivity.this.onStart();
+            }
+
+            @Override
+            public void onError(Exception e) {
+                runOnUiThread(() -> ChocoBar.builder().setActivity(activity)
+                        .setText(getString(R.string.import_failed))
+                        .setDuration(ChocoBar.LENGTH_LONG)
+                        .red()
+                        .show());
+            }
+        });
+    }
+
+    public void deleteAll() {
+        new MaterialDialog.Builder(this)
+                .title(getString(R.string.remove_all_subjects))
+                .content(getString(R.string.remove_all_subjects_content))
+                .positiveText(getString(R.string.yes))
+                .onPositive((dialog, which) -> {
+                    try {
+                        DbHelper dbHelper = new DbHelper(this);
+                        dbHelper.deleteAll();
+                        ChocoBar.builder().setActivity(this)
+                                .setText(getString(R.string.remove_all_successful))
+                                .setDuration(ChocoBar.LENGTH_LONG)
+                                .green()
+                                .show();
+                        MainActivity.this.onStart();
+                    } catch (Exception e) {
+                        ChocoBar.builder().setActivity(this)
+                                .setText(getString(R.string.remove_all_failed))
+                                .setDuration(ChocoBar.LENGTH_LONG)
+                                .red()
+                                .show();
+                    }
+                })
+                .onNegative((dialog, which) -> dialog.dismiss())
+                .negativeText(getString(R.string.no))
+                .onNeutral((dialog, which) -> {
+                    backup();
+                    dialog.dismiss();
+                })
+                .neutralText(R.string.menu_backup)
+                .show();
+    }
+
+    private void openUrlInChromeCustomTab(String url) {
+        Context context = this;
+        try {
+            CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder()
+                    .addDefaultShareMenuItem()
+//                    .setToolbarColor(PreferenceUtil.getPrimaryColor(this))
+                    .setShowTitle(true)
+                    .build();
+
+            // This is optional but recommended
+            CustomTabsHelper.Companion.addKeepAliveExtra(context, customTabsIntent.intent);
+
+            // This is where the magic happens...
+            CustomTabsHelper.Companion.openCustomTab(context, customTabsIntent,
+                    Uri.parse(url),
+                    new WebViewFallback());
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
+
+    //Permissions
+    private Sheriff sheriffPermission;
+    private static final int REQUEST_MULTIPLE_PERMISSION = 101;
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        sheriffPermission.onRequestPermissionsResult(requestCode, permissions, grantResults);
+    }
+
+    protected void requestPermission(Runnable runAfter, SheriffPermission... permissions) {
+        PermissionListener pl = new MyPermissionListener(runAfter);
+
+        sheriffPermission = Sheriff.Builder()
+                .with(this)
+                .requestCode(REQUEST_MULTIPLE_PERMISSION)
+                .setPermissionResultCallback(pl)
+                .askFor(permissions)
+                .rationalMessage(getString(R.string.sheriff_permission_rational))
+                .build();
+
+        sheriffPermission.requestPermissions();
+    }
+
+    private class MyPermissionListener implements PermissionListener {
+        final Runnable runAfter;
+
+        MyPermissionListener(Runnable r) {
+            runAfter = r;
+        }
+
+        @Override
+        public void onPermissionsGranted(int requestCode, ArrayList<String> acceptedPermissionList) {
+            if (runAfter == null)
+                return;
+            try {
+                runAfter.run();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onPermissionsDenied(int requestCode, ArrayList<String> deniedPermissionList) {
+            // setup the alert builder
+            MaterialDialog.Builder builder = new MaterialDialog.Builder(MainActivity.this);
+            builder.title(getString(R.string.permission_required));
+            builder.content(getString(R.string.permission_required_description));
+
+            // add the buttons
+            builder.onPositive((dialog, which) -> {
+                openAppPermissionSettings();
+                dialog.dismiss();
+            });
+            builder.negativeText(getString(R.string.permission_ok_button));
+
+            builder.negativeText(getString(R.string.permission_cancel_button));
+            builder.onNegative((dialog, which) -> dialog.dismiss());
+
+            // create and show the alert dialog
+            MaterialDialog dialog = builder.build();
+            dialog.show();
+        }
+    }
+
+    private void openAppPermissionSettings() {
+        Intent intent = new Intent();
+        intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+        Uri uri = Uri.fromParts("package", getApplicationContext().getPackageName(), null);
+        intent.setData(uri);
+        startActivity(intent);
+    }
 }
diff --git a/app/src/main/java/com/ulan/timetable/activities/NoteInfoActivity.java b/app/src/main/java/com/ulan/timetable/activities/NoteInfoActivity.java
index 94a70f9..946feae 100644
--- a/app/src/main/java/com/ulan/timetable/activities/NoteInfoActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/NoteInfoActivity.java
@@ -5,15 +5,18 @@ import android.view.MenuItem;
 import android.widget.EditText;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
 
-import com.ulan.timetable.model.Note;
 import com.ulan.timetable.R;
+import com.ulan.timetable.model.Note;
 import com.ulan.timetable.utils.DbHelper;
 
 public class NoteInfoActivity extends AppCompatActivity {
 
     private DbHelper db;
+    @Nullable
     private Note note;
     private EditText text;
 
@@ -28,7 +31,7 @@ public class NoteInfoActivity extends AppCompatActivity {
         db = new DbHelper(NoteInfoActivity.this);
         note = (Note) getIntent().getSerializableExtra(NotesActivity.KEY_NOTE);
         text = findViewById(R.id.edittextNote);
-        if(note.getText() != null) {
+        if (note.getText() != null) {
             text.setText(note.getText());
         }
     }
@@ -42,7 +45,7 @@ public class NoteInfoActivity extends AppCompatActivity {
     }
 
     @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
+    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
         switch (item.getItemId()) {
             case android.R.id.home:
                 note.setText(text.getText().toString());
diff --git a/app/src/main/java/com/ulan/timetable/activities/NotesActivity.java b/app/src/main/java/com/ulan/timetable/activities/NotesActivity.java
index 83eeaf1..ecc5b10 100644
--- a/app/src/main/java/com/ulan/timetable/activities/NotesActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/NotesActivity.java
@@ -1,6 +1,5 @@
 package com.ulan.timetable.activities;
 
-import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.util.SparseBooleanArray;
@@ -10,14 +9,14 @@ import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.AbsListView;
-import android.widget.AdapterView;
 import android.widget.ListView;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
+import com.ulan.timetable.R;
 import com.ulan.timetable.adapters.NotesAdapter;
 import com.ulan.timetable.model.Note;
-import com.ulan.timetable.R;
 import com.ulan.timetable.utils.AlertDialogsHelper;
 import com.ulan.timetable.utils.DbHelper;
 
@@ -25,8 +24,10 @@ import java.util.ArrayList;
 
 public class NotesActivity extends AppCompatActivity {
 
-    public static String KEY_NOTE = "note";
-    private Context context = this;
+    @NonNull
+    public static final String KEY_NOTE = "note";
+    @NonNull
+    private final AppCompatActivity context = this;
     private ListView listView;
     private DbHelper db;
     private NotesAdapter adapter;
@@ -49,13 +50,10 @@ public class NotesActivity extends AppCompatActivity {
         listView = findViewById(R.id.notelist);
         adapter = new NotesAdapter(NotesActivity.this, listView, R.layout.listview_notes_adapter, db.getNote());
         listView.setAdapter(adapter);
-        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                Intent intent = new Intent(context, NoteInfoActivity.class);
-                intent.putExtra(KEY_NOTE, adapter.getNoteList().get(position));
-                startActivity(intent);
-            }
+        listView.setOnItemClickListener((parent, view, position, id) -> {
+            Intent intent = new Intent(context, NoteInfoActivity.class);
+            intent.putExtra(KEY_NOTE, adapter.getNoteList().get(position));
+            startActivity(intent);
         });
     }
 
@@ -63,14 +61,14 @@ public class NotesActivity extends AppCompatActivity {
         listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
         listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {
             @Override
-            public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {
+            public void onItemCheckedStateChanged(@NonNull ActionMode mode, int position, long id, boolean checked) {
                 final int checkedCount = listView.getCheckedItemCount();
                 mode.setTitle(checkedCount + " " + getResources().getString(R.string.selected));
-                if(checkedCount == 0) mode.finish();
+                if (checkedCount == 0) mode.finish();
             }
 
             @Override
-            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            public boolean onCreateActionMode(@NonNull ActionMode mode, Menu menu) {
                 MenuInflater menuInflater = mode.getMenuInflater();
                 menuInflater.inflate(R.menu.toolbar_action_mode, menu);
                 return true;
@@ -82,30 +80,29 @@ public class NotesActivity extends AppCompatActivity {
             }
 
             @Override
-            public boolean onActionItemClicked(final ActionMode mode, MenuItem item) {
-                switch (item.getItemId()) {
-                    case R.id.action_delete:
-                        ArrayList<Note> removelist = new ArrayList<>();
-                        SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
-                        for (int i = 0; i < checkedItems.size(); i++) {
-                            int key = checkedItems.keyAt(i);
-                            if (checkedItems.get(key)) {
-                                db.deleteNoteById(adapter.getItem(key));
-                                removelist.add(adapter.getNoteList().get(key));
-                            }
+            public boolean onActionItemClicked(@NonNull final ActionMode mode, @NonNull MenuItem item) {
+                if (item.getItemId() == R.id.action_delete) {
+                    ArrayList<Note> removelist = new ArrayList<>();
+                    SparseBooleanArray checkedItems = listView.getCheckedItemPositions();
+                    for (int i = 0; i < checkedItems.size(); i++) {
+                        int key = checkedItems.keyAt(i);
+                        if (checkedItems.get(key)) {
+                            db.deleteNoteById(adapter.getItem(key));
+                            removelist.add(adapter.getNoteList().get(key));
                         }
-                        adapter.getNoteList().removeAll(removelist);
-                        db.updateNote(adapter.getNote());
-                        adapter.notifyDataSetChanged();
-                        mode.finish();
-                        return true;
-
-                    default:
-                        return false;
+                    }
+                    adapter.getNoteList().removeAll(removelist);
+                    db.updateNote(adapter.getNote());
+                    adapter.notifyDataSetChanged();
+                    mode.finish();
+                    return true;
                 }
+                return false;
             }
+
             @Override
-            public void onDestroyActionMode(ActionMode mode) { }
+            public void onDestroyActionMode(ActionMode mode) {
+            }
         });
     }
 
diff --git a/app/src/main/java/com/ulan/timetable/activities/SettingsActivity.java b/app/src/main/java/com/ulan/timetable/activities/SettingsActivity.java
index 6650ba6..9378bf8 100644
--- a/app/src/main/java/com/ulan/timetable/activities/SettingsActivity.java
+++ b/app/src/main/java/com/ulan/timetable/activities/SettingsActivity.java
@@ -1,8 +1,11 @@
 package com.ulan.timetable.activities;
+
 import android.os.Bundle;
+
 import androidx.appcompat.app.AppCompatActivity;
-import com.ulan.timetable.fragments.SettingsFragment;
+
 import com.ulan.timetable.R;
+import com.ulan.timetable.fragments.SettingsFragment;
 
 public class SettingsActivity extends AppCompatActivity {
     public static final String
diff --git a/app/src/main/java/com/ulan/timetable/adapters/ExamsAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/ExamsAdapter.java
index 2fe999e..77277ab 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/ExamsAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/ExamsAdapter.java
@@ -1,9 +1,9 @@
 package com.ulan.timetable.adapters;
 
-import android.app.Activity;
-
-
+import android.content.res.ColorStateList;
+import android.graphics.Color;
 import android.util.SparseBooleanArray;
+import android.util.TypedValue;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.View;
@@ -14,12 +14,16 @@ import android.widget.ListView;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.PopupMenu;
 import androidx.cardview.widget.CardView;
+import androidx.core.widget.ImageViewCompat;
 
-import com.ulan.timetable.model.Exam;
 import com.ulan.timetable.R;
+import com.ulan.timetable.model.Exam;
 import com.ulan.timetable.utils.AlertDialogsHelper;
+import com.ulan.timetable.utils.ColorPalette;
 import com.ulan.timetable.utils.DbHelper;
 
 import java.util.ArrayList;
@@ -30,11 +34,12 @@ import java.util.Objects;
  */
 public class ExamsAdapter extends ArrayAdapter<Exam> {
 
-    private Activity mActivity;
-    private int mResource;
-    private ArrayList<Exam> examlist;
+    @NonNull
+    private final AppCompatActivity mActivity;
+    @NonNull
+    private final ArrayList<Exam> examlist;
     private Exam exam;
-    private ListView mListView;
+    private final ListView mListView;
 
     private static class ViewHolder {
         TextView subject;
@@ -46,17 +51,16 @@ public class ExamsAdapter extends ArrayAdapter<Exam> {
         ImageView popup;
     }
 
-    public ExamsAdapter(Activity activity, ListView listView, int resource, ArrayList<Exam> objects) {
+    public ExamsAdapter(@NonNull AppCompatActivity activity, ListView listView, int resource, @NonNull ArrayList<Exam> objects) {
         super(activity, resource, objects);
         mActivity = activity;
         mListView = listView;
-        mResource = resource;
         examlist = objects;
     }
 
     @NonNull
     @Override
-    public View getView(final int position, View convertView, @NonNull ViewGroup parent) {
+    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
         String subject = Objects.requireNonNull(getItem(position)).getSubject();
         String teacher = Objects.requireNonNull(getItem(position)).getTeacher();
         String room = Objects.requireNonNull(getItem(position)).getRoom();
@@ -69,7 +73,7 @@ public class ExamsAdapter extends ArrayAdapter<Exam> {
 
         if (convertView == null) {
             LayoutInflater inflater = LayoutInflater.from(mActivity);
-            convertView = inflater.inflate(mResource, parent, false);
+            convertView = inflater.inflate(R.layout.listview_exams_adapter, parent, false);
             holder = new ViewHolder();
             holder.subject = convertView.findViewById(R.id.subjectexams);
             holder.teacher = convertView.findViewById(R.id.teacherexams);
@@ -82,40 +86,57 @@ public class ExamsAdapter extends ArrayAdapter<Exam> {
         } else {
             holder = (ViewHolder) convertView.getTag();
         }
+
+        //Setup colors based on Background
+        int textColor = ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK);
+        holder.subject.setTextColor(textColor);
+        holder.teacher.setTextColor(textColor);
+        holder.room.setTextColor(textColor);
+        holder.date.setTextColor(textColor);
+        holder.time.setTextColor(textColor);
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.roomimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.teacherimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.teacherimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.timeimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.popupbtn), ColorStateList.valueOf(textColor));
+        convertView.findViewById(R.id.line).setBackgroundColor(textColor);
+
+
         holder.subject.setText(exam.getSubject());
-        holder.teacher.setText(exam.getTeacher());
+
         holder.room.setText(exam.getRoom());
+        TypedValue outValue = new TypedValue();
+        getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground, outValue, true);
+        holder.room.setBackgroundResource(outValue.resourceId);
+
         holder.date.setText(exam.getDate());
         holder.time.setText(exam.getTime());
         holder.cardView.setCardBackgroundColor(exam.getColor());
-        holder.popup.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final PopupMenu popup = new PopupMenu(mActivity, holder.popup);
-                final DbHelper db = new DbHelper(mActivity);
-                popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
-                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
-                    public boolean onMenuItemClick(MenuItem item) {
-                        switch (item.getItemId()) {
-                            case R.id.delete_popup:
-                                db.deleteExamById(getItem(position));
-                                db.updateExam(getItem(position));
-                                examlist.remove(position);
-                                notifyDataSetChanged();
-                                return true;
-
-                            case R.id.edit_popup:
-                                final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_exam, null);
-                                AlertDialogsHelper.getEditExamDialog(mActivity, alertLayout, examlist, mListView, position);
-                                notifyDataSetChanged();
-                                return true;
-                            default:
-                                return onMenuItemClick(item);
-                        }
+        holder.popup.setOnClickListener(v -> {
+            final PopupMenu popup = new PopupMenu(getContext(), holder.popup);
+            final DbHelper db = new DbHelper(mActivity);
+            popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
+            popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
+                public boolean onMenuItemClick(@NonNull MenuItem item) {
+                    int itemId = item.getItemId();
+                    if (itemId == R.id.delete_popup) {
+                        AlertDialogsHelper.getDeleteDialog(getContext(), () -> {
+                            db.deleteExamById(getItem(position));
+                            db.updateExam(getItem(position));
+                            examlist.remove(position);
+                            notifyDataSetChanged();
+                        }, getContext().getString(R.string.timetable_delete_exam, exam.getSubject()));
+                        return true;
+                    } else if (itemId == R.id.edit_popup) {
+                        final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_exam, null);
+                        AlertDialogsHelper.getEditExamDialog(mActivity, alertLayout, examlist, mListView, position);
+                        notifyDataSetChanged();
+                        return true;
                     }
-                });
-                popup.show();
-            }
+                    return onMenuItemClick(item);
+                }
+            });
+            popup.show();
         });
 
         hidePopUpMenu(holder);
@@ -128,6 +149,7 @@ public class ExamsAdapter extends ArrayAdapter<Exam> {
         return super.getItemId(position);
     }
 
+    @NonNull
     public ArrayList<Exam> getExamList() {
         return examlist;
     }
@@ -136,7 +158,7 @@ public class ExamsAdapter extends ArrayAdapter<Exam> {
         return exam;
     }
 
-    private void hidePopUpMenu(ViewHolder holder) {
+    private void hidePopUpMenu(@NonNull ViewHolder holder) {
         SparseBooleanArray checkedItems = mListView.getCheckedItemPositions();
         if (checkedItems.size() > 0) {
             for (int i = 0; i < checkedItems.size(); i++) {
diff --git a/app/src/main/java/com/ulan/timetable/adapters/FragmentsTabAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/FragmentsTabAdapter.java
index a2c592e..f241d90 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/FragmentsTabAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/FragmentsTabAdapter.java
@@ -1,4 +1,5 @@
 package com.ulan.timetable.adapters;
+
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment;
@@ -11,14 +12,16 @@ import java.util.List;
 /**
  * Created by Ulan on 05.09.2018.
  */
-public class FragmentsTabAdapter  extends FragmentStatePagerAdapter {
+public class FragmentsTabAdapter extends FragmentStatePagerAdapter {
 
     private final List<Fragment> mFragmentList = new ArrayList<>();
     private final List<String> mFragmentTitleList = new ArrayList<>();
 
-    public FragmentsTabAdapter(FragmentManager fm) {
-        super(fm);
+    public FragmentsTabAdapter(@NonNull FragmentManager fm) {
+        super(fm, FragmentsTabAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);
     }
+
+    @NonNull
     @Override
     public Fragment getItem(int position) {
         return mFragmentList.get(position);
@@ -28,11 +31,13 @@ public class FragmentsTabAdapter  extends FragmentStatePagerAdapter {
         mFragmentList.add(fragment);
         mFragmentTitleList.add(title);
     }
+
     @Nullable
     @Override
     public CharSequence getPageTitle(int position) {
         return mFragmentTitleList.get(position);
     }
+
     @Override
     public int getCount() {
         return mFragmentList.size();
@@ -43,6 +48,7 @@ public class FragmentsTabAdapter  extends FragmentStatePagerAdapter {
         return POSITION_NONE;
     }
 
+    @NonNull
     public List<Fragment> getFragmentList() {
         return mFragmentList;
     }
diff --git a/app/src/main/java/com/ulan/timetable/adapters/HomeworksAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/HomeworksAdapter.java
index 47c6090..4700900 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/HomeworksAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/HomeworksAdapter.java
@@ -1,8 +1,7 @@
 package com.ulan.timetable.adapters;
 
-import android.app.Activity;
-
-
+import android.content.res.ColorStateList;
+import android.graphics.Color;
 import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
@@ -14,12 +13,16 @@ import android.widget.ListView;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.PopupMenu;
 import androidx.cardview.widget.CardView;
+import androidx.core.widget.ImageViewCompat;
 
-import com.ulan.timetable.model.Homework;
 import com.ulan.timetable.R;
+import com.ulan.timetable.model.Homework;
 import com.ulan.timetable.utils.AlertDialogsHelper;
+import com.ulan.timetable.utils.ColorPalette;
 import com.ulan.timetable.utils.DbHelper;
 
 import java.util.ArrayList;
@@ -30,11 +33,12 @@ import java.util.Objects;
  */
 public class HomeworksAdapter extends ArrayAdapter<Homework> {
 
-    private Activity mActivity;
-    private int mResource;
-    private ArrayList<Homework> homeworklist;
+    @NonNull
+    private final AppCompatActivity mActivity;
+    @NonNull
+    private final ArrayList<Homework> homeworklist;
     private Homework homework;
-    private ListView mListView;
+    private final ListView mListView;
 
     private static class ViewHolder {
         TextView subject;
@@ -44,17 +48,16 @@ public class HomeworksAdapter extends ArrayAdapter<Homework> {
         ImageView popup;
     }
 
-    public HomeworksAdapter(Activity activity, ListView listView,  int resource, ArrayList<Homework> objects) {
+    public HomeworksAdapter(@NonNull AppCompatActivity activity, ListView listView, int resource, @NonNull ArrayList<Homework> objects) {
         super(activity, resource, objects);
         mActivity = activity;
         mListView = listView;
-        mResource = resource;
         homeworklist = objects;
     }
 
     @NonNull
     @Override
-    public View getView(final int position, View convertView, @NonNull ViewGroup parent) {
+    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
         String subject = Objects.requireNonNull(getItem(position)).getSubject();
         String description = Objects.requireNonNull(getItem(position)).getDescription();
         String date = Objects.requireNonNull(getItem(position)).getDate();
@@ -63,9 +66,9 @@ public class HomeworksAdapter extends ArrayAdapter<Homework> {
         homework = new Homework(subject, description, date, color);
         final ViewHolder holder;
 
-        if(convertView == null){
+        if (convertView == null) {
             LayoutInflater inflater = LayoutInflater.from(mActivity);
-            convertView = inflater.inflate(mResource, parent, false);
+            convertView = inflater.inflate(R.layout.listview_homeworks_adapter, parent, false);
             holder = new ViewHolder();
             holder.subject = convertView.findViewById(R.id.subjecthomework);
             holder.description = convertView.findViewById(R.id.descriptionhomework);
@@ -73,42 +76,47 @@ public class HomeworksAdapter extends ArrayAdapter<Homework> {
             holder.cardView = convertView.findViewById(R.id.homeworks_cardview);
             holder.popup = convertView.findViewById(R.id.popupbtn);
             convertView.setTag(holder);
-        }
-        else{
+        } else {
             holder = (ViewHolder) convertView.getTag();
         }
+
+        //Setup colors based on Background
+        int textColor = ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK);
+        holder.subject.setTextColor(textColor);
+        holder.description.setTextColor(textColor);
+        holder.date.setTextColor(textColor);
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.timeimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.popupbtn), ColorStateList.valueOf(textColor));
+        convertView.findViewById(R.id.line).setBackgroundColor(textColor);
+
+
         holder.subject.setText(homework.getSubject());
         holder.description.setText(homework.getDescription());
         holder.date.setText(homework.getDate());
         holder.cardView.setCardBackgroundColor(homework.getColor());
-        holder.popup.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final PopupMenu popup = new PopupMenu(mActivity, holder.popup);
-                final DbHelper db = new DbHelper(mActivity);
-                popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
-                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
-                    public boolean onMenuItemClick(MenuItem item) {
-                        switch (item.getItemId()) {
-                            case R.id.delete_popup:
-                                db.deleteHomeworkById(getItem(position));
-                                db.updateHomework(getItem(position));
-                                homeworklist.remove(position);
-                                notifyDataSetChanged();
-                                return true;
-
-                            case R.id.edit_popup:
-                                final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_homework, null);
-                                AlertDialogsHelper.getEditHomeworkDialog(mActivity, alertLayout, homeworklist, mListView, position);
-                                notifyDataSetChanged();
-                                return true;
-                            default:
-                                return onMenuItemClick(item);
-                        }
+        holder.popup.setOnClickListener(v -> {
+            final PopupMenu popup = new PopupMenu(getContext(), holder.popup);
+            final DbHelper db = new DbHelper(mActivity);
+            popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
+            popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
+                public boolean onMenuItemClick(@NonNull MenuItem item) {
+                    int itemId = item.getItemId();
+                    if (itemId == R.id.delete_popup) {
+                        db.deleteHomeworkById(getItem(position));
+                        db.updateHomework(getItem(position));
+                        homeworklist.remove(position);
+                        notifyDataSetChanged();
+                        return true;
+                    } else if (itemId == R.id.edit_popup) {
+                        final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_homework, null);
+                        AlertDialogsHelper.getEditHomeworkDialog(mActivity, alertLayout, homeworklist, mListView, position);
+                        notifyDataSetChanged();
+                        return true;
                     }
-                });
-                popup.show();
-            }
+                    return onMenuItemClick(item);
+                }
+            });
+            popup.show();
         });
 
         hidePopUpMenu(holder);
@@ -121,6 +129,7 @@ public class HomeworksAdapter extends ArrayAdapter<Homework> {
         return super.getItemId(position);
     }
 
+    @NonNull
     public ArrayList<Homework> getHomeworkList() {
         return homeworklist;
     }
@@ -129,7 +138,7 @@ public class HomeworksAdapter extends ArrayAdapter<Homework> {
         return homework;
     }
 
-    private void hidePopUpMenu(ViewHolder holder) {
+    private void hidePopUpMenu(@NonNull ViewHolder holder) {
         SparseBooleanArray checkedItems = mListView.getCheckedItemPositions();
         if (checkedItems.size() > 0) {
             for (int i = 0; i < checkedItems.size(); i++) {
diff --git a/app/src/main/java/com/ulan/timetable/adapters/NotesAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/NotesAdapter.java
index c147ff2..6fbf096 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/NotesAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/NotesAdapter.java
@@ -1,6 +1,7 @@
 package com.ulan.timetable.adapters;
 
-import android.app.Activity;
+import android.content.res.ColorStateList;
+import android.graphics.Color;
 import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
@@ -13,12 +14,15 @@ import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.PopupMenu;
 import androidx.cardview.widget.CardView;
+import androidx.core.widget.ImageViewCompat;
 
-import com.ulan.timetable.model.Note;
 import com.ulan.timetable.R;
+import com.ulan.timetable.model.Note;
 import com.ulan.timetable.utils.AlertDialogsHelper;
+import com.ulan.timetable.utils.ColorPalette;
 import com.ulan.timetable.utils.DbHelper;
 
 import java.util.ArrayList;
@@ -30,11 +34,12 @@ import java.util.Objects;
  */
 public class NotesAdapter extends ArrayAdapter<Note> {
 
-    private Activity mActivity;
-    private int mResource;
-    private ArrayList<Note> notelist;
+    @NonNull
+    private final AppCompatActivity mActivity;
+    @NonNull
+    private final ArrayList<Note> notelist;
     private Note note;
-    private ListView mListView;
+    private final ListView mListView;
 
     private static class ViewHolder {
         TextView title;
@@ -42,11 +47,10 @@ public class NotesAdapter extends ArrayAdapter<Note> {
         CardView cardView;
     }
 
-    public NotesAdapter(Activity activity, ListView listView, int resource, ArrayList<Note> objects) {
+    public NotesAdapter(@NonNull AppCompatActivity activity, ListView listView, int resource, @NonNull ArrayList<Note> objects) {
         super(activity, resource, objects);
         mActivity = activity;
         mListView = listView;
-        mResource = resource;
         notelist = objects;
     }
 
@@ -60,9 +64,9 @@ public class NotesAdapter extends ArrayAdapter<Note> {
         note = new Note(title, text, color);
         final ViewHolder holder;
 
-        if(convertView == null) {
+        if (convertView == null) {
             LayoutInflater inflater = LayoutInflater.from(mActivity);
-            convertView = inflater.inflate(mResource, parent, false);
+            convertView = inflater.inflate(R.layout.listview_notes_adapter, parent, false);
             holder = new ViewHolder();
             holder.title = convertView.findViewById(R.id.titlenote);
             holder.popup = convertView.findViewById(R.id.popupbtn);
@@ -71,36 +75,42 @@ public class NotesAdapter extends ArrayAdapter<Note> {
         } else {
             holder = (ViewHolder) convertView.getTag();
         }
+
+        //Setup colors based on Background
+        int textColor = ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK);
+        holder.title.setTextColor(textColor);
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.popupbtn), ColorStateList.valueOf(textColor));
+
+
         holder.title.setText(note.getTitle());
         holder.cardView.setCardBackgroundColor(note.getColor());
-        holder.popup.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final PopupMenu popup = new PopupMenu(mActivity, holder.popup);
-                final DbHelper db = new DbHelper(mActivity);
-                popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
-                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
-                    public boolean onMenuItemClick(MenuItem item) {
-                        switch (item.getItemId()) {
-                            case R.id.delete_popup:
-                                db.deleteNoteById(getItem(position));
-                                db.updateNote(getItem(position));
-                                notelist.remove(position);
-                                notifyDataSetChanged();
-                                return true;
-
-                            case R.id.edit_popup:
-                                final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_note, null);
-                                AlertDialogsHelper.getEditNoteDialog(mActivity, alertLayout, notelist, mListView, position);
-                                notifyDataSetChanged();
-                                return true;
-                            default:
-                                return onMenuItemClick(item);
-                        }
+        holder.popup.setOnClickListener(v -> {
+            final PopupMenu popup = new PopupMenu(getContext(), holder.popup);
+            final DbHelper db = new DbHelper(mActivity);
+            popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
+            popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
+                public boolean onMenuItemClick(@NonNull MenuItem item) {
+                    int itemId = item.getItemId();
+                    if (itemId == R.id.delete_popup) {
+                        AlertDialogsHelper.getDeleteDialog(getContext(), () -> {
+                            db.deleteNoteById(getItem(position));
+                            db.updateNote(getItem(position));
+                            notelist.remove(position);
+                            notifyDataSetChanged();
+                        }, getContext().getString(R.string.timetable_delete_note, note.getTitle()));
+                        return true;
+                    } else if (itemId == R.id.edit_popup) {
+                        final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_note, null);
+                        AlertDialogsHelper.getEditNoteDialog(mActivity, alertLayout, notelist, mListView, position);
+                        notifyDataSetChanged();
+                        return true;
                     }
-                });
-                popup.show();
-            }
+                    return
+
+                            onMenuItemClick(item);
+                }
+            });
+            popup.show();
         });
 
         hidePopUpMenu(holder);
@@ -113,6 +123,7 @@ public class NotesAdapter extends ArrayAdapter<Note> {
         return super.getItemId(position);
     }
 
+    @NonNull
     public ArrayList<Note> getNoteList() {
         return notelist;
     }
@@ -121,14 +132,14 @@ public class NotesAdapter extends ArrayAdapter<Note> {
         return note;
     }
 
-     private void hidePopUpMenu(ViewHolder holder) {
+    private void hidePopUpMenu(@NonNull ViewHolder holder) {
         SparseBooleanArray checkedItems = mListView.getCheckedItemPositions();
         if (checkedItems.size() > 0) {
             for (int i = 0; i < checkedItems.size(); i++) {
                 int key = checkedItems.keyAt(i);
                 if (checkedItems.get(key)) {
                     holder.popup.setVisibility(View.INVISIBLE);
-                    }
+                }
             }
         } else {
             holder.popup.setVisibility(View.VISIBLE);
diff --git a/app/src/main/java/com/ulan/timetable/adapters/TeachersAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/TeachersAdapter.java
index 7910ad7..b33e86a 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/TeachersAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/TeachersAdapter.java
@@ -1,8 +1,5 @@
 package com.ulan.timetable.adapters;
 
-import android.app.Activity;
-
-
 import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
@@ -14,11 +11,12 @@ import android.widget.ListView;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.PopupMenu;
 import androidx.cardview.widget.CardView;
 
-import com.ulan.timetable.model.Teacher;
 import com.ulan.timetable.R;
+import com.ulan.timetable.model.Teacher;
 import com.ulan.timetable.utils.AlertDialogsHelper;
 import com.ulan.timetable.utils.DbHelper;
 
@@ -30,7 +28,7 @@ import java.util.Objects;
  */
 public class TeachersAdapter extends ArrayAdapter<Teacher> {
 
-    private Activity mActivity;
+    private AppCompatActivity mActivity;
     private int mResource;
     private ArrayList<Teacher> teacherlist;
     private Teacher teacher;
@@ -45,7 +43,7 @@ public class TeachersAdapter extends ArrayAdapter<Teacher> {
         ImageView popup;
     }
 
-    public TeachersAdapter(Activity activity, ListView listView, int resource, ArrayList<Teacher> objects) {
+    public TeachersAdapter(AppCompatActivity activity, ListView listView, int resource, ArrayList<Teacher> objects) {
         super(activity, resource, objects);
         mActivity = activity;
         mListView = listView;
diff --git a/app/src/main/java/com/ulan/timetable/adapters/WeekAdapter.java b/app/src/main/java/com/ulan/timetable/adapters/WeekAdapter.java
index 59be4e7..596aed8 100644
--- a/app/src/main/java/com/ulan/timetable/adapters/WeekAdapter.java
+++ b/app/src/main/java/com/ulan/timetable/adapters/WeekAdapter.java
@@ -1,10 +1,10 @@
 package com.ulan.timetable.adapters;
 
 import android.annotation.SuppressLint;
-import android.app.Activity;
-
-
+import android.content.res.ColorStateList;
+import android.graphics.Color;
 import android.util.SparseBooleanArray;
+import android.util.TypedValue;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.View;
@@ -15,12 +15,16 @@ import android.widget.ListView;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.PopupMenu;
 import androidx.cardview.widget.CardView;
+import androidx.core.widget.ImageViewCompat;
 
 import com.ulan.timetable.R;
 import com.ulan.timetable.model.Week;
 import com.ulan.timetable.utils.AlertDialogsHelper;
+import com.ulan.timetable.utils.ColorPalette;
 import com.ulan.timetable.utils.DbHelper;
 
 import java.util.ArrayList;
@@ -32,11 +36,12 @@ import java.util.Objects;
  */
 public class WeekAdapter extends ArrayAdapter<Week> {
 
-    private Activity mActivity;
-    private int mResource;
-    private ArrayList<Week> weeklist;
+    @NonNull
+    private final AppCompatActivity mActivity;
+    @NonNull
+    private final ArrayList<Week> weeklist;
     private Week week;
-    private ListView mListView;
+    private final ListView mListView;
 
     private static class ViewHolder {
         TextView subject;
@@ -47,10 +52,9 @@ public class WeekAdapter extends ArrayAdapter<Week> {
         CardView cardView;
     }
 
-    public WeekAdapter(Activity activity, ListView listView, int resource, ArrayList<Week> objects) {
+    public WeekAdapter(@NonNull AppCompatActivity activity, ListView listView, int resource, @NonNull ArrayList<Week> objects) {
         super(activity, resource, objects);
         mActivity = activity;
-        mResource = resource;
         weeklist = objects;
         mListView = listView;
     }
@@ -58,21 +62,21 @@ public class WeekAdapter extends ArrayAdapter<Week> {
     @SuppressLint("SetTextI18n")
     @NonNull
     @Override
-    public View getView(final int position, View convertView, @NonNull ViewGroup parent) {
+    public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
         String subject = Objects.requireNonNull(getItem(position)).getSubject();
         String teacher = Objects.requireNonNull(getItem(position)).getTeacher();
         String time_from = Objects.requireNonNull(getItem(position)).getFromTime();
         String time_to = Objects.requireNonNull(getItem(position)).getToTime();
         String room = Objects.requireNonNull(getItem(position)).getRoom();
-        int color = getItem(position).getColor();
+        int color = Objects.requireNonNull(getItem(position)).getColor();
 
         week = new Week(subject, teacher, room, time_from, time_to, color);
         final ViewHolder holder;
 
-        if(convertView == null){
+        if (convertView == null) {
             LayoutInflater inflater = LayoutInflater.from(mActivity);
-            convertView = inflater.inflate(mResource, parent, false);
-            holder= new ViewHolder();
+            convertView = inflater.inflate(R.layout.listview_week_adapter, parent, false);
+            holder = new ViewHolder();
             holder.subject = convertView.findViewById(R.id.subject);
             holder.teacher = convertView.findViewById(R.id.teacher);
             holder.time = convertView.findViewById(R.id.time);
@@ -80,51 +84,69 @@ public class WeekAdapter extends ArrayAdapter<Week> {
             holder.popup = convertView.findViewById(R.id.popupbtn);
             holder.cardView = convertView.findViewById(R.id.week_cardview);
             convertView.setTag(holder);
-        }
-        else{
+        } else {
             holder = (ViewHolder) convertView.getTag();
         }
 
+        //Setup colors based on Background
+        int textColor = ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK);
+        holder.subject.setTextColor(textColor);
+        holder.teacher.setTextColor(textColor);
+        holder.time.setTextColor(textColor);
+        holder.room.setTextColor(textColor);
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.roomimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.teacherimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.timeimage), ColorStateList.valueOf(textColor));
+        ImageViewCompat.setImageTintList(convertView.findViewById(R.id.popupbtn), ColorStateList.valueOf(textColor));
+        convertView.findViewById(R.id.line).setBackgroundColor(textColor);
+
+
         holder.subject.setText(week.getSubject());
         holder.teacher.setText(week.getTeacher());
+
         holder.room.setText(week.getRoom());
+        holder.room.setOnClickListener(null);
+
+        TypedValue outValue = new TypedValue();
+        getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground, outValue, true);
+        holder.room.setBackgroundResource(outValue.resourceId);
+
         holder.time.setText(week.getFromTime() + " - " + week.getToTime());
         holder.cardView.setCardBackgroundColor(week.getColor());
-        holder.popup.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final PopupMenu popup = new PopupMenu(mActivity, holder.popup);
-                final DbHelper db = new DbHelper(mActivity);
-                popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
-                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
-                    public boolean onMenuItemClick(MenuItem item) {
-                        switch (item.getItemId()) {
-                            case R.id.delete_popup:
-                                db.deleteWeekById(getItem(position));
-                                db.updateWeek(getItem(position));
-                                weeklist.remove(position);
-                                notifyDataSetChanged();
-                                return true;
-
-                            case R.id.edit_popup:
-                                final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_subject, null);
-                                AlertDialogsHelper.getEditSubjectDialog(mActivity, alertLayout, weeklist, mListView, position);
-                                notifyDataSetChanged();
-                                return true;
-                            default:
-                                return onMenuItemClick(item);
-                        }
+        holder.popup.setOnClickListener(v -> {
+            final PopupMenu popup = new PopupMenu(getContext(), holder.popup);
+            final DbHelper db = new DbHelper(mActivity);
+            popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
+            popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
+                public boolean onMenuItemClick(@NonNull MenuItem item) {
+                    int itemId = item.getItemId();
+                    if (itemId == R.id.delete_popup) {
+                        AlertDialogsHelper.getDeleteDialog(getContext(), () -> {
+                            db.deleteWeekById(getItem(position));
+                            db.updateWeek(getItem(position));
+                            weeklist.remove(position);
+                            notifyDataSetChanged();
+                        }, getContext().getString(R.string.timetable_delete_week, week.getSubject()));
+                        return true;
+                    } else if (itemId == R.id.edit_popup) {
+                        final View alertLayout = mActivity.getLayoutInflater().inflate(R.layout.dialog_add_subject, null);
+                        AlertDialogsHelper.getEditSubjectDialog(mActivity, alertLayout, mListView, weeklist.get(position));
+                        notifyDataSetChanged();
+                        return true;
                     }
-                });
-                popup.show();
-            }
+                    return onMenuItemClick(item);
+                }
+            });
+            popup.show();
         });
 
         hidePopUpMenu(holder);
 
+
         return convertView;
     }
 
+    @NonNull
     public ArrayList<Week> getWeekList() {
         return weeklist;
     }
@@ -133,17 +155,18 @@ public class WeekAdapter extends ArrayAdapter<Week> {
         return week;
     }
 
-    private void hidePopUpMenu(ViewHolder holder) {
+    private void hidePopUpMenu(@NonNull ViewHolder holder) {
         SparseBooleanArray checkedItems = mListView.getCheckedItemPositions();
         if (checkedItems.size() > 0) {
             for (int i = 0; i < checkedItems.size(); i++) {
                 int key = checkedItems.keyAt(i);
                 if (checkedItems.get(key)) {
                     holder.popup.setVisibility(View.INVISIBLE);
-                    }
+                }
             }
         } else {
             holder.popup.setVisibility(View.VISIBLE);
         }
     }
+
 }
diff --git a/app/src/main/java/com/ulan/timetable/fragments/FridayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/FridayFragment.java
deleted file mode 100644
index e05ca13..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/FridayFragment.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import androidx.fragment.app.Fragment;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.R;
-import com.ulan.timetable.utils.FragmentHelper;
-
-
-public class FridayFragment extends Fragment {
-
-    public static final String KEY_FRIDAY_FRAGMENT = "Friday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_friday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.fridaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_FRIDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
diff --git a/app/src/main/java/com/ulan/timetable/fragments/MondayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/MondayFragment.java
deleted file mode 100644
index ddf03d9..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/MondayFragment.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.ListView;
-
-import androidx.fragment.app.Fragment;
-
-import com.ulan.timetable.R;
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.utils.FragmentHelper;
-
-
-public class MondayFragment extends Fragment {
-
-    public static final String KEY_MONDAY_FRAGMENT = "Monday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-    private ImageView popup;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_monday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        popup = view.findViewById(R.id.popupbtn);
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.mondaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_MONDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/fragments/SaturdayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/SaturdayFragment.java
deleted file mode 100644
index e88e73b..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/SaturdayFragment.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import androidx.fragment.app.Fragment;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.R;
-import com.ulan.timetable.utils.FragmentHelper;
-
-public class SaturdayFragment extends Fragment {
-
-    public static final String KEY_SATURDAY_FRAGMENT = "Saturday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_saturday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.saturdaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_SATURDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
diff --git a/app/src/main/java/com/ulan/timetable/fragments/SettingsFragment.java b/app/src/main/java/com/ulan/timetable/fragments/SettingsFragment.java
index 295079f..e47bd25 100644
--- a/app/src/main/java/com/ulan/timetable/fragments/SettingsFragment.java
+++ b/app/src/main/java/com/ulan/timetable/fragments/SettingsFragment.java
@@ -1,9 +1,16 @@
 package com.ulan.timetable.fragments;
 
+import android.app.AlarmManager;
+import android.app.TimePickerDialog;
 import android.os.Bundle;
+
+import androidx.preference.Preference;
 import androidx.preference.PreferenceFragmentCompat;
+import androidx.preference.PreferenceManager;
 
 import com.ulan.timetable.R;
+import com.ulan.timetable.receivers.DailyReceiver;
+import com.ulan.timetable.utils.PreferenceUtil;
 
 
 public class SettingsFragment extends PreferenceFragmentCompat {
@@ -11,5 +18,51 @@ public class SettingsFragment extends PreferenceFragmentCompat {
     @Override
     public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
         setPreferencesFromResource(R.xml.settings, rootKey);
+
+        Preference cyanea = findPreference("cyanea");
+        cyanea.setOnPreferenceClickListener((Preference p) -> {
+//            startActivity(new Intent(getActivity(), CyaneaSettingsActivity.class));
+            return true;
+        });
+
+        setNotif();
+
+        Preference myPref = findPreference("timetableNotif");
+        myPref.setOnPreferenceClickListener((Preference preference) -> {
+            setNotif();
+            return true;
+        });
+
+        myPref = findPreference("timetable_alarm");
+        myPref.setOnPreferenceClickListener((Preference p) -> {
+            int[] oldTimes = PreferenceUtil.getAlarmTime(getContext());
+            TimePickerDialog timePickerDialog = new TimePickerDialog(getActivity(),
+                    (view, hourOfDay, minute) -> {
+                        PreferenceUtil.setAlarmTime(getContext(), hourOfDay, minute, 0);
+                        PreferenceUtil.setRepeatingAlarm(getContext(), DailyReceiver.class, hourOfDay, minute, 0, DailyReceiver.DailyReceiverID, AlarmManager.INTERVAL_DAY);
+                    }, oldTimes[0], oldTimes[1], true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
+            return true;
+        });
+
+        setTurnOff();
+        myPref = findPreference("automatic_do_not_disturb");
+        myPref.setOnPreferenceClickListener((Preference p) -> {
+            PreferenceUtil.setDoNotDisturb(getActivity(), false);
+            setTurnOff();
+            return true;
+        });
+    }
+
+    private void setNotif() {
+        boolean show = PreferenceManager.getDefaultSharedPreferences(getContext()).getBoolean("timetableNotif", true);
+        findPreference("alwaysNotification").setVisible(show);
+        findPreference("timetable_alarm").setVisible(show);
+    }
+
+    private void setTurnOff() {
+        boolean show = PreferenceManager.getDefaultSharedPreferences(getContext()).getBoolean("automatic_do_not_disturb", true);
+        findPreference("do_not_disturb_turn_off").setVisible(show);
     }
 }
diff --git a/app/src/main/java/com/ulan/timetable/fragments/SundayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/SundayFragment.java
deleted file mode 100644
index 1d5b216..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/SundayFragment.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import androidx.fragment.app.Fragment;
-
-import android.os.Bundle;;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.R;
-import com.ulan.timetable.utils.FragmentHelper;
-
-
-/**
- * Created by Ulan on 06.09.2018.
- */
-public class SundayFragment extends Fragment {
-
-    public static final String KEY_SUNDAY_FRAGMENT = "Sunday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-    private int listposition = 0;
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_sunday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.sundaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_SUNDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/fragments/ThursdayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/ThursdayFragment.java
deleted file mode 100644
index 52271cc..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/ThursdayFragment.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import androidx.fragment.app.Fragment;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.R;
-import com.ulan.timetable.utils.FragmentHelper;
-
-
-public class ThursdayFragment extends Fragment {
-
-    public static final String KEY_THURSDAY_FRAGMENT = "Thursday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_thursday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.thursdaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_THURSDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/fragments/TuesdayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/TuesdayFragment.java
deleted file mode 100644
index dfee8d7..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/TuesdayFragment.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-
-import androidx.fragment.app.Fragment;
-
-import com.ulan.timetable.R;
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.utils.FragmentHelper;
-
-public class TuesdayFragment extends Fragment {
-
-    public static final String KEY_TUESDAY_FRAGMENT = "Tuesday";
-    private WeekAdapter adapter;
-    private ListView listView;
-    private DbHelper db;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_tuesday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.tuesdaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_TUESDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/fragments/WednesdayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/WednesdayFragment.java
deleted file mode 100644
index 8ea9fd7..0000000
--- a/app/src/main/java/com/ulan/timetable/fragments/WednesdayFragment.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.ulan.timetable.fragments;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ListView;
-import androidx.fragment.app.Fragment;
-import com.ulan.timetable.R;
-import com.ulan.timetable.adapters.WeekAdapter;
-import com.ulan.timetable.utils.DbHelper;
-import com.ulan.timetable.utils.FragmentHelper;
-
-
-public class WednesdayFragment extends Fragment {
-
-    public static final String KEY_WEDNESDAY_FRAGMENT = "Wednesday";
-    private DbHelper db;
-    private ListView listView;
-    private WeekAdapter adapter;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_wednesday, container, false);
-        setupAdapter(view);
-        setupListViewMultiSelect();
-        return view;
-    }
-
-    private void setupAdapter(View view) {
-        db = new DbHelper(getActivity());
-        listView = view.findViewById(R.id.wednesdaylist);
-        adapter = new WeekAdapter(getActivity(), listView, R.layout.listview_week_adapter, db.getWeek(KEY_WEDNESDAY_FRAGMENT));
-        listView.setAdapter(adapter);
-    }
-
-    private void setupListViewMultiSelect() {
-        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
-        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect(getActivity(), listView, adapter, db));
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/fragments/WeekdayFragment.java b/app/src/main/java/com/ulan/timetable/fragments/WeekdayFragment.java
new file mode 100644
index 0000000..7c2e31c
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/fragments/WeekdayFragment.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.fragments;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ListView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+
+import com.ulan.timetable.R;
+import com.ulan.timetable.adapters.WeekAdapter;
+import com.ulan.timetable.model.Week;
+import com.ulan.timetable.utils.DbHelper;
+import com.ulan.timetable.utils.FragmentHelper;
+
+import java.util.ArrayList;
+
+public class WeekdayFragment extends Fragment {
+    public static final String KEY_MONDAY_FRAGMENT = "Monday";
+    public static final String KEY_TUESDAY_FRAGMENT = "Tuesday";
+    public static final String KEY_WEDNESDAY_FRAGMENT = "Wednesday";
+    public static final String KEY_THURSDAY_FRAGMENT = "Thursday";
+    public static final String KEY_FRIDAY_FRAGMENT = "Friday";
+    public static final String KEY_SATURDAY_FRAGMENT = "Saturday";
+    public static final String KEY_SUNDAY_FRAGMENT = "Sunday";
+
+    @Nullable
+    private DbHelper db;
+    private ListView listView;
+    @Nullable
+    private WeekAdapter adapter;
+    private View view;
+
+    private final String key;
+
+    public WeekdayFragment(String key) {
+        super();
+        this.key = key;
+    }
+
+    public WeekdayFragment() {
+        super();
+        this.key = KEY_MONDAY_FRAGMENT;
+    }
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        view = inflater.inflate(R.layout.fragment_weekday, container, false);
+        return view;
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        setupAdapter(view);
+        setupListViewMultiSelect();
+    }
+
+    private void setupAdapter(@NonNull View view) {
+        db = new DbHelper(getActivity());
+        listView = view.findViewById(R.id.timetable_daylist);
+        ArrayList<Week> weeks = db.getWeek(key);
+        adapter = new WeekAdapter((AppCompatActivity) getActivity(), listView, 0, weeks);
+        listView.setAdapter(adapter);
+    }
+
+    private void setupListViewMultiSelect() {
+        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
+        listView.setMultiChoiceModeListener(FragmentHelper.setupListViewMultiSelect((AppCompatActivity) getActivity(), listView, adapter, db));
+    }
+
+    public String getKey() {
+        return key;
+    }
+}
diff --git a/app/src/main/java/com/ulan/timetable/receivers/DailyReceiver.java b/app/src/main/java/com/ulan/timetable/receivers/DailyReceiver.java
new file mode 100644
index 0000000..add9dca
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/receivers/DailyReceiver.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.receivers;
+
+import android.app.AlarmManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+
+import androidx.annotation.NonNull;
+
+import com.ulan.timetable.utils.NotificationUtil;
+import com.ulan.timetable.utils.PreferenceUtil;
+
+/**
+ * Created by Ulan on 28.01.2019.
+ */
+public class DailyReceiver extends BroadcastReceiver {
+
+    public static final int DailyReceiverID = 10000;
+
+    @Override
+    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+        if (intent.getAction() != null) {
+            if (intent.getAction().equalsIgnoreCase(Intent.ACTION_BOOT_COMPLETED)) {
+                // Set the alarm here.
+                if (PreferenceUtil.isAlarmOn(context)) {
+                    int[] times = PreferenceUtil.getAlarmTime(context);
+                    PreferenceUtil.setRepeatingAlarm(context, DailyReceiver.class, times[0], times[1], times[2], DailyReceiverID, AlarmManager.INTERVAL_DAY);
+                } else
+                    PreferenceUtil.cancelAlarm(context, DailyReceiver.class, DailyReceiverID);
+                NotificationUtil.sendNotificationSummary(context, true);
+                return;
+            }
+        }
+
+        if (!PreferenceUtil.isAlarmOn(context)) {
+            PreferenceUtil.cancelAlarm(context, DailyReceiver.class, DailyReceiverID);
+        } else {
+            NotificationUtil.sendNotificationSummary(context, true);
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/receivers/DoNotDisturbReceivers.kt b/app/src/main/java/com/ulan/timetable/receivers/DoNotDisturbReceivers.kt
new file mode 100644
index 0000000..8b0bd13
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/receivers/DoNotDisturbReceivers.kt
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.receivers
+
+import android.app.NotificationManager
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.os.Build
+import com.ulan.timetable.utils.DbHelper
+import com.ulan.timetable.utils.NotificationUtil
+import com.ulan.timetable.utils.PreferenceUtil
+import java.util.*
+
+class TurnOnReceiver : BroadcastReceiver() {
+    override fun onReceive(context: Context, intent: Intent) {
+        if (intent.action != null) {
+            if (intent.action.equals(Intent.ACTION_BOOT_COMPLETED, ignoreCase = true)) {
+                // Set the alarm here.
+                setDoNotDisturbReceivers(context)
+                NotificationUtil.sendNotificationCurrentLesson(context, false)
+                return
+            }
+        }
+
+        setDoNotDisturbReceivers(context)
+        setDoNotDisturb(context, true)
+    }
+
+    companion object {
+        const val TurnOn_ID = 30000
+    }
+}
+
+class TurnOffReceiver : BroadcastReceiver() {
+    override fun onReceive(context: Context, intent: Intent?) {
+        setDoNotDisturbReceivers(context)
+        if (PreferenceUtil.isDoNotDisturbTurnOff(context))
+            setDoNotDisturb(context, false)
+    }
+
+    companion object {
+        const val TurnOff_ID = 60000
+    }
+}
+
+
+fun setDoNotDisturb(context: Context, on: Boolean) {
+    NotificationUtil.sendNotificationCurrentLesson(context, true)
+    if (!PreferenceUtil.isAutomaticDoNotDisturb(context))
+        return
+
+    val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+        // Check if the notification policy access has been granted for the app.
+        if (notificationManager.isNotificationPolicyAccessGranted) {
+            val mNotificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+            mNotificationManager.setInterruptionFilter(if (on) NotificationManager.INTERRUPTION_FILTER_NONE else NotificationManager.INTERRUPTION_FILTER_ALL)
+        }
+    }
+}
+
+fun setDoNotDisturbReceivers(context: Context) {
+    Thread(Runnable {
+        val dbHelper = DbHelper(context)
+        val calendar = Calendar.getInstance()
+        val currentDay = NotificationUtil.getCurrentDay(calendar.get(Calendar.DAY_OF_WEEK))
+        val weeks = dbHelper.getWeek(currentDay)
+
+        var lastCalendar = Calendar.getInstance()
+        lastCalendar.set(Calendar.HOUR_OF_DAY, 23)
+        lastCalendar.set(Calendar.MINUTE, 59)
+        var on: Boolean? = null
+
+        for (week in weeks) {
+            val weekCalendarStart = Calendar.getInstance()
+            val startHour = Integer.parseInt(week.fromTime.substring(0, week.fromTime.indexOf(":")))
+            weekCalendarStart.set(Calendar.HOUR_OF_DAY, startHour)
+            val startMinute = Integer.parseInt(week.fromTime.substring(week.fromTime.indexOf(":") + 1))
+            weekCalendarStart.set(Calendar.MINUTE, startMinute)
+
+            if (((startHour == calendar.get(Calendar.HOUR_OF_DAY) && startMinute >= calendar.get(Calendar.MINUTE)) || startHour > calendar.get(Calendar.HOUR_OF_DAY)) && ((startHour == lastCalendar.get(Calendar.HOUR_OF_DAY) && startMinute <= lastCalendar.get(Calendar.MINUTE)) || startHour < lastCalendar.get(Calendar.HOUR_OF_DAY))) {
+                lastCalendar = weekCalendarStart
+                on = true
+            }
+
+            val weekCalendarEnd = Calendar.getInstance()
+            val endHour = Integer.parseInt(week.toTime.substring(0, week.toTime.indexOf(":")))
+            weekCalendarEnd.set(Calendar.HOUR_OF_DAY, endHour)
+            val endMinute = Integer.parseInt(week.toTime.substring(week.toTime.indexOf(":") + 1))
+            weekCalendarEnd.set(Calendar.MINUTE, endMinute)
+
+            if (((endHour == calendar.get(Calendar.HOUR_OF_DAY) && endMinute > calendar.get(Calendar.MINUTE)) || endHour > calendar.get(Calendar.HOUR_OF_DAY)) && ((endHour == lastCalendar.get(Calendar.HOUR_OF_DAY) && endMinute < lastCalendar.get(Calendar.MINUTE)) || endHour < lastCalendar.get(Calendar.HOUR_OF_DAY))) {
+                lastCalendar = weekCalendarEnd
+                on = false
+            }
+
+            if (((startHour == calendar.get(Calendar.HOUR_OF_DAY) && startMinute <= calendar.get(Calendar.MINUTE)) || startHour < calendar.get(Calendar.HOUR_OF_DAY)) && ((endHour == calendar.get(Calendar.HOUR_OF_DAY) && endMinute > calendar.get(Calendar.MINUTE)) || endHour > calendar.get(Calendar.HOUR_OF_DAY))) {
+                //Just in lesson
+                setDoNotDisturb(context, true)
+            }
+        }
+
+        if (on != null) {
+            if (on) {
+                PreferenceUtil.setOneTimeAlarm(context, TurnOnReceiver::class.java, lastCalendar.get(Calendar.HOUR_OF_DAY), lastCalendar.get(Calendar.MINUTE), 0, TurnOnReceiver.TurnOn_ID)
+            } else {
+                PreferenceUtil.setOneTimeAlarm(context, TurnOffReceiver::class.java, lastCalendar.get(Calendar.HOUR_OF_DAY), lastCalendar.get(Calendar.MINUTE), 0, TurnOffReceiver.TurnOff_ID)
+            }
+        }
+    }).start()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/receivers/NotificationDismissButtonReceiver.java b/app/src/main/java/com/ulan/timetable/receivers/NotificationDismissButtonReceiver.java
new file mode 100755
index 0000000..18e1414
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/receivers/NotificationDismissButtonReceiver.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.receivers;
+
+import android.app.NotificationManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+
+import androidx.annotation.NonNull;
+
+public class NotificationDismissButtonReceiver extends BroadcastReceiver {
+    public static final String EXTRA_NOTIFICATION_ID = "EXTRA_NOTIFICATION_ID";
+
+    @Override
+    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+        // if you want cancel notification
+        int notificationId = intent.getIntExtra(EXTRA_NOTIFICATION_ID, 0);
+
+        // if you want cancel notification
+        NotificationManager manager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+        manager.cancel(notificationId);
+    }
+}
diff --git a/app/src/main/java/com/ulan/timetable/utils/AlertDialogsHelper.java b/app/src/main/java/com/ulan/timetable/utils/AlertDialogsHelper.java
index 9c279b2..6e457f7 100644
--- a/app/src/main/java/com/ulan/timetable/utils/AlertDialogsHelper.java
+++ b/app/src/main/java/com/ulan/timetable/utils/AlertDialogsHelper.java
@@ -1,46 +1,52 @@
 package com.ulan.timetable.utils;
 
-import android.app.Activity;
 import android.app.DatePickerDialog;
 import android.app.TimePickerDialog;
+import android.content.Context;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
-
-import androidx.appcompat.app.AlertDialog;
-import androidx.core.content.ContextCompat;
-import androidx.viewpager.widget.ViewPager;
-
 import android.text.TextUtils;
+import android.util.SparseArray;
+import android.view.KeyEvent;
 import android.view.View;
+import android.view.inputmethod.EditorInfo;
 import android.widget.Button;
-import android.widget.DatePicker;
 import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TextView;
-import android.widget.TimePicker;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.viewpager.widget.ViewPager;
+
+import com.afollestad.materialdialogs.MaterialDialog;
 import com.google.android.material.floatingactionbutton.FloatingActionButton;
 import com.google.android.material.snackbar.Snackbar;
+import com.ulan.timetable.R;
 import com.ulan.timetable.adapters.ExamsAdapter;
 import com.ulan.timetable.adapters.FragmentsTabAdapter;
 import com.ulan.timetable.adapters.HomeworksAdapter;
 import com.ulan.timetable.adapters.NotesAdapter;
 import com.ulan.timetable.adapters.TeachersAdapter;
 import com.ulan.timetable.adapters.WeekAdapter;
+import com.ulan.timetable.fragments.WeekdayFragment;
 import com.ulan.timetable.model.Exam;
 import com.ulan.timetable.model.Homework;
 import com.ulan.timetable.model.Note;
 import com.ulan.timetable.model.Teacher;
 import com.ulan.timetable.model.Week;
-import com.ulan.timetable.R;
+
+import java.util.AbstractMap;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import java.util.Set;
+import java.util.TreeSet;
 
-import petrov.kristiyan.colorpicker.ColorPicker;
+import me.jfenn.colorpickerdialog.dialogs.ColorPickerDialog;
+import me.jfenn.colorpickerdialog.views.picker.RGBPickerView;
 
 
 /**
@@ -48,18 +54,18 @@ import petrov.kristiyan.colorpicker.ColorPicker;
  */
 public class AlertDialogsHelper {
 
-    public static void getEditSubjectDialog(final Activity activity, final View alertLayout, final ArrayList<Week> adapter, final ListView listView, int position) {
-        final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
+    public static void getEditSubjectDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final ListView listView, @NonNull final Week week) {
+        final SparseArray<EditText> editTextHashs = new SparseArray<>();
         final EditText subject = alertLayout.findViewById(R.id.subject_dialog);
         editTextHashs.put(R.string.subject, subject);
         final EditText teacher = alertLayout.findViewById(R.id.teacher_dialog);
-        editTextHashs.put(R.string.teacher, teacher);
+//        editTextHashs.put(R.string.teacher, teacher);
         final EditText room = alertLayout.findViewById(R.id.room_dialog);
-        editTextHashs.put(R.string.room, room);
+//        editTextHashs.put(R.string.room, room);
         final TextView from_time = alertLayout.findViewById(R.id.from_time);
         final TextView to_time = alertLayout.findViewById(R.id.to_time);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
-        final Week week = adapter.get(position);
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(week.getColor(), Color.WHITE, Color.BLACK));
 
         subject.setText(week.getSubject());
         teacher.setText(week.getTeacher());
@@ -68,69 +74,87 @@ public class AlertDialogsHelper {
         to_time.setText(week.getToTime());
         select_color.setBackgroundColor(week.getColor() != 0 ? week.getColor() : Color.WHITE);
 
-        from_time.setOnClickListener(new View.OnClickListener() {
+        from_time.setOnClickListener(v -> {
+            int mHour = Integer.parseInt(week.getFromTime().substring(0, week.getFromTime().indexOf(":")));
+            int mMinute = Integer.parseInt(week.getFromTime().substring(week.getFromTime().indexOf(":") + 1));
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute) -> {
+                        from_time.setText(String.format("%02d:%02d", hourOfDay, minute));
+                        week.setFromTime(String.format("%02d:%02d", hourOfDay, minute));
+                    }, mHour, mMinute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
+        });
 
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int mHour = c.get(Calendar.HOUR_OF_DAY);
-                int mMinute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                from_time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                week.setFromTime(String.format("%02d:%02d", hourOfDay, minute));
-                            }
-                        }, mHour, mMinute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show();
-            }
+        to_time.setOnClickListener(v -> {
+            int mHour = Integer.parseInt(week.getToTime().substring(0, week.getToTime().indexOf(":")));
+            int mMinute = Integer.parseInt(week.getToTime().substring(week.getToTime().indexOf(":") + 1));
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute1) -> {
+                        to_time.setText(String.format("%02d:%02d", hourOfDay, minute1));
+                        week.setToTime(String.format("%02d:%02d", hourOfDay, minute1));
+                    }, mHour, mMinute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
         });
 
-        to_time.setOnClickListener(new View.OnClickListener() {
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
+        });
 
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int hour = c.get(Calendar.HOUR_OF_DAY);
-                int minute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                to_time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                week.setToTime(String.format("%02d:%02d", hourOfDay, minute));
+
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    if (teacher.getText().toString().trim().isEmpty())
+                                        teacher.setText(w.getTeacher());
+                                    if (room.getText().toString().trim().isEmpty())
+                                        room.setText(w.getRoom());
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                                }
                             }
-                        }, hour, minute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show();
-            }
-        });
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
+                            return true;
+                        }
                     }
-                });
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        if (teacher.getText().toString().trim().isEmpty())
+                            teacher.setText(w.getTeacher());
+                        if (room.getText().toString().trim().isEmpty())
+                            room.setText(w.getRoom());
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                    }
+                }
             }
         });
 
@@ -143,114 +167,139 @@ public class AlertDialogsHelper {
         final AlertDialog dialog = alert.create();
         dialog.show();
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            teacher.getText().clear();
+            room.getText().clear();
+            from_time.setText(R.string.select_start_time);
+            to_time.setText(R.string.select_end_time);
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())) {
-                    for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
-                            entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            entry.getValue().requestFocus();
-                        }
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText()) /*|| TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())*/) {
+                for (Map.Entry<Integer, EditText> entry : getEntrySet(editTextHashs)) {
+                    if (TextUtils.isEmpty(entry.getValue().getText())) {
+                        entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        entry.getValue().requestFocus();
                     }
-                } else if(!from_time.getText().toString().matches(".*\\d+.*") || !to_time.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper db = new DbHelper(activity);
-                    WeekAdapter weekAdapter = (WeekAdapter) listView.getAdapter(); // In order to get notifyDataSetChanged() method.
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    week.setSubject(subject.getText().toString());
-                    week.setTeacher(teacher.getText().toString());
-                    week.setRoom(room.getText().toString());
-                    week.setColor(buttonColor.getColor());
-                    db.updateWeek(week);
-                    weekAdapter.notifyDataSetChanged();
-                    dialog.dismiss();
                 }
+            } else if (!from_time.getText().toString().matches(".*\\d+.*") || !to_time.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
+            } else {
+                DbHelper db = new DbHelper(activity);
+                WeekAdapter weekAdapter = (WeekAdapter) listView.getAdapter(); // In order to get notifyDataSetChanged() method.
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                week.setSubject(subject.getText().toString());
+                week.setTeacher(teacher.getText().toString());
+                week.setRoom(room.getText().toString());
+                week.setColor(buttonColor.getColor());
+                db.updateWeek(week);
+                weekAdapter.notifyDataSetChanged();
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getAddSubjectDialog(final Activity activity, final View alertLayout, final FragmentsTabAdapter adapter, final ViewPager viewPager) {
-        final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
+    public static void getAddSubjectDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final FragmentsTabAdapter adapter, @NonNull final ViewPager viewPager) {
+        final SparseArray<EditText> editTextHashs = new SparseArray<>();
         final EditText subject = alertLayout.findViewById(R.id.subject_dialog);
+        subject.requestFocus();
         editTextHashs.put(R.string.subject, subject);
         final EditText teacher = alertLayout.findViewById(R.id.teacher_dialog);
-        editTextHashs.put(R.string.teacher, teacher);
+//        editTextHashs.put(R.string.teacher, teacher);
         final EditText room = alertLayout.findViewById(R.id.room_dialog);
-        editTextHashs.put(R.string.room, room);
+//        editTextHashs.put(R.string.room, room);
         final TextView from_time = alertLayout.findViewById(R.id.from_time);
         final TextView to_time = alertLayout.findViewById(R.id.to_time);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
+//        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(((ColorDrawable) select_color.getBackground()).getColor(), Color.WHITE, Color.BLACK));
+
         final Week week = new Week();
 
-        from_time.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int mHour = c.get(Calendar.HOUR_OF_DAY);
-                int mMinute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                from_time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                week.setFromTime(String.format("%02d:%02d", hourOfDay, minute));
-                            }
-                        }, mHour, mMinute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show(); }});
+        from_time.setOnClickListener(v -> {
+            final Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute) -> {
+                        from_time.setText(String.format("%02d:%02d", hourOfDay, minute));
+                        week.setFromTime(String.format("%02d:%02d", hourOfDay, minute));
+                    }, mHour, mMinute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
+        });
 
-        to_time.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int hour = c.get(Calendar.HOUR_OF_DAY);
-                int minute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                to_time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                week.setToTime(String.format("%02d:%02d", hourOfDay, minute));
-                            }
-                        }, hour, minute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show();
-            }
+        to_time.setOnClickListener(v -> {
+            final Calendar c = Calendar.getInstance();
+            int hour = c.get(Calendar.HOUR_OF_DAY);
+            int minute = c.get(Calendar.MINUTE);
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute1) -> {
+                        to_time.setText(String.format("%02d:%02d", hourOfDay, minute1));
+                        week.setToTime(String.format("%02d:%02d", hourOfDay, minute1));
+                    }, hour, minute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
         });
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
-                    }
-                });
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
+        });
+
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    if (teacher.getText().toString().trim().isEmpty())
+                                        teacher.setText(w.getTeacher());
+                                    if (room.getText().toString().trim().isEmpty())
+                                        room.setText(w.getRoom());
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                                }
+                            }
 
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        if (teacher.getText().toString().trim().isEmpty())
+                            teacher.setText(w.getTeacher());
+                        if (room.getText().toString().trim().isEmpty())
+                            room.setText(w.getRoom());
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                    }
+                }
             }
         });
 
@@ -262,62 +311,56 @@ public class AlertDialogsHelper {
         alert.setView(alertLayout);
         final AlertDialog dialog = alert.create();
         FloatingActionButton fab = activity.findViewById(R.id.fab);
-        fab.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                dialog.show();
-            }
+        fab.setOnClickListener(view -> dialog.show());
+
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            teacher.getText().clear();
+            room.getText().clear();
+            from_time.setText(R.string.select_start_time);
+            to_time.setText(R.string.select_end_time);
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
-        });
-
-        submit.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())) {
-                    for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
-                            entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            entry.getValue().requestFocus();
-                        }
+        submit.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText()) /*|| TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())*/) {
+                for (Map.Entry<Integer, EditText> entry : getEntrySet(editTextHashs)) {
+                    if (TextUtils.isEmpty(entry.getValue().getText())) {
+                        entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        entry.getValue().requestFocus();
                     }
-                } else if(!from_time.getText().toString().matches(".*\\d+.*") || !to_time.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    Matcher fragment = Pattern.compile("(.*Fragment)").matcher(adapter.getItem(viewPager.getCurrentItem()).toString());
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    week.setSubject(subject.getText().toString());
-                    week.setFragment(fragment.find() ? fragment.group() : null);
-                    week.setTeacher(teacher.getText().toString());
-                    week.setRoom(room.getText().toString());
-                    week.setColor(buttonColor.getColor());
-                    dbHelper.insertWeek(week);
-                    adapter.notifyDataSetChanged();
-                    subject.getText().clear();
-                    teacher.getText().clear();
-                    room.getText().clear();
-                    from_time.setText(R.string.select_time);
-                    to_time.setText(R.string.select_time);
-                    select_color.setBackgroundColor(Color.WHITE);
-                    subject.requestFocus();
-                    dialog.dismiss();
                 }
+            } else if (!from_time.getText().toString().matches(".*\\d+.*") || !to_time.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
+            } else {
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                week.setSubject(subject.getText().toString());
+                week.setFragment(((WeekdayFragment) adapter.getItem(viewPager.getCurrentItem())).getKey());
+                week.setTeacher(teacher.getText().toString());
+                week.setRoom(room.getText().toString());
+                week.setColor(buttonColor.getColor());
+                new DbHelper(activity).insertWeek(week);
+                adapter.notifyDataSetChanged();
+                subject.getText().clear();
+                teacher.getText().clear();
+                room.getText().clear();
+                from_time.setText(R.string.select_start_time);
+                to_time.setText(R.string.select_end_time);
+                select_color.setBackgroundColor(Color.WHITE);
+                subject.requestFocus();
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getEditHomeworkDialog(final Activity activity, final View alertLayout, final ArrayList<Homework> adapter, final ListView listView, int listposition) {
-        final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
+    public static void getEditHomeworkDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final ArrayList<Homework> adapter, @NonNull final ListView listView, int listposition) {
+        final SparseArray<EditText> editTextHashs = new SparseArray<>();
         final EditText subject = alertLayout.findViewById(R.id.subjecthomework);
         editTextHashs.put(R.string.subject, subject);
         final EditText description = alertLayout.findViewById(R.id.descriptionhomework);
-        editTextHashs.put(R.string.desctiption, description);
+        editTextHashs.put(R.string.description, description);
         final TextView date = alertLayout.findViewById(R.id.datehomework);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
         final Homework homework = adapter.get(listposition);
@@ -326,44 +369,74 @@ public class AlertDialogsHelper {
         description.setText(homework.getDescription());
         date.setText(homework.getDate());
         select_color.setBackgroundColor(homework.getColor() != 0 ? homework.getColor() : Color.WHITE);
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(homework.getColor(), Color.WHITE, Color.BLACK));
+
+        date.setOnClickListener(v -> {
+            final Calendar calendar = Calendar.getInstance();
+            int mYear = calendar.get(Calendar.YEAR);
+            int mMonth = calendar.get(Calendar.MONTH);
+            int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
+            DatePickerDialog datePickerDialog = new DatePickerDialog(activity, (view, year, month, dayOfMonth) -> {
+                date.setText(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+                homework.setDate(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+            }, mYear, mMonth, mdayofMonth);
+            datePickerDialog.setTitle(R.string.choose_date);
+            datePickerDialog.show();
+        });
 
-        date.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar calendar = Calendar.getInstance();
-                int mYear = calendar.get(Calendar.YEAR);
-                int mMonth = calendar.get(Calendar.MONTH);
-                int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
-                DatePickerDialog datePickerDialog = new DatePickerDialog(activity, new DatePickerDialog.OnDateSetListener() {
-                    @Override
-                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
-                        date.setText(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                        homework.setDate(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                    }
-                }, mYear, mMonth, mdayofMonth);
-                datePickerDialog.setTitle(R.string.choose_date);
-                datePickerDialog.show();
-            }
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
+
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+//                                    date.setText(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+//                                    homework.setDate(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+                                }
+                            }
+
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+//                                    date.setText(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+//                                    homework.setDate(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
                     }
-                });
+                }
             }
         });
 
@@ -376,87 +449,115 @@ public class AlertDialogsHelper {
         final AlertDialog dialog = alert.create();
         dialog.show();
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            description.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(description.getText())) {
-                    for (Map.Entry<Integer, EditText> editText : editTextHashs.entrySet()) {
-                        if (TextUtils.isEmpty(editText.getValue().getText())) {
-                            editText.getValue().setError(activity.getResources().getString(editText.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            editText.getValue().requestFocus();
-                        }
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(description.getText())) {
+                for (Map.Entry<Integer, EditText> editText : getEntrySet(editTextHashs)) {
+                    if (TextUtils.isEmpty(editText.getValue().getText())) {
+                        editText.getValue().setError(activity.getResources().getString(editText.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        editText.getValue().requestFocus();
                     }
-                } else if (!date.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.deadline_snackbar, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    HomeworksAdapter homeworksAdapter = (HomeworksAdapter) listView.getAdapter();
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    homework.setSubject(subject.getText().toString());
-                    homework.setDescription(description.getText().toString());
-                    homework.setColor(buttonColor.getColor());
-                    dbHelper.updateHomework(homework);
-                    homeworksAdapter.notifyDataSetChanged();
-                    dialog.dismiss();
                 }
+            } /*else if (!date.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.deadline_snackbar, Snackbar.LENGTH_LONG).show();
+            }*/ else {
+                HomeworksAdapter homeworksAdapter = (HomeworksAdapter) listView.getAdapter();
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                homework.setSubject(subject.getText().toString());
+                homework.setDescription(description.getText().toString());
+                homework.setColor(buttonColor.getColor());
+                new DbHelper(activity).updateHomework(homework);
+                homeworksAdapter.notifyDataSetChanged();
+                dialog.dismiss();
             }
-            });
+        });
     }
 
-    public static void getAddHomeworkDialog(final Activity activity, final View alertLayout, final HomeworksAdapter adapter) {
-        final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
+    public static void getAddHomeworkDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final HomeworksAdapter adapter) {
+        final SparseArray<EditText> editTextHashs = new SparseArray<>();
         final EditText subject = alertLayout.findViewById(R.id.subjecthomework);
         editTextHashs.put(R.string.subject, subject);
+        subject.requestFocus();
         final EditText description = alertLayout.findViewById(R.id.descriptionhomework);
-        editTextHashs.put(R.string.desctiption, description);
+        editTextHashs.put(R.string.description, description);
         final TextView date = alertLayout.findViewById(R.id.datehomework);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(((ColorDrawable) select_color.getBackground()).getColor(), Color.WHITE, Color.BLACK));
+
         final Homework homework = new Homework();
 
-        date.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar calendar = Calendar.getInstance();
-                int mYear = calendar.get(Calendar.YEAR);
-                int mMonth = calendar.get(Calendar.MONTH);
-                int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
-                DatePickerDialog datePickerDialog = new DatePickerDialog(activity, new DatePickerDialog.OnDateSetListener() {
-                    @Override
-                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
-                        date.setText(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                        homework.setDate(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                    }
-                }, mYear, mMonth, mdayofMonth);
-                datePickerDialog.setTitle(R.string.choose_date);
-                datePickerDialog.show();
-            }
+        date.setOnClickListener(v -> {
+            final Calendar calendar = Calendar.getInstance();
+            int mYear = calendar.get(Calendar.YEAR);
+            int mMonth = calendar.get(Calendar.MONTH);
+            int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
+            DatePickerDialog datePickerDialog = new DatePickerDialog(activity, (view, year, month, dayOfMonth) -> {
+                date.setText(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+                homework.setDate(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+            }, mYear, mMonth, mdayofMonth);
+            datePickerDialog.setTitle(R.string.choose_date);
+            datePickerDialog.show();
         });
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
+        });
+
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+//                                    date.setText(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+//                                    homework.setDate(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+                                }
+                            }
+
+                            return true;
+                        }
                     }
-                });
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+//                                    date.setText(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+//                                    homework.setDate(DBUtil.getNextOccurenceOfSubject(dbHelper, w.getSubject()));
+                    }
+                }
             }
         });
 
@@ -468,56 +569,51 @@ public class AlertDialogsHelper {
         alert.setCancelable(false);
         final AlertDialog dialog = alert.create();
         FloatingActionButton fab = activity.findViewById(R.id.fab);
-        fab.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                dialog.show();
-            }
-        });
-
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        fab.setOnClickListener(view -> dialog.show());
+
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            description.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(description.getText())) {
-                    for (Map.Entry<Integer, EditText> editText : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(editText.getValue().getText())) {
-                            editText.getValue().setError(activity.getResources().getString(editText.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            editText.getValue().requestFocus();
-                        }
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(description.getText())) {
+                for (Map.Entry<Integer, EditText> editText : getEntrySet(editTextHashs)) {
+                    if (TextUtils.isEmpty(editText.getValue().getText())) {
+                        editText.getValue().setError(activity.getResources().getString(editText.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        editText.getValue().requestFocus();
                     }
-                } else if(!date.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.deadline_snackbar, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    homework.setSubject(subject.getText().toString());
-                    homework.setDescription(description.getText().toString());
-                    homework.setColor(buttonColor.getColor());
-                    dbHelper.insertHomework(homework);
-
-                    adapter.clear();
-                    adapter.addAll(dbHelper.getHomework());
-                    adapter.notifyDataSetChanged();
-
-                    subject.getText().clear();
-                    description.getText().clear();
-                    date.setText(R.string.select_date);
-                    select_color.setBackgroundColor(Color.WHITE);
-                    subject.requestFocus();
-                    dialog.dismiss();
                 }
+            }/* else if (!date.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.deadline_snackbar, Snackbar.LENGTH_LONG).show();
+            }*/ else {
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                homework.setSubject(subject.getText().toString());
+                homework.setDescription(description.getText().toString());
+                homework.setColor(buttonColor.getColor());
+
+                DbHelper dbHelper = new DbHelper(activity);
+                dbHelper.insertHomework(homework);
+
+                adapter.clear();
+                adapter.addAll(dbHelper.getHomework());
+                adapter.notifyDataSetChanged();
+
+                subject.getText().clear();
+                description.getText().clear();
+                date.setText(R.string.choose_date);
+                select_color.setBackgroundColor(Color.WHITE);
+                subject.requestFocus();
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getEditTeacherDialog(final Activity activity, final View alertLayout, final ArrayList<Teacher> adapter, final ListView listView, int listposition) {
+
+    public static void getEditTeacherDialog(final AppCompatActivity activity, final View alertLayout, final ArrayList<Teacher> adapter, final ListView listView, int listposition) {
         final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
         final EditText name = alertLayout.findViewById(R.id.name_dialog);
         editTextHashs.put(R.string.name, name);
@@ -536,25 +632,22 @@ public class AlertDialogsHelper {
         email.setText(teacher.getEmail());
         select_color.setBackgroundColor(teacher.getColor() != 0 ? teacher.getColor() : Color.WHITE);
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
-                    }
-                });
-            }
+        select_color.setOnClickListener((View v) -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
         final AlertDialog.Builder alert = new AlertDialog.Builder(activity);
@@ -576,9 +669,9 @@ public class AlertDialogsHelper {
         save.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if(TextUtils.isEmpty(name.getText()) || TextUtils.isEmpty(post.getText()) || TextUtils.isEmpty(phone_number.getText()) || TextUtils.isEmpty(email.getText())) {
+                if (TextUtils.isEmpty(name.getText()) || TextUtils.isEmpty(post.getText()) || TextUtils.isEmpty(phone_number.getText()) || TextUtils.isEmpty(email.getText())) {
                     for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
+                        if (TextUtils.isEmpty(entry.getValue().getText())) {
                             entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
                             entry.getValue().requestFocus();
                         }
@@ -600,7 +693,7 @@ public class AlertDialogsHelper {
         });
     }
 
-    public static void getAddTeacherDialog(final Activity activity, final View alertLayout, final TeachersAdapter adapter) {
+    public static void getAddTeacherDialog(final AppCompatActivity activity, final View alertLayout, final TeachersAdapter adapter) {
         final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
         final EditText name = alertLayout.findViewById(R.id.name_dialog);
         editTextHashs.put(R.string.name, name);
@@ -613,25 +706,22 @@ public class AlertDialogsHelper {
         final Button select_color = alertLayout.findViewById(R.id.select_color);
         final Teacher teacher = new Teacher();
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
-                    }
-                });
-            }
+        select_color.setOnClickListener((View v) -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
         final AlertDialog.Builder alert = new AlertDialog.Builder(activity);
@@ -659,9 +749,9 @@ public class AlertDialogsHelper {
         save.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if(TextUtils.isEmpty(name.getText()) || TextUtils.isEmpty(post.getText()) || TextUtils.isEmpty(phone_number.getText()) || TextUtils.isEmpty(email.getText())) {
+                if (TextUtils.isEmpty(name.getText()) || TextUtils.isEmpty(post.getText()) || TextUtils.isEmpty(phone_number.getText()) || TextUtils.isEmpty(email.getText())) {
                     for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
+                        if (TextUtils.isEmpty(entry.getValue().getText())) {
                             entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
                             entry.getValue().requestFocus();
                         }
@@ -692,32 +782,31 @@ public class AlertDialogsHelper {
         });
     }
 
-    public static void getEditNoteDialog(final Activity activity, final View alertLayout, final ArrayList<Note> adapter, final ListView listView, int listposition) {
+
+    public static void getEditNoteDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final ArrayList<Note> adapter, @NonNull final ListView listView, int listposition) {
         final EditText title = alertLayout.findViewById(R.id.titlenote);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
         final Note note = adapter.get(listposition);
         title.setText(note.getTitle());
         select_color.setBackgroundColor(note.getColor() != 0 ? note.getColor() : Color.WHITE);
-
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
-                    }
-                });
-            }
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(note.getColor(), Color.WHITE, Color.BLACK));
+
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
         AlertDialog.Builder alert = new AlertDialog.Builder(activity);
@@ -729,58 +818,53 @@ public class AlertDialogsHelper {
         final AlertDialog dialog = alert.create();
         dialog.show();
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        cancel.setOnClickListener(v -> {
+            title.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(title.getText())) {
-                    title.setError(activity.getResources().getString(R.string.title_error));
-                    title.requestFocus();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    note.setTitle(title.getText().toString());
-                    note.setColor(buttonColor.getColor());
-                    dbHelper.updateNote(note);
-                    NotesAdapter notesAdapter = (NotesAdapter) listView.getAdapter();
-                    notesAdapter.notifyDataSetChanged();
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(title.getText())) {
+                title.setError(activity.getResources().getString(R.string.title_error));
+                title.requestFocus();
+            } else {
+                DbHelper dbHelper = new DbHelper(activity);
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                note.setTitle(title.getText().toString());
+                note.setColor(buttonColor.getColor());
+                dbHelper.updateNote(note);
+                NotesAdapter notesAdapter = (NotesAdapter) listView.getAdapter();
+                notesAdapter.notifyDataSetChanged();
 
-                    dialog.dismiss();
-                }
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getAddNoteDialog(final Activity activity, final View alertLayout, final NotesAdapter adapter) {
+    public static void getAddNoteDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final NotesAdapter adapter) {
         final EditText title = alertLayout.findViewById(R.id.titlenote);
+        title.requestFocus();
         final Button select_color = alertLayout.findViewById(R.id.select_color);
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(((ColorDrawable) select_color.getBackground()).getColor(), Color.WHITE, Color.BLACK));
         final Note note = new Note();
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
-                    }
-                });
-            }
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
         final AlertDialog.Builder alert = new AlertDialog.Builder(activity);
@@ -791,56 +875,48 @@ public class AlertDialogsHelper {
         alert.setCancelable(false);
         final AlertDialog dialog = alert.create();
         FloatingActionButton fab = activity.findViewById(R.id.fab);
-        fab.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                dialog.show();
-            }
-        });
+        fab.setOnClickListener(view -> dialog.show());
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        cancel.setOnClickListener(v -> {
+            title.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(title.getText())) {
-                    title.setError(activity.getResources().getString(R.string.title_error));
-                    title.requestFocus();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    note.setTitle(title.getText().toString());
-                    note.setColor(buttonColor.getColor());
-                    dbHelper.insertNote(note);
-
-                    adapter.clear();
-                    adapter.addAll(dbHelper.getNote());
-                    adapter.notifyDataSetChanged();
-
-                    title.getText().clear();
-                    select_color.setBackgroundColor(Color.WHITE);
-                    dialog.dismiss();
-                }
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(title.getText())) {
+                title.setError(activity.getResources().getString(R.string.title_error));
+                title.requestFocus();
+            } else {
+                DbHelper dbHelper = new DbHelper(activity);
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                note.setTitle(title.getText().toString());
+                note.setColor(buttonColor.getColor());
+                dbHelper.insertNote(note);
+
+                adapter.clear();
+                adapter.addAll(dbHelper.getNote());
+                adapter.notifyDataSetChanged();
+
+                title.getText().clear();
+                select_color.setBackgroundColor(Color.WHITE);
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getEditExamDialog(final Activity activity, final View alertLayout, final ArrayList<Exam> adapter, final ListView listView, int listposition) {
-        final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
+    public static void getEditExamDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final ArrayList<Exam> adapter, @NonNull final ListView listView, int listposition) {
+        final SparseArray<EditText> editTextHashs = new SparseArray<>();
         final EditText subject = alertLayout.findViewById(R.id.subjectexam_dialog);
         editTextHashs.put(R.string.subject, subject);
         final EditText teacher = alertLayout.findViewById(R.id.teacherexam_dialog);
-        editTextHashs.put(R.string.teacher, teacher);
+//        editTextHashs.put(R.string.teacher, teacher);
         final EditText room = alertLayout.findViewById(R.id.roomexam_dialog);
-        editTextHashs.put(R.string.room, room);
+//        editTextHashs.put(R.string.room, room);
         final TextView date = alertLayout.findViewById(R.id.dateexam_dialog);
         final TextView time = alertLayout.findViewById(R.id.timeexam_dialog);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
+
         final Exam exam = adapter.get(listposition);
 
         subject.setText(exam.getSubject());
@@ -849,67 +925,91 @@ public class AlertDialogsHelper {
         date.setText(exam.getDate());
         time.setText(exam.getTime());
         select_color.setBackgroundColor(exam.getColor());
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(exam.getColor(), Color.WHITE, Color.BLACK));
+
+        date.setOnClickListener(v -> {
+            final Calendar calendar = Calendar.getInstance();
+            int mYear = calendar.get(Calendar.YEAR);
+            int mMonth = calendar.get(Calendar.MONTH);
+            int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
+            DatePickerDialog datePickerDialog = new DatePickerDialog(activity, (view, year, month, dayOfMonth) -> {
+                date.setText(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+                exam.setDate(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+            }, mYear, mMonth, mdayofMonth);
+            datePickerDialog.setTitle(R.string.choose_date);
+            datePickerDialog.show();
+        });
 
-        date.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar calendar = Calendar.getInstance();
-                int mYear = calendar.get(Calendar.YEAR);
-                int mMonth = calendar.get(Calendar.MONTH);
-                int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
-                DatePickerDialog datePickerDialog = new DatePickerDialog(activity, new DatePickerDialog.OnDateSetListener() {
-                    @Override
-                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
-                        date.setText(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                        exam.setDate(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                    }
-                }, mYear, mMonth, mdayofMonth);
-                datePickerDialog.setTitle(R.string.choose_date);
-                datePickerDialog.show();
-            }
+        time.setOnClickListener(v -> {
+            int mHour = Integer.parseInt(exam.getTime().substring(0, exam.getTime().indexOf(":")));
+            int mMinute = Integer.parseInt(exam.getTime().substring(exam.getTime().indexOf(":") + 1));
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute) -> {
+                        time.setText(String.format("%02d:%02d", hourOfDay, minute));
+                        exam.setTime(String.format("%02d:%02d", hourOfDay, minute));
+                    }, mHour, mMinute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
         });
 
-        time.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int mHour = c.get(Calendar.HOUR_OF_DAY);
-                int mMinute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                exam.setTime(String.format("%02d:%02d", hourOfDay, minute));
-                            }
-                        }, mHour, mMinute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show();
-            }
+
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
         });
 
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    if (teacher.getText().toString().trim().isEmpty())
+                                        teacher.setText(w.getTeacher());
+                                    if (room.getText().toString().trim().isEmpty())
+                                        room.setText(w.getRoom());
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                                }
+                            }
+
+                            return true;
+                        }
                     }
-                });
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        if (teacher.getText().toString().trim().isEmpty())
+                            teacher.setText(w.getTeacher());
+                        if (room.getText().toString().trim().isEmpty())
+                            room.setText(w.getRoom());
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                    }
+                }
             }
         });
 
@@ -922,119 +1022,143 @@ public class AlertDialogsHelper {
         final AlertDialog dialog = alert.create();
         dialog.show();
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            teacher.getText().clear();
+            room.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())) {
-                    for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
-                            entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            entry.getValue().requestFocus();
-                        }
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText())/* || TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())*/) {
+                for (Map.Entry<Integer, EditText> entry : getEntrySet(editTextHashs)) {
+                    if (TextUtils.isEmpty(entry.getValue().getText())) {
+                        entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        entry.getValue().requestFocus();
                     }
-                } else if (!date.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.date_error, Snackbar.LENGTH_LONG).show();
-                } else if (!time.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    exam.setSubject(subject.getText().toString());
-                    exam.setTeacher(teacher.getText().toString());
-                    exam.setRoom(room.getText().toString());
-                    exam.setColor(buttonColor.getColor());
-
-                    dbHelper.updateExam(exam);
-
-                    ExamsAdapter examsAdapter = (ExamsAdapter) listView.getAdapter();
-                    examsAdapter.notifyDataSetChanged();
-
-                    dialog.dismiss();
                 }
+            } else if (!date.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.date_error, Snackbar.LENGTH_LONG).show();
+            } /*else if (!time.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
+            }*/ else {
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                exam.setSubject(subject.getText().toString());
+                exam.setTeacher(teacher.getText().toString());
+                exam.setRoom(room.getText().toString());
+                exam.setColor(buttonColor.getColor());
+
+                new DbHelper(activity).updateExam(exam);
+
+                ExamsAdapter examsAdapter = (ExamsAdapter) listView.getAdapter();
+                examsAdapter.notifyDataSetChanged();
+
+                dialog.dismiss();
             }
         });
     }
 
-    public static void getAddExamDialog(final Activity activity, final View alertLayout, final ExamsAdapter adapter) {
+    public static void getAddExamDialog(@NonNull final AppCompatActivity activity, @NonNull final View alertLayout, @NonNull final ExamsAdapter adapter) {
         final HashMap<Integer, EditText> editTextHashs = new HashMap<>();
         final EditText subject = alertLayout.findViewById(R.id.subjectexam_dialog);
         editTextHashs.put(R.string.subject, subject);
+        subject.requestFocus();
         final EditText teacher = alertLayout.findViewById(R.id.teacherexam_dialog);
-        editTextHashs.put(R.string.teacher, teacher);
+//        editTextHashs.put(R.string.teacher, teacher);
         final EditText room = alertLayout.findViewById(R.id.roomexam_dialog);
-        editTextHashs.put(R.string.room, room);
+//        editTextHashs.put(R.string.room, room);
         final TextView date = alertLayout.findViewById(R.id.dateexam_dialog);
         final TextView time = alertLayout.findViewById(R.id.timeexam_dialog);
         final Button select_color = alertLayout.findViewById(R.id.select_color);
+        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(((ColorDrawable) select_color.getBackground()).getColor(), Color.WHITE, Color.BLACK));
+
         final Exam exam = new Exam();
 
-        date.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar calendar = Calendar.getInstance();
-                int mYear = calendar.get(Calendar.YEAR);
-                int mMonth = calendar.get(Calendar.MONTH);
-                int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
-                DatePickerDialog datePickerDialog = new DatePickerDialog(activity, new DatePickerDialog.OnDateSetListener() {
-                    @Override
-                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
-                        date.setText(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                        exam.setDate(String.format("%02d-%02d-%02d", year, month+1, dayOfMonth));
-                    }
-                }, mYear, mMonth, mdayofMonth);
-                datePickerDialog.setTitle(R.string.choose_date);
-                datePickerDialog.show();
-            }
+        date.setOnClickListener(v -> {
+            final Calendar calendar = Calendar.getInstance();
+            int mYear = calendar.get(Calendar.YEAR);
+            int mMonth = calendar.get(Calendar.MONTH);
+            int mdayofMonth = calendar.get(Calendar.DAY_OF_MONTH);
+            DatePickerDialog datePickerDialog = new DatePickerDialog(activity, (view, year, month, dayOfMonth) -> {
+                date.setText(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+                exam.setDate(String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth));
+            }, mYear, mMonth, mdayofMonth);
+            datePickerDialog.setTitle(R.string.choose_date);
+            datePickerDialog.show();
         });
 
-        time.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                final Calendar c = Calendar.getInstance();
-                int mHour = c.get(Calendar.HOUR_OF_DAY);
-                int mMinute = c.get(Calendar.MINUTE);
-                TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
-                        new TimePickerDialog.OnTimeSetListener() {
-
-                            @Override
-                            public void onTimeSet(TimePicker view, int hourOfDay,
-                                                  int minute) {
-                                time.setText(String.format("%02d:%02d", hourOfDay, minute));
-                                exam.setTime(String.format("%02d:%02d", hourOfDay, minute));
-                            }
-                        }, mHour, mMinute, true);
-                timePickerDialog.setTitle(R.string.choose_time);
-                timePickerDialog.show();
-            }
+        time.setOnClickListener(v -> {
+            final Calendar c = Calendar.getInstance();
+            int mHour = c.get(Calendar.HOUR_OF_DAY);
+            int mMinute = c.get(Calendar.MINUTE);
+            TimePickerDialog timePickerDialog = new TimePickerDialog(activity,
+                    (view, hourOfDay, minute) -> {
+                        time.setText(String.format("%02d:%02d", hourOfDay, minute));
+                        exam.setTime(String.format("%02d:%02d", hourOfDay, minute));
+                    }, mHour, mMinute, true);
+            timePickerDialog.setTitle(R.string.choose_time);
+            timePickerDialog.show();
         });
 
+        select_color.setOnClickListener(v -> {
+            new ColorPickerDialog()
+                    .withColor(((ColorDrawable) select_color.getBackground()).getColor()) // the default / initial color
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withTitle(activity.getString(R.string.choose_color))
+                    .withCornerRadius(16)
+                    .withAlphaEnabled(false)
+                    .withListener((dialog, color) -> {
+                        // a color has been picked; use it
+                        select_color.setBackgroundColor(color);
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(color, Color.WHITE, Color.BLACK));
+                    })
+                    .clearPickers()
+                    .withPresets(ColorPalette.PRIMARY_COLORS)
+                    .withPicker(RGBPickerView.class)
+                    .show(activity.getSupportFragmentManager(), "colorPicker");
+        });
 
-        select_color.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                int mSelectedColor = ContextCompat.getColor(activity, R.color.white);
-                select_color.setBackgroundColor(mSelectedColor);
-                int[] mColors = activity.getResources().getIntArray(R.array.default_colors);
-
-                ColorPicker colorPicker = new ColorPicker(activity);
-                colorPicker.show();
-                colorPicker.setOnChooseColorListener(new ColorPicker.OnChooseColorListener() {
-                    @Override
-                    public void onChooseColor(int position,int color) {
-                        select_color.setBackgroundColor(color);                    }
-
-                    @Override
-                    public void onCancel(){
-                        // put code
+
+        subject.setOnEditorActionListener(
+                (v, actionId, event) -> {
+                    if (actionId == EditorInfo.IME_ACTION_DONE ||
+                            event != null &&
+                                    event.getAction() == KeyEvent.ACTION_DOWN &&
+                                    event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
+                        if (event == null || !event.isShiftPressed()) {
+                            // the user is done typing.
+                            //AutoFill other fields
+                            for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                                if (w.getSubject().equalsIgnoreCase(v.getText().toString())) {
+                                    if (teacher.getText().toString().trim().isEmpty())
+                                        teacher.setText(w.getTeacher());
+                                    if (room.getText().toString().trim().isEmpty())
+                                        room.setText(w.getRoom());
+                                    select_color.setBackgroundColor(w.getColor());
+                                    select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
+                                }
+                            }
+
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+        );
+        subject.setOnFocusChangeListener((v, hasFocus) -> {
+            if (!hasFocus) {
+                for (Week w : WeekUtils.getAllWeeks(new DbHelper(activity))) {
+                    if (w.getSubject().equalsIgnoreCase(((EditText) v).getText().toString())) {
+                        if (teacher.getText().toString().trim().isEmpty())
+                            teacher.setText(w.getTeacher());
+                        if (room.getText().toString().trim().isEmpty())
+                            room.setText(w.getRoom());
+                        select_color.setBackgroundColor(w.getColor());
+                        select_color.setTextColor(ColorPalette.pickTextColorBasedOnBgColorSimple(w.getColor(), Color.WHITE, Color.BLACK));
                     }
-                });
+                }
             }
         });
 
@@ -1046,58 +1170,78 @@ public class AlertDialogsHelper {
         alert.setView(alertLayout);
         final AlertDialog dialog = alert.create();
         FloatingActionButton fab = activity.findViewById(R.id.fab);
-        fab.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                dialog.show();
-            }
+        fab.setOnClickListener(view -> dialog.show());
+
+        cancel.setOnClickListener(v -> {
+            subject.getText().clear();
+            teacher.getText().clear();
+            room.getText().clear();
+            select_color.setBackgroundColor(Color.WHITE);
+            subject.requestFocus();
+            dialog.dismiss();
         });
 
-        cancel.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
+        save.setOnClickListener(v -> {
+            if (TextUtils.isEmpty(subject.getText()) /*|| TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())*/) {
+                for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
+                    if (TextUtils.isEmpty(entry.getValue().getText())) {
+                        entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
+                        entry.getValue().requestFocus();
+                    }
+                }
+            } else if (!date.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.date_error, Snackbar.LENGTH_LONG).show();
+            } /*else if (!time.getText().toString().matches(".*\\d+.*")) {
+                Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
+            }*/ else {
+                ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
+                exam.setSubject(subject.getText().toString());
+                exam.setTeacher(teacher.getText().toString());
+                exam.setRoom(room.getText().toString());
+                exam.setColor(buttonColor.getColor());
+
+                DbHelper dbHelper = new DbHelper(activity);
+                dbHelper.insertExam(exam);
+
+                adapter.clear();
+                adapter.addAll(dbHelper.getExam());
+                adapter.notifyDataSetChanged();
+
+                subject.getText().clear();
+                teacher.getText().clear();
+                room.getText().clear();
+                date.setText(R.string.choose_date);
+                time.setText(R.string.select_time);
+                select_color.setBackgroundColor(Color.WHITE);
+                subject.requestFocus();
                 dialog.dismiss();
             }
         });
+    }
 
-        save.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if(TextUtils.isEmpty(subject.getText()) || TextUtils.isEmpty(teacher.getText()) || TextUtils.isEmpty(room.getText())) {
-                    for (Map.Entry<Integer, EditText> entry : editTextHashs.entrySet()) {
-                        if(TextUtils.isEmpty(entry.getValue().getText())) {
-                            entry.getValue().setError(activity.getResources().getString(entry.getKey()) + " " + activity.getResources().getString(R.string.field_error));
-                            entry.getValue().requestFocus();
-                        }
-                    }
-                } else if (!date.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.date_error, Snackbar.LENGTH_LONG).show();
-                } else if (!time.getText().toString().matches(".*\\d+.*")) {
-                    Snackbar.make(alertLayout, R.string.time_error, Snackbar.LENGTH_LONG).show();
-                } else {
-                    DbHelper dbHelper = new DbHelper(activity);
-                    ColorDrawable buttonColor = (ColorDrawable) select_color.getBackground();
-                    exam.setSubject(subject.getText().toString());
-                    exam.setTeacher(teacher.getText().toString());
-                    exam.setRoom(room.getText().toString());
-                    exam.setColor(buttonColor.getColor());
-
-                    dbHelper.insertExam(exam);
-
-                    adapter.clear();
-                    adapter.addAll(dbHelper.getExam());
-                    adapter.notifyDataSetChanged();
-
-                    subject.getText().clear();
-                    teacher.getText().clear();
-                    room.getText().clear();
-                    date.setText(R.string.select_date);
-                    time.setText(R.string.select_time);
-                    select_color.setBackgroundColor(Color.WHITE);
-                    subject.requestFocus();
+    public static void getDeleteDialog(@NonNull Context context, @NonNull Runnable runnable, String deleteSubject) {
+        new MaterialDialog.Builder(context)
+                .title(context.getString(R.string.profiles_delete_submit_heading))
+                .content(context.getString(R.string.timetable_delete_content, deleteSubject))
+                .positiveText(context.getString(R.string.yes))
+                .onPositive((dialog, which) -> {
+                    runnable.run();
                     dialog.dismiss();
-                }
-            }
-        });
+                })
+                .onNegative((dialog, which) -> dialog.dismiss())
+                .negativeText(context.getString(R.string.no))
+                .show();
+    }
+
+    @NonNull
+    private static Set<Map.Entry<Integer, EditText>> getEntrySet(@NonNull SparseArray<EditText> array) {
+        Set<Map.Entry<Integer, EditText>> entrySet = new TreeSet<>();
+        for (int i = 0; i < array.size(); i++) {
+            int key = array.keyAt(i);
+            EditText obj = array.get(key);
+            AbstractMap.SimpleEntry<Integer, EditText> entry = new AbstractMap.SimpleEntry<>(key, obj);
+            entrySet.add(entry);
+        }
+        return entrySet;
     }
 }
diff --git a/app/src/main/java/com/ulan/timetable/utils/BrowserUtil.java b/app/src/main/java/com/ulan/timetable/utils/BrowserUtil.java
deleted file mode 100644
index b24904b..0000000
--- a/app/src/main/java/com/ulan/timetable/utils/BrowserUtil.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.ulan.timetable.utils;
-
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import androidx.browser.customtabs.CustomTabsIntent;
-
-/**
- * Created by Ulan on 19.10.2018.
- */
-public class BrowserUtil {
-    public static void openUrlInChromeCustomTab(Context context, String url) {
-        try {
-            CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
-            CustomTabsIntent customTabsIntent = builder.build();
-            customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            customTabsIntent.launchUrl(context, url.contains("http://") ? Uri.parse(url) : Uri.parse("http://" + url));
-        } catch (ActivityNotFoundException e) {
-            // might not available.
-            //openUrlLinkInWebView(context, url);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-}
diff --git a/app/src/main/java/com/ulan/timetable/utils/ColorPalette.java b/app/src/main/java/com/ulan/timetable/utils/ColorPalette.java
new file mode 100644
index 0000000..8d6bb2d
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/utils/ColorPalette.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.utils;
+
+import android.graphics.Color;
+
+/**
+ * @author Aidan Follestad (afollestad)
+ */
+public class ColorPalette {
+
+    public static final int[] PRIMARY_COLORS =
+            new int[]{
+                    Color.parseColor("#F44336"),
+                    Color.parseColor("#E91E63"),
+                    Color.parseColor("#9C27B0"),
+                    Color.parseColor("#673AB7"),
+                    Color.parseColor("#3F51B5"),
+                    Color.parseColor("#2196F3"),
+                    Color.parseColor("#03A9F4"),
+                    Color.parseColor("#00BCD4"),
+                    Color.parseColor("#009688"),
+                    Color.parseColor("#4CAF50"),
+                    Color.parseColor("#8BC34A"),
+                    Color.parseColor("#CDDC39"),
+                    Color.parseColor("#FFEB3B"),
+                    Color.parseColor("#FFC107"),
+                    Color.parseColor("#FF9800"),
+                    Color.parseColor("#FF5722"),
+                    Color.parseColor("#795548"),
+                    Color.parseColor("#9E9E9E"),
+                    Color.parseColor("#607D8B"),
+                    Color.parseColor("#000000"),
+                    Color.parseColor("#FFFFFF"),
+                    Color.parseColor("#FF0000"),
+                    Color.parseColor("#0000FF"),
+                    Color.parseColor("#00FF00"),
+                    Color.parseColor("#FF00FF"),
+                    Color.parseColor("#00FFFF"),
+                    Color.parseColor("#FFFF00")
+            };
+
+    public static int pickTextColorBasedOnBgColorSimple(int bgColor, int lightColor, int darkColor) {
+        String color = String.format("#%06X", (0xFFFFFF & bgColor));
+        color = color.substring(1, 7);
+        int r = Integer.parseInt(color.substring(0, 2), 16); // hexToR
+        int g = Integer.parseInt(color.substring(2, 4), 16); // hexToG
+        int b = Integer.parseInt(color.substring(4, 6), 16); // hexToB
+        return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186) ?
+                darkColor : lightColor;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/utils/DailyReceiver.java b/app/src/main/java/com/ulan/timetable/utils/DailyReceiver.java
deleted file mode 100644
index 84fac1e..0000000
--- a/app/src/main/java/com/ulan/timetable/utils/DailyReceiver.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package com.ulan.timetable.utils;
-
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.BitmapFactory;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Build;
-
-
-import androidx.annotation.RequiresApi;
-import androidx.core.app.NotificationCompat;
-
-import com.ulan.timetable.activities.MainActivity;
-import com.ulan.timetable.R;
-
-import java.util.Calendar;
-
-/**
- * Created by Ulan on 28.01.2019.
- */
-public class DailyReceiver extends BroadcastReceiver {
-
-    Context context;
-    DbHelper db;
-
-    @RequiresApi(api = Build.VERSION_CODES.N)
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        this.context = context;
-
-        String message ;
-
-        long when = System.currentTimeMillis();
-        NotificationManager notificationManager = (NotificationManager) context
-                .getSystemService(Context.NOTIFICATION_SERVICE);
-
-        Intent notificationIntent = new Intent(context, MainActivity.class);
-        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0,
-                notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-
-        Uri alarmSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
-
-        db = new DbHelper(context);
-        Calendar calendar = Calendar.getInstance();
-        int day = calendar.get(Calendar.DAY_OF_WEEK);
-
-        message = getLessons(day);
-
-        NotificationCompat.Builder mNotifyBuilder = new NotificationCompat.Builder(
-                context, "").setSmallIcon(R.mipmap.ic_launcher_round)
-                .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_launcher))
-                .setContentTitle(context.getString(R.string.notification_title))
-                .setContentText(message).setSound(alarmSound)
-                .setAutoCancel(true).setWhen(when)
-                .setStyle(new NotificationCompat.BigTextStyle().bigText(message))
-                .setContentIntent(pendingIntent)
-                .setVibrate(new long[]{1000, 1000, 1000, 1000, 1000});
-        if (notificationManager != null) {
-            notificationManager.notify(5, mNotifyBuilder.build());
-        }
-    }
-
-    @RequiresApi(api = Build.VERSION_CODES.N)
-    private String getLessons(int day) {
-        StringBuilder lessons = new StringBuilder("");
-        String currentDay = getCurrentDay(day);
-
-        db.getWeek(currentDay).forEach(week -> {
-            if(week != null) {
-                lessons.append(week.getSubject())
-                        .append(" ")
-                        .append(week.getFromTime())
-                        .append(" - ")
-                        .append(week.getToTime())
-                        .append(" ")
-                        .append(week.getRoom())
-                        .append("\n");
-            }
-        });
-
-        return !lessons.toString().equals("") ? lessons.toString() : context.getString(R.string.do_not_have_lessons);
-    }
-
-    private String getCurrentDay(int day) {
-        String currentDay = null;
-        switch (day) {
-            case 1:
-                currentDay = "Sunday";
-                break;
-            case 2:
-                currentDay = "Monday";
-                break;
-            case 3:
-                currentDay = "Tuesday";
-                break;
-            case 4:
-                currentDay = "Wednesday";
-                break;
-            case 5:
-                currentDay = "Thursday";
-                break;
-            case 6:
-                currentDay = "Friday";
-                break;
-            case 7:
-                currentDay = "Saturday";
-                break;
-        }
-        return currentDay;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/utils/DbHelper.java b/app/src/main/java/com/ulan/timetable/utils/DbHelper.java
index 3f32081..8888d13 100644
--- a/app/src/main/java/com/ulan/timetable/utils/DbHelper.java
+++ b/app/src/main/java/com/ulan/timetable/utils/DbHelper.java
@@ -20,7 +20,7 @@ import java.util.ArrayList;
 public class DbHelper extends SQLiteOpenHelper{
 
     private static final int DB_VERSION = 6;
-    private static final String DB_NAME = "timetabledb";
+    public static final String DB_NAME = "timetabledb";
     private static final String TIMETABLE = "timetable";
     private static final String WEEK_ID = "id";
     private static final String WEEK_SUBJECT = "subject";
@@ -399,4 +399,15 @@ public class DbHelper extends SQLiteOpenHelper{
         db.close();
         return examslist;
     }
+
+
+    public void deleteAll() {
+        SQLiteDatabase db = this.getWritableDatabase();
+        db.execSQL("DROP TABLE IF EXISTS " + TIMETABLE);
+        db.execSQL("DROP TABLE IF EXISTS " + HOMEWORKS);
+        db.execSQL("DROP TABLE IF EXISTS " + NOTES);
+        db.execSQL("DROP TABLE IF EXISTS " + EXAMS);
+        db.close();
+        onCreate(this.getWritableDatabase());
+    }
 }
diff --git a/app/src/main/java/com/ulan/timetable/utils/LinedEditText.java b/app/src/main/java/com/ulan/timetable/utils/LinedEditText.java
index bc695e0..1601bd0 100644
--- a/app/src/main/java/com/ulan/timetable/utils/LinedEditText.java
+++ b/app/src/main/java/com/ulan/timetable/utils/LinedEditText.java
@@ -3,13 +3,12 @@ package com.ulan.timetable.utils;
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Rect;
 import android.util.AttributeSet;
 import android.widget.EditText;
 
-import com.ulan.timetable.R;
-
 /**
  * Created by Ulan on 28.09.2018.
  */
@@ -25,7 +24,7 @@ public class LinedEditText extends EditText {
         mRect = new Rect();
         mPaint = new Paint();
         mPaint.setStyle(Paint.Style.FILL_AND_STROKE);
-        mPaint.setColor(R.color.colorPrimaryDark);
+        mPaint.setColor(Color.parseColor("#008577"));
     }
 
     @Override
diff --git a/app/src/main/java/com/ulan/timetable/utils/NotificationUtil.java b/app/src/main/java/com/ulan/timetable/utils/NotificationUtil.java
new file mode 100644
index 0000000..ec0ba97
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/utils/NotificationUtil.java
@@ -0,0 +1,235 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.utils;
+
+import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.Typeface;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.app.NotificationCompat;
+import androidx.core.app.Person;
+import androidx.core.app.TaskStackBuilder;
+import androidx.core.graphics.drawable.DrawableKt;
+import androidx.core.graphics.drawable.IconCompat;
+
+import com.github.stephenvinouze.shapetextdrawable.ShapeForm;
+import com.github.stephenvinouze.shapetextdrawable.ShapeTextDrawable;
+import com.ulan.timetable.R;
+import com.ulan.timetable.activities.MainActivity;
+import com.ulan.timetable.model.Week;
+import com.ulan.timetable.receivers.NotificationDismissButtonReceiver;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.UUID;
+
+public class NotificationUtil {
+    private static final int NOTIFICATION_SUMMARY_ID = 9090;
+    private static final int NOTIFICATION_NEXT_WEEK_ID = 3030;
+    private static final String CHANNEL_ID = "timetable_notification";
+
+    public static void sendNotificationSummary(@NonNull Context context, boolean alert) {
+        new Thread(() -> {
+            DbHelper db = new DbHelper(context);
+            String lessons = getLessons(db.getWeek(getCurrentDay(Calendar.getInstance().get(Calendar.DAY_OF_WEEK))), context);
+            if (lessons == null)
+                return;
+
+            NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID)
+                    .setSmallIcon(R.drawable.ic_assignment_black_24dp)
+                    .setContentTitle(context.getString(R.string.timetable_notification_summary_title))
+                    .setStyle(new NotificationCompat.BigTextStyle().bigText(lessons));
+
+            sendNotification(context, alert, builder, NOTIFICATION_SUMMARY_ID);
+        }).start();
+    }
+
+    public static void sendNotificationCurrentLesson(@NonNull Context context, boolean alert) {
+        new Thread(() -> {
+            DbHelper db = new DbHelper(context);
+            ArrayList<Week> weeks = db.getWeek(getCurrentDay(Calendar.getInstance().get(Calendar.DAY_OF_WEEK)));
+            Week nextWeek = WeekUtils.getNextWeek(weeks);
+            if (nextWeek == null)
+                return;
+            weeks = new ArrayList<>();
+            weeks.add(nextWeek);
+
+            StringBuilder lesson = new StringBuilder()
+                    .append(context.getString(R.string.time_from).substring(0, 1).toUpperCase())
+                    .append(context.getString(R.string.time_from).substring(1))
+                    .append(" ")
+                    .append(nextWeek.getFromTime())
+                    .append(" - ")
+                    .append(nextWeek.getToTime())
+                    .append(" ")
+                    .append(context.getString(R.string.share_msg_in_room))
+                    .append(" ")
+                    .append(nextWeek.getRoom());
+
+
+            StringBuilder name = new StringBuilder()
+                    .append(nextWeek.getSubject())
+                    .append(" ")
+                    .append(context.getString(R.string.with_teacher))
+                    .append(" ")
+                    .append(nextWeek.getTeacher());
+
+
+            NotificationCompat.MessagingStyle style = new NotificationCompat.MessagingStyle(new Person.Builder().setName("me").build());
+            style.setConversationTitle(context.getString(R.string.timetable_notification_next_week_title));
+            int color = nextWeek.getColor();
+            int textColor = ColorPalette.pickTextColorBasedOnBgColorSimple(nextWeek.getColor(), Color.WHITE, Color.BLACK);
+            int textSize = context.getResources().getInteger(R.integer.notification_max_text_size) - context.getResources().getInteger(R.integer.notification_text_size_timetable_factor) * nextWeek.getRoom().length();
+            if (textSize < context.getResources().getInteger(R.integer.notification_min_text_size))
+                textSize = context.getResources().getInteger(R.integer.notification_min_text_size);
+            Drawable drawable = new ShapeTextDrawable(ShapeForm.ROUND, color, 10f, nextWeek.getRoom(), textColor, true, Typeface.create("sans-serif-light", Typeface.NORMAL), textSize, Color.TRANSPARENT, 0);
+            Person person = new Person.Builder().setName(name).setIcon(IconCompat.createWithBitmap(DrawableKt.toBitmap(drawable, context.getResources().getInteger(R.integer.notification_bitmap_size), context.getResources().getInteger(R.integer.notification_bitmap_size), null))).build();
+            style.addMessage(new NotificationCompat.MessagingStyle.Message(lesson, 0, person));
+
+            NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID)
+                    .setStyle(style)
+                    .setSmallIcon(R.drawable.ic_assignment_next_black_24dp)
+                    .setColor(color);
+
+
+            sendNotification(context, alert, builder, NOTIFICATION_NEXT_WEEK_ID);
+        }).start();
+    }
+
+    private static void sendNotification(@NonNull Context context, boolean alert, @Nullable NotificationCompat.Builder notificationBuilder, int id) {
+        if (notificationBuilder == null || !PreferenceUtil.isNotification(context) || Build.VERSION.SDK_INT < 21)
+            return;
+
+
+        long when = System.currentTimeMillis();
+        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+
+        Intent notificationIntent = new Intent(context, MainActivity.class);
+        TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
+        stackBuilder.addNextIntentWithParentStack(notificationIntent);
+        PendingIntent pendingIntent = stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);
+
+        createNotificationChannel(context);
+        NotificationCompat.Builder mNotifyBuilder = notificationBuilder
+                .setChannelId(CHANNEL_ID)
+                .setAutoCancel(true)
+                .setWhen(when)
+                .setPriority(alert ? NotificationCompat.PRIORITY_HIGH : NotificationCompat.PRIORITY_DEFAULT)
+                .setOnlyAlertOnce(!alert)
+                .setContentIntent(pendingIntent);
+
+
+        if (PreferenceUtil.isAlwaysNotification()) {
+            //Dismiss button intent
+            Intent buttonIntent = new Intent(context, NotificationDismissButtonReceiver.class);
+            buttonIntent.setAction("com.asdoi.gymwen.receivers.NotificationDismissButtonReceiver");
+            buttonIntent.putExtra(NotificationDismissButtonReceiver.EXTRA_NOTIFICATION_ID, id);
+            PendingIntent btPendingIntent = PendingIntent.getBroadcast(context, UUID.randomUUID().hashCode(), buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            mNotifyBuilder.setOngoing(true);
+            mNotifyBuilder.addAction(R.drawable.ic_close_black_24dp, context.getString(R.string.notif_dismiss), btPendingIntent);
+        }
+
+        if (notificationManager != null) {
+            notificationManager.notify(id, mNotifyBuilder.build());
+        }
+    }
+
+    private static void createNotificationChannel(@NonNull Context context) {
+        // Create the NotificationChannel, but only on API 26+ because
+        // the NotificationChannel class is new and not in the support library
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, context.getString(R.string.timetable_channel), NotificationManager.IMPORTANCE_DEFAULT);
+            channel.setDescription(context.getString(R.string.timetable_channel_desc));
+            channel.enableLights(false);
+            channel.setSound(null, null);
+            channel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);
+
+            // Register the channel with the system; you can't change the importance
+            // or other notification behaviors after this
+            NotificationManager notificationManager = context.getSystemService(NotificationManager.class);
+            notificationManager.createNotificationChannel(channel);
+        }
+    }
+
+    @Nullable
+    private static String getLessons(@NonNull ArrayList<Week> weeks, @NonNull Context context) {
+        StringBuilder lessons = new StringBuilder();
+        for (Week week : weeks) {
+            if (week != null) {
+                lessons.append(week.getSubject())
+                        .append(" ")
+                        .append(context.getString(R.string.time_from))
+                        .append(" ")
+                        .append(week.getFromTime())
+                        .append(" - ")
+                        .append(week.getToTime())
+                        .append(" ")
+                        .append(context.getString(R.string.with_teacher))
+                        .append(" ")
+                        .append(week.getTeacher())
+                        .append(" ")
+                        .append(context.getString(R.string.share_msg_in_room))
+                        .append(" ")
+                        .append(week.getRoom())
+                        .append("\n");
+            }
+        }
+
+        return !lessons.toString().equals("") ? lessons.toString().substring(0, lessons.toString().length() - 1) : null;
+    }
+
+    @Nullable
+    public static String getCurrentDay(int day) {
+        String currentDay = null;
+        switch (day) {
+            case 1:
+                currentDay = "Sunday";
+                break;
+            case 2:
+                currentDay = "Monday";
+                break;
+            case 3:
+                currentDay = "Tuesday";
+                break;
+            case 4:
+                currentDay = "Wednesday";
+                break;
+            case 5:
+                currentDay = "Thursday";
+                break;
+            case 6:
+                currentDay = "Friday";
+                break;
+            case 7:
+                currentDay = "Saturday";
+                break;
+        }
+        return currentDay;
+    }
+}
diff --git a/app/src/main/java/com/ulan/timetable/utils/PreferenceUtil.java b/app/src/main/java/com/ulan/timetable/utils/PreferenceUtil.java
new file mode 100644
index 0000000..2528d24
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/utils/PreferenceUtil.java
@@ -0,0 +1,229 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.utils;
+
+import android.app.Activity;
+import android.app.AlarmManager;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+
+import androidx.annotation.NonNull;
+import androidx.core.content.ContextCompat;
+import androidx.preference.PreferenceManager;
+
+import com.afollestad.materialdialogs.MaterialDialog;
+import com.ulan.timetable.R;
+import com.ulan.timetable.receivers.DoNotDisturbReceiversKt;
+
+import java.util.Calendar;
+
+import static android.content.Context.ALARM_SERVICE;
+
+
+public class PreferenceUtil {
+
+    private static boolean getBooleanSettings(Context context, String key, boolean defaulValue) {
+        return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(key, defaulValue);
+    }
+
+    public static boolean isNotification(Context context) {
+        return getBooleanSettings(context, "timetableNotif", true);
+    }
+
+    public static void setAlarmTime(Context context, @NonNull int... times) {
+        if (times.length != 3) {
+            if (times.length > 0 && times[0] == 0) {
+                setAlarm(context, false);
+            } else {
+                System.out.println("wrong parameters");
+            }
+            return;
+        }
+
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
+        SharedPreferences.Editor editor = sharedPref.edit();
+        setAlarm(context, true);
+        editor.putInt("timetable_Alarm_hour", times[0]);
+        editor.putInt("timetable_Alarm_minute", times[1]);
+        editor.putInt("timetable_Alarm_second", times[2]);
+        editor.commit();
+    }
+
+    @NonNull
+    public static int[] getAlarmTime(Context context) {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);
+        return new int[]{sharedPref.getInt("timetable_Alarm_hour", 7), sharedPref.getInt("timetable_Alarm_minute", 55), sharedPref.getInt("timetable_Alarm_second", 0)};
+    }
+
+    private static void setAlarm(@NonNull Context context, boolean value) {
+        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
+        editor.putBoolean("timetable_alarm", value);
+        editor.commit();
+    }
+
+
+    public static boolean isAlarmOn(@NonNull Context context) {
+        return getBooleanSettings(context, "timetable_alarm", false);
+    }
+
+    public static boolean doNotDisturbDontAskAgain(Context context) {
+        return getBooleanSettings(context, "do_not_disturb_dont_ask", false);
+    }
+
+    public static void setDoNotDisturbDontAskAgain(@NonNull Context context, boolean value) {
+        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean("do_not_disturb_dont_ask", value).apply();
+    }
+
+    public static boolean isAutomaticDoNotDisturb(Context context) {
+        return getBooleanSettings(context, "automatic_do_not_disturb", true);
+    }
+
+    public static void setDoNotDisturb(@NonNull Activity activity, boolean dontAskAgain) {
+        NotificationManager notificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            // Check if the notification policy access has been granted for the app.
+            if (!notificationManager.isNotificationPolicyAccessGranted() && !dontAskAgain) {
+                Drawable drawable = ContextCompat.getDrawable(activity, R.drawable.ic_do_not_disturb_on_black_24dp);
+                new MaterialDialog.Builder(activity)
+                        .title(R.string.permission_required)
+                        .content(R.string.do_not_disturb_permission_desc)
+                        .onPositive((dialog, which) -> {
+                            Intent intent = new Intent(android.provider.Settings.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS);
+                            activity.startActivity(intent);
+                        })
+                        .positiveText(R.string.permission_ok_button)
+                        .negativeText(R.string.permission_cancel_button)
+                        .onNegative(((dialog, which) -> dialog.dismiss()))
+                        .icon(drawable)
+                        .onNeutral(((dialog, which) -> setDoNotDisturbDontAskAgain(activity, true)))
+                        .neutralText(R.string.dont_show_again)
+                        .show();
+            } else {
+                DoNotDisturbReceiversKt.setDoNotDisturbReceivers(activity);
+            }
+        }
+    }
+
+    public static boolean isDoNotDisturbTurnOff(Context context) {
+        return getBooleanSettings(context, "do_not_disturb_turn_off", false);
+    }
+
+
+    public static boolean isAlwaysNotification() {
+        return false;
+    }
+
+
+    public static void setOneTimeAlarm(@NonNull Context context, @NonNull Class<?> cls, int hour, int min, int second, int id) {
+        // cancel already scheduled reminders
+        cancelAlarm(context, cls, id);
+
+        Calendar currentCalendar = Calendar.getInstance();
+
+        Calendar customCalendar = Calendar.getInstance();
+        customCalendar.setTimeInMillis(System.currentTimeMillis());
+        customCalendar.set(Calendar.HOUR_OF_DAY, hour);
+        customCalendar.set(Calendar.MINUTE, min);
+        customCalendar.set(Calendar.SECOND, second);
+
+        if (customCalendar.before(currentCalendar))
+            customCalendar.add(Calendar.DATE, 1);
+
+        // Enable a receiver
+        ComponentName receiver = new ComponentName(context, cls);
+        PackageManager pm = context.getPackageManager();
+
+        pm.setComponentEnabledSetting(receiver,
+                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
+                PackageManager.DONT_KILL_APP);
+
+
+        Intent intent = new Intent(context, cls);
+        PendingIntent pendingIntent = PendingIntent.getBroadcast(context.getApplicationContext(), id, intent, 0);
+
+        AlarmManager alarmManager = (AlarmManager) context.getSystemService(ALARM_SERVICE);
+        if (alarmManager == null)
+            return;
+
+        long startTime = customCalendar.getTimeInMillis();
+        if (Build.VERSION.SDK_INT < 23) {
+            if (Build.VERSION.SDK_INT >= 19) {
+                if (System.currentTimeMillis() < startTime)
+                    alarmManager.setExact(AlarmManager.RTC_WAKEUP, startTime, pendingIntent);
+            } else {
+                if (System.currentTimeMillis() < startTime)
+                    alarmManager.set(AlarmManager.RTC_WAKEUP, startTime, pendingIntent);
+            }
+        } else {
+            if (System.currentTimeMillis() < startTime)
+                alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, startTime, pendingIntent);
+        }
+    }
+
+    public static void setRepeatingAlarm(@NonNull Context context, @NonNull Class<?> cls, int hour, int min, int second, int id, long interval) {
+        // cancel already scheduled reminders
+        cancelAlarm(context, cls, id);
+
+        Calendar currentCalendar = Calendar.getInstance();
+
+        Calendar customCalendar = Calendar.getInstance();
+        customCalendar.setTimeInMillis(System.currentTimeMillis());
+        customCalendar.set(Calendar.HOUR_OF_DAY, hour);
+        customCalendar.set(Calendar.MINUTE, min);
+        customCalendar.set(Calendar.SECOND, second);
+
+        if (customCalendar.before(currentCalendar))
+            customCalendar.add(Calendar.DATE, 1);
+
+        // Enable a receiver
+        ComponentName receiver = new ComponentName(context, cls);
+        PackageManager pm = context.getPackageManager();
+
+        pm.setComponentEnabledSetting(receiver,
+                PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
+                PackageManager.DONT_KILL_APP);
+
+
+        Intent intent = new Intent(context, cls);
+        PendingIntent pendingIntent = PendingIntent.getBroadcast(context.getApplicationContext(), id, intent, 0);
+
+        AlarmManager alarmManager = (AlarmManager) context.getSystemService(ALARM_SERVICE);
+        if (alarmManager == null)
+            return;
+
+        long startTime = customCalendar.getTimeInMillis();
+        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, startTime, interval, pendingIntent);
+    }
+
+    public static void cancelAlarm(@NonNull Context context, @NonNull Class<?> cls, int id) {
+        Intent intent = new Intent(context, cls);
+        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, id, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+        AlarmManager am = (AlarmManager) context.getSystemService(ALARM_SERVICE);
+        am.cancel(pendingIntent);
+        pendingIntent.cancel();
+    }
+}
diff --git a/app/src/main/java/com/ulan/timetable/utils/WakeUpAlarmReceiver.java b/app/src/main/java/com/ulan/timetable/utils/WakeUpAlarmReceiver.java
deleted file mode 100644
index 09c7228..0000000
--- a/app/src/main/java/com/ulan/timetable/utils/WakeUpAlarmReceiver.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.ulan.timetable.utils;
-
-import android.app.AlarmManager;
-import android.app.PendingIntent;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import java.util.Calendar;
-import java.util.Objects;
-
-/**
- * Created by Ulan on 28.01.2019.
- */
-public class WakeUpAlarmReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(Context context, Intent intent) {
-
-        if (Objects.equals(intent.getAction(), "android.intent.action.BOOT_COMPLETED")) {
-
-            Calendar calendar = Calendar.getInstance();
-
-            calendar.set(Calendar.HOUR_OF_DAY, 8);
-            calendar.set(Calendar.MINUTE, 30);
-            calendar.set(Calendar.SECOND, 0);
-            calendar.set(Calendar.MILLISECOND, 0);
-
-            Calendar cur = Calendar.getInstance();
-
-            if (cur.after(calendar)) {
-                calendar.add(Calendar.DATE, 1);
-            }
-
-            Intent myIntent = new Intent(context, DailyReceiver.class);
-            int ALARM1_ID = 10000;
-            PendingIntent pendingIntent = PendingIntent.getBroadcast(
-                    context, ALARM1_ID, myIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
-            if (alarmManager != null) {
-                alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), AlarmManager.INTERVAL_DAY, pendingIntent);
-            }
-
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/ulan/timetable/utils/WeekUtils.java b/app/src/main/java/com/ulan/timetable/utils/WeekUtils.java
new file mode 100644
index 0000000..9bfd764
--- /dev/null
+++ b/app/src/main/java/com/ulan/timetable/utils/WeekUtils.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (c) 2020 Felix Hollederer
+ *     This file is part of GymWenApp.
+ *
+ *     GymWenApp is free software: you can redistribute it and/or modify
+ *     it under the terms of the GNU General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ *
+ *     GymWenApp is distributed in the hope that it will be useful,
+ *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *     GNU General Public License for more details.
+ *
+ *     You should have received a copy of the GNU General Public License
+ *     along with GymWenApp.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.ulan.timetable.utils;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.ulan.timetable.fragments.WeekdayFragment;
+import com.ulan.timetable.model.Week;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+
+public class WeekUtils {
+    @Nullable
+    public static Week getNextWeek(@NonNull ArrayList<Week> weeks) {
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE) + 1);
+        String hour = "" + calendar.get(Calendar.HOUR_OF_DAY);
+        if (hour.length() < 2)
+            hour = "0" + hour;
+        String minutes = "" + calendar.get(Calendar.MINUTE);
+        if (minutes.length() < 2)
+            minutes = "0" + minutes;
+        String now = hour + ":" + minutes;
+
+        for (int i = 0; i < weeks.size(); i++) {
+            Week week = weeks.get(i);
+            if ((now.compareToIgnoreCase(week.getFromTime()) >= 0 && now.compareToIgnoreCase(week.getToTime()) <= 0) || now.compareToIgnoreCase(week.getToTime()) <= 0) {
+                return week;
+            }
+        }
+        return null;
+    }
+
+    @NonNull
+    public static ArrayList<Week> getAllWeeks(@NonNull DbHelper dbHelper) {
+        return getWeeks(dbHelper, new String[]{WeekdayFragment.KEY_MONDAY_FRAGMENT,
+                WeekdayFragment.KEY_TUESDAY_FRAGMENT,
+                WeekdayFragment.KEY_WEDNESDAY_FRAGMENT,
+                WeekdayFragment.KEY_THURSDAY_FRAGMENT,
+                WeekdayFragment.KEY_FRIDAY_FRAGMENT,
+                WeekdayFragment.KEY_SATURDAY_FRAGMENT,
+                WeekdayFragment.KEY_SUNDAY_FRAGMENT});
+    }
+
+    @NonNull
+    public static ArrayList<Week> getWeeks(@NonNull DbHelper dbHelper, @NonNull String[] keys) {
+        ArrayList<Week> weeks = new ArrayList<>();
+        for (String key : keys) {
+            weeks.addAll(dbHelper.getWeek(key));
+        }
+        return weeks;
+    }
+
+    @NonNull
+    public static String getNextOccurenceOfSubject(DbHelper dbHelper, String subject) {
+/*        ArrayList<Week> weeks = new ArrayList<Week>();
+
+        Calendar calendar = Calendar.getInstance();
+        switch (calendar.get(Calendar.DAY_OF_WEEK)) {
+            case Calendar.MONDAY:
+                break;
+            case Calendar.TUESDAY:
+                break;
+            case Calendar.WEDNESDAY:
+                break;
+            case Calendar.THURSDAY:
+                break;
+            case Calendar.FRIDAY:
+                break;
+            case Calendar.SATURDAY:
+                break;
+            case Calendar.SUNDAY:
+                break;
+        }
+
+        String.format("%02d-%02d-%02d", year, month + 1, dayOfMonth)*/
+        return ""; //TODO
+    }
+}
