diff --git a/src/com/github/grimpy/botifier/Botification.java b/src/com/github/grimpy/botifier/Botification.java
new file mode 100644
index 0000000..c22040e
--- /dev/null
+++ b/src/com/github/grimpy/botifier/Botification.java
@@ -0,0 +1,203 @@
+package com.github.grimpy.botifier;
+
+import java.util.ArrayList;
+import android.app.Notification;
+import android.app.Service;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.preference.PreferenceManager;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RemoteViews;
+import android.widget.TextView;
+
+
+class Botification implements Parcelable {
+	public String mPackageLabel;
+	public String mDescription;
+	public String mText;
+	public String mPkg;
+	public int mId;
+	public Notification mNotification;
+	private SharedPreferences mSharedPref;
+    
+	public int mOffset;
+	public String mTag;
+	public boolean mRead;
+	private static String TAG = "Botifier";
+	private static final int TIMESTAMPID = 16908388;
+	
+	
+    public static final Parcelable.Creator<Botification> CREATOR = new Parcelable.Creator<Botification>() {
+        public Botification createFromParcel(Parcel in) {
+        	Notification not = Notification.CREATOR.createFromParcel(in);
+        	int id = in.readInt();
+        	String pkg = in.readString();
+        	String tag = in.readString();
+            return new Botification(not, id, pkg, tag);
+        }
+
+		@Override
+		public Botification[] newArray(int size) {
+			return new Botification[size];
+		}
+
+    };
+    
+	@Override
+	public void writeToParcel(Parcel dest, int flags) {
+		mNotification.writeToParcel(dest, flags);
+		dest.writeInt(mId);
+		dest.writeString(mPkg);		
+		dest.writeString(mTag);
+	}
+	
+	public Botification(Notification notification, int id, String pkg, String tag) {
+		mId = id;
+		mPkg = pkg;
+		mTag = tag;
+		mDescription = notification.tickerText.toString();
+		mNotification = notification;
+		mOffset = 0;
+		mRead = false;
+	}
+	
+	private String getPackageLabel(Service service, String packagename){
+		PackageManager packageManager = service.getPackageManager();
+		ApplicationInfo ai;
+		try {
+		    ai = packageManager.getApplicationInfo( packagename, 0);
+		} catch (final NameNotFoundException e) {
+		    ai = null;
+		}
+		return (String) (ai != null ? packageManager.getApplicationLabel(ai) : packagename);
+
+	}
+
+	
+	public void load(Service service) {
+		mPackageLabel = getPackageLabel(service, mPkg);
+		mText = TextUtils.join("\n",extractTextFromNotification(service, mNotification));
+		mSharedPref = PreferenceManager.getDefaultSharedPreferences(service);
+	    
+	}
+	
+	public boolean hasNext() {
+		int maxlength = Integer.valueOf(mSharedPref.getString("maxlength", "0"));
+		if (maxlength == 0) {
+			return false;
+		}
+		return (mOffset+1)*maxlength < mText.length();
+	}
+	
+	public String getPreference(String key) {
+		return getPreference(key, false);
+	}
+	
+	public String getPreference(String key, boolean full) {
+		String message = mSharedPref.getString(key, "");
+		int maxlength = Integer.valueOf(mSharedPref.getString("maxlength", "0"));
+		message = message.replace("%f", toString());
+		message = message.replace("%a", mPackageLabel);
+		message = message.replace("%d", mDescription);
+		message = message.replace("%m", mText);
+		
+		if (!full) {
+			if (maxlength != 0 && message.length() > maxlength) {
+				int start = mOffset * maxlength;
+				int end = start + maxlength;
+				if (end >= message.length()) {
+					end = message.length() -1;
+					mOffset = -1;
+				}
+				String result = message.substring(start, end);
+				mOffset++;
+				return result;
+			}
+		}
+		return message;
+	}
+	
+	public String toString() {
+		return String.format("%s %s %s", mPackageLabel, mDescription, mText);
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (Botification.class.isInstance(o)) {
+			Botification not = (Botification) o;
+			if (not.mTag == mTag &&
+			    not.mPkg == mPkg &&
+			    not.mId == mId) {
+				return true;
+			}
+		}
+		return false;
+	}
+	
+    private void extractViewType(ArrayList<View> outViews, Class viewtype, View source) {
+    	if (ViewGroup.class.isInstance(source)) {
+    		ViewGroup vg = (ViewGroup) source;
+    		for (int i = 0; i < vg.getChildCount(); i++) {
+    			extractViewType(outViews, viewtype, vg.getChildAt(i));
+				
+			}
+    	} else if(viewtype.isInstance(source)) {
+			outViews.add(source);
+    	}
+    }
+    
+    private ArrayList<String> extractTextFromNotification(Service service, Notification notification) {
+    	ArrayList<String> result = null;
+	    result =  extractTextFromNotification(service, notification.bigContentView);
+	    if (result == null) {
+	    	result = extractTextFromNotification(service, notification.contentView);
+	    }
+	    return result;
+
+    }
+
+    
+    private ArrayList<String> extractTextFromNotification(Service service, RemoteViews view) {
+    	LayoutInflater inflater = (LayoutInflater) service.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+	    ArrayList<String> result = new ArrayList<String>();
+	    if (view == null) {
+	    	Log.d(TAG, "View is empty");
+	    	return null;
+	    }
+		try {
+			int layoutid = view.getLayoutId();
+			ViewGroup localView = (ViewGroup) inflater.inflate(layoutid, null);
+		    view.reapply(service.getApplicationContext(), localView);
+		    ArrayList<View> outViews = new ArrayList<View>();
+		    extractViewType(outViews, TextView.class, localView);
+		    for (View  ttv: outViews) {
+		    	TextView tv = (TextView) ttv;
+		    	String txt = tv.getText().toString();
+		    	if (!TextUtils.isEmpty(txt) && tv.getId() != TIMESTAMPID) {
+		    		result.add(txt);
+		    	}
+			}
+		} catch (Exception e) {
+			Log.d(TAG, "FAILED to load notification " + e.toString());
+			Log.wtf(TAG, e);
+			return null;
+			//notification might have dissapeared by now
+		}
+		Log.d(TAG, "Return result" + result);
+	    return result;
+    }
+
+	@Override
+	public int describeContents() {
+		return 0;
+	}
+}
diff --git a/src/com/github/grimpy/botifier/BotifierService.java b/src/com/github/grimpy/botifier/BotifierManager.java
similarity index 53%
rename from src/com/github/grimpy/botifier/BotifierService.java
rename to src/com/github/grimpy/botifier/BotifierManager.java
index 8d0f99d..db3fc2a 100644
--- a/src/com/github/grimpy/botifier/BotifierService.java
+++ b/src/com/github/grimpy/botifier/BotifierManager.java
@@ -4,134 +4,72 @@ import java.util.ArrayList;
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import android.app.Notification;
 import android.app.PendingIntent;
+import android.app.Service;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.NameNotFoundException;
 import android.media.AudioManager;
 import android.media.MediaMetadataRetriever;
 import android.media.RemoteControlClient;
 import android.media.AudioManager.OnAudioFocusChangeListener;
 import android.media.RemoteControlClient.MetadataEditor;
 import android.preference.PreferenceManager;
-import android.service.notification.NotificationListenerService;
-import android.service.notification.StatusBarNotification;
 import android.speech.tts.TextToSpeech;
 import android.speech.tts.TextToSpeech.OnInitListener;
-import android.text.TextUtils;
 import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.RemoteViews;
-import android.widget.TextView;
 import android.view.KeyEvent;
 
 
-public class BotifierService extends NotificationListenerService implements OnInitListener {
+public class BotifierManager implements OnInitListener {
 
 	public static final String SERVICECMD = "com.github.grimpy.botifier.cmd";
 	public static final String NOTIFICATION = "com.github.grimpy.botifier.notification";
 	public static final String CMD_NOTIFICATION_ADDED = "com.github.grimpy.botifier.notification.added";
 	public static final String CMD_NOTIFICATION_REMOVED = "com.github.grimpy.botifier.notification.removed"; 
 	
-	private static final int TIMESTAMPID = 16908388;
 	private boolean isInit = false;
 	private static String TAG = "Botifier";
 	private SharedPreferences mSharedPref;
-
 	private RemoteControlClient mRemoteControlClient;
 	private AudioManager mAudioManager;
 	private ComponentName mMediaButtonReceiverComponent;
-	private PackageManager mPackageManager;
-	private ArrayList<Notifies> mNotifications;
+	private ArrayList<Botification> mNotifications;
 	private int mCurrent = -1;
-	private LayoutInflater mInflater;
 	private int mAudiofocus = -1;
 	private TextToSpeech mTTS;
+	private Service mService;
 
-
-
-	class Notifies {
-		public String mPackageName;
-		public String mPackageLabel;
-		public String mDescription;
-		public String mText;
-		public StatusBarNotification mNotification;
-		public int mOffset;
-		public boolean mRead;
-		public Notifies(String packageName, String packageLabel, ArrayList<String> text, StatusBarNotification notification) {
-			mPackageLabel = packageLabel;
-			mPackageName = packageName;
-			mDescription = notification.getNotification().tickerText.toString();
-			mText = TextUtils.join("\n", text);
-			mNotification = notification;
-			mOffset = 0;
-			mRead = false;
-		}
-		
-		public boolean hasNext() {
-			int maxlength = Integer.valueOf(mSharedPref.getString("maxlength", "0"));
-			if (maxlength == 0) {
-				return false;
-			}
-			return (mOffset+1)*maxlength < mText.length();
-		}
-		
-		public String getPreference(String key) {
-			return getPreference(key, false);
-		}
+    public BotifierManager(Service serv) {
+    	mService = serv;
+	    if (isInit) {
+	        return;
+	    }
+        mAudioManager = (AudioManager) mService.getSystemService(Context.AUDIO_SERVICE);
+        mMediaButtonReceiverComponent = new ComponentName(mService.getPackageName(), MediaButtonIntentReceiver.class.getName());
+    	mAudioManager.registerMediaButtonEventReceiver(mMediaButtonReceiverComponent);
+		// build the PendingIntent for the remote control client
+		//setUpRemoteControlClient();
 		
-		public String getPreference(String key, boolean full) {
-			String message = mSharedPref.getString(key, "");
-			int maxlength = Integer.valueOf(mSharedPref.getString("maxlength", "0"));
-			message = message.replace("%f", toString());
-			message = message.replace("%a", mPackageLabel);
-			message = message.replace("%d", mDescription);
-			message = message.replace("%m", mText);
-			
-			if (!full) {
-				if (maxlength != 0 && message.length() > maxlength) {
-					int start = mOffset * maxlength;
-					int end = start + maxlength;
-					if (end >= message.length()) {
-						end = message.length() -1;
-						mOffset = -1;
-					}
-					String result = message.substring(start, end);
-					mOffset++;
-					return result;
-				}
-			}
-			return message;
-		}
+		mNotifications = new ArrayList<Botification>();
+		mTTS = new TextToSpeech(mService, this);
 		
-		public String toString() {
-			return String.format("%s %s %s", mPackageLabel, mDescription, mText);
-		}
+        final IntentFilter filter = new IntentFilter();
+        filter.addAction(SERVICECMD);
+        filter.addAction(NOTIFICATION);
+        filter.addAction(CMD_NOTIFICATION_ADDED);
+        filter.addAction(CMD_NOTIFICATION_REMOVED);
+        // Attach the broadcast listener
+        mService.registerReceiver(mIntentReceiver, filter);
+        mSharedPref = PreferenceManager.getDefaultSharedPreferences(mService);
+	    isInit = true;
+	}
 
-		@Override
-		public boolean equals(Object o) {
-			if (Notifies.class.isInstance(o)) {
-				Notifies not = (Notifies) o;
-				if (not.mNotification.getId() == mNotification.getId() &&
-				    not.mNotification.getPackageName() == mNotification.getPackageName() &&
-				    not.mNotification.getUserId() == mNotification.getUserId()) {
-					return true;
-				}
-			}
-			return false;
-		}
-		
 
-	}
+		
 	
     private final BroadcastReceiver mIntentReceiver = new BroadcastReceiver() {
         /**
@@ -144,13 +82,13 @@ public class BotifierService extends NotificationListenerService implements OnIn
 	        	int keycode = intent.getIntExtra(SERVICECMD, 0);
 	        	Log.d(TAG, "Recieved key" + keycode);
 	            switch (keycode) {
+	            	case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
+	            		resetNotify(true);
+	            		break;
 		            case KeyEvent.KEYCODE_MEDIA_STOP:
 		            case KeyEvent.KEYCODE_HEADSETHOOK:
 		            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
 		            case KeyEvent.KEYCODE_MEDIA_PLAY:
-		            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
-		            	resetNotify(true);
-		            	break;
 		            case KeyEvent.KEYCODE_MEDIA_PAUSE:
 		            	removeNotification();
 		                break;
@@ -168,13 +106,28 @@ public class BotifierService extends NotificationListenerService implements OnIn
 
         		showNotify(album, artist, title, 10);
         	} else if (intent.getAction().equals(CMD_NOTIFICATION_ADDED)) {
-        		notificationAdded((StatusBarNotification) intent.getParcelableExtra("notification"));
+        		Botification not = intent.getParcelableExtra("notification");
+        		not.load(mService);
+        		notificationAdded(not);
+        		
+        	} else if (intent.getAction().equals(CMD_NOTIFICATION_REMOVED)) {
+        		Botification not_todelete = intent.getParcelableExtra("notification");
+        		for (int i = mNotifications.size() -1; i >=0 ; i--) {
+        			Botification not = mNotifications.get(i);
+    				if (not.equals(not_todelete)) {
+    					removeNotification();
+    				} else {
+    					removeNotification(not);
+    				}
+    				return;
+        				
+    			}
         	}
         }
     };
     
     public boolean isActive() {
-    	return mAudioManager.isBluetoothA2dpOn();
+    	return mAudioManager.isBluetoothA2dpOn() || true;
     }
     
     private void removeNotification() {
@@ -183,11 +136,12 @@ public class BotifierService extends NotificationListenerService implements OnIn
     		return;
     	}
     	Log.d(TAG, "Remove current notification: " + mCurrent);
-    	Notifies old = mNotifications.get(mCurrent);
+    	Botification old = mNotifications.get(mCurrent);
     	removeNotification(old);
     } 	
-    private void removeNotification(Notifies old) {
-    	cancelNotification(old.mNotification.getPackageName(), old.mNotification.getTag(), old.mNotification.getId());
+    private void removeNotification(Botification old) {
+    	
+    	((NotificationInterface)mService).cancelNotification(old);
     	mNotifications.remove(old);
     	if (mNotifications.size() == 0) {
     		mCurrent = -1;
@@ -225,7 +179,7 @@ public class BotifierService extends NotificationListenerService implements OnIn
     		mCurrent = mNotifications.size() -1;
     	}
     	Log.d(TAG, "Move new idx " + idx + " size: " + mNotifications.size());
-    	Notifies current = mNotifications.get(mCurrent);
+    	Botification current = mNotifications.get(mCurrent);
     	if (next || ( offset > 0 && mCurrent != -1 && !current.hasNext())) {
     		showNotify(mNotifications.get(idx));
     	} else {
@@ -243,7 +197,7 @@ public class BotifierService extends NotificationListenerService implements OnIn
         }
     }
 	
-	public void showNotify(Notifies notify) {
+	public void showNotify(Botification notify) {
 		Log.d(TAG, "Setting notification " + notify.toString());
 		mCurrent = mNotifications.indexOf(notify);
 		if (mSharedPref.getBoolean("action_tts", false) && !notify.mRead &&
@@ -254,7 +208,7 @@ public class BotifierService extends NotificationListenerService implements OnIn
         }
 		if (isActive()) {
 			Log.d(TAG, "Setting Metadata");
-	        showNotify(notify.getPreference("metadata_artist"), notify.getPreference("metadata_album"), notify.getPreference("metadata_title"), notify.mNotification.getNotification().number);
+	        showNotify(notify.getPreference("metadata_artist"), notify.getPreference("metadata_album"), notify.getPreference("metadata_title"), notify.mNotification.number);
 		}
 	}
 	
@@ -272,12 +226,12 @@ public class BotifierService extends NotificationListenerService implements OnIn
 	}
 	
     private void setUpRemoteControlClient() {
-        mMediaButtonReceiverComponent = new ComponentName(getPackageName(), MediaButtonIntentReceiver.class.getName());
+        mMediaButtonReceiverComponent = new ComponentName(mService.getPackageName(), MediaButtonIntentReceiver.class.getName());
     	mAudioManager.registerMediaButtonEventReceiver(mMediaButtonReceiverComponent);
         final Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);
         mediaButtonIntent.setComponent(mMediaButtonReceiverComponent);
         mRemoteControlClient = new RemoteControlClient(
-                PendingIntent.getBroadcast(getApplicationContext(), 0, mediaButtonIntent,
+                PendingIntent.getBroadcast(mService.getApplicationContext(), 0, mediaButtonIntent,
                         PendingIntent.FLAG_UPDATE_CURRENT));
         mAudioManager.registerRemoteControlClient(mRemoteControlClient);
 
@@ -306,57 +260,6 @@ public class BotifierService extends NotificationListenerService implements OnIn
         }
     };
     
-    private void extractViewType(ArrayList<View> outViews, Class viewtype, View source) {
-    	if (ViewGroup.class.isInstance(source)) {
-    		ViewGroup vg = (ViewGroup) source;
-    		for (int i = 0; i < vg.getChildCount(); i++) {
-    			extractViewType(outViews, viewtype, vg.getChildAt(i));
-				
-			}
-    	} else if(viewtype.isInstance(source)) {
-			outViews.add(source);
-    	}
-    }
-    
-    private ArrayList<String> extractTextFromNotification(Notification notification) {
-    	ArrayList<String> result = null;
-	    result =  extractTextFromNotification(notification.bigContentView);
-	    if (result == null) {
-	    	result = extractTextFromNotification(notification.contentView);
-	    }
-	    return result;
-
-    }
-
-    
-    private ArrayList<String> extractTextFromNotification(RemoteViews view) {
-	    ArrayList<String> result = new ArrayList<String>();
-	    if (view == null) {
-	    	Log.d(TAG, "View is empty");
-	    	return null;
-	    }
-		try {
-			int layoutid = view.getLayoutId();
-			ViewGroup localView = (ViewGroup) mInflater.inflate(layoutid, null);
-		    view.reapply(getApplicationContext(), localView);
-		    ArrayList<View> outViews = new ArrayList<View>();
-		    extractViewType(outViews, TextView.class, localView);
-		    for (View  ttv: outViews) {
-		    	TextView tv = (TextView) ttv;
-		    	String txt = tv.getText().toString();
-		    	if (!TextUtils.isEmpty(txt) && tv.getId() != TIMESTAMPID) {
-		    		result.add(txt);
-		    	}
-			}
-		} catch (Exception e) {
-			Log.d(TAG, "FAILED to load notification " + e.toString());
-			Log.wtf(TAG, e);
-			return null;
-			//notification might have dissapeared by now
-		}
-		Log.d(TAG, "Return result" + result);
-	    return result;
-    }
         
     private boolean isBlackListed(String txt) {
     	Set<String> blacklist = mSharedPref.getStringSet("blacklistentries", null);
@@ -373,10 +276,10 @@ public class BotifierService extends NotificationListenerService implements OnIn
     	return false;
     }
     
-	private void addNotification(Notifies notification) {
+	private void addNotification(Botification notification) {
 		for (int i = 0; i < mNotifications.size(); i++) {
-			Notifies not = mNotifications.get(i);
-			Log.d(TAG, "Adding notification comparing with " + not.mPackageName);
+			Botification not = mNotifications.get(i);
+			Log.d(TAG, "Adding notification comparing with " + not.mPkg);
 			if (not.equals(notification)) {
 				mNotifications.set(i, notification);
 				return;
@@ -385,103 +288,21 @@ public class BotifierService extends NotificationListenerService implements OnIn
 		mNotifications.add(notification);
 	}
 	
-	private String getPackageLabel(String packagename){
-		ApplicationInfo ai;
-		try {
-		    ai = mPackageManager.getApplicationInfo( packagename, 0);
-		} catch (final NameNotFoundException e) {
-		    ai = null;
-		}
-		return (String) (ai != null ? mPackageManager.getApplicationLabel(ai) : packagename);
-
-	}
-
-   @Override
-    public void onCreate() {
-	    super.onCreate();
-	    if (isInit) {
-	        return;
-	    }
-	    
-        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
-        mMediaButtonReceiverComponent = new ComponentName(getPackageName(), MediaButtonIntentReceiver.class.getName());
-    	mAudioManager.registerMediaButtonEventReceiver(mMediaButtonReceiverComponent);
-		// build the PendingIntent for the remote control client
-		//setUpRemoteControlClient();
-		
-		mPackageManager = getApplicationContext().getPackageManager();
-		mNotifications = new ArrayList<BotifierService.Notifies>();
-		mTTS = new TextToSpeech(this, this);
-		
-        final IntentFilter filter = new IntentFilter();
-        filter.addAction(SERVICECMD);
-        filter.addAction(NOTIFICATION);
-        filter.addAction(CMD_NOTIFICATION_ADDED);
-        filter.addAction(CMD_NOTIFICATION_REMOVED);
-        // Attach the broadcast listener
-        registerReceiver(mIntentReceiver, filter);
-        mInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        mSharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        
-	    isInit = true;
-	}
-
-	public void onDestroy() {
-		super.onDestroy();
+	public void destroy() {
 		Log.d(TAG, "Service interrupted");
 		mAudiofocus = -1;
 		mAudioManager.abandonAudioFocus(mAudioFocusListener);
 	    isInit = false;
 	}
 	
-	public void notificationAdded(StatusBarNotification statusnotification) {
-		Log.i(TAG, "Received notification " + statusnotification.toString());
-		String packageName = statusnotification.getPackageName().toString();
-		Notification notification = statusnotification.getNotification();
-		if (notification == null) {
-			return;
-		}
-		ArrayList<String> txt = extractTextFromNotification(notification);
-		if (txt == null || isBlackListed(TextUtils.join("\n", txt))) {
-			return;
-		}
-
-		String appname = getPackageLabel(packageName);
-
-        Notifies not = new Notifies(packageName, appname, txt, statusnotification);
-        addNotification(not);
-        showNotify(not);
-	}
-
-	@Override
-	public void onNotificationPosted(StatusBarNotification statusnotification) {
-		if (statusnotification.isOngoing()) {
+	public void notificationAdded(Botification notification) {
+		if (isBlackListed(notification.mText)) {
 			return;
 		}
-		Intent i = new Intent(CMD_NOTIFICATION_ADDED);
-		i.putExtra("notification", statusnotification);
-		sendBroadcast(i);
-		
+        addNotification(notification);
+        showNotify(notification);
 	}
 
-	@Override
-	public void onNotificationRemoved(StatusBarNotification statusnotification) {
-		Log.d(TAG, "Cleaning up notifications");
-		for (int i = mNotifications.size() -1; i >=0 ; i--) {
-			Notifies not = mNotifications.get(i);
-			if (not.mNotification.getId() == statusnotification.getId()) {
-				if (not.equals(mCurrent)) {
-					removeNotification();
-				} else {
-					removeNotification(not);
-				}
-				return;
-				
-			}
-		}
-
-		
-	}
 	@Override
 	public void onInit(int status) {
 		// is part of TTS listener
diff --git a/src/com/github/grimpy/botifier/BotifierNotificationService.java b/src/com/github/grimpy/botifier/BotifierNotificationService.java
new file mode 100644
index 0000000..fda1ca9
--- /dev/null
+++ b/src/com/github/grimpy/botifier/BotifierNotificationService.java
@@ -0,0 +1,57 @@
+package com.github.grimpy.botifier;
+
+
+import android.annotation.TargetApi;
+import android.content.Intent;
+import android.service.notification.NotificationListenerService;
+import android.service.notification.StatusBarNotification;
+import android.util.Log;
+
+@TargetApi(18)
+public class BotifierNotificationService extends NotificationListenerService implements NotificationInterface{
+	private static String TAG = "Botifier";
+	private BotifierManager mBotifyManager; 
+
+	
+	@Override
+	public void onCreate() {
+		super.onCreate();
+		Log.i(TAG, "Manager started");
+		mBotifyManager = new BotifierManager(this);
+	}
+
+	@Override
+	public void onDestroy() {
+		super.onDestroy();
+		mBotifyManager.destroy();
+	}
+	
+	@Override
+	public void onNotificationPosted(StatusBarNotification statusnotification) {
+		Log.i(TAG, "new notification received");
+		if (statusnotification.isOngoing()) {
+			return;
+		}
+		sendCmd(statusnotification, BotifierManager.CMD_NOTIFICATION_ADDED);
+	}
+
+	private void sendCmd(StatusBarNotification stn, String cmd) {
+		Intent i = new Intent(cmd);
+		Botification not = new Botification(stn.getNotification(), stn.getId(), stn.getPackageName(), stn.getTag());
+		i.putExtra("notification", not);
+		sendBroadcast(i);
+		
+	}
+
+	@Override
+	public void onNotificationRemoved(StatusBarNotification statusnotification) {
+		Log.d(TAG, "Cleaning up notifications");
+		sendCmd(statusnotification, BotifierManager.CMD_NOTIFICATION_REMOVED);
+	}
+	
+	public void cancelNotification(Botification not){
+		cancelNotification(not.mPkg, not.mTag, not.mId);
+	}
+	
+	
+}
\ No newline at end of file
diff --git a/src/com/github/grimpy/botifier/MainActivity.java b/src/com/github/grimpy/botifier/MainActivity.java
index 6f93ff0..4d9ac21 100644
--- a/src/com/github/grimpy/botifier/MainActivity.java
+++ b/src/com/github/grimpy/botifier/MainActivity.java
@@ -13,6 +13,6 @@ public class MainActivity extends Activity {
         getFragmentManager().beginTransaction()
                 .replace(android.R.id.content, new SettingsFragment())
                 .commit();
-        startService(new Intent(this, BotifierService.class));
+        startService(new Intent(this, BotifierManager.class));
     }       
 }
\ No newline at end of file
diff --git a/src/com/github/grimpy/botifier/MediaButtonIntentReceiver.java b/src/com/github/grimpy/botifier/MediaButtonIntentReceiver.java
index d01f62c..7143ce8 100644
--- a/src/com/github/grimpy/botifier/MediaButtonIntentReceiver.java
+++ b/src/com/github/grimpy/botifier/MediaButtonIntentReceiver.java
@@ -77,8 +77,8 @@ public class MediaButtonIntentReceiver extends BroadcastReceiver {
 
             if (KeyEvent.ACTION_UP == action) {
 	            final Intent i = new Intent();
-	            i.setAction(BotifierService.SERVICECMD);
-	            i.putExtra(BotifierService.SERVICECMD, keycode);
+	            i.setAction(BotifierManager.SERVICECMD);
+	            i.putExtra(BotifierManager.SERVICECMD, keycode);
 	            context.sendBroadcast(i);
             }
             
diff --git a/src/com/github/grimpy/botifier/NotificationInterface.java b/src/com/github/grimpy/botifier/NotificationInterface.java
new file mode 100644
index 0000000..7fff329
--- /dev/null
+++ b/src/com/github/grimpy/botifier/NotificationInterface.java
@@ -0,0 +1,6 @@
+package com.github.grimpy.botifier;
+
+
+public interface NotificationInterface {
+	public void cancelNotification(Botification not);
+}
