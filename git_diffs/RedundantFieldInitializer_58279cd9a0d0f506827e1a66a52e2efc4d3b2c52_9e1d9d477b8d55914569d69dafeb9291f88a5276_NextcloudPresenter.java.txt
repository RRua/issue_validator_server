diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
index c9d3ac1..0a50b92 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
@@ -47,7 +47,7 @@ import static org.mockito.Mockito.verify;
 public class AddEditAccountNextcloudScreenTest {
 
     private OperationsService serviceMock;
-    private ArgumentCaptor<NextcloudPresenter> presenterCaptor;
+    private ArgumentCaptor<NextcloudFragment> viewCaptor;
 
     private final String MALFORMED_URL = "demo.nextcloud.com:port";
     private final String UNFORMATTED_URL = "Demo.Nextcloud.com:80/index.php/apps/files/";
@@ -77,8 +77,8 @@ public class AddEditAccountNextcloudScreenTest {
 
         serviceMock = Mockito.mock(OperationsService.class);
         // TODO: check if race condition is possible
-        presenter.setOperationsService(serviceMock);
-        presenterCaptor = ArgumentCaptor.forClass(NextcloudPresenter.class);
+        fragment.setOperationsService(serviceMock);
+        viewCaptor = ArgumentCaptor.forClass(NextcloudFragment.class);
     }
 
     @Test
@@ -136,8 +136,8 @@ public class AddEditAccountNextcloudScreenTest {
         onView(withId(R.id.account_username)).perform(click());
 
         verify(serviceMock).queueOperation(
-                any(Intent.class), presenterCaptor.capture(), any(Handler.class));
-        presenterCaptor.getValue().onRemoteOperationFinish(
+                any(Intent.class), viewCaptor.capture(), any(Handler.class));
+        viewCaptor.getValue().onRemoteOperationFinish(
                 new GetServerInfoOperation(SERVER_URL, serviceMock),
                 new RemoteOperationResult(RemoteOperationResult.ResultCode.FILE_NOT_FOUND));
         // Just to make sure UI is updated
@@ -154,7 +154,7 @@ public class AddEditAccountNextcloudScreenTest {
         onView(withId(R.id.server_url)).perform(typeText(SERVER_URL));
         onView(withId(R.id.account_username)).perform(click());
         verify(serviceMock).queueOperation(
-                any(Intent.class), presenterCaptor.capture(), any(Handler.class));
+                any(Intent.class), viewCaptor.capture(), any(Handler.class));
         // Mock OK_SSL Status
         RemoteOperationResult result =
                 new RemoteOperationResult(RemoteOperationResult.ResultCode.OK_SSL);
@@ -165,7 +165,7 @@ public class AddEditAccountNextcloudScreenTest {
         ArrayList<Object> data = new ArrayList<>();
         data.add(serverInfo);
         result.setData(data);
-        presenterCaptor.getValue().onRemoteOperationFinish(
+        viewCaptor.getValue().onRemoteOperationFinish(
                 new GetServerInfoOperation(SERVER_URL, serviceMock), result);
         onView(withId(R.id.server_url)).perform(click());
         // Auth
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java
index 2c7ce42..53093fe 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java
@@ -12,8 +12,8 @@ import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Link;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.local.LocalContract;
+import com.bytesforge.linkasanote.utils.CommonUtils;
 
-import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -27,7 +27,7 @@ import static org.hamcrest.MatcherAssert.assertThat;
 @RunWith(AndroidJUnit4.class)
 public class ProviderTest extends ProviderTestCase2<Provider> {
 
-    private final String ENTRY_KEY = StringUtils.repeat('A', 22);
+    private final String ENTRY_KEY = CommonUtils.charRepeat('A', 22);
     private final List<Tag> TAGS;
     private final String LINK_VALUE = "http://laano.net/link";
     private final String LINK_TITLE = "Title of the Link";
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
index 115a58e..65b9d37 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
@@ -9,6 +9,7 @@ import android.support.test.runner.AndroidJUnit4;
 
 import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
+import com.bytesforge.linkasanote.TestUtils;
 import com.bytesforge.linkasanote.data.source.Repository;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesFragment;
 
@@ -98,12 +99,18 @@ public class FavoritesTabTest {
     }
 
     @Test
-    public void addFavoritesToFavoritesRecyclerView() {
+    public void addFavoritesToFavoritesRecyclerView_checkIfPersistOnOrientationChange() {
         repository.cacheIsDirty = true;
         for (String name : FAVORITE_NAMES) {
             createFavorite(name, TAGS);
         }
-        onView(withItemTextRV(FAVORITE_NAMES.get(0))).check(matches(isDisplayed()));
+        for (String name : FAVORITE_NAMES) {
+            onView(withItemTextRV(name)).check(matches(isDisplayed()));
+        }
+        TestUtils.rotateOrientation(laanoActivityTestRule);
+        for (String name : FAVORITE_NAMES) {
+            onView(withItemTextRV(name)).check(matches(isDisplayed()));
+        }
     }
 
     private void createFavorite(String name, String tags) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/BaseFragment.java b/app/src/main/java/com/bytesforge/linkasanote/BaseFragment.java
index c5bc161..eac360b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/BaseFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/BaseFragment.java
@@ -1,24 +1,23 @@
 package com.bytesforge.linkasanote;
 
 import android.os.Bundle;
-import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 public abstract class BaseFragment extends Fragment {
 
-    public static final String ARG_TITLE = "ARG_TITLE";
+    public static final String ARGUMENT_TITLE = "ARGUMENT_TITLE";
 
-    private String title = null;
+    private String title;
 
-    public static void attachTitle(String tabTitle, Fragment fragment) {
+    public void attachTitle(String tabTitle) {
         Bundle args = new Bundle();
-        args.putString(ARG_TITLE, tabTitle);
-        fragment.setArguments(args);
+        args.putString(ARGUMENT_TITLE, tabTitle);
+        setArguments(args);
     }
 
     public String getTitle() {
         if (title == null) {
-            title = getArguments().getString(ARG_TITLE);
+            title = getArguments().getString(ARGUMENT_TITLE);
         }
         return title;
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/FragmentScoped.java b/app/src/main/java/com/bytesforge/linkasanote/FragmentScoped.java
similarity index 82%
rename from app/src/main/java/com/bytesforge/linkasanote/utils/FragmentScoped.java
rename to app/src/main/java/com/bytesforge/linkasanote/FragmentScoped.java
index af3fc35..a591596 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/FragmentScoped.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/FragmentScoped.java
@@ -1,4 +1,4 @@
-package com.bytesforge.linkasanote.utils;
+package com.bytesforge.linkasanote;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
index eb2ac9c..6596b8b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
@@ -3,20 +3,15 @@ package com.bytesforge.linkasanote.addeditaccount;
 import android.Manifest;
 import android.accounts.Account;
 import android.accounts.AccountManager;
-import android.content.ComponentName;
-import android.content.Context;
 import android.content.Intent;
-import android.content.ServiceConnection;
 import android.content.pm.PackageManager;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
-import android.os.IBinder;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
 import android.support.v7.app.AppCompatActivity;
-import android.util.Log;
 
 import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
@@ -76,11 +71,8 @@ public class AddEditAccountActivity extends AppCompatActivity implements
         // Presenter
         DaggerAddEditAccountComponent.builder()
                 .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .nextcloudPresenterModule(new NextcloudPresenterModule(nextcloudFragment, account))
+                .nextcloudPresenterModule(new NextcloudPresenterModule(this, nextcloudFragment, account))
                 .build().inject(this);
-        // Service binding
-        Intent intent = new Intent(this, OperationsService.class);
-        bindService(intent, operationsServiceConnection, Context.BIND_AUTO_CREATE);
     }
 
     @Override
@@ -92,9 +84,6 @@ public class AddEditAccountActivity extends AppCompatActivity implements
     @Override
     protected void onDestroy() {
         super.onDestroy();
-        if (operationsService != null) {
-            unbindService(operationsServiceConnection);
-        }
     }
 
     // Get Accounts Permission
@@ -189,26 +178,6 @@ public class AddEditAccountActivity extends AppCompatActivity implements
                 }).show();
     }
 
-    // Service
-
-    private ServiceConnection operationsServiceConnection = new ServiceConnection() {
-
-        @Override
-        public void onServiceConnected(ComponentName className, IBinder service) {
-            Log.d(TAG, "Service connected [" + className.getShortClassName() + "]");
-            OperationsService.OperationsBinder binder =
-                    (OperationsService.OperationsBinder) service;
-            operationsService = binder.getService();
-            presenter.setOperationsService(operationsService);
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName className) {
-            Log.d(TAG, "Service disconnected [" + className.getShortClassName() + "]");
-            operationsService = null;
-        }
-    };
-
     private void cancelActivity() {
         setResult(RESULT_CANCELED);
         finish();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
index 5155318..39117bd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
@@ -1,8 +1,8 @@
 package com.bytesforge.linkasanote.addeditaccount;
 
 import com.bytesforge.linkasanote.ApplicationComponent;
+import com.bytesforge.linkasanote.FragmentScoped;
 import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudPresenterModule;
-import com.bytesforge.linkasanote.utils.FragmentScoped;
 
 import dagger.Component;
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
index ac8bb1c..f3c1c32 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
@@ -1,13 +1,13 @@
 package com.bytesforge.linkasanote.addeditaccount.nextcloud;
 
 import android.accounts.Account;
+import android.accounts.AccountManager;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
-import com.bytesforge.linkasanote.sync.operations.OperationsService;
 import com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation;
 import com.owncloud.android.lib.common.operations.RemoteOperationResult;
 
@@ -15,6 +15,8 @@ public interface NextcloudContract {
 
     interface View extends BaseView<Presenter> {
 
+        void setViewModel(@NonNull NextcloudContract.ViewModel viewModel);
+        void setAccountManager(@NonNull AccountManager accountManager);
         boolean isActive();
 
         void addAccount(
@@ -27,12 +29,18 @@ public interface NextcloudContract {
         void cancelActivity();
         Bundle getAccountState(@NonNull Account account);
         void requestFocusOnAccountPassword();
+        boolean sendGetServerInfoOperation(String url);
+        boolean sendCheckCredentialsOperation(
+                String username, String password,
+                @Nullable GetServerInfoOperation.ServerInfo serverInfo);
     }
 
     interface ViewModel extends BaseView<Presenter> {
 
+        void setInstanceState(@Nullable Bundle savedInstanceState);
         void loadInstanceState(@NonNull Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
+
         void validateServer();
 
         void showRefreshButton();
@@ -58,8 +66,6 @@ public interface NextcloudContract {
         boolean isNewAccount();
         void populateAccount();
 
-        void setViewModel(@NonNull NextcloudContract.ViewModel viewModel);
-        void setOperationsService(OperationsService service);
         Bundle getInstanceState();
         void applyInstanceState(@Nullable Bundle state);
 
@@ -67,6 +73,8 @@ public interface NextcloudContract {
         void checkUrl(String url);
         void checkAuth(String username, String password);
         boolean isServerUrlValid();
-        void setServerInfo(GetServerInfoOperation.ServerInfo serverInfo);
+        void setServerInfo(@Nullable GetServerInfoOperation.ServerInfo serverInfo);
+        @Nullable GetServerInfoOperation.ServerInfo getServerInfo();
+        @Nullable Account getAccount();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
index 20fbb0a..44f303d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
@@ -4,22 +4,30 @@ import android.accounts.Account;
 import android.accounts.AccountAuthenticatorResponse;
 import android.accounts.AccountManager;
 import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Context;
 import android.content.Intent;
+import android.content.ServiceConnection;
 import android.databinding.DataBindingUtil;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.FragmentAddEditAccountNextcloudBinding;
+import com.bytesforge.linkasanote.sync.operations.OperationsService;
+import com.bytesforge.linkasanote.sync.operations.nextcloud.CheckCredentialsOperation;
 import com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation;
 import com.bytesforge.linkasanote.utils.CloudUtils;
 import com.owncloud.android.lib.common.OwnCloudAccount;
@@ -27,15 +35,21 @@ import com.owncloud.android.lib.common.OwnCloudClientManagerFactory;
 import com.owncloud.android.lib.common.OwnCloudCredentials;
 import com.owncloud.android.lib.common.UserInfo;
 import com.owncloud.android.lib.common.accounts.AccountUtils;
+import com.owncloud.android.lib.common.operations.OnRemoteOperationListener;
+import com.owncloud.android.lib.common.operations.RemoteOperation;
 import com.owncloud.android.lib.common.operations.RemoteOperationResult;
 
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountUsername;
+import static com.bytesforge.linkasanote.utils.CommonUtils.convertIdn;
 import static com.google.common.base.Preconditions.checkNotNull;
 
-public class NextcloudFragment extends Fragment implements NextcloudContract.View {
+public class NextcloudFragment extends Fragment implements
+        NextcloudContract.View, OnRemoteOperationListener {
 
     private static final String TAG = NextcloudFragment.class.getSimpleName();
     private static final int ACCOUNT_VERSION = 1;
@@ -47,6 +61,11 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
     private FragmentAddEditAccountNextcloudBinding binding;
     private AccountManager accountManager;
 
+    private final Handler handler = new Handler();
+    private static final Object operationsLock = new Object();
+    private OperationsService operationsService = null;
+    private List<Intent> operationsQueue = new ArrayList<>();
+
     public static NextcloudFragment newInstance() {
         return new NextcloudFragment();
     }
@@ -63,6 +82,14 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         presenter.unsubscribe();
     }
 
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (operationsService != null) {
+            getActivity().unbindService(operationsServiceConnection);
+        }
+    }
+
     @Override
     public boolean isActive() {
         return isAdded();
@@ -73,23 +100,33 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         this.presenter = checkNotNull(presenter);
     }
 
+    @Override
+    public void setViewModel(@NonNull NextcloudContract.ViewModel viewModel) {
+        this.viewModel = checkNotNull(viewModel);
+    }
+
+    @Override
+    public void setAccountManager(@NonNull AccountManager accountManager) {
+        this.accountManager = checkNotNull(accountManager);
+    }
+
     @Nullable
     @Override
     public View onCreateView(
             LayoutInflater inflater, @Nullable ViewGroup container,
             @Nullable Bundle savedInstanceState) {
+        // Service
+        Intent intent = new Intent(getContext(), OperationsService.class);
+        getActivity().bindService(intent, operationsServiceConnection, Context.BIND_AUTO_CREATE);
+        // Bind
         binding = DataBindingUtil.inflate(
                 inflater, R.layout.fragment_add_edit_account_nextcloud, container, false);
-        accountManager = AccountManager.get(getContext());
-        viewModel = new NextcloudViewModel(getContext(), savedInstanceState);
-        viewModel.setPresenter(presenter);
-        presenter.setViewModel(viewModel);
+        viewModel.setInstanceState(savedInstanceState);
         binding.setViewModel((NextcloudViewModel) viewModel);
         if (savedInstanceState == null && !presenter.isNewAccount()) {
             // NOTE: here because must be intact on orientation change
             presenter.populateAccount();
         }
-
         return binding.getRoot();
     }
 
@@ -122,6 +159,22 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         activity.finish();
     }
 
+    @Override
+    public void finishActivity(
+            @NonNull Account account, @NonNull String password, @NonNull Bundle data) {
+        checkNotNull(account);
+        checkNotNull(password);
+        checkNotNull(data);
+
+        final Intent intent = new Intent();
+        intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, account.type);
+        intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, account.name);
+        intent.putExtra(AccountManager.KEY_PASSWORD, password);
+        intent.putExtra(AccountManager.KEY_USERDATA, data);
+
+        finishActivity(intent);
+    }
+
     @Override
     public void cancelActivity() {
         FragmentActivity activity = getActivity();
@@ -136,6 +189,43 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         activity.finish();
     }
 
+    @Override
+    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {
+        if (operation instanceof GetServerInfoOperation) {
+            // GetServerInfoOperation
+            viewModel.showConnectionResultStatus(result.getCode());
+            if (result.isSuccess()) {
+                presenter.setServerInfo((GetServerInfoOperation.ServerInfo) result.getData().get(0));
+                viewModel.checkLoginButton();
+            } else {
+                viewModel.showRefreshButton();
+            }
+        } else if (operation instanceof CheckCredentialsOperation) {
+            // CheckCredentialsOperation
+            GetServerInfoOperation.ServerInfo serverInfo = presenter.getServerInfo();
+            if (serverInfo == null) { // NOTE: checked when operation is sent
+                viewModel.showAuthResultStatus(RemoteOperationResult.ResultCode.UNKNOWN_ERROR);
+                viewModel.enableLoginButton();
+                return;
+            }
+            if (result.isSuccess()) {
+                if (presenter.isNewAccount()) {
+                    addAccount(result, serverInfo);
+                } else {
+                    updateAccount(result, presenter.getAccount(), serverInfo);
+                }
+            } else if (result.isServerFail()) {
+                presenter.setServerInfo(null);
+                viewModel.showConnectionResultStatus(result.getCode());
+                viewModel.showRefreshButton();
+                viewModel.disableLoginButton();
+            } else { // NOTE: it's wrong credentials or result.isException()
+                viewModel.showAuthResultStatus(result.getCode());
+                viewModel.enableLoginButton();
+            }
+        } // operation instanceof ...
+    }
+
     @Override
     public void addAccount(
             @NonNull RemoteOperationResult result,
@@ -236,22 +326,6 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         }
     }
 
-    @Override
-    public void finishActivity(
-            @NonNull Account account, @NonNull String password, @NonNull Bundle data) {
-        checkNotNull(account);
-        checkNotNull(password);
-        checkNotNull(data);
-
-        final Intent intent = new Intent();
-        intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, account.type);
-        intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, account.name);
-        intent.putExtra(AccountManager.KEY_PASSWORD, password);
-        intent.putExtra(AccountManager.KEY_USERDATA, data);
-
-        finishActivity(intent);
-    }
-
     @Override
     public Bundle getAccountState(@NonNull Account account) {
         checkNotNull(account);
@@ -270,6 +344,52 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
         return state;
     }
 
+    @Override
+    public boolean sendGetServerInfoOperation(String url) {
+        Intent getServerInfoIntent = new Intent();
+        getServerInfoIntent.setAction(OperationsService.ACTION_GET_SERVER_INFO);
+        getServerInfoIntent.putExtra(OperationsService.EXTRA_SERVER_URL, convertIdn(url, true));
+        synchronized (operationsLock) {
+            if (operationsService == null) {
+                operationsQueue.add(getServerInfoIntent);
+                return false;
+            } else {
+                operationsService.queueOperation(getServerInfoIntent, this, handler);
+                return true;
+            }
+        } // synchronized
+    }
+
+    @Override
+    public boolean sendCheckCredentialsOperation(
+            String username, String password,
+            @Nullable GetServerInfoOperation.ServerInfo serverInfo) {
+        if (serverInfo == null) {
+            throw new IllegalStateException(
+                    "CheckCredentialsOperation must not be called before serverInfo is set");
+        }
+        Bundle credentials = new Bundle();
+        credentials.putString(CheckCredentialsOperation.ACCOUNT_USERNAME, username);
+        credentials.putString(CheckCredentialsOperation.ACCOUNT_PASSWORD, password);
+
+        Intent checkCredentialsIntent = new Intent();
+        checkCredentialsIntent.setAction(OperationsService.ACTION_CHECK_CREDENTIALS);
+        checkCredentialsIntent.putExtra(OperationsService.EXTRA_SERVER_URL, serverInfo.baseUrl);
+        checkCredentialsIntent.putExtra(
+                OperationsService.EXTRA_SERVER_VERSION, serverInfo.version.getVersion());
+        checkCredentialsIntent.putExtra(OperationsService.EXTRA_CREDENTIALS, credentials);
+
+        synchronized (operationsLock) {
+            if (operationsService == null) {
+                operationsQueue.add(checkCredentialsIntent);
+                return false;
+            } else {
+                operationsService.queueOperation(checkCredentialsIntent, this, handler);
+                return true;
+            }
+        } // synchronized
+    }
+
     @Override
     public void requestFocusOnAccountPassword() {
         binding.accountPassword.requestFocus();
@@ -288,9 +408,35 @@ public class NextcloudFragment extends Fragment implements NextcloudContract.Vie
                 }).show();
     }
 
+    // Service
+
+    private ServiceConnection operationsServiceConnection = new ServiceConnection() {
+
+        @Override
+        public void onServiceConnected(ComponentName className, IBinder service) {
+            Log.d(TAG, "Service connected [" + className.getShortClassName() + "]");
+            OperationsService.OperationsBinder binder =
+                    (OperationsService.OperationsBinder) service;
+            operationsService = binder.getService();
+            setOperationsService(operationsService);
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName className) {
+            Log.d(TAG, "Service disconnected [" + className.getShortClassName() + "]");
+            operationsService = null;
+        }
+    };
+
     @VisibleForTesting
-    public void setAccountManager(AccountManager accountManager) {
-        this.accountManager = accountManager;
+    public void setOperationsService(OperationsService service) {
+        synchronized (operationsLock) {
+            operationsService = service;
+            for (Intent intent : operationsQueue) {
+                operationsService.queueOperation(intent, this, handler);
+            }
+            operationsQueue.clear();
+        }
     }
 
     @VisibleForTesting
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
index 0cfd953..89e7dd0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
@@ -1,53 +1,41 @@
 package com.bytesforge.linkasanote.addeditaccount.nextcloud;
 
 import android.accounts.Account;
-import android.content.Intent;
+import android.accounts.AccountManager;
 import android.os.Bundle;
-import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity;
-import com.bytesforge.linkasanote.sync.operations.OperationsService;
-import com.bytesforge.linkasanote.sync.operations.nextcloud.CheckCredentialsOperation;
 import com.bytesforge.linkasanote.sync.operations.nextcloud.GetServerInfoOperation;
-import com.owncloud.android.lib.common.operations.OnRemoteOperationListener;
-import com.owncloud.android.lib.common.operations.RemoteOperation;
-import com.owncloud.android.lib.common.operations.RemoteOperationResult;
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
 
 import javax.inject.Inject;
 
-import static com.bytesforge.linkasanote.utils.CommonUtils.convertIdn;
-import static com.google.common.base.Preconditions.checkNotNull;
-
-public final class NextcloudPresenter
-        implements NextcloudContract.Presenter, OnRemoteOperationListener {
+public final class NextcloudPresenter implements NextcloudContract.Presenter {
 
     private static final String TAG = NextcloudPresenter.class.getSimpleName();
 
     private static final String NEXTCLOUD_INDEX = "/index.php";
 
-    private final Handler handler = new Handler();
-    private static final Object operationsLock = new Object();
-    private OperationsService operationsService = null;
-    private List<Intent> operationsQueue = new ArrayList<>();
-
     @Nullable
     private Account account;
 
-    private final NextcloudContract.View view;
-    private NextcloudContract.ViewModel viewModel;
     private GetServerInfoOperation.ServerInfo serverInfo;
 
+    private final NextcloudContract.View view;
+    private final NextcloudContract.ViewModel viewModel;
+    private final AccountManager accountManager;
+
     @Inject
     NextcloudPresenter(
-            NextcloudContract.View view, @Nullable @NextcloudAccount Account account) {
+            NextcloudContract.View view, NextcloudContract.ViewModel viewModel,
+            AccountManager accountManager, @Nullable @NextcloudAccount Account account) {
         this.view = view;
+        this.viewModel = viewModel;
+        this.accountManager = accountManager;
         this.account = account;
         serverInfo = null;
     }
@@ -55,18 +43,9 @@ public final class NextcloudPresenter
     @Inject
     void setupView() {
         view.setPresenter(this);
-    }
-
-    @Override
-    public void setOperationsService(OperationsService service) {
-        // TODO: presenter should know nothing about android stuff, move it to the View
-        synchronized (operationsLock) {
-            operationsService = service;
-            for (Intent intent : operationsQueue) {
-                operationsService.queueOperation(intent, this, handler);
-            }
-            operationsQueue.clear();
-        }
+        view.setViewModel(viewModel);
+        view.setAccountManager(accountManager);
+        viewModel.setPresenter(this);
     }
 
     @Override
@@ -88,27 +67,14 @@ public final class NextcloudPresenter
     public void unsubscribe() {
     }
 
-    @Override
-    public void setViewModel(@NonNull NextcloudContract.ViewModel viewModel) {
-        this.viewModel = checkNotNull(viewModel);
-    }
-
     @Override
     public void checkUrl(@NonNull final String url) {
-        viewModel.showTestingConnectionStatus();
         viewModel.hideRefreshButton();
-
-        Intent getServerInfoIntent = new Intent();
-        getServerInfoIntent.setAction(OperationsService.ACTION_GET_SERVER_INFO);
-        getServerInfoIntent.putExtra(OperationsService.EXTRA_SERVER_URL, convertIdn(url, true));
-        synchronized (operationsLock) {
-            if (operationsService == null) {
-                operationsQueue.add(getServerInfoIntent);
-                viewModel.showCheckUrlWaitingForServiceStatus();
-            } else {
-                operationsService.queueOperation(getServerInfoIntent, this, handler);
-            }
-        } // synchronized
+        if (view.sendGetServerInfoOperation(url)) {
+            viewModel.showTestingConnectionStatus();
+        } else {
+            viewModel.showCheckUrlWaitingForServiceStatus();
+        }
     }
 
     @Override
@@ -142,64 +108,16 @@ public final class NextcloudPresenter
         if (path.endsWith("/")) path = path.substring(0, path.length() - 1);
         normalizedUrl = url.getProtocol() + "://" +
                 url.getHost() + ((port == -1 || port == 80) ? "" : ":" + port) + path;
-
         return normalizedUrl;
     }
 
     @Override
     public void checkAuth(String username, String password) {
-        viewModel.showTestingAuthStatus();
         viewModel.disableLoginButton();
-
-        Bundle credentials = new Bundle();
-        credentials.putString(CheckCredentialsOperation.ACCOUNT_USERNAME, username);
-        credentials.putString(CheckCredentialsOperation.ACCOUNT_PASSWORD, password);
-
-        Intent checkCredentialsIntent = new Intent();
-        checkCredentialsIntent.setAction(OperationsService.ACTION_CHECK_CREDENTIALS);
-        checkCredentialsIntent.putExtra(OperationsService.EXTRA_SERVER_URL, serverInfo.baseUrl);
-        checkCredentialsIntent.putExtra(
-                OperationsService.EXTRA_SERVER_VERSION, serverInfo.version.getVersion());
-        checkCredentialsIntent.putExtra(OperationsService.EXTRA_CREDENTIALS, credentials);
-
-        synchronized (operationsLock) {
-            if (operationsService == null) {
-                operationsQueue.add(checkCredentialsIntent);
-                viewModel.showCheckAuthWaitingForServiceStatus();
-            } else {
-                operationsService.queueOperation(checkCredentialsIntent, this, handler);
-            }
-        } // synchronized
-    }
-
-    @Override
-    public void onRemoteOperationFinish(RemoteOperation operation, RemoteOperationResult result) {
-        if (operation instanceof GetServerInfoOperation) {
-            // GetServerInfoOperation
-            viewModel.showConnectionResultStatus(result.getCode());
-            if (result.isSuccess()) {
-                setServerInfo((GetServerInfoOperation.ServerInfo) result.getData().get(0));
-                viewModel.checkLoginButton();
-            } else {
-                viewModel.showRefreshButton();
-            }
-        } else if (operation instanceof CheckCredentialsOperation) {
-            // CheckCredentialsOperation
-            if (result.isSuccess()) {
-                if (isNewAccount()) {
-                    view.addAccount(result, serverInfo);
-                } else {
-                    view.updateAccount(result, account, serverInfo);
-                }
-            } else if (result.isServerFail()) {
-                setServerInfo(null);
-                viewModel.showConnectionResultStatus(result.getCode());
-                viewModel.showRefreshButton();
-                viewModel.disableLoginButton();
-            } else { // NOTE: it's wrong credentials or result.isException()
-                viewModel.showAuthResultStatus(result.getCode());
-                viewModel.enableLoginButton();
-            }
+        if (view.sendCheckCredentialsOperation(username, password, serverInfo)) {
+            viewModel.showTestingAuthStatus();
+        } else {
+            viewModel.showCheckAuthWaitingForServiceStatus();
         }
     }
 
@@ -208,11 +126,23 @@ public final class NextcloudPresenter
         return serverInfo != null && serverInfo.isSet();
     }
 
+    @Nullable
     @Override
-    public void setServerInfo(GetServerInfoOperation.ServerInfo serverInfo) {
+    public GetServerInfoOperation.ServerInfo getServerInfo() {
+        return serverInfo;
+    }
+
+    @Override
+    public void setServerInfo(@Nullable GetServerInfoOperation.ServerInfo serverInfo) {
         this.serverInfo = serverInfo;
     }
 
+    @Nullable
+    @Override
+    public Account getAccount() {
+        return account;
+    }
+
     @Override
     public Bundle getInstanceState() {
         Bundle state = new Bundle();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
index bde73e9..3826445 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
@@ -1,6 +1,8 @@
 package com.bytesforge.linkasanote.addeditaccount.nextcloud;
 
 import android.accounts.Account;
+import android.accounts.AccountManager;
+import android.content.Context;
 import android.support.annotation.Nullable;
 
 import dagger.Module;
@@ -9,12 +11,15 @@ import dagger.Provides;
 @Module
 public class NextcloudPresenterModule {
 
+    private final Context context;
     private final NextcloudContract.View view;
 
     @Nullable
     private final Account account;
 
-    public NextcloudPresenterModule(NextcloudContract.View view, @Nullable Account account) {
+    public NextcloudPresenterModule(
+            Context context, NextcloudContract.View view, @Nullable Account account) {
+        this.context = context;
         this.view = view;
         this.account = account;
     }
@@ -24,6 +29,16 @@ public class NextcloudPresenterModule {
         return view;
     }
 
+    @Provides
+    NextcloudContract.ViewModel provideNextcloudContractViewModel() {
+        return new NextcloudViewModel(context);
+    }
+
+    @Provides
+    AccountManager provideAccountManager() {
+        return AccountManager.get(context);
+    }
+
     @Provides
     @Nullable
     @NextcloudAccount
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
index 7a749e6..a2cb63e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
@@ -64,9 +64,12 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
 
     private boolean isServerUrlHasFocus = false;
 
-    public NextcloudViewModel(@NonNull Context context, @Nullable Bundle savedInstanceState) {
+    public NextcloudViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
+    }
 
+    @Override
+    public void setInstanceState(@Nullable Bundle savedInstanceState) {
         if (savedInstanceState == null) {
             applyInstanceState(getDefaultInstanceState());
         } else {
@@ -74,6 +77,7 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
         }
     }
 
+    @Override
     public void loadInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
index e2537c5..bd4b490 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
@@ -55,7 +55,7 @@ public class AddEditFavoriteActivity extends AppCompatActivity {
         // Presenter
         DaggerAddEditFavoriteComponent.builder()
                 .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .addEditFavoritePresenterModule(new AddEditFavoritePresenterModule(fragment, favoriteId))
+                .addEditFavoritePresenterModule(new AddEditFavoritePresenterModule(this, fragment, favoriteId))
                 .build().inject(this);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
index ae38364..21d8601 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
@@ -1,7 +1,7 @@
 package com.bytesforge.linkasanote.addeditfavorite;
 
 import com.bytesforge.linkasanote.ApplicationComponent;
-import com.bytesforge.linkasanote.utils.FragmentScoped;
+import com.bytesforge.linkasanote.FragmentScoped;
 
 import dagger.Component;
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
index 259be8c..9ff8d3e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
@@ -2,6 +2,7 @@ package com.bytesforge.linkasanote.addeditfavorite;
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
@@ -13,6 +14,7 @@ public interface AddEditFavoriteContract {
 
     interface View extends BaseView<Presenter> {
 
+        void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel);
         boolean isActive();
         void finishActivity();
 
@@ -21,16 +23,17 @@ public interface AddEditFavoriteContract {
 
     interface ViewModel extends BaseView<Presenter> {
 
+        void setInstanceState(@Nullable Bundle savedInstanceState);
+        void loadInstanceState(Bundle outState);
+        void applyInstanceState(@NonNull Bundle state);
+
         void setTagsCompletionView(@NonNull FavoriteTagsCompletionView completionView);
         void showEmptyFavoriteSnackbar();
-        void loadInstanceState(Bundle outState);
         void showDuplicateKeyError();
     }
 
     interface Presenter extends BasePresenter {
 
-        void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel);
-
         boolean isNewFavorite();
         void saveFavorite(String name, List<Tag> tags);
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
index b879e3b..9e9d871 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
@@ -16,11 +16,10 @@ import android.widget.ArrayAdapter;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.databinding.FragmentAddEditFavoriteBinding;
+import com.bytesforge.linkasanote.utils.CommonUtils;
 import com.tokenautocomplete.FilteredArrayAdapter;
 import com.tokenautocomplete.TokenCompleteTextView;
 
-import org.apache.commons.lang3.ArrayUtils;
-
 import java.util.ArrayList;
 import java.util.List;
 
@@ -62,6 +61,11 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
         this.presenter = checkNotNull(presenter);
     }
 
+    @Override
+    public void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel) {
+        this.viewModel = checkNotNull(viewModel);
+    }
+
     @Override
     public void finishActivity() {
         getActivity().setResult(Activity.RESULT_OK);
@@ -75,18 +79,7 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         binding = DataBindingUtil.inflate(
                 inflater, R.layout.fragment_add_edit_favorite, container, false);
-
-        if (savedInstanceState == null) {
-            // Default state
-            savedInstanceState = new Bundle();
-            savedInstanceState.putInt(AddEditFavoriteViewModel.STATE_ADD_BUTTON_TEXT,
-                    presenter.isNewFavorite()
-                            ? R.string.add_edit_favorite_new_button_title
-                            : R.string.add_edit_favorite_edit_button_title);
-        }
-        viewModel = new AddEditFavoriteViewModel(getContext(), savedInstanceState);
-        viewModel.setPresenter(presenter);
-        presenter.setViewModel(viewModel);
+        viewModel.setInstanceState(savedInstanceState);
         binding.setViewModel((AddEditFavoriteViewModel) viewModel);
         // FavoriteTags
         final FavoriteTagsCompletionView completionView = binding.favoriteTags;
@@ -139,7 +132,7 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
                 return filteredStringBuilder.toString();
             }
         };
-        InputFilter[] inputFilters = ArrayUtils.add(
+        InputFilter[] inputFilters = CommonUtils.arrayAdd(
                 completionView.getFilters(), alphanumericFilter);
         completionView.setFilters(inputFilters);
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
index 359c7ba..30a5006 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
@@ -18,16 +18,14 @@ import rx.Observer;
 import rx.Subscription;
 import rx.subscriptions.CompositeSubscription;
 
-import static com.google.common.base.Preconditions.checkNotNull;
-
 public final class AddEditFavoritePresenter implements AddEditFavoriteContract.Presenter {
 
-    private final AddEditFavoriteContract.View view;
     private final Repository repository;
-    private final String favoriteId;
+    private final AddEditFavoriteContract.View view;
+    private final AddEditFavoriteContract.ViewModel viewModel;
     private final BaseSchedulerProvider schedulerProvider;
+    private final String favoriteId;
 
-    private AddEditFavoriteContract.ViewModel viewModel;
 
     @NonNull
     private final CompositeSubscription subscription;
@@ -35,10 +33,12 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
     @Inject
     AddEditFavoritePresenter(
             Repository repository, AddEditFavoriteContract.View view,
+            AddEditFavoriteContract.ViewModel viewModel,
             BaseSchedulerProvider schedulerProvider,
             @Nullable @FavoriteId String favoriteId) {
         this.repository = repository;
         this.view = view;
+        this.viewModel = viewModel;
         this.schedulerProvider = schedulerProvider;
         this.favoriteId = favoriteId;
 
@@ -48,11 +48,8 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
     @Inject
     void setupView() {
         view.setPresenter(this);
-    }
-
-    @Override
-    public void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel) {
-        this.viewModel = checkNotNull(viewModel);
+        view.setViewModel(viewModel);
+        viewModel.setPresenter(this);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
index c1829f2..8a1e8c8 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
@@ -1,5 +1,6 @@
 package com.bytesforge.linkasanote.addeditfavorite;
 
+import android.content.Context;
 import android.support.annotation.Nullable;
 
 import dagger.Module;
@@ -8,11 +9,13 @@ import dagger.Provides;
 @Module
 public class AddEditFavoritePresenterModule {
 
+    private final Context context;
     private final AddEditFavoriteContract.View view;
     private String favoriteId;
 
     public AddEditFavoritePresenterModule(
-            AddEditFavoriteContract.View view, @Nullable String favoriteId) {
+            Context context, AddEditFavoriteContract.View view, @Nullable String favoriteId) {
+        this.context = context;
         this.view = view;
         this.favoriteId = favoriteId;
     }
@@ -22,6 +25,11 @@ public class AddEditFavoritePresenterModule {
         return view;
     }
 
+    @Provides
+    AddEditFavoriteContract.ViewModel provideAddEditFavoriteContractViewModel() {
+        return new AddEditFavoriteViewModel(context);
+    }
+
     @Provides
     @Nullable
     @FavoriteId
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
index 101372a..1c80e41 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
@@ -32,10 +32,9 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
 
     public final ObservableField<String> favoriteName = new ObservableField<>();
     public final ObservableBoolean addButton = new ObservableBoolean(false);
+    private int addButtonText;
 
-    private final int addButtonText;
     private FavoriteTagsCompletionView favoriteTags;
-
     private Context context;
     private AddEditFavoriteContract.Presenter presenter;
 
@@ -47,14 +46,17 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     @Bindable
     public String nameErrorText;
 
-    public AddEditFavoriteViewModel(@NonNull Context context, @NonNull Bundle savedInstanceState) {
+    public AddEditFavoriteViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
-        checkNotNull(savedInstanceState);
+    }
 
-        favoriteName.set(savedInstanceState.getString(STATE_FAVORITE_NAME));
-        addButton.set(savedInstanceState.getBoolean(STATE_ADD_BUTTON));
-        addButtonText = savedInstanceState.getInt(STATE_ADD_BUTTON_TEXT);
-        nameErrorText = savedInstanceState.getString(STATE_NAME_ERROR_TEXT);
+    @Override
+    public void setInstanceState(@Nullable Bundle savedInstanceState) {
+        if (savedInstanceState == null) {
+            applyInstanceState(getDefaultInstanceState());
+        } else {
+            applyInstanceState(savedInstanceState);
+        }
     }
 
     @Override
@@ -67,6 +69,30 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
         outState.putString(STATE_NAME_ERROR_TEXT, nameErrorText);
     }
 
+    @Override
+    public void applyInstanceState(@NonNull Bundle state) {
+        checkNotNull(state);
+
+        favoriteName.set(state.getString(STATE_FAVORITE_NAME));
+        addButton.set(state.getBoolean(STATE_ADD_BUTTON));
+        addButtonText = state.getInt(STATE_ADD_BUTTON_TEXT);
+        nameErrorText = state.getString(STATE_NAME_ERROR_TEXT);
+    }
+
+    private Bundle getDefaultInstanceState() {
+        Bundle defaultState = new Bundle();
+
+        defaultState.putString(STATE_FAVORITE_NAME, null);
+        defaultState.putBoolean(STATE_ADD_BUTTON, false);
+        int addButtonText = presenter.isNewFavorite()
+                ? R.string.add_edit_favorite_new_button_title
+                : R.string.add_edit_favorite_edit_button_title;
+        defaultState.putInt(STATE_ADD_BUTTON_TEXT, addButtonText);
+        defaultState.putString(STATE_NAME_ERROR_TEXT, null);
+
+        return defaultState;
+    }
+
     @Override
     public void setPresenter(@NonNull AddEditFavoriteContract.Presenter presenter) {
         this.presenter = checkNotNull(presenter);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/DatabaseHelper.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/DatabaseHelper.java
index 186d780..f2910b0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/DatabaseHelper.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/DatabaseHelper.java
@@ -47,6 +47,7 @@ public class DatabaseHelper extends SQLiteOpenHelper {
                     LocalContract.FavoriteEntry.COLUMN_NAME_NAME + TEXT_TYPE + " UNIQUE," +
                     LocalContract.FavoriteEntry.COLUMN_NAME_ETAG + TEXT_TYPE + "," +
                     LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED + BOOLEAN_TYPE + "," +
+                    LocalContract.FavoriteEntry.COLUMN_NAME_DELETED + BOOLEAN_TYPE + "," +
                     LocalContract.FavoriteEntry.COLUMN_NAME_SYNCED + BOOLEAN_TYPE +
             ");";
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
index 35195b3..3bb8cbf 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
@@ -16,6 +16,7 @@ public final class LocalContract {
     public static final String COMMON_NAME_ETAG = "etag";
     // NOTE: there is a conflict with a cloud version
     public static final String COMMON_NAME_CONFLICTED = "conflicted";
+    public static final String COMMON_NAME_DELETED = "deleted";
     public static final String COMMON_NAME_SYNCED = "synced";
 
     private LocalContract() {
@@ -124,6 +125,7 @@ public final class LocalContract {
         public static final String COLUMN_NAME_NAME = "name";
         public static final String COLUMN_NAME_ETAG = LocalContract.COMMON_NAME_ETAG;
         public static final String COLUMN_NAME_CONFLICTED = LocalContract.COMMON_NAME_CONFLICTED;
+        public static final String COLUMN_NAME_DELETED = LocalContract.COMMON_NAME_DELETED;
         public static final String COLUMN_NAME_SYNCED = LocalContract.COMMON_NAME_SYNCED;
 
         public static final String CONTENT_TYPE =
@@ -141,6 +143,7 @@ public final class LocalContract {
                 FavoriteEntry.COLUMN_NAME_NAME,
                 FavoriteEntry.COLUMN_NAME_ETAG,
                 FavoriteEntry.COLUMN_NAME_CONFLICTED,
+                FavoriteEntry.COLUMN_NAME_DELETED,
                 FavoriteEntry.COLUMN_NAME_SYNCED};
 
         public static Uri buildFavoritesUri() {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
index 1f11470..7cae546 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
@@ -8,7 +8,6 @@ import android.accounts.OperationCanceledException;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.content.res.Resources;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.os.Handler;
@@ -52,6 +51,7 @@ import java.io.IOException;
 import javax.inject.Inject;
 
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 public class LaanoActivity extends AppCompatActivity implements
         ActivityCompat.OnRequestPermissionsResultCallback {
@@ -73,9 +73,6 @@ public class LaanoActivity extends AppCompatActivity implements
     @Inject
     NotesPresenter notesPresenter;
 
-    /*@Inject
-    SharedPreferences sharedPreferences;*/
-
     private ActivityLaanoBinding binding;
 
     @Override
@@ -91,58 +88,33 @@ public class LaanoActivity extends AppCompatActivity implements
             actionBar.setDisplayHomeAsUpEnabled(true);
         }
         // Navigation Drawer
-        DrawerLayout drawerLayout = binding.drawerLayout;
-        // NOTE: untestable behavior (swipeRight() doesn't open Drawer)
-        drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
-        ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(
-                this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {
-
-            @Override
-            public void onDrawerOpened(View drawerView) {
-                super.onDrawerOpened(drawerView);
-                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);
-            }
-
-            @Override
-            public void onDrawerClosed(View drawerView) {
-                super.onDrawerClosed(drawerView);
-                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
-            }
-        };
-        drawerLayout.addDrawerListener(drawerToggle);
-
+        if (binding.drawerLayout != null) {
+            setupDrawerLayout(binding.drawerLayout);
+        }
         if (binding.navView != null) {
             setupDrawerContent(binding.navView);
         }
         // Fragments
-        LinksFragment linksFragment = LinksFragment.newInstance();
-        FavoritesFragment favoritesFragment = FavoritesFragment.newInstance();
-        NotesFragment notesFragment = NotesFragment.newInstance();
-        // Tabs
-        ViewPager viewPager = binding.laanoViewPager;
-
-        if (viewPager != null) {
-            LaanoFragmentPagerAdapter adapter =
-                    new LaanoFragmentPagerAdapter(getSupportFragmentManager());
-
-            Resources res = getResources();
-
-            adapter.addTab(linksFragment, res.getString(R.string.laano_tab_links_title));
-            adapter.addTab(favoritesFragment, res.getString(R.string.laano_tab_favorites_title));
-            adapter.addTab(notesFragment, res.getString(R.string.laano_tab_notes_title));
-
+        LaanoFragmentPagerAdapter adapter = new LaanoFragmentPagerAdapter(
+                getSupportFragmentManager(), getApplicationContext());
+        if (binding.laanoViewPager != null) {
+            ViewPager viewPager = binding.laanoViewPager;
             viewPager.setAdapter(adapter);
-
+            // NOTE: Fragments are needed immediately to build Presenters
+            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.LINKS_TAB);
+            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.FAVORITES_TAB);
+            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.NOTES_TAB);
+            adapter.finishUpdate(viewPager);
             if (binding.tabLayout != null) {
-                setupTabsContent(binding.tabLayout);
+                setupTabsContent(binding.tabLayout, viewPager);
             }
         }
         // Presenters
         DaggerLaanoComponent.builder()
                 .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .linksPresenterModule(new LinksPresenterModule(linksFragment))
-                .favoritesPresenterModule(new FavoritesPresenterModule(favoritesFragment))
-                .notesPresenterModule(new NotesPresenterModule(notesFragment))
+                .linksPresenterModule(new LinksPresenterModule(adapter.getLinksFragment()))
+                .favoritesPresenterModule(new FavoritesPresenterModule(this, adapter.getFavoritesFragment()))
+                .notesPresenterModule(new NotesPresenterModule(adapter.getNotesFragment()))
                 .build().inject(this);
         // FAB
         if (binding.fabAdd != null) {
@@ -158,7 +130,6 @@ public class LaanoActivity extends AppCompatActivity implements
                 drawerLayout.openDrawer(GravityCompat.START);
                 return true;
         }
-
         return super.onOptionsItemSelected(item);
     }
 
@@ -216,13 +187,38 @@ public class LaanoActivity extends AppCompatActivity implements
 
     // Setup
 
+    private void setupDrawerLayout(@NonNull final DrawerLayout drawerLayout) {
+        checkNotNull(drawerLayout);
+
+        // NOTE: untestable behavior (swipeRight() doesn't open Drawer)
+        drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
+        ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle(
+                this, drawerLayout, R.string.drawer_open, R.string.drawer_close) {
+
+            @Override
+            public void onDrawerOpened(View drawerView) {
+                super.onDrawerOpened(drawerView);
+                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);
+            }
+
+            @Override
+            public void onDrawerClosed(View drawerView) {
+                super.onDrawerClosed(drawerView);
+                drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
+            }
+        };
+        drawerLayout.addDrawerListener(drawerToggle);
+    }
+
     private void startManageAccountsActivity() {
         Intent manageAccountsIntent =
                 new Intent(getApplicationContext(), ManageAccountsActivity.class);
         startActivityForResult(manageAccountsIntent, ACTION_MANAGE_ACCOUNTS);
     }
 
-    private void setupDrawerContent(NavigationView navigationView) {
+    private void setupDrawerContent(@NonNull NavigationView navigationView) {
+        checkNotNull(navigationView);
+
         DrawerLayout drawerLayout = binding.drawerLayout;
         navigationView.setNavigationItemSelectedListener(
                 (menuItem) -> {
@@ -252,8 +248,10 @@ public class LaanoActivity extends AppCompatActivity implements
         );
     }
 
-    private void setupTabsContent(TabLayout tabLayout) {
-        ViewPager viewPager = binding.laanoViewPager;
+    private void setupTabsContent(@NonNull TabLayout tabLayout, @NonNull ViewPager viewPager) {
+        checkNotNull(tabLayout);
+        checkNotNull(viewPager);
+
         tabLayout.setupWithViewPager(viewPager);
         tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
 
@@ -273,7 +271,9 @@ public class LaanoActivity extends AppCompatActivity implements
     }
 
     // TODO: refactor to get rid of instanceof checking
-    private void setupFabAdd(FloatingActionButton fab) {
+    private void setupFabAdd(@NonNull FloatingActionButton fab) {
+        checkNotNull(fab);
+
         fab.setOnClickListener(v -> {
                     BaseFragment fragment = getCurrentFragment();
                     if (fragment instanceof LinksFragment) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
index 600748f..4d5c3c0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
@@ -1,10 +1,10 @@
 package com.bytesforge.linkasanote.laano;
 
 import com.bytesforge.linkasanote.ApplicationComponent;
+import com.bytesforge.linkasanote.FragmentScoped;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesPresenterModule;
 import com.bytesforge.linkasanote.laano.links.LinksPresenterModule;
 import com.bytesforge.linkasanote.laano.notes.NotesPresenterModule;
-import com.bytesforge.linkasanote.utils.FragmentScoped;
 
 import dagger.Component;
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
index 304b031..c0e5d5d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
@@ -1,56 +1,121 @@
 package com.bytesforge.linkasanote.laano;
 
+import android.content.Context;
+import android.content.res.Resources;
+import android.support.annotation.NonNull;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
+import android.util.SparseArray;
 import android.view.ViewGroup;
 
 import com.bytesforge.linkasanote.BaseFragment;
+import com.bytesforge.linkasanote.R;
+import com.bytesforge.linkasanote.laano.favorites.FavoritesFragment;
+import com.bytesforge.linkasanote.laano.links.LinksFragment;
+import com.bytesforge.linkasanote.laano.notes.NotesFragment;
 
-import java.util.ArrayList;
-import java.util.List;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 public class LaanoFragmentPagerAdapter extends FragmentPagerAdapter {
 
-    private List<BaseFragment> tabFragments;
-    private int tabCount;
+    public static final int NUM_TABS = 3;
 
-    public LaanoFragmentPagerAdapter(FragmentManager fm) {
-        super(fm);
+    public static final int LINKS_TAB = 0;
+    public static final int FAVORITES_TAB = 1;
+    public static final int NOTES_TAB = 2;
+
+    private final Context context;
+    private SparseArray<BaseFragment> tabFragments = new SparseArray<>();
 
-        tabFragments = new ArrayList<>();
-        tabCount = tabFragments.size();
+    public LaanoFragmentPagerAdapter(FragmentManager fm, @NonNull Context context) {
+        super(fm);
+        this.context = checkNotNull(context);
     }
 
     @Override
     public Fragment getItem(int position) {
-        return tabFragments.get(position);
+        switch (position) {
+            case LINKS_TAB:
+                LinksFragment linksFragment = LinksFragment.newInstance();
+                linksFragment.attachTitle(getPageTitle(position).toString());
+                return linksFragment;
+            case FAVORITES_TAB:
+                FavoritesFragment favoritesFragment = FavoritesFragment.newInstance();
+                favoritesFragment.attachTitle(getPageTitle(position).toString());
+                return favoritesFragment;
+            case NOTES_TAB:
+                NotesFragment notesFragment = NotesFragment.newInstance();
+                notesFragment.attachTitle(getPageTitle(position).toString());
+                return notesFragment;
+            default:
+                throw new IllegalArgumentException(
+                        "Unexpected position in the LaanoFragmentPagerAdapter [" + position + "]");
+        }
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, int position) {
+        BaseFragment fragment = (BaseFragment) super.instantiateItem(container, position);
+        tabFragments.put(position, fragment);
+        return fragment;
     }
 
     @Override
     public void destroyItem(ViewGroup container, int position, Object object) {
+        tabFragments.remove(position);
         super.destroyItem(container, position, object);
-        tabFragments.set(position, null);
     }
 
     @Override
     public int getCount() {
-        return tabCount;
+        return NUM_TABS;
     }
 
     @Override
     public CharSequence getPageTitle(int position) {
-        return tabFragments.get(position).getTitle();
+        Resources resources = context.getResources();
+        switch (position) {
+            case LINKS_TAB:
+                return resources.getString(R.string.laano_tab_links_title);
+            case FAVORITES_TAB:
+                return resources.getString(R.string.laano_tab_favorites_title);
+            case NOTES_TAB:
+                return resources.getString(R.string.laano_tab_notes_title);
+            default:
+                throw new IllegalArgumentException(
+                        "Unexpected position in the LaanoFragmentPagerAdapter [" + position + "]");
+        }
     }
 
-    public void addTab(BaseFragment tabFragment, String title) {
-        BaseFragment.attachTitle(title, tabFragment);
+    public BaseFragment getFragment(int position) {
+        return tabFragments.get(position);
+    }
 
-        tabFragments.add(tabFragment);
-        tabCount = tabFragments.size();
+    public LinksFragment getLinksFragment() {
+        BaseFragment fragment = getFragment(LINKS_TAB);
+        if (fragment != null && fragment instanceof LinksFragment) {
+            return (LinksFragment) fragment;
+        }
+        throw new IllegalStateException(
+                "LinksFragment was not found in the right position [" + LINKS_TAB + "]");
     }
 
-    public BaseFragment getFragment(int position) {
-        return tabFragments.get(position);
+    public FavoritesFragment getFavoritesFragment() {
+        BaseFragment fragment = getFragment(FAVORITES_TAB);
+        if (fragment != null && fragment instanceof FavoritesFragment) {
+            return (FavoritesFragment) fragment;
+        }
+        throw new IllegalStateException(
+                "FavoriteFragment was not found in the right position [" + FAVORITES_TAB + "]");
+    }
+
+    public NotesFragment getNotesFragment() {
+        BaseFragment fragment = getFragment(NOTES_TAB);
+        if (fragment != null && fragment instanceof NotesFragment) {
+            return (NotesFragment) fragment;
+        }
+        throw new IllegalStateException(
+                "NotesFragment was not found in the right position [" + NOTES_TAB + "]");
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
index 4fa5cfa..19ba19a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
@@ -1,8 +1,9 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
-import android.content.Context;
+import android.support.annotation.NonNull;
 import android.support.v7.util.DiffUtil;
 import android.support.v7.widget.RecyclerView;
+import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.ViewGroup;
 
@@ -11,18 +12,24 @@ import com.bytesforge.linkasanote.databinding.ItemFavoritesBinding;
 
 import java.util.List;
 
+import static com.google.common.base.Preconditions.checkNotNull;
+
 public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.ViewHolder> {
 
-    private List<Favorite> favorites;
-    private Context context;
+    private final FavoritesContract.Presenter presenter;
+    private final FavoritesViewModel viewModel;
 
-    public FavoritesAdapter(Context context, List<Favorite> favorites) {
-        this.context = context;
-        this.favorites = favorites;
-    }
-
-    public Context getContext() {
-        return context;
+    private List<Favorite> favorites;
+    private SparseBooleanArray selectedIds;
+
+    public FavoritesAdapter(
+            @NonNull List<Favorite> favorites,
+            @NonNull FavoritesContract.Presenter presenter,
+            @NonNull FavoritesViewModel viewModel) {
+        this.favorites = checkNotNull(favorites);
+        this.presenter = checkNotNull(presenter);
+        this.viewModel = checkNotNull(viewModel);
+        selectedIds = new SparseBooleanArray();
     }
 
     public static class ViewHolder extends RecyclerView.ViewHolder {
@@ -34,8 +41,14 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
             this.binding = binding;
         }
 
-        public void bind(Favorite favorite) {
+        public void bind(
+                Favorite favorite, FavoritesContract.Presenter presenter,
+                FavoritesViewModel viewModel, Integer position) {
             binding.setFavorite(favorite);
+            binding.setPresenter(presenter);
+            binding.setViewModel(viewModel);
+            binding.setPosition(position);
+
             binding.executePendingBindings();
         }
     }
@@ -51,7 +64,7 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
     @Override
     public void onBindViewHolder(ViewHolder holder, int position) {
         Favorite favorite = favorites.get(position);
-        holder.bind(favorite);
+        holder.bind(favorite, presenter, viewModel, position);
     }
 
     @Override
@@ -59,6 +72,33 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
         return favorites.size();
     }
 
+    // Selection
+
+    public void toggleSelection(int position) {
+        boolean isSelected = selectedIds.get(position);
+        if (isSelected) {
+            selectedIds.delete(position);
+        } else {
+            selectedIds.put(position, true);
+        }
+        notifyItemChanged(position);
+    }
+
+    public void removeSelection() {
+        selectedIds.clear();
+        notifyDataSetChanged();
+    }
+
+    public int getSelectedCount() {
+        return selectedIds.size();
+    }
+
+    public SparseBooleanArray getSelectedIds() {
+        return selectedIds;
+    }
+
+    // Swap
+
     public void swapItems(List<Favorite> favorites) {
         final FavoriteDiffCallback diffCallback =
                 new FavoriteDiffCallback(this.favorites, favorites);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
index 9f141ab..b73d3a8 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
@@ -1,6 +1,8 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
+import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
@@ -14,18 +16,29 @@ public interface FavoritesContract {
 
         void setViewModel(@NonNull FavoritesContract.ViewModel viewModel);
         boolean isActive();
+
         void showAddFavorite();
         void showFavorites(List<Favorite> favorites);
+        void onFavoriteSelected(int position);
     }
 
     interface ViewModel extends BaseView<Presenter> {
 
+        void setInstanceState(@Nullable Bundle savedInstanceState);
+        void loadInstanceState(@NonNull Bundle outState);
+        void applyInstanceState(@NonNull Bundle state);
+
         void setFavoriteListSize(int favoriteListSize);
+        boolean isActionMode();
+        void setActionMode(boolean actionMode);
     }
 
     interface Presenter extends BasePresenter {
 
         void addFavorite();
         void loadFavorites(boolean forceUpdate);
+
+        void onFavoriteClick(int position);
+        boolean onFavoriteLongClick(int position);
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
index c9efbd5..d4734fd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
@@ -4,6 +4,7 @@ import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v7.view.ActionMode;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
@@ -25,6 +26,7 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     private FavoritesContract.Presenter presenter;
     private FavoritesContract.ViewModel viewModel;
     private FavoritesAdapter adapter;
+    private ActionMode actionMode;
 
     public static FavoritesFragment newInstance() {
         return new FavoritesFragment();
@@ -64,18 +66,21 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
             @Nullable Bundle savedInstanceState) {
         FragmentLaanoFavoritesBinding binding =
                 FragmentLaanoFavoritesBinding.inflate(inflater, container, false);
+        viewModel.setInstanceState(savedInstanceState);
         binding.setViewModel((FavoritesViewModel) viewModel);
         // RecyclerView
-        RecyclerView rvFavorites = binding.rvFavorites;
-        if (rvFavorites != null) {
-            List<Favorite> favorites = new ArrayList<>(0);
-            adapter = new FavoritesAdapter(getContext(), favorites);
-            rvFavorites.setAdapter(adapter);
-            rvFavorites.setLayoutManager(new LinearLayoutManager(getContext()));
+        if (binding.rvFavorites != null) {
+            setupFavoritesRecyclerView(binding.rvFavorites);
         }
         return binding.getRoot();
     }
 
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        viewModel.loadInstanceState(outState);
+    }
+
     @Override
     public void showAddFavorite() {
         Intent intent = new Intent(getContext(), AddEditFavoriteActivity.class);
@@ -92,4 +97,16 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
     }
+
+    private void setupFavoritesRecyclerView(RecyclerView rvFavorites) {
+        List<Favorite> favorites = new ArrayList<>(0);
+        adapter = new FavoritesAdapter(favorites, presenter, (FavoritesViewModel) viewModel);
+        rvFavorites.setAdapter(adapter);
+        rvFavorites.setLayoutManager(new LinearLayoutManager(getContext()));
+    }
+
+    @Override
+    public void onFavoriteSelected(int position) {
+
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
index 09bc726..7e6c5ed 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
@@ -1,6 +1,5 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
-import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.data.Favorite;
@@ -18,8 +17,11 @@ import rx.subscriptions.CompositeSubscription;
 
 public final class FavoritesPresenter implements FavoritesContract.Presenter {
 
+    private static final String TAG = FavoritesPresenter.class.getSimpleName();
+
     private final Repository repository;
     private final FavoritesContract.View view;
+    private final FavoritesContract.ViewModel viewModel;
     private final BaseSchedulerProvider schedulerProvider;
 
     @NonNull
@@ -30,21 +32,21 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
     @Inject
     FavoritesPresenter(
             Repository repository, FavoritesContract.View view,
+            FavoritesContract.ViewModel viewModel,
             BaseSchedulerProvider schedulerProvider) {
         this.repository = repository;
         this.view = view;
+        this.viewModel = viewModel;
         this.schedulerProvider = schedulerProvider;
 
         subscription = new CompositeSubscription();
     }
 
     @Inject
-    void setupView(Context context) {
-        FavoritesContract.ViewModel viewModel = new FavoritesViewModel(context);
-        viewModel.setPresenter(this);
-
+    void setupView() {
         view.setPresenter(this);
         view.setViewModel(viewModel);
+        viewModel.setPresenter(this);
     }
 
     @Override
@@ -102,4 +104,20 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
                 });
         this.subscription.add(subscription);
     }
+
+    @Override
+    public void onFavoriteClick(int position) {
+        if (viewModel.isActionMode()) {
+            view.onFavoriteSelected(position);
+        }
+    }
+
+    @Override
+    public boolean onFavoriteLongClick(int position) {
+        if (!viewModel.isActionMode()) {
+            viewModel.setActionMode(true);
+        }
+        view.onFavoriteSelected(position);
+        return true;
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
index 07523ce..b0d951a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
@@ -1,19 +1,28 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
+import android.content.Context;
+
 import dagger.Module;
 import dagger.Provides;
 
 @Module
 public class FavoritesPresenterModule {
 
+    private final Context context;
     private final FavoritesContract.View view;
 
-    public FavoritesPresenterModule(FavoritesContract.View view) {
+    public FavoritesPresenterModule(Context context, FavoritesContract.View view) {
+        this.context = context;
         this.view = view;
     }
 
     @Provides
-    FavoritesContract.View provideLinksContractView() {
+    FavoritesContract.View provideFavoritesContractView() {
         return view;
     }
+
+    @Provides
+    FavoritesContract.ViewModel provideFavoritesContractViewModel() {
+        return new FavoritesViewModel(context);
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
index c775a5c..67d3f7a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
@@ -3,7 +3,10 @@ package com.bytesforge.linkasanote.laano.favorites;
 import android.content.Context;
 import android.databinding.BaseObservable;
 import android.databinding.Bindable;
+import android.databinding.ObservableBoolean;
+import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.android.databinding.library.baseAdapters.BR;
 
@@ -11,12 +14,55 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 public class FavoritesViewModel extends BaseObservable implements FavoritesContract.ViewModel {
 
+    public static final String STATE_ACTION_MODE = "ACTION_MODE";
+
+    public final ObservableBoolean toLinksButton = new ObservableBoolean(true);
+    public final ObservableBoolean selectedCheckbox = new ObservableBoolean(true);
+    public final ObservableBoolean toNotesButton = new ObservableBoolean(true);
+    public final ObservableBoolean editButton = new ObservableBoolean(true);
+
     private FavoritesContract.Presenter presenter;
     private Context context;
+
     private int favoriteListSize = 0;
+    private boolean actionMode;
+
+    public FavoritesViewModel(@NonNull Context context) {
+        this.context = checkNotNull(context);
+    }
+
+    @Override
+    public void setInstanceState(@Nullable Bundle savedInstanceState) {
+        if (savedInstanceState == null) {
+            applyInstanceState(getDefaultInstanceState());
+        } else {
+            applyInstanceState(savedInstanceState);
+        }
+    }
+
+    @Override
+    public void loadInstanceState(@NonNull Bundle outState) {
+        checkNotNull(outState);
 
-    public FavoritesViewModel(Context context) {
-        this.context = context;
+        outState.putBoolean(STATE_ACTION_MODE, actionMode);
+    }
+
+    @Override
+    public void applyInstanceState(@NonNull Bundle state) {
+        checkNotNull(state);
+
+        actionMode = state.getBoolean(STATE_ACTION_MODE);
+        setActionMode(actionMode);
+
+        notifyChange();
+    }
+
+    private Bundle getDefaultInstanceState() {
+        Bundle defaultState = new Bundle();
+
+        defaultState.putBoolean(STATE_ACTION_MODE, false);
+
+        return defaultState;
     }
 
     @Override
@@ -34,4 +80,23 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
         this.favoriteListSize = favoriteListSize;
         notifyPropertyChanged(BR.favoritesEmpty);
     }
+
+    public boolean isActionMode() {
+        return actionMode;
+    }
+
+    public void setActionMode(boolean actionMode) {
+        this.actionMode = actionMode;
+        if (this.actionMode) {
+            toLinksButton.set(false);
+            selectedCheckbox.set(true);
+            toNotesButton.set(false);
+            editButton.set(true);
+        } else {
+            toLinksButton.set(true);
+            selectedCheckbox.set(false);
+            toNotesButton.set(true);
+            editButton.set(false);
+        }
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
index 19b5f13..d73293b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
@@ -57,7 +57,7 @@ public class ManageAccountsActivity extends AppCompatActivity {
         // Presenter
         DaggerManageAccountsComponent.builder()
                 .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .manageAccountsPresenterModule(new ManageAccountsPresenterModule(fragment))
+                .manageAccountsPresenterModule(new ManageAccountsPresenterModule(this, fragment))
                 .build().inject(this);
         // Accounts
         if (savedInstanceState != null) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
index ddf2cff..00b0341 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
@@ -1,7 +1,7 @@
 package com.bytesforge.linkasanote.manageaccounts;
 
 import com.bytesforge.linkasanote.ApplicationComponent;
-import com.bytesforge.linkasanote.utils.FragmentScoped;
+import com.bytesforge.linkasanote.FragmentScoped;
 
 import dagger.Component;
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
index 579af4e..244af3b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
@@ -1,6 +1,8 @@
 package com.bytesforge.linkasanote.manageaccounts;
 
 import android.accounts.Account;
+import android.accounts.AccountManager;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.BasePresenter;
@@ -14,6 +16,7 @@ public interface ManageAccountsContract {
 
     interface View extends BaseView<Presenter> {
 
+        void setAccountManager(@NonNull AccountManager accountManager);
         boolean isActive();
         void finishActivity();
         void cancelActivity();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
index 14eb6ba..3f171bc 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
@@ -79,6 +79,11 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
         this.presenter = checkNotNull(presenter);
     }
 
+    @Override
+    public void setAccountManager(@NonNull AccountManager accountManager) {
+        this.accountManager = checkNotNull(accountManager);
+    }
+
     @Override
     public void finishActivity() {
         getActivity().onBackPressed();
@@ -101,7 +106,6 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
             LayoutInflater inflater, @Nullable ViewGroup container,
             @Nullable Bundle savedInstanceState) {
         binding = FragmentManageAccountsBinding.inflate(inflater, container, false);
-        accountManager = AccountManager.get(getContext());
         // RecyclerView
         RecyclerView rvAccounts = binding.rvAccounts;
         if (rvAccounts != null) {
@@ -261,11 +265,6 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
         adapter.swapItems(accountItems);
     }
 
-    @VisibleForTesting
-    public void setAccountManager(@NonNull AccountManager accountManager) {
-        this.accountManager = checkNotNull(accountManager);
-    }
-
     @VisibleForTesting
     ManageAccountsContract.Presenter getPresenter() {
         return presenter;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
index 46da123..0a2cee8 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
@@ -1,6 +1,7 @@
 package com.bytesforge.linkasanote.manageaccounts;
 
 import android.accounts.Account;
+import android.accounts.AccountManager;
 import android.app.Activity;
 import android.support.annotation.NonNull;
 
@@ -20,6 +21,7 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
     private static final String TAG = ManageAccountsPresenter.class.getSimpleName();
 
     private final ManageAccountsContract.View view;
+    private final AccountManager accountManager;
     private final BaseSchedulerProvider schedulerProvider;
 
     @NonNull
@@ -27,17 +29,18 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
 
     @Inject
     public ManageAccountsPresenter(
-            ManageAccountsContract.View view,
+            ManageAccountsContract.View view, AccountManager accountManager,
             BaseSchedulerProvider schedulerProvider) {
         this.view = view;
+        this.accountManager = accountManager;
         this.schedulerProvider = schedulerProvider;
-
         subscription = new CompositeSubscription();
     }
 
     @Inject
     void setupView() {
         view.setPresenter(this);
+        view.setAccountManager(accountManager);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java b/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
index a3ce8d1..386066d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
@@ -24,6 +24,7 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
     private String remotePath;
     private String eTag;
     private boolean conflicted;
+    private boolean deleted;
     private boolean synced;
 
     public static final Creator<JsonFile> CREATOR = new Creator<JsonFile>() {
@@ -51,6 +52,7 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         this.remotePath = remotePath;
         eTag = null;
         conflicted = false;
+        deleted = false;
         synced = false;
     }
 
@@ -61,6 +63,7 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         remotePath = in.readString();
         eTag = in.readString();
         conflicted = in.readInt() == 1;
+        deleted = in.readInt() == 1;
         synced = in.readInt() == 1;
     }
 
@@ -77,6 +80,7 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         dest.writeString(remotePath);
         dest.writeString(eTag);
         dest.writeInt(conflicted ? 1 : 0);
+        dest.writeInt(deleted ? 1 : 0);
         dest.writeInt(synced ? 1 : 0);
     }
 
@@ -100,26 +104,28 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         return Objects.hashCode(remotePath, length);
     }
 
-    public void setUri(Uri uri) {
-        this.uri = uri;
-    }
+    // Getters & Setters
 
     public Uri getUri() {
         return uri;
     }
 
-    public String getRemotePath() {
-        return remotePath;
+    public void setUri(Uri uri) {
+        this.uri = uri;
     }
 
-    public void setLocalPath(String localPath) {
-        this.localPath = localPath;
+    public String getRemotePath() {
+        return remotePath;
     }
 
     public String getLocalPath() {
         return localPath;
     }
 
+    public void setLocalPath(String localPath) {
+        this.localPath = localPath;
+    }
+
     public void setLength(long length) {
         this.length = length;
     }
@@ -128,41 +134,58 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         return MIME_TYPE;
     }
 
+    public String getETag() {
+        return eTag;
+    }
+
     public void setETag(String eTag) {
         this.eTag = eTag;
     }
 
-    public String getETag() {
-        return eTag;
+    // States
+
+    public void setState(boolean conflicted, boolean deleted, boolean synced) {
+        this.conflicted = conflicted;
+        this.deleted = deleted;
+        this.synced = synced;
     }
 
-    public String getKey(@NonNull Account account) {
-        checkNotNull(account);
-        return account.name + getRemotePath();
+    public void setUnsyncedState() {
+        setState(false, false, false); // cds
     }
 
-    public void setConflicted(boolean conflicted) {
-        this.conflicted = conflicted;
+    public void setSyncedState() {
+        setState(false, false, true); // cdS
     }
 
-    public boolean isConflicted() {
-        return conflicted;
+    public void setLocalDeletedState() {
+        setState(false, true, false); // cDs, cDS successfully deleted (delete record)
     }
 
-    public void setSynced(boolean synced) {
-        this.synced = synced;
+    public void setConflictedUpdate() {
+        // NOTE: Local record was updated and Cloud one was modified or deleted
+        // TODO: Conflicted record must preload Cloud copy and check if conflict still exists
+        // TODO: Cloud copy: empty & cDs - deleted, cds - updated
+        setState(true, false, false); // Cds, CdS successfully resolved (syncedState)
+    }
+
+    public void setConflictedDelete() {
+        // NOTE: Local record was deleted and Cloud one was modified
+        setState(true, true, false); // CDs, CDS successfully resolved (syncedState)
     }
 
-    public boolean isSynced() {
-        return synced;
+    public String getKey(@NonNull Account account) {
+        checkNotNull(account);
+        return account.name + getRemotePath();
     }
 
     @NonNull
     public ContentValues getUpdateValues() {
         ContentValues values = new ContentValues();
         values.put(LocalContract.COMMON_NAME_ETAG, getETag());
-        values.put(LocalContract.COMMON_NAME_CONFLICTED, isConflicted());
-        values.put(LocalContract.COMMON_NAME_SYNCED, isSynced());
+        values.put(LocalContract.COMMON_NAME_CONFLICTED, conflicted);
+        values.put(LocalContract.COMMON_NAME_DELETED, deleted);
+        values.put(LocalContract.COMMON_NAME_SYNCED, synced);
 
         return values;
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java b/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
index 2139d0d..94fe1e1 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
@@ -72,8 +72,7 @@ public class UploadFileOperation extends RemoteOperation {
         result = uploadOperation.execute(client);
         if (result.isSuccess()) {
             file.setETag(uploadOperation.getETag());
-            file.setConflicted(false);
-            file.setSynced(true);
+            file.setSyncedState();
             int rowsUpdated = contentResolver.update(
                     file.getUri(), file.getUpdateValues(), null, null);
             if (rowsUpdated != 1) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
index f01be9b..850dd24 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
@@ -1,9 +1,9 @@
 package com.bytesforge.linkasanote.utils;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -11,15 +11,37 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 public class ActivityUtils {
 
+    public static void addFragmentToActivity(
+            @NonNull FragmentManager fragmentManager,
+            @NonNull Fragment fragment,
+            int frameId, @Nullable String tag) {
+        checkNotNull(fragmentManager);
+        checkNotNull(fragment);
+        fragmentManager
+                .beginTransaction()
+                .add(frameId, fragment)
+                .commit();
+    }
+
     public static void addFragmentToActivity(
             @NonNull FragmentManager fragmentManager,
             @NonNull Fragment fragment,
             int frameId) {
         checkNotNull(fragmentManager);
         checkNotNull(fragment);
-        FragmentTransaction transaction = fragmentManager.beginTransaction();
-        transaction.add(frameId, fragment);
-        transaction.commit();
+        addFragmentToActivity(fragmentManager, fragment, frameId, null);
+    }
+
+    public static void replaceFragmentInActivity(
+            @NonNull FragmentManager fragmentManager,
+            @NonNull Fragment fragment,
+            int frameId, @Nullable String tag) {
+        checkNotNull(fragmentManager);
+        checkNotNull(fragment);
+        fragmentManager
+                .beginTransaction()
+                .replace(frameId, fragment, tag)
+                .commit();
     }
 
     public static void replaceFragmentInActivity(
@@ -28,9 +50,7 @@ public class ActivityUtils {
             int frameId) {
         checkNotNull(fragmentManager);
         checkNotNull(fragment);
-        FragmentTransaction transaction = fragmentManager.beginTransaction();
-        transaction.replace(frameId, fragment);
-        transaction.commit();
+        replaceFragmentInActivity(fragmentManager, fragment, frameId, null);
     }
 
     public static void disableViewGroupControls(ViewGroup viewGroup) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
index 064d9c3..4136137 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
@@ -5,6 +5,9 @@ import android.support.annotation.NonNull;
 import java.net.IDN;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Arrays;
+
+import static com.google.common.base.Preconditions.checkNotNull;
 
 public class CommonUtils {
 
@@ -24,4 +27,22 @@ public class CommonUtils {
                 ((port == -1 || port == 80) ? "" : ":" + port) +
                 url.getPath();
     }
+
+    public static <T> T[] arrayAdd(@NonNull final T[] array, final T element) {
+        checkNotNull(array);
+
+        final T[] newArray = (T[]) Arrays.copyOf(array, array.length + 1);
+        newArray[newArray.length - 1] = element;
+
+        return newArray;
+    }
+
+    public static String charRepeat(final char ch, final int repeat) {
+        if (repeat <= 0) return "";
+
+        final char[] buffer = new char[repeat];
+        Arrays.fill(buffer, ch);
+
+        return new String(buffer);
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java b/app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
similarity index 50%
rename from app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
rename to app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
index 1848600..aa7fd6a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
+++ b/app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
@@ -1,14 +1,19 @@
 package com.bytesforge.linkasanote.manageaccounts;
 
+import android.accounts.AccountManager;
+import android.content.Context;
+
 import dagger.Module;
 import dagger.Provides;
 
 @Module
 public class ManageAccountsPresenterModule {
 
+    private final Context context;
     private final ManageAccountsContract.View view;
 
-    public ManageAccountsPresenterModule(ManageAccountsContract.View view) {
+    public ManageAccountsPresenterModule(Context context, ManageAccountsContract.View view) {
+        this.context = context;
         this.view = view;
     }
 
@@ -16,4 +21,9 @@ public class ManageAccountsPresenterModule {
     ManageAccountsContract.View provideManageAccountsContractView() {
         return view;
     }
+
+    @Provides
+    AccountManager provideAccountManager() {
+        return AccountManager.get(context);
+    }
 }
diff --git a/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java b/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
new file mode 100644
index 0000000..54b31b0
--- /dev/null
+++ b/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
@@ -0,0 +1,29 @@
+package com.bytesforge.linkasanote.manageaccounts;
+
+import android.accounts.AccountManager;
+import android.content.Context;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public class ManageAccountsPresenterModule {
+
+    private final ManageAccountsContract.View view;
+    private final Context context;
+
+    public ManageAccountsPresenterModule(Context context, ManageAccountsContract.View view) {
+        this.context = context;
+        this.view = view;
+    }
+
+    @Provides
+    ManageAccountsContract.View provideManageAccountsContractView() {
+        return view;
+    }
+
+    @Provides
+    AccountManager provideAccountManager() {
+        return AccountManager.get(context);
+    }
+}
diff --git a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
index d975739..36e1717 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
@@ -2,8 +2,8 @@ package com.bytesforge.linkasanote.data.source;
 
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.utils.CommonUtils;
 
-import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
@@ -40,7 +40,7 @@ public class RepositoryFavoriteTest {
     private DataSource cloudDataSource;
 
     public RepositoryFavoriteTest() {
-        String keyPrefix = StringUtils.repeat('A', 21);
+        String keyPrefix = CommonUtils.charRepeat('A', 21);
 
         TAGS = new ArrayList<>();
         TAGS.add(new Tag("first"));
diff --git a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
index d51eebe..f4aee15 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
@@ -1,8 +1,8 @@
 package com.bytesforge.linkasanote.data.source;
 
 import com.bytesforge.linkasanote.data.Link;
+import com.bytesforge.linkasanote.utils.CommonUtils;
 
-import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
@@ -49,7 +49,7 @@ public class RepositoryLinkTest {
         LINK_TITLES.add("Title for Link #2");
         LINK_TITLES.add("Title for Link #3");
 
-        String keyPrefix = StringUtils.repeat('A', 21);
+        String keyPrefix = CommonUtils.charRepeat('A', 21);
         LINKS = new ArrayList<>();
         LINKS.add(new Link(keyPrefix + 'A', LINK_VALUES.get(0), LINK_TITLES.get(0)));
         LINKS.add(new Link(keyPrefix + 'B', LINK_VALUES.get(1), LINK_TITLES.get(1)));
diff --git a/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java b/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
index 625911a..d8a4654 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
@@ -2,7 +2,6 @@ package com.bytesforge.linkasanote.utils;
 
 import android.util.Base64;
 
-import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,7 +32,7 @@ public class UuidUtilsTest {
         byte[] bytesUUID = new byte[16];
         Arrays.fill(bytesUUID, (byte) 0x00);
 
-        String keyBase64 = StringUtils.repeat('A', 22);
+        String keyBase64 = CommonUtils.charRepeat('A', 22);
         byte[] bytesBase64 = new byte[22];
         Arrays.fill(bytesBase64, (byte) 0x41);
 
