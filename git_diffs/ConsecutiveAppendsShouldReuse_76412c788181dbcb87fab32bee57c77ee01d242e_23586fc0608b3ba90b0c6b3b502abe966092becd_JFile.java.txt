diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidCacheSize.java b/app/src/main/java/ch/bailu/aat/preferences/SolidCacheSize.java
index 273b4ef5..fbf1a9b5 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidCacheSize.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidCacheSize.java
@@ -3,7 +3,7 @@ package ch.bailu.aat.preferences;
 import android.content.Context;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.util.fs.JFile;
+import ch.bailu.aat.util.MemSize;
 
 public class SolidCacheSize extends SolidIndexList {
     final static String KEY = "cache_size";
@@ -43,7 +43,7 @@ public class SolidCacheSize extends SolidIndexList {
     protected String getValueAsString(int i) {
         StringBuilder b = new StringBuilder();
 
-        JFile.reportFileSize(b, sizes[i]);
+        MemSize.describe(b, sizes[i]);
 
         if (i == 0) {
             b.append(" "  +getContext().getString(R.string.auto));
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java
index 57f73abb..8994aa83 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java
@@ -3,7 +3,7 @@ package ch.bailu.aat.preferences;
 import android.content.Context;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.util.fs.JFile;
+import ch.bailu.aat.util.MemSize;
 
 public class SolidTrimSize extends SolidIndexList {
 
@@ -13,7 +13,7 @@ public class SolidTrimSize extends SolidIndexList {
 
         private Entry(long s) {
             size = s;
-            text = JFile.reportFileSize(new StringBuilder(), size).toString();
+            text = MemSize.describe(new StringBuilder(), size).toString();
         }
     }
 
@@ -21,15 +21,15 @@ public class SolidTrimSize extends SolidIndexList {
 
 
     private static final Entry[] entries = {
-            new Entry(16 * JFile.GB),
-            new Entry(8 * JFile.GB),
-            new Entry(4 * JFile.GB),
-            new Entry(2 * JFile.GB),
-            new Entry(1 * JFile.GB),
-            new Entry(500 * JFile.MB),
-            new Entry(200 * JFile.MB),
-            new Entry(100 * JFile.MB),
-            new Entry(50 * JFile.MB),
+            new Entry(16 * MemSize.GB),
+            new Entry(8 * MemSize.GB),
+            new Entry(4 * MemSize.GB),
+            new Entry(2 * MemSize.GB),
+            new Entry(1 * MemSize.GB),
+            new Entry(500 * MemSize.MB),
+            new Entry(200 * MemSize.MB),
+            new Entry(100 * MemSize.MB),
+            new Entry(50 * MemSize.MB),
     };
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java b/app/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
index 0396157a..d50ad072 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
@@ -7,19 +7,15 @@ import java.util.HashMap;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjectHandle.Factory;
 import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.fs.JFile;
+import ch.bailu.aat.util.MemSize;
 import ch.bailu.aat.util.ui.AppLog;
 
 
 public class ObjectTable  {
-    private final static int INITIAL_CAPACITY=1000;
+    private final static int INITIAL_CAPACITY = 1000;
 
-    private final static int MB = 1024*1024;
-    public final static long MIN_SIZE=MB;
-
-
-    private long limit=MIN_SIZE;
-    private long totalMemorySize=0;
+    private long limit = MemSize.MB;
+    private long totalMemorySize = 0;
 
 
     private static class Container {
@@ -126,7 +122,7 @@ public class ObjectTable  {
 
 
     public synchronized void limit(CacheService self, long l) {
-        AppLog.d(this, "Limit: " + JFile.reportFileSize(new StringBuilder(), l).toString());
+        AppLog.d(this, "Limit: " + MemSize.describe(new StringBuilder(), l).toString());
         limit = l;
         trim(self);
     }
@@ -192,29 +188,22 @@ public class ObjectTable  {
         builder.append("<p>Runtime:");
 
         builder.append("<br>Maximum memory: ");
-        builder.append(Runtime.getRuntime().maxMemory()/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, Runtime.getRuntime().maxMemory());
         builder.append("<br>Total memory: ");
-        builder.append(Runtime.getRuntime().totalMemory()/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, Runtime.getRuntime().totalMemory());
         builder.append("<br>Free memory: ");
-        builder.append(Runtime.getRuntime().freeMemory()/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, Runtime.getRuntime().freeMemory());
         builder.append("<br>Used memory: ");
-        builder.append((Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory())/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory());
         builder.append("</p>");
 
         builder.append("<p> FileCache:");
         builder.append("<br>Used: ");
-        builder.append(totalMemorySize/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, totalMemorySize);
         builder.append("<br>Limit: ");
-        builder.append(limit/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, limit);
         builder.append("<br>Free: ");
-        builder.append((limit-totalMemorySize)/MB);
-        builder.append(" MB");
+        MemSize.describe(builder, limit-totalMemorySize);
         builder.append("</p>");
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummary.java b/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummary.java
index 1684560d..05524ee4 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummary.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummary.java
@@ -1,6 +1,6 @@
 package ch.bailu.aat.services.tileremover;
 
-import ch.bailu.aat.util.fs.JFile;
+import ch.bailu.aat.util.MemSize;
 
 public class SourceSummary implements SourceSummaryInterface {
     private final String name;
@@ -71,11 +71,11 @@ public class SourceSummary implements SourceSummaryInterface {
 
         builder.append('\n');
 
-        JFile.reportFileSize(builder, (double)size);
+        MemSize.describe(builder, (double)size);
         builder.append('-');
-        JFile.reportFileSize(builder, (double)sizeToRemove);
+        MemSize.describe(builder, (double)sizeToRemove);
         builder.append('=');
-        JFile.reportFileSize(builder, (double)sizeNew);
+        MemSize.describe(builder, (double)sizeNew);
 
         return builder;
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
index 9d3fbd2c..f44c903c 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
@@ -85,7 +85,7 @@ public class StateRemoveAll implements State, Runnable{
 
         if (keepUp()) {
             info.directory.rmdirs();
-            //JFile.deleteEmptiyDirectoriesRecursive(info.directory);
+            //MemSize.deleteEmptiyDirectoriesRecursive(info.directory);
             broadcast();
         }
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/JFile.java b/app/src/main/java/ch/bailu/aat/util/MemSize.java
similarity index 82%
rename from app/src/main/java/ch/bailu/aat/util/fs/JFile.java
rename to app/src/main/java/ch/bailu/aat/util/MemSize.java
index 60df3465..65c8ed86 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/JFile.java
+++ b/app/src/main/java/ch/bailu/aat/util/MemSize.java
@@ -1,8 +1,8 @@
-package ch.bailu.aat.util.fs;
+package ch.bailu.aat.util;
 
 import java.text.DecimalFormat;
 
-public class JFile {
+public class MemSize {
     public final static long KB=1024;
     public final static long MB=1024*KB;
     public final static long GB=1024*MB;
@@ -22,7 +22,7 @@ public class JFile {
     };
 
 
-    public static StringBuilder reportFileSize(StringBuilder out, double size) {
+    public static StringBuilder describe(StringBuilder out, double size) {
         int i = ddivider.length;
 
         while (i>0) {
@@ -39,7 +39,7 @@ public class JFile {
 
 
 
-    public static StringBuilder reportFileSize(StringBuilder out, long size) {
+    public static StringBuilder describe(StringBuilder out, long size) {
         int i = ldivider.length;
 
         while (i>0) {
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
index 45c67701..01132bb6 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
@@ -3,10 +3,11 @@ package ch.bailu.aat.util.fs;
 import android.content.Context;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.util.MemSize;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.util_java.foc.Foc;
 
-public class AFile extends JFile {
+public class AFile extends MemSize {
     public static void logErrorExists(Context c, Foc f) {
         AppLog.e(c, f.getPathName() + c.getString(R.string.file_exists));
     }
