diff --git a/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java b/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
index 8bfbe00..18f3ec7 100644
--- a/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
+++ b/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
@@ -24,6 +24,7 @@ import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.Log;
@@ -176,7 +177,12 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
 
         switch (item.getItemId()) {
             case R.string.recording_options_play:
-                RecordingOptionsHelper.playRecording(LibraryActivity.this, r);
+                Context context = getApplicationContext();
+                Intent playIntent = new Intent(Intent.ACTION_VIEW);
+                File privateRootDir = context.getFilesDir();
+                File recordingFile = new File(privateRootDir, r.getName());
+                playIntent.setDataAndType(Uri.fromFile(recordingFile), Constants.MIME_AUDIO_WAV);
+                context.startActivity(playIntent);
                 break;
             case R.string.recording_options_delete:
                 DialogInterface.OnClickListener deleteListener = new DialogInterface.OnClickListener() {
diff --git a/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java b/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java
deleted file mode 100644
index ffaf8a2..0000000
--- a/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/* RecordingPlayer.java
-   Simple wave file player
-
-   Copyright (c) 2010 Ethan Chen
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License along
-   with this program; if not, write to the Free Software Foundation, Inc.,
-   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-package com.intervigil.micdroid;
-
-import android.app.Activity;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.WindowManager;
-import android.widget.Button;
-import android.widget.SeekBar;
-import android.widget.TextView;
-
-import com.intervigil.micdroid.model.Recording;
-
-import java.io.File;
-
-public class RecordingPlayer extends Activity implements OnClickListener {
-
-    private static final String CLASS_RECORDING_PLAYER = "RecordingPlayer";
-    private static final int SEEKBAR_RESOLUTION = 1000;
-
-    private Recording recording;
-    private SeekableMediaPlayer mediaPlayer;
-    private SeekBar mediaSeekBar;
-
-    /**
-     * Called when the activity is starting. This is where most initialization
-     * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     *
-     * @param savedInstanceState Activity's saved state, if any.
-     */
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.recording_player);
-        getWindow().setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,
-                WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
-
-        recording = getIntent().getExtras().getParcelable(
-                Constants.INTENT_EXTRA_RECORDING);
-
-        ((Button) findViewById(R.id.recording_player_btn_play)).setOnClickListener(this);
-        ((Button) findViewById(R.id.recording_player_btn_stop)).setOnClickListener(this);
-        ((Button) findViewById(R.id.recording_player_btn_close)).setOnClickListener(this);
-
-        mediaSeekBar = (SeekBar) findViewById(R.id.recording_player_seekbar);
-        ((TextView) findViewById(R.id.recording_player_file_name))
-                .setText(recording.getName());
-
-        mediaSeekBar.setMax(SEEKBAR_RESOLUTION);
-        File privateRootDir = getApplicationContext().getFilesDir();
-        File recordingFile = new File(privateRootDir, recording.getName());
-        mediaPlayer = new SeekableMediaPlayer(recordingFile.getAbsolutePath(),
-                mediaSeekBar);
-    }
-
-    @Override
-    protected void onStart() {
-        Log.i(CLASS_RECORDING_PLAYER, "onStart()");
-        super.onStart();
-    }
-
-    @Override
-    protected void onResume() {
-        Log.i(CLASS_RECORDING_PLAYER, "onResume()");
-        super.onResume();
-    }
-
-    @Override
-    protected void onPause() {
-        Log.i(CLASS_RECORDING_PLAYER, "onPause()");
-        super.onPause();
-
-        if (isFinishing()) {
-            if (mediaPlayer != null) {
-                mediaPlayer.close();
-            }
-            mediaPlayer = null;
-        }
-    }
-
-    @Override
-    protected void onStop() {
-        Log.i(CLASS_RECORDING_PLAYER, "onStop()");
-        super.onStop();
-    }
-
-    @Override
-    protected void onDestroy() {
-        Log.i(CLASS_RECORDING_PLAYER, "onDestroy()");
-        super.onDestroy();
-
-        if (mediaPlayer != null) {
-            mediaPlayer.close();
-        }
-        mediaPlayer = null;
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        Log.i(CLASS_RECORDING_PLAYER, "onSaveInstanceState()");
-        super.onSaveInstanceState(outState);
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        Log.i(CLASS_RECORDING_PLAYER, "onConfigurationChanged");
-        super.onConfigurationChanged(newConfig);
-
-        setContentView(R.layout.recording_player);
-
-        mediaSeekBar = (SeekBar) findViewById(R.id.recording_player_seekbar);
-        ((TextView) findViewById(R.id.recording_player_file_name))
-                .setText(recording.getName());
-
-        mediaSeekBar.setMax(SEEKBAR_RESOLUTION);
-        mediaPlayer.bindSeekBar(mediaSeekBar);
-    }
-
-    @Override
-    public void onClick(View v) {
-        switch (v.getId()) {
-            case R.id.recording_player_btn_play:
-                mediaPlayer.play();
-                break;
-            case R.id.recording_player_btn_stop:
-                mediaPlayer.stop();
-                break;
-            case R.id.recording_player_btn_close:
-                finish();
-                break;
-            default:
-                break;
-        }
-    }
-}
diff --git a/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java b/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java
deleted file mode 100644
index 02c0659..0000000
--- a/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/* SeekableMediaPlayer.java
-
-   Copyright (c) 2010 Ethan Chen
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License along
-   with this program; if not, write to the Free Software Foundation, Inc.,
-   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-package com.intervigil.micdroid;
-
-import android.media.MediaPlayer;
-import android.media.MediaPlayer.OnCompletionListener;
-import android.os.Handler;
-import android.os.Message;
-import android.widget.SeekBar;
-import android.widget.SeekBar.OnSeekBarChangeListener;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-public class SeekableMediaPlayer {
-
-    private static final int REFRESH = 1;
-    private static final int DEFAULT_INCREMENT = 500;
-
-    private MediaPlayer mediaPlayer;
-    private SeekBar seekBar;
-    private RefreshHandler refreshHandler;
-
-    private boolean isPaused;
-
-    public SeekableMediaPlayer(String filePath, SeekBar seekBar) {
-        this.seekBar = seekBar;
-        this.seekBar.setOnSeekBarChangeListener(mediaSeekListener);
-
-        refreshHandler = new RefreshHandler();
-
-        mediaPlayer = new MediaPlayer();
-        mediaPlayer.setOnCompletionListener(playbackCompletionListener);
-
-        try {
-            // mediaPlayer seems to like file descriptors a lot more than giving
-            // it a file path
-            FileInputStream file = new FileInputStream(filePath);
-            mediaPlayer.setDataSource(file.getFD());
-            mediaPlayer.prepare();
-            file.close();
-        } catch (IllegalArgumentException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IllegalStateException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        } catch (IOException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-
-        isPaused = false;
-    }
-
-    public void bindSeekBar(SeekBar seekBar) {
-        this.seekBar = seekBar;
-        this.seekBar.setOnSeekBarChangeListener(mediaSeekListener);
-    }
-
-    public void play() {
-        if (!mediaPlayer.isPlaying() || isPaused) {
-            mediaPlayer.start();
-
-            isPaused = false;
-
-            long refreshDelay = onRefresh();
-            queueNextRefresh(refreshDelay);
-        }
-    }
-
-    public void pause() {
-        if (mediaPlayer.isPlaying()) {
-            mediaPlayer.pause();
-
-            isPaused = true;
-        }
-    }
-
-    public void stop() {
-        if (mediaPlayer.isPlaying() || isPaused) {
-            try {
-                mediaPlayer.stop();
-                mediaPlayer.prepare();
-                mediaPlayer.seekTo(0);
-            } catch (IllegalStateException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            } catch (IOException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-
-            isPaused = false;
-        }
-    }
-
-    public void close() {
-        if (mediaPlayer != null) {
-            if (mediaPlayer.isPlaying()) {
-                mediaPlayer.stop();
-            }
-            mediaPlayer.release();
-        }
-        mediaPlayer = null;
-
-        refreshHandler.removeMessages(REFRESH);
-
-        isPaused = true;
-    }
-
-    private OnSeekBarChangeListener mediaSeekListener = new OnSeekBarChangeListener() {
-
-        public void onStopTrackingTouch(SeekBar seekBar) {
-            if (isPaused) {
-                play();
-            }
-        }
-
-        public void onStartTrackingTouch(SeekBar seekBar) {
-            if (mediaPlayer.isPlaying()) {
-                pause();
-            }
-        }
-
-        public void onProgressChanged(SeekBar seekBar, int progress,
-                                      boolean fromUser) {
-            if (fromUser) {
-                int progressMs = (progress * mediaPlayer.getDuration())
-                        / seekBar.getMax();
-                mediaPlayer.seekTo(progressMs);
-            }
-        }
-    };
-
-    private OnCompletionListener playbackCompletionListener = new OnCompletionListener() {
-        public void onCompletion(MediaPlayer mp) {
-            try {
-                mp.stop();
-                mp.prepare();
-            } catch (IllegalStateException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            } catch (IOException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-        }
-    };
-
-    private class RefreshHandler extends Handler {
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case REFRESH:
-                    long delay = onRefresh();
-                    queueNextRefresh(delay);
-                    break;
-                default:
-                    break;
-            }
-        }
-    }
-
-    private void queueNextRefresh(long delay) {
-        if (mediaPlayer.isPlaying()) {
-            Message msg = refreshHandler.obtainMessage(REFRESH);
-            refreshHandler.removeMessages(REFRESH);
-            refreshHandler.sendMessageDelayed(msg, delay);
-        }
-    }
-
-    private long onRefresh() {
-        if (mediaPlayer != null && mediaPlayer.getDuration() > 0) {
-            int progress = (mediaPlayer.getCurrentPosition() * seekBar.getMax())
-                    / mediaPlayer.getDuration();
-            seekBar.setProgress((int) progress);
-        }
-        return DEFAULT_INCREMENT;
-    }
-}
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
index b6a6045..48f7d0e 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
@@ -19,37 +19,18 @@
 
 package com.intervigil.micdroid.helper;
 
-import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.media.RingtoneManager;
 import android.net.Uri;
-import android.os.Bundle;
 
 import com.intervigil.micdroid.Constants;
-import com.intervigil.micdroid.RecordingPlayer;
 import com.intervigil.micdroid.model.Recording;
 
 import java.io.File;
 
 public class RecordingOptionsHelper {
 
-    public static void playRecording(Context context, Recording recording) {
-        try {
-            Intent playIntent = new Intent(Intent.ACTION_VIEW);
-            File privateRootDir = context.getFilesDir();
-            File recordingFile = new File(privateRootDir, recording.getName());
-            playIntent.setDataAndType(Uri.fromFile(recordingFile), Constants.MIME_AUDIO_WAV);
-            context.startActivity(playIntent);
-        } catch (ActivityNotFoundException e) {
-            Intent playIntent = new Intent(context, RecordingPlayer.class);
-            Bundle playData = new Bundle();
-            playData.putParcelable(Constants.INTENT_EXTRA_RECORDING, recording);
-            playIntent.putExtras(playData);
-            context.startActivity(playIntent);
-        }
-    }
-
     public static boolean setRingTone(Context context, Recording recording) {
         Uri recordingUri = MediaStoreHelper.getRecordingUri(context, recording);
         if (recordingUri != null) {
