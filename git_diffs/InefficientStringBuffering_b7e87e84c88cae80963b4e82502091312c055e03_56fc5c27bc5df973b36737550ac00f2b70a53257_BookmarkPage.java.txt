diff --git a/app/src/main/java/acr/browser/lightning/browser/activity/BrowserActivity.java b/app/src/main/java/acr/browser/lightning/browser/activity/BrowserActivity.java
index 6b785188..b8ee36c2 100644
--- a/app/src/main/java/acr/browser/lightning/browser/activity/BrowserActivity.java
+++ b/app/src/main/java/acr/browser/lightning/browser/activity/BrowserActivity.java
@@ -74,7 +74,6 @@ import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 import android.widget.TextView.OnEditorActionListener;
-import android.widget.Toast;
 import android.widget.VideoView;
 
 import com.anthonycr.bonsai.Completable;
diff --git a/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java b/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
index 0f1707fa..e2f7e4e3 100644
--- a/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
+++ b/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
@@ -6,7 +6,6 @@ package acr.browser.lightning.constant;
 import android.app.Activity;
 import android.app.Application;
 import android.graphics.Bitmap;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -25,12 +24,12 @@ import java.util.List;
 
 import javax.inject.Inject;
 
-import acr.browser.lightning.R;
 import acr.browser.lightning.BrowserApp;
+import acr.browser.lightning.R;
 import acr.browser.lightning.database.HistoryItem;
 import acr.browser.lightning.database.bookmark.BookmarkModel;
 import acr.browser.lightning.favicon.FaviconModel;
-import acr.browser.lightning.favicon.FaviconUtils;
+import acr.browser.lightning.html.BookmarkPageBuilder;
 import acr.browser.lightning.utils.Preconditions;
 import acr.browser.lightning.utils.ThemeUtils;
 import acr.browser.lightning.utils.Utils;
@@ -42,41 +41,6 @@ public final class BookmarkPage {
      */
     public static final String FILENAME = "bookmarks.html";
 
-    private static final String HEADING_1 = "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml>\n" +
-        "<head>\n" +
-        "<meta content=en-us http-equiv=Content-Language />\n" +
-        "<meta content='text/html; charset=utf-8' http-equiv=Content-Type />\n" +
-        "<meta name=viewport content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'>\n" +
-        "<title>";
-
-    private static final String HEADING_2 = "</title>\n" +
-        "</head>\n" +
-        "<style>body{background: #E5E5E5; padding-top: 5px;max-width:100%;min-height:100%}" +
-        "#content{width:100%;max-width:800px;margin:0 auto;text-align:center}" +
-        ".box{vertical-align:middle;text-align:center;position:relative;display:inline-block;height:45px;width:150px;margin:6px;padding:4px;background-color:#fff;border: 1px solid #d2d2d2;border-top-width: 0;border-bottom-width: 2px;font-family:Arial;color:#444;font-size:12px;-moz-border-radius:2px;-webkit-border-radius:2px;border-radius:2px}" +
-        ".box-content{height:25px;width:100%;vertical-align:middle;text-align:center;display:table-cell}" +
-        "p.ellipses{width:130px;font-size: small;font-family: Arial, Helvetica, 'sans-serif';white-space:nowrap;overflow:hidden;text-align:left;vertical-align:middle;margin:auto;text-overflow:ellipsis;-o-text-overflow:ellipsis;-ms-text-overflow:ellipsis}" +
-        ".box a{width:100%;height:100%;position:absolute;left:0;top:0}" +
-        "img{vertical-align:middle;margin-right:10px;width:20px;height:20px;}" +
-        ".margin{margin:10px}</style>\n" +
-        "<body><div id=content>";
-
-    private static final String PART1 = "<div class=box><a href='";
-
-    private static final String PART2 = "'></a>\n" +
-        "<div class=margin>\n" +
-        "<div class=box-content>\n" +
-        "<p class=ellipses>\n" +
-        "<img src='";
-
-    private static final String PART3 = "https://www.google.com/s2/favicons?domain=";
-
-    private static final String PART4 = "' />";
-
-    private static final String PART5 = "</p></div></div></div>";
-
-    private static final String END = "</div></body></html>";
-
     private static final String FOLDER_ICON = "folder.png";
     private static final String DEFAULT_ICON = "default.png";
 
@@ -101,12 +65,10 @@ public final class BookmarkPage {
     @Inject FaviconModel mFaviconModel;
 
     @NonNull private final Bitmap mFolderIcon;
-    @NonNull private final String mTitle;
 
     public BookmarkPage(@NonNull Activity activity) {
         BrowserApp.getAppComponent().inject(this);
         mFolderIcon = ThemeUtils.getThemedBitmap(activity, R.drawable.ic_folder, false);
-        mTitle = mApp.getString(R.string.action_bookmarks);
     }
 
     @NonNull
@@ -168,56 +130,24 @@ public final class BookmarkPage {
     private void buildPageHtml(@NonNull List<HistoryItem> bookmarksAndFolders, @Nullable String folder) {
         final File bookmarkWebPage = getBookmarkPage(mApp, folder);
 
-        final StringBuilder bookmarkBuilder = new StringBuilder(HEADING_1 + mTitle + HEADING_2);
-
-        final String folderIconPath = getFaviconFile(mApp).toString();
-
-        for (int n = 0, size = bookmarksAndFolders.size(); n < size; n++) {
-            final HistoryItem item = bookmarksAndFolders.get(n);
-            bookmarkBuilder.append(PART1);
-            if (item.isFolder()) {
-                final File folderPage = getBookmarkPage(mApp, item.getTitle());
-                bookmarkBuilder.append(Constants.FILE).append(folderPage);
-                bookmarkBuilder.append(PART2);
-                bookmarkBuilder.append(folderIconPath);
-                buildBookmarkPage(item.getTitle());
-            } else {
-
-                Uri bookmarkUri = FaviconUtils.safeUri(item.getUrl());
-
-                String faviconFileUrl;
-
-                if (bookmarkUri != null) {
-                    File faviconFile = FaviconModel.getFaviconCacheFile(mApp, bookmarkUri);
-                    if (!faviconFile.exists()) {
-                        Bitmap defaultFavicon = mFaviconModel.getDefaultBitmapForString(item.getTitle());
-                        mFaviconModel.cacheFaviconForUrl(defaultFavicon, item.getUrl()).subscribe();
-                    }
-
-                    faviconFileUrl = Constants.FILE + faviconFile;
-                } else {
-                    faviconFileUrl = Constants.FILE + getDefaultIconFile(mApp);
-                }
-
+        BookmarkPageBuilder builder = new BookmarkPageBuilder(mFaviconModel, mApp);
 
-                bookmarkBuilder.append(item.getUrl());
-                bookmarkBuilder.append(PART2).append(faviconFileUrl);
-            }
-            bookmarkBuilder.append(PART4);
-            bookmarkBuilder.append(item.getTitle());
-            bookmarkBuilder.append(PART5);
-        }
-        bookmarkBuilder.append(END);
         FileWriter bookWriter = null;
         try {
             //noinspection IOResourceOpenedButNotSafelyClosed
             bookWriter = new FileWriter(bookmarkWebPage, false);
-            bookWriter.write(bookmarkBuilder.toString());
+            bookWriter.write(builder.buildPage(bookmarksAndFolders));
         } catch (IOException e) {
             e.printStackTrace();
         } finally {
             Utils.close(bookWriter);
         }
+
+        for (HistoryItem item : bookmarksAndFolders) {
+            if (item.isFolder()) {
+                buildBookmarkPage(item.getTitle());
+            }
+        }
     }
 
 }
diff --git a/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt
new file mode 100644
index 00000000..eae95736
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt
@@ -0,0 +1,85 @@
+package acr.browser.lightning.html
+
+import acr.browser.lightning.R
+import acr.browser.lightning.constant.Constants
+import acr.browser.lightning.database.HistoryItem
+import acr.browser.lightning.favicon.FaviconModel
+import acr.browser.lightning.favicon.FaviconUtils
+import android.app.Application
+import com.anthonycr.mezzanine.MezzanineGenerator
+import org.jsoup.Jsoup
+import java.io.File
+
+/**
+ * A builder for the bookmark page.
+ */
+class BookmarkPageBuilder(private val faviconModel: FaviconModel,
+                          private val app: Application) {
+
+    private val FOLDER_ICON = "folder.png"
+    private val DEFAULT_ICON = "default.png"
+    private val FILENAME = "bookmarks.html"
+
+    private fun getBookmarkPage(application: Application, folder: String?): File {
+        val prefix = if (folder != null) "$folder-" else ""
+        return File(application.filesDir, prefix + FILENAME)
+    }
+
+    private fun getFaviconFile(application: Application): File =
+            File(application.cacheDir, FOLDER_ICON)
+
+    private fun getDefaultIconFile(application: Application): File =
+            File(application.cacheDir, DEFAULT_ICON)
+
+    fun buildPage(bookmarkList: List<HistoryItem>): String {
+        val bookmarkPageReader = MezzanineGenerator.BookmarkPageReader()
+
+        val pageContents = bookmarkPageReader.provideString()
+
+        val document = Jsoup.parse(pageContents)
+        document.title(app.getString(R.string.action_bookmarks))
+
+        val body = document.body()
+        val repeatableElement = body.getElementById("repeated")
+        val container = body.getElementById("content")
+        repeatableElement.remove()
+
+        val folderIconPath = getFaviconFile(app).toString()
+
+        bookmarkList.forEach {
+            val newElement = repeatableElement.clone()
+            val iconUrl: String
+            val url: String
+
+            if (it.isFolder) {
+                val folderPage = getBookmarkPage(app, it.title)
+                iconUrl = folderIconPath
+                url = "${Constants.FILE}$folderPage"
+            } else {
+                val bookmarkUri = FaviconUtils.safeUri(it.url)
+
+                iconUrl = if (bookmarkUri != null) {
+                    val faviconFile = FaviconModel.getFaviconCacheFile(app, bookmarkUri)
+                    if (!faviconFile.exists()) {
+                        val defaultFavicon = faviconModel.getDefaultBitmapForString(it.title)
+                        faviconModel.cacheFaviconForUrl(defaultFavicon, it.url).subscribe()
+                    }
+
+                    "${Constants.FILE}$faviconFile"
+                } else {
+                    "${Constants.FILE}${getDefaultIconFile(app)}"
+                }
+
+                url = it.url
+            }
+
+            newElement.select("a").first().attr("href", url)
+            newElement.select("img").first().attr("src", iconUrl)
+            newElement.getElementById("title").appendText(it.title)
+            container.appendChild(newElement)
+        }
+
+        return document.outerHtml()
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt b/app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt
new file mode 100644
index 00000000..595475f5
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt
@@ -0,0 +1,13 @@
+package acr.browser.lightning.html
+
+import com.anthonycr.mezzanine.FileStream
+
+/**
+ * The store for the bookmarks HTML.
+ */
+@FileStream("app/src/main/html/bookmarks.html")
+interface BookmarkPageReader {
+
+    fun provideString(): String
+
+}
\ No newline at end of file
