diff --git a/android/src/main/java/com/eightsines/esmediadtor/Mediadtor.java b/android/src/main/java/com/eightsines/esmediadtor/Mediadtor.java
new file mode 100644
index 0000000..1beab26
--- /dev/null
+++ b/android/src/main/java/com/eightsines/esmediadtor/Mediadtor.java
@@ -0,0 +1,291 @@
+package com.eightsines.esmediadtor;
+
+import android.app.Activity;
+import android.os.Handler;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.eightsines.espromo.PromoView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Mediadtor {
+    // private static final long ROTATE_INTERVAL_APPODEAL = 30L * 1000L;
+    private static final long ROTATE_INTERVAL_ESPROMO = 15L * 1000L;
+    private static final long RECHECK_INTERVAL = 5000L;
+
+    // private final String applicationKey;
+    // private final boolean isConsentGiven;
+    // private final boolean isTestingAds;
+    private final String debugLogTag;
+    private final Handler handler;
+    @SuppressWarnings({ "FieldCanBeLocal", "unused", "RedundantSuppression" }) private MediadtorListener listener;
+    private Activity bannerActivity;
+    private ViewGroup bannerContainerView;
+    private List<View> bannerViews;
+    private int bannerIndex;
+
+    // private RewardedVideoCallbacks rewardedVideoCallbacks = new RewardedVideoCallbacks() {
+    //     @Override
+    //     public void onRewardedVideoLoaded(boolean isPrecache) {
+    //         // ignore
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoFailedToLoad() {
+    //         // ignore
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoShown() {
+    //         // ignore
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoFinished(double amount, String name) {
+    //         // ignore
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoClosed(boolean finished) {
+    //         listener.onRewardedVideoClosed(true);
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoExpired() {
+    //         // ignore
+    //     }
+    //
+    //     @Override
+    //     public void onRewardedVideoClicked() {
+    //         // ignore
+    //     }
+    // };
+
+    private final Runnable rotateBannerRunnable = new Runnable() {
+        @Override
+        public void run() {
+            debugLog("rotateBannerRunnable.run");
+            handler.removeCallbacks(rotateBannerRunnable);
+
+            if (bannerActivity == null || bannerContainerView == null || bannerViews == null) {
+                return;
+            }
+
+            for (View view : bannerViews) {
+                bannerContainerView.removeView(view);
+            }
+
+            int bannersCount = bannerViews.size();
+
+            if (bannersCount == 0) {
+                return;
+            }
+
+            if (bannerIndex < 0 || bannerIndex > bannersCount) {
+                bannerIndex = 0;
+            }
+
+            View bannerView = bannerViews.get(bannerIndex);
+
+            boolean isBannerLoaded = false;
+            long delayInterval = RECHECK_INTERVAL;
+
+            for (int i = 0; i < bannersCount; i++) {
+                // if ((bannerView instanceof BannerView) && Appodeal.isLoaded(Appodeal.BANNER)) {
+                //     isBannerLoaded = true;
+                //     delayInterval = ROTATE_INTERVAL_APPODEAL;
+                //     break;
+                // }
+
+                if ((bannerView instanceof PromoView) && ((PromoView)bannerView).isActivePromoLoaded()) {
+                    isBannerLoaded = true;
+                    delayInterval = ROTATE_INTERVAL_ESPROMO;
+                    break;
+                }
+
+                bannerIndex = (bannerIndex + 1) % bannersCount;
+                bannerView = bannerViews.get(bannerIndex);
+            }
+
+            debugLog("adding banner view of " + bannerView.getClass().getSimpleName());
+            bannerContainerView.addView(bannerView);
+
+            // if (bannerView instanceof BannerView) {
+            //     Appodeal.show(bannerActivity, Appodeal.BANNER_VIEW);
+            // }
+
+            if (isBannerLoaded) {
+                bannerIndex = (bannerIndex + 1) % bannersCount;
+            }
+
+            handler.postDelayed(rotateBannerRunnable, delayInterval);
+        }
+    };
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public Mediadtor(
+            @Nullable String applicationKey,
+            boolean isConsentGiven,
+            boolean isTestingAds,
+            String debugLogTag) {
+
+        // this.applicationKey = applicationKey;
+        // this.isConsentGiven = isConsentGiven;
+        // this.isTestingAds = isTestingAds;
+        this.debugLogTag = debugLogTag;
+
+        handler = new Handler();
+    }
+
+    private void debugLog(String message) {
+        if (debugLogTag != null) {
+            Log.w(debugLogTag, "[Mediadtor] " + message);
+        }
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void onActivityCreate(@NonNull Activity activity, @NonNull MediadtorListener listener) {
+        // if (applicationKey == null) {
+        //     return;
+        // }
+        //
+        // this.listener = listener;
+        //
+        // Appodeal.disableLocationPermissionCheck();
+        // Appodeal.disableWriteExternalStoragePermissionCheck();
+        //
+        // Appodeal.setTesting(isTestingAds);
+        // Appodeal.setLogLevel(debugLogTag != null ? Log.LogLevel.debug : Log.LogLevel.none);
+        //
+        // Appodeal.initialize(
+        //         activity,
+        //         applicationKey,
+        //         Appodeal.INTERSTITIAL | Appodeal.REWARDED_VIDEO | Appodeal.BANNER,
+        //         isConsentGiven);
+        //
+        // Appodeal.set728x90Banners(true);
+        // Appodeal.setRewardedVideoCallbacks(rewardedVideoCallbacks);
+        //
+        // if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
+        //         && activity.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
+        //         != PackageManager.PERMISSION_GRANTED) {
+        //
+        //     Appodeal.requestAndroidMPermissions(activity, null);
+        // }
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void onActivityResume(@NonNull Activity activity) {
+        if (bannerContainerView == null || bannerViews == null) {
+            return;
+        }
+
+        // if (applicationKey != null) {
+        //     Appodeal.onResume(activity, Appodeal.BANNER);
+        //     handler.postDelayed(rotateBannerRunnable, ROTATE_INTERVAL_APPODEAL);
+        // } else {
+        //     handler.postDelayed(rotateBannerRunnable, ROTATE_INTERVAL_ESPROMO);
+        // }
+
+        handler.postDelayed(rotateBannerRunnable, ROTATE_INTERVAL_ESPROMO);
+    }
+
+    public void onActivityPause() {
+        handler.removeCallbacks(rotateBannerRunnable);
+    }
+
+    public boolean isInterstitialLoaded() {
+        // return (applicationKey == null ? false : Appodeal.isLoaded(Appodeal.INTERSTITIAL));
+        return false;
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void showInterstitial(@NonNull Activity activity) {
+        // if (applicationKey != null) {
+        //     Appodeal.show(activity, Appodeal.INTERSTITIAL);
+        // }
+    }
+
+    public boolean isRewardedVideoEnabled() {
+        // return (applicationKey != null);
+        return false;
+    }
+
+    public boolean isRewardedVideoLoaded() {
+        // return (applicationKey == null ? false : Appodeal.isLoaded(Appodeal.REWARDED_VIDEO));
+        return false;
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void showRewardedVideo(@NonNull Activity activity) {
+        // if (applicationKey == null) {
+        //     Appodeal.show(activity, Appodeal.REWARDED_VIDEO);
+        // }
+    }
+
+    public void showBanner(@NonNull Activity activity, @NonNull ViewGroup containerView) {
+        hideBanner(activity);
+
+        bannerActivity = activity;
+        bannerContainerView = containerView;
+        bannerViews = new ArrayList<>();
+
+        // if (applicationKey != null) {
+        //     bannerViews.add(Appodeal.getBannerView(activity));
+        // }
+
+        bannerViews.add(new PromoView(activity, null, debugLogTag));
+
+        if (containerView instanceof FrameLayout) {
+            for (View view : bannerViews) {
+                // boolean isAppodealBanner = (view instanceof BannerView);
+                //
+                // FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(
+                //         ViewGroup.LayoutParams.MATCH_PARENT,
+                //         isAppodealBanner ? ViewGroup.LayoutParams.WRAP_CONTENT : ViewGroup.LayoutParams.MATCH_PARENT);
+                //
+                // if (isAppodealBanner) {
+                //     lp.gravity = Gravity.CENTER_VERTICAL;
+                // }
+                //
+                // view.setLayoutParams(lp);
+
+                view.setLayoutParams(new FrameLayout.LayoutParams(
+                        ViewGroup.LayoutParams.MATCH_PARENT,
+                        ViewGroup.LayoutParams.MATCH_PARENT));
+            }
+        }
+
+        rotateBannerRunnable.run();
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void hideBanner(@NonNull Activity activity) {
+        handler.removeCallbacks(rotateBannerRunnable);
+
+        // if (applicationKey != null) {
+        //     Appodeal.hide(activity, Appodeal.BANNER);
+        //
+        //     if (bannerActivity != null && activity != bannerActivity) {
+        //         Appodeal.hide(bannerActivity, Appodeal.BANNER);
+        //     }
+        // }
+
+        if (bannerContainerView != null && bannerViews != null) {
+            for (View view : bannerViews) {
+                bannerContainerView.removeView(view);
+            }
+        }
+
+        bannerActivity = null;
+        bannerContainerView = null;
+        bannerViews = null;
+    }
+}
diff --git a/src/main/java/com/eightsines/esmediadtor/MediadtorListener.java b/android/src/main/java/com/eightsines/esmediadtor/MediadtorListener.java
similarity index 69%
rename from src/main/java/com/eightsines/esmediadtor/MediadtorListener.java
rename to android/src/main/java/com/eightsines/esmediadtor/MediadtorListener.java
index 0305d65..785f689 100644
--- a/src/main/java/com/eightsines/esmediadtor/MediadtorListener.java
+++ b/android/src/main/java/com/eightsines/esmediadtor/MediadtorListener.java
@@ -1,5 +1,6 @@
 package com.eightsines.esmediadtor;
 
 public interface MediadtorListener {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     void onRewardedVideoClosed(boolean shouldGiveReward);
 }
diff --git a/src/main/java/com/eightsines/espromo/PromoView.java b/android/src/main/java/com/eightsines/espromo/PromoView.java
similarity index 56%
rename from src/main/java/com/eightsines/espromo/PromoView.java
rename to android/src/main/java/com/eightsines/espromo/PromoView.java
index f53cc7a..497f97e 100644
--- a/src/main/java/com/eightsines/espromo/PromoView.java
+++ b/android/src/main/java/com/eightsines/espromo/PromoView.java
@@ -9,10 +9,9 @@ import android.net.Uri;
 import android.os.Build;
 import android.os.Handler;
 import android.os.Message;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.webkit.HttpAuthHandler;
@@ -24,8 +23,13 @@ import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import java.io.InputStream;
 import java.util.Locale;
+
 import zame.game.BuildConfig;
 
 public class PromoView extends FrameLayout {
@@ -35,7 +39,7 @@ public class PromoView extends FrameLayout {
         void onActivePromoDismissed();
     }
 
-    private static final String PROMO_URL = "http://mobile.zame-dev.org/promo/index.php?package=";
+    private static final String PROMO_URL = "https://mobile.zame-dev.org/promo/index.php?package=";
 
     private static final long RELOAD_INTERVAL = 10L * 1000L;
     private static final long ROTATE_INTERVAL = 15L * 1000L;
@@ -52,36 +56,41 @@ public class PromoView extends FrameLayout {
     private int state;
     private boolean activePromoLoaded;
     private Listener listener;
+    private String debugLogTag;
 
-    private Runnable loadPromoRunnable = new Runnable() {
+    private final Runnable loadPromoRunnable = new Runnable() {
         @Override
         public void run() {
+            debugLog("loadPromoRunnable.run");
             loadPromo();
         }
     };
 
-    private Runnable reloadPromoRunnable = new Runnable() {
+    private final Runnable reloadPromoRunnable = new Runnable() {
         @Override
         public void run() {
+            debugLog("reloadPromoRunnable.run");
             reloadPromo();
         }
     };
 
-    private Runnable rotatePromoRunnable = new Runnable() {
+    private final Runnable rotatePromoRunnable = new Runnable() {
         @Override
         public void run() {
+            debugLog("rotatePromoRunnable.run");
             rotatePromo();
         }
     };
 
-    private Runnable promoLoadedRunnable = new Runnable() {
+    private final Runnable promoLoadedRunnable = new Runnable() {
         @Override
         public void run() {
+            debugLog("promoLoadedRunnable.run");
             promoLoaded();
         }
     };
 
-    private Runnable promoDismissedRunnable = new Runnable() {
+    private final Runnable promoDismissedRunnable = new Runnable() {
         @Override
         public void run() {
             promoDismissed();
@@ -103,22 +112,60 @@ public class PromoView extends FrameLayout {
         initialize(context);
     }
 
-    @SuppressWarnings("unused")
+    public PromoView(@NonNull Context context, @Nullable Listener listener, @Nullable String debugLogTag) {
+        super(context);
+        this.listener = listener;
+
+        synchronized (this) {
+            this.debugLogTag = debugLogTag;
+        }
+
+        initialize(context);
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public boolean isActivePromoLoaded() {
         return activePromoLoaded;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     @Nullable
     public Listener getListener() {
         return listener;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void setListener(@Nullable Listener listener) {
         this.listener = listener;
     }
 
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    @Nullable
+    public String getDebugLogTag() {
+        synchronized (this) {
+            return debugLogTag;
+        }
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void setDebugLogTag(@Nullable String debugLogTag) {
+        synchronized (this) {
+            this.debugLogTag = debugLogTag;
+        }
+    }
+
+    private void debugLog(String message) {
+        String debugLogTagLocal;
+
+        synchronized (this) {
+            debugLogTagLocal = debugLogTag;
+        }
+
+        if (debugLogTagLocal != null) {
+            Log.w(debugLogTagLocal, "[PromoView] " + message);
+        }
+    }
+
     private void initialize(@NonNull Context context) {
         this.context = context;
 
@@ -165,15 +212,17 @@ public class PromoView extends FrameLayout {
             webSettings.setDisplayZoomControls(false);
         }
 
-        webView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+        webView.setLayoutParams(new FrameLayout.LayoutParams(
+                ViewGroup.LayoutParams.MATCH_PARENT,
                 ViewGroup.LayoutParams.MATCH_PARENT));
 
         addView(webView);
-
         return webView;
     }
 
     private void loadPromo() {
+        debugLog("loadPromo: state = " + state);
+
         handler.removeCallbacks(loadPromoRunnable);
         handler.removeCallbacks(reloadPromoRunnable);
         handler.removeCallbacks(rotatePromoRunnable);
@@ -190,16 +239,20 @@ public class PromoView extends FrameLayout {
                     .toLowerCase(Locale.US);
 
             if (BuildConfig.DEBUG) {
-                currentWebView.loadUrl(url + "&mode=debug");
-            } else {
-                currentWebView.loadUrl(url);
+                url += "&mode=debug";
             }
+
+            debugLog("loadPromo: isNetworkConnected() = true, state = " + state + ", url = \"" + url + "\"");
+            currentWebView.loadUrl(url);
         } else {
+            debugLog("loadPromo: isNetworkConnected() = false");
             handler.postDelayed(loadPromoRunnable, RELOAD_INTERVAL);
         }
     }
 
     private void reloadPromo() {
+        debugLog("reloadPromo");
+
         currentWebView.setVisibility(View.INVISIBLE);
         currentWebView.stopLoading();
         currentWebView.loadData("", "text/html", null);
@@ -209,6 +262,8 @@ public class PromoView extends FrameLayout {
     }
 
     private void rotatePromo() {
+        debugLog("rotatePromo");
+
         WebView tmpWebView = prevWebView;
         prevWebView = currentWebView;
         currentWebView = tmpWebView;
@@ -217,48 +272,86 @@ public class PromoView extends FrameLayout {
     }
 
     private void promoLoaded() {
-        if (state == STATE_LOADING) {
-            currentWebView.setVisibility(View.VISIBLE);
+        debugLog("promoLoaded: state = " + state);
+
+        if (state != STATE_LOADING) {
+            return;
+        }
+
+        currentWebView.setVisibility(View.VISIBLE);
+        prevWebView.setVisibility(View.INVISIBLE);
 
-            prevWebView.setVisibility(View.INVISIBLE);
+        try {
             prevWebView.stopLoading();
             prevWebView.loadData("", "text/html", null);
+        } catch (Throwable e) {
+            debugLog("promoLoaded: exception in prevWebView, e = " + e);
 
-            state = STATE_LOADED;
-            handler.postDelayed(rotatePromoRunnable, ROTATE_INTERVAL);
+            // Something bad happened inside WebView. Just re-create it.
+            prevWebView = createWebView();
+            prevWebView.loadData("", "text/html", null);
+        }
 
-            activePromoLoaded = true;
+        state = STATE_LOADED;
+        handler.postDelayed(rotatePromoRunnable, ROTATE_INTERVAL);
 
-            if (listener != null) {
-                listener.onActivePromoLoaded();
-            }
+        activePromoLoaded = true;
+        debugLog("promoLoaded: activePromoLoaded = true");
+
+        if (listener != null) {
+            debugLog("promoLoaded: calling listener.onActivePromoLoaded()");
+            listener.onActivePromoLoaded();
         }
     }
 
     private void promoDismissed() {
-        if (state == STATE_LOADING || state == STATE_LOADED) {
-            prevWebView.setVisibility(View.INVISIBLE);
+        debugLog("promoDismissed: state = " + state);
+
+        if (state != STATE_LOADING && state != STATE_LOADED) {
+            return;
+        }
+
+        prevWebView.setVisibility(View.INVISIBLE);
+        currentWebView.setVisibility(View.INVISIBLE);
+
+        try {
             prevWebView.stopLoading();
             prevWebView.loadData("", "text/html", null);
+        } catch (Throwable e) {
+            debugLog("promoDismissed: exception in prevWebView, e = " + e);
+
+            // Something bad happened inside WebView. Just re-create it.
+            prevWebView = createWebView();
+            prevWebView.loadData("", "text/html", null);
+        }
 
-            currentWebView.setVisibility(View.INVISIBLE);
+        try {
             currentWebView.stopLoading();
             currentWebView.loadData("", "text/html", null);
+        } catch (Throwable e) {
+            debugLog("promoDismissed: exception in currentWebView, e = " + e);
 
-            state = STATE_DISMISSED;
-            handler.post(rotatePromoRunnable); // rotate immediately
+            // Something bad happened inside WebView. Just re-create it.
+            currentWebView = createWebView();
+            currentWebView.loadData("", "text/html", null);
+        }
 
-            activePromoLoaded = false;
+        state = STATE_DISMISSED;
+        handler.post(rotatePromoRunnable); // rotate immediately
 
-            if (listener != null) {
-                listener.onActivePromoDismissed();
-            }
+        activePromoLoaded = false;
+        debugLog("promoDismissed: activePromoLoaded = false");
+
+        if (listener != null) {
+            debugLog("promoDismissed: calling listener.onActivePromoDismissed()");
+            listener.onActivePromoDismissed();
         }
     }
 
     @Override
     public void onWindowFocusChanged(boolean hasWindowFocus) {
         super.onWindowFocusChanged(hasWindowFocus);
+        debugLog("onWindowFocusChanged: state = " + state + ", hasWindowFocus = " + hasWindowFocus);
 
         if (state != STATE_INITIALIZED) {
             return;
@@ -274,6 +367,7 @@ public class PromoView extends FrameLayout {
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
+        debugLog("onAttachedToWindow: state = " + state);
 
         if (state == STATE_INITIALIZED) {
             loadPromo();
@@ -282,6 +376,8 @@ public class PromoView extends FrameLayout {
 
     @Override
     protected void onDetachedFromWindow() {
+        debugLog("onDetachedFromWindow");
+
         handler.removeCallbacks(loadPromoRunnable);
         handler.removeCallbacks(reloadPromoRunnable);
         handler.removeCallbacks(rotatePromoRunnable);
@@ -291,7 +387,8 @@ public class PromoView extends FrameLayout {
     }
 
     private boolean isNetworkConnected() {
-        ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
+        ConnectivityManager connectivityManager =
+                (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
 
         if (connectivityManager == null) {
             return false;
@@ -306,7 +403,8 @@ public class PromoView extends FrameLayout {
             @Override
             public void run() {
                 try {
-                    context.startActivity((new Intent(Intent.ACTION_VIEW,
+                    context.startActivity((new Intent(
+                            Intent.ACTION_VIEW,
                             Uri.parse(uri))).addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET));
                 } catch (Exception ex) {
                     try {
@@ -336,7 +434,7 @@ public class PromoView extends FrameLayout {
         });
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     private class JsApi {
         @JavascriptInterface
         public void loaded() {
@@ -354,23 +452,34 @@ public class PromoView extends FrameLayout {
         @SuppressLint("ObsoleteSdkInt")
         @Override
         public void onPageFinished(@NonNull WebView view, @NonNull String url) {
-            view.setBackgroundColor(0);
+            try {
+                view.setBackgroundColor(0);
 
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-                view.setLayerType(WebView.LAYER_TYPE_SOFTWARE, null);
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+                    view.setLayerType(WebView.LAYER_TYPE_SOFTWARE, null);
+                }
+            } catch (Throwable e) {
+                debugLog("PromoWebViewClient.onPageFinished failed: " + e);
             }
         }
 
         @Override
-        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
+        public boolean shouldOverrideUrlLoading(@NonNull WebView view, String url) {
             final String MAILTO_PREFIX = "mailto:";
 
-            if (url.startsWith(MAILTO_PREFIX)) {
-                Intent intent = new Intent(Intent.ACTION_SENDTO,
+            try {
+                if (url == null || !url.startsWith(MAILTO_PREFIX)) {
+                    return false;
+                }
+
+                Intent intent = new Intent(
+                        Intent.ACTION_SENDTO,
                         Uri.fromParts("mailto", url.replaceFirst(MAILTO_PREFIX, ""), null));
 
                 openExternalIntent(intent);
                 return true;
+            } catch (Throwable e) {
+                debugLog("PromoWebViewClient.shouldOverrideUrlLoading failed: " + e);
             }
 
             return false;
@@ -382,43 +491,63 @@ public class PromoView extends FrameLayout {
         public WebResourceResponse shouldInterceptRequest(@NonNull WebView view, @NonNull String url) {
             final String ANDROID_ASSET = "file:///android_asset/";
 
-            if (url.startsWith(ANDROID_ASSET)) {
-                try {
-                    Uri uri = Uri.parse(url.replaceFirst(ANDROID_ASSET, ""));
-                    String path = uri.getPath();
+            try {
+                if (!url.startsWith(ANDROID_ASSET)) {
+                    return null;
+                }
 
-                    if (path != null) {
-                        InputStream stream = view.getContext().getAssets().open(path);
-                        return new WebResourceResponse("text/html", "UTF-8", stream);
-                    }
-                } catch (Exception ex) {
-                    // ignored
+                Uri uri = Uri.parse(url.replaceFirst(ANDROID_ASSET, ""));
+                String path = uri.getPath();
+
+                if (path != null) {
+                    InputStream stream = view.getContext().getAssets().open(path);
+                    return new WebResourceResponse("text/html", "UTF-8", stream);
                 }
+            } catch (Throwable e) {
+                debugLog("PromoWebViewClient.shouldInterceptRequest failed: " + e);
             }
 
             return null;
         }
 
         @Override
-        public void onReceivedError(@NonNull WebView view,
+        public void onReceivedError(
+                @NonNull WebView view,
                 int errorCode,
-                @NonNull String description,
-                @NonNull String failingUrl) {
+                String description,
+                String failingUrl) {
 
-            view.stopLoading();
-            view.loadData("", "text/html", null);
+            //noinspection UnnecessaryCallToStringValueOf
+            debugLog("PromoWebViewClient.onReceivedError: errorCode = "
+                    + errorCode
+                    + ", description = \""
+                    + String.valueOf(description)
+                    + "\", failingUrl = \""
+                    + String.valueOf(failingUrl) + "\"");
+
+            try {
+                view.stopLoading();
+                view.loadData("", "text/html", null);
+            } catch (Throwable e) {
+                debugLog("PromoWebViewClient.onReceivedError failed: " + e);
+            }
 
             handler.post(reloadPromoRunnable);
         }
 
         @Override
-        public void onReceivedHttpAuthRequest(@NonNull WebView view,
+        public void onReceivedHttpAuthRequest(
+                @NonNull WebView view,
                 @NonNull HttpAuthHandler httpAuthHandler,
                 @NonNull String host,
                 @NonNull String realm) {
 
-            view.stopLoading();
-            view.loadData("", "text/html", null);
+            try {
+                view.stopLoading();
+                view.loadData("", "text/html", null);
+            } catch (Throwable e) {
+                debugLog("PromoWebViewClient.onReceivedHttpAuthRequest failed: " + e);
+            }
 
             handler.post(reloadPromoRunnable);
         }
@@ -428,7 +557,8 @@ public class PromoView extends FrameLayout {
         private WebView childWebView;
 
         @Override
-        public boolean onCreateWindow(@NonNull WebView view,
+        public boolean onCreateWindow(
+                @NonNull WebView view,
                 boolean dialog,
                 boolean userGesture,
                 @NonNull Message resultMsg) {
@@ -439,31 +569,41 @@ public class PromoView extends FrameLayout {
                     childWebView.destroy();
                 }
 
-                childWebView = new WebView(view.getContext());
+                createChildWebView(view.getContext());
+                ((WebView.WebViewTransport)resultMsg.obj).setWebView(childWebView);
+                resultMsg.sendToTarget();
+                return true;
+            } catch (Throwable e) {
+                debugLog("PromoWebChromeClient.onCreateWindow failed: " + e);
+                return false;
+            }
+        }
+
+        private void createChildWebView(Context context) {
+            childWebView = new WebView(context);
 
-                childWebView.setWebViewClient(new WebViewClient() {
-                    @Override
-                    public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                        url = url.trim();
+            childWebView.setWebViewClient(new WebViewClient() {
+                @Override
+                public boolean shouldOverrideUrlLoading(@NonNull WebView view, String url) {
+                    try {
+                        if (url != null) {
+                            url = url.trim();
 
-                        if (!TextUtils.isEmpty(url)) {
-                            openExternalBrowser(url);
+                            if (!TextUtils.isEmpty(url)) {
+                                openExternalBrowser(url);
+                            }
                         }
 
                         childWebView.stopLoading();
                         childWebView.destroy();
                         childWebView = null;
-
-                        return true;
+                    } catch (Throwable e) {
+                        debugLog("Child WebViewClient.shouldOverrideUrlLoading failed: " + e);
                     }
-                });
 
-                ((WebView.WebViewTransport)resultMsg.obj).setWebView(childWebView);
-                resultMsg.sendToTarget();
-                return true;
-            } catch (Exception ex) {
-                return false;
-            }
+                    return true;
+                }
+            });
         }
     }
 }
diff --git a/android/src/main/java/com/eightsines/estracker/Tracker.java b/android/src/main/java/com/eightsines/estracker/Tracker.java
new file mode 100644
index 0000000..b864985
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/Tracker.java
@@ -0,0 +1,30 @@
+package com.eightsines.estracker;
+
+import android.app.Activity;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+public interface Tracker {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    boolean getCrashesConsent();
+
+    void setCrashesConsent(boolean shouldSendCrashes);
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    boolean getAnalyticsConsent();
+
+    void setAnalyticsConsent(boolean shouldSendAnalytics);
+
+    void trackEvent(@NonNull String name);
+
+    void trackEvent(@NonNull String name, @Nullable String param);
+
+    void onActivityCreate(Activity activity);
+
+    void onActivityStart(Activity activity);
+
+    void onActivityPause(Activity activity);
+
+    void onActivityStop(Activity activity);
+}
diff --git a/android/src/main/java/com/eightsines/estracker/TrackerFactory.java b/android/src/main/java/com/eightsines/estracker/TrackerFactory.java
new file mode 100644
index 0000000..e785ca6
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/TrackerFactory.java
@@ -0,0 +1,74 @@
+package com.eightsines.estracker;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.eightsines.estracker.tracker.AggregateTracker;
+import com.eightsines.estracker.tracker.DummyTracker;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public final class TrackerFactory {
+    // private static final String PREFIX_COUNTLY = "countly";
+    // private static final String PREFIX_MIXPANEL = "mixpanel";
+    // private static final String PREFIX_GAMEANALYTICS = "gameanalytics";
+    // private static final String PREFIX_APPCENTER = "appcenter";
+
+    private TrackerFactory() {
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    @NonNull
+    public static Tracker create(@NonNull Context context, @Nullable String config, boolean isDebugLog) {
+        if (config == null) {
+            return new DummyTracker();
+        }
+
+        List<Tracker> trackers = new ArrayList<>();
+
+        for (String part : config.split("\\|\\|\\|")) {
+            String[] parts = part.split("\\|");
+
+            if (parts.length < 2) {
+                throw new RuntimeException("Invalid tracker config: \"" + part + "\"");
+            }
+
+            // if (PREFIX_COUNTLY.equals(parts[0])) {
+            //     if (parts.length < 3) {
+            //         throw new RuntimeException("Invalid config for Countly: \"" + part + "\"");
+            //     }
+            //
+            //     trackers.add(new CountlyTracker(context,
+            //             parts[1],
+            //             parts[2],
+            //             parts.length > 3 ? parts[3] : null,
+            //             isDebugLog));
+            // } else if (PREFIX_MIXPANEL.equals(parts[0])) {
+            //     trackers.add(new MixpanelTracker(context, parts[1]));
+            // } else if (PREFIX_GAMEANALYTICS.equals(parts[0])) {
+            //     if (parts.length < 3) {
+            //         throw new RuntimeException("Invalid config for GameAnalytics: \"" + part + "\"");
+            //     }
+            //
+            //     trackers.add(new GameAnalyticsTracker(parts[1], parts[2], isDebugLog));
+            // } else if (PREFIX_APPCENTER.equals(parts[0])) {
+            //     trackers.add(new AppCenterTracker(context, parts[1]));
+            // } else {
+            //     throw new RuntimeException("Unsupported tracker config: \"" + part + "\"");
+            // }
+        }
+
+        if (trackers.isEmpty()) {
+            return new DummyTracker();
+        }
+
+        if (trackers.size() == 1) {
+            return trackers.get(0);
+        }
+
+        return new AggregateTracker(trackers);
+    }
+}
diff --git a/src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java
similarity index 64%
rename from src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java
rename to android/src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java
index bd7e26a..2839685 100644
--- a/src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java
+++ b/android/src/main/java/com/eightsines/estracker/tracker/AbstractTracker.java
@@ -1,16 +1,22 @@
 package com.eightsines.estracker.tracker;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import android.app.Activity;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import com.eightsines.estracker.Tracker;
+
 import zame.game.flavour.config.AppConfig;
 
 public abstract class AbstractTracker implements Tracker {
+    @SuppressWarnings("WeakerAccess") protected static final String PREFIX_DEBUG = "DEBUG_";
+
     @SuppressWarnings("WeakerAccess") protected boolean shouldSendCrashes;
     @SuppressWarnings("WeakerAccess") protected boolean shouldSendAnalytics;
 
     @Override
-    public boolean getCrashedConsent() {
+    public boolean getCrashesConsent() {
         return shouldSendCrashes;
     }
 
@@ -37,10 +43,26 @@ public abstract class AbstractTracker implements Tracker {
     @Override
     public void trackEvent(@NonNull String name, @Nullable String param) {
         if (shouldSendAnalytics) {
-            trackEventInternal(AppConfig.DEBUG ? ("[debug] " + name) : name, param);
+            trackEventInternal(AppConfig.DEBUG ? (PREFIX_DEBUG + name) : name, param);
         }
     }
 
+    @Override
+    public void onActivityCreate(Activity activity) {
+    }
+
+    @Override
+    public void onActivityStart(Activity activity) {
+    }
+
+    @Override
+    public void onActivityPause(Activity activity) {
+    }
+
+    @Override
+    public void onActivityStop(Activity activity) {
+    }
+
     @SuppressWarnings("WeakerAccess")
     protected abstract void trackEventInternal(@NonNull String name, @Nullable String param);
 }
diff --git a/android/src/main/java/com/eightsines/estracker/tracker/AggregateTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/AggregateTracker.java
new file mode 100644
index 0000000..fe6a178
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/tracker/AggregateTracker.java
@@ -0,0 +1,96 @@
+package com.eightsines.estracker.tracker;
+
+import android.app.Activity;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.eightsines.estracker.Tracker;
+
+import java.util.List;
+
+public class AggregateTracker implements Tracker {
+    private final List<Tracker> trackers;
+
+    public AggregateTracker(List<Tracker> trackers) {
+        this.trackers = trackers;
+    }
+
+    @Override
+    public boolean getCrashesConsent() {
+        for (Tracker tracker : trackers) {
+            if (tracker.getCrashesConsent()) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public void setCrashesConsent(boolean shouldSendCrashes) {
+        for (Tracker tracker : trackers) {
+            tracker.setCrashesConsent(shouldSendCrashes);
+        }
+    }
+
+    @Override
+    public boolean getAnalyticsConsent() {
+        for (Tracker tracker : trackers) {
+            if (tracker.getAnalyticsConsent()) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    public void setAnalyticsConsent(boolean shouldSendAnalytics) {
+        for (Tracker tracker : trackers) {
+            tracker.setAnalyticsConsent(shouldSendAnalytics);
+        }
+    }
+
+    @Override
+    public void trackEvent(@NonNull String name) {
+        for (Tracker tracker : trackers) {
+            tracker.trackEvent(name);
+        }
+    }
+
+    @Override
+    public void trackEvent(@NonNull String name, @Nullable String param) {
+        for (Tracker tracker : trackers) {
+            tracker.trackEvent(name, param);
+        }
+    }
+
+    @Override
+    public void onActivityCreate(Activity activity) {
+        for (Tracker tracker : trackers) {
+            tracker.onActivityCreate(activity);
+        }
+    }
+
+    @Override
+    public void onActivityStart(Activity activity) {
+        for (Tracker tracker : trackers) {
+            tracker.onActivityStart(activity);
+        }
+    }
+
+    @Override
+    public void onActivityPause(Activity activity) {
+        for (Tracker tracker : trackers) {
+            tracker.onActivityPause(activity);
+        }
+    }
+
+    @Override
+    public void onActivityStop(Activity activity) {
+        for (Tracker tracker : trackers) {
+            tracker.onActivityStop(activity);
+        }
+    }
+}
diff --git a/src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java
similarity index 94%
rename from src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java
rename to android/src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java
index eacc4d8..a76c8ab 100644
--- a/src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java
+++ b/android/src/main/java/com/eightsines/estracker/tracker/AppCenterTracker.java
@@ -1,9 +1,11 @@
 package com.eightsines.estracker.tracker;
 
+/*
 import android.app.Application;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+
 import com.microsoft.appcenter.AppCenter;
 import com.microsoft.appcenter.analytics.Analytics;
 import com.microsoft.appcenter.analytics.EventProperties;
@@ -38,7 +40,7 @@ public class AppCenterTracker extends AbstractTracker {
     }
 
     @Override
-    public void trackEventInternal(@NonNull String name, @Nullable String param) {
+    protected void trackEventInternal(@NonNull String name, @Nullable String param) {
         if (param == null) {
             Analytics.trackEvent(name);
         } else {
@@ -46,3 +48,4 @@ public class AppCenterTracker extends AbstractTracker {
         }
     }
 }
+*/
diff --git a/android/src/main/java/com/eightsines/estracker/tracker/CountlyTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/CountlyTracker.java
new file mode 100644
index 0000000..0c4a432
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/tracker/CountlyTracker.java
@@ -0,0 +1,229 @@
+package com.eightsines.estracker.tracker;
+
+/*
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.TextUtils;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.preference.PreferenceManager;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicLong;
+
+import ly.count.android.sdk.AdvertisingIdAdapter;
+import ly.count.android.sdk.Countly;
+import ly.count.android.sdk.DeviceId;
+import ly.count.android.sdk.OpenUDIDAdapter;
+
+// https://resources.count.ly/docs/countly-sdk-for-android
+
+public class CountlyTracker extends AbstractTracker {
+    private static final String TAG = CountlyTracker.class.getSimpleName();
+
+    private static final String PREF_DEVICE_ID = "__CountlyTracker_DeviceId";
+    private static final String SEGMENT_PARAM = "Param";
+    private static final String COUNTLY_PREFERENCES = "COUNTLY_STORE";
+    private static final String COUNTLY_PREFERENCE_CONNECTIONS = "CONNECTIONS";
+    private static final long SINGLE_WAIT_FOR_COUNTLY_MILLIS = 100L;
+    private static final long MAX_WAIT_FOR_COUNTLY_MILLIS = 10000L;
+    private static final String[] CONSENT_CRASHES = { Countly.CountlyFeatureNames.crashes };
+
+    private static final String[] CONSENT_ANALYTICS = {
+            Countly.CountlyFeatureNames.sessions,
+            Countly.CountlyFeatureNames.events,
+            Countly.CountlyFeatureNames.views,
+            Countly.CountlyFeatureNames.location,
+            Countly.CountlyFeatureNames.attribution,
+            Countly.CountlyFeatureNames.users };
+
+    private Context context;
+    private boolean isCountlyInitialized;
+    private Thread.UncaughtExceptionHandler systemUncaughtExceptionHandler;
+    private boolean isUncaughtExceptionHandlerCalled;
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private Thread.UncaughtExceptionHandler uncaughtExceptionHandler = new Thread.UncaughtExceptionHandler() {
+        @Override
+        public void uncaughtException(final Thread t, final Throwable e) {
+            if (isUncaughtExceptionHandlerCalled || systemUncaughtExceptionHandler == null) {
+                return;
+            }
+
+            isUncaughtExceptionHandlerCalled = true;
+
+            try {
+                Log.e(TAG, "Uncaught exception: " + e.toString(), e);
+
+                final Handler handler = new Handler(Looper.getMainLooper());
+                final AtomicLong alreadyWaitMillis = new AtomicLong();
+
+                handler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            if (isCountlyInitialized
+                                    && alreadyWaitMillis.get() < MAX_WAIT_FOR_COUNTLY_MILLIS
+                                    && TextUtils.isEmpty(context.getSharedPreferences(
+                                    COUNTLY_PREFERENCES,
+                                    Context.MODE_PRIVATE)
+                                    .getString(COUNTLY_PREFERENCE_CONNECTIONS, ""))) {
+
+                                alreadyWaitMillis.getAndAdd(SINGLE_WAIT_FOR_COUNTLY_MILLIS);
+                                handler.postDelayed(this, SINGLE_WAIT_FOR_COUNTLY_MILLIS);
+                                return;
+                            }
+
+                            if (systemUncaughtExceptionHandler != null) {
+                                systemUncaughtExceptionHandler.uncaughtException(t, e);
+                            }
+                        } catch (Throwable ignored) {
+                            // Ignored - we should never fail here
+                        }
+                    }
+                });
+            } catch (Throwable ignored) {
+                // Ignored - we should never fail here
+            }
+        }
+    };
+
+    public CountlyTracker(
+            @NonNull Context context,
+            @NonNull String serverUrl,
+            @NonNull String appKey,
+            @Nullable String salt,
+            boolean isDebugLog) {
+
+        super();
+        this.context = context;
+
+        String deviceId = null;
+        DeviceId.Type idMode = null;
+
+        try {
+            if (AdvertisingIdAdapter.isAdvertisingIdAvailable()) {
+                idMode = DeviceId.Type.ADVERTISING_ID;
+            } else if (OpenUDIDAdapter.isOpenUDIDAvailable()) {
+                idMode = DeviceId.Type.OPEN_UDID;
+            }
+        } catch (Throwable t) {
+            Log.e(TAG, "Failed to detect idMode: " + t.toString());
+        }
+
+        if (idMode == null) {
+            SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);
+            deviceId = sp.getString(PREF_DEVICE_ID, null);
+
+            if (deviceId == null) {
+                deviceId = UUID.randomUUID().toString();
+                sp.edit().putString(PREF_DEVICE_ID, deviceId).apply();
+            }
+        }
+
+        systemUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
+        Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
+
+        try {
+            Countly.sharedInstance()
+                    .setRequiresConsent(true)
+                    .setHttpPostForced(true)
+                    .init(context, serverUrl, appKey, deviceId, idMode)
+                    .enableCrashReporting()
+                    .setViewTracking(true)
+                    .setIfStarRatingShownAutomatically(false);
+
+            if (salt != null) {
+                Countly.sharedInstance().enableParameterTamperingProtection(salt);
+            }
+
+            if (isDebugLog) {
+                Countly.sharedInstance().setLoggingEnabled(true);
+            }
+
+            isCountlyInitialized = true;
+        } catch (Throwable t) {
+            Log.e(TAG, "Failed to initialize countly: " + t.toString());
+        }
+    }
+
+    @Override
+    public void setCrashesConsent(boolean shouldSendCrashes) {
+        super.setCrashesConsent(shouldSendCrashes);
+
+        if (isCountlyInitialized) {
+            try {
+                Countly.sharedInstance().setConsent(CONSENT_CRASHES, shouldSendCrashes);
+            } catch (Throwable t) {
+                Log.e(TAG, "Failed to set crashes consent: " + t.toString());
+            }
+        }
+    }
+
+    @Override
+    public void setAnalyticsConsent(boolean shouldSendAnalytics) {
+        super.setAnalyticsConsent(shouldSendAnalytics);
+
+        if (isCountlyInitialized) {
+            try {
+                Countly.sharedInstance().setConsent(CONSENT_ANALYTICS, shouldSendAnalytics);
+            } catch (Throwable t) {
+                Log.e(TAG, "Failed to set analytics consent: " + t.toString());
+            }
+        }
+    }
+
+    @Override
+    public void onActivityStart(Activity activity) {
+        super.onActivityStart(activity);
+
+        if (isCountlyInitialized) {
+            try {
+                Countly.sharedInstance().onStart(activity);
+            } catch (Throwable t) {
+                Log.e(TAG, "Failed to track activity start: " + t.toString());
+            }
+        }
+    }
+
+    @Override
+    public void onActivityStop(Activity activity) {
+        super.onActivityStop(activity);
+
+        if (isCountlyInitialized) {
+            try {
+                Countly.sharedInstance().onStop();
+            } catch (Throwable t) {
+                Log.e(TAG, "Failed to track activity stop: " + t.toString());
+            }
+        }
+    }
+
+    @Override
+    protected void trackEventInternal(@NonNull String name, @Nullable String param) {
+        if (!isCountlyInitialized) {
+            return;
+        }
+
+        Map<String, String> segmentation = null;
+
+        if (param != null) {
+            segmentation = new HashMap<>();
+            segmentation.put(SEGMENT_PARAM, param);
+        }
+
+        try {
+            Countly.sharedInstance().recordEvent(name, segmentation, 1);
+        } catch (Throwable t) {
+            Log.e(TAG, "Failed to track event: " + t.toString());
+        }
+    }
+}
+*/
diff --git a/src/main/java/com/eightsines/estracker/tracker/DummyTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/DummyTracker.java
similarity index 82%
rename from src/main/java/com/eightsines/estracker/tracker/DummyTracker.java
rename to android/src/main/java/com/eightsines/estracker/tracker/DummyTracker.java
index 4ec1eed..0197bc6 100644
--- a/src/main/java/com/eightsines/estracker/tracker/DummyTracker.java
+++ b/android/src/main/java/com/eightsines/estracker/tracker/DummyTracker.java
@@ -1,9 +1,10 @@
 package com.eightsines.estracker.tracker;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.util.Log;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 public class DummyTracker extends AbstractTracker {
     private static final String TAG = "EsTracker";
 
diff --git a/android/src/main/java/com/eightsines/estracker/tracker/GameAnalyticsTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/GameAnalyticsTracker.java
new file mode 100644
index 0000000..2c9f55e
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/tracker/GameAnalyticsTracker.java
@@ -0,0 +1,117 @@
+package com.eightsines.estracker.tracker;
+
+/*
+import android.app.Activity;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.gameanalytics.sdk.GAProgressionStatus;
+import com.gameanalytics.sdk.GameAnalytics;
+
+import zame.game.App;
+import zame.game.feature.config.EventsConfig;
+import zame.game.flavour.config.AppConfig;
+
+public class GameAnalyticsTracker extends AbstractTracker {
+    @SuppressWarnings("BooleanVariableAlwaysNegated") private boolean isInitialized;
+    private String gameKey;
+    private String gameSecret;
+
+    public GameAnalyticsTracker(String gameKey, String gameSecret, boolean isDebugLog) {
+        super();
+
+        this.gameKey = gameKey;
+        this.gameSecret = gameSecret;
+
+        if (isDebugLog) {
+            GameAnalytics.setEnabledInfoLog(true);
+            GameAnalytics.setEnabledVerboseLog(true);
+        }
+
+        GameAnalytics.setEnabledErrorReporting(false);
+        GameAnalytics.setEnabledEventSubmission(false);
+        GameAnalytics.configureBuild(App.self.getVersionName());
+
+        // GameAnalytics.configureAvailableResourceCurrencies()
+        // GameAnalytics.configureAvailableResourceItemTypes()
+        // GameAnalytics.configureAvailableCustomDimensions01()
+        // GameAnalytics.configureAvailableCustomDimensions02()
+        // GameAnalytics.configureAvailableCustomDimensions03()
+    }
+
+    @Override
+    public void setCrashesConsent(boolean shouldSendCrashes) {
+        super.setCrashesConsent(shouldSendCrashes);
+
+        // probably (not tested) setEnabledEventSubmission() has more weight than setEnabledErrorReporting()
+        GameAnalytics.setEnabledErrorReporting(shouldSendCrashes);
+    }
+
+    @Override
+    public void setAnalyticsConsent(boolean shouldSendAnalytics) {
+        super.setAnalyticsConsent(shouldSendAnalytics);
+        GameAnalytics.setEnabledEventSubmission(shouldSendAnalytics);
+    }
+
+    @Override
+    public void onActivityCreate(Activity activity) {
+        super.onActivityCreate(activity);
+
+        if (!isInitialized) {
+            isInitialized = true;
+            GameAnalytics.initializeWithGameKey(activity, gameKey, gameSecret);
+        }
+    }
+
+    @Override
+    public void trackEvent(@NonNull String name, @Nullable String param) {
+        super.trackEvent(name, param);
+
+        if (!isInitialized || !shouldSendAnalytics || param == null) {
+            return;
+        }
+
+        switch (name) {
+            case EventsConfig.EV_GAME_LEVEL_STARTED:
+                GameAnalytics.addProgressionEventWithProgressionStatus(
+                        GAProgressionStatus.Start,
+                        fixEventId(AppConfig.DEBUG ? (PREFIX_DEBUG + param) : param));
+
+                break;
+
+            case EventsConfig.EV_GAME_GAME_OVER:
+                GameAnalytics.addProgressionEventWithProgressionStatus(
+                        GAProgressionStatus.Fail,
+                        fixEventId(AppConfig.DEBUG ? (PREFIX_DEBUG + param) : param));
+
+                break;
+
+            case EventsConfig.EV_GAME_LEVEL_FINISHED:
+                GameAnalytics.addProgressionEventWithProgressionStatus(
+                        GAProgressionStatus.Complete,
+                        fixEventId(AppConfig.DEBUG ? (PREFIX_DEBUG + param) : param));
+
+                break;
+        }
+    }
+
+    @Override
+    protected void trackEventInternal(@NonNull String name, @Nullable String param) {
+        if (!isInitialized) {
+            return;
+        }
+
+        if (param != null) {
+            GameAnalytics.addDesignEventWithEventId(fixEventId(name) + ":" + fixEventId(param));
+        } else {
+            GameAnalytics.addDesignEventWithEventId(fixEventId(name));
+        }
+    }
+
+    private String fixEventId(@NonNull String param) {
+        // According to documentation "_" isn't allowed symbol, but this symbol is used in example "StartGame:ClassLevel1_5"
+        return param.replaceAll("[^0-9A-Za-z_]", "_");
+    }
+}
+*/
diff --git a/android/src/main/java/com/eightsines/estracker/tracker/MixpanelTracker.java b/android/src/main/java/com/eightsines/estracker/tracker/MixpanelTracker.java
new file mode 100644
index 0000000..badda2e
--- /dev/null
+++ b/android/src/main/java/com/eightsines/estracker/tracker/MixpanelTracker.java
@@ -0,0 +1,65 @@
+package com.eightsines.estracker.tracker;
+
+/*
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.mixpanel.android.mpmetrics.MixpanelAPI;
+
+import org.json.JSONObject;
+
+public class MixpanelTracker extends AbstractTracker {
+    private static final String TAG = CountlyTracker.class.getSimpleName();
+    private static final String PROPERTY_PARAM = "Param";
+
+    private MixpanelAPI mixpanel;
+
+    public MixpanelTracker(@NonNull Context context, @NonNull String projectToken) {
+        super();
+
+        mixpanel = MixpanelAPI.getInstance(context, projectToken, true);
+        mixpanel.getPeople().identify(mixpanel.getDistinctId());
+    }
+
+    // Mixpanel also automatically tracks "$ae_crashed" event, find a way to configure it separately from analytics
+
+    @Override
+    public void setAnalyticsConsent(boolean shouldSendAnalytics) {
+        super.setAnalyticsConsent(shouldSendAnalytics);
+
+        if (shouldSendAnalytics && mixpanel.hasOptedOutTracking()) {
+            mixpanel.optInTracking();
+        } else if (!shouldSendAnalytics && !mixpanel.hasOptedOutTracking()) {
+            mixpanel.optOutTracking();
+        }
+    }
+
+    @Override
+    public void onActivityPause(Activity activity) {
+        super.onActivityPause(activity);
+        mixpanel.flush();
+    }
+
+    @Override
+    protected void trackEventInternal(@NonNull String name, @Nullable String param) {
+        JSONObject properties = null;
+
+        if (param != null) {
+            properties = new JSONObject();
+
+            try {
+                properties.put(PROPERTY_PARAM, param);
+            } catch (Throwable t) {
+                Log.e(TAG, "trackEventInternal failed: " + t.toString(), t);
+                return;
+            }
+        }
+
+        mixpanel.track(name, properties);
+    }
+}
+*/
diff --git a/src/main/java/zame/game/App.java b/android/src/main/java/zame/game/App.java
similarity index 73%
rename from src/main/java/zame/game/App.java
rename to android/src/main/java/zame/game/App.java
index afacacf..df0aad9 100644
--- a/src/main/java/zame/game/App.java
+++ b/android/src/main/java/zame/game/App.java
@@ -1,33 +1,39 @@
 package zame.game;
 
+import android.app.Application;
 import android.graphics.Typeface;
 import android.os.Handler;
-import android.support.multidex.MultiDexApplication;
-import android.support.v4.content.LocalBroadcastManager;
-import android.support.v7.preference.PreferenceManager;
 import android.text.TextUtils;
 import android.widget.Toast;
+
+import androidx.preference.PreferenceManager;
+
 import com.eightsines.esmediadtor.Mediadtor;
 import com.eightsines.estracker.Tracker;
 import com.eightsines.estracker.TrackerFactory;
 import com.jakewharton.processphoenix.ProcessPhoenix;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Locale;
+
+import zame.game.core.app.AppBroadcastManager;
 import zame.game.core.manager.PreferencesManager;
 import zame.game.core.util.Common;
 import zame.game.engine.state.Profile;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.prepare.CachedTexturesProvider;
 import zame.game.feature.sound.SoundManager;
 import zame.game.flavour.config.AppConfig;
 
-public class App extends MultiDexApplication {
+public class App extends Application {
     public static final Locale LOCALE_RU = new Locale("ru", "RU");
 
     public static App self;
 
     public final Handler handler = new Handler();
     public final Locale systemDefaultLocale = Locale.getDefault();
+    public final AppBroadcastManager broadcastManager = new AppBroadcastManager();
     public Tracker tracker;
     public String internalRoot;
     public Profile profile;
@@ -40,6 +46,7 @@ public class App extends MultiDexApplication {
     public CachedTexturesProvider.Task cachedTexturesTask;
     public volatile boolean cachedTexturesReady;
     private String cachedVersionName;
+    public boolean isLimitAdTrackingEnabled = true;
 
     @Override
     public void onCreate() {
@@ -51,7 +58,11 @@ public class App extends MultiDexApplication {
 
         self = this;
 
-        tracker = TrackerFactory.create(this, AppConfig.DEBUG_TRACKER ? null : AppConfig.APPCENTER_KEY);
+        tracker = TrackerFactory.create(
+                this,
+                AppConfig.TRACKER_CONFIG,
+                AppConfig.DEBUG);
+
         internalRoot = getInternalStoragePath() + File.separator;
         profile = new Profile();
         preferences = new PreferencesManager();
@@ -70,25 +81,33 @@ public class App extends MultiDexApplication {
         profile.loadInitial(this);
     }
 
-    public LocalBroadcastManager getBroadcastManager() {
-        return LocalBroadcastManager.getInstance(getApplicationContext());
-    }
-
     public void applyConsent() {
+        if (AppConfig.DEBUG) {
+            Common.log("applyConsent -- isLimitAdTrackingEnabled = " + isLimitAdTrackingEnabled);
+        }
+
         boolean isConsentChosen = preferences.getBoolean(R.string.key_is_consent_chosen);
 
         tracker.setCrashesConsent(isConsentChosen && preferences.getBoolean(R.string.key_consent_crashes));
         tracker.setAnalyticsConsent(isConsentChosen && preferences.getBoolean(R.string.key_consent_analytics));
 
         mediadtor = new Mediadtor(
-                AppConfig.APPODEAL_KEY,
-                isConsentChosen && preferences.getBoolean(R.string.key_consent_ad_personalization),
-                AppConfig.DEBUG_MEDIADTOR);
+                AppConfig.MEDIADTOR_APPLICATION_KEY,
+                isConsentChosen
+                        && preferences.getBoolean(R.string.key_consent_ad_personalization)
+                        && !isLimitAdTrackingEnabled,
+                AppConfig.MEDIADTOR_TEST_ADS,
+                AppConfig.DEBUG ? AppConfig.TAG : null);
+
+        if (tracker.getAnalyticsConsent() && !preferences.getBoolean(R.string.key_install_event_sent)) {
+            tracker.trackEvent(EventsConfig.EV_JUST_INSTALLED, getVersionName());
+            preferences.putBoolean(R.string.key_install_event_sent, true);
+        }
     }
 
     public String getVersionName() {
         if (cachedVersionName == null) {
-            cachedVersionName = "xxxx.xx.xx.xxxx";
+            cachedVersionName = "x.x";
 
             try {
                 cachedVersionName = getPackageManager().getPackageInfo(getPackageName(), 0).versionName;
diff --git a/src/main/java/zame/game/core/app/ActionBarFragment.java b/android/src/main/java/zame/game/core/app/ActionBarFragment.java
similarity index 72%
rename from src/main/java/zame/game/core/app/ActionBarFragment.java
rename to android/src/main/java/zame/game/core/app/ActionBarFragment.java
index 1c30ad7..668ba99 100644
--- a/src/main/java/zame/game/core/app/ActionBarFragment.java
+++ b/android/src/main/java/zame/game/core/app/ActionBarFragment.java
@@ -1,6 +1,6 @@
 package zame.game.core.app;
 
-import android.support.v7.app.ActionBar;
+import androidx.appcompat.app.ActionBar;
 
 public interface ActionBarFragment {
     void setupTabs(ActionBar actionBar);
diff --git a/android/src/main/java/zame/game/core/app/AppBroadcastManager.java b/android/src/main/java/zame/game/core/app/AppBroadcastManager.java
new file mode 100644
index 0000000..1ce6ec0
--- /dev/null
+++ b/android/src/main/java/zame/game/core/app/AppBroadcastManager.java
@@ -0,0 +1,42 @@
+package zame.game.core.app;
+
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Pair;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class AppBroadcastManager {
+    private final List<Pair<AppBroadcastReceiver, String>> receivers = new ArrayList<>();
+
+    public void registerReceiver(AppBroadcastReceiver receiver, String action) {
+        receivers.add(Pair.create(receiver, action));
+    }
+
+    public void unregisterReceiver(AppBroadcastReceiver receiver) {
+        Iterator<Pair<AppBroadcastReceiver, String>> iterator = receivers.iterator();
+
+        while (iterator.hasNext()) {
+            Pair<AppBroadcastReceiver, String> pair = iterator.next();
+
+            if (pair.first == receiver) {
+                iterator.remove();
+            }
+        }
+    }
+
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void sendBroadcast(String action) {
+        sendBroadcast(action, new Bundle());
+    }
+
+    public void sendBroadcast(String action, Bundle bundle) {
+        for (Pair<AppBroadcastReceiver, String> pair : receivers) {
+            if (TextUtils.equals(action, pair.second)) {
+                pair.first.onReceive(bundle);
+            }
+        }
+    }
+}
diff --git a/android/src/main/java/zame/game/core/app/AppBroadcastReceiver.java b/android/src/main/java/zame/game/core/app/AppBroadcastReceiver.java
new file mode 100644
index 0000000..aef9126
--- /dev/null
+++ b/android/src/main/java/zame/game/core/app/AppBroadcastReceiver.java
@@ -0,0 +1,7 @@
+package zame.game.core.app;
+
+import android.os.Bundle;
+
+public interface AppBroadcastReceiver {
+    void onReceive(Bundle bundle);
+}
diff --git a/src/main/java/zame/game/core/app/AppContextWrapper.java b/android/src/main/java/zame/game/core/app/AppContextWrapper.java
similarity index 99%
rename from src/main/java/zame/game/core/app/AppContextWrapper.java
rename to android/src/main/java/zame/game/core/app/AppContextWrapper.java
index 3ba3bd1..19f5606 100644
--- a/src/main/java/zame/game/core/app/AppContextWrapper.java
+++ b/android/src/main/java/zame/game/core/app/AppContextWrapper.java
@@ -6,6 +6,7 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.os.Build;
 import android.os.LocaleList;
+
 import java.util.Locale;
 
 public class AppContextWrapper extends ContextWrapper {
diff --git a/src/main/java/zame/game/core/app/BackPressedHandler.java b/android/src/main/java/zame/game/core/app/BackPressedHandler.java
similarity index 100%
rename from src/main/java/zame/game/core/app/BackPressedHandler.java
rename to android/src/main/java/zame/game/core/app/BackPressedHandler.java
diff --git a/src/main/java/zame/game/core/app/BaseActivity.java b/android/src/main/java/zame/game/core/app/BaseActivity.java
similarity index 87%
rename from src/main/java/zame/game/core/app/BaseActivity.java
rename to android/src/main/java/zame/game/core/app/BaseActivity.java
index b3b6bf0..f6751fd 100644
--- a/src/main/java/zame/game/core/app/BaseActivity.java
+++ b/android/src/main/java/zame/game/core/app/BaseActivity.java
@@ -2,9 +2,12 @@ package zame.game.core.app;
 
 import android.content.Context;
 import android.os.Build;
-import android.support.v7.app.AppCompatActivity;
 import android.view.View;
+
+import androidx.appcompat.app.AppCompatActivity;
+
 import java.util.Locale;
+
 import zame.game.App;
 import zame.game.R;
 
@@ -41,9 +44,10 @@ public abstract class BaseActivity extends AppCompatActivity {
 
             // Just for case
             if (decorView != null) {
-                decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE
-                        | View.SYSTEM_UI_FLAG_FULLSCREEN
-                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
+                decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN
+                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                        | View.SYSTEM_UI_FLAG_IMMERSIVE
+                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
             }
         }
     }
diff --git a/src/main/java/zame/game/core/app/BaseDialogFragment.java b/android/src/main/java/zame/game/core/app/BaseDialogFragment.java
similarity index 75%
rename from src/main/java/zame/game/core/app/BaseDialogFragment.java
rename to android/src/main/java/zame/game/core/app/BaseDialogFragment.java
index 937588a..512eb5c 100644
--- a/src/main/java/zame/game/core/app/BaseDialogFragment.java
+++ b/android/src/main/java/zame/game/core/app/BaseDialogFragment.java
@@ -3,17 +3,23 @@ package zame.game.core.app;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Build;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.FragmentManager;
 import android.view.View;
 import android.view.Window;
+
+import androidx.annotation.NonNull;
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.FragmentManager;
+
 import zame.game.core.manager.WindowCallbackManager;
 import zame.game.core.util.Common;
+import zame.game.feature.main.MainActivity;
 import zame.game.feature.sound.SoundManager;
 
 public abstract class BaseDialogFragment extends DialogFragment {
     private Window window;
 
+    protected boolean isForgottenFragment;
+    protected MainActivity activity;
     protected SoundManager soundManager;
     protected boolean shouldSoundPauseInstantlyOnDismiss;
 
@@ -32,9 +38,21 @@ public abstract class BaseDialogFragment extends DialogFragment {
     }
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
 
+        if (!(context instanceof MainActivity)) {
+            isForgottenFragment = true;
+        } else {
+            this.activity = (MainActivity)context;
+
+            if (this.activity.engine == null) {
+                isForgottenFragment = true;
+            } else {
+                this.activity.setupTabs();
+            }
+        }
+
         if (soundManager == null) {
             soundManager = SoundManager.getInstance(false);
         }
@@ -76,7 +94,7 @@ public abstract class BaseDialogFragment extends DialogFragment {
     }
 
     @Override
-    public void onDismiss(DialogInterface dialog) {
+    public void onDismiss(@NonNull DialogInterface dialog) {
         super.onDismiss(dialog);
 
         soundManager.instantPause = shouldSoundPauseInstantlyOnDismiss;
diff --git a/src/main/java/zame/game/core/app/BaseFragment.java b/android/src/main/java/zame/game/core/app/BaseFragment.java
similarity index 51%
rename from src/main/java/zame/game/core/app/BaseFragment.java
rename to android/src/main/java/zame/game/core/app/BaseFragment.java
index 9534855..be29f6a 100644
--- a/src/main/java/zame/game/core/app/BaseFragment.java
+++ b/android/src/main/java/zame/game/core/app/BaseFragment.java
@@ -2,28 +2,43 @@ package zame.game.core.app;
 
 import android.content.Context;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.view.View;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
 import zame.game.App;
 import zame.game.feature.main.MainActivity;
 
 public abstract class BaseFragment extends Fragment {
+    protected boolean isForgottenFragment;
     protected MainActivity activity;
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
 
-        this.activity = (MainActivity)context;
-        this.activity.setupTabs();
+        if (!(context instanceof MainActivity)) {
+            isForgottenFragment = true;
+        } else {
+            this.activity = (MainActivity)context;
+
+            if (this.activity.engine == null) {
+                isForgottenFragment = true;
+            } else {
+                this.activity.setupTabs();
+            }
+        }
     }
 
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        onShowBanner();
+
+        if (!isForgottenFragment) {
+            onShowBanner();
+        }
     }
 
     protected void onShowBanner() {
diff --git a/src/main/java/zame/game/core/manager/PreferencesManager.java b/android/src/main/java/zame/game/core/manager/PreferencesManager.java
similarity index 92%
rename from src/main/java/zame/game/core/manager/PreferencesManager.java
rename to android/src/main/java/zame/game/core/manager/PreferencesManager.java
index 6f17a56..6c71a29 100644
--- a/src/main/java/zame/game/core/manager/PreferencesManager.java
+++ b/android/src/main/java/zame/game/core/manager/PreferencesManager.java
@@ -1,10 +1,11 @@
 package zame.game.core.manager;
 
 import android.content.SharedPreferences;
-import android.support.annotation.Nullable;
-import android.support.v7.preference.PreferenceManager;
+
+import androidx.annotation.Nullable;
+import androidx.preference.PreferenceManager;
+
 import zame.game.App;
-import zame.game.R;
 
 public class PreferencesManager {
     public boolean getBoolean(int keyResId) {
diff --git a/src/main/java/zame/game/core/manager/WindowCallbackManager.java b/android/src/main/java/zame/game/core/manager/WindowCallbackManager.java
similarity index 98%
rename from src/main/java/zame/game/core/manager/WindowCallbackManager.java
rename to android/src/main/java/zame/game/core/manager/WindowCallbackManager.java
index c2aa1ce..a4b94c8 100644
--- a/src/main/java/zame/game/core/manager/WindowCallbackManager.java
+++ b/android/src/main/java/zame/game/core/manager/WindowCallbackManager.java
@@ -4,7 +4,6 @@ import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.os.Build.VERSION;
 import android.os.Build.VERSION_CODES;
-import android.support.annotation.Nullable;
 import android.view.ActionMode;
 import android.view.KeyEvent;
 import android.view.KeyboardShortcutGroup;
@@ -16,7 +15,11 @@ import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 import android.view.accessibility.AccessibilityEvent;
+
+import androidx.annotation.Nullable;
+
 import java.util.List;
+
 import zame.game.feature.sound.SoundManager;
 
 public final class WindowCallbackManager {
@@ -72,7 +75,8 @@ public final class WindowCallbackManager {
             }
 
             @Override
-            public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data,
+            public void onProvideKeyboardShortcuts(
+                    List<KeyboardShortcutGroup> data,
                     @Nullable Menu menu,
                     int deviceId) {
 
diff --git a/src/main/java/zame/game/core/preference/CheckBoxPreference.java b/android/src/main/java/zame/game/core/preference/CheckBoxPreference.java
similarity index 71%
rename from src/main/java/zame/game/core/preference/CheckBoxPreference.java
rename to android/src/main/java/zame/game/core/preference/CheckBoxPreference.java
index 72f6379..49c35d9 100644
--- a/src/main/java/zame/game/core/preference/CheckBoxPreference.java
+++ b/android/src/main/java/zame/game/core/preference/CheckBoxPreference.java
@@ -1,23 +1,28 @@
 package zame.game.core.preference;
 
 import android.content.Context;
-import android.support.v7.preference.PreferenceViewHolder;
 import android.util.AttributeSet;
 import android.widget.TextView;
 
-public class CheckBoxPreference extends android.support.v7.preference.CheckBoxPreference {
+import androidx.preference.PreferenceViewHolder;
+
+public class CheckBoxPreference extends androidx.preference.CheckBoxPreference {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public CheckBoxPreference(Context context) {
         super(context);
     }
 
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public CheckBoxPreference(Context context, AttributeSet attrs) {
         super(context, attrs);
     }
 
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public CheckBoxPreference(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
     }
 
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public CheckBoxPreference(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
         super(context, attrs, defStyleAttr, defStyleRes);
     }
diff --git a/src/main/java/zame/game/core/preference/KeyMapPreference.java b/android/src/main/java/zame/game/core/preference/KeyMapPreference.java
similarity index 92%
rename from src/main/java/zame/game/core/preference/KeyMapPreference.java
rename to android/src/main/java/zame/game/core/preference/KeyMapPreference.java
index ad32f02..43d15e2 100644
--- a/src/main/java/zame/game/core/preference/KeyMapPreference.java
+++ b/android/src/main/java/zame/game/core/preference/KeyMapPreference.java
@@ -2,21 +2,26 @@ package zame.game.core.preference;
 
 import android.content.Context;
 import android.content.res.TypedArray;
-import android.support.v7.preference.DialogPreference;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
-import com.takisoft.fix.support.v7.preference.PreferenceFragmentCompat;
+
+import androidx.annotation.Nullable;
+import androidx.preference.DialogPreference;
+
+import com.takisoft.preferencex.PreferenceFragmentCompat;
+
 import zame.game.R;
 
 public class KeyMapPreference extends DialogPreference {
     static {
-        PreferenceFragmentCompat.registerPreferenceFragment(KeyMapPreference.class,
+        PreferenceFragmentCompat.registerPreferenceFragment(
+                KeyMapPreference.class,
                 KeyMapPreferenceDialogFragmentCompat.class);
     }
 
     private int value;
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public KeyMapPreference(Context context) {
         this(context, null);
     }
@@ -42,10 +47,22 @@ public class KeyMapPreference extends DialogPreference {
         return a.getInteger(index, 0);
     }
 
+    @Override
+    protected void onSetInitialValue(@Nullable Object defaultValue) {
+        super.onSetInitialValue(defaultValue);
+        value = getPersistedInt(defaultValue == null ? value : (Integer)defaultValue);
+
+        if (shouldPersist()) {
+            persistInt(value);
+        }
+
+        updateSummary();
+    }
+
+    @SuppressWarnings("deprecation")
     @Override
     protected void onSetInitialValue(boolean restore, Object defaultValue) {
         super.onSetInitialValue(restore, defaultValue);
-
         value = (restore ? getPersistedInt(value) : ((defaultValue == null) ? value : (Integer)defaultValue));
 
         if (!restore && shouldPersist()) {
diff --git a/src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java b/android/src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java
similarity index 91%
rename from src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java
rename to android/src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java
index 3833877..2f59d7d 100644
--- a/src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java
+++ b/android/src/main/java/zame/game/core/preference/KeyMapPreferenceDialogFragmentCompat.java
@@ -2,15 +2,17 @@ package zame.game.core.preference;
 
 import android.content.Context;
 import android.content.DialogInterface;
-import android.support.v7.app.AlertDialog;
-import android.support.v7.preference.PreferenceDialogFragmentCompat;
 import android.view.Gravity;
 import android.view.KeyEvent;
 import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.TextView;
-import zame.game.core.util.Common;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.preference.PreferenceDialogFragmentCompat;
+
 import zame.game.R;
+import zame.game.core.util.Common;
 
 public class KeyMapPreferenceDialogFragmentCompat extends PreferenceDialogFragmentCompat {
     private static final int HELP_TEXT_SIZE = 16;
@@ -27,7 +29,8 @@ public class KeyMapPreferenceDialogFragmentCompat extends PreferenceDialogFragme
         text.setTextSize(HELP_TEXT_SIZE);
         text.setText(R.string.core_preference_press_key);
 
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
+        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
+                LinearLayout.LayoutParams.FILL_PARENT,
                 LinearLayout.LayoutParams.WRAP_CONTENT);
 
         layout.addView(text, params);
@@ -49,7 +52,7 @@ public class KeyMapPreferenceDialogFragmentCompat extends PreferenceDialogFragme
                         pref.persistInt(pref.getValue());
                     }
 
-                    getDialog().dismiss();
+                    dialog.dismiss();
                     return true;
                 }
 
diff --git a/src/main/java/zame/game/core/preference/SeekBarPreference.java b/android/src/main/java/zame/game/core/preference/SeekBarPreference.java
similarity index 74%
rename from src/main/java/zame/game/core/preference/SeekBarPreference.java
rename to android/src/main/java/zame/game/core/preference/SeekBarPreference.java
index 5bb024b..7ec92bd 100644
--- a/src/main/java/zame/game/core/preference/SeekBarPreference.java
+++ b/android/src/main/java/zame/game/core/preference/SeekBarPreference.java
@@ -3,9 +3,7 @@
  * and is released under the APACHE 2.0 license
  *
  * http://www.apache.org/licenses/LICENSE-2.0
- *
  * http://android.hlidskialf.com/blog/code/android-seekbar-preference
- * http://www.bryandenny.com/index.php/2010/05/25/what-i-learned-from-writing-my-first-android-application/
  *
  * Modified by restorer (added/fixed min parameter, fixed "Cancel" behaviour)
  *
@@ -15,15 +13,21 @@ package zame.game.core.preference;
 
 import android.content.Context;
 import android.content.res.TypedArray;
-import android.support.v7.preference.DialogPreference;
 import android.util.AttributeSet;
-import com.takisoft.fix.support.v7.preference.PreferenceFragmentCompat;
+
+import androidx.annotation.Nullable;
+import androidx.preference.DialogPreference;
+
+import com.takisoft.preferencex.PreferenceFragmentCompat;
+
 import java.util.Locale;
+
 import zame.game.R;
 
 public class SeekBarPreference extends DialogPreference {
     static {
-        PreferenceFragmentCompat.registerPreferenceFragment(SeekBarPreference.class,
+        PreferenceFragmentCompat.registerPreferenceFragment(
+                SeekBarPreference.class,
                 SeekBarPreferenceDialogFragmentCompat.class);
     }
 
@@ -47,17 +51,29 @@ public class SeekBarPreference extends DialogPreference {
         return a.getInteger(index, 0);
     }
 
+    @Override
+    protected void onSetInitialValue(@Nullable Object defaultValue) {
+        super.onSetInitialValue(defaultValue);
+        progress = getPersistedInt(defaultValue == null ? progress : (Integer)defaultValue);
+
+        if (shouldPersist()) {
+            persistInt(progress);
+        }
+
+        setSummary(String.format(Locale.US, SUMMARY_FORMAT, progress, max));
+    }
+
+    @SuppressWarnings("deprecation")
     @Override
     protected void onSetInitialValue(boolean restore, Object defaultValue) {
         super.onSetInitialValue(restore, defaultValue);
-
         progress = (restore ? getPersistedInt(progress) : ((defaultValue == null) ? progress : (Integer)defaultValue));
 
         if (!restore && shouldPersist()) {
             persistInt(progress);
         }
 
-        setSummary(String.format(Locale.US, SUMMARY_FORMAT, String.valueOf(progress), String.valueOf(max)));
+        setSummary(String.format(Locale.US, SUMMARY_FORMAT, progress, max));
     }
 
     public void setMin(int min) {
diff --git a/src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java b/android/src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java
similarity index 84%
rename from src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java
rename to android/src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java
index ac4865a..110f8fe 100644
--- a/src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java
+++ b/android/src/main/java/zame/game/core/preference/SeekBarPreferenceDialogFragmentCompat.java
@@ -1,12 +1,14 @@
 package zame.game.core.preference;
 
 import android.content.Context;
-import android.support.v7.preference.PreferenceDialogFragmentCompat;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.LinearLayout;
 import android.widget.SeekBar;
 import android.widget.TextView;
+
+import androidx.preference.PreferenceDialogFragmentCompat;
+
 import java.util.Locale;
 
 public class SeekBarPreferenceDialogFragmentCompat extends PreferenceDialogFragmentCompat
@@ -31,7 +33,8 @@ public class SeekBarPreferenceDialogFragmentCompat extends PreferenceDialogFragm
         mValueText.setGravity(Gravity.CENTER_HORIZONTAL);
         mValueText.setTextSize(VALUE_TEXT_SIZE);
 
-        params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
+        params = new LinearLayout.LayoutParams(
+                LinearLayout.LayoutParams.FILL_PARENT,
                 LinearLayout.LayoutParams.WRAP_CONTENT);
 
         layout.addView(mValueText, params);
@@ -39,8 +42,10 @@ public class SeekBarPreferenceDialogFragmentCompat extends PreferenceDialogFragm
         mSeekBar = new SeekBar(context);
         mSeekBar.setOnSeekBarChangeListener(this);
 
-        layout.addView(mSeekBar,
-                new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
+        layout.addView(
+                mSeekBar,
+                new LinearLayout.LayoutParams(
+                        LinearLayout.LayoutParams.FILL_PARENT,
                         LinearLayout.LayoutParams.WRAP_CONTENT));
 
         mSeekBar.setMax(pref.getMax() - pref.getMin());
@@ -65,10 +70,11 @@ public class SeekBarPreferenceDialogFragmentCompat extends PreferenceDialogFragm
             SeekBarPreference pref = (SeekBarPreference)getPreference();
             pref.setProgress(mSeekBar.getProgress() + pref.getMin());
 
-            getPreference().setSummary(String.format(Locale.US,
+            getPreference().setSummary(String.format(
+                    Locale.US,
                     SeekBarPreference.SUMMARY_FORMAT,
-                    String.valueOf(pref.getProgress()),
-                    String.valueOf(pref.getMax())));
+                    pref.getProgress(),
+                    pref.getMax()));
 
             if (pref.shouldPersist()) {
                 pref.persistInt(pref.getProgress());
diff --git a/src/main/java/zame/game/core/serializer/DataItem.java b/android/src/main/java/zame/game/core/serializer/DataItem.java
similarity index 100%
rename from src/main/java/zame/game/core/serializer/DataItem.java
rename to android/src/main/java/zame/game/core/serializer/DataItem.java
diff --git a/src/main/java/zame/game/core/serializer/DataList.java b/android/src/main/java/zame/game/core/serializer/DataList.java
similarity index 97%
rename from src/main/java/zame/game/core/serializer/DataList.java
rename to android/src/main/java/zame/game/core/serializer/DataList.java
index a589c15..60aae1f 100644
--- a/src/main/java/zame/game/core/serializer/DataList.java
+++ b/android/src/main/java/zame/game/core/serializer/DataList.java
@@ -47,7 +47,7 @@ public class DataList<T extends DataListItem> {
         return firstPtr;
     }
 
-    @SuppressWarnings({ "unused" })
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public T last() {
         return lastPtr;
     }
diff --git a/src/main/java/zame/game/core/serializer/DataListItem.java b/android/src/main/java/zame/game/core/serializer/DataListItem.java
similarity index 100%
rename from src/main/java/zame/game/core/serializer/DataListItem.java
rename to android/src/main/java/zame/game/core/serializer/DataListItem.java
diff --git a/src/main/java/zame/game/core/serializer/DataReader.java b/android/src/main/java/zame/game/core/serializer/DataReader.java
similarity index 93%
rename from src/main/java/zame/game/core/serializer/DataReader.java
rename to android/src/main/java/zame/game/core/serializer/DataReader.java
index 503df86..0d6506d 100644
--- a/src/main/java/zame/game/core/serializer/DataReader.java
+++ b/android/src/main/java/zame/game/core/serializer/DataReader.java
@@ -1,6 +1,7 @@
 package zame.game.core.serializer;
 
 import android.util.SparseArray;
+
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.util.ArrayList;
@@ -9,8 +10,8 @@ import java.util.zip.CRC32;
 
 public class DataReader {
     private static class SignaturedObjectInputStream {
-        private ObjectInputStream is;
-        private CRC32 crc32 = new CRC32();
+        private final ObjectInputStream is;
+        private final CRC32 crc32 = new CRC32();
 
         SignaturedObjectInputStream(ObjectInputStream is) {
             this.is = is;
@@ -83,6 +84,7 @@ public class DataReader {
             return value;
         }
 
+        @SuppressWarnings("CharsetObjectCanBeUsed")
         String readUTF() throws IOException {
             String value = is.readUTF();
 
@@ -267,23 +269,23 @@ public class DataReader {
     }
 
     private static final DataReader emptyDataReader = new DataReader();
-    private SparseArray<Object> values = new SparseArray<>();
+    private final SparseArray<Object> values = new SparseArray<>();
 
     protected DataReader() {
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public boolean has(int fieldId) {
         return (values.get(fieldId) != null);
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void readItem(int fieldId, DataItem item) {
         Object val = values.get(fieldId);
         item.readFrom(val instanceof DataReader ? (DataReader)val : emptyDataReader);
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void readDataVector(int fieldId, DataVector<?> dataVector) {
         Object val = values.get(fieldId);
 
@@ -322,7 +324,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings({ "unused" })
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public <T extends DataItem> void readList(int fieldId, List<DataItem> resultList, Class<T> theClass) {
         Object val = values.get(fieldId);
         resultList.clear();
@@ -375,7 +377,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void readObjectArray(int fieldId, DataItem[] resList) {
         Object val = values.get(fieldId);
 
@@ -396,7 +398,7 @@ public class DataReader {
         return (val instanceof Number ? ((Number)val).byteValue() : def);
     }
 
-    @SuppressWarnings({ "WeakerAccess", "unused" })
+    @SuppressWarnings({ "WeakerAccess", "unused", "RedundantSuppression" })
     public byte readByte(int fieldId) {
         return readByte(fieldId, (byte)0);
     }
@@ -407,7 +409,7 @@ public class DataReader {
         return (val instanceof Number ? ((Number)val).shortValue() : def);
     }
 
-    @SuppressWarnings({ "WeakerAccess", "unused" })
+    @SuppressWarnings({ "WeakerAccess", "unused", "RedundantSuppression" })
     public short readShort(int fieldId) {
         return readShort(fieldId, (short)0);
     }
@@ -459,7 +461,7 @@ public class DataReader {
         return (val instanceof Number ? ((Number)val).doubleValue() : def);
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public double readDouble(int fieldId) {
         return readDouble(fieldId, 0.0);
     }
@@ -470,7 +472,7 @@ public class DataReader {
         return (val instanceof Character ? (Character)val : def);
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public char readChar(int fieldId) {
         return readChar(fieldId, ' ');
     }
@@ -480,12 +482,12 @@ public class DataReader {
         return (val instanceof String ? (String)val : def);
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public String readString(int fieldId) {
         return readString(fieldId, "");
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public byte[] readByteArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -508,7 +510,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public byte[] readByteArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -531,7 +533,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public short[] readShortArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -554,7 +556,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public short[] readShortArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -577,7 +579,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public int[] readIntArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -622,7 +624,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public long[] readLongArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -645,7 +647,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public long[] readLongArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -668,7 +670,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float[] readFloatArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -691,7 +693,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float[] readFloatArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -714,7 +716,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public boolean[] readBooleanArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -759,7 +761,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public double[] readDoubleArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -782,7 +784,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public double[] readDoubleArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -805,7 +807,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public char[] readCharArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -828,7 +830,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public char[] readCharArray(int fieldId, int minLength) {
         Object val = values.get(fieldId);
 
@@ -869,7 +871,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public byte[][] readByte2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -897,7 +899,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public byte[][] readByte2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -925,7 +927,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public short[][] readShort2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -953,7 +955,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public short[][] readShort2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -981,7 +983,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public int[][] readInt2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1036,7 +1038,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public long[][] readLong2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1064,7 +1066,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public long[][] readLong2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -1092,7 +1094,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float[][] readFloat2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1120,7 +1122,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float[][] readFloat2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -1148,7 +1150,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public boolean[][] readBoolean2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1176,7 +1178,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public boolean[][] readBoolean2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -1204,7 +1206,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public double[][] readDouble2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1232,7 +1234,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public double[][] readDouble2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -1260,7 +1262,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public char[][] readChar2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
@@ -1288,7 +1290,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public char[][] readChar2dArray(int fieldId, int minHeight, int minWidth) {
         Object val = values.get(fieldId);
 
@@ -1316,7 +1318,7 @@ public class DataReader {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public String[][] readString2dArray(int fieldId) {
         Object val = values.get(fieldId);
 
diff --git a/src/main/java/zame/game/core/serializer/DataUtils.java b/android/src/main/java/zame/game/core/serializer/DataUtils.java
similarity index 100%
rename from src/main/java/zame/game/core/serializer/DataUtils.java
rename to android/src/main/java/zame/game/core/serializer/DataUtils.java
diff --git a/src/main/java/zame/game/core/serializer/DataVector.java b/android/src/main/java/zame/game/core/serializer/DataVector.java
similarity index 100%
rename from src/main/java/zame/game/core/serializer/DataVector.java
rename to android/src/main/java/zame/game/core/serializer/DataVector.java
diff --git a/src/main/java/zame/game/core/serializer/DataWriter.java b/android/src/main/java/zame/game/core/serializer/DataWriter.java
similarity index 97%
rename from src/main/java/zame/game/core/serializer/DataWriter.java
rename to android/src/main/java/zame/game/core/serializer/DataWriter.java
index daa46d7..5afab0f 100644
--- a/src/main/java/zame/game/core/serializer/DataWriter.java
+++ b/android/src/main/java/zame/game/core/serializer/DataWriter.java
@@ -7,8 +7,8 @@ import java.util.zip.CRC32;
 
 public class DataWriter {
     private static class SignaturedObjectOutputStream {
-        private ObjectOutputStream os;
-        private CRC32 crc32 = new CRC32();
+        private final ObjectOutputStream os;
+        private final CRC32 crc32 = new CRC32();
 
         SignaturedObjectOutputStream(ObjectOutputStream os) {
             this.os = os;
@@ -69,6 +69,7 @@ public class DataWriter {
             os.writeShort(value);
         }
 
+        @SuppressWarnings("CharsetObjectCanBeUsed")
         void writeUTF(String value) throws IOException {
             try {
                 crc32.update(value.getBytes("UTF-8"));
@@ -92,7 +93,7 @@ public class DataWriter {
         SignaturedObjectOutputStream os = new SignaturedObjectOutputStream(oos);
         DataWriter writer = new DataWriter(os);
 
-        os.writeUTF(signature + "." + String.valueOf(version));
+        os.writeUTF(signature + "." + version);
         item.writeTo(writer);
         os.writeShort(DataUtils.MARKER_END);
         os.writeSignature();
@@ -103,7 +104,6 @@ public class DataWriter {
     }
 
     public void write(int fieldId, DataItem value) throws IOException {
-        //noinspection PointlessBitwiseExpression
         os.writeShort((DataUtils.TYPE_OBJECT << DataUtils.SHIFT_TYPE) | fieldId);
 
         value.writeTo(this);
@@ -159,7 +159,6 @@ public class DataWriter {
         if (list == null) {
             os.writeShort((DataUtils.TYPE_NULL << DataUtils.SHIFT_TYPE) | fieldId);
         } else {
-            //noinspection PointlessBitwiseExpression
             os.writeShort((DataUtils.TYPE_OBJECT << DataUtils.SHIFT_TYPE)
                     | (DataUtils.ARRAY_1D << DataUtils.SHIFT_ARRAY)
                     | fieldId);
@@ -176,7 +175,6 @@ public class DataWriter {
     }
 
     public void write(int fieldId, DataVector<?> list) throws IOException {
-        //noinspection PointlessBitwiseExpression
         os.writeShort((DataUtils.TYPE_OBJECT << DataUtils.SHIFT_TYPE) | (DataUtils.ARRAY_1D << DataUtils.SHIFT_ARRAY) | fieldId);
 
         int length = list.count;
@@ -189,7 +187,6 @@ public class DataWriter {
     }
 
     public <T extends DataListItem<T> & DataItem> void write(int fieldId, DataList<T> list) throws IOException {
-        //noinspection PointlessBitwiseExpression
         os.writeShort((DataUtils.TYPE_OBJECT << DataUtils.SHIFT_TYPE) | (DataUtils.ARRAY_1D << DataUtils.SHIFT_ARRAY) | fieldId);
 
         int length = list.count();
@@ -201,7 +198,7 @@ public class DataWriter {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void writeList(int fieldId, List<?> list) throws IOException {
         if (list == null) {
             os.writeShort((DataUtils.TYPE_NULL << DataUtils.SHIFT_TYPE) | fieldId);
@@ -225,7 +222,6 @@ public class DataWriter {
         if (list == null) {
             os.writeShort((DataUtils.TYPE_NULL << DataUtils.SHIFT_TYPE) | fieldId);
         } else {
-            //noinspection PointlessBitwiseExpression
             os.writeShort((DataUtils.TYPE_OBJECT << DataUtils.SHIFT_TYPE)
                     | (DataUtils.ARRAY_2DV << DataUtils.SHIFT_ARRAY)
                     | fieldId);
diff --git a/src/main/java/zame/game/core/serializer/UnknownSignatureException.java b/android/src/main/java/zame/game/core/serializer/UnknownSignatureException.java
similarity index 100%
rename from src/main/java/zame/game/core/serializer/UnknownSignatureException.java
rename to android/src/main/java/zame/game/core/serializer/UnknownSignatureException.java
diff --git a/src/main/java/zame/game/core/util/Common.java b/android/src/main/java/zame/game/core/util/Common.java
similarity index 90%
rename from src/main/java/zame/game/core/util/Common.java
rename to android/src/main/java/zame/game/core/util/Common.java
index 2d2a82b..a72a53e 100644
--- a/src/main/java/zame/game/core/util/Common.java
+++ b/android/src/main/java/zame/game/core/util/Common.java
@@ -7,51 +7,53 @@ import android.content.pm.ResolveInfo;
 import android.graphics.Bitmap;
 import android.graphics.Typeface;
 import android.net.Uri;
-import android.support.v4.content.res.ResourcesCompat;
 import android.util.Log;
 import android.util.TypedValue;
 import android.view.KeyEvent;
 import android.widget.Toast;
+
+import androidx.core.content.res.ResourcesCompat;
+
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URLEncoder;
 import java.util.List;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.flavour.config.AppConfig;
 
-// http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3_r1/android/os/FileUtils.java#FileUtils
-
 public final class Common {
     private Common() {}
 
     public static int dpToPx(Context context, int dp) {
-        return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,
+        return (int)TypedValue.applyDimension(
+                TypedValue.COMPLEX_UNIT_DIP,
                 dp,
                 context.getResources().getDisplayMetrics());
     }
 
-    /*
-    public static String getLocalizedAssetPath(AssetManager assetManager,
-            @SuppressWarnings("SameParameterValue") String pathTemplate) {
-
-        String path = String.format(Locale.US,
-                pathTemplate,
-                "-" + Locale.getDefault().getLanguage().toLowerCase(Locale.US));
-
-        try {
-            InputStream is = assetManager.open(path);
-            is.close();
-        } catch (Exception ex) {
-            path = String.format(Locale.US, pathTemplate, "");
-        }
-
-        return "file:///android_asset/" + path;
-    }
-    */
-
-    @SuppressWarnings("UnusedReturnValue")
+    // public static String getLocalizedAssetPath(
+    //         AssetManager assetManager,
+    //         @SuppressWarnings("SameParameterValue") String pathTemplate) {
+    //
+    //     String path = String.format(
+    //             Locale.US,
+    //             pathTemplate,
+    //             "-" + Locale.getDefault().getLanguage().toLowerCase(Locale.US));
+    //
+    //     try {
+    //         InputStream is = assetManager.open(path);
+    //         is.close();
+    //     } catch (Exception ex) {
+    //         path = String.format(Locale.US, pathTemplate, "");
+    //     }
+    //
+    //     return "file:///android_asset/" + path;
+    // }
+
+    @SuppressWarnings({ "UnusedReturnValue", "unused", "RedundantSuppression" })
     public static boolean openBrowser(Context context, String uri) {
         final String[] appPackageNames = { "com.android.chrome", "com.android.browser", };
 
@@ -100,7 +102,8 @@ public final class Common {
         openExternalIntent(context, intent, true);
     }
 
-    private static void openExternalIntent(Context context,
+    private static void openExternalIntent(
+            Context context,
             Intent intent,
             @SuppressWarnings("SameParameterValue") boolean logExceptions) {
 
diff --git a/src/main/java/zame/game/core/util/IntentProvider.java b/android/src/main/java/zame/game/core/util/IntentProvider.java
similarity index 89%
rename from src/main/java/zame/game/core/util/IntentProvider.java
rename to android/src/main/java/zame/game/core/util/IntentProvider.java
index a4cfdb9..5abf594 100644
--- a/src/main/java/zame/game/core/util/IntentProvider.java
+++ b/android/src/main/java/zame/game/core/util/IntentProvider.java
@@ -3,6 +3,7 @@ package zame.game.core.util;
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+
 import zame.game.R;
 
 public final class IntentProvider {
@@ -75,14 +76,14 @@ public final class IntentProvider {
 
         if (intent == null) {
             intent = new Intent(Intent.ACTION_VIEW,
-                    Uri.parse("http://m.facebook.com/sharer.php?u=" + Common.urlEncode(url)));
+                    Uri.parse("https://m.facebook.com/sharer.php?u=" + Common.urlEncode(url)));
         }
 
         return intent;
     }
 
     public static Intent getVkShareIntent(Context context, String title, String url) {
-        return new Intent(Intent.ACTION_VIEW, Uri.parse("http://vk.com/share.php?url=" + Common.urlEncode(url)));
+        return new Intent(Intent.ACTION_VIEW, Uri.parse("https://vk.com/share.php?url=" + Common.urlEncode(url)));
     }
 
     public static Intent getEmailIntent(Context context, String email, String subject, String body) {
@@ -95,8 +96,10 @@ public final class IntentProvider {
     */
 
     public static Intent getEmailIntent(Context context, String email) {
-        Intent intent = new Intent(Intent.ACTION_SENDTO,
-                Uri.fromParts("mailto", email, null)).putExtra(Intent.EXTRA_SUBJECT,
+        Intent intent = new Intent(
+                Intent.ACTION_SENDTO,
+                Uri.fromParts("mailto", email, null)).putExtra(
+                Intent.EXTRA_SUBJECT,
                 context.getString(R.string.core_app_name));
 
         return Intent.createChooser(intent, context.getString(R.string.core_send_email_using));
diff --git a/src/main/java/zame/game/core/widget/AbsoluteLayout.java b/android/src/main/java/zame/game/core/widget/AbsoluteLayout.java
similarity index 97%
rename from src/main/java/zame/game/core/widget/AbsoluteLayout.java
rename to android/src/main/java/zame/game/core/widget/AbsoluteLayout.java
index c4ab098..a77c766 100644
--- a/src/main/java/zame/game/core/widget/AbsoluteLayout.java
+++ b/android/src/main/java/zame/game/core/widget/AbsoluteLayout.java
@@ -22,6 +22,7 @@ import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.RemoteViews.RemoteView;
+
 import zame.game.R;
 
 @RemoteView
@@ -76,7 +77,8 @@ public class AbsoluteLayout extends WeightedLayout {
                 int childWidth = child.getMeasuredWidth();
                 int childHeight = child.getMeasuredHeight();
 
-                int childLeft = myPaddingLeft + calcChildPosition(myWidth,
+                int childLeft = myPaddingLeft + calcChildPosition(
+                        myWidth,
                         mWidthWeightSum,
                         lp.x,
                         lp.xWeight,
@@ -84,7 +86,8 @@ public class AbsoluteLayout extends WeightedLayout {
                         lp.rxWeight,
                         childWidth);
 
-                int childTop = myPaddingTop + calcChildPosition(myHeight,
+                int childTop = myPaddingTop + calcChildPosition(
+                        myHeight,
                         mHeightWeightSum,
                         lp.y,
                         lp.yWeight,
@@ -113,7 +116,8 @@ public class AbsoluteLayout extends WeightedLayout {
         return new LayoutParams(p);
     }
 
-    protected int calcChildPosition(int mySize,
+    protected int calcChildPosition(
+            int mySize,
             float myWeightSum,
             int childPosition,
             float startPosWeight,
@@ -136,13 +140,15 @@ public class AbsoluteLayout extends WeightedLayout {
     }
 
     protected void myMeasureChild(View child, LayoutParams lp) {
-        final int childWidthMeasureSpec = myGetChildMeasureSpec(myWidth,
+        final int childWidthMeasureSpec = myGetChildMeasureSpec(
+                myWidth,
                 mWidthWeightSum,
                 myPaddingLeft + myPaddingRight,
                 lp.width,
                 lp.widthWeight);
 
-        final int childHeightMeasureSpec = myGetChildMeasureSpec(myHeight,
+        final int childHeightMeasureSpec = myGetChildMeasureSpec(
+                myHeight,
                 mHeightWeightSum,
                 myPaddingTop + myPaddingBottom,
                 lp.height,
@@ -151,7 +157,8 @@ public class AbsoluteLayout extends WeightedLayout {
         child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
     }
 
-    public static int myGetChildMeasureSpec(int mySize,
+    public static int myGetChildMeasureSpec(
+            int mySize,
             float myWeightSum,
             int myPadding,
             int childDimension,
diff --git a/src/main/java/zame/game/core/widget/FrameLayout.java b/android/src/main/java/zame/game/core/widget/FrameLayout.java
similarity index 96%
rename from src/main/java/zame/game/core/widget/FrameLayout.java
rename to android/src/main/java/zame/game/core/widget/FrameLayout.java
index ba66110..7e86d5c 100644
--- a/src/main/java/zame/game/core/widget/FrameLayout.java
+++ b/android/src/main/java/zame/game/core/widget/FrameLayout.java
@@ -5,6 +5,7 @@ import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.animation.AnimationUtils;
 import android.view.animation.LayoutAnimationController;
+
 import zame.game.App;
 import zame.game.R;
 
@@ -42,7 +43,8 @@ public class FrameLayout extends android.widget.FrameLayout {
     public void updateRotateScreen(boolean rotation) {
         rotateScreen = rotation;
 
-        setLayoutAnimation(new LayoutAnimationController(AnimationUtils.loadAnimation(getContext(),
+        setLayoutAnimation(new LayoutAnimationController(AnimationUtils.loadAnimation(
+                getContext(),
                 rotateScreen ? R.anim.rotation : R.anim.no_rotation), 0));
     }
 
diff --git a/src/main/java/zame/game/core/widget/GLSurfaceView21.java b/android/src/main/java/zame/game/core/widget/GLSurfaceView21.java
similarity index 99%
rename from src/main/java/zame/game/core/widget/GLSurfaceView21.java
rename to android/src/main/java/zame/game/core/widget/GLSurfaceView21.java
index 247f041..ccdd76b 100644
--- a/src/main/java/zame/game/core/widget/GLSurfaceView21.java
+++ b/android/src/main/java/zame/game/core/widget/GLSurfaceView21.java
@@ -15,8 +15,8 @@
  */
 
 // I'm sick of various "eglSwapBuffers failed", "eglCreateContext failed", etc... in android >= 2.2
-// I used to think that there is deadlock somewhere in my code,
-// but today I found http://groups.google.com/group/android-developers/browse_thread/thread/fc5482b800bc925d
+// I used to think that there is deadlock somewhere in my code, but I found discussion
+// in the Android Developers Google Group (as of 2020-11-09 thread is not available anymore),
 // so I decide make an easy fix and just use GLSurfaceView from android 2.1
 
 package zame.game.core.widget;
diff --git a/src/main/java/zame/game/core/widget/WeightedLayout.java b/android/src/main/java/zame/game/core/widget/WeightedLayout.java
similarity index 94%
rename from src/main/java/zame/game/core/widget/WeightedLayout.java
rename to android/src/main/java/zame/game/core/widget/WeightedLayout.java
index 184979e..6523d7a 100644
--- a/src/main/java/zame/game/core/widget/WeightedLayout.java
+++ b/android/src/main/java/zame/game/core/widget/WeightedLayout.java
@@ -8,6 +8,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.RemoteViews.RemoteView;
 import android.widget.TextView;
+
 import zame.game.R;
 
 @RemoteView
@@ -77,22 +78,22 @@ public abstract class WeightedLayout extends ViewGroup {
         a.recycle();
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float getWidthWeightSum() {
         return mWidthWeightSum;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void setWidthWeightSum(float widthWeightSum) {
         mWidthWeightSum = widthWeightSum;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float getHeightWeightSum() {
         return mHeightWeightSum;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void setHeightWeightSum(float heightWeightSum) {
         mHeightWeightSum = heightWeightSum;
     }
@@ -139,7 +140,8 @@ public abstract class WeightedLayout extends ViewGroup {
         float textSizeWeight = lp.getTextSizeWeight();
 
         if (textSizeWeight > 0.0f && (child instanceof TextView)) {
-            ((TextView)child).setTextSize(TypedValue.COMPLEX_UNIT_PX,
+            ((TextView)child).setTextSize(
+                    TypedValue.COMPLEX_UNIT_PX,
                     (float)myHeight / mHeightWeightSum * textSizeWeight);
         }
 
diff --git a/src/main/java/zame/game/engine/Config.java b/android/src/main/java/zame/game/engine/Config.java
similarity index 92%
rename from src/main/java/zame/game/engine/Config.java
rename to android/src/main/java/zame/game/engine/Config.java
index bb8e21c..6a9fe5b 100644
--- a/src/main/java/zame/game/engine/Config.java
+++ b/android/src/main/java/zame/game/engine/Config.java
@@ -1,6 +1,7 @@
 package zame.game.engine;
 
 import android.view.KeyEvent;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.manager.PreferencesManager;
@@ -41,7 +42,8 @@ public class Config implements EngineObject {
         }
     }
 
-    private float getAccel(int value,
+    private float getAccel(
+            int value,
             @SuppressWarnings("SameParameterValue") int valueMin,
             int valueMid,
             int valueMax,
@@ -62,11 +64,12 @@ public class Config implements EngineObject {
         }
     }
 
-    @SuppressWarnings("MagicNumber")
+    @SuppressWarnings({ "MagicNumber", "ExplicitArrayFilling" })
     public void reload() {
         PreferencesManager preferences = App.self.preferences;
 
-        String controlSchemeStr = preferences.getString(R.string.key_controls_scheme,
+        String controlSchemeStr = preferences.getString(
+                R.string.key_controls_scheme,
                 R.string.val_scheme_static_move_pad);
 
         if (App.self.getString(R.string.val_scheme_free_move_pad).equals(controlSchemeStr)) {
@@ -86,7 +89,8 @@ public class Config implements EngineObject {
         accelerometerEnabled = preferences.getBoolean(R.string.key_accelerometer_enabled);
         accelerometerAcceleration = (float)preferences.getInt(R.string.key_accelerometer_acceleration, 5);
 
-        trackballAcceleration = getAccel(preferences.getInt(R.string.key_trackball_acceleration, 5),
+        trackballAcceleration = getAccel(
+                preferences.getInt(R.string.key_trackball_acceleration, 5),
                 1,
                 5,
                 9,
diff --git a/src/main/java/zame/game/engine/Engine.java b/android/src/main/java/zame/game/engine/Engine.java
similarity index 75%
rename from src/main/java/zame/game/engine/Engine.java
rename to android/src/main/java/zame/game/engine/Engine.java
index 8406088..3a79054 100644
--- a/src/main/java/zame/game/engine/Engine.java
+++ b/android/src/main/java/zame/game/engine/Engine.java
@@ -2,9 +2,12 @@ package zame.game.engine;
 
 import android.os.SystemClock;
 import android.text.TextUtils;
+
 import java.io.File;
 import java.util.Random;
+
 import javax.microedition.khronos.opengles.GL10;
+
 import zame.game.App;
 import zame.game.core.util.Common;
 import zame.game.engine.controller.HeroController;
@@ -22,6 +25,7 @@ import zame.game.engine.visual.GameOver;
 import zame.game.engine.visual.Overlay;
 import zame.game.engine.visual.Stats;
 import zame.game.engine.visual.Weapons;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.main.MainActivity;
 import zame.game.feature.sound.SoundManager;
 import zame.game.flavour.config.AppConfig;
@@ -54,7 +58,7 @@ public class Engine {
     public State state = new State();
     public Labels labels = new Labels();
     public Overlay overlay = new Overlay();
-    private TextureLoader textureLoader = new TextureLoader();
+    private final TextureLoader textureLoader = new TextureLoader();
     public Level level = new Level();
     public Weapons weapons = new Weapons();
     public Renderer renderer = new Renderer();
@@ -86,10 +90,11 @@ public class Engine {
 
     private int fpsFrames;
     private long fpsPrevRenderTime;
-    private int[] fpsList = new int[FPS_AVG_LEN];
+    private final int[] fpsList = new int[FPS_AVG_LEN];
     private int fpsCurrentIndex;
 
     private boolean isInterstitialPending;
+    private boolean shouldShowInterstitial;
     private long lastInterstitialShownAt;
     public boolean canShowRewardedVideo;
 
@@ -98,6 +103,45 @@ public class Engine {
     public float heroSn; // sin of angle
     boolean showFps;
 
+    public int gameMenuPendingStep;
+
+    private final Runnable showGameMenuRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (activity != null) {
+                activity.gameFragment.showGameMenu();
+            }
+        }
+    };
+
+    private final Runnable showSelectEpisodeRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (activity == null) {
+                return;
+            }
+
+            activity.showFragment(activity.selectEpisodeFragment);
+
+            if (shouldShowInterstitial) {
+                isInterstitialPending = false;
+                lastInterstitialShownAt = SystemClock.elapsedRealtime();
+                App.self.mediadtor.showInterstitial(activity);
+            }
+        }
+    };
+
+    private final Runnable showRewardedVideoRunnable = new Runnable() {
+        @Override
+        public void run() {
+            if (activity != null) {
+                lastInterstitialShownAt = SystemClock.elapsedRealtime();
+                App.self.tracker.trackEvent(EventsConfig.EV_GAME_GAME_OVER_REWARDED_SHOWN);
+                App.self.mediadtor.showRewardedVideo(activity);
+            }
+        }
+    };
+
     public Engine(MainActivity activity) {
         this.activity = activity;
         inWallpaperMode = (activity == null);
@@ -139,7 +183,9 @@ public class Engine {
     }
 
     public void updateAfterLevelLoadedOrCreated() {
-        canShowRewardedVideo = (profile.getLevel(state.levelName).adLevel >= ProfileLevel.AD_REWARDED);
+        canShowRewardedVideo = App.self.mediadtor.isRewardedVideoEnabled() &&
+                (profile.getLevel(state.levelName).adLevel >= ProfileLevel.AD_REWARDED);
+
         level.updateAfterLevelLoadedOrCreated();
         levelRenderer.updateAfterLevelLoadedOrCreated();
         heroController.updateAfterLevelLoadedOrCreated();
@@ -183,74 +229,64 @@ public class Engine {
 
     public void changeView(int viewType) {
         switch (viewType) {
-            case VIEW_TYPE_GAME_MENU:
-                if (activity != null) {
-                    activity.gameFragment.showGameMenu();
-                }
+            case VIEW_TYPE_GAME_MENU: {
+                gameMenuPendingStep = 1;
                 break;
+            }
 
-            case VIEW_TYPE_SELECT_EPISODE:
-                if (activity != null) {
-                    gameViewActive = false;
-                    renderBlackScreen = true;
-
-                    String prevLevelName = profile.getLevel(state.levelName).getPrevLevelName();
-                    ProfileLevel prevProfileLevel = profile.getLevel(prevLevelName);
-
-                    boolean shouldShowInterstitial = (isInterstitialPending
-                            || prevProfileLevel.adLevel >= ProfileLevel.AD_INTERSTITIAL);
-
-                    long lastShowInterval = SystemClock.elapsedRealtime() - lastInterstitialShownAt;
-
-                    if (shouldShowInterstitial && (!App.self.mediadtor.isInterstitialLoaded()
-                            || lastShowInterval < INTERSTITIAL_MIN_INTERVAL_MS)) {
-
-                        shouldShowInterstitial = false;
-                        isInterstitialPending = true;
-                    }
-
-                    if (AppConfig.DEBUG) {
-                        Common.log("Interstitial: prevLevelName = "
-                                + prevLevelName
-                                + ", adLevel = "
-                                + prevProfileLevel.adLevel
-                                + ", isInterstitialPending = "
-                                + isInterstitialPending
-                                + ", isInterstitialLoaded = "
-                                + App.self.mediadtor.isInterstitialLoaded()
-                                + ", lastShowInterval = "
-                                + lastShowInterval
-                                + " (INTERSTITIAL_MIN_INTERVAL_MS = "
-                                + INTERSTITIAL_MIN_INTERVAL_MS
-                                + "), shouldShowInterstitial = "
-                                + shouldShowInterstitial);
-                    }
-
-                    if (shouldShowInterstitial) {
-                        forceStateSave();
-                    }
-
-                    activity.showFragment(activity.selectEpisodeFragment);
-
-                    if (shouldShowInterstitial) {
-                        isInterstitialPending = false;
-                        lastInterstitialShownAt = SystemClock.elapsedRealtime();
-                        App.self.mediadtor.showInterstitial(activity);
-                    }
-                } else {
-                    createdTexturesCount = 0; // WHY?
+            case VIEW_TYPE_SELECT_EPISODE: {
+                gameViewActive = false;
+                renderBlackScreen = true;
+
+                String prevLevelName = profile.getLevel(state.levelName).getPrevLevelName();
+                ProfileLevel prevProfileLevel = profile.getLevel(prevLevelName);
+
+                shouldShowInterstitial = (isInterstitialPending
+                        || prevProfileLevel.adLevel >= ProfileLevel.AD_INTERSTITIAL);
+
+                long lastShowInterval = SystemClock.elapsedRealtime() - lastInterstitialShownAt;
+
+                if (shouldShowInterstitial && (!App.self.mediadtor.isInterstitialLoaded()
+                        || lastShowInterval < INTERSTITIAL_MIN_INTERVAL_MS)) {
+
+                    shouldShowInterstitial = false;
+                    isInterstitialPending = true;
+                }
+
+                if (AppConfig.DEBUG) {
+                    Common.log("Interstitial: prevLevelName = "
+                            + prevLevelName
+                            + ", adLevel = "
+                            + prevProfileLevel.adLevel
+                            + ", isInterstitialPending = "
+                            + isInterstitialPending
+                            + ", isInterstitialLoaded = "
+                            + App.self.mediadtor.isInterstitialLoaded()
+                            + ", lastShowInterval = "
+                            + lastShowInterval
+                            + " (INTERSTITIAL_MIN_INTERVAL_MS = "
+                            + INTERSTITIAL_MIN_INTERVAL_MS
+                            + "), shouldShowInterstitial = "
+                            + shouldShowInterstitial);
+                }
+
+                if (shouldShowInterstitial) {
+                    forceStateSave();
                 }
+
+                App.self.handler.post(showSelectEpisodeRunnable);
                 break;
+            }
 
-            case VIEW_TYPE_REWARDED_VIDEO:
+            case VIEW_TYPE_REWARDED_VIDEO: {
                 if (activity != null && App.self.mediadtor.isRewardedVideoLoaded()) {
                     forceStateSave();
-                    lastInterstitialShownAt = SystemClock.elapsedRealtime();
-                    App.self.mediadtor.showRewardedVideo(activity);
+                    App.self.handler.post(showRewardedVideoRunnable);
                 } else {
                     game.loadLevel(Game.LOAD_LEVEL_NORMAL);
                 }
                 break;
+            }
         }
     }
 
@@ -281,6 +317,7 @@ public class Engine {
         }
     }
 
+    @SuppressWarnings("ManualMinMaxCalculation")
     public void onSurfaceChanged(GL10 gl, int width, int height) {
         this.screenWidth = (width < 1 ? 1 : width); // just for case
         this.screenHeight = (height < 1 ? 1 : height); // just for case
@@ -314,6 +351,7 @@ public class Engine {
 
         if (isPaused) {
             isPaused = false;
+            gameMenuPendingStep = 0;
             elapsedTime = state.tempElapsedTime;
             lastTime = state.tempLastTime;
             startTime = SystemClock.elapsedRealtime() - elapsedTime;
@@ -336,15 +374,25 @@ public class Engine {
 
     public void onDrawFrame(GL10 gl) {
         //noinspection MagicNumber
-        if (isPaused && (SystemClock.elapsedRealtime() - pausedTime) < 1000L) {
+        if (isPaused && gameMenuPendingStep < 0 && (SystemClock.elapsedRealtime() - pausedTime) < 250L) {
             // Fix visual glitch when game menu appears
             return;
         }
 
         renderer.onDrawFrame(gl);
 
-        if (isPaused) {
+        if (isPaused || gameMenuPendingStep > 0) {
             render(gl);
+
+            // 2 rendered frames should be enough
+            if (gameMenuPendingStep >= 2) {
+                onPause(); // force pause
+                gameMenuPendingStep = -1;
+                App.self.handler.post(showGameMenuRunnable);
+            } else if (gameMenuPendingStep > 0) {
+                gameMenuPendingStep++;
+            }
+
             return;
         }
 
@@ -440,9 +488,9 @@ public class Engine {
             renderDimLayer();
         }
 
-        // http://stackoverflow.com/questions/10729352/framebuffer-fbo-render-to-texture-is-very-slow-using-opengl-es-2-0-on-android
+        // https://stackoverflow.com/questions/10729352/framebuffer-fbo-render-to-texture-is-very-slow-using-opengl-es-2-0-on-android
         // http://www.java2s.com/Code/Android/File/DemonstratetheFrameBufferObjectOpenGLESextension.htm
-        // http://www.gamedev.net/topic/590324-fbo-set-up-on-android/
+        // https://www.gamedev.net/forums/topic/590324-fbo-set-up-on-android/
 
         if (renderToTexture) {
             renderer.finishRenderToTexture(width, height);
@@ -468,7 +516,8 @@ public class Engine {
         renderer.setColorQuadRGBA(1.0f, 1.0f, 1.0f, 1.0f);
 
         //noinspection MagicNumber
-        labels.batch(-ratio + 0.01f,
+        labels.batch(
+                -ratio + 0.01f,
                 -1.0f + 0.01f,
                 ratio,
                 1.0f,
diff --git a/src/main/java/zame/game/engine/EngineObject.java b/android/src/main/java/zame/game/engine/EngineObject.java
similarity index 100%
rename from src/main/java/zame/game/engine/EngineObject.java
rename to android/src/main/java/zame/game/engine/EngineObject.java
diff --git a/src/main/java/zame/game/engine/Game.java b/android/src/main/java/zame/game/engine/Game.java
similarity index 96%
rename from src/main/java/zame/game/engine/Game.java
rename to android/src/main/java/zame/game/engine/Game.java
index 6fcf1fb..2ccba8d 100644
--- a/src/main/java/zame/game/engine/Game.java
+++ b/android/src/main/java/zame/game/engine/Game.java
@@ -1,6 +1,7 @@
 package zame.game.engine;
 
 import android.text.TextUtils;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.util.Common;
@@ -27,6 +28,7 @@ import zame.game.engine.visual.GameOver;
 import zame.game.engine.visual.Overlay;
 import zame.game.engine.visual.Weapons;
 import zame.game.feature.achievements.Achievements;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 import zame.game.flavour.config.GameConfig;
 
@@ -144,10 +146,6 @@ public class Game implements EngineObject {
         if (TextUtils.isEmpty(savedGameParam)) {
             loadLevel(LOAD_LEVEL_NORMAL);
             playStartLevelSound = true;
-
-            if (State.LEVEL_INITIAL.equals(state.levelName)) {
-                App.self.tracker.trackEvent("JustStarted");
-            }
         } else {
             int result = state.load(savedGameParam);
 
@@ -312,6 +310,13 @@ public class Game implements EngineObject {
         }
 
         if (loadLevelType != LOAD_LEVEL_JUST_NEXT_NAME) {
+            // This event is very inaccurate (because just after that Episode Selector will be shown,
+            // and user can go away, and load this level later, also this event also counts level restarts).
+
+            if (!engine.inWallpaperMode) {
+                App.self.tracker.trackEvent(EventsConfig.EV_GAME_LEVEL_STARTED, state.levelName);
+            }
+
             reload();
             state.mustReload = false;
 
@@ -354,7 +359,13 @@ public class Game implements EngineObject {
         renderMode = RENDER_MODE_GAME_OVER;
         engine.heroController.reload(); // To properly show / hide "resurrect" button
 
-        App.self.tracker.trackEvent("GameOver", state.levelName);
+        App.self.tracker.trackEvent(EventsConfig.EV_GAME_GAME_OVER, state.levelName);
+
+        App.self.tracker.trackEvent(
+                EventsConfig.EV_GAME_GAME_OVER_REWARDED_STATE,
+                App.self.mediadtor.isRewardedVideoLoaded()
+                        ? EventsConfig.PAR_REWARDED_STATE_AVAILABLE
+                        : EventsConfig.PAR_REWARDED_STATE_NOT_AVAILABLE);
     }
 
     private void showEndLevelScreen() {
@@ -364,7 +375,7 @@ public class Game implements EngineObject {
             return;
         }
 
-        App.self.tracker.trackEvent("LevelCompleted", state.levelName);
+        App.self.tracker.trackEvent(EventsConfig.EV_GAME_LEVEL_FINISHED, state.levelName);
 
         loadLevel(LOAD_LEVEL_JUST_NEXT_NAME);
         renderMode = RENDER_MODE_END_LEVEL;
@@ -400,7 +411,8 @@ public class Game implements EngineObject {
             profile.save(engine.activity);
         }
 
-        endLevel.init((state.totalMonsters == 0 ? -1 : (state.killedMonsters * 100 / state.totalMonsters)),
+        endLevel.init(
+                (state.totalMonsters == 0 ? -1 : (state.killedMonsters * 100 / state.totalMonsters)),
                 (state.totalSecrets == 0 ? -1 : (state.foundSecrets * 100 / state.totalSecrets)),
                 (state.timeInTicks / Engine.FRAMES_PER_SECOND));
     }
@@ -429,7 +441,8 @@ public class Game implements EngineObject {
 
         if (!state.godMode && nextLevelTime == 0) {
             if (state.heroArmor > 0) {
-                state.heroArmor = Math.max(0,
+                state.heroArmor = Math.max(
+                        0,
                         state.heroArmor - Math.max(1, (int)((double)hits * GameConfig.ARMOR_HIT_TAKER)));
 
                 state.heroHealth -= Math.max(1, (int)((double)hits * GameConfig.ARMOR_HEALTH_SAVER));
@@ -617,7 +630,8 @@ public class Game implements EngineObject {
             state.heroArmor = Math.min(GameConfig.ARMOR_MAX, state.heroArmor + GameConfig.ARMOR_ADD_GREEN);
 
             if (state.heroHasWeapon[Weapons.WEAPON_PISTOL] || state.heroHasWeapon[Weapons.WEAPON_DBLPISTOL]) {
-                state.heroAmmo[Weapons.AMMO_CLIP] = Math.min(GameConfig.AMMO_MAX_CLIP,
+                state.heroAmmo[Weapons.AMMO_CLIP] = Math.min(
+                        GameConfig.AMMO_MAX_CLIP,
                         state.heroAmmo[Weapons.AMMO_CLIP] + GameConfig.AMMO_ADD_CBOX);
             }
 
@@ -625,7 +639,8 @@ public class Game implements EngineObject {
                     || state.heroHasWeapon[Weapons.WEAPON_TMP]
                     || state.heroHasWeapon[Weapons.WEAPON_WINCHESTER]) {
 
-                state.heroAmmo[Weapons.AMMO_SHELL] = Math.min(GameConfig.AMMO_MAX_SHELL,
+                state.heroAmmo[Weapons.AMMO_SHELL] = Math.min(
+                        GameConfig.AMMO_MAX_SHELL,
                         state.heroAmmo[Weapons.AMMO_SHELL] + GameConfig.AMMO_ADD_SBOX);
             }
 
@@ -686,7 +701,6 @@ public class Game implements EngineObject {
                 state.bullets.release(bullet);
             }
 
-            //noinspection AssignmentToForLoopParameter
             bullet = nextBullet;
         }
 
@@ -697,7 +711,6 @@ public class Game implements EngineObject {
                 state.explosions.release(explosion);
             }
 
-            //noinspection AssignmentToForLoopParameter
             explosion = nextExplosion;
         }
 
@@ -711,7 +724,6 @@ public class Game implements EngineObject {
                 timeout.delay--;
             }
 
-            //noinspection AssignmentToForLoopParameter
             timeout = nextTimeout;
         }
 
@@ -723,7 +735,6 @@ public class Game implements EngineObject {
                 state.lookPoints.release(lookPoint);
             }
 
-            //noinspection AssignmentToForLoopParameter
             lookPoint = nextLookPoint;
         }
 
@@ -815,9 +826,7 @@ public class Game implements EngineObject {
             int tex = container.get(i);
 
             if (!shouldPickOneObject(tex)) {
-                //noinspection AssignmentToForLoopParameter
                 i++;
-
                 continue;
             }
 
@@ -1142,7 +1151,8 @@ public class Game implements EngineObject {
             engine.stats.render();
 
             if (renderMode == RENDER_MODE_GAME) {
-                heroController.render(true,
+                heroController.render(
+                        true,
                         (firstTouchTime >= 0 ? firstTouchTime : engine.elapsedTime));
             }
         }
diff --git a/src/main/java/zame/game/engine/controller/HeroController.java b/android/src/main/java/zame/game/engine/controller/HeroController.java
similarity index 87%
rename from src/main/java/zame/game/engine/controller/HeroController.java
rename to android/src/main/java/zame/game/engine/controller/HeroController.java
index 0f1f60d..b6a9706 100644
--- a/src/main/java/zame/game/engine/controller/HeroController.java
+++ b/android/src/main/java/zame/game/engine/controller/HeroController.java
@@ -1,10 +1,12 @@
 package zame.game.engine.controller;
 
 import android.view.MotionEvent;
+
 import zame.game.engine.EngineObject;
 
 public abstract class HeroController implements EngineObject {
-    public static HeroController newInstance(@SuppressWarnings("unused") boolean isWallpaper) {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public static HeroController newInstance(boolean isWallpaper) {
         return new HeroControllerHuman();
     }
 
diff --git a/src/main/java/zame/game/engine/controller/HeroControllerHuman.java b/android/src/main/java/zame/game/engine/controller/HeroControllerHuman.java
similarity index 89%
rename from src/main/java/zame/game/engine/controller/HeroControllerHuman.java
rename to android/src/main/java/zame/game/engine/controller/HeroControllerHuman.java
index 302c63a..260ca74 100644
--- a/src/main/java/zame/game/engine/controller/HeroControllerHuman.java
+++ b/android/src/main/java/zame/game/engine/controller/HeroControllerHuman.java
@@ -1,6 +1,7 @@
 package zame.game.engine.controller;
 
 import android.view.MotionEvent;
+
 import zame.game.engine.Engine;
 import zame.game.engine.controls.AccelerometerController;
 import zame.game.engine.controls.KeysController;
@@ -8,9 +9,9 @@ import zame.game.engine.visual.Controls;
 
 public class HeroControllerHuman extends HeroController {
     private Engine engine;
-    private Controls controls = new Controls();
-    private AccelerometerController accelerometerController = new AccelerometerController();
-    private KeysController keysController = new KeysController();
+    private final Controls controls = new Controls();
+    private final AccelerometerController accelerometerController = new AccelerometerController();
+    private final KeysController keysController = new KeysController();
 
     @Override
     public void onCreate(Engine engine) {
diff --git a/src/main/java/zame/game/engine/controls/AccelerometerController.java b/android/src/main/java/zame/game/engine/controls/AccelerometerController.java
similarity index 88%
rename from src/main/java/zame/game/engine/controls/AccelerometerController.java
rename to android/src/main/java/zame/game/engine/controls/AccelerometerController.java
index fda7b20..974c1a0 100644
--- a/src/main/java/zame/game/engine/controls/AccelerometerController.java
+++ b/android/src/main/java/zame/game/engine/controls/AccelerometerController.java
@@ -23,7 +23,8 @@ public class AccelerometerController implements EngineObject {
         accelerometerX = 0.0f;
     }
 
-    public void setAccelerometerValues(float accelerometerX, @SuppressWarnings("unused") float accelerometerY) {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public void setAccelerometerValues(float accelerometerX, float accelerometerY) {
         this.accelerometerX = accelerometerX;
     }
 
diff --git a/src/main/java/zame/game/engine/controls/KeysController.java b/android/src/main/java/zame/game/engine/controls/KeysController.java
similarity index 96%
rename from src/main/java/zame/game/engine/controls/KeysController.java
rename to android/src/main/java/zame/game/engine/controls/KeysController.java
index e3259e3..f446e30 100644
--- a/src/main/java/zame/game/engine/controls/KeysController.java
+++ b/android/src/main/java/zame/game/engine/controls/KeysController.java
@@ -2,6 +2,7 @@ package zame.game.engine.controls;
 
 import android.view.KeyEvent;
 import android.view.MotionEvent;
+
 import zame.game.engine.Config;
 import zame.game.engine.Engine;
 import zame.game.engine.EngineObject;
@@ -44,10 +45,10 @@ public class KeysController implements EngineObject {
     private float trackballX;
     private float trackballY;
     private int trackballActionsMask;
-    private float[] relativeOffset = new float[Controls.MASK_MAX];
+    private final float[] relativeOffset = new float[Controls.MASK_MAX];
     private int actionsMask;
 
-    private ControlAcceleration[] accelerations = { new ControlAcceleration(), // ACCELERATION_MOVE
+    private final ControlAcceleration[] accelerations = { new ControlAcceleration(), // ACCELERATION_MOVE
             new ControlAcceleration(), // ACCELERATION_STRAFE
             new ControlAcceleration(), // ACCELERATION_ROTATE
     };
@@ -178,7 +179,8 @@ public class KeysController implements EngineObject {
         }
 
         if (accelerations[ACCELERATION_MOVE].active() && (state.disabledControlsMask & Controls.CONTROL_MOVE) == 0) {
-            game.updateHeroPosition(engine.heroCs,
+            game.updateHeroPosition(
+                    engine.heroCs,
                     -engine.heroSn,
                     accelerations[ACCELERATION_MOVE].value * 0.2f * config.moveSpeed);
 
@@ -186,7 +188,8 @@ public class KeysController implements EngineObject {
         }
 
         if (accelerations[ACCELERATION_STRAFE].active() && (state.disabledControlsMask & Controls.CONTROL_MOVE) == 0) {
-            game.updateHeroPosition(engine.heroSn,
+            game.updateHeroPosition(
+                    engine.heroSn,
                     engine.heroCs,
                     accelerations[ACCELERATION_STRAFE].value * 0.2f * config.strafeSpeed);
 
diff --git a/src/main/java/zame/game/engine/controls/OnScreenButton.java b/android/src/main/java/zame/game/engine/controls/OnScreenButton.java
similarity index 89%
rename from src/main/java/zame/game/engine/controls/OnScreenButton.java
rename to android/src/main/java/zame/game/engine/controls/OnScreenButton.java
index 961088d..cd01cc2 100644
--- a/src/main/java/zame/game/engine/controls/OnScreenButton.java
+++ b/android/src/main/java/zame/game/engine/controls/OnScreenButton.java
@@ -13,7 +13,7 @@ public class OnScreenButton extends OnScreenController {
     public static final int TYPE_REWARDED_CONTINUE = 3;
 
     public boolean isVisible = true;
-    private int type;
+    private final int type;
     private float fromX;
     private float fromY;
     private float toX;
@@ -144,7 +144,8 @@ public class OnScreenButton extends OnScreenController {
         }
 
         if (type == TYPE_GAME_MENU) {
-            owner.batchIcon(startX, startY, tex, active);
+            // "&& engine.gameMenuPendingStep == 0" to fix button flickering when game menu is opened
+            owner.batchIcon(startX, startY, tex, active && engine.gameMenuPendingStep == 0);
         } else if (type == TYPE_REWARDED_CONTINUE && !App.self.mediadtor.isRewardedVideoLoaded()) {
             owner.batchBack(startX, startY, tex, false, 0.125f, 1.0f);
         } else {
@@ -158,14 +159,14 @@ public class OnScreenButton extends OnScreenController {
                     ratio * 0.05f + (type == TYPE_RESTART ? 0.95f : 1.05f));
         }
 
-        // if ((canRenderHelp && shouldRenderHelp()) || (type == TYPE_REWARDED_CONTINUE)) {
-        //     owner.batchIcon(startX,
-        //             startY,
-        //             TextureLoader.ICON_JOY,
-        //             false,
-        //             0.5f - (float)Math.cos(dt * 2.0f) * 0.5f,
-        //             (float)Math.cos(dt % Math.PI) * 0.5f + 1.5f);
-        // }
+        if (canRenderHelp && shouldRenderHelp()) {
+            owner.batchIcon(startX,
+                    startY,
+                    TextureLoader.ICON_JOY,
+                    false,
+                    0.5f - (float)Math.cos(dt * 2.0f) * 0.5f,
+                    (float)Math.cos(dt % Math.PI) * 0.5f + 1.5f);
+        }
     }
 
     @Override
diff --git a/src/main/java/zame/game/engine/controls/OnScreenController.java b/android/src/main/java/zame/game/engine/controls/OnScreenController.java
similarity index 96%
rename from src/main/java/zame/game/engine/controls/OnScreenController.java
rename to android/src/main/java/zame/game/engine/controls/OnScreenController.java
index 42a3cb7..9de376e 100644
--- a/src/main/java/zame/game/engine/controls/OnScreenController.java
+++ b/android/src/main/java/zame/game/engine/controls/OnScreenController.java
@@ -85,7 +85,6 @@ public abstract class OnScreenController {
         return Controls.DIAG_SIZE;
     }
 
-    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
     boolean shouldRenderHelp() {
         return ((renderAnyway || controlFlags == 0 || (state.disabledControlsMask & controlFlags) != controlFlags)
                 && (state.controlsHelpMask & controlFlags) != 0
@@ -98,7 +97,8 @@ public abstract class OnScreenController {
             return;
         }
 
-        owner.renderHelpArrowWithText(startX,
+        owner.renderHelpArrowWithText(
+                startX,
                 startY,
                 getHelpDiagSize(),
                 (position & Controls.POSITION_RIGHT) == 0,
diff --git a/src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java b/android/src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java
similarity index 96%
rename from src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java
rename to android/src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java
index b236403..6d76c89 100644
--- a/src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java
+++ b/android/src/main/java/zame/game/engine/controls/OnScreenFireAndRotate.java
@@ -121,7 +121,6 @@ public class OnScreenFireAndRotate extends OnScreenController {
                 boolean posLeft = (position & Controls.POSITION_RIGHT) == 0;
                 float off = (float)Math.cos(dt % Math.PI) * 0.2f;
 
-                //noinspection IfStatementWithIdenticalBranches
                 if ((state.controlsHelpMask & Controls.CONTROL_ROTATE_RIGHT) != 0) {
                     off = -off;
                 }
@@ -132,7 +131,8 @@ public class OnScreenFireAndRotate extends OnScreenController {
                 //     off = -off;
                 // }
 
-                owner.batchIcon(((posLeft ? 0.25f : 0.75f) + off) * (float)engine.width,
+                owner.batchIcon(
+                        ((posLeft ? 0.25f : 0.75f) + off) * (float)engine.width,
                         (float)engine.height * 0.5f,
                         TextureLoader.ICON_JOY,
                         false,
@@ -142,7 +142,8 @@ public class OnScreenFireAndRotate extends OnScreenController {
             if (game.renderMode != Game.RENDER_MODE_GAME || ((state.disabledControlsMask & Controls.CONTROL_FIRE) == 0
                     && (state.controlsHelpMask & Controls.CONTROL_FIRE) != 0)) {
 
-                owner.batchIcon(fireBtnX,
+                owner.batchIcon(
+                        fireBtnX,
                         fireBtnY,
                         TextureLoader.ICON_JOY,
                         false,
@@ -214,7 +215,8 @@ public class OnScreenFireAndRotate extends OnScreenController {
         if ((state.disabledControlsMask & Controls.CONTROL_FIRE) == 0
                 && (state.controlsHelpMask & Controls.CONTROL_FIRE) != 0) {
 
-            owner.renderHelpArrowWithText(fireBtnX,
+            owner.renderHelpArrowWithText(
+                    fireBtnX,
                     fireBtnY,
                     getHelpDiagSize(),
                     posLeft,
@@ -242,7 +244,8 @@ public class OnScreenFireAndRotate extends OnScreenController {
         engine.labels.startBatch(true);
         engine.renderer.setColorQuadA(1.0f);
 
-        engine.labels.batch(sx,
+        engine.labels.batch(
+                sx,
                 0.45f,
                 ex,
                 0.55f,
diff --git a/src/main/java/zame/game/engine/controls/OnScreenPad.java b/android/src/main/java/zame/game/engine/controls/OnScreenPad.java
similarity index 100%
rename from src/main/java/zame/game/engine/controls/OnScreenPad.java
rename to android/src/main/java/zame/game/engine/controls/OnScreenPad.java
diff --git a/src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java b/android/src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java
similarity index 88%
rename from src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java
rename to android/src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java
index 3078ff6..f763004 100644
--- a/src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java
+++ b/android/src/main/java/zame/game/engine/controls/OnScreenQuickWeapons.java
@@ -7,8 +7,8 @@ import zame.game.engine.visual.Controls;
 public class OnScreenQuickWeapons extends OnScreenController {
     public float direction = 1.0f;
 
-    private boolean[] active = { false, false, false };
-    @SuppressWarnings("MismatchedReadAndWriteOfArray") private int[] mapping = new int[3];
+    private final boolean[] active = { false, false, false };
+    private final int[] mapping = new int[3];
     private float fromY;
     private float toY;
 
@@ -111,7 +111,8 @@ public class OnScreenQuickWeapons extends OnScreenController {
         float baseX = startX - btnOffsetX * (float)(count - 1) * direction;
 
         for (int i = 0; i < count; i++) {
-            owner.batchIcon(baseX + btnOffsetX * 2.0f * (float)i * direction,
+            owner.batchIcon(
+                    baseX + btnOffsetX * 2.0f * (float)i * direction,
                     startY,
                     TextureLoader.BASE_WEAPONS + state.lastWeapons[mapping[i]],
                     active[i],
@@ -120,8 +121,14 @@ public class OnScreenQuickWeapons extends OnScreenController {
 
         if (canRenderHelp && shouldRenderHelp()) {
             float dt = (float)elapsedTime * 0.0025f;
+            int index = (int)(dt / Math.PI) % count;
 
-            owner.batchIcon(baseX + btnOffsetX * 2.0f * (float)((int)(dt / Math.PI) % count) * direction,
+            if (mapping[index] == state.heroWeapon) {
+                index = (index + 1) % count;
+            }
+
+            owner.batchIcon(
+                    baseX + btnOffsetX * 2.0f * (float)index * direction,
                     startY,
                     TextureLoader.ICON_JOY,
                     false,
diff --git a/android/src/main/java/zame/game/engine/entity/Action.java b/android/src/main/java/zame/game/engine/entity/Action.java
new file mode 100644
index 0000000..f51f26d
--- /dev/null
+++ b/android/src/main/java/zame/game/engine/entity/Action.java
@@ -0,0 +1,31 @@
+package zame.game.engine.entity;
+
+import java.io.IOException;
+
+import zame.game.core.serializer.DataItem;
+import zame.game.core.serializer.DataReader;
+import zame.game.core.serializer.DataWriter;
+
+public class Action implements DataItem {
+    private static final int FIELD_TYPE = 1;
+    private static final int FIELD_MARK_ID = 2;
+    private static final int FIELD_PARAM = 3;
+
+    public int type;
+    public int markId;
+    public int param;
+
+    @Override
+    public void writeTo(DataWriter writer) throws IOException {
+        writer.write(FIELD_TYPE, type);
+        writer.write(FIELD_MARK_ID, markId);
+        writer.write(FIELD_PARAM, param);
+    }
+
+    @Override
+    public void readFrom(DataReader reader) {
+        type = reader.readInt(FIELD_TYPE);
+        markId = reader.readInt(FIELD_MARK_ID);
+        param = reader.readInt(FIELD_PARAM);
+    }
+}
diff --git a/src/main/java/zame/game/engine/entity/AutoMapPathCell.java b/android/src/main/java/zame/game/engine/entity/AutoMapPathCell.java
similarity index 100%
rename from src/main/java/zame/game/engine/entity/AutoMapPathCell.java
rename to android/src/main/java/zame/game/engine/entity/AutoMapPathCell.java
diff --git a/android/src/main/java/zame/game/engine/entity/AutoWall.java b/android/src/main/java/zame/game/engine/entity/AutoWall.java
new file mode 100644
index 0000000..cdb160b
--- /dev/null
+++ b/android/src/main/java/zame/game/engine/entity/AutoWall.java
@@ -0,0 +1,49 @@
+package zame.game.engine.entity;
+
+import java.io.IOException;
+
+import zame.game.core.serializer.DataItem;
+import zame.game.core.serializer.DataListItem;
+import zame.game.core.serializer.DataReader;
+import zame.game.core.serializer.DataWriter;
+
+public class AutoWall extends DataListItem<AutoWall> implements DataItem {
+    private static final int FIELD_FROM_X = 1;
+    private static final int FIELD_FROM_Y = 2;
+    private static final int FIELD_TO_X = 3;
+    private static final int FIELD_TO_Y = 4;
+    private static final int FIELD_VERT = 5;
+    private static final int FIELD_TYPE = 6;
+    private static final int FIELD_DOOR_UID = 7;
+
+    public float fromX;
+    public float fromY;
+    public float toX;
+    public float toY;
+    public boolean vert;
+    public int type;
+    public int doorUid; // required for save/load
+    public Door door;
+
+    @Override
+    public void writeTo(DataWriter writer) throws IOException {
+        writer.write(FIELD_FROM_X, fromX);
+        writer.write(FIELD_FROM_Y, fromY);
+        writer.write(FIELD_TO_X, toX);
+        writer.write(FIELD_TO_Y, toY);
+        writer.write(FIELD_VERT, vert);
+        writer.write(FIELD_TYPE, type);
+        writer.write(FIELD_DOOR_UID, doorUid);
+    }
+
+    @Override
+    public void readFrom(DataReader reader) {
+        fromX = reader.readFloat(FIELD_FROM_X);
+        fromY = reader.readFloat(FIELD_FROM_Y);
+        toX = reader.readFloat(FIELD_TO_X);
+        toY = reader.readFloat(FIELD_TO_Y);
+        vert = reader.readBoolean(FIELD_VERT);
+        type = reader.readInt(FIELD_TYPE);
+        doorUid = reader.readInt(FIELD_DOOR_UID);
+    }
+}
diff --git a/src/main/java/zame/game/engine/entity/Bullet.java b/android/src/main/java/zame/game/engine/entity/Bullet.java
similarity index 98%
rename from src/main/java/zame/game/engine/entity/Bullet.java
rename to android/src/main/java/zame/game/engine/entity/Bullet.java
index b38dd0b..36f393e 100644
--- a/src/main/java/zame/game/engine/entity/Bullet.java
+++ b/android/src/main/java/zame/game/engine/entity/Bullet.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
@@ -101,9 +102,9 @@ public class Bullet extends DataListItem<Bullet> implements EngineObject, DataIt
     private LevelRenderer levelRenderer;
     private float xoff;
     private float yoff;
-    private HitParams tmpHitOut = new HitParams(HitParams.HIT_OUT);
-    private HitParams tmpHitA = new HitParams(0);
-    private HitParams tmpHitB = new HitParams(0);
+    private final HitParams tmpHitOut = new HitParams(HitParams.HIT_OUT);
+    private final HitParams tmpHitA = new HitParams(0);
+    private final HitParams tmpHitB = new HitParams(0);
 
     public float sx;
     public float sy;
@@ -124,7 +125,8 @@ public class Bullet extends DataListItem<Bullet> implements EngineObject, DataIt
     private int hits;
     private int stun;
 
-    public static boolean shootOrPunch(State state,
+    public static boolean shootOrPunch(
+            State state,
             float x,
             float y,
             float ar,
@@ -301,7 +303,6 @@ public class Bullet extends DataListItem<Bullet> implements EngineObject, DataIt
 
     // is bullet hits an explosive, monster or hero.
     // this function doesn't handle hit into walls (this is done inside "update" function)
-    @SuppressWarnings("MagicNumber")
     private boolean hit(HitParams hitParams) {
         if (hitParams.hit < HitParams.HIT_EXPLOSIVE) {
             return false;
diff --git a/src/main/java/zame/game/engine/entity/BulletTrace.java b/android/src/main/java/zame/game/engine/entity/BulletTrace.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/BulletTrace.java
rename to android/src/main/java/zame/game/engine/entity/BulletTrace.java
index f076f88..bf15e14 100644
--- a/src/main/java/zame/game/engine/entity/BulletTrace.java
+++ b/android/src/main/java/zame/game/engine/entity/BulletTrace.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.util.Random;
+
 import zame.game.core.serializer.DataListItem;
 import zame.game.engine.level.LevelRenderer;
 
diff --git a/src/main/java/zame/game/engine/entity/DebugTraceInfo.java b/android/src/main/java/zame/game/engine/entity/DebugTraceInfo.java
similarity index 100%
rename from src/main/java/zame/game/engine/entity/DebugTraceInfo.java
rename to android/src/main/java/zame/game/engine/entity/DebugTraceInfo.java
index 077ac74..1f929e7 100644
--- a/src/main/java/zame/game/engine/entity/DebugTraceInfo.java
+++ b/android/src/main/java/zame/game/engine/entity/DebugTraceInfo.java
@@ -1,7 +1,7 @@
 package zame.game.engine.entity;
 
-import zame.game.engine.level.LevelRenderer;
 import zame.game.core.serializer.DataListItem;
+import zame.game.engine.level.LevelRenderer;
 
 public class DebugTraceInfo extends DataListItem<DebugTraceInfo> {
     public float sx;
diff --git a/src/main/java/zame/game/engine/entity/Door.java b/android/src/main/java/zame/game/engine/entity/Door.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/Door.java
rename to android/src/main/java/zame/game/engine/entity/Door.java
index d63e611..7f2345b 100644
--- a/src/main/java/zame/game/engine/entity/Door.java
+++ b/android/src/main/java/zame/game/engine/entity/Door.java
@@ -1,15 +1,16 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
-import zame.game.engine.Engine;
-import zame.game.engine.EngineObject;
-import zame.game.engine.level.Level;
-import zame.game.engine.state.State;
-import zame.game.engine.graphics.TextureLoader;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
 import zame.game.core.serializer.DataWriter;
+import zame.game.engine.Engine;
+import zame.game.engine.EngineObject;
+import zame.game.engine.graphics.TextureLoader;
+import zame.game.engine.level.Level;
+import zame.game.engine.state.State;
 import zame.game.feature.sound.SoundManager;
 
 public class Door extends DataListItem<Door> implements EngineObject, DataItem {
diff --git a/src/main/java/zame/game/engine/entity/Explosion.java b/android/src/main/java/zame/game/engine/entity/Explosion.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/Explosion.java
rename to android/src/main/java/zame/game/engine/entity/Explosion.java
index ed6cbc1..80469ab 100644
--- a/src/main/java/zame/game/engine/entity/Explosion.java
+++ b/android/src/main/java/zame/game/engine/entity/Explosion.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
@@ -273,7 +274,8 @@ public class Explosion extends DataListItem<Explosion> implements EngineObject,
 
                 if ((localPassableMap[ty][tx] & Level.PASSABLE_IS_EXPLOSIVE) != 0) {
                     //noinspection MagicNumber
-                    Explosion.boom(state,
+                    Explosion.boom(
+                            state,
                             (float)tx + 0.5f,
                             (float)ty + 0.5f,
                             mon,
diff --git a/src/main/java/zame/game/engine/entity/LookPoint.java b/android/src/main/java/zame/game/engine/entity/LookPoint.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/LookPoint.java
rename to android/src/main/java/zame/game/engine/entity/LookPoint.java
index a7b1161..2e775b6 100644
--- a/src/main/java/zame/game/engine/entity/LookPoint.java
+++ b/android/src/main/java/zame/game/engine/entity/LookPoint.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
diff --git a/src/main/java/zame/game/engine/entity/Mark.java b/android/src/main/java/zame/game/engine/entity/Mark.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/Mark.java
rename to android/src/main/java/zame/game/engine/entity/Mark.java
index 1c2a5ab..6ea7393 100644
--- a/src/main/java/zame/game/engine/entity/Mark.java
+++ b/android/src/main/java/zame/game/engine/entity/Mark.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
diff --git a/src/main/java/zame/game/engine/entity/Monster.java b/android/src/main/java/zame/game/engine/entity/Monster.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/Monster.java
rename to android/src/main/java/zame/game/engine/entity/Monster.java
index 6f6676f..554623c 100644
--- a/src/main/java/zame/game/engine/entity/Monster.java
+++ b/android/src/main/java/zame/game/engine/entity/Monster.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
@@ -316,7 +317,7 @@ public class Monster extends DataListItem<Monster> implements EngineObject, Data
         }
     }
 
-    @SuppressWarnings("MagicNumber")
+    @SuppressWarnings({ "MagicNumber", "ConstantConditions" })
     public void update() {
         if (health <= 0) {
             return;
@@ -344,7 +345,8 @@ public class Monster extends DataListItem<Monster> implements EngineObject, Data
             if (game.killedTime == 0) {
                 soundManager.playSound(attackSoundIdx);
 
-                Bullet.shootOrPunch(state,
+                Bullet.shootOrPunch(
+                        state,
                         x,
                         y,
                         GameMath.getAngle(dx, dy, dist),
diff --git a/src/main/java/zame/game/engine/entity/ObjectContainer.java b/android/src/main/java/zame/game/engine/entity/ObjectContainer.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/ObjectContainer.java
rename to android/src/main/java/zame/game/engine/entity/ObjectContainer.java
index 9ac55fc..f6c93d0 100644
--- a/src/main/java/zame/game/engine/entity/ObjectContainer.java
+++ b/android/src/main/java/zame/game/engine/entity/ObjectContainer.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
diff --git a/src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java b/android/src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java
rename to android/src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java
index d27367d..95fe2cc 100644
--- a/src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java
+++ b/android/src/main/java/zame/game/engine/entity/OnChangeWeaponAction.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
diff --git a/android/src/main/java/zame/game/engine/entity/Timeout.java b/android/src/main/java/zame/game/engine/entity/Timeout.java
new file mode 100644
index 0000000..fd803c2
--- /dev/null
+++ b/android/src/main/java/zame/game/engine/entity/Timeout.java
@@ -0,0 +1,28 @@
+package zame.game.engine.entity;
+
+import java.io.IOException;
+
+import zame.game.core.serializer.DataItem;
+import zame.game.core.serializer.DataListItem;
+import zame.game.core.serializer.DataReader;
+import zame.game.core.serializer.DataWriter;
+
+public class Timeout extends DataListItem<Timeout> implements DataItem {
+    private static final int FIELD_MARK_ID = 1;
+    private static final int FIELD_DELAY = 2;
+
+    public int markId;
+    public int delay;
+
+    @Override
+    public void writeTo(DataWriter writer) throws IOException {
+        writer.write(FIELD_MARK_ID, markId);
+        writer.write(FIELD_DELAY, delay);
+    }
+
+    @Override
+    public void readFrom(DataReader reader) {
+        markId = reader.readInt(FIELD_MARK_ID);
+        delay = reader.readInt(FIELD_DELAY);
+    }
+}
diff --git a/src/main/java/zame/game/engine/entity/TouchedCell.java b/android/src/main/java/zame/game/engine/entity/TouchedCell.java
similarity index 99%
rename from src/main/java/zame/game/engine/entity/TouchedCell.java
rename to android/src/main/java/zame/game/engine/entity/TouchedCell.java
index 700a338..642f71c 100644
--- a/src/main/java/zame/game/engine/entity/TouchedCell.java
+++ b/android/src/main/java/zame/game/engine/entity/TouchedCell.java
@@ -1,6 +1,7 @@
 package zame.game.engine.entity;
 
 import java.io.IOException;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataListItem;
 import zame.game.core.serializer.DataReader;
diff --git a/src/main/java/zame/game/engine/entity/WaveCell.java b/android/src/main/java/zame/game/engine/entity/WaveCell.java
similarity index 100%
rename from src/main/java/zame/game/engine/entity/WaveCell.java
rename to android/src/main/java/zame/game/engine/entity/WaveCell.java
diff --git a/src/main/java/zame/game/engine/graphics/Labels.java b/android/src/main/java/zame/game/engine/graphics/Labels.java
similarity index 89%
rename from src/main/java/zame/game/engine/graphics/Labels.java
rename to android/src/main/java/zame/game/engine/graphics/Labels.java
index 8e04078..6af22a2 100644
--- a/src/main/java/zame/game/engine/graphics/Labels.java
+++ b/android/src/main/java/zame/game/engine/graphics/Labels.java
@@ -6,7 +6,9 @@ import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Rect;
 import android.graphics.Typeface;
+
 import java.util.HashMap;
+
 import zame.game.R;
 import zame.game.core.util.Common;
 import zame.game.engine.Engine;
@@ -82,8 +84,8 @@ public class Labels implements EngineObject {
     private Engine engine;
     private Renderer renderer;
     private Paint paint;
-    private HashMap<Character, Rect> charMap = new HashMap<>();
-    @SuppressWarnings("MagicNumber") private Rect[] numberMap = new Rect[11];
+    private final HashMap<Character, Rect> charMap = new HashMap<>();
+    @SuppressWarnings({ "MagicNumber", "RedundantSuppression" }) private final Rect[] numberMap = new Rect[11];
     private int lastTexX;
     private int lastTexY;
     private int textAscent;
@@ -112,7 +114,8 @@ public class Labels implements EngineObject {
     }
 
     public void createLabels() {
-        Bitmap bitmap = Common.createBitmap(TEX_WIDTH,
+        Bitmap bitmap = Common.createBitmap(
+                TEX_WIDTH,
                 TEX_HEIGHT,
                 TEX_WIDTH_LOW,
                 TEX_HEIGHT_LOW,
@@ -143,22 +146,29 @@ public class Labels implements EngineObject {
         map[LABEL_ENDL_TIME] = appendChars(canvas, context.getString(R.string.engine_lbl_endl_time));
         map[LABEL_GAMEOVER] = appendChars(canvas, context.getString(R.string.engine_lbl_gameover));
 
-        map[LABEL_GAMEOVER_SUBTITLE] = appendChars(
-                canvas,
-                context.getString(R.string.engine_lbl_gameover_restart)
-                        + " / "
-                        + context.getString(R.string.engine_lbl_gameover_continue));
+        if (engine.canShowRewardedVideo) {
+            map[LABEL_GAMEOVER_SUBTITLE] = appendChars(
+                    canvas,
+                    context.getString(R.string.engine_lbl_gameover_restart)
+                            + " / "
+                            + context.getString(R.string.engine_lbl_gameover_continue));
+
+            map[LABEL_GAMEOVER_SUBTITLE_LEFT_HAND_AIM] = appendChars(
+                    canvas,
+                    context.getString(R.string.engine_lbl_gameover_continue)
+                            + " / "
+                            + context.getString(R.string.engine_lbl_gameover_restart));
+        } else {
+            map[LABEL_GAMEOVER_SUBTITLE] = appendChars(canvas, context.getString(R.string.engine_lbl_gameover_restart));
+            map[LABEL_GAMEOVER_SUBTITLE_LEFT_HAND_AIM] = map[LABEL_GAMEOVER_SUBTITLE];
+        }
 
-        map[LABEL_GAMEOVER_SUBTITLE_LEFT_HAND_AIM] = appendChars(
+        map[LABEL_GAMEOVER_SUBTITLE_JUST_RESTART] = appendChars(
                 canvas,
-                context.getString(R.string.engine_lbl_gameover_continue)
-                        + " / "
-                        + context.getString(R.string.engine_lbl_gameover_restart));
-
-        map[LABEL_GAMEOVER_SUBTITLE_JUST_RESTART] = appendChars(canvas,
                 context.getString(R.string.engine_lbl_gameover_restart));
 
-        map[LABEL_ACHIEVEMENT_UNLOCKED] = appendChars(canvas,
+        map[LABEL_ACHIEVEMENT_UNLOCKED] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lbl_achievement_unlocked));
 
         map[LABEL_HELP_MOVE] = appendChars(canvas, context.getString(R.string.engine_lblh_move));
@@ -177,59 +187,74 @@ public class Labels implements EngineObject {
         map[LABEL_MESSAGE_2] = appendChars(canvas, context.getString(R.string.engine_lblm_2));
         map[LABEL_MESSAGE_1] = appendChars(canvas, context.getString(R.string.engine_lblm_1));
 
-        map[LABEL_MESSAGE_WELCOME_TO_TRAINING_AREA] = appendChars(canvas,
+        map[LABEL_MESSAGE_WELCOME_TO_TRAINING_AREA] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_welcome_to_training_area));
 
-        map[LABEL_MESSAGE_USE_MOVEMENT_PAD_TO_FOLLOW_ARROWS] = appendChars(canvas,
+        map[LABEL_MESSAGE_USE_MOVEMENT_PAD_TO_FOLLOW_ARROWS] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_use_move_pad_to_follow_arrows));
 
         map[LABEL_MESSAGE_DOING_WELL] = appendChars(canvas, context.getString(R.string.engine_lblm_doing_well));
 
-        map[LABEL_MESSAGE_SLIDE_TO_ROTATE] = appendChars(canvas,
+        map[LABEL_MESSAGE_SLIDE_TO_ROTATE] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_slide_to_rotate));
 
-        map[LABEL_MESSAGE_MOVE_AND_ROTATE_TO_FOLLOW_ARROWS] = appendChars(canvas,
+        map[LABEL_MESSAGE_MOVE_AND_ROTATE_TO_FOLLOW_ARROWS] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_move_and_rotate_to_follow_arrows));
 
-        map[LABEL_MESSAGE_USE_MINIMAP_TO_FOLLOW_PATH] = appendChars(canvas,
+        map[LABEL_MESSAGE_USE_MINIMAP_TO_FOLLOW_PATH] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_use_minimap_to_follow_path));
 
-        map[LABEL_MESSAGE_TO_OPEN_DOOR_GO_THROUGH_IT] = appendChars(canvas,
+        map[LABEL_MESSAGE_TO_OPEN_DOOR_GO_THROUGH_IT] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_to_open_door_go_through_it));
 
-        map[LABEL_MESSAGE_NEXT_DOOR_IS_CLOSED_USE_SWITCH] = appendChars(canvas,
+        map[LABEL_MESSAGE_NEXT_DOOR_IS_CLOSED_USE_SWITCH] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_next_door_is_closed_use_switch));
 
-        map[LABEL_MESSAGE_TO_ACTIVATE_SWITCH_GO_UP_TO_HIM] = appendChars(canvas,
+        map[LABEL_MESSAGE_TO_ACTIVATE_SWITCH_GO_UP_TO_HIM] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_to_activate_switch_go_up_to_him));
 
         map[LABEL_MESSAGE_THIS_IS_WINDOW] = appendChars(canvas, context.getString(R.string.engine_lblm_this_is_window));
 
-        map[LABEL_MESSAGE_TO_OPEN_DOOR_PICKUP_KEY] = appendChars(canvas,
+        map[LABEL_MESSAGE_TO_OPEN_DOOR_PICKUP_KEY] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_to_open_door_pickup_key));
 
-        map[LABEL_MESSAGE_PRESS_END_LEVEL] = appendChars(canvas,
+        map[LABEL_MESSAGE_PRESS_END_LEVEL] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_press_end_level));
 
-        map[LABEL_MESSAGE_USE_FIRE_AND_KILL_ENEMY] = appendChars(canvas,
+        map[LABEL_MESSAGE_USE_FIRE_AND_KILL_ENEMY] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_use_fire_and_kill_enemy));
 
         map[LABEL_MESSAGE_PICKUP_MEDI] = appendChars(canvas, context.getString(R.string.engine_lblm_pickup_medi));
 
-        map[LABEL_MESSAGE_OPEN_WEAPON_MENU_AND_SELECT_PISTOL] = appendChars(canvas,
+        map[LABEL_MESSAGE_OPEN_WEAPON_MENU_AND_SELECT_PISTOL] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_open_weapon_menu_and_select_pistol));
 
         map[LABEL_MESSAGE_PICKUP_AMMO] = appendChars(canvas, context.getString(R.string.engine_lblm_pickup_ammo));
 
-        map[LABEL_MESSAGE_QUICK_CHANGE_WEAPON] = appendChars(canvas,
+        map[LABEL_MESSAGE_QUICK_CHANGE_WEAPON] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_quick_change_weapon));
 
-        map[LABEL_MESSAGE_AFTER_QUICK_CHANGE_WEAPON] = appendChars(canvas,
+        map[LABEL_MESSAGE_AFTER_QUICK_CHANGE_WEAPON] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_after_quick_change_weapon));
 
         map[LABEL_MESSAGE_PICKUP_ARMOR] = appendChars(canvas, context.getString(R.string.engine_lblm_pickup_armor));
 
-        map[LABEL_MESSAGE_AFTER_PICKUP_ARMOR] = appendChars(canvas,
+        map[LABEL_MESSAGE_AFTER_PICKUP_ARMOR] = appendChars(
+                canvas,
                 context.getString(R.string.engine_lblm_after_pickup_armor));
 
         for (int i = 0, len = Achievements.LIST.length; i < len; i++) {
@@ -321,7 +346,8 @@ public class Labels implements EngineObject {
     }
 
     @SuppressWarnings("MagicNumber")
-    public void batch(float sx,
+    public void batch(
+            float sx,
             float sy,
             float ex,
             float ey,
@@ -353,7 +379,8 @@ public class Labels implements EngineObject {
     }
 
     @SuppressWarnings("MagicNumber")
-    public void batch(float sx,
+    public void batch(
+            float sx,
             float sy,
             float ex,
             float ey,
@@ -430,7 +457,7 @@ public class Labels implements EngineObject {
         return result;
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public float getScaledWidth(int value, float desiredHeight) {
         float scale = desiredHeight / (float)textHeight;
         float width = (float)getWidth(value);
diff --git a/src/main/java/zame/game/engine/graphics/Renderer.java b/android/src/main/java/zame/game/engine/graphics/Renderer.java
similarity index 95%
rename from src/main/java/zame/game/engine/graphics/Renderer.java
rename to android/src/main/java/zame/game/engine/graphics/Renderer.java
index 117989c..186ff63 100644
--- a/src/main/java/zame/game/engine/graphics/Renderer.java
+++ b/android/src/main/java/zame/game/engine/graphics/Renderer.java
@@ -2,15 +2,16 @@ package zame.game.engine.graphics;
 
 import android.graphics.Bitmap;
 import android.opengl.GLUtils;
+
 import javax.microedition.khronos.opengles.GL10;
 import javax.microedition.khronos.opengles.GL11ExtensionPack;
+
 import zame.game.core.util.Common;
 import zame.game.engine.Config;
 import zame.game.engine.Engine;
 import zame.game.engine.EngineObject;
 
-// http://stackoverflow.com/questions/1848886/jni-c-library-passing-byte-ptr
-// http://groups.google.com/group/android-ndk/tree/browse_frm/month/2010-01?_done=/group/android-ndk/browse_frm/month/2010-01%3F&
+// https://stackoverflow.com/questions/1848886/jni-c-library-passing-byte-ptr
 
 // Native buffers (aka ByteBuffer, ShortBuffer and FloatBuffer) suck in DalvikVM. It is terribly slow.
 // So native code used to render. It's up to 4x faster than java code with native buffers.
@@ -94,20 +95,20 @@ public class Renderer implements EngineObject {
     private GL11ExtensionPack gl11ep;
     @SuppressWarnings("BooleanVariableAlwaysNegated") private boolean isFboSupported;
     private boolean isTexturesCreated;
-    private int[] textures = new int[TEXTURE_LAST];
+    private final int[] textures = new int[TEXTURE_LAST];
     private boolean isFramebufferPrepared;
     private int lastRenderFlags = -1;
     private int lastTexture = -1;
     private int lastTextureFlags = -1;
-    private int[] frameBuffers = new int[1];
-    private int[] depthBuffers = new int[1];
+    private final int[] frameBuffers = new int[1];
+    private final int[] depthBuffers = new int[1];
 
-    private float[] vertexBuffer = new float[MAX_QUADS * 12];
-    private float[] colorsBuffer = new float[MAX_QUADS * 16];
-    private int[] textureBuffer = new int[MAX_QUADS * 8];
-    private short[] indicesBuffer = new short[MAX_QUADS * 6];
-    private float[] lineVertexBuffer = new float[MAX_QUADS * 4];
-    private float[] lineColorsBuffer = new float[MAX_QUADS * 8];
+    private final float[] vertexBuffer = new float[MAX_QUADS * 12];
+    private final float[] colorsBuffer = new float[MAX_QUADS * 16];
+    private final int[] textureBuffer = new int[MAX_QUADS * 8];
+    private final short[] indicesBuffer = new short[MAX_QUADS * 6];
+    private final float[] lineVertexBuffer = new float[MAX_QUADS * 4];
+    private final float[] lineColorsBuffer = new float[MAX_QUADS * 8];
 
     private short vertexCount;
     private short lineVertexCount;
@@ -167,7 +168,8 @@ public class Renderer implements EngineObject {
         System.loadLibrary("renderer");
     }
 
-    private static native void renderTriangles(float[] vertexBuf,
+    private static native void renderTriangles(
+            float[] vertexBuf,
             float[] colorsBuf,
             int[] textureBuf,
             short[] indicesBuf,
@@ -218,7 +220,8 @@ public class Renderer implements EngineObject {
 
         bindTexture(TEXTURE_RTT);
 
-        gl.glTexImage2D(GL10.GL_TEXTURE_2D,
+        gl.glTexImage2D(
+                GL10.GL_TEXTURE_2D,
                 0,
                 GL10.GL_RGBA,
                 SIZE_RTT_FBO,
@@ -237,17 +240,20 @@ public class Renderer implements EngineObject {
         gl11ep.glGenRenderbuffersOES(1, depthBuffers, 0);
         gl11ep.glBindRenderbufferOES(GL11ExtensionPack.GL_RENDERBUFFER_OES, depthBuffers[0]);
 
-        gl11ep.glRenderbufferStorageOES(GL11ExtensionPack.GL_RENDERBUFFER_OES,
+        gl11ep.glRenderbufferStorageOES(
+                GL11ExtensionPack.GL_RENDERBUFFER_OES,
                 GL11ExtensionPack.GL_DEPTH_COMPONENT16,
                 SIZE_RTT_FBO,
                 SIZE_RTT_FBO);
 
-        gl11ep.glFramebufferRenderbufferOES(GL11ExtensionPack.GL_FRAMEBUFFER_OES,
+        gl11ep.glFramebufferRenderbufferOES(
+                GL11ExtensionPack.GL_FRAMEBUFFER_OES,
                 GL11ExtensionPack.GL_DEPTH_ATTACHMENT_OES,
                 GL11ExtensionPack.GL_RENDERBUFFER_OES,
                 depthBuffers[0]);
 
-        gl11ep.glFramebufferTexture2DOES(GL11ExtensionPack.GL_FRAMEBUFFER_OES,
+        gl11ep.glFramebufferTexture2DOES(
+                GL11ExtensionPack.GL_FRAMEBUFFER_OES,
                 GL11ExtensionPack.GL_COLOR_ATTACHMENT0_OES,
                 GL10.GL_TEXTURE_2D,
                 textures[TEXTURE_RTT],
@@ -309,7 +315,8 @@ public class Renderer implements EngineObject {
         }
     }
 
-    public void useOrtho(float left,
+    public void useOrtho(
+            float left,
             float right,
             float bottom,
             float top,
@@ -329,7 +336,8 @@ public class Renderer implements EngineObject {
         gl.glLoadIdentity();
     }
 
-    public void useFrustum(float left,
+    public void useFrustum(
+            float left,
             float right,
             float bottom,
             float top,
@@ -388,7 +396,8 @@ public class Renderer implements EngineObject {
                 gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
             }
 
-            renderTriangles(vertexBuffer,
+            renderTriangles(
+                    vertexBuffer,
                     colorsBuffer,
                     (tex >= 0 ? textureBuffer : null),
                     indicesBuffer,
@@ -440,7 +449,6 @@ public class Renderer implements EngineObject {
         }
     }
 
-    @SuppressWarnings("ConstantConditions")
     private void applyRenderFlags(int flags) {
         if (flags == lastRenderFlags) {
             return;
diff --git a/src/main/java/zame/game/engine/graphics/TextureLoader.java b/android/src/main/java/zame/game/engine/graphics/TextureLoader.java
similarity index 98%
rename from src/main/java/zame/game/engine/graphics/TextureLoader.java
rename to android/src/main/java/zame/game/engine/graphics/TextureLoader.java
index b33be2e..154bdad 100644
--- a/src/main/java/zame/game/engine/graphics/TextureLoader.java
+++ b/android/src/main/java/zame/game/engine/graphics/TextureLoader.java
@@ -5,6 +5,7 @@ import android.content.res.AssetManager;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.Build;
+
 import zame.game.App;
 import zame.game.core.util.Common;
 import zame.game.engine.Engine;
@@ -50,7 +51,8 @@ public class TextureLoader implements EngineObject {
 
     // private static final int PACKED_TEXMAP_MONSTERS = 1 << 16;
 
-    public static final int COUNT_MONSTER = 0x10; // block = [up, rt, dn, lt], monster = block[walk_a, walk_b, hit], die[3], shoot
+    public static final int COUNT_MONSTER = 0x10;
+            // block = [up, rt, dn, lt], monster = block[walk_a, walk_b, hit], die[3], shoot
     public static final int MONSTERS_IN_TEXTURE = 3;
 
     public static final int ICON_JOY = BASE_ICONS;
@@ -262,7 +264,8 @@ public class TextureLoader implements EngineObject {
         TextureToLoad texToLoad = TEXTURES_TO_LOAD[createdTexturesCount];
 
         if (texToLoad.type == TextureToLoad.TYPE_MAIN) {
-            loadAndBindTexture(texToLoad.tex,
+            loadAndBindTexture(
+                    texToLoad.tex,
                     CachedTexturesProvider.normalizeSetNum(CachedTexturesProvider.mainTexMap, levelConf.graphicsSet));
         } else {
             loadAndBindTexture(texToLoad.tex, 0);
diff --git a/src/main/java/zame/game/engine/level/Level.java b/android/src/main/java/zame/game/engine/level/Level.java
similarity index 98%
rename from src/main/java/zame/game/engine/level/Level.java
rename to android/src/main/java/zame/game/engine/level/Level.java
index 72b8f9d..6bf0f93 100644
--- a/src/main/java/zame/game/engine/level/Level.java
+++ b/android/src/main/java/zame/game/engine/level/Level.java
@@ -2,10 +2,12 @@ package zame.game.engine.level;
 
 import android.content.res.AssetManager;
 import android.text.TextUtils;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
+
 import zame.game.App;
 import zame.game.core.serializer.DataList;
 import zame.game.core.util.Common;
@@ -27,6 +29,7 @@ import zame.game.engine.state.Profile;
 import zame.game.engine.state.State;
 import zame.game.engine.visual.Weapons;
 import zame.game.feature.achievements.Achievements;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 import zame.game.flavour.config.GameConfig;
 
@@ -55,6 +58,7 @@ public class Level implements EngineObject {
     public static final int MAX_LOOK_POINTS = 8;
     public static final int MAX_ON_CHANGE_WEAPON_ACTIONS = 4;
     private static final int MAX_AUTOMAP_PATH_CELLS = 32 * 32;
+    public static final int MAX_TRACKED_EVENTS = 256;
 
     private static final int ACTION_CLOSE = 1;
     private static final int ACTION_OPEN = 2;
@@ -180,7 +184,7 @@ public class Level implements EngineObject {
     private LevelRenderer levelRenderer;
     private Profile profile;
     private AssetManager assetManager;
-    private boolean[] wasAlreadyInWall = new boolean[9];
+    private final boolean[] wasAlreadyInWall = new boolean[9];
 
     public Door[][] doorsMap;
     public int[][] pathToWaveMap;
@@ -241,7 +245,7 @@ public class Level implements EngineObject {
         buildPathToWavePending = true;
     }
 
-    @SuppressWarnings({ "MagicNumber", "ConstantConditions" })
+    @SuppressWarnings({ "MagicNumber" })
     protected void create(byte[] data) {
         reload(); // re-startBatch level. just for case
         int pos = 1; // skip graphics set
@@ -570,7 +574,6 @@ public class Level implements EngineObject {
         }
     }
 
-    @SuppressWarnings("ConstantConditions")
     public int executeActions(int id) {
         List<Action> actions = state.actions.get(id);
 
@@ -928,7 +931,13 @@ public class Level implements EngineObject {
                     break;
 
                 case ACTION_TRACK_EVENT:
-                    App.self.tracker.trackEvent("Scripted", state.levelName + ":" + String.valueOf(act.param));
+                    if (act.param >= 0 && act.param < MAX_TRACKED_EVENTS && !state.trackedEvents[act.param]) {
+                        state.trackedEvents[act.param] = true;
+
+                        App.self.tracker.trackEvent(
+                                EventsConfig.EV_GAME_SCRIPTED + "_" + state.levelName,
+                                String.valueOf(act.param));
+                    }
                     break;
             }
         }
@@ -936,7 +945,8 @@ public class Level implements EngineObject {
         return resultSoundIdx;
     }
 
-    public void setPassable(float x,
+    public void setPassable(
+            float x,
             float y,
             @SuppressWarnings("SameParameterValue") float wallDist,
             @SuppressWarnings("SameParameterValue") int mask) {
@@ -953,7 +963,8 @@ public class Level implements EngineObject {
         }
     }
 
-    public void clearPassable(float x,
+    public void clearPassable(
+            float x,
             float y,
             @SuppressWarnings("SameParameterValue") float wallDist,
             @SuppressWarnings("SameParameterValue") int mask) {
@@ -972,7 +983,8 @@ public class Level implements EngineObject {
         }
     }
 
-    public void fillInitialInWallMap(float x,
+    public void fillInitialInWallMap(
+            float x,
             float y,
             @SuppressWarnings("SameParameterValue") float wallDist,
             @SuppressWarnings("SameParameterValue") int mask) {
@@ -997,7 +1009,8 @@ public class Level implements EngineObject {
 
     // call fillInitialInWallMap before using isPassable
     @SuppressWarnings("BooleanMethodIsAlwaysInverted")
-    public boolean isPassable(float x,
+    public boolean isPassable(
+            float x,
             float y,
             @SuppressWarnings("SameParameterValue") float wallDist,
             @SuppressWarnings("SameParameterValue") int mask) {
@@ -1025,7 +1038,6 @@ public class Level implements EngineObject {
         return passable;
     }
 
-    @SuppressWarnings("ConstantConditions")
     public void buildPathToWaveMap() {
         // Common.log(">>>> buildPathToWaveMap " + state.pathToX + ", " + state.pathToY + "; " + state.heroKeysMask);
         int[][] localPathToWaveMap = pathToWaveMap;
@@ -1051,8 +1063,6 @@ public class Level implements EngineObject {
         WaveCell[] waveBuffer = pathToWaveBuffer[0];
         int bufferIdx = 1;
         int waveIdx = 1;
-
-        //noinspection UnusedAssignment
         int waveLength = 1;
 
         waveBuffer[0].initFrom(x, y);
diff --git a/src/main/java/zame/game/engine/level/LevelConfig.java b/android/src/main/java/zame/game/engine/level/LevelConfig.java
similarity index 95%
rename from src/main/java/zame/game/engine/level/LevelConfig.java
rename to android/src/main/java/zame/game/engine/level/LevelConfig.java
index d1af3c6..8ee1f34 100644
--- a/src/main/java/zame/game/engine/level/LevelConfig.java
+++ b/android/src/main/java/zame/game/engine/level/LevelConfig.java
@@ -1,7 +1,9 @@
 package zame.game.engine.level;
 
 import android.content.res.AssetManager;
+
 import java.util.Locale;
+
 import zame.game.core.util.Common;
 
 public class LevelConfig {
@@ -22,7 +24,7 @@ public class LevelConfig {
         }
     }
 
-    @SuppressWarnings({ "FieldCanBeLocal", "unused" }) private String levelName;
+    @SuppressWarnings({ "FieldCanBeLocal", "unused", "RedundantSuppression" }) private final String levelName;
     public int graphicsSet;
     public MonsterConfig[] monsters;
 
diff --git a/src/main/java/zame/game/engine/level/LevelRenderer.java b/android/src/main/java/zame/game/engine/level/LevelRenderer.java
similarity index 95%
rename from src/main/java/zame/game/engine/level/LevelRenderer.java
rename to android/src/main/java/zame/game/engine/level/LevelRenderer.java
index 76f9ccd..7901eee 100644
--- a/src/main/java/zame/game/engine/level/LevelRenderer.java
+++ b/android/src/main/java/zame/game/engine/level/LevelRenderer.java
@@ -59,12 +59,12 @@ public class LevelRenderer implements EngineObject {
     public boolean[][] awTouchedCellsMap = new boolean[Level.MAX_HEIGHT][Level.MAX_WIDTH];
     public DataList<DebugTraceInfo> debugTraceInfos = new DataList<>(DebugTraceInfo.class, Level.MAX_BULLETS * 3);
 
-    private float[] lightTab = new float[LIGHTTAB_MAX];
+    private final float[] lightTab = new float[LIGHTTAB_MAX];
     private Engine engine;
     private State state;
     private Renderer renderer;
     private Level level;
-    private float[][] lightMap = new float[Level.MAX_HEIGHT * 2 + 1][Level.MAX_WIDTH * 2 + 1];
+    private final float[][] lightMap = new float[Level.MAX_HEIGHT * 2 + 1][Level.MAX_WIDTH * 2 + 1];
     public float currentHeroX;
     public float currentHeroY;
     public float currentHeroA;
@@ -242,11 +242,11 @@ public class LevelRenderer implements EngineObject {
         lightMap[ly][lx + 2] += val;
     }
 
-    @SuppressWarnings("MagicNumber")
+    @SuppressWarnings({ "MagicNumber", "ManualMinMaxCalculation" })
     private float getLightness(float x, float y) {
         float dx = x - currentHeroX;
         float dy = y - currentHeroY;
-        int d = (int)((float)Math.sqrt((double)(dx * dx + dy * dy)) * LIGHTTAB_DIST_MULT);
+        int d = (int)((float)Math.sqrt(dx * dx + dy * dy) * LIGHTTAB_DIST_MULT);
 
         try {
             return lightTab[d < 0 ? 0 : (d > LIGHTTAB_LAST ? LIGHTTAB_LAST : d)]
@@ -366,6 +366,7 @@ public class LevelRenderer implements EngineObject {
         }
     }
 
+    @SuppressWarnings("ManualMinMaxCalculation")
     private void renderWalls() {
         renderer.startBatch();
         renderer.setCoordsQuadBillboardZ(-HALF_WALL, HALF_WALL);
@@ -404,7 +405,8 @@ public class LevelRenderer implements EngineObject {
 
             renderer.setCoordsQuadBillboard((float)wall.fromX, (float)wall.fromY, (float)wall.toX, (float)wall.toY);
 
-            setWallLighting((float)wall.fromX,
+            setWallLighting(
+                    (float)wall.fromX,
                     (float)wall.fromY,
                     (float)wall.toX,
                     (float)wall.toY,
@@ -430,7 +432,8 @@ public class LevelRenderer implements EngineObject {
             }
         }
 
-        renderer.renderBatch(Renderer.FLAG_CULL
+        renderer.renderBatch(
+                Renderer.FLAG_CULL
                         | Renderer.FLAG_DEPTH
                         | Renderer.FLAG_ALPHA
                         | Renderer.FLAG_SMOOTH,
@@ -557,7 +560,7 @@ public class LevelRenderer implements EngineObject {
     }
 
     // render objects, decorations and transparents
-    @SuppressWarnings("MagicNumber")
+    @SuppressWarnings({ "MagicNumber", "ManualMinMaxCalculation" })
     private void batchObjects() {
         TouchedCell[] localTouchedCells = tracer.touchedCells;
         int[][] localPassableMap = state.passableMap;
@@ -589,7 +592,8 @@ public class LevelRenderer implements EngineObject {
                 renderer.setColorQuadLight(getLightness(mx, my));
 
                 if (objectsCount == 1) {
-                    renderer.setCoordsQuadBillboard(mx - billboardDx + objOffX,
+                    renderer.setCoordsQuadBillboard(
+                            mx - billboardDx + objOffX,
                             my - billboardDy + objOffY,
                             mx + billboardDx + objOffX,
                             my + billboardDy + objOffY);
@@ -602,7 +606,8 @@ public class LevelRenderer implements EngineObject {
                         float omx = mx + (float)Math.cos(oa) * 0.25f;
                         float omy = my + (float)Math.sin(oa) * 0.25f;
 
-                        renderer.setCoordsQuadBillboard(omx - billboardDx,
+                        renderer.setCoordsQuadBillboard(
+                                omx - billboardDx,
                                 omy - billboardDy,
                                 omx + billboardDx,
                                 omy + billboardDy);
@@ -618,7 +623,8 @@ public class LevelRenderer implements EngineObject {
                 float mx = (float)tc.x + 0.5f;
                 float my = (float)tc.y + 0.5f;
 
-                renderer.setCoordsQuadBillboard(mx - billboardDx,
+                renderer.setCoordsQuadBillboard(
+                        mx - billboardDx,
                         my - billboardDy,
                         mx + billboardDx,
                         my + billboardDy);
@@ -760,7 +766,8 @@ public class LevelRenderer implements EngineObject {
                 tex += 12 + (mon.dieTime < 0 ? 2 : Math.min(2, (elapsedTime - mon.dieTime) / 150));
             }
 
-            renderer.setCoordsQuadBillboard(mon.x - billboardDx * MONSTER_SIZE_MULT + offX,
+            renderer.setCoordsQuadBillboard(
+                    mon.x - billboardDx * MONSTER_SIZE_MULT + offX,
                     mon.y - billboardDy * MONSTER_SIZE_MULT + offY,
                     mon.x + billboardDx * MONSTER_SIZE_MULT + offX,
                     mon.y + billboardDy * MONSTER_SIZE_MULT + offY);
@@ -769,7 +776,8 @@ public class LevelRenderer implements EngineObject {
             renderer.batchTexQuadMon(tex);
         }
 
-        renderer.renderBatch(Renderer.FLAG_DEPTH | Renderer.FLAG_ALPHA | Renderer.FLAG_SMOOTH,
+        renderer.renderBatch(
+                Renderer.FLAG_DEPTH | Renderer.FLAG_ALPHA | Renderer.FLAG_SMOOTH,
                 Renderer.TEXTURE_MONSTERS + texIdx);
     }
 
@@ -794,7 +802,8 @@ public class LevelRenderer implements EngineObject {
             float fy = (float)tc.y;
             float ty = (float)(tc.y + 1);
 
-            renderer.setColorQuadLight(getLightness(fx, ty),
+            renderer.setColorQuadLight(
+                    getLightness(fx, ty),
                     getLightness(fx, fy),
                     getLightness(tx, fy),
                     getLightness(tx, ty));
@@ -806,7 +815,7 @@ public class LevelRenderer implements EngineObject {
         renderer.renderBatch(Renderer.FLAG_DEPTH | Renderer.FLAG_ALPHA | Renderer.FLAG_SMOOTH, Renderer.TEXTURE_MAIN);
     }
 
-    @SuppressWarnings({ "MagicNumber", "ConstantConditions" })
+    @SuppressWarnings({ "MagicNumber" })
     private void renderFloorAndCeil() {
         TouchedCell[] localTouchedCells = tracer.touchedCells;
         int[][] localWallsMap = state.wallsMap;
@@ -953,7 +962,7 @@ public class LevelRenderer implements EngineObject {
                 int ceilTex2l = localCeilMap2[tc.y][tc.x - 1];
                 int ceilTex4l = localCeilMap4[tc.y][tc.x - 1];
 
-                if ((ceilTex2l == 0 && ceilTex1 != 0) || (ceilTex2l != 0 && ceilTex1 == 0)) {
+                if ((ceilTex2l == 0) == (ceilTex1 != 0)) {
                     renderer.setColorQuadLight(lff, lfm, lfm, lff);
                     renderer.setCoordsQuadRect(fx, fy, fx, my);
 
@@ -964,7 +973,7 @@ public class LevelRenderer implements EngineObject {
                     }
                 }
 
-                if ((ceilTex4l == 0 && ceilTex3 != 0) || (ceilTex4l != 0 && ceilTex3 == 0)) {
+                if ((ceilTex4l == 0) == (ceilTex3 != 0)) {
                     renderer.setColorQuadLight(lfm, lft, lft, lfm);
                     renderer.setCoordsQuadRect(fx, my, fx, ty);
 
@@ -980,7 +989,7 @@ public class LevelRenderer implements EngineObject {
                 int ceilTex1d = localCeilMap1[tc.y + 1][tc.x];
                 int ceilTex2d = localCeilMap2[tc.y + 1][tc.x];
 
-                if ((ceilTex1d == 0 && ceilTex3 != 0) || (ceilTex1d != 0 && ceilTex3 == 0)) {
+                if ((ceilTex1d == 0) == (ceilTex3 != 0)) {
                     renderer.setColorQuadLight(lft, lmt, lmt, lft);
                     renderer.setCoordsQuadRectFlip(fx, ty, mx, ty);
 
@@ -991,7 +1000,7 @@ public class LevelRenderer implements EngineObject {
                     }
                 }
 
-                if ((ceilTex2d == 0 && ceilTex4 != 0) || (ceilTex2d != 0 && ceilTex4 == 0)) {
+                if ((ceilTex2d == 0) == (ceilTex4 != 0)) {
                     renderer.setColorQuadLight(lmt, ltt, ltt, lmt);
                     renderer.setCoordsQuadRectFlip(mx, ty, tx, ty);
 
@@ -1003,7 +1012,7 @@ public class LevelRenderer implements EngineObject {
                 }
             }
 
-            if ((ceilTex1 == 0 && ceilTex2 != 0) || (ceilTex1 != 0 && ceilTex2 == 0)) {
+            if ((ceilTex1 == 0) == (ceilTex2 != 0)) {
                 renderer.setColorQuadLight(lmf, lmm, lmm, lmf);
                 renderer.setCoordsQuadRect(mx, fy, mx, my);
 
@@ -1014,7 +1023,7 @@ public class LevelRenderer implements EngineObject {
                 }
             }
 
-            if ((ceilTex3 == 0 && ceilTex4 != 0) || (ceilTex3 != 0 && ceilTex4 == 0)) {
+            if ((ceilTex3 == 0) == (ceilTex4 != 0)) {
                 renderer.setColorQuadLight(lmm, lmt, lmt, lmm);
                 renderer.setCoordsQuadRect(mx, my, mx, ty);
 
@@ -1025,7 +1034,7 @@ public class LevelRenderer implements EngineObject {
                 }
             }
 
-            if ((ceilTex1 == 0 && ceilTex3 != 0) || (ceilTex1 != 0 && ceilTex3 == 0)) {
+            if ((ceilTex1 == 0) == (ceilTex3 != 0)) {
                 renderer.setColorQuadLight(lfm, lmm, lmm, lfm);
                 renderer.setCoordsQuadRectFlip(fx, my, mx, my);
 
@@ -1036,7 +1045,7 @@ public class LevelRenderer implements EngineObject {
                 }
             }
 
-            if ((ceilTex2 == 0 && ceilTex4 != 0) || (ceilTex2 != 0 && ceilTex4 == 0)) {
+            if ((ceilTex2 == 0) == (ceilTex4 != 0)) {
                 renderer.setColorQuadLight(lmm, ltm, ltm, lmm);
                 renderer.setCoordsQuadRectFlip(mx, my, tx, my);
 
@@ -1064,7 +1073,8 @@ public class LevelRenderer implements EngineObject {
 
             float offZ = HALF_WALL * 0.5f * (float)Math.sin(bullet.dist / bullet.params.maxDist * Math.PI * 1.5);
 
-            renderer.setCoordsQuadBillboard(bullet.x - billboardDx,
+            renderer.setCoordsQuadBillboard(
+                    bullet.x - billboardDx,
                     bullet.y - billboardDy,
                     bullet.x + billboardDx,
                     bullet.y + billboardDy,
@@ -1087,7 +1097,8 @@ public class LevelRenderer implements EngineObject {
                 continue;
             }
 
-            renderer.setCoordsQuadBillboard(explosion.x - billboardDx,
+            renderer.setCoordsQuadBillboard(
+                    explosion.x - billboardDx,
                     explosion.y - billboardDy,
                     explosion.x + billboardDx,
                     explosion.y + billboardDy);
@@ -1107,14 +1118,15 @@ public class LevelRenderer implements EngineObject {
 
             float dx = bulletTrace.x - currentHeroX;
             float dy = bulletTrace.y - currentHeroY;
-            float dist = (float)Math.sqrt((double)(dx * dx + dy * dy));
+            float dist = (float)Math.sqrt(dx * dx + dy * dy);
             float scale = BTRACE_MIN_SCALE + (BTRACE_MAX_SCALE - BTRACE_MIN_SCALE) * (dist / BTRACE_MAX_DIST);
 
             float x = bulletTrace.x + billboardDx * bulletTrace.off - sightDx * GameMath.SIGHT_OFFSET;
             float y = bulletTrace.y + billboardDy * bulletTrace.off - sightDy * GameMath.SIGHT_OFFSET;
             float z = bulletTrace.z * -HALF_WALL;
 
-            renderer.setCoordsQuadBillboard(x - billboardDx * scale,
+            renderer.setCoordsQuadBillboard(
+                    x - billboardDx * scale,
                     y - billboardDy * scale,
                     x + billboardDx * scale,
                     y + billboardDy * scale,
@@ -1130,7 +1142,6 @@ public class LevelRenderer implements EngineObject {
                 bulletTraces.release(bulletTrace);
             }
 
-            //noinspection AssignmentToForLoopParameter
             bulletTrace = nextBulletTrace;
         }
 
@@ -1155,7 +1166,8 @@ public class LevelRenderer implements EngineObject {
 
         tracer.trace(currentHeroX, currentHeroY, engine.heroAr, 44.0f * GameMath.G2RAD_F);
 
-        renderer.useFrustum(-FRUSTUM_SIZE,
+        renderer.useFrustum(
+                -FRUSTUM_SIZE,
                 FRUSTUM_SIZE,
                 -FRUSTUM_SIZE / engine.ratio,
                 FRUSTUM_SIZE / engine.ratio,
@@ -1183,7 +1195,8 @@ public class LevelRenderer implements EngineObject {
         batchBullets();
         batchObjects();
 
-        renderer.renderBatch(Renderer.FLAG_DEPTH | Renderer.FLAG_ALPHA | Renderer.FLAG_SMOOTH,
+        renderer.renderBatch(
+                Renderer.FLAG_DEPTH | Renderer.FLAG_ALPHA | Renderer.FLAG_SMOOTH,
                 Renderer.TEXTURE_MAIN);
 
         renderMonsters(elapsedTime, 0, true);
diff --git a/src/main/java/zame/game/engine/level/PortalTracer.java b/android/src/main/java/zame/game/engine/level/PortalTracer.java
similarity index 98%
rename from src/main/java/zame/game/engine/level/PortalTracer.java
rename to android/src/main/java/zame/game/engine/level/PortalTracer.java
index c42ac94..85d3aef 100644
--- a/src/main/java/zame/game/engine/level/PortalTracer.java
+++ b/android/src/main/java/zame/game/engine/level/PortalTracer.java
@@ -2,8 +2,8 @@ package zame.game.engine.level;
 
 import zame.game.engine.Engine;
 import zame.game.engine.EngineObject;
-import zame.game.engine.state.State;
 import zame.game.engine.entity.TouchedCell;
+import zame.game.engine.state.State;
 import zame.game.engine.util.GameMath;
 
 public class PortalTracer implements EngineObject {
@@ -44,7 +44,7 @@ public class PortalTracer implements EngineObject {
     private int[][] level;
     private float heroX;
     private float heroY;
-    private int[][] drawnWalls = new int[Level.MAX_HEIGHT][Level.MAX_WIDTH];
+    private final int[][] drawnWalls = new int[Level.MAX_HEIGHT][Level.MAX_WIDTH];
     private int tToSide = -1;
     private int tFromSide = -1;
 
@@ -159,7 +159,7 @@ public class PortalTracer implements EngineObject {
         }
     }
 
-    @SuppressWarnings({ "MagicNumber", "ConstantConditions" })
+    @SuppressWarnings({ "MagicNumber" })
     private void traceCell(int fromX, int fromY, float fromAngle, int toX, int toY, float toAngle) {
         boolean repeat = true;
         int[][] localLevel = level;
@@ -407,11 +407,8 @@ public class PortalTracer implements EngineObject {
                     // Note: addWallBlock() modifies class attributes tToSide and tFromSide,
                     // which are used in code below
 
-                    if (cellValue < 0) { // -1 is vertical closed door and -2 is horizontal closed door
-                        addWallBlock(x, y, false);
-                    } else {
-                        addWallBlock(x, y, true);
-                    }
+                    // -1 is vertical closed door and -2 is horizontal closed door
+                    addWallBlock(x, y, cellValue >= 0);
 
                     if (!wall) {
                         lastX = prevX;
@@ -568,7 +565,7 @@ public class PortalTracer implements EngineObject {
     }
 
     // halfFov must be between (10 * PI / 180) and (45 * PI / 180)
-    @SuppressWarnings("MagicNumber")
+    @SuppressWarnings({ "MagicNumber", "UnnecessaryLocalVariable" })
     public void trace(float x, float y, float heroAngle, @SuppressWarnings("SameParameterValue") float halfFov) {
         level = state.wallsMap;
         levelWidth = state.levelWidth;
diff --git a/src/main/java/zame/game/engine/state/BaseState.java b/android/src/main/java/zame/game/engine/state/BaseState.java
similarity index 99%
rename from src/main/java/zame/game/engine/state/BaseState.java
rename to android/src/main/java/zame/game/engine/state/BaseState.java
index c1bde13..b6b784f 100644
--- a/src/main/java/zame/game/engine/state/BaseState.java
+++ b/android/src/main/java/zame/game/engine/state/BaseState.java
@@ -6,10 +6,11 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import zame.game.core.util.Common;
+
 import zame.game.core.serializer.DataItem;
 import zame.game.core.serializer.DataReader;
 import zame.game.core.serializer.DataWriter;
+import zame.game.core.util.Common;
 
 public abstract class BaseState implements DataItem {
     private static final String SIGNATURE = "FireStrike5";
diff --git a/src/main/java/zame/game/engine/state/Profile.java b/android/src/main/java/zame/game/engine/state/Profile.java
similarity index 93%
rename from src/main/java/zame/game/engine/state/Profile.java
rename to android/src/main/java/zame/game/engine/state/Profile.java
index 430dfe5..62dc633 100644
--- a/src/main/java/zame/game/engine/state/Profile.java
+++ b/android/src/main/java/zame/game/engine/state/Profile.java
@@ -1,12 +1,15 @@
 package zame.game.engine.state;
 
 import android.content.Context;
-import android.support.v4.util.SparseArrayCompat;
+
+import androidx.collection.SparseArrayCompat;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.serializer.DataReader;
@@ -33,10 +36,11 @@ public class Profile extends BaseState {
     public HashSet<String> alreadyCompletedLevels = new HashSet<>();
 
     public ProfileLevel[] levels = ProfileConfig.createLevelsList();
-    private HashMap<String, ProfileLevel> levelsMap = new HashMap<>();
-    private ProfileLevel dummyLevel = new ProfileLevel("", -1, 0, ProfileLevel.AD_NONE);
+    private final HashMap<String, ProfileLevel> levelsMap = new HashMap<>();
+    private final ProfileLevel dummyLevel = new ProfileLevel("", -1, 0, ProfileLevel.AD_NONE);
     @SuppressWarnings("FieldCanBeLocal") private boolean wasChangedOnVersionUpgrade;
 
+    @SuppressWarnings("ConstantConditions")
     public Profile() {
         super();
         SparseArrayCompat<Integer> episodeIndices = new SparseArrayCompat<>();
@@ -116,7 +120,7 @@ public class Profile extends BaseState {
             }
         }
 
-        // MyApplication.self.getBroadcastManager().sendBroadcast(new Intent(BROADCAST_ACTION_UPDATED));
+        // App.self.broadcastManager().sendBroadcast(BROADCAST_ACTION_UPDATED);
     }
 
     @SuppressWarnings("RedundantMethodOverride")
diff --git a/src/main/java/zame/game/engine/state/ProfileLevel.java b/android/src/main/java/zame/game/engine/state/ProfileLevel.java
similarity index 100%
rename from src/main/java/zame/game/engine/state/ProfileLevel.java
rename to android/src/main/java/zame/game/engine/state/ProfileLevel.java
diff --git a/src/main/java/zame/game/engine/state/State.java b/android/src/main/java/zame/game/engine/state/State.java
similarity index 98%
rename from src/main/java/zame/game/engine/state/State.java
rename to android/src/main/java/zame/game/engine/state/State.java
index 5f32034..f40d5f8 100644
--- a/src/main/java/zame/game/engine/state/State.java
+++ b/android/src/main/java/zame/game/engine/state/State.java
@@ -3,6 +3,7 @@ package zame.game.engine.state;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.serializer.DataList;
@@ -72,7 +73,7 @@ public class State extends BaseState implements EngineObject {
     private static final int FIELD_HIGHLIGHTED_CONTROL_TYPE_MASK = 35;
     private static final int FIELD_SHOWN_MESSAGE_ID = 36;
     private static final int FIELD_HERO_VERT_A = 37;
-    // private static final int FIELD_AUTO_SELECT_WEAPON = 38;
+    private static final int FIELD_TRACKED_EVENTS = 38;
     private static final int FIELD_AW_TOUCHED_CELLS = 39;
     private static final int FIELD_TIME_IN_TICKS = 40;
     // private static final int FIELD_OVERALL_ITEMS = 41;
@@ -168,7 +169,8 @@ public class State extends BaseState implements EngineObject {
     public DataList<Timeout> timeouts = new DataList<>(Timeout.class, Level.MAX_TIMEOUTS);
     public DataList<LookPoint> lookPoints = new DataList<>(LookPoint.class, Level.MAX_LOOK_POINTS);
 
-    public DataList<OnChangeWeaponAction> onChangeWeaponActions = new DataList<>(OnChangeWeaponAction.class,
+    public DataList<OnChangeWeaponAction> onChangeWeaponActions = new DataList<>(
+            OnChangeWeaponAction.class,
             Level.MAX_ON_CHANGE_WEAPON_ACTIONS);
 
     public List<List<Action>> actions = new ArrayList<>();
@@ -198,6 +200,8 @@ public class State extends BaseState implements EngineObject {
     public int pathToX;
     public int pathToY;
 
+    public boolean[] trackedEvents = new boolean[Level.MAX_TRACKED_EVENTS];
+
     @Override
     public void onCreate(Engine engine) {
         this.engine = engine;
@@ -337,6 +341,10 @@ public class State extends BaseState implements EngineObject {
                 drawnAutoWalls[i][j] = 0;
             }
         }
+
+        for (int i = 0; i < Level.MAX_TRACKED_EVENTS; i++) {
+            trackedEvents[i] = false;
+        }
     }
 
     @Override
@@ -434,6 +442,7 @@ public class State extends BaseState implements EngineObject {
         writer.write(FIELD_PATH_TO_X, pathToX);
         writer.write(FIELD_PATH_TO_Y, pathToY);
         writer.write(FIELD_CHEATS_DISABLED, cheatsDisabled);
+        writer.write(FIELD_TRACKED_EVENTS, trackedEvents);
 
         for (int i = 0; i < levelHeight; i++) {
             for (int j = 0; j < levelWidth; j++) {
@@ -530,6 +539,7 @@ public class State extends BaseState implements EngineObject {
         pathToX = reader.readInt(FIELD_PATH_TO_X);
         pathToY = reader.readInt(FIELD_PATH_TO_Y);
         cheatsDisabled = reader.readBoolean(FIELD_CHEATS_DISABLED);
+        trackedEvents = reader.readBooleanArray(FIELD_TRACKED_EVENTS, Level.MAX_TRACKED_EVENTS);
 
         engine.level.requestBuildPathToWave();
 
diff --git a/src/main/java/zame/game/engine/util/GameMath.java b/android/src/main/java/zame/game/engine/util/GameMath.java
similarity index 93%
rename from src/main/java/zame/game/engine/util/GameMath.java
rename to android/src/main/java/zame/game/engine/util/GameMath.java
index 720bf3c..0fdbcaf 100644
--- a/src/main/java/zame/game/engine/util/GameMath.java
+++ b/android/src/main/java/zame/game/engine/util/GameMath.java
@@ -12,20 +12,23 @@ public final class GameMath {
 
     private GameMath() {}
 
+    @SuppressWarnings("ManualMinMaxCalculation")
     public static float getAngle(float dx, float dy) {
-        float l = (float)Math.sqrt((double)(dx * dx + dy * dy));
+        float l = (float)Math.sqrt(dx * dx + dy * dy);
         float a = (float)Math.acos(dx / (l < EPSILON ? EPSILON : l));
 
         return (dy < 0 ? a : (PI_M2F - a));
     }
 
+    @SuppressWarnings("ManualMinMaxCalculation")
     public static float getAngle(float dx, float dy, float l) {
         float a = (float)Math.acos(dx / (l < EPSILON ? EPSILON : l));
         return (dy < 0 ? a : (PI_M2F - a));
     }
 
     // modified Level_CheckLine from wolf3d for iphone by Carmack
-    public static boolean traceLine(int levelWidth,
+    public static boolean traceLine(
+            int levelWidth,
             int levelHeight,
             int[][] passableMap,
             float x1,
diff --git a/src/main/java/zame/game/engine/visual/AutoMap.java b/android/src/main/java/zame/game/engine/visual/AutoMap.java
similarity index 97%
rename from src/main/java/zame/game/engine/visual/AutoMap.java
rename to android/src/main/java/zame/game/engine/visual/AutoMap.java
index 867d856..e497bca 100644
--- a/src/main/java/zame/game/engine/visual/AutoMap.java
+++ b/android/src/main/java/zame/game/engine/visual/AutoMap.java
@@ -60,14 +60,16 @@ public class AutoMap implements EngineObject {
         renderer.startBatch();
         renderer.setColorQuadRGBA(1.0f, 1.0f, 1.0f, 0.75f);
 
-        renderer.setCoordsQuadRectFlat(-AUTOMAP_AREA * AUTOMAP_VIEW_SIZE,
+        renderer.setCoordsQuadRectFlat(
+                -AUTOMAP_AREA * AUTOMAP_VIEW_SIZE,
                 -AUTOMAP_AREA * AUTOMAP_VIEW_SIZE,
                 AUTOMAP_AREA * AUTOMAP_VIEW_SIZE,
                 AUTOMAP_AREA * AUTOMAP_VIEW_SIZE);
 
         renderer.batchTexQuad(TextureLoader.ICON_MAP);
 
-        renderer.useOrtho(-AUTOMAP_AREA * engine.ratio,
+        renderer.useOrtho(
+                -AUTOMAP_AREA * engine.ratio,
                 AUTOMAP_AREA * engine.ratio,
                 -AUTOMAP_AREA,
                 AUTOMAP_AREA,
@@ -76,7 +78,8 @@ public class AutoMap implements EngineObject {
 
         renderer.gl.glTranslatef(autoMapOffX, autoMapOffY, 0.0f);
 
-        renderer.renderBatch(Renderer.FLAG_BLEND
+        renderer.renderBatch(
+                Renderer.FLAG_BLEND
                         | Renderer.FLAG_ALPHA
                         | Renderer.FLAG_ALPHA_LOWER
                         | Renderer.FLAG_STENCIL_REPLACE,
@@ -98,7 +101,8 @@ public class AutoMap implements EngineObject {
 
             renderer.setColorLineRGB(0.0f, 0.5f, 0.0f);
 
-            for (int i = levelRenderer.tracer.touchedCellsCountPriorToPostProcess, len = levelRenderer.tracer.touchedCellsCount;
+            for (int i = levelRenderer.tracer.touchedCellsCountPriorToPostProcess, len =
+                    levelRenderer.tracer.touchedCellsCount;
                     i < len;
                     i++) {
 
@@ -323,7 +327,6 @@ public class AutoMap implements EngineObject {
                     levelRenderer.debugTraceInfos.release(traceInfo);
                 }
 
-                //noinspection AssignmentToForLoopParameter
                 traceInfo = nextTraceInfo;
             }
 
@@ -384,7 +387,7 @@ public class AutoMap implements EngineObject {
     }
     */
 
-    @SuppressWarnings({ "MagicNumber", "ConstantConditions" })
+    @SuppressWarnings({ "MagicNumber", "ManualMinMaxCalculation" })
     public void openAllMap() {
         int[][] localTexMap = state.texMap;
         int[][] localPassableMap = state.passableMap;
@@ -488,7 +491,8 @@ public class AutoMap implements EngineObject {
                             if (((localDrawnAutoWalls[my][mx] & autoWallMask) == 0) && state.autoWalls.canTake()) {
                                 localDrawnAutoWalls[my][mx] |= autoWallMask;
 
-                                levelRenderer.appendAutoWall(fromX,
+                                levelRenderer.appendAutoWall(
+                                        fromX,
                                         fromY,
                                         toX,
                                         toY,
@@ -552,7 +556,8 @@ public class AutoMap implements EngineObject {
 
         float xOff = (float)engine.width / engine.ratio * (AUTOMAP_VIEW_OFFSET + AUTOMAP_VIEW_SIZE) * 0.5f;
 
-        controls.renderHelpArrowWithText((engine.config.leftHandAim ? xOff : (float)engine.width - xOff),
+        controls.renderHelpArrowWithText(
+                (engine.config.leftHandAim ? xOff : (float)engine.width - xOff),
                 (float)engine.height * (AUTOMAP_VIEW_OFFSET + AUTOMAP_VIEW_SIZE) * 0.5f,
                 Controls.DIAG_SIZE_LG,
                 engine.config.leftHandAim,
@@ -560,7 +565,6 @@ public class AutoMap implements EngineObject {
                 Labels.LABEL_HELP_MINIMAP);
     }
 
-    @SuppressWarnings("ConstantConditions")
     public void updatePathTo() {
         if (level.buildPathToWavePending) {
             return;
diff --git a/src/main/java/zame/game/engine/visual/Controls.java b/android/src/main/java/zame/game/engine/visual/Controls.java
similarity index 92%
rename from src/main/java/zame/game/engine/visual/Controls.java
rename to android/src/main/java/zame/game/engine/visual/Controls.java
index 228652c..87e8269 100644
--- a/src/main/java/zame/game/engine/visual/Controls.java
+++ b/android/src/main/java/zame/game/engine/visual/Controls.java
@@ -1,6 +1,7 @@
 package zame.game.engine.visual;
 
 import android.view.MotionEvent;
+
 import zame.game.App;
 import zame.game.core.util.Common;
 import zame.game.engine.Config;
@@ -76,20 +77,22 @@ public class Controls implements EngineObject {
     private Game game;
     private Labels labels;
     private State state;
-    private OnScreenController[] activeControllers = new OnScreenController[MAX_POINTER_ID];
+    private final OnScreenController[] activeControllers = new OnScreenController[MAX_POINTER_ID];
 
-    private OnScreenButton schemeMenuButton = new OnScreenButton(POSITION_LEFT | POSITION_TOP,
+    private final OnScreenButton schemeMenuButton = new OnScreenButton(
+            POSITION_LEFT | POSITION_TOP,
             OnScreenButton.TYPE_GAME_MENU);
 
-    private OnScreenQuickWeapons schemeQuickWeapons = new OnScreenQuickWeapons(POSITION_HCENTER | POSITION_TOP);
-    private OnScreenPad schemePad = new OnScreenPad(POSITION_LEFT, false);
-    private OnScreenFireAndRotate schemeFireAndRotate = new OnScreenFireAndRotate(POSITION_RIGHT);
-    private OnScreenButton schemeRestartButton = new OnScreenButton(POSITION_LEFT, OnScreenButton.TYPE_RESTART);
+    private final OnScreenQuickWeapons schemeQuickWeapons = new OnScreenQuickWeapons(POSITION_HCENTER | POSITION_TOP);
+    private final OnScreenPad schemePad = new OnScreenPad(POSITION_LEFT, false);
+    private final OnScreenFireAndRotate schemeFireAndRotate = new OnScreenFireAndRotate(POSITION_RIGHT);
+    private final OnScreenButton schemeRestartButton = new OnScreenButton(POSITION_LEFT, OnScreenButton.TYPE_RESTART);
 
-    private OnScreenButton schemeContinueButton = new OnScreenButton(POSITION_RIGHT,
+    private final OnScreenButton schemeContinueButton = new OnScreenButton(
+            POSITION_RIGHT,
             OnScreenButton.TYPE_REWARDED_CONTINUE);
 
-    private OnScreenController[] scheme = { schemeMenuButton,
+    private final OnScreenController[] scheme = { schemeMenuButton,
             schemeQuickWeapons,
             schemePad,
             schemeFireAndRotate, // must be after all game controls
@@ -220,7 +223,8 @@ public class Controls implements EngineObject {
                 aidx = (action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
 
                 if (aidx < points) {
-                    processOnePointer(event.getPointerId(aidx),
+                    processOnePointer(
+                            event.getPointerId(aidx),
                             event.getX(aidx),
                             event.getY(aidx),
                             POINTER_ACTION_DOWN);
@@ -253,7 +257,8 @@ public class Controls implements EngineObject {
         batchIcon(pointerX, pointerY, texNum, pressed, -1.0f, 1.0f);
     }
 
-    public void batchIcon(float pointerX,
+    public void batchIcon(
+            float pointerX,
             float pointerY,
             int texNum,
             @SuppressWarnings("SameParameterValue") boolean pressed,
@@ -263,7 +268,8 @@ public class Controls implements EngineObject {
     }
 
     @SuppressWarnings("MagicNumber")
-    public void batchIcon(float pointerX,
+    public void batchIcon(
+            float pointerX,
             float pointerY,
             int texNum,
             boolean pressed,
@@ -276,7 +282,8 @@ public class Controls implements EngineObject {
         float sx = screenX - 0.125f * App.self.controlsScale * customScale;
         float sy = screenY - 0.125f * App.self.controlsScale * customScale;
 
-        renderer.setCoordsQuadRect(sx,
+        renderer.setCoordsQuadRect(
+                sx,
                 sy,
                 sx + 0.25f * App.self.controlsScale * customScale,
                 sy + 0.25f * App.self.controlsScale * customScale);
@@ -304,7 +311,8 @@ public class Controls implements EngineObject {
         float sx = screenX - 0.25f * App.self.controlsScale * scale;
         float sy = screenY - 0.25f * App.self.controlsScale * scale;
 
-        renderer.setCoordsQuadRect(sx,
+        renderer.setCoordsQuadRect(
+                sx,
                 sy,
                 sx + 0.5f * App.self.controlsScale * scale,
                 sy + 0.5f * App.self.controlsScale * scale);
@@ -320,7 +328,8 @@ public class Controls implements EngineObject {
         renderer.batchTexQuad2x(texNum);
     }
 
-    public void batchArrow(float sx,
+    public void batchArrow(
+            float sx,
             float sy,
             float ex,
             float ey,
@@ -347,12 +356,15 @@ public class Controls implements EngineObject {
         renderer.y4 = sy + my * ARROW_F_SIZE + ny * ARROW_F_WEIGHT;
         renderer.batchQuad();
 
+        float tmpX = sx + mx * ARROW_N_SIZE - nx * LINE_WEIGHT;
+        float tmpY = sy + my * ARROW_N_SIZE - ny * LINE_WEIGHT;
+
         renderer.x1 = sx;
         renderer.y1 = sy;
         renderer.x2 = sx + mx * ARROW_N_SIZE;
         renderer.y2 = sy + my * ARROW_N_SIZE;
-        renderer.x3 = sx + mx * ARROW_N_SIZE - nx * LINE_WEIGHT;
-        renderer.y3 = sy + my * ARROW_N_SIZE - ny * LINE_WEIGHT;
+        renderer.x3 = tmpX;
+        renderer.y3 = tmpY;
         renderer.x4 = sx + mx * ARROW_F_SIZE - nx * ARROW_F_WEIGHT;
         renderer.y4 = sy + my * ARROW_F_SIZE - ny * ARROW_F_WEIGHT;
         renderer.batchQuad();
@@ -361,8 +373,8 @@ public class Controls implements EngineObject {
         renderer.y1 = ey + ny * LINE_WEIGHT;
         renderer.x2 = ex - nx * LINE_WEIGHT;
         renderer.y2 = ey - ny * LINE_WEIGHT;
-        renderer.x3 = sx + mx * ARROW_N_SIZE - nx * LINE_WEIGHT;
-        renderer.y3 = sy + my * ARROW_N_SIZE - ny * LINE_WEIGHT;
+        renderer.x3 = tmpX;
+        renderer.y3 = tmpY;
         renderer.x4 = sx + mx * ARROW_N_SIZE + nx * LINE_WEIGHT;
         renderer.y4 = sy + my * ARROW_N_SIZE + ny * LINE_WEIGHT;
         renderer.batchQuad();
@@ -400,7 +412,8 @@ public class Controls implements EngineObject {
     }
 
     @SuppressWarnings("MagicNumber")
-    public void renderHelpArrowWithText(float displayX,
+    public void renderHelpArrowWithText(
+            float displayX,
             float displayY,
             float diagSize,
             boolean posLeft,
@@ -454,7 +467,6 @@ public class Controls implements EngineObject {
         }
     }
 
-    @SuppressWarnings("MagicNumber")
     private void subRenderHelp(long elapsedTime) {
         //noinspection ForLoopReplaceableByForEach
         for (int i = 0, len = scheme.length; i < len; i++) {
diff --git a/src/main/java/zame/game/engine/visual/EndLevel.java b/android/src/main/java/zame/game/engine/visual/EndLevel.java
similarity index 96%
rename from src/main/java/zame/game/engine/visual/EndLevel.java
rename to android/src/main/java/zame/game/engine/visual/EndLevel.java
index dce9bc5..df84174 100644
--- a/src/main/java/zame/game/engine/visual/EndLevel.java
+++ b/android/src/main/java/zame/game/engine/visual/EndLevel.java
@@ -106,7 +106,8 @@ public class EndLevel implements EngineObject {
         float ex = engine.ratio - 0.1f;
         float my = startY;
 
-        labels.batch(sx,
+        labels.batch(
+                sx,
                 my - LINE_OFFSET,
                 ex,
                 my + LINE_OFFSET,
@@ -117,7 +118,8 @@ public class EndLevel implements EngineObject {
         my += LINE_HEIGHT;
 
         if (totalSecrets >= 0) {
-            labels.batch(sx,
+            labels.batch(
+                    sx,
                     my - LINE_OFFSET,
                     ex,
                     my + LINE_OFFSET,
@@ -129,7 +131,8 @@ public class EndLevel implements EngineObject {
         }
 
         if (totalKills >= 0) {
-            labels.batch(sx,
+            labels.batch(
+                    sx,
                     my - LINE_OFFSET,
                     ex,
                     my + LINE_OFFSET,
diff --git a/src/main/java/zame/game/engine/visual/GameOver.java b/android/src/main/java/zame/game/engine/visual/GameOver.java
similarity index 84%
rename from src/main/java/zame/game/engine/visual/GameOver.java
rename to android/src/main/java/zame/game/engine/visual/GameOver.java
index 2696ddb..84a2797 100644
--- a/src/main/java/zame/game/engine/visual/GameOver.java
+++ b/android/src/main/java/zame/game/engine/visual/GameOver.java
@@ -6,6 +6,7 @@ import zame.game.engine.EngineObject;
 import zame.game.engine.Game;
 import zame.game.engine.graphics.Labels;
 import zame.game.engine.graphics.Renderer;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 
 public class GameOver implements EngineObject {
@@ -26,14 +27,14 @@ public class GameOver implements EngineObject {
 
     public void update() {
         if (game.actionRestartButton) {
-            App.self.tracker.trackEvent("GameOver.Restart", engine.state.levelName);
+            App.self.tracker.trackEvent(EventsConfig.EV_GAME_GAME_OVER_RESTART, engine.state.levelName);
             soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
             soundManager.setPlaylist(SoundManager.LIST_MAIN);
-            game.loadLevel(Game.LOAD_LEVEL_NORMAL);
+            game.loadLevel(Game.LOAD_LEVEL_NORMAL); // analytics depends on "actionRestartButton"
         }
 
         if (game.actionContinueButton) {
-            App.self.tracker.trackEvent("GameOver.Continue", engine.state.levelName);
+            App.self.tracker.trackEvent(EventsConfig.EV_GAME_GAME_OVER_CONTINUE_REWARDED, engine.state.levelName);
             soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
             soundManager.setPlaylist(SoundManager.LIST_MAIN);
             engine.state.mustLoadAutosave = false;
diff --git a/src/main/java/zame/game/engine/visual/Overlay.java b/android/src/main/java/zame/game/engine/visual/Overlay.java
similarity index 97%
rename from src/main/java/zame/game/engine/visual/Overlay.java
rename to android/src/main/java/zame/game/engine/visual/Overlay.java
index c35987d..f4db742 100644
--- a/src/main/java/zame/game/engine/visual/Overlay.java
+++ b/android/src/main/java/zame/game/engine/visual/Overlay.java
@@ -1,6 +1,7 @@
 package zame.game.engine.visual;
 
 import android.content.res.Resources;
+
 import zame.game.engine.Config;
 import zame.game.engine.Engine;
 import zame.game.engine.EngineObject;
@@ -66,7 +67,7 @@ public class Overlay implements EngineObject {
     private long overlayTime;
     private String shownLabel;
     private long labelTime;
-    private long[] hitSideTime = { 0, 0, 0, 0 }; // timers for all the four gradients
+    private final long[] hitSideTime = { 0, 0, 0, 0 }; // timers for all the four gradients
 
     @Override
     public void onCreate(Engine engine) {
@@ -98,7 +99,8 @@ public class Overlay implements EngineObject {
     }
 
     public void showAchievement(int resId) {
-        shownLabel = String.format(labels.map[Labels.LABEL_ACHIEVEMENT_UNLOCKED],
+        shownLabel = String.format(
+                labels.map[Labels.LABEL_ACHIEVEMENT_UNLOCKED],
                 Achievements.cleanupTitle(resources.getString(resId)));
 
         labelTime = engine.elapsedTime;
@@ -129,7 +131,8 @@ public class Overlay implements EngineObject {
         renderer.b1 = 0.0f;
         renderer.a1 = 0.0f;
 
-        float bloodAlpha = Math.max(0.0f,
+        float bloodAlpha = Math.max(
+                0.0f,
                 0.4f - ((float)state.heroHealth / 20.0f) * 0.4f);    // less than 20 health - show blood overlay
 
         if (bloodAlpha > 0.0f) {
@@ -140,7 +143,8 @@ public class Overlay implements EngineObject {
             float alpha = 0.5f - (float)(engine.elapsedTime - overlayTime) / DURATION_GENERAL;
 
             if (alpha > 0.0f) {
-                appendOverlayColor(COLORS[overlayType - 1][0],
+                appendOverlayColor(
+                        COLORS[overlayType - 1][0],
                         COLORS[overlayType - 1][1],
                         COLORS[overlayType - 1][2],
                         alpha);
diff --git a/src/main/java/zame/game/engine/visual/Stats.java b/android/src/main/java/zame/game/engine/visual/Stats.java
similarity index 95%
rename from src/main/java/zame/game/engine/visual/Stats.java
rename to android/src/main/java/zame/game/engine/visual/Stats.java
index dd95ad4..e3cfd28 100644
--- a/src/main/java/zame/game/engine/visual/Stats.java
+++ b/android/src/main/java/zame/game/engine/visual/Stats.java
@@ -77,7 +77,8 @@ public class Stats implements EngineObject {
         float sx = (pointerX / (float)engine.width * engine.ratio) - 0.125f * App.self.controlsScale;
         float sy = (1.0f - pointerY / (float)engine.height) - 0.125f * App.self.controlsScale;
 
-        renderer.setCoordsQuadRect(sx,
+        renderer.setCoordsQuadRect(
+                sx,
                 sy,
                 sx + 0.25f * App.self.controlsScale,
                 sy + 0.25f * App.self.controlsScale);
@@ -166,7 +167,8 @@ public class Stats implements EngineObject {
         if ((state.disabledControlsMask & Controls.CONTROL_STATS_HEALTH) == 0
                 && (state.controlsHelpMask & Controls.CONTROL_STATS_HEALTH) != 0) {
 
-            controls.renderHelpArrowWithText(startX + xOff,
+            controls.renderHelpArrowWithText(
+                    startX + xOff,
                     OFFSET_Y_STATS * iconSize + yOff,
                     Controls.DIAG_SIZE_XLG,
                     !engine.config.leftHandAim,
@@ -177,7 +179,8 @@ public class Stats implements EngineObject {
         if ((state.disabledControlsMask & Controls.CONTROL_STATS_AMMO) == 0
                 && (state.controlsHelpMask & Controls.CONTROL_STATS_AMMO) != 0) {
 
-            controls.renderHelpArrowWithText(startX + xOff,
+            controls.renderHelpArrowWithText(
+                    startX + xOff,
                     (DIST_Y_STATS * 2.0f + OFFSET_Y_STATS) * iconSize + yOff,
                     Controls.DIAG_SIZE,
                     !engine.config.leftHandAim,
@@ -188,7 +191,8 @@ public class Stats implements EngineObject {
         if ((state.disabledControlsMask & Controls.CONTROL_STATS_ARMOR) == 0
                 && (state.controlsHelpMask & Controls.CONTROL_STATS_ARMOR) != 0) {
 
-            controls.renderHelpArrowWithText(startX + xOff,
+            controls.renderHelpArrowWithText(
+                    startX + xOff,
                     (DIST_Y_STATS + OFFSET_Y_STATS) * iconSize + yOff,
                     Controls.DIAG_SIZE_LG,
                     !engine.config.leftHandAim,
@@ -199,7 +203,8 @@ public class Stats implements EngineObject {
         if ((state.disabledControlsMask & Controls.CONTROL_STATS_KEYS) == 0
                 && (state.controlsHelpMask & Controls.CONTROL_STATS_KEYS) != 0) {
 
-            controls.renderHelpArrowWithText(startKeysX + xOff,
+            controls.renderHelpArrowWithText(
+                    startKeysX + xOff,
                     OFFSET_Y_KEYS * iconSize + yOff,
                     Controls.DIAG_SIZE,
                     !engine.config.leftHandAim,
diff --git a/src/main/java/zame/game/engine/visual/Weapons.java b/android/src/main/java/zame/game/engine/visual/Weapons.java
similarity index 98%
rename from src/main/java/zame/game/engine/visual/Weapons.java
rename to android/src/main/java/zame/game/engine/visual/Weapons.java
index 573b45b..445ec44 100644
--- a/src/main/java/zame/game/engine/visual/Weapons.java
+++ b/android/src/main/java/zame/game/engine/visual/Weapons.java
@@ -30,7 +30,8 @@ public class Weapons implements EngineObject {
         public String name;
         public String description;
 
-        WeaponParams(int[] cycle,
+        WeaponParams(
+                int[] cycle,
                 int ammoIdx,
                 int needAmmo,
                 int hits,
@@ -312,7 +313,6 @@ public class Weapons implements EngineObject {
             engine.level.executeActions(onChangeWeaponAction.markId);
             state.onChangeWeaponActions.release(onChangeWeaponAction);
 
-            //noinspection AssignmentToForLoopParameter
             onChangeWeaponAction = nextOnChangeWeaponAction;
         }
     }
@@ -332,7 +332,8 @@ public class Weapons implements EngineObject {
         // "canSwitch" just for case
         if (canShoot && tex < 0 && canSwitch(state.heroWeapon)) {
             //noinspection BooleanVariableAlwaysNegated
-            boolean hitOrShoot = Bullet.shootOrPunch(state,
+            boolean hitOrShoot = Bullet.shootOrPunch(
+                    state,
                     state.heroX,
                     state.heroY,
                     engine.heroAr,
diff --git a/src/main/java/zame/game/feature/achievements/Achievement.java b/android/src/main/java/zame/game/feature/achievements/Achievement.java
similarity index 87%
rename from src/main/java/zame/game/feature/achievements/Achievement.java
rename to android/src/main/java/zame/game/feature/achievements/Achievement.java
index d81ef16..cdd4e86 100644
--- a/src/main/java/zame/game/feature/achievements/Achievement.java
+++ b/android/src/main/java/zame/game/feature/achievements/Achievement.java
@@ -1,6 +1,7 @@
 package zame.game.feature.achievements;
 
 import java.util.Locale;
+
 import zame.game.engine.Engine;
 import zame.game.engine.state.Profile;
 import zame.game.engine.state.State;
@@ -13,9 +14,10 @@ public class Achievement {
     int descriptionResourceId;
     boolean isAltBackground;
 
-    private int maxValue;
+    private final int maxValue;
 
-    Achievement(int id,
+    Achievement(
+            int id,
             int statId,
             int maxValue,
             int titleResourceId,
@@ -48,7 +50,8 @@ public class Achievement {
         return profile.achieved[id];
     }
 
-    String getStatusText(@SuppressWarnings("unused") Profile profile, State state) {
+    @SuppressWarnings({ "unused", "RedundantSuppression", "ManualMinMaxCalculation" })
+    String getStatusText(Profile profile, State state) {
         return String.format(Locale.US, "%d/%d", (state.stats[statId] < 0 ? 0 : state.stats[statId]), maxValue);
     }
 }
diff --git a/src/main/java/zame/game/feature/achievements/Achievements.java b/android/src/main/java/zame/game/feature/achievements/Achievements.java
similarity index 81%
rename from src/main/java/zame/game/feature/achievements/Achievements.java
rename to android/src/main/java/zame/game/feature/achievements/Achievements.java
index 0c2cda2..4569d70 100644
--- a/src/main/java/zame/game/feature/achievements/Achievements.java
+++ b/android/src/main/java/zame/game/feature/achievements/Achievements.java
@@ -41,148 +41,172 @@ public final class Achievements {
     public static final int LAST = 24;
 
     public static final Achievement[] LIST = {
-            new Achievement(MONSTERS_KILLED_5,
+            new Achievement(
+                    MONSTERS_KILLED_5,
                     STAT_MONSTERS_KILLED,
                     5,
                     R.string.achievements_t_monsters_killed_5,
                     R.string.achievements_d_monsters_killed_5,
                     false),
-            new Achievement(MONSTERS_KILLED_50,
+            new Achievement(
+                    MONSTERS_KILLED_50,
                     STAT_MONSTERS_KILLED,
                     50,
                     R.string.achievements_t_monsters_killed_50,
                     R.string.achievements_d_monsters_killed_50,
                     false),
-            new Achievement(MONSTERS_KILLED_500,
+            new Achievement(
+                    MONSTERS_KILLED_500,
                     STAT_MONSTERS_KILLED,
                     500,
                     R.string.achievements_t_monsters_killed_500,
                     R.string.achievements_d_monsters_killed_500,
                     false),
-            new Achievement(MONSTERS_KILLED_2500,
+            new Achievement(
+                    MONSTERS_KILLED_2500,
                     STAT_MONSTERS_KILLED,
                     2500,
                     R.string.achievements_t_monsters_killed_2500,
                     R.string.achievements_d_monsters_killed_2500,
                     false),
-            new Achievement(MONSTERS_KILLED_5000,
+            new Achievement(
+                    MONSTERS_KILLED_5000,
                     STAT_MONSTERS_KILLED,
                     5000,
                     R.string.achievements_t_monsters_killed_5000,
                     R.string.achievements_d_monsters_killed_5000,
                     false),
-            new Achievement(P100_KILLS_ROW_5,
+            new Achievement(
+                    P100_KILLS_ROW_5,
                     STAT_P100_KILLS_ROW,
                     5,
                     R.string.achievements_t_p100_kills_row_5,
                     R.string.achievements_d_p100_kills_row_5,
                     false),
-            new Achievement(P100_KILLS_ROW_10,
+            new Achievement(
+                    P100_KILLS_ROW_10,
                     STAT_P100_KILLS_ROW,
                     10,
                     R.string.achievements_t_p100_kills_row_10,
                     R.string.achievements_d_p100_kills_row_10,
                     false),
 
-            new Achievement(SECRETS_FOUND_5,
+            new Achievement(
+                    SECRETS_FOUND_5,
                     STAT_SECRETS_FOUND,
                     5,
                     R.string.achievements_t_secrets_found_5,
                     R.string.achievements_d_secrets_found_5,
                     true),
-            new Achievement(SECRETS_FOUND_10,
+            new Achievement(
+                    SECRETS_FOUND_10,
                     STAT_SECRETS_FOUND,
                     10,
                     R.string.achievements_t_secrets_found_10,
                     R.string.achievements_d_secrets_found_10,
                     true),
-            new Achievement(SECRETS_FOUND_15,
+            new Achievement(
+                    SECRETS_FOUND_15,
                     STAT_SECRETS_FOUND,
                     15,
                     R.string.achievements_t_secrets_found_15,
                     R.string.achievements_d_secrets_found_15,
                     true),
-            new Achievement(SECRETS_FOUND_20,
+            new Achievement(
+                    SECRETS_FOUND_20,
                     STAT_SECRETS_FOUND,
                     20,
                     R.string.achievements_t_secrets_found_20,
                     R.string.achievements_d_secrets_found_20,
                     true),
-            new Achievement(SECRETS_FOUND_30,
+            new Achievement(
+                    SECRETS_FOUND_30,
                     STAT_SECRETS_FOUND,
                     30,
                     R.string.achievements_t_secrets_found_30,
                     R.string.achievements_d_secrets_found_30,
                     true),
-            new Achievement(P100_SECRETS_ROW_5,
+            new Achievement(
+                    P100_SECRETS_ROW_5,
                     STAT_P100_SECRETS_ROW,
                     5,
                     R.string.achievements_t_p100_secrets_row_5,
                     R.string.achievements_d_p100_secrets_row_5,
                     true),
-            new Achievement(P100_SECRETS_ROW_10,
+            new Achievement(
+                    P100_SECRETS_ROW_10,
                     STAT_P100_SECRETS_ROW,
                     10,
                     R.string.achievements_t_p100_secrets_row_10,
                     R.string.achievements_d_p100_secrets_row_10,
                     true),
 
-            new Achievement(BARRELS_EXPLODED_1,
+            new Achievement(
+                    BARRELS_EXPLODED_1,
                     STAT_BARRELS_EXPLODED,
                     1,
                     R.string.achievements_t_barrels_exploded_1,
                     R.string.achievements_d_barrels_exploded_1,
                     false),
-            new Achievement(BARRELS_EXPLODED_5,
+            new Achievement(
+                    BARRELS_EXPLODED_5,
                     STAT_BARRELS_EXPLODED,
                     5,
                     R.string.achievements_t_barrels_exploded_5,
                     R.string.achievements_d_barrels_exploded_5,
                     false),
-            new Achievement(BARRELS_EXPLODED_25,
+            new Achievement(
+                    BARRELS_EXPLODED_25,
                     STAT_BARRELS_EXPLODED,
                     25,
                     R.string.achievements_t_barrels_exploded_25,
                     R.string.achievements_d_barrels_exploded_25,
                     false),
-            new Achievement(BARRELS_EXPLODED_50,
+            new Achievement(
+                    BARRELS_EXPLODED_50,
                     STAT_BARRELS_EXPLODED,
                     50,
                     R.string.achievements_t_barrels_exploded_50,
                     R.string.achievements_d_barrels_exploded_50,
                     false),
-            new Achievement(BARRELS_EXPLODED_100,
+            new Achievement(
+                    BARRELS_EXPLODED_100,
                     STAT_BARRELS_EXPLODED,
                     100,
                     R.string.achievements_t_barrels_exploded_100,
                     R.string.achievements_d_barrels_exploded_100,
                     false),
 
-            new Achievement(DOORS_OPENED_5,
+            new Achievement(
+                    DOORS_OPENED_5,
                     STAT_DOORS_OPENED,
                     5,
                     R.string.achievements_t_doors_opened_5,
                     R.string.achievements_d_doors_opened_5,
                     true),
-            new Achievement(DOORS_OPENED_10,
+            new Achievement(
+                    DOORS_OPENED_10,
                     STAT_DOORS_OPENED,
                     10,
                     R.string.achievements_t_doors_opened_10,
                     R.string.achievements_d_doors_opened_10,
                     true),
-            new Achievement(DOORS_OPENED_25,
+            new Achievement(
+                    DOORS_OPENED_25,
                     STAT_DOORS_OPENED,
                     25,
                     R.string.achievements_t_doors_opened_25,
                     R.string.achievements_d_doors_opened_25,
                     true),
-            new Achievement(DOORS_OPENED_50,
+            new Achievement(
+                    DOORS_OPENED_50,
                     STAT_DOORS_OPENED,
                     50,
                     R.string.achievements_t_doors_opened_50,
                     R.string.achievements_d_doors_opened_50,
                     true),
-            new Achievement(DOORS_OPENED_75,
+            new Achievement(
+                    DOORS_OPENED_75,
                     STAT_DOORS_OPENED,
                     75,
                     R.string.achievements_t_doors_opened_75,
@@ -192,7 +216,8 @@ public final class Achievements {
 
     private Achievements() {}
 
-    public static void resetStat(int statId, @SuppressWarnings("unused") Profile profile, Engine engine, State state) {
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
+    public static void resetStat(int statId, Profile profile, Engine engine, State state) {
         if (!engine.inWallpaperMode) {
             state.stats[statId] = 0;
         }
diff --git a/src/main/java/zame/game/feature/achievements/AchievementsAdapter.java b/android/src/main/java/zame/game/feature/achievements/AchievementsAdapter.java
similarity index 90%
rename from src/main/java/zame/game/feature/achievements/AchievementsAdapter.java
rename to android/src/main/java/zame/game/feature/achievements/AchievementsAdapter.java
index 30f88cb..72a2aec 100644
--- a/src/main/java/zame/game/feature/achievements/AchievementsAdapter.java
+++ b/android/src/main/java/zame/game/feature/achievements/AchievementsAdapter.java
@@ -10,6 +10,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.TextView;
+
 import zame.game.R;
 import zame.game.engine.state.Profile;
 import zame.game.engine.state.State;
@@ -31,15 +32,15 @@ public class AchievementsAdapter extends BaseAdapter {
         }
     }
 
-    private MainActivity activity;
-    private Profile profile;
-    private State state;
-    private LayoutInflater layoutInflater;
-    private Achievement[] items;
-    private Drawable altBgDrawable;
-    private int colorLocked;
-    private int colorAchieved;
-    private String textAchieved;
+    private final MainActivity activity;
+    private final Profile profile;
+    private final State state;
+    private final LayoutInflater layoutInflater;
+    private final Achievement[] items;
+    private final Drawable altBgDrawable;
+    private final int colorLocked;
+    private final int colorAchieved;
+    private final String textAchieved;
 
     AchievementsAdapter(MainActivity activity, Profile profile) {
         super();
diff --git a/src/main/java/zame/game/feature/achievements/AchievementsFragment.java b/android/src/main/java/zame/game/feature/achievements/AchievementsFragment.java
similarity index 61%
rename from src/main/java/zame/game/feature/achievements/AchievementsFragment.java
rename to android/src/main/java/zame/game/feature/achievements/AchievementsFragment.java
index 851f9ea..ac6d3a5 100644
--- a/src/main/java/zame/game/feature/achievements/AchievementsFragment.java
+++ b/android/src/main/java/zame/game/feature/achievements/AchievementsFragment.java
@@ -2,18 +2,20 @@ package zame.game.feature.achievements;
 
 import android.content.Context;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.BaseAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+
 import zame.game.App;
 import zame.game.R;
-import zame.game.feature.sound.SoundManager;
 import zame.game.core.app.BaseFragment;
 import zame.game.engine.state.Profile;
+import zame.game.feature.sound.SoundManager;
 
 public class AchievementsFragment extends BaseFragment {
     public static AchievementsFragment newInstance() {
@@ -28,27 +30,33 @@ public class AchievementsFragment extends BaseFragment {
     }
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
-        this.profile = App.self.profile;
+
+        if (!isForgottenFragment) {
+            this.profile = App.self.profile;
+        }
     }
 
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.achievements_fragment, container, false);
 
-        itemsList = viewGroup.findViewById(R.id.items);
-        refreshAdapter();
+        if (!isForgottenFragment) {
+            itemsList = viewGroup.findViewById(R.id.items);
+            refreshAdapter();
+
+            viewGroup.findViewById(R.id.back).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    activity.showFragment(activity.menuFragment);
+                }
+            });
 
-        viewGroup.findViewById(R.id.back).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                activity.showFragment(activity.menuFragment);
-            }
-        });
+            ((TextView)viewGroup.findViewById(R.id.exp)).setText(getString(R.string.achievements_exp, profile.exp));
+        }
 
-        ((TextView)viewGroup.findViewById(R.id.exp)).setText(getString(R.string.achievements_exp, profile.exp));
         return viewGroup;
     }
 
diff --git a/android/src/main/java/zame/game/feature/config/EventsConfig.java b/android/src/main/java/zame/game/feature/config/EventsConfig.java
new file mode 100644
index 0000000..212d56b
--- /dev/null
+++ b/android/src/main/java/zame/game/feature/config/EventsConfig.java
@@ -0,0 +1,33 @@
+package zame.game.feature.config;
+
+public final class EventsConfig {
+    // 0-9A-Za-z, 32 chars max (to be compatible with GameAnalytics)
+
+    public static final String EV_JUST_INSTALLED = "JustInstalled";
+
+    public static final String EV_GAME_LEVEL_STARTED = "GameLevelStarted";
+    public static final String EV_GAME_LEVEL_FINISHED = "GameLevelFinished";
+    public static final String EV_GAME_SCRIPTED = "GameScripted";
+    public static final String EV_GAME_CODE_ENTERED = "GameCodeEntered";
+    public static final String EV_GAME_GAME_OVER = "GameGameOver";
+    public static final String EV_GAME_GAME_OVER_REWARDED_STATE = "GameGameOverRewardedState";
+
+    public static final String PAR_REWARDED_STATE_AVAILABLE = "Available";
+    public static final String PAR_REWARDED_STATE_NOT_AVAILABLE = "NotAvailable";
+
+    public static final String EV_GAME_GAME_OVER_RESTART = "GameGameOverRestart";
+    public static final String EV_GAME_GAME_OVER_CONTINUE_REWARDED = "GameGameOverContinueRewarded";
+    public static final String EV_GAME_GAME_OVER_REWARDED_SHOWN = "GameGameOverRewardedShown";
+
+    public static final String EV_OPTIONS_HELP_REQUESTED = "OptionsHelpRequested";
+    public static final String EV_OPTIONS_RESTART_CONFIRMED = "OptionsRestartConfirmed";
+
+    public static final String EV_MENU_RATE_BAR_PRESSED = "MenuRateBarPressed";
+    public static final String EV_MENU_RATE = "MenuRate";
+
+    public static final String PAR_MENU_RATE_SHOWN = "Shown";
+    public static final String PAR_MENU_RATE_SHOWN_LIKE = "ShownLike";
+    public static final String PAR_MENU_RATE_SHOWN_DISLIKE = "ShownDislike";
+
+    private EventsConfig() {}
+}
diff --git a/src/main/java/zame/game/feature/consent/ConsentChooserFragment.java b/android/src/main/java/zame/game/feature/consent/ConsentChooserFragment.java
similarity index 63%
rename from src/main/java/zame/game/feature/consent/ConsentChooserFragment.java
rename to android/src/main/java/zame/game/feature/consent/ConsentChooserFragment.java
index fde66a5..4e6228e 100644
--- a/src/main/java/zame/game/feature/consent/ConsentChooserFragment.java
+++ b/android/src/main/java/zame/game/feature/consent/ConsentChooserFragment.java
@@ -1,12 +1,14 @@
 package zame.game.feature.consent;
 
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.app.BaseFragment;
@@ -24,16 +26,30 @@ public class ConsentChooserFragment extends BaseFragment {
         super();
     }
 
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (!isForgottenFragment && !App.self.preferences.getBoolean(R.string.key_is_consent_chosen)) {
+            App.self.preferences.putBoolean(
+                    R.string.key_consent_ad_personalization,
+                    !App.self.isLimitAdTrackingEnabled);
+        }
+    }
+
     @Nullable
     @Override
-    public View onCreateView(@NonNull LayoutInflater inflater,
+    public View onCreateView(
+            @NonNull LayoutInflater inflater,
             @Nullable ViewGroup container,
             @Nullable Bundle savedInstanceState) {
 
         ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.consent_fragment, container, false);
 
-        backButtonView = viewGroup.findViewById(R.id.back);
-        nextButtonView = viewGroup.findViewById(R.id.next);
+        if (!isForgottenFragment) {
+            backButtonView = viewGroup.findViewById(R.id.back);
+            nextButtonView = viewGroup.findViewById(R.id.next);
+        }
 
         return viewGroup;
     }
@@ -42,6 +58,10 @@ public class ConsentChooserFragment extends BaseFragment {
     public void onStart() {
         super.onStart();
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         backButtonView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -63,11 +83,18 @@ public class ConsentChooserFragment extends BaseFragment {
     @Override
     public void onResume() {
         super.onResume();
-        activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
+
+        if (!isForgottenFragment) {
+            activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
+        }
     }
 
     @Override
     public void onStop() {
+        if (isForgottenFragment) {
+            return;
+        }
+
         backButtonView.setOnClickListener(null);
         nextButtonView.setOnClickListener(null);
 
diff --git a/src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java b/android/src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java
similarity index 84%
rename from src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java
rename to android/src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java
index 9d756a9..f7a3204 100644
--- a/src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java
+++ b/android/src/main/java/zame/game/feature/consent/ConsentPreferencesFragment.java
@@ -1,7 +1,9 @@
 package zame.game.feature.consent;
 
 import android.os.Bundle;
-import com.takisoft.fix.support.v7.preference.PreferenceFragmentCompat;
+
+import com.takisoft.preferencex.PreferenceFragmentCompat;
+
 import zame.game.R;
 
 public class ConsentPreferencesFragment extends PreferenceFragmentCompat {
diff --git a/src/main/java/zame/game/feature/game/GameCodeDialogFragment.java b/android/src/main/java/zame/game/feature/game/GameCodeDialogFragment.java
similarity index 68%
rename from src/main/java/zame/game/feature/game/GameCodeDialogFragment.java
rename to android/src/main/java/zame/game/feature/game/GameCodeDialogFragment.java
index 75460f1..f505677 100644
--- a/src/main/java/zame/game/feature/game/GameCodeDialogFragment.java
+++ b/android/src/main/java/zame/game/feature/game/GameCodeDialogFragment.java
@@ -5,16 +5,18 @@ import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
 import android.view.LayoutInflater;
 import android.view.ViewGroup;
 import android.widget.EditText;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+
 import zame.game.App;
-import zame.game.feature.main.MainActivity;
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
 import zame.game.engine.Engine;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 
 public class GameCodeDialogFragment extends BaseDialogFragment {
@@ -22,7 +24,6 @@ public class GameCodeDialogFragment extends BaseDialogFragment {
         return new GameCodeDialogFragment();
     }
 
-    private MainActivity activity;
     private Engine engine;
 
     public GameCodeDialogFragment() {
@@ -30,28 +31,35 @@ public class GameCodeDialogFragment extends BaseDialogFragment {
     }
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
 
-        this.activity = (MainActivity)context;
-        this.engine = this.activity.engine;
+        if (!isForgottenFragment) {
+            this.engine = this.activity.engine;
+        }
     }
 
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        @SuppressLint("InflateParams")
-        final ViewGroup viewGroup = (ViewGroup)LayoutInflater.from(activity).inflate(R.layout.game_dialog_code, null);
+        assert getContext() != null;
 
-        return new AlertDialog.Builder(activity).setIcon(R.drawable.ic_dialog_alert)
+        @SuppressLint("InflateParams") final ViewGroup viewGroup =
+                (ViewGroup)LayoutInflater.from(getContext()).inflate(R.layout.game_dialog_code, null);
+
+        return new AlertDialog.Builder(getContext()).setIcon(R.drawable.ic_dialog_alert)
                 .setTitle(R.string.game_enter_code)
                 .setView(viewGroup)
                 .setPositiveButton(R.string.core_ok, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
+                        if (isForgottenFragment) {
+                            return;
+                        }
+
                         EditText editText = viewGroup.findViewById(R.id.code);
                         engine.game.unprocessedGameCode = editText.getText().toString();
-                        App.self.tracker.trackEvent("CodeEntered", engine.game.unprocessedGameCode);
+                        App.self.tracker.trackEvent(EventsConfig.EV_GAME_CODE_ENTERED, engine.game.unprocessedGameCode);
                     }
                 })
                 .setNegativeButton(R.string.core_cancel, null)
diff --git a/src/main/java/zame/game/feature/game/GameFragment.java b/android/src/main/java/zame/game/feature/game/GameFragment.java
similarity index 89%
rename from src/main/java/zame/game/feature/game/GameFragment.java
rename to android/src/main/java/zame/game/feature/game/GameFragment.java
index 99d3103..8f556b3 100644
--- a/src/main/java/zame/game/feature/game/GameFragment.java
+++ b/android/src/main/java/zame/game/feature/game/GameFragment.java
@@ -6,12 +6,14 @@ import android.hardware.SensorEvent;
 import android.hardware.SensorEventListener;
 import android.hardware.SensorManager;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 import android.view.LayoutInflater;
 import android.view.Surface;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
+
+import androidx.annotation.NonNull;
+
 import zame.game.R;
 import zame.game.core.app.BaseFragment;
 import zame.game.engine.Config;
@@ -45,6 +47,10 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         this.engine = activity.engine;
         this.config = engine.config;
         this.heroController = engine.heroController;
@@ -65,13 +71,18 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
     public void onResume() {
         super.onResume();
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         if (gameView != null) {
             viewGroup.removeView(gameView);
         }
 
         gameView = new GameView(activity);
 
-        viewGroup.addView(gameView,
+        viewGroup.addView(
+                gameView,
                 new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
 
         gameView.setRenderer(gameView);
@@ -109,6 +120,10 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
     public void onPause() {
         super.onPause();
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         if (gameView != null) {
             gameView.onPause();
             viewGroup.removeView(gameView);
@@ -122,15 +137,14 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
         }
     }
 
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-    }
-
     @Override
     public void onWindowFocusChanged(boolean hasWindowFocus) {
         super.onWindowFocusChanged(hasWindowFocus);
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         if (hasWindowFocus) {
             engine.onResume();
         } else {
@@ -144,6 +158,10 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
 
     @Override
     public void onSensorChanged(SensorEvent e) {
+        if (isForgottenFragment) {
+            return;
+        }
+
         float sensorX;
         float sensorY;
 
@@ -181,12 +199,18 @@ public class GameFragment extends BaseFragment implements SensorEventListener {
         }
     }
 
+    @SuppressWarnings("deprecation")
     public void showGameMenu() {
-        gameMenuDialogFragment.show(getFragmentManager());
+        if (!isForgottenFragment) {
+            gameMenuDialogFragment.show(getFragmentManager());
+        }
     }
 
+    @SuppressWarnings("deprecation")
     public void showGameCodeDialog() {
-        gameCodeDialogFragment.show(getFragmentManager());
+        if (!isForgottenFragment) {
+            gameCodeDialogFragment.show(getFragmentManager());
+        }
     }
 
     // public void hideDialogs() {
diff --git a/src/main/java/zame/game/feature/game/GameMenuDialogFragment.java b/android/src/main/java/zame/game/feature/game/GameMenuDialogFragment.java
similarity index 69%
rename from src/main/java/zame/game/feature/game/GameMenuDialogFragment.java
rename to android/src/main/java/zame/game/feature/game/GameMenuDialogFragment.java
index 4a3b41a..bc310b0 100644
--- a/src/main/java/zame/game/feature/game/GameMenuDialogFragment.java
+++ b/android/src/main/java/zame/game/feature/game/GameMenuDialogFragment.java
@@ -9,8 +9,6 @@ import android.graphics.ColorMatrix;
 import android.graphics.ColorMatrixColorFilter;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
 import android.util.Pair;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -19,7 +17,13 @@ import android.widget.AdapterView;
 import android.widget.BaseAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+import androidx.core.content.res.ResourcesCompat;
+
 import java.util.ArrayList;
+
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
 import zame.game.core.util.Common;
@@ -27,17 +31,16 @@ import zame.game.engine.Engine;
 import zame.game.engine.state.State;
 import zame.game.engine.visual.Controls;
 import zame.game.engine.visual.Weapons;
-import zame.game.feature.main.MainActivity;
 import zame.game.feature.sound.SoundManager;
 
-// http://stackoverflow.com/questions/12239886/how-to-migrate-from-gallery-to-horizontalscrollview-viewpager
+// https://stackoverflow.com/questions/12239886/how-to-migrate-from-gallery-to-horizontalscrollview-viewpager
 // https://gist.github.com/8cbe094bb7a783e37ad1
 
 @SuppressWarnings({ "deprecation" })
 public class GameMenuDialogFragment extends BaseDialogFragment {
     public static class ImageAdapter extends BaseAdapter implements AdapterView.OnItemSelectedListener {
         // @formatter:off
-        @SuppressWarnings({ "rawtypes", "unchecked" })
+        @SuppressWarnings({ "rawtypes", "unchecked" , "RedundantSuppression"})
         static final Pair<Integer, Integer>[] mapping = new Pair[] {
                 new Pair<>(Weapons.WEAPON_KNIFE, R.drawable.weapon_knife),
                 new Pair<>(Weapons.WEAPON_PISTOL, R.drawable.weapon_pist),
@@ -48,17 +51,18 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
                 new Pair<>(Weapons.WEAPON_GRENADE, R.drawable.weapon_rocket), };
         // @formatter:on
 
-        private Context context;
-        private Weapons weapons;
-        private android.widget.AbsSpinner gallery;
-        private Drawable normalBackground;
-        private Drawable selectedBackground;
-        private ViewGroup.LayoutParams layoutParams;
-        private ArrayList<Pair<Integer, Drawable>> imagesList;
-        private TextView infoView;
+        private final Context context;
+        private final Weapons weapons;
+        private final android.widget.AbsSpinner gallery;
+        private final Drawable normalBackground;
+        private final Drawable selectedBackground;
+        private final ViewGroup.LayoutParams layoutParams;
+        private final ArrayList<Pair<Integer, Drawable>> imagesList;
+        private final TextView infoView;
 
         @SuppressWarnings({ "deprecation" })
-        ImageAdapter(Context context,
+        ImageAdapter(
+                Context context,
                 android.widget.AbsSpinner gallery,
                 TextView infoView,
                 Engine engine,
@@ -84,7 +88,7 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
 
             for (Pair<Integer, Integer> pair : mapping) {
                 int weaponId = pair.first;
-                Drawable drawable = resources.getDrawable(pair.second);
+                Drawable drawable = ResourcesCompat.getDrawable(resources, pair.second, null);
 
                 if (weapons.canSwitch(weaponId)) {
                     drawable.setColorFilter(null);
@@ -96,8 +100,8 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
             }
 
             layoutParams = new android.widget.Gallery.LayoutParams(sizeInPx, sizeInPx);
-            normalBackground = resources.getDrawable(R.drawable.weapon_normal);
-            selectedBackground = resources.getDrawable(R.drawable.weapon_selected);
+            normalBackground = ResourcesCompat.getDrawable(resources, R.drawable.weapon_normal, null);
+            selectedBackground = ResourcesCompat.getDrawable(resources, R.drawable.weapon_selected, null);
 
             gallery.setOnItemSelectedListener(this);
         }
@@ -127,7 +131,7 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
         }
 
         @Override
-        @SuppressWarnings({ "deprecation" })
+        @SuppressWarnings({ "deprecation", "RedundantSuppression" })
         public View getView(int position, View convertView, ViewGroup parent) {
             ImageView imageView;
 
@@ -173,12 +177,11 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
         }
     }
 
-    private MainActivity activity;
     private Engine engine;
     private Weapons weapons;
     private State state;
     private android.widget.AbsSpinner gallery;
-    @SuppressWarnings("BooleanVariableAlwaysNegated") private boolean ignoreDismissHandlerOnce;
+    private boolean ignoreDismissHandlerOnce;
     private int minItemSizeInPx;
     private int maxItemSizeInPx;
     private int paddingInPx;
@@ -193,10 +196,13 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
 
     @SuppressWarnings("MagicNumber")
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
 
-        this.activity = (MainActivity)context;
+        if (isForgottenFragment) {
+            return;
+        }
+
         this.engine = this.activity.engine;
         this.weapons = this.engine.weapons;
         this.state = this.engine.state;
@@ -217,53 +223,63 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
     @Override
     @SuppressWarnings("deprecation")
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        ViewGroup viewGroup = (ViewGroup)LayoutInflater.from(activity).inflate(R.layout.game_dialog_menu, null);
-
-        int maxGalleryWidth = engine.width - paddingInPx;
-
-        int itemSize = Math.max(minItemSizeInPx,
-                Math.min(maxItemSizeInPx, Math.min(engine.height / 3, maxGalleryWidth / 5)));
-
-        gallery = (android.widget.Gallery)viewGroup.findViewById(R.id.gallery);
-        gallery.setMinimumHeight(itemSize);
-        gallery.setMinimumWidth(Math.min(maxGalleryWidth, itemSize * 5));
-
-        ImageAdapter adapter = new ImageAdapter(activity,
-                gallery,
-                (TextView)viewGroup.findViewById(R.id.info),
-                engine,
-                itemSize);
-
-        gallery.setAdapter(adapter);
-        adapter.setSelectedWeapon(engine.state.heroWeapon);
-
-        gallery.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                int weaponIdx = (Integer)gallery.getItemAtPosition(position);
-
-                if (weapons.canSwitch(weaponIdx)) {
-                    weapons.switchWeapon(weaponIdx);
-                    ignoreDismissHandlerOnce = true;
-                    GameMenuDialogFragment.this.dismiss();
+        assert getContext() != null;
+        ViewGroup viewGroup = (ViewGroup)LayoutInflater.from(getContext()).inflate(R.layout.game_dialog_menu, null);
+
+        if (!isForgottenFragment) {
+            int maxGalleryWidth = engine.width - paddingInPx;
+
+            int itemSize = Math.max(
+                    minItemSizeInPx,
+                    Math.min(maxItemSizeInPx, Math.min(engine.height / 3, maxGalleryWidth / 5)));
+
+            gallery = (android.widget.Gallery)viewGroup.findViewById(R.id.gallery);
+            gallery.setMinimumHeight(itemSize);
+            gallery.setMinimumWidth(Math.min(maxGalleryWidth, itemSize * 5));
+
+            ImageAdapter adapter = new ImageAdapter(
+                    activity,
+                    gallery,
+                    (TextView)viewGroup.findViewById(R.id.info),
+                    engine,
+                    itemSize);
+
+            gallery.setAdapter(adapter);
+            adapter.setSelectedWeapon(engine.state.heroWeapon);
+
+            gallery.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                    int weaponIdx = (Integer)gallery.getItemAtPosition(position);
+
+                    if (weapons.canSwitch(weaponIdx)) {
+                        weapons.switchWeapon(weaponIdx);
+                        ignoreDismissHandlerOnce = true;
+                        GameMenuDialogFragment.this.dismiss();
+                    }
                 }
-            }
-        });
+            });
+        }
 
-        AlertDialog.Builder builder = new AlertDialog.Builder(activity);
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
 
-        if ((state.disabledControlsMask & Controls.CONTROL_WEAPONS) != 0) {
-            gallery.setVisibility(View.GONE);
-            builder = builder.setTitle(R.string.game_menu_title_noweapon);
-        } else {
-            builder = builder.setTitle(R.string.game_menu_title_weapon);
+        if (!isForgottenFragment) {
+            if ((state.disabledControlsMask & Controls.CONTROL_WEAPONS) != 0) {
+                gallery.setVisibility(View.GONE);
+                builder = builder.setTitle(R.string.game_menu_title_noweapon);
+            } else {
+                builder = builder.setTitle(R.string.game_menu_title_weapon);
+            }
         }
 
         return builder.setView(viewGroup)
                 .setNeutralButton(R.string.game_menu_exit, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
-                        GameMenuDialogFragment.this.dismiss();
+                        if (isForgottenFragment) {
+                            return;
+                        }
+
                         engine.gameViewActive = false;
                         engine.renderBlackScreen = true;
                         activity.showFragment(activity.menuFragment);
@@ -272,8 +288,9 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
                 .setNegativeButton(R.string.game_menu_code, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
-                        GameMenuDialogFragment.this.dismiss();
-                        activity.gameFragment.showGameCodeDialog();
+                        if (!isForgottenFragment) {
+                            activity.gameFragment.showGameCodeDialog();
+                        }
                     }
                 })
                 .setPositiveButton(R.string.game_menu_close, null)
@@ -287,10 +304,10 @@ public class GameMenuDialogFragment extends BaseDialogFragment {
     }
 
     @Override
-    public void onDismiss(DialogInterface dialog) {
+    public void onDismiss(@NonNull DialogInterface dialog) {
         if (ignoreDismissHandlerOnce) {
             ignoreDismissHandlerOnce = false;
-        } else {
+        } else if (!isForgottenFragment) {
             int weaponIdx = (Integer)gallery.getSelectedItem();
 
             if (weapons.canSwitch(weaponIdx)) {
diff --git a/src/main/java/zame/game/feature/game/GameView.java b/android/src/main/java/zame/game/feature/game/GameView.java
similarity index 97%
rename from src/main/java/zame/game/feature/game/GameView.java
rename to android/src/main/java/zame/game/feature/game/GameView.java
index 12a12a4..0b746cb 100644
--- a/src/main/java/zame/game/feature/game/GameView.java
+++ b/android/src/main/java/zame/game/feature/game/GameView.java
@@ -6,14 +6,18 @@ import android.os.Build;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
+
 import javax.microedition.khronos.egl.EGLConfig;
 import javax.microedition.khronos.opengles.GL10;
+
 import zame.game.core.util.Common;
-import zame.game.feature.main.MainActivity;
 import zame.game.engine.Engine;
 import zame.game.engine.controller.HeroController;
+import zame.game.feature.main.MainActivity;
+
+public class GameView extends zame.game.core.widget.GLSurfaceView21
+        implements zame.game.core.widget.GLSurfaceView21.Renderer {
 
-public class GameView extends zame.game.core.widget.GLSurfaceView21 implements zame.game.core.widget.GLSurfaceView21.Renderer {
     private Engine engine;
     private HeroController heroController;
 
diff --git a/src/main/java/zame/game/feature/game/MapImageGenerator.java b/android/src/main/java/zame/game/feature/game/MapImageGenerator.java
similarity index 91%
rename from src/main/java/zame/game/feature/game/MapImageGenerator.java
rename to android/src/main/java/zame/game/feature/game/MapImageGenerator.java
index 6e4a4d1..24cb851 100644
--- a/src/main/java/zame/game/feature/game/MapImageGenerator.java
+++ b/android/src/main/java/zame/game/feature/game/MapImageGenerator.java
@@ -4,11 +4,13 @@ import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
-import zame.game.core.util.Common;
+
 import zame.game.R;
+import zame.game.core.util.Common;
 
 final class MapImageGenerator {
     private static final int MAP_WIDTH = 9;
@@ -67,7 +69,8 @@ final class MapImageGenerator {
         //noinspection MagicNumber
         float yoff = (float)Math.floor((float)(MAP_HEIGHT - mapPath.height) / 2.0f * (float)CELL_HEIGHT);
 
-        Bitmap img = Common.createBitmap(MAP_WIDTH * CELL_WIDTH,
+        Bitmap img = Common.createBitmap(
+                MAP_WIDTH * CELL_WIDTH,
                 MAP_HEIGHT * CELL_HEIGHT,
                 "Can't alloc bitmap for map");
         Canvas canvas = new Canvas(img);
@@ -81,24 +84,28 @@ final class MapImageGenerator {
 
                 if (nextItem.x == item.x) {
                     if (nextItem.y < item.y) {
-                        canvas.drawBitmap(bmps.connVert,
+                        canvas.drawBitmap(
+                                bmps.connVert,
                                 (float)(item.x * CELL_WIDTH) + xoff,
                                 (float)(nextItem.y * CELL_HEIGHT) + yoff,
                                 null);
                     } else {
-                        canvas.drawBitmap(bmps.connVert,
+                        canvas.drawBitmap(
+                                bmps.connVert,
                                 (float)(item.x * CELL_WIDTH) + xoff,
                                 (float)(item.y * CELL_HEIGHT) + yoff,
                                 null);
                     }
                 } else { // nextItem.y == item.y
                     if (nextItem.x < item.x) {
-                        canvas.drawBitmap(bmps.connHor,
+                        canvas.drawBitmap(
+                                bmps.connHor,
                                 (float)(nextItem.x * CELL_WIDTH) + xoff,
                                 (float)(item.y * CELL_HEIGHT) + yoff,
                                 null);
                     } else {
-                        canvas.drawBitmap(bmps.connHor,
+                        canvas.drawBitmap(
+                                bmps.connHor,
                                 (float)(item.x * CELL_WIDTH) + xoff,
                                 (float)(item.y * CELL_HEIGHT) + yoff,
                                 null);
@@ -106,7 +113,8 @@ final class MapImageGenerator {
                 }
             }
 
-            canvas.drawBitmap((i < highlighted ? bmps.cellHl : bmps.cell),
+            canvas.drawBitmap(
+                    (i < highlighted ? bmps.cellHl : bmps.cell),
                     (float)(item.x * CELL_WIDTH) + xoff,
                     (float)(item.y * CELL_HEIGHT) + yoff,
                     null);
@@ -135,7 +143,8 @@ final class MapImageGenerator {
         return result;
     }
 
-    private static boolean generateMapPathInternal(Random random,
+    private static boolean generateMapPathInternal(
+            Random random,
             boolean[][] map,
             int x,
             int y,
diff --git a/src/main/java/zame/game/feature/game/SelectEpisodeFragment.java b/android/src/main/java/zame/game/feature/game/SelectEpisodeFragment.java
similarity index 75%
rename from src/main/java/zame/game/feature/game/SelectEpisodeFragment.java
rename to android/src/main/java/zame/game/feature/game/SelectEpisodeFragment.java
index c08825f..cd0d14a 100644
--- a/src/main/java/zame/game/feature/game/SelectEpisodeFragment.java
+++ b/android/src/main/java/zame/game/feature/game/SelectEpisodeFragment.java
@@ -3,23 +3,26 @@ package zame.game.feature.game;
 import android.content.Context;
 import android.os.Bundle;
 import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.v4.util.SparseArrayCompat;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.collection.SparseArrayCompat;
+
 import java.util.Timer;
 import java.util.TimerTask;
+
 import zame.game.App;
-import zame.game.core.util.Common;
 import zame.game.R;
 import zame.game.core.app.BaseFragment;
-import zame.game.engine.state.State;
-import zame.game.feature.sound.SoundManager;
+import zame.game.core.util.Common;
 import zame.game.engine.state.Profile;
 import zame.game.engine.state.ProfileLevel;
+import zame.game.engine.state.State;
+import zame.game.feature.sound.SoundManager;
 
 public class SelectEpisodeFragment extends BaseFragment {
     private static final SparseArrayCompat<Integer> EPISODE_NAME_MAP = new SparseArrayCompat<>();
@@ -36,7 +39,7 @@ public class SelectEpisodeFragment extends BaseFragment {
     }
 
     private ViewGroup viewGroup;
-    private ImageView[] images = new ImageView[2];
+    private final ImageView[] images = new ImageView[2];
     private int currentImageIdx;
     private final Handler handler = new Handler();
     private Timer switchImagesTimer;
@@ -44,7 +47,7 @@ public class SelectEpisodeFragment extends BaseFragment {
     private Profile profile;
     private State state;
     private MapImageGenerator.MapImageBitmaps mapImageBitmaps;
-    private SparseArrayCompat<MapImageGenerator.MapPath> mapPathsHash = new SparseArrayCompat<>();
+    private final SparseArrayCompat<MapImageGenerator.MapPath> mapPathsHash = new SparseArrayCompat<>();
 
     private final Runnable switchImagesRunnable = new Runnable() {
         @Override
@@ -68,54 +71,66 @@ public class SelectEpisodeFragment extends BaseFragment {
     }
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
 
-        this.state = this.activity.engine.state;
-        this.profile = App.self.profile;
+        if (!isForgottenFragment) {
+            this.state = this.activity.engine.state;
+            this.profile = App.self.profile;
+        }
     }
 
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         viewGroup = (ViewGroup)inflater.inflate(R.layout.game_fragment_select_episode, container, false);
 
-        images[0] = viewGroup.findViewById(R.id.image_1);
-        images[1] = viewGroup.findViewById(R.id.image_2);
+        if (!isForgottenFragment) {
+            images[0] = viewGroup.findViewById(R.id.image_1);
+            images[1] = viewGroup.findViewById(R.id.image_2);
 
-        viewGroup.findViewById(R.id.back).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                activity.showFragment(activity.menuFragment);
-            }
-        });
+            viewGroup.findViewById(R.id.back).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    activity.showFragment(activity.menuFragment);
+                }
+            });
 
-        viewGroup.findViewById(R.id.kontinue).setOnClickListener(onContinueClick);
-        images[0].setOnClickListener(onContinueClick);
-        images[1].setOnClickListener(onContinueClick);
+            viewGroup.findViewById(R.id.kontinue).setOnClickListener(onContinueClick);
+            images[0].setOnClickListener(onContinueClick);
+            images[1].setOnClickListener(onContinueClick);
 
-        currentImageIdx = 0;
-        updateImages();
+            currentImageIdx = 0;
+            updateImages();
+        }
 
         return viewGroup;
     }
 
     @Override
     protected void onShowBanner() {
-        App.self.mediadtor.showBanner(activity, (ViewGroup)viewGroup.findViewById(R.id.banner_wrapper));
+        if (!isForgottenFragment) {
+            App.self.mediadtor.showBanner(activity, (ViewGroup)viewGroup.findViewById(R.id.banner_wrapper));
+        }
     }
 
     @Override
     public void onResume() {
         super.onResume();
-        activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
-        startTask();
+
+        if (!isForgottenFragment) {
+            activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
+            startTask();
+        }
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        stopTask();
+
+        if (!isForgottenFragment) {
+            stopTask();
+        }
     }
 
     public void updateImages() {
@@ -127,7 +142,8 @@ public class SelectEpisodeFragment extends BaseFragment {
                 ? profile.getLevel(state.levelName)
                 : profile.getLevel(State.LEVEL_INITIAL);
 
-        ((TextView)viewGroup.findViewById(R.id.info)).setText(String.format(getString(R.string.game_se_info),
+        ((TextView)viewGroup.findViewById(R.id.info)).setText(String.format(
+                getString(R.string.game_se_info),
                 state.overallMonsters,
                 state.overallSecrets,
                 Common.getTimeString(state.overallSeconds),
@@ -189,6 +205,10 @@ public class SelectEpisodeFragment extends BaseFragment {
     public void onWindowFocusChanged(boolean hasWindowFocus) {
         super.onWindowFocusChanged(hasWindowFocus);
 
+        if (isForgottenFragment) {
+            return;
+        }
+
         if (hasWindowFocus) {
             startTask();
         } else {
diff --git a/android/src/main/java/zame/game/feature/launcher/LauncherActivity.java b/android/src/main/java/zame/game/feature/launcher/LauncherActivity.java
new file mode 100644
index 0000000..57415af
--- /dev/null
+++ b/android/src/main/java/zame/game/feature/launcher/LauncherActivity.java
@@ -0,0 +1,76 @@
+package zame.game.feature.launcher;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+
+import androidx.annotation.Nullable;
+
+import zame.game.App;
+import zame.game.core.app.BaseActivity;
+import zame.game.feature.main.MainActivity;
+
+public class LauncherActivity extends BaseActivity {
+    private static final long START_GAME_DELAY = 1500L;
+
+    private final Runnable startGameRunnable = new Runnable() {
+        @Override
+        public void run() {
+            startActivity(new Intent(LauncherActivity.this, MainActivity.class));
+            finish();
+        }
+    };
+
+    @Override
+    protected Context wrapBaseContext(Context newBase) {
+        return newBase;
+    }
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // new AdvertisingInfoTask(new Runnable() {
+        //     @Override
+        //     public void run() {
+        //         if (!isFinishing()) {
+        //             App.self.handler.postDelayed(startGameRunnable, START_GAME_DELAY);
+        //         }
+        //     }
+        // }).execute();
+
+        App.self.handler.postDelayed(startGameRunnable, START_GAME_DELAY);
+    }
+
+    // private static class AdvertisingInfoTask extends AsyncTask<Void, Void, Void> {
+    //     private final Runnable runnable;
+    //
+    //     AdvertisingInfoTask(Runnable runnable) {
+    //         super();
+    //         this.runnable = runnable;
+    //     }
+    //
+    //     @Override
+    //     protected Void doInBackground(Void... params) {
+    //         try {
+    //             AdvertisingIdClient.Info info = AdvertisingIdClient.getAdvertisingIdInfo(App.self);
+    //
+    //             if (info != null) {
+    //                 App.self.isLimitAdTrackingEnabled = info.isLimitAdTrackingEnabled();
+    //             }
+    //         } catch (GooglePlayServicesNotAvailableException e) {
+    //             App.self.isLimitAdTrackingEnabled = false;
+    //         } catch (Exception e) {
+    //             Common.log(e);
+    //         }
+    //
+    //         return null;
+    //     }
+    //
+    //     @Override
+    //     protected void onPostExecute(Void result) {
+    //         App.self.applyConsent();
+    //         runnable.run();
+    //     }
+    // }
+}
diff --git a/src/main/java/zame/game/feature/main/MainActivity.java b/android/src/main/java/zame/game/feature/main/MainActivity.java
similarity index 92%
rename from src/main/java/zame/game/feature/main/MainActivity.java
rename to android/src/main/java/zame/game/feature/main/MainActivity.java
index adb0bdc..e28ed7f 100644
--- a/src/main/java/zame/game/feature/main/MainActivity.java
+++ b/android/src/main/java/zame/game/feature/main/MainActivity.java
@@ -4,11 +4,13 @@ import android.content.Intent;
 import android.media.AudioManager;
 import android.os.Bundle;
 import android.os.Handler;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.ActionBar;
-import android.view.View;
+
+import androidx.appcompat.app.ActionBar;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
+
 import com.eightsines.esmediadtor.MediadtorListener;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.app.ActionBarFragment;
@@ -28,6 +30,7 @@ import zame.game.feature.options.OptionsFragment;
 import zame.game.feature.prepare.CachedTexturesProvider;
 import zame.game.feature.prepare.PrepareFragment;
 import zame.game.feature.sound.SoundManager;
+import zame.game.flavour.config.AppConfig;
 import zame.game.flavour.gplay.MainActivityGPlayHelper;
 
 public class MainActivity extends BaseActivity {
@@ -50,7 +53,7 @@ public class MainActivity extends BaseActivity {
     private ActionBarFragment prevActionBarFragment;
     private final Handler handler = new Handler();
 
-    private MainActivityGPlayHelper gPlayHelper = new MainActivityGPlayHelper();
+    private final MainActivityGPlayHelper gPlayHelper = new MainActivityGPlayHelper();
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -65,6 +68,8 @@ public class MainActivity extends BaseActivity {
             actionBar.hide();
         }
 
+        App.self.tracker.onActivityCreate(this);
+
         soundManager = SoundManager.getInstance(false);
         soundManager.initialize();
 
@@ -89,7 +94,7 @@ public class MainActivity extends BaseActivity {
             return;
         }
 
-        if (!App.self.preferences.getBoolean(R.string.key_is_consent_chosen)) {
+        if (AppConfig.SHOULD_ASK_CONSENT && !App.self.preferences.getBoolean(R.string.key_is_consent_chosen)) {
             showFragment(consentChooserFragment);
             return;
         }
@@ -104,6 +109,12 @@ public class MainActivity extends BaseActivity {
         });
     }
 
+    @Override
+    protected void onStart() {
+        super.onStart();
+        App.self.tracker.onActivityStart(this);
+    }
+
     @Override
     protected void onResume() {
         super.onResume();
@@ -127,6 +138,7 @@ public class MainActivity extends BaseActivity {
         }
 
         App.self.mediadtor.onActivityPause();
+        App.self.tracker.onActivityPause(this);
 
         // if home screen button_positive pressed, lock screen button_positive pressed, call received or something similar - return to menu screen
         //
@@ -138,6 +150,12 @@ public class MainActivity extends BaseActivity {
         super.onPause();
     }
 
+    @Override
+    protected void onStop() {
+        App.self.tracker.onActivityStop(this);
+        super.onStop();
+    }
+
     public void showFragment(final Fragment fragment) {
         handler.post(new Runnable() {
             @Override
@@ -220,7 +238,7 @@ public class MainActivity extends BaseActivity {
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void showPrevFragment() {
         handler.post(new Runnable() {
             @Override
diff --git a/android/src/main/java/zame/game/feature/menu/MenuFragment.java b/android/src/main/java/zame/game/feature/menu/MenuFragment.java
new file mode 100644
index 0000000..fabcb56
--- /dev/null
+++ b/android/src/main/java/zame/game/feature/menu/MenuFragment.java
@@ -0,0 +1,144 @@
+package zame.game.feature.menu;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.AnimationUtils;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import zame.game.App;
+import zame.game.R;
+import zame.game.core.app.BaseFragment;
+import zame.game.core.util.Common;
+import zame.game.feature.sound.SoundManager;
+import zame.game.flavour.config.AppConfig;
+import zame.game.flavour.gplay.MenuFragmentGPlayHelper;
+
+public class MenuFragment extends BaseFragment {
+    public static MenuFragment newInstance() {
+        return new MenuFragment();
+    }
+
+    private View playWrapperView;
+    private ViewGroup bannerWrapperView;
+    private final MenuFragmentGPlayHelper gPlayHelper = new MenuFragmentGPlayHelper();
+
+    public MenuFragment() {
+        super();
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (!isForgottenFragment) {
+            gPlayHelper.onCreate();
+        }
+    }
+
+    @Override
+    public View onCreateView(
+            @NonNull LayoutInflater inflater,
+            @Nullable ViewGroup container,
+            @Nullable Bundle savedInstanceState) {
+
+        ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.menu_fragment, container, false);
+
+        if (!isForgottenFragment) {
+            playWrapperView = viewGroup.findViewById(R.id.play_wrapper);
+            bannerWrapperView = viewGroup.findViewById(R.id.banner_wrapper);
+
+            viewGroup.findViewById(R.id.play).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+
+                    if (!activity.tryAndLoadInstantState() || activity.engine.state.showEpisodeSelector) {
+                        activity.showFragment(activity.selectEpisodeFragment);
+                    } else {
+                        activity.continueGame();
+                    }
+                }
+            });
+
+            viewGroup.findViewById(R.id.options).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    activity.showFragment(activity.optionsFragment);
+                }
+            });
+
+            viewGroup.findViewById(R.id.achievements).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    activity.showFragment(activity.achievementsFragment);
+                }
+            });
+
+            viewGroup.findViewById(R.id.like_vk).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    Common.openViewIntent(activity, AppConfig.LINK_VK);
+                }
+            });
+
+            viewGroup.findViewById(R.id.like_facebook).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    Common.openViewIntent(activity, AppConfig.LINK_FACEBOOK);
+                }
+            });
+
+            viewGroup.findViewById(R.id.like_telegram).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
+                    Common.openViewIntent(activity, AppConfig.LINK_TELEGRAM);
+                }
+            });
+
+            gPlayHelper.createFragmentView(viewGroup, activity);
+        }
+
+        return viewGroup;
+    }
+
+    @Override
+    protected void onShowBanner() {
+        if (!isForgottenFragment) {
+            App.self.mediadtor.showBanner(activity, bannerWrapperView);
+        }
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+
+        if (!isForgottenFragment) {
+            playWrapperView.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bounce));
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        if (!isForgottenFragment) {
+            activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
+        }
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasWindowFocus) {
+        if (hasWindowFocus && !isForgottenFragment) {
+            gPlayHelper.updateRateWrapVisibility();
+        }
+    }
+}
diff --git a/src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java b/android/src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java
similarity index 75%
rename from src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java
rename to android/src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java
index 6a42073..dbbc2dd 100644
--- a/src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java
+++ b/android/src/main/java/zame/game/feature/menu/QuitWarnDialogFragment.java
@@ -1,12 +1,12 @@
 package zame.game.feature.menu;
 
 import android.app.Dialog;
-import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
-import zame.game.feature.main.MainActivity;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
 import zame.game.feature.sound.SoundManager;
@@ -16,26 +16,24 @@ public class QuitWarnDialogFragment extends BaseDialogFragment {
         return new QuitWarnDialogFragment();
     }
 
-    private MainActivity activity;
-
     public QuitWarnDialogFragment() {
         super();
     }
 
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        this.activity = (MainActivity)context;
-    }
-
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        return new AlertDialog.Builder(activity).setIcon(R.drawable.ic_dialog_alert)
+        assert getContext() != null;
+
+        return new AlertDialog.Builder(getContext()).setIcon(R.drawable.ic_dialog_alert)
                 .setTitle(R.string.game_quit_warn)
                 .setPositiveButton(R.string.menu_quit_warn_yes, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
+                        if (isForgottenFragment) {
+                            return;
+                        }
+
                         shouldSoundPauseInstantlyOnDismiss = true;
                         activity.quitGame();
                     }
diff --git a/src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java b/android/src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java
similarity index 74%
rename from src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java
rename to android/src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java
index b2cd409..d99a490 100644
--- a/src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java
+++ b/android/src/main/java/zame/game/feature/options/ConsentForAdsChangedDialogFragment.java
@@ -1,15 +1,16 @@
 package zame.game.feature.options;
 
 import android.app.Dialog;
-import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+
 import com.jakewharton.processphoenix.ProcessPhoenix;
+
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
-import zame.game.feature.main.MainActivity;
 import zame.game.feature.sound.SoundManager;
 
 public class ConsentForAdsChangedDialogFragment extends BaseDialogFragment {
@@ -19,27 +20,23 @@ public class ConsentForAdsChangedDialogFragment extends BaseDialogFragment {
         return dialogFragment;
     }
 
-    private MainActivity activity;
-
     public ConsentForAdsChangedDialogFragment() {
         super();
     }
 
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        this.activity = (MainActivity)context;
-    }
-
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        return new AlertDialog.Builder(activity).setIcon(R.drawable.ic_dialog_alert)
+        assert getContext() != null;
+
+        return new AlertDialog.Builder(getContext()).setIcon(R.drawable.ic_dialog_alert)
                 .setMessage(R.string.options_consent_for_ads_changed)
                 .setPositiveButton(R.string.core_ok, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
-                        ProcessPhoenix.triggerRebirth(activity);
+                        if (!isForgottenFragment) {
+                            ProcessPhoenix.triggerRebirth(activity);
+                        }
                     }
                 })
                 .create();
diff --git a/src/main/java/zame/game/feature/options/OptionsFragment.java b/android/src/main/java/zame/game/feature/options/OptionsFragment.java
similarity index 84%
rename from src/main/java/zame/game/feature/options/OptionsFragment.java
rename to android/src/main/java/zame/game/feature/options/OptionsFragment.java
index 0397da7..741859f 100644
--- a/src/main/java/zame/game/feature/options/OptionsFragment.java
+++ b/android/src/main/java/zame/game/feature/options/OptionsFragment.java
@@ -3,15 +3,21 @@ package zame.game.feature.options;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v7.preference.Preference;
-import android.support.v7.preference.PreferenceScreen;
-import com.takisoft.fix.support.v7.preference.PreferenceFragmentCompat;
+
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceScreen;
+
+import com.takisoft.preferencex.PreferenceFragmentCompat;
+
 import java.util.Locale;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.app.BackPressedHandler;
 import zame.game.core.util.Common;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.main.MainActivity;
 import zame.game.feature.web.GeneralWebActivity;
 import zame.game.flavour.config.AppConfig;
@@ -33,7 +39,7 @@ public class OptionsFragment extends PreferenceFragmentCompat
     }
 
     @Override
-    public void onAttach(Context context) {
+    public void onAttach(@NonNull Context context) {
         super.onAttach(context);
         this.activity = (MainActivity)context;
     }
@@ -44,6 +50,7 @@ public class OptionsFragment extends PreferenceFragmentCompat
         activity.soundManager.setPlaylist(null, false);
     }
 
+    @SuppressWarnings("ConstantConditions")
     @Override
     public void onCreatePreferencesFix(Bundle savedInstanceState, String rootKey) {
         addPreferencesFromResource(R.xml.preferences);
@@ -54,6 +61,8 @@ public class OptionsFragment extends PreferenceFragmentCompat
 
         final String currentLanguage = Locale.getDefault().getLanguage().toLowerCase(Locale.US);
 
+        findPreference(getString(R.string.key_consent_category)).setVisible(AppConfig.SHOULD_ASK_CONSENT);
+
         findPreference(getString(R.string.key_language)).setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
             @Override
             public boolean onPreferenceChange(Preference preference, Object newValue) {
@@ -66,7 +75,7 @@ public class OptionsFragment extends PreferenceFragmentCompat
         findPreference(getString(R.string.key_help)).setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
             @Override
             public boolean onPreferenceClick(Preference preference) {
-                App.self.tracker.trackEvent("Help", String.valueOf(currentLanguage));
+                App.self.tracker.trackEvent(EventsConfig.EV_OPTIONS_HELP_REQUESTED, currentLanguage);
 
                 Intent intent = new Intent(activity, GeneralWebActivity.class);
                 intent.putExtra(GeneralWebActivity.EXTRA_URL, AppConfig.LINK_HELP + currentLanguage);
@@ -81,7 +90,8 @@ public class OptionsFragment extends PreferenceFragmentCompat
             public boolean onPreferenceClick(Preference preference) {
                 Intent intent = new Intent(activity, GeneralWebActivity.class);
 
-                intent.putExtra(GeneralWebActivity.EXTRA_URL,
+                intent.putExtra(
+                        GeneralWebActivity.EXTRA_URL,
                         "file:///android_asset/web/about.html?language="
                                 + Common.urlEncode(currentLanguage)
                                 + "&appName="
@@ -95,6 +105,7 @@ public class OptionsFragment extends PreferenceFragmentCompat
         });
 
         findPreference(getString(R.string.key_restart)).setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+            @SuppressWarnings("deprecation")
             @Override
             public boolean onPreferenceClick(Preference preference) {
                 restartWarnDialogFragment.show(getFragmentManager());
@@ -154,12 +165,24 @@ public class OptionsFragment extends PreferenceFragmentCompat
         });
 
         findPreference(getString(R.string.key_consent_ad_personalization)).setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+            @SuppressWarnings("deprecation")
             @Override
             public boolean onPreferenceChange(Preference preference, Object newValue) {
                 consentForAdsChangedDialogFragment.show(getFragmentManager());
                 return true;
             }
         });
+
+        if (AppConfig.DEBUG) {
+            findPreference(getString(R.string.key_debug_crash)).setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+                @Override
+                public boolean onPreferenceClick(Preference preference) {
+                    throw new RuntimeException("Debug crash");
+                }
+            });
+        } else {
+            findPreference(getString(R.string.key_debug_crash)).setVisible(false);
+        }
     }
 
     @Override
@@ -168,7 +191,8 @@ public class OptionsFragment extends PreferenceFragmentCompat
     }
 
     @Override
-    public boolean onPreferenceStartScreen(android.support.v7.preference.PreferenceFragmentCompat caller,
+    public boolean onPreferenceStartScreen(
+            androidx.preference.PreferenceFragmentCompat caller,
             PreferenceScreen pref) {
 
         caller.setPreferenceScreen(pref);
diff --git a/src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java b/android/src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java
similarity index 75%
rename from src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java
rename to android/src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java
index 582a143..1985bb0 100644
--- a/src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java
+++ b/android/src/main/java/zame/game/feature/options/RestartWarnDialogFragment.java
@@ -1,15 +1,16 @@
 package zame.game.feature.options;
 
 import android.app.Dialog;
-import android.content.Context;
 import android.content.DialogInterface;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+
 import zame.game.App;
-import zame.game.feature.main.MainActivity;
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 
 public class RestartWarnDialogFragment extends BaseDialogFragment {
@@ -17,27 +18,25 @@ public class RestartWarnDialogFragment extends BaseDialogFragment {
         return new RestartWarnDialogFragment();
     }
 
-    private MainActivity activity;
-
     public RestartWarnDialogFragment() {
         super();
     }
 
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        this.activity = (MainActivity)context;
-    }
-
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        return new AlertDialog.Builder(activity).setIcon(R.drawable.ic_dialog_alert)
+        assert getContext() != null;
+
+        return new AlertDialog.Builder(getContext()).setIcon(R.drawable.ic_dialog_alert)
                 .setMessage(R.string.options_restart_warn)
                 .setPositiveButton(R.string.core_ok, new DialogInterface.OnClickListener() {
                     @Override
                     public void onClick(DialogInterface dialog, int whichButton) {
-                        App.self.tracker.trackEvent("RestartPressed", "");
+                        if (isForgottenFragment) {
+                            return;
+                        }
+
+                        App.self.tracker.trackEvent(EventsConfig.EV_OPTIONS_RESTART_CONFIRMED);
 
                         activity.engine.deleteInstantSave();
                         App.self.profile.clear(activity);
diff --git a/src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java b/android/src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java
similarity index 95%
rename from src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java
rename to android/src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java
index 192e8d9..73b2708 100644
--- a/src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java
+++ b/android/src/main/java/zame/game/feature/prepare/CachedTexturesProvider.java
@@ -1,7 +1,6 @@
 package zame.game.feature.prepare;
 
 import android.annotation.SuppressLint;
-import android.content.Intent;
 import android.content.res.AssetManager;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -13,11 +12,14 @@ import android.graphics.PorterDuff.Mode;
 import android.graphics.PorterDuffXfermode;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Bundle;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.util.Common;
@@ -75,7 +77,8 @@ public final class CachedTexturesProvider {
                 return pixelsBitmap;
             }
 
-            Bitmap result = Common.createBitmap(pixelsBitmap.getWidth(),
+            Bitmap result = Common.createBitmap(
+                    pixelsBitmap.getWidth(),
                     pixelsBitmap.getHeight(),
                     "Can't alloc result bitmap for tiles");
 
@@ -88,7 +91,7 @@ public final class CachedTexturesProvider {
             //noinspection UnusedAssignment
             pixelsBitmap = null;
 
-            // http://stackoverflow.com/questions/5098680/how-to-combine-two-opaque-bitmaps-into-one-with-alpha-channel
+            // https://stackoverflow.com/questions/5098680/how-to-combine-two-opaque-bitmaps-into-one-with-alpha-channel
             Bitmap alphaBitmap = decodeTexture(assetManager, alphaName, bitmapOptions);
 
             Paint alphaPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
@@ -241,8 +244,10 @@ public final class CachedTexturesProvider {
 
         @Override
         protected void onProgressUpdate(Integer... progress) {
-            App.self.getBroadcastManager()
-                    .sendBroadcast((new Intent(BROADCAST_ACTION)).putExtra(EXTRA_PROGRESS, progress[0]));
+            Bundle bundle = new Bundle();
+            bundle.putInt(EXTRA_PROGRESS, progress[0]);
+
+            App.self.broadcastManager.sendBroadcast(BROADCAST_ACTION, bundle);
         }
 
         @Override
@@ -380,15 +385,17 @@ public final class CachedTexturesProvider {
                 }
 
                 App.self.cachedTexturesTask = new Task(new IOnComplete() {
+                    @SuppressWarnings("MagicNumber")
                     @Override
                     public void onComplete() {
                         App.self.preferences.putInt(R.string.key_cached_textures_version, getCacheVersion());
                         App.self.cachedTexturesReady = true;
                         App.self.cachedTexturesTask = null;
 
-                        //noinspection MagicNumber
-                        App.self.getBroadcastManager()
-                                .sendBroadcast((new Intent(BROADCAST_ACTION)).putExtra(EXTRA_PROGRESS, 101));
+                        Bundle bundle = new Bundle();
+                        bundle.putInt(EXTRA_PROGRESS, 101);
+
+                        App.self.broadcastManager.sendBroadcast(BROADCAST_ACTION, bundle);
                     }
                 });
 
diff --git a/android/src/main/java/zame/game/feature/prepare/PrepareFragment.java b/android/src/main/java/zame/game/feature/prepare/PrepareFragment.java
new file mode 100644
index 0000000..a75ebc6
--- /dev/null
+++ b/android/src/main/java/zame/game/feature/prepare/PrepareFragment.java
@@ -0,0 +1,84 @@
+package zame.game.feature.prepare;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ProgressBar;
+
+import androidx.annotation.NonNull;
+
+import zame.game.App;
+import zame.game.R;
+import zame.game.core.app.AppBroadcastReceiver;
+import zame.game.core.app.BaseFragment;
+
+public class PrepareFragment extends BaseFragment {
+    public static PrepareFragment newInstance() {
+        return new PrepareFragment();
+    }
+
+    private ProgressBar progressView;
+
+    private final AppBroadcastReceiver cacheUpdateProgressReceiver = new AppBroadcastReceiver() {
+        @Override
+        public void onReceive(Bundle bundle) {
+            int progress = bundle.getInt(CachedTexturesProvider.EXTRA_PROGRESS, 0);
+
+            if (progress > 100) {
+                activity.processNext();
+            } else {
+                progressView.setProgress(progress);
+            }
+        }
+    };
+
+    public PrepareFragment() {
+        super();
+    }
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.prepare_fragment, container, false);
+
+        if (!isForgottenFragment) {
+            progressView = viewGroup.findViewById(R.id.progress);
+
+            //noinspection BooleanVariableAlwaysNegated
+            boolean needToUpdateCache = (App.self.cachedTexturesTask != null
+                    || CachedTexturesProvider.needToUpdateCache());
+
+            if (!needToUpdateCache) {
+                activity.showFragment(activity.menuFragment);
+            } else {
+                App.self.broadcastManager.registerReceiver(
+                        cacheUpdateProgressReceiver,
+                        CachedTexturesProvider.BROADCAST_ACTION);
+
+                if (App.self.cachedTexturesTask == null) {
+                    CachedTexturesProvider.updateCache();
+                }
+            }
+        }
+
+        return viewGroup;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        if (!isForgottenFragment) {
+            activity.soundManager.setPlaylist(null);
+        }
+    }
+
+    @Override
+    public void onDestroyView() {
+        if (!isForgottenFragment) {
+            App.self.broadcastManager.unregisterReceiver(cacheUpdateProgressReceiver);
+        }
+
+        super.onDestroyView();
+    }
+}
diff --git a/src/main/java/zame/game/feature/sound/SoundManager.java b/android/src/main/java/zame/game/feature/sound/SoundManager.java
similarity index 98%
rename from src/main/java/zame/game/feature/sound/SoundManager.java
rename to android/src/main/java/zame/game/feature/sound/SoundManager.java
index dd5d631..a73749d 100644
--- a/src/main/java/zame/game/feature/sound/SoundManager.java
+++ b/android/src/main/java/zame/game/feature/sound/SoundManager.java
@@ -1,7 +1,8 @@
 package zame.game.feature.sound;
 
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import zame.game.App;
 
 public abstract class SoundManager {
diff --git a/src/main/java/zame/game/feature/sound/SoundManagerDummy.java b/android/src/main/java/zame/game/feature/sound/SoundManagerDummy.java
similarity index 100%
rename from src/main/java/zame/game/feature/sound/SoundManagerDummy.java
rename to android/src/main/java/zame/game/feature/sound/SoundManagerDummy.java
diff --git a/src/main/java/zame/game/feature/sound/SoundManagerInst.java b/android/src/main/java/zame/game/feature/sound/SoundManagerInst.java
similarity index 95%
rename from src/main/java/zame/game/feature/sound/SoundManagerInst.java
rename to android/src/main/java/zame/game/feature/sound/SoundManagerInst.java
index 3868df2..108f77b 100644
--- a/src/main/java/zame/game/feature/sound/SoundManagerInst.java
+++ b/android/src/main/java/zame/game/feature/sound/SoundManagerInst.java
@@ -6,6 +6,7 @@ import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.media.SoundPool;
 import android.os.SystemClock;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.util.Timer;
@@ -13,13 +14,14 @@ import java.util.TimerTask;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.manager.PreferencesManager;
 import zame.game.core.util.Common;
 
-// http://stackoverflow.com/questions/7437505/how-to-properly-use-soundpool-on-a-game
-// http://stackoverflow.com/questions/10181822/android-soundpool-play-sometimes-lags
+// https://stackoverflow.com/questions/7437505/how-to-properly-use-soundpool-on-a-game
+// https://stackoverflow.com/questions/10181822/android-soundpool-play-sometimes-lags
 
 public class SoundManagerInst extends SoundManager {
     public static class SoundThread extends Thread {
@@ -126,20 +128,20 @@ public class SoundManagerInst extends SoundManager {
 
     private static final float VOLUME_THRESHOLD = 0.01f;
 
-    private AssetManager assetManager;
-    private MediaPlayer mediaPlayer = new MediaPlayer();
+    private final AssetManager assetManager;
+    private final MediaPlayer mediaPlayer = new MediaPlayer();
     private volatile SoundThread soundThread;
 
     private PlayList current;
     private boolean musicLoaded;
-    private Timer pauseTimer = new Timer();
+    private final Timer pauseTimer = new Timer();
     private TimerTask pauseTask;
 
     private boolean soundEnabled;
     private float musicVolume = 1.0f;
     private float effectsVolume = 1.0f;
     private int inFocusMask;
-    private long[] soundLastPlayTime = new long[SOUND_LAST];
+    private final long[] soundLastPlayTime = new long[SOUND_LAST];
 
     SoundManagerInst() {
         super();
@@ -148,7 +150,7 @@ public class SoundManagerInst extends SoundManager {
         mediaPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
             @Override
             public boolean onError(MediaPlayer mp, int what, int extra) {
-                Common.log("MediaPlayer error: what=" + String.valueOf(what) + ", extra=" + String.valueOf(extra));
+                Common.log("MediaPlayer error: what=" + what + ", extra=" + extra);
                 return false;
             }
         });
@@ -166,7 +168,7 @@ public class SoundManagerInst extends SoundManager {
     }
 
     private SoundThread getSoundThread() {
-        AssetManager assetManagerCached = assetManager;
+        @SuppressWarnings("UnnecessaryLocalVariable") AssetManager assetManagerCached = assetManager;
 
         synchronized (this) {
             if (soundThread == null) {
@@ -285,7 +287,6 @@ public class SoundManagerInst extends SoundManager {
 
     @Override
     public void playSound(int idx, float volume) {
-        //noinspection MagicNumber
         if (!soundEnabled || (effectsVolume <= VOLUME_THRESHOLD) || (volume <= VOLUME_THRESHOLD)) {
             return;
         }
diff --git a/src/main/java/zame/game/feature/web/GeneralWebActivity.java b/android/src/main/java/zame/game/feature/web/GeneralWebActivity.java
similarity index 85%
rename from src/main/java/zame/game/feature/web/GeneralWebActivity.java
rename to android/src/main/java/zame/game/feature/web/GeneralWebActivity.java
index f50f879..778f446 100644
--- a/src/main/java/zame/game/feature/web/GeneralWebActivity.java
+++ b/android/src/main/java/zame/game/feature/web/GeneralWebActivity.java
@@ -9,10 +9,14 @@ import android.webkit.WebHistoryItem;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 import android.widget.ProgressBar;
+
+import androidx.annotation.NonNull;
+
+import zame.game.App;
 import zame.game.R;
 import zame.game.core.app.BaseActivity;
 
-// http://stackoverflow.com/questions/2566485/webview-and-cookies-on-android
+// https://stackoverflow.com/questions/2566485/webview-and-cookies-on-android
 
 public class GeneralWebActivity extends BaseActivity {
     public static final String EXTRA_URL = "url";
@@ -31,13 +35,13 @@ public class GeneralWebActivity extends BaseActivity {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.web_activity);
 
+        App.self.tracker.onActivityCreate(this);
+
         webView = findViewById(R.id.web_view);
         progressBar = findViewById(R.id.progress);
 
         initWebView();
         Bundle extras = getIntent().getExtras();
-
-        //noinspection ConstantConditions
         currentUrl = extras.getString(EXTRA_URL);
 
         if (currentUrl == null) {
@@ -47,9 +51,21 @@ public class GeneralWebActivity extends BaseActivity {
         webView.loadUrl(currentUrl);
     }
 
+    @Override
+    protected void onStart() {
+        super.onStart();
+        App.self.tracker.onActivityStart(this);
+    }
+
+    @Override
+    protected void onStop() {
+        App.self.tracker.onActivityStop(this);
+        super.onStop();
+    }
+
     @TargetApi(8)
     @SuppressLint("SetJavaScriptEnabled")
-    @SuppressWarnings("deprecation")
+    @SuppressWarnings({ "deprecation", "RedundantSuppression" })
     protected void initWebView() {
         WebSettings webSettings = webView.getSettings();
 
@@ -76,7 +92,7 @@ public class GeneralWebActivity extends BaseActivity {
     }
 
     @Override
-    protected void onSaveInstanceState(Bundle state) {
+    protected void onSaveInstanceState(@NonNull Bundle state) {
         super.onSaveInstanceState(state);
 
         webView.saveState(webViewState);
diff --git a/src/main/java/zame/game/feature/web/GeneralWebChromeClient.java b/android/src/main/java/zame/game/feature/web/GeneralWebChromeClient.java
similarity index 97%
rename from src/main/java/zame/game/feature/web/GeneralWebChromeClient.java
rename to android/src/main/java/zame/game/feature/web/GeneralWebChromeClient.java
index d46bfde..21da2f2 100644
--- a/src/main/java/zame/game/feature/web/GeneralWebChromeClient.java
+++ b/android/src/main/java/zame/game/feature/web/GeneralWebChromeClient.java
@@ -7,10 +7,11 @@ import android.view.View;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 import android.widget.ProgressBar;
+
 import zame.game.core.util.Common;
 
 public class GeneralWebChromeClient extends WebChromeClient {
-    private ProgressBar progressBar;
+    private final ProgressBar progressBar;
     private boolean isProgressBarVisible;
 
     GeneralWebChromeClient(ProgressBar progressBar) {
diff --git a/src/main/java/zame/game/feature/web/GeneralWebViewClient.java b/android/src/main/java/zame/game/feature/web/GeneralWebViewClient.java
similarity index 91%
rename from src/main/java/zame/game/feature/web/GeneralWebViewClient.java
rename to android/src/main/java/zame/game/feature/web/GeneralWebViewClient.java
index 246e799..15ad037 100644
--- a/src/main/java/zame/game/feature/web/GeneralWebViewClient.java
+++ b/android/src/main/java/zame/game/feature/web/GeneralWebViewClient.java
@@ -5,8 +5,10 @@ import android.net.Uri;
 import android.webkit.WebResourceResponse;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+
 import java.io.InputStream;
 import java.util.Locale;
+
 import zame.game.core.util.Common;
 import zame.game.core.util.IntentProvider;
 
@@ -18,7 +20,8 @@ public class GeneralWebViewClient extends WebViewClient {
         final String MAILTO_PREFIX = "mailto:";
 
         if (url.startsWith(MAILTO_PREFIX)) {
-            Intent intent = IntentProvider.getEmailIntent(view.getContext(),
+            Intent intent = IntentProvider.getEmailIntent(
+                    view.getContext(),
                     url.replaceFirst(MAILTO_PREFIX, "").trim());
 
             Common.openExternalIntent(view.getContext(), intent);
@@ -58,12 +61,13 @@ public class GeneralWebViewClient extends WebViewClient {
         if (!failingUrl.startsWith(ERROR_PAGE_URL)) {
             view.stopLoading();
 
-            view.loadUrl(String.format(Locale.US,
+            view.loadUrl(String.format(
+                    Locale.US,
                     "%s?url=%s&description=%s&code=%s",
                     ERROR_PAGE_URL,
                     Common.urlEncode(failingUrl),
                     Common.urlEncode(description),
-                    String.valueOf(errorCode)));
+                    errorCode));
         }
     }
 }
diff --git a/android/src/main/java/zame/game/flavour/config/AppConfig.java b/android/src/main/java/zame/game/flavour/config/AppConfig.java
new file mode 100644
index 0000000..fa9b9eb
--- /dev/null
+++ b/android/src/main/java/zame/game/flavour/config/AppConfig.java
@@ -0,0 +1,27 @@
+package zame.game.flavour.config;
+
+import zame.game.BuildConfig;
+
+public final class AppConfig {
+    public static final String TAG = "FSR";
+
+    public static final boolean DEBUG = BuildConfig.DEBUG;
+    public static final boolean SHOULD_ASK_CONSENT = false;
+    public static final boolean SHOULD_ASK_RATE = false;
+    public static final boolean MEDIADTOR_TEST_ADS = false;
+
+    public static final String TRACKER_CONFIG = null;
+    public static final String MEDIADTOR_APPLICATION_KEY = null;
+
+    public static final String LINK_HELP =
+            "https://eightsines.com/fire-strike/index.php?action=help&utm_medium=referral&utm_source=ingame&utm_campaign=ingame&hl=";
+
+    public static final String LINK_DISLIKE =
+            "https://eightsines.com/fire-strike/index.php?action=dislike&utm_medium=referral&utm_source=ingame&utm_campaign=ingame&hl=";
+
+    public static final String LINK_VK = "https://vk.com/gloomy.dungeons";
+    public static final String LINK_FACEBOOK = "https://www.facebook.com/gloomy.dungeons/";
+    public static final String LINK_TELEGRAM = "https://t.me/gloomy_dungeons";
+
+    private AppConfig() {}
+}
diff --git a/src/main/java/zame/game/flavour/config/GameConfig.java b/android/src/main/java/zame/game/flavour/config/GameConfig.java
similarity index 100%
rename from src/main/java/zame/game/flavour/config/GameConfig.java
rename to android/src/main/java/zame/game/flavour/config/GameConfig.java
diff --git a/src/main/java/zame/game/flavour/config/ProfileConfig.java b/android/src/main/java/zame/game/flavour/config/ProfileConfig.java
similarity index 94%
rename from src/main/java/zame/game/flavour/config/ProfileConfig.java
rename to android/src/main/java/zame/game/flavour/config/ProfileConfig.java
index 69e7761..0c3388c 100644
--- a/src/main/java/zame/game/flavour/config/ProfileConfig.java
+++ b/android/src/main/java/zame/game/flavour/config/ProfileConfig.java
@@ -8,22 +8,22 @@ public final class ProfileConfig {
         return new ProfileLevel[] { new ProfileLevel("e00m00", -1, R.drawable.char_commander, ProfileLevel.AD_NONE),
                 new ProfileLevel("e00m01", -1, R.drawable.char_commander, ProfileLevel.AD_NONE),
 
-                new ProfileLevel("e01m01", 1, R.drawable.char_soldier, ProfileLevel.AD_NONE),
+                new ProfileLevel("e01m01", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
                 new ProfileLevel("e01m02", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
                 new ProfileLevel("e01m03", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
                 new ProfileLevel("e01m04", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
-                new ProfileLevel("e01m05", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e01m05", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e01m06", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
-                new ProfileLevel("e01m07", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e01m07", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e01m08", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
-                new ProfileLevel("e01m09", 1, R.drawable.char_soldier, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e01m09", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e01m10", 1, R.drawable.char_soldier, ProfileLevel.AD_INTERSTITIAL),
 
-                new ProfileLevel("e02m01", 2, R.drawable.char_commander, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e02m01", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e02m02", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
-                new ProfileLevel("e02m03", 2, R.drawable.char_commander, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e02m03", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e02m04", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
-                new ProfileLevel("e02m05", 2, R.drawable.char_commander, ProfileLevel.AD_REWARDED),
+                new ProfileLevel("e02m05", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e02m06", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e02m07", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
                 new ProfileLevel("e02m08", 2, R.drawable.char_commander, ProfileLevel.AD_INTERSTITIAL),
diff --git a/src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java b/android/src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java
similarity index 57%
rename from src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java
rename to android/src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java
index 3bd8fee..22783c4 100644
--- a/src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java
+++ b/android/src/main/java/zame/game/flavour/gplay/MainActivityGPlayHelper.java
@@ -1,21 +1,28 @@
 package zame.game.flavour.gplay;
 
 import android.content.Intent;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.feature.main.MainActivity;
+import zame.game.flavour.config.AppConfig;
 
 public class MainActivityGPlayHelper {
     private RateGameDialogFragment rateGameDialogFragment;
     @SuppressWarnings("BooleanVariableAlwaysNegated") private boolean rateGameDialogShown;
 
     public void onCreate() {
-        rateGameDialogFragment = RateGameDialogFragment.newInstance(true);
-        rateGameDialogShown = false;
+        if (AppConfig.SHOULD_ASK_RATE) {
+            rateGameDialogFragment = RateGameDialogFragment.newInstance(true);
+            rateGameDialogShown = false;
+        }
     }
 
     public boolean onBackPressed(MainActivity activity) {
-        if (!rateGameDialogShown && App.self.preferences.getInt(R.string.key_quit_count) == 3 - 1) {
+        if (AppConfig.SHOULD_ASK_RATE
+                && !rateGameDialogShown
+                && App.self.preferences.getInt(R.string.key_quit_count) == 3 - 1) {
+
             rateGameDialogShown = true;
             rateGameDialogFragment.show(activity.getSupportFragmentManager());
             return false;
@@ -25,13 +32,14 @@ public class MainActivityGPlayHelper {
     }
 
     public void quitGame() {
-        if (App.self.preferences.getBoolean(R.string.key_is_consent_chosen)) {
-            App.self.preferences.putInt(R.string.key_quit_count,
+        if (AppConfig.SHOULD_ASK_RATE && App.self.preferences.getBoolean(R.string.key_is_consent_chosen)) {
+            App.self.preferences.putInt(
+                    R.string.key_quit_count,
                     App.self.preferences.getInt(R.string.key_quit_count) + 1);
         }
     }
 
-    @SuppressWarnings("unused")
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void onActivityResult(MainActivity activity, int requestCode, int resultCode, Intent data) {
     }
 }
diff --git a/src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java b/android/src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java
similarity index 72%
rename from src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java
rename to android/src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java
index 3bd4cae..69df3af 100644
--- a/src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java
+++ b/android/src/main/java/zame/game/flavour/gplay/MenuFragmentGPlayHelper.java
@@ -2,28 +2,38 @@ package zame.game.flavour.gplay;
 
 import android.view.View;
 import android.view.ViewGroup;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.manager.PreferencesManager;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.main.MainActivity;
 import zame.game.feature.sound.SoundManager;
+import zame.game.flavour.config.AppConfig;
 
 public class MenuFragmentGPlayHelper {
     private RateGameDialogFragment rateGameDialogFragment;
     private ViewGroup rateGameWrap;
 
     public void onCreate() {
-        rateGameDialogFragment = RateGameDialogFragment.newInstance(false);
+        if (AppConfig.SHOULD_ASK_RATE) {
+            rateGameDialogFragment = RateGameDialogFragment.newInstance(false);
+        }
     }
 
+    @SuppressWarnings({ "unused", "RedundantSuppression" })
     public void createFragmentView(ViewGroup viewGroup, final MainActivity activity) {
+        if (!AppConfig.SHOULD_ASK_RATE) {
+            return;
+        }
+
         rateGameWrap = viewGroup.findViewById(R.id.rate_game_wrap);
 
         rateGameWrap.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                App.self.tracker.trackEvent("BarLine.Rate");
+                App.self.tracker.trackEvent(EventsConfig.EV_MENU_RATE_BAR_PRESSED);
                 rateGameDialogFragment.show(activity.getSupportFragmentManager());
             }
         });
@@ -32,6 +42,10 @@ public class MenuFragmentGPlayHelper {
     }
 
     public void updateRateWrapVisibility() {
+        if (!AppConfig.SHOULD_ASK_RATE) {
+            return;
+        }
+
         PreferencesManager preferences = App.self.preferences;
 
         if (preferences.getBoolean(R.string.flavour_key_quit_without_rate)
@@ -40,6 +54,6 @@ public class MenuFragmentGPlayHelper {
             rateGameWrap.setVisibility(View.VISIBLE);
         } else {
             rateGameWrap.setVisibility(View.GONE);
-        }
+         }
     }
 }
diff --git a/src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java b/android/src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java
similarity index 50%
rename from src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java
rename to android/src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java
index e9b0152..37caf2b 100644
--- a/src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java
+++ b/android/src/main/java/zame/game/flavour/gplay/RateGameDialogFragment.java
@@ -7,25 +7,26 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v7.app.AlertDialog;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
+
 import java.util.Locale;
+
 import zame.game.App;
 import zame.game.R;
 import zame.game.core.app.BaseDialogFragment;
 import zame.game.core.util.Common;
-import zame.game.feature.main.MainActivity;
+import zame.game.feature.config.EventsConfig;
 import zame.game.feature.sound.SoundManager;
 import zame.game.flavour.config.AppConfig;
 
 public class RateGameDialogFragment extends BaseDialogFragment {
     private static final String KEY_SHOWN_ON_QUIT = "shownOnQuit";
 
-    private MainActivity activity;
-
     public static RateGameDialogFragment newInstance(boolean shownOnQuit) {
         RateGameDialogFragment fragment = new RateGameDialogFragment();
 
@@ -40,66 +41,65 @@ public class RateGameDialogFragment extends BaseDialogFragment {
         super();
     }
 
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        this.activity = (MainActivity)context;
-    }
-
     @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        assert getContext() != null;
+
         //noinspection ConstantConditions
         final boolean shownOnQuit = getArguments().getBoolean(KEY_SHOWN_ON_QUIT);
 
-        @SuppressLint("InflateParams")
-        final ViewGroup viewGroup = (ViewGroup)LayoutInflater.from(activity)
+        @SuppressLint("InflateParams") final ViewGroup viewGroup = (ViewGroup)LayoutInflater.from(getContext())
                 .inflate(R.layout.flavour_dialog_rate_game, null);
 
-        viewGroup.findViewById(R.id.like).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                shouldSoundPauseInstantlyOnDismiss = true;
-                App.self.preferences.putBoolean(R.string.flavour_key_rate_at_least_once, true);
-                App.self.tracker.trackEvent("Rate", "Like");
-                openMarket(activity, App.self.getPackageName());
-
-                if (shownOnQuit) {
-                    activity.quitGame();
-                } else {
-                    RateGameDialogFragment.this.dismiss();
+        if (!isForgottenFragment) {
+            viewGroup.findViewById(R.id.like).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    shouldSoundPauseInstantlyOnDismiss = true;
+                    App.self.preferences.putBoolean(R.string.flavour_key_rate_at_least_once, true);
+                    App.self.tracker.trackEvent(EventsConfig.EV_MENU_RATE, EventsConfig.PAR_MENU_RATE_SHOWN_LIKE);
+                    openMarket(activity, App.self.getPackageName());
+
+                    if (shownOnQuit) {
+                        activity.quitGame();
+                    } else {
+                        RateGameDialogFragment.this.dismiss();
+                    }
                 }
-            }
-        });
-
-        viewGroup.findViewById(R.id.dislike).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                shouldSoundPauseInstantlyOnDismiss = true;
-                App.self.preferences.putBoolean(R.string.flavour_key_rate_at_least_once, true);
-                App.self.tracker.trackEvent("Rate", "Dislike");
-
-                Common.openBrowser(activity,
-                        AppConfig.LINK_DISLIKE + Locale.getDefault().getLanguage().toLowerCase(Locale.US));
-
-                if (shownOnQuit) {
-                    activity.quitGame();
-                } else {
-                    RateGameDialogFragment.this.dismiss();
+            });
+
+            viewGroup.findViewById(R.id.dislike).setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    shouldSoundPauseInstantlyOnDismiss = true;
+                    App.self.preferences.putBoolean(R.string.flavour_key_rate_at_least_once, true);
+                    App.self.tracker.trackEvent(EventsConfig.EV_MENU_RATE, EventsConfig.PAR_MENU_RATE_SHOWN_DISLIKE);
+
+                    Common.openBrowser(
+                            activity,
+                            AppConfig.LINK_DISLIKE + Locale.getDefault().getLanguage().toLowerCase(Locale.US));
+
+                    if (shownOnQuit) {
+                        activity.quitGame();
+                    } else {
+                        RateGameDialogFragment.this.dismiss();
+                    }
                 }
-            }
-        });
+            });
 
-        App.self.tracker.trackEvent("Rate", "Show");
+            App.self.tracker.trackEvent(EventsConfig.EV_MENU_RATE, EventsConfig.PAR_MENU_RATE_SHOWN);
+        }
 
-        return new AlertDialog.Builder(activity).setIcon(R.drawable.ic_dialog_alert)
+        return new AlertDialog.Builder(requireContext()).setIcon(R.drawable.ic_dialog_alert)
                 .setTitle(R.string.flavour_rate_game_title)
                 .setView(viewGroup)
-                .setPositiveButton(shownOnQuit ? R.string.flavour_rate_game_quit : R.string.core_cancel,
+                .setPositiveButton(
+                        shownOnQuit ? R.string.flavour_rate_game_quit : R.string.core_cancel,
                         new DialogInterface.OnClickListener() {
                             @Override
                             public void onClick(DialogInterface dialog, int whichButton) {
-                                if (shownOnQuit) {
+                                if (!isForgottenFragment && shownOnQuit) {
                                     shouldSoundPauseInstantlyOnDismiss = true;
                                     activity.quitGame();
                                 }
@@ -124,9 +124,10 @@ public class RateGameDialogFragment extends BaseDialogFragment {
 
     private static void openMarket(Context context, String packageName) {
         try {
-            context.startActivity((new Intent(Intent.ACTION_VIEW,
-                    Uri.parse("market://details?id="
-                            + packageName))).addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET));
+            context.startActivity((new Intent(
+                    Intent.ACTION_VIEW,
+                    Uri.parse("market://details?id=" +
+                            packageName))).addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET));
         } catch (Exception ex) {
             Common.log(ex);
             Common.showToast("Could not launch the market application.");
diff --git a/src/main/java/com/eightsines/esmediadtor/Mediadtor.java b/src/main/java/com/eightsines/esmediadtor/Mediadtor.java
deleted file mode 100644
index 8d9b0ac..0000000
--- a/src/main/java/com/eightsines/esmediadtor/Mediadtor.java
+++ /dev/null
@@ -1,239 +0,0 @@
-package com.eightsines.esmediadtor;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.pm.PackageManager;
-import android.os.Build;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.view.Gravity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import com.appodeal.ads.Appodeal;
-import com.appodeal.ads.BannerView;
-import com.appodeal.ads.RewardedVideoCallbacks;
-import com.appodeal.ads.utils.Log;
-import com.eightsines.espromo.PromoView;
-
-public class Mediadtor {
-    private static final long ROTATE_INTERVAL_APPODEAL = 30L * 1000L;
-    private static final long ROTATE_INTERVAL_ESPROMO = 15L * 1000L;
-    private static final long RECHECK_INTERVAL = 5000L;
-
-    private String applicationKey;
-    private boolean isConsentGiven;
-    private boolean isTesting;
-    private Handler handler;
-    private MediadtorListener listener;
-    private Activity bannerActivity;
-    private ViewGroup bannerContainerView;
-    private View[] bannerViews;
-    private int bannerIndex;
-
-    private RewardedVideoCallbacks rewardedVideoCallbacks = new RewardedVideoCallbacks() {
-        @Override
-        public void onRewardedVideoLoaded(boolean isPrecache) {
-            // ignore
-        }
-
-        @Override
-        public void onRewardedVideoFailedToLoad() {
-            // ignore
-        }
-
-        @Override
-        public void onRewardedVideoShown() {
-            // ignore
-        }
-
-        @Override
-        public void onRewardedVideoFinished(double amount, String name) {
-            // ignore
-        }
-
-        @Override
-        public void onRewardedVideoClosed(boolean finished) {
-            listener.onRewardedVideoClosed(true);
-        }
-
-        @Override
-        public void onRewardedVideoExpired() {
-            // ignore
-        }
-    };
-
-    private Runnable rotateBannerRunnable = new Runnable() {
-        @Override
-        public void run() {
-            handler.removeCallbacks(rotateBannerRunnable);
-
-            if (bannerActivity == null || bannerContainerView == null || bannerViews == null) {
-                return;
-            }
-
-            for (View view : bannerViews) {
-                bannerContainerView.removeView(view);
-            }
-
-            int bannersCount = bannerViews.length;
-
-            if (bannersCount == 0) {
-                return;
-            }
-
-            if (bannerIndex < 0 || bannerIndex > bannersCount) {
-                bannerIndex = 0;
-            }
-
-            View bannerView = bannerViews[bannerIndex];
-
-            boolean isBannerLoaded = false;
-            long delayInterval = RECHECK_INTERVAL;
-
-            //noinspection ForLoopReplaceableByForEach
-            for (int i = 0; i < bannersCount; i++) {
-                if ((bannerView instanceof BannerView) && Appodeal.isLoaded(Appodeal.BANNER)) {
-                    isBannerLoaded = true;
-                    delayInterval = ROTATE_INTERVAL_APPODEAL;
-                    break;
-                }
-
-                if ((bannerView instanceof PromoView) && ((PromoView)bannerView).isActivePromoLoaded()) {
-                    isBannerLoaded = true;
-                    delayInterval = ROTATE_INTERVAL_ESPROMO;
-                    break;
-                }
-
-                bannerIndex = (bannerIndex + 1) % bannersCount;
-                bannerView = bannerViews[bannerIndex];
-            }
-
-            bannerContainerView.addView(bannerView);
-
-            if (bannerView instanceof BannerView) {
-                Appodeal.show(bannerActivity, Appodeal.BANNER_VIEW);
-            }
-
-            if (isBannerLoaded) {
-                bannerIndex = (bannerIndex + 1) % bannersCount;
-            }
-
-            handler.postDelayed(rotateBannerRunnable, delayInterval);
-        }
-    };
-
-    public Mediadtor(@NonNull String applicationKey, boolean isConsentGiven, boolean isTesting) {
-        this.applicationKey = applicationKey;
-        this.isConsentGiven = isConsentGiven;
-        this.isTesting = isTesting;
-
-        handler = new Handler();
-    }
-
-    public void onActivityCreate(@NonNull Activity activity, @NonNull MediadtorListener listener) {
-        this.listener = listener;
-
-        Appodeal.disableLocationPermissionCheck();
-        Appodeal.setTesting(isTesting);
-        Appodeal.setLogLevel(isTesting ? Log.LogLevel.debug : Log.LogLevel.none);
-
-        if (!isTesting) {
-            Appodeal.disableWriteExternalStoragePermissionCheck();
-        }
-
-        // https://www.appodeal.com/sdk/documentation?framework=1&full=1&platform=1
-        //
-        // Appodeal.setChildDirectedTreatment(true);
-        // Appodeal.muteVideosIfCallsMuted(true);
-
-        Appodeal.initialize(
-                activity,
-                applicationKey,
-                Appodeal.INTERSTITIAL | Appodeal.REWARDED_VIDEO | Appodeal.BANNER,
-                isConsentGiven);
-
-        Appodeal.setRewardedVideoCallbacks(rewardedVideoCallbacks);
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
-                && activity.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
-                != PackageManager.PERMISSION_GRANTED) {
-
-            Appodeal.requestAndroidMPermissions(activity, null);
-        }
-    }
-
-    public void onActivityResume(@NonNull Activity activity) {
-        if (bannerContainerView != null && bannerViews != null) {
-            Appodeal.onResume(activity, Appodeal.BANNER);
-            handler.postDelayed(rotateBannerRunnable, ROTATE_INTERVAL_APPODEAL);
-        }
-    }
-
-    public void onActivityPause() {
-        handler.removeCallbacks(rotateBannerRunnable);
-    }
-
-    public boolean isInterstitialLoaded() {
-        return Appodeal.isLoaded(Appodeal.INTERSTITIAL);
-    }
-
-    public void showInterstitial(@NonNull Activity activity) {
-        Appodeal.show(activity, Appodeal.INTERSTITIAL);
-    }
-
-    public boolean isRewardedVideoLoaded() {
-        return Appodeal.isLoaded(Appodeal.REWARDED_VIDEO);
-    }
-
-    public void showRewardedVideo(@NonNull Activity activity) {
-        Appodeal.show(activity, Appodeal.REWARDED_VIDEO);
-    }
-
-    public void showBanner(@NonNull Activity activity, @NonNull ViewGroup containerView) {
-        hideBanner(activity);
-
-        bannerActivity = activity;
-        bannerContainerView = containerView;
-
-        bannerViews = new View[] {
-                Appodeal.getBannerView(activity),
-                new PromoView(activity) };
-
-        if (containerView instanceof FrameLayout) {
-            for (View view : bannerViews) {
-                boolean isAppodealBanner = (view instanceof BannerView);
-
-                FrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
-                        isAppodealBanner ? ViewGroup.LayoutParams.WRAP_CONTENT : ViewGroup.LayoutParams.MATCH_PARENT);
-
-                if (isAppodealBanner) {
-                    lp.gravity = Gravity.CENTER_VERTICAL;
-                }
-
-                view.setLayoutParams(lp);
-            }
-        }
-
-        rotateBannerRunnable.run();
-    }
-
-    public void hideBanner(@NonNull Activity activity) {
-        handler.removeCallbacks(rotateBannerRunnable);
-        Appodeal.hide(activity, Appodeal.BANNER);
-
-        if (bannerActivity != null && activity != bannerActivity) {
-            Appodeal.hide(bannerActivity, Appodeal.BANNER);
-        }
-
-        if (bannerContainerView != null && bannerViews != null) {
-            for (View view : bannerViews) {
-                bannerContainerView.removeView(view);
-            }
-        }
-
-        bannerActivity = null;
-        bannerContainerView = null;
-        bannerViews = null;
-    }
-}
diff --git a/src/main/java/com/eightsines/estracker/Tracker.java b/src/main/java/com/eightsines/estracker/Tracker.java
deleted file mode 100644
index a112337..0000000
--- a/src/main/java/com/eightsines/estracker/Tracker.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.eightsines.estracker;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-public interface Tracker {
-    @SuppressWarnings("unused")
-    boolean getCrashedConsent();
-
-    void setCrashesConsent(boolean shouldSendCrashes);
-
-    @SuppressWarnings("unused")
-    boolean getAnalyticsConsent();
-
-    void setAnalyticsConsent(boolean shouldSendAnalytics);
-
-    void trackEvent(@NonNull String name);
-
-    void trackEvent(@NonNull String name, @Nullable String param);
-}
diff --git a/src/main/java/com/eightsines/estracker/TrackerFactory.java b/src/main/java/com/eightsines/estracker/TrackerFactory.java
deleted file mode 100644
index b68a0b5..0000000
--- a/src/main/java/com/eightsines/estracker/TrackerFactory.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.eightsines.estracker;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.eightsines.estracker.tracker.AppCenterTracker;
-import com.eightsines.estracker.tracker.DummyTracker;
-
-@SuppressWarnings("unused")
-public final class TrackerFactory {
-    private TrackerFactory() {
-    }
-
-    @NonNull
-    public static Tracker create(@NonNull Context context, @Nullable String applicationKey) {
-        if (applicationKey == null) {
-            return new DummyTracker();
-        }
-
-        return new AppCenterTracker(context, applicationKey);
-    }
-}
diff --git a/src/main/java/zame/game/engine/entity/Action.java b/src/main/java/zame/game/engine/entity/Action.java
deleted file mode 100644
index ef6d7ce..0000000
--- a/src/main/java/zame/game/engine/entity/Action.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package zame.game.engine.entity;
-
-import java.io.IOException;
-import zame.game.core.serializer.DataItem;
-import zame.game.core.serializer.DataReader;
-import zame.game.core.serializer.DataWriter;
-
-public class Action implements DataItem {
-	private static final int FIELD_TYPE = 1;
-	private static final int FIELD_MARK_ID = 2;
-	private static final int FIELD_PARAM = 3;
-
-	public int type;
-	public int markId;
-	public int param;
-
-	@Override
-	public void writeTo(DataWriter writer) throws IOException {
-		writer.write(FIELD_TYPE, type);
-		writer.write(FIELD_MARK_ID, markId);
-		writer.write(FIELD_PARAM, param);
-	}
-
-	@Override
-	public void readFrom(DataReader reader) {
-		type = reader.readInt(FIELD_TYPE);
-		markId = reader.readInt(FIELD_MARK_ID);
-		param = reader.readInt(FIELD_PARAM);
-	}
-}
diff --git a/src/main/java/zame/game/engine/entity/AutoWall.java b/src/main/java/zame/game/engine/entity/AutoWall.java
deleted file mode 100644
index 763ffbe..0000000
--- a/src/main/java/zame/game/engine/entity/AutoWall.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package zame.game.engine.entity;
-
-import java.io.IOException;
-import zame.game.core.serializer.DataItem;
-import zame.game.core.serializer.DataListItem;
-import zame.game.core.serializer.DataReader;
-import zame.game.core.serializer.DataWriter;
-
-public class AutoWall extends DataListItem<AutoWall> implements DataItem {
-	private static final int FIELD_FROM_X = 1;
-	private static final int FIELD_FROM_Y = 2;
-	private static final int FIELD_TO_X = 3;
-	private static final int FIELD_TO_Y = 4;
-	private static final int FIELD_VERT = 5;
-	private static final int FIELD_TYPE = 6;
-	private static final int FIELD_DOOR_UID = 7;
-
-	public float fromX;
-	public float fromY;
-	public float toX;
-	public float toY;
-	public boolean vert;
-	public int type;
-	public int doorUid; // required for save/load
-	public Door door;
-
-	@Override
-	public void writeTo(DataWriter writer) throws IOException {
-		writer.write(FIELD_FROM_X, fromX);
-		writer.write(FIELD_FROM_Y, fromY);
-		writer.write(FIELD_TO_X, toX);
-		writer.write(FIELD_TO_Y, toY);
-		writer.write(FIELD_VERT, vert);
-		writer.write(FIELD_TYPE, type);
-		writer.write(FIELD_DOOR_UID, doorUid);
-	}
-
-	@Override
-	public void readFrom(DataReader reader) {
-		fromX = reader.readFloat(FIELD_FROM_X);
-		fromY = reader.readFloat(FIELD_FROM_Y);
-		toX = reader.readFloat(FIELD_TO_X);
-		toY = reader.readFloat(FIELD_TO_Y);
-		vert = reader.readBoolean(FIELD_VERT);
-		type = reader.readInt(FIELD_TYPE);
-		doorUid = reader.readInt(FIELD_DOOR_UID);
-	}
-}
diff --git a/src/main/java/zame/game/engine/entity/Timeout.java b/src/main/java/zame/game/engine/entity/Timeout.java
deleted file mode 100644
index efcef19..0000000
--- a/src/main/java/zame/game/engine/entity/Timeout.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package zame.game.engine.entity;
-
-import java.io.IOException;
-import zame.game.core.serializer.DataItem;
-import zame.game.core.serializer.DataListItem;
-import zame.game.core.serializer.DataReader;
-import zame.game.core.serializer.DataWriter;
-
-public class Timeout extends DataListItem<Timeout> implements DataItem {
-	private static final int FIELD_MARK_ID = 1;
-	private static final int FIELD_DELAY = 2;
-
-	public int markId;
-	public int delay;
-
-	@Override
-	public void writeTo(DataWriter writer) throws IOException {
-		writer.write(FIELD_MARK_ID, markId);
-		writer.write(FIELD_DELAY, delay);
-	}
-
-	@Override
-	public void readFrom(DataReader reader) {
-		markId = reader.readInt(FIELD_MARK_ID);
-		delay = reader.readInt(FIELD_DELAY);
-	}
-}
diff --git a/src/main/java/zame/game/feature/launcher/LauncherActivity.java b/src/main/java/zame/game/feature/launcher/LauncherActivity.java
deleted file mode 100644
index aac5daa..0000000
--- a/src/main/java/zame/game/feature/launcher/LauncherActivity.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package zame.game.feature.launcher;
-
-import android.content.Context;
-import android.content.Intent;
-import zame.game.App;
-import zame.game.core.app.BaseActivity;
-import zame.game.feature.main.MainActivity;
-
-public class LauncherActivity extends BaseActivity {
-    private static final long START_GAME_DELAY = 1500L;
-
-    private final Runnable startGameRunnable = new Runnable() {
-        @Override
-        public void run() {
-            startActivity(new Intent(LauncherActivity.this, MainActivity.class));
-            finish();
-        }
-    };
-
-    @Override
-    protected Context wrapBaseContext(Context newBase) {
-        return newBase;
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        App.self.handler.postDelayed(startGameRunnable, START_GAME_DELAY);
-    }
-
-    @Override
-    protected void onStop() {
-        App.self.handler.removeCallbacks(startGameRunnable);
-        super.onStop();
-    }
-}
diff --git a/src/main/java/zame/game/feature/menu/MenuFragment.java b/src/main/java/zame/game/feature/menu/MenuFragment.java
deleted file mode 100644
index fdec096..0000000
--- a/src/main/java/zame/game/feature/menu/MenuFragment.java
+++ /dev/null
@@ -1,127 +0,0 @@
-package zame.game.feature.menu;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.animation.AnimationUtils;
-import zame.game.App;
-import zame.game.R;
-import zame.game.core.app.BaseFragment;
-import zame.game.core.util.Common;
-import zame.game.feature.sound.SoundManager;
-import zame.game.flavour.config.AppConfig;
-import zame.game.flavour.gplay.MenuFragmentGPlayHelper;
-
-public class MenuFragment extends BaseFragment {
-    public static MenuFragment newInstance() {
-        return new MenuFragment();
-    }
-
-    private View playWrapperView;
-    private ViewGroup bannerWrapperView;
-    private MenuFragmentGPlayHelper gPlayHelper = new MenuFragmentGPlayHelper();
-
-    public MenuFragment() {
-        super();
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        gPlayHelper.onCreate();
-    }
-
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater,
-            @Nullable ViewGroup container,
-            @Nullable Bundle savedInstanceState) {
-
-        ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.menu_fragment, container, false);
-
-        playWrapperView = viewGroup.findViewById(R.id.play_wrapper);
-        bannerWrapperView = viewGroup.findViewById(R.id.banner_wrapper);
-
-        viewGroup.findViewById(R.id.play).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-
-                if (!activity.tryAndLoadInstantState() || activity.engine.state.showEpisodeSelector) {
-                    activity.showFragment(activity.selectEpisodeFragment);
-                } else {
-                    activity.continueGame();
-                }
-            }
-        });
-
-        viewGroup.findViewById(R.id.options).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                activity.showFragment(activity.optionsFragment);
-            }
-        });
-
-        viewGroup.findViewById(R.id.achievements).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                activity.showFragment(activity.achievementsFragment);
-            }
-        });
-
-        viewGroup.findViewById(R.id.like_vk).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                Common.openViewIntent(activity, AppConfig.LINK_VK);
-            }
-        });
-
-        viewGroup.findViewById(R.id.like_facebook).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                Common.openViewIntent(activity, AppConfig.LINK_FACEBOOK);
-            }
-        });
-
-        viewGroup.findViewById(R.id.like_telegram).setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                activity.soundManager.playSound(SoundManager.SOUND_BTN_PRESS);
-                Common.openViewIntent(activity, AppConfig.LINK_TELEGRAM);
-            }
-        });
-
-        gPlayHelper.createFragmentView(viewGroup, activity);
-        return viewGroup;
-    }
-
-    @Override
-    protected void onShowBanner() {
-        App.self.mediadtor.showBanner(activity, bannerWrapperView);
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        playWrapperView.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bounce));
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        activity.soundManager.setPlaylist(SoundManager.LIST_MAIN);
-    }
-
-    @Override
-    public void onWindowFocusChanged(boolean hasWindowFocus) {
-        if (hasWindowFocus) {
-            gPlayHelper.updateRateWrapVisibility();
-        }
-    }
-}
diff --git a/src/main/java/zame/game/feature/prepare/PrepareFragment.java b/src/main/java/zame/game/feature/prepare/PrepareFragment.java
deleted file mode 100644
index 130abb8..0000000
--- a/src/main/java/zame/game/feature/prepare/PrepareFragment.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package zame.game.feature.prepare;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ProgressBar;
-import zame.game.App;
-import zame.game.R;
-import zame.game.core.app.BaseFragment;
-
-public class PrepareFragment extends BaseFragment {
-    public static PrepareFragment newInstance() {
-        return new PrepareFragment();
-    }
-
-    private ProgressBar progressView;
-
-    private final BroadcastReceiver cacheUpdateProgressReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            int progress = intent.getIntExtra(CachedTexturesProvider.EXTRA_PROGRESS, 0);
-
-            if (progress > 100) {
-                activity.processNext();
-            } else {
-                progressView.setProgress(progress);
-            }
-        }
-    };
-
-    public PrepareFragment() {
-        super();
-    }
-
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        ViewGroup viewGroup = (ViewGroup)inflater.inflate(R.layout.prepare_fragment, container, false);
-        progressView = viewGroup.findViewById(R.id.progress);
-
-        //noinspection BooleanVariableAlwaysNegated
-        boolean needToUpdateCache = (App.self.cachedTexturesTask != null
-                || CachedTexturesProvider.needToUpdateCache());
-
-        if (!needToUpdateCache) {
-            activity.showFragment(activity.menuFragment);
-        } else {
-            App.self.getBroadcastManager()
-                    .registerReceiver(cacheUpdateProgressReceiver,
-                            new IntentFilter(CachedTexturesProvider.BROADCAST_ACTION));
-
-            if (App.self.cachedTexturesTask == null) {
-                CachedTexturesProvider.updateCache();
-            }
-        }
-
-        return viewGroup;
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        activity.soundManager.setPlaylist(null);
-    }
-
-    @Override
-    public void onDestroyView() {
-        App.self.getBroadcastManager().unregisterReceiver(cacheUpdateProgressReceiver);
-        super.onDestroyView();
-    }
-}
diff --git a/src/main/java/zame/game/flavour/config/AppConfig.java b/src/main/java/zame/game/flavour/config/AppConfig.java
deleted file mode 100644
index 3107a74..0000000
--- a/src/main/java/zame/game/flavour/config/AppConfig.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package zame.game.flavour.config;
-
-import zame.game.BuildConfig;
-
-public final class AppConfig {
-    public static final String TAG = "FSR";
-
-    public static final boolean DEBUG = BuildConfig.DEBUG;
-    public static final boolean DEBUG_TRACKER = false;
-    public static final boolean DEBUG_MEDIADTOR = false;
-
-    public static final String APPCENTER_KEY = "e50ebca7-3d1b-41af-bd4d-de199974b77e";
-    public static final String APPODEAL_KEY = "f73b332eca8fbfd3bfca04109c5b7a99e047d11c387b8160";
-
-    public static final String LINK_HELP = "https://eightsines.com/fire-strike/index.php?action=help&utm_medium=referral&utm_source=ingame&utm_campaign=ingame&hl=";
-    public static final String LINK_DISLIKE = "http://eightsines.com/fire-strike/index.php?action=dislike&utm_medium=referral&utm_source=ingame&utm_campaign=ingame&hl=";
-
-    public static final String LINK_VK = "https://vk.com/gloomy.dungeons";
-    public static final String LINK_FACEBOOK = "https://www.facebook.com/gloomy.dungeons/";
-    public static final String LINK_TELEGRAM = "https://t.me/gloomy_dungeons";
-
-    private AppConfig() {}
-}
