diff --git a/app/src/main/java/com/dimowner/audiorecorder/AppConstants.java b/app/src/main/java/com/dimowner/audiorecorder/AppConstants.java
index 59fd705..6973c2b 100755
--- a/app/src/main/java/com/dimowner/audiorecorder/AppConstants.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/AppConstants.java
@@ -33,6 +33,25 @@ public class AppConstants {
 	public static final String BASE_RECORD_NAME = "Record-";
 	public static final String BASE_RECORD_NAME_SHORT = "Rec-";
 	public static final String TRASH_MARK_EXTENSION = "del";
+
+	public static final String THEME_BLACK = "black";
+	public static final String THEME_TEAL = "teal";
+	public static final String THEME_BLUE = "blue";
+	public static final String THEME_PURPLE = "purple";
+	public static final String THEME_PINK = "pink";
+	public static final String THEME_ORANGE = "orange";
+	public static final String THEME_RED = "red";
+	public static final String THEME_BROWN = "brown";
+	public static final String THEME_BLUE_GREY = "blue_gray";
+
+	public static final String FORMAT_M4A = "m4a";
+	public static final String FORMAT_WAV = "wav";
+	public static final String FORMAT_3GP = "3gp";
+
+	public static final String NAME_FORMAT_RECORD = "record";
+	public static final String NAME_FORMAT_TIMESTAMP = "timestamp";
+	public static final String NAME_FORMAT_DATE = "date";
+
 	public static final int MAX_RECORD_NAME_LENGTH = 50;
 
 	public static final int NAMING_COUNTED = 0;
@@ -72,18 +91,18 @@ public class AppConstants {
 	public static final int TIME_FORMAT_12H = 12;
 
 	// recording and playback
-	public final static int PLAYBACK_SAMPLE_RATE = 44100;
-	public final static int RECORD_SAMPLE_RATE_44100 = 44100;
-	public final static int RECORD_SAMPLE_RATE_8000 = 8000;
-	public final static int RECORD_SAMPLE_RATE_16000 = 16000;
-	public final static int RECORD_SAMPLE_RATE_32000 = 32000;
-	public final static int RECORD_SAMPLE_RATE_48000 = 48000;
-
-	public final static int RECORD_ENCODING_BITRATE_24000 = 24000;
-	public final static int RECORD_ENCODING_BITRATE_48000 = 48000;
-	public final static int RECORD_ENCODING_BITRATE_96000 = 96000;
-	public final static int RECORD_ENCODING_BITRATE_128000 = 128000;
-	public final static int RECORD_ENCODING_BITRATE_192000 = 192000;
+	public static final int PLAYBACK_SAMPLE_RATE = 44100;
+	public static final int RECORD_SAMPLE_RATE_44100 = 44100;
+	public static final int RECORD_SAMPLE_RATE_8000 = 8000;
+	public static final int RECORD_SAMPLE_RATE_16000 = 16000;
+	public static final int RECORD_SAMPLE_RATE_32000 = 32000;
+	public static final int RECORD_SAMPLE_RATE_48000 = 48000;
+
+	public static final int RECORD_ENCODING_BITRATE_24000 = 24000;
+	public static final int RECORD_ENCODING_BITRATE_48000 = 48000;
+	public static final int RECORD_ENCODING_BITRATE_96000 = 96000;
+	public static final int RECORD_ENCODING_BITRATE_128000 = 128000;
+	public static final int RECORD_ENCODING_BITRATE_192000 = 192000;
 
 	public static final int SORT_DATE = 1;
 	public static final int SORT_NAME = 2;
@@ -97,6 +116,13 @@ public class AppConstants {
 	public final static int RECORD_AUDIO_STEREO = 2;
 	public final static int RECORD_MAX_DURATION = 14400000; // 240 min 4 hours
 
+	public static final String DEFAULT_THEME_COLOR = THEME_BLUE_GREY;
+	public static final String DEFAULT_RECORDING_FORMAT = FORMAT_M4A;
+	public static final String DEFAULT_NAME_FORMAT = NAME_FORMAT_RECORD;
+	public static final int DEFAULT_RECORD_SAMPLE_RATE = RECORD_SAMPLE_RATE_44100;
+	public static final int DEFAULT_RECORD_ENCODING_BITRATE = RECORD_ENCODING_BITRATE_128000;
+	public static final int DEFAULT_CHANNEL_COUNT = RECORD_AUDIO_STEREO;
+
 	/** Time interval for Recording progress visualisation. */
 	public final static int VISUALIZATION_INTERVAL = 1000/SHORT_RECORD_DP_PER_SECOND; //1000 mills/25 dp per sec
 
diff --git a/app/src/main/java/com/dimowner/audiorecorder/ColorMap.java b/app/src/main/java/com/dimowner/audiorecorder/ColorMap.java
index e87a27e..b164fc6 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/ColorMap.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/ColorMap.java
@@ -4,7 +4,6 @@ import com.dimowner.audiorecorder.data.Prefs;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Random;
 
 public class ColorMap {
 
@@ -17,100 +16,79 @@ public class ColorMap {
 		return singleton;
 	}
 
-	private static final int THEME_BLACK = 1;
-	private static final int THEME_TEAL = 2;
-	private static final int THEME_BLUE = 3;
-	private static final int THEME_PURPLE = 4;
-	private static final int THEME_PINK = 5;
-	private static final int THEME_DEEP_ORANGE = 6;
-	private static final int THEME_RED = 7;
-	private static final int THEME_BROWN = 8;
-	private static final int THEME_GRAY = 9;
-
 	private int appThemeResource = 0;
 	private int primaryColorRes = R.color.md_blue_700;
 	private int playbackPanelBackground = R.drawable.panel_amber;
-	private int selected;
+	private String selectedKey;
 	private List<OnThemeColorChangeListener> onThemeColorChangeListeners;
-	private Prefs prefs;
 
 	private ColorMap(Prefs prefs) {
-
 		onThemeColorChangeListeners = new ArrayList<>();
-		this.prefs = prefs;
-		if (prefs.isFirstRun()) {
-			selected = THEME_GRAY;
-		} else {
-			selected = prefs.getThemeColor();
-		}
-		init(selected);
+		selectedKey = prefs.getSettingThemeColor();
+		init();
 	}
 
-	private void init(int color) {
-		if (color < 1 || color > 9) {
-			color = new Random().nextInt(9);
-		}
-		switch (color) {
-			case THEME_BLACK:
+	private void init() {
+		switch (selectedKey) {
+			case AppConstants.THEME_BLACK:
 				appThemeResource = R.style.AppTheme_Black;
 				primaryColorRes = R.color.md_black_1000;
 				playbackPanelBackground = R.drawable.panel_red;
 				break;
-			case THEME_TEAL:
+			case AppConstants.THEME_TEAL:
 				appThemeResource = R.style.AppTheme_Teal;
 				primaryColorRes = R.color.md_teal_700;
 				playbackPanelBackground = R.drawable.panel_green;
 				break;
-			case THEME_PURPLE:
+			case AppConstants.THEME_PURPLE:
 				appThemeResource = R.style.AppTheme_Purple;
 				primaryColorRes = R.color.md_deep_purple_700;
 				playbackPanelBackground = R.drawable.panel_pink;
 				break;
-			case THEME_PINK:
+			case AppConstants.THEME_PINK:
 				appThemeResource = R.style.AppTheme_Pink;
 				primaryColorRes = R.color.md_pink_800;
 				playbackPanelBackground = R.drawable.panel_purple;
 				break;
-			case THEME_DEEP_ORANGE:
+			case AppConstants.THEME_ORANGE:
 				appThemeResource = R.style.AppTheme_DeepOrange;
 				primaryColorRes = R.color.md_deep_orange_800;
 				playbackPanelBackground = R.drawable.panel_yellow;
 				break;
-			case THEME_RED:
+			case AppConstants.THEME_RED:
 				appThemeResource = R.style.AppTheme_Red;
 				primaryColorRes = R.color.md_red_700;
 				playbackPanelBackground = R.drawable.panel_purple_light;
 				break;
-			case THEME_BROWN:
+			case AppConstants.THEME_BROWN:
 				appThemeResource = R.style.AppTheme_Brown;
 				primaryColorRes = R.color.md_brown_700;
 				playbackPanelBackground = R.drawable.panel_deep_orange;
 				break;
-			case THEME_BLUE:
+			case AppConstants.THEME_BLUE:
 				primaryColorRes = R.color.md_blue_700;
 				appThemeResource = R.style.AppTheme_Blue;
 				playbackPanelBackground = R.drawable.panel_amber;
 				break;
-			case THEME_GRAY:
-				default:
+			case AppConstants.THEME_BLUE_GREY:
+			default:
 				appThemeResource = R.style.AppTheme_Gray;
 				primaryColorRes = R.color.md_blue_gray_700;
 				playbackPanelBackground = R.drawable.panel_red;
 		}
 	}
 
-	public void updateColorMap(int num) {
-		int ondSelected = selected;
-		selected = num;
-		if (ondSelected != selected) {
-			prefs.setAppThemeColor(selected);
-			init(selected);
-			onThemeColorChange(selected);
+	public void updateColorMap(String colorKey) {
+		String oldSelected = selectedKey;
+		selectedKey = colorKey;
+		if (!oldSelected.equals(selectedKey)) {
+			init();
+			onThemeColorChange(selectedKey);
 		}
 	}
 
-	public int getSelected() {
-		return selected;
+	public String getSelected() {
+		return selectedKey;
 	}
 
 	public int getAppThemeResource() {
@@ -127,7 +105,7 @@ public class ColorMap {
 
 	public int[] getColorResources() {
 		return new int[] {
-				R.color.transparent,
+				R.color.md_blue_gray_700,
 				R.color.md_black_1000,
 				R.color.md_teal_700,
 				R.color.md_blue_700,
@@ -135,8 +113,7 @@ public class ColorMap {
 				R.color.md_pink_800,
 				R.color.md_deep_orange_800,
 				R.color.md_red_700,
-				R.color.md_brown_700,
-				R.color.md_blue_gray_700
+				R.color.md_brown_700
 		};
 	}
 
@@ -148,13 +125,13 @@ public class ColorMap {
 		this.onThemeColorChangeListeners.remove(onThemeColorChangeListener);
 	}
 
-	public void onThemeColorChange(int pos) {
+	public void onThemeColorChange(String colorKey) {
 		for (int i = 0; i < onThemeColorChangeListeners.size(); i++) {
-			onThemeColorChangeListeners.get(i).onThemeColorChange(pos);
+			onThemeColorChangeListeners.get(i).onThemeColorChange(colorKey);
 		}
 	}
 
 	public interface OnThemeColorChangeListener {
-		void onThemeColorChange(int pos);
+		void onThemeColorChange(String colorKey);
 	}
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/main/MainActivity.java b/app/src/main/java/com/dimowner/audiorecorder/app/main/MainActivity.java
index 13c3100..60d0557 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/main/MainActivity.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/main/MainActivity.java
@@ -214,7 +214,7 @@ public class MainActivity extends Activity implements MainContract.View, View.On
 		});
 		onThemeColorChangeListener = new ColorMap.OnThemeColorChangeListener() {
 			@Override
-			public void onThemeColorChange(int pos) {
+			public void onThemeColorChange(String colorKey) {
 				setTheme(colorMap.getAppThemeResource());
 				recreate();
 			}
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/main/MainPresenter.java b/app/src/main/java/com/dimowner/audiorecorder/app/main/MainPresenter.java
index 28de70f..dd20cc0 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/main/MainPresenter.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/main/MainPresenter.java
@@ -366,8 +366,8 @@ public class MainPresenter implements MainContract.UserActionsListener {
 											appRecorder.startRecording(
 													path,
 													prefs.getRecordChannelCount(),
-													prefs.getSampleRate(),
-													prefs.getBitrate()
+													prefs.getSettingSampleRate(),
+													prefs.getSettingBitrate()
 											);
 										}
 									});
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsActivity.java b/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsActivity.java
index 3ed0b1d..08a3d04 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsActivity.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsActivity.java
@@ -169,19 +169,19 @@ public class SettingsActivity extends Activity implements SettingsContract.View,
 
 		onThemeColorChangeListener = new ColorMap.OnThemeColorChangeListener() {
 			@Override
-			public void onThemeColorChange(int pos) {
+			public void onThemeColorChange(String key) {
 				setTheme(colorMap.getAppThemeResource());
 				recreate();
 			}
 		};
 		colorMap.addOnThemeColorChangeListener(onThemeColorChangeListener);
 
-		if (colorMap.getSelected() > 0) {
-			themeColor.setSelection(colorMap.getSelected());
-		}
+//		if (colorMap.getSelected() > 0) {
+//			themeColor.setSelection(colorMap.getSelected());
+//		}
 		themeColor.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 			@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				colorMap.updateColorMap(position);
+//				colorMap.updateColorMap(position);
 			}
 			@Override public void onNothingSelected(AdapterView<?> parent) { }
 		});
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsPresenter.java b/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsPresenter.java
index 4db4c91..ac03382 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsPresenter.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/settings/SettingsPresenter.java
@@ -90,7 +90,7 @@ public class SettingsPresenter implements SettingsContract.UserActionsListener {
 
 
 		int pos;
-		switch (prefs.getSampleRate()) {
+		switch (prefs.getSettingSampleRate()) {
 			case AppConstants.RECORD_SAMPLE_RATE_8000:
 				pos = 0;
 				break;
@@ -111,7 +111,7 @@ public class SettingsPresenter implements SettingsContract.UserActionsListener {
 			view.showRecordingSampleRate(pos);
 		}
 
-		switch (prefs.getBitrate()) {
+		switch (prefs.getSettingBitrate()) {
 			case AppConstants.RECORD_ENCODING_BITRATE_24000:
 				pos = 0;
 				break;
@@ -176,7 +176,7 @@ public class SettingsPresenter implements SettingsContract.UserActionsListener {
 				rate = AppConstants.RECORD_ENCODING_BITRATE_192000;
 				break;
 		}
-		prefs.setBitrate(rate);
+		prefs.setSettingBitrate(rate);
 		updateAvailableSpace();
 	}
 
@@ -218,7 +218,7 @@ public class SettingsPresenter implements SettingsContract.UserActionsListener {
 			default:
 				rate = AppConstants.RECORD_SAMPLE_RATE_44100;
 		}
-		prefs.setSampleRate(rate);
+		prefs.setSettingSampleRate(rate);
 		updateAvailableSpace();
 	}
 
@@ -275,7 +275,7 @@ public class SettingsPresenter implements SettingsContract.UserActionsListener {
 
 	private void updateAvailableSpace() {
 		final long space = FileUtil.getFree(fileRepository.getRecordingDir());
-		final long time = spaceToTimeSecs(space, prefs.getFormat(), prefs.getSampleRate(), prefs.getRecordChannelCount());
+		final long time = spaceToTimeSecs(space, prefs.getFormat(), prefs.getSettingSampleRate(), prefs.getRecordChannelCount());
 		if (view != null) {
 			view.showAvailableSpace(TimeUtils.formatTimeIntervalHourMinSec(time));
 		}
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupActivity.java b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupActivity.java
index ab2739b..ad820f1 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupActivity.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupActivity.java
@@ -18,18 +18,17 @@ package com.dimowner.audiorecorder.app.setup;
 
 import android.app.Activity;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.widget.AdapterView;
-import android.widget.CompoundButton;
+import android.widget.Button;
 import android.widget.LinearLayout;
 import android.widget.Space;
 import android.widget.Spinner;
-import android.widget.Switch;
+import android.widget.TextView;
 import android.widget.Toast;
 
 import com.dimowner.audiorecorder.ARApplication;
@@ -46,33 +45,35 @@ import com.dimowner.audiorecorder.util.FileUtil;
 import java.util.ArrayList;
 import java.util.List;
 
-import androidx.core.content.ContextCompat;
-import timber.log.Timber;
+public class SetupActivity extends Activity implements SetupContract.View, View.OnClickListener {
 
-public class SetupActivity extends Activity implements SetupContract.View {
+	private final static String SAMPLE_RATE_8000 = "8000";
+	private final static String SAMPLE_RATE_16000 = "16000";
+	private final static String SAMPLE_RATE_32000 = "32000";
+	private final static String SAMPLE_RATE_44100 = "44100";
+	private final static String SAMPLE_RATE_48000 = "48000";
 
-	private Switch swPublicDir;
-	private Switch swRecordInStereo;
+	private final static String BITRATE_24000 = "24000";
+	private final static String BITRATE_48000 = "48000";
+	private final static String BITRATE_96000 = "96000";
+	private final static String BITRATE_128000 = "128000";
+	private final static String BITRATE_192000 = "192000";
+
+	private final static String CHANNEL_COUNT_STEREO = "stereo";
+	private final static String CHANNEL_COUNT_MONO = "mono";
 
 	private Spinner nameFormatSelector;
-	private Spinner formatSelector;
-	private Spinner sampleRateSelector;
-	private Spinner bitrateSelector;
+	private Spinner themeColor;
+
+	private SettingView formatSetting;
+	private SettingView sampleRateSetting;
+	private SettingView bitrateSetting;
+	private SettingView channelsSetting;
+	private TextView txtInformation;
 
 	private SetupContract.UserActionsListener presenter;
 	private ColorMap colorMap;
 	private ColorMap.OnThemeColorChangeListener onThemeColorChangeListener;
-	private CompoundButton.OnCheckedChangeListener publicDirListener = new CompoundButton.OnCheckedChangeListener() {
-		@Override
-		public void onCheckedChanged(CompoundButton btn, boolean isChecked) {
-			presenter.storeInPublicDir(isChecked);
-			if (isChecked) {
-				showDialogPublicDirInfo();
-			} else {
-				showDialogPrivateDirInfo();
-			}
-		}
-	};
 
 	public static Intent getStartIntent(Context context) {
 		Intent intent = new Intent(context, SetupActivity.class);
@@ -94,6 +95,13 @@ public class SetupActivity extends Activity implements SetupContract.View {
 		LinearLayout toolbar = findViewById(R.id.toolbar);
 		toolbar.setPadding(0, AndroidUtils.getStatusBarHeight(getApplicationContext()), 0, 0);
 
+		txtInformation = findViewById(R.id.txt_information);
+
+		Button btnApply = findViewById(R.id.btn_apply);
+		Button btnReset = findViewById(R.id.btn_reset);
+		btnApply.setOnClickListener(this);
+		btnReset.setOnClickListener(this);
+
 		Space space = findViewById(R.id.space);
 		ViewGroup.LayoutParams params = space.getLayoutParams();
 		params.height = AndroidUtils.getNavigationBarHeight(getApplicationContext());
@@ -111,18 +119,7 @@ public class SetupActivity extends Activity implements SetupContract.View {
 			}
 		});
 
-		swPublicDir = findViewById(R.id.swPublicDir);
-		swRecordInStereo = findViewById(R.id.swRecordInStereo);
-
-		swPublicDir.setOnCheckedChangeListener(publicDirListener);
-		swRecordInStereo.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
-			@Override
-			public void onCheckedChanged(CompoundButton btn, boolean isChecked) {
-				presenter.recordInStereo(isChecked);
-			}
-		});
-
-		findViewById(R.id.btn_get_started).setOnClickListener(new View.OnClickListener() {
+		findViewById(R.id.btn_apply).setOnClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
 				presenter.executeFirstRun();
@@ -131,247 +128,97 @@ public class SetupActivity extends Activity implements SetupContract.View {
 			}
 		});
 
-		final SettingView settingTheme = findViewById(R.id.setting_item_theme);
-		String[] names = new String[9];
-		names[0] = "Black";
-		names[1] = "Teal";
-		names[2] = "Blue";
-		names[3] = "Purple";
-		names[4] = "Pink";
-		names[5] = "Orange";
-		names[6] = "Red";
-		names[7] = "Brown";
-		names[8] = "Blue gray";
-		int[] colors = new int[9];
-		colors[0] = ContextCompat.getColor(getApplicationContext(), R.color.md_black_1000);
-		colors[1] = ContextCompat.getColor(getApplicationContext(), R.color.md_teal_700);
-		colors[2] = ContextCompat.getColor(getApplicationContext(), R.color.md_blue_700);
-		colors[3] = ContextCompat.getColor(getApplicationContext(), R.color.md_deep_purple_700);
-		colors[4] = ContextCompat.getColor(getApplicationContext(), R.color.md_pink_800);
-		colors[5] = ContextCompat.getColor(getApplicationContext(), R.color.md_deep_orange_800);
-		colors[6] = ContextCompat.getColor(getApplicationContext(), R.color.md_red_700);
-		colors[7] = ContextCompat.getColor(getApplicationContext(), R.color.md_brown_700);
-		colors[8] = ContextCompat.getColor(getApplicationContext(), R.color.md_blue_gray_700);
-		settingTheme.setData(names, names, colors);
-//		settingView.setData(names);
-		settingTheme.setOnChipCheckListener(new ChipsView.OnCheckListener() {
-			@Override
-			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
-			}
-		});
-		settingTheme.setSelected("Brown");
-		settingTheme.setTitle("Theme color");
-		settingTheme.setImageInfo(R.drawable.ic_color_lens);
-		settingTheme.setOnInfoClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
-			}
-		});
-
-		final SettingView settingStorage = findViewById(R.id.setting_storage);
-		String[] storage = new String[2];
-		storage[0] = "Public";
-		storage[1] = "Private";
-		settingStorage.setData(storage, storage);
-		settingStorage.setOnChipCheckListener(new ChipsView.OnCheckListener() {
-			@Override
-			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
-			}
-		});
-		settingStorage.setSelected("Private");
-		settingStorage.setTitle("Records storage");
-		settingStorage.setImageInfo(R.drawable.ic_folder_open);
-		settingStorage.setOnInfoClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
-			}
-		});
-
-		final SettingView settingNameFormat = findViewById(R.id.setting_name_format);
-		String[] nameFormat = new String[3];
-		nameFormat[0] = "Record-1.m4a";
-		nameFormat[1] = "127371273717.m4a";
-		nameFormat[2] = "13.04.2020 20.52.05.m4a";
-		settingNameFormat.setData(nameFormat, nameFormat);
-		settingNameFormat.setOnChipCheckListener(new ChipsView.OnCheckListener() {
-			@Override
-			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
-			}
-		});
-		settingNameFormat.setSelected("Record-1.m4a");
-		settingNameFormat.setTitle("Name format");
-		settingNameFormat.setImageInfo(R.drawable.ic_audiotrack);
-		settingNameFormat.setOnInfoClickListener(new View.OnClickListener() {
-			@Override
-			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
-			}
-		});
-
-		final SettingView settingRecFormat = findViewById(R.id.setting_recording_format);
-		String[] recFormat = new String[3];
-		recFormat[0] = "M4a";
-		recFormat[1] = "Wav";
-		recFormat[2] = "3gp";
-		settingRecFormat.setData(recFormat, recFormat);
-		settingRecFormat.setOnChipCheckListener(new ChipsView.OnCheckListener() {
+		formatSetting = findViewById(R.id.setting_recording_format);
+		final String[] formats = getResources().getStringArray(R.array.formats2);
+		final String[] formatsKeys = new String[] {
+			AppConstants.FORMAT_M4A,
+			AppConstants.FORMAT_WAV
+		};
+		formatSetting.setData(formats, formatsKeys);
+		formatSetting.setOnChipCheckListener(new ChipsView.OnCheckListener() {
 			@Override
 			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
+				presenter.setSettingRecordingFormat(key);
 			}
 		});
-		settingRecFormat.setSelected("Wav");
-		settingRecFormat.setTitle("Recording format");
-		settingRecFormat.setTitle("Recording format");
-		settingRecFormat.setImageInfo(R.drawable.ic_audiotrack);
-		settingRecFormat.setOnInfoClickListener(new View.OnClickListener() {
+		formatSetting.setTitle(R.string.recording_format);
+//		formatSetting.setImageInfo(R.drawable.ic_audiotrack);
+		formatSetting.setOnInfoClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
+				AndroidUtils.showInfoDialog(SetupActivity.this, R.string.info_format);
 			}
 		});
 
-		final SettingView settingFrequency = findViewById(R.id.setting_frequency);
-		String[] recFrequency = new String[5];
-		recFrequency[0] = "8000";
-		recFrequency[1] = "16000";
-		recFrequency[2] = "32000";
-		recFrequency[3] = "44100";
-		recFrequency[4] = "48000";
-		settingFrequency.setData(recFrequency, recFrequency);
-		settingFrequency.setOnChipCheckListener(new ChipsView.OnCheckListener() {
+		sampleRateSetting = findViewById(R.id.setting_frequency);
+		final String[] sampleRates = getResources().getStringArray(R.array.sample_rates2);
+		final String[] sampleRatesKeys = new String[] {
+				SAMPLE_RATE_8000,
+				SAMPLE_RATE_16000,
+				SAMPLE_RATE_32000,
+				SAMPLE_RATE_44100,
+				SAMPLE_RATE_48000,
+		};
+		sampleRateSetting.setData(sampleRates, sampleRatesKeys);
+		sampleRateSetting.setOnChipCheckListener(new ChipsView.OnCheckListener() {
 			@Override
 			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
+				presenter.setSettingSampleRate(keyToSampleRate(key));
 			}
 		});
-		settingFrequency.setSelected("44100");
-		settingFrequency.setTitle("Frequency");
-		settingFrequency.setImageInfo(R.drawable.ic_audiotrack);
-		settingFrequency.setOnInfoClickListener(new View.OnClickListener() {
+		sampleRateSetting.setTitle(R.string.frequency);
+//		sampleRateSetting.setImageInfo(R.drawable.ic_audiotrack);
+		sampleRateSetting.setOnInfoClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
+				AndroidUtils.showInfoDialog(SetupActivity.this, R.string.info_frequency);
 			}
 		});
 
-		final SettingView settingBitrate = findViewById(R.id.setting_bitrate);
-		String[] recBitrate = new String[5];
-		recBitrate[0] = "24 kb/s";
-		recBitrate[1] = "48 kb/s";
-		recBitrate[2] = "96 kb/s";
-		recBitrate[3] = "128 kb/s";
-		recBitrate[4] = "192 kb/s";
-		settingBitrate.setData(recBitrate, recBitrate);
-		settingBitrate.setOnChipCheckListener(new ChipsView.OnCheckListener() {
+		bitrateSetting = findViewById(R.id.setting_bitrate);
+		final String[] rates = getResources().getStringArray(R.array.bit_rates2);
+		final String[] rateKeys = new String[] {
+				BITRATE_24000,
+				BITRATE_48000,
+				BITRATE_96000,
+				BITRATE_128000,
+				BITRATE_192000,
+		};
+		bitrateSetting.setData(rates, rateKeys);
+		bitrateSetting.setOnChipCheckListener(new ChipsView.OnCheckListener() {
 			@Override
 			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
+				presenter.setSettingRecordingBitrate(keyToBitrate(key));
 			}
 		});
-		settingBitrate.setSelected("128 kb/s");
-		settingBitrate.setTitle("Bitrate");
-		settingBitrate.setImageInfo(R.drawable.ic_audiotrack);
-		settingBitrate.setOnInfoClickListener(new View.OnClickListener() {
+		bitrateSetting.setTitle(R.string.bitrate);
+//		bitrateSetting.setImageInfo(R.drawable.ic_audiotrack);
+		bitrateSetting.setOnInfoClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
+				AndroidUtils.showInfoDialog(SetupActivity.this, R.string.info_bitrate);
 			}
 		});
 
-		final SettingView settingChannels = findViewById(R.id.setting_channels);
-		String[] recChannels = new String[2];
-		recChannels[0] = "Mono";
-		recChannels[1] = "Stereo";
-		settingChannels.setData(recChannels, recChannels);
-		settingChannels.setOnChipCheckListener(new ChipsView.OnCheckListener() {
+		channelsSetting = findViewById(R.id.setting_channels);
+		final String[] recChannels = getResources().getStringArray(R.array.channels);
+		final String[] recChannelsKeys = new String[] {
+				CHANNEL_COUNT_STEREO,
+				CHANNEL_COUNT_MONO
+		};
+		channelsSetting.setData(recChannels, recChannelsKeys);
+		channelsSetting.setOnChipCheckListener(new ChipsView.OnCheckListener() {
 			@Override
 			public void onCheck(String key, String name, boolean checked) {
-				Timber.v("onCheck key = " + key + " name = " + name + " checked = " + checked);
+				presenter.setSettingChannelCount(keyToChannelCount(key));
 			}
 		});
-		settingChannels.setSelected("Stereo");
-		settingChannels.setTitle("Channels");
-		settingChannels.setImageInfo(R.drawable.ic_surround_sound_2_0);
-		settingChannels.setOnInfoClickListener(new View.OnClickListener() {
+		channelsSetting.setTitle(R.string.channels);
+//		channelsSetting.setImageInfo(R.drawable.ic_surround_sound_2_0);
+		channelsSetting.setOnInfoClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
-				AndroidUtils.showSimpleDialog(
-						SetupActivity.this,
-						R.drawable.ic_info,
-						R.string.info,
-						R.string.app_name,
-						new DialogInterface.OnClickListener() {
-							@Override
-							public void onClick(DialogInterface dialog, int which) {
-								Timber.v("onClick");
-							}
-						});
+				AndroidUtils.showInfoDialog(SetupActivity.this, R.string.info_channels);
 			}
 		});
 
@@ -379,15 +226,12 @@ public class SetupActivity extends Activity implements SetupContract.View {
 
 		initThemeColorSelector();
 		initNameFormatSelector();
-		initFormatSelector();
-		initSampleRateSelector();
-		initBitrateSelector();
 	}
 
 	private void initThemeColorSelector() {
-		final Spinner themeColor = findViewById(R.id.themeColor);
+		themeColor = findViewById(R.id.themeColor);
 		List<AppSpinnerAdapter.ThemeItem> items = new ArrayList<>();
-		String values[] = getResources().getStringArray(R.array.theme_colors);
+		String[] values = getResources().getStringArray(R.array.theme_colors2);
 		int[] colorRes = colorMap.getColorResources();
 		for (int i = 0; i < values.length; i++) {
 			items.add(new AppSpinnerAdapter.ThemeItem(values[i], getApplicationContext().getResources().getColor(colorRes[i])));
@@ -398,19 +242,22 @@ public class SetupActivity extends Activity implements SetupContract.View {
 
 		onThemeColorChangeListener = new ColorMap.OnThemeColorChangeListener() {
 			@Override
-			public void onThemeColorChange(int pos) {
+			public void onThemeColorChange(String colorKey) {
 				setTheme(colorMap.getAppThemeResource());
 				recreate();
 			}
 		};
 		colorMap.addOnThemeColorChangeListener(onThemeColorChangeListener);
 
-		if (colorMap.getSelected() > 0) {
-			themeColor.setSelection(colorMap.getSelected());
+		int selected = colorKeyToPosition(colorMap.getSelected());
+		if (selected != themeColor.getSelectedItemPosition()) {
+			themeColor.setSelection(selected);
 		}
 		themeColor.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 			@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				colorMap.updateColorMap(position);
+				String colorKey = positionToColorKey(position);
+				colorMap.updateColorMap(colorKey);
+				presenter.setSettingThemeColor(colorKey);
 			}
 			@Override public void onNothingSelected(AdapterView<?> parent) { }
 		});
@@ -419,11 +266,11 @@ public class SetupActivity extends Activity implements SetupContract.View {
 	private void initNameFormatSelector() {
 		nameFormatSelector = findViewById(R.id.name_format);
 		List<AppSpinnerAdapter.ThemeItem> items = new ArrayList<>();
-		String[] values = new String[4];
+		String[] values = new String[2];
 		values[0] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameCounted(1) + ".m4a";
 		values[1] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameDate() + ".m4a";
-		values[2] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameDateVariant() + ".m4a";
-		values[3] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameMills() + ".m4a";
+//		values[2] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameDateVariant() + ".m4a";
+//		values[3] = getResources().getString(R.string.naming) + " " + FileUtil.generateRecordNameMills() + ".m4a";
 		for (int i = 0; i < values.length; i++) {
 			items.add(new AppSpinnerAdapter.ThemeItem(values[i],
 					getApplicationContext().getResources().getColor(colorMap.getPrimaryColorRes())));
@@ -434,85 +281,28 @@ public class SetupActivity extends Activity implements SetupContract.View {
 
 		nameFormatSelector.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 			@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				if (position == 0) {
-					presenter.setNamingFormat(AppConstants.NAMING_COUNTED);
-				} else {
-					presenter.setNamingFormat(AppConstants.NAMING_DATE);
-				}
-			}
-			@Override public void onNothingSelected(AdapterView<?> parent) { }
-		});
-	}
-
-	private void initFormatSelector() {
-		formatSelector = findViewById(R.id.format);
-		List<AppSpinnerAdapter.ThemeItem> items = new ArrayList<>();
-		String[] values = getResources().getStringArray(R.array.formats);
-		for (int i = 0; i < values.length; i++) {
-			items.add(new AppSpinnerAdapter.ThemeItem(values[i],
-					getApplicationContext().getResources().getColor(colorMap.getPrimaryColorRes())));
-		}
-		AppSpinnerAdapter adapter = new AppSpinnerAdapter(SetupActivity.this,
-				R.layout.list_item_spinner, R.id.txtItem, items, R.drawable.ic_audiotrack);
-		formatSelector.setAdapter(adapter);
-
-		formatSelector.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-			@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				if (position == 0) {
-					presenter.setRecordingFormat(AppConstants.RECORDING_FORMAT_M4A);
-				} else {
-					presenter.setRecordingFormat(AppConstants.RECORDING_FORMAT_WAV);
-				}
+				presenter.setSettingNamingFormat(positionToNamingFormat(position));
 			}
 			@Override public void onNothingSelected(AdapterView<?> parent) { }
 		});
-		if (ARApplication.isRecording()) {
-			formatSelector.setEnabled(false);
-			formatSelector.setClickable(false);
-		}
 	}
 
-	private void initSampleRateSelector() {
-		sampleRateSelector = findViewById(R.id.sample_rate);
-		List<AppSpinnerAdapter.ThemeItem> items = new ArrayList<>();
-		String[] values = getResources().getStringArray(R.array.sample_rates);
-		for (int i = 0; i < values.length; i++) {
-			items.add(new AppSpinnerAdapter.ThemeItem(values[i],
-					getApplicationContext().getResources().getColor(colorMap.getPrimaryColorRes())));
-		}
-		AppSpinnerAdapter adapter = new AppSpinnerAdapter(SetupActivity.this,
-				R.layout.list_item_spinner, R.id.txtItem, items, R.drawable.ic_audiotrack);
-		sampleRateSelector.setAdapter(adapter);
-
-		sampleRateSelector.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-			@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				presenter.setSampleRate(position);
-			}
-			@Override public void onNothingSelected(AdapterView<?> parent) { }
-		});
-	}
-
-	private void initBitrateSelector() {
-		bitrateSelector = findViewById(R.id.bit_rate);
-		List<AppSpinnerAdapter.ThemeItem> items3 = new ArrayList<>();
-		String[] values3 = getResources().getStringArray(R.array.bit_rates);
-		for (int i = 0; i < values3.length; i++) {
-			items3.add(new AppSpinnerAdapter.ThemeItem(values3[i],
-					getApplicationContext().getResources().getColor(colorMap.getPrimaryColorRes())));
+	@Override
+	public void onClick(View v) {
+		switch (v.getId()) {
+			case R.id.btn_apply:
+				presenter.executeFirstRun();
+				startActivity(MainActivity.getStartIntent(getApplicationContext()));
+				finish();
+				break;
+			case R.id.btn_reset:
+				presenter.resetSettings();
+				presenter.loadSettings();
+				break;
+			case R.id.btn_back:
+				finish();
+				break;
 		}
-		AppSpinnerAdapter adapter3 = new AppSpinnerAdapter(SetupActivity.this,
-				R.layout.list_item_spinner, R.id.txtItem, items3, R.drawable.ic_audiotrack);
-		bitrateSelector.setAdapter(adapter3);
-
-		bitrateSelector.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-			@Override
-			public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-				presenter.setRecordingBitrate(position);
-			}
-			@Override
-			public void onNothingSelected(AdapterView<?> parent) {
-			}
-		});
 	}
 
 	@Override
@@ -543,67 +333,43 @@ public class SetupActivity extends Activity implements SetupContract.View {
 	}
 
 	@Override
-	public void showStoreInPublicDir(boolean b) {
-		swPublicDir.setOnCheckedChangeListener(null);
-		swPublicDir.setChecked(b);
-		swPublicDir.setOnCheckedChangeListener(publicDirListener);
-	}
-
-	@Override
-	public void showRecordInStereo(boolean b) {
-		swRecordInStereo.setChecked(b);
+	public void showRecordingBitrate(int bitrate) {
+		bitrateSetting.setSelected(bitrateToKey(bitrate));
 	}
 
 	@Override
-	public void showRecordingBitrate(int bitrate) {
-		bitrateSelector.setSelection(bitrate);
+	public void showSampleRate(int rate) {
+		sampleRateSetting.setSelected(sampleRateToKey(rate));
 	}
 
 	@Override
-	public void showRecordingSampleRate(int rate) {
-		sampleRateSelector.setSelection(rate);
+	public void showChannelCount(int count) {
+		channelsSetting.setSelected(channelCountToKey(count));
 	}
 
 	@Override
-	public void showRecordingFormat(int format) {
-		formatSelector.setSelection(format);
+	public void showNamingFormat(String namingKey) {
+		nameFormatSelector.setSelection(namingFormatToPosition(namingKey));
 	}
 
 	@Override
-	public void showNamingFormat(int format) {
-		nameFormatSelector.setSelection(format);
+	public void showRecordingFormat(String formatKey) {
+		formatSetting.setSelected(formatKey);
 	}
 
 	@Override
 	public void showBitrateSelector() {
-//		bitrateSelector.setVisibility(View.VISIBLE);
+		bitrateSetting.setVisibility(View.VISIBLE);
 	}
 
 	@Override
 	public void hideBitrateSelector() {
-		bitrateSelector.setVisibility(View.GONE);
+		bitrateSetting.setVisibility(View.GONE);
 	}
 
 	@Override
-	public void showDialogPublicDirInfo() {
-		AndroidUtils.showDialog(this, R.string.warning, R.string.public_dir_warning,
-				new View.OnClickListener() {
-					@Override
-					public void onClick(View v) {
-					}
-				}, null
-		);
-	}
-
-	@Override
-	public void showDialogPrivateDirInfo() {
-		AndroidUtils.showDialog(this, R.string.warning, R.string.private_dir_warning,
-				new View.OnClickListener() {
-					@Override
-					public void onClick(View v) {
-					}
-				}, null
-		);
+	public void showInformation(int infoResId) {
+		txtInformation.setText(infoResId);
 	}
 
 	@Override
@@ -628,4 +394,161 @@ public class SetupActivity extends Activity implements SetupContract.View {
 	public void showMessage(int resId) {
 		Toast.makeText(getApplicationContext(), resId, Toast.LENGTH_LONG).show();
 	}
+
+	private String positionToColorKey(int position) {
+		switch (position) {
+			case 0:
+				return AppConstants.THEME_BLUE_GREY;
+			case 1:
+				return AppConstants.THEME_BLACK;
+			case 2:
+				return AppConstants.THEME_TEAL;
+			case 3:
+				return AppConstants.THEME_BLUE;
+			case 4:
+				return AppConstants.THEME_PURPLE;
+			case 5:
+				return AppConstants.THEME_PINK;
+			case 6:
+				return AppConstants.THEME_ORANGE;
+			case 7:
+				return AppConstants.THEME_RED;
+			case 8:
+				return AppConstants.THEME_BROWN;
+			default:
+				return AppConstants.DEFAULT_THEME_COLOR;
+		}
+	}
+
+	private int colorKeyToPosition(String colorKey) {
+		switch (colorKey) {
+			default:
+			case AppConstants.THEME_BLUE_GREY:
+				return 0;
+			case AppConstants.THEME_BLACK:
+				return 1;
+			case AppConstants.THEME_TEAL:
+				return 2;
+			case AppConstants.THEME_BLUE:
+				return 3;
+			case AppConstants.THEME_PURPLE:
+				return 4;
+			case AppConstants.THEME_PINK:
+				return 5;
+			case AppConstants.THEME_ORANGE:
+				return 6;
+			case AppConstants.THEME_RED:
+				return 7;
+			case AppConstants.THEME_BROWN:
+				return 8;
+		}
+	}
+
+	private int namingFormatToPosition(String namingFormat) {
+		switch (namingFormat) {
+			case AppConstants.NAME_FORMAT_DATE:
+				return 1;
+			case AppConstants.NAME_FORMAT_RECORD:
+			default:
+				return 0;
+		}
+	}
+
+	private String positionToNamingFormat(int position) {
+		switch (position) {
+			case 1:
+				return AppConstants.NAME_FORMAT_DATE;
+			case 0:
+				return AppConstants.NAME_FORMAT_RECORD;
+			default:
+				return AppConstants.DEFAULT_NAME_FORMAT;
+		}
+	}
+
+	private int keyToSampleRate(String sampleRateKey) {
+		switch (sampleRateKey) {
+			case SAMPLE_RATE_8000:
+				return AppConstants.RECORD_SAMPLE_RATE_8000;
+			case SAMPLE_RATE_16000:
+				return AppConstants.RECORD_SAMPLE_RATE_16000;
+			case SAMPLE_RATE_32000:
+				return AppConstants.RECORD_SAMPLE_RATE_32000;
+			case SAMPLE_RATE_44100:
+				return AppConstants.RECORD_SAMPLE_RATE_44100;
+			case SAMPLE_RATE_48000:
+				return AppConstants.RECORD_SAMPLE_RATE_48000;
+			default:
+				return AppConstants.DEFAULT_RECORD_SAMPLE_RATE;
+		}
+	}
+
+	private String sampleRateToKey(int sampleRate) {
+		switch (sampleRate) {
+			case AppConstants.RECORD_SAMPLE_RATE_8000:
+				return SAMPLE_RATE_8000;
+			case AppConstants.RECORD_SAMPLE_RATE_16000:
+				return SAMPLE_RATE_16000;
+			case AppConstants.RECORD_SAMPLE_RATE_32000:
+				return SAMPLE_RATE_32000;
+			case AppConstants.RECORD_SAMPLE_RATE_44100:
+			default:
+				return SAMPLE_RATE_44100;
+			case AppConstants.RECORD_SAMPLE_RATE_48000:
+				return SAMPLE_RATE_48000;
+		}
+	}
+
+	private int keyToBitrate(String bitrateKey) {
+		switch (bitrateKey) {
+			case BITRATE_24000:
+				return AppConstants.RECORD_ENCODING_BITRATE_24000;
+			case BITRATE_48000:
+				return AppConstants.RECORD_ENCODING_BITRATE_48000;
+			case BITRATE_96000:
+				return AppConstants.RECORD_ENCODING_BITRATE_96000;
+			case BITRATE_128000:
+				return AppConstants.RECORD_ENCODING_BITRATE_128000;
+			case BITRATE_192000:
+				return AppConstants.RECORD_ENCODING_BITRATE_192000;
+			default:
+				return AppConstants.DEFAULT_RECORD_ENCODING_BITRATE;
+		}
+	}
+
+	private String bitrateToKey(int bitrate) {
+		switch (bitrate) {
+			case AppConstants.RECORD_ENCODING_BITRATE_24000:
+				return BITRATE_24000;
+			case AppConstants.RECORD_ENCODING_BITRATE_48000:
+				return BITRATE_48000;
+			case AppConstants.RECORD_ENCODING_BITRATE_96000:
+				return BITRATE_96000;
+			case AppConstants.RECORD_ENCODING_BITRATE_128000:
+			default:
+				return BITRATE_128000;
+			case AppConstants.RECORD_ENCODING_BITRATE_192000:
+				return BITRATE_192000;
+		}
+	}
+
+	private int keyToChannelCount(String key) {
+		switch (key) {
+			case CHANNEL_COUNT_MONO:
+				return AppConstants.RECORD_AUDIO_MONO;
+			case CHANNEL_COUNT_STEREO:
+				return AppConstants.RECORD_AUDIO_STEREO;
+			default:
+				return AppConstants.DEFAULT_CHANNEL_COUNT;
+		}
+	}
+
+	private String channelCountToKey(int count) {
+		switch (count) {
+			case AppConstants.RECORD_AUDIO_MONO:
+				return CHANNEL_COUNT_MONO;
+			case AppConstants.RECORD_AUDIO_STEREO:
+			default:
+				return CHANNEL_COUNT_STEREO;
+		}
+	}
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupContract.java b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupContract.java
index f4c8309..55692d7 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupContract.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupContract.java
@@ -22,43 +22,43 @@ public class SetupContract {
 
 	interface View extends Contract.View {
 
-		void showStoreInPublicDir(boolean b);
-
-		void showRecordInStereo(boolean b);
-
 		void showRecordingBitrate(int bitrate);
 
-		void showRecordingSampleRate(int rate);
+		void showSampleRate(int rate);
 
-		void showRecordingFormat(int format);
+		void showChannelCount(int count);
 
-		void showNamingFormat(int format);
+		void showNamingFormat(String namingKey);
+
+		void showRecordingFormat(String formatKey);
 
 		void showBitrateSelector();
 
 		void hideBitrateSelector();
 
-		void showDialogPublicDirInfo();
-
-		void showDialogPrivateDirInfo();
+		void showInformation(int infoResId);
 	}
 
 	public interface UserActionsListener extends Contract.UserActionsListener<SetupContract.View> {
 
 		void loadSettings();
 
-		void storeInPublicDir(boolean b);
+		void setSampleRate(int rate);
 
-		void recordInStereo(boolean stereo);
+		void setSettingRecordingBitrate(int bitrate);
 
-		void setRecordingBitrate(int bitrate);
+		void setSettingSampleRate(int rate);
 
-		void setRecordingFormat(int format);
+		void setSettingChannelCount(int count);
 
-		void setNamingFormat(int format);
+		void setSettingThemeColor(String colorKey);
 
-		void setSampleRate(int rate);
+		void setSettingNamingFormat(String namingKey);
+
+		void setSettingRecordingFormat(String formatKey);
 
 		void executeFirstRun();
+
+		void resetSettings();
 	}
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupPresenter.java b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupPresenter.java
index 817fb9d..e37bc69 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupPresenter.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/setup/SetupPresenter.java
@@ -18,8 +18,8 @@ package com.dimowner.audiorecorder.app.setup;
 
 import com.dimowner.audiorecorder.AppConstants;
 import com.dimowner.audiorecorder.BackgroundQueue;
+import com.dimowner.audiorecorder.R;
 import com.dimowner.audiorecorder.data.Prefs;
-import com.dimowner.audiorecorder.util.AndroidUtils;
 
 public class SetupPresenter implements SetupContract.UserActionsListener {
 
@@ -36,151 +36,68 @@ public class SetupPresenter implements SetupContract.UserActionsListener {
 	@Override
 	public void loadSettings() {
 		if (view != null) {
-			view.showProgress();
+			view.showChannelCount(prefs.getRecordChannelCount());
+			String recordingFormatKey = prefs.getSettingRecordingFormat();
+			view.showRecordingFormat(recordingFormatKey);
+			updateRecordingFormat(recordingFormatKey);
+			view.showNamingFormat(prefs.getSettingNamingFormat());
+			view.showRecordingBitrate(prefs.getSettingBitrate());
+			view.showSampleRate(prefs.getSettingSampleRate());
 		}
-		loadingTasks.postRunnable(new Runnable() {
-			@Override
-			public void run() {
-				AndroidUtils.runOnUIThread(new Runnable() {
-					@Override public void run() {
-						if (view != null) {
-							view.hideProgress();
-						}
-					}
-				});
-			}
-		});
-		if (view != null) {
-			view.showStoreInPublicDir(prefs.isStoreDirPublic());
-			view.showRecordInStereo(prefs.getRecordChannelCount() == AppConstants.RECORD_AUDIO_STEREO);
-			int format = prefs.getFormat();
-			view.showRecordingFormat(format);
-			if (format == AppConstants.RECORDING_FORMAT_WAV) {
-				view.hideBitrateSelector();
-			} else {
-				view.showBitrateSelector();
-			}
-			view.showNamingFormat(prefs.getNamingFormat());
-		}
-
-
-		int pos;
-		switch (prefs.getSampleRate()) {
-			case AppConstants.RECORD_SAMPLE_RATE_8000:
-				pos = 0;
-				break;
-			case AppConstants.RECORD_SAMPLE_RATE_16000:
-				pos = 1;
-				break;
-			case AppConstants.RECORD_SAMPLE_RATE_32000:
-				pos = 2;
-				break;
-			case AppConstants.RECORD_SAMPLE_RATE_48000:
-				pos = 4;
-				break;
-			case AppConstants.RECORD_SAMPLE_RATE_44100:
-			default:
-				pos = 3;
-		}
-		if (view != null) {
-			view.showRecordingSampleRate(pos);
-		}
-
-		switch (prefs.getBitrate()) {
-			case AppConstants.RECORD_ENCODING_BITRATE_24000:
-				pos = 0;
-				break;
-			case AppConstants.RECORD_ENCODING_BITRATE_48000:
-			default:
-				pos = 1;
-				break;
-			case AppConstants.RECORD_ENCODING_BITRATE_96000:
-				pos = 2;
-				break;
-			case AppConstants.RECORD_ENCODING_BITRATE_128000:
-				pos = 3;
-				break;
-			case AppConstants.RECORD_ENCODING_BITRATE_192000:
-				pos = 4;
-				break;
-		}
-		if (view != null) {
-			view.showRecordingBitrate(pos);
-		}
-	}
-
-	@Override
-	public void storeInPublicDir(boolean b) {
-		prefs.setStoreDirPublic(b);
 	}
 
 	@Override
-	public void recordInStereo(boolean stereo) {
-		prefs.setRecordInStereo(stereo);
+	public void setSettingRecordingBitrate(int bitrate) {
+		prefs.setSettingBitrate(bitrate);
 	}
 
 	@Override
-	public void setRecordingBitrate(int pos) {
+	public void setSampleRate(int pos) {
 		int rate;
 		switch (pos) {
 			case 0:
-				rate = AppConstants.RECORD_ENCODING_BITRATE_24000;
+				rate = AppConstants.RECORD_SAMPLE_RATE_8000;
 				break;
 			case 1:
-			default:
-				rate = AppConstants.RECORD_ENCODING_BITRATE_48000;
+				rate = AppConstants.RECORD_SAMPLE_RATE_16000;
 				break;
 			case 2:
-				rate = AppConstants.RECORD_ENCODING_BITRATE_96000;
-				break;
-			case 3:
-				rate = AppConstants.RECORD_ENCODING_BITRATE_128000;
+				rate = AppConstants.RECORD_SAMPLE_RATE_32000;
 				break;
 			case 4:
-				rate = AppConstants.RECORD_ENCODING_BITRATE_192000;
+				rate = AppConstants.RECORD_SAMPLE_RATE_48000;
 				break;
+			case 3:
+			default:
+				rate = AppConstants.RECORD_SAMPLE_RATE_44100;
 		}
-		prefs.setBitrate(rate);
+		prefs.setSettingSampleRate(rate);
 	}
 
 	@Override
-	public void setRecordingFormat(int format) {
-		prefs.setFormat(format);
-		if (view != null) {
-			if (format == AppConstants.RECORDING_FORMAT_WAV) {
-				view.hideBitrateSelector();
-			} else {
-				view.showBitrateSelector();
-			}
-		}
+	public void setSettingSampleRate(int rate) {
+		prefs.setSettingSampleRate(rate);
 	}
 
 	@Override
-	public void setNamingFormat(int format) {
-		prefs.setNamingFormat(format);
+	public void setSettingChannelCount(int count) {
+		prefs.setSettingChannelCount(count);
 	}
 
 	@Override
-	public void setSampleRate(int pos) {
-		int rate;
-		switch (pos) {
-			case 0:
-				rate = AppConstants.RECORD_SAMPLE_RATE_8000;
-				break;
-			case 1:
-				rate = AppConstants.RECORD_SAMPLE_RATE_16000;
-				break;
-			case 2:
-				rate = AppConstants.RECORD_SAMPLE_RATE_32000;
-				break;
-			case 4:
-				rate = AppConstants.RECORD_SAMPLE_RATE_48000;
-				break;
-			case 3:
-			default:
-				rate = AppConstants.RECORD_SAMPLE_RATE_44100;
-		}
-		prefs.setSampleRate(rate);
+	public void setSettingThemeColor(String colorKey) {
+		prefs.setSettingThemeColor(colorKey);
+	}
+
+	@Override
+	public void setSettingNamingFormat(String namingKey) {
+		prefs.setSettingNamingFormat(namingKey);
+	}
+
+	@Override
+	public void setSettingRecordingFormat(String formatKey) {
+		prefs.setSettingRecordingFormat(formatKey);
+		updateRecordingFormat(formatKey);
 	}
 
 	@Override
@@ -190,6 +107,11 @@ public class SetupPresenter implements SetupContract.UserActionsListener {
 		}
 	}
 
+	@Override
+	public void resetSettings() {
+		prefs.resetSettings();
+	}
+
 	@Override
 	public void bindView(SetupContract.View view) {
 		this.view = view;
@@ -208,4 +130,18 @@ public class SetupPresenter implements SetupContract.UserActionsListener {
 			unbindView();
 		}
 	}
+
+	private void updateRecordingFormat(String formatKey) {
+		switch (formatKey) {
+			case AppConstants.FORMAT_WAV:
+				view.hideBitrateSelector();
+				view.showInformation(R.string.info_wav);
+				break;
+			case AppConstants.FORMAT_M4A:
+				view.showInformation(R.string.info_m4a);
+			case AppConstants.FORMAT_3GP:
+			default:
+				view.showBitrateSelector();
+		}
+	}
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/widget/ChipsView.java b/app/src/main/java/com/dimowner/audiorecorder/app/widget/ChipsView.java
index a11c699..a3c76de 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/widget/ChipsView.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/widget/ChipsView.java
@@ -19,7 +19,6 @@ package com.dimowner.audiorecorder.app.widget;
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.graphics.Color;
-import android.graphics.Rect;
 import android.graphics.Typeface;
 import android.os.Build;
 import android.util.AttributeSet;
@@ -39,7 +38,6 @@ import java.util.Collections;
 import java.util.List;
 
 import androidx.core.content.ContextCompat;
-import timber.log.Timber;
 
 /**
  * Created on 06.04.2020.
@@ -62,6 +60,8 @@ public class ChipsView extends FrameLayout {
 	private int chipMargin;
 	private int rowCount = 0;
 	private float posY = 0;
+	private boolean orderEffective = true;
+	private boolean multiSelect = true;
 
 	{
 		float DENSITY = AndroidUtils.getDisplayDensity();
@@ -100,6 +100,8 @@ public class ChipsView extends FrameLayout {
 		// Load attributes
 		final TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.ChipsView, defStyleAttr, 0);
 		try {
+			orderEffective = a.getBoolean(R.styleable.ChipsView_orderEffective, orderEffective);
+			multiSelect = a.getBoolean(R.styleable.ChipsView_multiSelect, multiSelect);
 			chipColor = a.getColor(R.styleable.ChipsView_chipColor, chipColor);
 			rippleColor = a.getColor(R.styleable.ChipsView_rippleColor, rippleColor);
 			borderColor = a.getColor(R.styleable.ChipsView_borderColor, borderColor);
@@ -123,6 +125,17 @@ public class ChipsView extends FrameLayout {
 		WIDTH = getWidth() - getPaddingStart() - getPaddingEnd();
 	}
 
+	@Override
+	public void setVisibility(int visibility) {
+		super.setVisibility(visibility);
+		post(new Runnable() {
+			@Override
+			public void run() {
+				updateChipPositions();
+			}
+		});
+	}
+
 	public TextView createChipView(int id, final String key, final Context context, final String name, final int color, boolean checked) {
 		final TextView textView = new TextView(context);
 		LayoutParams  lp = new LayoutParams(LayoutParams.WRAP_CONTENT, (int) ROW_HEIGHT);
@@ -142,18 +155,20 @@ public class ChipsView extends FrameLayout {
 		textView.setOnClickListener(new OnClickListener() {
 			@Override
 			public void onClick(View v) {
-//				int pos = findById(v.getId());
-				Timber.v("onClick key = " + key);
 				int pos = findById(key);
 				if (pos >= 0) {
 					if (chips.get(pos).isSelected()) {
-						setUnselected(chips.get(pos).getView(), color);
-						if (listener != null) {
-							listener.onCheck(key, name, false);
+						if (multiSelect) {
+							setUnselected(chips.get(pos).getView(), color);
+							if (listener != null) {
+								listener.onCheck(key, name, false);
+							}
 						}
 					} else {
 						setSelected(context, chips.get(pos).getView(), color);
-						unselectAll(pos);
+						if (!multiSelect) {
+							unselectAll(pos);
+						}
 						if (listener != null) {
 							listener.onCheck(key, name, true);
 						}
@@ -168,6 +183,9 @@ public class ChipsView extends FrameLayout {
 	public void setSelected(String key) {
 		int pos = findById(key);
 		if (pos >= 0) {
+			if (!multiSelect) {
+				unselectAll(pos);
+			}
 			setSelected(getContext(), chips.get(pos).getView(), chips.get(pos).getColor());
 			chips.get(pos).setSelected(true);
 		}
@@ -239,7 +257,7 @@ public class ChipsView extends FrameLayout {
 
 	private void updateChipPositions() {
 		//Calculate chips sizes.
-		Rect rect = new Rect();
+//		Rect rect = new Rect();
 		Chip chip;
 		for (int i = 0; i < chips.size(); i++) {
 			chip = chips.get(i);
@@ -250,11 +268,19 @@ public class ChipsView extends FrameLayout {
 
 			chips.set(i, chip);
 		}
-		Collections.sort(chips);
+		if (orderEffective) {
+			Collections.sort(chips);
+		}
 
+		rowCount = 0;
+		posY = 0;
 		if (chips.size() > 0 && WIDTH >= chips.get(0).getWidth()) {
 			List<Chip> temp = new ArrayList<>(chips);
-			calculatePositions(temp);
+			if (orderEffective) {
+				calculatePositions(temp);
+			} else {
+				calculatePositionsDefault(temp);
+			}
 
 			for (int i = 0; i < chips.size(); i++) {
 				chips.get(i).getView().setTranslationX(chips.get(i).getPosX());
@@ -266,6 +292,29 @@ public class ChipsView extends FrameLayout {
 		setLayoutParams(lp);
 	}
 
+	private void calculatePositionsDefault(List<Chip> temp) {
+		float posX = 0;
+		rowCount++;
+		if (temp.size() > 0) {
+			float availableWidth = WIDTH;
+			for (int i = 0; i < temp.size(); i++) {
+				if (availableWidth < temp.get(i).getWidth()) {
+					rowCount++;
+					posY += ROW_HEIGHT + chipMargin;
+					availableWidth = WIDTH;
+					posX = 0;
+				}
+				chips.get(i).setPosX(posX);
+				chips.get(i).setPosY(posY);
+
+				float width = temp.get(i).getWidth() + chipMargin;
+				posX += width;
+				availableWidth -= width;
+			}
+			posY += ROW_HEIGHT + chipMargin;
+		}
+	}
+
 	private void calculatePositions(List<Chip> temp) {
 		float posX = 0;
 		rowCount++;
diff --git a/app/src/main/java/com/dimowner/audiorecorder/app/widget/SettingView.java b/app/src/main/java/com/dimowner/audiorecorder/app/widget/SettingView.java
index b8259cb..2ffb459 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/app/widget/SettingView.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/app/widget/SettingView.java
@@ -54,6 +54,12 @@ public class SettingView extends LinearLayout {
 		imgInfo = findViewById(R.id.setting_image);
 	}
 
+	@Override
+	public void setVisibility(int visibility) {
+		super.setVisibility(visibility);
+		chipsView.setVisibility(visibility);
+	}
+
 	public void setData(String[] names, String[] keys, int[] colors) {
 		chipsView.setData(names, keys, colors);
 	}
@@ -74,6 +80,10 @@ public class SettingView extends LinearLayout {
 		txtTitle.setText(title);
 	}
 
+	public void setTitle(int resId) {
+		txtTitle.setText(resId);
+	}
+
 	public void setImageInfo(int imgRes) {
 		imgInfo.setImageResource(imgRes);
 	}
diff --git a/app/src/main/java/com/dimowner/audiorecorder/data/FileRepositoryImpl.java b/app/src/main/java/com/dimowner/audiorecorder/data/FileRepositoryImpl.java
index 41590d8..3ced5a7 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/data/FileRepositoryImpl.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/data/FileRepositoryImpl.java
@@ -169,7 +169,7 @@ public class FileRepositoryImpl implements FileRepository {
 			space = FileUtil.getAvailableInternalMemorySize(context);
 		}
 
-		final long time = spaceToTimeSecs(space, prefs.getFormat(), prefs.getSampleRate(), prefs.getRecordChannelCount());
+		final long time = spaceToTimeSecs(space, prefs.getFormat(), prefs.getSettingSampleRate(), prefs.getRecordChannelCount());
 		return time > AppConstants.MIN_REMAIN_RECORDING_TIME;
 	}
 
diff --git a/app/src/main/java/com/dimowner/audiorecorder/data/Prefs.java b/app/src/main/java/com/dimowner/audiorecorder/data/Prefs.java
index 996668a..d853503 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/data/Prefs.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/data/Prefs.java
@@ -34,9 +34,6 @@ public interface Prefs {
 	long getRecordCounter();
 	void incrementRecordCounter();
 
-	void setAppThemeColor(int colorMapPosition);
-	int getThemeColor();
-
 	void setRecordInStereo(boolean stereo);
 	int getRecordChannelCount();
 
@@ -46,15 +43,32 @@ public interface Prefs {
 	void setFormat(int f);
 	int getFormat();
 
-	void setBitrate(int q);
-	int getBitrate();
-
-	void setSampleRate(int rate);
-	int getSampleRate();
-
 	void setRecordOrder(int order);
 	int getRecordsOrder();
 
 	void setNamingFormat(int format);
 	int getNamingFormat();
+
+	void isMigratedSettings();
+	void migrateSettings();
+
+	void setSettingThemeColor(String colorKey);
+	String getSettingThemeColor();
+
+	void setSettingNamingFormat(String nameKay);
+	String getSettingNamingFormat();
+
+	void setSettingRecordingFormat(String formatKey);
+	String getSettingRecordingFormat();
+
+	void setSettingSampleRate(int sampleRate);
+	int getSettingSampleRate();
+
+	void setSettingBitrate(int rate);
+	int getSettingBitrate();
+
+	void setSettingChannelCount(int count);
+	int getSettingChannelCount();
+
+	void resetSettings();
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/data/PrefsImpl.java b/app/src/main/java/com/dimowner/audiorecorder/data/PrefsImpl.java
index a97223b..f22448b 100644
--- a/app/src/main/java/com/dimowner/audiorecorder/data/PrefsImpl.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/data/PrefsImpl.java
@@ -29,6 +29,7 @@ public class PrefsImpl implements Prefs {
 	private static final String PREF_NAME = "com.dimowner.audiorecorder.data.PrefsImpl";
 
 	private static final String PREF_KEY_IS_FIRST_RUN = "is_first_run";
+	private static final String PREF_KEY_IS_MIGRATED = "is_migrated";
 	private static final String PREF_KEY_IS_STORE_DIR_PUBLIC = "is_store_dir_public";
 	private static final String PREF_KEY_IS_ASK_TO_RENAME_AFTER_STOP_RECORDING = "is_ask_rename_after_stop_recording";
 	private static final String PREF_KEY_ACTIVE_RECORD = "active_record";
@@ -44,6 +45,13 @@ public class PrefsImpl implements Prefs {
 	//Recording prefs.
 	private static final String PREF_KEY_RECORD_CHANNEL_COUNT = "record_channel_count";
 
+	private static final String PREF_KEY_SETTING_THEME_COLOR = "setting_theme_color";
+	private static final String PREF_KEY_SETTING_RECORDING_FORMAT = "setting_recording_format";
+	private static final String PREF_KEY_SETTING_BITRATE = "setting_bitrate";
+	private static final String PREF_KEY_SETTING_SAMPLE_RATE = "setting_sample_rate";
+	private static final String PREF_KEY_SETTING_NAMING_FORMAT = "setting_naming_format";
+	private static final String PREF_KEY_SETTING_CHANNEL_COUNT = "setting_channel_count";
+
 	private SharedPreferences sharedPreferences;
 
 	private volatile static PrefsImpl instance;
@@ -73,6 +81,7 @@ public class PrefsImpl implements Prefs {
 		SharedPreferences.Editor editor = sharedPreferences.edit();
 		editor.putBoolean(PREF_KEY_IS_FIRST_RUN, false);
 		editor.putBoolean(PREF_KEY_IS_STORE_DIR_PUBLIC, true);
+		editor.putBoolean(PREF_KEY_IS_MIGRATED, true);
 		editor.apply();
 //		setStoreDirPublic(true);
 	}
@@ -130,15 +139,7 @@ public class PrefsImpl implements Prefs {
 		editor.apply();
 	}
 
-	@Override
-	public void setAppThemeColor(int colorMapPosition) {
-		SharedPreferences.Editor editor = sharedPreferences.edit();
-		editor.putInt(PREF_KEY_THEME_COLORMAP_POSITION, colorMapPosition);
-		editor.apply();
-	}
-
-	@Override
-	public int getThemeColor() {
+	private int getThemeColor() {
 		return sharedPreferences.getInt(PREF_KEY_THEME_COLORMAP_POSITION, 0);
 	}
 
@@ -178,51 +179,201 @@ public class PrefsImpl implements Prefs {
 		return sharedPreferences.getInt(PREF_KEY_FORMAT, AppConstants.RECORDING_FORMAT_M4A);
 	}
 
+	private int getBitrate() {
+		return sharedPreferences.getInt(PREF_KEY_BITRATE, AppConstants.RECORD_ENCODING_BITRATE_128000);
+	}
+
+	private int getSampleRate() {
+		return sharedPreferences.getInt(PREF_KEY_SAMPLE_RATE, AppConstants.RECORD_SAMPLE_RATE_44100);
+	}
+
 	@Override
-	public void setBitrate(int q) {
+	public void setRecordOrder(int order) {
 		SharedPreferences.Editor editor = sharedPreferences.edit();
-		editor.putInt(PREF_KEY_BITRATE, q);
+		editor.putInt(PREF_KEY_RECORDS_ORDER, order);
 		editor.apply();
 	}
 
 	@Override
-	public int getBitrate() {
-		return sharedPreferences.getInt(PREF_KEY_BITRATE, AppConstants.RECORD_ENCODING_BITRATE_128000);
+	public int getRecordsOrder() {
+		return sharedPreferences.getInt(PREF_KEY_RECORDS_ORDER, AppConstants.SORT_DATE);
 	}
 
 	@Override
-	public void setSampleRate(int rate) {
+	public void setNamingFormat(int format) {
 		SharedPreferences.Editor editor = sharedPreferences.edit();
-		editor.putInt(PREF_KEY_SAMPLE_RATE, rate);
+		editor.putInt(PREF_KEY_NAMING_FORMAT, format);
 		editor.apply();
 	}
 
 	@Override
-	public int getSampleRate() {
-		return sharedPreferences.getInt(PREF_KEY_SAMPLE_RATE, AppConstants.RECORD_SAMPLE_RATE_44100);
+	public int getNamingFormat() {
+		return sharedPreferences.getInt(PREF_KEY_NAMING_FORMAT, AppConstants.NAMING_COUNTED);
 	}
 
 	@Override
-	public void setRecordOrder(int order) {
+	public void isMigratedSettings() {
+
+	}
+
+	@Override
+	public void migrateSettings() {
+		int color = getThemeColor();
+		int nameFormat = getNamingFormat();
+		int recordingFormat = getFormat();
+		int sampleRate = getSampleRate();
+		int bitrate = getBitrate();
+		int channelCount = getRecordChannelCount();
+
+		String colorKey;
+		switch (color) {
+			case 1:
+				colorKey = AppConstants.THEME_BLACK;
+				break;
+			case 2:
+				colorKey = AppConstants.THEME_TEAL;
+				break;
+			case 3:
+				colorKey = AppConstants.THEME_BLUE;
+				break;
+			case 4:
+				colorKey = AppConstants.THEME_PURPLE;
+				break;
+			case 5:
+				colorKey = AppConstants.THEME_PINK;
+				break;
+			case 6:
+				colorKey = AppConstants.THEME_ORANGE;
+				break;
+			case 7:
+				colorKey = AppConstants.THEME_RED;
+				break;
+			case 8:
+				colorKey = AppConstants.THEME_BROWN;
+				break;
+			case 0:
+			case 9:
+				colorKey = AppConstants.THEME_BLUE_GREY;
+				break;
+			default:
+				colorKey = AppConstants.DEFAULT_THEME_COLOR;
+		}
+
+		String recordingFormatKey;
+		switch (recordingFormat) {
+			case AppConstants.RECORDING_FORMAT_WAV:
+				recordingFormatKey = AppConstants.FORMAT_WAV;
+				break;
+			case AppConstants.RECORDING_FORMAT_M4A:
+				recordingFormatKey = AppConstants.FORMAT_M4A;
+				break;
+			default:
+				recordingFormatKey = AppConstants.DEFAULT_RECORDING_FORMAT;
+		}
+		String namingFormatKey;
+		switch (nameFormat) {
+			case AppConstants.NAMING_DATE:
+				namingFormatKey = AppConstants.NAME_FORMAT_DATE;
+				break;
+			case AppConstants.NAMING_COUNTED:
+				namingFormatKey = AppConstants.NAME_FORMAT_RECORD;
+				break;
+			default:
+				namingFormatKey = AppConstants.DEFAULT_NAME_FORMAT;
+		}
+
 		SharedPreferences.Editor editor = sharedPreferences.edit();
-		editor.putInt(PREF_KEY_RECORDS_ORDER, order);
+		editor.putString(PREF_KEY_SETTING_THEME_COLOR, colorKey);
+		editor.putString(PREF_KEY_SETTING_NAMING_FORMAT, namingFormatKey);
+		editor.putString(PREF_KEY_SETTING_RECORDING_FORMAT, recordingFormatKey);
+		editor.putInt(PREF_KEY_SETTING_SAMPLE_RATE, sampleRate);
+		editor.putInt(PREF_KEY_SETTING_BITRATE, bitrate);
+		editor.putInt(PREF_KEY_SETTING_CHANNEL_COUNT, channelCount);
+		editor.putBoolean(PREF_KEY_IS_MIGRATED, true);
 		editor.apply();
 	}
 
 	@Override
-	public int getRecordsOrder() {
-		return sharedPreferences.getInt(PREF_KEY_RECORDS_ORDER, AppConstants.SORT_DATE);
+	public void setSettingThemeColor(String colorKey) {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+		editor.putString(PREF_KEY_SETTING_THEME_COLOR, colorKey);
+		editor.apply();
 	}
 
 	@Override
-	public void setNamingFormat(int format) {
+	public String getSettingThemeColor() {
+		return sharedPreferences.getString(PREF_KEY_SETTING_THEME_COLOR, AppConstants.DEFAULT_THEME_COLOR);
+	}
+
+	@Override
+	public void setSettingNamingFormat(String nameKey) {
 		SharedPreferences.Editor editor = sharedPreferences.edit();
-		editor.putInt(PREF_KEY_NAMING_FORMAT, format);
+		editor.putString(PREF_KEY_SETTING_NAMING_FORMAT, nameKey);
 		editor.apply();
 	}
 
 	@Override
-	public int getNamingFormat() {
-		return sharedPreferences.getInt(PREF_KEY_NAMING_FORMAT, AppConstants.NAMING_COUNTED);
+	public String getSettingNamingFormat() {
+		return sharedPreferences.getString(PREF_KEY_SETTING_NAMING_FORMAT, AppConstants.DEFAULT_NAME_FORMAT);
+	}
+
+	@Override
+	public void setSettingRecordingFormat(String formatKey) {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+		editor.putString(PREF_KEY_SETTING_RECORDING_FORMAT, formatKey);
+		editor.apply();
+	}
+
+	@Override
+	public String getSettingRecordingFormat() {
+		return sharedPreferences.getString(PREF_KEY_SETTING_RECORDING_FORMAT, AppConstants.DEFAULT_RECORDING_FORMAT);
+	}
+
+	@Override
+	public void setSettingSampleRate(int sampleRate) {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+		editor.putInt(PREF_KEY_SETTING_SAMPLE_RATE, sampleRate);
+		editor.apply();
+	}
+
+	@Override
+	public int getSettingSampleRate() {
+		return sharedPreferences.getInt(PREF_KEY_SETTING_SAMPLE_RATE, AppConstants.DEFAULT_RECORD_SAMPLE_RATE);
+	}
+
+	@Override
+	public void setSettingBitrate(int rate) {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+		editor.putInt(PREF_KEY_SETTING_BITRATE, rate);
+		editor.apply();
+	}
+
+	@Override
+	public int getSettingBitrate() {
+		return sharedPreferences.getInt(PREF_KEY_SETTING_SAMPLE_RATE, AppConstants.DEFAULT_RECORD_ENCODING_BITRATE);
+	}
+
+	@Override
+	public void setSettingChannelCount(int count) {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+		editor.putInt(PREF_KEY_SETTING_CHANNEL_COUNT, count);
+		editor.apply();
+	}
+
+	@Override
+	public int getSettingChannelCount() {
+		return sharedPreferences.getInt(PREF_KEY_SETTING_CHANNEL_COUNT, AppConstants.DEFAULT_CHANNEL_COUNT);
+	}
+
+	@Override
+	public void resetSettings() {
+		SharedPreferences.Editor editor = sharedPreferences.edit();
+//		editor.putString(PREF_KEY_SETTING_THEME_COLOR, AppConstants.DEFAULT_THEME_COLOR);
+		editor.putString(PREF_KEY_SETTING_NAMING_FORMAT, AppConstants.DEFAULT_NAME_FORMAT);
+		editor.putString(PREF_KEY_SETTING_RECORDING_FORMAT, AppConstants.DEFAULT_RECORDING_FORMAT);
+		editor.putInt(PREF_KEY_SETTING_SAMPLE_RATE, AppConstants.DEFAULT_RECORD_SAMPLE_RATE);
+		editor.putInt(PREF_KEY_SETTING_BITRATE, AppConstants.DEFAULT_RECORD_ENCODING_BITRATE);
+		editor.putInt(PREF_KEY_SETTING_CHANNEL_COUNT, AppConstants.DEFAULT_CHANNEL_COUNT);
+		editor.apply();
 	}
 }
diff --git a/app/src/main/java/com/dimowner/audiorecorder/util/AndroidUtils.java b/app/src/main/java/com/dimowner/audiorecorder/util/AndroidUtils.java
index 46e6b53..b7c0223 100755
--- a/app/src/main/java/com/dimowner/audiorecorder/util/AndroidUtils.java
+++ b/app/src/main/java/com/dimowner/audiorecorder/util/AndroidUtils.java
@@ -489,6 +489,16 @@ public class AndroidUtils {
 		dialog.show();
 	}
 
+
+	public static void showInfoDialog(Activity activity, int resContent){
+		showDialog(activity, -1, -1, R.string.info, resContent,
+				new View.OnClickListener() {
+					@Override
+					public void onClick(View v) {}
+				}, null);
+	}
+
+
 	public static void showLostRecordsDialog(final Activity activity, final List<Record> lostRecords){
 		final Dialog dialog = new Dialog(activity);
 		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
