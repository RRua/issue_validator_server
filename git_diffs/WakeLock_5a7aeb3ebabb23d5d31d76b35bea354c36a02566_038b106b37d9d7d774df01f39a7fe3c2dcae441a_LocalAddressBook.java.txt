diff --git a/app/src/main/java/at/bitfire/davdroid/AccountSettings.java b/app/src/main/java/at/bitfire/davdroid/AccountSettings.java
index 245f92d9..bd4113ed 100644
--- a/app/src/main/java/at/bitfire/davdroid/AccountSettings.java
+++ b/app/src/main/java/at/bitfire/davdroid/AccountSettings.java
@@ -21,6 +21,8 @@ import android.content.PeriodicSync;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Parcel;
+import android.os.RemoteException;
 import android.provider.CalendarContract;
 import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
@@ -33,6 +35,7 @@ import java.util.List;
 import java.util.Set;
 import java.util.logging.Level;
 
+import at.bitfire.davdroid.model.CollectionInfo;
 import at.bitfire.davdroid.model.ServiceDB;
 import at.bitfire.davdroid.model.ServiceDB.Collections;
 import at.bitfire.davdroid.model.ServiceDB.HomeSets;
@@ -48,7 +51,7 @@ import lombok.Cleanup;
 import okhttp3.HttpUrl;
 
 public class AccountSettings {
-    private final static int CURRENT_VERSION = 5;
+    private final static int CURRENT_VERSION = 6;
     private final static String
             KEY_SETTINGS_VERSION = "version",
 
@@ -392,6 +395,72 @@ public class AccountSettings {
         PackageChangedReceiver.updateTaskSync(context);
     }
 
+    @SuppressWarnings({ "Recycle", "unused" })
+    private void update_5_6() throws ContactsStorageException {
+        @Cleanup("release") ContentProviderClient provider = context.getContentResolver().acquireContentProviderClient(ContactsContract.AUTHORITY);
+        if (provider == null)
+            // no access to contacts provider
+            return;
+
+        // don't run syncs during the migration
+        ContentResolver.setIsSyncable(account, ContactsContract.AUTHORITY, 0);
+        ContentResolver.setIsSyncable(account, App.getAddressBooksAuthority(), 0);
+        ContentResolver.cancelSync(account, null);
+
+        try {
+            // get previous address book settings (including URL)
+            @Cleanup("recycle") Parcel parcel = Parcel.obtain();
+            byte[] raw = ContactsContract.SyncState.get(provider, account);
+            if (raw == null)
+                App.log.info("No contacts sync state, ignoring account");
+            else {
+                parcel.unmarshall(raw, 0, raw.length);
+                parcel.setDataPosition(0);
+                Bundle params = parcel.readBundle();
+                String url = params.getString("url");
+                if (url == null)
+                    App.log.info("No address book URL, ignoring account");
+                else {
+                    // create new address book
+                    CollectionInfo info = new CollectionInfo();
+                    info.type = CollectionInfo.Type.ADDRESS_BOOK;
+                    info.url = url;
+                    info.displayName = account.name;
+                    App.log.log(Level.INFO, "Creating new address book account", url);
+                    Account addressBookAccount = new Account(LocalAddressBook.accountName(account, info), App.getAddressBookAccountType());
+                    if (!accountManager.addAccountExplicitly(addressBookAccount, null, LocalAddressBook.initialUserData(account, info.url)))
+                        throw new ContactsStorageException("Couldn't create address book account");
+                    LocalAddressBook addressBook = new LocalAddressBook(context, addressBookAccount, provider);
+
+                    // move contacts to new address book
+                    App.log.info("Moving contacts from " + account + " to " + addressBookAccount);
+                    ContentValues newAccount = new ContentValues(2);
+                    newAccount.put(ContactsContract.RawContacts.ACCOUNT_NAME, addressBookAccount.name);
+                    newAccount.put(ContactsContract.RawContacts.ACCOUNT_TYPE, addressBookAccount.type);
+                    int affected = provider.update(ContactsContract.RawContacts.CONTENT_URI.buildUpon()
+                                    .appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME, account.name)
+                                    .appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE, account.type)
+                                    .appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER, "true").build(),
+                            newAccount,
+                            ContactsContract.RawContacts.ACCOUNT_NAME + "=? AND " + ContactsContract.RawContacts.ACCOUNT_TYPE + "=?",
+                            new String[]{account.name, account.type});
+                    App.log.info(affected + " contacts moved to new address book");
+                }
+
+                ContactsContract.SyncState.set(provider, account, null);
+            }
+        } catch(RemoteException e) {
+            throw new ContactsStorageException("Couldn't migrate contacts to new address book", e);
+        }
+
+        // update version number so that further syncs don't repeat the migration
+        accountManager.setUserData(account, KEY_SETTINGS_VERSION, "6");
+
+        // request sync of new address book account
+        ContentResolver.setIsSyncable(account, App.getAddressBooksAuthority(), 1);
+        setSyncInterval(App.getAddressBooksAuthority(), Constants.DEFAULT_SYNC_INTERVAL);
+    }
+
 
     public static class AppUpdatedReceiver extends BroadcastReceiver {
 
diff --git a/app/src/main/java/at/bitfire/davdroid/DavService.java b/app/src/main/java/at/bitfire/davdroid/DavService.java
index 514d4bb6..68cfec07 100644
--- a/app/src/main/java/at/bitfire/davdroid/DavService.java
+++ b/app/src/main/java/at/bitfire/davdroid/DavService.java
@@ -56,7 +56,9 @@ import at.bitfire.davdroid.model.ServiceDB.Collections;
 import at.bitfire.davdroid.model.ServiceDB.HomeSets;
 import at.bitfire.davdroid.model.ServiceDB.OpenHelper;
 import at.bitfire.davdroid.model.ServiceDB.Services;
+import at.bitfire.davdroid.resource.LocalAddressBook;
 import at.bitfire.davdroid.ui.DebugInfoActivity;
+import at.bitfire.vcard4android.ContactsStorageException;
 import lombok.Cleanup;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
@@ -149,10 +151,25 @@ public class DavService extends Service {
             SQLiteDatabase db = dbHelper.getWritableDatabase();
 
             List<String> sqlAccountNames = new LinkedList<>();
+            Set<String> accountNames = new HashSet<>();
             AccountManager am = AccountManager.get(this);
-            for (Account account : am.getAccountsByType(Constants.ACCOUNT_TYPE))
+            for (Account account : am.getAccountsByType(getString(R.string.account_type))) {
                 sqlAccountNames.add(DatabaseUtils.sqlEscapeString(account.name));
+                accountNames.add(account.name);
+            }
+
+            // delete orphaned address book accounts
+            for (Account addrBookAccount : am.getAccountsByType(App.getAddressBookAccountType())) {
+                LocalAddressBook addressBook = new LocalAddressBook(this, addrBookAccount, null);
+                try {
+                    if (!accountNames.contains(addressBook.getMainAccount().name))
+                        addressBook.delete();
+                } catch(ContactsStorageException e) {
+                    App.log.log(Level.SEVERE, "Couldn't get address book main account", e);
+                }
+            }
 
+            // delete orphaned services in DB
             if (sqlAccountNames.isEmpty())
                 db.delete(Services._TABLE, null, null);
             else
diff --git a/app/src/main/java/at/bitfire/davdroid/resource/LocalAddressBook.java b/app/src/main/java/at/bitfire/davdroid/resource/LocalAddressBook.java
index e9f76d18..6413aec8 100644
--- a/app/src/main/java/at/bitfire/davdroid/resource/LocalAddressBook.java
+++ b/app/src/main/java/at/bitfire/davdroid/resource/LocalAddressBook.java
@@ -9,6 +9,10 @@ package at.bitfire.davdroid.resource;
 
 import android.accounts.Account;
 import android.accounts.AccountManager;
+import android.accounts.AccountManagerCallback;
+import android.accounts.AccountManagerFuture;
+import android.accounts.AuthenticatorException;
+import android.accounts.OperationCanceledException;
 import android.content.ContentProviderClient;
 import android.content.ContentResolver;
 import android.content.ContentUris;
@@ -18,17 +22,18 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.Parcel;
 import android.os.RemoteException;
 import android.provider.ContactsContract;
 import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.Groups;
 import android.provider.ContactsContract.RawContacts;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Base64;
 
-import net.fortuna.ical4j.model.Content;
-
+import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.LinkedList;
@@ -65,36 +70,55 @@ public class LocalAddressBook extends AndroidAddressBook implements LocalCollect
     public boolean includeGroups = true;
 
 
-    public static LocalAddressBook[] find(@NonNull Context context, @NonNull ContentProviderClient provider) {
+    public static LocalAddressBook[] find(@NonNull Context context, @NonNull ContentProviderClient provider, @Nullable Account mainAccount) throws ContactsStorageException {
         AccountManager accountManager = AccountManager.get(context);
 
-        List<LocalAddressBook> addressBooks = new LinkedList<>();
-        for (Account account : accountManager.getAccountsByType(App.getAddressBookAccountType()))
-            addressBooks.add(new LocalAddressBook(context, account, provider));
+        List<LocalAddressBook> result = new LinkedList<>();
+        for (Account account : accountManager.getAccountsByType(App.getAddressBookAccountType())) {
+            LocalAddressBook addressBook = new LocalAddressBook(context, account, provider);
+            if (mainAccount == null || addressBook.getMainAccount().equals(mainAccount))
+                result.add(addressBook);
+        }
 
-        return addressBooks.toArray(new LocalAddressBook[addressBooks.size()]);
+        return result.toArray(new LocalAddressBook[result.size()]);
     }
 
     public static LocalAddressBook create(@NonNull Context context, @NonNull ContentProviderClient provider, @NonNull Account mainAccount, @NonNull CollectionInfo info) throws ContactsStorageException {
         AccountManager accountManager = AccountManager.get(context);
 
-        Account account = new Account(info.displayName, App.getAddressBookAccountType());
-        if (!accountManager.addAccountExplicitly(account, null, null))
+        Account account = new Account(accountName(mainAccount, info), App.getAddressBookAccountType());
+        if (!accountManager.addAccountExplicitly(account, null, initialUserData(mainAccount, info.url)))
             throw new ContactsStorageException("Couldn't create address book account");
 
         LocalAddressBook addressBook = new LocalAddressBook(context, account, provider);
-        addressBook.setMainAccount(mainAccount);
-        addressBook.setURL(info.url);
-
         ContentResolver.setSyncAutomatically(account, ContactsContract.AUTHORITY, true);
-
         return addressBook;
     }
 
-    public void update(CollectionInfo info) {
-        ContentResolver.setSyncAutomatically(account, ContactsContract.AUTHORITY, true);
+    public void update(@NonNull CollectionInfo info) throws AuthenticatorException, OperationCanceledException, IOException, ContactsStorageException {
+        final String newAccountName = accountName(getMainAccount(), info);
+        if (!account.name.equals(newAccountName) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            final AccountManager accountManager = AccountManager.get(context);
+            AccountManagerFuture<Account> future = accountManager.renameAccount(account, newAccountName, new AccountManagerCallback<Account>() {
+                @Override
+                public void run(AccountManagerFuture<Account> future) {
+                    try {
+                        // update raw contacts to new account name
+                        if (provider != null) {
+                            ContentValues values = new ContentValues(1);
+                            values.put(RawContacts.ACCOUNT_NAME, newAccountName);
+                            provider.update(syncAdapterURI(RawContacts.CONTENT_URI), values, RawContacts.ACCOUNT_NAME + "=?", new String[] { account.name });
+                        }
+                    } catch(RemoteException e) {
+                        App.log.log(Level.WARNING, "Couldn't re-assign contacts to new account name", e);
+                    }
+                }
+            }, null);
+            account = future.getResult();
+        }
 
-        // TODO rename
+        // make sure it will still be synchronized when contacts are updated
+        ContentResolver.setSyncAutomatically(account, ContactsContract.AUTHORITY, true);
     }
 
     public void delete() {
@@ -300,12 +324,22 @@ public class LocalAddressBook extends AndroidAddressBook implements LocalCollect
 
     // SETTINGS
 
+    public static Bundle initialUserData(@NonNull Account mainAccount, @NonNull String url) {
+        Bundle bundle = new Bundle(3);
+        bundle.putString(USER_DATA_MAIN_ACCOUNT_NAME, mainAccount.name);
+        bundle.putString(USER_DATA_MAIN_ACCOUNT_TYPE, mainAccount.type);
+        bundle.putString(USER_DATA_URL, url);
+        return bundle;
+    }
+
     public Account getMainAccount() throws ContactsStorageException {
         AccountManager accountManager = AccountManager.get(context);
-        return new Account(
-                accountManager.getUserData(account, USER_DATA_MAIN_ACCOUNT_NAME),
-                accountManager.getUserData(account, USER_DATA_MAIN_ACCOUNT_TYPE)
-        );
+        String  name = accountManager.getUserData(account, USER_DATA_MAIN_ACCOUNT_NAME),
+                type = accountManager.getUserData(account, USER_DATA_MAIN_ACCOUNT_TYPE);
+        if (name != null && type != null)
+            return new Account(name, type);
+        else
+            throw new ContactsStorageException("Address book doesn't exist anymore");
     }
 
     public void setMainAccount(@NonNull Account mainAccount) throws ContactsStorageException {
@@ -339,15 +373,18 @@ public class LocalAddressBook extends AndroidAddressBook implements LocalCollect
 
     // HELPERS
 
-    public static void onRenameAccount(@NonNull ContentResolver resolver, @NonNull String oldName, @NonNull String newName) throws RemoteException {
-        @Cleanup("release") ContentProviderClient client = resolver.acquireContentProviderClient(ContactsContract.AUTHORITY);
-
-        // update raw contacts to new account name
-        if (client != null) {
-            ContentValues values = new ContentValues(1);
-            values.put(RawContacts.ACCOUNT_NAME, newName);
-            client.update(RawContacts.CONTENT_URI, values, RawContacts.ACCOUNT_NAME + "=?", new String[]{ oldName });
-        }
+    public static String accountName(@NonNull Account mainAccount, @NonNull CollectionInfo info) {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        baos.write(info.url.hashCode());
+        String hash = Base64.encodeToString(baos.toByteArray(), Base64.NO_WRAP | Base64.NO_PADDING);
+
+        StringBuilder sb = new StringBuilder(info.displayName);
+        sb      .append(" (")
+                .append(mainAccount.name)
+                .append(" ")
+                .append(hash)
+                .append(")");
+        return sb.toString();
     }
 
 }
diff --git a/app/src/main/java/at/bitfire/davdroid/syncadapter/AddressBooksSyncAdapterService.java b/app/src/main/java/at/bitfire/davdroid/syncadapter/AddressBooksSyncAdapterService.java
index 456bfaf3..75aef790 100644
--- a/app/src/main/java/at/bitfire/davdroid/syncadapter/AddressBooksSyncAdapterService.java
+++ b/app/src/main/java/at/bitfire/davdroid/syncadapter/AddressBooksSyncAdapterService.java
@@ -9,6 +9,8 @@ package at.bitfire.davdroid.syncadapter;
 
 import android.accounts.Account;
 import android.accounts.AccountManager;
+import android.accounts.AuthenticatorException;
+import android.accounts.OperationCanceledException;
 import android.content.AbstractThreadedSyncAdapter;
 import android.content.ContentProviderClient;
 import android.content.ContentResolver;
@@ -24,6 +26,7 @@ import android.provider.ContactsContract;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import java.io.IOException;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.logging.Level;
@@ -36,7 +39,6 @@ import at.bitfire.davdroid.model.CollectionInfo;
 import at.bitfire.davdroid.model.ServiceDB;
 import at.bitfire.davdroid.model.ServiceDB.Collections;
 import at.bitfire.davdroid.resource.LocalAddressBook;
-import at.bitfire.davdroid.resource.LocalCalendar;
 import at.bitfire.vcard4android.ContactsStorageException;
 import lombok.Cleanup;
 
@@ -44,25 +46,31 @@ public class AddressBooksSyncAdapterService extends SyncAdapterService {
 
     @Override
     protected AbstractThreadedSyncAdapter syncAdapter() {
-        return new ContactsSyncAdapter(this);
+        return new AddressBooksSyncAdapter(this);
     }
 
 
-	private static class ContactsSyncAdapter extends SyncAdapter {
+	private static class AddressBooksSyncAdapter extends SyncAdapter {
 
-        public ContactsSyncAdapter(Context context) {
+        public AddressBooksSyncAdapter(Context context) {
             super(context);
         }
 
-        @Override
-        public void sync(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult) {
+        public void sync(Account account, Bundle extras, String authority, ContentProviderClient addressBooksProvider, SyncResult syncResult) {
+            @Cleanup("release") ContentProviderClient contactsProvider = getContext().getContentResolver().acquireContentProviderClient(ContactsContract.AUTHORITY);
+            if (contactsProvider == null) {
+                App.log.severe("Couldn't access contacts provider");
+                syncResult.databaseError = true;
+                return;
+            }
+
             SQLiteOpenHelper dbHelper = new ServiceDB.OpenHelper(getContext());
             try {
                 AccountSettings settings = new AccountSettings(getContext(), account);
                 if (!extras.containsKey(ContentResolver.SYNC_EXTRAS_MANUAL) && !checkSyncConditions(settings))
                     return;
 
-                updateLocalAddressBooks(provider, account);
+                updateLocalAddressBooks(contactsProvider, account);
 
                 AccountManager accountManager = AccountManager.get(getContext());
                 for (Account addressBookAccount : accountManager.getAccountsByType(getContext().getString(R.string.account_type_address_book))) {
@@ -93,17 +101,21 @@ public class AddressBooksSyncAdapterService extends SyncAdapterService {
             Long service = getService(db, account);
             Map<String, CollectionInfo> remote = remoteAddressBooks(db, service);
 
-            LocalAddressBook[] local = LocalAddressBook.find(context, provider);
+            LocalAddressBook[] local = LocalAddressBook.find(context, provider, account);
 
             // delete obsolete local address books
             for (LocalAddressBook addressBook : local) {
                 String url = addressBook.getURL();
                 if (!remote.containsKey(url)) {
-                    App.log.fine("Deleting obsolete local address book " + url);
+                    App.log.log(Level.FINE, "Deleting obsolete local address book", url);
                     addressBook.delete();
                 } else {
                     // we already have a local address book for this remote collection, don't take into consideration anymore
-                    addressBook.update(remote.get(url));
+                    try {
+                        addressBook.update(remote.get(url));
+                    } catch(AuthenticatorException|OperationCanceledException|IOException e) {
+                        App.log.log(Level.WARNING, "Couldn't rename address book account", e);
+                    }
                     remote.remove(url);
                 }
             }
diff --git a/app/src/main/java/at/bitfire/davdroid/syncadapter/ContactsSyncAdapterService.java b/app/src/main/java/at/bitfire/davdroid/syncadapter/ContactsSyncAdapterService.java
index 97d0c8e7..496c48c2 100644
--- a/app/src/main/java/at/bitfire/davdroid/syncadapter/ContactsSyncAdapterService.java
+++ b/app/src/main/java/at/bitfire/davdroid/syncadapter/ContactsSyncAdapterService.java
@@ -73,7 +73,7 @@ public class ContactsSyncAdapterService extends SyncAdapterService {
                 dbHelper.close();
             }
 
-            App.log.info("Address book sync complete");
+            App.log.info("Contacts sync complete");
         }
 
     }
diff --git a/app/src/main/java/at/bitfire/davdroid/syncadapter/SyncAdapterService.java b/app/src/main/java/at/bitfire/davdroid/syncadapter/SyncAdapterService.java
index 9d79ffa5..b3488bae 100644
--- a/app/src/main/java/at/bitfire/davdroid/syncadapter/SyncAdapterService.java
+++ b/app/src/main/java/at/bitfire/davdroid/syncadapter/SyncAdapterService.java
@@ -57,7 +57,7 @@ public abstract class SyncAdapterService extends Service {
 
         @Override
         public void onPerformSync(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult) {
-            App.log.log(Level.INFO, "Sync for " + authority + " has been initiated.", extras.keySet().toArray());
+            App.log.log(Level.INFO, authority + " sync of " + account + " has been initiated.", extras.keySet().toArray());
 
             // required for dav4android (ServiceLoader)
             Thread.currentThread().setContextClassLoader(getContext().getClassLoader());
diff --git a/app/src/main/java/at/bitfire/davdroid/ui/AccountActivity.java b/app/src/main/java/at/bitfire/davdroid/ui/AccountActivity.java
index 07bc382d..1af77282 100644
--- a/app/src/main/java/at/bitfire/davdroid/ui/AccountActivity.java
+++ b/app/src/main/java/at/bitfire/davdroid/ui/AccountActivity.java
@@ -49,7 +49,6 @@ import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.CheckBox;
@@ -593,18 +592,24 @@ public class AccountActivity extends AppCompatActivity implements Toolbar.OnMenu
                                             public void run(AccountManagerFuture<Account> future) {
                                                 App.log.info("Updating account name references");
 
-                                                // cancel running synchronization
+                                                // cancel maybe running synchronization
                                                 ContentResolver.cancelSync(oldAccount, null);
+                                                for (Account addrBookAccount : accountManager.getAccountsByType(App.getAddressBookAccountType()))
+                                                    ContentResolver.cancelSync(addrBookAccount, null);
 
                                                 // update account name references in database
                                                 @Cleanup OpenHelper dbHelper = new OpenHelper(getContext());
                                                 ServiceDB.onRenameAccount(dbHelper.getWritableDatabase(), oldAccount.name, newName);
 
-                                                // update account_name of local contacts
+                                                // update main account of address book accounts
                                                 try {
-                                                    LocalAddressBook.onRenameAccount(getContext().getContentResolver(), oldAccount.name, newName);
-                                                } catch(RemoteException e) {
-                                                    App.log.log(Level.SEVERE, "Couldn't propagate new account name to contacts provider");
+                                                    for (Account addrBookAccount : accountManager.getAccountsByType(App.getAddressBookAccountType())) {
+                                                        LocalAddressBook addressBook = new LocalAddressBook(getContext(), addrBookAccount, null);
+                                                        if (oldAccount.equals(addressBook.getMainAccount()))
+                                                            addressBook.setMainAccount(new Account(newName, oldAccount.type));
+                                                    }
+                                                } catch(ContactsStorageException e) {
+                                                    App.log.log(Level.SEVERE, "Couldn't update address book accounts", e);
                                                 }
 
                                                 // calendar provider doesn't allow changing account_name of Events
@@ -613,7 +618,7 @@ public class AccountActivity extends AppCompatActivity implements Toolbar.OnMenu
                                                 try {
                                                     LocalTaskList.onRenameAccount(getContext().getContentResolver(), oldAccount.name, newName);
                                                 } catch(RemoteException e) {
-                                                    App.log.log(Level.SEVERE, "Couldn't propagate new account name to tasks provider");
+                                                    App.log.log(Level.SEVERE, "Couldn't propagate new account name to tasks provider", e);
                                                 }
 
                                                 // synchronize again
