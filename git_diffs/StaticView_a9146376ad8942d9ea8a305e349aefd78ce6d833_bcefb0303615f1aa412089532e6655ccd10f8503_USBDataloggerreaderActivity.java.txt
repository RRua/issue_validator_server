diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/DataContent.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/DataContent.java
index d9b3044..17a3776 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/DataContent.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/DataContent.java
@@ -41,6 +41,7 @@ public class DataContent {
 	public int begins[];
 	public boolean y3enabled;
 
+
     /* Datenspuren haben gemeinsame X-Basis,
      * unterschiedliche namen, farbe*/
 
@@ -95,6 +96,10 @@ public class DataContent {
 		y3max=y2max=ymax=xmax=-9999;
 		mindx=60*60*24*365;
 	}
+	
+
+	
+	
 	public void add_beg(int n) {
 		if(begins==null) {
 			begins=new int[1];
@@ -177,11 +182,12 @@ public class DataContent {
 	public void loaddatafile(String filename) {
 		boolean skipfirstline=false;
 		boolean isxml=false;
+		boolean iscsv=false;
 		Log.d(TAG,"read file: "+filename);
 		InputStream in = null;
 		String splitter=" ";
 		if(filename.endsWith(".csv")) {
-			splitter=",";
+			iscsv=true;
 			skipfirstline=true;
 		} else if(filename.endsWith(".xml")) {
 			isxml=true;
@@ -253,6 +259,10 @@ public class DataContent {
 						// do something with the settings from the file
 						if(!line.startsWith("#") && !skipfirstline) {
 							double x,y=0,y2=0,y3=0;
+							if(iscsv && line.contains(";")) splitter=";";
+							else if(iscsv && line.contains("|")) splitter="|";
+							else if(iscsv) splitter=",";
+							else splitter=" ";
 							String[] sep=line.split(splitter);
 							try {
 								x=Double.parseDouble(sep[0]);
diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/Logger.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/Logger.java
index bbe49f4..3dce590 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/Logger.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/Logger.java
@@ -62,6 +62,7 @@ public class Logger {
 	public boolean do_calibrate=false;
 	public boolean be_quiet=false;
 	public int simulate_type;
+        public boolean fakeconfigdir=false;
 
 	/*Verschiedene Protokoll-Typen*/
 	public final static int PROTO_VOLTCRAFT=0;
@@ -81,7 +82,20 @@ public class Logger {
 	public final static int LTYP_CURR=300;
 	public final static int LTYP_GAS=400;
 	public final static int LTYP_SOUND=500;
-    
+	
+	/* Verschiedene Capabilities */
+	
+	public final static int CAPA_NONE=0;
+	public final static int CAPA_STARTBUTTON=1;
+	public final static int CAPA_STOPBUTTON=2;
+	public final static int CAPA_STARTTIME=4;
+	public final static int CAPA_STOPTIME=8;
+	public final static int CAPA_LED=0x10;
+	public final static int CAPA_LCD=0x20;
+	public final static int CAPA_LIMITS=0x40;
+	public final static int CAPA_FAHRENHEIT=0x80;
+	public final static int CAPA_ROLLOVER=0x100;
+
         /* Status properties */
 
 	public boolean isconnected=false;
@@ -114,8 +128,8 @@ public class Logger {
 		calibration_tB=b; 
 		calibration_rA=a2; 
 		calibration_rB=b2;
-	        calibration_pA=a3; /* Pressure */
-	        calibration_pB=b3;
+		calibration_pA=a3; /* Pressure */
+		calibration_pB=b3;
 	}
 	public void set_calibration(float a,float b, float a2,float b2) {
 		calibration_tA=a;
@@ -939,6 +953,24 @@ public class Logger {
 
 	}
 
+
+	public int get_capabilities() {
+	  if(protocol==PROTO_FILE) return MediaLogger.capabilities;
+	  else if(protocol==PROTO_HID) return(CAPA_ROLLOVER);
+	  else if(protocol==PROTO_ELV) return(CAPA_ROLLOVER);
+	  else if(protocol==PROTO_CP210X) return(CAPA_STARTBUTTON|CAPA_ROLLOVER);
+	  return CAPA_STARTBUTTON;
+	}
+	public boolean has_stopbutton() {
+	  return((get_capabilities()&CAPA_STOPBUTTON)!=0);
+	}
+	public boolean has_startbutton() {
+	  return((get_capabilities()&CAPA_STARTBUTTON)!=0);
+	}
+	public boolean has_rollover() {
+	  return((get_capabilities()&CAPA_ROLLOVER)!=0);
+	}
+
 	public String protocolstring() {
 	  if(protocol==PROTO_VOLTCRAFT)   return "Voltcraft1";
 	  else if(protocol==PROTO_VOLTCRAFT_NEW) return "Voltcraft2";
@@ -962,19 +994,19 @@ public class Logger {
 		else return "?";
 	}
 	public void updateProgress(int n) {
-		if(be_quiet==false && mActivity!=null) mActivity.updateProgress(n);
+		if(!be_quiet && mActivity!=null) mActivity.updateProgress(n);
 	}
 	//public void displayMessage(String s,int n) {
 	//	if(be_quiet==false && mActivity!=null) mActivity.displaymessage(s,n);
 	//}	
 	public void updateMessage(String s,int n) {
-		if(be_quiet==false && mActivity!=null) mActivity.updateMessage(s,n);
+		if(!be_quiet && mActivity!=null) mActivity.updateMessage(s,n);
 	}	
 	public void updateStatus(String s,int n) {
-		if(be_quiet==false && mActivity!=null) mActivity.updateStatus(s,n);
+		if(!be_quiet && mActivity!=null) mActivity.updateStatus(s,n);
 	}	
 	public void updateStatus(int n) {
-		if(be_quiet==false && mActivity!=null) mActivity.updateStatus(n);
+		if(!be_quiet && mActivity!=null) mActivity.updateStatus(n);
 	}
 	
 	/* Formulas for raw data to real data conversions */
diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/MediaLogger.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/MediaLogger.java
index 7fb9374..410a6d6 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/MediaLogger.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/MediaLogger.java
@@ -38,6 +38,15 @@ public class MediaLogger {
   private static String loggerstatus="DL-2xx logger is not fully supported yet!";
 
 
+  /* Vaiablen für Lokal Konfiguration */
+
+  public String Location=null;
+  public String Owner=null;
+    
+  /* Capabilities */
+  
+  public final static int capabilities=Logger.CAPA_STARTBUTTON|Logger.CAPA_STOPBUTTON;
+
   /* Build the binary data from configuration */
 
 
@@ -86,7 +95,7 @@ public class MediaLogger {
     mes.put(0x68,(byte)1);
     mes.put(0x69,(byte)0);
     mes.put(0x6a,(byte)1);
-    mes.put(0x6b,(byte)0); /*Bedingungen für Aufzeichnungsende (00=keine,  01=Stopp-Taste, 02=nach PDF-Erstellung)*/
+    mes.put(0x6b,(byte)1); /*Bedingungen für Aufzeichnungsende (00=keine,  01=Stopp-Taste, 02=nach PDF-Erstellung)*/
 
     mes.putShort(0x6c,(short)logger.config.time_year);  /* Start Zeit */
     mes.put(0x6e,logger.config.time_mon);
@@ -350,8 +359,8 @@ public class MediaLogger {
       File dir=null;
       try {
         dir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
-        file= new File(dir,"SetLog.bn1");
-        // file= new File(dirname,"SetLog.bn1");
+        if(logger.fakeconfigdir) file= new File(dir,"SetLog.bn1");
+        else file= new File(dirname+File.separator+"SetLog.bn1");
         Log.d(TAG,"Write config file: "+file.toString());
 	if (!file.exists()) file.createNewFile();
 	fOut=new FileOutputStream(file);
@@ -381,33 +390,30 @@ public class MediaLogger {
 	
 	
   public static int get_data(Logger logger) {
-		int q=0,count=0,blocknr=0,blocksize=0;
-		final LoggerData data=logger.data;
-		data.quality=0;	
-		data.set_calibration((float)0.01,0,(float) 0.01, 0);
-		logger.updateProgress(0);
-		logger.updateStatus(0);
-		
-		
-		if(logger.Path!=null) {
-		  String dirname=logger.Path.substring(8); /* Omit the "file://" part*/
-		try { 
-
-		  File file= new File(dirname+ File.separator + logger.Configfile);
-		  Log.d(TAG,"Datafile: "+file.toString());
-		  
-		  InputStream in = new FileInputStream(file);
-		  if(in!=null)   {
-		    // prepare the file for reading
-		    InputStreamReader inputreader = new InputStreamReader(in);
-		    XmlPullParser parser = Xml.newPullParser();
-		    parser.setInput(inputreader);
-		    int eventType = parser.getEventType();
-		    boolean done = false;
-		    int parserstate=0;
-		    while(eventType != XmlPullParser.END_DOCUMENT && !done) {
-		      String name = null;
-		      switch (eventType){
+    int q=0,count=0,blocknr=0,blocksize=0;
+    final LoggerData data=logger.data;
+    data.quality=0; 
+    data.set_calibration((float)0.01,0,(float) 0.01, 0);
+    logger.updateProgress(0);
+    logger.updateStatus(0);
+
+    if(logger.Path!=null) {
+      String dirname=logger.Path.substring(8); /* Omit the "file://" part*/
+      try { 
+	File file= new File(dirname+ File.separator + logger.Configfile);
+	Log.d(TAG,"Datafile: "+file.toString());
+        InputStream in = new FileInputStream(file);
+	if(in!=null)   {
+	// prepare the file for reading
+	  InputStreamReader inputreader = new InputStreamReader(in);
+	  XmlPullParser parser = Xml.newPullParser();
+	  parser.setInput(inputreader);
+	  int eventType = parser.getEventType();
+	  boolean done = false;
+	  int parserstate=0;
+	  while(eventType != XmlPullParser.END_DOCUMENT && !done) {
+	    String name = null;
+	    switch (eventType){
 		      case XmlPullParser.START_DOCUMENT:
 		        parserstate=0;
 			break;
@@ -464,37 +470,20 @@ public class MediaLogger {
 		    // close the file again
 		    try {in.close();} catch (IOException e) {return(q);} 
 		    
-		    logger.isreaddata=true;
-                  }
-		     		
-
-		} catch (FileNotFoundException e) {
-			Log.e(TAG,"ERROR: filenotfound ");
-			return(q);
-		} catch (XmlPullParserException e) {
-			Log.e(TAG,"ERROR: XML error ");
-			return(q);
-		} catch (IOException e) {
-			Log.e(TAG,"ERROR: IO error ");
-			return(q);
-		} 
-	    
-		    
-		} else {
-		  loggerstatus="Data read ERROR.";
-		  
-		}
-
-		
-		logger.updateProgress(100);
-
-
-                /* Check data quality */
-
-		if(logger.loggertype==Logger.LTYP_TH || logger.loggertype==Logger.LTYP_THP) {
-		  for(int i=0;i<data.anzdata;i++) {
-			if(data.get_temp(i)>200 || data.get_temp(i)<-100 || 
-					data.get_rh(i)>104 || data.get_rh(i)<-1) q++;    		
+          logger.isreaddata=true;
+        }
+      } 
+      catch (FileNotFoundException e)  {Log.e(TAG,"ERROR: filenotfound ");return(q);} 
+      catch (XmlPullParserException e) {Log.e(TAG,"ERROR: XML error ");return(q);} 
+      catch (IOException e)            {Log.e(TAG,"ERROR: IO error ");return(q);}	    
+    } else loggerstatus="Data read ERROR.";
+    logger.updateProgress(100);
+
+    /* Check data quality */
+    if(logger.loggertype==Logger.LTYP_TH || logger.loggertype==Logger.LTYP_THP) {
+      for(int i=0;i<data.anzdata;i++) {
+	if(data.get_temp(i)>200 || data.get_temp(i)<-100 || 
+	   data.get_rh(i)>104 || data.get_rh(i)<-1) q++;    		
       }
     }
     return(q);
diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/PlotdataLoader.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/PlotdataLoader.java
index 9bdcb2e..cd979a9 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/PlotdataLoader.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/PlotdataLoader.java
@@ -22,6 +22,7 @@ public class PlotdataLoader  extends AsyncTask<Integer, Integer, Integer> {
 	private PlottoolActivity mActivity;
 	DataContent data;
 	String[] mFileList;
+
 	boolean[] mcheckitems; 
 	boolean mdotaupunkt;
 	int mbluecurvetype;
@@ -180,4 +181,4 @@ public class PlotdataLoader  extends AsyncTask<Integer, Integer, Integer> {
 			disconnect();
 		}
 	} 	
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/TabledataLoader.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/TabledataLoader.java
index 6ca1783..b638d81 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/TabledataLoader.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/TabledataLoader.java
@@ -23,25 +23,26 @@ public class TabledataLoader  extends AsyncTask<Integer, Integer, Integer> {
 	   String[] mFileList;
 	   boolean[] mcheckitems; 
 
+
 	   /**
 	    * Return a new AsyncTask that is connected to the activity given. 
 	    *
 	    * @param context MainActivity - the activity that this task is working with
-	    * @param numFiles int - the number of files to process 
+
 	    */
 
 	   public TabledataLoader (TabletoolActivity context, String[] FileList,boolean[] checkitems) {
-        		   
-		   mActivity = context;
+	       mActivity = context;
 	       mFilesComplete=0;
 	       mFileList=FileList;
 	       mcheckitems=checkitems;
 	       mAnzfiles=0;
+
 	       for(int i=0;i<checkitems.length;i++) {
 	    	   if(checkitems[i]) mAnzfiles++;
 	       }
 	       data=new DataContent(16384);
-	       Log.d (TAG, "Tableloader init.");
+
 	   } 
 	   /**
 	    * Disconnect the task from the activity it was set up to work with.
@@ -133,10 +134,7 @@ public class TabledataLoader  extends AsyncTask<Integer, Integer, Integer> {
 	    if (mActivity != null) mActivity.loadDataComplete (data, mCancelled);
 	    disconnect();
 	}
-	
-	
-	
-	
+
 	
 	public void resetActivity (TabletoolActivity activity) {
 	    mActivity = activity;
diff --git a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/USBDataloggerreaderActivity.java b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/USBDataloggerreaderActivity.java
index b7ca035..84d4592 100644
--- a/app/src/main/java/com/drhoffmannstoolsdataloggerreader/USBDataloggerreaderActivity.java
+++ b/app/src/main/java/com/drhoffmannstoolsdataloggerreader/USBDataloggerreaderActivity.java
@@ -75,18 +75,18 @@ public class USBDataloggerreaderActivity extends Activity {
 	private static boolean do_autoreadout=false;
 	private Button getconfig,writeconfig,savedata;
 	private Button getdata;
-	private ImageButton shot,batshot,clear;
+
 	private EditText numconfig,logname,minterval,temphigh,templow,rhhigh,rhlow,presshigh,presslow,delay;
-	private static TextView status,numrec,manzdata,mmessage,presstext,rhtext,blinktext;
+	private TextView status,numrec,manzdata,mmessage,presstext,rhtext,blinktext;
 	private static OLEDView valuedisplay;
-	private static RadioButton celsius,fahrenheit,a10,a20,a30;
-	private static RadioGroup radioGroupLCD;
-	private static CheckBox alarm,autolog,systime,rollover;
-	private static ProgressBar progress1,progress2;
-	private static DatePicker datepicker;
-	private static TimePicker timepicker;
+	private RadioButton celsius,fahrenheit,a10,a20,a30;
+	private RadioGroup radioGroupLCD;
+	private CheckBox alarm,autolog,systime,rollover;
+	private ProgressBar progress1,progress2;
+	private DatePicker datepicker;
+	private TimePicker timepicker;
 	private static PlotView plot;
-	private static LinearLayout extrafunctions;
+	private LinearLayout extrafunctions;
 
 	private static int mProgressStatus = 0;
 	private int msysstatus;
@@ -104,8 +104,13 @@ public class USBDataloggerreaderActivity extends Activity {
 	final static LoggerData data=logger.data;
 	final static LoggerConfig config=logger.config;
 
+
+        public static String csvsplitter;
+
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
+	    ImageButton shot,batshot,clear;
+
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.launcher);
 		/* Disable Home Button while on the home screen:
@@ -319,7 +324,7 @@ public class USBDataloggerreaderActivity extends Activity {
 
 	}
 
-	public static void updateProgress(int i) {
+	public void updateProgress(int i) {
 		mProgressStatus=i;
 		h.post(new Runnable() {
 			public void run() {
@@ -381,12 +386,12 @@ public class USBDataloggerreaderActivity extends Activity {
 		}
 		/* Wurde der Simulator eingeschaltet?*/
 		boolean na=prefs.getBoolean("simulate", false);
-		if(na==false && logger.do_simulate) {
+		if(!na && logger.do_simulate) {
 			Toast.makeText(getBaseContext(), "Action: Logger Simulator detached.", Toast.LENGTH_LONG).show();
 			logger.close();
 			logger.do_simulate=false;
 			setdisconnected();
-		} else if(na==true) {
+		} else if(na) {
 
 			int lt=(int)Double.parseDouble(prefs.getString("select_simumodel", "0"));
 			if(lt!=logger.simulate_type && logger.do_simulate) logger.close();
@@ -395,6 +400,9 @@ public class USBDataloggerreaderActivity extends Activity {
 			logger.checkforUSBdevices();
 			setconnected();
 		}
+		logger.fakeconfigdir=prefs.getBoolean("fakeloggerstorage", false);
+		csvsplitter=prefs.getString("csvsplitter",",");
+		
 		/* Wurde ein Logger bereits an- oder abgesteckt ?*/
 		if(!logger.do_simulate) {
 		  Intent intent = getIntent();
@@ -492,7 +500,7 @@ public class USBDataloggerreaderActivity extends Activity {
   	  }
 	}
 	public void usb_storage_detached(Intent intent) {
-	  if(logger.isconnected && logger.protocol==logger.PROTO_FILE
+	  if(logger.isconnected && logger.protocol==Logger.PROTO_FILE
 	     && logger.Path.equals(intent.getDataString())) {
 	     setdisconnected();
 	  }
@@ -508,6 +516,7 @@ public class USBDataloggerreaderActivity extends Activity {
 
 		getdata.setEnabled(false);
 		logger.isreadconfig=false;
+
 		if(do_autoreadout) {
 			BackgroundService.set_logger(logger);
 			Log.d(TAG,"Start background service ");
@@ -720,7 +729,7 @@ public class USBDataloggerreaderActivity extends Activity {
 		
 		ll.addView(dp);
 		Button b1 = new Button(mContext);
-		b1.setText(" OK ");
+		b1.setText(R.string.word_ok);
 		b1.setOnClickListener(new OnClickListener() {
 			public void onClick(View v) {
 				dp2.updateDate(dp.getYear(), dp.getMonth(), dp.getDayOfMonth());
@@ -729,7 +738,7 @@ public class USBDataloggerreaderActivity extends Activity {
 		});        
 		ll.addView(b1);
 		Button b2 = new Button(mContext);
-		b2.setText("cancel");
+		b2.setText(R.string.word_cancel);
 		b2.setOnClickListener(new OnClickListener() {
 			public void onClick(View v) {
 				dialog.dismiss();
@@ -757,7 +766,7 @@ public class USBDataloggerreaderActivity extends Activity {
 		
 		ll.addView(tp);
 		Button b1 = new Button(mContext);
-		b1.setText(" OK ");
+		b1.setText(R.string.word_ok);
 		b1.setOnClickListener(new OnClickListener() {
 			public void onClick(View v) {	
   			  tp2.setCurrentHour(tp.getCurrentHour());
@@ -767,7 +776,7 @@ public class USBDataloggerreaderActivity extends Activity {
 		});        
 		ll.addView(b1);
 		Button b2 = new Button(mContext);
-		b2.setText("cancel");
+		b2.setText(R.string.word_cancel);
 		b2.setOnClickListener(new OnClickListener() {
 			public void onClick(View v) {
 				dialog.dismiss();
@@ -930,7 +939,7 @@ public class USBDataloggerreaderActivity extends Activity {
 				"A2="+data.calibration_A2value+" B2="+data.calibration_B2value+" "+
 				"M="+config.calibration_Mvalue+" C="+config.calibration_Cvalue;
 		String separator=" ";
-		if(endung.equalsIgnoreCase("csv")) separator=", ";
+		if(endung.equalsIgnoreCase("csv")) separator=prefs.getString("select_csvseparator",", ");
 		String legende="UNIX time [s]"+separator;
 		if(logger.loggertype==Logger.LTYP_VOLT) 
 			legende=legende+"Voltage ["+config.getunit()+"]"
@@ -1358,6 +1367,11 @@ public class USBDataloggerreaderActivity extends Activity {
 	/*Aktualisiere Eingabefelder*/
 
 	private void printconfig2() {
+		if(logger.has_startbutton()) autolog.setVisibility(View.VISIBLE);
+		else autolog.setVisibility(View.GONE);
+		if(logger.has_rollover()) rollover.setVisibility(View.VISIBLE);
+		else rollover.setVisibility(View.GONE);
+
 		if(logger.protocol==Logger.PROTO_HID) {
 			numconfig.setVisibility(View.VISIBLE);
 			numconfig.setText(""+config.num_data_conf);
@@ -1366,8 +1380,6 @@ public class USBDataloggerreaderActivity extends Activity {
 			a30.setVisibility(View.GONE);
 			blinktext.setVisibility(View.GONE);
 			radioGroupLCD.setVisibility(View.GONE);
-			rollover.setVisibility(View.VISIBLE);
-			autolog.setVisibility(View.GONE);
 			if(logger.config.rawinputreading==0) valuedisplay.setVisibility(View.GONE);
 			else {
 				valuedisplay.setVisibility(View.VISIBLE);
@@ -1385,9 +1397,8 @@ public class USBDataloggerreaderActivity extends Activity {
 			a20.setVisibility(View.GONE);
 			a30.setVisibility(View.GONE);
 			blinktext.setVisibility(View.GONE);
-			autolog.setVisibility(View.GONE);
+
 			radioGroupLCD.setVisibility(View.VISIBLE);
-			rollover.setVisibility(View.VISIBLE);
 			if(logger.config.rawinputreading==0) valuedisplay.setVisibility(View.GONE);
 			else {
 			  valuedisplay.setVisibility(View.VISIBLE);
@@ -1405,14 +1416,12 @@ public class USBDataloggerreaderActivity extends Activity {
 			a20.setVisibility(View.VISIBLE);
 			a30.setVisibility(View.VISIBLE);
 			blinktext.setVisibility(View.VISIBLE);
-			autolog.setVisibility(View.VISIBLE);
 			numconfig.setText(""+config.num_data_conf);
 			a10.setChecked((((int)config.led_conf) & 0x1f)==10);
 			a20.setChecked((((int)config.led_conf) & 0x1f)==20);
 			a30.setChecked((((int)config.led_conf) & 0x1f)==30);
 			autolog.setChecked((config.start&255)==2);
 			delay.setVisibility(View.GONE);
-			rollover.setVisibility(View.VISIBLE);
 			radioGroupLCD.setVisibility(View.VISIBLE);
 			valuedisplay.setVisibility(View.GONE);
 			extrafunctions.setVisibility(View.GONE);
@@ -1425,14 +1434,13 @@ public class USBDataloggerreaderActivity extends Activity {
 			a20.setVisibility(View.VISIBLE);
 			a30.setVisibility(View.VISIBLE);
 			blinktext.setVisibility(View.VISIBLE);
-			autolog.setVisibility(View.VISIBLE);
 			numconfig.setText(""+config.num_data_conf);
 			a10.setChecked((((int)config.led_conf) & 0x1f)==10);
 			a20.setChecked((((int)config.led_conf) & 0x1f)==20);
 			a30.setChecked((((int)config.led_conf) & 0x1f)==30);
 			autolog.setChecked((config.start&255)==2);
 			delay.setVisibility(View.GONE);
-			rollover.setVisibility(View.GONE);
+
 			radioGroupLCD.setVisibility(View.GONE);
 			valuedisplay.setVisibility(View.GONE);
 			extrafunctions.setVisibility(View.GONE);
@@ -1475,7 +1483,7 @@ public class USBDataloggerreaderActivity extends Activity {
 		}
 	}
 
-	private final String applicationVersion() {
+	private String applicationVersion() {
 		try { return getPackageManager().getPackageInfo(getPackageName(), 0).versionName; }
 		catch (NameNotFoundException x)  { return "unknown"; }
 	}
