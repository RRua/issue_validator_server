diff --git a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
index d0d2646..bbba94d 100644
--- a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
+++ b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
@@ -146,7 +146,7 @@ public class MyAndroidTest {
 
         for (Command command : commands) {
             Intent intent = new Intent(getContext(), CommandManActivity.class);
-            intent.putExtra(CommandManActivity.EXTRA_COMMAND_ID, id);
+            intent.putExtra(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
             Activity activity = commandManActivityRule.launchActivity(intent);
 
             try {
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.java
deleted file mode 100644
index 5316ddf..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.os.Bundle;
-import android.support.v7.widget.Toolbar;
-import android.view.MenuItem;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This Activity just holds the AboutFragment
- */
-public class AboutActivity extends BaseActivity {
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_about);
-
-        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        assert getSupportActionBar() != null;
-
-        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                this.finish();
-        }
-
-        return (super.onOptionsItemSelected(item));
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.kt
new file mode 100644
index 0000000..b1d3de6
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/AboutActivity.kt
@@ -0,0 +1,35 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.os.Bundle
+import android.support.v7.widget.Toolbar
+import android.view.MenuItem
+import android.view.View
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This Activity just holds the AboutFragment
+ */
+class AboutActivity : BaseActivity() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_about)
+
+        val toolbar = findViewById<View>(R.id.toolbar) as Toolbar
+        setSupportActionBar(toolbar)
+
+        assert(supportActionBar != null)
+
+        supportActionBar!!.setDisplayHomeAsUpEnabled(true)
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        when (item.itemId) {
+            android.R.id.home -> this.finish()
+        }
+
+        return super.onOptionsItemSelected(item)
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.java
deleted file mode 100644
index a7820d4..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-
-import android.support.v7.app.AppCompatActivity;
-
-/**
- * Created by Simon Schubert.
- */
-public class BaseActivity extends AppCompatActivity {
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.kt
new file mode 100644
index 0000000..6ea347e
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/BaseActivity.kt
@@ -0,0 +1,9 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+
+import android.support.v7.app.AppCompatActivity
+
+/**
+ * Created by Simon Schubert.
+ */
+open class BaseActivity : AppCompatActivity()
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.java
deleted file mode 100644
index 2dd1a3a..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.os.Bundle;
-import android.support.annotation.IntDef;
-import android.support.design.widget.BottomNavigationView;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.widget.Toolbar;
-import android.view.View;
-import android.widget.Toast;
-
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.BasicGroupsFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandsFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.DatabaseLoadingFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.TipsFragment;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This Activity just holds the NavigationFragmentFragment
- */
-public class CommandBibliothecaActivity extends LoadingBaseActivity {
-
-    @BindView(R.id.navigation)
-    BottomNavigationView navigation;
-    @BindView(R.id.toolbar)
-    Toolbar toolbar;
-    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
-            = item -> {
-        switch (item.getItemId()) {
-            case R.id.navigation_commands:
-                startFragment(ID.COMMANDS);
-                return true;
-            case R.id.navigation_basics:
-                startFragment(ID.BASIC);
-                return true;
-            case R.id.navigation_tips:
-                startFragment(ID.TIPS);
-                return true;
-        }
-        return false;
-    };
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_commandbibliotheca);
-
-        ButterKnife.bind(this, this);
-
-        setSupportActionBar(toolbar);
-
-        if (savedInstanceState == null) {
-            showLoadingFragment();
-        } else {
-            CharSequence title = savedInstanceState.getCharSequence("title");
-            setTitle(title);
-        }
-
-        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        outState.putCharSequence("title", getTitle());
-        super.onSaveInstanceState(outState);
-    }
-
-    private void startFragment(@ID int id) {
-        Fragment fragment = null;
-        switch (id) {
-            case ID.COMMANDS:
-                fragment = new CommandsFragment();
-                setTitle(R.string.fragment_bibliotheca_commands);
-                break;
-            case ID.BASIC:
-                fragment = new BasicGroupsFragment();
-                setTitle(R.string.fragment_bibliotheca_basic);
-                break;
-            case ID.TIPS:
-                fragment = new TipsFragment();
-                setTitle(R.string.tip);
-                break;
-        }
-
-        final FragmentManager fragmentManager = getSupportFragmentManager();
-        final FragmentTransaction transaction = fragmentManager.beginTransaction();
-        transaction.replace(R.id.fragment_container, fragment).commitAllowingStateLoss();
-    }
-
-    /**
-     *
-     */
-    private void showLoadingFragment() {
-        Fragment fragment = new DatabaseLoadingFragment();
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-        fragmentTransaction.replace(R.id.fragment_container, fragment);
-        fragmentTransaction.commitAllowingStateLoss();
-        navigation.setVisibility(View.GONE);
-    }
-
-    @Override
-    public void onDatabaseCreateSuccess() {
-        if(isFinishing()) {
-            return;
-        }
-        startFragment(ID.COMMANDS);
-        navigation.setVisibility(View.VISIBLE);
-    }
-
-    @Override
-    public void onDatabaseCreateFail() {
-        Toast.makeText(getBaseContext(), R.string.fragment_datanase_loading_failed_craftin_database, Toast.LENGTH_LONG).show();
-    }
-
-    @IntDef({ID.COMMANDS, ID.BASIC, ID.TIPS})
-    @Retention(RetentionPolicy.SOURCE)
-    @interface ID {
-        int COMMANDS = 0;
-        int BASIC = 1;
-        int TIPS = 2;
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.kt
new file mode 100644
index 0000000..3bc7083
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandBibliothecaActivity.kt
@@ -0,0 +1,111 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.os.Bundle
+import android.support.design.widget.BottomNavigationView
+import android.support.v4.app.Fragment
+import android.support.v7.widget.Toolbar
+import android.view.View
+import android.widget.Toast
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.BasicGroupsFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandsFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.DatabaseLoadingFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.TipsFragment
+import kotlinx.android.synthetic.main.activity_commandbibliotheca.*
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This Activity just holds the NavigationFragmentFragment
+ */
+class CommandBibliothecaActivity : LoadingBaseActivity() {
+
+    private val mOnNavigationItemSelectedListener = BottomNavigationView.OnNavigationItemSelectedListener() {
+        when (it.itemId) {
+            R.id.navigation_commands -> {
+                startFragment(COMMANDS)
+            }
+            R.id.navigation_basics -> {
+                startFragment(BASIC)
+            }
+            R.id.navigation_tips -> {
+                startFragment(TIPS)
+            }
+        }
+        false
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_commandbibliotheca)
+
+        setSupportActionBar(toolbar)
+
+        if (savedInstanceState == null) {
+            showLoadingFragment()
+        } else {
+            val title = savedInstanceState.getCharSequence("title")
+            setTitle(title)
+        }
+
+        activity_navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener)
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        outState.putCharSequence("title", title)
+        super.onSaveInstanceState(outState)
+    }
+
+    private fun startFragment(id: Int) {
+        var fragment: Fragment? = null
+        when (id) {
+            COMMANDS -> {
+                fragment = CommandsFragment()
+                setTitle(R.string.fragment_bibliotheca_commands)
+            }
+            BASIC -> {
+                fragment = BasicGroupsFragment()
+                setTitle(R.string.fragment_bibliotheca_basic)
+            }
+            TIPS -> {
+                fragment = TipsFragment()
+                setTitle(R.string.tip)
+            }
+        }
+
+        val fragmentManager = supportFragmentManager
+        val transaction = fragmentManager.beginTransaction()
+        transaction.replace(R.id.fragment_container, fragment).commitAllowingStateLoss()
+    }
+
+    /**
+     *
+     */
+    private fun showLoadingFragment() {
+        val fragment = DatabaseLoadingFragment()
+        val fragmentManager = supportFragmentManager
+        val fragmentTransaction = fragmentManager.beginTransaction()
+
+        fragmentTransaction.replace(R.id.fragment_container, fragment)
+        fragmentTransaction.commitAllowingStateLoss()
+        activity_navigation.visibility = View.GONE
+    }
+
+    override fun onDatabaseCreateSuccess() {
+        if (isFinishing) {
+            return
+        }
+        startFragment(COMMANDS)
+        activity_navigation.visibility = View.VISIBLE
+    }
+
+    override fun onDatabaseCreateFail() {
+        Toast.makeText(baseContext, R.string.fragment_datanase_loading_failed_craftin_database, Toast.LENGTH_LONG).show()
+    }
+
+    companion object {
+        val COMMANDS = 0
+        val BASIC = 1
+        val TIPS = 2
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java
deleted file mode 100644
index ca82c37..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java
+++ /dev/null
@@ -1,160 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.widget.Toolbar;
-import android.view.MenuItem;
-import android.widget.Toast;
-
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandManFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.DatabaseLoadingFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-
-import io.realm.Realm;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This Activity tries to get a command based on different opening types and starts a
- * CommandManFragment if successfully fetched or finishes immediately
- */
-public class CommandManActivity extends LoadingBaseActivity {
-
-    public final static String EXTRA_COMMAND_ID = "EXTRA_COMMAND_ID"; //NON-NLS
-    public final static String EXTRA_COMMAND_NAME = "EXTRA_COMMAND_NAME"; //NON-NLS
-    public final static String EXTRA_COMMAND_CATEGORY = "EXTRA_COMMAND_CATEGORY"; //NON-NLS
-
-    final static int INVALID = -1;
-    private long mId = INVALID;
-    private String mName = "";
-    private int mCategory = -1;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_command_man);
-
-        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        assert getSupportActionBar() != null;
-
-        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-
-        if (savedInstanceState == null) {
-            showLoadingFragment();
-        } else {
-            CharSequence title = savedInstanceState.getCharSequence("title");
-            setTitle(title);
-        }
-
-        handleIntent();
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                this.finish();
-        }
-
-        return (super.onOptionsItemSelected(item));
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        outState.putCharSequence("title", getTitle());
-        super.onSaveInstanceState(outState);
-    }
-
-    /**
-     * Start man fragment based on the intent data
-     */
-    private void handleIntent() {
-        Intent intent = getIntent();
-        Bundle b = intent.getExtras();
-
-        mId = b != null ? b.getLong(EXTRA_COMMAND_ID, INVALID) : INVALID;
-        mName = b != null ? b.getString(EXTRA_COMMAND_NAME, "") : "";
-
-        String action = intent.getAction();
-        String data = intent.getDataString();
-        if (Intent.ACTION_VIEW.equals(action) && data != null) {
-            String commandId = data.substring(data.lastIndexOf("/") + 1);
-            mName = commandId.substring(6, commandId.length() - 5);
-        }
-
-        Realm realm = Realm.getDefaultInstance();
-        if (mId != INVALID) {
-            Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), mId).findFirst();
-            if(command != null) {
-                mCategory = command.getCategory();
-                mName = command.getName().toUpperCase();
-            }
-        } else {
-            Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), mName).findFirst();
-            if(command != null) {
-                mCategory = command.getCategory();
-                mId = command.getId();
-            }
-        }
-        realm.close();
-    }
-
-
-    /**
-     * Find command name and category by id. If id is INVALID then stop and finish activity
-     *
-     * @param id unique id of command
-     */
-    private void showManFragmentById(long id) {
-        if (id == INVALID) {
-            finish();
-            return;
-        }
-
-        setTitle(mName);
-
-        Fragment fragment = new CommandManFragment();
-
-        // Add unique command ID for fragment
-        Bundle bundle = new Bundle();
-        bundle.putLong(EXTRA_COMMAND_ID, id);
-        bundle.putString(EXTRA_COMMAND_NAME, mName);
-        bundle.putInt(EXTRA_COMMAND_CATEGORY, mCategory);
-        fragment.setArguments(bundle);
-
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-        fragmentTransaction.replace(R.id.fragment_container, fragment);
-        fragmentTransaction.commitAllowingStateLoss();
-    }
-
-    /**
-     *
-     */
-    private void showLoadingFragment() {
-        setTitle(R.string.app_lcl_name);
-
-        Fragment fragment = new DatabaseLoadingFragment();
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-        fragmentTransaction.replace(R.id.fragment_container, fragment);
-        fragmentTransaction.commitAllowingStateLoss();
-    }
-
-    @Override
-    public void onDatabaseCreateSuccess() {
-        showManFragmentById(mId);
-    }
-
-    @Override
-    public void onDatabaseCreateFail() {
-        Toast.makeText(getBaseContext(), R.string.fragment_datanase_loading_failed_craftin_database, Toast.LENGTH_LONG).show();
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.kt
new file mode 100644
index 0000000..6193454
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.kt
@@ -0,0 +1,159 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.content.Intent
+import android.os.Bundle
+import android.support.v4.app.Fragment
+import android.support.v4.app.FragmentManager
+import android.support.v4.app.FragmentTransaction
+import android.support.v7.widget.Toolbar
+import android.view.MenuItem
+import android.view.View
+import android.widget.Toast
+
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandManFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.DatabaseLoadingFragment
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+
+import io.realm.Realm
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This Activity tries to get a command based on different opening types and starts a
+ * CommandManFragment if successfully fetched or finishes immediately
+ */
+class CommandManActivity : LoadingBaseActivity() {
+    private var mId = INVALID.toLong()
+    private var mName = ""
+    private var mCategory = -1
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_command_man)
+
+        val toolbar = findViewById<View>(R.id.toolbar) as Toolbar
+        setSupportActionBar(toolbar)
+
+        assert(supportActionBar != null)
+
+        supportActionBar!!.setDisplayHomeAsUpEnabled(true)
+
+        if (savedInstanceState == null) {
+            showLoadingFragment()
+        } else {
+            val title = savedInstanceState.getCharSequence("title")
+            setTitle(title)
+        }
+
+        handleIntent()
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        when (item.itemId) {
+            android.R.id.home -> this.finish()
+        }
+
+        return super.onOptionsItemSelected(item)
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        outState.putCharSequence("title", title)
+        super.onSaveInstanceState(outState)
+    }
+
+    /**
+     * Start man fragment based on the intent data
+     */
+    private fun handleIntent() {
+        val intent = intent
+        val b = intent.extras
+
+        mId = b?.getLong(EXTRA_COMMAND_ID, INVALID.toLong()) ?: INVALID.toLong()
+        mName = if (b != null) b.getString(EXTRA_COMMAND_NAME, "") else ""
+
+        val action = intent.action
+        val data = intent.dataString
+        if (Intent.ACTION_VIEW == action && data != null) {
+            val commandId = data.substring(data.lastIndexOf("/") + 1)
+            mName = commandId.substring(6, commandId.length - 5)
+        }
+
+        val realm = Realm.getDefaultInstance()
+        if (mId != INVALID.toLong()) {
+            val command = realm.where(Command::class.java).equalTo(Command.ID, mId).findFirst()
+            if (command != null) {
+                mCategory = command.category
+                mName = command.name!!.toUpperCase()
+            }
+        } else {
+            val command = realm.where(Command::class.java).equalTo(Command.NAME, mName).findFirst()
+            if (command != null) {
+                mCategory = command.category
+                mId = command.id.toLong()
+            }
+        }
+        realm.close()
+    }
+
+
+    /**
+     * Find command name and category by id. If id is INVALID then stop and finish activity
+     *
+     * @param id unique id of command
+     */
+    private fun showManFragmentById(id: Long) {
+        if (id == INVALID.toLong()) {
+            finish()
+            return
+        }
+
+        title = mName
+
+        val fragment = CommandManFragment()
+
+        // Add unique command ID for fragment
+        val bundle = Bundle()
+        bundle.putLong(EXTRA_COMMAND_ID, id)
+        bundle.putString(EXTRA_COMMAND_NAME, mName)
+        bundle.putInt(EXTRA_COMMAND_CATEGORY, mCategory)
+        fragment.arguments = bundle
+
+        val fragmentManager = supportFragmentManager
+        val fragmentTransaction = fragmentManager.beginTransaction()
+
+        fragmentTransaction.replace(R.id.fragment_container, fragment)
+        fragmentTransaction.commitAllowingStateLoss()
+    }
+
+    /**
+     *
+     */
+    private fun showLoadingFragment() {
+        setTitle(R.string.app_lcl_name)
+
+        val fragment = DatabaseLoadingFragment()
+        val fragmentManager = supportFragmentManager
+        val fragmentTransaction = fragmentManager.beginTransaction()
+
+        fragmentTransaction.replace(R.id.fragment_container, fragment)
+        fragmentTransaction.commitAllowingStateLoss()
+    }
+
+    override fun onDatabaseCreateSuccess() {
+        showManFragmentById(mId)
+    }
+
+    override fun onDatabaseCreateFail() {
+        Toast.makeText(baseContext, R.string.fragment_datanase_loading_failed_craftin_database, Toast.LENGTH_LONG).show()
+    }
+
+    companion object {
+
+        val EXTRA_COMMAND_ID = "EXTRA_COMMAND_ID" //NON-NLS
+        val EXTRA_COMMAND_NAME = "EXTRA_COMMAND_NAME" //NON-NLS
+        val EXTRA_COMMAND_CATEGORY = "EXTRA_COMMAND_CATEGORY" //NON-NLS
+
+        internal val INVALID = -1
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.java
deleted file mode 100644
index 8fa3a20..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-
-import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.LoadDatabaseAsyncTask;
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnCraftDatabaseListener;
-
-/**
- * Created by Simon Schubert.
- */
-public abstract class LoadingBaseActivity extends AppCompatActivity implements OnCraftDatabaseListener {
-
-    protected LoadDatabaseAsyncTask mAsyncTask;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (savedInstanceState == null) {
-            mAsyncTask = new LoadDatabaseAsyncTask(this, this);
-            mAsyncTask.execute();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-
-        if (isTaskRunning()) {
-            mAsyncTask.cancel(true);
-        }
-    }
-
-    /**
-     * @return true if asynctask is not null and already running
-     */
-    private boolean isTaskRunning() {
-        return (mAsyncTask != null) && (mAsyncTask.getStatus() == AsyncTask.Status.RUNNING);
-    }
-
-    @Override
-    public void onDatabaseCreateSuccess() {
-
-    }
-
-    @Override
-    public void onDatabaseCreateFail() {
-
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.kt
new file mode 100644
index 0000000..3fe9169
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/LoadingBaseActivity.kt
@@ -0,0 +1,47 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.os.AsyncTask
+import android.os.Bundle
+import android.support.v7.app.AppCompatActivity
+
+import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.LoadDatabaseAsyncTask
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnCraftDatabaseListener
+
+/**
+ * Created by Simon Schubert.
+ */
+abstract class LoadingBaseActivity : AppCompatActivity(), OnCraftDatabaseListener {
+
+    protected var mAsyncTask: LoadDatabaseAsyncTask? = null
+
+    /**
+     * @return true if asynctask is not null and already running
+     */
+    private val isTaskRunning: Boolean
+        get() = mAsyncTask != null && mAsyncTask!!.status == AsyncTask.Status.RUNNING
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        if (savedInstanceState == null) {
+            mAsyncTask = LoadDatabaseAsyncTask(this, this)
+            mAsyncTask!!.execute()
+        }
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        if (isTaskRunning) {
+            mAsyncTask!!.cancel(true)
+        }
+    }
+
+    override fun onDatabaseCreateSuccess() {
+
+    }
+
+    override fun onDatabaseCreateFail() {
+
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.java
deleted file mode 100644
index 04da1a2..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.os.Bundle;
-import android.support.v7.widget.Toolbar;
-import android.view.MenuItem;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This Activity just holds the AboutFragment
- */
-public class ScriptChildrenActivity extends BaseActivity {
-
-    public final static String EXTRA_CATEGORY_ID = "EXTRA_CATEGORY_ID";
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_scriptchildren);
-
-        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        assert getSupportActionBar() != null;
-
-        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-
-        // int categoryId = getIntent().getIntExtra(EXTRA_CATEGORY_ID, ScriptGroupItem.GROUP_USER_GROUP);
-        // setTitle(getDescriptionForCategory(categoryId));
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                this.finish();
-        }
-
-        return (super.onOptionsItemSelected(item));
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.kt
new file mode 100644
index 0000000..4abfead
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/ScriptChildrenActivity.kt
@@ -0,0 +1,44 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.os.Bundle
+import android.support.v7.widget.Toolbar
+import android.view.MenuItem
+import android.view.View
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This Activity just holds the AboutFragment
+ */
+class ScriptChildrenActivity : BaseActivity() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_scriptchildren)
+
+        val toolbar = findViewById<View>(R.id.toolbar) as Toolbar
+        setSupportActionBar(toolbar)
+
+        assert(supportActionBar != null)
+
+        supportActionBar!!.setDisplayHomeAsUpEnabled(true)
+
+        // int categoryId = getIntent().getIntExtra(EXTRA_CATEGORY_ID, ScriptGroupItem.GROUP_USER_GROUP);
+        // setTitle(getDescriptionForCategory(categoryId));
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        when (item.itemId) {
+            android.R.id.home -> this.finish()
+        }
+
+        return super.onOptionsItemSelected(item)
+    }
+
+    companion object {
+
+        val EXTRA_CATEGORY_ID = "EXTRA_CATEGORY_ID"
+    }
+
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java
deleted file mode 100644
index c8653d8..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.adapter;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.ListAdapter;
-import android.widget.TextView;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Constants;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.RealmResults;
-
-public class CommandsAdapter extends RealmMultiAdapter<Command> implements ListAdapter {
-
-    private String mQuery = "";
-    private ArrayList<Long> mIds;
-
-    public CommandsAdapter(Context context,
-                           List<RealmResults<Command>> realmResults,
-                           boolean automaticUpdate) {
-        super(context, realmResults, automaticUpdate);
-        updateBookmarkIds();
-    }
-
-    public void setSearchQuery(String searchQuery) {
-        mQuery = searchQuery;
-    }
-
-    public void updateBookmarkIds() {
-        mIds = AppManager.getBookmarkIds(mContext);
-    }
-
-    @Override
-    public View getView(int position, View convertView, ViewGroup parent) {
-        ViewHolder viewHolder;
-        if (convertView == null) {
-            convertView = mInflater.inflate(R.layout.row_command_child,
-                    parent, false);
-            viewHolder = new ViewHolder(convertView);
-            convertView.setTag(viewHolder);
-        } else {
-            viewHolder = (ViewHolder) convertView.getTag();
-        }
-
-        Command item = getItem(position);
-        viewHolder.name.setText(Utils.highlightQueryInsideText(mContext, mQuery, item.getName()));
-        viewHolder.description.setText(Utils.highlightQueryInsideText(mContext, mQuery, item.getDesc().trim()));
-
-        if (mIds.contains((long) item.getId())) {
-            viewHolder.icon.setImageResource(R.drawable.ic_bookmark_black_24dp);
-        } else {
-            viewHolder.icon.setImageResource(getSectionImageResource(item.getCategory()));
-        }
-
-        return convertView;
-    }
-
-    @Override
-    public long getItemId(int i) {
-        return getItem(i).getId();
-    }
-
-    /**
-     * Get section icon
-     *
-     * @param section
-     * @return
-     */
-    private int getSectionImageResource(int section) {
-        switch (section) {
-            case Constants.SECTION_GAMES:
-                return R.drawable.ic_videogame_asset_black_24dp;
-            case Constants.SECTION_SYSTEMADMINANDDEAMON:
-                return R.drawable.ic_security_black_24dp;
-            case Constants.SECTION_USERCOMMANDS:
-                return R.drawable.ic_keyboard_black_24dp;
-            case Constants.SECTION_SYSTEMCALLS:
-                return R.drawable.ic_code_white_48dp;
-            case Constants.SECTION_MISSCELANOUS:
-                return R.drawable.ic_keyboard_black_24dp;
-        }
-        return R.drawable.ic_keyboard_black_24dp;
-    }
-
-    public class ViewHolder {
-        @BindView(R.id.row_command_child_tv_title)
-        TextView name;
-        @BindView(R.id.row_command_child_tv_desc)
-        TextView description;
-        @BindView(R.id.row_command_child_iv_icon)
-        ImageView icon;
-
-        public ViewHolder(View view) {
-            ButterKnife.bind(this, view);
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.kt
new file mode 100644
index 0000000..ebe7b42
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.kt
@@ -0,0 +1,94 @@
+package com.inspiredandroid.linuxcommandbibliotheca.adapter
+
+import android.content.Context
+import android.support.v7.widget.RecyclerView
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageView
+import android.widget.ListAdapter
+import android.widget.TextView
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Constants
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+
+import java.util.ArrayList
+
+import butterknife.BindView
+import butterknife.ButterKnife
+import io.realm.RealmResults
+import kotlinx.android.synthetic.main.row_command_child.view.*
+
+class CommandsAdapter(context: Context,
+                      realmResults: List<RealmResults<Command>>,
+                      automaticUpdate: Boolean) : RealmMultiAdapter<Command>(context, realmResults, automaticUpdate), ListAdapter {
+
+    private var mQuery = ""
+    private var mIds: ArrayList<Long>? = null
+
+    init {
+        updateBookmarkIds()
+    }
+
+    fun setSearchQuery(searchQuery: String) {
+        mQuery = searchQuery
+    }
+
+    fun updateBookmarkIds() {
+        mIds = AppManager.getBookmarkIds(mContext)
+    }
+
+    override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {
+        var convertView = convertView
+        val viewHolder: ViewHolder
+        if (convertView == null) {
+            convertView = mInflater.inflate(R.layout.row_command_child,
+                    parent, false)
+            viewHolder = ViewHolder(convertView)
+            convertView!!.tag = viewHolder
+        } else {
+            viewHolder = convertView.tag as ViewHolder
+        }
+
+        viewHolder.bind(getItem(position))
+
+        return convertView
+    }
+
+    override fun getItemId(i: Int): Long {
+        return getItem(i)!!.id.toLong()
+    }
+
+    /**
+     * Get section icon
+     *
+     * @param section
+     * @return
+     */
+    private fun getSectionImageResource(section: Int): Int {
+        when (section) {
+            Constants.SECTION_GAMES -> return R.drawable.ic_videogame_asset_black_24dp
+            Constants.SECTION_SYSTEMADMINANDDEAMON -> return R.drawable.ic_security_black_24dp
+            Constants.SECTION_USERCOMMANDS -> return R.drawable.ic_keyboard_black_24dp
+            Constants.SECTION_SYSTEMCALLS -> return R.drawable.ic_code_white_48dp
+            Constants.SECTION_MISSCELANOUS -> return R.drawable.ic_keyboard_black_24dp
+        }
+        return R.drawable.ic_keyboard_black_24dp
+    }
+
+    inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
+
+        fun bind(command: Command) {
+            itemView.row_command_child_tv_title.text = Utils.highlightQueryInsideText(mContext, mQuery, command.name)
+            itemView.row_command_child_tv_desc.text = Utils.highlightQueryInsideText(mContext, mQuery, command.desc!!.trim { it <= ' ' })
+
+            if (mIds!!.contains(command.id.toLong())) {
+                itemView.row_command_child_iv_icon.setImageResource(R.drawable.ic_bookmark_black_24dp)
+            } else {
+                itemView.row_command_child_iv_icon.setImageResource(getSectionImageResource(command.category))
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
deleted file mode 100644
index 37ab842..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
+++ /dev/null
@@ -1,177 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.adapter;
-
-import android.app.Activity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseExpandableListAdapter;
-import android.widget.TextView;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-import com.inspiredandroid.linuxcommandbibliotheca.view.TerminalTextView;
-
-import java.util.ArrayList;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.Realm;
-
-/**
- * Created by Simon Schubert
- */
-public class ManExpandableListAdapter extends BaseExpandableListAdapter {
-
-    public ArrayList<ArrayList<CharSequence>> mChild;
-    private Activity mContext;
-    private ArrayList<String> mGroup;
-
-    public ManExpandableListAdapter(Activity context, ArrayList<String> group, ArrayList<ArrayList<CharSequence>> child) {
-        mContext = context;
-        mChild = child;
-        mGroup = group;
-    }
-
-    public CharSequence getChild(int groupPosition, int childPosition) {
-        return mChild.get(groupPosition).get(childPosition);
-    }
-
-    @Override
-    public long getChildId(int groupPosition, int childPosition) {
-        return childPosition;
-    }
-
-    @Override
-    public View getChildView(final int groupPosition, final int childPosition,
-                             boolean isLastChild, View convertView, ViewGroup parent) {
-        CharSequence description = getChild(groupPosition, childPosition);
-        CommandViewHolder holder;
-
-        if (convertView == null) {
-            LayoutInflater inflater = mContext.getLayoutInflater();
-            convertView = inflater.inflate(R.layout.row_man_child, parent, false);
-            holder = new CommandViewHolder(convertView);
-            convertView.setTag(holder);
-        } else {
-            holder = (CommandViewHolder) convertView.getTag();
-        }
-
-        holder.desc.setText(description);
-
-        if (getGroup(groupPosition).toString().toUpperCase().equals("SEE ALSO")) {
-            holder.desc.setCommands(extractCommandsFromDescription(description.toString()));
-        }
-
-        return convertView;
-    }
-
-    @Override
-    public int getChildrenCount(int groupPosition) {
-        return mChild.get(groupPosition).size();
-    }
-
-    @Override
-    public Object getGroup(int groupPosition) {
-        return mGroup.get(groupPosition);
-    }
-
-    @Override
-    public int getGroupCount() {
-        return mGroup.size();
-    }
-
-    @Override
-    public long getGroupId(int groupPosition) {
-        return groupPosition;
-    }
-
-    @Override
-    public View getGroupView(int groupPosition, boolean isExpanded,
-                             View convertView, ViewGroup parent) {
-        String title = (String) getGroup(groupPosition);
-        CommandGroupViewHolder holder;
-
-        if (convertView == null) {
-            LayoutInflater inflater = mContext.getLayoutInflater();
-            convertView = inflater.inflate(R.layout.row_man_group, parent, false);
-            holder = new CommandGroupViewHolder(convertView);
-            convertView.setTag(holder);
-        } else {
-            holder = (CommandGroupViewHolder) convertView.getTag();
-        }
-
-        holder.title.setText(title.toUpperCase());
-
-        return convertView;
-    }
-
-    @Override
-    public boolean hasStableIds() {
-        return true;
-    }
-
-    @Override
-    public boolean isChildSelectable(int groupPosition, int childPosition) {
-        return true;
-    }
-
-    @Override
-    public boolean areAllItemsEnabled() {
-        return false;
-    }
-
-    /**
-     * Search for commands and return list of commands which exist in database
-     *
-     * @param description
-     * @return
-     */
-    private String[] extractCommandsFromDescription(String description) {
-        Realm realm = Realm.getDefaultInstance();
-
-        // match "command(category)" e.g: gzip(1)
-        Pattern p = Pattern.compile("[[:graph:]]+\\s?\\(\\w\\)");
-        Matcher m = p.matcher(description);
-
-        // loop results and ad if command exists in db
-        ArrayList<String> tmp = new ArrayList<>();
-        while (m.find()) {
-            String extractedCommand = m.group(0).substring(0, m.group(0).length() - 3).trim();
-            Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), extractedCommand).findFirst();
-            if (command != null) {
-                tmp.add(extractedCommand);
-            }
-        }
-
-        // convert String[] to ArrayList
-        String[] commands = new String[tmp.size()];
-        for (int i = 0; i < tmp.size(); i++) {
-            String cmd = tmp.get(i);
-            commands[i] = cmd;
-        }
-
-        realm.close();
-
-        return commands;
-    }
-
-    class CommandViewHolder {
-        @BindView(R.id.row_man_child_tv_description)
-        TerminalTextView desc;
-
-        CommandViewHolder(View view) {
-            ButterKnife.bind(this, view);
-        }
-    }
-
-    class CommandGroupViewHolder {
-        @BindView(R.id.row_man_group_tv_title)
-        TextView title;
-
-        CommandGroupViewHolder(View view) {
-            ButterKnife.bind(this, view);
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.kt
new file mode 100644
index 0000000..d1914dc
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.kt
@@ -0,0 +1,142 @@
+package com.inspiredandroid.linuxcommandbibliotheca.adapter
+
+import android.app.Activity
+import android.support.v4.app.FragmentActivity
+import android.support.v7.widget.RecyclerView
+import android.view.View
+import android.view.ViewGroup
+import android.widget.BaseExpandableListAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+import io.realm.Realm
+import kotlinx.android.synthetic.main.row_man_child.view.*
+import kotlinx.android.synthetic.main.row_man_group.view.*
+import java.util.*
+import java.util.regex.Pattern
+
+/**
+ * Created by Simon Schubert
+ */
+class ManExpandableListAdapter(private val mContext: FragmentActivity, private val mGroup: ArrayList<String>, var mChild: ArrayList<ArrayList<CharSequence>>) : BaseExpandableListAdapter() {
+
+    override fun getChild(groupPosition: Int, childPosition: Int): CharSequence {
+        return mChild[groupPosition][childPosition]
+    }
+
+    override fun getChildId(groupPosition: Int, childPosition: Int): Long {
+        return childPosition.toLong()
+    }
+
+    override fun getChildView(groupPosition: Int, childPosition: Int,
+                              isLastChild: Boolean, convertView: View?, parent: ViewGroup): View {
+        var convertView = convertView
+        val description = getChild(groupPosition, childPosition)
+        val holder: CommandViewHolder
+
+        if (convertView == null) {
+            val inflater = mContext.layoutInflater
+            convertView = inflater.inflate(R.layout.row_man_child, parent, false)
+            holder = CommandViewHolder(convertView)
+            convertView!!.tag = holder
+        } else {
+            holder = convertView.tag as CommandViewHolder
+        }
+
+        holder.bind(description, groupPosition)
+
+        return convertView
+    }
+
+    override fun getChildrenCount(groupPosition: Int): Int {
+        return mChild[groupPosition].size
+    }
+
+    override fun getGroup(groupPosition: Int): Any {
+        return mGroup[groupPosition]
+    }
+
+    override fun getGroupCount(): Int {
+        return mGroup.size
+    }
+
+    override fun getGroupId(groupPosition: Int): Long {
+        return groupPosition.toLong()
+    }
+
+    override fun getGroupView(groupPosition: Int, isExpanded: Boolean,
+                              convertView: View?, parent: ViewGroup): View {
+        var convertView = convertView
+        val title = getGroup(groupPosition) as String
+        val holder: CommandGroupViewHolder
+
+        if (convertView == null) {
+            val inflater = mContext.layoutInflater
+            convertView = inflater.inflate(R.layout.row_man_group, parent, false)
+            holder = CommandGroupViewHolder(convertView)
+            convertView!!.tag = holder
+        } else {
+            holder = convertView.tag as CommandGroupViewHolder
+        }
+
+        holder.bind(title)
+
+        return convertView
+    }
+
+    override fun hasStableIds(): Boolean {
+        return true
+    }
+
+    override fun isChildSelectable(groupPosition: Int, childPosition: Int): Boolean {
+        return true
+    }
+
+    override fun areAllItemsEnabled(): Boolean {
+        return false
+    }
+
+    /**
+     * Search for commands and return list of commands which exist in database
+     *
+     * @param description
+     * @return
+     */
+    private fun extractCommandsFromDescription(description: String): Array<String> {
+        val realm = Realm.getDefaultInstance()
+
+        // match "command(category)" e.g: gzip(1)
+        val p = Pattern.compile("[[:graph:]]+\\s?\\(\\w\\)")
+        val m = p.matcher(description)
+
+        // loop results and ad if command exists in db
+        val tmp = ArrayList<String>()
+        while (m.find()) {
+            val extractedCommand = m.group(0).substring(0, m.group(0).length - 3).trim { it <= ' ' }
+            val command = realm.where(Command::class.java).equalTo(Command.NAME, extractedCommand).findFirst()
+            if (command != null) {
+                tmp.add(extractedCommand)
+            }
+        }
+
+        realm.close()
+
+        return tmp.toTypedArray()
+    }
+
+    internal inner class CommandViewHolder(view: View) : RecyclerView.ViewHolder(view) {
+
+        fun bind(description: CharSequence, groupPosition: Int) {
+            itemView.row_man_child_tv_description.text = description
+            if (getGroup(groupPosition).toString().toUpperCase() == "SEE ALSO") {
+                itemView.row_man_child_tv_description.setCommands(extractCommandsFromDescription(description.toString()))
+            }
+        }
+    }
+
+    internal inner class CommandGroupViewHolder(view: View) : RecyclerView.ViewHolder(view) {
+
+        fun bind(title: String) {
+            itemView.row_man_group_tv_title.text = title.toUpperCase()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java
deleted file mode 100644
index 79e9b9c..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.adapter;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v7.widget.RecyclerView;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.google.firebase.analytics.FirebaseAnalytics;
-import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandChildModel;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel;
-import com.inspiredandroid.linuxcommandbibliotheca.view.TerminalTextView;
-
-import java.util.HashMap;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.OrderedRealmCollection;
-import io.realm.RealmRecyclerViewAdapter;
-
-/**
- * Created by simon on 23/01/17.
- */
-public class ScriptChildrenAdapter extends RealmRecyclerViewAdapter<CommandGroupModel, ScriptChildrenAdapter.ViewHolder> {
-
-    private HashMap<Integer, Boolean> expanded;
-    private FirebaseAnalytics mFirebaseAnalytics;
-
-    public ScriptChildrenAdapter(@Nullable OrderedRealmCollection<CommandGroupModel> data, boolean autoUpdate, FirebaseAnalytics firebaseAnalytics) {
-        super(data, autoUpdate);
-        expanded = new HashMap<>();
-        mFirebaseAnalytics = firebaseAnalytics;
-    }
-
-    @Override
-    public ScriptChildrenAdapter.ViewHolder onCreateViewHolder(ViewGroup parent,
-                                                               int viewType) {
-        View v = LayoutInflater.from(parent.getContext())
-                .inflate(R.layout.row_scriptchild, parent, false);
-        return new ScriptChildrenAdapter.ViewHolder(v);
-    }
-
-    @Override
-    public void onBindViewHolder(ScriptChildrenAdapter.ViewHolder viewHolder, int position) {
-        CommandGroupModel item = getData().get(position);
-
-        viewHolder.name.setText(item.getDesc());
-        viewHolder.icon.setImageResource(item.getImageResourceId());
-        viewHolder.details.removeAllViews();
-        for (CommandChildModel command : item.getCommands()) {
-            View v = LayoutInflater.from(viewHolder.itemView.getContext()).inflate(R.layout.row_scriptchild_child, viewHolder.details, false);
-
-            TerminalTextView tv = ((TerminalTextView) v.findViewById(R.id.row_scriptdescription_child_tv_description));
-            tv.setText(command.getCommand());
-            tv.setCommands(CommandChildModel.Companion.getMans(command));
-
-            ImageButton btn = (ImageButton) v.findViewById(R.id.row_scriptdescription_child_iv_share);
-            btn.setOnClickListener(view -> startShareActivity(view.getContext(), command));
-
-            viewHolder.details.addView(v);
-        }
-        viewHolder.details.setVisibility(isExpanded(position) ? View.VISIBLE : View.GONE);
-        viewHolder.itemView.setOnClickListener(view -> {
-            expanded.put(position, !isExpanded(position));
-            notifyItemChanged(position);
-            trackSelectContent(item.getDesc());
-        });
-    }
-
-    private void trackSelectContent(String id) {
-        if(BuildConfig.DEBUG) {
-            return;
-        }
-        Bundle bundle = new Bundle();
-        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id);
-        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Basic Group");
-        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);
-    }
-
-    private boolean isExpanded(int position) {
-        return expanded.containsKey(position) && expanded.get(position);
-    }
-
-    /**
-     * let user share the command with any compatible app
-     *
-     * @param command
-     */
-    private void startShareActivity(Context context, CommandChildModel command) {
-            Intent intent = new Intent(Intent.ACTION_SEND);
-            intent.setType("text/plain");
-            intent.putExtra(android.content.Intent.EXTRA_TEXT, command.getCommand());
-        try {
-            context.startActivity(intent);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    class ViewHolder extends RecyclerView.ViewHolder {
-        @BindView(R.id.row_scriptgroup_tv_title)
-        TextView name;
-        @BindView(R.id.row_scriptgroup_iv_icon)
-        ImageView icon;
-        @BindView(R.id.row_scriptgroup_ll_detail)
-        LinearLayout details;
-
-        ViewHolder(View view) {
-            super(view);
-            ButterKnife.bind(this, view);
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.kt
new file mode 100644
index 0000000..801a4ef
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.kt
@@ -0,0 +1,110 @@
+package com.inspiredandroid.linuxcommandbibliotheca.adapter
+
+import android.content.Context
+import android.content.Intent
+import android.os.Bundle
+import android.support.v7.widget.RecyclerView
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageButton
+import android.widget.ImageView
+import android.widget.LinearLayout
+import android.widget.TextView
+
+import com.google.firebase.analytics.FirebaseAnalytics
+import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandChildModel
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel
+import com.inspiredandroid.linuxcommandbibliotheca.view.TerminalTextView
+
+import java.util.HashMap
+
+import butterknife.BindView
+import butterknife.ButterKnife
+import io.realm.OrderedRealmCollection
+import io.realm.RealmRecyclerViewAdapter
+import kotlinx.android.synthetic.main.row_scriptchild.view.*
+
+/**
+ * Created by simon on 23/01/17.
+ */
+class ScriptChildrenAdapter(data: OrderedRealmCollection<CommandGroupModel>?, autoUpdate: Boolean, private val mFirebaseAnalytics: FirebaseAnalytics) : RealmRecyclerViewAdapter<CommandGroupModel, ScriptChildrenAdapter.ScriptViewHolder>(data, autoUpdate) {
+
+    private val expanded: HashMap<Int, Boolean>
+
+    init {
+        expanded = HashMap()
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup,
+                                    viewType: Int): ScriptViewHolder {
+        val v = LayoutInflater.from(parent.context)
+                .inflate(R.layout.row_scriptchild, parent, false)
+        return ScriptViewHolder(v)
+    }
+
+    override fun onBindViewHolder(scriptViewHolder: ScriptViewHolder, position: Int) {
+        val item = data!![position]
+
+        scriptViewHolder.bind(item);
+    }
+
+    private fun trackSelectContent(id: String?) {
+        if (BuildConfig.DEBUG) {
+            return
+        }
+        val bundle = Bundle()
+        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id)
+        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Basic Group")
+        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)
+    }
+
+    private fun isExpanded(position: Int): Boolean {
+        return expanded.containsKey(position) && expanded[position]!!
+    }
+
+    /**
+     * let user share the command with any compatible app
+     *
+     * @param command
+     */
+    private fun startShareActivity(context: Context, command: CommandChildModel) {
+        val intent = Intent(Intent.ACTION_SEND)
+        intent.type = "text/plain"
+        intent.putExtra(android.content.Intent.EXTRA_TEXT, command.command)
+        try {
+            context.startActivity(intent)
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+    }
+
+    inner class ScriptViewHolder(view: View) : RecyclerView.ViewHolder(view) {
+
+        fun bind(item: CommandGroupModel) {
+            itemView.row_scriptgroup_tv_title.text = item.desc
+            itemView.row_scriptgroup_iv_icon.setImageResource(item.imageResourceId)
+            itemView.row_scriptgroup_ll_detail.removeAllViews()
+            for (command in item.commands!!) {
+                val v = LayoutInflater.from(itemView.context).inflate(R.layout.row_scriptchild_child, itemView.row_scriptgroup_ll_detail, false)
+
+                val tv = v.findViewById<View>(R.id.row_scriptdescription_child_tv_description) as TerminalTextView
+                tv.text = command.command
+                tv.setCommands(CommandChildModel.getMans(command))
+
+                val btn = v.findViewById<View>(R.id.row_scriptdescription_child_iv_share) as ImageButton
+                btn.setOnClickListener { view -> startShareActivity(view.context, command) }
+
+                itemView.row_scriptgroup_ll_detail.addView(v)
+            }
+            itemView.row_scriptgroup_ll_detail.visibility = if (isExpanded(position)) View.VISIBLE else View.GONE
+            itemView.setOnClickListener { view ->
+                expanded[position] = !isExpanded(position)
+                notifyItemChanged(position)
+                trackSelectContent(item.desc)
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.java
deleted file mode 100644
index 490648d..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.adapter;
-
-import android.support.annotation.Nullable;
-import android.support.v7.widget.RecyclerView;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnListClickListener;
-import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.OrderedRealmCollection;
-import io.realm.RealmRecyclerViewAdapter;
-
-/**
- * Created by simon on 23.11.15.
- */
-public class ScriptGroupsAdapter extends RealmRecyclerViewAdapter<BasicGroupModel, ScriptGroupsAdapter.ViewHolder> {
-
-    private OnListClickListener mOnListClickListener;
-
-    public ScriptGroupsAdapter(@Nullable OrderedRealmCollection<BasicGroupModel> data, boolean autoUpdate) {
-        super(data, autoUpdate);
-    }
-
-    public void setOnListClickListener(OnListClickListener listener) {
-        mOnListClickListener = listener;
-    }
-
-    @Override
-    public ScriptGroupsAdapter.ViewHolder onCreateViewHolder(ViewGroup parent,
-                                                             int viewType) {
-        View v = LayoutInflater.from(parent.getContext())
-                .inflate(R.layout.row_scriptgroup, parent, false);
-        return new ViewHolder(v);
-    }
-
-    @Override
-    public void onBindViewHolder(ViewHolder viewHolder, int position) {
-        BasicGroupModel item = getData().get(position);
-
-        viewHolder.name.setText(item.getTitle());
-        viewHolder.icon.setImageResource(item.getIconResourceId());
-    }
-
-    class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-        @BindView(R.id.row_scriptgroup_tv_title)
-        TextView name;
-        @BindView(R.id.row_scriptgroup_iv_icon)
-        ImageView icon;
-
-        ViewHolder(View view) {
-            super(view);
-            ButterKnife.bind(this, view);
-            view.setOnClickListener(this);
-        }
-
-        @Override
-        public void onClick(View view) {
-            if (mOnListClickListener != null) {
-                mOnListClickListener.onClick(getData().get(getAdapterPosition()).getId());
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.kt
new file mode 100644
index 0000000..830b159
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptGroupsAdapter.kt
@@ -0,0 +1,55 @@
+package com.inspiredandroid.linuxcommandbibliotheca.adapter
+
+import android.support.v7.widget.RecyclerView
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnListClickListener
+import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel
+import io.realm.OrderedRealmCollection
+import io.realm.RealmRecyclerViewAdapter
+import kotlinx.android.synthetic.main.row_scriptgroup.view.*
+
+/**
+ * Created by simon on 23.11.15.
+ */
+class ScriptGroupsAdapter(data: OrderedRealmCollection<BasicGroupModel>?, autoUpdate: Boolean) : RealmRecyclerViewAdapter<BasicGroupModel, ScriptGroupsAdapter.ScriptViewHolder>(data, autoUpdate) {
+
+    private var mOnListClickListener: OnListClickListener? = null
+
+    fun setOnListClickListener(listener: OnListClickListener) {
+        mOnListClickListener = listener
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup,
+                                    viewType: Int): ScriptViewHolder {
+        val v = LayoutInflater.from(parent.context)
+                .inflate(R.layout.row_scriptgroup, parent, false)
+        return ScriptViewHolder(v)
+    }
+
+    override fun onBindViewHolder(viewHolder: ScriptViewHolder, position: Int) {
+        val item = data!![position]
+
+        viewHolder.bind(item)
+    }
+
+    inner class ScriptViewHolder(view: View) : RecyclerView.ViewHolder(view), View.OnClickListener {
+
+        init {
+            view.setOnClickListener(this)
+        }
+
+        fun bind(item: BasicGroupModel) {
+            itemView.row_scriptgroup_tv_title.text = item.title
+            itemView.row_scriptgroup_iv_icon.setImageResource(item.iconResourceId)
+        }
+
+        override fun onClick(view: View) {
+            if (mOnListClickListener != null) {
+                mOnListClickListener!!.onClick(data!![adapterPosition].id)
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.java
deleted file mode 100644
index caed5a9..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.java
+++ /dev/null
@@ -1,88 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
-
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-
-/**
- * Created by Simon Schubert on 23.11.15.
- * Talk about the App, Licenses and other projects
- */
-public class AboutFragment extends Fragment {
-
-    public AboutFragment() {
-
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_about, container, false);
-
-        ButterKnife.bind(this, view);
-
-        return view;
-    }
-
-    @OnClick(R.id.fragment_about_tv_icons8)
-    public void startIcons8() {
-        try {
-            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.icons8.com"));
-            startActivity(intent);
-        } catch (ActivityNotFoundException ignored) {
-        }
-    }
-
-    @OnClick(R.id.fragment_about_btn_bimo)
-    public void startBimo() {
-        startAppMarketActivity(Utils.PACKAGE_BIMO);
-    }
-
-    @OnClick(R.id.fragment_about_btn_orcgenocide)
-    public void startOrcGenocide() {
-        startAppMarketActivity(Utils.PACKAGE_ORCGENOCIDE);
-    }
-
-    @OnClick(R.id.fragment_about_btn_quiz)
-    public void startQuiz() {
-        startAppMarketActivity(Utils.PACKAGE_QUIZ);
-    }
-
-    @OnClick(R.id.fragment_about_btn_remote)
-    public void startRemote() {
-        startAppMarketActivity(Utils.PACKAGE_LINUXREMOTE);
-    }
-
-    @OnClick(R.id.fragment_about_btn_burger)
-    public void startBurger() {
-        startAppMarketActivity(Utils.PACKAGE_BURGER);
-    }
-
-    @OnClick(R.id.fragment_about_btn_rate)
-    public void startRateActivity() {
-        startAppMarketActivity(Utils.PACKAGE_COMMANDLIBRARY);
-    }
-
-    /**
-     * Show app in the Play Store. If Play Store is not installed, show it in the browser instead.
-     *
-     * @param appPackageName package mName
-     */
-    private void startAppMarketActivity(final String appPackageName) {
-        try {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
-        } catch (android.content.ActivityNotFoundException e) {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.kt
new file mode 100644
index 0000000..7758a0d
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AboutFragment.kt
@@ -0,0 +1,80 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.content.ActivityNotFoundException
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.support.v4.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils
+
+import butterknife.OnClick
+
+/**
+ * Created by Simon Schubert on 23.11.15.
+ * Talk about the App, Licenses and other projects
+ */
+class AboutFragment : Fragment() {
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+
+        return inflater.inflate(R.layout.fragment_about, container, false)
+    }
+
+    // @OnClick(R.id.fragment_about_tv_icons8)
+    fun startIcons8() {
+        try {
+            val intent = Intent(Intent.ACTION_VIEW, Uri.parse("https://www.icons8.com"))
+            startActivity(intent)
+        } catch (ignored: ActivityNotFoundException) {
+        }
+    }
+
+    // @OnClick(R.id.fragment_about_btn_bimo)
+    fun startBimo() {
+        startAppMarketActivity(Utils.PACKAGE_BIMO)
+    }
+
+    // @OnClick(R.id.fragment_about_btn_orcgenocide)
+    fun startOrcGenocide() {
+        startAppMarketActivity(Utils.PACKAGE_ORCGENOCIDE)
+    }
+
+    // @OnClick(R.id.fragment_about_btn_quiz)
+    fun startQuiz() {
+        startAppMarketActivity(Utils.PACKAGE_QUIZ)
+    }
+
+    // @OnClick(R.id.fragment_about_btn_remote)
+    fun startRemote() {
+        startAppMarketActivity(Utils.PACKAGE_LINUXREMOTE)
+    }
+
+    // @OnClick(R.id.fragment_about_btn_burger)
+    fun startBurger() {
+        startAppMarketActivity(Utils.PACKAGE_BURGER)
+    }
+
+    // @OnClick(R.id.fragment_about_btn_rate)
+    fun startRateActivity() {
+        startAppMarketActivity(Utils.PACKAGE_COMMANDLIBRARY)
+    }
+
+    /**
+     * Show app in the Play Store. If Play Store is not installed, show it in the browser instead.
+     *
+     * @param appPackageName package mName
+     */
+    private fun startAppMarketActivity(appPackageName: String) {
+        try {
+            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=$appPackageName")))
+        } catch (e: android.content.ActivityNotFoundException) {
+            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=$appPackageName")))
+        }
+
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.java
deleted file mode 100644
index 4f5a6a6..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.os.Bundle;
-
-import com.google.android.gms.appindexing.Action;
-import com.google.android.gms.appindexing.AppIndex;
-import com.google.android.gms.common.api.GoogleApiClient;
-
-/**
- * Created by simon on 20.11.15.
- */
-public abstract class AppIndexFragment extends SuperFragment {
-
-    private GoogleApiClient mClient;
-
-    /**
-     * Title for current page, shown in autocompletion UI
-     *
-     * @return
-     */
-    public abstract String getAppIndexingTitle();
-
-    /**
-     * Construct the Action performed by the user
-     *
-     * @return
-     */
-    public abstract Action getAppIndexingAction();
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mClient = new GoogleApiClient.Builder(getContext()).addApi(AppIndex.API).build();
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-
-        mClient.connect();
-        AppIndex.AppIndexApi.start(mClient, getAppIndexingAction());
-    }
-
-    @Override
-    public void onStop() {
-        AppIndex.AppIndexApi.end(mClient, getAppIndexingAction());
-        mClient.disconnect();
-
-        super.onStop();
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.kt
new file mode 100644
index 0000000..f75e327
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/AppIndexFragment.kt
@@ -0,0 +1,50 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.os.Bundle
+
+import com.google.android.gms.appindexing.Action
+import com.google.android.gms.appindexing.AppIndex
+import com.google.android.gms.common.api.GoogleApiClient
+
+/**
+ * Created by simon on 20.11.15.
+ */
+abstract class AppIndexFragment : SuperFragment() {
+
+    private var mClient: GoogleApiClient? = null
+
+    /**
+     * Title for current page, shown in autocompletion UI
+     *
+     * @return
+     */
+    abstract fun getAppIndexingTitle(): String
+
+    /**
+     * Construct the Action performed by the user
+     *
+     * @return
+     */
+    abstract fun getAppIndexingAction(): Action
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        mClient = GoogleApiClient.Builder(context!!).addApi(AppIndex.API).build()
+    }
+
+    override fun onStart() {
+        super.onStart()
+
+        mClient!!.connect()
+        AppIndex.AppIndexApi.start(mClient, getAppIndexingAction())
+    }
+
+    override fun onStop() {
+        AppIndex.AppIndexApi.end(mClient, getAppIndexingAction())
+        mClient!!.disconnect()
+
+        super.onStop()
+    }
+
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.java
deleted file mode 100644
index ee70a23..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.java
+++ /dev/null
@@ -1,170 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.app.SearchManager;
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.view.MenuItemCompat;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.support.v7.widget.SearchView;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.google.firebase.analytics.FirebaseAnalytics;
-import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.ScriptChildrenActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.ScriptChildrenAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.SearchAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel;
-
-import java.text.Normalizer;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.Case;
-import io.realm.Realm;
-import io.realm.RealmQuery;
-import io.realm.RealmResults;
-import io.realm.Sort;
-
-/**
- * Created by Simon Schubert
- */
-public class BasicChildrenFragment extends SuperFragment {
-
-    @BindView(R.id.fragment_scriptchildren_rv)
-    RecyclerView mRecyclerView;
-    private Realm mRealm;
-    private ScriptChildrenAdapter mAdapter;
-    private SearchAdapter mSearchAdapter;
-    private FirebaseAnalytics mFirebaseAnalytics;
-
-    public BasicChildrenFragment() {
-    }
-
-    @Override
-    public void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setHasOptionsMenu(true);
-
-        mRealm = Realm.getDefaultInstance();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_scriptchildren, container, false);
-
-        ButterKnife.bind(this, view);
-
-        int categoryId = getActivity().getIntent().getIntExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, 0);
-
-        BasicGroupModel basicGroupModel = mRealm.where(BasicGroupModel.class).equalTo("id", categoryId).findFirst();
-        RealmResults<CommandGroupModel> groups = basicGroupModel.getGroups().sort("votes", Sort.DESCENDING);
-
-        getActivity().setTitle(basicGroupModel.getTitle());
-
-
-        mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());
-
-        mAdapter = new ScriptChildrenAdapter(groups, false, mFirebaseAnalytics);
-        mRecyclerView.setAdapter(mAdapter);
-        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
-
-        mSearchAdapter = new SearchAdapter(null, false, mFirebaseAnalytics);
-
-        trackSelectContent(basicGroupModel.getTitle());
-
-        return view;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-
-        mRealm.close();
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.basic, menu);
-
-        MenuItem item = menu.findItem(R.id.search);
-        SearchView searchView = (SearchView) MenuItemCompat.getActionView(item);
-
-        SearchManager searchManager = (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
-        searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
-
-        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
-
-            @Override
-            public boolean onQueryTextSubmit(String s) {
-                return false;
-            }
-
-            @Override
-            public boolean onQueryTextChange(String query) {
-                if (!isAdded()) {
-                    return true;
-                }
-                if (query.length() > 0) {
-                    String normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
-                    search(normalizedText);
-                } else {
-                    resetSearchResults();
-                }
-
-                return true;
-            }
-        });
-        MenuItemCompat.setOnActionExpandListener(item, new MenuItemCompat.OnActionExpandListener() {
-            @Override
-            public boolean onMenuItemActionExpand(MenuItem item) {
-                return true;
-            }
-
-            @Override
-            public boolean onMenuItemActionCollapse(MenuItem item) {
-                resetSearchResults();
-                return true;
-            }
-        });
-    }
-
-    private void trackSelectContent(String id) {
-        if(BuildConfig.DEBUG) {
-            return;
-        }
-        Bundle bundle = new Bundle();
-        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id);
-        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Basic Category");
-        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);
-    }
-
-    private void search(String query) {
-        String[] words = query.split("[,\\s]+");
-
-        RealmQuery<CommandGroupModel> realmQuery = mRealm.where(CommandGroupModel.class).beginGroup();
-
-        for (String word : words) {
-            realmQuery.contains("desc", word, Case.INSENSITIVE);
-        }
-
-        RealmResults<CommandGroupModel> allGroups = realmQuery.endGroup().sort("votes").findAll();
-        mSearchAdapter.setQuery(query);
-        mSearchAdapter.updateData(allGroups);
-        mRecyclerView.setAdapter(mSearchAdapter);
-    }
-
-    private void resetSearchResults() {
-        mRecyclerView.setAdapter(mAdapter);
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.kt
new file mode 100644
index 0000000..ceb3c02
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicChildrenFragment.kt
@@ -0,0 +1,154 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.app.SearchManager
+import android.content.Context
+import android.os.Bundle
+import android.support.v4.view.MenuItemCompat
+import android.support.v7.widget.LinearLayoutManager
+import android.support.v7.widget.RecyclerView
+import android.support.v7.widget.SearchView
+import android.view.LayoutInflater
+import android.view.Menu
+import android.view.MenuInflater
+import android.view.MenuItem
+import android.view.View
+import android.view.ViewGroup
+
+import com.google.firebase.analytics.FirebaseAnalytics
+import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.ScriptChildrenActivity
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.ScriptChildrenAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.SearchAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel
+
+import java.text.Normalizer
+
+import butterknife.BindView
+import io.realm.Case
+import io.realm.Realm
+import io.realm.Sort
+import kotlinx.android.synthetic.main.fragment_scriptchildren.*
+
+/**
+ * Created by Simon Schubert
+ */
+class BasicChildrenFragment : SuperFragment() {
+
+    private var mRealm: Realm? = null
+    private var mAdapter: ScriptChildrenAdapter? = null
+    private var mSearchAdapter: SearchAdapter? = null
+    private var mFirebaseAnalytics: FirebaseAnalytics? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        setHasOptionsMenu(true)
+
+        mRealm = Realm.getDefaultInstance()
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        return inflater.inflate(R.layout.fragment_scriptchildren, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        val categoryId = activity!!.intent.getIntExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, 0)
+
+        val basicGroupModel = mRealm!!.where(BasicGroupModel::class.java).equalTo("id", categoryId).findFirst()
+        val groups = basicGroupModel!!.groups!!.sort("votes", Sort.DESCENDING)
+
+        activity!!.title = basicGroupModel.title
+
+
+        mFirebaseAnalytics = FirebaseAnalytics.getInstance(context!!)
+
+        mAdapter = ScriptChildrenAdapter(groups, false, mFirebaseAnalytics!!)
+        fragment_scriptchildren_rv.adapter = mAdapter
+        fragment_scriptchildren_rv.layoutManager = LinearLayoutManager(context)
+
+        mSearchAdapter = SearchAdapter(null, false, mFirebaseAnalytics)
+
+        trackSelectContent(basicGroupModel.title)
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mRealm!!.close()
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
+        inflater!!.inflate(R.menu.basic, menu)
+
+        val item = menu!!.findItem(R.id.search)
+        val searchView = MenuItemCompat.getActionView(item) as SearchView
+
+        val searchManager = activity!!.getSystemService(Context.SEARCH_SERVICE) as SearchManager
+        searchView.setSearchableInfo(searchManager.getSearchableInfo(activity!!.componentName))
+
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+
+            override fun onQueryTextSubmit(s: String): Boolean {
+                return false
+            }
+
+            override fun onQueryTextChange(query: String): Boolean {
+                if (!isAdded) {
+                    return true
+                }
+                if (query.length > 0) {
+                    val normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replace("\\p{InCombiningDiacriticalMarks}+".toRegex(), "").toLowerCase()
+                    search(normalizedText)
+                } else {
+                    resetSearchResults()
+                }
+
+                return true
+            }
+        })
+        MenuItemCompat.setOnActionExpandListener(item, object : MenuItemCompat.OnActionExpandListener {
+            override fun onMenuItemActionExpand(item: MenuItem): Boolean {
+                return true
+            }
+
+            override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
+                resetSearchResults()
+                return true
+            }
+        })
+    }
+
+    private fun trackSelectContent(id: String?) {
+        if (BuildConfig.DEBUG) {
+            return
+        }
+        val bundle = Bundle()
+        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, id)
+        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Basic Category")
+        mFirebaseAnalytics!!.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)
+    }
+
+    private fun search(query: String) {
+        val words = query.split("[,\\s]+".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+
+        val realmQuery = mRealm!!.where(CommandGroupModel::class.java).beginGroup()
+
+        for (word in words) {
+            realmQuery.contains("desc", word, Case.INSENSITIVE)
+        }
+
+        val allGroups = realmQuery.endGroup().sort("votes").findAll()
+        mSearchAdapter!!.setQuery(query)
+        mSearchAdapter!!.updateData(allGroups)
+        fragment_scriptchildren_rv.adapter = mSearchAdapter
+    }
+
+    private fun resetSearchResults() {
+        fragment_scriptchildren_rv.adapter = mAdapter
+    }
+
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.java
deleted file mode 100644
index 05471be..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.java
+++ /dev/null
@@ -1,171 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.app.SearchManager;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.view.MenuItemCompat;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.support.v7.widget.SearchView;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.google.firebase.analytics.FirebaseAnalytics;
-import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.ScriptGroupsAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.SearchAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnListClickListener;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator;
-import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel;
-
-import java.text.Normalizer;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.Case;
-import io.realm.Realm;
-import io.realm.RealmQuery;
-import io.realm.RealmResults;
-import io.realm.Sort;
-
-/**
- * Created by Simon Schubert
- */
-public class BasicGroupsFragment extends SuperFragment implements OnListClickListener {
-
-    @BindView(R.id.fragment_scriptgroups_rv)
-    RecyclerView mRecyclerView;
-    private Realm mRealm;
-    private ScriptGroupsAdapter mAdapter;
-    private SearchAdapter mSearchAdapter;
-    private FirebaseAnalytics mFirebaseAnalytics;
-
-    public BasicGroupsFragment() {
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setHasOptionsMenu(true);
-
-        mRealm = Realm.getDefaultInstance();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_scriptgroups, container, false);
-
-        ButterKnife.bind(this, view);
-
-        mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());
-
-        mAdapter = new ScriptGroupsAdapter(mRealm.where(BasicGroupModel.class).sort("position").findAll(), false);
-        mAdapter.setOnListClickListener(this);
-        mRecyclerView.setAdapter(mAdapter);
-        mRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
-
-        mSearchAdapter = new SearchAdapter(null, false, mFirebaseAnalytics);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-
-        mRealm.close();
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.tip, menu);
-
-
-        MenuItem item = menu.findItem(R.id.search);
-        SearchView searchView = (SearchView) MenuItemCompat.getActionView(item);
-
-        SearchManager searchManager = (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
-        searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
-
-        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
-
-            @Override
-            public boolean onQueryTextSubmit(String s) {
-                return false;
-            }
-
-            @Override
-            public boolean onQueryTextChange(String query) {
-                if (!isAdded()) {
-                    return true;
-                }
-                if (query.length() > 0) {
-                    String normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
-                    search(normalizedText);
-                } else {
-                    resetSearchResults();
-                }
-
-                return true;
-            }
-        });
-        MenuItemCompat.setOnActionExpandListener(item, new MenuItemCompat.OnActionExpandListener() {
-            @Override
-            public boolean onMenuItemActionExpand(MenuItem item) {
-                return true;
-            }
-
-            @Override
-            public boolean onMenuItemActionCollapse(MenuItem item) {
-                resetSearchResults();
-                return true;
-            }
-        });
-    }
-
-    private void search(String query) {
-        String[] words = query.split("[,\\s]+");
-
-        RealmQuery<CommandGroupModel> realmQuery = mRealm.where(CommandGroupModel.class).beginGroup();
-
-        for (String word : words) {
-            realmQuery.contains("desc", word, Case.INSENSITIVE);
-        }
-
-        RealmResults<CommandGroupModel> allGroups = realmQuery.endGroup().sort("votes").findAll();
-        mSearchAdapter.setQuery(query);
-        mSearchAdapter.updateData(allGroups);
-        mRecyclerView.setAdapter(mSearchAdapter);
-    }
-
-    private void resetSearchResults() {
-        mRecyclerView.setAdapter(mAdapter);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.getItemId() == R.id.about) {
-            startAboutActivity();
-            return true;
-        }
-        return false;
-    }
-
-    private void startAboutActivity() {
-        Intent intent = new Intent(getContext(), AboutActivity.class);
-        startActivity(intent);
-    }
-
-    @Override
-    public void onClick(int id) {
-        FragmentCoordinator.startScriptCategoryActivity(getActivity(), id);
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.kt
new file mode 100644
index 0000000..4e6d074
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/BasicGroupsFragment.kt
@@ -0,0 +1,151 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.app.SearchManager
+import android.content.Context
+import android.content.Intent
+import android.os.Bundle
+import android.support.v4.view.MenuItemCompat
+import android.support.v7.widget.LinearLayoutManager
+import android.support.v7.widget.RecyclerView
+import android.support.v7.widget.SearchView
+import android.view.LayoutInflater
+import android.view.Menu
+import android.view.MenuInflater
+import android.view.MenuItem
+import android.view.View
+import android.view.ViewGroup
+
+import com.google.firebase.analytics.FirebaseAnalytics
+import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.ScriptGroupsAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.SearchAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnListClickListener
+import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator
+import com.inspiredandroid.linuxcommandbibliotheca.models.BasicGroupModel
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel
+
+import java.text.Normalizer
+
+import butterknife.BindView
+import io.realm.Case
+import io.realm.Realm
+import kotlinx.android.synthetic.main.fragment_scriptgroups.*
+
+/**
+ * Created by Simon Schubert
+ */
+class BasicGroupsFragment : SuperFragment(), OnListClickListener {
+
+    private var mRealm: Realm? = null
+    private var mAdapter: ScriptGroupsAdapter? = null
+    private var mSearchAdapter: SearchAdapter? = null
+    private var mFirebaseAnalytics: FirebaseAnalytics? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        setHasOptionsMenu(true)
+
+        mRealm = Realm.getDefaultInstance()
+        mFirebaseAnalytics = FirebaseAnalytics.getInstance(context!!)
+        mSearchAdapter = SearchAdapter(null, false, mFirebaseAnalytics)
+        mAdapter = ScriptGroupsAdapter(mRealm!!.where(BasicGroupModel::class.java).sort("position").findAll(), false)
+        mAdapter!!.setOnListClickListener(this)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        return inflater.inflate(R.layout.fragment_scriptgroups, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        fragment_scriptgroups_rv!!.adapter = mAdapter
+        fragment_scriptgroups_rv!!.layoutManager = LinearLayoutManager(context)
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mRealm!!.close()
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
+        inflater!!.inflate(R.menu.tip, menu)
+
+
+        val item = menu!!.findItem(R.id.search)
+        val searchView = MenuItemCompat.getActionView(item) as SearchView
+
+        val searchManager = activity!!.getSystemService(Context.SEARCH_SERVICE) as SearchManager
+        searchView.setSearchableInfo(searchManager.getSearchableInfo(activity!!.componentName))
+
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+
+            override fun onQueryTextSubmit(s: String): Boolean {
+                return false
+            }
+
+            override fun onQueryTextChange(query: String): Boolean {
+                if (!isAdded) {
+                    return true
+                }
+                if (query.length > 0) {
+                    val normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replace("\\p{InCombiningDiacriticalMarks}+".toRegex(), "").toLowerCase()
+                    search(normalizedText)
+                } else {
+                    resetSearchResults()
+                }
+
+                return true
+            }
+        })
+        MenuItemCompat.setOnActionExpandListener(item, object : MenuItemCompat.OnActionExpandListener {
+            override fun onMenuItemActionExpand(item: MenuItem): Boolean {
+                return true
+            }
+
+            override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
+                resetSearchResults()
+                return true
+            }
+        })
+    }
+
+    private fun search(query: String) {
+        val words = query.split("[,\\s]+".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+
+        val realmQuery = mRealm!!.where(CommandGroupModel::class.java).beginGroup()
+
+        for (word in words) {
+            realmQuery.contains("desc", word, Case.INSENSITIVE)
+        }
+
+        val allGroups = realmQuery.endGroup().sort("votes").findAll()
+        mSearchAdapter!!.setQuery(query)
+        mSearchAdapter!!.updateData(allGroups)
+        fragment_scriptgroups_rv!!.adapter = mSearchAdapter
+    }
+
+    private fun resetSearchResults() {
+        fragment_scriptgroups_rv!!.adapter = mAdapter
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
+        if (item!!.itemId == R.id.about) {
+            startAboutActivity()
+            return true
+        }
+        return false
+    }
+
+    private fun startAboutActivity() {
+        val intent = Intent(context, AboutActivity::class.java)
+        startActivity(intent)
+    }
+
+    override fun onClick(id: Int) {
+        FragmentCoordinator.startScriptCategoryActivity(activity, id)
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
deleted file mode 100644
index 63ded35..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
+++ /dev/null
@@ -1,343 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.app.SearchManager;
-import android.content.Context;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.view.MenuItemCompat;
-import android.support.v7.widget.SearchView;
-import android.text.Html;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ExpandableListView;
-import android.widget.ImageButton;
-
-import com.google.android.gms.appindexing.Action;
-import com.google.firebase.analytics.FirebaseAnalytics;
-import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig;
-import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.ManExpandableListAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.SearchManAsyncTask;
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnConvertFromHtmlToSpannableListener;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandPage;
-
-import java.util.ArrayList;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import io.realm.Realm;
-import io.realm.RealmResults;
-
-/**
- * Created by Simon Schubert
- */
-public class CommandManFragment extends AppIndexFragment implements OnConvertFromHtmlToSpannableListener, View.OnClickListener {
-
-    @BindView(R.id.fragment_command_man_btn_up)
-    ImageButton btnUp;
-    @BindView(R.id.fragment_command_man_btn_down)
-    ImageButton btnDown;
-    @BindView(R.id.fraggment_commandman_elv)
-    ExpandableListView mList;
-    private ManExpandableListAdapter mAdapter;
-    private Realm mRealm;
-    private FirebaseAnalytics mFirebaseAnalytics;
-    private String mName;
-    private long mId;
-    private int mCategory;
-    private int mIndexesPosition;
-    private String query;
-    private ArrayList<Integer> indexes = new ArrayList<>();
-
-    /**
-     * Split String every partitionSize character
-     *
-     * @param string
-     * @param partitionSize
-     * @return
-     */
-    private ArrayList<String> getParts(String string, int partitionSize) {
-        ArrayList<String> parts = new ArrayList<>();
-        int len = string.length();
-        for (int i = 0; i < len; i += partitionSize) {
-            parts.add(string.substring(i, Math.min(len, i + partitionSize)));
-        }
-        return parts;
-    }
-
-    @SuppressWarnings("deprecation")
-    private CharSequence fromHtml(String html) {
-        CharSequence result;
-        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
-            result = Html.fromHtml(html, Html.FROM_HTML_MODE_LEGACY);
-        } else {
-            result = Html.fromHtml(html);
-        }
-        return result;
-    }
-
-    @Override
-    public String getAppIndexingTitle() {
-        return mName + "(" + mCategory + ") man page";
-    }
-
-    @Override
-    public Action getAppIndexingAction() {
-        final Uri APP_URI = Uri.parse("android-app://" + BuildConfig.APPLICATION_ID + "/http/linux.schubert-simon.de/mans");
-        final Uri WEB_URL = Uri.parse("http://linux.schubert-simon.de/mans/");
-        return Action.newAction(Action.TYPE_VIEW, getAppIndexingTitle(), WEB_URL, APP_URI);
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (!FragmentCoordinator.isTabletLayout(getActivity())) {
-            setHasOptionsMenu(true);
-        }
-
-        // Get unique command mId
-        Bundle b = getArguments();
-        mId = b.getLong(CommandManActivity.EXTRA_COMMAND_ID);
-        mName = b.getString(CommandManActivity.EXTRA_COMMAND_NAME);
-        mCategory = b.getInt(CommandManActivity.EXTRA_COMMAND_CATEGORY);
-
-        mRealm = Realm.getDefaultInstance();
-
-        mAdapter = createAdapter();
-
-        mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());
-
-        Realm realm = Realm.getDefaultInstance();
-        Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), mId).findFirst();
-        if(command != null) {
-            trackSelectContent(command.getName());
-        }
-        realm.close();
-    }
-
-    private void trackSelectContent(String name) {
-        if(BuildConfig.DEBUG) {
-            return;
-        }
-        Bundle bundle = new Bundle();
-        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, name);
-        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Manual Detail");
-        mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle);
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_command_man, container, false);
-
-        ButterKnife.bind(this, view);
-
-        mList.setAdapter(mAdapter);
-
-        btnUp.setOnClickListener(this);
-        btnDown.setOnClickListener(this);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-
-        mRealm.close();
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.man, menu);
-
-        // Associate searchable configuration with the SearchView
-        SearchManager searchManager = (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
-        MenuItem item = menu.findItem(R.id.search);
-        SearchView searchView = (SearchView) item.getActionView();
-        searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
-
-        // Associate searchable configuration with the SearchView
-        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
-
-            @Override
-            public boolean onQueryTextSubmit(String s) {
-                return false;
-            }
-
-            @Override
-            public boolean onQueryTextChange(String query) {
-                if (query.length() > 0) {
-                    search(query);
-                } else {
-                    resetSearchResults();
-                }
-                return true;
-            }
-        });
-        MenuItemCompat.setOnActionExpandListener(item, new MenuItemCompat.OnActionExpandListener() {
-            @Override
-            public boolean onMenuItemActionExpand(MenuItem item) {
-                return true;
-            }
-
-            @Override
-            public boolean onMenuItemActionCollapse(MenuItem item) {
-                resetSearchResults();
-                return true;
-            }
-        });
-
-        MenuItem bookmarkItem = menu.findItem(R.id.bookmark);
-        bookmarkItem.setIcon(AppManager.hasBookmark(getContext(), mId) ? R.drawable.ic_bookmark_black_24dp : R.drawable.ic_bookmark_border_black_24dp);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.getItemId() == R.id.bookmark) {
-            toogleBookmarkState();
-            getActivity().invalidateOptionsMenu();
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Split long page text into child mRecyclerView views
-     *
-     * @return
-     */
-    private ManExpandableListAdapter createAdapter() {
-
-        RealmResults<CommandPage> pages = mRealm.where(CommandPage.class).equalTo(CommandPage.Companion.getCOMMANDID(), mId).findAll();
-
-        ArrayList<String> groups = new ArrayList<>();
-        ArrayList<ArrayList<CharSequence>> child = new ArrayList<>();
-        for (CommandPage page : pages) {
-
-            groups.add(page.getTitle());
-
-            CharSequence chars = fromHtml(page.getPage());
-
-            ArrayList<CharSequence> pageSplit = new ArrayList<>();
-            String[] tmp = chars.toString().split("\\r?\\n");
-            for (String tmpSplit : tmp) {
-                if (tmpSplit.length() < 600) {
-                    if (!tmpSplit.isEmpty()) {
-                        pageSplit.add(tmpSplit);
-                    }
-                } else {
-                    pageSplit.addAll(getParts(tmpSplit, 600));
-                }
-            }
-            child.add(pageSplit);
-        }
-
-        return new ManExpandableListAdapter(getActivity(), groups, child);
-    }
-
-    private void toogleBookmarkState() {
-        if (AppManager.hasBookmark(getContext(), mId)) {
-            AppManager.removeBookmark(getContext(), mId);
-        } else {
-            AppManager.addBookmark(getContext(), mId);
-        }
-    }
-
-    /**
-     *
-     */
-    private void resetSearchResults() {
-        SearchManAsyncTask async = new SearchManAsyncTask(getContext(), "", mAdapter.mChild, this);
-        addAsyncTask(async);
-        async.execute();
-
-        hideButton();
-    }
-
-    /**
-     * Search the man page for q occurs and highlight them and jump to first occur
-     *
-     * @param q
-     */
-    private void search(String q) {
-        SearchManAsyncTask async = new SearchManAsyncTask(getContext(), q, mAdapter.mChild, this);
-        addAsyncTask(async);
-        async.execute();
-    }
-
-    /**
-     * Get line by index of occur and calculate position
-     *
-     * @param index
-     */
-    private void scrollToPosition(int index) {
-        /*
-        int line = tvDescription.getLayout().getLineForOffset(index);
-        int lineHeight = tvDescription.getLayout().getHeight() / tvDescription.getLayout().getLineCount();
-        int position = line * lineHeight;
-        scrollView.scrollTo(0, position);
-        */
-    }
-
-    /**
-     *
-     */
-    private void hideButton() {
-        btnUp.setVisibility(View.GONE);
-        btnDown.setVisibility(View.GONE);
-    }
-
-    /**
-     *
-     */
-    private void showButton() {
-        btnUp.setVisibility(View.VISIBLE);
-        btnDown.setVisibility(View.VISIBLE);
-    }
-
-    /**
-     * go to next, if last then go to first
-     */
-    private void jumpToNextPosition() {
-        mIndexesPosition--;
-        if (mIndexesPosition < 0) {
-            mIndexesPosition = indexes.size() - 1;
-        }
-        scrollToPosition(indexes.get(mIndexesPosition));
-    }
-
-    /**
-     * go to previous, if smaller 0 then go to last
-     */
-    private void jumpToPreviousPosition() {
-        mIndexesPosition++;
-        if (mIndexesPosition >= indexes.size()) {
-            mIndexesPosition = 0;
-        }
-        scrollToPosition(indexes.get(mIndexesPosition));
-    }
-
-    @Override
-    public void onConvertHtmlToSpannable(ArrayList<ArrayList<CharSequence>> spannable) {
-        mAdapter.mChild = spannable;
-        mAdapter.notifyDataSetChanged();
-    }
-
-    @Override
-    public void onClick(View v) {
-        if (v.getId() == R.id.fragment_command_man_btn_up) {
-            jumpToNextPosition();
-        } else if (v.getId() == R.id.fragment_command_man_btn_down) {
-            jumpToPreviousPosition();
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.kt
new file mode 100644
index 0000000..78bd2cc
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.kt
@@ -0,0 +1,313 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.app.SearchManager
+import android.content.Context
+import android.net.Uri
+import android.os.Bundle
+import android.support.v4.view.MenuItemCompat
+import android.support.v7.widget.SearchView
+import android.text.Html
+import android.view.*
+import com.google.android.gms.appindexing.Action
+import com.google.firebase.analytics.FirebaseAnalytics
+import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig
+import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.ManExpandableListAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.SearchManAsyncTask
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnConvertFromHtmlToSpannableListener
+import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager
+import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandPage
+import io.realm.Realm
+import kotlinx.android.synthetic.main.fragment_command_man.*
+import java.util.*
+
+/**
+ * Created by Simon Schubert
+ */
+class CommandManFragment : AppIndexFragment(), OnConvertFromHtmlToSpannableListener, View.OnClickListener {
+
+    private var mAdapter: ManExpandableListAdapter? = null
+    private var mRealm: Realm? = null
+    private var mFirebaseAnalytics: FirebaseAnalytics? = null
+    private var mName: String? = null
+    private var mId: Long = 0
+    private var mCategory: Int = 0
+    private var mIndexesPosition: Int = 0
+    private val query: String? = null
+    private val indexes = ArrayList<Int>()
+
+    /**
+     * Split String every partitionSize character
+     *
+     * @param string
+     * @param partitionSize
+     * @return
+     */
+    private fun getParts(string: String, partitionSize: Int): ArrayList<String> {
+        val parts = ArrayList<String>()
+        val len = string.length
+        var i = 0
+        while (i < len) {
+            parts.add(string.substring(i, Math.min(len, i + partitionSize)))
+            i += partitionSize
+        }
+        return parts
+    }
+
+    private fun fromHtml(html: String?): CharSequence {
+        val result: CharSequence
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
+            result = Html.fromHtml(html, Html.FROM_HTML_MODE_LEGACY)
+        } else {
+            result = Html.fromHtml(html)
+        }
+        return result
+    }
+
+    override fun getAppIndexingTitle(): String {
+        return "$mName($mCategory) man page"
+    }
+
+    override fun getAppIndexingAction(): Action {
+        val APP_URI = Uri.parse("android-app://" + BuildConfig.APPLICATION_ID + "/http/linux.schubert-simon.de/mans")
+        val WEB_URL = Uri.parse("http://linux.schubert-simon.de/mans/")
+        return Action.newAction(Action.TYPE_VIEW, getAppIndexingTitle(), WEB_URL, APP_URI)
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        if (!FragmentCoordinator.isTabletLayout(activity!!)) {
+            setHasOptionsMenu(true)
+        }
+
+        // Get unique command mId
+        val b = arguments
+        mId = b!!.getLong(CommandManActivity.EXTRA_COMMAND_ID)
+        mName = b.getString(CommandManActivity.EXTRA_COMMAND_NAME)
+        mCategory = b.getInt(CommandManActivity.EXTRA_COMMAND_CATEGORY)
+
+        mRealm = Realm.getDefaultInstance()
+
+        mAdapter = createAdapter()
+
+        mFirebaseAnalytics = FirebaseAnalytics.getInstance(context!!)
+
+        val realm = Realm.getDefaultInstance()
+        val command = realm.where(Command::class.java).equalTo(Command.ID, mId).findFirst()
+        if (command != null) {
+            trackSelectContent(command.name)
+        }
+        realm.close()
+    }
+
+    private fun trackSelectContent(name: String?) {
+        if (BuildConfig.DEBUG) {
+            return
+        }
+        val bundle = Bundle()
+        bundle.putString(FirebaseAnalytics.Param.ITEM_ID, name)
+        bundle.putString(FirebaseAnalytics.Param.CONTENT_TYPE, "Manual Detail")
+        mFirebaseAnalytics!!.logEvent(FirebaseAnalytics.Event.SELECT_CONTENT, bundle)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        return inflater.inflate(R.layout.fragment_command_man, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        fraggment_commandman_elv.setAdapter(mAdapter)
+
+        fragment_command_man_btn_up!!.setOnClickListener(this)
+        fragment_command_man_btn_down.setOnClickListener(this)
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mRealm!!.close()
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
+        inflater!!.inflate(R.menu.man, menu)
+
+        // Associate searchable configuration with the SearchView
+        val searchManager = activity!!.getSystemService(Context.SEARCH_SERVICE) as SearchManager
+        val item = menu!!.findItem(R.id.search)
+        val searchView = item.actionView as SearchView
+        searchView.setSearchableInfo(searchManager.getSearchableInfo(activity!!.componentName))
+
+        // Associate searchable configuration with the SearchView
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+
+            override fun onQueryTextSubmit(s: String): Boolean {
+                return false
+            }
+
+            override fun onQueryTextChange(query: String): Boolean {
+                if (query.isNotEmpty()) {
+                    search(query)
+                } else {
+                    resetSearchResults()
+                }
+                return true
+            }
+        })
+        MenuItemCompat.setOnActionExpandListener(item, object : MenuItemCompat.OnActionExpandListener {
+            override fun onMenuItemActionExpand(item: MenuItem): Boolean {
+                return true
+            }
+
+            override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
+                resetSearchResults()
+                return true
+            }
+        })
+
+        val bookmarkItem = menu.findItem(R.id.bookmark)
+        bookmarkItem.setIcon(if (AppManager.hasBookmark(context, mId)) R.drawable.ic_bookmark_black_24dp else R.drawable.ic_bookmark_border_black_24dp)
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
+        if (item!!.itemId == R.id.bookmark) {
+            toogleBookmarkState()
+            activity!!.invalidateOptionsMenu()
+            return true
+        }
+        return false
+    }
+
+    /**
+     * Split long page text into child mRecyclerView views
+     *
+     * @return
+     */
+    private fun createAdapter(): ManExpandableListAdapter {
+
+        val pages = mRealm!!.where(CommandPage::class.java).equalTo(CommandPage.COMMANDID, mId).findAll()
+
+        val groups = ArrayList<String>()
+        val child = ArrayList<ArrayList<CharSequence>>()
+        for (page in pages) {
+
+            groups.add(page.title!!)
+
+            val chars = fromHtml(page.page)
+
+            val pageSplit = ArrayList<CharSequence>()
+            val tmp = chars.toString().split("\\r?\\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+            for (tmpSplit in tmp) {
+                if (tmpSplit.length < 600) {
+                    if (!tmpSplit.isEmpty()) {
+                        pageSplit.add(tmpSplit)
+                    }
+                } else {
+                    pageSplit.addAll(getParts(tmpSplit, 600))
+                }
+            }
+            child.add(pageSplit)
+        }
+
+        return ManExpandableListAdapter(activity!!, groups, child)
+    }
+
+    private fun toogleBookmarkState() {
+        if (AppManager.hasBookmark(context, mId)) {
+            AppManager.removeBookmark(context, mId)
+        } else {
+            AppManager.addBookmark(context, mId)
+        }
+    }
+
+    /**
+     *
+     */
+    private fun resetSearchResults() {
+        val async = SearchManAsyncTask(context, "", mAdapter!!.mChild, this)
+        addAsyncTask(async)
+        async.execute()
+
+        hideButton()
+    }
+
+    /**
+     * Search the man page for q occurs and highlight them and jump to first occur
+     *
+     * @param q
+     */
+    private fun search(q: String) {
+        val async = SearchManAsyncTask(context, q, mAdapter!!.mChild, this)
+        addAsyncTask(async)
+        async.execute()
+    }
+
+    /**
+     * Get line by index of occur and calculate position
+     *
+     * @param index
+     */
+    private fun scrollToPosition(index: Int) {
+        /*
+        int line = tvDescription.getLayout().getLineForOffset(index);
+        int lineHeight = tvDescription.getLayout().getHeight() / tvDescription.getLayout().getLineCount();
+        int position = line * lineHeight;
+        scrollView.scrollTo(0, position);
+        */
+    }
+
+    /**
+     *
+     */
+    private fun hideButton() {
+        fragment_command_man_btn_up.visibility = View.GONE
+        fragment_command_man_btn_down.visibility = View.GONE
+    }
+
+    /**
+     *
+     */
+    private fun showButton() {
+        fragment_command_man_btn_up.visibility = View.VISIBLE
+        fragment_command_man_btn_down.visibility = View.VISIBLE
+    }
+
+    /**
+     * go to next, if last then go to first
+     */
+    private fun jumpToNextPosition() {
+        mIndexesPosition--
+        if (mIndexesPosition < 0) {
+            mIndexesPosition = indexes.size - 1
+        }
+        scrollToPosition(indexes[mIndexesPosition])
+    }
+
+    /**
+     * go to previous, if smaller 0 then go to last
+     */
+    private fun jumpToPreviousPosition() {
+        mIndexesPosition++
+        if (mIndexesPosition >= indexes.size) {
+            mIndexesPosition = 0
+        }
+        scrollToPosition(indexes[mIndexesPosition])
+    }
+
+    override fun onConvertHtmlToSpannable(spannable: ArrayList<ArrayList<CharSequence>>) {
+        mAdapter!!.mChild = spannable
+        mAdapter!!.notifyDataSetChanged()
+    }
+
+    override fun onClick(v: View) {
+        if (v.id == R.id.fragment_command_man_btn_up) {
+            jumpToNextPosition()
+        } else if (v.id == R.id.fragment_command_man_btn_down) {
+            jumpToPreviousPosition()
+        }
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
deleted file mode 100644
index aef9784..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
+++ /dev/null
@@ -1,264 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.app.SearchManager;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.view.MenuItemCompat;
-import android.support.v7.widget.SearchView;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.LinearLayout;
-import android.widget.ListView;
-
-import com.google.firebase.analytics.FirebaseAnalytics;
-import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.adapter.CommandsAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs.NewsDialogFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs.RateDialogFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-
-import java.text.Normalizer;
-import java.util.ArrayList;
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-import io.realm.Realm;
-import io.realm.RealmResults;
-
-/**
- * Created by Simon Schubert.
- */
-public class CommandsFragment extends Fragment implements AdapterView.OnItemClickListener {
-
-    @BindView(R.id.fragment_commands_lv)
-    ListView mList;
-    @BindView(R.id.fragment_commands_ll_nothingfound)
-    LinearLayout mLLNothingFound;
-
-    private CommandsAdapter mAdapter;
-    private Realm mRealm;
-    private String mQuery = "";
-    // private FirebaseAnalytics mFirebaseAnalytics;
-    // private Handler mHandler;
-    private String lastTrackedQuery = "";
-    private final Runnable mSearchQueryCheck = new Runnable() {
-        @Override
-        public void run() {
-            if (!lastTrackedQuery.equals(mQuery)) {
-                lastTrackedQuery = mQuery;
-            } else {
-                Bundle bundle = new Bundle();
-                bundle.putString(FirebaseAnalytics.Param.SEARCH_TERM, mQuery);
-                // mFirebaseAnalytics.logEvent(FirebaseAnalytics.Event.SEARCH, bundle);
-            }
-
-            // mHandler.postDelayed(this, 1000);
-        }
-    };
-
-    public CommandsFragment() {
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setHasOptionsMenu(true);
-
-        mRealm = Realm.getDefaultInstance();
-        mAdapter = new CommandsAdapter(getContext(), getAllCommands(), false);
-
-        if (AppManager.shouldShowNewsDialog(getContext())) {
-            NewsDialogFragment newDialogFragment = NewsDialogFragment.getInstance();
-            newDialogFragment.show(getChildFragmentManager(), newDialogFragment.getClass().getCanonicalName());
-        } else if (AppManager.shouldShowRateDialog(getContext())) {
-            RateDialogFragment rateDialogFragment = RateDialogFragment.getInstance();
-            rateDialogFragment.show(getChildFragmentManager(), RateDialogFragment.class.getName());
-        }
-
-        // mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());
-
-        // mHandler = new Handler();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_commands, container, false);
-
-        ButterKnife.bind(this, view);
-
-        mList.setAdapter(mAdapter);
-        mList.setOnItemClickListener(this);
-
-        return view;
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        // mHandler.removeCallbacks(mSearchQueryCheck);
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        FragmentCoordinator.startCommandManActivity(getActivity(), id);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.main, menu);
-
-        MenuItem item = menu.findItem(R.id.search);
-        SearchView searchView = (SearchView) MenuItemCompat.getActionView(item);
-
-        SearchManager searchManager = (SearchManager) getActivity().getSystemService(Context.SEARCH_SERVICE);
-        searchView.setSearchableInfo(searchManager.getSearchableInfo(getActivity().getComponentName()));
-
-        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
-
-            @Override
-            public boolean onQueryTextSubmit(String s) {
-                return false;
-            }
-
-            @Override
-            public boolean onQueryTextChange(String query) {
-                if (!isAdded()) {
-                    return true;
-                }
-                mQuery = query;
-                if (query.length() > 0) {
-                    String normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
-                    search(normalizedText);
-                } else {
-                    resetSearchResults();
-                }
-
-                return true;
-            }
-        });
-        MenuItemCompat.setOnActionExpandListener(item, new MenuItemCompat.OnActionExpandListener() {
-            @Override
-            public boolean onMenuItemActionExpand(MenuItem item) {
-                return true;
-            }
-
-            @Override
-            public boolean onMenuItemActionCollapse(MenuItem item) {
-                resetSearchResults();
-                return true;
-            }
-        });
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.getItemId() == R.id.about) {
-            startAboutActivity();
-            return true;
-        }
-        return false;
-    }
-
-    private void startAboutActivity() {
-        Intent intent = new Intent(getContext(), AboutActivity.class);
-        startActivity(intent);
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-
-        mRealm.close();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-
-        // mHandler.postDelayed(mSearchQueryCheck, 1000);
-
-        if (AppManager.hasBookmarkChanged(getContext())) {
-            resetSearchResults();
-        }
-    }
-
-    @OnClick(R.id.fragment_commands_btn_send_request)
-    public void sendCommandRequestEmail() {
-        Intent intent = new Intent(Intent.ACTION_SENDTO);
-        intent.setData(Uri.parse("mailto:" + "sschubert89@gmail.com"));
-        intent.putExtra(Intent.EXTRA_SUBJECT, "Command request");
-        intent.putExtra(Intent.EXTRA_TEXT, "Command: " + mQuery);
-        try {
-            startActivity(Intent.createChooser(intent, "Send mail..."));
-        } catch (android.content.ActivityNotFoundException ignored) {
-        }
-    }
-
-    /**
-     * reset mAdapter entries
-     */
-    private void resetSearchResults() {
-        mAdapter.updateRealmResults(getAllCommands());
-        mAdapter.setSearchQuery("");
-        mAdapter.updateBookmarkIds();
-        updateViews();
-    }
-
-    /**
-     * Get list of all commands sorted by name
-     *
-     * @return
-     */
-    private List<RealmResults<Command>> getAllCommands() {
-        List<RealmResults<Command>> results = new ArrayList<>();
-        List<Long> ids = AppManager.getBookmarkIds(getContext());
-        for (long id : ids) {
-            results.add(mRealm.where(Command.class).equalTo(Command.Companion.getID(), id).findAll());
-        }
-        results.add(mRealm.where(Command.class).findAll().sort("name"));
-        return results;
-    }
-
-    /**
-     * search for query in all command names and short descriptions and update adapter
-     *
-     * @param query search query
-     */
-    private void search(String query) {
-        List<RealmResults<Command>> results = new ArrayList<>();
-        results.add(mRealm.where(Command.class).equalTo(Command.Companion.getNAME(), query).findAll());
-        results.add(mRealm.where(Command.class).beginsWith(Command.Companion.getNAME(), query).notEqualTo(Command.Companion.getNAME(), query).findAll());
-        results.add(mRealm.where(Command.class).contains(Command.Companion.getNAME(), query).not().beginsWith(Command.Companion.getNAME(), query).notEqualTo(Command.Companion.getNAME(), query).findAll());
-        results.add(mRealm.where(Command.class).contains(Command.Companion.getDESCRIPTION(), query).not().contains(Command.Companion.getNAME(), query).findAll());
-
-        mAdapter.updateRealmResults(results);
-        mAdapter.setSearchQuery(query);
-
-        updateViews();
-    }
-
-    private void updateViews() {
-        if (mAdapter.getCount() == 0) {
-            mLLNothingFound.setVisibility(View.VISIBLE);
-            mList.setVisibility(View.GONE);
-        } else {
-            mLLNothingFound.setVisibility(View.GONE);
-            mList.setVisibility(View.VISIBLE);
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.kt
new file mode 100644
index 0000000..ca7bbc9
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.kt
@@ -0,0 +1,214 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.app.SearchManager
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.support.v4.app.Fragment
+import android.support.v4.view.MenuItemCompat
+import android.support.v7.widget.SearchView
+import android.view.LayoutInflater
+import android.view.Menu
+import android.view.MenuInflater
+import android.view.MenuItem
+import android.view.View
+import android.view.ViewGroup
+import android.widget.AdapterView
+
+import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.adapter.CommandsAdapter
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs.NewsDialogFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs.RateDialogFragment
+import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager
+import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+
+import java.text.Normalizer
+import java.util.ArrayList
+
+import butterknife.OnClick
+import io.realm.Realm
+import io.realm.RealmResults
+import kotlinx.android.synthetic.main.fragment_commands.*
+
+/**
+ * Created by Simon Schubert.
+ */
+class CommandsFragment : Fragment(), AdapterView.OnItemClickListener {
+
+    private var mAdapter: CommandsAdapter? = null
+    private var mRealm: Realm? = null
+    private var mQuery = ""
+
+    /**
+     * Get list of all commands sorted by name
+     *
+     * @return
+     */
+    private val allCommands: List<RealmResults<Command>>
+        get() {
+            val results = ArrayList<RealmResults<Command>>()
+            val ids = AppManager.getBookmarkIds(context)
+            for (id in ids) {
+                results.add(mRealm!!.where(Command::class.java).equalTo(Command.ID, id).findAll())
+            }
+            results.add(mRealm!!.where(Command::class.java).findAll().sort("name"))
+            return results
+        }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        setHasOptionsMenu(true)
+
+        mRealm = Realm.getDefaultInstance()
+        mAdapter = CommandsAdapter(context!!, allCommands, false)
+
+        if (AppManager.shouldShowNewsDialog(context)) {
+            val newDialogFragment = NewsDialogFragment.instance
+            newDialogFragment.show(childFragmentManager, newDialogFragment.javaClass.canonicalName)
+        } else if (AppManager.shouldShowRateDialog(context)) {
+            val rateDialogFragment = RateDialogFragment.instance
+            rateDialogFragment.show(childFragmentManager, RateDialogFragment::class.java.name)
+        }
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        return inflater.inflate(R.layout.fragment_commands, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        fragment_commands_lv.adapter = mAdapter
+        fragment_commands_lv.onItemClickListener = this
+    }
+
+    override fun onItemClick(parent: AdapterView<*>, view: View, position: Int, id: Long) {
+        FragmentCoordinator.startCommandManActivity(activity, id)
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
+        inflater!!.inflate(R.menu.main, menu)
+
+        val item = menu!!.findItem(R.id.search)
+        val searchView = MenuItemCompat.getActionView(item) as SearchView
+
+        val searchManager = activity!!.getSystemService(Context.SEARCH_SERVICE) as SearchManager
+        searchView.setSearchableInfo(searchManager.getSearchableInfo(activity!!.componentName))
+
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+
+            override fun onQueryTextSubmit(s: String): Boolean {
+                return false
+            }
+
+            override fun onQueryTextChange(query: String): Boolean {
+                if (!isAdded) {
+                    return true
+                }
+                mQuery = query
+                if (query.length > 0) {
+                    val normalizedText = Normalizer.normalize(query, Normalizer.Form.NFD).replace("\\p{InCombiningDiacriticalMarks}+".toRegex(), "").toLowerCase()
+                    search(normalizedText)
+                } else {
+                    resetSearchResults()
+                }
+
+                return true
+            }
+        })
+        MenuItemCompat.setOnActionExpandListener(item, object : MenuItemCompat.OnActionExpandListener {
+            override fun onMenuItemActionExpand(item: MenuItem): Boolean {
+                return true
+            }
+
+            override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
+                resetSearchResults()
+                return true
+            }
+        })
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
+        if (item!!.itemId == R.id.about) {
+            startAboutActivity()
+            return true
+        }
+        return false
+    }
+
+    private fun startAboutActivity() {
+        val intent = Intent(context, AboutActivity::class.java)
+        startActivity(intent)
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+
+        mRealm!!.close()
+    }
+
+    override fun onResume() {
+        super.onResume()
+
+        // mHandler.postDelayed(mSearchQueryCheck, 1000);
+
+        if (AppManager.hasBookmarkChanged(context)) {
+            resetSearchResults()
+        }
+    }
+
+    @OnClick(R.id.fragment_commands_btn_send_request)
+    fun sendCommandRequestEmail() {
+        val intent = Intent(Intent.ACTION_SENDTO)
+        intent.data = Uri.parse("mailto:" + "sschubert89@gmail.com")
+        intent.putExtra(Intent.EXTRA_SUBJECT, "Command request")
+        intent.putExtra(Intent.EXTRA_TEXT, "Command: $mQuery")
+        try {
+            startActivity(Intent.createChooser(intent, "Send mail..."))
+        } catch (ignored: android.content.ActivityNotFoundException) {
+        }
+
+    }
+
+    /**
+     * reset mAdapter entries
+     */
+    private fun resetSearchResults() {
+        mAdapter!!.updateRealmResults(allCommands)
+        mAdapter!!.setSearchQuery("")
+        mAdapter!!.updateBookmarkIds()
+        updateViews()
+    }
+
+    /**
+     * search for query in all command names and short descriptions and update adapter
+     *
+     * @param query search query
+     */
+    private fun search(query: String) {
+        val results = ArrayList<RealmResults<Command>>()
+        results.add(mRealm!!.where(Command::class.java).equalTo(Command.NAME, query).findAll())
+        results.add(mRealm!!.where(Command::class.java).beginsWith(Command.NAME, query).notEqualTo(Command.NAME, query).findAll())
+        results.add(mRealm!!.where(Command::class.java).contains(Command.NAME, query).not().beginsWith(Command.NAME, query).notEqualTo(Command.NAME, query).findAll())
+        results.add(mRealm!!.where(Command::class.java).contains(Command.DESCRIPTION, query).not().contains(Command.NAME, query).findAll())
+
+        mAdapter!!.updateRealmResults(results)
+        mAdapter!!.setSearchQuery(query)
+
+        updateViews()
+    }
+
+    private fun updateViews() {
+        if (mAdapter!!.count == 0) {
+            fragment_commands_ll_nothingfound.visibility = View.VISIBLE
+            fragment_commands_lv.visibility = View.GONE
+        } else {
+            fragment_commands_ll_nothingfound.visibility = View.GONE
+            fragment_commands_lv.visibility = View.VISIBLE
+        }
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.java
deleted file mode 100644
index b09e4e5..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-
-/**
- * Created by Simon Schubert
- */
-public class DatabaseLoadingFragment extends Fragment {
-
-    public DatabaseLoadingFragment() {
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        return inflater.inflate(R.layout.fragment_database_loading, container, false);
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.kt
new file mode 100644
index 0000000..1df6cd5
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/DatabaseLoadingFragment.kt
@@ -0,0 +1,24 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.os.Bundle
+import android.support.v4.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+
+/**
+ * Created by Simon Schubert
+ */
+class DatabaseLoadingFragment : Fragment() {
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
+                              savedInstanceState: Bundle?): View? {
+        return inflater.inflate(R.layout.fragment_database_loading, container, false)
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/NavigationFragmentFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/NavigationFragmentFragment.java
deleted file mode 100644
index d4ee715..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/NavigationFragmentFragment.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.IntDef;
-import android.support.design.widget.BottomNavigationView;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-/**
- * Created by Simon Schubert
- */
-public class NavigationFragmentFragment extends Fragment {
-
-    @BindView(R.id.navigation)
-    BottomNavigationView navigation;
-    private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
-            = item -> {
-        switch (item.getItemId()) {
-            case R.id.navigation_commands:
-                startFragment(ID.COMMANDS);
-                return true;
-            case R.id.navigation_basics:
-                startFragment(ID.BASIC);
-                return true;
-            case R.id.navigation_tips:
-                startFragment(ID.TIPS);
-                return true;
-        }
-        return false;
-    };
-
-    public NavigationFragmentFragment() {
-
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_bibliotheca, container, false);
-
-        ButterKnife.bind(this, view);
-
-        int defaultPosition = R.id.navigation_commands;
-        int bottomNavigationPosition = savedInstanceState == null ? defaultPosition :
-                savedInstanceState.getInt("opened_fragment", defaultPosition);
-        navigation.setSelectedItemId(bottomNavigationPosition);
-
-        Log.e("TAG", "position: " + bottomNavigationPosition);
-
-        switch (bottomNavigationPosition) {
-            case R.id.navigation_commands:
-                startFragment(ID.COMMANDS);
-            case R.id.navigation_basics:
-                startFragment(ID.BASIC);
-            case R.id.navigation_tips:
-                startFragment(ID.TIPS);
-        }
-
-        /*
-        if (shouldShowTipsFragment(getActivity().getIntent())) {
-            startFragment(ID.TIPS);
-        } else {
-            startFragment(ID.COMMANDS);
-        }
-        */
-
-        navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);
-
-        return view;
-    }
-
-    private boolean shouldShowTipsFragment(Intent intent) {
-        String action = intent.getAction();
-        String data = intent.getDataString();
-        return Intent.ACTION_VIEW.equals(action) && data != null;
-    }
-
-    private void startFragment(@ID int id) {
-        Fragment fragment = null;
-        switch (id) {
-            case ID.COMMANDS:
-                fragment = new CommandsFragment();
-                getActivity().setTitle(R.string.fragment_bibliotheca_commands);
-                break;
-            case ID.BASIC:
-                fragment = new BasicGroupsFragment();
-                getActivity().setTitle(R.string.fragment_bibliotheca_basic);
-                break;
-            case ID.TIPS:
-                fragment = new TipsFragment();
-                getActivity().setTitle(R.string.tip);
-                break;
-        }
-
-        final FragmentManager fragmentManager = getChildFragmentManager();
-        final FragmentTransaction transaction = fragmentManager.beginTransaction();
-        transaction.replace(R.id.main_container, fragment).commitAllowingStateLoss();
-    }
-
-    @IntDef({ID.COMMANDS, ID.BASIC, ID.TIPS})
-    @Retention(RetentionPolicy.SOURCE)
-    @interface ID {
-        int COMMANDS = 0;
-        int BASIC = 1;
-        int TIPS = 2;
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.java
deleted file mode 100644
index 2f6cbe2..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.os.AsyncTask;
-import android.support.v4.app.Fragment;
-
-import java.util.ArrayList;
-
-/**
- * Created by Simon Schubert
- */
-public class SuperFragment extends Fragment {
-
-    private ArrayList<AsyncTask> mAsyncTasks = new ArrayList<>();
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        cancelAsyncTasks();
-    }
-
-    /**
-     * cancel all asynctasks
-     */
-    private void cancelAsyncTasks() {
-        for (AsyncTask task : mAsyncTasks) {
-            if (task != null) {
-                task.cancel(true);
-            }
-        }
-    }
-
-    public void addAsyncTask(AsyncTask asyncTask) {
-        mAsyncTasks.add(asyncTask);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.kt
new file mode 100644
index 0000000..12526a4
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/SuperFragment.kt
@@ -0,0 +1,32 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.os.AsyncTask
+import android.support.v4.app.Fragment
+
+import java.util.ArrayList
+
+/**
+ * Created by Simon Schubert
+ */
+open class SuperFragment : Fragment() {
+
+    private val mAsyncTasks = ArrayList<AsyncTask<*, *, *>>()
+
+    override fun onPause() {
+        super.onPause()
+        cancelAsyncTasks()
+    }
+
+    /**
+     * cancel all asynctasks
+     */
+    private fun cancelAsyncTasks() {
+        for (task in mAsyncTasks) {
+            task.cancel(true)
+        }
+    }
+
+    fun addAsyncTask(asyncTask: AsyncTask<*, *, *>) {
+        mAsyncTasks.add(asyncTask)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.java
deleted file mode 100644
index 6d66a9b..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments;
-
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-import com.google.android.gms.appindexing.Action;
-import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.view.ClickableTextView;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-/**
- * Created by Simon Schubert
- * General Linux/CMD Tips
- */
-public class TipsFragment extends AppIndexFragment {
-
-    @BindView(R.id.fragment_tips_tv_link_to_redirection)
-    ClickableTextView tvLinkToRedirection;
-    @BindView(R.id.fragment_tips_tv_redirection)
-    TextView mTvRedirection;
-    private ScrollView mView;
-
-    public TipsFragment() {
-    }
-
-    @Override
-    public String getAppIndexingTitle() {
-        return "Linux tips";
-    }
-
-    @Override
-    public Action getAppIndexingAction() {
-        final Uri APP_URI = Uri.parse("android-app://" + BuildConfig.APPLICATION_ID + "/http/linux.schubert-simon.de/tips");
-        final Uri WEB_URL = Uri.parse("http://linux.schubert-simon.de/tips/");
-        return Action.newAction(Action.TYPE_VIEW, getAppIndexingTitle(), WEB_URL, APP_URI);
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setHasOptionsMenu(true);
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        mView = (ScrollView) inflater.inflate(R.layout.fragment_tips, container, false);
-
-        ButterKnife.bind(this, mView);
-
-        tvLinkToRedirection.setClickInterface(this::scrollToRedirectionView);
-        tvLinkToRedirection.setClickableWord("below");
-
-        return mView;
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.tip, menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.getItemId() == R.id.about) {
-            startAboutActivity();
-            return true;
-        }
-        return false;
-    }
-
-    private void startAboutActivity() {
-        Intent intent = new Intent(getContext(), AboutActivity.class);
-        startActivity(intent);
-    }
-
-    private void scrollToRedirectionView() {
-        mView.post(() -> mView.scrollTo(0, mTvRedirection.getBottom()));
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.kt
new file mode 100644
index 0000000..f289dd6
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipsFragment.kt
@@ -0,0 +1,71 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments
+
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.view.*
+import android.widget.ScrollView
+import com.google.android.gms.appindexing.Action
+import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity
+import com.inspiredandroid.linuxcommandbibliotheca.BuildConfig
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnLinkClickListener
+import kotlinx.android.synthetic.main.fragment_tips.*
+
+/**
+ * Created by Simon Schubert
+ * General Linux/CMD Tips
+ */
+class TipsFragment : AppIndexFragment() {
+
+    private var mView: ScrollView? = null
+
+    override fun getAppIndexingTitle(): String {
+        return "Linux tips"
+    }
+
+    override fun getAppIndexingAction(): Action {
+        val APP_URI = Uri.parse("android-app://" + BuildConfig.APPLICATION_ID + "/http/linux.schubert-simon.de/tips")
+        val WEB_URL = Uri.parse("http://linux.schubert-simon.de/tips/")
+        return Action.newAction(Action.TYPE_VIEW, getAppIndexingTitle(), WEB_URL, APP_URI)
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        setHasOptionsMenu(true)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        mView = inflater.inflate(R.layout.fragment_tips, container, false) as ScrollView
+        return mView
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        fragment_tips_tv_link_to_redirection.setClickInterface(OnLinkClickListener { this.scrollToRedirectionView() })
+        fragment_tips_tv_link_to_redirection.setClickableWord("below")
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {
+        inflater!!.inflate(R.menu.tip, menu)
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
+        if (item!!.itemId == R.id.about) {
+            startAboutActivity()
+            return true
+        }
+        return false
+    }
+
+    private fun startAboutActivity() {
+        val intent = Intent(context, AboutActivity::class.java)
+        startActivity(intent)
+    }
+
+    private fun scrollToRedirectionView() {
+        mView!!.post { mView!!.scrollTo(0, fragment_tips_tv_redirection.bottom) }
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/DonateDialogFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/DonateDialogFragment.java
deleted file mode 100644
index cc20d1a..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/DonateDialogFragment.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs;
-
-import android.app.Dialog;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.support.v7.app.AlertDialog;
-
-/**
- * Created by Simon Schubert
- */
-public class DonateDialogFragment extends DialogFragment {
-
-    public static DonateDialogFragment getInstance() {
-        return new DonateDialogFragment();
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        return new AlertDialog.Builder(getContext())
-                .setTitle("Advertising deactivated")
-                .setMessage("Please consider donating via PayPal/Bitcoin or writing a review in the Play Store. Thanks.")
-                .setPositiveButton("Ok", (dialog, which) -> {
-                }).create();
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.java
deleted file mode 100644
index ed10616..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs;
-
-import android.app.Dialog;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.Window;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-
-/**
- * Created by Simon Schubert
- */
-public class NewsDialogFragment extends DialogFragment {
-
-    public static NewsDialogFragment getInstance() {
-        return new NewsDialogFragment();
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_new, container, false);
-
-        ButterKnife.bind(this, view);
-
-        return view;
-    }
-
-    /**
-     * The system calls this only when creating the layout in a dialog.
-     */
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        Dialog dialog = super.onCreateDialog(savedInstanceState);
-        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-        return dialog;
-    }
-
-    @OnClick(R.id.fragment_news_btn_ok)
-    public void close() {
-        try {
-            dismissAllowingStateLoss();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    @OnClick(R.id.fragment_news_btn_share)
-    public void share() {
-        Intent intent = new Intent(Intent.ACTION_SEND);
-        intent.setType("text/plain");
-        intent.putExtra(android.content.Intent.EXTRA_TEXT, "https://itunes.apple.com/us/app/linux-command-library/id1219649976");
-        try {
-            startActivity(intent);
-        } catch(ActivityNotFoundException ignored) {
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.kt
new file mode 100644
index 0000000..b0aabde
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/NewsDialogFragment.kt
@@ -0,0 +1,65 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs
+
+import android.app.Dialog
+import android.content.ActivityNotFoundException
+import android.content.Intent
+import android.os.Bundle
+import android.support.v4.app.DialogFragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.view.Window
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+
+import butterknife.ButterKnife
+import butterknife.OnClick
+
+/**
+ * Created by Simon Schubert
+ */
+class NewsDialogFragment : DialogFragment() {
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
+                              savedInstanceState: Bundle?): View? {
+
+        return inflater.inflate(R.layout.fragment_new, container, false)
+    }
+
+    /**
+     * The system calls this only when creating the layout in a dialog.
+     */
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        val dialog = super.onCreateDialog(savedInstanceState)
+        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
+        return dialog
+    }
+
+    // @OnClick(R.id.fragment_news_btn_ok)
+    fun close() {
+        try {
+            dismissAllowingStateLoss()
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+
+    }
+
+    // @OnClick(R.id.fragment_news_btn_share)
+    fun share() {
+        val intent = Intent(Intent.ACTION_SEND)
+        intent.type = "text/plain"
+        intent.putExtra(android.content.Intent.EXTRA_TEXT, "https://itunes.apple.com/us/app/linux-command-library/id1219649976")
+        try {
+            startActivity(intent)
+        } catch (ignored: ActivityNotFoundException) {
+        }
+
+    }
+
+    companion object {
+
+        val instance: NewsDialogFragment
+            get() = NewsDialogFragment()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.java
deleted file mode 100644
index eec2578..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs;
-
-import android.app.Dialog;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.support.v7.app.AlertDialog;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
-
-/**
- * Created by Simon Schubert
- */
-public class RateDialogFragment extends DialogFragment {
-
-    public static RateDialogFragment getInstance() {
-        return new RateDialogFragment();
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        return new AlertDialog.Builder(getContext())
-                .setTitle(R.string.dialog_rate_title)
-                .setMessage(R.string.dialog_rate_message)
-                .setPositiveButton(R.string.dialog_rate_rate_now, (dialogInterface, i) -> startAppMarketActivity())
-                .setNeutralButton(R.string.dialog_rate_later, null)
-                .setNegativeButton(R.string.dialog_rate_no_thanks, (dialogInterface, i) -> AppManager.disableRateDialog(getContext())).create();
-    }
-
-    private void startAppMarketActivity() {
-        final String appPackageName = Utils.PACKAGE_COMMANDLIBRARY;
-        try {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
-        } catch (android.content.ActivityNotFoundException e) {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.kt
new file mode 100644
index 0000000..288a1b2
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/dialogs/RateDialogFragment.kt
@@ -0,0 +1,42 @@
+package com.inspiredandroid.linuxcommandbibliotheca.fragments.dialogs
+
+import android.app.Dialog
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.support.v4.app.DialogFragment
+import android.support.v7.app.AlertDialog
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils
+
+/**
+ * Created by Simon Schubert
+ */
+class RateDialogFragment : DialogFragment() {
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        return AlertDialog.Builder(context!!)
+                .setTitle(R.string.dialog_rate_title)
+                .setMessage(R.string.dialog_rate_message)
+                .setPositiveButton(R.string.dialog_rate_rate_now) { dialogInterface, i -> startAppMarketActivity() }
+                .setNeutralButton(R.string.dialog_rate_later, null)
+                .setNegativeButton(R.string.dialog_rate_no_thanks) { dialogInterface, i -> AppManager.disableRateDialog(context) }.create()
+    }
+
+    private fun startAppMarketActivity() {
+        val appPackageName = Utils.PACKAGE_COMMANDLIBRARY
+        try {
+            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=$appPackageName")))
+        } catch (e: android.content.ActivityNotFoundException) {
+            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=$appPackageName")))
+        }
+    }
+
+    companion object {
+
+        val instance: RateDialogFragment
+            get() = RateDialogFragment()
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
index 19fbc1c..9b9e4a3 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
@@ -27,13 +27,13 @@ public class FragmentCoordinator {
     public static void startScriptCategoryActivity(FragmentActivity activity, int category) {
         if (!isTabletLayout(activity)) {
             Intent intent = new Intent(activity, ScriptChildrenActivity.class);
-            intent.putExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, category);
+            intent.putExtra(ScriptChildrenActivity.Companion.getEXTRA_CATEGORY_ID(), category);
             activity.startActivity(intent);
         } else {
             View container = activity.findViewById(R.id.fragment_container_secondary);
             ((ViewGroup) container).removeAllViews();
 
-            activity.getIntent().putExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, category);
+            activity.getIntent().putExtra(ScriptChildrenActivity.Companion.getEXTRA_CATEGORY_ID(), category);
 
             Fragment fragment = new BasicChildrenFragment();
 
@@ -48,7 +48,7 @@ public class FragmentCoordinator {
     public static void startCommandManActivity(FragmentActivity activity, long id) {
         if (!isTabletLayout(activity)) {
             Intent intent = new Intent(activity, CommandManActivity.class);
-            intent.putExtra(CommandManActivity.EXTRA_COMMAND_ID, id);
+            intent.putExtra(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
             activity.startActivity(intent);
         } else {
             View container = activity.findViewById(R.id.fragment_container_secondary);
@@ -79,7 +79,7 @@ public class FragmentCoordinator {
 
         if (!isTabletLayout(activity)) {
             Intent intent = new Intent(activity, CommandManActivity.class);
-            intent.putExtra(CommandManActivity.EXTRA_COMMAND_ID, id);
+            intent.putExtra(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
             activity.startActivity(intent);
         } else {
             View container = activity.findViewById(R.id.fragment_container_secondary);
@@ -99,9 +99,9 @@ public class FragmentCoordinator {
 
         // Add unique command ID for fragment
         Bundle bundle = new Bundle();
-        bundle.putLong(CommandManActivity.EXTRA_COMMAND_ID, id);
-        bundle.putString(CommandManActivity.EXTRA_COMMAND_NAME, name);
-        bundle.putInt(CommandManActivity.EXTRA_COMMAND_CATEGORY, category);
+        bundle.putLong(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
+        bundle.putString(CommandManActivity.Companion.getEXTRA_COMMAND_NAME(), name);
+        bundle.putInt(CommandManActivity.Companion.getEXTRA_COMMAND_CATEGORY(), category);
         fragment.setArguments(bundle);
 
         FragmentManager fragmentManager = activity.getSupportFragmentManager();
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
index cd77127..422e360 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
@@ -29,11 +29,7 @@ open class CommandChildModel : RealmObject {
     companion object {
 
         fun getMans(model: CommandChildModel): Array<String> {
-            val data = arrayOf<String>()
-            for (i in 0 until model.mans.size) {
-                data[i] = model.mans[i]?.man!!
-            }
-            return data
+            return model.mans.map { it.man!! }.toTypedArray()
         }
     }
 }
