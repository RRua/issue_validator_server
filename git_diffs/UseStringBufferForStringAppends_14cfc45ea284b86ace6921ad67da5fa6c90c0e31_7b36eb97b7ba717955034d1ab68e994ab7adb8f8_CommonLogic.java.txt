diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
index ebef9db..c74e7ed 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
@@ -8,8 +8,8 @@ import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.usbinfo.InfoFragmentFactory;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.UsbInfoActivity;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
 public class Navigation {
@@ -29,7 +29,7 @@ public class Navigation {
             i.putExtra(UsbInfoActivity.EXTRA_DATA_ANDROID, device);
             startActivity(i);
         } else {
-            final Fragment fragment = InfoFragmentFactory.getFragment(device);
+            final Fragment fragment = FragmentFactory.getFragment(device);
             stackFragment(fragment);
         }
     }
@@ -40,7 +40,7 @@ public class Navigation {
             i.putExtra(UsbInfoActivity.EXTRA_DATA_LINUX, device);
             startActivity(i);
         } else {
-            final Fragment fragment = InfoFragmentFactory.getFragment(device);
+            final Fragment fragment = FragmentFactory.getFragment(device);
             stackFragment(fragment);
         }
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
new file mode 100644
index 0000000..0f00a28
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
@@ -0,0 +1,67 @@
+package aws.apps.usbDeviceEnumerator.ui.debug;
+
+import android.os.Bundle;
+import android.support.design.widget.TabLayout;
+import android.support.v4.app.Fragment;
+import android.support.v4.view.ViewPager;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+
+import java.util.Set;
+
+import aws.apps.usbDeviceEnumerator.R;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class DebugActivity extends AppCompatActivity {
+    private static final String TAG = DebugActivity.class.getSimpleName();
+    private static final int LAYOUT_ID = R.layout.act_viewpager;
+    private static final int MENU_ID = R.menu.debug_menu;
+
+    @BindView(R.id.tabs)
+    protected TabLayout tabLayout;
+
+    @BindView(R.id.pager)
+    protected ViewPager viewPager;
+
+    private TabAdapter tabAdapter;
+
+    @Override
+    public void onCreate(final Bundle bundle) {
+        super.onCreate(bundle);
+        setContentView(LAYOUT_ID);
+        ButterKnife.bind(this);
+
+        tabAdapter = new TabAdapter(this, getSupportFragmentManager());
+
+        viewPager.setOffscreenPageLimit(3);
+        viewPager.setAdapter(tabAdapter);
+        tabLayout.setupWithViewPager(viewPager);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(MENU_ID, menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.menu_refresh:
+                final Set<Fragment> fragments = tabAdapter.getItems();
+                for (final Fragment fragment : fragments) {
+                    if (fragment instanceof Reloadable) {
+                        Log.d(TAG, "Reloading: " + fragment);
+                        ((Reloadable) fragment).reload();
+                    }
+                }
+                return true;
+        }
+        return false;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/Reloadable.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/Reloadable.java
new file mode 100644
index 0000000..2354e7b
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/Reloadable.java
@@ -0,0 +1,5 @@
+package aws.apps.usbDeviceEnumerator.ui.debug;
+
+public interface Reloadable {
+    void reload();
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
new file mode 100644
index 0000000..b0dfd0c
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
@@ -0,0 +1,71 @@
+package aws.apps.usbDeviceEnumerator.ui.debug;
+
+import android.content.Context;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+import android.view.ViewGroup;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DeviceDumpFragment;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpFragment;
+import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragment;
+
+/*package*/ class TabAdapter extends FragmentPagerAdapter {
+    private static Class<?>[] FRAGMENT_ARRAY = {
+            DirectoryDumpFragment.class,
+            DirectoryDumpNativeFragment.class,
+            DeviceDumpFragment.class,
+    };
+    private static int[] TITLE_ARRAY = {
+            R.string.label_tab_directory_dump,
+            R.string.label_tab_directory_dump_native,
+            R.string.label_tab_device_dump,
+    };
+
+    private final Set<Fragment> registeredFragments = new HashSet<>();
+    private final Context context;
+
+    public TabAdapter(Context context,
+                      FragmentManager fm) {
+        super(fm);
+        this.context = context.getApplicationContext();
+    }
+
+    @Override
+    public int getCount() {
+        return FRAGMENT_ARRAY.length;
+    }
+
+    @Override
+    public CharSequence getPageTitle(int position) {
+        return context.getString(TITLE_ARRAY[position]);
+    }
+
+    @Override
+    public Fragment getItem(int position) {
+        final Fragment fragment = Fragment.instantiate(context, FRAGMENT_ARRAY[position].getName());
+        registeredFragments.add(fragment);
+        return fragment;
+    }
+
+    @Override
+    public void destroyItem(ViewGroup container, int position, Object object) {
+        super.destroyItem(container, position, object);
+        registeredFragments.remove(object);
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup container, int position) {
+        final Object fragment = super.instantiateItem(container, position);
+        registeredFragments.add((Fragment) fragment);
+        return fragment;
+    }
+
+    public Set<Fragment> getItems() {
+        return registeredFragments;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
new file mode 100644
index 0000000..998d2d6
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
@@ -0,0 +1,50 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.content.Context;
+import android.support.annotation.ColorInt;
+import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
+import android.text.Spannable;
+import android.text.SpannableStringBuilder;
+import android.text.style.CharacterStyle;
+import android.text.style.ForegroundColorSpan;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import aws.apps.usbDeviceEnumerator.R;
+import uk.co.alt236.usbdeviceenumerator.sysbususb.dump.ShellSysBusDumper;
+
+/*package*/ class DeviceDump {
+    @SuppressWarnings("StringConcatenationInsideStringBufferAppend")
+    public static CharSequence getDump(@NonNull final Context context,
+                                       @NonNull final String directory) {
+        final int color = ContextCompat.getColor(context, R.color.colorAccent);
+        final SpannableStringBuilder sb = new SpannableStringBuilder();
+
+        sb.append("Directory '" + directory + "':\n\n");
+
+        final String rawDump = ShellSysBusDumper.getDump(directory);
+        if (rawDump.isEmpty()) {
+            sb.append("No data.\n\n");
+            sb.append(context.getString(R.string.debug_unexpected_result_explanation));
+        } else {
+            sb.append(rawDump);
+            colorize(sb, ShellSysBusDumper.DEVICE_START, color);
+            colorize(sb, ShellSysBusDumper.DEVICE_END, color);
+        }
+        return sb;
+    }
+
+    private static void colorize(final SpannableStringBuilder sb,
+                                 final String pattern,
+                                 @ColorInt final int color) {
+        final Pattern p = Pattern.compile(pattern);
+        final Matcher m = p.matcher(sb.toString());
+
+        while (m.find()) {
+            final CharacterStyle span = new ForegroundColorSpan(color);
+            sb.setSpan(span, m.start(), m.end(), Spannable.SPAN_INCLUSIVE_INCLUSIVE);
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
new file mode 100644
index 0000000..b549458
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
@@ -0,0 +1,41 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
+import aws.apps.usbDeviceEnumerator.util.Constants;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class DeviceDumpFragment extends Fragment implements Reloadable {
+    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
+
+    @BindView(android.R.id.content)
+    protected TextView textView;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        return inflater.inflate(LAYOUT_ID, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        ButterKnife.bind(this, view);
+        textView.setMaxLines(Integer.MAX_VALUE);
+    }
+
+    @Override
+    public void reload() {
+        if (isAdded() && getActivity() != null && getView() != null) {
+            final String directory = Constants.PATH_SYS_BUS_USB;
+            textView.setText(DeviceDump.getDump(getContext(), directory));
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
new file mode 100644
index 0000000..dd6f281
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
@@ -0,0 +1,116 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.text.SpannableStringBuilder;
+
+import java.io.File;
+import java.util.Arrays;
+import java.util.Comparator;
+
+import aws.apps.usbDeviceEnumerator.R;
+
+/*package*/ class DirectoryDump {
+    private static final Comparator<File> FILE_COMPARATOR = new FileComparator();
+    private static final String FILE_PREFIX = "    ";
+    private static final String DIR_PREFIX = "[D] ";
+    private static final char BOX_CORNER = '\u2514';
+
+    public static CharSequence getDump(@NonNull final Context context,
+                                       @NonNull final String dir) {
+        return getDump(context, new File(dir));
+    }
+
+    @SuppressWarnings("StringConcatenationInsideStringBufferAppend")
+    public static CharSequence getDump(@NonNull final Context context,
+                                       @NonNull final File dir) {
+        final SpannableStringBuilder sb = new SpannableStringBuilder();
+        sb.append("Directory '" + dir + "':\n\n");
+
+        final boolean possibleError;
+        if (!dir.exists()) {
+            possibleError = true;
+            sb.append("Directory does not exist!");
+        } else if (!dir.isDirectory()) {
+            possibleError = true;
+            sb.append("Not a directory!");
+        } else {
+            final File[] children = dir.listFiles();
+            if (children == null) {
+                possibleError = true;
+                sb.append("Directory has null children! - Access permission issues?");
+            } else {
+                if (children.length == 0) {
+                    possibleError = true;
+                    sb.append("Directory has " + children.length + " children.");
+                } else {
+                    possibleError = false;
+                    sb.append("Directory has " + children.length + " children:");
+                    sb.append("\n");
+                    addChildren(sb, dir, 0, 1);
+                }
+            }
+        }
+
+        if (possibleError) {
+            sb.append("\n\n");
+            sb.append(context.getString(R.string.debug_unexpected_result_explanation));
+        }
+
+        return sb.toString();
+    }
+
+    @SuppressWarnings("StringConcatenationInsideStringBufferAppend")
+    private static void addChildren(final SpannableStringBuilder sb,
+                                    final File parent,
+                                    final int depth,
+                                    final int maxDepth) {
+        final File[] children = parent.listFiles();
+        if (children != null && children.length > 0) {
+            final String dirPrefix = getPrefix(depth, DIR_PREFIX);
+            final String filePrefix = getPrefix(depth, FILE_PREFIX);
+
+            Arrays.sort(children, FILE_COMPARATOR);
+            for (final File child : children) {
+                sb.append("\n");
+                final String name = depth == 0 ? child.getAbsolutePath() : child.getName();
+                if (child.isDirectory()) {
+                    sb.append(dirPrefix + name);
+                    if (depth < maxDepth) {
+                        addChildren(sb, child, depth + 1, maxDepth);
+                    }
+                } else {
+                    sb.append(filePrefix + name);
+                }
+            }
+        }
+    }
+
+    private static String getPrefix(final int depth, final String suffix) {
+        final boolean root = depth == 0;
+        final String spaces = root ? "" : new String(new char[DIR_PREFIX.length()]).replace('\0', ' ');
+        final String boxCorner = root ? "" : Character.toString(BOX_CORNER);
+
+        return spaces + boxCorner + suffix;
+    }
+
+    private static class FileComparator implements Comparator<File> {
+
+        @Override
+        public int compare(File lhs, File rhs) {
+            if (lhs == null && rhs == null) {
+                return 0;
+            } else if (lhs == null || rhs == null) {
+                return lhs == null ? -1 : 1;
+            }
+            int cmp = compare(lhs.getParentFile(), rhs.getParentFile());
+            if (cmp == 0) {
+                if (lhs.isDirectory() != rhs.isDirectory()) {
+                    return lhs.isDirectory() ? -1 : 1;
+                }
+                cmp = lhs.getName().compareTo(rhs.getName());
+            }
+            return cmp;
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
new file mode 100644
index 0000000..9c33bc7
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
@@ -0,0 +1,41 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
+import aws.apps.usbDeviceEnumerator.util.Constants;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class DirectoryDumpFragment extends Fragment implements Reloadable {
+    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
+
+    @BindView(android.R.id.content)
+    protected TextView textView;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        return inflater.inflate(LAYOUT_ID, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        ButterKnife.bind(this, view);
+        textView.setMaxLines(Integer.MAX_VALUE);
+    }
+
+    @Override
+    public void reload() {
+        if (isAdded() && getActivity() != null && getView() != null) {
+            final String directory = Constants.PATH_SYS_BUS_USB;
+            textView.setText(DirectoryDump.getDump(getContext(), directory));
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
new file mode 100644
index 0000000..cf9b228
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
@@ -0,0 +1,64 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import java.io.BufferedReader;
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+
+/*package*/ class DirectoryDumpNative {
+
+    @SuppressWarnings({"StringConcatenationInsideStringBufferAppend", "TryWithIdenticalCatches"})
+    public static CharSequence getDump(@NonNull final Context context,
+                                       @NonNull final String dir) {
+
+        final String[] command = {"ls", "-al", dir};
+        final StringBuilder sb = new StringBuilder();
+        sb.append("Directory '" + dir + "':\n\n");
+        sb.append("Will execute: " + Arrays.toString(command) + "\n\n");
+
+        final ProcessBuilder ps = new ProcessBuilder(command);
+        ps.redirectErrorStream(true);
+
+        BufferedReader in = null;
+        try {
+            final Process pr = ps.start();
+
+            in = new BufferedReader(new InputStreamReader(pr.getInputStream()));
+
+            String line;
+            int count = 0;
+            while ((line = in.readLine()) != null) {
+                if (count > 0) {
+                    sb.append('\n');
+                }
+
+                sb.append(line);
+                count++;
+            }
+
+            pr.waitFor();
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+            close(in);
+        }
+
+        return sb.toString();
+    }
+
+    private static void close(final Closeable closeable) {
+        if (closeable != null) {
+            try {
+                closeable.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
new file mode 100644
index 0000000..1839632
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
@@ -0,0 +1,44 @@
+package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import java.io.File;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
+import aws.apps.usbDeviceEnumerator.util.Constants;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class DirectoryDumpNativeFragment extends Fragment implements Reloadable {
+    private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
+
+    @BindView(android.R.id.content)
+    protected TextView textView;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        return inflater.inflate(LAYOUT_ID, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        ButterKnife.bind(this, view);
+        textView.setMaxLines(Integer.MAX_VALUE);
+    }
+
+    @Override
+    public void reload() {
+        if (isAdded() && getActivity() != null && getView() != null) {
+            final String dirString = Constants.PATH_SYS_BUS_USB;
+            final File directory = new File(dirString);
+            textView.setText(DirectoryDumpNative.getDump(getContext(), dirString));
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
index b4e3339..a7401f2 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
@@ -16,9 +16,11 @@
 package aws.apps.usbDeviceEnumerator.ui.main;
 
 import android.content.Context;
+import android.content.Intent;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbManager;
 import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.Fragment;
 import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
@@ -44,10 +46,12 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
 import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
 import aws.apps.usbDeviceEnumerator.ui.common.Navigation;
 import aws.apps.usbDeviceEnumerator.ui.dbupdate.DatabaseUpdater;
+import aws.apps.usbDeviceEnumerator.ui.debug.DebugActivity;
 import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabController;
 import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabViewHolder;
 import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
-import aws.apps.usbDeviceEnumerator.ui.usbinfo.InfoFragmentFactory;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
+import aws.apps.usbDeviceEnumerator.util.Constants;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbManager;
 
@@ -91,7 +95,7 @@ public class MainActivity extends AppCompatActivity {
         mNavigation = new Navigation(this);
 
         mUsbManAndroid = (UsbManager) getSystemService(Context.USB_SERVICE);
-        mUsbManagerLinux = new SysBusUsbManager();
+        mUsbManagerLinux = new SysBusUsbManager(Constants.PATH_SYS_BUS_USB);
 
         mDbUsb = new DataProviderUsbInfo(this);
         mDbComp = new DataProviderCompanyInfo(this);
@@ -135,6 +139,7 @@ public class MainActivity extends AppCompatActivity {
     /**
      * Creates the menu items
      */
+    @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         MenuInflater inflater = getMenuInflater();
         inflater.inflate(R.menu.main_menu, menu);
@@ -144,11 +149,16 @@ public class MainActivity extends AppCompatActivity {
     /**
      * Handles item selections
      */
+    @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.menu_about:
                 AboutDialogFactory.createAboutDialog(this).show();
                 return true;
+            case R.id.menu_debug:
+                final Intent intent = new Intent(this, DebugActivity.class);
+                ActivityCompat.startActivity(this, intent, null);
+                return true;
             case R.id.menu_update_db:
                 final ProgressDialogControl control = new ProgressDialogControl(getSupportFragmentManager());
                 final DatabaseUpdater databaseUpdater = new DatabaseUpdater(control, mDbComp, mDbUsb, mZipComp);
@@ -179,10 +189,10 @@ public class MainActivity extends AppCompatActivity {
 
             switch (tabId) {
                 case TabController.TAB_ANDROID_INFO:
-                    fragment = InfoFragmentFactory.getFragment(text);
+                    fragment = FragmentFactory.getFragment(text);
                     break;
                 case TabController.TAB_LINUX_INFO:
-                    fragment = InfoFragmentFactory.getFragment(mLinuxDeviceMap.get(text));
+                    fragment = FragmentFactory.getFragment(mLinuxDeviceMap.get(text));
                     break;
                 default:
                     fragment = null;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
deleted file mode 100644
index 8f79b32..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-
-import aws.apps.usbDeviceEnumerator.R;
-
-/*package*/ abstract class BaseInfoFragment extends Fragment {
-
-    @Override
-    public void onCreate(Bundle saved) {
-        super.onCreate(saved);
-        setHasOptionsMenu(true);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.frag_menu, menu);
-        super.onCreateOptionsMenu(menu, inflater);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_export:
-                ShareUtils.share(
-                        getActivity(),
-                        getString(R.string.app_name),
-                        getSharePayload());
-                return true;
-        }
-        return super.onOptionsItemSelected(item);
-    }
-
-    public abstract String getSharePayload();
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java
deleted file mode 100644
index f46ec2a..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
-
-import android.view.LayoutInflater;
-import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
-
-import aws.apps.usbDeviceEnumerator.R;
-
-/*package*/ class CommonLogic {
-    private static final String TAG = CommonLogic.class.getSimpleName();
-
-    public static void addDataRow(LayoutInflater inflater, TableLayout tlb, String cell1Text, String cell2Text) {
-        final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
-        final TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
-        final TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
-        tv1.setText(cell1Text);
-        tv2.setText(cell2Text);
-        tlb.addView(row);
-    }
-
-    public static String padLeft(String string, String padding, int size) {
-        String pad = "";
-        while ((pad + string).length() < size) {
-            pad += padding + pad;
-        }
-        return pad + string;
-    }
-
-    public static String getSharePayload(final InfoViewHolder holder) {
-        final StringBuilder sb = new StringBuilder();
-        sb.append(ShareUtils.tableToString(holder.getHeaderTable()));
-        sb.append(ShareUtils.tableToString(holder.getTopTable()));
-        sb.append('\n');
-        sb.append(ShareUtils.tableToString(holder.getBottomTable()));
-        return sb.toString();
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
deleted file mode 100644
index 2423117..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TableLayout;
-import android.widget.TextView;
-
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
-import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
-import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
-
-public class LinuxUsbInfoFragment extends BaseInfoFragment {
-    public final static String DEFAULT_STRING = "???";
-    private final static String EXTRA_DATA = LinuxUsbInfoFragment.class.getName() + ".BUNDLE_DATA";
-    private static final int LAYOUT_ID = R.layout.fragment_usb_info;
-    private final String TAG = this.getClass().getName();
-    private SysBusUsbDevice device;
-    private boolean validData;
-
-    private InfoViewHolder viewHolder;
-    private DataFetcher dataFetcher;
-
-    public static Fragment create(final SysBusUsbDevice usbDevice) {
-        final Fragment fragment = new LinuxUsbInfoFragment();
-        final Bundle bundle = new Bundle();
-        bundle.putParcelable(EXTRA_DATA, usbDevice);
-        fragment.setArguments(bundle);
-        return fragment;
-    }
-
-    @Override
-    public void onAttach(final Context context) {
-        super.onAttach(context);
-        dataFetcher = new DataFetcher(
-                new DataProviderCompanyInfo(context),
-                new DataProviderUsbInfo(context),
-                new DataProviderCompanyLogo(context));
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        device = getArguments().getParcelable(EXTRA_DATA);
-        final View view;
-
-        if (device == null) {
-            view = inflater.inflate(R.layout.fragment_error, container, false);
-            validData = false;
-        } else {
-            view = inflater.inflate(LAYOUT_ID, container, false);
-            validData = true;
-        }
-
-        return view;
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle bundle) {
-        super.onViewCreated(view, bundle);
-
-        if (validData) {
-            viewHolder = new InfoViewHolder(view);
-            populateDataTable(LayoutInflater.from(getContext()));
-        } else {
-            final TextView textView = (TextView) view.findViewById(R.id.errorText);
-            textView.setText(R.string.error_loading_device_info_unknown);
-        }
-    }
-
-    private void populateDataTable(LayoutInflater inflater) {
-        final String vid = CommonLogic.padLeft(device.getVid(), "0", 4);
-        final String pid = CommonLogic.padLeft(device.getPid(), "0", 4);
-        final String deviceClass = UsbConstantResolver.resolveUsbClass(device);
-
-        viewHolder.getLogo().setImageResource(R.drawable.no_image);
-
-        viewHolder.getVid().setText(vid);
-        viewHolder.getPid().setText(pid);
-        viewHolder.getDevicePath().setText(device.getDevicePath());
-        viewHolder.getDeviceClass().setText(deviceClass);
-
-        viewHolder.getReportedVendor().setText(device.getReportedVendorName());
-        viewHolder.getReportedProduct().setText(device.getReportedProductName());
-
-        final TableLayout bottomTable = viewHolder.getBottomTable();
-        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.usb_version_), device.getUsbVersion());
-        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.speed_), device.getSpeed());
-        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.protocol_), device.getDeviceProtocol());
-        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.maximum_power_), device.getMaxPower());
-        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.serial_number_), device.getSerialNumber());
-
-        loadAsyncData(vid, pid, device.getReportedVendorName());
-    }
-
-    private void loadAsyncData(String vid, String pid, String reportedVendorName) {
-        dataFetcher.fetchData(vid, pid, reportedVendorName, new DataFetcher.Callback() {
-            @Override
-            public void onSuccess(final String vendorFromDb,
-                                  final String productFromDb,
-                                  final Bitmap bitmap) {
-
-                if (isAdded() && getActivity() != null && getView() != null) {
-                    getActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            viewHolder.getVendorFromDb().setText(vendorFromDb);
-                            viewHolder.getProductFromDb().setText(productFromDb);
-                            if (bitmap != null) {
-                                final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
-                                viewHolder.getLogo().setImageDrawable(drawable);
-                            } else {
-                                viewHolder.getLogo().setImageResource(R.drawable.no_image);
-                            }
-                        }
-                    });
-                }
-            }
-        });
-    }
-
-    @Override
-    public String getSharePayload() {
-        return CommonLogic.getSharePayload(viewHolder);
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
index 3fb41c5..3f237e1 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
@@ -22,6 +22,7 @@ import android.support.v7.app.AppCompatActivity;
 import android.view.MenuItem;
 
 import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
 public class UsbInfoActivity extends AppCompatActivity {
@@ -40,14 +41,14 @@ public class UsbInfoActivity extends AppCompatActivity {
             finish();
         } else {
             final String androidKey = b.getString(EXTRA_DATA_ANDROID);
-            final SysBusUsbDevice linuxDevice = b.getParcelable(EXTRA_DATA_LINUX);
+            final SysBusUsbDevice linuxDevice = (SysBusUsbDevice) b.getSerializable(EXTRA_DATA_LINUX);
 
             final Fragment fragment;
 
             if (androidKey != null) {
-                fragment = InfoFragmentFactory.getFragment(androidKey);
+                fragment = FragmentFactory.getFragment(androidKey);
             } else if (linuxDevice != null) {
-                fragment = InfoFragmentFactory.getFragment(linuxDevice);
+                fragment = FragmentFactory.getFragment(linuxDevice);
             } else {
                 fragment = null;
             }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java
new file mode 100644
index 0000000..bd6dd05
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java
@@ -0,0 +1,128 @@
+/*******************************************************************************
+ * Copyright 2011 Alexandros Schillings
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
+import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
+import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
+
+/*package*/ abstract class BaseInfoFragment extends Fragment {
+
+    private DataFetcher dataFetcher;
+
+    @Override
+    public void onAttach(final Context context) {
+        super.onAttach(context);
+        dataFetcher = new DataFetcher(
+                new DataProviderCompanyInfo(context),
+                new DataProviderUsbInfo(context),
+                new DataProviderCompanyLogo(context));
+    }
+
+    @Override
+    public void onCreate(Bundle saved) {
+        super.onCreate(saved);
+        setHasOptionsMenu(true);
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        inflater.inflate(R.menu.frag_menu, menu);
+        super.onCreateOptionsMenu(menu, inflater);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.menu_export:
+                ShareUtils.share(
+                        getActivity(),
+                        getString(R.string.app_name),
+                        getSharePayload());
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    public abstract String getSharePayload();
+
+
+    protected void loadAsyncData(final ViewHolder viewHolder,
+                                 final String vid,
+                                 final String pid,
+                                 final String reportedVendorName) {
+
+        dataFetcher.fetchData(vid, pid, reportedVendorName, new DataFetcher.Callback() {
+            @Override
+            public void onSuccess(final String vendorFromDb,
+                                  final String productFromDb,
+                                  final Bitmap bitmap) {
+
+                if (isAdded() && getActivity() != null && getView() != null) {
+                    getActivity().runOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            viewHolder.getVendorFromDb().setText(vendorFromDb);
+                            viewHolder.getProductFromDb().setText(productFromDb);
+                            if (bitmap != null) {
+                                final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
+                                viewHolder.getLogo().setImageDrawable(drawable);
+                            } else {
+                                viewHolder.getLogo().setImageResource(R.drawable.no_image);
+                            }
+                        }
+                    });
+                }
+            }
+        });
+    }
+
+    protected void addDataRow(LayoutInflater inflater,
+                              TableLayout tlb,
+                              String cell1Text,
+                              String cell2Text) {
+        final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
+        final TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
+        final TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
+        tv1.setText(cell1Text);
+        tv2.setText(cell2Text);
+        tlb.addView(row);
+    }
+
+    protected String padLeft(String string,
+                             String padding,
+                             int size) {
+        String pad = "";
+        while ((pad + string).length() < size) {
+            pad += padding + pad;
+        }
+        return pad + string;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/DataFetcher.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
similarity index 97%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/DataFetcher.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
index 10dc472..2c20f7e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/DataFetcher.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.graphics.Bitmap;
 import android.text.TextUtils;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
similarity index 55%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
index 2c7da5a..f1d08c9 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
@@ -1,16 +1,16 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.support.v4.app.Fragment;
 
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
-public final class InfoFragmentFactory {
+public final class FragmentFactory {
 
     public static Fragment getFragment(String usbKey) {
-        return AndroidUsbInfoFragment.create(usbKey);
+        return InfoFragmentAndroid.create(usbKey);
     }
 
     public static Fragment getFragment(SysBusUsbDevice usbDevice) {
-        return LinuxUsbInfoFragment.create(usbDevice);
+        return InfoFragmentLinux.create(usbDevice);
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
similarity index 64%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
index 0df2ba3..a95fe3f 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
@@ -13,11 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbInterface;
@@ -32,43 +30,26 @@ import android.widget.TableLayout;
 import android.widget.TextView;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
-import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
 import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 
-public class AndroidUsbInfoFragment extends BaseInfoFragment {
+public class InfoFragmentAndroid extends BaseInfoFragment {
     public final static int TYPE_ANDROID_INFO = 0;
     public final static int TYPE_LINUX_INFO = 1;
     public final static String DEFAULT_STRING = "???";
-    private final static String EXTRA_DATA = AndroidUsbInfoFragment.class.getName() + ".BUNDLE_DATA";
+    private final static String EXTRA_DATA = InfoFragmentAndroid.class.getName() + ".BUNDLE_DATA";
     private static final int LAYOUT_ID = R.layout.fragment_usb_info;
 
     private final String TAG = this.getClass().getName();
     private String usbKey = DEFAULT_STRING;
-    private InfoViewHolder viewHolder;
+    private ViewHolder viewHolder;
     private UsbManager usbMan;
-    private DataFetcher dataFetcher;
     private UsbDevice device;
     private boolean validData;
 
-    public static Fragment create(final String usbKey) {
-        final Fragment fragment = new AndroidUsbInfoFragment();
-        final Bundle bundle = new Bundle();
-        bundle.putString(EXTRA_DATA, usbKey);
-        fragment.setArguments(bundle);
-        return fragment;
-    }
-
     @Override
     public void onAttach(final Context context) {
         super.onAttach(context);
-
         usbMan = (UsbManager) getContext().getSystemService(Context.USB_SERVICE);
-        dataFetcher = new DataFetcher(
-                new DataProviderCompanyInfo(context),
-                new DataProviderUsbInfo(context),
-                new DataProviderCompanyLogo(context));
     }
 
     @Override
@@ -92,13 +73,13 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
     @Override
     public void onViewCreated(View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
-        viewHolder = new InfoViewHolder(view);
+        viewHolder = new ViewHolder(view);
 
         usbKey = getArguments().getString(EXTRA_DATA, DEFAULT_STRING);
 
 
         if (validData) {
-            viewHolder = new InfoViewHolder(view);
+            viewHolder = new ViewHolder(view);
             populateDataTable(LayoutInflater.from(getContext()));
         } else {
             final TextView textView = (TextView) view.findViewById(R.id.errorText);
@@ -111,8 +92,8 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
     }
 
     private void populateDataTable(LayoutInflater inflater) {
-        final String vid = CommonLogic.padLeft(Integer.toHexString(device.getVendorId()), "0", 4);
-        final String pid = CommonLogic.padLeft(Integer.toHexString(device.getProductId()), "0", 4);
+        final String vid = padLeft(Integer.toHexString(device.getVendorId()), "0", 4);
+        final String pid = padLeft(Integer.toHexString(device.getProductId()), "0", 4);
         final String deviceClass = UsbConstantResolver.resolveUsbClass(device.getDeviceClass());
 
         viewHolder.getLogo().setImageResource(R.drawable.no_image);
@@ -137,32 +118,32 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
                 final TableLayout bottomTable = viewHolder.getBottomTable();
                 final String usbClass = UsbConstantResolver.resolveUsbClass((iFace.getInterfaceClass()));
 
-                CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.interface_) + i, "");
-                CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.class_), usbClass);
+                addDataRow(inflater, bottomTable, getString(R.string.interface_) + i, "");
+                addDataRow(inflater, bottomTable, getString(R.string.class_), usbClass);
 
                 if (iFace.getEndpointCount() > 0) {
                     String endpointText;
                     for (int j = 0; j < iFace.getEndpointCount(); j++) {
                         endpointText = getEndpointText(iFace.getEndpoint(j), j);
-                        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.endpoint_), endpointText);
+                        addDataRow(inflater, bottomTable, getString(R.string.endpoint_), endpointText);
                     }
                 } else {
-                    CommonLogic.addDataRow(inflater, bottomTable, "\tEndpoints:", "none");
+                    addDataRow(inflater, bottomTable, "\tEndpoints:", "none");
                 }
             }
         }
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            loadAsyncData(vid, pid, device.getManufacturerName());
+            loadAsyncData(viewHolder, vid, pid, device.getManufacturerName());
         } else {
-            loadAsyncData(vid, pid, null);
+            loadAsyncData(viewHolder, vid, pid, null);
         }
     }
 
     private String getEndpointText(final UsbEndpoint endpoint, final int index) {
-        final String addressInBinary = CommonLogic.padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8);
-        final String addressInHex = CommonLogic.padLeft(Integer.toHexString(endpoint.getAddress()), "0", 2);
-        final String attributesInBinary = CommonLogic.padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
+        final String addressInBinary = padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8);
+        final String addressInHex = padLeft(Integer.toHexString(endpoint.getAddress()), "0", 2);
+        final String attributesInBinary = padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
 
         String endpointText = "#" + index + "\n";
         endpointText += getString(R.string.address_) + "0x" + addressInHex + " (" + addressInBinary + ")\n";
@@ -176,34 +157,16 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
         return endpointText;
     }
 
-    private void loadAsyncData(String vid, String pid, String reportedVendorName) {
-        dataFetcher.fetchData(vid, pid, reportedVendorName, new DataFetcher.Callback() {
-            @Override
-            public void onSuccess(final String vendorFromDb,
-                                  final String productFromDb,
-                                  final Bitmap bitmap) {
-
-                if (isAdded() && getActivity() != null && getView() != null) {
-                    getActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            viewHolder.getVendorFromDb().setText(vendorFromDb);
-                            viewHolder.getProductFromDb().setText(productFromDb);
-                            if (bitmap != null) {
-                                final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
-                                viewHolder.getLogo().setImageDrawable(drawable);
-                            } else {
-                                viewHolder.getLogo().setImageResource(R.drawable.no_image);
-                            }
-                        }
-                    });
-                }
-            }
-        });
-    }
-
     @Override
     public String getSharePayload() {
-        return CommonLogic.getSharePayload(viewHolder);
+        return ShareUtils.getSharePayload(viewHolder);
+    }
+
+    public static Fragment create(final String usbKey) {
+        final Fragment fragment = new InfoFragmentAndroid();
+        final Bundle bundle = new Bundle();
+        bundle.putString(EXTRA_DATA, usbKey);
+        fragment.setArguments(bundle);
+        return fragment;
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java
new file mode 100644
index 0000000..6a01ce4
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Copyright 2011 Alexandros Schillings
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TableLayout;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
+import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
+
+public class InfoFragmentLinux extends BaseInfoFragment {
+    public final static String DEFAULT_STRING = "???";
+    private final static String EXTRA_DATA = InfoFragmentLinux.class.getName() + ".BUNDLE_DATA";
+    private static final int LAYOUT_ID = R.layout.fragment_usb_info;
+    private final String TAG = this.getClass().getName();
+    private SysBusUsbDevice device;
+    private boolean validData;
+
+    private ViewHolder viewHolder;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        device = (SysBusUsbDevice) getArguments().getSerializable(EXTRA_DATA);
+        final View view;
+
+        if (device == null) {
+            view = inflater.inflate(R.layout.fragment_error, container, false);
+            validData = false;
+        } else {
+            view = inflater.inflate(LAYOUT_ID, container, false);
+            validData = true;
+        }
+
+        return view;
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+
+        if (validData) {
+            viewHolder = new ViewHolder(view);
+            populateDataTable(LayoutInflater.from(getContext()));
+        } else {
+            final TextView textView = (TextView) view.findViewById(R.id.errorText);
+            textView.setText(R.string.error_loading_device_info_unknown);
+        }
+    }
+
+    private void populateDataTable(LayoutInflater inflater) {
+        final String vid = padLeft(device.getVid(), "0", 4);
+        final String pid = padLeft(device.getPid(), "0", 4);
+        final String deviceClass = UsbConstantResolver.resolveUsbClass(device);
+
+        viewHolder.getLogo().setImageResource(R.drawable.no_image);
+
+        viewHolder.getVid().setText(vid);
+        viewHolder.getPid().setText(pid);
+        viewHolder.getDevicePath().setText(device.getDevicePath());
+        viewHolder.getDeviceClass().setText(deviceClass);
+
+        viewHolder.getReportedVendor().setText(device.getReportedVendorName());
+        viewHolder.getReportedProduct().setText(device.getReportedProductName());
+
+        final TableLayout bottomTable = viewHolder.getBottomTable();
+        addDataRow(inflater, bottomTable, getString(R.string.usb_version_), device.getUsbVersion());
+        addDataRow(inflater, bottomTable, getString(R.string.speed_), device.getSpeed());
+        addDataRow(inflater, bottomTable, getString(R.string.protocol_), device.getDeviceProtocol());
+        addDataRow(inflater, bottomTable, getString(R.string.maximum_power_), device.getMaxPower());
+        addDataRow(inflater, bottomTable, getString(R.string.serial_number_), device.getSerialNumber());
+
+        loadAsyncData(viewHolder, vid, pid, device.getReportedVendorName());
+    }
+
+    @Override
+    public String getSharePayload() {
+        return ShareUtils.getSharePayload(viewHolder);
+    }
+
+    public static Fragment create(final SysBusUsbDevice usbDevice) {
+        final Fragment fragment = new InfoFragmentLinux();
+        final Bundle bundle = new Bundle();
+        bundle.putSerializable(EXTRA_DATA, usbDevice);
+        fragment.setArguments(bundle);
+        return fragment;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
similarity index 78%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
index e99430b..0e2b5d2 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.app.Activity;
 import android.content.Intent;
@@ -14,6 +14,15 @@ import aws.apps.usbDeviceEnumerator.R;
 /*package*/ class ShareUtils {
     private static final String TAG = ShareUtils.class.getSimpleName();
 
+    public static String getSharePayload(final ViewHolder holder) {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(tableToString(holder.getHeaderTable()));
+        sb.append(tableToString(holder.getTopTable()));
+        sb.append('\n');
+        sb.append(ShareUtils.tableToString(holder.getBottomTable()));
+        return sb.toString();
+    }
+
     public static void share(final Activity activity,
                              final String subject,
                              final String text) {
@@ -29,10 +38,10 @@ import aws.apps.usbDeviceEnumerator.R;
         ActivityCompat.startActivity(activity, share, null);
     }
 
-    public static String tableToString(TableLayout t) {
-        StringBuilder sb = new StringBuilder();
-        if (t != null) {
+    private static String tableToString(TableLayout t) {
+        final StringBuilder sb = new StringBuilder();
 
+        if (t != null) {
             for (int i = 0; i <= t.getChildCount() - 1; i++) {
                 final TableRow row = (TableRow) t.getChildAt(i);
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
similarity index 94%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
index 221e3a3..fa3ec14 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.view.View;
 import android.widget.ImageButton;
@@ -8,7 +8,7 @@ import android.widget.TextView;
 
 import aws.apps.usbDeviceEnumerator.R;
 
-/*package*/ class InfoViewHolder {
+/*package*/ class ViewHolder {
     private final TableLayout tblUsbInfoHeader;
     private final TableLayout tblUsbInfoTop;
     private final TableLayout tblUsbInfoBottom;
@@ -22,7 +22,7 @@ import aws.apps.usbDeviceEnumerator.R;
     private final TextView tvDeviceClass;
     private final ImageButton logo;
 
-    public InfoViewHolder(final View rootView) {
+    public ViewHolder(final View rootView) {
         tblUsbInfoHeader = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_title);
         tblUsbInfoTop = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_top);
         tblUsbInfoBottom = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_bottom);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java
new file mode 100644
index 0000000..17dee2b
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/Constants.java
@@ -0,0 +1,5 @@
+package aws.apps.usbDeviceEnumerator.util;
+
+public class Constants {
+    public static final String PATH_SYS_BUS_USB = uk.co.alt236.usbdeviceenumerator.sysbususb.Constants.PATH_SYS_BUS_USB;
+}
diff --git a/linuxapp/src/main/java/uk/co/alt236/usbdeviceenumerator/linuxapp/Main.java b/linuxapp/src/main/java/uk/co/alt236/usbdeviceenumerator/linuxapp/Main.java
new file mode 100644
index 0000000..4a5a565
--- /dev/null
+++ b/linuxapp/src/main/java/uk/co/alt236/usbdeviceenumerator/linuxapp/Main.java
@@ -0,0 +1,31 @@
+package uk.co.alt236.usbdeviceenumerator.linuxapp;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
+import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbManager;
+import uk.co.alt236.usbdeviceenumerator.sysbususb.dump.ShellSysBusDumper;
+
+public class Main {
+    public static void main(String[] args) {
+        final SysBusUsbManager manager = new SysBusUsbManager();
+        System.out.println(ShellSysBusDumper.getDump());
+
+        final Map<String, SysBusUsbDevice> deviceMap = new SysBusUsbManager().getUsbDevices();
+        final List<String> keys = new ArrayList<>(deviceMap.keySet());
+        Collections.sort(keys);
+
+        for (final String key : keys) {
+            final SysBusUsbDevice device = deviceMap.get(key);
+            System.out.println(
+                    "Device: " + key +
+                            ", PID: " + device.getPid() +
+                            ", VID: " + device.getVid() +
+                            ", Vendor: '" + device.getReportedVendorName() + "'" +
+                            ", Product: '" + device.getReportedProductName() + "'");
+        }
+    }
+}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Constants.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Constants.java
new file mode 100644
index 0000000..72f0396
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Constants.java
@@ -0,0 +1,10 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+public final class Constants {
+    public static final String PATH_SYS_BUS_USB = "/sys/bus/usb/devices/";
+
+    private Constants() {
+        // NOOP
+    }
+
+}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java
deleted file mode 100644
index b524a98..0000000
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package uk.co.alt236.usbdeviceenumerator.sysbususb;
-
-import javax.annotation.Nonnull;
-
-/*package*/ class ShellSysBusDumper {
-    private static final String DEVICE_START = "__DEV_START__";
-    private static final String DEVICE_END = "__DEV_END__";
-    private static final String COMMAND_GET_USB_INFO = "for DEVICE in /sys/bus/usb/devices/*; do " +
-            " echo " + DEVICE_START + ";" +
-            " [ -f $DEVICE/idProduct ] && echo PID: $(cat $DEVICE/idProduct);" +
-            " [ -f $DEVICE/idVendor ] && echo BUSNUM: $(cat $DEVICE/busnum);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVCLASS: $(cat $DEVICE/bDeviceClass);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVNUM: $(cat $DEVICE/devnum);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVPROTOCOL: $(cat $DEVICE/bDeviceProtocol);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVSUBCLASS: $(cat $DEVICE/bDeviceSubClass);" +
-            " [ -f $DEVICE/idVendor ] && echo MAXPOWER: $(cat $DEVICE/bMaxPower);" +
-            " [ -f $DEVICE/idVendor ] && echo SERIAL: $(cat $DEVICE/serial);" +
-            " [ -f $DEVICE/idVendor ] && echo SPEED: $(cat $DEVICE/speed);" +
-            " [ -f $DEVICE/idVendor ] && echo VERSION: $(cat $DEVICE/version);" +
-            " [ -f $DEVICE/idVendor ] && echo VID: $(cat $DEVICE/idVendor);" +
-            " [ -f $DEVICE/product ] && echo MANUFACTURER: $(cat $DEVICE/manufacturer);" +
-            " [ -f $DEVICE/product ] && echo PRODUCT: $(cat $DEVICE/product);" +
-            " echo " + DEVICE_END + ";" +
-            " done";
-
-    @Nonnull
-    public static String getDump() {
-        final String dump = (new ExecTerminal()).exec(COMMAND_GET_USB_INFO);
-        return dump.replace(DEVICE_START + "\n" + DEVICE_END + "\n", "");
-    }
-}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
index 9ff9da6..d0af58f 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
@@ -15,21 +15,11 @@
  ******************************************************************************/
 package uk.co.alt236.usbdeviceenumerator.sysbususb;
 
-import android.os.Parcel;
-import android.os.Parcelable;
+import java.io.Serializable;
 
 import javax.annotation.Nonnull;
 
-public final class SysBusUsbDevice implements Parcelable {
-    public static final Creator<SysBusUsbDevice> CREATOR = new Creator<SysBusUsbDevice>() {
-        public SysBusUsbDevice createFromParcel(Parcel in) {
-            return new SysBusUsbDevice(in);
-        }
-
-        public SysBusUsbDevice[] newArray(int size) {
-            return new SysBusUsbDevice[size];
-        }
-    };
+public final class SysBusUsbDevice implements Serializable {
     private final String vid;
     private final String pid;
     private final String reportedProductName;
@@ -45,23 +35,6 @@ public final class SysBusUsbDevice implements Parcelable {
     private final String usbVersion;
     private final String devicePath;
 
-    public SysBusUsbDevice(Parcel in) {
-        this.vid = in.readString();
-        this.pid = in.readString();
-        this.reportedProductName = in.readString();
-        this.reportedVendorName = in.readString();
-        this.serialNumber = in.readString();
-        this.speed = in.readString();
-        this.serviceClass = in.readString();
-        this.deviceProtocol = in.readString();
-        this.maxPower = in.readString();
-        this.deviceSubClass = in.readString();
-        this.busNumber = in.readString();
-        this.deviceNumber = in.readString();
-        this.usbVersion = in.readString();
-        this.devicePath = in.readString();
-    }
-
     private SysBusUsbDevice(final Builder builder) {
         this.vid = builder.vid;
         this.pid = builder.pid;
@@ -79,11 +52,6 @@ public final class SysBusUsbDevice implements Parcelable {
         this.devicePath = builder.devicePath;
     }
 
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
     public String getBusNumber() {
         return busNumber;
     }
@@ -140,24 +108,6 @@ public final class SysBusUsbDevice implements Parcelable {
         return vid;
     }
 
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(vid);
-        dest.writeString(pid);
-        dest.writeString(reportedProductName);
-        dest.writeString(reportedVendorName);
-        dest.writeString(serialNumber);
-        dest.writeString(speed);
-        dest.writeString(serviceClass);
-        dest.writeString(deviceProtocol);
-        dest.writeString(maxPower);
-        dest.writeString(deviceSubClass);
-        dest.writeString(busNumber);
-        dest.writeString(deviceNumber);
-        dest.writeString(usbVersion);
-        dest.writeString(devicePath);
-    }
-
     public static final class Builder {
         private String vid;
         private String pid;
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
index bdca8df..a61f6b5 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
@@ -29,9 +29,10 @@ import javax.annotation.Nullable;
     @Nullable
     public SysBusUsbDevice create(final File usbDeviceDir) {
         final String devicePath = usbDeviceDir.getAbsolutePath() + File.separator;
+        final ContentsReader reader = new ContentsReader(devicePath);
 
-        final String busNumber = readFileContents(devicePath + "busnum");
-        final String deviceNumber = readFileContents(devicePath + "devnum");
+        final String busNumber = reader.read(UsbProperty.BUS_NUMBER);
+        final String deviceNumber = reader.read(UsbProperty.DEVICE_NUMBER);
 
         final SysBusUsbDevice retVal;
 
@@ -40,17 +41,17 @@ import javax.annotation.Nullable;
                     .withDevicePath(devicePath)
                     .withBusNumber(busNumber)
                     .withDeviceNumber(deviceNumber)
-                    .withServiceClass(readFileContents(devicePath + "bDeviceClass"))
-                    .withDeviceProtocol(readFileContents(devicePath + "bDeviceProtocol"))
-                    .withDeviceSubClass(readFileContents(devicePath + "bDeviceSubClass"))
-                    .withMaxPower(readFileContents(devicePath + "bMaxPower"))
-                    .withPid(readFileContents(devicePath + "idProduct"))
-                    .withReportedProductName(readFileContents(devicePath + "product"))
-                    .withReportedVendorName(readFileContents(devicePath + "manufacturer"))
-                    .withSerialNumber(readFileContents(devicePath + "serial"))
-                    .withSpeed(readFileContents(devicePath + "speed"))
-                    .withVid(readFileContents(devicePath + "idVendor"))
-                    .withUsbVersion(readFileContents(devicePath + "version"))
+                    .withServiceClass(reader.read(UsbProperty.DEVICE_CLASS))
+                    .withDeviceProtocol(reader.read(UsbProperty.DEVICE_PROTOCOL))
+                    .withDeviceSubClass(reader.read(UsbProperty.DEVICE_SUBCLASS))
+                    .withMaxPower(reader.read(UsbProperty.MAX_POWER))
+                    .withPid(reader.read(UsbProperty.PID))
+                    .withReportedProductName(reader.read(UsbProperty.PRODUCT))
+                    .withReportedVendorName(reader.read(UsbProperty.MANUFACTURER))
+                    .withSerialNumber(reader.read(UsbProperty.SERIAL))
+                    .withSpeed(reader.read(UsbProperty.SPEED))
+                    .withVid(reader.read(UsbProperty.VID))
+                    .withUsbVersion(reader.read(UsbProperty.VERSION))
                     .build();
         } else {
             retVal = null;
@@ -59,42 +60,54 @@ import javax.annotation.Nullable;
         return retVal;
     }
 
-    @Nonnull
-    private String readFileContents(String filePath) {
-        final File file = new File(filePath);
-        final StringBuilder fileContents = new StringBuilder(1000);
-        final int bufferSize = 1024;
 
-        if (file.exists() && !file.isDirectory()) {
-            BufferedReader reader = null;
-            try {
-                reader = new BufferedReader(new FileReader(filePath));
+    private static class ContentsReader {
 
-                char[] buf = new char[bufferSize];
-                int numRead = 0;
+        private final String basePath;
 
-                while ((numRead = reader.read(buf)) != -1) {
-                    String readData = String.valueOf(buf, 0, numRead);
-                    fileContents.append(readData);
-                    buf = new char[bufferSize];
-                }
-            } catch (FileNotFoundException e) {
-                fileContents.setLength(0);
-                e.printStackTrace();
-            } catch (IOException e) {
-                fileContents.setLength(0);
-                e.printStackTrace();
-            } finally {
-                if (reader != null) {
-                    try {
-                        reader.close();
-                    } catch (IOException e) {
-                        e.printStackTrace();
+        ContentsReader(final String basePath) {
+            this.basePath = basePath;
+        }
+
+        @Nonnull
+        private String read(final UsbProperty property) {
+            final String filePath = basePath + property.getFileName();
+
+            final File file = new File(filePath);
+            final StringBuilder fileContents = new StringBuilder(1000);
+            final int bufferSize = 1024;
+
+            if (file.exists() && !file.isDirectory()) {
+                BufferedReader reader = null;
+                try {
+                    reader = new BufferedReader(new FileReader(file));
+
+                    char[] buf = new char[bufferSize];
+                    int numRead = 0;
+
+                    while ((numRead = reader.read(buf)) != -1) {
+                        String readData = String.valueOf(buf, 0, numRead);
+                        fileContents.append(readData);
+                        buf = new char[bufferSize];
+                    }
+                } catch (FileNotFoundException e) {
+                    fileContents.setLength(0);
+                    e.printStackTrace();
+                } catch (IOException e) {
+                    fileContents.setLength(0);
+                    e.printStackTrace();
+                } finally {
+                    if (reader != null) {
+                        try {
+                            reader.close();
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
                     }
                 }
             }
-        }
 
-        return fileContents.toString().trim();
+            return fileContents.toString().trim();
+        }
     }
 }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
index 3e2b11e..5475b66 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
@@ -23,21 +23,25 @@ import java.util.Map;
 import javax.annotation.Nonnull;
 
 public class SysBusUsbManager {
-    private static final String PATH_SYS_BUS_USB = "/sys/bus/usb/devices/";
-
     private final HashMap<String, SysBusUsbDevice> myUsbDevices;
-    private final SysBusUsbDeviceFactory mSysBusUsbDeviceFactory;
+    private final SysBusUsbDeviceFactory sysBusUsbDeviceFactory;
     private final Validation validation;
+    private final String usbSysPath;
 
     public SysBusUsbManager() {
-        myUsbDevices = new HashMap<>();
-        mSysBusUsbDeviceFactory = new SysBusUsbDeviceFactory();
-        validation = new Validation();
+        this(Constants.PATH_SYS_BUS_USB);
+    }
+
+    public SysBusUsbManager(final String usbSysPath) {
+        this.usbSysPath = usbSysPath;
+        this.myUsbDevices = new HashMap<>();
+        this.sysBusUsbDeviceFactory = new SysBusUsbDeviceFactory();
+        this.validation = new Validation();
     }
 
     @Nonnull
     public Map<String, SysBusUsbDevice> getUsbDevices() {
-        populateList(PATH_SYS_BUS_USB);
+        populateList(usbSysPath);
         return Collections.unmodifiableMap(myUsbDevices);
     }
 
@@ -50,7 +54,7 @@ public class SysBusUsbManager {
         SysBusUsbDevice usb;
         for (File child : children) {
             if (validation.isValidUsbDeviceCandidate(child)) {
-                usb = mSysBusUsbDeviceFactory.create(child.getAbsoluteFile());
+                usb = sysBusUsbDeviceFactory.create(child.getAbsoluteFile());
 
                 if (usb != null) {
                     final String key = child.getName();
@@ -59,9 +63,4 @@ public class SysBusUsbManager {
             }
         }
     }
-
-    @Nonnull
-    public static String getUsbInfoViaShell() {
-        return ShellSysBusDumper.getDump();
-    }
 }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/UsbProperty.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/UsbProperty.java
new file mode 100644
index 0000000..d5084b8
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/UsbProperty.java
@@ -0,0 +1,38 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+public enum UsbProperty {
+    PID("idProduct"),
+    VID("idVendor"),
+    MANUFACTURER("manufacturer"),
+    PRODUCT("product"),
+    VERSION("version"),
+    DEVICE_CLASS("bDeviceClass"),
+    DEVICE_SUBCLASS("bDeviceSubClass"),
+    DEVICE_NUMBER("devnum"),
+    DEVICE_PROTOCOL("bDeviceProtocol"),
+    MAX_POWER("bMaxPower"),
+    BUS_NUMBER("busnum"),
+    SERIAL("serial"),
+    SPEED("speed"),
+    SUPPORTS_AUTOSUSPEND("supports_autosuspend"),
+    AUTHORIZED("authorized"),
+    MODALIAS("modalias"),
+    ALTERNATIVE_SETTING("bAlternateSetting"),
+    NUM_INTERFACES("bNumInterfaces"),
+    NUM_ENDPOINTS("bNumEndpoints"),
+    INTERFACE("interface"),
+    INTERFACE_CLASS("bInterfaceClass"),
+    INTERFACE_NUMBER("bInterfaceNumber"),
+    INTERFACE_PROTOCOL("bInterfaceProtocol"),
+    INTERFACE_SUBCLASS("bInterfaceSubClass");
+
+    private final String fileName;
+
+    UsbProperty(final String fileName) {
+        this.fileName = fileName;
+    }
+
+    public String getFileName() {
+        return fileName;
+    }
+}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ExecTerminal.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
similarity index 85%
rename from usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ExecTerminal.java
rename to usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
index 159e967..b09240a 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ExecTerminal.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package uk.co.alt236.usbdeviceenumerator.sysbususb;
-
-import android.util.Log;
+package uk.co.alt236.usbdeviceenumerator.sysbususb.dump;
 
 import java.io.BufferedReader;
 import java.io.DataInputStream;
@@ -27,7 +25,7 @@ import java.io.InputStreamReader;
     final String TAG = this.getClass().getName();
 
     public String exec(String cmd) {
-        Log.d(TAG, "^ Executing '" + cmd + "'");
+        System.out.println("^Executing '" + cmd + "'");
         try {
             Process process = Runtime.getRuntime().exec("sh");
             DataInputStream is = new DataInputStream(process.getInputStream());
@@ -47,25 +45,25 @@ import java.io.InputStreamReader;
                 }
                 return fullOutput;
             } catch (IOException e) {
-                Log.e(TAG, "^ exec, IOException 1");
+                System.err.println("exec, IOException 1");
                 e.printStackTrace();
             }
 
             process.waitFor();
 
         } catch (IOException e) {
-            Log.e(TAG, "^ exec, IOException 2");
+            System.err.println("exec, IOException 2");
             e.printStackTrace();
 
         } catch (InterruptedException e) {
-            Log.e(TAG, "^ exec, InterruptedException");
+            System.err.println("exec, InterruptedException");
             e.printStackTrace();
         }
         return "";
     }
 
     public String execSu(String cmd) {
-        Log.d(TAG, "^ Executing as SU '" + cmd + "'");
+        System.out.println("Executing as SU '" + cmd + "'");
         try {
             Process process = Runtime.getRuntime().exec("su");
             DataInputStream is = new DataInputStream(process.getInputStream());
@@ -87,16 +85,16 @@ import java.io.InputStreamReader;
                 return fullOutput;
             } catch (IOException e) {// It seems IOException is thrown when it reaches EOF.
                 e.printStackTrace();
-                Log.e(TAG, "^ execSU, IOException 1");
+                System.err.println("execSU, IOException 1");
             }
             process.waitFor();
 
         } catch (IOException e) {
             e.printStackTrace();
-            Log.e(TAG, "^ execSU, IOException 2");
+            System.err.println("execSU, IOException 2");
         } catch (InterruptedException e) {
             e.printStackTrace();
-            Log.e(TAG, "^ execSU, InterruptedException");
+            System.err.println("execSU, InterruptedException");
         }
         return "";
     }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ShellSysBusDumper.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ShellSysBusDumper.java
new file mode 100644
index 0000000..76d2ff7
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ShellSysBusDumper.java
@@ -0,0 +1,60 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb.dump;
+
+import java.util.Locale;
+
+import javax.annotation.Nonnull;
+
+import uk.co.alt236.usbdeviceenumerator.sysbususb.Constants;
+import uk.co.alt236.usbdeviceenumerator.sysbususb.UsbProperty;
+
+public class ShellSysBusDumper {
+    public static final String DEVICE_START = "-- DEVICE START--";
+    public static final String DEVICE_END = "-- DEVICE END--";
+
+    private static final String INDIVIDUAL_COMMAND = " [ -f $DEVICE/%s ] && echo %s: $(cat $DEVICE/%s);";
+    private static final String COMMAND_GET_USB_INFO = "for DEVICE in %s*; do " +
+            " echo " + DEVICE_START + ";" +
+            " echo PATH: $DEVICE;" +
+            "%s" +
+            " echo " + DEVICE_END + ";" +
+            " done";
+
+    @Nonnull
+    public static String getDump() {
+        return getDump(Constants.PATH_SYS_BUS_USB);
+    }
+
+    @Nonnull
+    public static String getDump(final String usbDevicesPath) {
+        final StringBuilder sb = new StringBuilder();
+        for (final UsbProperty usbProperty : UsbProperty.values()) {
+            sb.append(String.format(Locale.US, INDIVIDUAL_COMMAND,
+                    usbProperty.getFileName(),
+                    usbProperty.name(),
+                    usbProperty.getFileName()));
+        }
+
+        final String command = String.format(Locale.US, COMMAND_GET_USB_INFO, usbDevicesPath, sb.toString());
+        final String dump = (new ExecTerminal()).exec(command);
+        return clean(dump);
+    }
+
+    private static String clean(final String dump) {
+        final String clean = dump.replace(DEVICE_START + "\n" + DEVICE_END + "\n", "");
+        final String[] lines = clean.split(System.getProperty("line.separator"));
+
+        final String retVal;
+        if (lines.length == 3 && lines[1].endsWith("*")) {
+            // This is to avoid the case where we have
+            // [DEVICE_START]
+            // PATH: /sys/bus/usb/devices/*
+            // [DEVICE_END]
+            // This happens if we failed to read the directory
+            retVal = "";
+        } else {
+            retVal = clean;
+        }
+
+        return retVal;
+    }
+}
