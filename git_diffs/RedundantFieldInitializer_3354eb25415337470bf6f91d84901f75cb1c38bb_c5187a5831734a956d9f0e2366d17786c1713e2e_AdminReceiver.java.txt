diff --git a/app/src/main/java/com/hmdm/launcher/AdminReceiver.java b/app/src/main/java/com/hmdm/launcher/AdminReceiver.java
index 9f8d361..9635054 100644
--- a/app/src/main/java/com/hmdm/launcher/AdminReceiver.java
+++ b/app/src/main/java/com/hmdm/launcher/AdminReceiver.java
@@ -39,20 +39,18 @@ import static android.content.Context.MODE_PRIVATE;
 
 public class AdminReceiver extends DeviceAdminReceiver {
 
-    private boolean DEBUG = false;
-
     @Override
     public void onEnabled(Context context, Intent intent) {
         // We come here after both successful provisioning and manual activation of the device owner
         SharedPreferences preferences = context.getApplicationContext().getSharedPreferences( Const.PREFERENCES, MODE_PRIVATE );
-        if (DEBUG) PreferenceLogger.log(preferences, "Administrator enabled");
+        PreferenceLogger.log(preferences, "Administrator enabled");
         preferences.edit().putInt(Const.PREFERENCES_ADMINISTRATOR, Const.PREFERENCES_ON).commit();
     }
 
     @Override
     public void onProfileProvisioningComplete(Context context, Intent intent) {
         SharedPreferences preferences = context.getApplicationContext().getSharedPreferences( Const.PREFERENCES, MODE_PRIVATE );
-        if (DEBUG) PreferenceLogger.log(preferences, "Profile provisioning complete");
+        PreferenceLogger.log(preferences, "Profile provisioning complete");
 
         if ( Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP ) {
             // This function is never called on Android versions less than 5 (in fact, less than 7)
@@ -62,7 +60,7 @@ public class AdminReceiver extends DeviceAdminReceiver {
             SettingsHelper settingsHelper = SettingsHelper.getInstance(context.getApplicationContext());
             PersistableBundle bundle = intent.getParcelableExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE);
             String deviceId = null;
-            if (DEBUG) PreferenceLogger.log(preferences, "Bundle != null: " + (bundle != null));
+            PreferenceLogger.log(preferences, "Bundle != null: " + (bundle != null));
             if (bundle != null) {
                 deviceId = bundle.getString(Const.QR_DEVICE_ID_ATTR, null);
                 if (deviceId == null) {
@@ -72,7 +70,7 @@ public class AdminReceiver extends DeviceAdminReceiver {
                 if (deviceId == null) {
                     String deviceIdUse = bundle.getString(Const.QR_DEVICE_ID_USE_ATTR, null);
                     if (deviceIdUse != null) {
-                        if (DEBUG) PreferenceLogger.log(preferences, "deviceIdUse: " + deviceIdUse);
+                        PreferenceLogger.log(preferences, "deviceIdUse: " + deviceIdUse);
                         // Save for further automatic choice of the device ID
                         settingsHelper.setDeviceIdUse(deviceIdUse);
                     }
@@ -81,7 +79,7 @@ public class AdminReceiver extends DeviceAdminReceiver {
             if (deviceId != null) {
                 // Device ID is delivered in the QR code!
                 // Added: "android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE": {"com.hmdm.DEVICE_ID": "(device id)"}
-                if (DEBUG) PreferenceLogger.log(preferences, "DeviceID: " + deviceId);
+                PreferenceLogger.log(preferences, "DeviceID: " + deviceId);
                 settingsHelper.setDeviceId(deviceId);
             }
 
@@ -97,7 +95,7 @@ public class AdminReceiver extends DeviceAdminReceiver {
                 createOptions.setConfiguration(bundle.getString(Const.QR_CONFIG_ATTR, null));
                 createOptions.setGroups(bundle.getString(Const.QR_GROUP_ATTR, null));
                 if (baseUrl != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "BaseURL: " + baseUrl);
+                    PreferenceLogger.log(preferences, "BaseURL: " + baseUrl);
                     settingsHelper.setBaseUrl(baseUrl);
                     // If we don't set the secondary base URL, it will point to app.h-mdm.com by default which is wrong
                     if (secondaryBaseUrl == null) {
@@ -105,23 +103,23 @@ public class AdminReceiver extends DeviceAdminReceiver {
                     }
                 }
                 if (secondaryBaseUrl != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "SecondaryBaseURL: " + secondaryBaseUrl);
+                    PreferenceLogger.log(preferences, "SecondaryBaseURL: " + secondaryBaseUrl);
                     settingsHelper.setSecondaryBaseUrl(secondaryBaseUrl);
                 }
                 if (serverProject != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "ServerPath: " + serverProject);
+                    PreferenceLogger.log(preferences, "ServerPath: " + serverProject);
                     settingsHelper.setServerProject(serverProject);
                 }
                 if (createOptions.getCustomer() != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "Customer: " + createOptions.getCustomer());
+                    PreferenceLogger.log(preferences, "Customer: " + createOptions.getCustomer());
                     settingsHelper.setCreateOptionCustomer(createOptions.getCustomer());
                 }
                 if (createOptions.getConfiguration() != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "Configuration: " + createOptions.getConfiguration());
+                    PreferenceLogger.log(preferences, "Configuration: " + createOptions.getConfiguration());
                     settingsHelper.setCreateOptionConfigName(createOptions.getConfiguration());
                 }
                 if (createOptions.getGroups() != null) {
-                    if (DEBUG) PreferenceLogger.log(preferences, "Groups: " + bundle.getString(Const.QR_GROUP_ATTR));
+                    PreferenceLogger.log(preferences, "Groups: " + bundle.getString(Const.QR_GROUP_ATTR));
                     settingsHelper.setCreateOptionGroup(createOptions.getGroupSet());
                 }
                 settingsHelper.setQrProvisioning(true);
@@ -129,7 +127,7 @@ public class AdminReceiver extends DeviceAdminReceiver {
         } catch (Exception e) {
             // Ignored
             e.printStackTrace();
-            if (DEBUG) PreferenceLogger.printStackTrace(preferences, e);
+            PreferenceLogger.printStackTrace(preferences, e);
         }
     }
 }
diff --git a/app/src/main/java/com/hmdm/launcher/Const.java b/app/src/main/java/com/hmdm/launcher/Const.java
index ef69e86..ff7f34f 100644
--- a/app/src/main/java/com/hmdm/launcher/Const.java
+++ b/app/src/main/java/com/hmdm/launcher/Const.java
@@ -83,6 +83,8 @@ public class Const {
     public static final String GSF_PACKAGE_NAME = "com.google.android.gsf";
     public static final String SYSTEM_UI_PACKAGE_NAME = "com.android.systemui";
     public static final String KIOSK_BROWSER_PACKAGE_NAME = "com.hmdm.kiosk";
+    public static final String APUPPET_PACKAGE_NAME = "com.hmdm.control";
+    public static final String APUPPET_SERVICE_CLASS_NAME = "com.hmdm.control.GestureDispatchService";
 
     public static final String QR_BASE_URL_ATTR = "com.hmdm.BASE_URL";
     public static final String QR_SECONDARY_BASE_URL_ATTR = "com.hmdm.SECONDARY_BASE_URL";
diff --git a/app/src/main/java/com/hmdm/launcher/helper/ConfigUpdater.java b/app/src/main/java/com/hmdm/launcher/helper/ConfigUpdater.java
index c1229b2..0f931a0 100644
--- a/app/src/main/java/com/hmdm/launcher/helper/ConfigUpdater.java
+++ b/app/src/main/java/com/hmdm/launcher/helper/ConfigUpdater.java
@@ -34,6 +34,7 @@ import com.hmdm.launcher.util.DeviceInfoProvider;
 import com.hmdm.launcher.util.InstallUtils;
 import com.hmdm.launcher.util.PushNotificationMqttWrapper;
 import com.hmdm.launcher.util.RemoteLogger;
+import com.hmdm.launcher.util.SystemUtils;
 import com.hmdm.launcher.util.Utils;
 
 import org.apache.commons.io.FileUtils;
@@ -783,6 +784,13 @@ public class ConfigUpdater {
                                         // TODO: in the future, the rights must be configurable on the server
                                         Utils.autoGrantRequestedPermissions(context, packageName);
                                     }
+                                    if (BuildConfig.SYSTEM_PRIVILEGES && packageName.equals(Const.APUPPET_PACKAGE_NAME)) {
+                                        // Automatically grant required permissions to aPuppet if we can
+                                        SystemUtils.autoSetAccessibilityPermission(context,
+                                                Const.APUPPET_PACKAGE_NAME, Const.APUPPET_SERVICE_CLASS_NAME);
+                                        SystemUtils.autoSetOverlayPermission(context,
+                                                Const.APUPPET_PACKAGE_NAME);
+                                    }
                                     if (uiNotifier != null) {
                                         uiNotifier.onAppInstallComplete(packageName);
                                     }
@@ -819,7 +827,12 @@ public class ConfigUpdater {
 
     private void unregisterAppInstallReceiver() {
         if (appInstallReceiver != null) {
-            context.unregisterReceiver(appInstallReceiver);
+            try {
+                context.unregisterReceiver(appInstallReceiver);
+            } catch (Exception e) {
+                // Receiver not registered
+                e.printStackTrace();
+            }
             appInstallReceiver = null;
         }
     }
diff --git a/app/src/main/java/com/hmdm/launcher/helper/SettingsHelper.java b/app/src/main/java/com/hmdm/launcher/helper/SettingsHelper.java
index 0861b45..f1429b6 100644
--- a/app/src/main/java/com/hmdm/launcher/helper/SettingsHelper.java
+++ b/app/src/main/java/com/hmdm/launcher/helper/SettingsHelper.java
@@ -77,6 +77,13 @@ public class SettingsHelper {
         initConfig();
     }
 
+    public void refreshConfig(Context context) {
+        if (config == null) {
+            sharedPreferences = context.getSharedPreferences(PACKAGE_NAME + PREFERENCES_ID, Context.MODE_PRIVATE );
+            initConfig();
+        }
+    }
+
     private void initConfig() {
         try {
             if ( sharedPreferences.contains(PACKAGE_NAME + PREF_KEY_CONFIG) ) {
diff --git a/app/src/main/java/com/hmdm/launcher/task/GetServerConfigTask.java b/app/src/main/java/com/hmdm/launcher/task/GetServerConfigTask.java
index 5c8faa2..63692b4 100644
--- a/app/src/main/java/com/hmdm/launcher/task/GetServerConfigTask.java
+++ b/app/src/main/java/com/hmdm/launcher/task/GetServerConfigTask.java
@@ -118,7 +118,8 @@ public class GetServerConfigTask extends AsyncTask< Void, Integer, Integer > {
                 if (ProUtils.kioskModeRequired(context) &&
                         !settingsHelper.getConfig().getMainApp().equals(context.getPackageName()) &&
                         Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
-                        !Settings.canDrawOverlays(context)) {
+                        !Settings.canDrawOverlays(context) && !BuildConfig.ENABLE_KIOSK_WITHOUT_OVERLAYS) {
+                        RemoteLogger.log(context, Const.LOG_WARN, "Kiosk mode disabled: no permission to draw over other windows.");
                         settingsHelper.getConfig().setKioskMode(false);
                         settingsHelper.updateConfig(settingsHelper.getConfig());
                 }
diff --git a/app/src/main/java/com/hmdm/launcher/ui/BaseActivity.java b/app/src/main/java/com/hmdm/launcher/ui/BaseActivity.java
index 6e497e7..5d9c846 100644
--- a/app/src/main/java/com/hmdm/launcher/ui/BaseActivity.java
+++ b/app/src/main/java/com/hmdm/launcher/ui/BaseActivity.java
@@ -156,6 +156,7 @@ public class BaseActivity extends AppCompatActivity {
                     updateSettingsFromQr(result.getContents());
                 }
             } else {
+                Log.d(Const.LOG_TAG, "Failed to parse QR code!");
                 super.onActivityResult(requestCode, resultCode, data);
             }
         } catch (Exception e) {
@@ -165,6 +166,7 @@ public class BaseActivity extends AppCompatActivity {
 
     protected void updateSettingsFromQr(String qrcode) {
         try {
+            Log.d(Const.LOG_TAG, "Get initial settings from the QR code");
             SettingsHelper settingsHelper = SettingsHelper.getInstance(getApplicationContext());
             JSONObject qr = new JSONObject(qrcode);
             JSONObject extras = qr.getJSONObject(DevicePolicyManager.EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE);
@@ -175,12 +177,22 @@ public class BaseActivity extends AppCompatActivity {
                 deviceId = extras.optString(Const.QR_LEGACY_DEVICE_ID_ATTR, null);
             }
             if (deviceId != null) {
+                Log.d(Const.LOG_TAG, "Device ID: " + deviceId);
                 settingsHelper.setDeviceId(deviceId);
+            } else {
+                Log.d(Const.LOG_TAG, "Device ID is null");
+                String deviceIdUse = extras.optString(Const.QR_DEVICE_ID_USE_ATTR, null);
+                if (deviceIdUse != null) {
+                    Log.d(Const.LOG_TAG, "Device ID use: " + deviceIdUse);
+                    // Save for further automatic choice of the device ID
+                    settingsHelper.setDeviceIdUse(deviceIdUse);
+                }
             }
 
             String baseUrl = extras.optString(Const.QR_BASE_URL_ATTR, null);
             String secondaryBaseUrl = extras.optString(Const.QR_SECONDARY_BASE_URL_ATTR, null);
             if (baseUrl != null) {
+                Log.d(Const.LOG_TAG, "Base URL: " + baseUrl);
                 settingsHelper.setBaseUrl(baseUrl);
                 // If we don't set the secondary base URL, it will point to app.h-mdm.com by default which is wrong
                 if (secondaryBaseUrl == null) {
@@ -188,11 +200,13 @@ public class BaseActivity extends AppCompatActivity {
                 }
             }
             if (secondaryBaseUrl != null) {
+                Log.d(Const.LOG_TAG, "Secondary base URL: " + baseUrl);
                 settingsHelper.setSecondaryBaseUrl(secondaryBaseUrl);
             }
 
             String serverProject = extras.optString(Const.QR_SERVER_PROJECT_ATTR, null);
             if (serverProject != null) {
+                Log.d(Const.LOG_TAG, "Project path: " + serverProject);
                 settingsHelper.setServerProject(serverProject);
             }
 
@@ -200,10 +214,12 @@ public class BaseActivity extends AppCompatActivity {
             createOptions.setCustomer(extras.optString(Const.QR_CUSTOMER_ATTR, null));
             createOptions.setConfiguration(extras.optString(Const.QR_CONFIG_ATTR, null));
             createOptions.setGroups(extras.optString(Const.QR_GROUP_ATTR, null));
-            if (createOptions.getCustomer() != null) {
+            if (createOptions.getCustomer() != createOptions.getCustomer()) {
+                Log.d(Const.LOG_TAG, "Customer: " + serverProject);
                 settingsHelper.setCreateOptionCustomer(createOptions.getCustomer());
             }
             if (createOptions.getConfiguration() != null) {
+                Log.d(Const.LOG_TAG, "Configuration: " + createOptions.getConfiguration());
                 settingsHelper.setCreateOptionConfigName(createOptions.getConfiguration());
             }
             if (createOptions.getGroups() != null) {
@@ -211,6 +227,8 @@ public class BaseActivity extends AppCompatActivity {
             }
 
         } catch (Exception e) {
+            Log.w(Const.LOG_TAG, "Invalid QR code contents, got an exception!");
+            e.printStackTrace();
             Toast.makeText(this, getString(R.string.qrcode_contents_error,
                     getString(R.string.app_name)), Toast.LENGTH_LONG).show();
         }
@@ -248,7 +266,12 @@ public class BaseActivity extends AppCompatActivity {
         dialogNetworkErrorBinding.wifiButton.setVisibility(showWifiButton ? View.VISIBLE : View.GONE);
 
         networkErrorDialog.setContentView( dialogNetworkErrorBinding.getRoot() );
-        networkErrorDialog.show();
+        try {
+            networkErrorDialog.show();
+        } catch (Exception e) {
+            // Unable to add window -- token is not valid; is your activity running?
+            e.printStackTrace();
+        }
     }
 
 
diff --git a/app/src/main/java/com/hmdm/launcher/ui/MainActivity.java b/app/src/main/java/com/hmdm/launcher/ui/MainActivity.java
index 794d0e6..839afa5 100644
--- a/app/src/main/java/com/hmdm/launcher/ui/MainActivity.java
+++ b/app/src/main/java/com/hmdm/launcher/ui/MainActivity.java
@@ -110,6 +110,7 @@ import com.hmdm.launcher.util.AppInfo;
 import com.hmdm.launcher.util.CrashLoopProtection;
 import com.hmdm.launcher.util.DeviceInfoProvider;
 import com.hmdm.launcher.util.InstallUtils;
+import com.hmdm.launcher.util.PreferenceLogger;
 import com.hmdm.launcher.util.RemoteLogger;
 import com.hmdm.launcher.util.SystemUtils;
 import com.hmdm.launcher.util.Utils;
@@ -833,7 +834,9 @@ public class MainActivity
         ServerConfig config = settingsHelper.getConfig();
         if (ProUtils.kioskModeRequired(this) && !settingsHelper.getConfig().getMainApp().equals(getPackageName())) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
-                    !Settings.canDrawOverlays( this )) {
+                    !Settings.canDrawOverlays( this ) &&
+                    !BuildConfig.ENABLE_KIOSK_WITHOUT_OVERLAYS) {
+                RemoteLogger.log(this, Const.LOG_WARN, "Kiosk mode disabled: no permission to draw over other windows.");
                 Toast.makeText(this, getString(R.string.kiosk_mode_requires_overlays,
                         getString(R.string.app_name)), Toast.LENGTH_LONG).show();
                 config.setKioskMode(false);
@@ -842,21 +845,23 @@ public class MainActivity
                 return;
             }
             View kioskUnlockButton = ProUtils.createKioskUnlockButton(this);
-            kioskUnlockButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    kioskUnlockCounter++;
-                    if (kioskUnlockCounter >= Const.KIOSK_UNLOCK_CLICK_COUNT ) {
-                        // We are in the main app: let's open launcher activity
-                        interruptResumeFlow = true;
-                        Intent restoreLauncherIntent = new Intent(MainActivity.this, MainActivity.class);
-                        restoreLauncherIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
-                        startActivity(restoreLauncherIntent);
-                        createAndShowEnterPasswordDialog();
-                        kioskUnlockCounter = 0;
+            if (kioskUnlockButton != null) {
+                kioskUnlockButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        kioskUnlockCounter++;
+                        if (kioskUnlockCounter >= Const.KIOSK_UNLOCK_CLICK_COUNT) {
+                            // We are in the main app: let's open launcher activity
+                            interruptResumeFlow = true;
+                            Intent restoreLauncherIntent = new Intent(MainActivity.this, MainActivity.class);
+                            restoreLauncherIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
+                            startActivity(restoreLauncherIntent);
+                            createAndShowEnterPasswordDialog();
+                            kioskUnlockCounter = 0;
+                        }
                     }
-                }
-            });
+                });
+            }
         } else {
             createLauncherButtons();
         }
@@ -875,6 +880,7 @@ public class MainActivity
             // For common public version, here's an option to change the server in non-MDM mode
             createAndShowServerDialog(false, settingsHelper.getBaseUrl(), settingsHelper.getServerProject());
         } else if ( settingsHelper.getDeviceId().length() == 0 ) {
+            Log.d(Const.LOG_TAG, "Device ID is empty");
             if (!SystemUtils.autoSetDeviceId(this)) {
                 createAndShowEnterDeviceIdDialog(false, null);
             } else {
@@ -1249,7 +1255,14 @@ public class MainActivity
 
     @Override
     public void onConfigUpdateComplete() {
+        SharedPreferences preferences = getApplicationContext().getSharedPreferences(Const.PREFERENCES, MODE_PRIVATE);
+        String deviceAdminLog = PreferenceLogger.getLogString(preferences);
+        if (deviceAdminLog != null && !deviceAdminLog.equals("")) {
+            RemoteLogger.log(this, Const.LOG_DEBUG, deviceAdminLog);
+            PreferenceLogger.clearLogString(preferences);
+        }
         Log.i(Const.LOG_TAG, "Showing content from setActions()");
+        settingsHelper.refreshConfig(this);         // Avoid NPE in showContent()
         showContent(settingsHelper.getConfig());
     }
 
diff --git a/app/src/main/java/com/hmdm/launcher/util/DeviceInfoProvider.java b/app/src/main/java/com/hmdm/launcher/util/DeviceInfoProvider.java
index c81a4c7..8b6a419 100644
--- a/app/src/main/java/com/hmdm/launcher/util/DeviceInfoProvider.java
+++ b/app/src/main/java/com/hmdm/launcher/util/DeviceInfoProvider.java
@@ -33,6 +33,7 @@ import android.os.Environment;
 import android.telephony.SubscriptionInfo;
 import android.telephony.SubscriptionManager;
 import android.telephony.TelephonyManager;
+import android.util.Log;
 
 import com.hmdm.launcher.BuildConfig;
 import com.hmdm.launcher.Const;
@@ -222,18 +223,26 @@ public class DeviceInfoProvider {
         String serialNumber = null;
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
             try {
-                return Build.getSerial();
+                String s = Build.getSerial();
+                Log.d(Const.LOG_TAG, "Serial number: " + s);
+                return s;
             } catch (SecurityException e) {
+                Log.w(Const.LOG_TAG, "Failed to get serial number from Build.getSerial()");
+                e.printStackTrace();
             }
         }
         try {
             Class<?> c = Class.forName("android.os.SystemProperties");
             Method get = c.getMethod("get", String.class);
             serialNumber = (String) get.invoke(c, "ril.serialnumber");
-        } catch (Exception ignored) { /*noop*/ }
+        } catch (Exception e) {
+            Log.w(Const.LOG_TAG, "Failed to get serial number from ril.serialnumber");
+            e.printStackTrace();
+        }
         if (serialNumber != null && !serialNumber.equals("")) {
             return serialNumber;
         }
+        Log.d(Const.LOG_TAG, "Build.SERIAL=" + Build.SERIAL);
         return Build.SERIAL;
     }
 
diff --git a/app/src/main/java/com/hmdm/launcher/util/InstallUtils.java b/app/src/main/java/com/hmdm/launcher/util/InstallUtils.java
index 8535d2a..25a0ae1 100644
--- a/app/src/main/java/com/hmdm/launcher/util/InstallUtils.java
+++ b/app/src/main/java/com/hmdm/launcher/util/InstallUtils.java
@@ -339,7 +339,8 @@ public class InstallUtils {
         }
 
         if (file.getName().endsWith(".xapk")) {
-            XapkUtils.install(context, XapkUtils.extract(context, file), packageName, errorHandler);
+            List<File> files = XapkUtils.extract(context, file);
+            XapkUtils.install(context, files, packageName, errorHandler);
             return;
         }
 
diff --git a/app/src/main/java/com/hmdm/launcher/util/PreferenceLogger.java b/app/src/main/java/com/hmdm/launcher/util/PreferenceLogger.java
index 1b77ee9..fd767d8 100644
--- a/app/src/main/java/com/hmdm/launcher/util/PreferenceLogger.java
+++ b/app/src/main/java/com/hmdm/launcher/util/PreferenceLogger.java
@@ -22,6 +22,7 @@ package com.hmdm.launcher.util;
 import android.content.SharedPreferences;
 import android.util.Log;
 
+import com.hmdm.launcher.BuildConfig;
 import com.hmdm.launcher.Const;
 
 import java.io.PrintWriter;
@@ -31,14 +32,18 @@ import java.util.Date;
 
 public class PreferenceLogger {
 
+    private static boolean DEBUG = BuildConfig.DEVICE_ADMIN_DEBUG;
+
     private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 
     private static void _log(SharedPreferences preferences, String message) {
         Log.d(Const.LOG_TAG, message);
-        String logString = preferences.getString(Const.PREFERENCES_LOG_STRING, "");
-        logString += sdf.format(new Date()) + " " + message;
-        logString += "\n";
-        preferences.edit().putString(Const.PREFERENCES_LOG_STRING, logString).apply();
+        if (DEBUG) {
+            String logString = preferences.getString(Const.PREFERENCES_LOG_STRING, "");
+            logString += sdf.format(new Date()) + " " + message;
+            logString += "\n";
+            preferences.edit().putString(Const.PREFERENCES_LOG_STRING, logString).commit();
+        }
     }
 
     public synchronized static void log(SharedPreferences preferences, String message) {
@@ -46,11 +51,16 @@ public class PreferenceLogger {
     }
 
     public synchronized static String getLogString(SharedPreferences preferences) {
-        return preferences.getString(Const.PREFERENCES_LOG_STRING, "");
+        if (DEBUG) {
+            return preferences.getString(Const.PREFERENCES_LOG_STRING, "");
+        }
+        return "";
     }
 
     public synchronized static void clearLogString(SharedPreferences preferences) {
-        preferences.edit().putString(Const.PREFERENCES_LOG_STRING, "").apply();
+        if (DEBUG) {
+            preferences.edit().putString(Const.PREFERENCES_LOG_STRING, "").commit();
+        }
     }
 
     public synchronized static void printStackTrace(SharedPreferences preferences, Exception e) {
diff --git a/app/src/main/java/com/hmdm/launcher/util/PushNotificationMqttWrapper.java b/app/src/main/java/com/hmdm/launcher/util/PushNotificationMqttWrapper.java
index 83ba751..23ee95e 100644
--- a/app/src/main/java/com/hmdm/launcher/util/PushNotificationMqttWrapper.java
+++ b/app/src/main/java/com/hmdm/launcher/util/PushNotificationMqttWrapper.java
@@ -222,7 +222,7 @@ public class PushNotificationMqttWrapper {
                 RemoteLogger.log(context, Const.LOG_DEBUG, "MQTT connection established");
                 handler.post(onSuccess);
             }
-        } catch (MqttException e) {
+        } catch (Exception e) {
             e.printStackTrace();
             RemoteLogger.log(context, Const.LOG_DEBUG, "Exception while subscribing: " + e.getMessage());
             if (onFailure != null) {
diff --git a/app/src/main/java/com/hmdm/launcher/util/SystemUtils.java b/app/src/main/java/com/hmdm/launcher/util/SystemUtils.java
index 88e7999..6268bc4 100644
--- a/app/src/main/java/com/hmdm/launcher/util/SystemUtils.java
+++ b/app/src/main/java/com/hmdm/launcher/util/SystemUtils.java
@@ -1,8 +1,13 @@
 package com.hmdm.launcher.util;
 
+import android.annotation.TargetApi;
+import android.app.AppOpsManager;
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.os.Build;
+import android.provider.Settings;
 import android.util.Log;
 
 import com.hmdm.launcher.BuildConfig;
@@ -11,6 +16,7 @@ import com.hmdm.launcher.helper.SettingsHelper;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
+import java.lang.reflect.Method;
 
 /**
  * These utils are used only in the 'system' flavor
@@ -73,6 +79,7 @@ public class SystemUtils {
     public static boolean autoSetDeviceId(Context context) {
         String deviceIdUse = SettingsHelper.getInstance(context).getDeviceIdUse();
         String deviceId = null;
+        Log.d(Const.LOG_TAG, "Device ID choice: " + deviceIdUse);
         if (BuildConfig.DEVICE_ID_CHOICE.equals("imei") || "imei".equals(deviceIdUse)) {
             deviceId = DeviceInfoProvider.getImei(context);
         } else if (BuildConfig.DEVICE_ID_CHOICE.equals("serial") || "serial".equals(deviceIdUse)) {
@@ -130,4 +137,39 @@ public class SystemUtils {
         }
         return true;
     }
+
+    // https://stackoverflow.com/questions/10061154/how-to-programmatically-enable-disable-accessibility-service-in-android
+    public static void autoSetAccessibilityPermission(Context context, String packageName, String className) {
+        Settings.Secure.putString(context.getContentResolver(),
+                Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES, packageName + "/" + className);
+        Settings.Secure.putString(context.getContentResolver(),
+                Settings.Secure.ACCESSIBILITY_ENABLED, "1");
+    }
+
+    @TargetApi(Build.VERSION_CODES.KITKAT)
+    public static void autoSetOverlayPermission(Context context, String packageName) {
+        PackageManager packageManager = context.getPackageManager();
+        int uid = 0;
+        try {
+            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(packageName, 0);
+            uid = applicationInfo.uid;
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            return;
+        }
+
+        AppOpsManager appOpsManager = (AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
+        final int OP_SYSTEM_ALERT_WINDOW = 24;
+
+        // src/com/android/settings/applications/DrawOverlayDetails.java
+        // See method: void setCanDrawOverlay(boolean newState)
+        try {
+            Class clazz = AppOpsManager.class;
+            Method method = clazz.getDeclaredMethod("setMode", int.class, int.class, String.class, int.class);
+            method.invoke(appOpsManager, OP_SYSTEM_ALERT_WINDOW, uid, packageName, AppOpsManager.MODE_ALLOWED);
+            Log.d(Const.LOG_TAG, "Overlay permission granted to " + packageName);
+        } catch (Exception e) {
+            Log.e(Const.LOG_TAG, Log.getStackTraceString(e));
+        }
+    }
 }
diff --git a/app/src/main/java/com/hmdm/launcher/util/XapkUtils.java b/app/src/main/java/com/hmdm/launcher/util/XapkUtils.java
index 42eac08..ba74e6b 100644
--- a/app/src/main/java/com/hmdm/launcher/util/XapkUtils.java
+++ b/app/src/main/java/com/hmdm/launcher/util/XapkUtils.java
@@ -85,7 +85,13 @@ public class XapkUtils {
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
             return;
         }
-
+        if (files == null) {
+            RemoteLogger.log(context, Const.LOG_WARN, "Failed to unpack XAPK for " + packageName + " - ignoring installation");
+            if (errorHandler != null) {
+                errorHandler.onInstallError();
+            }
+            return;
+        }
         long totalSize = 0;
         for (File file : files) {
             totalSize += file.length();
