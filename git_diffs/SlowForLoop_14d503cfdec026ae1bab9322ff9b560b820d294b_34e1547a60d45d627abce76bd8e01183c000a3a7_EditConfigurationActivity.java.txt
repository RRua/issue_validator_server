diff --git a/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.java b/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.java
deleted file mode 100644
index aae3ec5..0000000
--- a/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.jarsilio.android.waveup.tasker;
-
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v7.app.ActionBar;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.widget.ArrayAdapter;
-import android.widget.AutoCompleteTextView;
-import android.widget.CheckBox;
-import android.widget.EditText;
-
-import java.io.File;
-
-import static com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE;
-import static com.twofortyfouram.locale.api.Intent.EXTRA_STRING_BLURB;
-
-/**
- * This is the "Edit" activity for a Locale Plug-in.
- * <p>
- * This Activity can be started in one of two states:
- * <ul>
- * <li>New plug-in: The Activity's Intent will not contain "com.twofortyfouram.locale.Intent#EXTRA_BUNDLE".</li>
- * <li>Old plug-in: The Activity's Intent will contain "com.twofortyfouram.locale.Intent#EXTRA_BUNDLE" from
- * a previously saved plug-in instance that the user is editing.</li>
- * </ul>
- */
-public final class EditConfigurationActivity extends AbstractPluginActivity {
-
-    public static final File TASKER_DIR = new File("/data/data/com.termux/files/home/.termux/tasker/");
-
-    private AutoCompleteTextView mExecutableText;
-    private EditText mArgumentsText;
-    private CheckBox mInTerminalCheckbox;
-
-    @Override
-    protected void onCreate(final Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        ActionBar actionBar = getSupportActionBar();
-        actionBar.setTitle(R.string.app_name);
-        actionBar.setDisplayHomeAsUpEnabled(true);
-
-        if (!(TASKER_DIR.exists() && TASKER_DIR.isDirectory() && TASKER_DIR.listFiles().length > 0)) {
-            mIsCancelled = true;
-            new AlertDialog.Builder(this)
-                    .setTitle(R.string.no_tasker_folder_title)
-                    .setMessage(R.string.no_tasker_folder_message)
-                    .setPositiveButton(android.R.string.ok, null)
-                    .setOnDismissListener(dialogInterface -> finish())
-                    .show();
-            return;
-        }
-
-        setContentView(R.layout.edit_activity);
-
-
-        final Intent intent = getIntent();
-        BundleScrubber.scrub(intent);
-        final Bundle localeBundle = intent.getBundleExtra(EXTRA_BUNDLE);
-        BundleScrubber.scrub(localeBundle);
-
-        mExecutableText = findViewById(R.id.executable_path);
-        mArgumentsText = findViewById(R.id.arguments);
-        mInTerminalCheckbox = findViewById(R.id.in_terminal);
-
-        final File[] files = TASKER_DIR.listFiles();
-        final String[] fileNames = new String[files.length];
-        for (int i = 0; i < files.length; i++) fileNames[i] = files[i].getName();
-
-        mExecutableText.addTextChangedListener(new TextWatcher() {
-            @Override
-            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
-
-            }
-
-            @Override
-            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
-
-            }
-
-            @Override
-            public void afterTextChanged(Editable editable) {
-                final String currentValue = editable.toString();
-                for (String s : fileNames) {
-                    if (s.equals(currentValue)) {
-                        mExecutableText.setError(null);
-                        return;
-                    }
-                }
-                mExecutableText.setError("No such file");
-            }
-        });
-
-        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, fileNames);
-        mExecutableText.setAdapter(adapter);
-
-        if (savedInstanceState == null) {
-            if (PluginBundleManager.isBundleValid(localeBundle)) {
-                final String selectedExecutable = localeBundle.getString(PluginBundleManager.EXTRA_EXECUTABLE);
-                mExecutableText.setText(selectedExecutable);
-                final String selectedArguments = localeBundle.getString(PluginBundleManager.EXTRA_ARGUMENTS);
-                mArgumentsText.setText(selectedArguments);
-                final boolean inTerminal = localeBundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL);
-                mInTerminalCheckbox.setChecked(inTerminal);
-            }
-        }
-    }
-
-    @Override
-    public void finish() {
-        if (!isCanceled()) {
-            final String executable = mExecutableText.getText().toString();
-            final String arguments =  mArgumentsText.getText().toString();
-            final boolean inTerminal = mInTerminalCheckbox.isChecked();
-
-            if (executable.length() > 0) {
-                final Intent resultIntent = new Intent();
-
-                /*
-                 * This extra is the data to ourselves: either for the Activity or the BroadcastReceiver. Note
-                 * that anything placed in this Bundle must be available to Locale's class loader. So storing
-                 * String, int, and other standard objects will work just fine. Parcelable objects are not
-                 * acceptable, unless they also implement Serializable. Serializable objects must be standard
-                 * Android platform objects (A Serializable class private to this plug-in's APK cannot be
-                 * stored in the Bundle, as Locale's classloader will not recognize it).
-                 */
-                final Bundle resultBundle = PluginBundleManager.generateBundle(getApplicationContext(), executable, arguments, inTerminal);
-
-                // The blurb is a concise status text to be displayed in the host's UI.
-                final String blurb = generateBlurb(executable, arguments, inTerminal);
-                if (TaskerPlugin.Setting.hostSupportsOnFireVariableReplacement(this)){
-                    TaskerPlugin.Setting.setVariableReplaceKeys(resultBundle,new String[] {PluginBundleManager.EXTRA_EXECUTABLE,
-                            PluginBundleManager.EXTRA_ARGUMENTS,PluginBundleManager.EXTRA_TERMINAL});
-                }
-
-                resultIntent.putExtra(EXTRA_BUNDLE, resultBundle);
-                resultIntent.putExtra(EXTRA_STRING_BLURB, blurb);
-                setResult(RESULT_OK, resultIntent);
-            }
-        }
-
-        super.finish();
-    }
-
-    /**
-     * @param executable The toast message to be displayed by the plug-in. Cannot be null.
-     * @return A blurb for the plug-in.
-     */
-    String generateBlurb(final String executable, final String arguments, boolean inTerminal) {
-        final int stringResource = inTerminal ? R.string.blurb_in_terminal : R.string.blurb_in_background;
-        final String message =getString(stringResource, executable,arguments);
-        final int maxBlurbLength = 60; // R.integer.twofortyfouram_locale_maximum_blurb_length.
-        return (message.length() > maxBlurbLength) ? message.substring(0, maxBlurbLength) : message;
-    }
-}
diff --git a/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.kt b/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.kt
new file mode 100644
index 0000000..7e1bd7c
--- /dev/null
+++ b/app/src/main/java/com/jarsilio/android/waveup/tasker/EditConfigurationActivity.kt
@@ -0,0 +1,154 @@
+package com.jarsilio.android.waveup.tasker
+
+import android.app.AlertDialog
+import android.content.Intent
+import android.os.Bundle
+import android.text.Editable
+import android.text.TextWatcher
+import android.widget.ArrayAdapter
+import android.widget.AutoCompleteTextView
+import android.widget.CheckBox
+import android.widget.EditText
+
+import java.io.File
+
+import com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE
+import com.twofortyfouram.locale.api.Intent.EXTRA_STRING_BLURB
+
+/**
+ * This is the "Edit" activity for a Locale Plug-in.
+ *
+ *
+ * This Activity can be started in one of two states:
+ *
+ *  * New plug-in: The Activity's Intent will not contain "com.twofortyfouram.locale.Intent#EXTRA_BUNDLE".
+ *  * Old plug-in: The Activity's Intent will contain "com.twofortyfouram.locale.Intent#EXTRA_BUNDLE" from
+ * a previously saved plug-in instance that the user is editing.
+ *
+ */
+class EditConfigurationActivity : AbstractPluginActivity() {
+
+    private var mExecutableText: AutoCompleteTextView? = null
+    private var mArgumentsText: EditText? = null
+    private var mInTerminalCheckbox: CheckBox? = null
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+
+        val actionBar = supportActionBar
+        actionBar?.setTitle(R.string.app_name)
+        actionBar?.setDisplayHomeAsUpEnabled(true)
+
+        if (!(TASKER_DIR.exists() && TASKER_DIR.isDirectory && TASKER_DIR.listFiles().size > 0)) {
+            mIsCancelled = true
+            AlertDialog.Builder(this)
+                    .setTitle(R.string.no_tasker_folder_title)
+                    .setMessage(R.string.no_tasker_folder_message)
+                    .setPositiveButton(android.R.string.ok, null)
+                    .setOnDismissListener { dialogInterface -> finish() }
+                    .show()
+            return
+        }
+
+        setContentView(R.layout.edit_activity)
+
+
+        val intent = intent
+        BundleScrubber.scrub(intent)
+        val localeBundle = intent.getBundleExtra(EXTRA_BUNDLE)
+        BundleScrubber.scrub(localeBundle)
+
+        mExecutableText = findViewById(R.id.executable_path)
+        mArgumentsText = findViewById(R.id.arguments)
+        mInTerminalCheckbox = findViewById(R.id.in_terminal)
+
+        val files = TASKER_DIR.listFiles()
+        val fileNames = arrayOfNulls<String>(files.size)
+        for (i in files.indices) fileNames[i] = files[i].name
+
+        mExecutableText!!.addTextChangedListener(object : TextWatcher {
+            override fun beforeTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {
+
+            }
+
+            override fun onTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {
+
+            }
+
+            override fun afterTextChanged(editable: Editable) {
+                val currentValue = editable.toString()
+                for (s in fileNames) {
+                    if (s == currentValue) {
+                        mExecutableText!!.error = null
+                        return
+                    }
+                }
+                mExecutableText!!.error = "No such file"
+            }
+        })
+
+        val adapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, fileNames)
+        mExecutableText!!.setAdapter(adapter)
+
+        if (savedInstanceState == null) {
+            if (PluginBundleManager.isBundleValid(localeBundle)) {
+                val selectedExecutable = localeBundle.getString(PluginBundleManager.EXTRA_EXECUTABLE)
+                mExecutableText!!.setText(selectedExecutable)
+                val selectedArguments = localeBundle.getString(PluginBundleManager.EXTRA_ARGUMENTS)
+                mArgumentsText!!.setText(selectedArguments)
+                val inTerminal = localeBundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL)
+                mInTerminalCheckbox!!.isChecked = inTerminal
+            }
+        }
+    }
+
+    override fun finish() {
+        if (!isCanceled) {
+            val executable = mExecutableText!!.text.toString()
+            val arguments = mArgumentsText!!.text.toString()
+            val inTerminal = mInTerminalCheckbox!!.isChecked
+
+            if (executable.length > 0) {
+                val resultIntent = Intent()
+
+                /*
+                 * This extra is the data to ourselves: either for the Activity or the BroadcastReceiver. Note
+                 * that anything placed in this Bundle must be available to Locale's class loader. So storing
+                 * String, int, and other standard objects will work just fine. Parcelable objects are not
+                 * acceptable, unless they also implement Serializable. Serializable objects must be standard
+                 * Android platform objects (A Serializable class private to this plug-in's APK cannot be
+                 * stored in the Bundle, as Locale's classloader will not recognize it).
+                 */
+                val resultBundle = PluginBundleManager.generateBundle(applicationContext, executable, arguments, inTerminal)
+
+                // The blurb is a concise status text to be displayed in the host's UI.
+                val blurb = generateBlurb(executable, arguments, inTerminal)
+                if (TaskerPlugin.Setting.hostSupportsOnFireVariableReplacement(this)) {
+                    TaskerPlugin.Setting.setVariableReplaceKeys(resultBundle, arrayOf(PluginBundleManager.EXTRA_EXECUTABLE, PluginBundleManager.EXTRA_ARGUMENTS, PluginBundleManager.EXTRA_TERMINAL))
+                }
+
+                resultIntent.putExtra(EXTRA_BUNDLE, resultBundle)
+                resultIntent.putExtra(EXTRA_STRING_BLURB, blurb)
+                setResult(RESULT_OK, resultIntent)
+            }
+        }
+
+        super.finish()
+    }
+
+    /**
+     * @param executable The toast message to be displayed by the plug-in. Cannot be null.
+     * @return A blurb for the plug-in.
+     */
+    internal fun generateBlurb(executable: String, arguments: String, inTerminal: Boolean): String {
+        val stringResource = if (inTerminal) R.string.blurb_in_terminal else R.string.blurb_in_background
+        val message = getString(stringResource, executable, arguments)
+        val maxBlurbLength = 60 // R.integer.twofortyfouram_locale_maximum_blurb_length.
+        return if (message.length > maxBlurbLength) message.substring(0, maxBlurbLength) else message
+    }
+
+    companion object {
+
+        val TASKER_DIR = File("/data/data/com.termux/files/home/.termux/tasker/")
+    }
+}
diff --git a/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.java b/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.java
deleted file mode 100644
index d6dfabc..0000000
--- a/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.jarsilio.android.waveup.tasker;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.Log;
-import android.widget.Toast;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import static com.twofortyfouram.locale.api.Intent.ACTION_FIRE_SETTING;
-import static com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE;
-
-/**
- * This is the "fire" BroadcastReceiver for a Locale Plug-in.
- */
-public final class FireReceiver extends BroadcastReceiver {
-
-    public static final String TERMUX_SERVICE = "com.termux.app.TermuxService";
-    public static final String ACTION_EXECUTE = "com.termux.service_execute";
-
-    public void onReceive(final Context context, final Intent intent) {
-        if (!ACTION_FIRE_SETTING.equals(intent.getAction())) {
-            Log.e(Constants.LOG_TAG, "Unexpected intent action: " + intent.getAction());
-            return;
-        }
-
-        BundleScrubber.scrub(intent);
-        final Bundle bundle = intent.getBundleExtra(EXTRA_BUNDLE);
-        BundleScrubber.scrub(bundle);
-
-        if (!PluginBundleManager.isBundleValid(bundle)) return;
-
-        final String executable = bundle.getString(PluginBundleManager.EXTRA_EXECUTABLE);
-        final String arguments = bundle.getString(PluginBundleManager.EXTRA_ARGUMENTS);
-        final boolean inTerminal = bundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL);
-        Matcher matcher = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(arguments);
-        List<String> list = new ArrayList<>();
-        while (matcher.find()){
-            list.add(matcher.group(1).replace("\"",""));
-        }
-
-        File executableFile = new File(EditConfigurationActivity.TASKER_DIR, executable);
-        if (!executableFile.isFile()) {
-            String message = "Termux:Tasker - no such executable:\n" + executable;
-            Toast.makeText(context, message, Toast.LENGTH_LONG).show();
-            return;
-        }
-
-        ensureFileReadableAndExecutable(executableFile);
-        Uri scriptUri = new Uri.Builder().scheme("com.termux.file").path(executableFile.getAbsolutePath()).build();
-
-        // Note: Must match TermuxService#ACTION_EXECUTE constant:
-        Intent executeIntent = new Intent(ACTION_EXECUTE, scriptUri);
-        executeIntent.setClassName("com.termux", TERMUX_SERVICE);
-        if (!inTerminal) executeIntent.putExtra("com.termux.execute.background", true);
-        executeIntent.putExtra(PluginBundleManager.EXTRA_ARGUMENTS, list.toArray(new String[list.size()]));
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            // https://developer.android.com/about/versions/oreo/background.html
-            context.startForegroundService(executeIntent);
-        } else {
-            context.startService(executeIntent);
-        }
-    }
-
-    /** Ensure readable and executable file if user forgot to do so. */
-    static void ensureFileReadableAndExecutable(File file) {
-        if (!file.canRead()) file.setReadable(true);
-        if (!file.canExecute()) file.setExecutable(true);
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.kt b/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.kt
new file mode 100644
index 0000000..90e1356
--- /dev/null
+++ b/app/src/main/java/com/jarsilio/android/waveup/tasker/FireReceiver.kt
@@ -0,0 +1,80 @@
+package com.jarsilio.android.waveup.tasker
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Build
+import android.util.Log
+import android.widget.Toast
+
+import java.io.File
+import java.util.ArrayList
+import java.util.regex.Pattern
+
+import com.twofortyfouram.locale.api.Intent.ACTION_FIRE_SETTING
+import com.twofortyfouram.locale.api.Intent.EXTRA_BUNDLE
+
+/**
+ * This is the "fire" BroadcastReceiver for a Locale Plug-in.
+ */
+class FireReceiver : BroadcastReceiver() {
+
+    override fun onReceive(context: Context, intent: Intent) {
+        if (ACTION_FIRE_SETTING != intent.action) {
+            Log.e(Constants.LOG_TAG, "Unexpected intent action: " + intent.action!!)
+            return
+        }
+
+        BundleScrubber.scrub(intent)
+        val bundle = intent.getBundleExtra(EXTRA_BUNDLE)
+        BundleScrubber.scrub(bundle)
+
+        if (!PluginBundleManager.isBundleValid(bundle)) return
+
+        val executable = bundle.getString(PluginBundleManager.EXTRA_EXECUTABLE)
+        val arguments = bundle.getString(PluginBundleManager.EXTRA_ARGUMENTS)
+        val inTerminal = bundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL)
+        val matcher = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(arguments)
+        val list = ArrayList<String>()
+        while (matcher.find()) {
+            list.add(matcher.group(1).replace("\"", ""))
+        }
+
+        val executableFile = File(EditConfigurationActivity.TASKER_DIR, executable)
+        if (!executableFile.isFile) {
+            val message = "Termux:Tasker - no such executable:\n" + executable!!
+            Toast.makeText(context, message, Toast.LENGTH_LONG).show()
+            return
+        }
+
+        ensureFileReadableAndExecutable(executableFile)
+        val scriptUri = Uri.Builder().scheme("com.termux.file").path(executableFile.absolutePath).build()
+
+        // Note: Must match TermuxService#ACTION_EXECUTE constant:
+        val executeIntent = Intent(ACTION_EXECUTE, scriptUri)
+        executeIntent.setClassName("com.termux", TERMUX_SERVICE)
+        if (!inTerminal) executeIntent.putExtra("com.termux.execute.background", true)
+        executeIntent.putExtra(PluginBundleManager.EXTRA_ARGUMENTS, list.toTypedArray())
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            // https://developer.android.com/about/versions/oreo/background.html
+            context.startForegroundService(executeIntent)
+        } else {
+            context.startService(executeIntent)
+        }
+    }
+
+    companion object {
+
+        val TERMUX_SERVICE = "com.termux.app.TermuxService"
+        val ACTION_EXECUTE = "com.termux.service_execute"
+
+        /** Ensure readable and executable file if user forgot to do so.  */
+        internal fun ensureFileReadableAndExecutable(file: File) {
+            if (!file.canRead()) file.setReadable(true)
+            if (!file.canExecute()) file.setExecutable(true)
+        }
+    }
+
+}
\ No newline at end of file
