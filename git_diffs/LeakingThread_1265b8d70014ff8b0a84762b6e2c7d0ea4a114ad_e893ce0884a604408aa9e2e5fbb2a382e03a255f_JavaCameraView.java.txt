diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Ball.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/Ball.java
deleted file mode 100644
index 6870b99..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Ball.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.example.rohit.myapplication;
-
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Color;
-import android.util.Log;
-
-import org.jbox2d.collision.shapes.CircleShape;
-import org.jbox2d.common.Transform;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.dynamics.BodyType;
-import org.jbox2d.dynamics.FixtureDef;
-
-/**
- * Created by ROHIT on 27-10-2016.
- */
-public class Ball {
-
-
-    float x,y,r;
-    Createbox2d box2d;
-    Body b1;
-    public Ball(float _x,float _y,float _r, Createbox2d box2dobject)
-    {
-        x=_x;
-        y=_y;
-        r=_r;
-        box2d=box2dobject;
-
-        BodyDef bd=new BodyDef();
-        bd.type= BodyType.DYNAMIC;
-        bd.position.set(box2d.coordPixelsToWorld(x,y));
-        b1=box2d.createBody(bd);
-
-        CircleShape cs = new CircleShape();
-        cs.m_radius=box2d.scalarPixelsToWorld(r);
-        FixtureDef fd=new FixtureDef();
-        fd.shape=cs;
-        fd.density=1;
-        fd.friction=0.2f;//0.2f;//0.0f;
-        fd.restitution=0.5f;//0.7f;//1.0f;
-        b1.createFixture(fd);
-        b1.setUserData(this);
-
-    }
-
-    public void display(Canvas c)
-    {
-        Vec2 pos=box2d.getBodyPixelCoord(b1);
-        Paint paint = new Paint();
-        paint.setColor(Color.GREEN);
-        c.drawCircle(pos.x, pos.y,r, paint);
-        Vec2 center=b1.getWorldCenter();
-        b1.applyForce(new Vec2(0,0), center);
-
-    }
-
-    public void addforce(float x, float y)
-    {
-        //Log.v("APP","raduis "+r);
-
-        Vec2 force=new Vec2(b1.getMass()*y/2,-b1.getMass()*x/2);
-        Vec2 pos=b1.getWorldCenter();
-        b1.applyForce(force, pos);
-    }
-
-
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/BoundaryPoints.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/BoundaryPoints.java
deleted file mode 100644
index c414d24..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/BoundaryPoints.java
+++ /dev/null
@@ -1,39 +0,0 @@
-package com.example.rohit.myapplication;
-
-
-/**
- * Created by ROHIT on 23-10-2016.
- */
-
-import android.graphics.PointF;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class BoundaryPoints {
-
-    ArrayList<PointF> arrlist;
-    public BoundaryPoints()
-    {
-        arrlist=new ArrayList<PointF>();
-    }
-
-    public void addPoint(float x,float y)
-    {
-        arrlist.add(new PointF(x,y));
-    }
-    public void clear()
-    {
-        arrlist.clear();
-    }
-    public int size()
-    {
-        return  arrlist.size();
-    }
-    ArrayList<PointF> getPoints()
-    {
-        return  arrlist;
-    }
-
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Detect.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/Detect.java
deleted file mode 100644
index d9f9e6a..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Detect.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.example.rohit.myapplication;
-
-/**
- * Created by ROHIT on 04-10-2016.
- */
-import android.graphics.Point;
-import android.util.Log;
-
-import org.opencv.core.Mat;
-import org.opencv.imgproc.Imgproc;
-
-import java.util.ArrayList;
-import java.util.List;
-
-
-
-public class Detect {
-    int screenwidth=-1;
-    int screenheight=-1;
-    public Detect(int sw,int sh)
-    {
-        screenwidth=sw;
-        screenheight=sh;
-    }
-    public void process(Mat mRgba, Mat mProcessed)
-    {
-
-        process(mRgba.getNativeObjAddr(), mProcessed.getNativeObjAddr(),screenwidth,screenheight);
-        /*for(int i=0;i<getCircle().length;i++)
-        {
-            Log.v("App circle size",String.valueOf(getCircle()[i].size()));
-        }
-        */
-
-
-    }
-    public void noprocess(Mat mRgba, Mat mProcessed)
-    {
-
-        mRgba.copyTo(mProcessed);
-    }
-
-    public native int process(long matAddrRgba, long matAddrGray ,int screenwidth,int screenheight);
-    public native BoundaryPoints[] getCircle();
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicThread.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicThread.java
deleted file mode 100644
index ae89d20..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicThread.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package com.example.rohit.myapplication;
-
-/**
- * Created by ROHIT on 23-10-2016.
- */
-
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.Path;
-import android.graphics.Point;
-import android.graphics.PorterDuff.Mode;
-import android.graphics.Rect;
-import android.util.Log;
-import android.view.Display;
-import android.view.MotionEvent;
-import android.view.WindowManager;
-import java.util.ArrayList;
-
-public class GraphicThread extends Thread {
-
-    private boolean running = false;
-    private final int refresh_rate=6;
-    GraphicSurface Gs;
-    BoundaryPoints[] rigidpoints;
-    BoundaryPoints[] ballpoints;
-    //BoundaryPoints[] hullpoints;
-    Canvas c = null;
-    Createbox2d box2d;
-    Context context;
-    private  ArrayList<Ball>balls=new ArrayList<Ball>();
-
-    private  ArrayList<Maze>mazes=new ArrayList<Maze>();
-    private Surface s1,s2,s3,s4;
-    float screenheight,screenwidth;
-    float MIN = -3.0f;
-    float MAX = 3.0f;
-
-    public GraphicThread(GraphicSurface Gs,Context context_,Createbox2d box2dobject_)
-    {
-        this.Gs=Gs;
-        box2d=box2dobject_;
-        context=context_;
-        Log.v("APP",String.valueOf("gs x "+Gs.getXvalue()+" , gs y "+Gs.getYvalue()));
-    }
-
-    public void setRunning(boolean run) {
-        running = run;
-    }
-
-    public float limit(float value) {
-        return Math.max(MIN, Math.min(value, MAX));
-    }
-
-    @SuppressLint("NewApi")
-    public void run() {
-        long previousTime, currentTime;
-        previousTime = System.currentTimeMillis();
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-        Point size = new Point();
-        display.getSize(size);
-        screenwidth = size.x;
-        screenheight = size.y;
-
-        s1=new Surface(5,5,screenwidth-5,5,box2d);
-        s2=new Surface(screenwidth-5,5,screenwidth-5,screenheight-5,box2d);
-        s3=new Surface(screenwidth-5,screenheight-5,5,screenheight-5,box2d);
-        s4=new Surface(5,screenheight-5,5,5,box2d);
-
-        rigidpoints= getrigidsurface();
-
-        for(int i=0;i<rigidpoints.length;i++)
-        {Log.v("App maze size",String.valueOf(rigidpoints[i].size()));
-          mazes.add(new Maze(rigidpoints[i],box2d));
-        }
-
-        ballpoints=getballPoints();
-
-        for(int i=0;i<ballpoints.length;i++)
-        {
-            Log.v("App Circle size",String.valueOf(ballpoints[i].size()));
-            balls.add(new Ball(ballpoints[i].getPoints().get(0).x, ballpoints[i].getPoints().get(0).y,ballpoints[i].getPoints().get(1).x ,box2d));
-        }
-
-        while(running) {
-          //  Canvas c = null;
-
-            currentTime = System.currentTimeMillis();
-            while ((currentTime - previousTime) < refresh_rate) {
-                currentTime = System.currentTimeMillis();
-            }
-            previousTime = currentTime;
-
-            box2d.step();
-            for(Ball ball:balls)
-            {
-                Log.v("APP",String.valueOf("force gs roll "+limit(Gs.getRoll())+" , gs picth "+limit(Gs.getRoll())));
-               /// ball.addforce(Gs.getXvalue(), Gs.getYvalue());
-                ball.addforce(-limit(Gs.getRoll()), -limit(Gs.getPitch()));
-            }
-
-
-
-            try
-            {
-                c=Gs.getHolder().lockCanvas();
-                synchronized(Gs.getHolder())
-                {
-
-                    c.drawColor(Color.TRANSPARENT);
-                    c.drawColor(0,Mode.CLEAR);
-                    s1.display(c);
-                    s2.display(c);
-                    s3.display(c);
-                    s4.display(c);
-                    for(Maze maze:mazes) {
-                        maze.display(c);
-                    }
-
-                    for(Ball ball:balls)
-                    {
-                        ball.display(c);
-                    }
-
-
-
-                    /*Paint paint = new Paint();
-                    paint.setColor(Color.BLUE);
-                    rigidpoints= getrigidsurface();
-                    for(int i=0;i<rigidpoints.length;i++)
-                    {
-                        Log.v("App Rigid size",String.valueOf(rigidpoints[i].size()));
-                        Path path=new Path();
-                        path.moveTo(rigidpoints[i].getPoints().get(0).x , rigidpoints[i].getPoints().get(0).y);
-                        for (int j = 1;j < rigidpoints[i].getPoints().size(); j++)
-                        {
-                           // Log.v("App path",String.valueOf(points[i].getPoints().get(j).x+","+points[i].getPoints().get(j).y));
-                            path.lineTo(rigidpoints[i].getPoints().get(j).x, rigidpoints[i].getPoints().get(j).y);
-                        }
-                        c.drawPath(path, paint);
-                    }
-
-                   Paint paint1 = new Paint();
-                    paint.setColor(Color.GREEN);
-
-                    ballpoints=getballPoints();
-                    for(int i=0;i<ballpoints.length;i++)
-                    {
-                        Log.v("App Circle size",String.valueOf(ballpoints[i].size()));
-                        c.drawCircle(ballpoints[i].getPoints().get(0).x, ballpoints[i].getPoints().get(0).y,ballpoints[i].getPoints().get(1).x , paint1);
-                    }
-
-                    hullpoints=gethullPoints();
-                    Paint paint2 = new Paint();
-                    paint2.setColor(Color.WHITE);
-                    for(int i=0;i<hullpoints.length;i++)
-                    {
-                        Log.v("App hull size",String.valueOf(hullpoints[i].size()));
-                        Path path=new Path();
-                        path.moveTo(hullpoints[i].getPoints().get(0).x , hullpoints[i].getPoints().get(0).y);
-                        for (int j = 1;j < hullpoints[i].getPoints().size(); j++)
-                        {
-                          // Log.v("App path",String.valueOf(points[i].getPoints().get(j).x+","+points[i].getPoints().get(j).y));
-                            path.lineTo(hullpoints[i].getPoints().get(j).x, hullpoints[i].getPoints().get(j).y);
-                        }
-                        paint2.setStyle(Paint.Style.STROKE);
-                        c.drawPath(path, paint2);
-                    }
-
-                    */
-
-                }
-
-            }
-            finally
-            {
-
-            }
-            if (c != null) {
-                Gs.getHolder().unlockCanvasAndPost(c);
-            }
-        }
-        try {
-            Thread.sleep(refresh_rate-5); // Wait some time till I need to display again
-        } catch (InterruptedException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-        }
-
-    }
-
-
-
-
-    public native BoundaryPoints[] getrigidsurface();
-    public native BoundaryPoints[] getballPoints();
-    //public native BoundaryPoints[] gethullPoints();
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/MainActivity.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/MainActivity.java
deleted file mode 100644
index 63be970..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/MainActivity.java
+++ /dev/null
@@ -1,357 +0,0 @@
-package com.example.rohit.myapplication;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.hardware.Sensor;
-import android.hardware.SensorEvent;
-import android.hardware.SensorEventListener;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.util.Log;
-import android.widget.FrameLayout;
-import android.widget.FrameLayout.LayoutParams;
-import android.view.SurfaceView;
-import android.widget.Button;
-import android.view.Gravity;
-import android.view.View;
-import android.view.View.OnClickListener;
-
-import org.opencv.android.BaseLoaderCallback;
-import org.opencv.android.CameraBridgeViewBase;
-import org.opencv.android.LoaderCallbackInterface;
-import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
-import org.opencv.core.Core;
-import org.opencv.core.Mat;
-import org.opencv.android.OpenCVLoader;
-import org.opencv.android.JavaCameraView;
-import android.graphics.PixelFormat;
-import android.hardware.Camera.Size;
-
-import android.content.Context;
-import android.hardware.SensorManager;
-import android.media.AudioManager;
-import android.media.SoundPool;
-import android.os.Vibrator;
-import android.hardware.Camera;
-
-import org.opencv.core.Point;
-import org.opencv.imgproc.Imgproc;
-import org.opencv.core.MatOfPoint;
-import org.opencv.core.MatOfPoint2f;
-import org.opencv.core.CvType;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.ListIterator;
-
-
-
-
-public class MainActivity extends Activity implements OnClickListener, CvCameraViewListener2 {
-
-
-    ///private CameraBridgeViewBase mOpenCvCameraView;
-    private ViewJavaCamera mOpenCvCameraView;
-    private static final String TAG = "APP::Activity";
-    private int mCameraIndex=0;
-    private Mat mRgba;
-    private Mat mProcessed;
-    public static int matheight;
-    public static int matwidth;
-    public static int screenheight=-1;
-    public static int screenwidth=-1;
-
-
-    private Detect detect;
-    private Button bt,bt2;
-    private boolean PressedOnce = true;
-    private GraphicSurface gs;
-    private int accelerometerSensor;
-    private int magneticSensor;
-    private float xAxis;
-    private float yAxis;
-    private float zAxis;
-    private SensorManager sensorManager;
-    public static Vibrator v;
-    public static SoundPool soundpool;
-    public static int sound_id ;
-
-    float[] InR = new float[16];
-    float[] I = new float[16];
-    float[] gravity = new float[3];
-    float[] geomag = new float[3];
-    float[] orientVals = new float[3];
-
-    float azimuth = 0.0f;
-    float pitch = 0.0f;
-    float roll = 0.0f;
-
-
-
-    static {
-        if (!OpenCVLoader.initDebug()) {
-            // Handle initialization error
-        } else {
-            System.loadLibrary("process");
-
-        }
-    }
-
-
-
-
-    private BaseLoaderCallback mLoaderCallback=new BaseLoaderCallback(this) {
-        @Override
-        public void onManagerConnected(int status) {
-            super.onManagerConnected(status);
-            switch(status)
-            {
-                case LoaderCallbackInterface.SUCCESS: {
-                    Log.i(TAG, "OpenCV loaded successfully");
-
-
-                    mOpenCvCameraView.enableView();
-
-                    screenwidth = mOpenCvCameraView.getWidth();
-                    screenheight = mOpenCvCameraView.getHeight();
-
-                    detect = new Detect(screenwidth, screenheight);
-                }break;
-                default:
-                {
-                    super.onManagerConnected(status);
-                } break;
-
-
-
-            }
-        }
-    };
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        final FrameLayout layout = new FrameLayout(this);
-        layout.setLayoutParams(new FrameLayout.LayoutParams(  FrameLayout.LayoutParams.MATCH_PARENT,  FrameLayout.LayoutParams.MATCH_PARENT));
-        setContentView(layout);
-
-        mOpenCvCameraView = new ViewJavaCamera(this,0 );
-
-        mOpenCvCameraView.setCvCameraViewListener(this);
-        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);
-        mOpenCvCameraView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
-
-
-        layout.addView(mOpenCvCameraView);
-        gs=new GraphicSurface(this);
-        gs.getHolder().setFormat( PixelFormat.TRANSPARENT);
-        gs.setZOrderOnTop(true);
-        gs.setLayoutParams(new FrameLayout.LayoutParams( FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
-        layout.addView(gs);
-        bt=new Button(this);
-        bt.setText("Play");
-        bt.setId(12345);
-        bt.getBackground().setAlpha(64);
-        bt.setOnClickListener(this);
-        bt.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT,Gravity.CENTER));
-        layout.addView(bt);
-        //bt2=new Button(this);
-        // bt2.setText("Solve");
-        //bt2.setId(23456);
-        //bt2.getBackground().setAlpha(64);
-        //bt2.setOnClickListener(this);
-        //bt2.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
-        //layout.addView(bt2);
-
-
-        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
-        accelerometerSensor = Sensor.TYPE_ACCELEROMETER;
-        magneticSensor = Sensor.TYPE_MAGNETIC_FIELD;
-        sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(accelerometerSensor), SensorManager.SENSOR_DELAY_NORMAL);
-        sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(magneticSensor),SensorManager.SENSOR_DELAY_NORMAL);
-
-        v = (Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
-        soundpool = new SoundPool(1, AudioManager.STREAM_MUSIC, 0);
-        sound_id= soundpool.load(getBaseContext(), R.raw.bounce,1);
-
-
-
-    }
-
-    @Override
-    public void onClick(View v) {
-
-        switch (v.getId()) {
-            case 12345:
-                if(PressedOnce) {
-                    mOpenCvCameraView.disableView();
-                    bt.setText("Detect");
-                    PressedOnce=false;
-
-                    gs.startgraphics( );
-
-                }
-                else
-                {
-                    recreate();
-                    //mOpenCvCameraView.enableView();
-                    //bt.setText("Play");
-                    PressedOnce=true;
-                   // gs.stopgraphics();
-                }
-                break;
-            case 23456:
-                break;
-        }
-
-    }
-
-
-    final SensorEventListener sensorEventListener = new SensorEventListener() {
-
-        public void onAccuracyChanged (Sensor senor, int accuracy) {
-            //Not used
-        }
-
-        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
-        @Override
-        public void onSensorChanged(SensorEvent sensorEvent) {
-            // TODO Auto-generated method stub
-            /*if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
-
-                xAxis = sensorEvent.values[0];
-                yAxis = sensorEvent.values[1];
-                zAxis = sensorEvent.values[2];
-             //   Log.v("TAG","xAxis: "+ String.valueOf(xAxis)+" yAxis: "+String.valueOf(yAxis)+" zAxis: "+String.valueOf(zAxis));
-                gs.setXvalue(xAxis);
-                gs.setYvalue(yAxis);
-                gs.setZvalue(zAxis);
-
-
-            }*/
-
-
-            if (sensorEvent.accuracy == SensorManager.SENSOR_STATUS_UNRELIABLE)
-                return;
-
-            switch (sensorEvent.sensor.getType()) {
-                case Sensor.TYPE_ACCELEROMETER:
-                    gravity = sensorEvent.values.clone();
-                    break;
-                case Sensor.TYPE_MAGNETIC_FIELD:
-                    geomag = sensorEvent.values.clone();
-                    break;
-            }
-
-            if (gravity != null && geomag != null) {
-
-                boolean success = SensorManager.getRotationMatrix(InR, I,
-                        gravity, geomag);
-                if (success) {
-                    SensorManager.getOrientation(InR, orientVals);
-                    azimuth = (float) Math.toDegrees(orientVals[0]);
-                    pitch = (float) Math.toDegrees(orientVals[1]);
-                    roll = (float) Math.toDegrees(orientVals[2]);
-                    gs.setAzimuth(azimuth);
-                    gs.setPitch(pitch);
-                    gs.setRoll(roll);
-
-                    Log.v("TAG","azimuth: "+ String.valueOf(azimuth)+" pitch: "+String.valueOf(pitch)+" roll: "+String.valueOf(roll));
-
-                }
-            }
-
-        }
-    };
-
-    @Override
-    public void onResume()
-    {
-        super.onResume();
-        OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_6, this, mLoaderCallback);
-        sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(accelerometerSensor), SensorManager.SENSOR_DELAY_NORMAL);
-        sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(magneticSensor), SensorManager.SENSOR_DELAY_NORMAL);
-
-
-    }
-
-    @Override
-    public void onPause()
-    {
-        super.onPause();
-        if (mOpenCvCameraView != null)
-            mOpenCvCameraView.disableView();
-
-        if(gs!=null)
-            gs.surfaceDestroyed(gs.holder);
-        sensorManager.unregisterListener(sensorEventListener);
-    }
-
-
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        // Inflate the menu; this adds items to the action bar if it is present.
-        getMenuInflater().inflate(R.menu.menu_main, menu);
-        Log.v("TAG","menu created");
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle action bar item clicks here. The action bar will
-        // automatically handle clicks on the Home/Up button, so long
-        // as you specify a parent activity in AndroidManifest.xml.
-        int id = item.getItemId();
-
-        //noinspection SimplifiableIfStatement
-        if (id == R.id.action_settings) {
-            return true;
-        }
-
-        return super.onOptionsItemSelected(item);
-    }
-
-
-
-    @Override
-    public void onCameraViewStarted(int width, int height) {
-        List<Size> mResolutionList = mOpenCvCameraView.getResolutionList();
-        Size mSize = null;
-        for (Size size : mResolutionList) {
-            Log.i(TAG, "Available resolution: "+size.width+" "+size.height);
-             if(size.width<=1280&&size.height<=980) { //1280x980,1440x1080
-                    mSize = size;
-                    Log.i(TAG, "selected resolution: "+size.width+" "+size.height);
-                    break;
-                }
-            }
-        mOpenCvCameraView.setResolution(mSize);
-        Size resolution = mOpenCvCameraView.getResolution();
-        String caption = Integer.valueOf(resolution.width).toString() + "x" + Integer.valueOf(resolution.height).toString();
-        Log.v("Resolution ",caption);
-
-
-        mRgba = new Mat();
-        mProcessed= new Mat();
-
-    }
-
-    @Override
-    public void onCameraViewStopped() {
-
-    }
-
-    @Override
-    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {
-        mRgba=inputFrame.rgba();
-        if (android.os.Build.MODEL.equalsIgnoreCase("Nexus 5X"))
-            Core.flip(mRgba, mRgba,-1);
-        detect.process(mRgba,mProcessed);
-        return mProcessed;
-    }
-
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Maze.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/Maze.java
deleted file mode 100644
index d887d08..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Maze.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package com.example.rohit.myapplication;
-
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.Path;
-import android.util.Log;
-
-import org.jbox2d.collision.shapes.ChainShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-import org.jbox2d.common.MathUtils;
-import org.jbox2d.common.Settings;
-
-import java.util.ArrayList;
-
-/**
- * Created by ROHIT on 27-10-2016.
- */
-public class Maze {
-
-    BoundaryPoints rigidpoints;
-    ArrayList<Vec2> surface;
-    //ArrayList<Vec2> refinedsurface;
-
-    Createbox2d box2d;
-    Canvas canvas;
-    int index=0;
-    public Maze(BoundaryPoints rigidpoints,Createbox2d box2dobject){
-        this.rigidpoints=rigidpoints;
-        box2d=box2dobject;
-        surface = new ArrayList<Vec2>();
-        for(int i=0;i<rigidpoints.size();i++)
-            if(this.rigidpoints.getPoints().get(i).x >0&&this.rigidpoints.getPoints().get(i).y>0)
-              surface.add(new Vec2(this.rigidpoints.getPoints().get(i).x , this.rigidpoints.getPoints().get(i).y));
-        if(surface.size()>0)
-        {
-            ChainShape chain=new ChainShape();
-            Vec2[] vertices=new Vec2[surface.size()];
-            for(int i=0;i<vertices.length;i++)
-            {
-                vertices[i]=box2d.coordPixelsToWorld(surface.get(i));
-            }
-
-            chain.createChain(vertices, vertices.length);
-            BodyDef bd=new BodyDef();
-            Body body=box2d.world.createBody(bd);
-            body.createFixture(chain,1);
-            body.setUserData(this);
-        }
-
-
-
-
-    }
-
-    void display(Canvas c)
-    {
-            Paint paint = new Paint();
-            paint.setStyle(Paint.Style.STROKE);
-            paint.setStrokeJoin(Paint.Join.ROUND);
-            paint.setStrokeCap(Paint.Cap.ROUND);
-            paint.setColor(Color.RED);
-            Log.v("App Rigid size",String.valueOf(rigidpoints.size()));
-            Path path=new Path();
-            path.moveTo(rigidpoints.getPoints().get(0).x ,rigidpoints.getPoints().get(0).y);
-            for (int j = 1;j < rigidpoints.size(); j++)
-            {
-
-
-                // Log.v("App path",String.valueOf(points[i].getPoints().get(j).x+","+points[i].getPoints().get(j).y));
-                path.lineTo(rigidpoints.getPoints().get(j).x,rigidpoints.getPoints().get(j).y);
-            }
-            c.drawPath(path, paint);
-    }
-
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Surface.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/Surface.java
deleted file mode 100644
index c5576f5..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Surface.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.example.rohit.myapplication;
-
-import android.graphics.Canvas;
-import android.graphics.Paint;
-
-import org.jbox2d.collision.shapes.ChainShape;
-import org.jbox2d.common.Vec2;
-import org.jbox2d.dynamics.Body;
-import org.jbox2d.dynamics.BodyDef;
-
-import java.util.ArrayList;
-
-/**
- * Created by ROHIT on 27-10-2016.
- */
-public class Surface {
-
-    ArrayList<Vec2> surface;
-    float x0,y0,x1,y1;
-    Createbox2d box2d;
-    Canvas canvas;
-    public Surface(float _x0,float _y0,float _x1,float _y1 ,Createbox2d box2dobject)
-    {
-        x0=_x0;
-        y0=_y0;
-        x1=_x1;
-        y1=_y1;
-        box2d=box2dobject;
-        surface = new ArrayList<Vec2>();
-        surface.add(new Vec2(x0,y0));
-        surface.add(new Vec2(x1,y1));
-
-        ChainShape chain=new ChainShape();
-        Vec2[] vertices=new Vec2[surface.size()];
-        for(int i=0;i<vertices.length;i++)
-        {
-            vertices[i]=box2d.coordPixelsToWorld(surface.get(i));
-        }
-       // chain.createChain(vertices, vertices.length);
-        chain.createLoop(vertices, vertices.length);
-        BodyDef bd=new BodyDef();
-        Body body=box2d.world.createBody(bd);
-        body.createFixture(chain,1);
-        body.setUserData(this);
-
-    }
-    void display(Canvas c)
-    {
-        canvas=c;
-        Paint paint = new Paint();
-        paint.setColor(0x000000);
-        paint.setAlpha(255);
-        paint.setStrokeWidth(6);
-        canvas.drawLine(x0,y0,x1,y1, paint);
-    }
-
-}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/ViewJavaCamera.java b/MyApplication/app/src/main/java/com/example/rohit/myapplication/ViewJavaCamera.java
deleted file mode 100644
index e7ed489..0000000
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/ViewJavaCamera.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.example.rohit.myapplication;
-
-import org.opencv.android.JavaCameraView;
-
-import android.content.Context;
-import android.hardware.Camera;
-import android.hardware.Camera.PictureCallback;
-import android.hardware.Camera.Size;
-import android.util.AttributeSet;
-import java.util.List;
-import android.util.Log;
-
-/**
- * Created by ROHIT on 08-05-2017.
- */
-public class ViewJavaCamera extends JavaCameraView {
-
-    public ViewJavaCamera(Context context,int cameraId) {
-        super(context,cameraId);
-    }
-
-    public ViewJavaCamera(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-
-    public List<Size> getResolutionList() {
-        return mCamera.getParameters().getSupportedPreviewSizes();
-    }
-
-    public void setResolution(Size resolution) {
-        disconnectCamera();
-        mMaxHeight = resolution.height;
-        mMaxWidth = resolution.width;
-        connectCamera(getWidth(), getHeight());
-    }
-
-    public Size getResolution() {
-        return mCamera.getParameters().getPreviewSize();
-    }
-
-}
diff --git a/MyApplication/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java b/MyApplication/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java
deleted file mode 100644
index 9812649..0000000
--- a/MyApplication/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/* AUTO-GENERATED FILE.  DO NOT MODIFY.
- *
- * This class was automatically generated by the
- * aapt tool from the resource data it found.  It
- * should not be modified by hand.
- */
-package org.opencv;
-
-public final class R {
-	public static final class attr {
-		public static final int camera_id = 0x7f010001;
-		public static final int show_fps = 0x7f010000;
-	}
-	public static final class id {
-		public static final int any = 0x7f020000;
-		public static final int back = 0x7f020001;
-		public static final int front = 0x7f020002;
-	}
-	public static final class styleable {
-		public static final int[] CameraBridgeViewBase = { 0x7f010000, 0x7f010001 };
-		public static final int CameraBridgeViewBase_camera_id = 1;
-		public static final int CameraBridgeViewBase_show_fps = 0;
-	}
-}
diff --git a/MyApplication/app/src/androidTest/java/com/example/rohit/myapplication/ApplicationTest.java b/app/src/androidTest/java/formandfun/com/form_n_fun/ApplicationTest.java
similarity index 88%
rename from MyApplication/app/src/androidTest/java/com/example/rohit/myapplication/ApplicationTest.java
rename to app/src/androidTest/java/formandfun/com/form_n_fun/ApplicationTest.java
index 3708ade..bd37d9d 100644
--- a/MyApplication/app/src/androidTest/java/com/example/rohit/myapplication/ApplicationTest.java
+++ b/app/src/androidTest/java/formandfun/com/form_n_fun/ApplicationTest.java
@@ -1,4 +1,4 @@
-package com.example.rohit.myapplication;
+package formandfun.com.form_n_fun;
 
 import android.app.Application;
 import android.test.ApplicationTestCase;
diff --git a/app/src/main/java/com/example/formfun/CameraView.java b/app/src/main/java/com/example/formfun/CameraView.java
new file mode 100644
index 0000000..c8d17df
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/CameraView.java
@@ -0,0 +1,57 @@
+package com.example.formfun;
+
+import android.content.Context;
+import android.hardware.Camera;
+import android.util.AttributeSet;
+
+import org.opencv.android.JavaCameraView;
+
+import java.util.List;
+
+/**
+ * Created by ROHIT on 21-05-2017.
+ */
+public class CameraView extends JavaCameraView {
+
+
+    public CameraView(Context context, int cameraId) {
+        super(context,cameraId);
+    }
+
+    public CameraView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+
+    public List<Camera.Size> getResolutionList() {
+        return mCamera.getParameters().getSupportedPreviewSizes();
+    }
+    /**
+     * calls disconnectCamera() to stop the camera processing thread
+     */
+
+    void stopCamera()
+    {
+        disconnectCamera();//stop the thread
+    }
+
+    /**
+     * change the resolution of camera
+     */
+    public void setResolution(Camera.Size resolution) {
+        disconnectCamera(); //disconnect camera
+        mMaxHeight = resolution.height;
+        mMaxWidth = resolution.width;
+        connectCamera(getWidth(), getHeight()); //connect camera
+
+    }
+    /**
+     * get different camera preview sizes
+     */
+
+    public Camera.Size getResolution() {
+        return mCamera.getParameters().getPreviewSize();
+    }
+
+
+}
diff --git a/app/src/main/java/com/example/formfun/FindMazesAndBalls.java b/app/src/main/java/com/example/formfun/FindMazesAndBalls.java
new file mode 100644
index 0000000..d98e2b6
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/FindMazesAndBalls.java
@@ -0,0 +1,69 @@
+package com.example.formfun;
+
+import org.opencv.core.Mat;
+
+/**
+ * Created by ROHIT on 22-05-2017.
+ */
+public class FindMazesAndBalls {
+
+
+    private long selfAddr;
+
+    static {
+        System.loadLibrary("process");
+    }
+
+    /**
+     * makes jni call to create c++ reference
+     */
+
+    public FindMazesAndBalls(int screenwidth,int screenheight,int matwidth, int matheight )
+    {
+        selfAddr = newSelf(screenwidth, screenheight, matwidth, matheight); //jni call to create c++ reference and returns address
+    }
+
+    /**
+     * makes jni call to delete c++ reference
+     */
+
+    public void delete()
+    {
+        deleteSelf(selfAddr);//jni call to delete c++ reference
+        selfAddr = 0;//set address to 0
+    }
+
+    @Override
+    protected void finalize() throws Throwable {
+        delete();
+    }
+
+    /**
+     * return address of c++ reference
+     */
+    public long getselfAddr() {
+
+        return selfAddr; //return address
+    }
+
+    /**
+     * //makes jni call to proces frames
+     */
+
+    public void apply(final Mat src) {
+        run(selfAddr, src.getNativeObjAddr());//jni call to proces frames
+    }
+
+    public boolean foundbothlineandball()
+    {
+        return foundbothlineandball( selfAddr);
+    }
+
+    private static native long newSelf(int screenwidth,int screenheight,int matwidth, int matheight);
+    private static native void deleteSelf(long selfAddr);
+    private static native void run(long selfAddr, long srcAddr);
+    private static native boolean foundbothlineandball(long selfAddr);
+
+
+
+}
diff --git a/app/src/main/java/com/example/formfun/MainActivity.java b/app/src/main/java/com/example/formfun/MainActivity.java
new file mode 100644
index 0000000..276924e
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/MainActivity.java
@@ -0,0 +1,330 @@
+package com.example.formfun;
+
+import android.Manifest;
+import android.content.pm.PackageManager;
+import android.hardware.Camera;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.graphics.PixelFormat;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.Gravity;
+import android.view.View.OnClickListener;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
+import android.widget.Toast;
+import android.widget.Button;
+
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.hardware.Camera.Size;
+
+import org.opencv.android.BaseLoaderCallback;
+import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
+import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
+import org.opencv.android.LoaderCallbackInterface;
+import org.opencv.android.OpenCVLoader;
+import org.opencv.core.Core;
+import org.opencv.core.Mat;
+
+import java.util.List;
+
+import com.example.formfun.graphics.GraphicSurface;
+
+
+public class MainActivity extends AppCompatActivity implements OnClickListener, CvCameraViewListener2 {
+
+    private CameraView mOpenCvCameraView;
+    private static final String TAG = "APP::Activity";
+    private int mCameraIndex = 0;
+    private Mat mRgba;
+    private int CAMERA = 10;
+
+    private FindMazesAndBalls findmazesandballs;
+
+    private Button bt;
+    private GraphicSurface gs;
+    private boolean PressedOnce = true;
+
+    private int accelerometerSensor;
+    private int magneticSensor;
+    private SensorManager sensorManager;
+
+    private float[] InR = new float[16];
+    private float[] I = new float[16];
+    private float[] gravity = new float[3];
+    private float[] geomag = new float[3];
+    private float[] orientVals = new float[3];
+    private float azimuth = 0.0f;
+    private float pitch = 0.0f;
+    private float roll = 0.0f;
+
+    static {
+        if (!OpenCVLoader.initDebug()) {
+            // Handle initialization error
+        } else {
+            System.loadLibrary("process");
+
+        }
+    }
+
+
+    private BaseLoaderCallback mLoaderCallback=new BaseLoaderCallback(this) {
+        @Override
+        public void onManagerConnected(int status) {
+            super.onManagerConnected(status);
+            switch(status)
+            {
+                case LoaderCallbackInterface.SUCCESS: {
+                    Log.i(TAG, "OpenCV loaded successfully");
+
+                    mOpenCvCameraView.enableView();
+
+                }break;
+                default:
+                {
+                    super.onManagerConnected(status);
+                } break;
+            }
+        }
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        final FrameLayout layout = new FrameLayout(this);
+        layout.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+        setContentView(layout);
+
+        mOpenCvCameraView = new CameraView(this,mCameraIndex); //mCameraIndex = 0 indicates rear camera
+        mOpenCvCameraView.setCvCameraViewListener(this);
+        mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);
+        mOpenCvCameraView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+        layout.addView(mOpenCvCameraView);  //add CameraView to frame layout
+        gs = new GraphicSurface(this); // create graphic surface
+        gs.getHolder().setFormat( PixelFormat.TRANSPARENT); //set graphic surface to transparent
+        gs.setZOrderOnTop(true); //graphic surface as top layer
+        gs.setLayoutParams(new FrameLayout.LayoutParams( FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+        layout.addView(gs); //add graphic surface  to frame layout
+        bt = new Button(this); // create button
+        bt.setText("Play");
+        bt.setId(12345);
+        bt.getBackground().setAlpha(64); //button to transparent
+        bt.setOnClickListener(this);
+        bt.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT, Gravity.CENTER));
+        layout.addView(bt); //add button to frame layout
+        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
+        accelerometerSensor = Sensor.TYPE_ACCELEROMETER; //accelerometer
+        magneticSensor = Sensor.TYPE_MAGNETIC_FIELD; //magentic sensor
+        if(Build.VERSION.SDK_INT >= 23)
+            askForPermission(Manifest.permission.CAMERA,CAMERA); //ask for camera permission
+
+
+    }
+
+
+
+
+    final SensorEventListener sensorEventListener = new SensorEventListener() {
+
+        public void onAccuracyChanged (Sensor senor, int accuracy) {
+            //Not used
+        }
+
+        @Override
+        public void onSensorChanged(SensorEvent sensorEvent) {
+
+            if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)
+                gravity = sensorEvent.values;
+            if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)
+                geomag = sensorEvent.values;
+            if(gravity==null)
+                Log.v(TAG,"No accelerometer values");
+            if(geomag==null)
+                Log.v(TAG,"No magnetic field");
+
+
+            if (gravity != null && geomag != null) {
+                boolean success = SensorManager.getRotationMatrix(InR, I, gravity, geomag);
+                if (success) {
+                    SensorManager.getOrientation(InR, orientVals); //get orientation values
+                    azimuth = (float) Math.toDegrees(orientVals[0]);
+                    pitch = (float) Math.toDegrees(orientVals[1]);
+                    roll = (float) Math.toDegrees(orientVals[2]);
+                    gs.setAzimuth(azimuth);
+                    gs.setPitch(pitch);
+                    gs.setRoll(roll);
+                    Log.v(TAG,"azimuth: "+ String.valueOf(azimuth)+" pitch: "+String.valueOf(pitch)+" roll: "+String.valueOf(roll));
+
+                }
+            }
+        }
+    };
+
+
+    private void askForPermission(String permission, Integer requestCode) {
+        if (ContextCompat.checkSelfPermission(MainActivity.this, permission) != PackageManager.PERMISSION_GRANTED) {
+            if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, permission)) {
+
+                ActivityCompat.requestPermissions(MainActivity.this, new String[]{permission}, requestCode);
+
+            } else {
+
+                ActivityCompat.requestPermissions(MainActivity.this, new String[]{permission}, requestCode);
+            }
+        } else {
+            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_6, this, mLoaderCallback);
+            //Toast.makeText(this, "" + permission + " is already granted.", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        if (ActivityCompat.checkSelfPermission(this, permissions[0]) == PackageManager.PERMISSION_GRANTED) {
+            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_6, this, mLoaderCallback);
+            Toast.makeText(this, "Permission granted", Toast.LENGTH_SHORT).show();
+        } else{
+
+            Toast.makeText(this, "Permission denied", Toast.LENGTH_SHORT).show();
+        }
+    }
+
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId())
+        {
+            case 12345:
+                if(PressedOnce)
+                { //when pressed
+                    if(findmazesandballs.foundbothlineandball()) //if both mazes and balls are found
+                    {
+                        mOpenCvCameraView.disableView(); //disable camera
+                        mOpenCvCameraView.stopCamera();
+                        bt.setText("Restart"); ///change button text to Restart
+                        PressedOnce = false;
+                        if(sensorManager != null)  //register acclerometer and  magnetometer sensors to find orientations
+                        {
+                            sensorManager.unregisterListener(sensorEventListener);
+                            sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(magneticSensor), SensorManager.SENSOR_DELAY_NORMAL);
+                            sensorManager.registerListener(sensorEventListener, sensorManager.getDefaultSensor(accelerometerSensor), SensorManager.SENSOR_DELAY_NORMAL);
+                        }
+                        if(findmazesandballs != null && findmazesandballs.getselfAddr() != 0)
+                            gs.startGraphics(); //start graphics
+                    }
+
+                }
+                else
+                {
+                    recreate();  //recreate the activity
+                    PressedOnce=true;
+                }
+                break;
+        }
+    }
+
+    @Override
+    public void onResume()
+    {
+        super.onResume();
+        if(Build.VERSION.SDK_INT< 23)
+            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_6, this, mLoaderCallback);
+        hideSystemUI(); //hide UI
+    }
+
+    @Override
+    public void onPause()
+    {
+        super.onPause();
+        sensorManager.unregisterListener(sensorEventListener);
+        if(gs!=null) {
+            gs.surfaceDestroyed(gs.holder);
+            gs = null;
+        }
+        if (mOpenCvCameraView != null)
+            mOpenCvCameraView.disableView();
+        if(findmazesandballs != null) {
+            findmazesandballs.delete();  //delete instance
+            findmazesandballs = null;
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        // TODO Auto-generated method stub
+
+        super.onDestroy();
+        sensorManager.unregisterListener(sensorEventListener);
+        if(mOpenCvCameraView!=null)
+            mOpenCvCameraView.disableView();
+
+        if(gs!=null) {
+            gs.surfaceDestroyed(gs.holder);
+        }
+
+    }
+
+
+
+    @Override
+    public void onCameraViewStarted(int width, int height) {
+
+        String caption = Integer.valueOf(mOpenCvCameraView.getWidth()).toString() + "x" + Integer.valueOf(mOpenCvCameraView.getHeight()).toString();
+        Log.v("screen_size ",caption);
+        List<Camera.Size> mResolutionList = mOpenCvCameraView.getResolutionList();
+        Camera.Size mSize = null;
+        for (Camera.Size size : mResolutionList) {
+            Log.i(TAG, "Available resolution: "+size.width+" "+size.height);
+            if(size.width<=1280&&size.height<=960) { //change the resolution, 1280x960 and 1440x1080 are working fine in nexus 5x
+                mSize = size;
+                Log.i(TAG, "selected resolution: "+size.width+" "+size.height);
+                break;
+            }
+        }
+        mOpenCvCameraView.setResolution(mSize); //set resolution
+        Size resolution = mOpenCvCameraView.getResolution();
+        mRgba = new Mat();
+        //initialize findmazesandballs
+        findmazesandballs = new FindMazesAndBalls(mOpenCvCameraView.getWidth(), mOpenCvCameraView.getHeight(),resolution.width, resolution.height);
+        if(findmazesandballs.getselfAddr()!=0)
+            gs.setAddressandScreenSize(findmazesandballs.getselfAddr(),mOpenCvCameraView.getWidth(),mOpenCvCameraView.getHeight());
+    }
+
+
+    @Override
+    public void onCameraViewStopped() {
+
+    }
+
+    @Override
+    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
+        mRgba=inputFrame.rgba();
+        if (Build.MODEL.equalsIgnoreCase("Nexus 5X")) //flip the frame on nexus5x
+            Core.flip(mRgba, mRgba,-1);
+        findmazesandballs.apply(mRgba); //process frames
+        return mRgba;
+    }
+
+    private void hideSystemUI() {
+        int windowVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_FULLSCREEN;
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            windowVisibility |= View.SYSTEM_UI_FLAG_IMMERSIVE;
+        }
+
+        getWindow().getDecorView().setSystemUiVisibility(windowVisibility);
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/formfun/graphics/Ball.java b/app/src/main/java/com/example/formfun/graphics/Ball.java
new file mode 100644
index 0000000..8423e93
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/graphics/Ball.java
@@ -0,0 +1,84 @@
+package com.example.formfun.graphics;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Color;
+import android.util.Log;
+
+import org.jbox2d.collision.shapes.CircleShape;
+import org.jbox2d.common.Transform;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.dynamics.BodyType;
+import org.jbox2d.dynamics.FixtureDef;
+
+
+/**
+ * Created by ROHIT on 23-05-2017.
+ */
+
+public class Ball {
+
+    private float x,y,r;
+    private Createbox2d box2d;
+    private Body b1;
+
+    public Ball(float _x,float _y,float _r, Createbox2d _box2d) //used to create balls
+    {
+        x = _x;
+        y = _y;
+        r = _r;
+        box2d = _box2d;
+        BodyDef bd = new BodyDef();// define body
+        bd.type = BodyType.DYNAMIC; //make body dynamic
+        bd.position.set(box2d.coordPixelsToWorld(x,y)); //intial position to ball center
+        b1 = box2d.createBody(bd); //create body
+        CircleShape cs = new CircleShape(); //create box2d circle shape
+        cs.m_radius = box2d.scalarPixelsToWorld(r);//cricle radius to ball radius
+        FixtureDef fd = new FixtureDef();// body properites
+        fd.shape = cs;
+        fd.density = 1; //density to 1
+        fd.friction = 0.2f;//0.2f;//0.0f;
+        fd.restitution = 0.5f;//0.7f;//1.0f;
+        b1.createFixture(fd); //add properties to body
+        b1.setUserData(this);
+    }
+
+
+    /**
+     * display ball
+     */
+
+    public void display(Canvas c)
+    {
+        Vec2 pos = box2d.getBodyPixelCoord(b1); //get body center
+        Paint paint = new Paint();
+        paint.setColor(Color.GREEN);
+        c.drawCircle(pos.x, pos.y,r, paint); //draw ball
+        Vec2 center = b1.getWorldCenter();
+        b1.applyForce(new Vec2(0,0), center); //add force on center
+    }
+
+    /**
+     * add force on center of the ball
+     */
+
+    public void addforce(float x, float y)
+    {
+        Vec2 force = new Vec2(b1.getMass()*y/2,-b1.getMass()*x/2); //create force
+        Vec2 pos = b1.getWorldCenter();
+        b1.applyForce(force, pos);//apply force on body center
+    }
+
+
+    /**
+     *  call to destory box2d body
+     */
+    void destory()
+    {
+        box2d.destroyBody(b1);
+    }
+
+
+}
diff --git a/app/src/main/java/com/example/formfun/graphics/BoundaryPoints.java b/app/src/main/java/com/example/formfun/graphics/BoundaryPoints.java
new file mode 100644
index 0000000..0dbbff0
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/graphics/BoundaryPoints.java
@@ -0,0 +1,35 @@
+package com.example.formfun.graphics;
+
+import android.graphics.PointF;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ROHIT on 22-05-2017.
+ */
+public class BoundaryPoints {
+
+    ArrayList<PointF> arrlist;
+    public BoundaryPoints()
+    {
+        arrlist = new ArrayList<PointF>();  //arraylist of android PointF
+    }
+
+    public void addPoint(float x,float y)
+    {
+        arrlist.add(new PointF(x,y)); //add point to arraylist
+    }
+    public void clear()
+    {
+        arrlist.clear(); //clear arraylist
+    }
+    public int size()
+    {
+        return  arrlist.size(); //return size of arraylist
+    }
+    ArrayList<PointF> getPoints()
+    {
+        return  arrlist; //return arraylist
+    }
+
+}
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Box2DContactListener.java b/app/src/main/java/com/example/formfun/graphics/Box2DContactListener.java
similarity index 58%
rename from MyApplication/app/src/main/java/com/example/rohit/myapplication/Box2DContactListener.java
rename to app/src/main/java/com/example/formfun/graphics/Box2DContactListener.java
index d4d25b6..d516f34 100644
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Box2DContactListener.java
+++ b/app/src/main/java/com/example/formfun/graphics/Box2DContactListener.java
@@ -1,4 +1,4 @@
-package com.example.rohit.myapplication;
+package com.example.formfun.graphics;
 
 import org.jbox2d.callbacks.ContactImpulse;
 import org.jbox2d.callbacks.ContactListener;
@@ -7,29 +7,44 @@ import org.jbox2d.dynamics.Body;
 import org.jbox2d.dynamics.Fixture;
 import org.jbox2d.dynamics.contacts.Contact;
 
+import android.content.Context;
+
+import android.media.AudioManager;
+import android.media.SoundPool;
+import com.example.formfun.R;
+
+
 /**
- * Created by ROHIT on 27-10-2016.
+ * Created by ROHIT on 23-05-2017.
  */
+
 public class Box2DContactListener implements ContactListener {
 
+    private static SoundPool soundpool;
+    private static int sound_id;
+
+    public Box2DContactListener(Context context_)
+    {
+        soundpool = new SoundPool(1, AudioManager.STREAM_MUSIC, 0);
+        sound_id = soundpool.load(context_, R.raw.bounce,1);
+    }
+
     @Override
     public void beginContact(Contact cp) {
         // TODO Auto-generated method stub
         Fixture f1 = cp.getFixtureA();
         Fixture f2 = cp.getFixtureB();
+
         // Get both bodies
         Body b1 = f1.getBody();
         Body b2 = f2.getBody();
-        // Get our objects that reference these bodies
 
+        // Get objects that reference these bodies
         Object o1 = b1.getUserData();
         Object o2 = b2.getUserData();
 
-
-
-
-        if ((o1.getClass() == Maze.class&&o2.getClass() == Ball.class)||(o1.getClass() == Ball.class&&o2.getClass() == Maze.class)) {
-            balltosurfacecontact();
+        if ((o1.getClass() == Maze.class && o2.getClass() == Ball.class) || (o1.getClass() == Ball.class && o2.getClass() == Maze.class)) { //if ball touches maze
+            balltosurfacecontact(); //play sound
         }
 
     }
@@ -52,18 +67,10 @@ public class Box2DContactListener implements ContactListener {
 
     }
 
-    public void balltoballcontact()
-    {
-        MainActivity.v.vibrate(0);
-
-    }
 
     public void balltosurfacecontact()
     {
-        //MainActivity.v.vibrate(1);
-        MainActivity.soundpool.play(MainActivity.sound_id, 1, 1, 1, 0, (float) 0.5);
-
-
+      soundpool.play(sound_id, 1, 1, 1, 0, (float) 0.5);
     }
 
 
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Createbox2d.java b/app/src/main/java/com/example/formfun/graphics/Createbox2d.java
similarity index 62%
rename from MyApplication/app/src/main/java/com/example/rohit/myapplication/Createbox2d.java
rename to app/src/main/java/com/example/formfun/graphics/Createbox2d.java
index c3dff16..29acbf8 100644
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/Createbox2d.java
+++ b/app/src/main/java/com/example/formfun/graphics/Createbox2d.java
@@ -1,4 +1,4 @@
-package com.example.rohit.myapplication;
+package com.example.formfun.graphics;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -16,8 +16,9 @@ import org.jbox2d.dynamics.World;
 
 
 /**
- * Created by ROHIT on 27-10-2016.
+ * Created by ROHIT on 23-05-2017.
  */
+
 public class Createbox2d {
 
     static final long FPS = 10;
@@ -25,49 +26,49 @@ public class Createbox2d {
     private static final float TIMESTEP = 1.0f /60f;
     private static final int VELOCITY_ITERATIONS = 10;
     private static final int POSITION_ITERATIONS = 8;
-    Vec2 gravity = new Vec2(0.0f, 0.0f);
+    private Vec2 gravity = new Vec2(0.0f, 0.0f);
     //Vec2 gravity = new Vec2(10.0f, 0.0f);
-    World world;
-    float scaleFactor=150.0f;
-    float IscaleFactor=1/scaleFactor;//meter to pixel
-    Canvas canvas;
-    float width;
-    float height;
-    public float transX;// = 320.0f;
-    public float transY;// = 240.0f;
-    //public float scaleFactor;// = 10.0f;
-    public float yFlip;// = -1.0f; //flip y coordinate
+    private World world;
+    private float scaleFactor = 150.0f;
+    private float IscaleFactor=1/scaleFactor;//meter to pixel
+    private Canvas canvas;
+    private float width;
+    private float  height;
     private Box2DContactListener contactlistener;
 
-    Createbox2d(Context context)
+    Createbox2d()
     {
         world = new World(gravity);
         world.setWarmStarting(true);
         world.setContinuousPhysics(true);
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-        Point size = new Point();
-        display.getSize(size);
-        width = size.x;
-        height = size.y;
-        Log.d("screen size",width+","+height);
-        transX = width/2;
-        transY = height/2;
-        yFlip = -1;
-
     }
 
+    public void setScreenSize(float _width, float _height)
+    {
+        width = _width;
+        height = _height;
+        Log.v("createbox2d","screen size: "+String.valueOf(width)+" , "+String.valueOf(height));
+    }
 
+    /**
+     * to iterate in box2d world
+     */
     public void step() {
         float timeStep = 1.0f / 60f;
         world.step(TIMESTEP,VELOCITY_ITERATIONS,POSITION_ITERATIONS);
         world.clearForces();
     }
+    /**
+     * destory body in world
+     */
 
     public void destroyBody(Body b) {
         world.destroyBody(b);
     }
 
+    /**
+     *  add gravity
+     */
 
     public void addGravity()
     {
@@ -75,33 +76,59 @@ public class Createbox2d {
 
     }
 
+    /**
+     *  create body in box2d world
+     */
+
     public Body createBody(BodyDef bd) {
 
         return world.createBody(bd);
     }
+    /**
+     *  returns world object
+     */
+    public World getWorld() {
+        return world;
+    }
 
-
+    /**
+     *  returns body coordinates in pixels
+     */
     public Vec2 getBodyPixelCoord(Body b) {
-        Transform xf = b.getTransform();//b.getXForm();
-        return coordWorldToPixels(xf.p);
+        Transform xf = b.getTransform();//body pixels in box2d world
+        return coordWorldToPixels(xf.p);// box2d world to pixels
     }
 
+    /**
+     *  scale pixesls to world
+     */
 
     public float scalarPixelsToWorld(float val) {
 
         return val*IscaleFactor;
     }
 
+    /**
+     *  scale world to pixesl
+     */
+
     public float scalarWorldToPixels(float val) {
 
         return val*scaleFactor;
     }
 
-    public void listenForCollisions() {
-        contactlistener = new Box2DContactListener();
+    /**
+     *  box2d contact listener
+     */
+
+    public void listenForCollisions(Context context) {
+        contactlistener = new Box2DContactListener(context);
         world.setContactListener(contactlistener);
     }
 
+    /**
+     *   pixels (x,y) to box2d world
+     */
     public Vec2 coordPixelsToWorld(float pixelX, float pixelY) {
         float offsetX=width/2;
         float offsetY=height/2;
@@ -110,6 +137,10 @@ public class Createbox2d {
         return new Vec2(worldX,worldY);
     }
 
+    /**
+     *  pixels (Vec2) to box2d world
+     */
+
     public Vec2 coordPixelsToWorld(Vec2 p) {
 
         float offsetX=width/2;
@@ -119,6 +150,9 @@ public class Createbox2d {
         return new Vec2(worldX,worldY);
     }
 
+    /**
+     *  box2d world (x,y) to pixels
+     */
 
     public Vec2 coordWorldToPixels(float worldX, float worldY) {
         float offsetX=width/2*IscaleFactor;
@@ -128,12 +162,15 @@ public class Createbox2d {
         return new Vec2(pixelX, pixelY);
     }
 
-    private Vec2 coordWorldToPixels(Vec2 p) {
+    /**
+     *   box2d world (Vec2) to pixels
+     */
+
+    public Vec2 coordWorldToPixels(Vec2 p) {
         float offsetX=width/2*IscaleFactor;
         float offsetY=height/2*IscaleFactor;
         float pixelX=(p.x+offsetX)*scaleFactor;
         float pixelY=(-p.y+offsetY)*scaleFactor;
         return new Vec2(pixelX, pixelY);
     }
-
 }
diff --git a/MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicSurface.java b/app/src/main/java/com/example/formfun/graphics/GraphicSurface.java
similarity index 51%
rename from MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicSurface.java
rename to app/src/main/java/com/example/formfun/graphics/GraphicSurface.java
index 8dab056..12c4c8a 100644
--- a/MyApplication/app/src/main/java/com/example/rohit/myapplication/GraphicSurface.java
+++ b/app/src/main/java/com/example/formfun/graphics/GraphicSurface.java
@@ -1,8 +1,4 @@
-package com.example.rohit.myapplication;
-
-/**
- * Created by ROHIT on 23-10-2016.
- */
+package com.example.formfun.graphics;
 
 import android.content.Context;
 import android.graphics.Color;
@@ -15,29 +11,25 @@ import android.graphics.Color;
 import android.graphics.PorterDuff.Mode;
 import android.graphics.Rect;
 
+/**
+ * Created by ROHIT on 23-05-2017.
+ */
+
 public class GraphicSurface extends SurfaceView implements SurfaceHolder.Callback {
 
 
     public SurfaceHolder holder;
     private GraphicThread graphicThread;
-    private boolean toggle=false;
-    Createbox2d box2d;
-    private float xAxis;
-    private float yAxis;
-    private float zAxis;
+    private boolean toggle = false;
     private float azimuth = 0.0f;
     private float pitch = 0.0f;
     private float roll = 0.0f;
 
-
     public GraphicSurface(Context context) {
         super(context);
-        box2d=new Createbox2d(context);
-        box2d.listenForCollisions();
-        graphicThread=new GraphicThread(this,context,box2d);
-        holder=getHolder();
+        graphicThread=new GraphicThread(this,context); //create game thread;
+        holder=getHolder(); //surface holder
         holder.addCallback(this);
-
     }
 
 
@@ -49,99 +41,109 @@ public class GraphicSurface extends SurfaceView implements SurfaceHolder.Callbac
     @Override
     public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
 
+
     }
 
     @Override
     public void surfaceDestroyed(SurfaceHolder holder) {
-
-        stopgraphics();
+        stopGraphics();
 
     }
 
 
-    public void startgraphics()
+    public void setAddressandScreenSize(long address,int screen_width, int screen_height)
     {
+        graphicThread.setAddressandScreenSize(address,screen_width,screen_height);
+    }
+
+    /**
+     * start game thread
+     */
 
+    public void startGraphics()
+    {
         graphicThread.setRunning(true);
-        graphicThread.start();
-        toggle=true;
-        Log.v("APP","graphics Started");
+        graphicThread.start(); //start game thread
+        toggle = true;
+        Log.v("APP::GraphicSurface","graphics Started");
 
     }
 
-    public void stopgraphics()
-    {
+    /**
+     * stop game thread
+     */
 
+    public void stopGraphics()
+    {
         if(toggle)
         {
-            Log.v("APP","about to stop graphics");
-            boolean retry=true;
-
+            Log.v("APP::GraphicSurface","about to stop graphics");
+            boolean retry = true;
             graphicThread.setRunning(false);
-            toggle=false;
+            toggle = false;
             while(retry)
             {
                 try
                 {
                     graphicThread.join();
-                    retry=false;
-
+                    retry = false;
                 }
-                catch (InterruptedException e) {
+                catch (InterruptedException e)
+                {
                 }
             }
-
         }
-        Log.v("APP","graphics stopped");
+        graphicThread.destoryAll(); //destroy maze balls and surfaces
+        Log.v("APP::GraphicSurface","graphics stopped");
     }
 
 
-    public void setXvalue(float _x) {xAxis = _x;}
-
-    public void setYvalue(float _y) {
-        yAxis = _y;
-    }
-
-    public void setZvalue(float _z) {
-        zAxis = _z;
-    }
-
-    public float getXvalue()
-    {
-        return xAxis;
-    }
-    public float getYvalue()
+    /**
+     * set azimuth
+     */
+    public void setAzimuth(float _azimuth)
     {
-        return yAxis;
+        azimuth = _azimuth;
     }
-    public float getZvalue()
+
+    /**
+     * set pitch
+     */
+    public void setPitch(float _pitch )
     {
-        return zAxis;
+        pitch = _pitch;
     }
 
-
-
-    public void setAzimuth(float _azimuth) {azimuth = _azimuth;}
-
-    public void setPitch(float _pitch ) {pitch = _pitch;}
-
-    public void setRoll(float _roll) {
+    /**
+     *set roll
+     */
+    public void setRoll(float _roll)
+    {
         roll = _roll;
     }
 
+    /**
+     * return azimuth to game thread
+     */
     public float getAzimuth()
     {
         return azimuth;
     }
+
+    /**
+     * return pitch to game thread
+     */
     public float getPitch()
     {
         return pitch;
     }
+
+    /**
+     * return roll to game thread
+     */
     public float getRoll()
     {
         return roll;
     }
 
-
-
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/formfun/graphics/GraphicThread.java b/app/src/main/java/com/example/formfun/graphics/GraphicThread.java
new file mode 100644
index 0000000..c1f370c
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/graphics/GraphicThread.java
@@ -0,0 +1,181 @@
+package com.example.formfun.graphics;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.graphics.Point;
+import android.graphics.PorterDuff.Mode;
+import android.graphics.Rect;
+import android.util.Log;
+import android.view.Display;
+import android.view.MotionEvent;
+import android.view.WindowManager;
+import java.util.ArrayList;
+
+/**
+ * Created by ROHIT on 23-05-2017.
+ */
+
+public class GraphicThread extends Thread {
+
+    private boolean running = false;
+    private final int refresh_rate=6;
+
+    static {
+        System.loadLibrary("process");
+    }
+
+    private GraphicSurface Gs;
+    private ArrayList<BoundaryPoints> mazesarraylist;
+    private ArrayList<BoundaryPoints> ballsarraylist;
+
+    private Canvas c = null;
+    private Createbox2d box2d;
+    private  ArrayList<Ball>balls=new ArrayList<Ball>();
+    private  ArrayList<Maze>mazes=new ArrayList<Maze>();
+    private Surface s1,s2,s3,s4;
+    private float screenheight,screenwidth;
+    private float MIN = -3.0f;
+    private float MAX = 3.0f;
+    private long objectaddress;
+
+
+    public GraphicThread(GraphicSurface Gs ,Context context) {
+        this.Gs = Gs;
+        box2d=new Createbox2d();// create box2d world
+        box2d.listenForCollisions(context); // box2d collision listener
+    }
+
+    public void setRunning(boolean run) {
+        running = run;
+    }
+
+    public void setAddressandScreenSize(long address,float screen_width, float screen_height ) {
+        objectaddress = address;
+        screenwidth = screen_width;
+        screenheight = screen_height;
+        box2d.setScreenSize(screen_width,screen_height);
+
+    }
+
+    public float limit(float value) {
+        return Math.max(MIN, Math.min(value, MAX));
+    }
+
+    @SuppressLint("NewApi")
+    public void run() {
+        long previousTime, currentTime;
+        previousTime = System.currentTimeMillis();
+
+        //border surfaces so that ball won't go out of the screen
+        s1=new Surface(0,0,screenwidth,0,box2d);
+        s2=new Surface(screenwidth,0,screenwidth,screenheight,box2d);
+        s3=new Surface(screenwidth,screenheight,0,screenheight,box2d);
+        s4=new Surface(0,screenheight,0,0,box2d);
+
+        mazesarraylist = getmazesarraylist(objectaddress); // jni call to get maze points
+
+        if(mazesarraylist!=null)
+            for(int i=0;i<mazesarraylist.size();i++)
+            {
+                mazes.add(new Maze(mazesarraylist.get(i),box2d)); //add maze points to maze for creating box2d body
+            }
+
+        ballsarraylist = getballsarraylist(objectaddress); // jni call to get ball points
+
+        if(ballsarraylist!=null)
+            for(int i=0;i<ballsarraylist.size();i++)
+            {
+                //add ball points to ball for creating box2d body
+                balls.add(new Ball(ballsarraylist.get(i).getPoints().get(0).x, ballsarraylist.get(i).getPoints().get(0).y,ballsarraylist.get(i).getPoints().get(1).x ,box2d));
+            }
+
+        while(running) {
+            //  Canvas c = null;
+
+            currentTime = System.currentTimeMillis();
+            while ((currentTime - previousTime) < refresh_rate) {
+                currentTime = System.currentTimeMillis();
+            }
+            previousTime = currentTime;
+
+            box2d.step(); //box2d step
+            for(Ball ball:balls)
+            {
+                Log.v("APP",String.valueOf("force gs roll "+limit(Gs.getRoll())+" , gs picth "+limit(Gs.getRoll())));
+                /// ball.addforce(Gs.getXvalue(), Gs.getYvalue());
+                ball.addforce(-limit(Gs.getRoll()), -limit(Gs.getPitch())); // add force on ball
+            }
+
+
+
+            try
+            {
+                c=Gs.getHolder().lockCanvas();
+                synchronized(Gs.getHolder())
+                {
+                    c.drawColor(Color.TRANSPARENT);
+                    c.drawColor(0,Mode.CLEAR);
+                    //display border
+                    s1.display(c);
+                    s2.display(c);
+                    s3.display(c);
+                    s4.display(c);
+                    for(Maze maze:mazes) {
+                        maze.display(c);  //display maze
+                    }
+
+                    for(Ball ball:balls)
+                    {
+                        ball.display(c); //bisplay balls
+                    }
+                }
+            }
+            finally
+            {
+                if (c != null) {
+                    Gs.getHolder().unlockCanvasAndPost(c);
+                }
+            }
+
+        }
+        try {
+            Thread.sleep(refresh_rate-5); // Wait some time till I need to display again
+        } catch (InterruptedException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+
+    }
+
+    void destoryAll()
+    {
+        if(s1 != null)
+            s1.destory();
+        if(s2 != null)
+            s2.destory();
+        if(s3 != null)
+            s3.destory();
+        if(s4 != null)
+            s4.destory();
+
+        for(Maze maze:mazes) {
+            maze.destory();  //display maze
+        }
+
+        for(Ball ball:balls)
+        {
+            ball.destory(); //bisplay balls
+        }
+
+    }
+
+
+    private static native ArrayList<BoundaryPoints> getmazesarraylist(long selfAddr);
+    private static native ArrayList<BoundaryPoints> getballsarraylist(long selfAddr);
+}
diff --git a/app/src/main/java/com/example/formfun/graphics/Maze.java b/app/src/main/java/com/example/formfun/graphics/Maze.java
new file mode 100644
index 0000000..2bceb0a
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/graphics/Maze.java
@@ -0,0 +1,91 @@
+package com.example.formfun.graphics;
+
+
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.util.Log;
+
+import org.jbox2d.collision.shapes.ChainShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+import org.jbox2d.common.MathUtils;
+import org.jbox2d.common.Settings;
+
+import java.util.ArrayList;
+
+
+/**
+ * Created by ROHIT on 23-05-2017.
+ */
+
+public class Maze {
+
+    private BoundaryPoints rigidpoints;
+    private ArrayList<Vec2> surface;
+    private Body body;
+    private Createbox2d box2d;
+    private int index = 0;
+
+
+    public Maze(BoundaryPoints rigidpoints,Createbox2d _box2d) //used to create mazes
+    {
+        box2d = _box2d;
+        this.rigidpoints = rigidpoints; //get points to form maze
+        surface = new ArrayList<Vec2>(); //to build box2d surface
+        for(int i = 0; i < rigidpoints.size(); i++ )
+            if(this.rigidpoints.getPoints().get(i).x > 0 && this.rigidpoints.getPoints().get(i).y > 0)
+                surface.add(new Vec2(this.rigidpoints.getPoints().get(i).x, this.rigidpoints.getPoints().get(i).y)); //add points to build box2d surface
+
+        if(surface.size() > 0)
+        {
+            ChainShape chain = new ChainShape(); //chainshape in box2d
+            Vec2[] vertices = new Vec2[surface.size()];
+            for(int i = 0; i < vertices.length; i++)
+            {
+                vertices[i] = box2d.coordPixelsToWorld(surface.get(i)); //convert surface points to box2d world coordinates
+            }
+            chain.createChain(vertices, vertices.length);//create chain
+            BodyDef bd = new BodyDef(); //define body
+            body = box2d.getWorld().createBody(bd);
+            body.createFixture(chain,1);  //body properties
+            body.setUserData(this);
+        }
+
+    }
+
+    /**
+     * display maze
+     */
+
+    void display(Canvas c)
+    {
+        Paint paint = new Paint();
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setStrokeJoin(Paint.Join.ROUND);
+        paint.setStrokeCap(Paint.Cap.ROUND);
+        paint.setColor(Color.RED);
+        Path path = new Path();
+        path.moveTo(rigidpoints.getPoints().get(0).x, rigidpoints.getPoints().get(0).y); //join lines
+        for (int j = 1; j < rigidpoints.size(); j++)
+        {
+            path.lineTo(rigidpoints.getPoints().get(j).x, rigidpoints.getPoints().get(j).y);  //join lines
+        }
+        c.drawPath(path, paint);//draw points
+    }
+
+
+    /**
+     *  call to destory box2d body
+     */
+
+    void destory()
+    {
+        box2d.destroyBody(body); //destory body
+    }
+
+
+
+}
diff --git a/app/src/main/java/com/example/formfun/graphics/Surface.java b/app/src/main/java/com/example/formfun/graphics/Surface.java
new file mode 100644
index 0000000..5e9949c
--- /dev/null
+++ b/app/src/main/java/com/example/formfun/graphics/Surface.java
@@ -0,0 +1,68 @@
+package com.example.formfun.graphics;
+
+import android.graphics.Canvas;
+import android.graphics.Paint;
+
+import org.jbox2d.collision.shapes.ChainShape;
+import org.jbox2d.common.Vec2;
+import org.jbox2d.dynamics.Body;
+import org.jbox2d.dynamics.BodyDef;
+
+import java.util.ArrayList;
+
+/**
+ * Created by ROHIT on 23-05-2017.
+ */
+
+public class Surface
+{
+    private ArrayList<Vec2> surface;
+    private float x0,y0,x1,y1;
+    private Body body;
+    private Createbox2d box2d;
+
+    public Surface(float _x0,float _y0,float _x1,float _y1 ,Createbox2d _box2d)  //used as boundary for the game so that balls won't go out of the screen
+    {
+        x0 = _x0;
+        y0 = _y0;
+        x1 = _x1;
+        y1 = _y1;
+        box2d = _box2d;
+        surface = new ArrayList<Vec2>();
+        surface.add(new Vec2(x0,y0));
+        surface.add(new Vec2(x1,y1));
+        ChainShape chain = new ChainShape(); //create chainshape in box2d
+        Vec2[] vertices = new Vec2[surface.size()];
+        for(int i = 0; i < vertices.length; i++)
+        {
+            vertices[i] = box2d.coordPixelsToWorld(surface.get(i)); //convert surface points to box2d world coordinates
+        }
+        chain.createLoop(vertices, vertices.length);
+        BodyDef bd = new BodyDef(); //Define body
+        body = box2d.getWorld().createBody(bd);
+        body.createFixture(chain,1);
+        body.setUserData(this);
+
+    }
+
+    /**
+     * display surface
+     */
+    void display(Canvas c)
+    {
+        Paint paint = new Paint();
+        paint.setColor(0x000000);//make it light
+        paint.setAlpha(255);
+        paint.setStrokeWidth(6);
+        c.drawLine(x0,y0,x1,y1, paint); //drawlines
+    }
+
+    /**
+     * *  call to destory box2d body
+     */
+    void destory()
+    {
+        box2d.destroyBody(body);
+    }
+
+}
diff --git a/MyApplication/app/src/test/java/com/example/rohit/myapplication/ExampleUnitTest.java b/app/src/test/java/formandfun/com/form_n_fun/ExampleUnitTest.java
similarity index 87%
rename from MyApplication/app/src/test/java/com/example/rohit/myapplication/ExampleUnitTest.java
rename to app/src/test/java/formandfun/com/form_n_fun/ExampleUnitTest.java
index 4234e73..54fdb69 100644
--- a/MyApplication/app/src/test/java/com/example/rohit/myapplication/ExampleUnitTest.java
+++ b/app/src/test/java/formandfun/com/form_n_fun/ExampleUnitTest.java
@@ -1,4 +1,4 @@
-package com.example.rohit.myapplication;
+package formandfun.com.form_n_fun;
 
 import org.junit.Test;
 
diff --git a/MyApplication/opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java b/opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java
similarity index 97%
rename from MyApplication/opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java
rename to opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java
index 2f613db..a203a07 100644
--- a/MyApplication/opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java
+++ b/opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java
@@ -1,6 +1,6 @@
 /*
  * This file is auto-generated.  DO NOT MODIFY.
- * Original file: C:\\Users\\ROHIT\\Desktop\\Form-N-Fun-master\\MyApplication\\opencv-java\\src\\main\\aidl\\org\\opencv\\engine\\OpenCVEngineInterface.aidl
+ * Original file: C:\\Users\\ROHIT\\Desktop\\Form-N-Fun-master\\MyApplication2\\opencv-java\\src\\main\\aidl\\org\\opencv\\engine\\OpenCVEngineInterface.aidl
  */
 package org.opencv.engine;
 /**
@@ -101,9 +101,6 @@ public java.lang.String getInterfaceDescriptor()
 {
 return DESCRIPTOR;
 }
-/**
-    * @return Returns service version.
-    */
 @Override public int getEngineVersion() throws android.os.RemoteException
 {
 android.os.Parcel _data = android.os.Parcel.obtain();
@@ -196,9 +193,6 @@ static final int TRANSACTION_getLibPathByVersion = (android.os.IBinder.FIRST_CAL
 static final int TRANSACTION_installVersion = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
 static final int TRANSACTION_getLibraryList = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
 }
-/**
-    * @return Returns service version.
-    */
 public int getEngineVersion() throws android.os.RemoteException;
 /**
     * Finds an installed OpenCV library.
diff --git a/MyApplication/opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java b/opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java
similarity index 97%
rename from MyApplication/opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java
rename to opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java
index 2f613db..a203a07 100644
--- a/MyApplication/opencv-java/build/generated/source/aidl/debug/org/opencv/engine/OpenCVEngineInterface.java
+++ b/opencv-java/build/generated/source/aidl/release/org/opencv/engine/OpenCVEngineInterface.java
@@ -1,6 +1,6 @@
 /*
  * This file is auto-generated.  DO NOT MODIFY.
- * Original file: C:\\Users\\ROHIT\\Desktop\\Form-N-Fun-master\\MyApplication\\opencv-java\\src\\main\\aidl\\org\\opencv\\engine\\OpenCVEngineInterface.aidl
+ * Original file: C:\\Users\\ROHIT\\Desktop\\Form-N-Fun-master\\MyApplication2\\opencv-java\\src\\main\\aidl\\org\\opencv\\engine\\OpenCVEngineInterface.aidl
  */
 package org.opencv.engine;
 /**
@@ -101,9 +101,6 @@ public java.lang.String getInterfaceDescriptor()
 {
 return DESCRIPTOR;
 }
-/**
-    * @return Returns service version.
-    */
 @Override public int getEngineVersion() throws android.os.RemoteException
 {
 android.os.Parcel _data = android.os.Parcel.obtain();
@@ -196,9 +193,6 @@ static final int TRANSACTION_getLibPathByVersion = (android.os.IBinder.FIRST_CAL
 static final int TRANSACTION_installVersion = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
 static final int TRANSACTION_getLibraryList = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
 }
-/**
-    * @return Returns service version.
-    */
 public int getEngineVersion() throws android.os.RemoteException;
 /**
     * Finds an installed OpenCV library.
diff --git a/MyApplication/opencv-java/build/generated/source/buildConfig/androidTest/debug/org/opencv/test/BuildConfig.java b/opencv-java/build/generated/source/buildConfig/androidTest/debug/org/opencv/test/BuildConfig.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/buildConfig/androidTest/debug/org/opencv/test/BuildConfig.java
rename to opencv-java/build/generated/source/buildConfig/androidTest/debug/org/opencv/test/BuildConfig.java
diff --git a/MyApplication/opencv-java/build/generated/source/buildConfig/debug/org/opencv/BuildConfig.java b/opencv-java/build/generated/source/buildConfig/debug/org/opencv/BuildConfig.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/buildConfig/debug/org/opencv/BuildConfig.java
rename to opencv-java/build/generated/source/buildConfig/debug/org/opencv/BuildConfig.java
diff --git a/MyApplication/opencv-java/build/generated/source/buildConfig/release/org/opencv/BuildConfig.java b/opencv-java/build/generated/source/buildConfig/release/org/opencv/BuildConfig.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/buildConfig/release/org/opencv/BuildConfig.java
rename to opencv-java/build/generated/source/buildConfig/release/org/opencv/BuildConfig.java
diff --git a/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java b/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java
new file mode 100644
index 0000000..d6e67cd
--- /dev/null
+++ b/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/R.java
@@ -0,0 +1,24 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * gradle plugin from the resource data it found. It
+ * should not be modified by hand.
+ */
+package org.opencv;
+
+public final class R {
+    public static final class attr {
+        public static final int camera_id = 0x7f010001;
+        public static final int show_fps = 0x7f010000;
+    }
+    public static final class id {
+        public static final int any = 0x7f020000;
+        public static final int back = 0x7f020001;
+        public static final int front = 0x7f020002;
+    }
+    public static final class styleable {
+        public static final int[] CameraBridgeViewBase = { 0x7f010000, 0x7f010001 };
+        public static final int CameraBridgeViewBase_camera_id = 1;
+        public static final int CameraBridgeViewBase_show_fps = 0;
+    }
+}
diff --git a/MyApplication/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/test/R.java b/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/test/R.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/r/androidTest/debug/org/opencv/test/R.java
rename to opencv-java/build/generated/source/r/androidTest/debug/org/opencv/test/R.java
diff --git a/MyApplication/opencv-java/build/generated/source/r/debug/org/opencv/R.java b/opencv-java/build/generated/source/r/debug/org/opencv/R.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/r/debug/org/opencv/R.java
rename to opencv-java/build/generated/source/r/debug/org/opencv/R.java
diff --git a/MyApplication/opencv-java/build/generated/source/r/release/org/opencv/R.java b/opencv-java/build/generated/source/r/release/org/opencv/R.java
similarity index 100%
rename from MyApplication/opencv-java/build/generated/source/r/release/org/opencv/R.java
rename to opencv-java/build/generated/source/r/release/org/opencv/R.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/AsyncServiceHelper.java b/opencv-java/src/main/java/org/opencv/android/AsyncServiceHelper.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/AsyncServiceHelper.java
rename to opencv-java/src/main/java/org/opencv/android/AsyncServiceHelper.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/BaseLoaderCallback.java b/opencv-java/src/main/java/org/opencv/android/BaseLoaderCallback.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/BaseLoaderCallback.java
rename to opencv-java/src/main/java/org/opencv/android/BaseLoaderCallback.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/CameraBridgeViewBase.java b/opencv-java/src/main/java/org/opencv/android/CameraBridgeViewBase.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/CameraBridgeViewBase.java
rename to opencv-java/src/main/java/org/opencv/android/CameraBridgeViewBase.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/FpsMeter.java b/opencv-java/src/main/java/org/opencv/android/FpsMeter.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/FpsMeter.java
rename to opencv-java/src/main/java/org/opencv/android/FpsMeter.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/InstallCallbackInterface.java b/opencv-java/src/main/java/org/opencv/android/InstallCallbackInterface.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/InstallCallbackInterface.java
rename to opencv-java/src/main/java/org/opencv/android/InstallCallbackInterface.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/JavaCameraView.java b/opencv-java/src/main/java/org/opencv/android/JavaCameraView.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/JavaCameraView.java
rename to opencv-java/src/main/java/org/opencv/android/JavaCameraView.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/LoaderCallbackInterface.java b/opencv-java/src/main/java/org/opencv/android/LoaderCallbackInterface.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/LoaderCallbackInterface.java
rename to opencv-java/src/main/java/org/opencv/android/LoaderCallbackInterface.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/OpenCVLoader.java b/opencv-java/src/main/java/org/opencv/android/OpenCVLoader.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/OpenCVLoader.java
rename to opencv-java/src/main/java/org/opencv/android/OpenCVLoader.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/StaticHelper.java b/opencv-java/src/main/java/org/opencv/android/StaticHelper.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/StaticHelper.java
rename to opencv-java/src/main/java/org/opencv/android/StaticHelper.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/android/Utils.java b/opencv-java/src/main/java/org/opencv/android/Utils.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/android/Utils.java
rename to opencv-java/src/main/java/org/opencv/android/Utils.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/calib3d/Calib3d.java b/opencv-java/src/main/java/org/opencv/calib3d/Calib3d.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/calib3d/Calib3d.java
rename to opencv-java/src/main/java/org/opencv/calib3d/Calib3d.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoBM.java b/opencv-java/src/main/java/org/opencv/calib3d/StereoBM.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoBM.java
rename to opencv-java/src/main/java/org/opencv/calib3d/StereoBM.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoMatcher.java b/opencv-java/src/main/java/org/opencv/calib3d/StereoMatcher.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoMatcher.java
rename to opencv-java/src/main/java/org/opencv/calib3d/StereoMatcher.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoSGBM.java b/opencv-java/src/main/java/org/opencv/calib3d/StereoSGBM.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/calib3d/StereoSGBM.java
rename to opencv-java/src/main/java/org/opencv/calib3d/StereoSGBM.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Algorithm.java b/opencv-java/src/main/java/org/opencv/core/Algorithm.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Algorithm.java
rename to opencv-java/src/main/java/org/opencv/core/Algorithm.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Core.java b/opencv-java/src/main/java/org/opencv/core/Core.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Core.java
rename to opencv-java/src/main/java/org/opencv/core/Core.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/CvException.java b/opencv-java/src/main/java/org/opencv/core/CvException.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/CvException.java
rename to opencv-java/src/main/java/org/opencv/core/CvException.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/CvType.java b/opencv-java/src/main/java/org/opencv/core/CvType.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/CvType.java
rename to opencv-java/src/main/java/org/opencv/core/CvType.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/DMatch.java b/opencv-java/src/main/java/org/opencv/core/DMatch.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/DMatch.java
rename to opencv-java/src/main/java/org/opencv/core/DMatch.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/KeyPoint.java b/opencv-java/src/main/java/org/opencv/core/KeyPoint.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/KeyPoint.java
rename to opencv-java/src/main/java/org/opencv/core/KeyPoint.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Mat.java b/opencv-java/src/main/java/org/opencv/core/Mat.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Mat.java
rename to opencv-java/src/main/java/org/opencv/core/Mat.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfByte.java b/opencv-java/src/main/java/org/opencv/core/MatOfByte.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfByte.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfByte.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfDMatch.java b/opencv-java/src/main/java/org/opencv/core/MatOfDMatch.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfDMatch.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfDMatch.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfDouble.java b/opencv-java/src/main/java/org/opencv/core/MatOfDouble.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfDouble.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfDouble.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat.java b/opencv-java/src/main/java/org/opencv/core/MatOfFloat.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfFloat.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat4.java b/opencv-java/src/main/java/org/opencv/core/MatOfFloat4.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat4.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfFloat4.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat6.java b/opencv-java/src/main/java/org/opencv/core/MatOfFloat6.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfFloat6.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfFloat6.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfInt.java b/opencv-java/src/main/java/org/opencv/core/MatOfInt.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfInt.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfInt.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfInt4.java b/opencv-java/src/main/java/org/opencv/core/MatOfInt4.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfInt4.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfInt4.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfKeyPoint.java b/opencv-java/src/main/java/org/opencv/core/MatOfKeyPoint.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfKeyPoint.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfKeyPoint.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint.java b/opencv-java/src/main/java/org/opencv/core/MatOfPoint.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfPoint.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint2f.java b/opencv-java/src/main/java/org/opencv/core/MatOfPoint2f.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint2f.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfPoint2f.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint3.java b/opencv-java/src/main/java/org/opencv/core/MatOfPoint3.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint3.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfPoint3.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint3f.java b/opencv-java/src/main/java/org/opencv/core/MatOfPoint3f.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfPoint3f.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfPoint3f.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfRect.java b/opencv-java/src/main/java/org/opencv/core/MatOfRect.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/MatOfRect.java
rename to opencv-java/src/main/java/org/opencv/core/MatOfRect.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Point.java b/opencv-java/src/main/java/org/opencv/core/Point.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Point.java
rename to opencv-java/src/main/java/org/opencv/core/Point.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Point3.java b/opencv-java/src/main/java/org/opencv/core/Point3.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Point3.java
rename to opencv-java/src/main/java/org/opencv/core/Point3.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Range.java b/opencv-java/src/main/java/org/opencv/core/Range.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Range.java
rename to opencv-java/src/main/java/org/opencv/core/Range.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Rect.java b/opencv-java/src/main/java/org/opencv/core/Rect.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Rect.java
rename to opencv-java/src/main/java/org/opencv/core/Rect.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/RotatedRect.java b/opencv-java/src/main/java/org/opencv/core/RotatedRect.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/RotatedRect.java
rename to opencv-java/src/main/java/org/opencv/core/RotatedRect.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Scalar.java b/opencv-java/src/main/java/org/opencv/core/Scalar.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Scalar.java
rename to opencv-java/src/main/java/org/opencv/core/Scalar.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/Size.java b/opencv-java/src/main/java/org/opencv/core/Size.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/Size.java
rename to opencv-java/src/main/java/org/opencv/core/Size.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/core/TermCriteria.java b/opencv-java/src/main/java/org/opencv/core/TermCriteria.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/core/TermCriteria.java
rename to opencv-java/src/main/java/org/opencv/core/TermCriteria.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/features2d/DescriptorExtractor.java b/opencv-java/src/main/java/org/opencv/features2d/DescriptorExtractor.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/features2d/DescriptorExtractor.java
rename to opencv-java/src/main/java/org/opencv/features2d/DescriptorExtractor.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/features2d/DescriptorMatcher.java b/opencv-java/src/main/java/org/opencv/features2d/DescriptorMatcher.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/features2d/DescriptorMatcher.java
rename to opencv-java/src/main/java/org/opencv/features2d/DescriptorMatcher.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/features2d/FeatureDetector.java b/opencv-java/src/main/java/org/opencv/features2d/FeatureDetector.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/features2d/FeatureDetector.java
rename to opencv-java/src/main/java/org/opencv/features2d/FeatureDetector.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/features2d/Features2d.java b/opencv-java/src/main/java/org/opencv/features2d/Features2d.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/features2d/Features2d.java
rename to opencv-java/src/main/java/org/opencv/features2d/Features2d.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/imgcodecs/Imgcodecs.java b/opencv-java/src/main/java/org/opencv/imgcodecs/Imgcodecs.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/imgcodecs/Imgcodecs.java
rename to opencv-java/src/main/java/org/opencv/imgcodecs/Imgcodecs.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/imgproc/CLAHE.java b/opencv-java/src/main/java/org/opencv/imgproc/CLAHE.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/imgproc/CLAHE.java
rename to opencv-java/src/main/java/org/opencv/imgproc/CLAHE.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/imgproc/Imgproc.java b/opencv-java/src/main/java/org/opencv/imgproc/Imgproc.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/imgproc/Imgproc.java
rename to opencv-java/src/main/java/org/opencv/imgproc/Imgproc.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/imgproc/LineSegmentDetector.java b/opencv-java/src/main/java/org/opencv/imgproc/LineSegmentDetector.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/imgproc/LineSegmentDetector.java
rename to opencv-java/src/main/java/org/opencv/imgproc/LineSegmentDetector.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/imgproc/Subdiv2D.java b/opencv-java/src/main/java/org/opencv/imgproc/Subdiv2D.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/imgproc/Subdiv2D.java
rename to opencv-java/src/main/java/org/opencv/imgproc/Subdiv2D.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/ANN_MLP.java b/opencv-java/src/main/java/org/opencv/ml/ANN_MLP.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/ANN_MLP.java
rename to opencv-java/src/main/java/org/opencv/ml/ANN_MLP.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/Boost.java b/opencv-java/src/main/java/org/opencv/ml/Boost.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/Boost.java
rename to opencv-java/src/main/java/org/opencv/ml/Boost.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/DTrees.java b/opencv-java/src/main/java/org/opencv/ml/DTrees.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/DTrees.java
rename to opencv-java/src/main/java/org/opencv/ml/DTrees.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/EM.java b/opencv-java/src/main/java/org/opencv/ml/EM.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/EM.java
rename to opencv-java/src/main/java/org/opencv/ml/EM.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/KNearest.java b/opencv-java/src/main/java/org/opencv/ml/KNearest.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/KNearest.java
rename to opencv-java/src/main/java/org/opencv/ml/KNearest.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/LogisticRegression.java b/opencv-java/src/main/java/org/opencv/ml/LogisticRegression.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/LogisticRegression.java
rename to opencv-java/src/main/java/org/opencv/ml/LogisticRegression.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/Ml.java b/opencv-java/src/main/java/org/opencv/ml/Ml.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/Ml.java
rename to opencv-java/src/main/java/org/opencv/ml/Ml.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/NormalBayesClassifier.java b/opencv-java/src/main/java/org/opencv/ml/NormalBayesClassifier.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/NormalBayesClassifier.java
rename to opencv-java/src/main/java/org/opencv/ml/NormalBayesClassifier.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/RTrees.java b/opencv-java/src/main/java/org/opencv/ml/RTrees.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/RTrees.java
rename to opencv-java/src/main/java/org/opencv/ml/RTrees.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/SVM.java b/opencv-java/src/main/java/org/opencv/ml/SVM.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/SVM.java
rename to opencv-java/src/main/java/org/opencv/ml/SVM.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/StatModel.java b/opencv-java/src/main/java/org/opencv/ml/StatModel.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/StatModel.java
rename to opencv-java/src/main/java/org/opencv/ml/StatModel.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/ml/TrainData.java b/opencv-java/src/main/java/org/opencv/ml/TrainData.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/ml/TrainData.java
rename to opencv-java/src/main/java/org/opencv/ml/TrainData.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/objdetect/BaseCascadeClassifier.java b/opencv-java/src/main/java/org/opencv/objdetect/BaseCascadeClassifier.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/objdetect/BaseCascadeClassifier.java
rename to opencv-java/src/main/java/org/opencv/objdetect/BaseCascadeClassifier.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/objdetect/CascadeClassifier.java b/opencv-java/src/main/java/org/opencv/objdetect/CascadeClassifier.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/objdetect/CascadeClassifier.java
rename to opencv-java/src/main/java/org/opencv/objdetect/CascadeClassifier.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/objdetect/HOGDescriptor.java b/opencv-java/src/main/java/org/opencv/objdetect/HOGDescriptor.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/objdetect/HOGDescriptor.java
rename to opencv-java/src/main/java/org/opencv/objdetect/HOGDescriptor.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/objdetect/Objdetect.java b/opencv-java/src/main/java/org/opencv/objdetect/Objdetect.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/objdetect/Objdetect.java
rename to opencv-java/src/main/java/org/opencv/objdetect/Objdetect.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/AlignExposures.java b/opencv-java/src/main/java/org/opencv/photo/AlignExposures.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/AlignExposures.java
rename to opencv-java/src/main/java/org/opencv/photo/AlignExposures.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/AlignMTB.java b/opencv-java/src/main/java/org/opencv/photo/AlignMTB.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/AlignMTB.java
rename to opencv-java/src/main/java/org/opencv/photo/AlignMTB.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateCRF.java b/opencv-java/src/main/java/org/opencv/photo/CalibrateCRF.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateCRF.java
rename to opencv-java/src/main/java/org/opencv/photo/CalibrateCRF.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateDebevec.java b/opencv-java/src/main/java/org/opencv/photo/CalibrateDebevec.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateDebevec.java
rename to opencv-java/src/main/java/org/opencv/photo/CalibrateDebevec.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateRobertson.java b/opencv-java/src/main/java/org/opencv/photo/CalibrateRobertson.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/CalibrateRobertson.java
rename to opencv-java/src/main/java/org/opencv/photo/CalibrateRobertson.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeDebevec.java b/opencv-java/src/main/java/org/opencv/photo/MergeDebevec.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeDebevec.java
rename to opencv-java/src/main/java/org/opencv/photo/MergeDebevec.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeExposures.java b/opencv-java/src/main/java/org/opencv/photo/MergeExposures.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeExposures.java
rename to opencv-java/src/main/java/org/opencv/photo/MergeExposures.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeMertens.java b/opencv-java/src/main/java/org/opencv/photo/MergeMertens.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeMertens.java
rename to opencv-java/src/main/java/org/opencv/photo/MergeMertens.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeRobertson.java b/opencv-java/src/main/java/org/opencv/photo/MergeRobertson.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/MergeRobertson.java
rename to opencv-java/src/main/java/org/opencv/photo/MergeRobertson.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/Photo.java b/opencv-java/src/main/java/org/opencv/photo/Photo.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/Photo.java
rename to opencv-java/src/main/java/org/opencv/photo/Photo.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/Tonemap.java b/opencv-java/src/main/java/org/opencv/photo/Tonemap.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/Tonemap.java
rename to opencv-java/src/main/java/org/opencv/photo/Tonemap.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapDrago.java b/opencv-java/src/main/java/org/opencv/photo/TonemapDrago.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapDrago.java
rename to opencv-java/src/main/java/org/opencv/photo/TonemapDrago.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapDurand.java b/opencv-java/src/main/java/org/opencv/photo/TonemapDurand.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapDurand.java
rename to opencv-java/src/main/java/org/opencv/photo/TonemapDurand.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapMantiuk.java b/opencv-java/src/main/java/org/opencv/photo/TonemapMantiuk.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapMantiuk.java
rename to opencv-java/src/main/java/org/opencv/photo/TonemapMantiuk.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapReinhard.java b/opencv-java/src/main/java/org/opencv/photo/TonemapReinhard.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/photo/TonemapReinhard.java
rename to opencv-java/src/main/java/org/opencv/photo/TonemapReinhard.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/utils/Converters.java b/opencv-java/src/main/java/org/opencv/utils/Converters.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/utils/Converters.java
rename to opencv-java/src/main/java/org/opencv/utils/Converters.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractor.java b/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractor.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractor.java
rename to opencv-java/src/main/java/org/opencv/video/BackgroundSubtractor.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorKNN.java b/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorKNN.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorKNN.java
rename to opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorKNN.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorMOG2.java b/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorMOG2.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorMOG2.java
rename to opencv-java/src/main/java/org/opencv/video/BackgroundSubtractorMOG2.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/DenseOpticalFlow.java b/opencv-java/src/main/java/org/opencv/video/DenseOpticalFlow.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/DenseOpticalFlow.java
rename to opencv-java/src/main/java/org/opencv/video/DenseOpticalFlow.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/DualTVL1OpticalFlow.java b/opencv-java/src/main/java/org/opencv/video/DualTVL1OpticalFlow.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/DualTVL1OpticalFlow.java
rename to opencv-java/src/main/java/org/opencv/video/DualTVL1OpticalFlow.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/KalmanFilter.java b/opencv-java/src/main/java/org/opencv/video/KalmanFilter.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/KalmanFilter.java
rename to opencv-java/src/main/java/org/opencv/video/KalmanFilter.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/video/Video.java b/opencv-java/src/main/java/org/opencv/video/Video.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/video/Video.java
rename to opencv-java/src/main/java/org/opencv/video/Video.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/videoio/VideoCapture.java b/opencv-java/src/main/java/org/opencv/videoio/VideoCapture.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/videoio/VideoCapture.java
rename to opencv-java/src/main/java/org/opencv/videoio/VideoCapture.java
diff --git a/MyApplication/opencv-java/src/main/java/org/opencv/videoio/Videoio.java b/opencv-java/src/main/java/org/opencv/videoio/Videoio.java
similarity index 100%
rename from MyApplication/opencv-java/src/main/java/org/opencv/videoio/Videoio.java
rename to opencv-java/src/main/java/org/opencv/videoio/Videoio.java
