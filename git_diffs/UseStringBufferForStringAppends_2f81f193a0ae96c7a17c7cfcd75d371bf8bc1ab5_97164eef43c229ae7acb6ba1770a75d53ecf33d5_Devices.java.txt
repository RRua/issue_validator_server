diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java b/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
index 611fad0a..faf3ab11 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
@@ -32,12 +32,12 @@ public abstract class AbsDispatcher extends AbsServiceLink
     }
 
     public void addTarget(OnContentUpdatedInterface target) {
-        addTargets(target, InfoID.ALL);
+        addTarget(target, InfoID.ALL);
     }
 
     @Override
-    public void addTargets(OnContentUpdatedInterface target, int... iid) {
-        dispatcher.addTargets(target, iid);
+    public void addTarget(OnContentUpdatedInterface target, int... iid) {
+        dispatcher.addTarget(target, iid);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
index 2e5872f8..0977f9cb 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
@@ -10,16 +10,13 @@ import ch.bailu.aat.R;
 import ch.bailu.aat.dispatcher.CurrentLocationSource;
 import ch.bailu.aat.dispatcher.EditorOrBackupSource;
 import ch.bailu.aat.dispatcher.IteratorSource;
-import ch.bailu.aat.dispatcher.OnContentUpdatedInterface;
 import ch.bailu.aat.dispatcher.OverlaySource;
 import ch.bailu.aat.dispatcher.TrackerSource;
-import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapViewInterface;
 import ch.bailu.aat.menus.FileMenu;
 import ch.bailu.aat.util.ui.AppDialog;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat.views.BusyViewContainer;
 import ch.bailu.aat.views.BusyViewControlIID;
 import ch.bailu.aat.views.ContentView;
@@ -109,16 +106,16 @@ public abstract class AbsFileContentActivity extends ActivityContext implements
 
         addSource(editorSource);
 
-        addTargets(busyControl,
+        addTarget(busyControl,
                 InfoID.FILEVIEW,
                 InfoID.OVERLAY,
                 InfoID.OVERLAY+1,
                 InfoID.OVERLAY+2,
                 InfoID.OVERLAY+3);
-        addTargets(fileOperation, InfoID.FILEVIEW);
+        addTarget(fileOperation, InfoID.FILEVIEW);
 
 
-        addTargets((iid, info) -> {
+        addTarget((iid, info) -> {
             String newFileID = info.getFile().getPath();
 
             if (!Objects.equals(currentFileID, newFileID)) {
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index 59c80308..6885ba14 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -3,7 +3,6 @@ package ch.bailu.aat.activities;
 
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
-import android.graphics.Color;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.AdapterView;
@@ -73,7 +72,7 @@ public abstract class AbsGpxListActivity extends ActivityContext implements OnIt
         addSource(new OverlaySource(getServiceContext()));
         addSource(new CurrentLocationSource(getServiceContext()));
 
-        addTargets(busyControl, InfoID.OVERLAY, InfoID.OVERLAY+1,InfoID.OVERLAY+2,InfoID.OVERLAY+3);
+        addTarget(busyControl, InfoID.OVERLAY, InfoID.OVERLAY+1,InfoID.OVERLAY+2,InfoID.OVERLAY+3);
 
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsKeepScreenOnActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsKeepScreenOnActivity.java
index ad4f9670..c55c61f4 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsKeepScreenOnActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsKeepScreenOnActivity.java
@@ -15,7 +15,7 @@ public abstract class AbsKeepScreenOnActivity extends ActivityContext {
 
         backlight = new Backlight(getWindow(), getServiceContext());
 
-        addTargets(backlight, InfoID.TRACKER);
+        addTarget(backlight, InfoID.TRACKER);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
index 81227481..20b0de7d 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
@@ -95,7 +95,7 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
         setContentView(createContentView());
 
         addSource(new CustomFileSource(getServiceContext(),osmApi.getResultFile().getPath()));
-        addTargets(list, InfoID.FILEVIEW);
+        addTarget(list, InfoID.FILEVIEW);
 
         setQueryTextFromIntent();
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java b/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
index 636a2fe6..af2c29c1 100644
--- a/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
@@ -164,8 +164,8 @@ public class GpxViewActivity extends ActivityContext
         addSource(new OverlaySource(getServiceContext()));
         addSource(new CustomFileSource(getServiceContext(), fileID));
 
-        addTargets(this, InfoID.FILEVIEW);
-        addTargets(busyControl, InfoID.FILEVIEW,
+        addTarget(this, InfoID.FILEVIEW);
+        addTarget(busyControl, InfoID.FILEVIEW,
                 InfoID.OVERLAY,
                 InfoID.OVERLAY+1,
                 InfoID.OVERLAY+2,
diff --git a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
index 6466699f..05538e7e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
@@ -11,8 +11,12 @@ import android.view.View;
 import android.widget.LinearLayout;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.dispatcher.BleSensorSource;
 import ch.bailu.aat.dispatcher.CurrentLocationSource;
+import ch.bailu.aat.dispatcher.OnContentUpdatedInterface;
 import ch.bailu.aat.dispatcher.TrackerSource;
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.preferences.SolidFile;
 import ch.bailu.aat.preferences.presets.SolidPreset;
 import ch.bailu.aat.preferences.system.SolidDataDirectory;
@@ -26,8 +30,10 @@ import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.util.ui.UiTheme;
 import ch.bailu.aat.views.AbsLabelTextView;
 import ch.bailu.aat.views.ContentView;
+import ch.bailu.aat.views.SensorListView;
 import ch.bailu.aat.views.bar.MainControlBar;
 import ch.bailu.aat.views.preferences.SolidIndexListView;
+import ch.bailu.aat.views.preferences.TitleView;
 import ch.bailu.aat.views.preferences.VerticalScrollView;
 
 
@@ -46,7 +52,7 @@ public class MainActivity extends ActivityContext {
     public void onResumeWithService() {
         super.onResumeWithService();
 
-        AppBroadcaster.broadcast(this, AppBroadcaster.BLE_DEVICE_SCANNED);
+        AppBroadcaster.broadcast(this, AppBroadcaster.SENSOR_CHANGED + InfoID.SENSORS);
     }
 
 
@@ -68,10 +74,6 @@ public class MainActivity extends ActivityContext {
         AppTheme.alt.background(layout);
         layout.setOrientation(LinearLayout.VERTICAL);
 
-        if (Build.VERSION.SDK_INT >= 18) {
-            layout.addView(new BleLabel());
-        }
-
         layout.addView(labelFactory(ActivitySwitcher.getAbout(this)));
 
         return layout;
@@ -88,6 +90,8 @@ public class MainActivity extends ActivityContext {
         }
 
 
+
+
         return list;
     }
 
@@ -273,55 +277,4 @@ public class MainActivity extends ActivityContext {
         }
     }
 
-
-    private class BleLabel extends AbsLabelTextView implements View.OnClickListener {
-        public BleLabel() {
-            super(MainActivity.this, ToDo.translate("Sensors"));
-            setText();
-            setOnClickListener(this);
-        }
-
-
-        @Override
-        public void onDetachedFromWindow() {
-            getContext().unregisterReceiver(onBleDeviceScanned);
-            super.onDetachedFromWindow();
-        }
-
-
-        @Override
-        public void onAttachedToWindow() {
-            super.onAttachedToWindow();
-            AppBroadcaster.register(getContext(), onBleDeviceScanned, AppBroadcaster.BLE_DEVICE_SCANNED);
-        }
-
-
-        private final BroadcastReceiver onBleDeviceScanned = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                setText();
-            }
-        };
-
-        private void setText() {
-            new InsideContext(getServiceContext()) {
-                @Override
-                public void run() {
-                    setText(getServiceContext().getSensorService().toString());
-                }
-            };
-        }
-
-
-        @Override
-        public void onClick(View v) {
-            new InsideContext(getServiceContext()) {
-                @Override
-                public void run() {
-                    getServiceContext().getSensorService().scan();
-                }
-            };
-        }
-    }
-
 }
diff --git a/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java b/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
index 02fb50c8..40608dc3 100644
--- a/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
@@ -119,7 +119,7 @@ public class NodeDetailActivity extends ActivityContext
     }
 
     private void createDispatcher() {
-        addTargets(this, InfoID.FILEVIEW);
+        addTarget(this, InfoID.FILEVIEW);
         addSource(new CurrentLocationSource(getServiceContext()));
         addSource(new CustomFileSource(getServiceContext(), fileID));
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/PreferencesActivity.java b/app/src/main/java/ch/bailu/aat/activities/PreferencesActivity.java
index 656cbd94..387e509e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/PreferencesActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/PreferencesActivity.java
@@ -5,6 +5,8 @@ import android.content.SharedPreferences;
 import android.os.Bundle;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.dispatcher.BleSensorSource;
+import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.preferences.SolidFile;
 import ch.bailu.aat.preferences.general.SolidPresetCount;
 import ch.bailu.aat.views.ContentView;
@@ -31,6 +33,9 @@ public class PreferencesActivity extends ActivityContext implements SharedPrefer
         spresetCount = new SolidPresetCount(this);
         spresetCount.register(this);
         createViews();
+
+        addSource(new BleSensorSource(getServiceContext(), InfoID.SENSORS));
+
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/dispatcher/Dispatcher.java b/app/src/main/java/ch/bailu/aat/dispatcher/Dispatcher.java
index bf0ed003..a46ac323 100644
--- a/app/src/main/java/ch/bailu/aat/dispatcher/Dispatcher.java
+++ b/app/src/main/java/ch/bailu/aat/dispatcher/Dispatcher.java
@@ -19,7 +19,7 @@ public class Dispatcher implements DispatcherInterface, OnContentUpdatedInterfac
     private OnContentUpdatedInterface updater = OFF;
 
     @Override
-    public void addTargets(OnContentUpdatedInterface t, int... iid) {
+    public void addTarget(OnContentUpdatedInterface t, int... iid) {
         for (int i: iid) addSingleTarget(t, i);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/dispatcher/DispatcherInterface.java b/app/src/main/java/ch/bailu/aat/dispatcher/DispatcherInterface.java
index d416ed9f..25dbc36e 100644
--- a/app/src/main/java/ch/bailu/aat/dispatcher/DispatcherInterface.java
+++ b/app/src/main/java/ch/bailu/aat/dispatcher/DispatcherInterface.java
@@ -1,7 +1,7 @@
 package ch.bailu.aat.dispatcher;
 
 public interface DispatcherInterface {
-    void addTargets(OnContentUpdatedInterface t, int... iid);
+    void addTarget(OnContentUpdatedInterface t, int... iid);
     void addSource(ContentSource s);
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
index 4dfc4c47..109bfead 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
@@ -40,7 +40,7 @@ public class CurrentLocationLayer implements OnContentUpdatedInterface, MapLayer
 
         //paint.setAntiAlias(true);
 
-        d.addTargets(this, InfoID.LOCATION);
+        d.addTarget(this, InfoID.LOCATION);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
index fcb699cb..d9013c43 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
@@ -34,7 +34,7 @@ public class MapPositionLayer implements MapLayerInterface, OnContentUpdatedInte
         slock = new SolidPositionLock(mcontext.getContext(), mcontext.getSolidKey());
 
         loadState();
-        d.addTargets(this, InfoID.LOCATION);
+        d.addTarget(this, InfoID.LOCATION);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/EditorLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/EditorLayer.java
index d20dc7b8..e7935383 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/EditorLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/EditorLayer.java
@@ -69,8 +69,8 @@ public class EditorLayer extends ControlBarLayer {
         undo = bar.addImageButton(R.drawable.edit_undo);
         ToolTip.set(undo, R.string.tt_edit_undo);
 
-        d.addTargets(selector, iid);
-        d.addTargets(content, iid);
+        d.addTarget(selector, iid);
+        d.addTarget(content, iid);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
index 775d5cbc..7bcc1498 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
@@ -66,7 +66,7 @@ public class FileControlBarLayer extends ControlBarLayer {
         ToolTip.set(reloadPreview, R.string.file_reload);
         ToolTip.set(delete, R.string.file_delete);
 
-        acontext.addTargets(selector, InfoID.LIST_SUMMARY);
+        acontext.addTarget(selector, InfoID.LIST_SUMMARY);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/InformationBarLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/InformationBarLayer.java
index 2e4e680d..952fcd01 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/InformationBarLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/InformationBarLayer.java
@@ -57,7 +57,7 @@ public class InformationBarLayer extends ControlBarLayer {
         ToolTip.set(overpass,R.string.tt_info_overpass);
         ToolTip.set(location, R.string.tt_info_location);
 
-        d.addTargets(selector, InfoID.ALL);
+        d.addTarget(selector, InfoID.ALL);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/NavigationBarLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/NavigationBarLayer.java
index 0714a8e6..7dc2df47 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/NavigationBarLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/NavigationBarLayer.java
@@ -52,7 +52,7 @@ public class NavigationBarLayer extends ControlBarLayer implements OnContentUpda
         ToolTip.set(buttonFrame,  R.string.tt_map_frame);
         ToolTip.set(lock, R.string.tt_map_home);
 
-        d.addTargets(this, InfoID.ALL);
+        d.addTarget(this, InfoID.ALL);
 
         VolumeView volumeView = new VolumeView(mc.getContext());
         volumeView.setVisibility(View.INVISIBLE);
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxDynLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxDynLayer.java
index a9f6c397..e08ac24a 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxDynLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxDynLayer.java
@@ -36,7 +36,7 @@ public class GpxDynLayer implements MapLayerInterface, OnContentUpdatedInterface
     public GpxDynLayer(MapContext mc,
                          DispatcherInterface dispatcher, int iid) {
         this(mc);
-        dispatcher.addTargets(this, iid);
+        dispatcher.addTarget(this, iid);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxTestLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxTestLayer.java
index 57780220..214e84c2 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxTestLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/GpxTestLayer.java
@@ -31,7 +31,7 @@ public class GpxTestLayer extends GpxLayer {
         segmentPaint = createPaint(Color.BLACK);
         markerPaint = createPaint(Color.DKGRAY);
 
-        d.addTargets(this, iid);
+        d.addTarget(this, iid);
     }
 
     private Paint createPaint(int color) {
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
index 6ddc2d0f..68485efb 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
@@ -67,7 +67,7 @@ public class FrameBufferHack extends FrameBuffer {
          * last generated frame is allways put on screen.
          */
 
-        // FIXME: reseting the background color is redundant if the background color of the map view is allready set
+        // FIXME: reseting the background color is redundant if the background color of the map view is allready setItem
         graphicContext.fillColor(this.displayModel.getBackgroundColor());
 
         swapBitmaps();
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeView.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeView.java
index 2d3548ba..21245047 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeView.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeView.java
@@ -22,7 +22,7 @@ public class MapsForgeView extends MapsForgeViewBase {
         stack = new MapsForgeTileLayerStackConfigured.All(this);
         add(stack, stack);
 
-        // Depends on zoom limits (set by TileLayerStack)
+        // Depends on zoom limits (setItem by TileLayerStack)
         pos = new MapPositionLayer(getMContext(), dispatcher);
         add(pos);
 
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/SensorInterface.java b/app/src/main/java/ch/bailu/aat/services/sensor/SensorInterface.java
index 08e19938..af8e95bf 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/SensorInterface.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/SensorInterface.java
@@ -4,7 +4,13 @@ import java.io.Closeable;
 
 import ch.bailu.aat.gpx.GpxInformation;
 
-public interface SensorInterface extends Closeable {
-    boolean isValid();
+public interface SensorInterface {
     GpxInformation getInformation(int iid);
+
+    boolean isConnectionEstablished();
+
+    String getAddress();
+    String getName();
+
+    void close();
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/SensorService.java b/app/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
index afdd364d..90543b90 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
@@ -8,9 +8,12 @@ import android.content.Intent;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
+import ch.bailu.aat.services.sensor.list.SensorList;
 import ch.bailu.aat.util.AppBroadcaster;
 
 public class SensorService extends VirtualService {
+    private final SensorList sensorList;
+
     private final Sensors bluetoothLE;
     private final Sensors internal;
 
@@ -18,25 +21,27 @@ public class SensorService extends VirtualService {
     public SensorService(ServiceContext sc) {
         super(sc);
 
-        bluetoothLE = Sensors.factoryBle(sc);
-        internal = Sensors.factoryInternal(sc.getContext());
+        sensorList = new SensorList(sc.getContext());
+        bluetoothLE = Sensors.factoryBle(sc, sensorList);
+        internal = Sensors.factoryInternal(sc.getContext(), sensorList);
 
 
         AppBroadcaster.register(getContext(),
                 onBluetoothStateChanged, BluetoothAdapter.ACTION_STATE_CHANGED);
 
-        scan();
 
+        updateConnections();
     }
 
 
+
     BroadcastReceiver onBluetoothStateChanged = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
             int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);
 
             if (state == BluetoothAdapter.STATE_ON || state == BluetoothAdapter.STATE_OFF) {
-                bluetoothLE.scann();
+                updateConnections();
             }
         }
     };
@@ -52,24 +57,33 @@ public class SensorService extends VirtualService {
     public synchronized void close() {
         bluetoothLE.close();
         internal.close();
+        sensorList.close();
         getContext().unregisterReceiver(onBluetoothStateChanged);
     }
 
+    public synchronized void updateConnections() {
+        bluetoothLE.updateConnections();
+        internal.updateConnections();
+        sensorList.broadcast();
+    }
 
-    public  synchronized void scan() {
+    public  synchronized void scann() {
         bluetoothLE.scann();
     }
 
 
     @Override
     public synchronized String toString() {
-        return bluetoothLE.toString() + internal.toString();
+        return bluetoothLE.toString();
+
     }
 
     public synchronized GpxInformation getInformation(int iid) {
-        GpxInformation info = internal.getInformation(iid);
-        if (info == null) info = bluetoothLE.getInformation(iid);
+        return sensorList.getInformation(iid);
+    }
+
 
-        return info;
+    public SensorList getSensorList() {
+        return sensorList;
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/Sensors.java b/app/src/main/java/ch/bailu/aat/services/sensor/Sensors.java
index a49c4cfe..03594693 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/Sensors.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/Sensors.java
@@ -4,33 +4,35 @@ import android.content.Context;
 import android.os.Build;
 
 import java.io.Closeable;
-import java.util.List;
 
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.sensor.bluetooth_le.BleSensorsSDK18;
 import ch.bailu.aat.services.sensor.internal.InternalSensorsSDK23;
+import ch.bailu.aat.services.sensor.list.SensorList;
 
 public class Sensors implements Closeable {
 
+    public void updateConnections() {}
     public void scann() {}
+
     public GpxInformation getInformation(int iid) {
         return GpxInformation.NULL;
     }
 
 
-    public static Sensors factoryBle(ServiceContext sc) {
+    public static Sensors factoryBle(ServiceContext sc, SensorList sensorList) {
         if (Build.VERSION.SDK_INT >= 18) {
-            return new BleSensorsSDK18(sc);
+            return new BleSensorsSDK18(sc, sensorList);
         } else {
             return new Sensors();
         }
     }
 
 
-    public static Sensors factoryInternal(Context c) {
+    public static Sensors factoryInternal(Context c, SensorList sensorList) {
         if (Build.VERSION.SDK_INT >= 23) {
-            return new InternalSensorsSDK23(c);
+            return new InternalSensorsSDK23(c, sensorList);
         } else {
             return new Sensors();
         }
@@ -39,4 +41,6 @@ public class Sensors implements Closeable {
     @Override
     public void close() {}
 
+
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScanner.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScanner.java
index 9c4b792d..0425b7bf 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScanner.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScanner.java
@@ -1,43 +1,35 @@
 package ch.bailu.aat.services.sensor.bluetooth_le;
 
-import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
 import android.os.Build;
 import android.support.annotation.RequiresApi;
 
+@RequiresApi(api = 18)
 public abstract class BleScanner {
 
     public abstract void start();
     public abstract void stop();
-    public abstract void foundDevice(BluetoothDevice device);
 
+    private final BleSensorsSDK18 sensors;
 
-    @RequiresApi(api = 18)
-    public static BleScanner factory(BluetoothAdapter adapter, BleSensorsSDK18 devices) {
-        /*
-        return new BleScannerBonded(adapter) {
-            @Override
-            public void foundDevice(BluetoothDevice device) {
-                devices.foundDevice(device);
-            }
-        };
-        */
+    public BleScanner(BleSensorsSDK18 s) {
+        sensors = s;
+    }
+
+    public void foundDevice(BluetoothDevice device) {
+        sensors.foundDevice(device);
+    }
+
+
+    public static BleScanner factory(BleSensorsSDK18 sensors) {
 
         if (Build.VERSION.SDK_INT >= 21) {
-            return new BleScannerSDK21(adapter) {
-                @Override
-                public void foundDevice(BluetoothDevice device) {
-                    devices.foundDevice(device);
-                }
-            };
+            return new BleScannerSDK21(sensors);
+
         } else {
-            return new BleScannerSDK18(adapter) {
-                @Override
-                public void foundDevice(BluetoothDevice device) {
-                    devices.foundDevice(device);
-                }
-            };
+            return new BleScannerSDK18(sensors);
         }
-
     }
+
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerBonded.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerBonded.java
index 9f8e262c..6cc200a5 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerBonded.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerBonded.java
@@ -2,21 +2,26 @@ package ch.bailu.aat.services.sensor.bluetooth_le;
 
 import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
+import android.support.annotation.RequiresApi;
 
 import java.util.Set;
 
-public abstract class BleScannerBonded extends BleScanner {
+@RequiresApi(api = 18)
+public class BleScannerBonded extends BleScanner {
 
     private final BluetoothAdapter adapter;
 
 
-    public BleScannerBonded(BluetoothAdapter a) {
-        adapter = a;
+    public BleScannerBonded(BleSensorsSDK18 sensors) {
+        super(sensors);
+        adapter = sensors.getAdapter();
     }
 
 
     @Override
     public void start() {
+        if (adapter == null) return;
+
         final Set<BluetoothDevice> devices = adapter.getBondedDevices();
 
         if (devices != null) {
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK18.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK18.java
index 8785de43..5f15493f 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK18.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK18.java
@@ -4,8 +4,10 @@ import android.bluetooth.BluetoothAdapter;
 import android.bluetooth.BluetoothDevice;
 import android.support.annotation.RequiresApi;
 
+import ch.bailu.aat.services.sensor.list.SensorList;
+
 @RequiresApi(api = 18)
-public abstract class BleScannerSDK18 extends BleScanner {
+public class BleScannerSDK18 extends BleScanner {
 
     private final BluetoothAdapter adapter;
     private final BluetoothAdapter.LeScanCallback callback = new BluetoothAdapter.LeScanCallback() {
@@ -16,18 +18,22 @@ public abstract class BleScannerSDK18 extends BleScanner {
     };
 
 
-    public BleScannerSDK18(BluetoothAdapter a) {
-        adapter = a;
+    public BleScannerSDK18(BleSensorsSDK18 sensors) {
+        super(sensors);
+        adapter = sensors.getAdapter();
     }
 
     @Override
     public void start() {
-        adapter.startLeScan(callback);
+        if (adapter != null)
+            adapter.startLeScan(callback);
     }
 
     @Override
     public void stop() {
-        adapter.stopLeScan(callback);
+
+        if (adapter != null)
+            adapter.stopLeScan(callback);
     }
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK21.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK21.java
index 59df631e..2ac10e35 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK21.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleScannerSDK21.java
@@ -7,7 +7,7 @@ import android.bluetooth.le.ScanResult;
 import android.support.annotation.RequiresApi;
 
 @RequiresApi(api = 21)
-public abstract class BleScannerSDK21 extends BleScanner {
+public class BleScannerSDK21 extends BleScanner {
     private final BluetoothAdapter adapter;
 
     private final ScanCallback callback = new ScanCallback() {
@@ -19,33 +19,27 @@ public abstract class BleScannerSDK21 extends BleScanner {
     };
 
 
-    protected BleScannerSDK21(BluetoothAdapter a) {
-        adapter = a;
+    protected BleScannerSDK21(BleSensorsSDK18 sensors) {
+        super(sensors);
+        adapter = sensors.getAdapter();
     }
 
     @Override
     public void start() {
-        BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();
-        if (scanner != null) { /*
-            final ArrayList<ScanFilter> filters = new ArrayList(2);
-            filters.add(new ScanFilter.Builder()
-                    .setServiceUuid(new ParcelUuid(HeartRateServiceID.HEART_RATE_SERVICE))
-                    .build());
-
-            filters.add(new ScanFilter.Builder()
-                    .setServiceUuid(new ParcelUuid(CscServiceID.CSC_SERVICE))
-                    .build());
-
-            scanner.startScan(filters, new ScanSettings.Builder().build(), callback);
-            */
-            scanner.startScan(callback);
+        if (adapter != null) {
+            BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();
+            if (scanner != null) {
+                scanner.startScan(callback);
+            }
         }
     }
 
     @Override
     public void stop() {
-        BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();
-        if (scanner != null)
-            scanner.stopScan(callback);
+        if (adapter != null) {
+            BluetoothLeScanner scanner = adapter.getBluetoothLeScanner();
+            if (scanner != null)
+                scanner.stopScan(callback);
+        }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Device.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorSDK18.java
similarity index 51%
rename from app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Device.java
rename to app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorSDK18.java
index 399fde1d..b374cf5b 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Device.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorSDK18.java
@@ -15,82 +15,84 @@ import java.util.List;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.sensor.SensorInterface;
-import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.services.sensor.list.SensorList;
+import ch.bailu.aat.services.sensor.list.SensorListItem;
 
 @RequiresApi(api = 18)
-public class Device extends BluetoothGattCallback implements SensorInterface {
+public class BleSensorSDK18 extends BluetoothGattCallback implements SensorInterface {
 
     private final Executer execute = new Executer();
 
     private final HeartRateService heartRateService;
-    private final BatteryService batteryService = new BatteryService();
     private final CscService cscService;
 
     private final BluetoothDevice device;
 
+    private final SensorList sensorList;
+    private SensorListItem item;
+
     private final Context context;
-    private BluetoothGatt gatt = null;
+    private final BluetoothGatt gatt;
+
+    private boolean connectionEstablished =false;
+
 
-    private int state;
+    private boolean closed = false;
 
-    public Device(ServiceContext c, BluetoothDevice d) {
+
+    public BleSensorSDK18(ServiceContext c, BluetoothDevice d, SensorList l) {
+        sensorList = l;
         device = d;
         context = c.getContext();
-
         cscService = new CscService(c);
         heartRateService = new HeartRateService(context);
-    }
 
+        gatt = connect();
 
-    public synchronized boolean isConnected() {
-        return  state == BluetoothProfile.STATE_CONNECTED || 
-                state ==BluetoothProfile.STATE_CONNECTING;
+        if (gatt == null) {
+            close();
+        }
     }
 
-    public synchronized boolean isValid() {
-        return state == BluetoothProfile.STATE_CONNECTED &&
-                (cscService.isValid() || heartRateService.isValid());
-    }
 
-    @Override
-    public synchronized String toString() {
-        String s = device.getName();
+    private BluetoothGatt connect() {
+        item = sensorList.find(getAddress());
 
-        if (cscService.isValid()) {
-            s = s + ", " + cscService.toString();
-        }
+        if (item == null) {
+            return device.connectGatt(context, false, this);
 
-        if (heartRateService.isValid()) {
-            s = s+ ", " + heartRateService.toString();
+        } else if(item.isEnabled() && item.isConnected() == false) {
+            item.setSensor(this);
+            return device.connectGatt(context, false, this);
         }
-
-        s = s + ", " + batteryService.getBatteryLevelPercentage() + "%";
-        return s;
+        return null;
     }
 
 
     @Override
-    public synchronized void onConnectionStateChange(BluetoothGatt g, int status, int newState) {
-        gatt = g;
-        state = newState;
-        
-        if (status == BluetoothGatt.GATT_SUCCESS && state == BluetoothProfile.STATE_CONNECTED) {
+    public synchronized void onConnectionStateChange(BluetoothGatt g, int status, int state) {
+        if (isConnected(status, state)) {
             gatt.discoverServices();
             
-        } else if (state == BluetoothProfile.STATE_DISCONNECTED) {
-            broadcast();
+        } else if (!isConnecting(status, state)) {
+            close();
         }
     }
 
-    
-    private void broadcast() {
-        AppBroadcaster.broadcast(context, AppBroadcaster.BLE_DEVICE_SCANNED);
+
+    private static boolean isConnected(int status, int state) {
+        return (status == BluetoothGatt.GATT_SUCCESS && state == BluetoothProfile.STATE_CONNECTED);
     }
 
-    
+    private static boolean isConnecting(int status, int state) {
+        return (status == BluetoothGatt.GATT_SUCCESS && state == BluetoothProfile.STATE_CONNECTING);
+    }
+
+
     private void executeOrBroadcast(BluetoothGatt gatt) {
-        if (!execute.next(gatt)) {
-            broadcast();
+        execute.next(gatt);
+        if (!execute.next(gatt) && sensorList.find(getAddress()) != null) {
+            sensorList.broadcast();
         }
     }
 
@@ -99,28 +101,41 @@ public class Device extends BluetoothGattCallback implements SensorInterface {
     public synchronized void onServicesDiscovered(BluetoothGatt gatt, int status) {
         discover(gatt);
 
-        if ((cscService.isValid() || heartRateService.isValid())) {
-            executeOrBroadcast(gatt);
+        if (cscService.isValid() || heartRateService.isValid()) {
+
+            item = sensorList.add(this);
+            item.setSensor(this);
+
+            if (item.isEnabled()) {
+                connectionEstablished = true;
+                execute.next(gatt);
+                //executeOrBroadcast(gatt);
+
+            } else {
+                close();
+
+            }
+
+            sensorList.broadcast();
         } else {
             close();
         }
     }
 
 
-
-
     @Override
     public synchronized void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
-        executeOrBroadcast(gatt);
+        execute.next(gatt);
+        //executeOrBroadcast(gatt);
     }
 
     @Override
     public synchronized void onCharacteristicChanged(BluetoothGatt gatt,
                                         BluetoothGattCharacteristic c) {
 
+
         heartRateService.notify(c);
         cscService.notify(c);
-
     }
 
 
@@ -139,7 +154,6 @@ public class Device extends BluetoothGattCallback implements SensorInterface {
 
         for (BluetoothGattCharacteristic c : list) {
             heartRateService.discovered(c, execute);
-            batteryService.discovered(c, execute);
             cscService.discovered(c, execute);
 
         }
@@ -150,10 +164,10 @@ public class Device extends BluetoothGattCallback implements SensorInterface {
     public synchronized void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic c,
                                      int status) {
         heartRateService.read(c);
-        batteryService.read(c);
         cscService.read(c);
 
-        executeOrBroadcast(gatt);
+        execute.next(gatt);
+        //executeOrBroadcast(gatt);
     }
 
 
@@ -161,6 +175,20 @@ public class Device extends BluetoothGattCallback implements SensorInterface {
         return device.getAddress();
     }
 
+    @Override
+    public String toString() {
+        return getName();
+    }
+
+    @Override
+    public String getName() {
+        String name = device.getName();
+        if (heartRateService.isValid()) name += " " + heartRateService.toString();
+        if (cscService.isValid()) name += " " + cscService.toString();
+
+        return  name;
+    }
+
 
     public synchronized GpxInformation getInformation(int iid) {
         GpxInformation i = heartRateService.getInformation(iid);
@@ -172,17 +200,27 @@ public class Device extends BluetoothGattCallback implements SensorInterface {
         return i;
     }
 
+    @Override
+    public boolean isConnectionEstablished() {
+        return connectionEstablished;
+    }
     
     @Override
     public synchronized void close() {
-        cscService.close();
+        if (!closed) {
+            closed = true;
+            connectionEstablished = false;
+
+            cscService.close();
 
+            if (gatt != null) {
+                gatt.close();
+            }
 
-        if (gatt != null) {
-            gatt.close();
-            state = BluetoothProfile.STATE_DISCONNECTED;
-            gatt = null;
-            broadcast();
+            if (item != null) {
+                item.close();
+                sensorList.broadcast();
+            }
         }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorsSDK18.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorsSDK18.java
index 4e43c826..0c7f2634 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorsSDK18.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/BleSensorsSDK18.java
@@ -6,43 +6,48 @@ import android.bluetooth.BluetoothManager;
 import android.content.Context;
 import android.support.annotation.RequiresApi;
 
-import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.sensor.Sensors;
-import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.services.sensor.list.SensorList;
+import ch.bailu.aat.services.sensor.list.SensorListItem;
 import ch.bailu.aat.util.Timer;
 import ch.bailu.aat.util.ToDo;
 
 @RequiresApi(api = 18)
 public class BleSensorsSDK18 extends Sensors {
 
-    private final static long SCAN_DURATION = 5000;
+    private final static long SCAN_DURATION = 10000;
 
     private final Context context;
     private final ServiceContext scontext;
 
     private final BluetoothAdapter adapter;
 
-    private final Devices devices = new Devices();
-    private final BleScanner scanner;
+    private final SensorList sensorList;
+
+    private final BleScanner scannerBle, scannerBonded;
+
+    private boolean scanning = false;
+
+
     private final Timer timer = new Timer(new Runnable() {
         @Override
         public void run() {
-            scanner.stop();
+            stopScanner();
         }
     }, SCAN_DURATION);
 
 
 
 
-    public BleSensorsSDK18(ServiceContext sc) {
+    public BleSensorsSDK18(ServiceContext sc, SensorList list) {
+        sensorList = list;
         scontext = sc;
         context = sc.getContext();
 
-        adapter = getAdapter();
-        scanner = BleScanner.factory(adapter, this);
-
-        scann();
+        adapter = getAdapter(context);
+        scannerBonded = new BleScannerBonded(this);
+        scannerBle = BleScanner.factory(this);
     }
 
 
@@ -52,23 +57,41 @@ public class BleSensorsSDK18 extends Sensors {
         stopScanner();
 
         if (isEnabled()) {
-            devices.closeDisconnectedDevices();
             startScanner();
-
-        } else {
-            devices.closeAllDevices();
         }
+    }
+
+
+    @Override
+    public synchronized void updateConnections() {
+        connectEnabledSensors();
+    }
+
 
-        AppBroadcaster.broadcast(context, AppBroadcaster.BLE_DEVICE_SCANNED);
+    private void connectEnabledSensors() {
+        for (SensorListItem item : sensorList) {
+            if (item.isEnabled() && item.isBluetoothDevice() && item.isConnected() == false) {
+                    final BluetoothDevice device = adapter.getRemoteDevice(item.getAddress());
+
+                    if (device != null) {
+                        new BleSensorSDK18(scontext, device, sensorList);
+                    }
+                }
+        }
     }
 
 
-    private BluetoothAdapter getAdapter() {
+    private BluetoothAdapter getAdapter(Context context) {
         BluetoothManager bm = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);
 
-        return bm.getAdapter();
+        if (bm instanceof  BluetoothManager)
+            return bm.getAdapter();
+        return null;
     }
 
+    public BluetoothAdapter getAdapter() {
+        return adapter;
+    }
 
     private boolean isEnabled() {
         return adapter instanceof  BluetoothAdapter && adapter.isEnabled();
@@ -79,8 +102,8 @@ public class BleSensorsSDK18 extends Sensors {
 
 
     public synchronized void foundDevice(BluetoothDevice device) {
-        if (!devices.isInList(device)) {
-            devices.addAndConnectDevice(scontext, device);
+        if (sensorList.find(device.getAddress()) == null) {
+            new BleSensorSDK18(scontext, device, sensorList);
         }
     }
 
@@ -89,42 +112,37 @@ public class BleSensorsSDK18 extends Sensors {
     @Override
     public  synchronized String toString() {
         if (isEnabled()) {
-            return devices.toString();
-
-        } else {
-            return ToDo.translate("Bluetooth is disabled") + "\n";
-        }
-    }
+            if (scanning)
+                return ToDo.translate("Scanning for Bluetooth sensors...");
 
+            return ToDo.translate("Bluetooth is enabled");
 
-    @Override
-    public synchronized GpxInformation getInformation(int iid) {
-
-        GpxInformation information = devices.getInformation(iid);
-
-        if (information == null) {
-            information = GpxInformation.NULL;
+        } else {
+            return ToDo.translate("Bluetooth is disabled");
         }
-
-        return information;
     }
 
 
     @Override
     public synchronized void close() {
         stopScanner();
-        devices.close();
     }
 
 
     private void startScanner() {
+        scannerBonded.start();
         timer.kick();
-        scanner.start();
+        scannerBle.start();
+
+        scanning = isEnabled();
+        sensorList.broadcast();
     }
 
 
     private void stopScanner() {
+        scanning = false;
         timer.cancel();
-        scanner.stop();
+        scannerBle.stop();
+        sensorList.broadcast();
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/ConnectedSensorList.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/ConnectedSensorList.java
new file mode 100644
index 00000000..6485d3be
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/ConnectedSensorList.java
@@ -0,0 +1,75 @@
+package ch.bailu.aat.services.sensor.bluetooth_le;
+
+import android.bluetooth.BluetoothDevice;
+import android.support.annotation.RequiresApi;
+
+import java.io.Closeable;
+import java.util.ArrayList;
+
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.services.ServiceContext;
+/*
+@RequiresApi(api = 18)
+public class ConnectedSensorList extends ArrayList<SensorSDK18> implements Closeable {
+
+
+    public ConnectedSensorList() {
+        super(5);
+    }
+
+
+    public synchronized void addAndConnectDevice(ServiceContext scontext, BluetoothDevice device) {
+        SensorSDK18 d = new SensorSDK18(scontext, device, true);
+        add(d);
+        device.connectGatt(scontext.getContext(), true, d);
+    }
+
+
+    public synchronized SensorSDK18 find(BluetoothDevice device) {
+        return find(device.getAddress());
+    }
+
+
+    public synchronized GpxInformation getInformation(int iid) {
+        for (SensorSDK18 device : this) {
+            if (device.isValid()) {
+                GpxInformation information = device.getInformation(iid);
+                if (information != null) return information;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public synchronized void close()  {
+        closeAllDevices();
+    }
+
+    public synchronized void closeAllDevices() {
+        for (SensorSDK18 device : this) {
+            device.close();
+        }
+        clear();
+    }
+
+
+
+    public synchronized void removeDisconnectedDevices() {
+        for (int i = size()-1; i > -1; i--) {
+            final SensorSDK18 device = get(i);
+
+            if (device.isConnected() == false) {
+                device.close();
+                remove(i);
+            }
+        }
+    }
+
+    public SensorSDK18 find(String address) {
+        for (SensorSDK18 device : this) {
+            if (device.getAddress().equalsIgnoreCase(address)) return device;
+        }
+        return null;
+    }
+}
+*/
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
index e864f92a..f265f66b 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
@@ -147,7 +147,7 @@ public class CscService extends CscServiceID implements Closeable {
             name += "Cadence ";
         }
 
-        return name + "Sensor [" + location + "]";
+        return name + "Sensor";
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Devices.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Devices.java
deleted file mode 100644
index 91d58ad0..00000000
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/Devices.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package ch.bailu.aat.services.sensor.bluetooth_le;
-
-import android.bluetooth.BluetoothDevice;
-import android.support.annotation.RequiresApi;
-
-import java.io.Closeable;
-import java.util.ArrayList;
-
-import ch.bailu.aat.gpx.GpxInformation;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.sensor.Sensors;
-import ch.bailu.aat.util.ToDo;
-import ch.bailu.util_java.util.Objects;
-
-@RequiresApi(api = 18)
-public class Devices implements Closeable {
-
-    private final ArrayList<Device> devices = new ArrayList<>(5);
-
-
-
-
-    public synchronized void addAndConnectDevice(ServiceContext scontext, BluetoothDevice device) {
-        Device d = new Device(scontext, device);
-        devices.add(d);
-        device.connectGatt(scontext.getContext(), true, d);
-    }
-
-
-    public synchronized boolean isInList(BluetoothDevice device) {
-        for (Device d : devices) {
-            if (Objects.equals(d.getAddress(), device.getAddress())) return true;
-        }
-        return false;
-    }
-
-
-
-    @Override
-    public synchronized String toString() {
-        String s = "";
-        //String nl = "";
-
-        for (Device d : devices) {
-            if (d.isValid()) {
-                s = s + d.toString() + "\n";
-                //nl = "\n";
-            }
-        }
-        return s;
-    }
-
-
-    public synchronized GpxInformation getInformation(int iid) {
-        for (Device device : devices) {
-            if (device.isValid()) {
-                GpxInformation information = device.getInformation(iid);
-                if (information != null) return information;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public synchronized void close()  {
-        closeAllDevices();
-    }
-
-    public synchronized void closeAllDevices() {
-        for (Device device : devices) {
-            device.close();
-        }
-        devices.clear();
-    }
-
-
-    public synchronized void closeDisconnectedDevices() {
-        for (int i = devices.size()-1; i > -1; i--) {
-            final Device device = devices.get(i);
-
-            if (device.isConnected() == false) {
-                device.close();
-                devices.remove(i);
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/HeartRateService.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/HeartRateService.java
index 9eb6f9ff..f1361f85 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/HeartRateService.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/HeartRateService.java
@@ -12,6 +12,7 @@ import ch.bailu.aat.services.sensor.Averager;
 import ch.bailu.aat.services.sensor.attributes.HeartRateAttributes;
 import ch.bailu.aat.services.sensor.attributes.SensorInformation;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.ToDo;
 
 @RequiresApi(api = 18)
 public class HeartRateService extends HeartRateServiceID {
@@ -83,7 +84,7 @@ public class HeartRateService extends HeartRateServiceID {
 
     @Override
     public String toString() {
-        return "Heart Rate Sensor [" + location + "]";
+        return ToDo.translate("Heart Rate Sensor");
     }
 
     private void readBodySensorLocation(byte[] value) {
@@ -105,6 +106,7 @@ public class HeartRateService extends HeartRateServiceID {
 
 
         public Attributes(BluetoothGattCharacteristic c, byte[] v) {
+            super(HeartRateService.this.location);
             int offset = 0;
             byte flags = v[offset];
 
@@ -148,11 +150,13 @@ public class HeartRateService extends HeartRateServiceID {
             } else {
                 if (!haveSensorContactStatus) haveSensorContact = false;
             }
+
+
+
         }
     }
 
 
-
     public GpxInformation getInformation(int iid) {
         if (iid == InfoID.HEART_RATE_SENSOR)
             return information;
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
index d266185d..23ef1232 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
@@ -36,7 +36,7 @@ public class WheelCircumference implements Closeable {
 
 
 
-    private final BroadcastReceiver onLocationChanged = new BroadcastReceiver() {
+    private BroadcastReceiver onLocationChanged = new BroadcastReceiver() {
 
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -110,6 +110,9 @@ public class WheelCircumference implements Closeable {
 
     @Override
     public void close() {
-        scontext.getContext().unregisterReceiver(onLocationChanged);
+        if (onLocationChanged != null) {
+            scontext.getContext().unregisterReceiver(onLocationChanged);
+            onLocationChanged = null;
+        }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/internal/HeartRateSensor.java b/app/src/main/java/ch/bailu/aat/services/sensor/internal/HeartRateSensor.java
index 97e40936..4d563b51 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/internal/HeartRateSensor.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/internal/HeartRateSensor.java
@@ -14,7 +14,7 @@ import ch.bailu.aat.services.sensor.attributes.SensorInformation;
 import ch.bailu.aat.util.AppBroadcaster;
 
 @RequiresApi(api = 23)
-public class HeartRateSensor extends AbsSensorSDK23 {
+public class HeartRateSensor extends InternalSensorSDK23 {
 
     private final Context context;
     private final Averager averager = new Averager(10);
@@ -69,9 +69,11 @@ public class HeartRateSensor extends AbsSensorSDK23 {
         );
     }
 
+    @Override
     public GpxInformation getInformation(int iid) {
-        if (isValid() && contact && iid == InfoID.HEART_RATE_SENSOR)
+        if (iid == InfoID.HEART_RATE_SENSOR)
             return information;
         return null;
     }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/internal/AbsSensorSDK23.java b/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorSDK23.java
similarity index 54%
rename from app/src/main/java/ch/bailu/aat/services/sensor/internal/AbsSensorSDK23.java
rename to app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorSDK23.java
index 2c594a7e..b7dc9a7e 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/internal/AbsSensorSDK23.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorSDK23.java
@@ -7,41 +7,44 @@ import android.hardware.SensorManager;
 import android.support.annotation.RequiresApi;
 
 import ch.bailu.aat.services.sensor.SensorInterface;
-import ch.bailu.aat.util.ToDo;
 
 @RequiresApi(api = 23)
-public abstract class AbsSensorSDK23 implements SensorEventListener, SensorInterface {
+public abstract class InternalSensorSDK23 implements SensorEventListener, SensorInterface {
 
 
     private final Context context;
 
-    private String name = "";
-    private String vendor = "";
+    private final String name;
+    private final String address;
 
+    private boolean registered = false;
 
-    private boolean haveSensor = false;
 
-
-    public AbsSensorSDK23(Context c, Sensor sensor) {
+    public InternalSensorSDK23(Context c, Sensor sensor) {
         context = c;
+        name = sensor.getVendor() + " " + sensor.getName();
+        address = InternalSensorsSDK23.toAddress(sensor);
         requestUpdates(this, sensor);
     }
 
 
+
     @Override
-    public boolean isValid() {
-        return haveSensor;
+    public String getName() {
+        return toString();
     }
 
+
     @Override
     public String toString() {
-        if (haveSensor)
-            return vendor + " " + name;
-
-        return ToDo.translate("no sensor");
+        return name;
     }
 
 
+    @Override
+    public boolean isConnectionEstablished() {
+        return true;
+    }
 
 
     @Override
@@ -50,28 +53,32 @@ public abstract class AbsSensorSDK23 implements SensorEventListener, SensorInter
     }
 
 
-    public void requestUpdates(SensorEventListener listener, Sensor sensor) {
+    private void requestUpdates(SensorEventListener listener, Sensor sensor) {
         final SensorManager manager = context.getSystemService(SensorManager.class);
 
         if (manager instanceof SensorManager) {
             if (sensor instanceof android.hardware.Sensor) {
-                vendor = sensor.getVendor();
-                name = sensor.getName();
-                haveSensor = true;
 
                 manager.registerListener(listener, sensor, SensorManager.SENSOR_DELAY_NORMAL);
+                registered = true;
             }
         }
     }
 
 
-    public void cancelUpdates(SensorEventListener listener) {
+    private void cancelUpdates(SensorEventListener listener) {
         final SensorManager manager = context.getSystemService(SensorManager.class);
 
-        if (manager instanceof SensorManager) {
+        if (registered && manager instanceof SensorManager) {
             manager.unregisterListener(listener);
+            registered = false;
         }
     }
 
+
+    @Override
+    public String getAddress() {
+        return address;
+    }
 }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorsSDK23.java b/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorsSDK23.java
index e4ac9212..f971eb67 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorsSDK23.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/internal/InternalSensorsSDK23.java
@@ -5,62 +5,82 @@ import android.hardware.Sensor;
 import android.hardware.SensorManager;
 import android.support.annotation.RequiresApi;
 
-import java.util.ArrayList;
 import java.util.List;
 
-import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.sensor.Sensors;
+import ch.bailu.aat.services.sensor.list.SensorList;
+import ch.bailu.aat.services.sensor.list.SensorListItem;
 
 
 @RequiresApi(api = 23)
 public class InternalSensorsSDK23 extends Sensors {
-    private final ArrayList<AbsSensorSDK23> sensors = new ArrayList<>(5);
 
+    private final SensorManager manager;
+    private final Context context;
 
-    public InternalSensorsSDK23(Context context) {
-        final SensorManager manager = context.getSystemService(SensorManager.class);
+    private final SensorList sensorList;
 
+    public InternalSensorsSDK23(Context c, SensorList list) {
+        sensorList = list;
+        context = c;
+        manager = context.getSystemService(SensorManager.class);
 
+        scann();
+    }
+
+
+    @Override
+    public void scann() {
+        scann(Sensor.TYPE_HEART_RATE);
+        scann(Sensor.TYPE_PRESSURE);
+    }
+
+
+    private void scann(int type) {
         if (manager instanceof SensorManager) {
-            List<Sensor> heartRateSensors = manager.getSensorList(Sensor.TYPE_HEART_RATE);
+            List<Sensor> heartRateSensors = manager.getSensorList(type);
 
             if (heartRateSensors != null) {
                 for (Sensor sensor : heartRateSensors) {
-                    sensors.add(new HeartRateSensor(context, sensor));
+                    sensorList.add(toAddress(sensor), sensor.getVendor() + " " + sensor.getName());
                 }
             }
         }
-    }
-
 
+    }
 
     @Override
-    public synchronized String toString() {
-        String s = "";
-        //String nl = "";
-
-        for (AbsSensorSDK23 sensor : sensors) {
-            if (sensor.isValid()) {
-                s = s + sensor.toString() + "\n";
+    public void updateConnections() {
+        for (SensorListItem item : sensorList) {
+            if (item.isEnabled() && item.isConnected() == false) {
+                final InternalSensorSDK23 sensor = createSensorFromAddress(item.getAddress());
+                if (sensor != null) {
+                    item.setSensor(sensor);
+                }
             }
         }
-        return s;
     }
 
 
-    @Override
-    public synchronized GpxInformation getInformation(int iid) {
-        for (AbsSensorSDK23 sensor : sensors) {
-            if (sensor.isValid()) {
-                GpxInformation information = sensor.getInformation(iid);
-                if (information != null) return information;
+    private InternalSensorSDK23 createSensorFromAddress(String address) {
+        if (manager instanceof SensorManager) {
+            List<Sensor> heartRateSensors = manager.getSensorList(Sensor.TYPE_HEART_RATE);
+
+            if (heartRateSensors != null) {
+                for (Sensor sensor : heartRateSensors) {
+
+                    if (address.equals(toAddress(sensor))) {
+                        return new HeartRateSensor(context, sensor);
+                    }
+                }
             }
         }
         return null;
     }
 
-    @Override
-    public void close() {
-        for (AbsSensorSDK23 sensor : sensors) sensor.close();
+
+    public static String toAddress(Sensor sensor) {
+        return sensor.getVendor()+sensor.getName();
     }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorList.java b/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorList.java
new file mode 100644
index 00000000..8806c71c
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorList.java
@@ -0,0 +1,125 @@
+package ch.bailu.aat.services.sensor.list;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import java.io.Closeable;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.InfoID;
+import ch.bailu.aat.services.sensor.SensorInterface;
+import ch.bailu.aat.util.AppBroadcaster;
+
+public class SensorList extends ArrayList<SensorListItem> implements Closeable {
+
+    private final Context context;
+
+    public SensorList(Context c) {
+        super(10);
+        context = c;
+        restore();
+    }
+
+
+    public SensorListItem add(String address, String name) {
+        SensorListItem item = find(address);
+
+        if (item == null) {
+            item = new SensorListItem(address, name);
+            add(item);
+
+        } else {
+            item.setName(name);
+        }
+
+        return item;
+
+    }
+
+
+    public SensorListItem add(SensorInterface sensor) {
+        return add(sensor.getAddress(), sensor.getName());
+    }
+
+
+
+    public SensorListItem find(String address) {
+        for (SensorListItem i : this) {
+            if (i.getAddress().equalsIgnoreCase(address)) return i;
+        }
+        return null;
+    }
+
+
+    public void broadcast() {
+        AppBroadcaster.broadcast(context, AppBroadcaster.SENSOR_CHANGED + InfoID.SENSORS);
+    }
+
+
+
+    private final static String PREFERENCES = "SensorList";
+    private final static String KEY_ADDRESS = "Address";
+    private final static String KEY_NAME = "Name";
+
+
+
+    public GpxInformation getInformation(int iid) {
+        GpxInformation i = null;
+        for (SensorListItem item: this) {
+            i = item.getInformation(iid);
+            if (i != null) return i;
+
+        }
+        return i;
+    }
+
+
+    @Override
+    public void close()  {
+        save();
+        for (SensorListItem i: this) {
+            i.close();
+        }
+    }
+
+
+    private void save() {
+        final SharedPreferences settings = context.getSharedPreferences(PREFERENCES, Context.MODE_PRIVATE);
+        final SharedPreferences.Editor editor = settings.edit();
+
+        final Set<String> addresses = new HashSet<>();
+        final Set<String> names = new HashSet<>();
+        for (SensorListItem i: this) {
+            if (i.isEnabled()) {
+                addresses.add(i.getAddress());
+                names.add(i.getName());
+            }
+        }
+
+        editor.putStringSet(KEY_ADDRESS, addresses);
+        editor.putStringSet(KEY_NAME, names);
+        editor.apply();
+    }
+
+
+    private void restore() {
+        SharedPreferences settings = context.getSharedPreferences(PREFERENCES, Context.MODE_PRIVATE);
+
+        Set<String> addresses = settings.getStringSet(KEY_ADDRESS, new HashSet<>());
+        Set<String> names = settings.getStringSet(KEY_NAME, new HashSet<>());
+
+
+        if (addresses != null && names != null) {
+            Iterator<String> address = addresses.iterator();
+            Iterator<String> name = names.iterator();
+
+            while (address.hasNext() && name.hasNext()) {
+                add(address.next(), name.next()).enable();
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorListItem.java b/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorListItem.java
new file mode 100644
index 00000000..dc987b0e
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/list/SensorListItem.java
@@ -0,0 +1,120 @@
+package ch.bailu.aat.services.sensor.list;
+
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.services.sensor.SensorInterface;
+import ch.bailu.aat.util.ToDo;
+
+public class SensorListItem implements SensorInterface {
+    private String name;
+    private final String address;
+
+    private boolean enabled;
+
+    private SensorInterface sensor;
+
+
+
+    public SensorListItem(String a, String n) {
+        address = a;
+        name = n;
+    }
+
+    public void setSensor(SensorInterface s) {
+        if (s != sensor) disconnect();
+        sensor = s;
+    }
+
+
+    public boolean isConnected() {
+        return sensor != null;
+    }
+
+
+    public void setEnabled(boolean e) {
+        if (e) enable();
+        else disable();
+    }
+
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+
+    public void enable() {
+        enabled = true;
+    }
+
+
+    public void disable() {
+        enabled = false;
+        disconnect();
+    }
+
+
+    public void disconnect() {
+        if (isConnected()) {
+            sensor.close();
+            sensor = null;
+        }
+    }
+
+
+    public void setName(String n) {
+        name = n;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+
+    @Override
+    public GpxInformation getInformation(int iid) {
+        if (sensor != null) return sensor.getInformation(iid);
+        return null;
+    }
+
+    @Override
+    public boolean isConnectionEstablished() {
+        return isConnected() && sensor.isConnectionEstablished();
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    @Override
+    public String toString() {
+        String sensorState = ToDo.translate("Not connected");
+        String sensorType = ToDo.translate("Internal");
+        String sensorName = getName();
+
+        if (isConnected()) {
+            if (isConnectionEstablished()) {
+                sensorState = ToDo.translate("Connection established");
+            } else if (isConnected()) {
+                sensorState = ToDo.translate("Is connecting...");
+            }
+        }
+
+        if (isBluetoothDevice()) {
+            sensorType = "Bluetooth";
+        }
+
+        return sensorType + " " + sensorName + "\n" + sensorState;
+    }
+
+
+    private final static String BLUETOOTH_ADDRESS = "^([0-9A-F]{2}[:]){5}([0-9A-F]{2})$";
+
+    public boolean isBluetoothDevice() {
+        return address.matches(BLUETOOTH_ADDRESS);
+    }
+
+
+    @Override
+    public void close() {
+        disconnect();
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/State.java b/app/src/main/java/ch/bailu/aat/services/tileremover/State.java
index 29b1c1cd..ebf5904a 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/State.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/State.java
@@ -8,7 +8,7 @@ public interface State {
     /** chancel **/
     void stop();
 
-    /** set to initial state **/
+    /** setItem to initial state **/
     void reset();
 
     /** firstPixelIndex removing **/
diff --git a/app/src/main/java/ch/bailu/aat/util/AppBroadcaster.java b/app/src/main/java/ch/bailu/aat/util/AppBroadcaster.java
index cb9e2acc..fae9a8a0 100644
--- a/app/src/main/java/ch/bailu/aat/util/AppBroadcaster.java
+++ b/app/src/main/java/ch/bailu/aat/util/AppBroadcaster.java
@@ -21,7 +21,6 @@ public class AppBroadcaster {
     public static final String DBSYNC_DONE=NAME_SPACE+"SYNC_DONE";
     public static final String DB_SYNC_CHANGED=NAME_SPACE+"SYNC_CHANGED";
 
-    public static final String BLE_DEVICE_SCANNED = NAME_SPACE+"BLE_DEVICE_SCANNED";
     public static final String SENSOR_CHANGED = NAME_SPACE + "SENSOR_CHANGED";
 
     /** 
diff --git a/app/src/main/java/ch/bailu/aat/views/SensorListItemView.java b/app/src/main/java/ch/bailu/aat/views/SensorListItemView.java
new file mode 100644
index 00000000..d3f68f58
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/SensorListItemView.java
@@ -0,0 +1,48 @@
+package ch.bailu.aat.views;
+
+import android.widget.CheckBox;
+import android.widget.LinearLayout;
+
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.sensor.list.SensorListItem;
+
+public class SensorListItemView extends LinearLayout {
+
+    private final CheckBox checkBox;
+
+    private SensorListItem item;
+
+    private final ServiceContext scontext;
+
+    public SensorListItemView(ServiceContext sc, SensorListItem i) {
+        super(sc.getContext());
+        scontext = sc;
+
+        setOrientation(VERTICAL);
+
+        checkBox = new CheckBox(getContext());
+        addView(checkBox);
+
+        setItem(i);
+
+
+        checkBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            item.setEnabled(isChecked);
+
+            new InsideContext(scontext) {
+                @Override
+                public void run() {
+                    scontext.getSensorService().updateConnections();
+                }
+            } ;
+        });
+    }
+
+
+    public void setItem(SensorListItem i) {
+        item = i;
+        checkBox.setChecked(item.isEnabled());
+        checkBox.setText(item.toString());
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/views/SensorListView.java b/app/src/main/java/ch/bailu/aat/views/SensorListView.java
new file mode 100644
index 00000000..7103a3ea
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/SensorListView.java
@@ -0,0 +1,64 @@
+package ch.bailu.aat.views;
+
+import android.widget.LinearLayout;
+
+import java.util.ArrayList;
+
+import ch.bailu.aat.dispatcher.OnContentUpdatedInterface;
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.InfoID;
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.sensor.list.SensorList;
+
+public class SensorListView  extends LinearLayout implements OnContentUpdatedInterface {
+
+
+    private final ServiceContext scontext;
+
+
+    private final ArrayList<SensorListItemView> children = new ArrayList<>(10);
+
+    public SensorListView(ServiceContext sc) {
+        super(sc.getContext());
+        setOrientation(VERTICAL);
+        scontext = sc;
+
+        updateViews();
+
+    }
+
+    @Override
+    public void onContentUpdated(int iid, GpxInformation info) {
+        if (iid == InfoID.SENSORS) {
+            updateViews();
+        }
+    }
+
+    private void updateViews() {
+        new InsideContext(scontext) {
+
+            @Override
+            public void run() {
+                SensorList sensorList = scontext.getSensorService().getSensorList();
+
+                for (int i=0; i<sensorList.size(); i++) {
+                    if (children.size() <= i) {
+                        children.add(new SensorListItemView(scontext, sensorList.get(i)));
+                        addView(children.get(i));
+                    } else {
+                        children.get(i).setItem(sensorList.get(i));
+                    }
+
+
+                }
+
+                for (int i = children.size() -1; i >= sensorList.size(); i--) {
+                    removeView(children.get(i));
+                    children.remove(i);
+                }
+            }
+        };
+    }
+}
+
diff --git a/app/src/main/java/ch/bailu/aat/views/bar/MainControlBar.java b/app/src/main/java/ch/bailu/aat/views/bar/MainControlBar.java
index 0cdd6548..59b16254 100644
--- a/app/src/main/java/ch/bailu/aat/views/bar/MainControlBar.java
+++ b/app/src/main/java/ch/bailu/aat/views/bar/MainControlBar.java
@@ -1,7 +1,6 @@
 package ch.bailu.aat.views.bar;
 
 import android.app.Activity;
-import android.view.View;
 import android.widget.LinearLayout;
 
 import ch.bailu.aat.R;
@@ -80,7 +79,7 @@ public class MainControlBar extends ControlBar {
     public MainControlBar addGpsState(AbsDispatcher acontext) {
         GPSStateButton gps = new GPSStateButton(acontext);
         add(gps);
-        acontext.addTargets(gps, InfoID.LOCATION);
+        acontext.addTarget(gps, InfoID.LOCATION);
 
         return this;
     }
@@ -88,7 +87,7 @@ public class MainControlBar extends ControlBar {
     public MainControlBar addTrackerState(AbsDispatcher acontext) {
         TrackerStateButton ts = new TrackerStateButton(acontext.getServiceContext());
         add(ts);
-        acontext.addTargets(ts, InfoID.TRACKER);
+        acontext.addTarget(ts, InfoID.TRACKER);
 
         return this;
     }
diff --git a/app/src/main/java/ch/bailu/aat/views/description/CockpitView.java b/app/src/main/java/ch/bailu/aat/views/description/CockpitView.java
index 88a6cd10..be7e9f1c 100644
--- a/app/src/main/java/ch/bailu/aat/views/description/CockpitView.java
+++ b/app/src/main/java/ch/bailu/aat/views/description/CockpitView.java
@@ -9,13 +9,8 @@ import ch.bailu.aat.description.AltitudeConfigurationDescription;
 import ch.bailu.aat.description.ContentDescription;
 import ch.bailu.aat.dispatcher.DispatcherInterface;
 import ch.bailu.aat.gpx.InfoID;
-import ch.bailu.aat.preferences.AbsSolidType;
-import ch.bailu.aat.preferences.general.SolidUnit;
-import ch.bailu.aat.preferences.location.SolidAdjustGpsAltitude;
-import ch.bailu.aat.preferences.location.SolidAltitudeFromBarometer;
 import ch.bailu.aat.preferences.location.SolidProvideAltitude;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.aat.views.preferences.SolidTextInputDialog;
 
 
 public class CockpitView extends ViewGroup {
@@ -43,7 +38,7 @@ public class CockpitView extends ViewGroup {
         final NumberView v = new ColorNumberView(de, AppTheme.main);
 
         addView(v);
-        di.addTargets(v, iid);
+        di.addTarget(v, iid);
     }
 
 
@@ -51,7 +46,7 @@ public class CockpitView extends ViewGroup {
         final NumberView v = new NumberView(de, AppTheme.main);
 
         addView(v);
-        di.addTargets(v, iid);
+        di.addTarget(v, iid);
         return v;
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/graph/AbsGraphView.java b/app/src/main/java/ch/bailu/aat/views/graph/AbsGraphView.java
index 6ad7cb59..bbb8cda6 100644
--- a/app/src/main/java/ch/bailu/aat/views/graph/AbsGraphView.java
+++ b/app/src/main/java/ch/bailu/aat/views/graph/AbsGraphView.java
@@ -31,7 +31,7 @@ public abstract class AbsGraphView extends ViewGroup implements OnContentUpdated
 
     public AbsGraphView(Context context, DispatcherInterface di, int... iid) {
         this(context);
-        di.addTargets(this, iid);
+        di.addTarget(this, iid);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/GeneralPreferencesView.java b/app/src/main/java/ch/bailu/aat/views/preferences/GeneralPreferencesView.java
index fda5b93b..8da58703 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/GeneralPreferencesView.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/GeneralPreferencesView.java
@@ -1,60 +1,124 @@
 package ch.bailu.aat.views.preferences;
 
-import android.app.Activity;
+import android.os.Build;
+import android.view.View;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.activities.ActivityContext;
+import ch.bailu.aat.dispatcher.OnContentUpdatedInterface;
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.preferences.general.SolidPostprocessedAutopause;
 import ch.bailu.aat.preferences.general.SolidPresetCount;
 import ch.bailu.aat.preferences.general.SolidUnit;
 import ch.bailu.aat.preferences.general.SolidWeight;
+import ch.bailu.aat.preferences.location.SolidAdjustGpsAltitude;
 import ch.bailu.aat.preferences.location.SolidAdjustGpsAltitudeValue;
+import ch.bailu.aat.preferences.location.SolidAltitudeFromBarometer;
 import ch.bailu.aat.preferences.location.SolidGpsTimeFix;
 import ch.bailu.aat.preferences.location.SolidLocationProvider;
 import ch.bailu.aat.preferences.location.SolidPressureAtSeaLevel;
 import ch.bailu.aat.preferences.location.SolidProvideAltitude;
-import ch.bailu.aat.preferences.location.SolidAltitudeFromBarometer;
-import ch.bailu.aat.preferences.location.SolidAdjustGpsAltitude;
 import ch.bailu.aat.preferences.system.SolidCacheSize;
 import ch.bailu.aat.preferences.system.SolidDataDirectory;
 import ch.bailu.aat.preferences.system.SolidExternalDirectory;
 import ch.bailu.aat.preferences.system.SolidStatusMessages;
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.ToDo;
+import ch.bailu.aat.views.AbsLabelTextView;
+import ch.bailu.aat.views.SensorListView;
 
 
 public class GeneralPreferencesView extends VerticalScrollView {
 
-    public GeneralPreferencesView(Activity context) {
-        super(context);
+    public GeneralPreferencesView(ActivityContext acontext) {
+        super(acontext);
 
-        add(new TitleView(context, R.string.p_general));
-        add(new SolidIndexListView(new SolidUnit(context)));
-        add(new SolidTextInputView(new SolidWeight(context),
+        add(new TitleView(acontext, R.string.p_general));
+        add(new SolidIndexListView(new SolidUnit(acontext)));
+        add(new SolidTextInputView(new SolidWeight(acontext),
                 SolidTextInputDialog.INTEGER));
 
-        add(new SolidIndexListView(new SolidPostprocessedAutopause(context)));
-        add(new SolidIndexListView(new SolidPresetCount(context)));
-        add(new SolidIndexListView( new SolidStatusMessages(context)));
+        add(new SolidIndexListView(new SolidPostprocessedAutopause(acontext)));
+        add(new SolidIndexListView(new SolidPresetCount(acontext)));
+        add(new SolidIndexListView( new SolidStatusMessages(acontext)));
 
-        add(new TitleView(context, "GPS"));
-        add(new SolidIndexListView(new SolidLocationProvider(context)));
-        add(new SolidCheckBox(new SolidGpsTimeFix(context)));
-        add(new SolidCheckBox(new SolidAdjustGpsAltitude(context)));
-        add(new SolidTextInputView(new SolidAdjustGpsAltitudeValue(context, new SolidUnit(context).getIndex()),
+        add(new TitleView(acontext, "GPS"));
+        add(new SolidIndexListView(new SolidLocationProvider(acontext)));
+        add(new SolidCheckBox(new SolidGpsTimeFix(acontext)));
+        add(new SolidCheckBox(new SolidAdjustGpsAltitude(acontext)));
+        add(new SolidTextInputView(new SolidAdjustGpsAltitudeValue(acontext, new SolidUnit(acontext).getIndex()),
                 SolidTextInputDialog.INTEGER_SIGNED));
 
-        add(new SolidCheckBox(new SolidAltitudeFromBarometer(context)));
-        add(new SolidTextInputView(new SolidPressureAtSeaLevel(context),
+        add(new SolidCheckBox(new SolidAltitudeFromBarometer(acontext)));
+        add(new SolidTextInputView(new SolidPressureAtSeaLevel(acontext),
                 SolidTextInputDialog.FLOAT));
 
-        add(new SolidTextInputView(new SolidProvideAltitude(context, SolidUnit.SI),
+        add(new SolidTextInputView(new SolidProvideAltitude(acontext, SolidUnit.SI),
                 SolidTextInputDialog.INTEGER_SIGNED));
-        add(new SolidTextInputView(new SolidProvideAltitude(context, SolidUnit.IMPERIAL),
+        add(new SolidTextInputView(new SolidProvideAltitude(acontext, SolidUnit.IMPERIAL),
                 SolidTextInputDialog.INTEGER_SIGNED));
 
-        add(new TitleView(context, ToDo.translate("Files")));
-        add(new SolidDirectoryViewSAF(context, new SolidDataDirectory(context)));
-        add(new SolidDirectoryViewSAF(context, new SolidExternalDirectory(context)));
+        if (Build.VERSION.SDK_INT >= 18) {
+            add(new TitleView(acontext, ToDo.translate("Sensors")));
+            BleLabel label = new BleLabel(acontext.getServiceContext());
+            SensorListView sensors = new SensorListView(acontext.getServiceContext());
+
+            add(label);
+            add(sensors);
+            acontext.addTarget(label, InfoID.SENSORS);
+            acontext.addTarget(sensors, InfoID.SENSORS);
+        }
+
+
+        add(new TitleView(acontext, ToDo.translate("Files")));
+        add(new SolidDirectoryViewSAF(acontext, new SolidDataDirectory(acontext)));
+        add(new SolidDirectoryViewSAF(acontext, new SolidExternalDirectory(acontext)));
+
+        add(new SolidIndexListView( new SolidCacheSize(acontext)));
+
+
+
+
+    }
+
+    private class BleLabel extends AbsLabelTextView implements View.OnClickListener, OnContentUpdatedInterface {
+        private final ServiceContext scontext;
+        public BleLabel(ServiceContext s) {
+            super(s.getContext(), ToDo.translate("Scann for BluetoothLE sensors"));
+            scontext = s;
+            setText();
+            setOnClickListener(this);
+        }
+
+
+        private void setText() {
+            new InsideContext(scontext) {
+                @Override
+                public void run() {
+                    setText(scontext.getSensorService().toString());
+                }
+            };
+        }
+
+
+        @Override
+        public void onClick(View v) {
+            new InsideContext(scontext) {
+                @Override
+                public void run() {
+                    scontext.getSensorService().scann();
+                }
+            };
+        }
+
+        @Override
+        public void onContentUpdated(int iid, GpxInformation info) {
+            if (iid == InfoID.SENSORS) {
+                setText();
+            }
 
-        add(new SolidIndexListView( new SolidCacheSize(context)));
+        }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java b/app/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
index b4346f1e..c87af722 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
@@ -25,6 +25,7 @@ public class VerticalScrollView extends ScrollView {
     }
 
 
+
     public void add(View view) {
         layout.addView(view);
     }
@@ -34,7 +35,7 @@ public class VerticalScrollView extends ScrollView {
 
         add(v);
 
-        for (int i : iid) di.addTargets(v, i);
+        for (int i : iid) di.addTarget(v, i);
 
     }
 
