diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
index 7294a840..00d9b933 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
@@ -22,9 +22,9 @@ import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapDensity;
 import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
 import ch.bailu.aat.map.tile.TileProviderStatic;
+import ch.bailu.aat.map.tile.source.DownloadSource;
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.BitmapTileObject;
-import ch.bailu.aat.services.cache.TileObject;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat.util.ui.AppLog;
@@ -32,7 +32,7 @@ import ch.bailu.aat.util.ui.AppLog;
 public class MapsForgePreview extends MapsForgeViewBase {
     public static final int BITMAP_SIZE=128;
 
-    private final TileObject.Source SOURCE = BitmapTileObject.MAPNIK;
+    private final Source SOURCE = DownloadSource.MAPNIK;
 
     private final File imageFile;
     private final TileProviderStatic provider;
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayerStack.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayerStack.java
index c04fa383..23255510 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayerStack.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeTileLayerStack.java
@@ -11,10 +11,10 @@ import java.util.ArrayList;
 import ch.bailu.aat.map.MapContext;
 import ch.bailu.aat.map.layer.MapLayerInterface;
 import ch.bailu.aat.map.tile.TileProvider;
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.preferences.SolidMapTileStack;
 import ch.bailu.aat.preferences.SolidPreset;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.TileObject;
 
 public class MapsForgeTileLayerStack implements MapLayerInterface {
 
@@ -35,7 +35,7 @@ public class MapsForgeTileLayerStack implements MapLayerInterface {
         int preset = new SolidPreset(context).getIndex();
         stiles = new SolidMapTileStack(context, preset);
 
-        for (TileObject.Source s: SolidMapTileStack.SOURCES) {
+        for (Source s: SolidMapTileStack.SOURCES) {
             MapsForgeTileLayer layer =
                     new MapsForgeTileLayer(new TileProvider(scontext,s), s.getAlpha());
 
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewStatic.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewStatic.java
index 9314afd0..bb085771 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewStatic.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewStatic.java
@@ -2,12 +2,13 @@ package ch.bailu.aat.map.mapsforge;
 
 import ch.bailu.aat.map.MapDensity;
 import ch.bailu.aat.map.tile.TileProvider;
+import ch.bailu.aat.map.tile.source.DownloadSource;
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.BitmapTileObject;
 
 public class MapsForgeViewStatic extends MapsForgeViewBase {
 
-    private final static BitmapTileObject.Source SOURCE = BitmapTileObject.MAPNIK;
+    private final static Source SOURCE = DownloadSource.MAPNIK;
 
     public MapsForgeViewStatic(ServiceContext sc) {
         super(sc, MapsForgeViewStatic.class.getSimpleName(),
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
index 1b1d5edc..4c2ec387 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
@@ -13,23 +13,23 @@ import org.mapsforge.map.model.common.Observer;
 
 import java.util.ArrayList;
 
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.services.cache.TileObject;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class TileProvider implements TileProviderInterface {
 
     private final ServiceContext scontext;
     private final ArrayList<Observer> observers = new ArrayList(2);
-    private final TileObject.Source source;
+    private final Source source;
 
     private TileCache<TileObject> cache = TileObjectCache.NULL;
 
 
-    public TileProvider(ServiceContext sc, TileObject.Source s) {
+    public TileProvider(ServiceContext sc, Source s) {
         scontext =sc;
         source = s;
     }
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderStatic.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderStatic.java
index 01edd795..01c8e561 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderStatic.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderStatic.java
@@ -9,6 +9,7 @@ import org.mapsforge.map.model.common.Observer;
 import java.io.Closeable;
 import java.util.ArrayList;
 
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.services.cache.TileObject;
@@ -18,10 +19,10 @@ public class TileProviderStatic implements TileProviderInterface, Closeable {
 
     private final ArrayList<TileObject> tiles = new ArrayList<>(10);
 
-    private final TileObject.Source source;
+    private final Source source;
     private final ServiceContext scontext;
 
-    public TileProviderStatic(ServiceContext sc, TileObject.Source s) {
+    public TileProviderStatic(ServiceContext sc, Source s) {
         scontext = sc;
         source = s;
 
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
new file mode 100644
index 00000000..b5e0c8a9
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
@@ -0,0 +1,58 @@
+package ch.bailu.aat.map.tile.source;
+
+import android.content.Context;
+
+import org.mapsforge.core.model.Tile;
+
+import ch.bailu.aat.services.cache.CachedTileObject;
+import ch.bailu.aat.services.cache.ObjectHandle;
+
+public class CachedSource extends Source {
+    private final Source source;
+
+    public CachedSource(Source s) {
+        source = s;
+    }
+
+    @Override
+    public String getName() {
+        return "Cached" + source.getName();
+    }
+
+    @Override
+    public String getID(Tile aTile, Context context) {
+        return genID(aTile, getName());
+    }
+
+    @Override
+    public int getMinimumZoomLevel() {
+        return source.getMinimumZoomLevel();
+    }
+
+    @Override
+    public int getMaximumZoomLevel() {
+        return source.getMaximumZoomLevel();
+    }
+
+    @Override
+    public int getAlpha() {
+        return source.getAlpha();
+    }
+
+    @Override
+    public ObjectHandle.Factory getFactory(Tile tile) {
+        return new CachedTileObject.Factory(tile, source);
+    }
+
+    @Override
+    public boolean isTransparent() {
+        return source.isTransparent();
+    }
+
+
+    public final static Source CACHED_ELEVATION_COLOR = new CachedSource(Source.ELEVATION_COLOR);
+    public final static Source CACHED_ELEVATION_HILLSHADE = new CachedSource(Source.ELEVATION_HILLSHADE);
+    public final static Source CACHED_MAPSFORGE = new CachedSource(Source.MAPSFORGE);
+
+}
+
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
new file mode 100644
index 00000000..b7b7ce24
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
@@ -0,0 +1,153 @@
+package ch.bailu.aat.map.tile.source;
+
+import android.content.Context;
+
+import org.mapsforge.core.model.Tile;
+
+import java.util.Random;
+
+import ch.bailu.aat.services.cache.BitmapTileObject;
+import ch.bailu.aat.util.fs.AppDirectory;
+
+public class DownloadSource extends Source {
+    public static final int MIN_ZOOM = 1;
+    public static final int MAX_ZOOM =17; // 18 takes way too much space for the gain.
+
+    public final static String EXT = ".png";
+
+    private final Random random = new Random();
+    private final int minZoom, maxZoom;
+
+    private final String name;
+
+    private final String[] urls;
+
+    private final int alpha;
+    private boolean transparent;
+
+
+    public DownloadSource(String n, int a, final String... url) {
+        this(n, MIN_ZOOM, MAX_ZOOM, a, (a != OPAQUE), url);
+    }
+
+    public DownloadSource(String n, int minZ, int maxZ, int a, final String... url) {
+        this(n, minZ, maxZ, a, (a != OPAQUE), url);
+    }
+
+    public DownloadSource(String n, int minZ, int maxZ, int a, boolean t, String... u) {
+        name = n;
+        minZoom = minZ;
+        maxZoom = maxZ;
+        urls = u;
+        alpha = a;
+        transparent = (a != OPAQUE);
+    }
+
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+
+    @Override
+    public String getID(Tile tile, Context context) {
+        return AppDirectory.getTileFile(tile,
+                getTileRelativeFilename(tile), context).getAbsolutePath();
+    }
+
+    @Override
+    public int getMinimumZoomLevel() {
+        return minZoom;
+    }
+
+    @Override
+    public int getMaximumZoomLevel() {
+        return maxZoom;
+    }
+
+    public boolean isTransparent() {
+        return transparent;
+    }
+
+    @Override
+    public int getAlpha() {
+        return alpha;
+    }
+
+    @Override
+    public BitmapTileObject.Factory getFactory(Tile mt) {
+        return new BitmapTileObject.Factory(mt, this);
+    }
+
+    public String getTileURLString(Tile tile) {
+        return getBaseUrl() + tile.zoomLevel + "/" + tile.tileX + "/" + tile.tileY + EXT;
+    }
+
+    private String getBaseUrl() {
+        return urls[random.nextInt(urls.length)];
+    }
+
+
+
+    private String getTileRelativeFilename(final Tile tile) {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(name);
+        sb.append('/');
+        sb.append(tile.zoomLevel);
+        sb.append('/');
+        sb.append(tile.tileX);
+        sb.append('/');
+        sb.append(tile.tileY);
+        sb.append(EXT);
+        return sb.toString();
+    }
+
+
+    public final static DownloadSource MAPNIK =
+            new DownloadSource("Mapnik",
+                    OPAQUE,
+                    "http://a.tile.openstreetmap.org/",
+                    "http://b.tile.openstreetmap.org/",
+                    "http://c.tile.openstreetmap.org/");
+
+
+    public final static DownloadSource TRAIL_MTB =
+            new DownloadSource("TrailMTB",
+                    TRANSPARENT,
+                    "http://tile.waymarkedtrails.org/mtb/");
+
+    public final static DownloadSource TRAIL_SKATING =
+            new DownloadSource("TrailSkating",
+                    TRANSPARENT,
+                    "http://tile.waymarkedtrails.org/skating/");
+
+
+    public final static DownloadSource TRAIL_HIKING =
+            new DownloadSource("TrailHiking",
+                    TRANSPARENT,
+                    "http://tile.waymarkedtrails.org/hiking/");
+
+
+    public final static DownloadSource TRAIL_CYCLING =
+            new DownloadSource("TrailCycling",
+                    TRANSPARENT,
+                    "http://tile.waymarkedtrails.org/cycling/");
+
+
+
+    public final static DownloadSource TRANSPORT_OVERLAY =
+            new DownloadSource("OpenPtMap",
+                    5, 16,
+                    TRANSPARENT,
+                    "http://openptmap.org/tiles/");
+
+
+//    public final static BitmapTileObject.Source HILLSHADE_CACHE =
+//            new BitmapTileObject.Source("HillShade",
+//                    NewHillshade.ELEVATION_HILLSHADE.getMinimumZoomLevel(),
+//                    NewHillshade.ELEVATION_HILLSHADE.getMaximumZoomLevel(),
+//                    NewHillshade.ELEVATION_HILLSHADE.getAlpha(),
+//                    true,
+//                    "http://bailu.ch/");
+}
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/Source.java b/app/src/main/java/ch/bailu/aat/map/tile/source/Source.java
new file mode 100644
index 00000000..e80dde0b
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/Source.java
@@ -0,0 +1,156 @@
+package ch.bailu.aat.map.tile.source;
+
+import android.content.Context;
+
+import org.mapsforge.core.model.Tile;
+
+import ch.bailu.aat.services.cache.ElevationColorTile;
+import ch.bailu.aat.services.cache.MapsForgeTileObject;
+import ch.bailu.aat.services.cache.NewHillshade;
+import ch.bailu.aat.services.cache.ObjectHandle;
+
+public abstract class Source {
+    public final static int TRANSPARENT = 150;
+    public final static int OPAQUE = 255;
+
+    public abstract String getName();
+    public abstract String getID(Tile aTile, Context context);
+
+    public abstract int getMinimumZoomLevel();
+    public abstract int getMaximumZoomLevel();
+
+    public abstract boolean isTransparent();
+    public abstract int getAlpha();
+    public abstract ObjectHandle.Factory getFactory(Tile tile);
+
+
+    public static String genID(Tile t, String name) {
+        return name + "/" + t.zoomLevel + "/" + t.tileX + "/" + t.tileY;
+
+    }
+
+    public final static Source MAPSFORGE =
+
+            new Source() {
+
+                @Override
+                public String getName() {
+                    return "MapsForge";
+                }
+
+                @Override
+                public String getID(Tile t, Context x) {
+                    return genID(t, MapsForgeTileObject.class.getSimpleName());
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return 3;
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return 18;
+                }
+
+                @Override
+                public boolean isTransparent() {
+                    return false;
+                }
+
+                @Override
+                public int getAlpha() {
+                    return OPAQUE;
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(Tile t) {
+                    return  new MapsForgeTileObject.Factory(t);
+                }
+
+            };
+
+
+    public final static Source ELEVATION_HILLSHADE =
+            new Source() {
+
+                @Override
+                public String getName() {
+                    return "Hillshade";
+                }
+
+                @Override
+                public String getID(Tile t, Context x) {
+                    return genID(t, NewHillshade.class.getSimpleName());
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return 8;
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return 14;
+                }
+
+                @Override
+                public boolean isTransparent() {
+                    return true;
+                }
+
+
+                @Override
+                public int getAlpha() {
+                    return OPAQUE;
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(Tile mt) {
+                    return  new NewHillshade.Factory(mt);
+                }
+
+            };
+
+    public final static Source ELEVATION_COLOR =
+            new Source() {
+
+                @Override
+                public String getName() {
+                    return "ElevationColor";
+                }
+
+                @Override
+                public String getID(Tile t, Context x) {
+                    return Source.genID(t, ElevationColorTile.class.getSimpleName());
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return ELEVATION_HILLSHADE.getMinimumZoomLevel();
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return ELEVATION_HILLSHADE.getMaximumZoomLevel();
+                }
+
+                @Override
+                public boolean isTransparent() {
+                    return false;
+                }
+
+                @Override
+                public int getAlpha() {
+                    return 50;
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(Tile mt) {
+                    return  new ElevationColorTile.Factory(mt);
+                }
+
+            };
+
+}
+
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
index 1977546f..4d6fb1ad 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
@@ -3,11 +3,10 @@ package ch.bailu.aat.preferences;
 import android.content.Context;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.services.cache.BitmapTileObject;
-import ch.bailu.aat.services.cache.CachedTileObject;
-import ch.bailu.aat.services.cache.MapsForgeTileObject;
-import ch.bailu.aat.services.cache.NewHillshade;
-import ch.bailu.aat.services.cache.TileObject.Source;
+import ch.bailu.aat.map.tile.source.CachedSource;
+import ch.bailu.aat.map.tile.source.DownloadSource;
+import ch.bailu.aat.map.tile.source.Source;
+
 
 public class SolidMapTileStack extends SolidCheckList {
 
@@ -17,19 +16,24 @@ public class SolidMapTileStack extends SolidCheckList {
 
 
     public final static Source[] SOURCES = new Source[] {
-            //ElevationColorTile.ELEVATION_COLOR,
-            MapsForgeTileObject.MAPSFORGE,
-            // MAPNIK_GRAY,
-            BitmapTileObject.MAPNIK,
-//            HillShadeCached.ELEVATION_HILLSHADE_CACHED,
-            CachedTileObject.CACHED_HILLSHADE,
-            NewHillshade.ELEVATION_HILLSHADE8,
-            BitmapTileObject.TRANSPORT_OVERLAY,
-            BitmapTileObject.TRAIL_SKATING,
-            BitmapTileObject.TRAIL_HIKING,
-            BitmapTileObject.TRAIL_MTB,
-            BitmapTileObject.TRAIL_CYCLING,
-            CachedTileObject.CACHED_MAPSFORGE
+
+            Source.MAPSFORGE,
+            CachedSource.CACHED_MAPSFORGE,
+
+            DownloadSource.MAPNIK,
+
+            Source.ELEVATION_COLOR,
+            CachedSource.CACHED_ELEVATION_COLOR,
+
+            CachedSource.CACHED_ELEVATION_HILLSHADE,
+            Source.ELEVATION_HILLSHADE,
+
+            DownloadSource.TRANSPORT_OVERLAY,
+            DownloadSource.TRAIL_SKATING,
+            DownloadSource.TRAIL_HIKING,
+            DownloadSource.TRAIL_MTB,
+            DownloadSource.TRAIL_CYCLING,
+
     };
 
 
@@ -46,12 +50,6 @@ public class SolidMapTileStack extends SolidCheckList {
         }
     }
 
-//
-//    public static boolean isZoomLevelSupported(OnlineTileSourceBase source ,MapTile tile) {
-//        return
-//                tile.getZoomLevel() <= source.getMaximumZoomLevel() &&
-//                        tile.getZoomLevel() >= source.getMinimumZoomLevel();
-//    }
 
     public int getCountOfEnabled() {
         int c = 0;
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
index bea9e4d2..cd4ddfa7 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
@@ -7,18 +7,17 @@ import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
 import java.io.File;
-import java.util.Random;
 
+import ch.bailu.aat.map.tile.source.DownloadSource;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.DownloadHandle;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 
 
 public class BitmapTileObject extends TileObject {
-    private final Source source;
+    private final DownloadSource source;
     private final Tile tile;
 
 
@@ -30,7 +29,7 @@ public class BitmapTileObject extends TileObject {
     private final SyncTileBitmap bitmap=new SyncTileBitmap();
 
 
-    public BitmapTileObject(String id, ServiceContext cs,  Tile t, Source s) {
+    public BitmapTileObject(String id, ServiceContext cs,  Tile t, DownloadSource s) {
         super(id);
         tile = t;
         source=s;
@@ -147,10 +146,10 @@ public class BitmapTileObject extends TileObject {
 
     public static class Factory extends ObjectHandle.Factory {
         private final Tile mapTile;
-        private final Source source;
+        private final DownloadSource source;
 
         
-        public Factory(Tile mt, Source s) {
+        public Factory(Tile mt, DownloadSource s) {
             mapTile=mt;
             source = s;
         }
@@ -160,151 +159,4 @@ public class BitmapTileObject extends TileObject {
             return new BitmapTileObject(id, cs, mapTile, source);
         }
     }
-
-
-    public static final int MIN_ZOOM = 1;
-    public static final int MAX_ZOOM =17; // 18 takes way too much space for the gain.
-
-    public static class Source extends TileObject.Source {
-        public final static String EXT = ".png";
-
-        private final Random random = new Random();
-        private final int minZoom, maxZoom;
-
-        private final String name;
-
-        private final String[] urls;
-
-        private final int alpha;
-        private boolean transparent;
-
-
-        public Source (String n, int a, final String... url) {
-            this(n, MIN_ZOOM, MAX_ZOOM, a, (a != OPAQUE), url);
-        }
-
-        public Source (String n, int minZ, int maxZ, int a, final String... url) {
-            this(n, minZ, maxZ, a, (a != OPAQUE), url);
-        }
-
-        public Source(String n, int minZ, int maxZ, int a, boolean t, String... u) {
-            name = n;
-            minZoom = minZ;
-            maxZoom = maxZ;
-            urls = u;
-            alpha = a;
-            transparent = (a != OPAQUE);
-        }
-
-
-        @Override
-        public String getName() {
-            return name;
-        }
-        
-        
-        @Override
-        public String getID(Tile tile, Context context) {
-            return AppDirectory.getTileFile(tile,
-                    getTileRelativeFilename(tile), context).getAbsolutePath();
-        }
-
-        @Override
-        public int getMinimumZoomLevel() {
-            return minZoom;
-        }
-
-        @Override
-        public int getMaximumZoomLevel() {
-            return maxZoom;
-        }
-
-        public boolean isTransparent() {
-            return transparent;
-        }
-
-        @Override
-        public int getAlpha() {
-            return alpha;
-        }
-
-        @Override
-        public Factory getFactory(Tile mt) {
-            return new BitmapTileObject.Factory(mt, this);
-        }
-
-        public String getTileURLString(Tile tile) {
-            return getBaseUrl() + tile.zoomLevel + "/" + tile.tileX + "/" + tile.tileY + EXT;
-        }
-
-        private String getBaseUrl() {
-            return urls[random.nextInt(urls.length)];
-        }
-
-
-
-        private String getTileRelativeFilename(final Tile tile) {
-            final StringBuilder sb = new StringBuilder();
-            sb.append(name);
-            sb.append('/');
-            sb.append(tile.zoomLevel);
-            sb.append('/');
-            sb.append(tile.tileX);
-            sb.append('/');
-            sb.append(tile.tileY);
-            sb.append(EXT);
-            return sb.toString();
-        }
-
-    }
-
-
-
-
-    public final static BitmapTileObject.Source MAPNIK =
-            new BitmapTileObject.Source("Mapnik",
-                    TileObject.Source.OPAQUE,
-                    "http://a.tile.openstreetmap.org/",
-                    "http://b.tile.openstreetmap.org/",
-                    "http://c.tile.openstreetmap.org/");
-
-
-    public final static TileObject.Source TRAIL_MTB =
-            new BitmapTileObject.Source("TrailMTB",
-                    TileObject.Source.TRANSPARENT,
-                    "http://tile.waymarkedtrails.org/mtb/");
-
-    public final static TileObject.Source TRAIL_SKATING =
-            new BitmapTileObject.Source("TrailSkating",
-                    TileObject.Source.TRANSPARENT,
-                    "http://tile.waymarkedtrails.org/skating/");
-
-
-    public final static TileObject.Source TRAIL_HIKING =
-            new BitmapTileObject.Source("TrailHiking",
-                    TileObject.Source.TRANSPARENT,
-                    "http://tile.waymarkedtrails.org/hiking/");
-
-
-    public final static TileObject.Source TRAIL_CYCLING =
-            new BitmapTileObject.Source("TrailCycling",
-                    TileObject.Source.TRANSPARENT,
-                    "http://tile.waymarkedtrails.org/cycling/");
-
-
-
-    public final static TileObject.Source TRANSPORT_OVERLAY =
-            new BitmapTileObject.Source("OpenPtMap",
-                    5, 16,
-                    TileObject.Source.TRANSPARENT,
-                    "http://openptmap.org/tiles/");
-
-
-    public final static BitmapTileObject.Source HILLSHADE_CACHE =
-            new BitmapTileObject.Source("HillShade",
-                    NewHillshade.ELEVATION_HILLSHADE8.getMinimumZoomLevel(),
-                    NewHillshade.ELEVATION_HILLSHADE8.getMaximumZoomLevel(),
-                    NewHillshade.ELEVATION_HILLSHADE8.getAlpha(),
-                    true,
-                    "http://bailu.ch/");
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
index 15197e64..45bbd5f8 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
@@ -10,6 +10,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
@@ -174,48 +175,8 @@ public class CachedTileObject extends TileObject {
     }
 
 
-    public final static Source CACHED_HILLSHADE = new MySource(NewHillshade.ELEVATION_HILLSHADE8);
-    public final static Source CACHED_MAPSFORGE = new MySource(MapsForgeTileObject.MAPSFORGE);
 
-    private static class MySource extends TileObject.Source {
-        private final Source source;
-
-        public MySource(Source s) {
-            source = s;
-        }
-
-        @Override
-        public String getName() {
-            return "Cached" + source.getName();
-        }
-
-        @Override
-        public String getID(Tile aTile, Context context) {
-            return genID(aTile, getName());
-        }
-
-        @Override
-        public int getMinimumZoomLevel() {
-            return source.getMinimumZoomLevel();
-        }
-
-        @Override
-        public int getMaximumZoomLevel() {
-            return source.getMaximumZoomLevel();
-        }
-
-        @Override
-        public int getAlpha() {
-            return source.getAlpha();
-        }
-
-        @Override
-        public Factory getFactory(Tile tile) {
-            return new CachedTileObject.Factory(tile, source);
-        }
-    }
-
-    private static class Factory extends ObjectHandle.Factory {
+    public static class Factory extends ObjectHandle.Factory {
         private final Source source;
         private final Tile tile;
 
@@ -230,7 +191,7 @@ public class CachedTileObject extends TileObject {
         }
     }
 
-    private static class CachedSource extends TileObject.Source {
+    private static class CachedSource extends Source {
         public final static String EXT = ".png";
 
         private final Source generated;
@@ -280,7 +241,12 @@ public class CachedTileObject extends TileObject {
 
         @Override
         public TileObject.Factory getFactory(Tile tile) {
-            return new LoadableBitmapTileObject.Factory(tile, false);
+            return new LoadableBitmapTileObject.Factory(tile, generated.isTransparent());
+        }
+
+        @Override
+        public boolean isTransparent() {
+            return generated.isTransparent();
         }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
index 440c32fd..3c05843c 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
@@ -1,7 +1,5 @@
 package ch.bailu.aat.services.cache;
 
-import android.content.Context;
-
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
@@ -89,48 +87,5 @@ public class ElevationColorTile extends ElevationTile {
 
 
 
-    public final static Source ELEVATION_COLOR =
-            new Source() {
-
-                @Override
-                public String getName() {
-                    return "ElevationColor*";
-                }
-
-                @Override
-                public String getID(Tile t, Context x) {
-                    return Source.genID(t, ElevationColorTile.class.getSimpleName());
-                }
-
-                @Override
-                public int getMinimumZoomLevel() {
-                    return 5;
-                }
-
-                @Override
-                public int getMaximumZoomLevel() {
-                    return 18;
-                }
-
-//                @Override
-//                public boolean isTransparent() {
-//                    return false;
-//                }
-
-                @Override
-                public int getAlpha() {
-                    return TRANSPARENT;
-                }
-
-                @Override
-                public ObjectHandle.Factory getFactory(Tile mt) {
-                    return  new ElevationColorTile.Factory(mt);
-                }
-
-//                @Override
-//                public TileBitmapFilter getBitmapFilter() {
-//                    return TileBitmapFilter.OVERLAY_FILTER;
-//                }
-            };
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
index d0858114..a8885a14 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
@@ -33,8 +33,8 @@
 //
 //        mapTile = t;
 //
-//        demID = NewHillshade.ELEVATION_HILLSHADE8.getID(t, sc.getContext());
-//        demFactory = NewHillshade.ELEVATION_HILLSHADE8.getFactory(t);
+//        demID = NewHillshade.ELEVATION_HILLSHADE.getID(t, sc.getContext());
+//        demFactory = NewHillshade.ELEVATION_HILLSHADE.getFactory(t);
 //
 //        bitmapID = BitmapTileObject.HILLSHADE_CACHE.getID(t, sc.getContext());
 //        bitmapFactory = BitmapTileObject.HILLSHADE_CACHE.getFactory(t);
@@ -199,22 +199,22 @@
 //
 //                @Override
 //                public int getMinimumZoomLevel() {
-//                    return NewHillshade.ELEVATION_HILLSHADE8.getMinimumZoomLevel();
+//                    return NewHillshade.ELEVATION_HILLSHADE.getMinimumZoomLevel();
 //                }
 //
 //                @Override
 //                public int getMaximumZoomLevel() {
-//                    return NewHillshade.ELEVATION_HILLSHADE8.getMaximumZoomLevel();
+//                    return NewHillshade.ELEVATION_HILLSHADE.getMaximumZoomLevel();
 //                }
 //
 ////                @Override
 ////                public boolean isTransparent() {
-////                    return NewHillshade.ELEVATION_HILLSHADE8.isTransparent();
+////                    return NewHillshade.ELEVATION_HILLSHADE.isTransparent();
 ////                }
 //
 //                @Override
 //                public int getAlpha() {
-//                    return NewHillshade.ELEVATION_HILLSHADE8.getAlpha();
+//                    return NewHillshade.ELEVATION_HILLSHADE.getAlpha();
 //                }
 //
 //                @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
index 53549e13..c3e6acac 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
@@ -104,7 +104,7 @@ public class LoadableBitmapTileObject extends TileObject {
 
     @Override
     public long getSize() {
-        return getBytesHack(TILE_SIZE);
+        return bitmap.getSize();
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
index 30f08495..7bedcc36 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
@@ -1,6 +1,5 @@
 package ch.bailu.aat.services.cache;
 
-import android.content.Context;
 import android.graphics.Bitmap;
 
 import org.mapsforge.core.graphics.TileBitmap;
@@ -81,7 +80,7 @@ public class MapsForgeTileObject extends TileObject implements Observer {
 
     @Override
     public long getSize() {
-        return getBytesHack(tile.tileSize);
+        return bitmap.getSize();
     }
 
     @Override
@@ -109,45 +108,5 @@ public class MapsForgeTileObject extends TileObject implements Observer {
     }
 
 
-    public final static Source MAPSFORGE =
 
-            new Source() {
-
-                @Override
-                public String getName() {
-                    return "MapsForge";
-                }
-
-                @Override
-                public String getID(Tile t, Context x) {
-                    return genID(t, MapsForgeTileObject.class.getSimpleName());
-                }
-
-                @Override
-                public int getMinimumZoomLevel() {
-                    return 3;
-                }
-
-                @Override
-                public int getMaximumZoomLevel() {
-                    return 17;
-                }
-
-//                @Override
-//                public boolean isTransparent() {
-//                    return false;
-//                }
-
-                @Override
-                public int getAlpha() {
-                    return OPAQUE;
-                }
-
-                @Override
-                public ObjectHandle.Factory getFactory(Tile t) {
-                    return  new Factory(t);
-                }
-
-
-            };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
index c522c23d..54f2e855 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
@@ -4,6 +4,7 @@ import android.content.Context;
 
 import org.mapsforge.core.model.Tile;
 
+import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.dem.DemDimension;
 import ch.bailu.aat.services.dem.DemGeoToIndex;
@@ -138,39 +139,5 @@ public class NewHillshade extends ElevationTile {
     }
 
 
-    public final static Source ELEVATION_HILLSHADE8 =
-            new Source() {
 
-                @Override
-                public String getName() {
-                    return "Hillshade";
-                }
-
-                @Override
-                public String getID(Tile t, Context x) {
-                    return genID(t, NewHillshade.class.getSimpleName());
-                }
-
-                @Override
-                public int getMinimumZoomLevel() {
-                    return 8;
-                }
-
-                @Override
-                public int getMaximumZoomLevel() {
-                    return 14;
-                }
-
-
-                @Override
-                public int getAlpha() {
-                    return OPAQUE;
-                }
-
-                @Override
-                public ObjectHandle.Factory getFactory(Tile mt) {
-                    return  new NewHillshade.Factory(mt);
-                }
-
-            };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
index 910b365e..06a5c847 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
@@ -1,6 +1,5 @@
 package ch.bailu.aat.services.cache;
 
-import android.content.Context;
 import android.graphics.Bitmap;
 
 import org.mapsforge.core.graphics.TileBitmap;
@@ -11,8 +10,6 @@ import ch.bailu.aat.services.ServiceContext;
 public abstract class TileObject extends ObjectHandle {
     public static final int TILE_SIZE=256;
 
-
-
     public TileObject(String id) {
         super(id);
     }
@@ -24,27 +21,6 @@ public abstract class TileObject extends ObjectHandle {
 
     public abstract boolean isLoaded();
 
-    public static abstract class  Source {
-        public final static int TRANSPARENT = 150;
-        public final static int OPAQUE = 255;
-
-        public abstract String getName();
-        public abstract String getID(Tile aTile, Context context);
-
-        public abstract int getMinimumZoomLevel();
-        public abstract int getMaximumZoomLevel();
-
-//        public abstract boolean isTransparent();
-        public abstract int getAlpha();
-        public abstract ObjectHandle.Factory getFactory(Tile tile);
-
-
-        public static String genID(Tile t, String name) {
-            return name + "/" + t.zoomLevel + "/" + t.tileX + "/" + t.tileY;
-
-        }
-    }
-
     public static long getBytesHack(int size) {
         return size * size * 4;
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/MapSummaries.java b/app/src/main/java/ch/bailu/aat/services/tileremover/MapSummaries.java
index e95cd771..5d10f573 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/MapSummaries.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/MapSummaries.java
@@ -40,7 +40,7 @@ public class MapSummaries {
         final long l = f.length();
 
         mapSummaries[0].addFileToRemove(f.length());
-        mapSummaries[indexFromHashCode(f.hashCode())].addFileToRemove(l);
+        mapSummaries[indexFromHashCode(f.directoryHashCode())].addFileToRemove(l);
     }
 
 
@@ -48,7 +48,7 @@ public class MapSummaries {
         final long length = f.length();
 
         mapSummaries[0].addFileRemoved(length);
-        mapSummaries[indexFromHashCode(f.hashCode())].addFileRemoved(length);
+        mapSummaries[indexFromHashCode(f.directoryHashCode())].addFileRemoved(length);
     }
 
     public int indexFromHashCode(int hashCode) {
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
index b0a60a92..eb57555b 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
@@ -130,7 +130,7 @@ public class StateScanForRemoval implements State, Runnable {
 
 
     private boolean passDirectory(TileFile file) {
-        return trimDirectoryHash == 0 || file.hashCode() == trimDirectoryHash;
+        return trimDirectoryHash == 0 || file.directoryHashCode() == trimDirectoryHash;
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
index 6ac9a9f4..1d34fb82 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
@@ -59,8 +59,8 @@ public class TileFile {
         return size;
     }
 
-    @Override
-    public int hashCode() {
+
+    public int directoryHashCode() {
         return hash;
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java
index a53b098b..68a4af38 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java
@@ -4,17 +4,24 @@ import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.PriorityQueue;
+import java.util.TreeSet;
 
 public class TilesList {
-    public final static int FILES_LIMIT=50000;
+    private final static int FILES_LIMIT=100000;
 
 
-    private final PriorityQueue<TileFile> files = new PriorityQueue<>(
-            FILES_LIMIT,
+    private final TreeSet<TileFile> files = new TreeSet<>(
+
             new Comparator<TileFile>() {
         @Override
         public int compare(TileFile o1, TileFile o2) {
-            return (int) (o2.lastModified()-o1.lastModified());
+            if (o2.lastModified() > o1.lastModified())
+                return -1;
+
+            else if (o2.lastModified() < o1.lastModified())
+                return 1;
+
+            else return 0;
         }
     });
 
@@ -27,9 +34,9 @@ public class TilesList {
 
     public void add(TileFile file) {
         files.add(file);
-        if (files.size()>= FILES_LIMIT) {
-            files.poll();
-        }
+//        if (files.size()>= FILES_LIMIT) {
+//            files.pollLast();
+//        }
     }
 
     public void addToRemove(TileFile file) {
