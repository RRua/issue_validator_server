diff --git a/src/com/ichi2/libanki/Card.java b/src/com/ichi2/libanki/Card.java
index 8f77592e21..541fddb120 100644
--- a/src/com/ichi2/libanki/Card.java
+++ b/src/com/ichi2/libanki/Card.java
@@ -39,7 +39,7 @@ import com.ichi2.libanki.Deck.QAData;
  * 
  * Type: 0=new, 1=learning, 2=due
  * Queue: same as above, and:
- *        -1=suspended, -2=user buried, -3=sched buried, -4=deleted
+ *        -1=suspended, -2=user buried, -3=sched buried
  * Due is used differently for different queues.
  * - new queue: fact id or random int
  * - rev queue: integer day
diff --git a/src/com/ichi2/libanki/Deck.java b/src/com/ichi2/libanki/Deck.java
index b4ba7ec279..2d778c93fe 100644
--- a/src/com/ichi2/libanki/Deck.java
+++ b/src/com/ichi2/libanki/Deck.java
@@ -322,7 +322,10 @@ public class Deck {
 
 
     private void setModified() {
-        mMod = Utils.intNow();
+        setModified(Utils.intNow());
+    }
+    private void setModified(int mod) {
+        mMod = mod;
     }
 
 
@@ -338,9 +341,11 @@ public class Deck {
         }
     }
 
-
     public void flushMod() {
-        setModified();
+    	flushMod(Utils.intNow());
+    }
+    public void flushMod(int mod) {
+        setModified(mod);
         commitToDB();
     }
 
@@ -407,13 +412,37 @@ public class Deck {
     	mSched.reset();
     }
 
+    /**
+     * Deletion logging
+     * ***********************************************************************************************
+     */
+
+    public void _logDels(int[] ids, int type) {
+    	if (!syncingEnabled()) {
+    		// no deletion log required if deck not syncable
+    		return;
+    	}
+    	// limit ids to those created prior to last sync
+    	String tbl = type == Scheduler.DEL_CARD ? "cards" : "facts";
+    	ArrayList<Integer> list = getDB().queryColumn(Integer.class, "SELECT id FROM " + tbl + " WHERE crt < " + mLastSync + " AND id IN " + Utils.ids2str(ids), 0);
+    	ids = new int[list.size()];
+    	int i = 0;
+    	for (int l : list) {
+    		ids[i++] = l;
+    	}
+    	// log
+		for (int id : ids) {
+    		getDB().getDatabase().execSQL("INSERT INTO graves VALUES (" + Utils.intNow() + ", " + id + ", " + type + ")");
+    	}
+    }
+
     /**
      * Facts
      * ***********************************************************************************************
      */
 
     public int factCount() {
-    	return (int) getDB().queryScalar("SELECT count() FROM facts WHERE crt != 0");
+    	return (int) getDB().queryScalar("SELECT count() FROM facts");
     }
 
 
@@ -455,40 +484,31 @@ public class Deck {
     }
 
 
+    public void delFacts(int[] ids) {
+    	ArrayList<Integer> list = getDB().queryColumn(Integer.class, "SELECT id FROM cards WHERE fid in " + Utils.ids2str(ids), 0);
+    	int[] cids = new int[list.size()];
+    	int i = 0;
+    	for (int l : list) {
+    		cids[i++] = l;
+    	}
+    	delCards(cids);
+    }
+
+
     /**
      * Bulk delete facts by ID. Don't call this directly.
      */
     public void _delFacts(int[] ids) {
     	if (ids != null) {
     		String strids = Utils.ids2str(ids);
+    		// we need to log these independently of cards, as one side may have more card templates
+    		_logDels(ids, Scheduler.DEL_FACT);
     		getDB().getDatabase().execSQL("DELETE FROM facts WHERE id IN " + strids);
     		getDB().getDatabase().execSQL("DELETE FROM fsums WHERE id IN " + strids);
     	}
     }
 
 
-    /**
-     * Delete any facts without cards. Don't call this directly.
-     */
-    public int[] _delDanglingFacts() {
-        Cursor cursor = null;
-        int ids[];
-        try {
-            cursor = getDB().getDatabase().rawQuery("SELECT id FROM facts WHERE id NOT IN " +
-            		"(SELECT DISTINCT fid FROM cards)", null);
-            ids = new int[cursor.getCount()];
-            while (cursor.moveToNext()) {
-            	ids[cursor.getPosition()] = cursor.getInt(0);
-            }
-        } finally {
-            if (cursor != null) {
-                cursor.close();
-            }
-        }
-        _delFacts(ids);
-        return ids;
-    }
-
     /**
      * Card creation
      * ***********************************************************************************************
@@ -566,15 +586,7 @@ public class Deck {
      */
 
     public int cardCount() {
-    	return (int) getDB().queryScalar("SELECT count() FROM cards WHERE crt != 0");
-    }
-
-
-    /**
-     * Delete a card given its id. Delete any unused facts.
-     */
-    public void delCard(int id) {
-    	delCards(new int[]{id});
+    	return (int) getDB().queryScalar("SELECT count() FROM cards");
     }
 
 
@@ -586,14 +598,34 @@ public class Deck {
     		return;
     	}
     	String sids = Utils.ids2str(ids);
-    	// immediate delete?
-        getDB().getDatabase().execSQL("DELETE FROM cards WHERE id IN " + sids);
+    	ArrayList<Integer> list = getDB().queryColumn(Integer.class, "SELECT fid FROM cards WHERE id in " + sids, 0);
+    	int[] fids = new int[list.size()];
+    	int i = 0;
+    	for (int l : list) {
+    		fids[i++] = l;
+    	}
+    	// remove cards
+    	_logDels(ids, Scheduler.DEL_CARD);
+    	getDB().getDatabase().execSQL("DELETE FROM cards WHERE id IN " + sids);
         getDB().getDatabase().execSQL("DELETE FROM revlog WHERE cid IN " + sids);
-        // remove any dangling facts
-        _delDanglingFacts();
-        // TODO: check if schema changed
+        // then facts
+        Cursor cursor = null;
+        try {
+            cursor = getDB().getDatabase().rawQuery("SELECT id FROM facts WHERE id IN " + Utils.ids2str(fids) +
+            		" AND id NOT IN (SELECT fid FROM cards)", null);
+            fids = new int[cursor.getCount()];
+            while (cursor.moveToNext()) {
+            	fids[cursor.getPosition()] = cursor.getInt(0);
+            }
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+        _delFacts(fids);
     }
 
+
     /**
      * Models
      * ***********************************************************************************************
@@ -981,6 +1013,9 @@ public class Deck {
      * ***********************************************************************************************
      */
 
+    public boolean syncingEnabled() {
+    	return !mSyncName.equals("");
+    }
 
 
     /**
diff --git a/src/com/ichi2/libanki/Scheduler.java b/src/com/ichi2/libanki/Scheduler.java
index 3e9e0daf4e..45331a0132 100644
--- a/src/com/ichi2/libanki/Scheduler.java
+++ b/src/com/ichi2/libanki/Scheduler.java
@@ -57,6 +57,10 @@ public class Scheduler {
     public static final int REV_CARDS_NEW_FIRST = 1;
     public static final int REV_CARDS_RANDOM = 2;
 
+    // deletion types
+    public static final int DEL_CARD = 0;
+    public static final int DEL_FACT = 1;
+
     // lech actions
     public static final int LEECH_ACTION_SUSPEND = 0;
     public static final int LEECH_ACTION_TAG_ONLY = 1;
@@ -156,6 +160,17 @@ public class Scheduler {
             // put it in the learn queue
             card.setQueue(1);
             card.setType(1);
+			try {
+	            JSONArray ja = mDeck.getQconf().getJSONArray("newToday");
+	            int today = ja.getInt(0);
+	            int cnt = ja.getInt(1);
+	            ja = new JSONArray();
+	            ja.put(today);
+	            ja.put(cnt + 1);
+	            mDeck.getQconf().put("newToday", ja);
+			} catch (JSONException e) {
+				throw new RuntimeException(e);
+			}
         }
         if (card.getQueue() == 1) {
             _answerLrnCard(card, ease);
