diff --git a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockInterfaceStub.java b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockInterfaceStub.java
index f22a28e..aa00109 100644
--- a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockInterfaceStub.java
+++ b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockInterfaceStub.java
@@ -1,73 +1,37 @@
 package com.angrydoughnuts.android.alarmclock;
 
-import java.util.Timer;
-
 import android.content.Context;
-import android.content.Intent;
-import android.os.Handler;
-import android.os.PowerManager;
 import android.os.RemoteException;
 import android.widget.Toast;
 
 public class AlarmClockInterfaceStub extends AlarmClockInterface.Stub {
-  // TODO(cgallek) make this object a constructor parameter and ensure
-  // that the handler is constructed in the UI thread.
   private Context context;
-  private Handler uiHandler;
-  private Timer timerThread;
-  private AlarmClockTimerTask task;
-
-  AlarmClockInterfaceStub(
-      Context context, Handler uiHandler, Timer timerThread) {
+  private AlarmClockService service;
+  
+  AlarmClockInterfaceStub(Context context, AlarmClockService service) {
     this.context = context;
-    this.uiHandler = uiHandler;
-    this.timerThread = timerThread;
+    this.service = service;
   }
 
   @Override
-  public void fire() throws RemoteException {
+  public void fire(int id) throws RemoteException {
     Toast.makeText(context, "FIRE ALARM!", Toast.LENGTH_SHORT).show();
-    Intent notifyIntent = new Intent(context, AlarmNotificationActivity.class);
-    notifyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-    // TODO(cgallek) Currently, both this service and the Notification
-    // Activity manage power settings.  It might make sense to move all
-    // power management into the service.  This would require a callback
-    // from the Notification application.  I'm not sure how to get a
-    // response from an activity started from a service...
-    // I think there also might be a race condition between the
-    // startActivity call and the wake lock release call below (ie if
-    // the lock is released before the activity actually starts).  Moving
-    // all locking to this service would also fix that problem.
-    PowerManager manager =
-      (PowerManager) context.getSystemService(Context.POWER_SERVICE);
-    PowerManager.WakeLock wakeLock = manager.newWakeLock(
-        PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,
-        "Alarm Service CPU wake lock");
-    wakeLock.acquire();
-
-    context.startActivity(notifyIntent);
-
-    wakeLock.release();
+    service.triggerAlarm(id);
   }
   @Override
   public void alarmOn() throws RemoteException {
-    // TODO(cgallek): This is just a test timer task.  Remove it.
-    // Also, this is not the correct context to use.
     Toast.makeText(context, "SCHEDULE ALARM!", Toast.LENGTH_SHORT).show();
-    AlarmClockService.setAlarmOn(true);
-    if (task == null) {
-      task = new AlarmClockTimerTask(context, uiHandler);
-      timerThread.schedule(task, 5000, 5000);
-    }
+    service.addAlarm();
   }
   @Override
   public void alarmOff() throws RemoteException {
     Toast.makeText(context, "UNSCHEDULE ALARM!", Toast.LENGTH_SHORT).show();
-    AlarmClockService.setAlarmOn(false);
-      if (task != null) {
-      task.cancel();
-      task = null;
-    }
+    service.clearAllAlarms();
+  }
+
+  @Override
+  public void clearAlarm(int id) throws RemoteException {
+    Toast.makeText(context, "HANDLE ALARM " + id, Toast.LENGTH_SHORT).show();
+    service.removeAlarm(id);
   }
 }
diff --git a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockService.java b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockService.java
index 56613f6..440ce07 100644
--- a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockService.java
+++ b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockService.java
@@ -1,6 +1,7 @@
 package com.angrydoughnuts.android.alarmclock;
 
 import java.util.Timer;
+import java.util.TreeMap;
 
 import android.app.Notification;
 import android.app.NotificationManager;
@@ -10,15 +11,11 @@ import android.content.Context;
 import android.content.Intent;
 import android.os.Handler;
 import android.os.IBinder;
+import android.os.PowerManager;
   
   public class AlarmClockService extends Service {
     private final int NOTIFICATION_ID = 1;
 
-    // TODO(cgallek): replace this with a data provider.
-    private static boolean alarmOn = false;
-    public static synchronized boolean getAlarmOn() { return alarmOn; }
-    public static synchronized void setAlarmOn(boolean state) { alarmOn = state; }
-
     private Timer timerThread;
     private Handler uiHandler;
   
@@ -70,8 +67,7 @@ import android.os.IBinder;
       final Intent selfIntent = new Intent(getApplication(), AlarmClockService.class);
       startService(selfIntent);
 
-      return new AlarmClockInterfaceStub(
-          getApplicationContext(), uiHandler, timerThread);
+      return new AlarmClockInterfaceStub(getApplicationContext(), this);
     }
 
     @Override
@@ -80,14 +76,76 @@ import android.os.IBinder;
       // the service would shutdown after the last un-bind.  However, since
       // we explicitly started the service in onBind (to remain persistent),
       // we must explicitly stop here when there are no alarms set.
-      if (getAlarmOn()) {
+      if (alarmCount() == 0) {
+        timerThread.cancel();
+        stopSelf();
+        return false;
+      } else {
         // Since we want the service to continue running in this case, return
         // true so that onRebind is called instead of onBind.
         return true;
+
+      }
+    }
+
+    // TODO(cgallek): replace this with a data provider.
+    private static int taskId = 0;
+    private static synchronized int nextTaskId() { return taskId++; }
+    private TreeMap<Integer, AlarmClockTimerTask> taskList = new TreeMap<Integer, AlarmClockTimerTask>();
+
+    public synchronized int alarmCount() {
+      return taskList.size();
+    }
+
+    public synchronized void addAlarm() {
+      int id = nextTaskId();
+      AlarmClockTimerTask task =
+        new AlarmClockTimerTask(getApplicationContext(), uiHandler, id);
+      // TODO(cgallek): make sure ID doesn't exist yet?
+      taskList.put(id, task);
+      timerThread.schedule(task, 5000);
+    }
+
+    public synchronized boolean removeAlarm(int id) {
+      AlarmClockTimerTask task = taskList.remove(id);
+      if (task != null) {
+        task.cancel();
+        return true;
       } else {
-        timerThread.cancel();
-        stopSelf();
         return false;
       }
     }
+ 
+    public synchronized void clearAllAlarms() {
+      for (AlarmClockTimerTask task : taskList.values()) {
+        task.cancel();
+      }
+      taskList.clear();
+    }
+
+    public synchronized void triggerAlarm(int id) {
+      Intent notifyIntent = new Intent(getApplicationContext(), AlarmNotificationActivity.class);
+      notifyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+      notifyIntent.putExtra("task_id", id);
+
+      // TODO(cgallek) Currently, both this service and the Notification
+      // Activity manage power settings.  It might make sense to move all
+      // power management into the service.  This would require a callback
+      // from the Notification application.  I'm not sure how to get a
+      // response from an activity started from a service...
+      // I think there also might be a race condition between the
+      // startActivity call and the wake lock release call below (ie if
+      // the lock is released before the activity actually starts).  Moving
+      // all locking to this service would also fix that problem.
+      PowerManager manager =
+        (PowerManager) getSystemService(Context.POWER_SERVICE);
+      PowerManager.WakeLock wakeLock = manager.newWakeLock(
+          PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP,
+          "Alarm Service CPU wake lock");
+      wakeLock.acquire();
+
+      startActivity(notifyIntent);
+
+      wakeLock.release();
+    }
   }
diff --git a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockTimerTask.java b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockTimerTask.java
index 92d1ec0..b800e9e 100644
--- a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockTimerTask.java
+++ b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmClockTimerTask.java
@@ -14,6 +14,7 @@ public class AlarmClockTimerTask extends TimerTask {
 
   private Context context;
   private Handler handler;
+  int id;
   private Intent serviceIntent;
   private AlarmClockInterface clock;
   private synchronized void setClock(AlarmClockInterface clock) {
@@ -35,7 +36,7 @@ public class AlarmClockTimerTask extends TimerTask {
     @Override
     public void run() {
       try {
-        clock.fire();
+        clock.fire(id);
       } catch (RemoteException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
@@ -43,9 +44,10 @@ public class AlarmClockTimerTask extends TimerTask {
     }
   };
 
-  public AlarmClockTimerTask(Context context, Handler handler) {
+  public AlarmClockTimerTask(Context context, Handler handler, int id) {
     this.context = context;
     this.handler = handler;
+    this.id = id;
     this.serviceIntent = new Intent(context, AlarmClockService.class);
   }
 
diff --git a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmNotificationActivity.java b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmNotificationActivity.java
index 7a9cb01..8ebbe6b 100644
--- a/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmNotificationActivity.java
+++ b/android/alarmclock/src/com/angrydoughnuts/android/alarmclock/AlarmNotificationActivity.java
@@ -3,9 +3,14 @@ package com.angrydoughnuts.android.alarmclock;
 import android.app.Activity;
 import android.app.KeyguardManager;
 import android.app.KeyguardManager.KeyguardLock;
+import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
 import android.os.Bundle;
+import android.os.IBinder;
 import android.os.PowerManager;
+import android.os.RemoteException;
 import android.view.View;
 import android.widget.Button;
 
@@ -14,6 +19,22 @@ public class AlarmNotificationActivity extends Activity {
   private PowerManager.WakeLock wakeLock;
   private KeyguardLock screenLock;
 
+  private AlarmClockInterface clock;
+  final private ServiceConnection serviceConnection = new ServiceConnection() {
+    @Override
+    public void onServiceConnected(ComponentName name, IBinder service) {
+      clock = AlarmClockInterface.Stub.asInterface(service);
+    }
+    @Override
+    public void onServiceDisconnected(ComponentName name) {
+      // TODO(cgallek): This should only happen if the AlarmClockService
+      // crashes.  Consider throwing an exception here.
+      clock = null;
+    }
+  };
+
+  // TODO(cgallek): This doesn't seem to handle the case when a second alarm
+  // fires while the first has not yet been acked.
   @Override
   protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
@@ -40,11 +61,36 @@ public class AlarmNotificationActivity extends Activity {
     okButton.setOnClickListener(new View.OnClickListener() {
       @Override
       public void onClick(View v) {
+        Bundle extras = getIntent().getExtras();
+        int id = extras.getInt("task_id");
+        try {
+          clock.clearAlarm(id);
+        } catch (RemoteException e) {
+          // TODO Auto-generated catch block
+          e.printStackTrace();
+        }
         finish();
       }
     });
   }
 
+  @Override
+  protected void onResume() {
+    super.onResume();
+    final Intent serviceIntent =
+      new Intent(getApplicationContext(), AlarmClockService.class);
+    if (!bindService(
+        serviceIntent, serviceConnection, 0)) {
+      throw new IllegalStateException("Unable to bind to AlarmClock service.");
+    }
+  }
+
+  @Override
+  protected void onPause() {
+    super.onPause();
+    unbindService(serviceConnection);
+  }
+
   // TODO(cgallek): Clicking the power button twice while this activity is
   // in the foreground seems to bypass the keyguard...
 
