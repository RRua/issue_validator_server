diff --git a/app/src/androidTest/java/com/asksven/betterbatterystats/data/StatsProviderTest.java b/app/src/androidTest/java/com/asksven/betterbatterystats/data/StatsProviderTest.java
index 9ad7ff80..9f243603 100644
--- a/app/src/androidTest/java/com/asksven/betterbatterystats/data/StatsProviderTest.java
+++ b/app/src/androidTest/java/com/asksven/betterbatterystats/data/StatsProviderTest.java
@@ -35,7 +35,7 @@ public class StatsProviderTest
 	{
 		Context ctx = InstrumentationRegistry.getContext();
 		assertNotNull(ctx);
-		mStats = StatsProvider.getInstance(ctx);
+		mStats = StatsProvider.getInstance();
 
 	}
 
diff --git a/app/src/main/java/com/asksven/android/common/nameutils/UidNameResolver.java b/app/src/main/java/com/asksven/android/common/nameutils/UidNameResolver.java
index d55fefb9..d92c0c83 100644
--- a/app/src/main/java/com/asksven/android/common/nameutils/UidNameResolver.java
+++ b/app/src/main/java/com/asksven/android/common/nameutils/UidNameResolver.java
@@ -23,6 +23,8 @@ import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.graphics.drawable.Drawable;
 
+import com.asksven.betterbatterystats.BbsApplication;
+
 /**
  * @author sven
  *
@@ -32,19 +34,13 @@ public class UidNameResolver
 	
 	protected String[] m_packages;
 	protected String[] m_packageNames;
-    private static Context m_context;
     private static UidNameResolver m_instance;
     
-	private UidNameResolver(Context ctx)
-	{
-		m_context = ctx;
-	}
-	
-	public static UidNameResolver getInstance(Context ctx)
+	public static UidNameResolver getInstance()
 	{
 		if (m_instance == null)
 		{
-			m_instance = new UidNameResolver(ctx);
+			m_instance = new UidNameResolver();
 		}
 		
 		return m_instance;
@@ -57,7 +53,7 @@ public class UidNameResolver
 		String myPackage = packageName;
 		if (!myPackage.equals(""))
 		{
-			PackageManager manager = m_context.getPackageManager();
+			PackageManager manager = BbsApplication.getAppContext().getPackageManager();
 			try
 			{
 				icon = manager.getApplicationIcon(myPackage);
@@ -74,7 +70,7 @@ public class UidNameResolver
 	public String getLabel(String packageName)
 	{
 		String ret = packageName;
-		PackageManager pm = m_context.getPackageManager();
+		PackageManager pm = BbsApplication.getAppContext().getPackageManager();
         try
         {
             ApplicationInfo ai = pm.getApplicationInfo(packageName, 0);
@@ -107,7 +103,7 @@ public class UidNameResolver
     	myInfo.setUniqueName(uidUniqueName);
 
         
-        PackageManager pm = m_context.getPackageManager();
+        PackageManager pm = BbsApplication.getAppContext().getPackageManager();
         m_packages = pm.getPackagesForUid(uid);
         
         if (m_packages == null)
diff --git a/app/src/main/java/com/asksven/android/common/privateapiproxies/BatteryStatsProxy.java b/app/src/main/java/com/asksven/android/common/privateapiproxies/BatteryStatsProxy.java
index 397bdbc3..76834c0d 100644
--- a/app/src/main/java/com/asksven/android/common/privateapiproxies/BatteryStatsProxy.java
+++ b/app/src/main/java/com/asksven/android/common/privateapiproxies/BatteryStatsProxy.java
@@ -493,7 +493,6 @@ public class BatteryStatsProxy
      * Returns the total, last, or current battery realtime in microseconds.
      *
      * @param curTime the current elapsed realtime in microseconds.
-     * @param iStatsType one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT.
      */
     public Long getBatteryRealtime(long curTime) throws BatteryInfoUnavailableException
 	{
@@ -624,8 +623,6 @@ public class BatteryStatsProxy
 	/**
      * Returns if phone is on battery.
      *
-     * @param batteryRealtime the battery realtime in microseconds (@see computeBatteryRealtime).
-     * @param iStatsType one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT.
      */
     public boolean getIsOnBattery() throws BatteryInfoUnavailableException
 	{
@@ -1553,7 +1550,7 @@ public class BatteryStatsProxy
 						    }
 						    SensorUsage myData = new SensorUsage(uidTotalSensorTime.longValue()/1000);
 							// try resolving names
-							UidInfo myInfo = UidNameResolver.getInstance(context).getNameForUid(uid);
+							UidInfo myInfo = UidNameResolver.getInstance().getNameForUid(uid);
 							myData.setUidInfo(myInfo);
 							myData.setItems(myItems);
 							myRet.add(myData);
@@ -1637,7 +1634,7 @@ public class BatteryStatsProxy
 						    }
 						    SensorUsage myData = new SensorUsage(uidTotalSensorTime.longValue()/1000);
 							// try resolving names
-							UidInfo myInfo = UidNameResolver.getInstance(context).getNameForUid(uid);
+							UidInfo myInfo = UidNameResolver.getInstance().getNameForUid(uid);
 							myData.setUidInfo(myInfo);
 							myData.setItems(myItems);
 							myRet.add(myData);
@@ -1889,8 +1886,6 @@ public class BatteryStatsProxy
     /**
      * Returns the total, last, or current bluetooth on time in microseconds.
      *
-     * @param batteryRealtime the battery realtime in microseconds (@see computeBatteryRealtime).
-     * @param iStatsType one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT.
      */
     public Long getBluetoothInStateTime(int state, int iStatsType) throws BatteryInfoUnavailableException
 	{
@@ -2446,8 +2441,6 @@ public class BatteryStatsProxy
 	/**
 	 * Obtain the wakelock stats as a list of Wakelocks (@see com.asksven.android.common.privateapiproxies.Wakelock}
 	 * @param context a Context
-	 * @param iWakeType a type of wakelock @see com.asksven.android.common.privateapiproxies.BatteryStatsTypes
-	 * @param iStatType a type of stat @see com.asksven.android.common.privateapiproxies.BatteryStatsTypes
 	 * @return a List of Wakelock s
 	 * @throws Exception
 	 */
@@ -3158,7 +3151,7 @@ public class BatteryStatsProxy
                     	// we have data separated for Wifi and Mobile
 						myData = new NetworkUsage(uid, "Wifi", bytesReceivedWifi, bytesSentWifi);
 						// try resolving names
-						UidInfo myInfo = UidNameResolver.getInstance(context).getNameForUid(uid);
+						UidInfo myInfo = UidNameResolver.getInstance().getNameForUid(uid);
 						myData.setUidInfo(myInfo);
 						myStats.add(myData);
 
@@ -3171,7 +3164,7 @@ public class BatteryStatsProxy
                     {
 						myData = new NetworkUsage(uid, bytesReceived, bytesSent);
 						// try resolving names
-						UidInfo myInfo = UidNameResolver.getInstance(context).getNameForUid(uid);
+						UidInfo myInfo = UidNameResolver.getInstance().getNameForUid(uid);
 						myData.setUidInfo(myInfo);
 						myStats.add(myData);
                     }
@@ -3188,8 +3181,6 @@ public class BatteryStatsProxy
 
 	/**
 	 * Obtain the network usage stats as a list of NetworkUsages (@see com.asksven.android.common.privateapiproxies.NetworkUsage}
-	 * @param context a Context
-	 * @param iStatType a type of stat @see com.asksven.android.common.privateapiproxies.BatteryStatsTypes
 	 * @return a List of NetworkUsage s
 	 * @throws Exception
 	 */
diff --git a/app/src/main/java/com/asksven/betterbatterystats/BbsApplication.java b/app/src/main/java/com/asksven/betterbatterystats/BbsApplication.java
index 3ec2b88a..3bf878ab 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/BbsApplication.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/BbsApplication.java
@@ -18,6 +18,7 @@ package com.asksven.betterbatterystats;
 import java.util.Locale;
 
 import android.app.Application;
+import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.res.Configuration;
@@ -38,7 +39,7 @@ public class BbsApplication extends Application
 
     private Locale localeEN = Locale.ENGLISH;
     private static String TAG = "BbsApplication";
-
+    private static Context context;
 
 
 
@@ -70,6 +71,8 @@ public class BbsApplication extends Application
     {
         super.onCreate();
 
+        BbsApplication.context = getApplicationContext();
+
         SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(this);
         boolean forceEN = settings.getBoolean("force_en", false);
 
@@ -126,4 +129,9 @@ public class BbsApplication extends Application
 
         }
     }
+
+    public static Context getAppContext()
+    {
+        return BbsApplication.context;
+    }
 }
diff --git a/app/src/main/java/com/asksven/betterbatterystats/HelpActivity.java b/app/src/main/java/com/asksven/betterbatterystats/HelpActivity.java
deleted file mode 100755
index 13c75ab7..00000000
--- a/app/src/main/java/com/asksven/betterbatterystats/HelpActivity.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2011-2015 asksven
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.asksven.betterbatterystats;
-
-import com.asksven.betterbatterystats.R;
-
-import android.os.Bundle;
-import android.support.v7.widget.Toolbar;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-
-public class HelpActivity extends BaseActivity
-{
-	/**
-	 * @see android.app.Activity#onCreate(Bundle)
-	 */
-	@Override
-	protected void onCreate(Bundle savedInstanceState)
-	{
-		super.onCreate(savedInstanceState);
-		
-		String strTitle = getIntent().getStringExtra("title");
-		
-		setContentView(R.layout.helpwebview);
-		
-		Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
-		toolbar.setTitle(strTitle);
-
-	    setSupportActionBar(toolbar);
-	    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-	    getSupportActionBar().setDisplayUseLogoEnabled(false);
-	    
-		WebView browser = (WebView)findViewById(R.id.webview);
-
-	    WebSettings settings = browser.getSettings();
-	    settings.setJavaScriptEnabled(true);
-	    
-	    // retrieve any passed data (filename)
-	    
-	    String strFilename = getIntent().getStringExtra("filename");
-	    String strURL = getIntent().getStringExtra("url");
-	    
-	    // if a URL is passed open it
-	    // if not open a local file
-	    if ( (strURL == null) || (strURL.equals("")) )
-	    {
-		    if (strFilename.equals(""))
-		    {
-		    	browser.loadUrl("file:///android_asset/help.html");
-		    }
-		    else
-		    {
-		    	browser.loadUrl("file:///android_asset/" + strFilename);
-		    }
-	    }
-	    else
-	    {
-	    	browser.loadUrl(strURL);
-	    }
-	}
-}
diff --git a/app/src/main/java/com/asksven/betterbatterystats/PermissionsFragmentActivity.java b/app/src/main/java/com/asksven/betterbatterystats/PermissionsFragmentActivity.java
index dcb4a6d2..afdd2eac 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/PermissionsFragmentActivity.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/PermissionsFragmentActivity.java
@@ -90,7 +90,7 @@ public class PermissionsFragmentActivity extends BaseActivity
 
 			if (m_permDictionary == null)
 			{
-				m_permDictionary = StatsProvider.getInstance(getActivity()).getPermissionMap(getActivity());
+				m_permDictionary = StatsProvider.getInstance().getPermissionMap(getActivity());
 			}
 
 			new LoadStatData().execute(getActivity());
@@ -144,7 +144,7 @@ public class PermissionsFragmentActivity extends BaseActivity
 				try
 				{
 					m_listViewAdapter = new PermissionsAdapter(getActivity(),
-							StatsProvider.getInstance(getActivity()).getRequestedPermissionListForPackage(getActivity(), m_packageName), m_permDictionary);
+							StatsProvider.getInstance().getRequestedPermissionListForPackage(getActivity(), m_packageName), m_permDictionary);
 
 				}
 				catch (Exception e)
diff --git a/app/src/main/java/com/asksven/betterbatterystats/RawStatsActivity.java b/app/src/main/java/com/asksven/betterbatterystats/RawStatsActivity.java
index d9e72df3..f40e541f 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/RawStatsActivity.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/RawStatsActivity.java
@@ -233,7 +233,7 @@ public class RawStatsActivity extends ActionBarListActivity implements AdapterVi
 				Log.i(TAG, "LoadStatData: refreshing display for raw stats");
 				
 				ArrayList<StatElement> stats = null;
-				StatsProvider provider = StatsProvider.getInstance(RawStatsActivity.this);
+				StatsProvider provider = StatsProvider.getInstance();
 				// constants are related to arrays.xml string-array name="stats"
 				switch (m_iStat)
 				{
diff --git a/app/src/main/java/com/asksven/betterbatterystats/ReceiversFragmentActivity.java b/app/src/main/java/com/asksven/betterbatterystats/ReceiversFragmentActivity.java
index f3065a77..a397555c 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/ReceiversFragmentActivity.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/ReceiversFragmentActivity.java
@@ -89,7 +89,7 @@ public class ReceiversFragmentActivity extends BaseActivity
 				try
 				{
 					m_listViewAdapter = new ServicesAdapter(getActivity(),
-							StatsProvider.getInstance(getActivity()).getReceiverListForPackage(getActivity(), m_packageName));
+							StatsProvider.getInstance().getReceiverListForPackage(getActivity(), m_packageName));
 
 				}
 				catch (Exception e)
diff --git a/app/src/main/java/com/asksven/betterbatterystats/ServicesFragmentActivity.java b/app/src/main/java/com/asksven/betterbatterystats/ServicesFragmentActivity.java
index 2ac6dc44..2fa86493 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/ServicesFragmentActivity.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/ServicesFragmentActivity.java
@@ -89,7 +89,7 @@ public class ServicesFragmentActivity extends BaseActivity
 				try
 				{
 					m_listViewAdapter = new ServicesAdapter(getActivity(),
-							StatsProvider.getInstance(getActivity()).getServiceListForPackage(getActivity(), m_packageName));
+							StatsProvider.getInstance().getServiceListForPackage(getActivity(), m_packageName));
 
 				}
 				catch (Exception e)
diff --git a/app/src/main/java/com/asksven/betterbatterystats/StatsActivity.java b/app/src/main/java/com/asksven/betterbatterystats/StatsActivity.java
index 67030dd0..5be366ff 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/StatsActivity.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/StatsActivity.java
@@ -23,7 +23,6 @@ import android.annotation.TargetApi;
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.NotificationManager;
-import android.app.ProgressDialog;
 import android.app.Service;
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -86,13 +85,13 @@ import net.hockeyapp.android.Tracking;
 import net.hockeyapp.android.UpdateManager;
 import net.hockeyapp.android.metrics.MetricsManager;
 
-import de.cketti.library.changelog.ChangeLog;
-
 import java.util.ArrayList;
 
+import de.cketti.library.changelog.ChangeLog;
+
 public class StatsActivity extends ActionBarListActivity 
-		implements AdapterView.OnItemSelectedListener, ObservableScrollView.Callbacks
-{    
+		implements AdapterView.OnItemSelectedListener
+{
 	public static String STAT 				= "STAT";
 	public static String STAT_TYPE_FROM		= "STAT_TYPE_FROM";
 	public static String STAT_TYPE_TO		= "STAT_TYPE_TO";
@@ -102,14 +101,7 @@ public class StatsActivity extends ActionBarListActivity
     private static final int STATE_OFFSCREEN = 1;
     private static final int STATE_RETURNING = 2;
     
-    private TextView mQuickReturnView;
-    private View mPlaceholderView;
-    private ObservableScrollView mObservableScrollView;
-    private ScrollSettleHandler mScrollSettleHandler = new ScrollSettleHandler();
-    private int mMinRawY = 0;
     private int mState = STATE_ONSCREEN;
-    private int mQuickReturnHeight;
-    private int mMaxScrollY;
 	/**
 	 * The logging TAG
 	 */
@@ -801,12 +793,12 @@ public class StatsActivity extends ActionBarListActivity
 
         TextView tvSince = (TextView) findViewById(R.id.TextViewSince);
 
-        long sinceMs = StatsProvider.getInstance(this).getSince(myReferenceFrom, myReferenceTo);
+        long sinceMs = StatsProvider.getInstance().getSince(myReferenceFrom, myReferenceTo);
 
         if (sinceMs != -1)
         {
 	        String sinceText =  DateUtils.formatDuration(sinceMs);
-        	sinceText += " " + StatsProvider.getInstance(this).getBatteryLevelFromTo(myReferenceFrom, myReferenceTo, true);
+        	sinceText += " " + StatsProvider.getInstance().getBatteryLevelFromTo(myReferenceFrom, myReferenceTo, true);
 	        
 	        tvSince.setText(sinceText);
 	        if (LogSettings.DEBUG) Log.i(TAG, "Since " + sinceText);
@@ -897,7 +889,7 @@ public class StatsActivity extends ActionBarListActivity
 		LinearLayout notificationPanel = (LinearLayout) findViewById(R.id.Notification);
 		ListView listView = (ListView) findViewById(android.R.id.list);
 		
-		ArrayList<StatElement> myStats = StatsProvider.getInstance(this).getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName);
+		ArrayList<StatElement> myStats = StatsProvider.getInstance().getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName);
 		if ((myStats != null) && (!myStats.isEmpty()))
 		{
 			// check if notification
@@ -928,7 +920,7 @@ public class StatsActivity extends ActionBarListActivity
     		Reference myReferenceFrom 	= ReferenceStore.getReferenceByName(m_refFromName, StatsActivity.this);
     		Reference myReferenceTo	 	= ReferenceStore.getReferenceByName(m_refToName, StatsActivity.this);
 
-        	long sinceMs = StatsProvider.getInstance(StatsActivity.this).getSince(myReferenceFrom, myReferenceTo);
+        	long sinceMs = StatsProvider.getInstance().getSince(myReferenceFrom, myReferenceTo);
         	m_listViewAdapter.setTotalTime(sinceMs);
 		
 			setListAdapter(m_listViewAdapter);
@@ -957,7 +949,7 @@ public class StatsActivity extends ActionBarListActivity
 			if (refresh[0])
 			{
 				// make sure to create a valid "current" stat
-				StatsProvider.getInstance(StatsActivity.this).setCurrentReference(m_iSorting);		
+				StatsProvider.getInstance().setCurrentReference(m_iSorting);
 			}
 			//super.doInBackground(params);
 			m_listViewAdapter = null;
@@ -966,7 +958,7 @@ public class StatsActivity extends ActionBarListActivity
 				if (LogSettings.DEBUG) Log.i(TAG, "LoadStatData: refreshing display for stats " + m_refFromName + " to " + m_refToName);
 				m_listViewAdapter = new StatsAdapter(
 						StatsActivity.this,
-						StatsProvider.getInstance(StatsActivity.this).getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName),
+						StatsProvider.getInstance().getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName),
 						StatsActivity.this);
 			}
 			catch (BatteryInfoUnavailableException e)
@@ -1021,7 +1013,7 @@ public class StatsActivity extends ActionBarListActivity
     		Reference myReferenceFrom 	= ReferenceStore.getReferenceByName(m_refFromName, StatsActivity.this);
     		Reference myReferenceTo	 	= ReferenceStore.getReferenceByName(m_refToName, StatsActivity.this);
 
-        	long sinceMs = StatsProvider.getInstance(StatsActivity.this).getSince(myReferenceFrom, myReferenceTo);
+        	long sinceMs = StatsProvider.getInstance().getSince(myReferenceFrom, myReferenceTo);
         	if (o != null)
         	{
         		o.setTotalTime(sinceMs);
@@ -1032,7 +1024,7 @@ public class StatsActivity extends ActionBarListActivity
 		        String sinceText = DateUtils.formatDuration(sinceMs);
 		        
 				SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(StatsActivity.this);
-		        sinceText += " " + StatsProvider.getInstance(StatsActivity.this).getBatteryLevelFromTo(myReferenceFrom, myReferenceTo, !sharedPrefs.getBoolean("show_bat_details", false));
+		        sinceText += " " + StatsProvider.getInstance().getBatteryLevelFromTo(myReferenceFrom, myReferenceTo, !sharedPrefs.getBoolean("show_bat_details", false));
 		        
 		        tvSince.setText(sinceText);
 		        if (LogSettings.DEBUG) Log.i(TAG, "Since " + sinceText);
@@ -1049,7 +1041,7 @@ public class StatsActivity extends ActionBarListActivity
 			ArrayList<StatElement> myStats;
 			try
 			{
-				myStats = StatsProvider.getInstance(StatsActivity.this).getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName);
+				myStats = StatsProvider.getInstance().getStatList(m_iStat, m_refFromName, m_iSorting, m_refToName);
 				
 				if ((myStats != null) && (!myStats.isEmpty()))
 				{
@@ -1181,12 +1173,12 @@ public class StatsActivity extends ActionBarListActivity
 						// save logcat if selected
 						if (selectedSaveActions.contains(1))
 						{
-							attachements.add(StatsProvider.getInstance(StatsActivity.this).writeLogcatToFile());
+							attachements.add(StatsProvider.getInstance().writeLogcatToFile());
 						}
 						// save dmesg if selected
 						if (selectedSaveActions.contains(2))
 						{
-							attachements.add(StatsProvider.getInstance(StatsActivity.this).writeDmesgToFile());
+							attachements.add(StatsProvider.getInstance().writeDmesgToFile());
 						}
 
 
@@ -1221,12 +1213,12 @@ public class StatsActivity extends ActionBarListActivity
 							// save logcat if selected
 							if (selectedSaveActions.contains(1))
 							{
-								StatsProvider.getInstance(StatsActivity.this).writeLogcatToFile();
+								StatsProvider.getInstance().writeLogcatToFile();
 							}
 							// save dmesg if selected
 							if (selectedSaveActions.contains(2))
 							{
-								StatsProvider.getInstance(StatsActivity.this).writeDmesgToFile();
+								StatsProvider.getInstance().writeDmesgToFile();
 							}
 						
 							Snackbar
@@ -1254,106 +1246,4 @@ public class StatsActivity extends ActionBarListActivity
 		return builder.create();
 	}
 	
-	@Override
-    public void onDownMotionEvent() {
-        mScrollSettleHandler.setSettleEnabled(false);
-    }
-	
-	@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-	@Override
-    public void onScrollChanged(int scrollY) {
-        scrollY = Math.min(mMaxScrollY, scrollY);
-
-        mScrollSettleHandler.onScroll(scrollY);
-
-        int rawY = mPlaceholderView.getTop() - scrollY;
-        int translationY = 0;
-
-        switch (mState) {
-            case STATE_OFFSCREEN:
-                if (rawY <= mMinRawY) {
-                    mMinRawY = rawY;
-                } else {
-                    mState = STATE_RETURNING;
-                }
-                translationY = rawY;
-                break;
-
-            case STATE_ONSCREEN:
-                if (rawY < -mQuickReturnHeight) {
-                    mState = STATE_OFFSCREEN;
-                    mMinRawY = rawY;
-                }
-                translationY = rawY;
-                break;
-
-            case STATE_RETURNING:
-                translationY = (rawY - mMinRawY) - mQuickReturnHeight;
-                if (translationY > 0) {
-                    translationY = 0;
-                    mMinRawY = rawY - mQuickReturnHeight;
-                }
-
-                if (rawY > 0) {
-                    mState = STATE_ONSCREEN;
-                    translationY = rawY;
-                }
-
-                if (translationY < -mQuickReturnHeight) {
-                    mState = STATE_OFFSCREEN;
-                    mMinRawY = rawY;
-                }
-                break;
-        }
-        mQuickReturnView.animate().cancel();
-        mQuickReturnView.setTranslationY(translationY + scrollY);
-    }
-	
-	@Override
-    public void onUpOrCancelMotionEvent() {
-        mScrollSettleHandler.setSettleEnabled(true);
-        mScrollSettleHandler.onScroll(mObservableScrollView.getScrollY());
-    }
-	
-	
-	private class ScrollSettleHandler extends Handler {
-        private static final int SETTLE_DELAY_MILLIS = 100;
-
-        private int mSettledScrollY = Integer.MIN_VALUE;
-        private boolean mSettleEnabled;
-
-        public void onScroll(int scrollY) {
-            if (mSettledScrollY != scrollY) {
-                 // Clear any pending messages and post delayed
-                removeMessages(0);
-                sendEmptyMessageDelayed(0, SETTLE_DELAY_MILLIS);
-                mSettledScrollY = scrollY;
-            }
-        }
-
-        public void setSettleEnabled(boolean settleEnabled) {
-            mSettleEnabled = settleEnabled;
-        }
-
-        @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-		@Override
-        public void handleMessage(Message msg) {
-            // Handle the scroll settling.
-            if (STATE_RETURNING == mState && mSettleEnabled) {
-                int mDestTranslationY;
-                if (mSettledScrollY - mQuickReturnView.getTranslationY() > mQuickReturnHeight / 2) {
-                    mState = STATE_OFFSCREEN;
-                    mDestTranslationY = Math.max(
-                            mSettledScrollY - mQuickReturnHeight,
-                            mPlaceholderView.getTop());
-                } else {
-                    mDestTranslationY = mSettledScrollY;
-                }
-
-                mMinRawY = mPlaceholderView.getTop() - mQuickReturnHeight - mDestTranslationY;
-                mQuickReturnView.animate().translationY(mDestTranslationY);
-            }
-            mSettledScrollY = Integer.MIN_VALUE; // reset
-        }
-    }
 }
diff --git a/app/src/main/java/com/asksven/betterbatterystats/adapters/StatsAdapter.java b/app/src/main/java/com/asksven/betterbatterystats/adapters/StatsAdapter.java
index b4208022..69284b8f 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/adapters/StatsAdapter.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/adapters/StatsAdapter.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 asksven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 /*
  * Copyright (C) 2011-2014 asksven
  *
@@ -209,7 +224,7 @@ public class StatsAdapter extends BaseAdapter
 		// We need to handle an exception here: Sensors do not have a name so we use the fqn instead
         if (entry instanceof SensorUsage)
         {
-        	tvName.setText(entry.getFqn(UidNameResolver.getInstance(m_context)));
+        	tvName.setText(entry.getFqn(UidNameResolver.getInstance()));
         	
         }
         else
@@ -223,7 +238,7 @@ public class StatsAdapter extends BaseAdapter
         iconKb.setVisibility(View.INVISIBLE);
 
         TextView tvFqn = (TextView) convertView.findViewById(R.id.TextViewFqn);
-        tvFqn.setText(entry.getFqn(UidNameResolver.getInstance(m_context)));
+        tvFqn.setText(entry.getFqn(UidNameResolver.getInstance()));
 
         TextView tvData = (TextView) convertView.findViewById(R.id.TextViewData);
 
@@ -340,7 +355,7 @@ public class StatsAdapter extends BaseAdapter
         else
         {
         	iconView.setVisibility(View.VISIBLE); 
-        	iconView.setImageDrawable(entry.getIcon(UidNameResolver.getInstance(m_context)));
+        	iconView.setImageDrawable(entry.getIcon(UidNameResolver.getInstance()));
 	        // set a click listener for the list
 	        iconView.setOnClickListener(new OnPackageClickListener(position));
 
@@ -352,60 +367,9 @@ public class StatsAdapter extends BaseAdapter
         	convertView.setOnClickListener(new OnItemClickListener(position));
         }
         
-//        // show / hide set dividers
-//        ListView myList = (ListView) convertView.getListView(); //findViewById(R.id.id.list);
-//        myList.setDivider(new ColorDrawable(0x99F10529));
-//        myList.setDividerHeight(1);
         return convertView;
     }
     
-//    /**
-//     * Handler for on click of the KB icon
-//     * @author sven
-//     *
-//     */
-//    private class OnIconClickListener implements OnClickListener
-//    {           
-//        private int m_iPosition;
-//        OnIconClickListener(int position)
-//        {
-//                m_iPosition = position;
-//        }
-//        
-//        @Override
-//        public void onClick(View arg0)
-//        {
-//        	StatElement entry = (StatElement) getItem(m_iPosition);
-//            KbData kb = KbReader.getInstance().read(m_context);
-//        	// the timing may lead to m_kb not being initialized yet, it must be checked
-//        	if (kb == null)
-//        	{
-//        		return;
-//        	}
-//        	KbEntry kbentry = kb.findByStatElement(entry.getName(), entry.getFqn(UidNameResolver.getInstance(StatsAdapter.this.m_context)));
-//  	      	if (kbentry != null)
-//  	      	{
-//	  	      	SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(StatsAdapter.this.m_context);
-//	  	      	
-//	  	      	String url = kbentry.getUrl();
-//	  	      	
-//	  	        if (sharedPrefs.getBoolean("kb_ext_browser", true))
-//	  	        {
-//					
-//					Intent intent = new Intent("android.intent.action.VIEW",
-//							Uri.parse(url)); 
-//					StatsAdapter.this.m_context.startActivity(intent);
-//	  	        }
-//	  	        else
-//	  	        {
-//		  	      	Intent intentKB = new Intent(StatsAdapter.this.m_context,
-//		  	      			HelpActivity.class);
-//		  	      	intentKB.putExtra("url", url);
-//		  	        StatsAdapter.this.m_context.startActivity(intentKB);
-//	  	        }           
-//  	      	}
-//        }
-//    }
 
     /**
      * Handler for on click of the icon
@@ -426,7 +390,7 @@ public class StatsAdapter extends BaseAdapter
         	StatElement entry = (StatElement) getItem(m_iPosition);
         	
         	Context ctx = arg0.getContext();
-        	if (entry.getIcon(UidNameResolver.getInstance(m_context)) == null)
+        	if (entry.getIcon(UidNameResolver.getInstance()) == null)
         	{
         		return;
         	}
@@ -467,7 +431,7 @@ public class StatsAdapter extends BaseAdapter
 	        	dialog.setContentView(R.layout.details_dialog);
 	        	
 	        	TextView dialogTitle = (TextView) dialog.findViewById(R.id.dialog_title);
-	        	dialogTitle.setText(entry.getFqn(UidNameResolver.getInstance(m_context)));
+	        	dialogTitle.setText(entry.getFqn(UidNameResolver.getInstance()));
 	        	TextView title = (TextView) dialog.findViewById(R.id.title);
 	        	TextView text = (TextView) dialog.findViewById(R.id.text);
 	        	title.setText(entry.getData((long)m_timeSince));
diff --git a/app/src/main/java/com/asksven/betterbatterystats/data/Reading.java b/app/src/main/java/com/asksven/betterbatterystats/data/Reading.java
index e0e64fdd..1f109a00 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/data/Reading.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/data/Reading.java
@@ -137,7 +137,7 @@ public class Reading implements Serializable
 				
 		creationDate 		= DateUtils.now();
 		statType 			= refFrom.getLabel() + " to "+ refTo.getLabel();
-		totalTime			= StatsProvider.getInstance(context).getSince(refFrom, refTo);
+		totalTime			= StatsProvider.getInstance().getSince(refFrom, refTo);
 		duration 			= DateUtils.formatDuration(totalTime);
 		buildVersionRelease = Build.VERSION.RELEASE;
 		buildBrand 			= Build.BRAND;
@@ -176,10 +176,10 @@ public class Reading implements Serializable
 		xposedBatteryStatsEnabled = sharedPrefs.getBoolean("ignore_system_app", false);
 		seLinuxPolicy = SysUtils.getSELinuxPolicy();
 		
-		batteryLevelLost 		= StatsProvider.getInstance(context).getBatteryLevelStat(refFrom, refTo);
-		batteryVoltageLost 		= StatsProvider.getInstance(context).getBatteryVoltageStat(refFrom, refTo);
-		batteryLevelLostText 	= StatsProvider.getInstance(context).getBatteryLevelFromTo(refFrom, refTo, false);
-		batteryVoltageLostText 	= StatsProvider.getInstance(context).getBatteryVoltageFromTo(refFrom, refTo);
+		batteryLevelLost 		= StatsProvider.getInstance().getBatteryLevelStat(refFrom, refTo);
+		batteryVoltageLost 		= StatsProvider.getInstance().getBatteryVoltageStat(refFrom, refTo);
+		batteryLevelLostText 	= StatsProvider.getInstance().getBatteryLevelFromTo(refFrom, refTo, false);
+		batteryVoltageLostText 	= StatsProvider.getInstance().getBatteryVoltageFromTo(refFrom, refTo);
 
 		// populate the stats
 		
@@ -189,11 +189,11 @@ public class Reading implements Serializable
 		
 		try
 		{
-			ArrayList<StatElement> tempStats = StatsProvider.getInstance(context).getOtherUsageStatList(bFilterStats, refFrom, false, false, refTo);
+			ArrayList<StatElement> tempStats = StatsProvider.getInstance().getOtherUsageStatList(bFilterStats, refFrom, false, false, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 				
 				if (tempStats.get(i) instanceof Misc)
 				{
@@ -205,11 +205,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getWakelockStatList(bFilterStats, refFrom, iPctType, iSort, refTo);
+			tempStats = StatsProvider.getInstance().getWakelockStatList(bFilterStats, refFrom, iPctType, iSort, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof Wakelock)
 				{
@@ -221,11 +221,11 @@ public class Reading implements Serializable
 				}
 			}
 
-			tempStats = StatsProvider.getInstance(context).getKernelWakelockStatList(bFilterStats, refFrom, iPctType, iSort, refTo);
+			tempStats = StatsProvider.getInstance().getKernelWakelockStatList(bFilterStats, refFrom, iPctType, iSort, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof NativeKernelWakelock)
 				{
@@ -237,11 +237,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getProcessStatList(bFilterStats, refFrom, iSort, refTo);
+			tempStats = StatsProvider.getInstance().getProcessStatList(bFilterStats, refFrom, iSort, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof Process)
 				{
@@ -253,11 +253,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getAlarmsStatList(bFilterStats, refFrom, refTo);
+			tempStats = StatsProvider.getInstance().getAlarmsStatList(bFilterStats, refFrom, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof Alarm)
 				{
@@ -269,11 +269,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getNetworkUsageStatList(bFilterStats, refFrom, refTo);
+			tempStats = StatsProvider.getInstance().getNetworkUsageStatList(bFilterStats, refFrom, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof NetworkUsage)
 				{
@@ -285,11 +285,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getCpuStateList(refFrom, refTo, bFilterStats);
+			tempStats = StatsProvider.getInstance().getCpuStateList(refFrom, refTo, bFilterStats);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof State)
 				{
@@ -301,11 +301,11 @@ public class Reading implements Serializable
 				}
 			}
 			
-			tempStats = StatsProvider.getInstance(context).getSensorStatList(false, refFrom, refTo);
+			tempStats = StatsProvider.getInstance().getSensorStatList(false, refFrom, refTo);
 			for (int i = 0; i < tempStats.size(); i++)
 			{
 				// make sure to load all data (even the lazy loaded one)
-				tempStats.get(i).getFqn(UidNameResolver.getInstance(context));
+				tempStats.get(i).getFqn(UidNameResolver.getInstance());
 
 				if (tempStats.get(i) instanceof SensorUsage)
 				{
@@ -579,7 +579,7 @@ public class Reading implements Serializable
 			{
 				for (int i = 0; i < myList.size(); i++)
 				{
-					out.write(myList.get(i).getDumpData(UidNameResolver.getInstance(context), totalTime) + "\n");
+					out.write(myList.get(i).getDumpData(UidNameResolver.getInstance(), totalTime) + "\n");
 		
 				}
 			}
diff --git a/app/src/main/java/com/asksven/betterbatterystats/data/ReferenceDBHelper.java b/app/src/main/java/com/asksven/betterbatterystats/data/ReferenceDBHelper.java
index 8f2c3b6a..3d9eed78 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/data/ReferenceDBHelper.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/data/ReferenceDBHelper.java
@@ -52,7 +52,6 @@ public class ReferenceDBHelper
     private static final String TAG 			= "ReferenceDBHelper";
     private static final String[] COLS 			= new String[] {"ref_name", "ref_type", "ref_label", "time_created", "ref_blob"};
 
-    Context m_context;
     static ReferenceDBHelper m_helper;
 
     private static final String DBVERSION_CREATE = 
@@ -90,10 +89,9 @@ public class ReferenceDBHelper
      */
     private ReferenceDBHelper(Context ctx)
     {
-    	m_context = ctx;
 		try
 		{
-			m_db = m_context.openOrCreateDatabase(DATABASE_NAME, SQLiteDatabase.CREATE_IF_NECESSARY, null);
+			m_db = ctx.openOrCreateDatabase(DATABASE_NAME, SQLiteDatabase.CREATE_IF_NECESSARY, null);
 			
 
 			// Check for the existence of the DBVERSION table
diff --git a/app/src/main/java/com/asksven/betterbatterystats/data/StatsProvider.java b/app/src/main/java/com/asksven/betterbatterystats/data/StatsProvider.java
index 2112368e..40d57cda 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/data/StatsProvider.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/data/StatsProvider.java
@@ -70,6 +70,7 @@ import com.asksven.android.common.utils.GenericLogger;
 import com.asksven.android.common.utils.StringUtils;
 import com.asksven.android.common.utils.SysUtils;
 import com.asksven.betterbatterystats.ActiveMonAlarmReceiver;
+import com.asksven.betterbatterystats.BbsApplication;
 import com.asksven.betterbatterystats.LogSettings;
 import com.asksven.betterbatterystats.R;
 
@@ -93,9 +94,6 @@ public class StatsProvider
 	/** the singleton instance */
 	static StatsProvider m_statsProvider = null;
 
-	/** the application context */
-	static Context m_context = null;
-
 	/** constant for custom stats */
 	// dependent on arrays.xml
 	public final static int STATS_CHARGED 		= 0;
@@ -120,17 +118,13 @@ public class StatsProvider
 	/**
 	 * returns a singleton instance
 	 * 
-	 * @param ctx
-	 *            the application context
 	 * @return the singleton StatsProvider
 	 */
-	public static StatsProvider getInstance(Context ctx)
+	public static StatsProvider getInstance()
 	{
 		if (m_statsProvider == null)
 		{
 			m_statsProvider = new StatsProvider();
-			m_context = ctx;
-
 		}
 
 		return m_statsProvider;
@@ -144,13 +138,15 @@ public class StatsProvider
 	public ArrayList<StatElement> getStatList(int iStat, String refFromName,
 			int iSort, String refToName) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(BbsApplication.getAppContext());
 		boolean bFilterStats = sharedPrefs.getBoolean("filter_data", true);
 		boolean developerMode = sharedPrefs.getBoolean("developer", false);
 		
-		Reference refFrom = ReferenceStore.getReferenceByName(refFromName, m_context);
-		Reference refTo = ReferenceStore.getReferenceByName(refToName, m_context);
+		Reference refFrom = ReferenceStore.getReferenceByName(refFromName, ctx);
+		Reference refTo = ReferenceStore.getReferenceByName(refToName, ctx);
 		
 		if ((refFrom == null) || (refTo == null) || (refFromName == null) || (refToName == null) || (refFromName.equals("")) || (refToName.equals("")))
 		{
@@ -159,16 +155,16 @@ public class StatsProvider
 		}
 		if (refFrom.equals(refToName))
 		{
-			Toast.makeText(m_context, m_context.getString(R.string.message_identical_references, refFromName, refToName), Toast.LENGTH_LONG).show();			
+			Toast.makeText(ctx, ctx.getString(R.string.message_identical_references, refFromName, refToName), Toast.LENGTH_LONG).show();
 
 		} 
 		
 		int iPctType = 0;
 
-		if ((!developerMode) && (this.getIsCharging(m_context)))
+		if ((!developerMode) && (this.getIsCharging(ctx)))
 		{
 			ArrayList<StatElement> myRet = new ArrayList<StatElement>();
-			myRet.add(new Notification(m_context.getString(R.string.NO_STATS_WHEN_CHARGING)));
+			myRet.add(new Notification(ctx.getString(R.string.NO_STATS_WHEN_CHARGING)));
 			return myRet;
 		}
 		// try
@@ -271,23 +267,25 @@ public class StatsProvider
 	public ArrayList<StatElement> getAlarmsStatList(boolean bFilter,
 			Reference refFrom, Reference refTo) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);		
 
 		// stop straight away of root features are disabled
 		// to process alarms we need either root or the perms to access the private API
-		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context) || RootShell.getInstance().hasRootPermissions()) )
+		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx) || RootShell.getInstance().hasRootPermissions()) )
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_PERM_ERR)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_PERM_ERR)));
 			return myStats;
 		}
 
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -299,7 +297,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 		//Collections.sort(myAlarms);
@@ -375,11 +373,13 @@ public class StatsProvider
 	
 	public ArrayList<StatElement> getCurrentAlarmsStatList(boolean bFilter) throws Exception
 	{
+
+		Context ctx = BbsApplication.getAppContext();
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 
 		// stop straight away of root features are disabled
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);		
 
 		ArrayList<StatElement> myAlarms = null;
@@ -387,7 +387,7 @@ public class StatsProvider
 		if (sharedPrefs.getBoolean("force_alarms_api", false))
 		{
 			Log.i(TAG, "Setting set to force the use of the API for alarms");
-			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 			int statsType = 0;
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
 			{
@@ -398,19 +398,19 @@ public class StatsProvider
 				statsType = BatteryStatsTypes.STATS_CURRENT;
 			}		
 			
-			myAlarms = mStats.getWakeupStats(m_context, statsType);
+			myAlarms = mStats.getWakeupStats(ctx, statsType);
 		}
 		else
 		{
 			// use root if available as root delivers more data
-			if (SysUtils.hasBatteryStatsPermission(m_context) && AlarmsDumpsys.alarmsAccessible())
+			if (SysUtils.hasBatteryStatsPermission(ctx) && AlarmsDumpsys.alarmsAccessible())
 			{
-				myAlarms = AlarmsDumpsys.getAlarms(!SysUtils.hasDumpsysPermission(m_context));//, false);			
+				myAlarms = AlarmsDumpsys.getAlarms(!SysUtils.hasDumpsysPermission(ctx));//, false);
 			}
-			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context))
+			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx))
 			{
 				Log.i(TAG, "Accessing Alarms in API mode as dumpsys has failed");
-				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 				int statsType = 0;
 				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
 				{
@@ -421,7 +421,7 @@ public class StatsProvider
 					statsType = BatteryStatsTypes.STATS_CURRENT;
 				}		
 
-				myAlarms = mStats.getWakeupStats(m_context, statsType);
+				myAlarms = mStats.getWakeupStats(ctx, statsType);
 			}
 			else
 			{
@@ -478,23 +478,24 @@ public class StatsProvider
 	public ArrayList<StatElement> getSensorStatList(boolean bFilter,
 			Reference refFrom, Reference refTo) throws Exception
 	{
+        Context ctx = BbsApplication.getAppContext();
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);		
 
 		// stop straight away of root features are disabled
 		// to process alarms we need either root or the perms to access the private API
-		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context) || RootShell.getInstance().hasRootPermissions()) )
+		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx) || RootShell.getInstance().hasRootPermissions()) )
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_PERM_ERR)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_PERM_ERR)));
 			return myStats;
 		}
 
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -506,7 +507,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 
@@ -581,14 +582,16 @@ public class StatsProvider
 	
 	public ArrayList<StatElement> getCurrentSensorStatList(boolean bFilter) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myRetStats = new ArrayList<StatElement>();
 
 		// stop straight away of root features are disabled
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);		
 
-		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 		int statsType = 0;
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
 		{
@@ -601,7 +604,7 @@ public class StatsProvider
 
 		long elapsedRealtime = SystemClock.elapsedRealtime();
 
-		ArrayList<SensorUsage> mySensorStats = mStats.getSensorStats(m_context, elapsedRealtime, statsType);
+		ArrayList<SensorUsage> mySensorStats = mStats.getSensorStats(ctx, elapsedRealtime, statsType);
 		ArrayList<SensorUsage> myStats = new ArrayList<SensorUsage>();
 		
 		for (int i = 0; i < mySensorStats.size(); i++)
@@ -645,25 +648,27 @@ public class StatsProvider
 			Reference refFrom, int iSort, Reference refTo) throws Exception
 	{
 
+		Context ctx = BbsApplication.getAppContext();
+
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		
-		if (!(SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded) )
+		if (!(SysUtils.hasBatteryStatsPermission(ctx) || permsNotNeeded) )
 		{
 			// stop straight away of root features are disabled
-			if (!SysUtils.hasBatteryStatsPermission(m_context))
+			if (!SysUtils.hasBatteryStatsPermission(ctx))
 			{
-				myStats.add(new Notification(m_context.getString(R.string.NO_ROOT_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_ROOT_ERR)));
 				return myStats;
 			}
 		}
 		
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -676,7 +681,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 		
@@ -753,16 +758,18 @@ public class StatsProvider
 			int iSort) throws Exception
 	{
 
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myProcesses = null;
 		ArrayList<Process> myRetProcesses = new ArrayList<Process>();
 
-		if ( !SysUtils.hasBatteryStatsPermission(m_context) )
+		if ( !SysUtils.hasBatteryStatsPermission(ctx) )
 		{
-			myProcesses = ProcessStatsDumpsys.getProcesses(m_context);
+			myProcesses = ProcessStatsDumpsys.getProcesses(ctx);
 		}
 		else
 		{
-			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 			int statsType = 0;
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
 			{
@@ -773,7 +780,7 @@ public class StatsProvider
 				statsType = BatteryStatsTypes.STATS_CURRENT;
 			}		
 
-			myProcesses = mStats.getProcessStats(m_context, statsType);
+			myProcesses = mStats.getProcessStats(ctx, statsType);
 		}
 
 		// add elements and recalculate the total
@@ -820,26 +827,28 @@ public class StatsProvider
 	public ArrayList<StatElement> getWakelockStatList(boolean bFilter,
 			Reference refFrom, int iPctType, int iSort, Reference refTo) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
-		if ( !(SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded) )
+		if ( !(SysUtils.hasBatteryStatsPermission(ctx) || permsNotNeeded) )
 		{
 			// stop straight away of root features are disabled
-			if (!SysUtils.hasBatteryStatsPermission(m_context) && !permsNotNeeded)
+			if (!SysUtils.hasBatteryStatsPermission(ctx) && !permsNotNeeded)
 			{
-				myStats.add(new Notification(m_context.getString(R.string.NO_ROOT_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_ROOT_ERR)));
 				return myStats;
 			}
 		}
 
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -851,7 +860,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 
@@ -957,10 +966,12 @@ public class StatsProvider
 	public ArrayList<StatElement> getCurrentWakelockStatList(boolean bFilter,
 			int iPctType, int iSort) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		ArrayList<StatElement> myWakelocks = null;
 		
-		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 
 		int statsType = 0;
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -972,7 +983,7 @@ public class StatsProvider
 			statsType = BatteryStatsTypes.STATS_CURRENT;
 		}		
 
-		myWakelocks = mStats.getWakelockStats(m_context,
+		myWakelocks = mStats.getWakelockStats(ctx,
 				BatteryStatsTypes.WAKE_TYPE_PARTIAL,
 				statsType, iPctType);
 
@@ -1039,21 +1050,23 @@ public class StatsProvider
 			boolean bFilter, Reference refFrom, int iPctType, int iSort, Reference refTo)
 			throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
-		if (!(Wakelocks.fileExists() || WakeupSources.fileExists() || permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context)))
+		if (!(Wakelocks.fileExists() || WakeupSources.fileExists() || permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx)))
 		{
-			myStats.add(new Notification(m_context.getString(R.string.KWL_ACCESS_ERROR)));
+			myStats.add(new Notification(ctx.getString(R.string.KWL_ACCESS_ERROR)));
 			return myStats;
 		}
 		
 		if ((refFrom == null) || (refTo == null))
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -1065,7 +1078,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 		
@@ -1158,18 +1171,20 @@ public class StatsProvider
 	public ArrayList<StatElement> getCurrentKernelWakelockStatList(boolean bFilter, int iPctType, int iSort)
 			throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		ArrayList<StatElement> myKernelWakelocks = null;
 		
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 
 		if (sharedPrefs.getBoolean("force_kwl_api", false))
 		{
 			Log.i(TAG, "Setting set to force the use of the API for kernel wakelocks");
-			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 			
 			int statsType = 0;
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -1181,7 +1196,7 @@ public class StatsProvider
 				statsType = BatteryStatsTypes.STATS_CURRENT;
 			}		
 
-			myKernelWakelocks = mStats.getKernelWakelockStats(m_context, statsType, false);
+			myKernelWakelocks = mStats.getKernelWakelockStats(ctx, statsType, false);
 		}
 		else
 		{
@@ -1192,7 +1207,7 @@ public class StatsProvider
 				if (Wakelocks.fileExists())
 				{
 					Log.i(TAG, "Using Wakelocks file");
-					myKernelWakelocks = Wakelocks.parseProcWakelocks(m_context);	
+					myKernelWakelocks = Wakelocks.parseProcWakelocks(ctx);
 				}
 				else
 				{
@@ -1204,18 +1219,18 @@ public class StatsProvider
 							&& (Build.DEVICE.equals("g3"))|| Build.DEVICE.equals("p1") || (Build.DEVICE.equals("g2")))
 					{
 						Log.i(TAG, "Using LG G2, G3, G4 specific wakeup sources");
-						myKernelWakelocks = WakeupSourcesLg.parseWakeupSources(m_context);
+						myKernelWakelocks = WakeupSourcesLg.parseWakeupSources(ctx);
 					}
 					else
 					{
-						myKernelWakelocks = WakeupSources.parseWakeupSources(m_context);
+						myKernelWakelocks = WakeupSources.parseWakeupSources(ctx);
 					}
 				}
 			}
-			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context))
+			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx))
 			{
 				Log.i(TAG, "Falling back to API");
-				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 				
 				int statsType = 0;
 				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -1227,7 +1242,7 @@ public class StatsProvider
 					statsType = BatteryStatsTypes.STATS_CURRENT;
 				}		
 
-				myKernelWakelocks = mStats.getKernelWakelockStats(m_context, statsType, false);					
+				myKernelWakelocks = mStats.getKernelWakelockStats(ctx, statsType, false);
 			}
 			else
 			{
@@ -1294,22 +1309,24 @@ public class StatsProvider
 	public ArrayList<StatElement> getNetworkUsageStatList(
 			boolean bFilter, Reference refFrom, Reference refTo) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();			
 
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
 		// stop straight away if no root permissions or no perms to access data directly
-		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context) || RootShell.getInstance().hasRootPermissions()) )
+		if (!(permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx) || RootShell.getInstance().hasRootPermissions()) )
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_PERM_ERR)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_PERM_ERR)));
 			return myStats;
 		}
 
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
@@ -1321,7 +1338,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 
@@ -1405,11 +1422,13 @@ public class StatsProvider
 
 	public ArrayList<StatElement> getCurrentNetworkUsageStatList(boolean bFilter) throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 
 		// stop straight away of root features are disabled
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 		
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 
@@ -1418,7 +1437,7 @@ public class StatsProvider
 		if (sharedPrefs.getBoolean("force_network_api", false))
 		{
 			Log.i(TAG, "Setting set to force the use of the API for kernel wakelocks");
-			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 			
 			int statsType = 0;
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -1430,7 +1449,7 @@ public class StatsProvider
 				statsType = BatteryStatsTypes.STATS_CURRENT;
 			}		
 
-			myNetworkStats = mStats.getNetworkUsageStats(m_context, statsType);
+			myNetworkStats = mStats.getNetworkUsageStats(ctx, statsType);
 		}
 		else
 		{
@@ -1439,10 +1458,10 @@ public class StatsProvider
 				myNetworkStats = Netstats.parseNetstats();
 				
 			}
-			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(m_context))
+			else if (permsNotNeeded || SysUtils.hasBatteryStatsPermission(ctx))
 			{
 				Log.i(TAG, "Falling back to API");
-				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+				BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 				
 				int statsType = 0;
 				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -1454,7 +1473,7 @@ public class StatsProvider
 					statsType = BatteryStatsTypes.STATS_CURRENT;
 				}		
 
-				myNetworkStats = mStats.getNetworkUsageStats(m_context, statsType);					
+				myNetworkStats = mStats.getNetworkUsageStats(ctx, statsType);
 			}
 			else
 			{
@@ -1512,19 +1531,21 @@ public class StatsProvider
 			throws Exception
 
 	{
+        Context ctx = BbsApplication.getAppContext();
+
 		// List to store the other usages to
 		ArrayList<StatElement> myStates = refTo.m_refCpuStates;
 
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 
 		if (refTo.m_refCpuStates == null)
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 
@@ -1629,7 +1650,7 @@ public class StatsProvider
 				Field field = fields[i];
 				PermissionInfo info = pm.getPermissionInfo(
 						field.get(field.getName()).toString(),
-						PackageManager.GET_PERMISSIONS);
+						PackageManager.GET_META_DATA);
 				Permission perm = new Permission();
 				perm.name = info.name;
 				final CharSequence chars = info.loadDescription(context
@@ -1768,12 +1789,14 @@ public class StatsProvider
 			Reference refFrom, boolean bFilterView, boolean bWidget, Reference refTo)
 			throws Exception
 	{
-	
+
+        Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		// if on of the refs is null return
 		if ((refFrom == null) || (refTo == null))
 		{
-				myStats.add(new Notification(m_context.getString(R.string.NO_REF_ERR)));
+				myStats.add(new Notification(ctx.getString(R.string.NO_REF_ERR)));
 			return myStats;
 		}
 		
@@ -1786,7 +1809,7 @@ public class StatsProvider
 		}
 		else
 		{
-			myStats.add(new Notification(m_context.getString(R.string.NO_STATS)));
+			myStats.add(new Notification(ctx.getString(R.string.NO_STATS)));
 			return myStats;
 		}
 
@@ -1838,7 +1861,7 @@ public class StatsProvider
 			Misc usage = ((Misc)myUsages.get(i)).clone();
 			if (LogSettings.DEBUG)
 			{
-				Log.d(TAG, "Current value: " + usage.getName() + " " + usage.getData(StatsProvider.getInstance(m_context).getSince(refFrom, refTo)));
+				Log.d(TAG, "Current value: " + usage.getName() + " " + usage.getData(StatsProvider.getInstance().getSince(refFrom, refTo)));
 			}
 			if ((!bFilter) || (usage.getTimeOn() > 0))
 			{
@@ -1847,7 +1870,7 @@ public class StatsProvider
 				{
 					if (LogSettings.DEBUG)
 					{
-						Log.d(TAG, "Result value: " + usage.getName() + " "	+ usage.getData(StatsProvider.getInstance(m_context).getSince(refFrom, refTo)));
+						Log.d(TAG, "Result value: " + usage.getName() + " "	+ usage.getData(StatsProvider.getInstance().getSince(refFrom, refTo)));
 					}
 					myStats.add((StatElement) usage);
 				}
@@ -1860,16 +1883,18 @@ public class StatsProvider
 			boolean bFilterView, boolean bWidget)
 			throws Exception
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		ArrayList<StatElement> myStats = new ArrayList<StatElement>();
 		// List to store the other usages to
 		ArrayList<StatElement> myUsages = new ArrayList<StatElement>();
 
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false); 
 		
-		if ( !SysUtils.hasBatteryStatsPermission(m_context) && !permsNotNeeded)
+		if ( !SysUtils.hasBatteryStatsPermission(ctx) && !permsNotNeeded)
 		{
 
 			long elapsedRealtime = SystemClock.elapsedRealtime();
@@ -1891,7 +1916,7 @@ public class StatsProvider
 		}
 		else
 		{	
-			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);	
+			BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 	
 			long rawRealtime = SystemClock.elapsedRealtime() * 1000; 
 			
@@ -2024,7 +2049,7 @@ public class StatsProvider
 			{
 				if (Build.VERSION.SDK_INT >= 21)
 				{
-					syncTime 	= mStats.getSyncOnTime(m_context, batteryRealtime, statsType) / 1000;
+					syncTime 	= mStats.getSyncOnTime(ctx, batteryRealtime, statsType) / 1000;
 				}
 			}
 			catch (BatteryInfoUnavailableException e)
@@ -2368,8 +2393,6 @@ public class StatsProvider
 	/**
 	 * Get the battery level lost since a given ref
 	 * 
-	 * @param iStatType
-	 *            the reference
 	 * @return the lost battery level
 	 */
 	public int getBatteryLevelStat(Reference refFrom, Reference refTo)
@@ -2400,8 +2423,6 @@ public class StatsProvider
 	/**
 	 * Get the battery level lost since a given ref
 	 * 
-	 * @param iStatType
-	 *            the reference
 	 * @return the lost battery level
 	 */
 	public String getBatteryLevelFromTo(Reference refFrom, Reference refTo, boolean concise)
@@ -2456,8 +2477,6 @@ public class StatsProvider
 	/**
 	 * Get the battery voltage lost since a given ref
 	 * 
-	 * @param iStatType
-	 *            the reference
 	 * @return the lost battery level
 	 */
 	public int getBatteryVoltageStat(Reference refFrom, Reference refTo)
@@ -2491,8 +2510,6 @@ public class StatsProvider
 	/**
 	 * Get the battery voltage lost since a given ref
 	 * 
-	 * @param iStatType
-	 *            the reference
 	 * @return the lost battery level
 	 */
 	public String getBatteryVoltageFromTo(Reference refFrom, Reference refTo)
@@ -2599,7 +2616,7 @@ public class StatsProvider
 	 */
 	public boolean hasScreenOffRef()
 	{
-		Reference thisRef = ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, m_context);
+		Reference thisRef = ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, BbsApplication.getAppContext());
 
 		return ((thisRef != null) && (thisRef.m_refOther != null));
 	}
@@ -2611,7 +2628,7 @@ public class StatsProvider
 	 */
 	public boolean hasCustomRef()
 	{
-		Reference thisRef = ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, m_context);
+		Reference thisRef = ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, BbsApplication.getAppContext());
 		return ((thisRef != null) && (thisRef.m_refOther != null));
 	}
 
@@ -2622,7 +2639,7 @@ public class StatsProvider
 	 */
 	public boolean hasSinceChargedRef()
 	{
-		Reference thisRef = ReferenceStore.getReferenceByName(Reference.CHARGED_REF_FILENAME, m_context);
+		Reference thisRef = ReferenceStore.getReferenceByName(Reference.CHARGED_REF_FILENAME, BbsApplication.getAppContext());
 
 		return ((thisRef != null) && (thisRef.m_refKernelWakelocks != null));
 	}
@@ -2634,7 +2651,7 @@ public class StatsProvider
 	 */
 	public boolean hasSinceUnpluggedRef()
 	{
-		Reference thisRef = ReferenceStore.getReferenceByName(Reference.UNPLUGGED_REF_FILENAME, m_context);
+		Reference thisRef = ReferenceStore.getReferenceByName(Reference.UNPLUGGED_REF_FILENAME, BbsApplication.getAppContext());
 
 		return ((thisRef != null) && (thisRef.m_refKernelWakelocks != null));
 	}
@@ -2646,7 +2663,7 @@ public class StatsProvider
 	 */
 	public boolean hasSinceBootRef()
 	{
-		Reference thisRef = ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, m_context);
+		Reference thisRef = ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, BbsApplication.getAppContext());
 
 		return ((thisRef != null) && (thisRef.m_refKernelWakelocks != null));
 	}
@@ -2658,7 +2675,7 @@ public class StatsProvider
 	public void setCustomReference(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.CUSTOM_REF_FILENAME, Reference.TYPE_CUSTOM);
-		ReferenceStore.put(Reference.CUSTOM_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.CUSTOM_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 	}
 
 	/**
@@ -2667,7 +2684,7 @@ public class StatsProvider
 	public void setCurrentReference(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.CURRENT_REF_FILENAME, Reference.TYPE_CURRENT);
-		ReferenceStore.put(Reference.CURRENT_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.CURRENT_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 	}
 
 	/**
@@ -2677,7 +2694,7 @@ public class StatsProvider
 	{
 		String fileName = Reference.TIMER_REF_FILENAME + DateUtils.format(System.currentTimeMillis(), DateUtils.DATE_FORMAT_NOW);
 		Reference thisRef = new Reference(fileName, Reference.TYPE_TIMER);
-		ReferenceStore.put(fileName, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(fileName, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 		
 		return fileName;
 	}
@@ -2699,7 +2716,7 @@ public class StatsProvider
 	public void setReferenceSinceScreenOff(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.SCREEN_OFF_REF_FILENAME, Reference.TYPE_EVENT);
-		ReferenceStore.put(Reference.SCREEN_OFF_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.SCREEN_OFF_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 		
 		// clean "current from cache"
 //		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, m_context);
@@ -2712,10 +2729,10 @@ public class StatsProvider
 	public void setReferenceScreenOn(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.SCREEN_ON_REF_FILENAME, Reference.TYPE_EVENT);
-		ReferenceStore.put(Reference.SCREEN_ON_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.SCREEN_ON_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 		
 		// clean "current from cache"
-		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, m_context);
+		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, BbsApplication.getAppContext());
 	}
 
 	/**
@@ -2725,10 +2742,10 @@ public class StatsProvider
 	public void setReferenceSinceCharged(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.CHARGED_REF_FILENAME, Reference.TYPE_EVENT);
-		ReferenceStore.put(Reference.CHARGED_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.CHARGED_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 		
 		// clean "current from cache"
-		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, m_context);
+		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, BbsApplication.getAppContext());
 
 	}
 
@@ -2739,10 +2756,10 @@ public class StatsProvider
 	public void setReferenceSinceUnplugged(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.UNPLUGGED_REF_FILENAME, Reference.TYPE_EVENT);
-		ReferenceStore.put(Reference.UNPLUGGED_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.UNPLUGGED_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 		
 		// clean "current from cache"
-		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, m_context);
+		ReferenceStore.invalidate(Reference.CURRENT_REF_FILENAME, BbsApplication.getAppContext());
 	}
 
 	/**
@@ -2752,7 +2769,7 @@ public class StatsProvider
 	public void setReferenceSinceBoot(int iSort)
 	{
 		Reference thisRef = new Reference(Reference.BOOT_REF_FILENAME, Reference.TYPE_EVENT);
-		ReferenceStore.put(Reference.BOOT_REF_FILENAME, populateReference(iSort, thisRef), m_context);
+		ReferenceStore.put(Reference.BOOT_REF_FILENAME, populateReference(iSort, thisRef), BbsApplication.getAppContext());
 	}
 
 	/**
@@ -2761,7 +2778,7 @@ public class StatsProvider
 	private synchronized Reference populateReference(int iSort, Reference refs)
 	{
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(BbsApplication.getAppContext());
 		
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
@@ -2777,7 +2794,7 @@ public class StatsProvider
 
 		
 		// we are going to retrieve a reference: make sure data does not come from the cache
-		if (SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded ) BatteryStatsProxy.getInstance(m_context).invalidate();
+		if (SysUtils.hasBatteryStatsPermission(BbsApplication.getAppContext()) || permsNotNeeded ) BatteryStatsProxy.getInstance(BbsApplication.getAppContext()).invalidate();
 		
 		
 
@@ -2806,7 +2823,7 @@ public class StatsProvider
 				Log.e(TAG, "Exception: " + Log.getStackTraceString(e));				
 			}
 			
-			if ( SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded)
+			if ( SysUtils.hasBatteryStatsPermission(BbsApplication.getAppContext()) || permsNotNeeded)
 			{
 				try
 				{
@@ -2843,7 +2860,7 @@ public class StatsProvider
 				Log.e(TAG, "Exception: " + Log.getStackTraceString(e));				
 			}
 
-			if ( SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded)
+			if ( SysUtils.hasBatteryStatsPermission(BbsApplication.getAppContext()) || permsNotNeeded)
 			{
 				try
 				{
@@ -2948,10 +2965,10 @@ public class StatsProvider
 	{
 		
 		// we are going to retrieve a reference: make sure data does not come from the cache
-		BatteryStatsProxy.getInstance(m_context).invalidate();
+		BatteryStatsProxy.getInstance(BbsApplication.getAppContext()).invalidate();
 		
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(BbsApplication.getAppContext());
 		
 		int statsType = 0;
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
@@ -2979,7 +2996,7 @@ public class StatsProvider
 			refs.m_refSensorUsage 		= null;
 
 			refs.m_refKernelWakelocks 	= getCurrentKernelWakelockStatList(bFilterStats, iPctType, iSort);
-			if ( SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded )
+			if ( SysUtils.hasBatteryStatsPermission(BbsApplication.getAppContext()) || permsNotNeeded )
 			{
 				refs.m_refWakelocks 		= getCurrentWakelockStatList(bFilterStats, iPctType, iSort);
 			}
@@ -3024,6 +3041,8 @@ public class StatsProvider
 	public long getBatteryRealtime(int iStatType)
 			throws BatteryInfoUnavailableException
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		long rawRealtime = SystemClock.elapsedRealtime() * 1000;
 		long whichRealtime = 0;
 		
@@ -3037,33 +3056,33 @@ public class StatsProvider
 			statsType = BatteryStatsTypes.STATS_CURRENT;
 		}		
 
-		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this.m_context);
+		SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(ctx);
 		boolean permsNotNeeded = sharedPrefs.getBoolean("ignore_system_app", false);
 		
-		if (!(SysUtils.hasBatteryStatsPermission(m_context) || permsNotNeeded) )
+		if (!(SysUtils.hasBatteryStatsPermission(ctx) || permsNotNeeded) )
 		{
 			whichRealtime = rawRealtime;
 			return whichRealtime;
 		}
 
-		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(ctx);
 
 		whichRealtime = mStats.computeBatteryRealtime(rawRealtime,
 				statsType) / 1000;
 
-		if ((iStatType == StatsProvider.STATS_CUSTOM) && (ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, m_context) != null))
+		if ((iStatType == StatsProvider.STATS_CUSTOM) && (ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, ctx) != null))
 		{			
-			whichRealtime -= ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, m_context).m_refBatteryRealtime;	
+			whichRealtime -= ReferenceStore.getReferenceByName(Reference.CUSTOM_REF_FILENAME, ctx).m_refBatteryRealtime;
 		}
 		else if ((iStatType == StatsProvider.STATS_SCREEN_OFF)
-				&& (ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, m_context) != null))
+				&& (ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, ctx) != null))
 		{
-			whichRealtime -= ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, m_context).m_refBatteryRealtime;
+			whichRealtime -= ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, ctx).m_refBatteryRealtime;
 		}
 		else if ((iStatType == StatsProvider.STATS_BOOT)
-				&& (ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, m_context) != null))
+				&& (ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, ctx) != null))
 		{
-			whichRealtime -= ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, m_context).m_refBatteryRealtime;
+			whichRealtime -= ReferenceStore.getReferenceByName(Reference.BOOT_REF_FILENAME, ctx).m_refBatteryRealtime;
 		}
 		
 		Log.i(TAG, "rawRealtime = " + rawRealtime);
@@ -3094,14 +3113,16 @@ public class StatsProvider
 	@SuppressLint("NewApi")
 	public Uri writeLogcatToFile()
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		Uri fileUri = null;
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 
 		if (!DataStorage.isExternalStorageWritable())
 		{
 			Log.e(TAG, "External storage can not be written");
-			Toast.makeText(m_context, m_context.getString(R.string.message_external_storage_write_error),
+			Toast.makeText(ctx, ctx.getString(R.string.message_external_storage_write_error),
 					Toast.LENGTH_SHORT).show();
 		}
 		try
@@ -3115,7 +3136,7 @@ public class StatsProvider
 			{
 				try
 				{
-					root = m_context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
+					root = ctx.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
 				}
 				catch (Exception e)
 				{
@@ -3138,7 +3159,7 @@ public class StatsProvider
 				fileUri = Uri.fromFile(new File(path + "/" + filename));
 				
 				// workaround: force mediascanner to run
-				DataStorage.forceMediaScanner(m_context, fileUri);
+				DataStorage.forceMediaScanner(ctx, fileUri);
 			}
 			else
 			{
@@ -3157,14 +3178,16 @@ public class StatsProvider
 	@SuppressLint("NewApi")
 	public Uri writeDmesgToFile()
 	{
+		Context ctx = BbsApplication.getAppContext();
+
 		Uri fileUri = null;
 		SharedPreferences sharedPrefs = PreferenceManager
-				.getDefaultSharedPreferences(m_context);
+				.getDefaultSharedPreferences(ctx);
 
 		if (!DataStorage.isExternalStorageWritable())
 		{
 			Log.e(TAG, "External storage can not be written");
-			Toast.makeText(m_context, m_context.getString(R.string.message_external_storage_write_error),
+			Toast.makeText(ctx, ctx.getString(R.string.message_external_storage_write_error),
 					Toast.LENGTH_SHORT).show();
 		}
 		try
@@ -3177,7 +3200,7 @@ public class StatsProvider
 			{
 				try
 				{
-					root = m_context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
+					root = ctx.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
 				}
 				catch (Exception e)
 				{
@@ -3206,7 +3229,7 @@ public class StatsProvider
 				}
 				fileUri = Uri.fromFile(new File(path + "/" + filename));
 				// workaround: force mediascanner to run
-				DataStorage.forceMediaScanner(m_context, fileUri);
+				DataStorage.forceMediaScanner(ctx, fileUri);
 
 //				Toast.makeText(m_context, "Dump witten: " + path + "/" + filename, Toast.LENGTH_SHORT).show();
 
@@ -3225,45 +3248,10 @@ public class StatsProvider
 		return fileUri;
 	}
 
-//	/**
-//	 * Writes a reading in json format
-//	 * @param refFrom 
-//	 * @param iSort
-//	 * @param refTo
-//	 */
-//	@SuppressLint("NewApi")
-//	public void writeJsonToFile2(Reference refFrom, int iSort, Reference refTo)
-//	{
-//		Reading reading = new Reading(m_context, refFrom, refTo);
-//		reading.writeToFileJson(m_context);
-//		
-//	}
-	
-	
-//	/**
-//	 * Dump the elements on one list
-//	 * 
-//	 * @param myList
-//	 *            a list of StatElement
-//	 */
-//	private void dumpList(List<StatElement> myList, BufferedWriter out)
-//			throws IOException
-//	{
-//		if (myList != null)
-//		{
-//			for (int i = 0; i < myList.size(); i++)
-//			{
-//				out.write(myList.get(i).getDumpData(m_context) + "\n");
-//
-//			}
-//		}
-//	}
 
 	/**
 	 * translate the stat type (see arrays.xml) to the corresponding label
 	 * 
-	 * @param position
-	 *            the spinner position
 	 * @return the stat type
 	 */
 	public static String statTypeToLabel(int statType)
@@ -3298,8 +3286,6 @@ public class StatsProvider
 	/**
 	 * translate the stat type (see arrays.xml) to the corresponding short label
 	 * 
-	 * @param position
-	 *            the spinner position
 	 * @return the stat type
 	 */
 	public static String statTypeToLabelShort(int statType)
@@ -3334,8 +3320,6 @@ public class StatsProvider
 	/**
 	 * translate the stat type (see arrays.xml) to the corresponding label
 	 * 
-	 * @param position
-	 *            the spinner position
 	 * @return the stat type
 	 */
 	public String statTypeToUrl(int statType)
@@ -3356,14 +3340,12 @@ public class StatsProvider
 	/**
 	 * translate the stat (see arrays.xml) to the corresponding label
 	 * 
-	 * @param position
-	 *            the spinner position
 	 * @return the stat
 	 */
 	private String statToLabel(int iStat)
 	{
 		String strRet = "";
-		String[] statsArray = m_context.getResources().getStringArray(
+		String[] statsArray = BbsApplication.getAppContext().getResources().getStringArray(
 				R.array.stats);
 		strRet = statsArray[iStat];
 
@@ -3373,8 +3355,6 @@ public class StatsProvider
 	/**
 	 * translate the stat (see arrays.xml) to the corresponding label
 	 * 
-	 * @param position
-	 *            the spinner position
 	 * @return the stat
 	 */
 	public String statToUrl(int stat)
@@ -3468,7 +3448,7 @@ public class StatsProvider
 	int getBatteryLevel()
 	{
 		// check the battery level and if 100% the store "since charged" ref
-		Intent batteryIntent = m_context.getApplicationContext()
+		Intent batteryIntent = BbsApplication.getAppContext()
 				.registerReceiver(null,
 						new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
 
@@ -3491,7 +3471,7 @@ public class StatsProvider
 	int getBatteryVoltage()
 	{
 		// check the battery level and if 100% the store "since charged" ref
-		Intent batteryIntent = m_context.getApplicationContext()
+		Intent batteryIntent = BbsApplication.getAppContext()
 				.registerReceiver(null,
 						new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
 
@@ -3567,7 +3547,7 @@ public class StatsProvider
 	{
 		 
 		// test against BatteryStatsProxy
-		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(m_context);
+		BatteryStatsProxy mStats = BatteryStatsProxy.getInstance(BbsApplication.getAppContext());
 		
 		long rawRealtime = SystemClock.elapsedRealtime() * 1000; 	
 		long batteryRealtime = 0;
@@ -3597,7 +3577,7 @@ public class StatsProvider
 				}
 			}
 			
-			res = mStats.getSensorOnTime(m_context, batteryRealtime, getStatsType());
+			res = mStats.getSensorOnTime(BbsApplication.getAppContext(), batteryRealtime, getStatsType());
 			if (res > 0)
 			{
 				Log.i(TAG_TEST, "Passed: getSensorOnTime");
@@ -3609,7 +3589,7 @@ public class StatsProvider
 			
 			if (Build.VERSION.SDK_INT >= 6)
 			{	
-				res = mStats.getSyncOnTime(m_context, batteryRealtime, getStatsType());
+				res = mStats.getSyncOnTime(BbsApplication.getAppContext(), batteryRealtime, getStatsType());
 				if (res > 0)
 				{
 					Log.i(TAG_TEST, "Passed: getSyncOnTime");
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/BbsDashClockExtension.java b/app/src/main/java/com/asksven/betterbatterystats/services/BbsDashClockExtension.java
index bfb0ef8e..8a670ae1 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/BbsDashClockExtension.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/BbsDashClockExtension.java
@@ -62,14 +62,14 @@ public class BbsDashClockExtension extends DashClockExtension
 		String strAwake = "";
 		String strDrain = "";
 		
-		StatsProvider stats = StatsProvider.getInstance(this);
+		StatsProvider stats = StatsProvider.getInstance();
 		// make sure to flush cache
 		BatteryStatsProxy.getInstance(this).invalidate();
 
 		try
 		{
 			
-			Reference toRef = StatsProvider.getInstance(this).getUncachedPartialReference(0);
+			Reference toRef = StatsProvider.getInstance().getUncachedPartialReference(0);
 			Reference fromRef = ReferenceStore.getReferenceByName(refFrom, this);
 
 			ArrayList<StatElement> otherStats = stats.getOtherUsageStatList(true, fromRef, false, true, toRef);
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateLargeWidgetService.java b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateLargeWidgetService.java
index 7272dd86..13a48ba8 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateLargeWidgetService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateLargeWidgetService.java
@@ -79,7 +79,7 @@ public class UpdateLargeWidgetService extends Service
 			Log.w(TAG, "Direct" + String.valueOf(allWidgetIds2.length));
 		}
 
-		StatsProvider stats = StatsProvider.getInstance(this);
+		StatsProvider stats = StatsProvider.getInstance();
 		// make sure to flush cache
 		BatteryStatsProxy.getInstance(this).invalidate();
 		
@@ -111,7 +111,7 @@ public class UpdateLargeWidgetService extends Service
 
 			try
 			{
-				Reference currentRef = StatsProvider.getInstance(this).getUncachedPartialReference(0);
+				Reference currentRef = StatsProvider.getInstance().getUncachedPartialReference(0);
 				Reference fromRef = ReferenceStore.getReferenceByName(refFrom, this);
 				
 				ArrayList<StatElement> otherStats = stats.getOtherUsageStatList(true, fromRef, false, true, currentRef);
@@ -138,7 +138,7 @@ public class UpdateLargeWidgetService extends Service
 						timeScreenOn 	= 0;
 					}
 					
-					timeSince = StatsProvider.getInstance(this).getSince(fromRef, currentRef);
+					timeSince = StatsProvider.getInstance().getSince(fromRef, currentRef);
 					ArrayList<StatElement> pWakelockStats = stats.getWakelockStatList(true, fromRef, 0, 0, currentRef);
 					sumPWakelocks = stats.sum(pWakelockStats);
 	
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateMediumWidgetService.java b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateMediumWidgetService.java
index 3e802268..797a27f9 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateMediumWidgetService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateMediumWidgetService.java
@@ -69,7 +69,7 @@ public class UpdateMediumWidgetService extends Service
 				
 		Log.w(TAG, "From Intent" + String.valueOf(allWidgetIds.length));
 
-		StatsProvider stats = StatsProvider.getInstance(this);
+		StatsProvider stats = StatsProvider.getInstance();
 		// make sure to flush cache
 		BatteryStatsProxy.getInstance(this).invalidate();
 		
@@ -102,7 +102,7 @@ public class UpdateMediumWidgetService extends Service
 			
 			try
 			{
-				Reference currentRef = StatsProvider.getInstance(this).getUncachedPartialReference(0);
+				Reference currentRef = StatsProvider.getInstance().getUncachedPartialReference(0);
 				Reference fromRef = ReferenceStore.getReferenceByName(refFrom, this);
 				
 				ArrayList<StatElement> otherStats = stats.getOtherUsageStatList(true, fromRef, false, true, currentRef);
@@ -127,7 +127,7 @@ public class UpdateMediumWidgetService extends Service
 						timeAwake 		= 0;
 						timeScreenOn 	= 0;
 					}
-					timeSince = StatsProvider.getInstance(this).getSince(fromRef, currentRef);
+					timeSince = StatsProvider.getInstance().getSince(fromRef, currentRef);
 					ArrayList<StatElement> pWakelockStats = stats.getWakelockStatList(true, fromRef, 0, 0, currentRef);
 					sumPWakelocks = stats.sum(pWakelockStats);
 	
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateSmallWidgetService.java b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateSmallWidgetService.java
index 7723b8c9..031dd81d 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateSmallWidgetService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateSmallWidgetService.java
@@ -65,7 +65,7 @@ public class UpdateSmallWidgetService extends Service
 		int[] allWidgetIds = intent
 				.getIntArrayExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS);
 		
-		StatsProvider stats = StatsProvider.getInstance(this);
+		StatsProvider stats = StatsProvider.getInstance();
 		// make sure to flush cache
 		BatteryStatsProxy.getInstance(this).invalidate();
 		
@@ -103,7 +103,7 @@ public class UpdateSmallWidgetService extends Service
 			try
 			{
 				
-				Reference currentRef = StatsProvider.getInstance(this).getUncachedPartialReference(0);
+				Reference currentRef = StatsProvider.getInstance().getUncachedPartialReference(0);
 				Reference fromRef = ReferenceStore.getReferenceByName(refFrom, this);
 
 
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateWidgetService.java b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateWidgetService.java
index 6802354d..590e8080 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/UpdateWidgetService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/UpdateWidgetService.java
@@ -71,7 +71,7 @@ public class UpdateWidgetService extends Service
 		int[] allWidgetIds = intent
 				.getIntArrayExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS);
 		
-		StatsProvider stats = StatsProvider.getInstance(this);
+		StatsProvider stats = StatsProvider.getInstance();
 		// make sure to flush cache
 		BatteryStatsProxy.getInstance(this).invalidate();
 		
@@ -140,7 +140,7 @@ public class UpdateWidgetService extends Service
 			try
 			{
 				// retrieve stats
-				Reference currentRef = StatsProvider.getInstance(this).getUncachedPartialReference(0);
+				Reference currentRef = StatsProvider.getInstance().getUncachedPartialReference(0);
 				Reference fromRef = ReferenceStore.getReferenceByName(refFrom, this);
 
 				ArrayList<StatElement> otherStats = stats.getOtherUsageStatList(true, fromRef, false, true, currentRef);
@@ -153,7 +153,7 @@ public class UpdateWidgetService extends Service
 					otherStats = stats.getOtherUsageStatList(true, fromRef, false, true, currentRef);
 				}
 				
-				timeSince = StatsProvider.getInstance(this).getSince(fromRef, currentRef);
+				timeSince = StatsProvider.getInstance().getSince(fromRef, currentRef);
 
 				if ( (otherStats != null) && ( otherStats.size() > 1) )
 				{
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WatchdogProcessingService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WatchdogProcessingService.java
index 15ac4e75..68d91ac4 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WatchdogProcessingService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WatchdogProcessingService.java
@@ -82,7 +82,7 @@ public class WatchdogProcessingService extends IntentService
 					//Toast.makeText(this, getString(R.string.message_watchdog_processing), Toast.LENGTH_SHORT).show();
 
 					int awakePct = 0;
-					StatsProvider stats = StatsProvider.getInstance(this);
+					StatsProvider stats = StatsProvider.getInstance();
 					// make sure to flush cache
 					BatteryStatsProxy.getInstance(this).invalidate();
 
@@ -95,7 +95,7 @@ public class WatchdogProcessingService extends IntentService
 					{
 						// restore any available since screen reference
 						Reference refFrom = ReferenceStore.getReferenceByName(Reference.SCREEN_OFF_REF_FILENAME, this);
-						StatsProvider.getInstance(this).setCurrentReference(0);
+						StatsProvider.getInstance().setCurrentReference(0);
 						//Reference refTo = StatsProvider.getInstance(this).getUncachedPartialReference(0);
 						Reference refTo = ReferenceStore.getReferenceByName(Reference.CURRENT_REF_FILENAME, this);
 						ArrayList<StatElement> otherStats = null;
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteBootReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteBootReferenceService.java
index 62f12b01..3713ef96 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteBootReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteBootReferenceService.java
@@ -58,7 +58,7 @@ public class WriteBootReferenceService extends IntentService
 	    	nM.cancel(EventWatcherService.NOTFICATION_ID);
 	    	
 			Wakelock.aquireWakelock(this);
-			StatsProvider.getInstance(this).setReferenceSinceBoot(0);
+			StatsProvider.getInstance().setReferenceSinceBoot(0);
 			
 			// delete screen on time counters
 	        SharedPreferences.Editor updater = sharedPrefs.edit();
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteCurrentReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteCurrentReferenceService.java
index c468e28c..dd00d240 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteCurrentReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteCurrentReferenceService.java
@@ -48,7 +48,7 @@ public class WriteCurrentReferenceService extends IntentService
 		{
 			Wakelock.aquireWakelock(this);
 			// Store the "custom
-			StatsProvider.getInstance(this).setCurrentReference(0);
+			StatsProvider.getInstance().setCurrentReference(0);
 			// Build the intent to update the widget
 			Intent intentRefreshWidgets = new Intent(LargeWidgetProvider.WIDGET_UPDATE);
 			this.sendBroadcast(intentRefreshWidgets);
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteCustomReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteCustomReferenceService.java
index ff8f966f..6b3b36d1 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteCustomReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteCustomReferenceService.java
@@ -48,7 +48,7 @@ public class WriteCustomReferenceService extends IntentService
 		{
 			Wakelock.aquireWakelock(this);
 			// Store the "custom
-			StatsProvider.getInstance(this).setCustomReference(0);
+			StatsProvider.getInstance().setCustomReference(0);
 			Intent i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.CUSTOM_REF_FILENAME);
 		    this.sendBroadcast(i);
 
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteDumpfileService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteDumpfileService.java
index 0bce6060..cc7c123d 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteDumpfileService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteDumpfileService.java
@@ -63,7 +63,7 @@ public class WriteDumpfileService extends IntentService
 		// if we want a reading until "current" make sure to update that ref
 		if (refTo == Reference.CURRENT_REF_FILENAME)
 		{
-			StatsProvider.getInstance(this).setCurrentReference(0);
+			StatsProvider.getInstance().setCurrentReference(0);
 		}
 		
 		
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOffReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOffReferenceService.java
index fbe14a6c..47a35d86 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOffReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOffReferenceService.java
@@ -63,7 +63,7 @@ public class WriteScreenOffReferenceService extends IntentService
 			{
 				// Store the "since screen off" ref
 				Wakelock.aquireWakelock(this);
-				StatsProvider.getInstance(this).setReferenceSinceScreenOff(0);
+				StatsProvider.getInstance().setReferenceSinceScreenOff(0);
 				Intent i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.SCREEN_OFF_REF_FILENAME);
 			    this.sendBroadcast(i);
 				
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOnReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOnReferenceService.java
index 18014559..4d552bec 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOnReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteScreenOnReferenceService.java
@@ -57,12 +57,12 @@ public class WriteScreenOnReferenceService extends IntentService
 
 			// Store the "since screen off" ref
 			Wakelock.aquireWakelock(this);
-			StatsProvider.getInstance(this).setReferenceScreenOn(0);
+			StatsProvider.getInstance().setReferenceScreenOn(0);
 
 			Intent i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.SCREEN_ON_REF_FILENAME);
 		    this.sendBroadcast(i);
 
-			StatsProvider.getInstance(this).setCurrentReference(0);
+			StatsProvider.getInstance().setCurrentReference(0);
 
 //			// save a new current ref
 //			StatsProvider.getInstance(this).setCurrentReference(0);
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteTimerReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteTimerReferenceService.java
index c757386e..1408c6e4 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteTimerReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteTimerReferenceService.java
@@ -47,7 +47,7 @@ public class WriteTimerReferenceService extends IntentService
 		{
 			Wakelock.aquireWakelock(this);
 			// Store the "custom
-			String refName = StatsProvider.getInstance(this).setTimedReference(0);
+			String refName = StatsProvider.getInstance().setTimedReference(0);
 			
 			Intent i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, refName);
 		    this.sendBroadcast(i);
diff --git a/app/src/main/java/com/asksven/betterbatterystats/services/WriteUnpluggedReferenceService.java b/app/src/main/java/com/asksven/betterbatterystats/services/WriteUnpluggedReferenceService.java
index d11f0442..44872158 100755
--- a/app/src/main/java/com/asksven/betterbatterystats/services/WriteUnpluggedReferenceService.java
+++ b/app/src/main/java/com/asksven/betterbatterystats/services/WriteUnpluggedReferenceService.java
@@ -49,7 +49,7 @@ public class WriteUnpluggedReferenceService extends IntentService
 		{
 			// Store the "since unplugged ref
 			Wakelock.aquireWakelock(this);
-			StatsProvider.getInstance(this).setReferenceSinceUnplugged(0);
+			StatsProvider.getInstance().setReferenceSinceUnplugged(0);
 
 			Intent i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.UNPLUGGED_REF_FILENAME);
 		    this.sendBroadcast(i);
@@ -80,13 +80,13 @@ public class WriteUnpluggedReferenceService extends IntentService
 				try
 				{
 					Log.i(TAG, "Level was 100% at unplug, serializing 'since charged'");
-					StatsProvider.getInstance(this).setReferenceSinceCharged(0);
+					StatsProvider.getInstance().setReferenceSinceCharged(0);
 
 					i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.CHARGED_REF_FILENAME);
 				    this.sendBroadcast(i);
 
 					// save a new current ref
-					StatsProvider.getInstance(this).setCurrentReference(0);
+					StatsProvider.getInstance().setCurrentReference(0);
 
 					i = new Intent(ReferenceStore.REF_UPDATED).putExtra(Reference.EXTRA_REF_NAME, Reference.CURRENT_REF_FILENAME);
 				    this.sendBroadcast(i);
