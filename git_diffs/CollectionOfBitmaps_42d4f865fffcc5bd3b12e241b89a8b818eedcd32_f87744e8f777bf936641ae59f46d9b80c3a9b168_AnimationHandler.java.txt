diff --git a/app/src/main/java/ca/rmen/nounours/nounours/AndroidNounours.java b/app/src/main/java/ca/rmen/nounours/nounours/AndroidNounours.java
index 3499105..a8f4de3 100644
--- a/app/src/main/java/ca/rmen/nounours/nounours/AndroidNounours.java
+++ b/app/src/main/java/ca/rmen/nounours/nounours/AndroidNounours.java
@@ -64,6 +64,7 @@ public class AndroidNounours extends Nounours {
     private final AnimationHandler mAnimationHandler;
     private final ImageView mImageView;
     private final ImageCache mImageCache;
+    private final AnimationCache mAnimationCache;
 
     private ProgressDialog mProgressDialog;
     private AlertDialog mAlertDialog;
@@ -82,11 +83,12 @@ public class AndroidNounours extends Nounours {
         mHandler = handler;
         mImageView = imageView;
         mImageCache = new ImageCache(context, mImageCacheListener);
+        mAnimationCache = new AnimationCache(context, this, mImageCache);
 
         String themeId = NounoursSettings.getThemeId(context);
         if (!FileUtil.isSdPresent())
             themeId = Nounours.DEFAULT_THEME_ID;
-        mAnimationHandler = new AnimationHandler(context, this, imageView, mImageCache);
+        mAnimationHandler = new AnimationHandler(this, imageView, mAnimationCache);
         SoundHandler soundHandler = new SoundHandler(this, context);
         VibrateHandler vibrateHandler = new VibrateHandler(context);
         Resources resources = context.getResources();
@@ -118,7 +120,7 @@ public class AndroidNounours extends Nounours {
     protected boolean cacheImages() {
         if(!mImageCache.cacheImages(getImages().values())) return false;
         // Cache animations.
-        return mAnimationHandler.cacheAnimations();
+        return mAnimationCache.cacheAnimations();
     }
 
     /**
@@ -164,7 +166,7 @@ public class AndroidNounours extends Nounours {
 
         // MEMORY
         mImageCache.clearImageCache();
-        mAnimationHandler.reset();
+        mAnimationCache.clearAnimationCache();
         Runnable imageCacher = new Runnable() {
             @SuppressWarnings("synthetic-access")
             @Override
@@ -326,7 +328,7 @@ public class AndroidNounours extends Nounours {
     public void onDestroy() {
         debug("destroy");
         mImageCache.clearImageCache();
-        mAnimationHandler.onDestroy();
+        mAnimationCache.clearAnimationCache();
     }
 
     @Override
diff --git a/app/src/main/java/ca/rmen/nounours/nounours/AnimationCache.java b/app/src/main/java/ca/rmen/nounours/nounours/AnimationCache.java
new file mode 100644
index 0000000..a20c3dc
--- /dev/null
+++ b/app/src/main/java/ca/rmen/nounours/nounours/AnimationCache.java
@@ -0,0 +1,148 @@
+/*
+ * Copyright (c) 2009 Carmen Alvarez. All Rights Reserved.
+ *
+ */
+package ca.rmen.nounours.nounours;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.drawable.AnimationDrawable;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import ca.rmen.nounours.Constants;
+import ca.rmen.nounours.compat.BitmapCompat;
+import ca.rmen.nounours.data.Animation;
+import ca.rmen.nounours.data.AnimationImage;
+import ca.rmen.nounours.data.Image;
+
+/**
+ * @author Carmen Alvarez
+ */
+class AnimationCache {
+    private static final String TAG = Constants.TAG + AnimationCache.class.getSimpleName();
+
+    private final AndroidNounours mNounours;
+    private final Context mContext;
+    private final ImageCache mImageCache;
+
+    private final Map<String, AnimationDrawable> mAnimationCache = new HashMap<>();
+    private final Map<Bitmap, BitmapDrawable> mBitmapDrawables = new HashMap<>();
+
+    public AnimationCache(Context context, AndroidNounours nounours, ImageCache imageCache) {
+        mContext = context;
+        mNounours = nounours;
+        mImageCache = imageCache;
+    }
+
+    public void clearAnimationCache() {
+        for (AnimationDrawable animationDrawable : mAnimationCache.values()) {
+            purgeAnimationDrawable(animationDrawable);
+        }
+        mAnimationCache.clear();
+        for (Bitmap bitmap : mBitmapDrawables.keySet()) {
+            if (bitmap != null && !bitmap.isRecycled())
+                bitmap.recycle();
+        }
+        mBitmapDrawables.clear();
+    }
+
+    private void purgeAnimationDrawable(AnimationDrawable animationDrawable) {
+        animationDrawable.stop();
+        for (int i = 0; i < animationDrawable.getNumberOfFrames(); i++) {
+            Drawable frame = animationDrawable.getFrame(i);
+            if (frame instanceof BitmapDrawable) {
+                BitmapDrawable bmDrawable = (BitmapDrawable) frame;
+                Bitmap bitmap = bmDrawable.getBitmap();
+                if (bitmap != null && !bitmap.isRecycled())
+                    bitmap.recycle();
+            }
+        }
+
+    }
+
+    /**
+     * Create an Android animation given the nounours animation data.
+     *
+     * @param doCache if true, this image sequence will be stored in memory for future use.
+     */
+    AnimationDrawable createAnimation(final Animation animation, boolean doCache) {
+        Log.v(TAG, "createAnimation " + animation + " doCache = " + doCache);
+        // First see if we have this stored in memory.
+        AnimationDrawable animationDrawable = mAnimationCache.get(animation.getId());
+        if (animationDrawable != null) {
+            return animationDrawable;
+        }
+
+        // Create the android animation.
+        animationDrawable = new AnimationDrawable();
+        if (doCache)
+            mAnimationCache.put(animation.getId(), animationDrawable);
+
+        // Go through the list of images in the nounours animation, "repeat"
+        // times.
+        for (int i = 0; i < animation.getRepeat(); i++) {
+            for (final AnimationImage animationImage : animation.getImages()) {
+                // Make sure the image exists.
+                final Image image = mNounours.getImages().get(animationImage.getImageId());
+                if (image == null) {
+                    Log.v(TAG, "No image " + animationImage);
+                    return null;
+                }
+                // Get the android image and add it to the android animation.
+                final Bitmap bitmap = mImageCache.getDrawableImage(image);
+                if (bitmap == null)
+                    return null;
+
+                BitmapDrawable drawable = getDrawable(bitmap);
+                if (drawable == null)
+                    return null;
+                animationDrawable.addFrame(drawable, (int) (animation.getInterval() * animationImage.getDuration()));
+
+            }
+        }
+        // Add the default image at the end.
+        final Bitmap bitmap = mImageCache.getDrawableImage(mNounours.getDefaultImage());
+        if (bitmap == null)
+            return null;
+        BitmapDrawable drawable = getDrawable(bitmap);
+        if (drawable == null)
+            return null;
+        animationDrawable.addFrame(drawable, animation.getInterval());
+        Log.v(TAG, "Loaded animation " + animation.getId());
+
+        return animationDrawable;
+    }
+
+    /**
+     * Store bitmap drawables for bitmaps in cache.
+     */
+    private BitmapDrawable getDrawable(Bitmap bitmap) {
+        BitmapDrawable result = mBitmapDrawables.get(bitmap);
+        if (result != null)
+            return result;
+        result = BitmapCompat.createBitmapDrawable(mContext, bitmap);
+        mBitmapDrawables.put(bitmap, result);
+        return result;
+    }
+
+    /**
+     * Store all animations in memory for performance.
+     */
+    boolean cacheAnimations() {
+        Log.v(TAG, "cacheAnimations");
+        final Map<String, Animation> animations = mNounours.getAnimations();
+        for (final String animationId : animations.keySet()) {
+            final Animation animation = animations.get(animationId);
+            AnimationDrawable animationDrawable = createAnimation(animation, true);
+            if (animationDrawable == null)
+                return false;
+        }
+        return true;
+    }
+
+}
diff --git a/app/src/main/java/ca/rmen/nounours/nounours/AnimationHandler.java b/app/src/main/java/ca/rmen/nounours/nounours/AnimationHandler.java
index 6c6c720..5946efe 100644
--- a/app/src/main/java/ca/rmen/nounours/nounours/AnimationHandler.java
+++ b/app/src/main/java/ca/rmen/nounours/nounours/AnimationHandler.java
@@ -26,20 +26,13 @@ import android.app.Activity;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.AnimationDrawable;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.util.Log;
 import android.widget.ImageView;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import ca.rmen.nounours.Constants;
 import ca.rmen.nounours.NounoursAnimationHandler;
-import ca.rmen.nounours.compat.BitmapCompat;
 import ca.rmen.nounours.data.Animation;
-import ca.rmen.nounours.data.AnimationImage;
-import ca.rmen.nounours.data.Image;
 
 /**
  * Manages the Nounours animations displayed to the Android device.
@@ -50,50 +43,20 @@ class AnimationHandler implements NounoursAnimationHandler {
     private static final String TAG = Constants.TAG + AnimationHandler.class.getSimpleName();
 
     private final AndroidNounours mNounours;
-    private final Context mContext;
     private final ImageView mImageView;
-    private final ImageCache mImageCache;
+    private final AnimationCache mAnimationCache;
 
-    private final Map<String, AnimationDrawable> mAnimationCache = new HashMap<>();
-    private final Map<Bitmap, BitmapDrawable> mBitmapDrawables = new HashMap<>();
-
-    public AnimationHandler(Context context, AndroidNounours nounours, ImageView imageView, ImageCache imageCache) {
-        mContext = context;
+    public AnimationHandler(AndroidNounours nounours, ImageView imageView, AnimationCache animationCache) {
         mNounours = nounours;
         mImageView = imageView;
-        mImageCache = imageCache;
-    }
-
-    public void reset() {
-        for (AnimationDrawable animationDrawable : mAnimationCache.values()) {
-            purgeAnimationDrawable(animationDrawable);
-        }
-        mAnimationCache.clear();
-        for (Bitmap bitmap : mBitmapDrawables.keySet()) {
-            if (bitmap != null && !bitmap.isRecycled())
-                bitmap.recycle();
-        }
-        mBitmapDrawables.clear();
-    }
-
-    private void purgeAnimationDrawable(AnimationDrawable animationDrawable) {
-        animationDrawable.stop();
-        for (int i = 0; i < animationDrawable.getNumberOfFrames(); i++) {
-            Drawable frame = animationDrawable.getFrame(i);
-            if (frame instanceof BitmapDrawable) {
-                BitmapDrawable bmDrawable = (BitmapDrawable) frame;
-                Bitmap bitmap = bmDrawable.getBitmap();
-                if (bitmap != null && !bitmap.isRecycled())
-                    bitmap.recycle();
-            }
-        }
-
+        mAnimationCache = animationCache;
     }
 
     /**
      * @return true if an animation is currently active.
      * @see ca.rmen.nounours.Nounours#isAnimationRunning()
      */
+    @Override
     public boolean isAnimationRunning() {
         Log.v(TAG, "isAnimationRunning");
         final AnimationDrawable currentAnimation = getCurrentAnimationDrawable();
@@ -138,12 +101,13 @@ class AnimationHandler implements NounoursAnimationHandler {
      *
      * @see ca.rmen.nounours.Nounours#doAnimation(Animation, boolean)
      */
+    @Override
     public void doAnimation(final Animation animation, final boolean isDynamicAnimation) {
         Log.v(TAG, "doAnimation: " + animation);
         final Runnable runnable = new Runnable() {
             public void run() {
                 // Create an Android animation.
-                final AnimationDrawable animationDrawable = createAnimation(animation, !isDynamicAnimation);
+                final AnimationDrawable animationDrawable = mAnimationCache.createAnimation(animation, !isDynamicAnimation);
                 if (animationDrawable == null) {
                     Log.v(TAG, "No animation " + animation.getId());
                     return;
@@ -166,6 +130,7 @@ class AnimationHandler implements NounoursAnimationHandler {
      *
      * @see ca.rmen.nounours.Nounours#stopAnimation()
      */
+    @Override
     public void stopAnimation() {
         final AnimationDrawable animation = getCurrentAnimationDrawable();
         if (animation != null) {
@@ -173,97 +138,14 @@ class AnimationHandler implements NounoursAnimationHandler {
         }
     }
 
-    /**
-     * Create an Android animation given the nounours animation data.
-     *
-     * @param doCache if true, this image sequence will be stored in memory for future use.
-     */
-    private AnimationDrawable createAnimation(final Animation animation, boolean doCache) {
-        Log.v(TAG, "createAnimation " + animation + " doCache = " + doCache);
-        // First see if we have this stored in memory.
-        AnimationDrawable animationDrawable = mAnimationCache.get(animation.getId());
-        if (animationDrawable != null) {
-            return animationDrawable;
-        }
-
-        // Create the android animation.
-        animationDrawable = new AnimationDrawable();
-        if (doCache)
-            mAnimationCache.put(animation.getId(), animationDrawable);
-
-        // Go through the list of images in the nounours animation, "repeat"
-        // times.
-        for (int i = 0; i < animation.getRepeat(); i++) {
-            for (final AnimationImage animationImage : animation.getImages()) {
-                // Make sure the image exists.
-                final Image image = mNounours.getImages().get(animationImage.getImageId());
-                if (image == null) {
-                    Log.v(TAG, "No image " + animationImage);
-                    return null;
-                }
-                // Get the android image and add it to the android animation.
-                final Bitmap bitmap = mImageCache.getDrawableImage(image);
-                if (bitmap == null)
-                    return null;
-
-                BitmapDrawable drawable = getDrawable(bitmap);
-                if (drawable == null)
-                    return null;
-                animationDrawable.addFrame(drawable, (int) (animation.getInterval() * animationImage.getDuration()));
-
-            }
-        }
-        // Add the default image at the end.
-        final Bitmap bitmap = mImageCache.getDrawableImage(mNounours.getDefaultImage());
-        if (bitmap == null)
-            return null;
-        BitmapDrawable drawable = getDrawable(bitmap);
-        if (drawable == null)
-            return null;
-        animationDrawable.addFrame(drawable, animation.getInterval());
-        Log.v(TAG, "Loaded animation " + animation.getId());
-
-        return animationDrawable;
-    }
-
-    /**
-     * Store bitmap drawables for bitmaps in cache.
-     */
-    private BitmapDrawable getDrawable(Bitmap bitmap) {
-        BitmapDrawable result = mBitmapDrawables.get(bitmap);
-        if (result != null)
-            return result;
-        result = BitmapCompat.createBitmapDrawable(mContext, bitmap);
-        mBitmapDrawables.put(bitmap, result);
-        return result;
-    }
-
-    /**
-     * Store all animations in memory for performance.
-     */
-    boolean cacheAnimations() {
-        Log.v(TAG, "cacheAnimations");
-        final Map<String, Animation> animations = mNounours.getAnimations();
-        for (final String animationId : animations.keySet()) {
-            final Animation animation = animations.get(animationId);
-            AnimationDrawable animationDrawable = createAnimation(animation, true);
-            if (animationDrawable == null)
-                return false;
-        }
-        return true;
-    }
-
     /**
      * The implementing class may implement this to add the menu item for the
      * animation, as it is read from the CSV file. If this must be handled
      * later, the method {#link {@link ca.rmen.nounours.data.Theme#getAnimations()} may be used instead.
      */
+    @Override
     public void addAnimation(Animation animation) {
         // Do nothing
     }
 
-    public void onDestroy() {
-        mAnimationCache.clear();
-        mBitmapDrawables.clear();
-    }
 }
