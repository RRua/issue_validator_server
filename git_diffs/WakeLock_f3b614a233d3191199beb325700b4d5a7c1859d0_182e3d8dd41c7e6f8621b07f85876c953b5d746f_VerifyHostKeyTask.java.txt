diff --git a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyHostKeyTask.java b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/GetSshHostFingerprintTask.java
similarity index 52%
rename from app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyHostKeyTask.java
rename to app/src/main/java/com/amaze/filemanager/services/ssh/tasks/GetSshHostFingerprintTask.java
index 91ab949da..01e55a5bb 100644
--- a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyHostKeyTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/GetSshHostFingerprintTask.java
@@ -1,6 +1,28 @@
+/*
+ * VerifyHostKeyTask.java
+ *
+ * Copyright © 2017 Raymond Lai <airwave209gt at gmail.com>.
+ *
+ * This file is part of AmazeFileManager.
+ *
+ * AmazeFileManager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * AmazeFileManager is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with AmazeFileManager. If not, see <http ://www.gnu.org/licenses/>.
+ */
+
 package com.amaze.filemanager.services.ssh.tasks;
 
 import android.os.AsyncTask;
+import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
@@ -16,12 +38,29 @@ import java.security.PublicKey;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.atomic.AtomicReference;
 
-public class VerifyHostKeyTask extends AsyncTask<Void, Void, PublicKey>
+/**
+ * {@link AsyncTask} to obtain SSH host fingerprint.
+ *
+ * It works by adding a {@link HostKeyVerifier} that accepts all SSH host keys, then obtain the
+ * key shown by server, and return to the task's caller.
+ *
+ * {@link Semaphore} with {@link AtomicReference} combo is used to ensure SSH host key is obtained
+ * successfully on returning to the task caller.
+ *
+ * Mainly used by {@link com.amaze.filemanager.ui.dialogs.SftpConnectDialog} on saving SSH
+ * connection settings.
+ *
+ * @see HostKeyVerifier
+ * @see SSHClient#addHostKeyVerifier(String)
+ * @see com.amaze.filemanager.ui.dialogs.SftpConnectDialog#onCreateDialog(Bundle)
+ */
+
+public class GetSshHostFingerprintTask extends AsyncTask<Void, Void, PublicKey>
 {
     final String mHostname;
     final int mPort;
 
-    public VerifyHostKeyTask(@NonNull String hostname, int port) {
+    public GetSshHostFingerprintTask(@NonNull String hostname, int port) {
         this.mHostname = hostname;
         this.mPort = port;
     }
diff --git a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/SshAuthenticationTask.java b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/SshAuthenticationTask.java
index 1ef672a93..f9344d95f 100644
--- a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/SshAuthenticationTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/SshAuthenticationTask.java
@@ -1,6 +1,28 @@
+/*
+ * SshAuthenticationTask.java
+ *
+ * Copyright © 2017 Raymond Lai <airwave209gt at gmail.com>.
+ *
+ * This file is part of AmazeFileManager.
+ *
+ * AmazeFileManager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * AmazeFileManager is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with AmazeFileManager. If not, see <http ://www.gnu.org/licenses/>.
+ */
+
 package com.amaze.filemanager.services.ssh.tasks;
 
 import android.os.AsyncTask;
+import android.support.annotation.NonNull;
 import android.widget.Toast;
 
 import com.amaze.filemanager.R;
@@ -14,13 +36,21 @@ import net.schmizz.sshj.transport.TransportException;
 import net.schmizz.sshj.userauth.UserAuthException;
 import net.schmizz.sshj.userauth.keyprovider.KeyProvider;
 
-import org.bouncycastle.openssl.PEMException;
-
 import java.io.IOException;
 import java.security.KeyPair;
 import java.security.PrivateKey;
 import java.security.PublicKey;
 
+/**
+ * {@link AsyncTask} for authenticating with SSH server to verify if parameters are correct.
+ *
+ * Used by {@link com.amaze.filemanager.ui.dialogs.SftpConnectDialog}.
+ *
+ * @see SSHClient
+ * @see SSHClient#authPassword(String, String)
+ * @see SSHClient#authPublickey(String, KeyProvider...)
+ * @see com.amaze.filemanager.ui.dialogs.SftpConnectDialog#authenticateAndSaveSetup(String, String, int, String, String, String, String, KeyPair)
+ */
 public class SshAuthenticationTask extends AsyncTask<Void, Void, Boolean>
 {
     private final String mHostname;
@@ -31,10 +61,20 @@ public class SshAuthenticationTask extends AsyncTask<Void, Void, Boolean>
     private final String mPassword;
     private final KeyPair mPrivateKey;
 
-    public SshAuthenticationTask(String hostname,
-                                 int port,
-                                 String hostKey,
-                                 String username,
+    /**
+     * Constructor.
+     *
+     * @param hostname hostname, required
+     * @param port port, must be unsigned integer
+     * @param hostKey SSH host fingerprint, required
+     * @param username login username, required
+     * @param password login password, required if using password authentication
+     * @param privateKey login {@link KeyPair}, required if using key-based authentication
+     */
+    public SshAuthenticationTask(@NonNull String hostname,
+                                 @NonNull int port,
+                                 @NonNull String hostKey,
+                                 @NonNull String username,
                                  String password,
                                  KeyPair privateKey)
     {
@@ -54,8 +94,7 @@ public class SshAuthenticationTask extends AsyncTask<Void, Void, Boolean>
 
         try {
             sshClient.connect(mHostname, mPort);
-            if(mPassword != null && !"".equals(mPassword))
-            {
+            if(mPassword != null && !"".equals(mPassword)) {
                 sshClient.authPassword(mUsername, mPassword);
                 return true;
             }
@@ -94,6 +133,7 @@ public class SshAuthenticationTask extends AsyncTask<Void, Void, Boolean>
         return false;
     }
 
+    //If authentication failed, use Toast to notify user.
     @Override
     protected void onPostExecute(Boolean result) {
         if(!result)
diff --git a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyPemTask.java b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyPemTask.java
index 89ea88b97..0aa96c7aa 100644
--- a/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyPemTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/ssh/tasks/VerifyPemTask.java
@@ -1,9 +1,32 @@
+/*
+ * VerifyPemTask.java
+ *
+ * Copyright © 2017 Raymond Lai <airwave209gt at gmail.com>.
+ *
+ * This file is part of AmazeFileManager.
+ *
+ * AmazeFileManager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * AmazeFileManager is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with AmazeFileManager. If not, see <http ://www.gnu.org/licenses/>.
+ */
+
 package com.amaze.filemanager.services.ssh.tasks;
 
 import android.os.AsyncTask;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
+import net.schmizz.sshj.userauth.keyprovider.KeyProvider;
+
 import org.bouncycastle.openssl.PEMKeyPair;
 import org.bouncycastle.openssl.PEMParser;
 import org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;
@@ -14,6 +37,16 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.security.KeyPair;
 
+/**
+ * {@link AsyncTask} to verify given {@link InputStream} is a valid private key in PEM format.
+ *
+ * It uses {@link InputStreamReader} to read the incoming InputStream as String, then use
+ * {@link JcaPEMKeyConverter} to convert contents to {@link KeyPair} which is requird by sshj.
+ *
+ * @see JcaPEMKeyConverter
+ * @see KeyProvider
+ * @see net.schmizz.sshj.SSHClient#authPublickey(String, KeyProvider...)
+ */
 public class VerifyPemTask extends AsyncTask<Void, Void, KeyPair>
 {
     private static final String TAG = "VerifyPemTask";
diff --git a/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java b/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
index 88a6bdae3..449353aa3 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
@@ -28,10 +28,8 @@ import android.app.DialogFragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.net.Uri;
 import android.os.Bundle;
-import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.Fragment;
@@ -41,7 +39,6 @@ import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
-import android.widget.Toast;
 
 import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
@@ -53,7 +50,7 @@ import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.fragments.TabFragment;
 import com.amaze.filemanager.services.ssh.SshConnectionPool;
 import com.amaze.filemanager.services.ssh.tasks.SshAuthenticationTask;
-import com.amaze.filemanager.services.ssh.tasks.VerifyHostKeyTask;
+import com.amaze.filemanager.services.ssh.tasks.GetSshHostFingerprintTask;
 import com.amaze.filemanager.services.ssh.tasks.VerifyPemTask;
 import com.amaze.filemanager.utils.AppConfig;
 import com.amaze.filemanager.utils.DataUtils;
@@ -114,6 +111,8 @@ public class SftpConnectDialog extends DialogFragment {
         final EditText passwordET = (EditText) v2.findViewById(R.id.passwordET);
         final Button selectPemBTN = (Button) v2.findViewById(R.id.selectPemBTN);
 
+        // If it's new connection setup, set some default values
+        // Otherwise, use given Bundle instance for filling in the blanks
         if(!edit) {
             connectionET.setText(R.string.scp_con);
             portET.setText(Integer.toString(SshConnectionPool.SSH_DEFAULT_PORT));
@@ -130,6 +129,7 @@ public class SftpConnectDialog extends DialogFragment {
             }
         }
 
+        //For convenience, so I don't need to press backspace all the time
         portET.setOnFocusChangeListener(new View.OnFocusChangeListener() {
             @Override
             public void onFocusChange(View v, boolean hasFocus) {
@@ -140,6 +140,8 @@ public class SftpConnectDialog extends DialogFragment {
 
         int accentColor = mUtilsProvider.getColorPreference().getColor(ColorUsage.ACCENT);
 
+        //Use system provided action to get Uri to PEM.
+        //If MaterialDialog.Builder can be upgraded we may use their file selection dialog too
         selectPemBTN.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -151,6 +153,7 @@ public class SftpConnectDialog extends DialogFragment {
             }
         });
 
+        //Define action for buttons
         final MaterialDialog.Builder dialogBuilder = new MaterialDialog.Builder(mContext)
             .title((R.string.scp_con))
             .autoDismiss(false)
@@ -179,7 +182,7 @@ public class SftpConnectDialog extends DialogFragment {
                         password, mSelectedParsedKeyPairName, mSelectedParsedKeyPair);
             } else {
                 try {
-                    PublicKey hostKey = new VerifyHostKeyTask(hostname, port).execute().get();
+                    PublicKey hostKey = new GetSshHostFingerprintTask(hostname, port).execute().get();
                     if(hostKey != null) {
                         final String hostKeyFingerprint = SecurityUtils.getFingerprint(hostKey);
                         StringBuilder sb = new StringBuilder(hostname);
@@ -231,6 +234,7 @@ public class SftpConnectDialog extends DialogFragment {
             }
         });
 
+        //If we are editing connection settings, give new actions for neutral and negative buttons
         if(edit) {
             Log.d(TAG, "Edit? " + edit);
             dialogBuilder.negativeText(R.string.delete).onNegative(new MaterialDialog.SingleButtonCallback() {
@@ -268,6 +272,8 @@ public class SftpConnectDialog extends DialogFragment {
 
         MaterialDialog dialog = dialogBuilder.build();
 
+        // Some validations to make sure the Create/Update button is clickable only when required
+        // setting values are given
         final View okBTN = dialog.getActionButton(DialogAction.POSITIVE);
         okBTN.setEnabled(false);
 
@@ -298,6 +304,9 @@ public class SftpConnectDialog extends DialogFragment {
         return dialog;
     }
 
+    /**
+     * Set the PEM key for authentication when the Intent to browse file returned.
+     */
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
@@ -382,6 +391,7 @@ public class SftpConnectDialog extends DialogFragment {
         }
     }
 
+    //Decide the SSH URL depends on password/selected KeyPair
     private String deriveSftpPathFrom(String hostname, int port, String username, String password,
                                       KeyPair selectedParsedKeyPair) {
         return (selectedParsedKeyPair != null || password == null) ?
@@ -389,6 +399,7 @@ public class SftpConnectDialog extends DialogFragment {
                 String.format("ssh://%s:%s@%s:%d", username, password, hostname, port);
     }
 
+    //Read the PEM content from InputStream to String.
     private String getPemContents() {
         if(mSelectedPem == null)
             return null;
