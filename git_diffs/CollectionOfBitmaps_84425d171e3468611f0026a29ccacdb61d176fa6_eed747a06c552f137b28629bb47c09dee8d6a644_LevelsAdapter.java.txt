diff --git a/app/src/main/java/ch/logixisland/anuto/view/level/LevelsAdapter.java b/app/src/main/java/ch/logixisland/anuto/view/level/LevelsAdapter.java
index 40657602..8adce1d6 100755
--- a/app/src/main/java/ch/logixisland/anuto/view/level/LevelsAdapter.java
+++ b/app/src/main/java/ch/logixisland/anuto/view/level/LevelsAdapter.java
@@ -2,7 +2,6 @@ package ch.logixisland.anuto.view.level;
 
 import android.app.Activity;
 import android.content.res.Resources;
-import android.graphics.Bitmap;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -12,7 +11,6 @@ import android.widget.TextView;
 
 import java.lang.ref.WeakReference;
 import java.text.DecimalFormat;
-import java.util.ArrayList;
 import java.util.List;
 
 import ch.logixisland.anuto.R;
@@ -25,20 +23,11 @@ class LevelsAdapter extends BaseAdapter {
     private final WeakReference<Activity> mActivityRef;
     private final HighScores mHighScores;
     private final List<LevelInfo> mLevelInfos;
-    private final List<Bitmap> mLevelThumbs;
 
     LevelsAdapter(Activity activity, LevelRepository levelRepository, HighScores highScores) {
         mActivityRef = new WeakReference<>(activity);
         mLevelInfos = levelRepository.getLevels();
         mHighScores = highScores;
-
-        mLevelThumbs = new ArrayList<>();
-        LevelThumbGenerator thumbGenerator = new LevelThumbGenerator();
-        for (LevelInfo levelInfo : mLevelInfos) {
-            mLevelThumbs.add(thumbGenerator.generateThumb(
-                    activity.getResources(),
-                    levelInfo.getLevelDataResId()));
-        }
     }
 
     static private class ViewHolder {
@@ -89,12 +78,14 @@ class LevelsAdapter extends BaseAdapter {
         ViewHolder viewHolder = new ViewHolder(levelItemView);
 
         viewHolder.txt_name.setText(resources.getString(levelInfo.getLevelNameResId()));
-        viewHolder.img_thumb.setImageBitmap(mLevelThumbs.get(position));
 
         DecimalFormat fmt = new DecimalFormat("###,###,###,###");
         String highScore = fmt.format(mHighScores.getHighScore(levelInfo.getLevelId()));
         viewHolder.txt_highscore.setText(resources.getString(R.string.score) + ": " + highScore);
 
+        viewHolder.img_thumb.setImageBitmap(null);
+        new LoadThumbTask(resources, viewHolder.img_thumb, levelInfo.getLevelDataResId()).execute();
+
         return levelItemView;
     }
 }
diff --git a/app/src/main/java/ch/logixisland/anuto/view/level/LoadThumbTask.java b/app/src/main/java/ch/logixisland/anuto/view/level/LoadThumbTask.java
new file mode 100755
index 00000000..db2548d0
--- /dev/null
+++ b/app/src/main/java/ch/logixisland/anuto/view/level/LoadThumbTask.java
@@ -0,0 +1,40 @@
+package ch.logixisland.anuto.view.level;
+
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.os.AsyncTask;
+import android.util.SparseArray;
+import android.widget.ImageView;
+
+class LoadThumbTask extends AsyncTask<Void, Void, Bitmap> {
+
+    private static final SparseArray<Bitmap> sThumbCache = new SparseArray<>();
+    private static final LevelThumbGenerator sLevelThumbGenerator = new LevelThumbGenerator();
+
+    private final Resources mResources;
+    private final ImageView mImageView;
+    private final int mLevelDataResId;
+
+    LoadThumbTask(Resources resources, ImageView imageView, int levelDataResId) {
+        mResources = resources;
+        mImageView = imageView;
+        mLevelDataResId = levelDataResId;
+    }
+
+    @Override
+    protected Bitmap doInBackground(Void... params) {
+        Bitmap thumb = sThumbCache.get(mLevelDataResId);
+
+        if (thumb == null) {
+            thumb = sLevelThumbGenerator.generateThumb(mResources, mLevelDataResId);
+            sThumbCache.append(mLevelDataResId, thumb);
+        }
+
+        return thumb;
+    }
+
+    @Override
+    protected void onPostExecute(Bitmap thumb) {
+        mImageView.setImageBitmap(thumb);
+    }
+}
