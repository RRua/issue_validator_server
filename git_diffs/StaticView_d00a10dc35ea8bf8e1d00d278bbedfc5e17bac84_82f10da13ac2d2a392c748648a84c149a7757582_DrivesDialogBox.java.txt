diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
index 27425657..cf0f289c 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
@@ -742,26 +742,28 @@ public class VMExecutor {
 		return this.getstate();
 	}
 
-	public String change_dev(String dev, String image_path) {
+	public void change_dev(final String dev, final String image_path) {
+
+        Thread thread = new Thread(new Runnable() {
+            public void run() {
+                if (image_path == null || image_path.trim().equals("")) {
+                    VMExecutor.this.busy = true;
+                    String res = VMExecutor.this.ejectdev(dev);
+                    UIUtils.toastShort(context, res);
+                    VMExecutor.this.busy = false;
+                } else if (FileUtils.fileValid(context, image_path)){
+                    VMExecutor.this.busy = true;
+                    String res = VMExecutor.this.changedev(dev, image_path);
+                    UIUtils.toastShort(context, res);
+                    VMExecutor.this.busy = false;
+                } else {
+                    UIUtils.toastShort(context, "File does not exist");
+                }
+            }
+        });
+        thread.setPriority(Thread.MIN_PRIORITY);
+        thread.start();
 
-		if (image_path == null || image_path.trim().equals("")) {
-			this.busy = true;
-			String res = this.ejectdev(dev);
-			this.busy = false;
-			return res;
-		} else {
-			this.busy = true;
-			String res = this.ejectdev(dev);
-			try {
-				Thread.sleep(1000);
-			} catch (InterruptedException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-			res = this.changedev(dev, image_path);
-			this.busy = false;
-			return res;
-		}
 
 	}
 
@@ -787,13 +789,13 @@ public class VMExecutor {
 	}
 
 	public int get_fd(String path) {
-		int fd = LimboActivity.get_fd(path);
+		int fd = FileUtils.get_fd(context, path);
 		return fd;
 
 	}
 
 	public int close_fd(int fd) {
-		int res = LimboActivity.close_fd(fd);
+		int res = FileUtils.close_fd(fd);
 		return res;
 
 	}
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboActivity.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboActivity.java
index c98a2a71..022e7610 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboActivity.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboActivity.java
@@ -41,7 +41,6 @@ import android.os.Environment;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
-import android.os.ParcelFileDescriptor;
 import android.os.PowerManager.WakeLock;
 import android.os.StrictMode;
 import android.preference.PreferenceManager;
@@ -96,7 +95,6 @@ import org.apache.http.impl.client.DefaultHttpClient;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -106,7 +104,6 @@ import java.net.SocketException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -135,7 +132,6 @@ public class LimboActivity extends AppCompatActivity {
 	static public ProgressDialog progDialog;
 	public static Machine currMachine = null;
 	public static Handler OShandler;
-	static HashMap<Integer, ParcelFileDescriptor> fds = new HashMap<Integer, ParcelFileDescriptor>();
 	private static Installer a;
 	private static TextWatcher appendChangeListener;
 	private static TextWatcher extraParamsChangeListener;
@@ -244,51 +240,47 @@ public class LimboActivity extends AppCompatActivity {
 			Integer messageType = (Integer) b.get("message_type");
 
 			if (messageType != null && messageType == Config.VM_PAUSED) {
-				Toast.makeText(activity, "VM Paused", Toast.LENGTH_LONG).show();
+                UIUtils.toastShort(LimboActivity.this, "VM Paused");
 
 			}
 			if (messageType != null && messageType == Config.VM_RESUMED) {
-				Toast.makeText(activity, "VM Resuming, Please Wait", Toast.LENGTH_LONG).show();
+                UIUtils.toastShort(LimboActivity.this, "VM Resuming, Please Wait");
 			}
 			if (messageType != null && messageType == Config.VM_STARTED) {
 				if (!vmStarted) {
-					Toast.makeText(activity, "VM Started\nPause the VM instead so you won't have to boot again!",
-							Toast.LENGTH_LONG).show();
+                    UIUtils.toastLong(LimboActivity.this, "VM Started\nPause the VM instead so you won't have to boot again!");
 				} else {
-					Toast.makeText(activity, "Connecting to VM Display", Toast.LENGTH_LONG).show();
+                    UIUtils.toastShort(LimboActivity.this, "Connecting to VM Display");
 				}
 				enableNonRemovableDeviceOptions(false);
 				mStart.setImageResource(R.drawable.play);
 
 			}
 			if (messageType != null && messageType == Config.VM_STOPPED) {
-				Toast.makeText(activity, "VM Shutdown", Toast.LENGTH_LONG).show();
+                UIUtils.toastShort(LimboActivity.this, "VM Shutdown");
 				mStart.setImageResource(R.drawable.play);
 
 			}
 			if (messageType != null && messageType == Config.VM_RESTARTED) {
-				Toast.makeText(activity, "VM Reset", Toast.LENGTH_LONG).show();
+                UIUtils.toastShort(LimboActivity.this, "VM Reset");
 			}
 			if (messageType != null && messageType == Config.VM_SAVED) {
-				Toast.makeText(activity, "VM Saved", Toast.LENGTH_LONG).show();
+                UIUtils.toastShort(LimboActivity.this, "VM Saved");
 			}
 			if (messageType != null && messageType == Config.VM_NO_QCOW2) {
-				Toast.makeText(activity, "Couldn't find a QCOW2 image\nPlease attach an HDA or HDB image first!",
-						Toast.LENGTH_LONG).show();
+                UIUtils.toastLong(LimboActivity.this, "Couldn't find a QCOW2 image\nPlease attach an HDA or HDB image first!");
 			}
 			if (messageType != null && messageType == Config.VM_NO_KERNEL) {
-				Toast.makeText(activity, "Couldn't find a Kernel image\nPlease attach a Kernel image first!",
-						Toast.LENGTH_LONG).show();
+                UIUtils.toastLong(LimboActivity.this, "Couldn't find a Kernel image\nPlease attach a Kernel image first!");
 			}
 			if (messageType != null && messageType == Config.VM_NO_INITRD) {
-				Toast.makeText(activity, "Couldn't find a initrd image\nPlease attach an initrd image first!",
-						Toast.LENGTH_LONG).show();
+                UIUtils.toastLong(LimboActivity.this, "Couldn't find a initrd image\nPlease attach an initrd image first!");
 			}
 			if (messageType != null && messageType == Config.VM_ARM_NOMACHINE) {
-				Toast.makeText(activity, "Please select an ARM machine type first!", Toast.LENGTH_LONG).show();
+                UIUtils.toastLong(LimboActivity.this, "Please select an ARM machine type first!");
 			}
 			if (messageType != null && messageType == Config.VM_NOTRUNNING) {
-				Toast.makeText(activity, "VM not Running", Toast.LENGTH_SHORT).show();
+                UIUtils.toastShort(LimboActivity.this, "VM not running");
 			}
 			if (messageType != null && messageType == Config.VM_CREATED) {
 				String machineValue = (String) b.get("machine_name");
@@ -346,14 +338,13 @@ public class LimboActivity extends AppCompatActivity {
 				if (progDialog.isShowing()) {
 					progDialog.dismiss();
 				}
-				Toast.makeText(activity, "Machines are exported in " + Config.DBFile, Toast.LENGTH_LONG).show();
+                UIUtils.toastLong(LimboActivity.this, "Machines are exported in " + Config.DBFile);
 			}
 			if (messageType != null && messageType == Config.VM_IMPORT) {
 				if (progDialog.isShowing()) {
 					progDialog.dismiss();
 				}
-				Toast.makeText(activity, " Machines have been imported from " + Config.DBFile, Toast.LENGTH_LONG)
-						.show();
+                UIUtils.toastLong(LimboActivity.this, "Machines have been imported from " + Config.DBFile);
 				populateAttributes();
 			}
 
@@ -648,59 +639,7 @@ public class LimboActivity extends AppCompatActivity {
 
 	}
 
-	public static int get_fd(String path) {
-		int fd = 0;
-		if (path == null)
-			return 0;
 
-		if (path.startsWith("/content") || path.startsWith("content://")) {
-			path = path.replaceFirst("/content", "content:");
-
-			try {
-				ParcelFileDescriptor pfd = activity.getContentResolver().openFileDescriptor(Uri.parse(path), "rw");
-				fd = pfd.getFd();
-				fds.put(fd, pfd);
-			} catch (final FileNotFoundException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-				new Handler(Looper.getMainLooper()).post(new Runnable() {
-					@Override
-					public void run() {
-						Toast.makeText(LimboActivity.activity, "Error: " + e, Toast.LENGTH_SHORT).show();
-					}
-				});
-			}
-		} else {
-			try {
-				File file = new File(path);
-				if (!file.exists())
-					file.createNewFile();
-				ParcelFileDescriptor pfd = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_WRITE_ONLY);
-				fd = pfd.getFd();
-			} catch (Exception e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-
-		}
-		return fd;
-	}
-
-	public static int close_fd(int fd) {
-
-		if (fds.containsKey(fd)) {
-			ParcelFileDescriptor pfd = fds.get(fd);
-			try {
-				pfd.close();
-				fds.remove(fd);
-				return 0; // success for Native side
-			} catch (IOException e) {
-				e.printStackTrace();
-			}
-
-		}
-		return -1;
-	}
 
 	public void setUserPressed(boolean pressed) {
 
@@ -1893,11 +1832,19 @@ public class LimboActivity extends AppCompatActivity {
 	}
 
 	public void setupNativeLibs() {
+        //iconv is not really needed
+        if(Config.enable_iconv) {
+            System.loadLibrary("iconv");
+        }
+
+        //Glib
 		System.loadLibrary("glib-2.0");
 		System.loadLibrary("gthread-2.0");
 		System.loadLibrary("gobject-2.0");
 		System.loadLibrary("gmodule-2.0");
-		System.loadLibrary("pixman");
+
+        //Pixman for qemu
+        System.loadLibrary("pixman");
 
 		if (Config.enable_SPICE) {
 			System.loadLibrary("crypto");
@@ -1916,10 +1863,13 @@ public class LimboActivity extends AppCompatActivity {
 			// System.loadLibrary("SDL_ttf");
 
 		}
+
+		//main for SDL
 		if (Config.enable_SDL) {
 			System.loadLibrary("main");
 		}
 
+		//Limbo needed for vmexecutor
 		System.loadLibrary("limbo");
 
 		loadQEMULib();
@@ -2393,12 +2343,12 @@ public class LimboActivity extends AppCompatActivity {
 	private void onStartButton() {
 
 		if (this.mMachine.getSelectedItemPosition() == 0 || this.currMachine == null) {
-			UIUtils.toastLong(getApplicationContext(), "Select or Create a Virtual Machine first");
+			UIUtils.toastShort(getApplicationContext(), "Select or Create a Virtual Machine first");
 			return;
 		}
 		String filenotexists = validateFiles();
 		if (filenotexists != null) {
-            UIUtils.toastLong(getApplicationContext(), "Could not find file: " + filenotexists);
+            UIUtils.toastShort(getApplicationContext(), "Could not find file: " + filenotexists);
 			return;
 		}
 		if (currMachine.snapshot_name != null && !currMachine.snapshot_name.toLowerCase().equals("none")
@@ -2560,25 +2510,25 @@ public class LimboActivity extends AppCompatActivity {
 
 		int fd;
 		try {
-			if (!fileValid(currMachine.hda_img_path))
+			if (!FileUtils.fileValid(this, currMachine.hda_img_path))
 				return currMachine.hda_img_path;
-			if (!fileValid(currMachine.hdb_img_path))
+			if (!FileUtils.fileValid(this, currMachine.hdb_img_path))
 				return currMachine.hdb_img_path;
-			if (!fileValid(currMachine.hdc_img_path))
+			if (!FileUtils.fileValid(this, currMachine.hdc_img_path))
 				return currMachine.hdc_img_path;
-			if (!fileValid(currMachine.hdd_img_path))
+			if (!FileUtils.fileValid(this, currMachine.hdd_img_path))
 				return currMachine.hdd_img_path;
-			if (!fileValid(currMachine.fda_img_path))
+			if (!FileUtils.fileValid(this, currMachine.fda_img_path))
 				return currMachine.fda_img_path;
-			if (!fileValid(currMachine.fdb_img_path))
+			if (!FileUtils.fileValid(this, currMachine.fdb_img_path))
 				return currMachine.fdb_img_path;
-			if (!fileValid(currMachine.sd_img_path))
+			if (!FileUtils.fileValid(this, currMachine.sd_img_path))
 				return currMachine.sd_img_path;
-			if (!fileValid(currMachine.cd_iso_path))
+			if (!FileUtils.fileValid(this, currMachine.cd_iso_path))
 				return currMachine.cd_iso_path;
-			if (!fileValid(currMachine.kernel))
+			if (!FileUtils.fileValid(this, currMachine.kernel))
 				return currMachine.kernel;
-			if (!fileValid(currMachine.initrd))
+			if (!FileUtils.fileValid(this, currMachine.initrd))
 				return currMachine.initrd;
 
 		} catch (Exception ex) {
@@ -2587,20 +2537,7 @@ public class LimboActivity extends AppCompatActivity {
 		return null;
 	}
 
-	private boolean fileValid(String path) {
 
-		if (path == null || path.equals(""))
-			return true;
-		if (path.startsWith("content://") || path.startsWith("/content/")) {
-			int fd = get_fd(path);
-			if (fd <= 0)
-				return false;
-		} else {
-			File file = new File(path);
-			return file.exists();
-		}
-		return true;
-	}
 
 	private void onStopButton(boolean exit) {
 		stopVM(exit);
@@ -3277,7 +3214,7 @@ public class LimboActivity extends AppCompatActivity {
 		button.setOnClickListener(new View.OnClickListener() {
 			public void onClick(View view) {
 				if (vmNameTextView.getText().toString().trim().equals(""))
-					UIUtils.toastLong(activity, "Machine name cannot be empty");
+					UIUtils.toastShort(activity, "Machine name cannot be empty");
 				else {
 					sendHandlerMessage(handler, Config.VM_CREATED, "machine_name", vmNameTextView.getText().toString());
 					alertDialog.dismiss();
@@ -5595,7 +5532,7 @@ public class LimboActivity extends AppCompatActivity {
 		// Check if SD card is mounted
 		String state = Environment.getExternalStorageState();
 		if (!Environment.MEDIA_MOUNTED.equals(state)) {
-			Toast.makeText(getApplicationContext(), "Error: SD card is not mounted", Toast.LENGTH_LONG).show();
+			UIUtils.toastShort(this, "Error: SD card is not mounted");
 			return;
 		}
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
index 6d3cb804..8d58c3f7 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
@@ -233,8 +233,8 @@ public class LimboSDLActivity extends SDLActivity {
 			if (currDir != null && !currDir.trim().equals("")) {
 				LimboSettingsManager.setLastDir(this, currDir);
 			}
-			if (fileType != null && file != null) {
-				DrivesDialogBox.setDriveAttr(fileType, file, true);
+			if (fileType != null && file != null && drives!=null) {
+				drives.setDriveAttr(fileType, file, true);
 			}
 
 		} else if (requestCode == Config.REQUEST_SDCARD_CODE) {
@@ -253,13 +253,13 @@ public class LimboSDLActivity extends SDLActivity {
 				// Protect from qemu thinking it's a protocol
 				file = ("/" + file).replace(":", "");
 
-				if (DrivesDialogBox.filetype != null && file != null) {
+				if (drives != null && drives.filetype != null && file != null) {
 
 					final String fileTmp = file;
 					Thread thread = new Thread(new Runnable() {
 						public void run() {
 
-							DrivesDialogBox.setDriveAttr(DrivesDialogBox.filetype, fileTmp, true);
+							drives.setDriveAttr(drives.filetype, fileTmp, true);
 						}
 					});
 					thread.setPriority(Thread.MIN_PRIORITY);
@@ -482,7 +482,7 @@ public class LimboSDLActivity extends SDLActivity {
 				drives = new DrivesDialogBox(activity, R.style.Transparent, this, LimboActivity.currMachine);
 				drives.show();
 			} else {
-				UIUtils.toastLong(activity, "No removable devices attached");
+				UIUtils.toastShort(activity, "No removable devices attached");
 			}
 		} else if (item.getItemId() == R.id.itemReset) {
 			resetVM();
@@ -504,8 +504,7 @@ public class LimboSDLActivity extends SDLActivity {
 			if (android.os.Build.VERSION.SDK_INT == android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
 				this.promptBluetoothMouse(activity);
 			} else {
-				Toast.makeText(this.getApplicationContext(), "External Mouse support only for ICS and above",
-						Toast.LENGTH_LONG).show();
+				UIUtils.toastLong(this, "External Mouse support only for ICS and above");
 			}
 
 		} else if (item.getItemId() == R.id.itemSaveState) {
@@ -1017,8 +1016,7 @@ public class LimboSDLActivity extends SDLActivity {
 						|| !LimboActivity.currMachine.hdd_img_path.contains(".qcow2")))
 
 		{
-			Toast.makeText(activity.getApplicationContext(),
-					"No HDD image found, please create a qcow2 image from Limbo console", Toast.LENGTH_LONG).show();
+            UIUtils.toastLong(this, "No HDD image found, please create a qcow2 image from Limbo console");
 			return;
 		}
 		final AlertDialog alertDialog;
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboVNCActivity.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboVNCActivity.java
index 29f99c32..d00fd95f 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboVNCActivity.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboVNCActivity.java
@@ -317,8 +317,8 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 			if (currDir != null && !currDir.trim().equals("")) {
 				LimboSettingsManager.setLastDir(this, currDir);
 			}
-			if (fileType != null && file != null) {
-				DrivesDialogBox.setDriveAttr(fileType, file, true);
+			if (drives !=null && fileType != null && file != null) {
+				drives.setDriveAttr(fileType, file, true);
 			}
 
 		} else if (requestCode == Config.REQUEST_SDCARD_CODE) {
@@ -326,7 +326,7 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 				Uri uri = data.getData();
 				DocumentFile pickedFile = DocumentFile.fromSingleUri(activity, uri);
 				String file = uri.toString();
-				
+
 				activity.grantUriPermission(activity.getPackageName(), uri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
 
                 if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
@@ -337,8 +337,8 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 				// Protect from qemu thinking it's a protocol
 				file = ("/" + file).replace(":", "");
 
-				if (DrivesDialogBox.filetype != null && file != null) {
-					DrivesDialogBox.setDriveAttr(DrivesDialogBox.filetype, file, true);
+				if (drives!=null && drives.filetype != null && file != null) {
+					drives.setDriveAttr(drives.filetype, file, true);
 				}
 			}
 
@@ -363,7 +363,7 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 				drives = new DrivesDialogBox(activity, R.style.Transparent, this, LimboActivity.currMachine);
 				drives.show();
 			} else {
-				UIUtils.toastLong(activity, "No removable devices attached");
+				UIUtils.toastShort(activity, "No removable devices attached");
 			}
 
 		} else if (item.getItemId() == R.id.itemMonitor) {
@@ -673,8 +673,7 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 				new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
 					@Override
 					public void run() {
-						Toast.makeText(getApplicationContext(), "Please wait while saving HD Snapshot",
-								Toast.LENGTH_LONG).show();
+						UIUtils.toastShort(LimboVNCActivity.this, "Please wait while saving HD Snapshot");
 						// progDialog = ProgressDialog.show(activity, "Please
 						// Wait", "Saving VM
 						// State...", true);
@@ -757,8 +756,7 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 				new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
 					@Override
 					public void run() {
-						Toast.makeText(getApplicationContext(), "Please wait while saving VM State", Toast.LENGTH_LONG)
-								.show();
+                        UIUtils.toastShort(LimboVNCActivity.this, "Please wait while saving VM State");
 					}
 				}, 500);
 				try {
@@ -903,8 +901,7 @@ public class LimboVNCActivity extends android.androidVNC.VncCanvasActivity {
 						|| !LimboActivity.currMachine.hdd_img_path.contains(".qcow2")))
 
 		{
-			Toast.makeText(activity.getApplicationContext(),
-					"No HDD image found, please create a qcow2 image from Limbo console", Toast.LENGTH_LONG).show();
+            UIUtils.toastLong(LimboVNCActivity.this, "No HDD image found, please create a qcow2 image from Limbo console");
 			return;
 		}
 		final AlertDialog alertDialog;
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/DrivesDialogBox.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/DrivesDialogBox.java
index 07d0e176..d72d2fe8 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/DrivesDialogBox.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/DrivesDialogBox.java
@@ -1,14 +1,5 @@
 package com.max2idea.android.limbo.utils;
 
-import java.util.ArrayList;
-import java.util.Iterator;
-
-import com.limbo.emu.lib.R;
-import com.max2idea.android.limbo.main.Config;
-import com.max2idea.android.limbo.main.LimboActivity;
-import com.max2idea.android.limbo.main.LimboFileManager;
-import com.max2idea.android.limbo.main.LimboSettingsManager;
-
 import android.app.Activity;
 import android.app.Dialog;
 import android.content.Context;
@@ -27,8 +18,17 @@ import android.widget.LinearLayout;
 import android.widget.Spinner;
 import android.widget.Toast;
 
+import com.limbo.emu.lib.R;
+import com.max2idea.android.limbo.main.Config;
+import com.max2idea.android.limbo.main.LimboActivity;
+import com.max2idea.android.limbo.main.LimboFileManager;
+import com.max2idea.android.limbo.main.LimboSettingsManager;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+
 public class DrivesDialogBox extends Dialog {
-	private static Activity activity;
+	private Activity activity;
 	private Machine currMachine;
 
 	public DrivesDialogBox(Context context, int theme, Activity activity1, Machine currMachine) {
@@ -49,22 +49,22 @@ public class DrivesDialogBox extends Dialog {
 		this.dismiss();
 	}
 
-	public static Spinner mCD;
-	public static LinearLayout mCDLayout;
-	public static LinearLayout mFDALayout;
-	public static LinearLayout mFDBLayout;
-	public static LinearLayout mSDLayout;
-	public static Spinner mFDA;
-	public static Spinner mSD;
-	public static Spinner mFDB;
-	public static Button mOK;
+	public Spinner mCD;
+	public LinearLayout mCDLayout;
+	public LinearLayout mFDALayout;
+	public LinearLayout mFDBLayout;
+	public LinearLayout mSDLayout;
+	public Spinner mFDA;
+	public Spinner mSD;
+	public Spinner mFDB;
+	public Button mOK;
 
-	public static boolean userPressedCDROM = true;
-	public static boolean userPressedFDA = true;
-	public static boolean userPressedFDB = true;
-	public static boolean userPressedSD = true;
+	public boolean userPressedCDROM = true;
+	public boolean userPressedFDA = true;
+	public boolean userPressedFDB = true;
+	public boolean userPressedSD = true;
 
-	public static String filetype;
+	public String filetype;
 
 	private void getWidgets() {
 		mCD = (Spinner) findViewById(R.id.cdromimgval);
@@ -265,7 +265,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	// Set CDROM
-	private static void populateCDRom(String fileType) {
+	private void populateCDRom(String fileType) {
 		userPressedCDROM = false;
 		// Add from History
 		ArrayList<String> oldCDs = FavOpenHelper.getInstance(activity).getFavURL(fileType);
@@ -295,7 +295,7 @@ public class DrivesDialogBox extends Dialog {
 		mCD.invalidate();
 	}
 
-	private static void populateSD(String fileType) {
+	private void populateSD(String fileType) {
 		userPressedSD = false;
 		// Add from History
 		ArrayList<String> oldSDs = FavOpenHelper.getInstance(activity).getFavURL(fileType);
@@ -325,7 +325,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	// Set Floppy
-	private static void populateFloppy(String fileType) {
+	private void populateFloppy(String fileType) {
 		// Add from History
 		ArrayList<String> oldFDs = FavOpenHelper.getInstance(activity).getFavURL(fileType);
 		int length = 0;
@@ -364,7 +364,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static void setDriveAttr(String fileType, String file, boolean userPressed) {
+	public void setDriveAttr(String fileType, String file, boolean userPressed) {
 		
 		addDriveToList(file, fileType);
 		if (fileType != null && fileType.startsWith("cd") && file != null && !file.trim().equals("")) {
@@ -414,7 +414,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	@SuppressWarnings("unchecked")
-	private static void setCDROM(final String cdrom, final boolean userPressed) {
+	private void setCDROM(final String cdrom, final boolean userPressed) {
 		userPressedCDROM = userPressed;
 		LimboActivity.currMachine.cd_iso_path = cdrom;
 		// Log.v("DB", "UserPressed: " + userPressedCDROM + " CDROM=" + cdrom);
@@ -441,7 +441,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	@SuppressWarnings("unchecked")
-	private static void setSD(final String sd, final boolean userPressed) {
+	private void setSD(final String sd, final boolean userPressed) {
 		userPressedSD = userPressed;
 		LimboActivity.currMachine.sd_img_path = sd;
 
@@ -469,7 +469,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	@SuppressWarnings("unchecked")
-	private static void setFDA(final String fda, final boolean userPressed) {
+	private void setFDA(final String fda, final boolean userPressed) {
 		userPressedFDA = userPressed;
 		LimboActivity.currMachine.fda_img_path = fda;
 		// Log.v("DB", "UserPressed: " + userPressedFDA + " FDA=" + fda);
@@ -495,7 +495,7 @@ public class DrivesDialogBox extends Dialog {
 	}
 
 	@SuppressWarnings("unchecked")
-	private static void setFDB(final String fdb, final boolean userPressed) {
+	private void setFDB(final String fdb, final boolean userPressed) {
 		userPressedFDB = userPressed;
 		LimboActivity.currMachine.fdb_img_path = fdb;
 		// Log.v("DB", "UserPressed: " + userPressedFDB + " FDB=" + fdb);
@@ -521,7 +521,7 @@ public class DrivesDialogBox extends Dialog {
 		});
 	}
 
-	private static void addDriveToList(String file, String type) {
+	private void addDriveToList(String file, String type) {
 		// Check if exists
 		// Log.v(TAG, "Adding To list: " + type + ":" + file);
 		int res = FavOpenHelper.getInstance(activity).getFavUrlSeq(file, type);
@@ -538,12 +538,13 @@ public class DrivesDialogBox extends Dialog {
 
 	}
 
-	public static void browse(String fileType) {
+	public void browse(String fileType) {
 		// Check if SD card is mounted
 		// Log.v(TAG, "Browsing: " + fileType);
 		String state = Environment.getExternalStorageState();
 		if (!Environment.MEDIA_MOUNTED.equals(state)) {
 			Toast.makeText(activity.getApplicationContext(), "Error: SD card is not mounted", Toast.LENGTH_LONG).show();
+            UIUtils.toastShort(activity, "Error: SD card is not mounted");
 			return;
 		}
 
@@ -571,11 +572,11 @@ public class DrivesDialogBox extends Dialog {
 		}
 	}
 
-	public static Intent getFileManIntent() {
+	public Intent getFileManIntent() {
 		return new Intent(activity, com.max2idea.android.limbo.main.LimboFileManager.class);
 	}
 
-	public static void update(final Machine myMachine, final String colname, final String value) {
+	public void update(final Machine myMachine, final String colname, final String value) {
 
 		Thread thread = new Thread(new Runnable() {
 			public void run() {
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/FileUtils.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/FileUtils.java
index d4d618bd..57222567 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/FileUtils.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/utils/FileUtils.java
@@ -19,10 +19,15 @@ Copyright (C) Max Kastanas 2012
 package com.max2idea.android.limbo.utils;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.ParcelFileDescriptor;
 import android.util.Log;
+import android.widget.Toast;
 
 import com.max2idea.android.limbo.main.Config;
 import com.max2idea.android.limbo.main.LimboActivity;
@@ -37,6 +42,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Hashtable;
 
 /**
@@ -343,11 +349,83 @@ public class FileUtils {
             intent.setDataAndType(uri, "text/plain");
             activity.startActivity(intent);
         }catch (Exception ex) {
-            UIUtils.toastLong(activity, "Could not find a Text Viewer on your device");
+            UIUtils.toastShort(activity, "Could not find a Text Viewer on your device");
         }
 
 
     }
 
+    public static boolean fileValid(Context context, String path) {
+
+        if (path == null || path.equals(""))
+            return true;
+        if (path.startsWith("content://") || path.startsWith("/content/")) {
+            int fd = get_fd(context, path);
+            if (fd <= 0)
+                return false;
+        } else {
+            File file = new File(path);
+            return file.exists();
+        }
+        return true;
+    }
+
+    public static HashMap<Integer, ParcelFileDescriptor> fds = new HashMap<Integer, ParcelFileDescriptor>();
+
+    public static int get_fd(final Context context, String path) {
+        int fd = 0;
+        if (path == null)
+            return 0;
+
+        if (path.startsWith("/content") || path.startsWith("content://")) {
+            path = path.replaceFirst("/content", "content:");
+
+            try {
+                ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(Uri.parse(path), "rw");
+                fd = pfd.getFd();
+                fds.put(fd, pfd);
+            } catch (final FileNotFoundException e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+                new Handler(Looper.getMainLooper()).post(new Runnable() {
+                    @Override
+                    public void run() {
+                        Toast.makeText(context, "Error: " + e, Toast.LENGTH_SHORT).show();
+                    }
+                });
+            }
+        } else {
+            try {
+                File file = new File(path);
+                if (!file.exists())
+                    file.createNewFile();
+                ParcelFileDescriptor pfd = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_WRITE_ONLY);
+                fd = pfd.getFd();
+            } catch (Exception e) {
+                // TODO Auto-generated catch block
+                e.printStackTrace();
+            }
+
+        }
+        return fd;
+    }
+
+
+    public static int close_fd(int fd) {
+
+        if (FileUtils.fds.containsKey(fd)) {
+            ParcelFileDescriptor pfd = FileUtils.fds.get(fd);
+            try {
+                pfd.close();
+                FileUtils.fds.remove(fd);
+                return 0; // success for Native side
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+
+        }
+        return -1;
+    }
+
 
 }
