diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/Certificatetruster.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/Certificatetruster.java
new file mode 100644
index 0000000..83dd111
--- /dev/null
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/Certificatetruster.java
@@ -0,0 +1,72 @@
+package androdns.android.leetdreams.ch.androdns;
+
+import android.util.Log;
+
+import org.xbill.DNS.Message;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.UnknownHostException;
+import java.security.SecureRandom;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+import org.xbill.DNS.DohResolver;
+
+/**
+ * Created by schacher on 27.12.18.
+ */
+
+public class Certificatetruster {
+
+
+    public Certificatetruster()  {
+
+    }
+
+
+    public void trustAllCertificates() {
+        try {
+            TrustManager[] trustAllCerts = new TrustManager[]{
+                    new X509TrustManager() {
+                        public X509Certificate[] getAcceptedIssuers() {
+                            X509Certificate[] myTrustedAnchors = new X509Certificate[0];
+                            return myTrustedAnchors;
+                        }
+
+                        @Override
+                        public void checkClientTrusted(X509Certificate[] certs, String authType) {
+                        }
+
+                        @Override
+                        public void checkServerTrusted(X509Certificate[] certs, String authType) {
+                        }
+                    }
+            };
+
+            SSLContext sc = SSLContext.getInstance("SSL");
+            sc.init(null, trustAllCerts, new SecureRandom());
+            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
+            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
+                @Override
+                public boolean verify(String arg0, SSLSession arg1) {
+                    return true;
+                }
+            });
+        } catch (Exception e) {
+        }
+    }
+
+
+}
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
index 3852997..cc99942 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
@@ -28,6 +28,7 @@ import android.widget.TextView;
 
 
 import org.xbill.DNS.DClass;
+import org.xbill.DNS.DohResolver;
 import org.xbill.DNS.Flags;
 import org.xbill.DNS.Header;
 import org.xbill.DNS.InvalidTypeException;
@@ -321,7 +322,12 @@ public class DNSFormActivity extends AppCompatActivity implements AdapterView.On
 
 
             } else if (session.protocol.equalsIgnoreCase("DoH")) {
-                resolver = new SimpleDoHResolver(hostnameArg);
+                new Certificatetruster().trustAllCertificates();
+                String dohurl = hostnameArg;
+                if(!dohurl.toLowerCase().startsWith("http")){
+                    dohurl="https://"+dohurl;
+                }
+                resolver = new DohResolver(dohurl);
             } else {
                 resolver = new SimpleResolver(hostnameArg);
                 try {
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/SimpleDoHResolver.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/SimpleDoHResolver.java
deleted file mode 100644
index 70357d3..0000000
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/SimpleDoHResolver.java
+++ /dev/null
@@ -1,130 +0,0 @@
-package androdns.android.leetdreams.ch.androdns;
-
-import android.util.Log;
-
-import org.xbill.DNS.Message;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.net.UnknownHostException;
-import java.security.SecureRandom;
-import java.security.cert.X509Certificate;
-
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.X509TrustManager;
-
-/**
- * Created by schacher on 27.12.18.
- */
-
-public class SimpleDoHResolver extends SimpleDoTResolver {
-    public static final int DEFAULT_DOH_PORT=443;
-    protected String url = null;
-
-    /**
-     * Creates a SimpleResolver that will query the specified host
-     * @exception UnknownHostException Failure occurred while finding the host
-     */
-    public
-    SimpleDoHResolver(String url) throws UnknownHostException {
-        if (!url.toLowerCase().startsWith("http")){
-            url="https://"+url;
-        }
-        trustAllCertificates();
-        this.url=url;
-    }
-
-
-
-    protected byte[] sendAndReceive(Message query) throws IOException {
-        byte [] wireformat = query.toWire(Message.MAXLENGTH);
-        byte [] in;
-
-        Log.d("dns", "Trying to perform DNS-over-HTTPS lookup via " + url);
-
-        try {
-            URL url = new URL(this.url);
-            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-            urlConnection.setConnectTimeout(CONNECT_READ_TIMEOUT);
-            urlConnection.setReadTimeout(CONNECT_READ_TIMEOUT);
-            urlConnection.setRequestProperty("accept", "application/dns-message");
-            urlConnection.setRequestProperty("content-type", "application/dns-message");
-            // disable default user-agent header, we don't want to send private info to the server
-            // apparently it's not possible to remove a header from a urlconnection, but at least we
-            // can set it to the empty string
-            urlConnection.setRequestProperty("User-Agent","");
-
-            urlConnection.setDoOutput(true);
-
-            OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream());
-            out.write(wireformat);
-            out.flush();
-            InputStream inStream = new BufferedInputStream(urlConnection.getInputStream());
-            in = readStream(inStream);
-        } catch (Exception e) {
-            e.printStackTrace();
-           throw new IOException("DoH query failed: "+e.toString());
-        }
-        return in;
-
-    }
-
-
-    private byte[] readStream(InputStream is) {
-        try {
-            ByteArrayOutputStream bo = new ByteArrayOutputStream();
-            int i = is.read();
-            while(i != -1) {
-                bo.write(i);
-                i = is.read();
-            }
-            return bo.toByteArray();
-        } catch (IOException e) {
-            return null;
-        }
-    }
-
-    public void trustAllCertificates() {
-        try {
-            TrustManager[] trustAllCerts = new TrustManager[]{
-                    new X509TrustManager() {
-                        public X509Certificate[] getAcceptedIssuers() {
-                            X509Certificate[] myTrustedAnchors = new X509Certificate[0];
-                            return myTrustedAnchors;
-                        }
-
-                        @Override
-                        public void checkClientTrusted(X509Certificate[] certs, String authType) {
-                        }
-
-                        @Override
-                        public void checkServerTrusted(X509Certificate[] certs, String authType) {
-                        }
-                    }
-            };
-
-            SSLContext sc = SSLContext.getInstance("SSL");
-            sc.init(null, trustAllCerts, new SecureRandom());
-            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
-            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
-                @Override
-                public boolean verify(String arg0, SSLSession arg1) {
-                    return true;
-                }
-            });
-        } catch (Exception e) {
-        }
-    }
-
-
-}
