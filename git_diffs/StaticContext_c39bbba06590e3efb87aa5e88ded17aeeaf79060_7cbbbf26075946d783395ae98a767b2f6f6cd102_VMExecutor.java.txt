diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileInstaller.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileInstaller.java
index d178f9bf..041a05c3 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileInstaller.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileInstaller.java
@@ -46,8 +46,7 @@ public class FileInstaller {
     private static final String TAG = "FileInstaller";
 
     public static void installFiles(Activity activity, boolean force) {
-
-        Log.v("Installer", "Installing files...");
+        Log.d(TAG, "Installing files");
         File tmpDir = new File(LimboApplication.getBasefileDir());
         if (!tmpDir.exists()) {
             if(tmpDir.mkdirs()) {
@@ -68,7 +67,7 @@ public class FileInstaller {
         if (dir.exists() && dir.isDirectory()) {
             //don't create again
         } else if (dir.exists() && !dir.isDirectory()) {
-            Log.v("Installer", "Could not create Dir, file found: " + LimboApplication.getBasefileDir());
+            Log.e(TAG, "Could not create Dir, file found: " + LimboApplication.getBasefileDir());
             return;
         } else if (!dir.exists()) {
             dir.mkdir();
@@ -83,12 +82,11 @@ public class FileInstaller {
             files = am.list("roms");
         } catch (IOException ex) {
             Logger.getLogger(FileInstaller.class.getName()).log(Level.SEVERE, null, ex);
-            Log.v("Installer", "Could not install files: " + ex.getMessage());
+            Log.e(TAG, "Could not install files: " + ex.getMessage());
             return;
         }
 
         for (int i = 0; i < files.length; i++) {
-            //Log.v("Installer", "File: " + files[i]);
             String[] subfiles = null;
             try {
                 subfiles = am.list("roms/" + files[i]);
@@ -101,7 +99,7 @@ public class FileInstaller {
                 if (dir1.exists() && dir1.isDirectory()) {
                     //don't create again
                 } else if (dir1.exists() && !dir1.isDirectory()) {
-                    Log.v("Installer", "Could not create Dir, file found: " + LimboApplication.getBasefileDir() + files[i]);
+                    Log.e(TAG, "Could not create Dir, file found: " + LimboApplication.getBasefileDir() + files[i]);
                     return;
                 } else if (!dir1.exists()) {
                     dir1.mkdir();
@@ -110,20 +108,18 @@ public class FileInstaller {
 
                     File file = new File(destDir, files[i] + "/" + subfiles[k]);
                     if(!file.exists() || force) {
-                        Log.v("Installer", "Installing file: " + file.getPath());
+                        Log.d(TAG, "Installing file: " + file.getPath());
                         installAssetFile(activity, files[i] + "/" + subfiles[k], destDir, "roms", null);
                     }
                 }
             } else {
                 File file = new File(destDir, files[i]);
                 if(!file.exists() || force) {
-                    Log.v("Installer", "Installing file: " + file.getPath());
+                    Log.d(TAG, "Installing file: " + file.getPath());
                     installAssetFile(activity, files[i], LimboApplication.getBasefileDir(), "roms", null);
                 }
             }
         }
-//        InputStream is = am.open(srcFile);
-
     }
 
     public static boolean installAssetFile(Activity activity, String srcFile,
@@ -151,7 +147,7 @@ public class FileInstaller {
             is.close();
             return true;
         } catch (Exception ex) {
-            Log.e("Installer", "failed to install file: " + destFile + ", Error:" + ex.getMessage());
+            Log.e(TAG, "failed to install file: " + destFile + ", Error:" + ex.getMessage());
             return false;
         }
     }
@@ -196,7 +192,7 @@ public class FileInstaller {
             uri = destFileF.getUri();
 
         } catch (Exception ex) {
-            Log.e("Installer", "failed to install file: " + destFile + ", Error:" + ex.getMessage());
+            Log.e(TAG, "failed to install file: " + destFile + ", Error:" + ex.getMessage());
         } finally {
             if(os!=null) {
                 try {
@@ -256,7 +252,7 @@ public class FileInstaller {
             filePath = file.getAbsolutePath();
 
         } catch (Exception ex) {
-            Log.e("Installer", "failed to install file: " + destFile + ", Error:" + ex.getMessage());
+            Log.e(TAG, "failed to install file: " + destFile + ", Error:" + ex.getMessage());
         } finally {
             if(os!=null) {
                 try {
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileUtils.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileUtils.java
index 44248228..a372c923 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileUtils.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/files/FileUtils.java
@@ -301,7 +301,7 @@ public class FileUtils {
                             pfd.getFileDescriptor().sync();
                         } catch (IOException e) {
                             if (Config.debug) {
-                                Log.e(TAG, "Error Syncing File: " + path + ": " + fd + " : " + e);
+                                Log.w(TAG, "Error Syncing File: " + path + ": " + fd + " : " + e);
                                 e.printStackTrace();
                             }
                         }
@@ -321,7 +321,7 @@ public class FileUtils {
 
     public static void startLogging() {
         if (Config.logFilePath == null) {
-            Log.e(TAG, "Log file is not setup");
+            Log.w(TAG, "Log file is not ready");
             return;
         }
         Thread t = new Thread(new Runnable() {
@@ -332,7 +332,7 @@ public class FileUtils {
                     logFile = new File(Config.logFilePath);
                     if (logFile.exists()) {
                         if (!logFile.delete()) {
-                            Log.e(TAG, "Could not delete previous log file!");
+                            Log.w(TAG, "Could not delete previous log file!");
                         }
                     }
                     logFile.createNewFile();
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
index ff51e19d..b6d837ce 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/jni/VMExecutor.java
@@ -166,7 +166,7 @@ class VMExecutor extends MachineExecutor {
             if (fd_tmp < 0) {
                 Log.e(TAG, "Error while getting fd for: " + getSaveStateName());
             } else {
-                //Log.i(TAG, "Got new fd "+fd_tmp + " for: " +save_state_name);
+                Log.d(TAG, "Retrieved fd: " + fd_tmp + " for: " + getSaveStateName());
                 paramsList.add("-incoming");
                 paramsList.add("fd:" + fd_tmp);
             }
@@ -175,9 +175,7 @@ class VMExecutor extends MachineExecutor {
 
     private void addUIOptions(Context context, ArrayList<String> paramsList) {
         if (MachineController.getInstance().isVNCEnabled()) {
-            Log.v(TAG, "Enable VNC server");
             paramsList.add("-vnc");
-
             String vncParam = "";
             if (LimboSettingsManager.getVNCEnablePassword(context)) {
                 //TODO: Allow connections from External
@@ -199,9 +197,6 @@ class VMExecutor extends MachineExecutor {
             paramsList.add("vc");
 
         } else {
-            //SDL needs explicit keyboard layout
-            Log.v(TAG, "Disabling VNC server, using SDL instead");
-
             //XXX: monitor, serial, and parallel display crashes cause SDL doesn't support more than 1 window
             paramsList.add("-monitor");
             paramsList.add("none");
@@ -274,7 +269,7 @@ class VMExecutor extends MachineExecutor {
             paramsList.add(Config.tbSize); //Don't increase it crashes
         }
 
-        if(Config.emuVersion.ordinal() <= Config.EMU_VERSION.QEMUv2_9_1.ordinal()) {
+        if (Config.emuVersion.ordinal() <= Config.EMU_VERSION.QEMUv2_9_1.ordinal()) {
             paramsList.add("-realtime");
             paramsList.add("mlock=off");
         } else {
@@ -523,8 +518,8 @@ class VMExecutor extends MachineExecutor {
 
     public void addHardDisk(ArrayList<String> paramsList, String imagePath, int index) {
         if (imagePath != null && !imagePath.trim().equals("")) {
-            if(Config.legacyDrives) {
-                switch(index) {
+            if (Config.legacyDrives) {
+                switch (index) {
                     case 0:
                         paramsList.add("-hda");
                         break;
@@ -700,7 +695,7 @@ class VMExecutor extends MachineExecutor {
                 MachineController.getInstance().getServiceClass());
         Bundle b = new Bundle();
         i.putExtras(b);
-        Log.v(TAG, "Starting VM service");
+        Log.d(TAG, "Starting VM service");
         LimboApplication.getInstance().startService(i);
     }
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/keymapper/KeySurfaceView.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/keymapper/KeySurfaceView.java
index 5413be0d..22a9534f 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/keymapper/KeySurfaceView.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/keymapper/KeySurfaceView.java
@@ -440,7 +440,7 @@ public class KeySurfaceView extends SurfaceView implements SurfaceHolder.Callbac
     public synchronized void paint(boolean clear) {
         Canvas canvas = null;
         if (!surfaceCreated || surfaceHolder == null) {
-            Log.d(TAG, "Surface not ready");
+            Log.w(TAG, "Cannot paint surface not ready");
             return;
         }
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/log/Logger.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/log/Logger.java
index 2c46d6a8..83df996a 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/log/Logger.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/log/Logger.java
@@ -82,7 +82,7 @@ public class Logger {
             }
 
         } catch (Exception ex) {
-            Log.e(TAG, "Could not format limbo log: " + ex.getMessage());
+            Log.w(TAG, "Could not format limbo log: " + ex.getMessage());
         } finally {
             if (scanner != null) {
                 try {
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/FavOpenHelper.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/FavOpenHelper.java
index cef14389..4ec58fa4 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/FavOpenHelper.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/FavOpenHelper.java
@@ -114,8 +114,7 @@ public class FavOpenHelper extends SQLiteOpenHelper {
         try {
             row = db.insertOrThrow(TABLE_NAME_FAV_FILES, null, stateValues);
         } catch (Exception e) {
-            //catch code
-            Log.v(TAG, "Error while Insert Fav Path: " + e.getMessage());
+            Log.w(TAG, "Error while Insert Fav Path: " + e.getMessage());
         }
         return row>0;
     }
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineController.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineController.java
index 05067bf7..a54dfb8d 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineController.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineController.java
@@ -134,7 +134,7 @@ public class MachineController {
         new Thread(new Runnable() {
             public void run() {
                 if (machineExecutor != null) {
-                    Log.v(TAG, "Restarting the VM...");
+                    Log.d(TAG, "Restarting the VM...");
                     machineExecutor.stopvm(1);
                 }
             }
@@ -166,12 +166,12 @@ public class MachineController {
     private void checkSaveStatus() {
         while (!saveVmStatusTimerQuit) {
             MachineStatus status = checkSaveVMStatus();
-            Log.v(TAG, "State Status: " + status);
+            Log.d(TAG, "State Status: " + status);
             if (status == MachineStatus.Unknown
                     || status == MachineStatus.SaveCompleted
                     || status == MachineStatus.SaveFailed
             ) {
-                Log.v(TAG, "Saving state is done: " + status);
+                Log.d(TAG, "Saving state is done: " + status);
                 stopSaveVmStatusTimer();
                 return;
             }
@@ -181,7 +181,7 @@ public class MachineController {
                 ex.printStackTrace();
             }
         }
-        Log.v(TAG, "Save state complete");
+        Log.d(TAG, "Save state complete");
     }
 
     private void stopSaveVmStatusTimer() {
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineImporter.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineImporter.java
index 32f6146d..fb56fe0d 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineImporter.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineImporter.java
@@ -47,7 +47,7 @@ public class MachineImporter {
         BufferedReader buffreader = null;
         InputStream instream = null;
         try {
-            Log.v(TAG, "Import file: " + importFilePath);
+            Log.d(TAG, "Import file: " + importFilePath);
             instream = FileUtils.getStreamFromFilePath(importFilePath);
             if (instream != null) {
                 InputStreamReader inputreader = new InputStreamReader(instream);
@@ -64,9 +64,6 @@ public class MachineImporter {
                     line = buffreader.readLine();
                     if (line == null)
                         break;
-                    // do something with the line
-                    // Log.v("CSV Parser", "Line: " + line);
-
                     // Parse
                     String [] machineAttr = line.split(",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", -1);
                     Machine mach = new Machine(machineAttr[0], false);
@@ -206,7 +203,7 @@ public class MachineImporter {
                         }
 
                     }
-                    Log.v("CSV Parser", "Adding Machine: " + mach.getName());
+                    Log.d(TAG, "Adding Machine: " + mach.getName());
                     machines.add(mach);
                 }
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineOpenHelper.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineOpenHelper.java
index bbe37759..c9dd6964 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineOpenHelper.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineOpenHelper.java
@@ -155,7 +155,7 @@ public class MachineOpenHelper extends SQLiteOpenHelper implements IMachineDatab
         int seqnum = -1;
         SQLiteDatabase db = getWritableDatabase();
 
-        Log.v("DB", "insert machine: " + machine.getName());
+        Log.d(TAG, "inserting machine: " + machine.getName());
         ContentValues stateValues = new ContentValues();
         stateValues.put(MachineProperty.MACHINE_NAME.name(), machine.getName()); //Legacy
         stateValues.put(MachineProperty.CPU.name(), machine.getCpu());
@@ -202,10 +202,8 @@ public class MachineOpenHelper extends SQLiteOpenHelper implements IMachineDatab
 
         try {
             seqnum = (int) db.insertOrThrow(MACHINE_TABLE_NAME, null, stateValues);
-            Log.v(TAG, "Inserted Machine: " + machine.getName() + " : " + seqnum);
         } catch (Exception e) {
-            // catch code
-            Log.e(TAG, "Error while Insert machine: " + e.getMessage());
+            Log.w(TAG, "Error while Insert machine: " + e.getMessage());
             e.printStackTrace();
         }
         return seqnum;
@@ -233,7 +231,7 @@ public class MachineOpenHelper extends SQLiteOpenHelper implements IMachineDatab
                     null);
             db.setTransactionSuccessful();
         } catch (Exception e) {
-            Log.e(TAG, "Error while Updating value: " + e.getMessage());
+            Log.w(TAG, "Error while Updating value: " + e.getMessage());
             if (Config.debug)
                 e.printStackTrace();
         } finally {
@@ -344,7 +342,7 @@ public class MachineOpenHelper extends SQLiteOpenHelper implements IMachineDatab
         try {
             rowsAffected = db.delete(MACHINE_TABLE_NAME, MachineProperty.MACHINE_NAME + "=\"" + machine.getName() + "\"", null);
         } catch (Exception e) {
-            Log.e(TAG, "Error while deleting VM: " + e.getMessage());
+            Log.w(TAG, "Error while deleting VM: " + e.getMessage());
             if (Config.debug)
                 e.printStackTrace();
         }
@@ -396,7 +394,6 @@ public class MachineOpenHelper extends SQLiteOpenHelper implements IMachineDatab
 
     @Override
     public void update(Observable observable, Object o) {
-        Log.v(TAG, "Observable updated param: " + o);
         Object[] params = (Object[]) o;
         MachineProperty property = (MachineProperty) params[0];
         Object value = params[1];
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineService.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineService.java
index 69ae5042..24b9b6f4 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineService.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/machine/MachineService.java
@@ -123,7 +123,7 @@ public class MachineService extends Service {
             e.printStackTrace();
         }
 
-        Log.v(TAG, "Starting VM: " + MachineController.getInstance().getMachine().getName());
+        Log.d(TAG, "Starting VM: " + MachineController.getInstance().getMachine().getName());
         setupLocks();
 
         // notify we started
@@ -141,7 +141,7 @@ public class MachineService extends Service {
                 ToastUtils.toastLong(service, res);
                 Log.e(TAG, res);
             } else {
-                Log.v(TAG, res);
+                Log.d(TAG, res);
                 //set the exit code
                 LimboSettingsManager.setExitCode(service, Config.EXIT_SUCCESS);
             }
@@ -156,7 +156,7 @@ public class MachineService extends Service {
         cleanUp();
         stopService();
 
-        Log.v(TAG, "Exit Limbo");
+        Log.d(TAG, "Exiting Limbo");
         //XXX: We exit here to force unload the native libs
         System.exit(0);
     }
@@ -169,7 +169,7 @@ public class MachineService extends Service {
 
     private void setUpAsForeground(String text) {
         if (MachineController.getInstance().getMachine() == null) {
-            Log.e(TAG, "No Machine selected");
+            Log.w(TAG, "No Machine selected");
             return;
         }
         Intent intent = new Intent(service.getApplicationContext(), Config.clientClass);
@@ -211,7 +211,7 @@ public class MachineService extends Service {
     }
 
     public void onDestroy() {
-        Log.v(TAG, "Service destroyed");
+        Log.d(TAG, "Service destroyed");
         super.onDestroy();
     }
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/DrivesDialogBox.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/DrivesDialogBox.java
index 91797cd1..9bab783c 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/DrivesDialogBox.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/DrivesDialogBox.java
@@ -272,7 +272,6 @@ public class DrivesDialogBox extends Dialog implements Observer {
 
     @Override
     public void update(Observable observable, Object o) {
-        Log.v(TAG, "Observable updated param: " + o);
         Object[] params = (Object[]) o;
         MachineProperty property = (MachineProperty) params[0];
         Object value = params[1];
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboFileManager.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboFileManager.java
index 3f03c388..d2581280 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboFileManager.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboFileManager.java
@@ -169,10 +169,8 @@ public class LimboFileManager extends ListActivity {
             b.putSerializable("filterExt", filterExt);
             i.putExtras(b);
             activity.startActivityForResult(i, requestCode);
-
         } catch (Exception e) {
-            Log.e(TAG, "Error while starting Filemanager: " +
-                    e.getMessage());
+            Log.e(TAG, "Error while starting Filemanager: " + e.getMessage());
         }
     }
 
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
index 6eec1cb9..6476658a 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLActivity.java
@@ -470,7 +470,6 @@ public class LimboSDLActivity extends SDLActivity
     }
 
     protected void onCreate(Bundle savedInstanceState) {
-        Log.v(TAG, "onCreate");
         setupScreen();
         saveAudioState();
         super.onCreate(savedInstanceState);
@@ -488,9 +487,7 @@ public class LimboSDLActivity extends SDLActivity
 
     private void setupUserInterface() {
         Config.keyDelay = LimboSettingsManager.getKeyPressDelay(this);
-        Log.v(TAG, "key delay: " + Config.keyDelay);
         Config.mouseButtonDelay = LimboSettingsManager.getMouseButtonDelay(this);
-        Log.v(TAG, "mouse delay: " + Config.mouseButtonDelay);
     }
 
     private void setupScreen() {
@@ -809,7 +806,7 @@ public class LimboSDLActivity extends SDLActivity
                 e.printStackTrace();
             }
         }
-        Log.v(TAG, "SDLThread exited");
+        Log.d(TAG, "SDLThread exited");
     }
 
     /**
@@ -823,7 +820,7 @@ public class LimboSDLActivity extends SDLActivity
         if (mSurface == null || LimboSDLActivity.isResizing) {
             return;
         }
-        Log.v(TAG, "VM resolution changed to " + width + "x" + height);
+        Log.d(TAG, "VM resolution changed to " + width + "x" + height);
         ((LimboSDLSurface) mSurface).refreshSurfaceView();
     }
 
@@ -876,7 +873,6 @@ public class LimboSDLActivity extends SDLActivity
     }
 
     public boolean onKeyLongPress(int keyCode, KeyEvent event) {
-        Log.d(TAG, "onKeyLongPress: " + keyCode);
         return false;
     }
 
@@ -994,7 +990,7 @@ public class LimboSDLActivity extends SDLActivity
                     nx = mouseState.taps.get(0).x;
                     ny = mouseState.taps.get(0).y;
                 }
-//                Log.v(TAG, "sendMouseEvent button: " + button + ", action: " + action
+//                Log.d(TAG, "sendMouseEvent button: " + button + ", action: " + action
 //                        + ", relative: " + relative + ", nx = " + nx + ", ny = " + ny
 //                        + ", delay = " + delayMs);
                 notifyAction(MachineAction.SEND_MOUSE_EVENT, new Object[]{button, action, relative ? 1 : 0, nx, ny});
@@ -1019,7 +1015,8 @@ public class LimboSDLActivity extends SDLActivity
                 }
                 if (delayMs > 0)
                     delay(delayMs);
-//                Log.v(TAG, "sendKeyEvent: " + ", keycode = " + keycode + ", down = " + down + ", delay = " + delayMs);
+//                Log.d(TAG, "sendKeyEvent: " + ", keycode = " + keycode + ", down = " + down
+//                + ", delay = " + delayMs);
                 if (down)
                     SDLActivity.onNativeKeyDown(keycode);
                 else {
@@ -1073,10 +1070,10 @@ public class LimboSDLActivity extends SDLActivity
 
     public void resetLayout() {
         if(!machineRunning) {
-            Log.d(TAG, "Machine not running not reset layout");
+            Log.w(TAG, "Machine not running not reset layout");
             return;
         }
-        Log.d(TAG, "reset layout");
+        Log.d(TAG, "Resetting layout");
         // We use QEMU keyboard shortcut for fullscreen
         // to trigger the redraw
         sendCtrlAltKey(KeyEvent.KEYCODE_F);
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
index 6b457873..f0031be3 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/main/LimboSDLSurface.java
@@ -62,14 +62,14 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
     }
 
     public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
-        Log.v(TAG, "surfaceChanged");
+        Log.d(TAG, "surfaceChanged: " + width + "x" + height);
         super.surfaceChanged(holder, format, width, height);
         refreshSurfaceView();
     }
 
     @Override
     public void surfaceCreated(SurfaceHolder holder) {
-        Log.v(TAG, "surfaceCreated");
+        Log.d(TAG, "surfaceCreated");
         super.surfaceCreated(holder);
         setWillNotDraw(false);
         refreshSurfaceView();
@@ -87,12 +87,6 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
         }).start();
     }
 
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        Log.v(TAG, "onConfigurationChanged");
-        super.onConfigurationChanged(newConfig);
-    }
-
     public boolean onTouchProcess(View v, MotionEvent event) {
         int action = event.getActionMasked();
         mouseState.x = event.getX();
@@ -168,7 +162,6 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
 
     private void processPendingMouseButtonDown(int action, int toolType, float x, float y) {
         long delta = System.currentTimeMillis() - mouseState.down_event_time;
-        // Log.v(TAG, "Processing mouse button: action = " + action + ", x = " + x + ", y = " + y + ", delta: " + delta);
         if (mouseState.down_pending && sdlActivity.isRelativeMode(toolType)
                 && (Math.abs(x - mouseState.down_x) < 20 && Math.abs(y - mouseState.down_y) < 20)
                 && ((action == MotionEvent.ACTION_MOVE && delta > 400)
@@ -212,7 +205,6 @@ public class LimboSDLSurface extends SDLActivity.ExSDLSurface
     }
 
     private void setPendingMouseDown(float x, float y, int sdlMouseButton) {
-        // Log.v(TAG, "Pending mouse down: x = " + x + ", y = " + y);
         mouseState.down_pending = true;
         mouseState.down_x = x;
         mouseState.down_y = y;
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/qmp/QmpClient.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/qmp/QmpClient.java
index 77a3f272..13a394a1 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/qmp/QmpClient.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/qmp/QmpClient.java
@@ -105,7 +105,7 @@ public class QmpClient {
 	private static void sendRequest(PrintWriter out, String request) {
 
 	    if(Config.debugQmp)
-		    Log.i(TAG, "QMP request" + request);
+		    Log.d(TAG, "QMP request" + request);
 		out.println(request);
 	}
 
@@ -117,7 +117,7 @@ public class QmpClient {
                 line = in.readLine();
                 if (line != null) {
                     if(Config.debugQmp)
-                        Log.i(TAG, "QMP response: " + line);
+                        Log.d(TAG, "QMP response: " + line);
                     JSONObject object = new JSONObject(line);
                     String returnStr = null;
                     String errStr = null;
@@ -169,7 +169,7 @@ public class QmpClient {
 				line = in.readLine();
 				if (line != null) {
 				    if(Config.debugQmp)
-					    Log.i(TAG, "QMP query-migrate response: " + line);
+					    Log.d(TAG, "QMP query-migrate response: " + line);
 					JSONObject object = new JSONObject(line);
 					String returnStr = null;
 					String errStr = null;
diff --git a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/updates/UpdateChecker.java b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/updates/UpdateChecker.java
index a2c33f98..0915cc18 100644
--- a/limbo-android-lib/src/main/java/com/max2idea/android/limbo/updates/UpdateChecker.java
+++ b/limbo-android-lib/src/main/java/com/max2idea/android/limbo/updates/UpdateChecker.java
@@ -62,7 +62,7 @@ public class UpdateChecker {
                 });
             }
         } catch (Exception ex) {
-            Log.e(TAG, "Could not get new version: " + ex.getMessage());
+            Log.w(TAG, "Could not get new version: " + ex.getMessage());
             if (Config.debug)
                 ex.printStackTrace();
         }
