diff --git a/src/com/leafdigital/kanji/android/KanjiDrawing.java b/src/com/leafdigital/kanji/android/KanjiDrawing.java
new file mode 100644
index 0000000..951ea6e
--- /dev/null
+++ b/src/com/leafdigital/kanji/android/KanjiDrawing.java
@@ -0,0 +1,329 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import java.util.LinkedList;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.*;
+import android.util.DisplayMetrics;
+import android.view.*;
+
+public class KanjiDrawing extends View
+{
+	/**
+	 * Maximum number of strokes permitted. (Having this maximum keeps memory
+	 * use from getting out of hand; in memory, there are up to MAX_STROKES
+	 * copies of an alpha channel bitmap the size of the control.)
+	 */
+	public final static int MAX_STROKES = 30;
+
+	private final static float BLOB_RADIUS_DP = 2.5f;
+
+	private float lastX, lastY;
+
+	private float density;
+	private int densityInt;
+	private Bitmap bitmap;
+	private Canvas bitmapCanvas;
+
+	private DrawnStroke pendingStroke;
+	private LinkedList<DrawnStroke> strokes = new LinkedList<DrawnStroke>();
+	private LinkedList<Bitmap> undo = new LinkedList<Bitmap>();
+
+	private Listener listener;
+
+	/**
+	 * Interface for callers that want to be informed of updates.
+	 */
+	public interface Listener
+	{
+		/**
+		 * Called every time a stroke is completed, undone, or cleared and the
+		 * number of strokes changes.
+		 * @param strokes All strokes currently in the drawing
+		 */
+		public void strokes(DrawnStroke[] strokes);
+	}
+
+	/**
+	 * Represents a stroke drawn in the drawing panel.
+	 */
+	public static class DrawnStroke
+	{
+		private float startX, startY, endX, endY;
+
+		private final static String EXTRA_STROKESX = "strokesx",
+			EXTRA_STROKESY = "strokesy", EXTRA_STROKEEX = "strokeex",
+			EXTRA_STROKEEY = "strokeey";
+
+		private DrawnStroke(float startX, float startY)
+		{
+			this.startX = startX;
+			this.startY = startY;
+		}
+
+		private void finish(float endX, float endY)
+		{
+			this.endX = endX;
+			this.endY = endY;
+		}
+
+		private DrawnStroke(float startX, float startY, float endX, float endY)
+		{
+			this.startX = startX;
+			this.startY = startY;
+			this.endX = endX;
+			this.endY = endY;
+		}
+
+		/**
+		 * @return Start X position of stroke
+		 */
+		public float getStartX()
+		{
+			return startX;
+		}
+
+		/**
+		 * @return Start Y position of stroke
+		 */
+		public float getStartY()
+		{
+			return startY;
+		}
+
+		/**
+		 * @return End X position of stroke
+		 */
+		public float getEndX()
+		{
+			return endX;
+		}
+
+		/**
+		 * @return End Y position of stroke
+		 */
+		public float getEndY()
+		{
+			return endY;
+		}
+
+		/**
+		 * Saves an array of strokes into extra data in an intent.
+		 * @param intent Intent
+		 * @param strokes Strokes to save
+		 */
+		public static void saveToIntent(Intent intent, DrawnStroke[] strokes)
+		{
+			float[] sx = new float[strokes.length], sy = new float[strokes.length],
+				ex = new float[strokes.length], ey = new float[strokes.length];
+			for(int i=0; i<strokes.length; i++)
+			{
+				sx[i] = strokes[i].startX;
+				sy[i] = strokes[i].startY;
+				ex[i] = strokes[i].endX;
+				ey[i] = strokes[i].endY;
+			}
+			intent.putExtra(EXTRA_STROKESX, sx);
+			intent.putExtra(EXTRA_STROKESY, sy);
+			intent.putExtra(EXTRA_STROKEEX, ex);
+			intent.putExtra(EXTRA_STROKEEY, ey);
+		}
+
+		/**
+		 * Loads extra data from an intent into an array of strokes
+		 * @param intent Intent
+		 * @return Loaded strokes
+		 */
+		public static DrawnStroke[] loadFromIntent(Intent intent)
+		{
+			float[] sx, sy, ex, ey;
+			sx = intent.getFloatArrayExtra(EXTRA_STROKESX);
+			sy = intent.getFloatArrayExtra(EXTRA_STROKESY);
+			ex = intent.getFloatArrayExtra(EXTRA_STROKEEX);
+			ey = intent.getFloatArrayExtra(EXTRA_STROKEEY);
+			if(sx == null || sy == null || ex == null || ey == null
+				|| sx.length != sy.length || sx.length != ex.length
+				|| sx.length != ey.length)
+			{
+				throw new IllegalArgumentException("Missing or invalid extra data");
+			}
+
+			DrawnStroke[] result = new DrawnStroke[sx.length];
+			for(int i=0; i<result.length; i++)
+			{
+				result[i] = new DrawnStroke(sx[i], sy[i], ex[i], ey[i]);
+			}
+			return result;
+		}
+	}
+
+	public KanjiDrawing(Activity context)
+	{
+		super(context);
+		DisplayMetrics metrics = new DisplayMetrics();
+		context.getWindowManager().getDefaultDisplay().getMetrics(metrics);
+		density = metrics.density;
+		densityInt = metrics.densityDpi;
+	}
+
+	@Override
+	protected void onDraw(Canvas canvas)
+	{
+		int width = getWidth(), height = getHeight();
+		if(bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height)
+		{
+			bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ALPHA_8);
+			bitmap.setDensity(densityInt);
+			bitmapCanvas = new Canvas(bitmap);
+		}
+
+		// Draw background colour
+		canvas.drawColor(Color.HSVToColor(new float[] {100f, 0.05f, 0.15f}));
+
+		Paint fg = new Paint();
+		fg.setColor(Color.WHITE);
+		canvas.drawBitmap(bitmap, 0, 0, fg);
+	}
+
+	@Override
+	public boolean onTouchEvent(MotionEvent event)
+	{
+		// Ignore touch events if there are already 30 strokes
+		if(strokes.size() >= 30)
+		{
+			return true;
+		}
+
+		float x = event.getX(), y = event.getY();
+
+		Paint paint = new Paint();
+		paint.setAlpha(255);
+		paint.setAntiAlias(true);
+		float radius = density * BLOB_RADIUS_DP;
+
+		switch(event.getAction())
+		{
+		case MotionEvent.ACTION_DOWN:
+			// Store previous bitmap as undo state (except first one)
+			if(!strokes.isEmpty())
+			{
+				undo.addLast(bitmap.copy(bitmap.getConfig(), true));
+			}
+
+			pendingStroke = new DrawnStroke(x, y);
+			lastX = x;
+			lastY = y;
+			// Fall through
+			bitmapCanvas.drawCircle(x, y, radius, paint);
+			invalidate();
+			break;
+
+		case MotionEvent.ACTION_MOVE:
+			// Draw blob
+			paint.setStrokeWidth(2 * radius);
+			paint.setStrokeCap(Paint.Cap.ROUND);
+			bitmapCanvas.drawLine(lastX, lastY, x, y, paint);
+			lastX = x;
+			lastY = y;
+			invalidate();
+			break;
+
+		case MotionEvent.ACTION_UP:
+			pendingStroke.finish(x, y);
+			strokes.addLast(pendingStroke);
+			updateListener();
+			break;
+		}
+		return true;
+	}
+
+	/**
+	 * Undoes the last stroke added.
+	 */
+	public void undo()
+	{
+		if(strokes.isEmpty())
+		{
+			return;
+		}
+		if(undo.isEmpty())
+		{
+			Paint erase = new Paint();
+			erase.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
+			bitmapCanvas.drawPaint(erase);
+		}
+		else
+		{
+			bitmap = undo.removeLast();
+			bitmapCanvas = new Canvas(bitmap);
+		}
+		strokes.removeLast();
+		invalidate();
+		updateListener();
+	}
+
+	/**
+	 * Updates the listener (if present) on the new list of strokes.
+	 */
+	private void updateListener()
+	{
+		if(listener != null)
+		{
+			listener.strokes(getStrokes());
+		}
+	}
+
+	/**
+	 * Clears all strokes.
+	 */
+	public void clear()
+	{
+		if(strokes.isEmpty())
+		{
+			return;
+		}
+		strokes.clear();
+		undo.clear();
+		Paint erase = new Paint();
+		erase.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
+		bitmapCanvas.drawPaint(erase);
+		invalidate();
+		updateListener();
+	}
+
+	/**
+	 * @return All strokes currently drawn in the control
+	 */
+	public DrawnStroke[] getStrokes()
+	{
+		return strokes.toArray(new DrawnStroke[strokes.size()]);
+	}
+
+	/**
+	 * Sets the listener that receives an update when the strokes change.
+	 * @param listener Listener
+	 */
+	public void setListener(Listener listener)
+	{
+		this.listener = listener;
+	}
+}
diff --git a/src/com/leafdigital/kanji/android/MainActivity.java b/src/com/leafdigital/kanji/android/MainActivity.java
new file mode 100644
index 0000000..6bcb1fa
--- /dev/null
+++ b/src/com/leafdigital/kanji/android/MainActivity.java
@@ -0,0 +1,78 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.text.ClipboardManager;
+import android.view.*;
+import android.view.View.OnClickListener;
+import android.widget.*;
+
+public class MainActivity extends Activity
+{
+	/** Called when the activity is first created. */
+	@Override
+	public void onCreate(Bundle savedInstanceState)
+	{
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.main);
+
+		OnClickListener onClickListener = new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				startActivityForResult(
+					new Intent(MainActivity.this, PickKanjiActivity.class), 0);
+			}
+		};
+		((Button)findViewById(R.id.drawkanji)).setOnClickListener(onClickListener);
+
+		((Button)findViewById(R.id.copy)).setOnClickListener(new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				ClipboardManager clipboard =
+					(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
+				EditText edit = (EditText)findViewById(R.id.editresult);
+				clipboard.setText(edit.getText().toString());
+				edit.setText("");
+				findViewById(R.id.copy).setEnabled(false);
+			}
+		});
+
+		onClickListener.onClick(null);
+
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data)
+	{
+		if(resultCode == RESULT_OK)
+		{
+			String kanji = data.getStringExtra(PickKanjiActivity.EXTRA_KANJI);
+			EditText editText = (EditText)findViewById(R.id.editresult);
+			editText.setText(editText.getText() + kanji);
+			findViewById(R.id.copy).setEnabled(true);
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/com/leafdigital/kanji/android/MultiAssetInputStream.java b/src/com/leafdigital/kanji/android/MultiAssetInputStream.java
new file mode 100644
index 0000000..560ff9b
--- /dev/null
+++ b/src/com/leafdigital/kanji/android/MultiAssetInputStream.java
@@ -0,0 +1,115 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import java.io.*;
+import java.util.*;
+
+import android.content.res.AssetManager;
+
+/**
+ * Input stream that reads from multiple assets, joining them together. This
+ * allows assets to exceed the 1MB length limit.
+ */
+public class MultiAssetInputStream extends InputStream
+{
+	private AssetManager assets;
+	private LinkedList<String> remainingFileNames;
+
+	private InputStream current;
+
+	public MultiAssetInputStream(AssetManager assets, String[] fileNames)
+	{
+		this.assets = assets;
+		this.remainingFileNames = new LinkedList<String>(Arrays.asList(fileNames));
+	}
+
+	private void checkLoaded() throws IOException
+	{
+		if(current == null && !remainingFileNames.isEmpty())
+		{
+			String name = remainingFileNames.removeFirst();
+			current = assets.open(name, AssetManager.ACCESS_STREAMING);
+		}
+	}
+
+	protected void finalize() throws Throwable
+	{
+		close();
+	}
+
+	@Override
+	public void close() throws IOException
+	{
+		if(current != null)
+		{
+			current.close();
+		}
+	}
+
+	@Override
+	public int read() throws IOException
+	{
+		checkLoaded();
+		if(current == null)
+		{
+			return -1;
+		}
+		int value = current.read();
+		if(value == -1)
+		{
+			// EOF, recurse with next stream
+			current.close();
+			current = null;
+			return read();
+		}
+		else
+		{
+			return value;
+		}
+	}
+
+	@Override
+	public int read(byte[] b) throws IOException
+	{
+		return read(b, 0, b.length);
+	}
+
+	@Override
+	public int read(byte[] b, int offset, int length) throws IOException
+	{
+		checkLoaded();
+		if(current == null)
+		{
+			return -1;
+		}
+		int read = current.read(b, offset, length);
+		if(read == -1)
+		{
+			// EOF, recurse with next stream
+			current.close();
+			current = null;
+			return read(b, offset, length);
+		}
+		else
+		{
+			return read;
+		}
+	}
+}
diff --git a/src/com/leafdigital/kanji/android/PickKanjiActivity.java b/src/com/leafdigital/kanji/android/PickKanjiActivity.java
new file mode 100644
index 0000000..9c3fa73
--- /dev/null
+++ b/src/com/leafdigital/kanji/android/PickKanjiActivity.java
@@ -0,0 +1,428 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import java.io.*;
+import java.util.LinkedList;
+
+import android.app.*;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.*;
+import android.view.View.OnClickListener;
+import android.widget.*;
+
+import com.leafdigital.kanji.*;
+import com.leafdigital.kanji.KanjiInfo.MatchAlgorithm;
+import com.leafdigital.kanji.android.KanjiDrawing.DrawnStroke;
+
+import static com.leafdigital.kanji.android.TopResultsActivity.*;
+
+public class PickKanjiActivity extends Activity
+{
+	private KanjiDrawing drawing;
+
+	/**
+	 * Selected kanji in result (if any).
+	 */
+	public final static String EXTRA_KANJI = "kanji";
+
+	/**
+	 * Current result stage in intent.
+	 */
+	public final static String EXTRA_STAGE = "stage";
+
+	private final static int STAGE_EXACT = 1, STAGE_FUZZY = 2,
+		STAGE_MOREFUZZY = 3, STAGE_PLUSMINUS1 = 4,
+		STAGE_MOREPLUSMINUS1 = 5, STAGE_EVENMOREPLUSMINUS1 = 6;
+
+	/** Called when the activity is first created. */
+	@Override
+	public void onCreate(Bundle savedInstanceState)
+	{
+		super.onCreate(savedInstanceState);
+		requestWindowFeature(Window.FEATURE_NO_TITLE);
+		setContentView(R.layout.pickkanji);
+
+		// Make sure the list gets loaded
+		new LoadThread();
+
+		LinearLayout layout = (LinearLayout)findViewById(R.id.drawcontainer);
+    drawing = new KanjiDrawing(this);
+    layout.addView(drawing);
+
+		TextView strokesText = (TextView)findViewById(R.id.strokes);
+    final int normalRgb = strokesText.getTextColors().getDefaultColor();
+
+    drawing.setListener(new KanjiDrawing.Listener()
+		{
+			@Override
+			public void strokes(DrawnStroke[] strokes)
+			{
+				findViewById(R.id.undo).setEnabled(strokes.length > 0);
+				findViewById(R.id.clear).setEnabled(strokes.length > 0);
+
+				boolean gotList;
+				synchronized(listSynch)
+				{
+					gotList = list != null;
+				}
+				findViewById(R.id.done).setEnabled(strokes.length > 0 && gotList);
+
+				TextView strokesText = (TextView)findViewById(R.id.strokes);
+				strokesText.setText(strokes.length + "");
+				if(strokes.length == KanjiDrawing.MAX_STROKES)
+				{
+					strokesText.setTextColor(Color.RED);
+				}
+				else
+				{
+					strokesText.setTextColor(normalRgb);
+				}
+			}
+		});
+
+    findViewById(R.id.undo).setOnClickListener(new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				drawing.undo();
+			}
+		});
+    findViewById(R.id.clear).setOnClickListener(new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				drawing.clear();
+			}
+		});
+
+    findViewById(R.id.done).setOnClickListener(new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				new MatchThread(PickKanjiActivity.this, drawing.getStrokes(),
+					MatchAlgorithm.STRICT, R.string.waitexact,
+					drawing.getStrokes().length == 1 ? R.string.pickexact1 : R.string.pickexact,
+					R.string.fuzzy, STAGE_EXACT, false, new String[0]);
+			}
+		});
+	}
+
+	/**
+	 * Called once the kanji list has been loaded so that it enables the button
+	 * if needed.
+	 */
+	private void loaded()
+	{
+		DrawnStroke[] strokes = drawing.getStrokes();
+		findViewById(R.id.done).setEnabled(strokes.length > 0);
+	}
+
+	static boolean tryMore(Activity activity, Intent lastIntent)
+	{
+		DrawnStroke[] strokes = DrawnStroke.loadFromIntent(lastIntent);
+
+		Intent intent;
+		switch(lastIntent.getIntExtra(EXTRA_STAGE, 0))
+		{
+		case STAGE_EXACT:
+			// Work out which results we already showed
+			String[] alreadyShown = lastIntent.getStringArrayExtra(EXTRA_MATCHES);
+			if(alreadyShown.length > TopResultsActivity.TOP_COUNT)
+			{
+				String[] actuallyShown = new String[TopResultsActivity.TOP_COUNT];
+				System.arraycopy(alreadyShown, 0, actuallyShown, 0,
+					TopResultsActivity.TOP_COUNT);
+				alreadyShown = actuallyShown;
+			}
+
+			// Do fuzzy results, excluding those already-shown ones
+			new MatchThread(activity, strokes, MatchAlgorithm.FUZZY, R.string.waitfuzzy,
+				strokes.length == 1 ? R.string.pickfuzzy1 : R.string.pickfuzzy,
+				R.string.more, STAGE_FUZZY, true, alreadyShown);
+			return true;
+
+		case STAGE_FUZZY:
+			// Show next results
+			intent = new Intent(lastIntent);
+			intent.putExtra(EXTRA_STARTFROM, TopResultsActivity.MORE_COUNT);
+			intent.putExtra(EXTRA_OTHERLABEL, R.string.plusminus1);
+			intent.putExtra(EXTRA_STAGE, STAGE_MOREFUZZY);
+			activity.startActivityForResult(intent, 0);
+			return true;
+
+		case STAGE_MOREFUZZY:
+			// Obtain +/- 1 results
+			new MatchThread(activity, strokes, MatchAlgorithm.FUZZY_1OUT, R.string.waitfuzzy,
+				strokes.length == 1 ? R.string.pickfuzzy1pm1 : R.string.pickfuzzypm1,
+				R.string.more, STAGE_PLUSMINUS1, true, new String[0]);
+			return true;
+
+		case STAGE_PLUSMINUS1:
+			intent = new Intent(lastIntent);
+			intent.putExtra(EXTRA_STARTFROM, TopResultsActivity.MORE_COUNT);
+			intent.putExtra(EXTRA_OTHERLABEL, R.string.more);
+			intent.putExtra(EXTRA_STAGE, STAGE_MOREPLUSMINUS1);
+			activity.startActivityForResult(intent, 0);
+			return true;
+
+		case STAGE_MOREPLUSMINUS1:
+			intent = new Intent(lastIntent);
+			intent.putExtra(EXTRA_STARTFROM, TopResultsActivity.MORE_COUNT * 2);
+			intent.putExtra(EXTRA_OTHERLABEL, R.string.giveup);
+			intent.putExtra(EXTRA_STAGE, STAGE_EVENMOREPLUSMINUS1);
+			activity.startActivityForResult(intent, 0);
+			return true;
+
+		case STAGE_EVENMOREPLUSMINUS1:
+			// Nope, give up
+			break;
+		}
+		return false;
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data)
+	{
+		if(resultCode != RESULT_OK || data == null)
+		{
+			return;
+		}
+
+		// If a kanji was selected return it (doesn't matter which activity it
+		// came from)
+		String kanji = data.getStringExtra(EXTRA_KANJI);
+		if(kanji != null && kanji.length() > 0)
+		{
+			setResult(RESULT_OK, data);
+			finish();
+			return;
+		}
+	}
+
+	private static KanjiList list;
+	private static boolean listLoading;
+	private static LinkedList<PickKanjiActivity> waitingActivities =
+		new LinkedList<PickKanjiActivity>();
+	private static Object listSynch = new Object();
+
+	/**
+	 * Thread that loads the kanji list in the background.
+	 */
+	private class LoadThread extends Thread
+	{
+		private LoadThread()
+		{
+			setPriority(MIN_PRIORITY);
+			// Start loading the kanji list but only if it wasn't loaded already
+			synchronized(listSynch)
+			{
+				if(list==null)
+				{
+					waitingActivities.add(PickKanjiActivity.this);
+					if (!listLoading)
+					{
+						listLoading = true;
+						start();
+					}
+				}
+			}
+		}
+
+		@Override
+		public void run()
+		{
+			try
+			{
+				long start = System.currentTimeMillis();
+				Log.d(PickKanjiActivity.class.getName(),
+					"Kanji drawing dictionary loading");
+				InputStream input = new MultiAssetInputStream(getAssets(),
+					new String[] { "strokes-20100823.xml.1", "strokes-20100823.xml.2" });
+				KanjiList loaded = new KanjiList(input);
+				synchronized(listSynch)
+				{
+					list = loaded;
+					for(PickKanjiActivity listening : waitingActivities)
+					{
+						final PickKanjiActivity current = listening;
+						runOnUiThread(new Runnable()
+						{
+							@Override
+							public void run()
+							{
+								current.loaded();
+							}
+						});
+					}
+					waitingActivities = null;
+				}
+				long time = System.currentTimeMillis() - start;
+				Log.d(PickKanjiActivity.class.getName(),
+					"Kanji drawing dictionary loaded (" + time + "ms)");
+			}
+			catch(IOException e)
+			{
+				Log.e(PickKanjiActivity.class.getName(), "Error loading dictionary", e);
+			}
+			finally
+			{
+				synchronized(listSynch)
+				{
+					listLoading = false;
+				}
+			}
+		}
+	}
+
+	/**
+	 * Do the match on another thread.
+	 */
+	static class MatchThread extends Thread
+	{
+		private KanjiInfo info;
+		private ProgressDialog dialog;
+		private MatchAlgorithm algo;
+		private Intent intent;
+		private KanjiList.Progress progress;
+		private Activity activity;
+
+		/**
+		 * @param owner Owning activity
+		 * @param algo Algorithm to use to do match
+		 * @param waitString String (R.string) to display in wait dialog
+		 * @param labelString String to use for activity label
+		 * @param otherString String to use for 'nope not that' button
+		 * @param stageCode Code to use for activity result
+		 * @param showMore Show more kanji (smaller grid)
+		 * @param alreadyShown Array of kanji that were already shown so don't
+		 *   show them again
+		 */
+		MatchThread(Activity owner, DrawnStroke[] strokes, MatchAlgorithm algo,
+			int waitString, int labelString, int otherString, int stageCode,
+			boolean showMore, String[] alreadyShown)
+		{
+			this.activity = owner;
+			dialog = new ProgressDialog(activity);
+			dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+			dialog.setMessage(activity.getString(waitString));
+			dialog.setCancelable(false);
+			dialog.show();
+			progress = new KanjiList.Progress()
+			{
+				@Override
+				public void progress(final int done, final int max)
+				{
+					activity.runOnUiThread(new Runnable()
+					{
+						@Override
+						public void run()
+						{
+							if(done == 0)
+							{
+								dialog.setMax(max);
+							}
+							dialog.setProgress(done);
+						}
+					});
+				}
+			};
+			this.algo = algo;
+
+			// Build info
+			info = getKanjiInfo(strokes);
+
+			// Build intent
+			intent = new Intent(activity, TopResultsActivity.class);
+			intent.putExtra(EXTRA_LABEL, labelString);
+			intent.putExtra(EXTRA_OTHERLABEL, otherString);
+			intent.putExtra(EXTRA_SHOWMORE, showMore);
+			intent.putExtra(EXTRA_ALREADYSHOWN, alreadyShown);
+			intent.putExtra(EXTRA_STAGE, stageCode);
+			intent.putExtra(EXTRA_ALGO, algo.toString());
+			DrawnStroke.saveToIntent(intent, strokes);
+
+			start();
+		}
+
+		public void run()
+		{
+			boolean closedDialog = false;
+			try
+			{
+				final KanjiMatch[] matches = list.getTopMatches(info, algo, progress);
+				activity.runOnUiThread(new Runnable()
+				{
+					@Override
+					public void run()
+					{
+						dialog.dismiss();
+						String[] chars = new String[matches.length];
+						for(int i=0; i<matches.length; i++)
+						{
+							chars[i] = matches[i].getKanji().getKanji();
+						}
+						intent.putExtra(EXTRA_MATCHES, chars);
+						activity.startActivityForResult(intent, 0);
+					}
+				});
+			}
+			finally
+			{
+				if(!closedDialog)
+				{
+					activity.runOnUiThread(new Runnable()
+					{
+						@Override
+						public void run()
+						{
+							dialog.dismiss();
+						}
+					});
+				}
+			}
+		}
+	}
+
+	/**
+	 * Converts from drawn strokes to the KanjiInfo object that
+	 * com.leafdigital.kanji classes expect.
+	 * @param strokes Strokes
+	 * @return Equivalent KanjiInfo object
+	 */
+	static KanjiInfo getKanjiInfo(DrawnStroke[] strokes)
+	{
+		KanjiInfo info = new KanjiInfo("?");
+		for(DrawnStroke stroke : strokes)
+		{
+			InputStroke inputStroke = new InputStroke(
+				stroke.getStartX(), stroke.getStartY(),
+				stroke.getEndX(), stroke.getEndY());
+			info.addStroke(inputStroke);
+		}
+		info.finish();
+		return info;
+	}
+}
diff --git a/src/com/leafdigital/kanji/android/TopResultsActivity.java b/src/com/leafdigital/kanji/android/TopResultsActivity.java
new file mode 100644
index 0000000..03c1ceb
--- /dev/null
+++ b/src/com/leafdigital/kanji/android/TopResultsActivity.java
@@ -0,0 +1,200 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import java.util.*;
+
+import android.app.Activity;
+import android.content.*;
+import android.net.ConnectivityManager;
+import android.os.Bundle;
+import android.view.*;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+
+import com.leafdigital.kanji.*;
+import com.leafdigital.kanji.android.KanjiDrawing.DrawnStroke;
+
+public class TopResultsActivity extends Activity
+{
+	/**
+	 * Intent key that should contain an int from R.strings with the activity
+	 * label.
+	 */
+	public final static String EXTRA_LABEL = "label";
+
+	/**
+	 * Intent key that should contain a string array with possible match kanji
+	 * (first in array = best match).
+	 */
+	public final static String EXTRA_MATCHES = "matches";
+
+	/**
+	 * Intent key that should contain an int from R.strings with the 'not one of
+	 * these' button label.
+	 */
+	public final static String EXTRA_OTHERLABEL = "otherlabel";
+
+	/**
+	 * Intent key that should contain an int indicating which result in the
+	 * matches array to start from.
+	 */
+	public final static String EXTRA_STARTFROM = "startfrom";
+
+	/**
+	 * Intent key that should contain an boolean; true indicates that the smaller
+	 * kanji grid is used.
+	 */
+	public final static String EXTRA_SHOWMORE = "showmore";
+
+	/**
+	 * Intent key that should contain an array of strings for kanji which were
+	 * already shown and should be skipped.
+	 */
+	public final static String EXTRA_ALREADYSHOWN = "alreadyshown";
+
+	/**
+	 * Current algorithm used in intent.
+	 */
+	public final static String EXTRA_ALGO = "algo";
+
+	/**
+	 * Number of kanji shown in top count screen.
+	 */
+	public final static int TOP_COUNT = 7;
+
+	/**
+	 * Number of kanji shown in more count screen.
+	 */
+	public final static int MORE_COUNT = 12;
+
+	private final static int[] ALL_IDS =
+	{
+		R.id.no1, R.id.no2, R.id.no3, R.id.no4, R.id.no5, R.id.no6,
+		R.id.no7, R.id.no8, R.id.no9, R.id.no10, R.id.no11, R.id.no12
+	};
+
+	/** Called when the activity is first created. */
+	@Override
+	public void onCreate(Bundle savedInstanceState)
+	{
+		super.onCreate(savedInstanceState);
+
+		final DrawnStroke[] strokes = DrawnStroke.loadFromIntent(getIntent());
+
+		String[] matches = getIntent().getStringArrayExtra(EXTRA_MATCHES);
+		HashSet<String> shown = new HashSet<String>(Arrays.asList(
+			getIntent().getStringArrayExtra(EXTRA_ALREADYSHOWN)));
+		int startFrom = getIntent().getIntExtra(EXTRA_STARTFROM, 0);
+		int label = getIntent().getIntExtra(EXTRA_LABEL, 0);
+		int otherLabel = getIntent().getIntExtra(EXTRA_OTHERLABEL, 0);
+		boolean showMore = getIntent().getBooleanExtra(EXTRA_SHOWMORE, false);
+		final KanjiInfo.MatchAlgorithm algo =
+			KanjiInfo.MatchAlgorithm.valueOf(getIntent().getStringExtra(EXTRA_ALGO));
+
+		setTitle(getString(label).replace("#", strokes.length + ""));
+		setContentView(showMore ? R.layout.moreresults : R.layout.topresults);
+		((Button)findViewById(R.id.other)).setText(getString(otherLabel));
+
+		int[] ids = new int[showMore ? MORE_COUNT : TOP_COUNT];
+		System.arraycopy(ALL_IDS, 0, ids, 0, ids.length);
+
+		int index = -startFrom;
+		int buttonIndex = 0;
+		for(int match=0; match<matches.length; match++)
+		{
+			// Skip matches we already showed
+			if(shown.contains(matches[match]))
+			{
+				continue;
+			}
+
+			// See if this is one to draw
+			if(index >= 0)
+			{
+				Button button = (Button)findViewById(ids[buttonIndex++]);
+				button.setText(matches[match]);
+				final Intent data = new Intent();
+				final int ranking = match + 1;
+				data.putExtra(PickKanjiActivity.EXTRA_KANJI, matches[match]);
+				button.setOnClickListener(new OnClickListener()
+				{
+					@Override
+					public void onClick(View v)
+					{
+						setResult(RESULT_OK, data);
+
+						// If the user has a network connection, send stats
+						ConnectivityManager cm = (ConnectivityManager) getSystemService(
+							Context.CONNECTIVITY_SERVICE);
+						if(cm != null && cm.getActiveNetworkInfo() != null
+							&& cm.getActiveNetworkInfo().isConnected())
+						{
+							StatsReporter.phoneHome(PickKanjiActivity.getKanjiInfo(strokes),
+								data.getStringExtra(PickKanjiActivity.EXTRA_KANJI),
+								algo, ranking, "leafdigital Kanji Draw 0.8", null);
+						}
+
+						finish();
+					}
+				});
+
+				// Stop if we filled all the buttons
+				if(buttonIndex >= ids.length)
+				{
+					break;
+				}
+			}
+
+			index++;
+		}
+
+		// Clear all the unused buttons
+		for(; buttonIndex<ids.length; buttonIndex++)
+		{
+			Button button = (Button)findViewById(ids[buttonIndex]);
+			button.setText(" ");
+			button.setEnabled(false);
+		}
+
+		Button button = (Button)findViewById(R.id.other);
+		button.setOnClickListener(new OnClickListener()
+		{
+			@Override
+			public void onClick(View v)
+			{
+				if(!PickKanjiActivity.tryMore(TopResultsActivity.this, getIntent()))
+				{
+					setResult(RESULT_OK);
+					finish();
+				}
+			}
+		});
+	}
+
+	@Override
+	protected void onActivityResult(int requestCode, int resultCode, Intent data)
+	{
+		if(resultCode == RESULT_OK)
+		{
+			setResult(RESULT_OK, data);
+			finish();
+		}
+	}
+}
diff --git a/src/com/leafdigital/kanji/example/ExampleApp.java b/src/com/leafdigital/kanji/example/ExampleApp.java
deleted file mode 100644
index 80dbeb6..0000000
--- a/src/com/leafdigital/kanji/example/ExampleApp.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.awt.BorderLayout;
-import java.lang.reflect.InvocationTargetException;
-
-import javax.swing.*;
-
-/**
- * Frame for testing the kanji recogniser as an application.
- */
-public class ExampleApp extends JFrame
-{
-	/**
-	 * Constructor
-	 */
-	public ExampleApp()
-	{
-		super("Kanji recognition test");
-		getContentPane().setLayout(new BorderLayout());
-		getContentPane().add(new ExamplePanel(getLayeredPane(), null));
-		
-		pack();
-		setDefaultCloseOperation(EXIT_ON_CLOSE);
-		setLocationRelativeTo(null);
-		setVisible(true);
-	}
-
-	/**
-	 * @param args No parameters
-	 * @throws InterruptedException Invoke error
-	 * @throws InvocationTargetException Invoke error
-	 */
-	public static void main(String[] args) throws InterruptedException, InvocationTargetException
-	{
-		SwingUtilities.invokeAndWait(new Runnable() 
-		{
-			@Override
-			public void run()
-			{
-				new ExampleApp();
-			}
-		});
-	}
-}
diff --git a/src/com/leafdigital/kanji/example/ExampleApplet.java b/src/com/leafdigital/kanji/example/ExampleApplet.java
deleted file mode 100644
index b9e5335..0000000
--- a/src/com/leafdigital/kanji/example/ExampleApplet.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.applet.Applet;
-import java.awt.BorderLayout;
-import java.lang.reflect.Method;
-
-import javax.swing.JApplet;
-
-/**
- * Applet for testing the recogniser.
- */
-public class ExampleApplet extends JApplet
-{
-	/**
-	 * Constructor
-	 */
-	@Override
-	public void start()
-	{
-		getContentPane().setLayout(new BorderLayout());
-		getContentPane().add(new ExamplePanel(getLayeredPane(), new ResultReporter.Handler()
-		{
-			@Override
-			public void newKanji(String kanji)
-			{
-				// Pass kanji to JavaScript. This is needed because users can't copy
-				// /paste from unsigned Java applets.
-				try
-				{
-					Class<?> c = Class.forName("netscape.javascript.JSObject");
-					Method m = c.getMethod("getWindow", Applet.class);
-					// window = JSObject.getWindow(this);
-					Object window = m.invoke(null, ExampleApplet.this);
-					m = c.getMethod("eval", String.class);
-					// window.eval("addKanji('whatever');");
-					m.invoke(window, "addKanji('" + kanji + "');");
-				}
-				catch(Exception e)
-				{
-					e.printStackTrace();
-				}
-			}
-		}));
-	}
-}
diff --git a/src/com/leafdigital/kanji/example/ExamplePanel.java b/src/com/leafdigital/kanji/example/ExamplePanel.java
deleted file mode 100644
index f661f45..0000000
--- a/src/com/leafdigital/kanji/example/ExamplePanel.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.awt.*;
-import java.io.IOException;
-
-import javax.swing.*;
-
-import com.leafdigital.kanji.*;
-
-/** 
- * Main panel that implements test application/applet (so that code can be
- * shared between both).
- */
-public class ExamplePanel extends JPanel
-{
-	private KanjiList list;
-	
-	/**
-	 * Constructs panel and loads kanji list.
-	 * @param layeredPane Layered pane
-	 * @param resultsHandler Results handler function (used to update text;
-	 *   if null, includes text display box)
-	 */
-	public ExamplePanel(JLayeredPane layeredPane, ResultReporter.Handler resultsHandler)
-	{
-		super(new BorderLayout(4, 4));
-		setOpaque(false);
-		
-		try
-		{
-			list = new KanjiList(
-				KanjiList.class.getResourceAsStream("strokes-20100823.xml"));
-		}
-		catch(IOException e)
-		{
-			throw new Error(e);
-		}
-
-		final JTextField text;
-		if(resultsHandler == null)
-		{
-			text = new JTextField();
-			resultsHandler = new ResultReporter.Handler()
-			{
-				@Override
-				public void newKanji(String kanji)
-				{
-					text.setText(text.getText() + kanji);
-				}
-			};
-			// Commented this code: it works, but is annoying on OS X where the
-			// current input mode is system-wide not per app
-//			text.addFocusListener(new FocusAdapter()
-//			{
-//				@Override
-//				public void focusGained(FocusEvent e)
-//				{
-//					text.getInputContext().selectInputMethod(Locale.JAPANESE);
-//				}
-//			});
-		}
-		else
-		{
-			text = null;
-		}
-
-		ResultReporter handler = new ResultReporter(layeredPane, resultsHandler);
-
-		JPanel resultsGrid = new JPanel(new GridLayout(1, 2, 4, 0));
-		resultsGrid.setOpaque(false);
-		add(resultsGrid, BorderLayout.EAST);
-		
-		final ResultsPanel results = new ResultsPanel(list, "Exact match",
-			KanjiInfo.MatchAlgorithm.STRICT, handler);
-		resultsGrid.add(results);
-
-		final ResultsPanel results2 = new ResultsPanel(list, "Fuzzy match",
-			KanjiInfo.MatchAlgorithm.FUZZY, handler);
-		resultsGrid.add(results2);
-
-		final ResultsPanel results3 = new ResultsPanel(list, "\u00b11 stroke",
-			KanjiInfo.MatchAlgorithm.FUZZY_1OUT, handler);
-		// Add extra borders to indicate difference in stroke count
-		results3.setBorder(BorderFactory.createEmptyBorder(0, 4, 0, 4));
-		resultsGrid.add(results3);
-		
-		final ResultsPanel results4 = new ResultsPanel(list, "\u00b12 strokes",
-			KanjiInfo.MatchAlgorithm.FUZZY_2OUT, handler);
-		resultsGrid.add(results4);
-		
-		JPanel middle = new JPanel(new BorderLayout(4, 4));
-		middle.setOpaque(false);
-		add(middle, BorderLayout.CENTER);
-		
-		KanjiPanel kanjiPanel = new KanjiPanel(new KanjiPanel.Handler()
-		{
-			@Override
-			public void kanjiChanged(InputStroke[] strokes)
-			{
-				results.kanjiChanged(strokes);
-				results2.kanjiChanged(strokes);
-				results3.kanjiChanged(strokes);
-				results4.kanjiChanged(strokes);
-			}
-		});
-		middle.add(kanjiPanel, BorderLayout.CENTER);
-		
-		if(text != null)
-		{
-			JPanel textPanel = new JPanel(new BorderLayout());
-			textPanel.setOpaque(false);
-			textPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));
-			textPanel.add(new JLabel("Result for cut/paste:"), BorderLayout.NORTH);
-			textPanel.add(text, BorderLayout.SOUTH);
-			middle.add(textPanel, BorderLayout.SOUTH);
-		}
-
-		handler.setKanjiPanel(kanjiPanel);
-	}
-}
diff --git a/src/com/leafdigital/kanji/example/KanjiPanel.java b/src/com/leafdigital/kanji/example/KanjiPanel.java
deleted file mode 100644
index f076150..0000000
--- a/src/com/leafdigital/kanji/example/KanjiPanel.java
+++ /dev/null
@@ -1,279 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.awt.*;
-import java.awt.event.*;
-import java.awt.image.BufferedImage;
-import java.util.LinkedList;
-
-import javax.swing.*;
-
-import com.leafdigital.kanji.InputStroke;
-
-/** 
- * Swing component for entering kanji characters.
- */
-public class KanjiPanel extends JPanel
-{
-	private Drawing drawing;
-	private Handler handler;
-	private JButton undo, clear;
-	
-	private static class UndoEntry
-	{
-		private InputStroke[] strokes;
-		private BufferedImage image;
-		private UndoEntry(InputStroke[] strokes, BufferedImage image)
-		{
-			this.strokes = strokes;
-			this.image = image;
-		}
-	}
-	
-	private static int UNDO_BUFFER_SIZE = 10;
-	
-	private class Drawing extends JComponent implements MouseListener, MouseMotionListener
-	{
-		private InputStroke[] currentStrokes;
-		private BufferedImage currentImage;
-		private Graphics2D currentGraphics;
-		private LinkedList<UndoEntry> undoBuffer = new LinkedList<UndoEntry>();
-		
-		private int startX, startY, lastX, lastY;
-		
-		private Drawing()
-		{
-			setPreferredSize(new Dimension(250, 250));
-			addMouseListener(this);
-			addMouseMotionListener(this);
-			setOpaque(true);
-		}
-		
-		private void undo()
-		{
-			UndoEntry entry = undoBuffer.removeLast();
-			currentStrokes = entry.strokes;
-			currentImage = entry.image;
-			if(undoBuffer.isEmpty())
-			{
-				undo.setEnabled(false);
-			}
-			repaint();
-			handler.kanjiChanged(currentStrokes);
-		}
-		
-		private void clear()
-		{
-			Insets i = getInsets();
-			int w = getWidth() - i.left - i.right, h = getHeight() - i.top - i.bottom;
-			initImage(w, h);
-			repaint();
-			handler.kanjiChanged(currentStrokes);
-		}
-		
-		private void initGraphics()
-		{
-			currentGraphics.setRenderingHint(
-				RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-			currentGraphics.setColor(SystemColor.textText);
-			currentGraphics.setStroke(new BasicStroke(5, BasicStroke.CAP_ROUND,
-				BasicStroke.JOIN_ROUND));
-		}
-		
-		private void initImage(int w, int h)
-		{
-			currentImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
-			currentGraphics = currentImage.createGraphics();
-			currentGraphics.setColor(SystemColor.text);
-			currentGraphics.fillRect(0, 0, w, h);
-			initGraphics();
-			undoBuffer.clear();
-			undo.setEnabled(false);
-			clear.setEnabled(false);
-			if(currentStrokes == null || currentStrokes.length != 0)
-			{
-				currentStrokes = new InputStroke[0];
-				handler.kanjiChanged(currentStrokes);
-			}
-		}
-
-		@Override
-		public void setBounds(int x, int y, int width, int height)
-		{
-			super.setBounds(x, y, width, height);
-			Insets i = getInsets();
-			int w = width - i.left - i.right, h = height - i.top - i.bottom;
-			if(currentImage == null || currentImage.getWidth() != w 
-				|| currentImage.getHeight() != h)
-			{
-				initImage(w, h);
-			}
-		}
-		
-		@Override
-		protected void paintComponent(Graphics g)
-		{
-			super.paintComponent(g);
-			Insets i = getInsets();
-			g.drawImage(currentImage, i.left, i.top, null);
-		}
-		
-		@Override
-		public void mousePressed(MouseEvent e)
-		{
-			// Store the old state in undo buffer
-			UndoEntry entry = new UndoEntry(currentStrokes, currentImage);
-			undoBuffer.addLast(entry);
-			if(undoBuffer.size() > UNDO_BUFFER_SIZE)
-			{
-				undoBuffer.removeFirst();
-			}
-			
-			// Make a new image
-			BufferedImage newImage = new BufferedImage(currentImage.getWidth(),
-				currentImage.getHeight(), BufferedImage.TYPE_INT_RGB);
-			currentGraphics = newImage.createGraphics();
-			currentGraphics.drawImage(currentImage, 0, 0, null);
-			currentImage = newImage;
-			initGraphics();
-			
-			// Draw a splodge here and remember this position
-			Insets i = getInsets();
-			startX = e.getX() - i.left;
-			startY = e.getY() - i.top;
-			lastX = startX;
-			lastY = startY;
-			currentGraphics.drawLine(startX, startY, lastX, lastY);
-			repaint();
-		}
-		
-		@Override
-		public void mouseDragged(MouseEvent e)
-		{
-			Insets i = getInsets();
-			int x = e.getX() - i.left, y = e.getY() - i.top;
-			currentGraphics.drawLine(lastX, lastY, x, y);
-			repaint();
-			lastX = x;
-			lastY = y;
-		}
-
-		@Override
-		public void mouseReleased(MouseEvent e)
-		{
-			Insets i = getInsets();
-			int x = e.getX() - i.left, y = e.getY() - i.top;
-			if(x != lastX || y != lastY)
-			{
-				mouseDragged(e);
-			}
-			
-			InputStroke stroke = new InputStroke(startX, startY, lastX, lastY);
-			InputStroke[] newStrokes = new InputStroke[currentStrokes.length + 1];
-			System.arraycopy(currentStrokes, 0, newStrokes, 0, currentStrokes.length);
-			newStrokes[currentStrokes.length] = stroke;
-			currentStrokes = newStrokes;
-
-			undo.setEnabled(true);
-			clear.setEnabled(true);
-
-			handler.kanjiChanged(newStrokes);
-		}
-		
-		@Override
-		public void mouseClicked(MouseEvent e)
-		{
-		}
-		@Override
-		public void mouseEntered(MouseEvent e)
-		{
-		}
-		@Override
-		public void mouseExited(MouseEvent e)
-		{
-		}
-		@Override
-		public void mouseMoved(MouseEvent e)
-		{
-		}
-	}
-	
-	/**
-	 * Interface for something that handles kanji panel information.
-	 */
-	public interface Handler
-	{
-		/**
-		 * Called every time the kanji changes.
-		 * @param strokes New strokes
-		 */
-		public void kanjiChanged(InputStroke[] strokes);
-	}
-	
-	/**
-	 * @param handler Handler for events
-	 */
-	public KanjiPanel(Handler handler)
-	{
-		this.handler = handler;
-		setOpaque(false);
-	
-		setLayout(new BorderLayout());
-		
-		JPanel buttons = new JPanel(new GridLayout(1, 2));
-		add(buttons, BorderLayout.SOUTH);
-		buttons.setOpaque(false);
-		
-		undo = new JButton("Undo");
-		undo.setEnabled(false);
-		buttons.add(undo);
-		undo.addActionListener(new ActionListener()
-		{
-			@Override
-			public void actionPerformed(ActionEvent e)
-			{
-				drawing.undo();
-			}
-		});
-		
-		clear = new JButton("Clear");
-		clear.setEnabled(false);
-		buttons.add(clear);
-		clear.addActionListener(new ActionListener()
-		{
-			@Override
-			public void actionPerformed(ActionEvent e)
-			{
-				drawing.clear();
-			}
-		});
-	
-		drawing = new Drawing();
-		add(drawing, BorderLayout.CENTER);
-	}
-	
-	/**
-	 * Clears the drawing.
-	 */
-	public void clear()
-	{
-		drawing.clear();
-	}
-}
diff --git a/src/com/leafdigital/kanji/example/ResultReporter.java b/src/com/leafdigital/kanji/example/ResultReporter.java
deleted file mode 100644
index d1f791d..0000000
--- a/src/com/leafdigital/kanji/example/ResultReporter.java
+++ /dev/null
@@ -1,312 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.awt.*;
-import java.awt.image.*;
-
-import javax.swing.*;
-
-import com.leafdigital.kanji.*;
-import com.leafdigital.kanji.KanjiInfo.MatchAlgorithm;
-import com.leafdigital.kanji.example.ResultsPanel.Handler;
-
-/** 
- * Class that reports results to leafdigital server for statistical analysis.
- */
-public class ResultReporter implements Handler
-{
-	private KanjiPanel kanjiPanel;
-	private JLayeredPane layeredPane;
-	private Handler handler;
-
-	/**
-	 * Handler for anyone who wants to be notified.
-	 */
-	public interface Handler
-	{
-		/**
-		 * Called when a new kanji is selected.
-		 * @param kanji Kanji
-		 */
-		public void newKanji(String kanji);
-	}
-	 
-	/**
-	 * @param layeredPane Pane for showing save progress
-	 * @param handler Callback handler
-	 */
-	public ResultReporter(JLayeredPane layeredPane, Handler handler)
-	{
-		this.layeredPane = layeredPane;
-		this.handler = handler;
-	}
-
-	@Override
-	public void clickedKanji(KanjiInfo drawing, String kanji, 
-		MatchAlgorithm algo, int ranking)
-	{
-		StatsReporter.phoneHome(drawing, kanji, algo, ranking, "Example applet 1.0",
-			new StatsReporter.Callback()
-		{
-			@Override
-			public void phoneHomeStart()
-			{
-				startSave();
-			}
-			
-			@Override
-			public void phoneHomeEnd(boolean ok)
-			{
-				endSave(ok);
-			}
-		});
-		kanjiPanel.clear();
-		handler.newKanji(kanji);
-	}
-
-	private class SaveNote extends JComponent
-	{
-		private float opacity = 0f;
-		private String text = null;
-		private boolean fadingIn, red;
-		
-		private BufferedImage image;
-		
-		@Override
-		protected void paintComponent(Graphics g)
-		{
-			if(text == null)
-			{
-				return;
-			}
-			
-			// Create new image if needed
-			if(image == null || image.getWidth() != getWidth() 
-				|| image.getHeight() != getHeight())
-			{
-				image = new BufferedImage(getWidth(), getHeight(),
-					BufferedImage.TYPE_INT_ARGB);
-				Graphics2D g2 = image.createGraphics();
-				g2.setRenderingHint(
-					RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-				g2.setRenderingHint(
-					RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
-				
-				// Draw triangle
-				g2.setColor(red ? new Color(128, 0, 0) : SystemColor.textText);
-				g2.fillPolygon(new int[] { 0, getWidth(), 0 },
-					new int[] {0, 0, getHeight()}, 3);
-				
-				// Draw text
-				g2.setColor(red ? Color.WHITE : SystemColor.text);
-				Font font = new Font("Verdana", Font.BOLD, 9);
-				g2.setFont(font);
-				g2.translate(getWidth() / 2, getHeight() / 2);
-				g2.rotate(-Math.PI / 4.0);
-				FontMetrics metrics = g2.getFontMetrics(font);
-				int width = metrics.stringWidth(text);
-				
-				g2.drawString(text, -width/2, -metrics.getDescent());
-			}
-			
-			// Draw with opacity
-			RescaleOp rop = new RescaleOp(
-				new float[] { 1f, 1f, 1f, opacity }, new float[4], null);
-			((Graphics2D)g).drawImage(image, rop, 0, 0);
-		}
-		
-		@Override
-		public Dimension getPreferredSize()
-		{
-			return new Dimension(50, 50);
-		}
-		
-		private void fadeIn(String text)
-		{
-			// Set text
-			if(this.text != null)
-			{
-				throw new IllegalStateException();
-			}
-			this.text = text;
-			fadingIn = true;
-			
-			// Start thread
-			new Thread(new Runnable()
-			{
-				@Override
-				public void run()
-				{
-					// Fade in
-					while(opacity < 0.9999f)
-					{
-						opacity += 0.05f;
-						repaint();
-						try
-						{
-							Thread.sleep(25);
-						}
-						catch(InterruptedException ie)
-						{
-						}
-					}
-					opacity = 1.0f;
-					repaint();
-					SwingUtilities.invokeLater(new Runnable()
-					{
-						@Override
-						public void run()
-						{
-							fadingIn = false;
-						}
-					});
-				}
-			}).start();
-		}
-		
-		private void fadeOut(final String newText, final boolean red)
-		{
-			// Start thread
-			new Thread(new Runnable()
-			{
-				@Override
-				public void run()
-				{
-					// If it's still fading in, wait
-					while(fadingIn)
-					{
-						try
-						{
-							Thread.sleep(10);
-						}
-						catch(InterruptedException ie)
-						{
-						}
-					}
-					
-					// Fade out fast
-					while(opacity > 0.0001f)
-					{
-						opacity -= 0.05f;
-						repaint();
-						try
-						{
-							Thread.sleep(10);
-						}
-						catch(InterruptedException ie)
-						{
-						}
-					}
-					opacity = 0.0f;
-					text = newText;
-					image = null;
-					SaveNote.this.red = red;
-					
-					// Fade in fast
-					while(opacity < 0.9999f)
-					{
-						opacity += 0.05f;
-						repaint();
-						try
-						{
-							Thread.sleep(10);
-						}
-						catch(InterruptedException ie)
-						{
-						}
-					}
-					opacity = 1.0f;
-					
-					// Fade out slow
-					while(opacity > 0.0001f)
-					{
-						opacity -= 0.01f;
-						repaint();
-						try
-						{
-							Thread.sleep(25);
-						}
-						catch(InterruptedException ie)
-						{
-						}
-					}
-					opacity = 0f;
-					
-					// Remove
-					SwingUtilities.invokeLater(new Runnable()
-					{
-						@Override
-						public void run()
-						{
-							getParent().remove(SaveNote.this);
-							synchronized(this)
-							{
-								saveNote = null;
-							}
-						}
-					});
-				}
-			}).start();
-		}
-	}
-	
-	private SaveNote saveNote;
-	
-	private synchronized void startSave()
-	{
-		if(saveNote != null)
-		{
-			return;
-		}
-		
-		// Always occurs in UI thread
-		saveNote = new SaveNote();
-		layeredPane.add(saveNote, JLayeredPane.POPUP_LAYER);
-		saveNote.setBounds(0,	0, 
-			saveNote.getPreferredSize().width, saveNote.getPreferredSize().height);
-		saveNote.fadeIn("Sending...");
-	}
-	
-	private synchronized void endSave(final boolean ok)
-	{
-		if(saveNote == null)
-		{
-			return;
-		}
-		
-		// Occurs in other thread
-		SwingUtilities.invokeLater(new Runnable()
-		{
-			@Override
-			public void run()
-			{
-				saveNote.fadeOut(ok ? "Sent OK" : "Failed", !ok);
-			}
-		});
-	}
-
-	/**
-	 * @param kanjiPanel Kanji panel (will be cleared on select)
-	 */
-	public void setKanjiPanel(KanjiPanel kanjiPanel)
-	{
-		this.kanjiPanel = kanjiPanel;
-	}
-}
diff --git a/src/com/leafdigital/kanji/example/ResultsPanel.java b/src/com/leafdigital/kanji/example/ResultsPanel.java
deleted file mode 100644
index 320da03..0000000
--- a/src/com/leafdigital/kanji/example/ResultsPanel.java
+++ /dev/null
@@ -1,373 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.example;
-
-import java.awt.*;
-import java.awt.event.*;
-
-import javax.swing.*;
-
-import com.leafdigital.kanji.*;
-import com.leafdigital.kanji.KanjiInfo.MatchAlgorithm;
-
-/** 
- * Panel for displaying resulting kanji.
- */
-public class ResultsPanel extends JPanel implements KanjiPanel.Handler
-{
-	/**
-	 * Font used on Mac. 
-	 */
-	private static final String MAC_FONT = "Hiragino Kaku Gothic Pro";
-
-	private KanjiList kanjiList;
-	
-	private Font smallFont = new Font("Verdana", Font.BOLD, 10);
-	private KanjiBox[] boxes;
-//	private KanjiBox other;
-//	private String currentStrokes;
-	private KanjiInfo currentDrawing;
-	
-	private Handler handler;
-	
-	private KanjiInfo.MatchAlgorithm algo;
-
-	/**
-	 * Interface for something that wants to receive information from this panel.
-	 */
-	public interface Handler
-	{
-		/**
-		 * Called when user clicks on a kanji.
-		 * @param drawing Kanji that was drawn
-		 * @param kanji Kanji clicked
-		 * @param algo Algorithm
-		 * @param ranking Ranking of kanji (1 = first)
-		 */
-		public void clickedKanji(KanjiInfo drawing, String kanji,
-			MatchAlgorithm algo, int ranking);
-//		
-//		/**
-//		 * Called when user clicks the 'not here guv' option.
-//		 * @param strokes String of all strokes the user entered
-//		 */
-//		public void clickedOther(String strokes);
-	}
-	
-	private class KanjiBox extends JComponent
-	{
-		private boolean showing, mouseover;
-		private String currentKanji = null;
-		
-		protected JLabel kanji = new JLabel("\u4e00");
-		protected JLabel score = new JLabel("100.0%");
-		
-		private KanjiBox(final int ranking)
-		{
-			setLayout(new BorderLayout());
-
-			setBackground(SystemColor.text);
-			setOpaque(true);
-			
-			add(kanji, BorderLayout.CENTER);
-			kanji.setHorizontalAlignment(SwingConstants.CENTER);
-			kanji.setForeground(SystemColor.textText);
-			kanji.setVerticalAlignment(SwingConstants.TOP);
-			
-			add(score, BorderLayout.NORTH);
-			score.setHorizontalAlignment(SwingConstants.CENTER);
-			score.setFont(smallFont);
-			// 50% background
-			Color background = new Color(
-				(SystemColor.textText.getRed() + SystemColor.text.getRed()) / 2,
-				(SystemColor.textText.getGreen() + SystemColor.text.getGreen()) / 2,
-				(SystemColor.textText.getBlue() + SystemColor.text.getBlue()) / 2);
-			score.setBackground(background);
-			score.setForeground(SystemColor.text);
-			score.setOpaque(true);
-			
-			addMouseListener(new MouseAdapter()
-			{
-				@Override
-				public void mouseEntered(MouseEvent e)
-				{
-					mouseover = true;
-					repaint();
-				}
-				@Override
-				public void mouseExited(MouseEvent e)
-				{
-					mouseover = false;
-					repaint();
-				}
-				@Override
-				public void mouseClicked(MouseEvent e)
-				{
-					if(ranking == -1)
-					{
-//						handler.clickedOther(currentStrokes);
-					}
-					else
-					{
-						handler.clickedKanji(currentDrawing, currentKanji, algo, ranking);
-					}
-				}
-			});
-		}
-		
-		@Override
-		protected void paintComponent(Graphics g)
-		{
-			g.setColor(getBackground());
-			g.fillRect(0, 0, getWidth(), getHeight());
-			if(mouseover && showing)
-			{
-				((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING,
-					RenderingHints.VALUE_ANTIALIAS_ON);
-				g.setColor(new Color(255, 220, 220));
-				int y = score.getHeight();
-				int height = getHeight() - y;
-				int width = getWidth();
-				int x = 0;
-				if(width > height)
-				{
-					x = (width-height) / 2;
-					width = height;
-				}
-				g.fillOval(x, y, width, height);
-			}
-		}
-		
-		@Override
-		public void setFont(Font font)
-		{
-			kanji.setFont(font);
-		}
-		
-		public void setKanji(KanjiMatch match)
-		{
-			if(match == null)
-			{
-				setSpecialVisible(false);
-			}
-			else
-			{
-				setSpecialVisible(true);
-				currentKanji = match.getKanji().getKanji();
-				kanji.setText(currentKanji);
-				score.setText(String.format("%.1f", match.getScore()) + "%");
-			}
-		}
-		
-		protected void setSpecialVisible(boolean showing)
-		{
-			if(this.showing != showing)
-			{
-				this.showing = showing;
-				repaint();
-			}
-		}
-		
-		@Override
-		protected void paintChildren(Graphics g)
-		{
-			if(showing)
-			{
-				super.paintChildren(g);
-			}
-		}
-		
-		@Override
-		public Dimension getPreferredSize()
-		{
-			Dimension result = new Dimension();
-			result.width = Math.max(
-				getFontMetrics(kanji.getFont()).stringWidth("\u4e00"),
-				getFontMetrics(score.getFont()).stringWidth("100.0%"));
-			FontMetrics metrics = kanji.getFontMetrics(kanji.getFont());
-			if(kanji.getFont().getFamily().equals(MAC_FONT))
-			{
-				// On Mac, the spacing is weird - it allows for descender or something
-				result.height = score.getPreferredSize().height + 
-				  metrics.getAscent() + metrics.getLeading() / 4;
-			}
-			else
-			{
-				result.height = score.getPreferredSize().height + 
-					metrics.getAscent() + metrics.getLeading();
-			}
-			return result;
-		}
-	}
-	/*
-	private class OtherBox extends KanjiBox
-	{
-		OtherBox()
-		{
-			super(-1);
-			score.setText("?");
-			kanji.setFont(smallFont);
-			kanji.setText("Something else");
-		}
-		
-		@Override
-		public Dimension getPreferredSize()
-		{
-			return new Dimension(Math.max(kanji.getPreferredSize().width,
-				score.getPreferredSize().width), 
-				kanji.getPreferredSize().height +	score.getPreferredSize().height);
-		}
-	}
-	*/
-	
-	/**
-	 * @param kanjiList Kanji list
-	 * @param title Title of panel
-	 * @param algo Match algorithm
-	 * @param handler Handler for when something is selected
-	 */
-	public ResultsPanel(KanjiList kanjiList, String title,
-		KanjiInfo.MatchAlgorithm algo, Handler handler)
-	{
-		this.kanjiList = kanjiList;
-		this.algo = algo;
-		this.handler = handler;
-		setLayout(new BorderLayout(4, 4));
-		setOpaque(false);
-
-		JLabel heading = new JLabel(title);
-		heading.setFont(smallFont);
-		add(heading, BorderLayout.NORTH);
-		
-		JPanel outer = new JPanel(new BorderLayout(4, 4));
-		add(outer, BorderLayout.CENTER);
-		
-		// Create the boxes for showing results
-		boxes = new KanjiBox[11];
-		for(int i=0; i<boxes.length; i++)
-		{
-			boxes[i] = new KanjiBox(i+1);
-		}
-		
-		// Add pattern: 1x1, 2x2, 3x2.
-		boxes[0].setFont(getSuitableFont(120));
-		outer.add(boxes[0], BorderLayout.NORTH);
-		
-		Font f = getSuitableFont(60);
-		JPanel next = new JPanel(new BorderLayout(4, 4));
-		next.setOpaque(false);
-		outer.add(next, BorderLayout.CENTER);
-		JPanel grid = new JPanel(new GridLayout(2, 2, 4, 4));
-		grid.setOpaque(false);
-		next.add(grid, BorderLayout.NORTH);
-		for(int i=0; i<4; i++)
-		{
-			boxes[i+1].setFont(f);
-			grid.add(boxes[i+1]);
-		}
-		
-		f = getSuitableFont(40);
-		JPanel next2 = new JPanel(new BorderLayout(4, 4));
-		next2.setOpaque(false);
-		next.add(next2, BorderLayout.CENTER);
-		grid = new JPanel(new GridLayout(2, 3, 4, 4));
-		grid.setOpaque(false);
-		next2.add(grid, BorderLayout.NORTH);
-		for(int i=0; i<6; i++)
-		{
-			boxes[i+5].setFont(f);
-			grid.add(boxes[i+5]);
-		}
-		
-		// Add Not shown button
-/*		other = new OtherBox();
-		JPanel next3 = new JPanel(new BorderLayout(4, 4));
-		next3.setOpaque(false);
-		next2.add(next3, BorderLayout.CENTER);
-		next3.add(other, BorderLayout.NORTH);*/
-	}
-
-	private static Font getSuitableFont(int size)
-	{	
-		Font result = new Font(MAC_FONT, Font.PLAIN, size);
-		if(result.getFamily().equals(MAC_FONT))
-		{
-			return result;
-		}
-		result = new Font("MS Gothic", Font.PLAIN, size);
-		return result;
-	}
-
-	@Override
-	public void kanjiChanged(InputStroke[] strokes)
-	{
-		new SearchThread(strokes);
-	}
-	
-	private void updateResults(KanjiInfo potentialKanji, KanjiMatch[] matches)
-	{
-		int count = 0;
-		for(KanjiMatch match : matches)
-		{
-			boxes[count++].setKanji(match);
-			if(count == boxes.length)
-			{
-				break;
-			}
-		}
-//		other.setSpecialVisible(count > 0);
-		for(;count<boxes.length; count++)
-		{
-			boxes[count].setKanji(null);
-		}
-		this.currentDrawing = potentialKanji;
-	}
-	
-	private class SearchThread extends Thread
-	{
-		private KanjiInfo potentialKanji;
-		
-		private SearchThread(InputStroke[] strokes)
-		{
-			potentialKanji = new KanjiInfo("?");
-			for(InputStroke stroke : strokes)
-			{
-				potentialKanji.addStroke(stroke);
-			}
-			potentialKanji.finish();
-//			currentStrokes = potentialKanji.getAllDirections();
-			start();
-		}
-		
-		@Override
-		public void run()
-		{
-			final KanjiMatch[] matches = kanjiList.getTopMatches(potentialKanji, algo);
-			SwingUtilities.invokeLater(new Runnable()
-			{
-				@Override
-				public void run()
-				{
-					updateResults(potentialKanji, matches);
-				}
-			});
-		}
-		
-	}
-}
