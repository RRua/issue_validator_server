diff --git a/core/src/com/agateau/pixelwheels/PwGame.java b/core/src/com/agateau/pixelwheels/PwGame.java
index 454561d4..691b5d38 100644
--- a/core/src/com/agateau/pixelwheels/PwGame.java
+++ b/core/src/com/agateau/pixelwheels/PwGame.java
@@ -26,6 +26,7 @@ import com.agateau.pixelwheels.gamesetup.PlayerCount;
 import com.agateau.pixelwheels.gamesetup.QuickRaceMaestro;
 import com.agateau.pixelwheels.rewards.RewardManager;
 import com.agateau.pixelwheels.screens.MainMenuScreen;
+import com.agateau.pixelwheels.screens.MouseCursorManager;
 import com.agateau.pixelwheels.screens.PwStageScreen;
 import com.agateau.pixelwheels.screens.UnlockedRewardScreen;
 import com.agateau.pixelwheels.sound.AudioManager;
@@ -45,8 +46,6 @@ import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
 import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.Cursor;
-import com.badlogic.gdx.graphics.Pixmap;
 import com.badlogic.gdx.physics.box2d.Box2D;
 
 /**
@@ -58,6 +57,7 @@ public class PwGame extends Game implements GameConfig.ChangeListener {
     private Maestro mMaestro;
     private GameConfig mGameConfig;
     private final AudioManager mAudioManager = new DefaultAudioManager();
+    private MouseCursorManager mMouseCursorManager;
 
     private Introspector mGamePlayIntrospector;
     private Introspector mDebugIntrospector;
@@ -87,11 +87,11 @@ public class PwGame extends Game implements GameConfig.ChangeListener {
         mDebugIntrospector.load();
 
         mAssets = new Assets();
+        mMouseCursorManager = new MouseCursorManager();
         setupConfig();
         setupTrackStats();
         setupRewardManager();
         Box2D.init();
-        hideMouseCursor();
         setupDisplay();
         showMainMenu();
     }
@@ -102,6 +102,7 @@ public class PwGame extends Game implements GameConfig.ChangeListener {
             String path = ScreenshotCreator.saveScreenshot();
             NLog.i("Screenshot saved in %s", path);
         }
+        mMouseCursorManager.act();
         super.render();
     }
 
@@ -109,6 +110,7 @@ public class PwGame extends Game implements GameConfig.ChangeListener {
         mAssets = new Assets();
         // Tracks and championship have been recreated, need to recreate reward manager
         setupRewardManager();
+        mMouseCursorManager.refreshAssets();
     }
 
     private void setupConfig() {
@@ -183,16 +185,6 @@ public class PwGame extends Game implements GameConfig.ChangeListener {
         mScreenStack.pop();
     }
 
-    private void hideMouseCursor() {
-        Pixmap pixmap = new Pixmap(2, 2, Pixmap.Format.RGBA8888);
-        pixmap.setColor(0, 0, 0, 0);
-        pixmap.fill();
-        Cursor cursor = Gdx.graphics.newCursor(pixmap, 0, 0);
-        if (cursor != null) {
-            Gdx.graphics.setCursor(cursor);
-        }
-    }
-
     private void setupDisplay() {
         setFullscreen(mGameConfig.fullscreen);
     }
diff --git a/core/src/com/agateau/pixelwheels/screens/MouseCursorManager.java b/core/src/com/agateau/pixelwheels/screens/MouseCursorManager.java
new file mode 100644
index 00000000..42359a39
--- /dev/null
+++ b/core/src/com/agateau/pixelwheels/screens/MouseCursorManager.java
@@ -0,0 +1,98 @@
+/*
+ * Copyright 2019 Aurélien Gâteau <mail@agateau.com>
+ *
+ * This file is part of Pixel Wheels.
+ *
+ * Pixel Wheels is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free
+ * Software Foundation, either version 3 of the License, or (at your option)
+ * any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.agateau.pixelwheels.screens;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.Cursor;
+import com.badlogic.gdx.graphics.Pixmap;
+
+public class MouseCursorManager {
+    private static final long AUTOHIDE_DELAY = 4 * 1000;
+    private final Cursor mEmptyCursor;
+    private Cursor mCursor;
+
+    private int mOldX, mOldY;
+    private long mTimestamp;
+    private boolean mIsVisible = false;
+
+    public MouseCursorManager() {
+        refreshAssets();
+
+        Pixmap pixmap = new Pixmap(2, 2, Pixmap.Format.RGBA8888);
+        pixmap.setColor(0, 0, 0, 0);
+        pixmap.fill();
+        mEmptyCursor = Gdx.graphics.newCursor(pixmap, 0, 0);
+
+        updateCoordinates();
+        if (supportsCursor()) {
+            hideMouseCursor();
+        }
+    }
+
+    private void updateCoordinates() {
+        mTimestamp = System.currentTimeMillis();
+        mOldX = Gdx.input.getX();
+        mOldY = Gdx.input.getY();
+    }
+
+    public void refreshAssets() {
+        if (mCursor != null) {
+            mCursor.dispose();
+        }
+
+        Pixmap pixmap = new Pixmap(Gdx.files.internal("ui/cursor.png"));
+        mCursor = Gdx.graphics.newCursor(pixmap, 0, 0);
+    }
+
+    public void act() {
+        if (!supportsCursor()) {
+            return;
+        }
+        int x = Gdx.input.getX();
+        int y = Gdx.input.getY();
+        boolean hasMoved = x != mOldX || y != mOldY;
+        long now = System.currentTimeMillis();
+        if (hasMoved) {
+            mOldX = x;
+            mOldY = y;
+            mTimestamp = now;
+            if (!mIsVisible) {
+                showMouseCursor();
+            }
+        } else {
+            if (mIsVisible && (now - mTimestamp) > AUTOHIDE_DELAY) {
+                hideMouseCursor();
+            }
+        }
+    }
+
+    private void showMouseCursor() {
+        mIsVisible = true;
+        Gdx.graphics.setCursor(mCursor);
+    }
+
+    private void hideMouseCursor() {
+        mIsVisible = false;
+        Gdx.graphics.setCursor(mEmptyCursor);
+    }
+
+    private boolean supportsCursor() {
+        return mEmptyCursor != null;
+    }
+}
