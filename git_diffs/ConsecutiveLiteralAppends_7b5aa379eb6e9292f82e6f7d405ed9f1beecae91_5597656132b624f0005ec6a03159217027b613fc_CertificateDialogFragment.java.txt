diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/MyApp.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/MyApp.java
index 296c3dbc..cd92402b 100644
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/MyApp.java
+++ b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/MyApp.java
@@ -17,8 +17,6 @@ import nerd.tuxmobil.fahrplan.congress.utils.ConferenceTimeFrame;
 
 public class MyApp extends Application {
 
-    public static Application app = null;
-
     public static final boolean DEBUG = false;
 
     public static Meta meta;
@@ -56,7 +54,6 @@ public class MyApp extends Application {
     public void onCreate() {
         super.onCreate();
         TraceDroid.init(this);
-        app = this;
         task_running = TASKS.NONE;
         AppRepository.INSTANCE.initialize(
                 getApplicationContext(),
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateDialogFragment.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateDialogFragment.java
deleted file mode 100644
index 4732ed98..00000000
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateDialogFragment.java
+++ /dev/null
@@ -1,154 +0,0 @@
-package nerd.tuxmobil.fahrplan.congress.net;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AlertDialog;
-import androidx.fragment.app.DialogFragment;
-
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateEncodingException;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-
-import nerd.tuxmobil.fahrplan.congress.BuildConfig;
-import nerd.tuxmobil.fahrplan.congress.R;
-import nerd.tuxmobil.fahrplan.congress.utils.AlertDialogHelper;
-
-public class CertificateDialogFragment extends DialogFragment {
-
-    public interface OnCertAccepted {
-
-        void onCertAccepted();
-    }
-
-    public static final String FRAGMENT_TAG =
-            BuildConfig.APPLICATION_ID + "CERTIFICATE_DIALOG_FRAGMENT_TAG";
-
-    private static final String BUNDLE_KEY_EXCEPTION_MESSAGE =
-            BuildConfig.APPLICATION_ID + ".BUNDLE_KEY_EXCEPTION_MESSAGE";
-
-    private OnCertAccepted listener;
-
-    private X509Certificate[] chain;
-
-    public static CertificateDialogFragment newInstance(String exceptionMessage) {
-        CertificateDialogFragment dialog = new CertificateDialogFragment();
-        Bundle args = new Bundle();
-        args.putString(BUNDLE_KEY_EXCEPTION_MESSAGE, exceptionMessage);
-        dialog.setArguments(args);
-        return dialog;
-    }
-
-    @Override
-    public void onAttach(Context context) {
-        super.onAttach(context);
-        listener = (OnCertAccepted) context;
-    }
-
-    private static String getFingerPrint(X509Certificate cert) {
-        MessageDigest md;
-        try {
-            md = MessageDigest.getInstance("SHA-1");
-        } catch (NoSuchAlgorithmException e) {
-            return "SHA-1 error";
-        }
-        byte[] der;
-        try {
-            der = cert.getEncoded();
-        } catch (CertificateEncodingException e) {
-            return "Reading CERT error";
-        }
-        md.update(der);
-        byte[] digest = md.digest();
-        StringBuilder hash = new StringBuilder();
-
-        for (int i = 0; i < digest.length; i++) {
-            hash.append(String.format("%02x", 0xFF & digest[i]));
-            if (i < digest.length - 1) {
-                hash.append(" ");
-            }
-        }
-        return hash.toString();
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        Bundle args = getArguments();
-        String exceptionMessage = "Unknown Error";
-        if (args != null) {
-            String message = args.getString(BUNDLE_KEY_EXCEPTION_MESSAGE);
-            if (!TextUtils.isEmpty(message)) {
-                exceptionMessage = message;
-            }
-        }
-
-        chain = TrustManagerFactory.getLastCertChain();
-
-        StringBuffer chainInfo = new StringBuffer(100);
-        int chainLength = chain == null ? 0 : chain.length;
-        for (int i = 0; i < chainLength; i++) {
-            // display certificate chain information
-            chainInfo.append("Certificate chain[" + i + "]:\n");
-            chainInfo.append("Subject: " + chain[i].getSubjectDN().toString()).append("\n");
-            chainInfo.append("Issuer: " + chain[i].getIssuerDN().toString()).append("\n");
-            // TODO Use commons.temporal.Moment class
-            chainInfo.append("Issued On: " + String.format("%02d.%02d.%04d",
-                    chain[i].getNotBefore().getDate(),
-                    chain[i].getNotBefore().getMonth() + 1,
-                    chain[i].getNotBefore().getYear() + 1900)).append("\n");
-            chainInfo.append("Expires On: " + String.format("%02d.%02d.%04d",
-                    chain[i].getNotAfter().getDate(),
-                    chain[i].getNotAfter().getMonth() + 1,
-                    chain[i].getNotAfter().getYear() + 1900)).append("\n");
-            chainInfo.append("SHA1 Fingerprint: " + getFingerPrint(chain[i])).append("\n");
-            if (i + 1 < chainLength) {
-                chainInfo.append("\n");
-            }
-        }
-
-        Activity activity = requireActivity();
-        AlertDialog.Builder builder = new AlertDialog.Builder(activity)
-                .setTitle(getString(R.string.dlg_invalid_certificate_title))
-                .setCancelable(true)
-                .setPositiveButton(getString(android.R.string.yes), (dialog, which) -> onConfirm())
-                .setNegativeButton(getString(android.R.string.no), null);
-
-        LayoutInflater inflater = activity.getLayoutInflater();
-        View msgView = inflater.inflate(R.layout.cert_dialog, null);
-        TextView messageView = msgView.findViewById(R.id.cert);
-        String message = getString(R.string.dlg_certificate_message_fmt, exceptionMessage);
-        message += "\n\n" + chainInfo.toString();
-        messageView.setText(message);
-        builder.setView(msgView);
-        return builder.create();
-    }
-
-    private void onConfirm() {
-        try {
-            if (chain != null) {
-                TrustManagerFactory.addCertificateChain(chain);
-            }
-            if (listener != null) {
-                listener.onCertAccepted();
-            }
-        } catch (CertificateException e) {
-            String messageArguments = e.getMessage() == null ? "" : e.getMessage();
-            AlertDialogHelper.showErrorDialog(
-                    requireContext(),
-                    R.string.dlg_invalid_certificate_could_not_apply,
-                    R.string.dlg_certificate_message_fmt,
-                    messageArguments);
-        }
-    }
-
-}
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateErrorFragment.kt b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateErrorFragment.kt
new file mode 100644
index 00000000..5a53f799
--- /dev/null
+++ b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/CertificateErrorFragment.kt
@@ -0,0 +1,50 @@
+package nerd.tuxmobil.fahrplan.congress.net
+
+import android.app.Dialog
+import android.os.Bundle
+import androidx.annotation.NonNull
+import androidx.core.os.bundleOf
+import androidx.fragment.app.DialogFragment
+import androidx.fragment.app.FragmentManager
+import nerd.tuxmobil.fahrplan.congress.R
+import nerd.tuxmobil.fahrplan.congress.utils.AlertDialogHelper
+
+/**
+ * Displays the given certificate error message in a dialog.
+ */
+class CertificateErrorFragment : DialogFragment() {
+
+    companion object {
+
+        private const val FRAGMENT_TAG = "CERTIFICATE_ERROR_FRAGMENT_TAG"
+        private const val BUNDLE_KEY_ERROR_MESSAGE = "BUNDLE_KEY_ERROR_MESSAGE"
+
+        @JvmStatic
+        fun showDialog(fragmentManager: FragmentManager, errorMessage: String) {
+            val fragment = CertificateErrorFragment().apply {
+                arguments = bundleOf(BUNDLE_KEY_ERROR_MESSAGE to errorMessage)
+            }
+            fragment.show(fragmentManager, FRAGMENT_TAG)
+        }
+
+    }
+
+    @NonNull
+    private lateinit var errorMessage: String
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        arguments?.let {
+            errorMessage = it.getString(BUNDLE_KEY_ERROR_MESSAGE)!!
+        }
+    }
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog =
+            AlertDialogHelper.createErrorDialog(
+                    requireContext(),
+                    R.string.dlg_invalid_certificate_could_not_apply,
+                    R.string.dlg_certificate_message_fmt,
+                    errorMessage
+            )
+
+}
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/DomainNameChecker.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/DomainNameChecker.java
deleted file mode 100644
index 55556867..00000000
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/DomainNameChecker.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/*
- * Copyright (C) 2008 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package nerd.tuxmobil.fahrplan.congress.net;
-
-import android.util.Log;
-
-import java.net.InetAddress;
-import java.net.UnknownHostException;
-import java.security.cert.CertificateParsingException;
-import java.security.cert.X509Certificate;
-import java.util.Collection;
-import java.util.List;
-import java.util.regex.Pattern;
-import java.util.regex.PatternSyntaxException;
-
-import javax.security.auth.x500.X500Principal;
-
-import nerd.tuxmobil.fahrplan.congress.BuildConfig;
-
-
-/**
- * Implements basic domain-name validation as specified by RFC2818.
- */
-public class DomainNameChecker {
-
-    private static Pattern QUICK_IP_PATTERN;
-
-    static {
-        try {
-            // language=regex
-            QUICK_IP_PATTERN = Pattern.compile("^[a-f0-9\\.:]+$");
-        } catch (PatternSyntaxException e) {
-        }
-    }
-
-    private static final int ALT_DNS_NAME = 2;
-
-    private static final int ALT_IPA_NAME = 7;
-
-    private static final String LOG_TAG = "DomainNameChecker";
-
-    /**
-     * Checks the site certificate against the domain name of the site being
-     * visited
-     *
-     * @param certificate The certificate to check
-     * @param thisDomain  The domain name of the site being visited
-     * @return True iff if there is a domain match as specified by RFC2818
-     */
-    public static boolean match(X509Certificate certificate, String thisDomain) {
-        if (certificate == null || thisDomain == null || thisDomain.length() == 0) {
-            Log.d(LOG_TAG, "no certificate/domain");
-            return false;
-        }
-
-        thisDomain = thisDomain.toLowerCase();
-        if (!isIpAddress(thisDomain)) {
-            return matchDns(certificate, thisDomain);
-        } else {
-            return matchIpAddress(certificate, thisDomain);
-        }
-    }
-
-    /**
-     * @return True iff the domain name is specified as an IP address
-     */
-    private static boolean isIpAddress(String domain) {
-        if (domain == null || domain.length() == 0) {
-            return false;
-        }
-
-        boolean rval;
-        try {
-            // do a quick-dirty IP match first to avoid DNS lookup
-            rval = QUICK_IP_PATTERN.matcher(domain).matches();
-            if (rval) {
-                rval = domain.equals(InetAddress.getByName(domain)
-                        .getHostAddress());
-            }
-        } catch (UnknownHostException e) {
-            String errorMessage = e.getMessage();
-            if (errorMessage == null) {
-                errorMessage = "unknown host exception";
-            }
-
-            Log.d(LOG_TAG, "DomainNameChecker.isIpAddress(): " + errorMessage);
-
-            rval = false;
-        }
-
-        return rval;
-    }
-
-    /**
-     * Checks the site certificate against the IP domain name of the site being
-     * visited
-     *
-     * @param certificate The certificate to check
-     * @param thisDomain  The DNS domain name of the site being visited
-     * @return True iff if there is a domain match as specified by RFC2818
-     */
-    private static boolean matchIpAddress(X509Certificate certificate, String thisDomain) {
-        Log.d(LOG_TAG, "DomainNameChecker.matchIpAddress(): this domain: " + thisDomain);
-
-        InetAddress[] ipAddr;
-        try {
-            ipAddr = InetAddress.getAllByName(thisDomain);
-        } catch (UnknownHostException e1) {
-            e1.printStackTrace();
-            return false;
-        }
-
-        String reverseDNS = ipAddr[0].getHostName();
-        Log.d(LOG_TAG, "DomainNameChecker.matchIpAddress(): reverse address: " + reverseDNS);
-
-        /* IP Adresse in Zertifikat suchen */
-        try {
-            Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();
-            if (subjectAltNames != null) {
-                for (Object subjectAltName : subjectAltNames) {
-                    List<?> altNameEntry = (List<?>) subjectAltName;
-                    if (altNameEntry != null && 2 <= altNameEntry.size()) {
-                        Integer altNameType = (Integer) altNameEntry.get(0);
-                        if (altNameType != null) {
-                            if (altNameType == ALT_IPA_NAME) {
-                                String altName = (String) altNameEntry.get(1);
-                                if (altName != null) {
-                                    if (BuildConfig.DEBUG) {
-                                        Log.d(LOG_TAG, "alternative IP: " + altName);
-                                    }
-                                    if (thisDomain.equalsIgnoreCase(altName)) {
-                                        return true;
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        } catch (CertificateParsingException e) {
-        }
-
-        if (!reverseDNS.equals(thisDomain)) {
-            // reverse lookup erfolgreich
-            return match(certificate, reverseDNS);
-        }
-
-        return false;
-    }
-
-    /**
-     * Checks the site certificate against the DNS domain name of the site being
-     * visited
-     *
-     * @param certificate The certificate to check
-     * @param thisDomain  The DNS domain name of the site being visited
-     * @return True iff if there is a domain match as specified by RFC2818
-     */
-    private static boolean matchDns(X509Certificate certificate, String thisDomain) {
-        Log.d(LOG_TAG, "matchDns cert vs " + thisDomain);
-        boolean hasDns = false;
-        try {
-            Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();
-            if (subjectAltNames != null) {
-                for (Object subjectAltName : subjectAltNames) {
-                    List<?> altNameEntry = (List<?>) subjectAltName;
-                    if (altNameEntry != null && 2 <= altNameEntry.size()) {
-                        Integer altNameType = (Integer) altNameEntry.get(0);
-                        if (altNameType != null) {
-                            if (altNameType == ALT_DNS_NAME) {
-                                hasDns = true;
-                                String altName = (String) altNameEntry.get(1);
-                                if (altName != null) {
-                                    if (matchDns(thisDomain, altName)) {
-                                        return true;
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            } else {
-                Log.d(LOG_TAG, "no SubjectAltNames, looking for SubjectDN");
-                X500Principal dn = certificate.getSubjectX500Principal();
-                String name = dn.getName(X500Principal.CANONICAL);
-                String[] splitNames = name.split(",");
-                for (String splitName : splitNames) {
-                    Log.d(LOG_TAG, splitName);
-                    if (splitName.length() > 3 && splitName.startsWith("cn=")) {
-                        if (matchDns(thisDomain, splitName.substring(3))) {
-                            return true;
-                        }
-                    }
-                }
-            }
-        } catch (CertificateParsingException e) {
-            // one way we can get here is if an alternative name starts with
-            // '*' character, which is contrary to one interpretation of the
-            // spec (a valid DNS name must start with a letter); there is no
-            // good way around this, -> be strict and return false
-            if (BuildConfig.DEBUG) {
-                String errorMessage = e.getMessage();
-                if (errorMessage == null) {
-                    errorMessage = "failed to parse certificate";
-                }
-
-                Log.d(LOG_TAG, "DomainNameChecker.matchDns(): "
-                        + errorMessage);
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * @param thisDomain The domain name of the site being visited
-     * @param thatDomain The domain name from the certificate
-     * @return True iff thisDomain matches thatDomain as specified by RFC2818
-     */
-    private static boolean matchDns(String thisDomain, String thatDomain) {
-        Log.d(LOG_TAG, "DomainNameChecker.matchDns():"
-                + " this domain: " + thisDomain + " that domain: "
-                + thatDomain);
-
-        if (thisDomain == null || thisDomain.length() == 0
-                || thatDomain == null || thatDomain.length() == 0) {
-            return false;
-        }
-
-        thatDomain = thatDomain.toLowerCase();
-
-        // (a) domain name strings are equal, ignoring case: X matches X
-        boolean rval = thisDomain.equals(thatDomain);
-        if (!rval) {
-            String[] thisDomainTokens = thisDomain.split("\\.");
-            String[] thatDomainTokens = thatDomain.split("\\.");
-
-            int thisDomainTokensNum = thisDomainTokens.length;
-            int thatDomainTokensNum = thatDomainTokens.length;
-
-            // (b) OR thatHost is a '.'-suffix of thisHost: Z.Y.X matches X
-            if (thisDomainTokensNum >= thatDomainTokensNum) {
-                for (int i = thatDomainTokensNum - 1; i >= 0; --i) {
-                    rval = thisDomainTokens[i].equals(thatDomainTokens[i]);
-                    if (!rval) {
-                        // (c) OR we have a special *-match:
-                        // Z.Y.X matches *.Y.X but does not match *.X
-                        rval = i == 0 && thisDomainTokensNum == thatDomainTokensNum;
-                        if (rval) {
-                            rval = thatDomainTokens[0].equals("*");
-                            if (!rval) {
-                                // (d) OR we have a *-component match:
-                                // f*.com matches foo.com but not bar.com
-                                rval = domainTokenMatch(thisDomainTokens[0],
-                                        thatDomainTokens[0]);
-                            }
-                        }
-
-                        break;
-                    }
-                }
-            }
-        }
-
-        return rval;
-    }
-
-    /**
-     * @param thisDomainToken The domain token from the current domain name
-     * @param thatDomainToken The domain token from the certificate
-     * @return True iff thisDomainToken matches thatDomainToken, using the
-     * wildcard match as specified by RFC2818-3.1. For example, f*.com
-     * must match foo.com but not bar.com
-     */
-    private static boolean domainTokenMatch(String thisDomainToken, String thatDomainToken) {
-        if (thisDomainToken != null && thatDomainToken != null) {
-            int starIndex = thatDomainToken.indexOf('*');
-            if (starIndex >= 0) {
-                if (thatDomainToken.length() - 1 <= thisDomainToken.length()) {
-                    String prefix = thatDomainToken.substring(0, starIndex);
-                    String suffix = thatDomainToken.substring(starIndex + 1);
-
-                    return thisDomainToken.startsWith(prefix)
-                            && thisDomainToken.endsWith(suffix);
-                }
-            }
-        }
-
-        return false;
-    }
-}
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/TrustManagerFactory.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/TrustManagerFactory.java
deleted file mode 100644
index 6532de60..00000000
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/TrustManagerFactory.java
+++ /dev/null
@@ -1,226 +0,0 @@
-package nerd.tuxmobil.fahrplan.congress.net;
-
-import android.annotation.SuppressLint;
-import android.app.Application;
-import android.content.Context;
-import android.util.Log;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.security.KeyStore;
-import java.security.KeyStoreException;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.X509TrustManager;
-
-import nerd.tuxmobil.fahrplan.congress.MyApp;
-import nerd.tuxmobil.fahrplan.congress.net.exceptions.CertificateDomainMismatchException;
-
-// modified copy from K-9 Mail
-
-
-public final class TrustManagerFactory {
-
-    private static final String LOG_TAG = "TrustManagerFactory";
-
-    private static X509TrustManager defaultTrustManager;
-
-    private static final X509TrustManager insecureTrustManager;
-
-    private static X509TrustManager localTrustManager;
-
-    private static X509Certificate[] lastCertChain = null;
-
-    private static File keyStoreFile;
-
-    private static KeyStore keyStore;
-
-
-    @SuppressLint("TrustAllX509TrustManager")
-    private static class InsecureX509TrustManager implements X509TrustManager {
-
-        @Override
-        public void checkClientTrusted(X509Certificate[] chain, String authType) {
-        }
-
-        @Override
-        public void checkServerTrusted(X509Certificate[] chain, String authType) {
-        }
-
-        @Override
-        public X509Certificate[] getAcceptedIssuers() {
-            return null;
-        }
-    }
-
-    private static class SecureX509TrustManager implements X509TrustManager {
-
-        private static final Map<String, SecureX509TrustManager> mTrustManager =
-                new HashMap<>();
-
-        private final String mHost;
-
-        private SecureX509TrustManager(String host) {
-            Log.d("TrustManagerFactory", "SecureX509TrustManager(" + host + ")");
-            mHost = host;
-        }
-
-        public static synchronized X509TrustManager getInstance(String host) {
-            SecureX509TrustManager trustManager;
-            if (mTrustManager.containsKey(host)) {
-                trustManager = mTrustManager.get(host);
-            } else {
-                trustManager = new SecureX509TrustManager(host);
-                mTrustManager.put(host, trustManager);
-            }
-
-            return trustManager;
-        }
-
-        @Override
-        public void checkClientTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {
-            defaultTrustManager.checkClientTrusted(chain, authType);
-        }
-
-        @Override
-        public void checkServerTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {
-            TrustManagerFactory.setLastCertChain(chain);
-            if (!DomainNameChecker.match(chain[0], mHost)) {
-                throw new CertificateDomainMismatchException("Certificate domain name does not match " + mHost);
-            }
-            try {
-                // Try localTrustManager first, since self-signed certificates
-                // are used in most of the cases
-                Log.d(LOG_TAG, "trying localTrustManager");
-                localTrustManager.checkServerTrusted(new X509Certificate[]{chain[0]}, authType);
-            } catch (CertificateException e) {
-                /* Here fallback on to trustworthy CAs in Android */
-
-                /* SSL Pinning, do not trust any CA */
-                Log.d(LOG_TAG, "trying defaultTrustManager");
-                defaultTrustManager.checkServerTrusted(chain, authType);
-            }
-        }
-
-        @Override
-        public X509Certificate[] getAcceptedIssuers() {
-            return defaultTrustManager.getAcceptedIssuers();
-        }
-
-    }
-
-    static {
-        try {
-            javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance("X509");
-            Application app = MyApp.app;
-            File keyStorePath = app.getDir("KeyStore", Context.MODE_PRIVATE);
-            keyStoreFile = new File(keyStorePath + File.separator + "KeyStore.bks");
-            keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
-            java.io.FileInputStream fis;
-            try {
-                fis = new java.io.FileInputStream(keyStoreFile);
-            } catch (FileNotFoundException e1) {
-                fis = null;
-            }
-            try {
-                keyStore.load(fis, "".toCharArray());
-            } catch (IOException e) {
-                Log.e(LOG_TAG, "KeyStore IOException while initializing TrustManagerFactory ", e);
-                keyStore = null;
-            } catch (CertificateException e) {
-                Log.e(LOG_TAG, "KeyStore CertificateException while initializing TrustManagerFactory ", e);
-                keyStore = null;
-            }
-            tmf.init(keyStore);
-            TrustManager[] tms = tmf.getTrustManagers();
-            if (tms != null) {
-                for (TrustManager tm : tms) {
-                    if (tm instanceof X509TrustManager) {
-                        localTrustManager = (X509TrustManager) tm;
-                        break;
-                    }
-                }
-            }
-            tmf = javax.net.ssl.TrustManagerFactory.getInstance("X509");
-            tmf.init((KeyStore) null);
-            tms = tmf.getTrustManagers();
-            if (tms != null) {
-                for (TrustManager tm : tms) {
-                    if (tm instanceof X509TrustManager) {
-                        defaultTrustManager = (X509TrustManager) tm;
-                        break;
-                    }
-                }
-            }
-
-        } catch (NoSuchAlgorithmException e) {
-            Log.e(LOG_TAG, "Unable to get X509 Trust Manager ", e);
-        } catch (KeyStoreException e) {
-            Log.e(LOG_TAG, "Key Store exception while initializing TrustManagerFactory ", e);
-        }
-        insecureTrustManager = new InsecureX509TrustManager();
-    }
-
-    private TrustManagerFactory() {
-    }
-
-    public static X509TrustManager get(String host, boolean secure) {
-        Log.d(LOG_TAG, "get " + host + " " + secure);
-        return secure ? SecureX509TrustManager.getInstance(host) : insecureTrustManager;
-    }
-
-    public static void setLastCertChain(X509Certificate[] chain) {
-        lastCertChain = chain;
-    }
-
-    public static X509Certificate[] getLastCertChain() {
-        return lastCertChain;
-    }
-
-    public static void addCertificateChain(X509Certificate[] chain) throws CertificateException {
-        try {
-            javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance("X509");
-            for (X509Certificate element : chain) {
-                String alias = element.getSubjectDN().toString();
-                keyStore.setCertificateEntry(alias, element);
-            }
-
-            tmf.init(keyStore);
-            TrustManager[] tms = tmf.getTrustManagers();
-            if (tms != null) {
-                for (TrustManager tm : tms) {
-                    if (tm instanceof X509TrustManager) {
-                        localTrustManager = (X509TrustManager) tm;
-                        break;
-                    }
-                }
-            }
-            java.io.FileOutputStream keyStoreStream;
-            try {
-                keyStoreStream = new java.io.FileOutputStream(keyStoreFile);
-                keyStore.store(keyStoreStream, "".toCharArray());
-                keyStoreStream.close();
-            } catch (FileNotFoundException e) {
-                throw new CertificateException("Unable to write KeyStore: " + e.getMessage());
-            } catch (CertificateException e) {
-                throw new CertificateException("Unable to write KeyStore: " + e.getMessage());
-            } catch (IOException e) {
-                throw new CertificateException("Unable to write KeyStore: " + e.getMessage());
-            }
-
-        } catch (NoSuchAlgorithmException e) {
-            Log.e(LOG_TAG, "Unable to get X509 Trust Manager ", e);
-        } catch (KeyStoreException e) {
-            Log.e(LOG_TAG, "Key Store exception while initializing TrustManagerFactory ", e);
-        }
-    }
-
-}
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/exceptions/CertificateDomainMismatchException.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/exceptions/CertificateDomainMismatchException.java
deleted file mode 100644
index fe4682e3..00000000
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/net/exceptions/CertificateDomainMismatchException.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package nerd.tuxmobil.fahrplan.congress.net.exceptions;
-
-import java.security.cert.CertificateException;
-
-public class CertificateDomainMismatchException extends CertificateException {
-
-    private static final long serialVersionUID = 1L;
-
-    public CertificateDomainMismatchException(String message) {
-        super(message);
-    }
-}
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/schedule/MainActivity.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/schedule/MainActivity.java
index 8a04aecc..8ee26e89 100644
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/schedule/MainActivity.java
+++ b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/schedule/MainActivity.java
@@ -52,7 +52,7 @@ import nerd.tuxmobil.fahrplan.congress.favorites.StarredListActivity;
 import nerd.tuxmobil.fahrplan.congress.favorites.StarredListFragment;
 import nerd.tuxmobil.fahrplan.congress.models.Meta;
 import nerd.tuxmobil.fahrplan.congress.models.Session;
-import nerd.tuxmobil.fahrplan.congress.net.CertificateDialogFragment;
+import nerd.tuxmobil.fahrplan.congress.net.CertificateErrorFragment;
 import nerd.tuxmobil.fahrplan.congress.net.CustomHttpClient;
 import nerd.tuxmobil.fahrplan.congress.net.FetchScheduleResult;
 import nerd.tuxmobil.fahrplan.congress.net.HttpStatus;
@@ -70,7 +70,6 @@ import okhttp3.OkHttpClient;
 
 public class MainActivity extends BaseActivity implements
         OnSidePaneCloseListener,
-        CertificateDialogFragment.OnCertAccepted,
         AbstractListFragment.OnSessionListClick,
         FragmentManager.OnBackStackChangedListener,
         ConfirmationDialog.OnConfirmationDialogClicked {
@@ -189,10 +188,7 @@ public class MainActivity extends BaseActivity implements
 
     private void showErrorDialog(@NonNull String exceptionMessage, @NonNull String hostName, HttpStatus status) {
         if (HttpStatus.HTTP_LOGIN_FAIL_UNTRUSTED_CERTIFICATE == status) {
-            CertificateDialogFragment.newInstance(exceptionMessage).show(
-                    getSupportFragmentManager(),
-                    CertificateDialogFragment.FRAGMENT_TAG
-            );
+            CertificateErrorFragment.showDialog(getSupportFragmentManager(), exceptionMessage);
         }
         CustomHttpClient.showHttpError(this, status, hostName);
     }
@@ -456,12 +452,6 @@ public class MainActivity extends BaseActivity implements
         }
     }
 
-    @Override
-    public void onCertAccepted() {
-        Log.d(LOG_TAG, "Fetching schedule on cert accepted.");
-        fetchFahrplan();
-    }
-
     @Override
     public void onSessionListClick(Session session, boolean requiresScheduleReload) {
         if (session != null) {
diff --git a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/utils/AlertDialogHelper.java b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/utils/AlertDialogHelper.java
index 7f9d7ea8..94ba670b 100644
--- a/app/src/main/java/nerd/tuxmobil/fahrplan/congress/utils/AlertDialogHelper.java
+++ b/app/src/main/java/nerd/tuxmobil/fahrplan/congress/utils/AlertDialogHelper.java
@@ -16,11 +16,24 @@ public abstract class AlertDialogHelper {
             @StringRes final int title,
             @StringRes final int message,
             @Nullable final Object... messageArguments) {
-        new AlertDialog.Builder(context)
+        createErrorDialog(
+                context,
+                title,
+                message,
+                messageArguments)
+                .show();
+    }
+
+    public static AlertDialog createErrorDialog(
+            @NonNull final Context context,
+            @StringRes final int title,
+            @StringRes final int message,
+            @Nullable final Object... messageArguments) {
+        return new AlertDialog.Builder(context)
                 .setTitle(title)
                 .setMessage(context.getString(message, messageArguments))
                 .setPositiveButton(R.string.OK, null)
-                .show();
+                .create();
     }
 
 }
