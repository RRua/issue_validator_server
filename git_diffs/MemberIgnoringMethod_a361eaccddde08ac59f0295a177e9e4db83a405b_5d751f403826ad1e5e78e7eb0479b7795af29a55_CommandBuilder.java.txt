diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManager.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManager.java
new file mode 100644
index 0000000..9baf371
--- /dev/null
+++ b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManager.java
@@ -0,0 +1,38 @@
+package com.github.timnew.androidinfrared;
+
+import android.content.Context;
+import android.os.Build;
+
+public abstract class ConsumerIrManager {
+
+    public boolean hasIrEmitter() {
+        return false;
+    }
+
+    public void transmit(int carrierFrequency, int[] pattern) {
+    }
+
+    public void transmit(IrCommand command) {
+        transmit(command.frequency, command.pattern);
+    }
+
+    public android.hardware.ConsumerIrManager.CarrierFrequencyRange[] getCarrierFrequencies() {
+        return null;
+    }
+
+    public static ConsumerIrManager getSupportConsumerIrManager(Context context) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            return new ConsumerIrManagerCompat(context);
+        }
+
+        ConsumerIrManager consumerIrManagerSamsung = ConsumerIrManagerSamsung.getSupportConsumerIrManager(context);
+
+        if (consumerIrManagerSamsung != null)
+            return consumerIrManagerSamsung;
+
+        return new ConsumerIrManager() {
+        };
+    }
+
+}
+
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerCompat.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerCompat.java
new file mode 100644
index 0000000..b7f85c4
--- /dev/null
+++ b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerCompat.java
@@ -0,0 +1,30 @@
+package com.github.timnew.androidinfrared;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.os.Build;
+
+@TargetApi(Build.VERSION_CODES.KITKAT)
+public class ConsumerIrManagerCompat extends ConsumerIrManager {
+
+    private final android.hardware.ConsumerIrManager service;
+
+    public ConsumerIrManagerCompat(Context context) {
+        service = (android.hardware.ConsumerIrManager) context.getSystemService(Context.CONSUMER_IR_SERVICE);
+    }
+
+    @Override
+    public boolean hasIrEmitter() {
+        return service.hasIrEmitter();
+    }
+
+    @Override
+    public void transmit(int carrierFrequency, int[] pattern) {
+        service.transmit(carrierFrequency, pattern);
+    }
+
+    @Override
+    public android.hardware.ConsumerIrManager.CarrierFrequencyRange[] getCarrierFrequencies() {
+        return service.getCarrierFrequencies();
+    }
+}
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerSamsung.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerSamsung.java
new file mode 100644
index 0000000..d01beef
--- /dev/null
+++ b/AndroidInfrared/src/com/github/timnew/androidinfrared/ConsumerIrManagerSamsung.java
@@ -0,0 +1,81 @@
+package com.github.timnew.androidinfrared;
+
+import android.content.Context;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class ConsumerIrManagerSamsung extends ConsumerIrManager {
+
+    public static final String IRDA_SERVICE = "irda";
+
+    public static final int MICRO_SECONDS_IN_A_SECOND = 1000000;
+
+    public static ConsumerIrManagerSamsung getIrdaManager(Context applicationContext) {
+        Object irdaService = applicationContext.getSystemService(IRDA_SERVICE);
+
+        if (irdaService == null)
+            return null;
+
+        return new ConsumerIrManagerSamsung(irdaService);
+    }
+
+    private final Object irdaService;
+    private final Method writeIrSendMethod;
+
+    private ConsumerIrManagerSamsung(Object irdaService) {
+        this.irdaService = irdaService;
+
+        Class<?> irdaServiceClass = irdaService.getClass();
+
+        Method reflectedMethod;
+
+        try {
+            reflectedMethod = irdaServiceClass.getMethod("write_irsend", String.class);
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+
+            reflectedMethod = null;
+        }
+
+        writeIrSendMethod = reflectedMethod;
+    }
+
+    private void rawWrite(String code) {
+        try {
+            writeIrSendMethod.invoke(irdaService, code);
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public boolean hasIrEmitter() {
+        return writeIrSendMethod != null;
+    }
+
+    @Override
+    public void transmit(int carrierFrequency, int[] pattern) {
+        if (!hasIrEmitter())
+            return;
+
+        StringBuilder stringBuilder = new StringBuilder();
+
+        stringBuilder.append(carrierFrequency);
+
+        for (int bit : pattern) {
+            stringBuilder.append(',');
+            stringBuilder.append(bit * carrierFrequency / MICRO_SECONDS_IN_A_SECOND);
+        }
+
+
+        rawWrite(stringBuilder.toString());
+    }
+
+    @Override
+    public android.hardware.ConsumerIrManager.CarrierFrequencyRange[] getCarrierFrequencies() {
+        return null; // 36khz - 40khz
+    }
+}
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommand.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommand.java
new file mode 100644
index 0000000..64b1137
--- /dev/null
+++ b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommand.java
@@ -0,0 +1,237 @@
+package com.github.timnew.androidinfrared;
+
+import static com.github.timnew.androidinfrared.IrCommandBuilder.irCommandBuilder;
+import static com.github.timnew.androidinfrared.IrCommandBuilder.simpleSequence;
+
+public class IrCommand {
+
+    public final int frequency;
+    public final int[] pattern;
+
+    public IrCommand(int frequency, int[] pattern) {
+        this.frequency = frequency;
+        this.pattern = pattern;
+    }
+
+    public static class NEC {
+
+        private static final int FREQUENCY = 38000;
+        private static final int HDR_MARK = 9000;
+        private static final int HDR_SPACE = 4500;
+        private static final int BIT_MARK = 560;
+        private static final int ONE_SPACE = 1600;
+        private static final int ZERO_SPACE = 560;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static IrCommand buildNEC(int bitCount, int data) {
+            return irCommandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data)
+                    .mark(BIT_MARK)
+                    .build();
+        }
+    }
+
+    public static class Sony {
+
+        private static final int FREQUENCY = 40000;
+        private static final int HDR_MARK = 2400;
+        private static final int HDR_SPACE = 600;
+        private static final int ONE_MARK = 1200;
+        private static final int ZERO_MARK = 600;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(ONE_MARK, HDR_SPACE, ZERO_MARK, HDR_SPACE);
+
+        public static IrCommand buildSony(int bitCount, long data) {
+            return irCommandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class RC5 {
+
+        private static final int FREQUENCY = 36000;
+        private static final int T1 = 889;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = new IrCommandBuilder.SequenceDefinition() {
+            @Override
+            public void one(IrCommandBuilder builder, int index) {
+                builder.reversePair(T1, T1);
+            }
+
+            @Override
+            public void zero(IrCommandBuilder builder, int index) {
+                builder.pair(T1, T1);
+            }
+        };
+
+        // Note: first bit must be a one (start bit)
+        public static IrCommand buildRC5(int bitCount, long data) {
+            return irCommandBuilder(FREQUENCY)
+                    .mark(T1)
+                    .space(T1)
+                    .mark(T1)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class RC6 {
+
+        private static final int FREQUENCY = 36000;
+        private static final int HDR_MARK = 2666;
+        private static final int HDR_SPACE = 889;
+        private static final int T1 = 444;
+
+        public static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = new IrCommandBuilder.SequenceDefinition() {
+            private int getTime(int index) {
+                return index == 3 ? T1 + T1 : T1;
+            }
+
+            @Override
+            public void one(IrCommandBuilder builder, int index) {
+                int t = getTime(index);
+                builder.pair(t, t);
+            }
+
+            @Override
+            public void zero(IrCommandBuilder builder, int index) {
+                int t = getTime(index);
+                builder.reversePair(t, t);
+            }
+        };
+
+        // Caller needs to take care of flipping the toggle bit
+        public static IrCommand buildRC6(int bitCount, long data) {
+            return irCommandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .pair(T1, T1)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class DISH {
+
+        private static final int FREQUENCY = 56000;
+        private static final int HDR_MARK = 400;
+        private static final int HDR_SPACE = 6100;
+        private static final int BIT_MARK = 400;
+        private static final int ONE_SPACE = 1700;
+        private static final int ZERO_SPACE = 2800;
+        private static final int TOP_BIT = 0x8000;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static IrCommand buildDISH(int bitCount, int data) {
+            return irCommandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
+                    .build();
+        }
+    }
+
+    public static class Sharp {
+
+        private static final int FREQUENCY = 38000;
+        private static final int BIT_MARK = 245;
+        private static final int ONE_SPACE = 1805;
+        private static final int ZERO_SPACE = 795;
+        private static final int DELAY = 46;
+
+        private static final int INVERSE_MASK = 0x3FF;
+        private static final int TOP_BIT = 0x4000;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static IrCommand buildSharp(int bitCount, int data) {
+            return irCommandBuilder(FREQUENCY)
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
+                    .pair(BIT_MARK, ZERO_SPACE)
+                    .delay(DELAY)
+
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data ^ INVERSE_MASK)
+                    .pair(BIT_MARK, ZERO_SPACE)
+                    .delay(DELAY)
+                    .build();
+        }
+    }
+
+    public static class Panasonic {
+        private static final int FREQUENCY = 35000;
+        private static final int HDR_MARK = 3502;
+        private static final int HDR_SPACE = 1750;
+        private static final int BIT_MARK = 502;
+        private static final int ONE_SPACE = 1244;
+        private static final int ZERO_SPACE = 400;
+
+        private static final int ADDRESS_TOP_BIT = 0x8000;
+        private static final int ADDRESS_LENGTH = 16;
+        private static final int DATA_LENGTH = 32;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static IrCommand buildPanasonic(int address, int data) {
+            return irCommandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, ADDRESS_TOP_BIT, ADDRESS_LENGTH, address)
+                    .sequence(SEQUENCE_DEFINITION, DATA_LENGTH, data)
+                    .mark(BIT_MARK)
+                    .build();
+        }
+    }
+
+    public static class JVC {
+
+        private static final int FREQUENCY = 38000;
+        private static final int HDR_MARK = 8000;
+        private static final int HDR_SPACE = 4000;
+        private static final int BIT_MARK = 600;
+        private static final int ONE_SPACE = 1600;
+        private static final int ZERO_SPACE = 550;
+
+        private static final IrCommandBuilder.SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static IrCommand buildJVC(int bitCount, long data, boolean repeat) {
+            IrCommandBuilder builder = irCommandBuilder(FREQUENCY);
+
+            if (!repeat)
+                builder.pair(HDR_MARK, HDR_SPACE);
+
+            return builder.sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
+                    .mark(BIT_MARK)
+                    .build();
+        }
+    }
+
+    public static class Pronto {
+
+        public static IrCommand buildProto(String protoText) {
+            String[] codeParts = protoText.split(" ");
+
+            int[] protoSequence = new int[codeParts.length];
+
+            for (int i = 0; i < codeParts.length; i++) {
+                protoSequence[i] = Integer.parseInt(codeParts[i], 16);
+            }
+
+            return buildProto(protoSequence);
+        }
+
+        public static IrCommand buildProto(int[] protoSequence) {
+            int frequency = (int) (1000000 / (protoSequence[1] * 0.241246));
+            int T = (int) (protoSequence[1] * 0.241246);
+
+            IrCommandBuilder builder = irCommandBuilder(frequency);
+
+            for (int i = 4; i < protoSequence.length; i += 2) {
+                builder.pair(protoSequence[i] * T, protoSequence[i + 1] * T);
+            }
+
+            return builder.build();
+        }
+    }
+}
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/CommandBuilder.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommandBuilder.java
similarity index 55%
rename from AndroidInfrared/src/com/github/timnew/androidinfrared/CommandBuilder.java
rename to AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommandBuilder.java
index c56cfce..76efb6e 100644
--- a/AndroidInfrared/src/com/github/timnew/androidinfrared/CommandBuilder.java
+++ b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrCommandBuilder.java
@@ -3,18 +3,20 @@ package com.github.timnew.androidinfrared;
 import java.util.ArrayList;
 import java.util.List;
 
-public class CommandBuilder {
+public class IrCommandBuilder {
+
     public static final long TOP_BIT_32 = 0x1L << 31;
     public static final long TOP_BIT_64 = 0x1L << 63;
+
     private final int frequency;
     private final List<Integer> buffer;
     private Boolean lastMark;
 
-    public static CommandBuilder commandBuilder(int frequency) {
-        return new CommandBuilder(frequency);
+    public static IrCommandBuilder irCommandBuilder(int frequency) {
+        return new IrCommandBuilder(frequency);
     }
 
-    private CommandBuilder(int frequencyKHz) {
+    private IrCommandBuilder(int frequencyKHz) {
         this.frequency = frequencyKHz;
 
         buffer = new ArrayList<Integer>();
@@ -23,7 +25,7 @@ public class CommandBuilder {
         lastMark = null;
     }
 
-    private CommandBuilder appendMark(boolean mark, int interval) {
+    private IrCommandBuilder appendSymbol(boolean mark, int interval) {
         if (lastMark == null || lastMark != mark) {
             buffer.add(interval);
             lastMark = mark;
@@ -35,35 +37,35 @@ public class CommandBuilder {
         return this;
     }
 
-    public CommandBuilder mark(int interval) {
-        return appendMark(true, interval);
+    public IrCommandBuilder mark(int interval) {
+        return appendSymbol(true, interval);
     }
 
-    public CommandBuilder space(int interval) {
-        return appendMark(false, interval);
+    public IrCommandBuilder space(int interval) {
+        return appendSymbol(false, interval);
     }
 
-    public CommandBuilder pair(int on, int off) {
+    public IrCommandBuilder pair(int on, int off) {
         return mark(on).space(off);
     }
 
-    public CommandBuilder reversePair(int off, int on) {
+    public IrCommandBuilder reversePair(int off, int on) {
         return space(off).mark(on);
     }
 
-    public CommandBuilder delay(int ms) {
-        return space(ms * frequency / 1000);
+    public IrCommandBuilder delay(int ms) {
+        return space(ms);
     }
 
-    public CommandBuilder sequence(SequenceDefinition definition, int length, int data) {
+    public IrCommandBuilder sequence(SequenceDefinition definition, int length, int data) {
         return sequence(definition, TOP_BIT_32, length, data);
     }
 
-    public CommandBuilder sequence(SequenceDefinition definition, int length, long data) {
+    public IrCommandBuilder sequence(SequenceDefinition definition, int length, long data) {
         return sequence(definition, TOP_BIT_64, length, data);
     }
 
-    public CommandBuilder sequence(SequenceDefinition definition, long topBit, int length, long data) {
+    public IrCommandBuilder sequence(SequenceDefinition definition, long topBit, int length, long data) {
         for (int index = 0; index < length; index++) {
             if ((data & topBit) != 0) {
                 definition.one(this, index);
@@ -73,18 +75,22 @@ public class CommandBuilder {
 
             data <<= 1;
         }
+
         return this;
     }
 
-    public String build() {
-        StringBuilder result = new StringBuilder();
+    public IrCommand build() {
+        return new IrCommand(getFrequency(), buildSequence());
+    }
+
+    public int[] buildSequence() {
+        int[] result = new int[buffer.size()];
 
-        for (Integer num : buffer) {
-            result.append(num);
-            result.append(',');
+        for (int i = 0; i < buffer.size(); i++) {
+            result[i] = buffer.get(i);
         }
 
-        return result.toString();
+        return result;
     }
 
     public int getFrequency() {
@@ -98,12 +104,12 @@ public class CommandBuilder {
     public static SequenceDefinition simpleSequence(final int oneMark, final int oneSpace, final int zeroMark, final int zeroSpace) {
         return new SequenceDefinition() {
             @Override
-            public void one(CommandBuilder builder, int index) {
+            public void one(IrCommandBuilder builder, int index) {
                 builder.pair(oneMark, oneSpace);
             }
 
             @Override
-            public void zero(CommandBuilder builder, int index) {
+            public void zero(IrCommandBuilder builder, int index) {
                 builder.pair(zeroMark, zeroSpace);
             }
         };
@@ -111,9 +117,10 @@ public class CommandBuilder {
 
     public static abstract interface SequenceDefinition {
 
-        public abstract void one(CommandBuilder builder, int index);
+        public abstract void one(IrCommandBuilder builder, int index);
 
-        public abstract void zero(CommandBuilder builder, int index);
+        public abstract void zero(IrCommandBuilder builder, int index);
 
     }
 }
+
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaManager.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaManager.java
deleted file mode 100644
index 2acede5..0000000
--- a/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaManager.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.github.timnew.androidinfrared;
-
-import android.content.Context;
-import android.util.Log;
-
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-public class IrdaManager {
-
-    public static final String IRDA_SERVICE = "irda";
-
-
-    public static IrdaManager getIrdaManager(Context applicationContext) {
-        Object irdaService = applicationContext.getSystemService(IRDA_SERVICE);
-
-        if (irdaService == null)
-            return null;
-
-        try {
-            return new IrdaManager(irdaService);
-        } catch (NoSuchMethodException e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    private final Object irdaService;
-    private final Method writeIrSendMethod;
-
-    private IrdaManager(Object irdaService) throws NoSuchMethodException {
-        this.irdaService = irdaService;
-
-        Class<?> irdaServiceClass = irdaService.getClass();
-
-        writeIrSendMethod = irdaServiceClass.getMethod("write_irsend", String.class);
-    }
-
-    public IrdaManager sendSequence(String sequence) {
-        Log.d("IRCode", sequence);
-        rawWrite(sequence);
-        return this;
-    }
-
-    private void rawWrite(String code) {
-        try {
-            writeIrSendMethod.invoke(irdaService, code);
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (InvocationTargetException e) {
-            e.printStackTrace();
-        }
-    }
-
-}
diff --git a/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaProtocols.java b/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaProtocols.java
deleted file mode 100644
index ced9b7d..0000000
--- a/AndroidInfrared/src/com/github/timnew/androidinfrared/IrdaProtocols.java
+++ /dev/null
@@ -1,200 +0,0 @@
-package com.github.timnew.androidinfrared;
-
-import static com.github.timnew.androidinfrared.CommandBuilder.SequenceDefinition;
-import static com.github.timnew.androidinfrared.CommandBuilder.commandBuilder;
-import static com.github.timnew.androidinfrared.CommandBuilder.simpleSequence;
-
-public class IrdaProtocols {
-    public static class NEC {
-
-        private static final int FREQUENCY = 38028;  // T = 26.296 us
-        private static final int HDR_MARK = 342;
-        private static final int HDR_SPACE = 171;
-        private static final int BIT_MARK = 21;
-        private static final int ONE_SPACE = 60;
-        private static final int ZERO_SPACE = 21;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
-
-        public static String buildNEC(int bitCount, int data) {
-            return commandBuilder(FREQUENCY)
-                    .pair(HDR_MARK, HDR_SPACE)
-                    .sequence(SEQUENCE_DEFINITION, bitCount, data)
-                    .mark(BIT_MARK)
-                    .build();
-        }
-    }
-
-    public static class Sony {
-
-        private static final int FREQUENCY = 40000; // T = 25 us
-        private static final int HDR_MARK = 96;
-        private static final int HDR_SPACE = 24;
-        private static final int ONE_MARK = 48;
-        private static final int ZERO_MARK = 24;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(ONE_MARK, HDR_SPACE, ZERO_MARK, HDR_SPACE);
-
-        public static String buildSony(int bitCount, long data) {
-            return commandBuilder(FREQUENCY)
-                    .pair(HDR_MARK, HDR_SPACE)
-                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
-                    .build();
-        }
-    }
-
-    public static class RC5 {
-
-        private static final int FREQUENCY = 36000; // T = 27.78 us
-        private static final int T1 = 32;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = new SequenceDefinition() {
-            @Override
-            public void one(CommandBuilder builder, int index) {
-                builder.reversePair(T1, T1);
-            }
-
-            @Override
-            public void zero(CommandBuilder builder, int index) {
-                builder.pair(T1, T1);
-            }
-        };
-
-        // Note: first bit must be a one (start bit)
-        public static String buildRC5(int bitCount, long data) {
-            return commandBuilder(FREQUENCY)
-                    .mark(T1)
-                    .space(T1)
-                    .mark(T1)
-                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
-                    .build();
-        }
-    }
-
-    public static class RC6 {
-
-        private static final int FREQUENCY = 36000; // T = 27.78 us
-        private static final int HDR_MARK = 96;
-        private static final int HDR_SPACE = 32;
-        private static final int T1 = 16;
-
-        public static final SequenceDefinition SEQUENCE_DEFINITION = new SequenceDefinition() {
-            private int getTime(int index) {
-                return index == 3 ? T1 + T1 : T1;
-            }
-
-            @Override
-            public void one(CommandBuilder builder, int index) {
-                int t = getTime(index);
-                builder.pair(t, t);
-            }
-
-            @Override
-            public void zero(CommandBuilder builder, int index) {
-                int t = getTime(index);
-                builder.reversePair(t, t);
-            }
-        };
-
-        // Caller needs to take care of flipping the toggle bit
-        public static String buildRC6(int bitCount, long data) {
-            return commandBuilder(FREQUENCY)
-                    .pair(HDR_MARK, HDR_SPACE)
-                    .pair(T1, T1)
-                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
-                    .build();
-        }
-    }
-
-    public static class DISH {
-
-        private static final int FREQUENCY = 56000; // T = 17.857 us
-        private static final int HDR_MARK = 22;
-        private static final int HDR_SPACE = 342;
-        private static final int BIT_MARK = 22;
-        private static final int ONE_SPACE = 95;
-        private static final int ZERO_SPACE = 157;
-        private static final int TOP_BIT = 0x8000;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
-
-        public static String buildDISH(int bitCount, int data) {
-            return commandBuilder(FREQUENCY)
-                    .pair(HDR_MARK, HDR_SPACE)
-                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
-                    .build();
-        }
-    }
-
-    public static class Sharp {
-
-        private static final int FREQUENCY = 38000; // T = 26.315 us
-        private static final int BIT_MARK = 9;
-        private static final int ONE_SPACE = 69;
-        private static final int ZERO_SPACE = 30;
-
-        private static final int INVERSE_MASK = 0x3FF;
-        private static final int TOP_BIT = 0x4000;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
-
-        public static String buildSharp(int bitCount, int data) {
-            return commandBuilder(FREQUENCY)
-                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
-                    .pair(BIT_MARK, ZERO_SPACE)
-                    .delay(46)
-
-                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data ^ INVERSE_MASK)
-                    .pair(BIT_MARK, ZERO_SPACE)
-                    .delay(46)
-                    .build();
-        }
-    }
-
-    public static class Panasonic {
-        private static final int FREQUENCY = 35000; // T = 28.571 us
-        private static final int HDR_MARK = 123;
-        private static final int HDR_SPACE = 61;
-        private static final int BIT_MARK = 18;
-        private static final int ONE_SPACE = 44;
-        private static final int ZERO_SPACE = 14;
-
-        private static final int ADDRESS_TOP_BIT = 0x8000;
-        private static final int ADDRESS_LENGTH = 16;
-        private static final int DATA_LENGTH = 32;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
-
-        public static String buildPanasonic(int address, int data) {
-            return commandBuilder(FREQUENCY)
-                    .pair(HDR_MARK, HDR_SPACE)
-                    .sequence(SEQUENCE_DEFINITION, ADDRESS_TOP_BIT, ADDRESS_LENGTH, address)
-                    .sequence(SEQUENCE_DEFINITION, DATA_LENGTH, data)
-                    .mark(BIT_MARK)
-                    .build();
-        }
-    }
-
-    public static class JVC {
-
-        private static final int FREQUENCY = 38000; // T = 26.316 us
-        private static final int HDR_MARK = 304;
-        private static final int HDR_SPACE = 152;
-        private static final int BIT_MARK = 23;
-        private static final int ONE_SPACE = 61;
-        private static final int ZERO_SPACE = 21;
-
-        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
-
-        public static String buildJVC(int bitCount, long data, boolean repeat) {
-            CommandBuilder builder = commandBuilder(FREQUENCY);
-
-            if (!repeat)
-                builder.pair(HDR_MARK, HDR_SPACE);
-
-            return builder.sequence(SEQUENCE_DEFINITION, bitCount, data << (64 - bitCount))
-                    .mark(BIT_MARK)
-                    .build();
-        }
-    }
-}
diff --git a/AndroidInfraredTest/src/com/github/timnew/androidinfrared/CommandBuilderTest.java b/AndroidInfraredTest/src/com/github/timnew/androidinfrared/CommandBuilderTest.java
deleted file mode 100644
index eb6f4fb..0000000
--- a/AndroidInfraredTest/src/com/github/timnew/androidinfrared/CommandBuilderTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.github.timnew.androidinfrared;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static com.github.timnew.androidinfrared.CommandBuilder.commandBuilder;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class CommandBuilderTest {
-
-    public static final int FREQUENCY = 40000;
-    public static final String FREQUENCY_DATA = "40000,";
-    private CommandBuilder builder;
-
-    @Before
-    public void setUp() throws Exception {
-        builder = commandBuilder(FREQUENCY);
-    }
-
-    @Test
-    public void should_build_with_correct_frequency() {
-        assertThat(builder.getFrequency()).isEqualTo(FREQUENCY);
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY);
-    }
-
-    @Test
-    public void should_build_pair_correctly() {
-        builder.pair(30, 40).pair(50, 60);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 30, 40, 50, 60);
-    }
-
-    @Test
-    public void should_build_mark() {
-        builder.pair(30, 40).mark(10);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 30, 40, 10);
-
-        builder.mark(20);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 30, 40, 30);
-    }
-
-    @Test
-    public void should_build_space() {
-        builder.pair(30, 40).space(10);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 30, 50);
-
-        builder.mark(20).space(10);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 30, 50, 20, 10);
-    }
-
-    @Test
-    public void should_merge_pair_and_reverse_pair() {
-        builder.pair(10, 20).reversePair(20, 30);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 10, 40, 30);
-
-        builder.pair(5, 10);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 10, 40, 35, 10);
-    }
-
-    @Test
-    public void should_inject_delay() {
-        builder.pair(10, 20).delay(1); // 1 ms == 40 ticks @ frequency 40kHz
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 10, 60);
-
-        builder.mark(10).delay(1);
-
-        assertThat(builder.getBuffer()).containsExactly(FREQUENCY, 10, 60, 10, 40);
-
-    }
-
-    @Test
-    public void should_render_properly() {
-        builder.pair(10, 20).pair(30, 40);
-
-        assertThat(builder.build()).isEqualTo(FREQUENCY_DATA + "10,20,30,40,");
-    }
-
-
-}
diff --git a/SmartRemoteControl/src/main/java/com/github/timnew/smartremotecontrol/InfraredEmitter.java b/SmartRemoteControl/src/main/java/com/github/timnew/smartremotecontrol/InfraredEmitter.java
index c53fb9e..9accea8 100644
--- a/SmartRemoteControl/src/main/java/com/github/timnew/smartremotecontrol/InfraredEmitter.java
+++ b/SmartRemoteControl/src/main/java/com/github/timnew/smartremotecontrol/InfraredEmitter.java
@@ -3,7 +3,7 @@ package com.github.timnew.smartremotecontrol;
 import android.content.Context;
 import android.util.Log;
 
-import com.github.timnew.androidinfrared.IrdaManager;
+import com.github.timnew.androidinfrared.ConsumerIrManagerSamsung;
 import com.googlecode.androidannotations.annotations.AfterInject;
 import com.googlecode.androidannotations.annotations.EBean;
 import com.googlecode.androidannotations.annotations.RootContext;
@@ -26,11 +26,11 @@ public class InfraredEmitter {
     @RootContext
     protected Context context;
 
-    private IrdaManager manager;
+    private ConsumerIrManagerSamsung manager;
 
     @AfterInject
     protected void afterInjects() {
-        manager = IrdaManager.getIrdaManager(context);
+        manager = ConsumerIrManagerSamsung.getIrdaManager(context);
     }
 
     public boolean isIrdaSupported() {
