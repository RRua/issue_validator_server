diff --git a/app/src/main/java/com/beemdevelopment/aegis/importers/DatabaseImporterEntryException.java b/app/src/main/java/com/beemdevelopment/aegis/importers/DatabaseImporterEntryException.java
index 7aff6df4..ef4e4eaa 100644
--- a/app/src/main/java/com/beemdevelopment/aegis/importers/DatabaseImporterEntryException.java
+++ b/app/src/main/java/com/beemdevelopment/aegis/importers/DatabaseImporterEntryException.java
@@ -8,6 +8,11 @@ public class DatabaseImporterEntryException extends Exception {
         _text = text;
     }
 
+    public DatabaseImporterEntryException(String message, String text) {
+        super(message);
+        _text = text;
+    }
+
     public String getText() {
         return _text;
     }
diff --git a/app/src/main/java/com/beemdevelopment/aegis/importers/GoogleAuthImporter.java b/app/src/main/java/com/beemdevelopment/aegis/importers/GoogleAuthImporter.java
index 89a3a24b..c4d8377e 100644
--- a/app/src/main/java/com/beemdevelopment/aegis/importers/GoogleAuthImporter.java
+++ b/app/src/main/java/com/beemdevelopment/aegis/importers/GoogleAuthImporter.java
@@ -2,26 +2,17 @@ package com.beemdevelopment.aegis.importers;
 
 import android.content.Context;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
 
-import com.beemdevelopment.aegis.vault.VaultEntry;
 import com.beemdevelopment.aegis.encoding.Base32;
 import com.beemdevelopment.aegis.encoding.EncodingException;
 import com.beemdevelopment.aegis.otp.HotpInfo;
 import com.beemdevelopment.aegis.otp.OtpInfo;
 import com.beemdevelopment.aegis.otp.OtpInfoException;
 import com.beemdevelopment.aegis.otp.TotpInfo;
-import com.topjohnwu.superuser.ShellUtils;
+import com.beemdevelopment.aegis.vault.VaultEntry;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
 import java.util.List;
 
-import static android.database.sqlite.SQLiteDatabase.OPEN_READONLY;
-
 public class GoogleAuthImporter extends DatabaseImporter {
     private static final int TYPE_TOTP = 0;
     private static final int TYPE_HOTP = 1;
@@ -45,37 +36,9 @@ public class GoogleAuthImporter extends DatabaseImporter {
 
     @Override
     public State read(FileReader reader) throws DatabaseImporterException {
-        File file;
-
-        try {
-            // create a temporary copy of the database so that SQLiteDatabase can open it
-            file = File.createTempFile("google-import-", "", getContext().getCacheDir());
-            try (FileOutputStream out = new FileOutputStream(file)) {
-                ShellUtils.pump(reader.getStream(), out);
-            }
-        } catch (IOException e) {
-            throw new DatabaseImporterException(e);
-        }
-
-        try (SQLiteDatabase db = SQLiteDatabase.openDatabase(file.getAbsolutePath(), null, OPEN_READONLY, null)) {
-            try (Cursor cursor = db.rawQuery("SELECT * FROM accounts", null)) {
-                List<Entry> entries = new ArrayList<>();
-
-                if (cursor.moveToFirst()) {
-                    do {
-                        Entry entry = new Entry(cursor);
-                        entries.add(entry);
-                    } while(cursor.moveToNext());
-                }
-
-                return new State(entries);
-            }
-        } catch (SQLiteException e) {
-            throw new DatabaseImporterException(e);
-        } finally {
-            // always delete the temporary file
-            file.delete();
-        }
+        SqlImporterHelper helper = new SqlImporterHelper(getContext());
+        List<Entry> entries = helper.read(Entry.class, reader.getStream(), "accounts");
+        return new State(entries);
     }
 
     public static class State extends DatabaseImporter.State {
@@ -131,27 +94,7 @@ public class GoogleAuthImporter extends DatabaseImporter {
         }
     }
 
-    private static String getString(Cursor cursor, String columnName) {
-        return getString(cursor, columnName, null);
-    }
-
-    private static String getString(Cursor cursor, String columnName, String def) {
-        String res = cursor.getString(cursor.getColumnIndex(columnName));
-        if (res == null) {
-            return def;
-        }
-        return res;
-    }
-
-    private static int getInt(Cursor cursor, String columnName) {
-        return cursor.getInt(cursor.getColumnIndex(columnName));
-    }
-
-    private static long getLong(Cursor cursor, String columnName) {
-        return cursor.getLong(cursor.getColumnIndex(columnName));
-    }
-
-    private static class Entry {
+    private static class Entry extends SqlImporterHelper.Entry {
         private int _type;
         private String _secret;
         private String _email;
@@ -159,11 +102,12 @@ public class GoogleAuthImporter extends DatabaseImporter {
         private long _counter;
 
         public Entry(Cursor cursor) {
-            _type = getInt(cursor, "type");
-            _secret = getString(cursor, "secret");
-            _email = getString(cursor, "email", "");
-            _issuer = getString(cursor, "issuer", "");
-            _counter = getLong(cursor, "counter");
+            super(cursor);
+            _type = SqlImporterHelper.getInt(cursor, "type");
+            _secret = SqlImporterHelper.getString(cursor, "secret");
+            _email = SqlImporterHelper.getString(cursor, "email", "");
+            _issuer = SqlImporterHelper.getString(cursor, "issuer", "");
+            _counter = SqlImporterHelper.getLong(cursor, "counter");
         }
 
         public int getType() {
diff --git a/app/src/main/java/com/beemdevelopment/aegis/importers/SqlImporterHelper.java b/app/src/main/java/com/beemdevelopment/aegis/importers/SqlImporterHelper.java
new file mode 100644
index 00000000..15abc0c1
--- /dev/null
+++ b/app/src/main/java/com/beemdevelopment/aegis/importers/SqlImporterHelper.java
@@ -0,0 +1,89 @@
+package com.beemdevelopment.aegis.importers;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteException;
+
+import com.topjohnwu.superuser.ShellUtils;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.database.sqlite.SQLiteDatabase.OPEN_READONLY;
+
+public class SqlImporterHelper {
+    private Context _context;
+
+    public SqlImporterHelper(Context context) {
+        _context = context;
+    }
+
+    public <T extends Entry> List<T> read(Class<T> type, InputStream inStream, String table) throws DatabaseImporterException {
+        File file;
+
+        try {
+            // create a temporary copy of the database so that SQLiteDatabase can open it
+            file = File.createTempFile("db-import-", "", _context.getCacheDir());
+            try (FileOutputStream out = new FileOutputStream(file)) {
+                ShellUtils.pump(inStream, out);
+            }
+        } catch (IOException e) {
+            throw new DatabaseImporterException(e);
+        }
+
+        try (SQLiteDatabase db = SQLiteDatabase.openDatabase(file.getAbsolutePath(), null, OPEN_READONLY, null)) {
+            try (Cursor cursor = db.rawQuery(String.format("SELECT * FROM %s", table), null)) {
+                List<T> entries = new ArrayList<>();
+
+                if (cursor.moveToFirst()) {
+                    do {
+                        T entry = type.getDeclaredConstructor(Cursor.class).newInstance(cursor);
+                        entries.add(entry);
+                    } while (cursor.moveToNext());
+                }
+
+                return entries;
+            } catch (InstantiationException | IllegalAccessException
+                    | NoSuchMethodException | InvocationTargetException e) {
+                throw new RuntimeException(e);
+            }
+        } catch (SQLiteException e) {
+            throw new DatabaseImporterException(e);
+        } finally {
+            // always delete the temporary file
+            file.delete();
+        }
+    }
+
+    public static String getString(Cursor cursor, String columnName) {
+        return cursor.getString(cursor.getColumnIndex(columnName));
+    }
+
+    public static String getString(Cursor cursor, String columnName, String def) {
+        String res = cursor.getString(cursor.getColumnIndex(columnName));
+        if (res == null) {
+            return def;
+        }
+        return res;
+    }
+
+    public static int getInt(Cursor cursor, String columnName) {
+        return cursor.getInt(cursor.getColumnIndex(columnName));
+    }
+
+    public static long getLong(Cursor cursor, String columnName) {
+        return cursor.getLong(cursor.getColumnIndex(columnName));
+    }
+
+    public static abstract class Entry {
+        public Entry (Cursor cursor) {
+
+        }
+    }
+}
