diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Utilities.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Utilities.java
index 5b710ac9c..7de704c4a 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Utilities.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/Utilities.java
@@ -19,7 +19,6 @@ import androidx.appcompat.app.AppCompatActivity;
 
 import com.github.Doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
 import com.github.Doomsdayrs.api.shosetsu.services.core.objects.Stati;
-import com.github.doomsdayrs.apps.shosetsu.BuildConfig;
 import com.github.doomsdayrs.apps.shosetsu.R;
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
 import com.github.doomsdayrs.apps.shosetsu.ui.main.Supporter;
@@ -69,7 +68,7 @@ import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.Data
 public class Utilities {
 
 
-    public static void setActivityTitle(Activity activity, String title){
+    public static void setActivityTitle(Activity activity, String title) {
         Supporter supporter = (Supporter) activity;
         if (supporter != null) {
             supporter.setTitle(title);
@@ -85,7 +84,7 @@ public class Utilities {
      * @param positionSpared Item to set checked
      * @param demarkAction   Any action to proceed with
      */
-    public static void demarkMenuItems(@NotNull MenuItem[] menuItems, int positionSpared, @Nullable DemarkAction demarkAction) {
+    public static void unmarkMenuItems(MenuItem[] menuItems, int positionSpared, @Nullable DemarkAction demarkAction) {
         for (int x = 0; x < menuItems.length; x++)
             if (x != positionSpared)
                 menuItems[x].setChecked(false);
@@ -233,7 +232,7 @@ public class Utilities {
      */
     @NonNull
     public static String convertArrayToString(@NotNull String[] a) {
-        if (a != null && a.length != 0) {
+        if (a.length != 0) {
             for (int x = 0; x < a.length; x++) {
                 a[x] = a[x].replace(",", ">,<");
             }
@@ -271,7 +270,7 @@ public class Utilities {
     /**
      * Initializes the settings
      *
-     * @param
+     * @param mainActivity activity
      */
     public static void initPreferences(@NonNull AppCompatActivity mainActivity) {
         Settings.ReaderTextColor = viewPreferences.getInt("ReaderTextColor", Color.BLACK);
@@ -412,16 +411,6 @@ public class Utilities {
     }
 
 
-    /**
-     * Gets y position of a bookmark
-     *
-     * @param chapterID chapter id
-     * @return y position
-     */
-    public static int getYBookmark(int chapterID) {
-        return Database.DatabaseChapter.getY(chapterID);
-    }
-
     /**
      * Toggles bookmark
      *
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.java
deleted file mode 100644
index df9e79198..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.java
+++ /dev/null
@@ -1,241 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.novel;
-
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentPagerAdapter;
-import androidx.viewpager.widget.ViewPager;
-
-import com.github.Doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.Doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
-import com.github.Doomsdayrs.api.shosetsu.services.core.objects.NovelPage;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.ErrorView;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.adapters.NovelPagerAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.async.NovelLoader;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.pages.NovelFragmentChapters;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.pages.NovelFragmentInfo;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
-import com.google.android.material.tabs.TabLayout;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isOnline;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.getChapter;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class NovelFragment extends Fragment {
-
-    public int novelID;
-    @Nullable
-    public String novelURL;
-    @Nullable
-    public NovelPage novelPage;
-    @Nullable
-    public Formatter formatter;
-    @NonNull
-    public Status status = Status.UNREAD;
-
-    @Nullable
-    public List<NovelChapter> novelChapters = new ArrayList<>();
-
-
-    /**
-     * @param chapterURL Current chapter URL
-     * @return chapter after the input, returns the current chapter if no more
-     */
-    @Nullable
-    public static NovelChapter getNextChapter(@NotNull int chapterURL, @Nullable int[] novelChapters) {
-        if (novelChapters != null && novelChapters.length != 0)
-            for (int x = 0; x < novelChapters.length; x++) {
-                if (novelChapters[x] == chapterURL) {
-                    if (NovelFragmentChapters.reversed) {
-                        if (x - 1 != -1)
-                            return getChapter((novelChapters[x - 1]));
-                        else
-                            return getChapter((novelChapters[x]));
-                    } else {
-                        if (x + 1 != novelChapters.length)
-                            return getChapter((novelChapters[x + 1]));
-                        else
-                            return getChapter((novelChapters[x]));
-                    }
-                }
-            }
-        return null;
-    }
-
-    /**
-     * @return position of last read chapter, reads array from reverse. If -1 then the array is null, if -2 the array is empty, else if not found plausible chapter returns the first.
-     */
-    public int lastRead() {
-        if (novelChapters != null) {
-            if (novelChapters.size() != 0) {
-                if (!NovelFragmentChapters.reversed) {
-                    for (int x = novelChapters.size() - 1; x >= 0; x--) {
-                        Status status = Database.DatabaseChapter.getStatus(Database.DatabaseIdentification.getChapterIDFromChapterURL(novelChapters.get(x).link));
-                        switch (status) {
-                            default:
-                                break;
-                            case READ:
-                                return x + 1;
-                            case READING:
-                                return x;
-                        }
-                    }
-                } else {
-                    for (int x = 0; x < novelChapters.size(); x++) {
-                        Status status = Database.DatabaseChapter.getStatus(Database.DatabaseIdentification.getChapterIDFromChapterURL(novelChapters.get(x).link));
-                        switch (status) {
-                            default:
-                                break;
-                            case READ:
-                                return x - 1;
-                            case READING:
-                                return x;
-                        }
-                    }
-                }
-                return 0;
-            } else return -2;
-        } else return -1;
-    }
-
-
-    public NovelFragmentInfo novelFragmentInfo;
-    public NovelFragmentChapters novelFragmentChapters;
-
-    private TabLayout tabLayout;
-    private ViewPager viewPager;
-
-    public ConstraintLayout errorView;
-    public TextView errorMessage;
-    public Button errorButton;
-
-
-    public NovelFragment() {
-        setHasOptionsMenu(true);
-    }
-
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState) {
-        outState.putInt("novelID", novelID);
-        outState.putString("novelURL", novelURL);
-        outState.putInt("formatter", formatter.getID());
-        outState.putInt("status", status.getA());
-
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        Log.d("OnCreateView", "NovelFragment");
-        View view = inflater.inflate(R.layout.fragment_novel, container, false);
-        // Attach UI to program
-        {
-            viewPager = view.findViewById(R.id.fragment_novel_viewpager);
-            tabLayout = view.findViewById(R.id.fragment_novel_tabLayout);
-            errorView = view.findViewById(R.id.network_error);
-            errorMessage = view.findViewById(R.id.error_message);
-            errorButton = view.findViewById(R.id.error_button);
-        }
-
-        // Create sub-fragments
-        {
-            novelFragmentInfo = new NovelFragmentInfo();
-            novelFragmentInfo.setNovelFragment(this);
-            novelFragmentChapters = new NovelFragmentChapters();
-            novelFragmentChapters.setNovelFragment(this);
-        }
-        //TODO FINISH TRACKING
-        //boolean track = SettingsController.isTrackingEnabled();
-
-        if (savedInstanceState == null) {
-            if (isOnline() && !Database.DatabaseNovels.inDatabase(novelID)) {
-                setViewPager();
-                tabLayout.post(() -> new NovelLoader(this, new ErrorView(getActivity(), errorView, errorMessage, errorButton), false).execute());
-            } else {
-                novelPage = Database.DatabaseNovels.getNovelPage(novelID);
-                status = Database.DatabaseNovels.getStatus(novelID);
-                if (novelPage != null && getActivity() != null && getActivity().getActionBar() != null)
-                    getActivity().getActionBar().setTitle(novelPage.title);
-                setViewPager();
-            }
-        } else {
-            novelID = savedInstanceState.getInt("novelID");
-            novelURL = savedInstanceState.getString("novelURL");
-            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"));
-            status = Status.getStatus(savedInstanceState.getInt("status"));
-            novelPage = Database.DatabaseNovels.getNovelPage(novelID);
-            setViewPager();
-        }
-        return view;
-    }
-
-
-    private void setViewPager() {
-        List<Fragment> fragments = new ArrayList<>();
-        {
-            Log.d("FragmentLoading", "Main");
-            fragments.add(novelFragmentInfo);
-            Log.d("FragmentLoading", "Chapters");
-            fragments.add(novelFragmentChapters);
-        }
-
-        NovelPagerAdapter pagerAdapter = new NovelPagerAdapter(getChildFragmentManager(), FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, fragments);
-        viewPager.setAdapter(pagerAdapter);
-        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
-        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
-            @Override
-            public void onTabSelected(@NonNull TabLayout.Tab tab) {
-                viewPager.setCurrentItem(tab.getPosition());
-            }
-
-            @Override
-            public void onTabUnselected(TabLayout.Tab tab) {
-            }
-
-            @Override
-            public void onTabReselected(TabLayout.Tab tab) {
-
-            }
-        });
-        tabLayout.post(() -> tabLayout.setupWithViewPager(viewPager));
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
new file mode 100644
index 000000000..31ba56ae9
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
@@ -0,0 +1,206 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.novel
+
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Button
+import android.widget.TextView
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.fragment.app.Fragment
+import androidx.fragment.app.FragmentPagerAdapter
+import com.github.Doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.Doomsdayrs.api.shosetsu.services.core.objects.NovelChapter
+import com.github.Doomsdayrs.api.shosetsu.services.core.objects.NovelPage
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.ErrorView
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.adapters.NovelPagerAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.async.NovelLoader
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.pages.NovelFragmentChapters
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.pages.NovelFragmentInfo
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers
+import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status
+import com.google.android.material.tabs.TabLayout
+import com.google.android.material.tabs.TabLayout.OnTabSelectedListener
+import com.google.android.material.tabs.TabLayout.TabLayoutOnPageChangeListener
+import kotlinx.android.synthetic.main.fragment_novel.*
+import kotlinx.android.synthetic.main.network_error.*
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+/**
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class NovelFragment : Fragment() {
+    @JvmField
+    var novelID = 0
+    @JvmField
+    var novelURL: String? = null
+    @JvmField
+    var novelPage: NovelPage? = null
+    @JvmField
+    var formatter: Formatter? = null
+    var status = Status.UNREAD
+    @JvmField
+    var novelChapters: List<NovelChapter>? = ArrayList()
+
+    /**
+     * @return position of last read chapter, reads array from reverse. If -1 then the array is null, if -2 the array is empty, else if not found plausible chapter returns the first.
+     */
+    fun lastRead(): Int {
+        return if (novelChapters != null) {
+            if (novelChapters!!.isNotEmpty()) {
+                if (!NovelFragmentChapters.reversed) {
+                    for (x in novelChapters!!.indices.reversed()) {
+                        when (DatabaseChapter.getStatus(Database.DatabaseIdentification.getChapterIDFromChapterURL(novelChapters!![x].link))) {
+                            Status.READ -> return x + 1
+                            Status.READING -> return x
+                            else -> {
+                            }
+                        }
+                    }
+                } else {
+                    for (x in novelChapters!!.indices) {
+                        when (DatabaseChapter.getStatus(Database.DatabaseIdentification.getChapterIDFromChapterURL(novelChapters!![x].link))) {
+                            Status.READ -> return x - 1
+                            Status.READING -> return x
+                            else -> {
+                            }
+                        }
+                    }
+                }
+                0
+            } else -2
+        } else -1
+    }
+
+    @JvmField
+    var novelFragmentInfo: NovelFragmentInfo? = null
+    var novelFragmentChapters: NovelFragmentChapters? = null
+
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        outState.putInt("novelID", novelID)
+        outState.putString("novelURL", novelURL)
+        outState.putInt("formatter", formatter!!.id)
+        outState.putInt("status", status.a)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        Log.d("OnCreateView", "NovelFragment")
+        return inflater.inflate(R.layout.fragment_novel, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        // Attach UI to program
+        // Create sub-fragments
+        run {
+            novelFragmentInfo = NovelFragmentInfo()
+            novelFragmentInfo!!.setNovelFragment(this)
+            novelFragmentChapters = NovelFragmentChapters()
+            novelFragmentChapters!!.setNovelFragment(this)
+        }
+        //TODO FINISH TRACKING
+//boolean track = SettingsController.isTrackingEnabled();
+        if (savedInstanceState == null) {
+            if (Utilities.isOnline() && !Database.DatabaseNovels.inDatabase(novelID)) {
+                setViewPager()
+                fragment_novel_tabLayout!!.post { NovelLoader(this, ErrorView(activity, network_error, error_message, error_button), false).execute() }
+            } else {
+                novelPage = Database.DatabaseNovels.getNovelPage(novelID)
+                status = Database.DatabaseNovels.getStatus(novelID)
+                if (novelPage != null && activity != null && activity!!.actionBar != null) activity!!.actionBar!!.title = novelPage!!.title
+                setViewPager()
+            }
+        } else {
+            novelID = savedInstanceState.getInt("novelID")
+            novelURL = savedInstanceState.getString("novelURL")
+            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))
+            status = Status.getStatus(savedInstanceState.getInt("status"))
+            novelPage = Database.DatabaseNovels.getNovelPage(novelID)
+            setViewPager()
+        }
+    }
+
+    fun getErrorView(): ConstraintLayout? {
+        return network_error
+    }
+
+    fun getErrorMessage(): TextView? {
+        return error_message
+    }
+
+    fun getErrorButton(): Button? {
+        return error_button
+    }
+
+    private fun setViewPager() {
+        val fragments: MutableList<Fragment?> = ArrayList()
+        run {
+            Log.d("FragmentLoading", "Main")
+            fragments.add(novelFragmentInfo)
+            Log.d("FragmentLoading", "Chapters")
+            fragments.add(novelFragmentChapters)
+        }
+        val pagerAdapter = NovelPagerAdapter(childFragmentManager, FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, fragments)
+        fragment_novel_viewpager!!.adapter = pagerAdapter
+        fragment_novel_viewpager!!.addOnPageChangeListener(TabLayoutOnPageChangeListener(fragment_novel_tabLayout))
+        fragment_novel_tabLayout!!.addOnTabSelectedListener(object : OnTabSelectedListener {
+            override fun onTabSelected(tab: TabLayout.Tab) {
+                fragment_novel_viewpager!!.currentItem = tab.position
+            }
+
+            override fun onTabUnselected(tab: TabLayout.Tab) {}
+            override fun onTabReselected(tab: TabLayout.Tab) {}
+        })
+        fragment_novel_tabLayout!!.post { fragment_novel_tabLayout!!.setupWithViewPager(fragment_novel_viewpager) }
+    }
+
+    companion object {
+        /**
+         * @param chapterURL Current chapter URL
+         * @return chapter after the input, returns the current chapter if no more
+         */
+        @JvmStatic
+        fun getNextChapter(chapterURL: Int, novelChapters: IntArray?): NovelChapter? {
+            if (novelChapters != null && novelChapters.isNotEmpty()) for (x in novelChapters.indices) {
+                if (novelChapters[x] == chapterURL) {
+                    return if (NovelFragmentChapters.reversed) {
+                        if (x - 1 != -1) DatabaseChapter.getChapter(novelChapters[x - 1]) else DatabaseChapter.getChapter(novelChapters[x])
+                    } else {
+                        if (x + 1 != novelChapters.size) DatabaseChapter.getChapter(novelChapters[x + 1]) else DatabaseChapter.getChapter(novelChapters[x])
+                    }
+                }
+            }
+            return null
+        }
+    }
+
+    init {
+        setHasOptionsMenu(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/ChapterLoader.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/ChapterLoader.java
index b65cc1a8f..0a4b7b6e8 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/ChapterLoader.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/ChapterLoader.java
@@ -93,7 +93,7 @@ public class ChapterLoader extends AsyncTask<Activity, Void, Boolean> {
             if (novelFragmentChapters.getActivity() != null)
                 novelFragmentChapters.getActivity().runOnUiThread(() -> {
                     if (novelFragmentChapters.novelFragment != null) {
-                        novelFragmentChapters.novelFragment.errorView.setVisibility(View.GONE);
+                        novelFragmentChapters.novelFragment.getErrorView().setVisibility(View.GONE);
                     }
                 });
 
@@ -125,13 +125,13 @@ public class ChapterLoader extends AsyncTask<Activity, Void, Boolean> {
                     if (novelFragmentChapters.getActivity() != null)
                         novelFragmentChapters.getActivity().runOnUiThread(() -> {
                             if (novelFragmentChapters.novelFragment != null) {
-                                novelFragmentChapters.novelFragment.errorView.setVisibility(View.VISIBLE);
+                                Objects.requireNonNull(novelFragmentChapters.novelFragment.getErrorView()).setVisibility(View.VISIBLE);
                             }
                             if (novelFragmentChapters.novelFragment != null) {
-                                novelFragmentChapters.novelFragment.errorMessage.setText(e.getMessage());
+                                Objects.requireNonNull(novelFragmentChapters.novelFragment.getErrorMessage()).setText(e.getMessage());
                             }
                             if (novelFragmentChapters.novelFragment != null) {
-                                novelFragmentChapters.novelFragment.errorButton.setOnClickListener(view -> refresh(activity));
+                                Objects.requireNonNull(novelFragmentChapters.novelFragment.getErrorButton()).setOnClickListener(view -> refresh(activity));
                             }
                         });
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NovelLoader.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NovelLoader.java
index 91efde3a5..7c1ef61f5 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NovelLoader.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NovelLoader.java
@@ -71,7 +71,7 @@ public class NovelLoader extends AsyncTask<Void, Void, Boolean> {
 
     @Override
     protected void onPreExecute() {
-        novelFragment.novelFragmentInfo.swipeRefreshLayout.setRefreshing(true);
+        novelFragment.novelFragmentInfo.getSwipeRefresh().setRefreshing(true);
     }
 
     /**
@@ -130,10 +130,14 @@ public class NovelLoader extends AsyncTask<Void, Void, Boolean> {
         assert (novelFragment != null);
 
 
-        novelFragment.novelFragmentInfo.swipeRefreshLayout.setRefreshing(false);
+        novelFragment.novelFragmentInfo.getSwipeRefresh().setRefreshing(false);
         if (Database.DatabaseNovels.inDatabase(novelFragment.novelID)) {
             try {
-                Database.DatabaseNovels.updateData(novelFragment.novelURL, novelFragment.novelPage);
+                if (novelFragment.novelURL != null) {
+                    if (novelFragment.novelPage != null) {
+                        Database.DatabaseNovels.updateData(novelFragment.novelURL, novelFragment.novelPage);
+                    }
+                }
             } catch (Exception e) {
                 e.printStackTrace();
             }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/listeners/NovelFragmentUpdate.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/listeners/NovelFragmentUpdate.java
index 3921f41d9..61ef30b68 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/listeners/NovelFragmentUpdate.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/listeners/NovelFragmentUpdate.java
@@ -42,9 +42,9 @@ public class NovelFragmentUpdate implements SwipeRefreshLayout.OnRefreshListener
                     novelFragmentInfo.novelFragment,
                     new ErrorView(
                             novelFragmentInfo.novelFragment.getActivity(),
-                            novelFragmentInfo.novelFragment.errorView,
-                            novelFragmentInfo.novelFragment.errorMessage,
-                            novelFragmentInfo.novelFragment.errorButton),
+                            novelFragmentInfo.novelFragment.getErrorView(),
+                            novelFragmentInfo.novelFragment.getErrorMessage(),
+                            novelFragmentInfo.novelFragment.getErrorButton()),
                     false)
                     .execute();
     }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
index 41bc353e6..06d0b78e2 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
@@ -129,6 +129,7 @@ class NovelFragmentChapters : Fragment() {
      */
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
         if (savedInstanceState != null) {
+            //TODO Remove novelChapter as a valid data stream
             selectedChapters = (savedInstanceState.getSerializable("selChapter") as ArrayList<NovelChapter>?)!!
             currentMaxPage = savedInstanceState.getInt("maxPage")
         }
@@ -250,7 +251,7 @@ class NovelFragmentChapters : Fragment() {
                 return true
             }
             R.id.chapter_filter -> {
-                if (novelFragment!!.novelChapters != null) novelFragment!!.novelChapters?.reverse()
+                if (novelFragment!!.novelChapters != null) novelFragment!!.novelChapters = novelFragment!!.novelChapters?.reversed()
                 reversed = !reversed
                 return updateAdapter()
             }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/ChapterReader.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/ChapterReader.java
index 258eacafc..d4abe2b22 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/ChapterReader.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/ChapterReader.java
@@ -30,7 +30,6 @@ import org.jetbrains.annotations.NotNull;
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.demarkMenuItems;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isReaderNightMode;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isTapToScroll;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openInBrowser;
@@ -40,6 +39,7 @@ import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setupTheme;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.swapReaderColor;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.toggleBookmarkChapter;
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.toggleTapToScroll;
+import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.unmarkMenuItems;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.getChaptersOnlyIDs;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.getReaderType;
 import static java.util.Arrays.binarySearch;
@@ -187,11 +187,11 @@ public class ChapterReader extends AppCompatActivity {
 
             switch (readerType) {
                 case 1:
-                    demarkMenuItems(readers, 1, null);
+                    unmarkMenuItems(readers, 1, null);
                     break;
                 case 0:
                 case -1:
-                    demarkMenuItems(readers, 0, null);
+                    unmarkMenuItems(readers, 0, null);
                     break;
                 case -2:
                 default:
@@ -238,39 +238,39 @@ public class ChapterReader extends AppCompatActivity {
                 updateBookmark();
                 return true;
             case R.id.chapter_view_textSize_small:
-                demarkMenuItems(indentSpaces, 0, demarkActions[0]);
+                unmarkMenuItems(indentSpaces, 0, demarkActions[0]);
                 return true;
             case R.id.chapter_view_textSize_medium:
-                demarkMenuItems(textSizes, 1, demarkActions[0]);
+                unmarkMenuItems(textSizes, 1, demarkActions[0]);
                 return true;
             case R.id.chapter_view_textSize_large:
-                demarkMenuItems(textSizes, 2, demarkActions[0]);
+                unmarkMenuItems(textSizes, 2, demarkActions[0]);
                 return true;
 
             case R.id.chapter_view_paragraphSpace_none:
-                demarkMenuItems(paragraphSpaces, 0, demarkActions[1]);
+                unmarkMenuItems(paragraphSpaces, 0, demarkActions[1]);
                 return true;
             case R.id.chapter_view_paragraphSpace_small:
-                demarkMenuItems(paragraphSpaces, 1, demarkActions[1]);
+                unmarkMenuItems(paragraphSpaces, 1, demarkActions[1]);
                 return true;
             case R.id.chapter_view_paragraphSpace_medium:
-                demarkMenuItems(paragraphSpaces, 2, demarkActions[1]);
+                unmarkMenuItems(paragraphSpaces, 2, demarkActions[1]);
                 return true;
             case R.id.chapter_view_paragraphSpace_large:
-                demarkMenuItems(paragraphSpaces, 3, demarkActions[1]);
+                unmarkMenuItems(paragraphSpaces, 3, demarkActions[1]);
                 return true;
 
             case R.id.chapter_view_indent_none:
-                demarkMenuItems(indentSpaces, 0, demarkActions[2]);
+                unmarkMenuItems(indentSpaces, 0, demarkActions[2]);
                 return true;
             case R.id.chapter_view_indent_small:
-                demarkMenuItems(indentSpaces, 1, demarkActions[2]);
+                unmarkMenuItems(indentSpaces, 1, demarkActions[2]);
                 return true;
             case R.id.chapter_view_indent_medium:
-                demarkMenuItems(indentSpaces, 2, demarkActions[2]);
+                unmarkMenuItems(indentSpaces, 2, demarkActions[2]);
                 return true;
             case R.id.chapter_view_indent_large:
-                demarkMenuItems(indentSpaces, 3, demarkActions[2]);
+                unmarkMenuItems(indentSpaces, 3, demarkActions[2]);
                 return true;
 
             case R.id.browser:
@@ -280,10 +280,10 @@ public class ChapterReader extends AppCompatActivity {
                 openInWebview(this, currentView.chapterURL);
                 return true;
             case R.id.reader_0:
-                demarkMenuItems(readers, 0, demarkActions[3]);
+                unmarkMenuItems(readers, 0, demarkActions[3]);
                 return true;
             case R.id.reader_1:
-                demarkMenuItems(readers, 1, demarkActions[3]);
+                unmarkMenuItems(readers, 1, demarkActions[3]);
                 return true;
 
         }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.java
deleted file mode 100644
index 3e40f353d..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.java
+++ /dev/null
@@ -1,327 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.reader;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.os.Bundle;
-import android.os.PersistableBundle;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.widget.Toolbar;
-import androidx.fragment.app.FragmentPagerAdapter;
-import androidx.viewpager.widget.ViewPager;
-
-import com.github.Doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.adapters.NewChapterReaderAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.IndentChange;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.ParaSpacingChange;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.ReaderChange;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.TextSizeChange;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.viewHolders.NewChapterView;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.List;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.demarkMenuItems;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isReaderNightMode;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isTapToScroll;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openInBrowser;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openInWebview;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setTextSize;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.swapReaderColor;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.toggleBookmarkChapter;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.toggleTapToScroll;
-
-
-/**
- * shosetsu
- * 13 / 12 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class NewChapterReader extends AppCompatActivity {
-    private final Utilities.DemarkAction[] demarkActions = {new TextSizeChange(this), new ParaSpacingChange(this), new IndentChange(this), new ReaderChange(this)};
-    // Order of values. Small,Medium,Large
-    private final MenuItem[] textSizes = new MenuItem[3];
-    // Order of values. Non,Small,Medium,Large
-    private final MenuItem[] paragraphSpaces = new MenuItem[4];
-    // Order of values. Non,Small,Medium,Large
-    private final MenuItem[] indentSpaces = new MenuItem[4];
-    // Order of values. Default, Markdown
-    private final MenuItem[] readers = new MenuItem[2];
-    MenuItem bookmark, tap_to_scroll;
-
-   public ViewPager viewPager;
-    public Toolbar toolbar;
-
-
-    // NovelData
-    public int[] chapterIDs;
-    public Formatter formatter;
-    public int novelID;
-    public NewChapterView currentView;
-    int currentChapterID = -1;
-
-
-    /**
-     * Creates the option menu (on the top toolbar)
-     *
-     * @param menu Menu reference to fill
-     * @return if made
-     */
-    @Override
-    public boolean onCreateOptionsMenu(@NonNull Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-
-        inflater.inflate(R.menu.toolbar_chapter_view, menu);
-        // Night mode
-        menu.findItem(R.id.chapter_view_nightMode).setChecked(isReaderNightMode());
-
-        //  Bookmark
-        {
-            bookmark = menu.findItem(R.id.chapter_view_bookmark);
-            currentView.bookmarked = Database.DatabaseChapter.isBookMarked(currentView.CHAPTER_ID);
-            updateBookmark();
-        }
-
-
-        // Tap To Scroll
-        {
-            tap_to_scroll = menu.findItem(R.id.tap_to_scroll);
-            tap_to_scroll.setChecked(isTapToScroll());
-        }
-
-
-        // Text size
-        {
-            textSizes[0] = menu.findItem(R.id.chapter_view_textSize_small);
-            textSizes[1] = menu.findItem(R.id.chapter_view_textSize_medium);
-            textSizes[2] = menu.findItem(R.id.chapter_view_textSize_large);
-
-            switch ((int) Settings.ReaderTextSize) {
-                default:
-                    setTextSize(14);
-                case 14:
-                    textSizes[0].setChecked(true);
-                    break;
-                case 17:
-                    textSizes[1].setChecked(true);
-                    break;
-                case 20:
-                    textSizes[2].setChecked(true);
-                    break;
-            }
-        }
-
-        // Paragraph Space
-        {
-            paragraphSpaces[0] = menu.findItem(R.id.chapter_view_paragraphSpace_none);
-            paragraphSpaces[1] = menu.findItem(R.id.chapter_view_paragraphSpace_small);
-            paragraphSpaces[2] = menu.findItem(R.id.chapter_view_paragraphSpace_medium);
-            paragraphSpaces[3] = menu.findItem(R.id.chapter_view_paragraphSpace_large);
-
-            paragraphSpaces[Settings.paragraphSpacing].setChecked(true);
-        }
-
-        // Indent Space
-        {
-            indentSpaces[0] = menu.findItem(R.id.chapter_view_indent_none);
-            indentSpaces[1] = menu.findItem(R.id.chapter_view_indent_small);
-            indentSpaces[2] = menu.findItem(R.id.chapter_view_indent_medium);
-            indentSpaces[3] = menu.findItem(R.id.chapter_view_indent_large);
-
-            indentSpaces[Settings.indentSize].setChecked(true);
-        }
-
-        /* Reader
-        {
-
-            readers[0] = menu.findItem(R.id.reader_0);
-            readers[1] = menu.findItem(R.id.reader_1);
-            readerType = getReaderType(novelID);
-
-            switch (readerType) {
-                case 1:
-                    demarkMenuItems(readers, 1, null);
-                    break;
-                case 0:
-                case -1:
-                    demarkMenuItems(readers, 0, null);
-                    break;
-                case -2:
-                default:
-                    throw new RuntimeException("Invalid chapter?!? How are you reading this without the novel loaded in");
-            }
-        }*/
-        return true;
-    }
-
-    public void updateBookmark() {
-        if (bookmark != null)
-            if (currentView.bookmarked)
-                bookmark.setIcon(R.drawable.ic_bookmark_black_24dp);
-            else bookmark.setIcon(R.drawable.ic_bookmark_border_black_24dp);
-    }
-
-    /**
-     * What to do when an menu item is selected
-     *
-     * @param item item selected
-     * @return true if processed
-     */
-    @Override
-    public boolean onOptionsItemSelected(@NotNull MenuItem item) {
-        Log.d("item", item.toString());
-        switch (item.getItemId()) {
-            default:
-                return false;
-            case R.id.chapter_view_nightMode:
-                if (!item.isChecked()) {
-                    swapReaderColor();
-                    currentView.setUpReader();
-                } else {
-                    swapReaderColor();
-                    currentView.setUpReader();
-                }
-                item.setChecked(!item.isChecked());
-                return true;
-            case R.id.tap_to_scroll:
-                tap_to_scroll.setChecked(toggleTapToScroll());
-                return true;
-            case R.id.chapter_view_bookmark:
-                currentView.bookmarked = toggleBookmarkChapter(currentView.CHAPTER_ID);
-                updateBookmark();
-                return true;
-            case R.id.chapter_view_textSize_small:
-                demarkMenuItems(indentSpaces, 0, demarkActions[0]);
-                return true;
-            case R.id.chapter_view_textSize_medium:
-                demarkMenuItems(textSizes, 1, demarkActions[0]);
-                return true;
-            case R.id.chapter_view_textSize_large:
-                demarkMenuItems(textSizes, 2, demarkActions[0]);
-                return true;
-
-            case R.id.chapter_view_paragraphSpace_none:
-                demarkMenuItems(paragraphSpaces, 0, demarkActions[1]);
-                return true;
-            case R.id.chapter_view_paragraphSpace_small:
-                demarkMenuItems(paragraphSpaces, 1, demarkActions[1]);
-                return true;
-            case R.id.chapter_view_paragraphSpace_medium:
-                demarkMenuItems(paragraphSpaces, 2, demarkActions[1]);
-                return true;
-            case R.id.chapter_view_paragraphSpace_large:
-                demarkMenuItems(paragraphSpaces, 3, demarkActions[1]);
-                return true;
-
-            case R.id.chapter_view_indent_none:
-                demarkMenuItems(indentSpaces, 0, demarkActions[2]);
-                return true;
-            case R.id.chapter_view_indent_small:
-                demarkMenuItems(indentSpaces, 1, demarkActions[2]);
-                return true;
-            case R.id.chapter_view_indent_medium:
-                demarkMenuItems(indentSpaces, 2, demarkActions[2]);
-                return true;
-            case R.id.chapter_view_indent_large:
-                demarkMenuItems(indentSpaces, 3, demarkActions[2]);
-                return true;
-
-            case R.id.browser:
-                openInBrowser(this, currentView.CHAPTER_URL);
-                return true;
-            case R.id.webview:
-                openInWebview(this, currentView.CHAPTER_URL);
-                return true;
-            case R.id.reader_0:
-                demarkMenuItems(readers, 0, demarkActions[3]);
-                return true;
-            case R.id.reader_1:
-                demarkMenuItems(readers, 1, demarkActions[3]);
-                return true;
-
-        }
-    }
-
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState, @NonNull PersistableBundle outPersistentState) {
-        super.onSaveInstanceState(outState, outPersistentState);
-        outPersistentState.putIntArray("chapters", chapterIDs);
-        outPersistentState.putInt("novelID", novelID);
-        outPersistentState.putInt("formatter", formatter.getID());
-    }
-
-    @Override
-    public void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.new_chapter_reader);
-
-        viewPager = findViewById(R.id.viewpager);
-
-        toolbar = findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        if (savedInstanceState != null) {
-            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"));
-            novelID = savedInstanceState.getInt("novelID");
-            chapterIDs = savedInstanceState.getIntArray("chapters");
-        } else {
-            chapterIDs = getIntent().getIntArrayExtra("chapters");
-            {
-                int chapterID;
-                chapterID = getIntent().getIntExtra("chapterID", -1);
-                currentChapterID = chapterID;
-            }
-            novelID = getIntent().getIntExtra("novelID", -1);
-            formatter = DefaultScrapers.getByID(getIntent().getIntExtra("formatter", -1));
-        }
-
-        if (chapterIDs == null) {
-            List<Integer> integers = Database.DatabaseChapter.getChaptersOnlyIDs(novelID);
-            chapterIDs = new int[integers.size()];
-            for (int x = 0; x < integers.size(); x++)
-                chapterIDs[x] = integers.get(x);
-        }
-
-        NewChapterReaderAdapter newChapterReaderAdapter = new NewChapterReaderAdapter(getSupportFragmentManager(), FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, this);
-        viewPager.setAdapter(newChapterReaderAdapter);
-
-        if (currentChapterID != -1)
-            viewPager.setCurrentItem(findCurrentPosition(currentChapterID));
-    }
-
-    public int findCurrentPosition(int id) {
-        for (int x = 0; x < chapterIDs.length; x++)
-            if (chapterIDs[x] == id)
-                return x;
-        return -1;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.kt
new file mode 100644
index 000000000..18c1e0cea
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/NewChapterReader.kt
@@ -0,0 +1,287 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.reader
+
+import android.os.Bundle
+import android.os.PersistableBundle
+import android.util.Log
+import android.view.Menu
+import android.view.MenuItem
+import androidx.appcompat.app.AppCompatActivity
+import androidx.appcompat.widget.Toolbar
+import androidx.fragment.app.FragmentPagerAdapter
+import androidx.viewpager.widget.ViewPager
+import com.github.Doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.adapters.NewChapterReaderAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.IndentChange
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.ParaSpacingChange
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.ReaderChange
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.demarkActions.TextSizeChange
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.viewHolders.NewChapterView
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings
+import kotlinx.android.synthetic.main.new_chapter_reader.*
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 13 / 12 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class NewChapterReader : AppCompatActivity() {
+    private val demarkActions = arrayOf(TextSizeChange(this), ParaSpacingChange(this), IndentChange(this), ReaderChange(this))
+    // Order of values. Small,Medium,Large
+    private val textSizes = arrayOfNulls<MenuItem>(3)
+    // Order of values. Non,Small,Medium,Large
+    private val paragraphSpaces = arrayOfNulls<MenuItem>(4)
+    // Order of values. Non,Small,Medium,Large
+    private val indentSpaces = arrayOfNulls<MenuItem>(4)
+    // Order of values. Default, Markdown
+    private val readers = arrayOfNulls<MenuItem>(2)
+    var bookmark: MenuItem? = null
+    private var tapToScroll: MenuItem? = null
+    @JvmField
+    var toolbar: Toolbar? = null
+    // NovelData
+    @JvmField
+    var chapterIDs: IntArray? = null
+    @JvmField
+    var formatter: Formatter? = null
+    @JvmField
+    var novelID = 0
+    @JvmField
+    var currentView: NewChapterView? = null
+    private var currentChapterID = -1
+    /**
+     * Creates the option menu (on the top toolbar)
+     *
+     * @param menu Menu reference to fill
+     * @return if made
+     */
+    override fun onCreateOptionsMenu(menu: Menu): Boolean {
+        val inflater = menuInflater
+        inflater.inflate(R.menu.toolbar_chapter_view, menu)
+        // Night mode
+        menu.findItem(R.id.chapter_view_nightMode).isChecked = Utilities.isReaderNightMode()
+        //  Bookmark
+        run {
+            bookmark = menu.findItem(R.id.chapter_view_bookmark)
+            currentView!!.bookmarked = Database.DatabaseChapter.isBookMarked(currentView!!.chapterID)
+            updateBookmark()
+        }
+        // Tap To Scroll
+        run {
+            tapToScroll = menu.findItem(R.id.tap_to_scroll)
+            tapToScroll?.setChecked(Utilities.isTapToScroll())
+        }
+        // Text size
+        run {
+            textSizes[0] = menu.findItem(R.id.chapter_view_textSize_small)
+            textSizes[1] = menu.findItem(R.id.chapter_view_textSize_medium)
+            textSizes[2] = menu.findItem(R.id.chapter_view_textSize_large)
+            when (Settings.ReaderTextSize.toInt()) {
+                14 -> textSizes[0]?.setChecked(true)
+                17 -> textSizes[1]?.setChecked(true)
+                20 -> textSizes[2]?.setChecked(true)
+                else -> {
+                    Utilities.setTextSize(14)
+                    textSizes[0]?.setChecked(true)
+                }
+            }
+        }
+        // Paragraph Space
+        run {
+            paragraphSpaces[0] = menu.findItem(R.id.chapter_view_paragraphSpace_none)
+            paragraphSpaces[1] = menu.findItem(R.id.chapter_view_paragraphSpace_small)
+            paragraphSpaces[2] = menu.findItem(R.id.chapter_view_paragraphSpace_medium)
+            paragraphSpaces[3] = menu.findItem(R.id.chapter_view_paragraphSpace_large)
+            paragraphSpaces[Settings.paragraphSpacing]?.setChecked(true)
+        }
+        // Indent Space
+        run {
+            indentSpaces[0] = menu.findItem(R.id.chapter_view_indent_none)
+            indentSpaces[1] = menu.findItem(R.id.chapter_view_indent_small)
+            indentSpaces[2] = menu.findItem(R.id.chapter_view_indent_medium)
+            indentSpaces[3] = menu.findItem(R.id.chapter_view_indent_large)
+            indentSpaces[Settings.indentSize]?.setChecked(true)
+        }
+        /* Reader
+        {
+
+            readers[0] = menu.findItem(R.id.reader_0);
+            readers[1] = menu.findItem(R.id.reader_1);
+            readerType = getReaderType(novelID);
+
+            switch (readerType) {
+                case 1:
+                    demarkMenuItems(readers, 1, null);
+                    break;
+                case 0:
+                case -1:
+                    demarkMenuItems(readers, 0, null);
+                    break;
+                case -2:
+                default:
+                    throw new RuntimeException("Invalid chapter?!? How are you reading this without the novel loaded in");
+            }
+        }*/return true
+    }
+
+    fun updateBookmark() {
+        if (bookmark != null) if (currentView!!.bookmarked) bookmark!!.setIcon(R.drawable.ic_bookmark_black_24dp) else bookmark!!.setIcon(R.drawable.ic_bookmark_border_black_24dp)
+    }
+
+    fun getViewPager(): ViewPager? {
+        return viewpager
+    }
+
+    /**
+     * What to do when an menu item is selected
+     *
+     * @param item item selected
+     * @return true if processed
+     */
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        Log.d("item", item.toString())
+        return when (item.itemId) {
+            R.id.chapter_view_nightMode -> {
+                if (!item.isChecked) {
+                    Utilities.swapReaderColor()
+                    currentView!!.setUpReader()
+                } else {
+                    Utilities.swapReaderColor()
+                    currentView!!.setUpReader()
+                }
+                item.isChecked = !item.isChecked
+                true
+            }
+            R.id.tap_to_scroll -> {
+                tapToScroll!!.isChecked = Utilities.toggleTapToScroll()
+                true
+            }
+            R.id.chapter_view_bookmark -> {
+                currentView!!.bookmarked = Utilities.toggleBookmarkChapter(currentView!!.chapterID)
+                updateBookmark()
+                true
+            }
+            R.id.chapter_view_textSize_small -> {
+                Utilities.unmarkMenuItems(indentSpaces, 0, demarkActions[0])
+                true
+            }
+            R.id.chapter_view_textSize_medium -> {
+                Utilities.unmarkMenuItems(textSizes, 1, demarkActions[0])
+                true
+            }
+            R.id.chapter_view_textSize_large -> {
+                Utilities.unmarkMenuItems(textSizes, 2, demarkActions[0])
+                true
+            }
+            R.id.chapter_view_paragraphSpace_none -> {
+                Utilities.unmarkMenuItems(paragraphSpaces, 0, demarkActions[1])
+                true
+            }
+            R.id.chapter_view_paragraphSpace_small -> {
+                Utilities.unmarkMenuItems(paragraphSpaces, 1, demarkActions[1])
+                true
+            }
+            R.id.chapter_view_paragraphSpace_medium -> {
+                Utilities.unmarkMenuItems(paragraphSpaces, 2, demarkActions[1])
+                true
+            }
+            R.id.chapter_view_paragraphSpace_large -> {
+                Utilities.unmarkMenuItems(paragraphSpaces, 3, demarkActions[1])
+                true
+            }
+            R.id.chapter_view_indent_none -> {
+                Utilities.unmarkMenuItems(indentSpaces, 0, demarkActions[2])
+                true
+            }
+            R.id.chapter_view_indent_small -> {
+                Utilities.unmarkMenuItems(indentSpaces, 1, demarkActions[2])
+                true
+            }
+            R.id.chapter_view_indent_medium -> {
+                Utilities.unmarkMenuItems(indentSpaces, 2, demarkActions[2])
+                true
+            }
+            R.id.chapter_view_indent_large -> {
+                Utilities.unmarkMenuItems(indentSpaces, 3, demarkActions[2])
+                true
+            }
+            R.id.browser -> {
+                currentView!!.url?.let { Utilities.openInBrowser(this, it) }
+                true
+            }
+            R.id.webview -> {
+                currentView!!.url?.let { Utilities.openInWebview(this, it) }
+                true
+            }
+            R.id.reader_0 -> {
+                Utilities.unmarkMenuItems(readers, 0, demarkActions[3])
+                true
+            }
+            R.id.reader_1 -> {
+                Utilities.unmarkMenuItems(readers, 1, demarkActions[3])
+                true
+            }
+            else -> false
+        }
+    }
+
+    override fun onSaveInstanceState(outState: Bundle, outPersistentState: PersistableBundle) {
+        super.onSaveInstanceState(outState, outPersistentState)
+        outPersistentState.putIntArray("chapters", chapterIDs)
+        outPersistentState.putInt("novelID", novelID)
+        outPersistentState.putInt("formatter", formatter!!.id)
+    }
+
+    public override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.new_chapter_reader)
+        toolbar = findViewById(R.id.toolbar)
+        setSupportActionBar(toolbar)
+        if (savedInstanceState != null) {
+            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))
+            novelID = savedInstanceState.getInt("novelID")
+            chapterIDs = savedInstanceState.getIntArray("chapters")
+        } else {
+            chapterIDs = intent.getIntArrayExtra("chapters")
+            run {
+                val chapterID: Int = intent.getIntExtra("chapterID", -1)
+                currentChapterID = chapterID
+            }
+            novelID = intent.getIntExtra("novelID", -1)
+            formatter = DefaultScrapers.getByID(intent.getIntExtra("formatter", -1))
+        }
+        if (chapterIDs == null) {
+            val integers = Database.DatabaseChapter.getChaptersOnlyIDs(novelID)
+            chapterIDs = IntArray(integers.size)
+            for (x in integers.indices) chapterIDs!![x] = integers[x]
+        }
+        val newChapterReaderAdapter = NewChapterReaderAdapter(supportFragmentManager, FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, this)
+        viewpager.adapter = newChapterReaderAdapter
+        if (currentChapterID != -1) viewpager.currentItem = findCurrentPosition(currentChapterID)
+    }
+
+    fun findCurrentPosition(id: Int): Int {
+        for (x in chapterIDs!!.indices) if (chapterIDs!![x] == id) return x
+        return -1
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/adapters/NewChapterReaderAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/adapters/NewChapterReaderAdapter.java
index 9c0dd2276..edfa4ad87 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/adapters/NewChapterReaderAdapter.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/adapters/NewChapterReaderAdapter.java
@@ -44,7 +44,7 @@ public class NewChapterReaderAdapter extends FragmentPagerAdapter {
         this.newChapterReader = newChapterReader;
         for (int i : newChapterReader.chapterIDs) {
             NewChapterView newChapterView = new NewChapterView();
-            newChapterView.setCHAPTER_ID(i);
+            newChapterView.setChapterID(i);
             newChapterView.setNewChapterReader(newChapterReader);
             chapterViews.add(newChapterView);
         }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/async/NewChapterReaderViewLoader.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/async/NewChapterReaderViewLoader.java
index d7031e859..6a62532f4 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/async/NewChapterReaderViewLoader.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/async/NewChapterReaderViewLoader.java
@@ -22,11 +22,14 @@ public class NewChapterReaderViewLoader extends AsyncTask<Object, Void, Void> {
         Activity activity = newChapterView.newChapterReader;
         //activity.runOnUiThread(() -> chapterView.errorView.errorView.setVisibility(View.GONE));
         try {
-            newChapterView.unformattedText = newChapterView.newChapterReader.formatter.getNovelPassage(docFromURL(newChapterView.CHAPTER_URL, newChapterView.newChapterReader.formatter.hasCloudFlare()));
-            activity.runOnUiThread(newChapterView::setUpReader);
-            activity.runOnUiThread(() -> newChapterView.scrollView.post(() -> newChapterView.scrollView.scrollTo(0, getY(newChapterView.CHAPTER_ID))));
-            activity.runOnUiThread(() -> newChapterView.ready = true);
-        } catch (Exception e) {
+            if (newChapterView.newChapterReader != null && newChapterView.newChapterReader.formatter != null && newChapterView.getScrollView() != null && newChapterView.newChapterReader.formatter != null) {
+                newChapterView.unformattedText = newChapterView.newChapterReader.formatter.getNovelPassage(docFromURL(newChapterView.url, newChapterView.newChapterReader.formatter.hasCloudFlare()));
+                activity.runOnUiThread(newChapterView::setUpReader);
+                activity.runOnUiThread(() -> newChapterView.getScrollView().post(() -> newChapterView.getScrollView().scrollTo(0, getY(newChapterView.chapterID))));
+                activity.runOnUiThread(() -> newChapterView.ready = true);
+            }
+        } catch (
+                Exception e) {
             // activity.runOnUiThread(() -> { chapterView.errorView.errorView.setVisibility(View.VISIBLE);chapterView.errorView.errorMessage.setText(e.getMessage());chapterView.errorView.errorButton.setOnClickListener(view -> new ReaderViewLoader(chapterView).execute()); });
         }
         return null;
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.java
deleted file mode 100644
index ac583adb4..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.java
+++ /dev/null
@@ -1,240 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.reader.viewHolders;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.annotation.SuppressLint;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ScrollView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.NewChapterReader;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.async.NewChapterReaderViewLoader;
-import com.github.doomsdayrs.apps.shosetsu.ui.reader.listeners.NovelFragmentChapterViewHideBar;
-import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
-import com.google.android.material.chip.Chip;
-
-import java.util.Objects;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterURLFromChapterID;
-
-/**
- * shosetsu
- * 13 / 12 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class NewChapterView extends Fragment {
-    public NewChapterReader newChapterReader;
-
-    public String CHAPTER_URL;
-    public int CHAPTER_ID;
-
-    public ScrollView scrollView;
-    public boolean bookmarked;
-    public Chip nextChapter;
-    //public View coverView;
-    // public ViewPager2 viewPager2;
-    //public NewReader currentReader;
-    private TextView textView;
-
-
-    public boolean ready = false;
-    public String unformattedText;
-    public String text;
-
-
-    @SuppressLint("ClickableViewAccessibility")
-    public NewChapterView() {
-        //viewPager2 = itemView.findViewById(R.id.viewpager);
-        //coverView = itemView.findViewById(R.id.viewCover);
-        //coverView.setOnTouchListener((view, motionEvent) -> true);
-    }
-
-
-    public void setNewChapterReader(NewChapterReader newChapterReader) {
-        this.newChapterReader = newChapterReader;
-    }
-
-    public void setCHAPTER_ID(int CHAPTER_ID) {
-        this.CHAPTER_ID = CHAPTER_ID;
-        this.CHAPTER_URL = getChapterURLFromChapterID(CHAPTER_ID);
-    }
-
-    private void updateParent() {
-        newChapterReader.currentView = this;
-        newChapterReader.updateBookmark();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        updateParent();
-        String title = Database.DatabaseChapter.getTitle(CHAPTER_ID);
-        Log.i("Setting TITLE", title);
-        newChapterReader.toolbar.setTitle(title);
-    }
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putInt("id", CHAPTER_ID);
-        outState.putString("url", CHAPTER_URL);
-        outState.putString("text", text);
-        outState.putString("unform", unformattedText);
-        outState.putBoolean("book", bookmarked);
-        outState.putBoolean("ready", ready);
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.new_chapter_view, container, false);
-        if (savedInstanceState != null) {
-            CHAPTER_ID = savedInstanceState.getInt("id");
-            CHAPTER_URL = savedInstanceState.getString("url");
-            newChapterReader = (NewChapterReader) getActivity();
-            unformattedText = savedInstanceState.getString("unfom");
-            text = savedInstanceState.getString("text");
-            bookmarked = savedInstanceState.getBoolean("book");
-            ready = savedInstanceState.getBoolean("ready");
-        }
-        scrollView = view.findViewById(R.id.scrollView);
-        addBottomListener();
-
-        textView = view.findViewById(R.id.textView);
-        textView.setOnClickListener(new NovelFragmentChapterViewHideBar(newChapterReader.toolbar));
-        textView.setBackgroundColor(Settings.ReaderTextBackgroundColor);
-        textView.setTextColor(Settings.ReaderTextColor);
-        textView.setTextSize(Settings.ReaderTextSize);
-
-        nextChapter = view.findViewById(R.id.next_chapter);
-
-        nextChapter.setOnClickListener(view1 -> {
-            int position = newChapterReader.findCurrentPosition(this.CHAPTER_ID);
-            if (position + 1 < newChapterReader.chapterIDs.length) {
-                nextChapter.setVisibility(View.GONE);
-                newChapterReader.viewPager.setCurrentItem(position + 1);
-            } else
-                Toast.makeText(newChapterReader.getApplicationContext(), "No more chapters!", Toast.LENGTH_SHORT).show();
-            //   Toast.makeText(newChapterReader.getApplicationContext(), "Cannot move to next chapter, Please exit reader", Toast.LENGTH_LONG).show();
-        });
-
-        updateParent();
-
-
-        //holder.viewPager2.setUserInputEnabled(false);
-        //NewChapterReaderTypeAdapter newChapterReaderTypeAdapter = new NewChapterReaderTypeAdapter(newChapterReader);
-        //holder.viewPager2.setAdapter(newChapterReaderTypeAdapter);
-        //holder.viewPager2.setCurrentItem(getReaderType(newChapterReader.novelID));
-
-        Log.i("Loading chapter", CHAPTER_URL);
-        ready = false;
-        if (savedInstanceState == null) {
-            if (Database.DatabaseChapter.isSaved(CHAPTER_ID)) {
-                unformattedText = Objects.requireNonNull(Database.DatabaseChapter.getSavedNovelPassage(CHAPTER_ID));
-                setUpReader();
-                scrollView.post(() -> scrollView.scrollTo(0, Database.DatabaseChapter.getY(CHAPTER_ID)));
-                ready = true;
-            } else {
-                unformattedText = "";
-                setUpReader();
-                new NewChapterReaderViewLoader(this).execute();
-            }
-        } else {
-            setUpReader();
-        }
-        Database.DatabaseChapter.setChapterStatus(CHAPTER_ID, Status.READING);
-        return view;
-    }
-
-    public void setUpReader() {
-        scrollView.setBackgroundColor(Settings.ReaderTextBackgroundColor);
-        textView.setBackgroundColor(Settings.ReaderTextBackgroundColor);
-        textView.setTextColor(Settings.ReaderTextColor);
-        textView.setTextSize(Settings.ReaderTextSize);
-        if (unformattedText != null) {
-            StringBuilder replaceSpacing = new StringBuilder("\n");
-            for (int x = 0; x < Settings.paragraphSpacing; x++)
-                replaceSpacing.append("\n");
-
-            for (int x = 0; x < Settings.indentSize; x++)
-                replaceSpacing.append("\t");
-
-            text = unformattedText.replaceAll("\n", replaceSpacing.toString());
-            if (text.length() > 100)
-                Log.d("TextSet", text.substring(0, 100).replace("\n", "\\n"));
-            else if (text.length() > 0)
-                Log.d("TextSet", text.substring(0, text.length() - 1).replace("\n", "\\n"));
-            textView.setText(text);
-            // viewPager2.post(() -> currentReader.setText(text));
-        }
-    }
-
-
-    /**
-     * What to do when scroll hits bottom
-     */
-    private void bottom() {
-        int total = scrollView.getChildAt(0).getHeight() - scrollView.getHeight();
-        if (ready)
-            if ((scrollView.getScrollY() / (float) total) < .99) {
-                int y = scrollView.getScrollY();
-                if (y % 5 == 0) {
-                    // Log.d("YMAX", String.valueOf(total));
-                    // Log.d("YC", String.valueOf(y));
-                    // Log.d("YD", String.valueOf((scrollView.getScrollY() / (float) total)));
-
-                    //   Log.d("TY", String.valueOf(textView.getScrollY()));
-
-                    if (Database.DatabaseChapter.getStatus(CHAPTER_ID) != Status.READ)
-                        Database.DatabaseChapter.updateY(CHAPTER_ID, y);
-                }
-            } else {
-                Log.i("Scroll", "Marking chapter as READ");
-                Database.DatabaseChapter.setChapterStatus(CHAPTER_ID, Status.READ);
-                Database.DatabaseChapter.updateY(CHAPTER_ID, 0);
-                nextChapter.setVisibility(View.VISIBLE);
-                //TODO Get total word count of passage, then add to a storage counter that memorizes the total (Chapters read, Chapters Unread, Chapters reading, Word count)
-            }
-    }
-
-
-    /**
-     * Sets up the hitting bottom listener
-     */
-    private void addBottomListener() {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            scrollView.setOnScrollChangeListener((v, scrollX, scrollY, oldScrollX, oldScrollY) -> bottom());
-        } else {
-            scrollView.getViewTreeObserver().addOnScrollChangedListener(this::bottom);
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.kt
new file mode 100644
index 000000000..1e1b2b828
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/reader/viewHolders/NewChapterView.kt
@@ -0,0 +1,203 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.reader.viewHolders
+
+import android.annotation.SuppressLint
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ScrollView
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.NewChapterReader
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.async.NewChapterReaderViewLoader
+import com.github.doomsdayrs.apps.shosetsu.ui.reader.listeners.NovelFragmentChapterViewHideBar
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings
+import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status
+import kotlinx.android.synthetic.main.new_chapter_view.*
+import java.util.*
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 13 / 12 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class NewChapterView @SuppressLint("ClickableViewAccessibility") constructor() : Fragment() {
+    @JvmField
+    var newChapterReader: NewChapterReader? = null
+    @JvmField
+    var url: String? = null
+    @JvmField
+    var chapterID: Int = 0
+    @JvmField
+    var bookmarked = false
+    //public View coverView;
+// public ViewPager2 viewPager2;
+//public NewReader currentReader;
+    @JvmField
+    var ready = false
+    @JvmField
+    var unformattedText: String? = null
+    var text: String? = null
+
+    fun setNewChapterReader(newChapterReader: NewChapterReader?) {
+        this.newChapterReader = newChapterReader
+    }
+
+    fun setChapterID(CHAPTER_ID: Int) {
+        this.chapterID = CHAPTER_ID
+        url = DatabaseIdentification.getChapterURLFromChapterID(CHAPTER_ID)
+    }
+
+    private fun updateParent() {
+        newChapterReader!!.currentView = this
+        newChapterReader!!.updateBookmark()
+    }
+
+    override fun onResume() {
+        super.onResume()
+        updateParent()
+        val title = Database.DatabaseChapter.getTitle(chapterID)
+        Log.i("Setting TITLE", title)
+        newChapterReader!!.toolbar!!.title = title
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        super.onSaveInstanceState(outState)
+        outState.putInt("id", chapterID)
+        outState.putString("url", url)
+        outState.putString("text", text)
+        outState.putString("unform", unformattedText)
+        outState.putBoolean("book", bookmarked)
+        outState.putBoolean("ready", ready)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        val view = inflater.inflate(R.layout.new_chapter_view, container, false)
+        if (savedInstanceState != null) {
+            chapterID = savedInstanceState.getInt("id")
+            url = savedInstanceState.getString("url")
+            newChapterReader = activity as NewChapterReader?
+            unformattedText = savedInstanceState.getString("unfom")
+            text = savedInstanceState.getString("text")
+            bookmarked = savedInstanceState.getBoolean("book")
+            ready = savedInstanceState.getBoolean("ready")
+        }
+        return view
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        addBottomListener()
+        textView.setOnClickListener(NovelFragmentChapterViewHideBar(newChapterReader!!.toolbar))
+        textView.setBackgroundColor(Settings.ReaderTextBackgroundColor)
+        textView.setTextColor(Settings.ReaderTextColor)
+        textView.textSize = Settings.ReaderTextSize
+        next_chapter.setOnClickListener {
+            val position = newChapterReader!!.findCurrentPosition(chapterID)
+            if (newChapterReader!!.chapterIDs != null && newChapterReader!!.getViewPager() != null) {
+                if (position + 1 < newChapterReader!!.chapterIDs!!.size) {
+                    next_chapter.visibility = View.GONE
+                    Objects.requireNonNull(newChapterReader!!.getViewPager()).currentItem = position + 1
+                } else Toast.makeText(newChapterReader!!.applicationContext, "No more chapters!", Toast.LENGTH_SHORT).show()
+            }
+        }
+        updateParent()
+        //holder.viewPager2.setUserInputEnabled(false);
+//NewChapterReaderTypeAdapter newChapterReaderTypeAdapter = new NewChapterReaderTypeAdapter(newChapterReader);
+//holder.viewPager2.setAdapter(newChapterReaderTypeAdapter);
+//holder.viewPager2.setCurrentItem(getReaderType(newChapterReader.novelID));
+        Log.i("Loading chapter", url)
+        ready = false
+        if (savedInstanceState == null) {
+            if (Database.DatabaseChapter.isSaved(chapterID)) {
+                unformattedText = Objects.requireNonNull(Database.DatabaseChapter.getSavedNovelPassage(chapterID))
+                setUpReader()
+                scrollView.post { scrollView.scrollTo(0, Database.DatabaseChapter.getY(chapterID)) }
+                ready = true
+            } else {
+                unformattedText = ""
+                setUpReader()
+                NewChapterReaderViewLoader(this).execute()
+            }
+        } else {
+            setUpReader()
+        }
+        Database.DatabaseChapter.setChapterStatus(chapterID, Status.READING)
+    }
+
+
+    fun getScrollView(): ScrollView? {
+        return scrollView
+    }
+
+    fun setUpReader() {
+        scrollView!!.setBackgroundColor(Settings.ReaderTextBackgroundColor)
+        textView!!.setBackgroundColor(Settings.ReaderTextBackgroundColor)
+        textView!!.setTextColor(Settings.ReaderTextColor)
+        textView!!.textSize = Settings.ReaderTextSize
+        if (unformattedText != null) {
+            val replaceSpacing = StringBuilder("\n")
+            for (x in 0 until Settings.paragraphSpacing) replaceSpacing.append("\n")
+            for (x in 0 until Settings.indentSize) replaceSpacing.append("\t")
+            text = unformattedText!!.replace("\n".toRegex(), replaceSpacing.toString())
+            if (text!!.length > 100) Log.d("TextSet", text!!.substring(0, 100).replace("\n", "\\n")) else if (text!!.isNotEmpty()) Log.d("TextSet", text!!.substring(0, text!!.length - 1).replace("\n", "\\n"))
+            textView!!.text = text
+            // viewPager2.post(() -> currentReader.setText(text));
+        }
+    }
+
+    /**
+     * What to do when scroll hits bottom
+     */
+    private fun bottom() {
+        val total = scrollView!!.getChildAt(0).height - scrollView!!.height
+        if (ready) if (scrollView!!.scrollY / total.toFloat() < .99) {
+            val y = scrollView!!.scrollY
+            if (y % 5 == 0) { // Log.d("YMAX", String.valueOf(total));
+// Log.d("YC", String.valueOf(y));
+// Log.d("YD", String.valueOf((scrollView.getScrollY() / (float) total)));
+//   Log.d("TY", String.valueOf(textView.getScrollY()));
+                if (Database.DatabaseChapter.getStatus(chapterID) != Status.READ) Database.DatabaseChapter.updateY(chapterID, y)
+            }
+        } else {
+            Log.i("Scroll", "Marking chapter as READ")
+            Database.DatabaseChapter.setChapterStatus(chapterID, Status.READ)
+            Database.DatabaseChapter.updateY(chapterID, 0)
+            next_chapter!!.visibility = View.VISIBLE
+            //TODO Get total word count of passage, then add to a storage counter that memorizes the total (Chapters read, Chapters Unread, Chapters reading, Word count)
+        }
+    }
+
+    /**
+     * Sets up the hitting bottom listener
+     */
+    private fun addBottomListener() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            scrollView!!.setOnScrollChangeListener { _: View?, _: Int, _: Int, _: Int, _: Int -> bottom() }
+        } else {
+            scrollView!!.viewTreeObserver.addOnScrollChangedListener { bottom() }
+        }
+    }
+}
\ No newline at end of file
