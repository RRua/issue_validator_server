diff --git a/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java b/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
index a2cccbd3c..b8dc78493 100644
--- a/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
+++ b/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
@@ -88,6 +88,7 @@ import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.PasteHelper;
 import com.amaze.filemanager.filesystem.RootHelper;
+import com.amaze.filemanager.filesystem.SingletonUsbOtg;
 import com.amaze.filemanager.filesystem.ssh.CustomSshJConfig;
 import com.amaze.filemanager.filesystem.ssh.SshConnectionPool;
 import com.amaze.filemanager.fragments.AppsListFragment;
@@ -185,8 +186,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
      */
     public MainFragment mainFragment;
 
-    public static final String KEY_PREF_OTG = "uri_usb_otg";
-
     public static final String PASTEHELPER_BUNDLE = "pasteHelper";
 
     private static final String KEY_DRAWER_SELECTED = "selectitem";
@@ -219,7 +218,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     private CloudHandler cloudHandler;
 
     public static final int REQUEST_CODE_SAF = 223;
-    public static final String VALUE_PREF_OTG_NULL = "n/a";
 
     public static final String KEY_INTENT_PROCESS_VIEWER = "openprocesses";
     public static final String TAG_INTENT_FILTER_FAILED_OPS = "failedOps";
@@ -637,17 +635,18 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
      * @return true if device is connected
      */
     private boolean isUsbDeviceConnected() {
-        UsbManager usbManager = (UsbManager) getSystemService(USB_SERVICE);
-        if (usbManager.getDeviceList().size()!=0) {
-            // we need to set this every time as there is no way to know that whether USB device was
-            // disconnected after closing the app and another one was connected
-            // in that case the URI will obviously change
-            // other wise we could persist the URI even after reopening the app by not writing
-            // this preference when it's not null
-            getPrefs().edit().putString(KEY_PREF_OTG, VALUE_PREF_OTG_NULL).apply();
+        if (OTGUtil.isMassStorageDeviceConnected(this)) {
+            if(!SingletonUsbOtg.getInstance().hasRootBeenRequested()) {
+                SingletonUsbOtg.getInstance().setHasRootBeenRequested(false);
+                // we need to set this every time as there is no way to know that whether USB device was
+                // disconnected after closing the app and another one was connected in that case
+                // the URI will obviously change otherwise we could persist the URI even after
+                // reopening the app by not writing this preference when it's not null
+                SingletonUsbOtg.getInstance().setUsbOtgRoot(null);
+            }
             return true;
         } else {
-            getPrefs().edit().putString(KEY_PREF_OTG, null).apply();
+            SingletonUsbOtg.getInstance().setUsbOtgRoot(null);
             return false;
         }
     }
@@ -1103,10 +1102,10 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         @Override
         public void onReceive(Context context, Intent intent) {
             if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
-                getPrefs().edit().putString(KEY_PREF_OTG, VALUE_PREF_OTG_NULL).apply();
+                SingletonUsbOtg.getInstance().setUsbOtgRoot(null);
                 drawer.refreshDrawer();
             } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
-                getPrefs().edit().putString(KEY_PREF_OTG, null).apply();
+                SingletonUsbOtg.getInstance().setUsbOtgRoot(null);
                 drawer.refreshDrawer();
                 goToMain(null);
             }
@@ -1322,15 +1321,19 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                     mainActivityHelper.compressFiles(new File(oppathe), oparrayList);
             }
             operation = -1;
-        } else if (requestCode == REQUEST_CODE_SAF && responseCode == Activity.RESULT_OK) {
-            // otg access
-            getPrefs().edit().putString(KEY_PREF_OTG, intent.getData().toString()).apply();
-
-            drawer.closeIfNotLocked();
-            if(drawer.isLocked()) drawer.onDrawerClosed();
-        } else if (requestCode == REQUEST_CODE_SAF && responseCode != Activity.RESULT_OK) {
-            // otg access not provided
-            drawer.resetPendingPath();
+        } else if (requestCode == REQUEST_CODE_SAF) {
+            if (responseCode == Activity.RESULT_OK && intent.getData() != null) {
+                // otg access
+                Uri usbOtgRoot = Uri.parse(intent.getData().toString());
+                SingletonUsbOtg.getInstance().setUsbOtgRoot(usbOtgRoot);
+
+                drawer.closeIfNotLocked();
+                if (drawer.isLocked()) drawer.onDrawerClosed();
+            } else {
+                Toast.makeText(this, R.string.error, Toast.LENGTH_SHORT).show();
+                // otg access not provided
+                drawer.resetPendingPath();
+            }
         }
     }
 
@@ -1540,13 +1543,8 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             checkForExternalIntent(intent);
 
             if (SDK_INT >= Build.VERSION_CODES.KITKAT) {
-                if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
-                    if (getPrefs().getString(KEY_PREF_OTG, null) == null) {
-                        getPrefs().edit().putString(KEY_PREF_OTG, VALUE_PREF_OTG_NULL).apply();
-                        drawer.refreshDrawer();
-                    }
-                } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
-                    getPrefs().edit().putString(KEY_PREF_OTG, null).apply();
+                if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
+                    SingletonUsbOtg.getInstance().setUsbOtgRoot(null);
                     drawer.refreshDrawer();
                 }
             }
@@ -1577,7 +1575,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                 if (b) {
                     tabHandler.clear();
 
-                    if (drawer.getStorageCount() > 1) {
+                    if (drawer.getPhoneStorageCount() > 1) {
                         tabHandler.addTab(new Tab(1, drawer.getSecondPath(), "/"));
                     } else {
                         tabHandler.addTab(new Tab(1, "/", "/"));
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/HybridFile.java b/app/src/main/java/com/amaze/filemanager/filesystem/HybridFile.java
index bcb9ffd18..5987c0e19 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/HybridFile.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/HybridFile.java
@@ -2,6 +2,7 @@ package com.amaze.filemanager.filesystem;
 
 import android.content.ContentResolver;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.Build;
 import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/SingletonUsbOtg.java b/app/src/main/java/com/amaze/filemanager/filesystem/SingletonUsbOtg.java
new file mode 100644
index 000000000..e90d708e0
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/SingletonUsbOtg.java
@@ -0,0 +1,38 @@
+package com.amaze.filemanager.filesystem;
+
+import android.net.Uri;
+import android.support.annotation.Nullable;
+
+public class SingletonUsbOtg {
+    private static SingletonUsbOtg instance = null;
+
+    public static SingletonUsbOtg getInstance() {
+        if(instance == null) instance = new SingletonUsbOtg();
+        return instance;
+    }
+
+    private Uri usbOtgRoot = null;
+    /**
+     * Indicates whether last app exit was for setting {@link #usbOtgRoot} or not
+     */
+    private boolean hasRootBeenRequested = false;
+
+    private SingletonUsbOtg() { }
+
+    public void setUsbOtgRoot(@Nullable Uri root) {
+        usbOtgRoot = root;
+    }
+
+    public @Nullable Uri getUsbOtgRoot() {
+        return usbOtgRoot;
+    }
+
+    public void setHasRootBeenRequested(boolean hasRootBeenRequested) {
+        this.hasRootBeenRequested = hasRootBeenRequested;
+    }
+
+    public boolean hasRootBeenRequested() {
+        return hasRootBeenRequested;
+    }
+
+}
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
index d8cf9f30e..1f834bb02 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
@@ -31,6 +31,7 @@ import com.amaze.filemanager.activities.PreferencesActivity;
 import com.amaze.filemanager.database.CloudHandler;
 import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.RootHelper;
+import com.amaze.filemanager.filesystem.SingletonUsbOtg;
 import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.fragments.CloudSheetFragment;
 import com.amaze.filemanager.fragments.FTPServerFragment;
@@ -86,7 +87,7 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
 
     private ActionViewStateManager actionViewStateManager;
     private boolean isSomethingSelected;
-    private volatile int storage_count = 0; // number of storage available (internal/external/otg etc)
+    private volatile int phoneStorageCount = 0; // number of storage available (internal/external/otg etc)
     private boolean isDrawerLocked = false;
     private FragmentTransaction pending_fragmentTransaction;
     private String pendingPath;
@@ -223,8 +224,14 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
 
         int order = 0;
         ArrayList<String> storageDirectories = mainActivity.getStorageDirectories();
-        storage_count = 0;
+        phoneStorageCount = 0;
         for (String file : storageDirectories) {
+            if (file.contains(OTGUtil.PREFIX_OTG)) {
+                addNewItem(menu, STORAGES_GROUP, order++, "OTG", new MenuMetadata(file),
+                        R.drawable.ic_usb_white_24dp, R.drawable.ic_show_chart_black_24dp);
+                continue;
+            }
+
             File f = new File(file);
             String name;
             @DrawableRes int icon1 = R.drawable.ic_sd_storage_white_24dp;
@@ -235,17 +242,15 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
             } else if ("/".equals(file)) {
                 name = resources.getString(R.string.rootdirectory);
                 icon1 = R.drawable.ic_drawer_root_white;
-            } else if (file.contains(OTGUtil.PREFIX_OTG)) {
-                name = "OTG";
-                icon1 = R.drawable.ic_usb_white_24dp;
             } else name = f.getName();
+
             if (f.isDirectory() || f.canExecute()) {
                 addNewItem(menu, STORAGES_GROUP, order++, name, new MenuMetadata(file), icon1,
                         R.drawable.ic_show_chart_black_24dp);
-                if(storage_count == 0) firstPath = file;
-                else if(storage_count == 1) secondPath = file;
+                if(phoneStorageCount == 0) firstPath = file;
+                else if(phoneStorageCount == 1) secondPath = file;
 
-                storage_count++;
+                phoneStorageCount++;
             }
         }
         dataUtils.setStorages(storageDirectories);
@@ -533,18 +538,18 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
                     CloudUtil.checkToken(meta.path, mainActivity);
                 }
 
-                pendingPath = meta.path;
-
-                if (meta.path.contains(OTGUtil.PREFIX_OTG) &&
-                        mainActivity.getPrefs()
-                                .getString(MainActivity.KEY_PREF_OTG, null)
-                                .equals(MainActivity.VALUE_PREF_OTG_NULL)) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP
+                        && meta.path.contains(OTGUtil.PREFIX_OTG)
+                        && SingletonUsbOtg.getInstance().getUsbOtgRoot() == null) {
                     // we've not gotten otg path yet
                     // start system request for storage access framework
                     Toast.makeText(mainActivity, mainActivity.getString(R.string.otg_access), Toast.LENGTH_LONG).show();
+
+                    SingletonUsbOtg.getInstance().setHasRootBeenRequested(true);
                     Intent safIntent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
                     mainActivity.startActivityForResult(safIntent, MainActivity.REQUEST_CODE_SAF);
                 } else {
+                    pendingPath = meta.path;
                     closeIfNotLocked();
                     if (isLocked()) { onDrawerClosed(); }
                 }
@@ -601,8 +606,8 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
         isSomethingSelected = isSelected;
     }
 
-    public int getStorageCount() {
-        return storage_count;
+    public int getPhoneStorageCount() {
+        return phoneStorageCount;
     }
 
     public void setDrawerHeaderBackground() {
diff --git a/app/src/main/java/com/amaze/filemanager/utils/OTGUtil.java b/app/src/main/java/com/amaze/filemanager/utils/OTGUtil.java
index ad6d02729..2fd73fae2 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/OTGUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/OTGUtil.java
@@ -1,17 +1,22 @@
 package com.amaze.filemanager.utils;
 
 import android.content.Context;
-import android.content.SharedPreferences;
+import android.hardware.usb.UsbConstants;
+import android.hardware.usb.UsbDevice;
+import android.hardware.usb.UsbManager;
 import android.net.Uri;
-import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
 import android.support.v4.provider.DocumentFile;
 import android.util.Log;
 
-import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.RootHelper;
+import com.amaze.filemanager.filesystem.SingletonUsbOtg;
 
 import java.util.ArrayList;
+import java.util.HashMap;
+
+import static android.content.Context.USB_SERVICE;
 
 /**
  * Created by Vishal on 27-04-2017.
@@ -44,9 +49,10 @@ public class OTGUtil {
      * @param context context for loading
      */
     public static void getDocumentFiles(String path, Context context, OnFileFound fileFound) {
-        SharedPreferences manager = PreferenceManager.getDefaultSharedPreferences(context);
-        String rootUriString = manager.getString(MainActivity.KEY_PREF_OTG, null);
-        DocumentFile rootUri = DocumentFile.fromTreeUri(context, Uri.parse(rootUriString));
+        Uri rootUriString = SingletonUsbOtg.getInstance().getUsbOtgRoot();
+        if(rootUriString == null) throw new NullPointerException("USB OTG root not set!");
+
+        DocumentFile rootUri = DocumentFile.fromTreeUri(context, rootUriString);
 
         String[] parts = path.split("/");
         for (String part : parts) {
@@ -80,11 +86,11 @@ public class OTGUtil {
      *                        in case path is not present. Notably useful in opening an output stream.
      */
     public static DocumentFile getDocumentFile(String path, Context context, boolean createRecursive) {
-        SharedPreferences manager = PreferenceManager.getDefaultSharedPreferences(context);
-        String rootUriString = manager.getString(MainActivity.KEY_PREF_OTG, null);
+        Uri rootUriString = SingletonUsbOtg.getInstance().getUsbOtgRoot();
+        if(rootUriString == null) throw new NullPointerException("USB OTG root not set!");
 
         // start with root of SD card and then parse through document tree.
-        DocumentFile rootUri = DocumentFile.fromTreeUri(context, Uri.parse(rootUriString));
+        DocumentFile rootUri = DocumentFile.fromTreeUri(context, rootUriString);
 
         String[] parts = path.split("/");
         for (String part : parts) {
@@ -101,4 +107,27 @@ public class OTGUtil {
 
         return rootUri;
     }
+
+    /**
+     * Checks if there is at least one USB device connected with class MASS STORAGE.
+     */
+    public static boolean isMassStorageDeviceConnected(@NonNull final Context context) {
+        UsbManager usbManager = (UsbManager) context.getSystemService(USB_SERVICE);
+        if(usbManager == null) return false;
+
+        HashMap<String, UsbDevice> devices = usbManager.getDeviceList();
+
+        for (String deviceName : devices.keySet()) {
+            UsbDevice device = devices.get(deviceName);
+
+            for (int i = 0; i < device.getInterfaceCount(); i++){
+                if (device.getInterface(i).getInterfaceClass() == UsbConstants.USB_CLASS_MASS_STORAGE){
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
 }
