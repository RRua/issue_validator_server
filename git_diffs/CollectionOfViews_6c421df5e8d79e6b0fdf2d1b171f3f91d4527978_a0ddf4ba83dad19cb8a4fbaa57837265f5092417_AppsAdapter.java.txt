diff --git a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
deleted file mode 100644
index 8c676eb08..000000000
--- a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
+++ /dev/null
@@ -1,361 +0,0 @@
-/*
- * Copyright (C) 2014-2020 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>,
- * Emmanuel Messulam<emmanuelbendavid@gmail.com>, Raymond Lai <airwave209gt at gmail.com> and Contributors.
- *
- * This file is part of Amaze File Manager.
- *
- * Amaze File Manager is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.amaze.filemanager.adapters;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
-import com.afollestad.materialdialogs.MaterialDialog;
-import com.amaze.filemanager.R;
-import com.amaze.filemanager.adapters.data.AppDataParcelable;
-import com.amaze.filemanager.adapters.data.OpenFileParcelable;
-import com.amaze.filemanager.adapters.glide.AppsAdapterPreloadModel;
-import com.amaze.filemanager.adapters.holders.AppHolder;
-import com.amaze.filemanager.asynchronous.asynctasks.DeleteTask;
-import com.amaze.filemanager.asynchronous.management.ServiceWatcherUtil;
-import com.amaze.filemanager.asynchronous.services.CopyService;
-import com.amaze.filemanager.file_operations.filesystem.OpenMode;
-import com.amaze.filemanager.filesystem.HybridFileParcelable;
-import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.filesystem.files.FileUtils;
-import com.amaze.filemanager.ui.ExtensionsKt;
-import com.amaze.filemanager.ui.activities.MainActivity;
-import com.amaze.filemanager.ui.dialogs.OpenFileDialogFragment;
-import com.amaze.filemanager.ui.fragments.AdjustListViewForTv;
-import com.amaze.filemanager.ui.fragments.preference_fragments.PreferencesConstants;
-import com.amaze.filemanager.ui.provider.UtilitiesProvider;
-import com.amaze.filemanager.ui.theme.AppTheme;
-import com.amaze.filemanager.utils.AnimUtils;
-import com.amaze.filemanager.utils.Utils;
-import com.bumptech.glide.util.ViewPreloadSizeProvider;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.ApplicationInfo;
-import android.graphics.Color;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Environment;
-import android.text.TextUtils;
-import android.util.SparseBooleanArray;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.PopupMenu;
-import android.widget.Toast;
-
-import androidx.fragment.app.Fragment;
-
-public class AppsAdapter extends ArrayAdapter<AppDataParcelable> {
-
-  private static final String COM_ANDROID_VENDING = "com.android.vending";
-
-  private UtilitiesProvider utilsProvider;
-  private Fragment fragment;
-  private AppsAdapterPreloadModel modelProvider;
-  private ViewPreloadSizeProvider<String> sizeProvider;
-  private SparseBooleanArray myChecked = new SparseBooleanArray();
-  private SharedPreferences sharedPrefs;
-  private boolean isBottomSheet;
-  private MainActivity themedActivity;
-  private AdjustListViewForTv<AppHolder> adjustListViewCallback;
-
-  public AppsAdapter(
-      Fragment fragment,
-      MainActivity mainActivity,
-      UtilitiesProvider utilsProvider,
-      AppsAdapterPreloadModel modelProvider,
-      ViewPreloadSizeProvider<String> sizeProvider,
-      int resourceId,
-      SharedPreferences sharedPrefs,
-      boolean isBottomSheet,
-      AdjustListViewForTv<AppHolder> adjustListViewCallback) {
-    super(fragment.getContext(), resourceId);
-    themedActivity = mainActivity;
-    this.utilsProvider = utilsProvider;
-    this.modelProvider = modelProvider;
-    this.sizeProvider = sizeProvider;
-    this.fragment = fragment;
-    this.sharedPrefs = sharedPrefs;
-    this.isBottomSheet = isBottomSheet;
-    this.adjustListViewCallback = adjustListViewCallback;
-
-    /*for (int i = 0; i < items.size(); i++) {
-        myChecked.put(i, false);
-    }*/
-  }
-
-  public void setData(List<AppDataParcelable> data) {
-    clear();
-
-    if (data != null) {
-      addAll(data);
-    }
-  }
-
-  @Override
-  public View getView(final int position, View convertView, ViewGroup parent) {
-    final AppDataParcelable rowItem = getItem(position);
-
-    View view;
-    if (convertView == null) {
-      LayoutInflater mInflater =
-          (LayoutInflater) fragment.getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
-      view = mInflater.inflate(R.layout.rowlayout, null);
-      final AppHolder vholder = new AppHolder(view);
-      view.findViewById(R.id.generic_icon).setVisibility(View.GONE);
-      view.findViewById(R.id.picture_icon).setVisibility(View.GONE);
-      view.setTag(vholder);
-      if (sizeProvider != null) {
-        sizeProvider.setView(view.findViewById(R.id.apk_icon));
-      }
-    } else {
-      view = convertView;
-    }
-
-    final AppHolder holder = (AppHolder) view.getTag();
-    adjustListViewCallback.adjustListViewForTv(holder, themedActivity);
-
-    if (isBottomSheet) {
-      holder.about.setVisibility(View.GONE);
-      holder.txtDesc.setText(rowItem.getOpenFileParcelable().getClassName());
-      holder.txtDesc.setSingleLine(true);
-      holder.txtDesc.setEllipsize(TextUtils.TruncateAt.MIDDLE);
-      modelProvider.loadApkImage(rowItem.getPackageName(), holder.apkIcon);
-    } else {
-      modelProvider.loadApkImage(rowItem.getPath(), holder.apkIcon);
-    }
-
-    if (holder.about != null && !isBottomSheet) {
-      if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT))
-        holder.about.setColorFilter(Color.parseColor("#ff666666"));
-      showPopup(holder.about, rowItem);
-    }
-    holder.txtTitle.setText(rowItem.getLabel());
-    boolean enableMarqueeFilename =
-        sharedPrefs.getBoolean(PreferencesConstants.PREFERENCE_ENABLE_MARQUEE_FILENAME, true);
-    if (enableMarqueeFilename) {
-      holder.txtTitle.setEllipsize(
-          enableMarqueeFilename ? TextUtils.TruncateAt.MARQUEE : TextUtils.TruncateAt.MIDDLE);
-      AnimUtils.marqueeAfterDelay(2000, holder.txtTitle);
-    }
-
-    //	File f = new File(rowItem.getDesc());
-    if (!isBottomSheet) {
-      holder.txtDesc.setText(rowItem.getFileSize());
-    }
-    holder.rl.setClickable(true);
-    holder.rl.setNextFocusRightId(holder.about.getId());
-    holder.rl.setOnClickListener(p1 -> startActivityForRowItem(rowItem));
-
-    if (myChecked.get(position)) {
-      holder.rl.setBackgroundColor(
-          Utils.getColor(fragment.getContext(), R.color.appsadapter_background));
-    } else {
-      if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT)) {
-        holder.rl.setBackgroundResource(R.drawable.safr_ripple_white);
-      } else {
-        holder.rl.setBackgroundResource(R.drawable.safr_ripple_black);
-      }
-    }
-    return view;
-  }
-
-  private void startActivityForRowItem(AppDataParcelable rowItem) {
-    if (isBottomSheet) {
-      OpenFileParcelable openFileParcelable = rowItem.getOpenFileParcelable();
-      Intent intent =
-          OpenFileDialogFragment.Companion.buildIntent(
-              Objects.requireNonNull(openFileParcelable.getUri()),
-              Objects.requireNonNull(openFileParcelable.getMimeType()),
-              Objects.requireNonNull(openFileParcelable.getUseNewStack()),
-              openFileParcelable.getClassName(),
-              openFileParcelable.getPackageName());
-      OpenFileDialogFragment.Companion.setLastOpenedApp(rowItem, themedActivity);
-      ExtensionsKt.startActivityCatchingSecurityException(fragment.requireContext(), intent);
-    } else {
-      Intent i1 =
-          fragment
-              .getContext()
-              .getPackageManager()
-              .getLaunchIntentForPackage(rowItem.getPackageName());
-      if (i1 != null) {
-        fragment.startActivity(i1);
-      } else {
-        Toast.makeText(
-                fragment.getContext(), fragment.getString(R.string.not_allowed), Toast.LENGTH_LONG)
-            .show();
-        // TODO: Implement this method
-      }
-    }
-  }
-
-  private void showPopup(View v, final AppDataParcelable rowItem) {
-    v.setOnClickListener(
-        view -> {
-          PopupMenu popupMenu = new PopupMenu(fragment.getContext(), view);
-          popupMenu.setOnMenuItemClickListener(
-              item -> {
-                int colorAccent = themedActivity.getAccent();
-
-                switch (item.getItemId()) {
-                  case R.id.open:
-                    Intent i1 =
-                        fragment
-                            .getContext()
-                            .getPackageManager()
-                            .getLaunchIntentForPackage(rowItem.getPackageName());
-                    if (i1 != null) fragment.startActivity(i1);
-                    else
-                      Toast.makeText(
-                              fragment.getContext(),
-                              fragment.getString(R.string.not_allowed),
-                              Toast.LENGTH_LONG)
-                          .show();
-                    return true;
-                  case R.id.share:
-                    ArrayList<File> arrayList2 = new ArrayList<File>();
-                    arrayList2.add(new File(rowItem.getPath()));
-                    themedActivity.getColorPreference();
-                    FileUtils.shareFiles(
-                        arrayList2,
-                        fragment.getActivity(),
-                        utilsProvider.getAppTheme(),
-                        colorAccent);
-                    return true;
-                  case R.id.unins:
-                    final HybridFileParcelable f1 = new HybridFileParcelable(rowItem.getPath());
-                    f1.setMode(OpenMode.ROOT);
-
-                    if ((Integer.valueOf(
-                                rowItem.getData().substring(0, rowItem.getData().indexOf("_")))
-                            & ApplicationInfo.FLAG_SYSTEM)
-                        != 0) {
-                      // system package
-                      if (sharedPrefs.getBoolean(PreferencesConstants.PREFERENCE_ROOTMODE, false)) {
-                        MaterialDialog.Builder builder1 =
-                            new MaterialDialog.Builder(fragment.requireContext());
-                        builder1
-                            .theme(utilsProvider.getAppTheme().getMaterialDialogTheme())
-                            .content(fragment.getString(R.string.unin_system_apk))
-                            .title(fragment.getString(R.string.warning))
-                            .negativeColor(colorAccent)
-                            .positiveColor(colorAccent)
-                            .negativeText(fragment.getString(R.string.no))
-                            .positiveText(fragment.getString(R.string.yes))
-                            .onNegative(((dialog, which) -> dialog.cancel()))
-                            .onPositive(
-                                ((dialog, which) -> {
-                                  ArrayList<HybridFileParcelable> files = new ArrayList<>();
-                                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                                    String parent = f1.getParent(fragment.getContext());
-                                    if (!parent.equals("app") && !parent.equals("priv-app")) {
-                                      HybridFileParcelable baseFile =
-                                          new HybridFileParcelable(
-                                              f1.getParent(fragment.getContext()));
-                                      baseFile.setMode(OpenMode.ROOT);
-                                      files.add(baseFile);
-                                    } else files.add(f1);
-                                  } else {
-                                    files.add(f1);
-                                  }
-                                  new DeleteTask(fragment.requireContext()).execute((files));
-                                }))
-                            .build()
-                            .show();
-                      } else {
-                        Toast.makeText(
-                                fragment.getContext(),
-                                fragment.getString(R.string.enablerootmde),
-                                Toast.LENGTH_SHORT)
-                            .show();
-                      }
-                    } else {
-                      FileUtils.uninstallPackage(rowItem.getPackageName(), fragment.getContext());
-                    }
-                    return true;
-                  case R.id.play:
-                    Intent intent1 = new Intent(Intent.ACTION_VIEW);
-                    try {
-                      intent1.setData(
-                          Uri.parse(
-                              String.format("market://details?id=%s", rowItem.getPackageName())));
-                      fragment.startActivity(intent1);
-                    } catch (ActivityNotFoundException ifPlayStoreNotInstalled) {
-                      intent1.setData(
-                          Uri.parse(
-                              String.format(
-                                  "https://play.google.com/store/apps/details?id=%s",
-                                  rowItem.getPackageName())));
-                      fragment.startActivity(intent1);
-                    }
-                    return true;
-                  case R.id.properties:
-                    fragment.startActivity(
-                        new Intent(
-                            android.provider.Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
-                            Uri.parse(String.format("package:%s", rowItem.getPackageName()))));
-                    return true;
-                  case R.id.backup:
-                    Toast.makeText(
-                            fragment.getContext(),
-                            fragment.getString(R.string.copyingapk)
-                                + Environment.getExternalStorageDirectory().getPath()
-                                + "/app_backup",
-                            Toast.LENGTH_LONG)
-                        .show();
-                    File f = new File(rowItem.getPath());
-                    ArrayList<HybridFileParcelable> ab = new ArrayList<>();
-                    File dst =
-                        new File(
-                            Environment.getExternalStorageDirectory().getPath() + "/app_backup");
-                    if (!dst.exists() || !dst.isDirectory()) dst.mkdirs();
-                    Intent intent = new Intent(fragment.getContext(), CopyService.class);
-                    HybridFileParcelable baseFile = RootHelper.generateBaseFile(f, true);
-                    baseFile.setName(
-                        rowItem.getLabel()
-                            + "_"
-                            + rowItem
-                                .getPackageName()
-                                .substring(rowItem.getPackageName().indexOf("_") + 1)
-                            + ".apk");
-                    ab.add(baseFile);
-
-                    intent.putParcelableArrayListExtra(CopyService.TAG_COPY_SOURCES, ab);
-                    intent.putExtra(CopyService.TAG_COPY_TARGET, dst.getPath());
-                    intent.putExtra(CopyService.TAG_COPY_OPEN_MODE, 0);
-
-                    ServiceWatcherUtil.runService(fragment.getContext(), intent);
-                    return true;
-                }
-                return false;
-              });
-
-          popupMenu.inflate(R.menu.app_options);
-          popupMenu.show();
-        });
-  }
-}
