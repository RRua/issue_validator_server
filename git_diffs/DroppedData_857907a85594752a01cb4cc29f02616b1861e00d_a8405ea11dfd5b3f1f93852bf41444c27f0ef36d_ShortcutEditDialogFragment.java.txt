diff --git a/app/src/main/java/com/sdex/activityrunner/AddShortcutDialogFragment.java b/app/src/main/java/com/sdex/activityrunner/AddShortcutDialogFragment.java
new file mode 100644
index 0000000..6787e99
--- /dev/null
+++ b/app/src/main/java/com/sdex/activityrunner/AddShortcutDialogFragment.java
@@ -0,0 +1,56 @@
+package com.sdex.activityrunner;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.DialogFragment;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.ImageView;
+import com.bumptech.glide.request.RequestOptions;
+import com.sdex.activityrunner.db.ActivityModel;
+import com.sdex.activityrunner.util.GlideApp;
+import com.sdex.activityrunner.util.IntentUtils;
+
+public class AddShortcutDialogFragment extends DialogFragment {
+
+  public static final String TAG = "AddShortcutDialogFragment";
+
+  public static final String ARG_ACTIVITY_MODEL = "arg_activity_model";
+
+  @NonNull
+  @Override
+  public Dialog onCreateDialog(Bundle savedInstanceState) {
+    final ActivityModel activityModel;
+    if (getArguments() != null) {
+      activityModel = (ActivityModel) getArguments().getSerializable(ARG_ACTIVITY_MODEL);
+    } else {
+      activityModel = null;
+    }
+
+    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+    View view = View.inflate(getActivity(), R.layout.dialog_add_shortcut, null);
+
+    final EditText textName = view.findViewById(R.id.editText_name);
+    if (activityModel != null) {
+      textName.setText(activityModel.getName());
+      final ImageView imageIcon = view.findViewById(R.id.iconButton);
+      GlideApp.with(this)
+        .load(activityModel.getIconPath())
+        .apply(new RequestOptions()
+          .fitCenter())
+        .into(imageIcon);
+      builder.setTitle(R.string.context_action_edit)
+        .setView(view)
+        .setPositiveButton(R.string.context_action_shortcut,
+          (dialog, which) -> {
+            activityModel.setName(textName.getText().toString());
+            IntentUtils.createLauncherIcon(getActivity(), activityModel);
+          })
+        .setNegativeButton(android.R.string.cancel, (dialog, which) -> getDialog().cancel());
+    }
+
+    return builder.create();
+  }
+}
diff --git a/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java b/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
index 721be05..f0daa78 100644
--- a/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
+++ b/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
@@ -27,6 +27,9 @@ public class AppsListFragment extends Fragment {
 
   public static final String TAG = "AppsListFragment";
 
+  private static final int ACTION_CREATE_SHORTCUT = 0;
+  private static final int ACTION_LAUNCH_ACTIVITY = 1;
+
   private ExpandableListView list;
   private ApplicationsListAdapter adapter;
   private SwipeRefreshLayout refreshLayout;
@@ -40,12 +43,13 @@ public class AppsListFragment extends Fragment {
     progressBar = view.findViewById(R.id.progress);
     progressBar.show();
     refreshLayout = view.findViewById(R.id.refresh);
-    list = view.findViewById(R.id.expandableListView1);
+    list = view.findViewById(R.id.list);
     list.setOnChildClickListener((parent, v, groupPosition, childPosition, id) -> {
       ExpandableListAdapter adapter = parent.getExpandableListAdapter();
       ActivityModel info = (ActivityModel) adapter.getChild(groupPosition, childPosition);
-      IntentUtils.launchActivity(getActivity(),
-        info.getComponentName(), info.getName());
+      if (getActivity() != null) {
+        IntentUtils.launchActivity(getActivity(), info.getComponentName(), info.getName());
+      }
       return false;
     });
     adapter = new ApplicationsListAdapter(getActivity());
@@ -82,45 +86,51 @@ public class AppsListFragment extends Fragment {
   @Override
   public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
     ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) menuInfo;
-    ExpandableListView list = getView().findViewById(R.id.expandableListView1);
-    switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
-      case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
-        ActivityModel activity = (ActivityModel) list.getExpandableListAdapter()
-          .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
-            ExpandableListView.getPackedPositionChild(info.packedPosition));
-        menu.setHeaderTitle(activity.getName());
-        menu.add(Menu.NONE, 0, Menu.NONE, R.string.context_action_shortcut);
-        menu.add(Menu.NONE, 1, Menu.NONE, R.string.context_action_launch);
-        break;
+    if (getView() != null) {
+      ExpandableListView list = getView().findViewById(R.id.list);
+      switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
+        case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
+          ActivityModel activity = (ActivityModel) list.getExpandableListAdapter()
+            .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
+              ExpandableListView.getPackedPositionChild(info.packedPosition));
+          menu.setHeaderTitle(activity.getName());
+          menu.add(Menu.NONE, ACTION_CREATE_SHORTCUT, Menu.NONE, R.string.context_action_shortcut);
+          menu.add(Menu.NONE, ACTION_LAUNCH_ACTIVITY, Menu.NONE, R.string.context_action_launch);
+          break;
+      }
     }
-
     super.onCreateContextMenu(menu, v, menuInfo);
   }
 
   @Override
   public boolean onContextItemSelected(MenuItem item) {
     ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) item.getMenuInfo();
-    ExpandableListView list = getView().findViewById(R.id.expandableListView1);
-
-    switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
-      case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
-        ActivityModel activity = (ActivityModel) list.getExpandableListAdapter()
-          .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
-            ExpandableListView.getPackedPositionChild(info.packedPosition));
-        switch (item.getItemId()) {
-          case 0:
-            DialogFragment dialog = new ShortcutEditDialogFragment();
-            Bundle args = new Bundle();
-            args.putSerializable("activityInfo", activity);
-            dialog.setArguments(args);
-            dialog.show(getFragmentManager(), "ShortcutEditor");
-            break;
-          case 1:
-            IntentUtils.launchActivity(getActivity(),
-              activity.getComponentName(), activity.getName());
-            break;
-        }
-        break;
+    if (getView() != null) {
+      ExpandableListView list = getView().findViewById(R.id.list);
+      switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
+        case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
+          ActivityModel activityModel = (ActivityModel) list.getExpandableListAdapter()
+            .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
+              ExpandableListView.getPackedPositionChild(info.packedPosition));
+          switch (item.getItemId()) {
+            case ACTION_CREATE_SHORTCUT:
+              if (getFragmentManager() != null) {
+                DialogFragment dialog = new AddShortcutDialogFragment();
+                Bundle args = new Bundle();
+                args.putSerializable(AddShortcutDialogFragment.ARG_ACTIVITY_MODEL, activityModel);
+                dialog.setArguments(args);
+                dialog.show(getFragmentManager(), AddShortcutDialogFragment.TAG);
+              }
+              break;
+            case ACTION_LAUNCH_ACTIVITY:
+              if (getActivity() != null) {
+                IntentUtils.launchActivity(getActivity(),
+                  activityModel.getComponentName(), activityModel.getName());
+              }
+              break;
+          }
+          break;
+      }
     }
     return super.onContextItemSelected(item);
   }
diff --git a/app/src/main/java/com/sdex/activityrunner/ShortcutEditDialogFragment.java b/app/src/main/java/com/sdex/activityrunner/ShortcutEditDialogFragment.java
deleted file mode 100644
index 54246f7..0000000
--- a/app/src/main/java/com/sdex/activityrunner/ShortcutEditDialogFragment.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.sdex.activityrunner;
-
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.ImageView;
-import com.bumptech.glide.request.RequestOptions;
-import com.sdex.activityrunner.db.ActivityModel;
-import com.sdex.activityrunner.util.GlideApp;
-import com.sdex.activityrunner.util.IntentUtils;
-
-public class ShortcutEditDialogFragment extends DialogFragment {
-
-  @NonNull
-  @Override
-  public Dialog onCreateDialog(Bundle savedInstanceState) {
-    final ActivityModel activityModel = (ActivityModel)
-      getArguments().getSerializable("activityInfo");
-
-    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-    LayoutInflater inflater = LayoutInflater.from(getActivity());
-    View view = inflater.inflate(R.layout.dialog_add_shortcut, null);
-
-    final EditText textName = view.findViewById(R.id.editText_name);
-    textName.setText(activityModel.getName());
-
-    final ImageView imageIcon = view.findViewById(R.id.iconButton);
-    GlideApp.with(this)
-      .load(activityModel.getIconPath())
-      .apply(new RequestOptions()
-        .fitCenter())
-      .into(imageIcon);
-
-    builder.setTitle(R.string.context_action_edit)
-      .setView(view)
-      .setPositiveButton(R.string.context_action_shortcut,
-        (dialog, which) -> {
-          activityModel.setName(textName.getText().toString());
-          IntentUtils.createLauncherIcon(getActivity(), activityModel);
-        })
-      .setNegativeButton(android.R.string.cancel, (dialog, which) -> getDialog().cancel());
-    return builder.create();
-  }
-}
