diff --git a/app/src/main/java/com/maforn/timedshutdown/AccessibilityService.java b/app/src/main/java/com/maforn/timedshutdown/AccessibilityService.java
index 6c1653d..a7d3f1e 100644
--- a/app/src/main/java/com/maforn/timedshutdown/AccessibilityService.java
+++ b/app/src/main/java/com/maforn/timedshutdown/AccessibilityService.java
@@ -1,7 +1,5 @@
 package com.maforn.timedshutdown;
 
-import static java.lang.Thread.sleep;
-
 import android.accessibilityservice.AccessibilityServiceInfo;
 import android.accessibilityservice.GestureDescription;
 import android.app.AlertDialog;
@@ -13,7 +11,6 @@ import android.content.pm.ServiceInfo;
 import android.graphics.Path;
 import android.os.Build;
 import android.provider.Settings;
-import android.util.Log;
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityManager;
 import android.widget.Toast;
@@ -27,7 +24,7 @@ public class AccessibilityService extends android.accessibilityservice.Accessibi
     public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2) {
         if (!(paramIntent.getBooleanExtra("exec_gesture", false) || paramIntent.getBooleanExtra("exec_gesture2", false))) {
             if (!performGlobalAction(GLOBAL_ACTION_POWER_DIALOG)) {
-                Toast.makeText(this, "Action not performed, is the permission missing?", Toast.LENGTH_SHORT).show();
+                Toast.makeText(this, R.string.not_performed, Toast.LENGTH_SHORT).show();
             }
         }
 
@@ -48,7 +45,7 @@ public class AccessibilityService extends android.accessibilityservice.Accessibi
                 duration = 5000;
             }
             if (!this.dispatchGesture(createClick(x1, y1, x2, y2, power_off_type == 3, duration), null, null)) {
-                Toast.makeText(this, "Action not performed, is the permission missing?", Toast.LENGTH_SHORT).show();
+                Toast.makeText(this, R.string.not_performed, Toast.LENGTH_SHORT).show();
             }
         }
 
@@ -67,7 +64,7 @@ public class AccessibilityService extends android.accessibilityservice.Accessibi
             // if two clicks were required
             if (power_off_type == 2) {
                 if (!this.dispatchGesture(createClick(x2, y2, x2, y2, false, 400), null, null)) {
-                    Toast.makeText(this, "Action not performed, is the permission missing?", Toast.LENGTH_SHORT).show();
+                    Toast.makeText(this, R.string.not_performed, Toast.LENGTH_SHORT).show();
                 }
             }
         }
diff --git a/app/src/main/java/com/maforn/timedshutdown/AccessibilitySupportService.java b/app/src/main/java/com/maforn/timedshutdown/AccessibilitySupportService.java
new file mode 100644
index 0000000..fa67c13
--- /dev/null
+++ b/app/src/main/java/com/maforn/timedshutdown/AccessibilitySupportService.java
@@ -0,0 +1,83 @@
+package com.maforn.timedshutdown;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.PowerManager;
+import android.widget.Toast;
+
+import androidx.annotation.Nullable;
+
+import com.maforn.timedshutdown.ui.schedule.ScheduleFragment;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+public class AccessibilitySupportService extends Service {
+
+    public int onStartCommand(Intent paramIntent, int paramInt1, int paramInt2) {
+        // start the power off service
+
+        // if it was called by a single time alarm, deactivate it
+        if (paramIntent.getIntExtra("id", -1) != -1) {
+            int id = paramIntent.getIntExtra("id", 0);
+            SharedPreferences sP = getApplicationContext().getSharedPreferences("Schedule", MODE_PRIVATE);
+            JSONObject jO;
+            JSONArray arr;
+            try {
+                jO = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                arr = jO.getJSONArray("schedules");
+                int index = ScheduleFragment.getIdIndex(arr, id);
+                arr.put(index, arr.getJSONObject(index).put("active", false));
+                sP.edit().putString("schedules", jO.toString()).apply();
+            } catch (JSONException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+        // acquire wake lock
+        PowerManager pm = (PowerManager) getApplicationContext().getSystemService(Context.POWER_SERVICE);
+        PowerManager.WakeLock wakeLock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE, "timed-shutdown:wl");
+
+        wakeLock.acquire(10 * 1000L /*10 seconds*/);
+
+        Toast.makeText(this, "Executing actions to shut down the phone in 2 sec...", Toast.LENGTH_SHORT).show();
+
+        Handler baseHandler = new Handler();
+        baseHandler.postDelayed(() -> {
+            // call the power off function
+            Intent intent = new Intent(getApplicationContext(), AccessibilityService.class);
+            getApplicationContext().startService(intent);
+            // use an handler to wait 2.5 sec and then start the power off sequence
+            Handler handler = new Handler();
+            handler.postDelayed(() -> {
+                Intent intent12 = new Intent(getApplicationContext(), AccessibilityService.class);
+                intent12.putExtra("exec_gesture", true);
+                getApplicationContext().startService(intent12);
+                // handler added for the second click option
+                SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences("Settings", MODE_PRIVATE);
+                int power_off_type = sharedPreferences.getInt("power_off_method", 0);
+                if (power_off_type == 2) {
+                    Handler handler1 = new Handler();
+                    handler1.postDelayed(() -> {
+                        Intent intent1 = new Intent(getApplicationContext(), AccessibilityService.class);
+                        intent1.putExtra("exec_gesture2", true);
+                        getApplicationContext().startService(intent1);
+                    }, 2500);
+                }
+            }, 2500);
+        }, 2000);
+
+        return Service.START_STICKY;
+    }
+
+    @Nullable
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+}
diff --git a/app/src/main/java/com/maforn/timedshutdown/MainActivity.java b/app/src/main/java/com/maforn/timedshutdown/MainActivity.java
index 0072417..b574bf3 100644
--- a/app/src/main/java/com/maforn/timedshutdown/MainActivity.java
+++ b/app/src/main/java/com/maforn/timedshutdown/MainActivity.java
@@ -25,7 +25,7 @@ public class MainActivity extends AppCompatActivity {
         // Passing each menu ID as a set of Ids because each
         // menu should be considered as top level destinations.
         AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(
-                R.id.navigation_settings, R.id.navigation_timer, R.id.navigation_info)
+                R.id.navigation_settings, R.id.navigation_timer, R.id.navigation_schedule, R.id.navigation_info)
                 .build();
         navController = Navigation.findNavController(this, R.id.nav_host_fragment_activity_main);
         NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);
@@ -34,7 +34,7 @@ public class MainActivity extends AppCompatActivity {
     }
 
     @Override
-    protected void onRestoreInstanceState(Bundle savedInstanceState) {
+    protected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {
         super.onRestoreInstanceState(savedInstanceState);
         navController.restoreState(savedInstanceState.getBundle("navControllerState"));
     }
diff --git a/app/src/main/java/com/maforn/timedshutdown/ui/schedule/ScheduleFragment.java b/app/src/main/java/com/maforn/timedshutdown/ui/schedule/ScheduleFragment.java
new file mode 100644
index 0000000..64ccd6c
--- /dev/null
+++ b/app/src/main/java/com/maforn/timedshutdown/ui/schedule/ScheduleFragment.java
@@ -0,0 +1,379 @@
+package com.maforn.timedshutdown.ui.schedule;
+
+import static android.content.Context.MODE_PRIVATE;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.annotation.SuppressLint;
+import android.app.AlarmManager;
+import android.app.AlertDialog;
+import android.app.PendingIntent;
+import android.app.TimePickerDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+import android.widget.ToggleButton;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.widget.SwitchCompat;
+import androidx.fragment.app.Fragment;
+import androidx.navigation.Navigation;
+
+import com.maforn.timedshutdown.AccessibilitySupportService;
+import com.maforn.timedshutdown.R;
+import com.maforn.timedshutdown.databinding.FragmentScheduleBinding;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Calendar;
+import java.util.stream.IntStream;
+
+public class ScheduleFragment extends Fragment {
+
+    private FragmentScheduleBinding binding;
+
+    private SharedPreferences sP;
+
+    private AlarmManager alarmManager;
+
+    private int getDay(int id, @NonNull View addView) {
+        if (id == addView.findViewById(R.id.sunday).getId())
+            return Calendar.SUNDAY;
+        if (id == addView.findViewById(R.id.monday).getId())
+            return Calendar.MONDAY;
+        if (id == addView.findViewById(R.id.tuesday).getId())
+            return Calendar.TUESDAY;
+        if (id == addView.findViewById(R.id.wednesday).getId())
+            return Calendar.WEDNESDAY;
+        if (id == addView.findViewById(R.id.thursday).getId())
+            return Calendar.THURSDAY;
+        if (id == addView.findViewById(R.id.friday).getId())
+            return Calendar.FRIDAY;
+        return Calendar.SATURDAY;
+    }
+
+    public static int getIdIndex(@NonNull JSONArray arr, int id) throws JSONException {
+        int index = -1;
+        for (int e = 0; e < arr.length(); e++) {
+            if (arr.getJSONObject(e).getInt("id") == id)
+                index = e;
+        }
+        return index;
+    }
+
+    private int getIndex(@NonNull JSONArray arr, int id) throws JSONException {
+        int index = -1;
+        for (int e = 0; e < arr.length(); e++) {
+            if (arr.getInt(e) == id)
+                index = e;
+        }
+        return index;
+    }
+
+    @NonNull
+    public static int[] JSonArray2IntArray(@NonNull JSONArray jsonArray) {
+        int[] intArray = new int[jsonArray.length()];
+        for (int i = 0; i < intArray.length; ++i) {
+            intArray[i] = jsonArray.optInt(i);
+        }
+        return intArray;
+    }
+
+    public View onCreateView(@NonNull LayoutInflater inflater,
+                             ViewGroup container, Bundle savedInstanceState) {
+
+        binding = FragmentScheduleBinding.inflate(inflater, container, false);
+
+        sP = requireContext().getSharedPreferences("Schedule", MODE_PRIVATE);
+
+        // set up AlarmManager and check if the permission was granted
+        alarmManager = (AlarmManager) requireContext().getSystemService(Context.ALARM_SERVICE);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
+            if (!alarmManager.canScheduleExactAlarms()) {
+                Toast.makeText(requireContext(), "The alarm/scheduling permission is required to set up schedules", Toast.LENGTH_SHORT).show();
+                Intent intent = new Intent(Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM);
+                requireContext().startActivity(intent);
+            }
+        }
+
+        if (!sP.contains("firstTime")) {
+            AlertDialog alertDialog = (new AlertDialog.Builder(getContext())).create();
+            alertDialog.setTitle(getString(R.string.title_info));
+            alertDialog.setMessage(getString(R.string.schedule_disclaimer));
+            alertDialog.setButton(-2, getString(R.string.title_info), (paramDialogInterface, paramInt) -> {
+                try {
+                    Navigation.findNavController(container).navigate(R.id.action_scheduleFragment_to_infoFragment);
+                } catch (Exception ignored) {
+                }
+                paramDialogInterface.dismiss();
+            });
+            alertDialog.setButton(-1, getString(R.string.alert_permission_cancel), (paramDialogInterface, paramInt) -> paramDialogInterface.dismiss());
+            alertDialog.setOnDismissListener(dialogInterface -> {
+                sP.edit().putBoolean("firstTime", false).apply();
+            });
+            alertDialog.show();
+        }
+
+        // setup add schedule FAB
+        binding.addSchedule.setOnClickListener(v -> {
+            Calendar currentTime = Calendar.getInstance();
+            currentTime.add(Calendar.MINUTE, -1);
+            int hour = currentTime.get(Calendar.HOUR_OF_DAY);
+            int minute = currentTime.get(Calendar.MINUTE);
+            // create an entry for the time minus one minute
+            JSONObject jsonObject;
+            JSONArray arr;
+            try {
+                jsonObject = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                arr = jsonObject.getJSONArray("schedules");
+                if (arr.length() > 9) {
+                    Toast.makeText(requireContext(), "Maximum number of possible schedules reached (10)", Toast.LENGTH_SHORT).show();
+                    return;
+                }
+                int newId = 0;
+                if (arr.length() != 0)
+                    newId = arr.getJSONObject(arr.length() - 1).getInt("id") + 1;
+
+                arr.put(new JSONObject(String.format("{'id':%d,'hour':%d,'minute':%d,'repeating':[],'active':false}", newId, hour, minute)));
+                sP.edit().putString("schedules", jsonObject.toString()).apply();
+
+                addElement(arr.getJSONObject(arr.length() - 1));
+            } catch (JSONException e) {
+                throw new RuntimeException(e);
+            }
+        });
+
+        return binding.getRoot();
+    }
+
+    private void cancelSchedules(int id) {
+        Intent alarmIntent = new Intent(requireContext(), AccessibilitySupportService.class);
+
+        alarmIntent.putExtra("id", id);
+        PendingIntent pendingIntent = PendingIntent.getService(requireContext(), id * 10, alarmIntent, PendingIntent.FLAG_MUTABLE);
+        alarmManager.cancel(pendingIntent);
+
+        alarmIntent = new Intent(requireContext(), AccessibilitySupportService.class);
+        for (int i = 0; i < 7; i++) {
+            try {
+                pendingIntent = PendingIntent.getService(requireContext(), id * 10 + i, alarmIntent, PendingIntent.FLAG_IMMUTABLE);
+                alarmManager.cancel(pendingIntent);
+            } catch (Exception ignored) {
+            }
+        }
+    }
+
+    private void setSchedule(JSONObject jsonObject) {
+        try {
+            int id = jsonObject.getInt("id");
+            int hour = jsonObject.getInt("hour");
+            int minute = jsonObject.getInt("minute");
+            int[] repeating = JSonArray2IntArray(jsonObject.getJSONArray("repeating"));
+            boolean checked = jsonObject.getBoolean("active");
+
+            cancelSchedules(id);
+
+            Intent alarmIntent = new Intent(requireContext(), AccessibilitySupportService.class);
+
+            if (checked) {
+                Calendar alarmCalendar = Calendar.getInstance();
+                alarmCalendar.set(Calendar.HOUR_OF_DAY, hour);
+                alarmCalendar.set(Calendar.MINUTE, minute);
+                alarmCalendar.set(Calendar.SECOND, 0);
+                alarmCalendar.set(Calendar.MILLISECOND, 0);
+                // if the date has already passed set it for tomorrow
+                if (alarmCalendar.getTimeInMillis() <= Calendar.getInstance().getTimeInMillis())
+                    alarmCalendar.add(Calendar.HOUR_OF_DAY, 24);
+
+                if (repeating.length == 0) {
+                    alarmIntent.putExtra("id", id);
+
+                    PendingIntent pendingIntent = PendingIntent.getService(requireContext(), id * 10, alarmIntent, PendingIntent.FLAG_MUTABLE);
+                    alarmManager.setAlarmClock(new AlarmManager.AlarmClockInfo(alarmCalendar.getTimeInMillis(), pendingIntent), pendingIntent);
+                } else {
+                    for (int i = 0; i < repeating.length; i++) {
+                        PendingIntent pendingIntent = PendingIntent.getService(requireContext(), id * 10 + i, alarmIntent, PendingIntent.FLAG_IMMUTABLE);
+                        alarmCalendar.set(Calendar.DAY_OF_WEEK, repeating[i]);
+                        long alarmTime = alarmCalendar.getTimeInMillis();
+                        alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, alarmTime, 24 * 60 * 60 * 1000, pendingIntent);
+                    }
+
+                }
+            }
+        } catch (JSONException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @SuppressLint("DefaultLocale")
+    private void addElement(@NonNull JSONObject jsonObject) throws JSONException {
+        int id = jsonObject.getInt("id");
+        int hour = jsonObject.getInt("hour");
+        int minute = jsonObject.getInt("minute");
+        int[] repeating = JSonArray2IntArray(jsonObject.getJSONArray("repeating"));
+        boolean checked = jsonObject.getBoolean("active");
+
+        // get the layout and set the margins
+        View addView = getLayoutInflater().inflate(R.layout.schedule, null);
+        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                RelativeLayout.LayoutParams.WRAP_CONTENT
+        );
+        params.setMargins(0, 0, 0, 16);
+        addView.setLayoutParams(params);
+
+        // set up the main time text
+        TextView mainText = addView.findViewById(R.id.mainText);
+        mainText.setText(String.format("%02d:%02d", hour, minute));
+
+        // add a general on click listener to change the time when the schedule will go off
+        addView.setOnClickListener(v -> {
+            TimePickerDialog mTimePicker;
+            mTimePicker = new TimePickerDialog(getContext(), (timePicker, selectedHour, selectedMinute) -> {
+                JSONObject jO;
+                JSONArray arr;
+                try {
+                    jO = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                    arr = jO.getJSONArray("schedules");
+                    int index = getIdIndex(arr, id);
+                    arr.put(index, jsonObject.put("hour", selectedHour).put("minute", selectedMinute));
+                    sP.edit().putString("schedules", jO.toString()).apply();
+                } catch (JSONException e) {
+                    throw new RuntimeException(e);
+                }
+
+                setSchedule(jsonObject);
+
+                mainText.setText(String.format("%02d:%02d", selectedHour, selectedMinute));
+            }, hour, minute, true);//Yes 24 hour time
+            mTimePicker.setTitle("Select Time");
+            mTimePicker.show();
+        });
+
+        // set up the repeating days
+        LinearLayout days = addView.findViewById(R.id.days);
+        for (int i = 0; i < 7; i++) {
+            int finalI = i + 1;
+            // check if it's the day
+            if (IntStream.of(repeating).anyMatch(x -> finalI == x))
+                ((ToggleButton) days.getChildAt(i)).setChecked(true);
+
+            days.getChildAt(i).setOnClickListener(v -> {
+                ToggleButton day = (ToggleButton) v;
+                JSONObject jO;
+                JSONArray arr;
+                try {
+                    jO = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                    arr = jO.getJSONArray("schedules");
+                    int index = getIdIndex(arr, id);
+                    JSONArray rep = arr.getJSONObject(index).getJSONArray("repeating");
+
+                    int dayAsNumber = getDay(day.getId(), addView);
+                    if (day.isChecked()) {
+                        rep.put(dayAsNumber);
+                    } else {
+                        rep.remove(getIndex(rep, dayAsNumber));
+                    }
+
+                    arr.put(index, jsonObject.put("repeating", rep));
+                    sP.edit().putString("schedules", jO.toString()).apply();
+
+                    setSchedule(jsonObject);
+                } catch (JSONException e) {
+                    throw new RuntimeException(e);
+                }
+            });
+        }
+
+        SwitchCompat toggleSwitch = addView.findViewById(R.id.toggleSwitch);
+        toggleSwitch.setChecked(checked);
+        toggleSwitch.setOnClickListener(v1 -> {
+            JSONObject jO;
+            JSONArray arr;
+            try {
+                jO = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                arr = jO.getJSONArray("schedules");
+                int index = getIdIndex(arr, id);
+                arr.put(index, jsonObject.put("active", ((SwitchCompat) v1).isChecked()));
+                sP.edit().putString("schedules", jO.toString()).apply();
+
+                setSchedule(jsonObject);
+            } catch (JSONException e) {
+                throw new RuntimeException(e);
+            }
+        });
+
+        // set up remove button
+        addView.findViewById(R.id.remove).setOnClickListener(v2 -> {
+            JSONObject jO;
+            JSONArray arr;
+            try {
+                jO = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                arr = jO.getJSONArray("schedules");
+                int index = getIdIndex(arr, id);
+                arr.remove(index);
+                sP.edit().putString("schedules", jO.toString()).apply();
+
+                cancelSchedules(id);
+
+                // Start the animation
+                addView.animate()
+                        .alpha(0.0f)
+                        .setListener(new AnimatorListenerAdapter() {
+                            @Override
+                            public void onAnimationEnd(Animator animation) {
+                                super.onAnimationEnd(animation);
+                                binding.mainLayout.removeView(addView);
+                            }
+                        });
+            } catch (JSONException e) {
+                throw new RuntimeException(e);
+            }
+        });
+
+        // add the inflated layout
+        addView.setAlpha(0.0f);
+        binding.mainLayout.addView(addView);
+        addView.animate().alpha(1.0f);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        // Needs to be here because switch.setChecked() does not work within OnCreate if it's not the first time
+        binding.mainLayout.removeAllViews();
+        if (sP.contains("schedules")) {
+            try {
+                JSONObject jsonObject = new JSONObject(sP.getString("schedules", "{'schedules':[]}"));
+                JSONArray schedules = jsonObject.getJSONArray("schedules");
+
+                for (int i = 0; i < schedules.length(); i++) {
+                    // debug
+                    // Log.i("JSON", schedules.get(i).toString());
+                    JSONObject element = schedules.getJSONObject(i);
+                    addElement(element);
+                }
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        binding = null;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/maforn/timedshutdown/ui/timer/TimerFragment.java b/app/src/main/java/com/maforn/timedshutdown/ui/timer/TimerFragment.java
index 48367dd..b4aadda 100644
--- a/app/src/main/java/com/maforn/timedshutdown/ui/timer/TimerFragment.java
+++ b/app/src/main/java/com/maforn/timedshutdown/ui/timer/TimerFragment.java
@@ -5,15 +5,10 @@ import static android.content.Context.MODE_PRIVATE;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.TimePickerDialog;
-import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.CountDownTimer;
-import android.os.Handler;
-import android.os.PowerManager;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -26,11 +21,10 @@ import androidx.fragment.app.Fragment;
 import androidx.navigation.Navigation;
 
 import com.maforn.timedshutdown.AccessibilityService;
+import com.maforn.timedshutdown.AccessibilitySupportService;
 import com.maforn.timedshutdown.R;
 import com.maforn.timedshutdown.databinding.FragmentTimerBinding;
 
-import java.util.Calendar;
-
 public class TimerFragment extends Fragment {
 
     private FragmentTimerBinding binding;
@@ -49,9 +43,7 @@ public class TimerFragment extends Fragment {
     @SuppressLint("DefaultLocale")
     private void setCounter(int seconds, int minutes, int hours) {
         counter = seconds + 60 * minutes + 3600 * hours;
-        SharedPreferences.Editor editor = sP.edit();
-        editor.putInt("lastCounter", counter);
-        editor.apply();
+        sP.edit().putInt("lastCounter", counter).apply();
         timerText.setText(String.format("%02d:%02d:%02d", hours, minutes, seconds));
     }
 
@@ -81,9 +73,7 @@ public class TimerFragment extends Fragment {
             });
             alertDialog.setButton(-1, getString(R.string.alert_permission_cancel), (paramDialogInterface, paramInt) -> paramDialogInterface.dismiss());
             alertDialog.setOnDismissListener(dialogInterface -> {
-                SharedPreferences.Editor editor = sP.edit();
-                editor.putBoolean("firstTime", false);
-                editor.apply();
+                sP.edit().putBoolean("firstTime", false).apply();
             });
             alertDialog.show();
         }
@@ -151,33 +141,10 @@ public class TimerFragment extends Fragment {
                     public void onFinish() {
                         // if the app was not forcefully terminated and the context still exists
                         if (getContext() != null) {
-
-                            PowerManager pm = (PowerManager) getContext().getSystemService(Context.POWER_SERVICE);
-                            PowerManager.WakeLock wakeLock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP | PowerManager.ON_AFTER_RELEASE, "timed-shutdown:wl");
-
-                            wakeLock.acquire(10 * 1000L /*10 seconds*/);
                             timerText.setText("00:00:00");
-                            // call the power off function
-                            Intent intent = new Intent(getContext(), AccessibilityService.class);
+                            // call the power off service
+                            Intent intent = new Intent(getContext(), AccessibilitySupportService.class);
                             requireContext().startService(intent);
-                            // use an handler to wait 2.5 sec and then start the power off sequence
-                            Handler handler = new Handler();
-                            handler.postDelayed(() -> {
-                                Intent intent12 = new Intent(getContext(), AccessibilityService.class);
-                                intent12.putExtra("exec_gesture", true);
-                                requireContext().startService(intent12);
-                                // handler added for the second click option
-                                SharedPreferences sharedPreferences = getContext().getSharedPreferences("Settings", MODE_PRIVATE);
-                                int power_off_type = sharedPreferences.getInt("power_off_method", 0);
-                                if (power_off_type == 2) {
-                                    Handler handler1 = new Handler();
-                                    handler1.postDelayed(() -> {
-                                        Intent intent1 = new Intent(getContext(), AccessibilityService.class);
-                                        intent1.putExtra("exec_gesture2", true);
-                                        requireContext().startService(intent1);
-                                    }, 2500);
-                                }
-                            }, 2500);
 
                             isTiming = false;
                         }
@@ -195,31 +162,6 @@ public class TimerFragment extends Fragment {
 
         });
 
-        binding.buttonSelect.setOnClickListener(view -> {
-            if (!isTiming) {
-                Calendar currentTime = Calendar.getInstance();
-                int hour = currentTime.get(Calendar.HOUR_OF_DAY);
-                int minute = currentTime.get(Calendar.MINUTE);
-                TimePickerDialog mTimePicker;
-                mTimePicker = new TimePickerDialog(getContext(), (timePicker, selectedHour, selectedMinute) -> {
-                    SharedPreferences.Editor editor = sP.edit();
-                    editor.putInt("selectedHour", selectedHour);
-                    editor.putInt("selectedMinute", selectedMinute);
-                    editor.apply();
-                    counter = (selectedHour - hour) * 3600 + (selectedMinute - minute) * 60;
-                    if (counter < 0) {
-                        counter += 3600 * 24;
-                    }
-                    timerText.setText(String.format("%02d:%02d:00", counter / 3600, (counter % 3600) / 60));
-                    numberPickerMin.setValue((counter % 3600) / 60);
-                    numberPickerHour.setValue(counter / 3600);
-                }, hour, minute, true);//Yes 24 hour time
-                mTimePicker.setTitle("Select Time");
-                mTimePicker.show();
-
-            }
-        });
-
         binding.buttonLastTimer.setOnClickListener(view -> {
             if (!isTiming) {
                 counter = sP.getInt("lastCounter", 0);
@@ -230,21 +172,6 @@ public class TimerFragment extends Fragment {
             }
         });
 
-        binding.buttonLastTime.setOnClickListener(view -> {
-            if (!isTiming) {
-                Calendar currentTime = Calendar.getInstance();
-                int hour = currentTime.get(Calendar.HOUR_OF_DAY);
-                int minute = currentTime.get(Calendar.MINUTE);
-                counter = (sP.getInt("selectedHour", 0) - hour) * 3600 + (sP.getInt("selectedMinute", 0) - minute) * 60;
-                if (counter < 0) {
-                    counter += 3600 * 24;
-                }
-                timerText.setText(String.format("%02d:%02d:00", counter / 3600, (counter % 3600) / 60));
-                numberPickerMin.setValue((counter % 3600) / 60);
-                numberPickerHour.setValue(counter / 3600);
-            }
-        });
-
         return binding.getRoot();
     }
 
