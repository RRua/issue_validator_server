diff --git a/app/src/main/java/cc/calliope/mini/LetterMapping.kt b/app/src/main/java/cc/calliope/mini/LetterMapping.kt
deleted file mode 100644
index 3febe1f..0000000
--- a/app/src/main/java/cc/calliope/mini/LetterMapping.kt
+++ /dev/null
@@ -1,15 +0,0 @@
-package cc.calliope.mini;
-
-enum class LetterMapping(val number: Char) {
-    Z('1'), U('1'),
-    V('2'), O('2'),
-    G('3'), I('3'),
-    P('4'), E('4'),
-    T('5'), A('5');
-
-    companion object {
-        fun getNumber(letter: Char): Char {
-            return values().firstOrNull { it.name[0] == letter.uppercaseChar() }?.number ?: letter
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt b/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt
index 618950b..5325d80 100644
--- a/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt
+++ b/app/src/main/java/cc/calliope/mini/MyDeviceKt.kt
@@ -31,10 +31,6 @@ class MyDeviceKt(bleScanResults: BleScanResults) {
         return pattern.find(serverDevice.name.uppercase())?.groupValues?.get(1) ?: ""
     }
 
-    fun getNumPattern(): String {
-        return getPattern().map { LetterMapping.getNumber(it) }.joinToString("")
-    }
-
     fun isActual(): Boolean {
         bleScanResultData?.let {
             val timeSinceBoot = nanosecondsToSeconds(SystemClock.elapsedRealtimeNanos())
diff --git a/app/src/main/java/cc/calliope/mini/PatternMatrixView.java b/app/src/main/java/cc/calliope/mini/PatternMatrixView.java
index 1afce5e..04c5d3d 100644
--- a/app/src/main/java/cc/calliope/mini/PatternMatrixView.java
+++ b/app/src/main/java/cc/calliope/mini/PatternMatrixView.java
@@ -48,7 +48,7 @@ public class PatternMatrixView extends View {
         }
     }
 
-    public void setOnCheckedChangeListener(OnPatternChangeListener listener) {
+    public void setOnPatternChangeListener(OnPatternChangeListener listener) {
         this.onPatternChangeListener = listener;
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
index ee48ebb..834b16d 100644
--- a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
@@ -102,10 +102,6 @@ public abstract class ScannerActivity extends AppCompatActivity implements Dialo
         });
     }
 
-    public void onPatternChange(int column, float value){
-        Utils.log(Log.ASSERT, "BAR_MAIN", "Column " + column + ": " + value);
-    }
-
     private static boolean matchesPattern(String numberPattern, String letterPattern) {
         return false;
     }
diff --git a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
index eb22185..10ee048 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
@@ -14,38 +14,33 @@ import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.Window;
 import android.view.WindowManager;
-import android.widget.RatingBar;
 
-import java.util.Arrays;
 import java.util.List;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.fragment.app.DialogFragment;
+import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 
+import cc.calliope.mini.MyDeviceKt;
+import cc.calliope.mini.PatternMatrixView;
+import cc.calliope.mini.ScanViewModelKt;
 import cc.calliope.mini.views.FobParams;
 import cc.calliope.mini.R;
 import cc.calliope.mini.ExtendedBluetoothDevice;
 import cc.calliope.mini.databinding.DialogPatternBinding;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.viewmodels.ScannerLiveData;
-import cc.calliope.mini.viewmodels.ScannerViewModel;
-import cc.calliope.mini.views.SvgPatternBar;
+import no.nordicsemi.android.kotlin.ble.core.scanner.BleScanResults;
 
-//TODO -> Activity + viewModel
 public class PatternDialogFragment extends DialogFragment {
     private final static int DIALOG_WIDTH = 220; //dp
     private final static int DIALOG_HEIGHT = 240; //dp
     private static final String FOB_PARAMS_PARCELABLE = "fob_params_parcelable";
     private DialogPatternBinding binding;
-    private Float[] oldPattern = {0f, 0f, 0f, 0f, 0f};
-    private Float[] currentPattern = {0f, 0f, 0f, 0f, 0f};
-
-    private boolean connectClicked = false;
-
-    private ScannerViewModel scannerViewModel;
-//    private ExtendedBluetoothDevice currentDevice;
+    private ScanViewModelKt scanViewModelKt;
+    private String currentPattern;
 
     public PatternDialogFragment() {
         // Empty constructor is required for DialogFragment
@@ -67,49 +62,37 @@ public class PatternDialogFragment extends DialogFragment {
     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
         binding = DialogPatternBinding.inflate(inflater, container, false);
-
-
-        // Create view model containing utility methods for scanning
-        scannerViewModel = new ViewModelProvider(requireActivity()).get(ScannerViewModel.class);
-        scannerViewModel.getScannerState().observe(getViewLifecycleOwner(), this::scanResults);
-
         return binding.getRoot();
     }
 
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-
         customizingDialog(view);
 
-        oldPattern = scannerViewModel.getScannerState().getCurrentPattern();
-        currentPattern = Arrays.copyOf(oldPattern, oldPattern.length);
-
-//        List<SvgPatternBar> pattern = List.of(
-//                binding.patternMatrix.columnA,
-//                binding.patternMatrix.columnB,
-//                binding.patternMatrix.columnC,
-//                binding.patternMatrix.columnD,
-//                binding.patternMatrix.columnE
-//        );
-//
-//        for (int i = 0; i < 5; i++) {
-//            pattern.get(i).setValue(currentPattern[i]);
-//        }
-
-//        binding.patternMatrix.columnA.setValue(currentPattern[0]);
-//        binding.patternMatrix.columnB.setValue(currentPattern[1]);
-//        binding.patternMatrix.columnC.setValue(currentPattern[2]);
-//        binding.patternMatrix.columnD.setValue(currentPattern[3]);
-//        binding.patternMatrix.columnE.setValue(currentPattern[4]);
-//
-//        binding.patternMatrix.columnA.setOnChangeListener((bar, v, b) -> onPatternChange(0, v));
-//        binding.patternMatrix.columnB.setOnChangeListener((bar, v, b) -> onPatternChange(1, v));
-//        binding.patternMatrix.columnC.setOnChangeListener((bar, v, b) -> onPatternChange(2, v));
-//        binding.patternMatrix.columnD.setOnChangeListener((bar, v, b) -> onPatternChange(3, v));
-//        binding.patternMatrix.columnE.setOnChangeListener((bar, v, b) -> onPatternChange(4, v));
+        binding.patternView.setOnPatternChangeListener(pattern -> currentPattern = pattern);
+
+        scanViewModelKt = new ViewModelProvider(this).get(ScanViewModelKt.class);
+        scanViewModelKt.getDevices().observe(this, new Observer<List<BleScanResults>>() {
+            @Override
+            public void onChanged(List<BleScanResults> scanResults) {
+                for (BleScanResults results : scanResults) {
+                    MyDeviceKt device = new MyDeviceKt(results);
+
+                    if (!device.getPattern().isEmpty() && device.getPattern().equals(currentPattern)) {
+                        binding.buttonAction.setBackgroundResource(device.isActual() ? R.drawable.btn_connect_green : R.drawable.btn_connect_aqua);
+                        Log.println(Log.DEBUG, "scannerViewModel",
+                                "address: " + device.getAddress() + ", " +
+                                        "pattern: " + device.getPattern() + ", " +
+                                        "bonded: " + device.isBonded() + ", " +
+                                        "actual: " + device.isActual());
+                    }
+                }
+            }
+        });
+        scanViewModelKt.startScan();
 
-        binding.buttonAction.setOnClickListener(view1 -> onConnectClick());
+        binding.buttonAction.setOnClickListener(this::onConnectClick);
     }
 
     @Override
@@ -157,14 +140,6 @@ public class PatternDialogFragment extends DialogFragment {
     @Override
     public void onDismiss(@NonNull final DialogInterface dialog) {
         super.onDismiss(dialog);
-//        if (scannerViewModel.getScannerState().getCurrentDevice() != null) {
-//            pairDevice(scannerViewModel.getScannerState().getCurrentDevice().getDevice());
-//        }
-        if (!connectClicked) {
-            scannerViewModel.setCurrentPattern(oldPattern);
-        } else {
-            scannerViewModel.createBond();
-        }
 
         final Activity activity = getActivity();
         if (activity instanceof DialogInterface.OnDismissListener) {
@@ -172,12 +147,6 @@ public class PatternDialogFragment extends DialogFragment {
         }
     }
 
-    public void onPatternChange(int column, float value){
-        Utils.log(Log.ASSERT, "BAR_MAIN", "Column " + column + ": " + value);
-        currentPattern[column] = value;
-//        scannerViewModel.setCurrentPattern(currentPattern);
-    }
-
     private void setButtonBackground(ExtendedBluetoothDevice device) {
 //        Log.i("DIALOG: ", "currentDevice: " + device);
         if (device != null && device.isRelevant()) {
@@ -187,9 +156,8 @@ public class PatternDialogFragment extends DialogFragment {
         }
     }
 
-    // Call this method to send the data back to the parent fragment
-    public void onConnectClick() {
-        connectClicked = true;
+    public void onConnectClick(View view) {
+
         dismiss();
     }
 
diff --git a/app/src/main/java/cc/calliope/mini/views/SvgPatternBar.java b/app/src/main/java/cc/calliope/mini/views/SvgPatternBar.java
deleted file mode 100644
index c6297c5..0000000
--- a/app/src/main/java/cc/calliope/mini/views/SvgPatternBar.java
+++ /dev/null
@@ -1,225 +0,0 @@
-package cc.calliope.mini.views;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.SharedPreferences;
-import android.content.res.TypedArray;
-import android.graphics.Bitmap;
-import android.graphics.BitmapShader;
-import android.graphics.Canvas;
-import android.graphics.Shader;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.ClipDrawable;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.LayerDrawable;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.VectorDrawable;
-import android.graphics.drawable.shapes.RoundRectShape;
-import android.graphics.drawable.shapes.Shape;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.Gravity;
-import android.widget.RatingBar;
-
-import androidx.appcompat.graphics.drawable.DrawableWrapper;
-import androidx.appcompat.widget.AppCompatRatingBar;
-import androidx.preference.PreferenceManager;
-import androidx.vectordrawable.graphics.drawable.VectorDrawableCompat;
-
-import java.lang.reflect.Method;
-
-import cc.calliope.mini.R;
-import cc.calliope.mini.utils.Utils;
-
-public class SvgPatternBar extends AppCompatRatingBar {
-    private Bitmap sampleTile;
-    private int column;
-
-    public SvgPatternBar(Context context) {
-        this(context, null);
-    }
-
-    public SvgPatternBar(Context context, AttributeSet attrs) {
-        this(context, attrs, androidx.appcompat.R.attr.ratingBarStyle);
-    }
-
-    public SvgPatternBar(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-
-        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.SvgPatternBar);
-        String methodName;
-        try {
-            column = a.getInteger(R.styleable.SvgPatternBar_column, 0); // Default value is 0
-            methodName = a.getString(R.styleable.SvgPatternBar_onChange);
-        } finally {
-            a.recycle();
-        }
-
-        if (methodName != null) {
-            setOnChangeListener(new DeclaredOnChangeListener(methodName, column));
-        }
-
-        init();
-    }
-
-    private void init() {
-        LayerDrawable drawable = (LayerDrawable) createTile(getProgressDrawable(), false);
-        setProgressDrawable(drawable);
-        setValue(loadValue());
-    }
-
-    private class DeclaredOnChangeListener implements OnRatingBarChangeListener {
-        private final String methodName;
-        private final int column;
-
-        public DeclaredOnChangeListener(String methodName, int column) {
-            this.methodName = methodName;
-            this.column = column;
-        }
-
-        @Override
-        public void onRatingChanged(RatingBar ratingBar, float value, boolean fromUser) {
-            Activity activity = getActivity();
-            if (value < 1.0f) {
-                value = 1.0f;
-                ratingBar.setRating(value);
-            }
-
-            if (activity == null) {
-                return;
-            }
-
-            try {
-                Utils.log(Log.ASSERT, "TEST", "Context: " + getContext());
-                Method method = activity.getClass().getMethod(methodName, int.class, float.class);
-                method.invoke(activity, column, value);
-                saveValue(value);
-            } catch (Exception e) {
-                throw new IllegalStateException("Could not execute non-public method " + methodName + " for onChange", e);
-            }
-        }
-    }
-
-    private Activity getActivity() {
-        Context context = getContext();
-        while (context instanceof ContextWrapper) {
-            if (context instanceof Activity) {
-                return (Activity) context;
-            }
-            context = ((ContextWrapper) context).getBaseContext();
-        }
-        return null;
-    }
-
-    public void setOnChangeListener(OnRatingBarChangeListener listener) {
-        super.setOnRatingBarChangeListener(listener);
-    }
-
-    /**
-     * Converts a drawable to a tiled version of itself. It will recursively
-     * traverse layer and state list drawables.
-     */
-    @SuppressLint("RestrictedApi")
-    private Drawable createTile(Drawable drawable, boolean clip) {
-        if (drawable instanceof DrawableWrapper) {
-            Drawable inner = ((DrawableWrapper) drawable).getWrappedDrawable();
-            if (inner != null) {
-                inner = createTile(inner, clip);
-                ((DrawableWrapper) drawable).setWrappedDrawable(inner);
-            }
-        } else if (drawable instanceof LayerDrawable) {
-            LayerDrawable background = (LayerDrawable) drawable;
-            final int n = background.getNumberOfLayers();
-            Drawable[] outDrawables = new Drawable[n];
-
-            for (int i = 0; i < n; i++) {
-                int id = background.getId(i);
-                outDrawables[i] = createTile(background.getDrawable(i),
-                        (id == android.R.id.progress || id == android.R.id.secondaryProgress));
-            }
-            LayerDrawable newBg = new LayerDrawable(outDrawables);
-
-            for (int i = 0; i < n; i++) {
-                newBg.setId(i, background.getId(i));
-            }
-
-            return newBg;
-
-        } else if (drawable instanceof BitmapDrawable) {
-            final BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
-            final Bitmap tileBitmap = bitmapDrawable.getBitmap();
-            if (sampleTile == null) {
-                sampleTile = tileBitmap;
-            }
-
-            final ShapeDrawable shapeDrawable = new ShapeDrawable(getDrawableShape());
-            final BitmapShader bitmapShader = new BitmapShader(tileBitmap,
-                    Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);
-            shapeDrawable.getPaint().setShader(bitmapShader);
-            shapeDrawable.getPaint().setColorFilter(bitmapDrawable.getPaint().getColorFilter());
-            return (clip) ? new ClipDrawable(shapeDrawable, Gravity.START,
-                    ClipDrawable.HORIZONTAL) : shapeDrawable;
-        } else if (drawable instanceof VectorDrawable) {
-            return createTile(getBitmapDrawableFromVectorDrawable(drawable), clip);
-        } else if (drawable instanceof VectorDrawableCompat) {
-            // API 19 support.
-            return createTile(getBitmapDrawableFromVectorDrawable(drawable), clip);
-        }
-        return drawable;
-    }
-
-    private BitmapDrawable getBitmapDrawableFromVectorDrawable(Drawable drawable) {
-        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
-        Canvas canvas = new Canvas(bitmap);
-        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
-        drawable.draw(canvas);
-        return new BitmapDrawable(getResources(), bitmap);
-    }
-
-    @Override
-    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
-        if (sampleTile != null) {
-            final int width = sampleTile.getWidth() * getNumStars();
-            setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, 0),
-                    getMeasuredHeight());
-        }
-    }
-
-    private Shape getDrawableShape() {
-        final float[] roundedCorners = new float[]{5, 5, 5, 5, 5, 5, 5, 5};
-        return new RoundRectShape(roundedCorners, null, null);
-    }
-
-    public void setValue(float value) {
-        setRating(value);
-    }
-
-    public float getValue() {
-        return getRating();
-    }
-
-    public int getColumn() {
-        return column;
-    }
-
-    public void setColumn(int column) {
-        this.column = column;
-    }
-
-    //TODO Load current device and decode column = num of letter
-    public float loadValue() {
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
-        float value = sharedPreferences.getFloat("pattern_column_" + column, 1f);
-        Utils.log(Log.ASSERT, "BAR", "loadValue column: " + column + " value: " + value);
-        return value;
-    }
-
-    public void saveValue(float value) {
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
-        Utils.log(Log.ASSERT, "BAR", "saveValue column: " + column + " value: " + value);
-        sharedPreferences.edit().putFloat("pattern_column_" + column, value).apply();
-    }
-}
\ No newline at end of file
