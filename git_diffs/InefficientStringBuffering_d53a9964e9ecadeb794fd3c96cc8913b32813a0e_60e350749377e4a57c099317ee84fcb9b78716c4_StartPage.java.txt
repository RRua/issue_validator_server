diff --git a/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java b/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
index e2f7e4e3..7391650d 100644
--- a/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
+++ b/app/src/main/java/acr/browser/lightning/constant/BookmarkPage.java
@@ -29,7 +29,7 @@ import acr.browser.lightning.R;
 import acr.browser.lightning.database.HistoryItem;
 import acr.browser.lightning.database.bookmark.BookmarkModel;
 import acr.browser.lightning.favicon.FaviconModel;
-import acr.browser.lightning.html.BookmarkPageBuilder;
+import acr.browser.lightning.html.bookmark.BookmarkPageBuilder;
 import acr.browser.lightning.utils.Preconditions;
 import acr.browser.lightning.utils.ThemeUtils;
 import acr.browser.lightning.utils.Utils;
diff --git a/app/src/main/java/acr/browser/lightning/constant/StartPage.java b/app/src/main/java/acr/browser/lightning/constant/StartPage.java
index 1ea3d268..e79b6fd4 100644
--- a/app/src/main/java/acr/browser/lightning/constant/StartPage.java
+++ b/app/src/main/java/acr/browser/lightning/constant/StartPage.java
@@ -16,58 +16,25 @@ import java.io.IOException;
 
 import javax.inject.Inject;
 
-import acr.browser.lightning.R;
 import acr.browser.lightning.BrowserApp;
+import acr.browser.lightning.html.homepage.HomePageBuilder;
 import acr.browser.lightning.search.SearchEngineProvider;
-import acr.browser.lightning.search.engine.BaseSearchEngine;
 import acr.browser.lightning.utils.Utils;
 
 public class StartPage {
 
     public static final String FILENAME = "homepage.html";
 
-    private static final String HEAD_1 = "<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\">"
-        + "<head>"
-        + "<meta content=\"en-us\" http-equiv=\"Content-Language\" />"
-        + "<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" />"
-        + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">"
-        + "<title>";
-
-    private static final String HEAD_2 = "</title>"
-        + "</head>"
-        + "<style>body{background:#f5f5f5;text-align:center;margin:0px;}#search_input{height:35px; "
-        + "width:100%;outline:none;border:none;font-size: 16px;background-color:transparent;}"
-        + "span { display: block; overflow: hidden; padding-left:5px;vertical-align:middle;}"
-        + ".search_bar{display:table;vertical-align:middle;width:90%;height:35px;max-width:500px;margin:0 auto;background-color:#fff;box-shadow: 0px 2px 3px rgba( 0, 0, 0, 0.25 );"
-        + "font-family: Arial;color: #444;-moz-border-radius: 2px;-webkit-border-radius: 2px;border-radius: 2px;}"
-        + "#search_submit{outline:none;height:37px;float:right;color:#404040;font-size:16px;font-weight:bold;border:none;"
-        + "background-color:transparent;}.outer { display: table; position: absolute; height: 100%; width: 100%;}"
-        + ".middle { display: table-cell; vertical-align: middle;}.inner { margin-left: auto; margin-right: auto; "
-        + "margin-bottom:10%; width: 100%;}img.smaller{width:50%;max-width:300px;}"
-        + ".box { vertical-align:middle;position:relative; display: block; margin: 10px;padding-left:10px;padding-right:10px;padding-top:5px;padding-bottom:5px;"
-        + " background-color:#fff;box-shadow: 0px 3px rgba( 0, 0, 0, 0.1 );font-family: Arial;color: #444;"
-        + "font-size: 12px;-moz-border-radius: 2px;-webkit-border-radius: 2px;"
-        + "border-radius: 2px;}</style><body> <div class=\"outer\"><div class=\"middle\"><div class=\"inner\"><img class=\"smaller\" src=\"";
-
-    private static final String MIDDLE = "\" ></br></br><form onsubmit=\"return search()\" class=\"search_bar\" autocomplete=\"off\">"
-        + "<input type=\"submit\" id=\"search_submit\" value=\"Search\" ><span><input class=\"search\" type=\"text\" value=\"\" id=\"search_input\" >"
-        + "</span></form></br></br></div></div></div><script type=\"text/javascript\">function search(){if(document.getElementById(\"search_input\").value != \"\"){window.location.href = \"";
-
-    private static final String END = "\" + document.getElementById(\"search_input\").value;document.getElementById(\"search_input\").value = \"\";}return false;}</script></body></html>";
-
     @NonNull
     public static File getStartPageFile(@NonNull Application application) {
         return new File(application.getFilesDir(), FILENAME);
     }
 
-    @NonNull private final String mTitle;
-
     @Inject Application mApp;
     @Inject SearchEngineProvider mSearchEngineProvider;
 
     public StartPage() {
         BrowserApp.getAppComponent().inject(this);
-        mTitle = mApp.getString(R.string.home);
     }
 
     @NonNull
@@ -76,24 +43,14 @@ public class StartPage {
             @Override
             public void onSubscribe(@NonNull SingleSubscriber<String> subscriber) {
 
-                StringBuilder homepageBuilder = new StringBuilder(HEAD_1 + mTitle + HEAD_2);
-
-                BaseSearchEngine currentSearchEngine = mSearchEngineProvider.getCurrentSearchEngine();
-
-                String icon = currentSearchEngine.getIconUrl();
-                String searchUrl = currentSearchEngine.getQueryUrl();
-
-                homepageBuilder.append(icon);
-                homepageBuilder.append(MIDDLE);
-                homepageBuilder.append(searchUrl);
-                homepageBuilder.append(END);
+                HomePageBuilder homePageBuilder = new HomePageBuilder(mApp, mSearchEngineProvider);
 
                 File homepage = getStartPageFile(mApp);
                 FileWriter hWriter = null;
                 try {
                     //noinspection IOResourceOpenedButNotSafelyClosed
                     hWriter = new FileWriter(homepage, false);
-                    hWriter.write(homepageBuilder.toString());
+                    hWriter.write(homePageBuilder.buildPage());
                 } catch (IOException e) {
                     e.printStackTrace();
                 } finally {
diff --git a/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt
deleted file mode 100644
index eae95736..00000000
--- a/app/src/main/java/acr/browser/lightning/html/BookmarkPageBuilder.kt
+++ /dev/null
@@ -1,85 +0,0 @@
-package acr.browser.lightning.html
-
-import acr.browser.lightning.R
-import acr.browser.lightning.constant.Constants
-import acr.browser.lightning.database.HistoryItem
-import acr.browser.lightning.favicon.FaviconModel
-import acr.browser.lightning.favicon.FaviconUtils
-import android.app.Application
-import com.anthonycr.mezzanine.MezzanineGenerator
-import org.jsoup.Jsoup
-import java.io.File
-
-/**
- * A builder for the bookmark page.
- */
-class BookmarkPageBuilder(private val faviconModel: FaviconModel,
-                          private val app: Application) {
-
-    private val FOLDER_ICON = "folder.png"
-    private val DEFAULT_ICON = "default.png"
-    private val FILENAME = "bookmarks.html"
-
-    private fun getBookmarkPage(application: Application, folder: String?): File {
-        val prefix = if (folder != null) "$folder-" else ""
-        return File(application.filesDir, prefix + FILENAME)
-    }
-
-    private fun getFaviconFile(application: Application): File =
-            File(application.cacheDir, FOLDER_ICON)
-
-    private fun getDefaultIconFile(application: Application): File =
-            File(application.cacheDir, DEFAULT_ICON)
-
-    fun buildPage(bookmarkList: List<HistoryItem>): String {
-        val bookmarkPageReader = MezzanineGenerator.BookmarkPageReader()
-
-        val pageContents = bookmarkPageReader.provideString()
-
-        val document = Jsoup.parse(pageContents)
-        document.title(app.getString(R.string.action_bookmarks))
-
-        val body = document.body()
-        val repeatableElement = body.getElementById("repeated")
-        val container = body.getElementById("content")
-        repeatableElement.remove()
-
-        val folderIconPath = getFaviconFile(app).toString()
-
-        bookmarkList.forEach {
-            val newElement = repeatableElement.clone()
-            val iconUrl: String
-            val url: String
-
-            if (it.isFolder) {
-                val folderPage = getBookmarkPage(app, it.title)
-                iconUrl = folderIconPath
-                url = "${Constants.FILE}$folderPage"
-            } else {
-                val bookmarkUri = FaviconUtils.safeUri(it.url)
-
-                iconUrl = if (bookmarkUri != null) {
-                    val faviconFile = FaviconModel.getFaviconCacheFile(app, bookmarkUri)
-                    if (!faviconFile.exists()) {
-                        val defaultFavicon = faviconModel.getDefaultBitmapForString(it.title)
-                        faviconModel.cacheFaviconForUrl(defaultFavicon, it.url).subscribe()
-                    }
-
-                    "${Constants.FILE}$faviconFile"
-                } else {
-                    "${Constants.FILE}${getDefaultIconFile(app)}"
-                }
-
-                url = it.url
-            }
-
-            newElement.select("a").first().attr("href", url)
-            newElement.select("img").first().attr("src", iconUrl)
-            newElement.getElementById("title").appendText(it.title)
-            container.appendChild(newElement)
-        }
-
-        return document.outerHtml()
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt
new file mode 100644
index 00000000..2e86f7ba
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageBuilder.kt
@@ -0,0 +1,106 @@
+package acr.browser.lightning.html.bookmark
+
+import acr.browser.lightning.R
+import acr.browser.lightning.constant.Constants
+import acr.browser.lightning.database.HistoryItem
+import acr.browser.lightning.favicon.FaviconModel
+import acr.browser.lightning.favicon.FaviconUtils
+import android.app.Application
+import com.anthonycr.mezzanine.MezzanineGenerator
+import org.jsoup.Jsoup
+import java.io.File
+
+/**
+ * A builder for the bookmark page.
+ */
+class BookmarkPageBuilder(private val faviconModel: FaviconModel,
+                          private val app: Application) {
+
+    private data class BookmarkViewModel(val title: String, val url: String, val iconUrl: String)
+
+    companion object {
+        private const val FOLDER_ICON = "folder.png"
+        private const val DEFAULT_ICON = "default.png"
+        private const val FILENAME = "bookmarks.html"
+    }
+
+    private val folderIconPath = getFaviconFile(app).toString()
+
+    private fun getBookmarkPage(application: Application, folder: String?): File {
+        val prefix = if (folder != null) "$folder-" else ""
+        return File(application.filesDir, prefix + FILENAME)
+    }
+
+    private fun getFaviconFile(application: Application): File =
+            File(application.cacheDir, FOLDER_ICON)
+
+    private fun getDefaultIconFile(application: Application): File =
+            File(application.cacheDir, DEFAULT_ICON)
+
+    fun buildPage(bookmarkList: List<HistoryItem>): String {
+        val bookmarkPageReader = MezzanineGenerator.BookmarkPageReader()
+
+        val pageContents = bookmarkPageReader.provideHtml()
+
+        val document = Jsoup.parse(pageContents).apply {
+            title(app.getString(R.string.action_bookmarks))
+        }
+
+        val body = document.body()
+        val repeatableElement = body.getElementById("repeated")
+        val container = body.getElementById("content")
+        repeatableElement.remove()
+
+        bookmarkList.forEach {
+            val newElement = repeatableElement.clone()
+
+            val viewModel = if (it.isFolder) {
+                createViewModelForFolder(it)
+            } else {
+                createViewModelForBookmark(it)
+            }
+
+            newElement.select("a").first().attr("href", viewModel.url)
+            newElement.select("img").first().attr("src", viewModel.iconUrl)
+            newElement.getElementById("title").appendText(viewModel.title)
+            container.appendChild(newElement)
+        }
+
+        return document.outerHtml()
+    }
+
+    private fun createViewModelForFolder(historyItem: HistoryItem): BookmarkViewModel {
+        val folderPage = getBookmarkPage(app, historyItem.title)
+        val iconUrl = folderIconPath
+        val url = "${Constants.FILE}$folderPage"
+
+        return BookmarkViewModel(
+                title = historyItem.title,
+                url = url,
+                iconUrl = iconUrl
+        )
+    }
+
+    private fun createViewModelForBookmark(historyItem: HistoryItem): BookmarkViewModel {
+        val bookmarkUri = FaviconUtils.safeUri(historyItem.url)
+
+        val iconUrl = if (bookmarkUri != null) {
+            val faviconFile = FaviconModel.getFaviconCacheFile(app, bookmarkUri)
+            if (!faviconFile.exists()) {
+                val defaultFavicon = faviconModel.getDefaultBitmapForString(historyItem.title)
+                faviconModel.cacheFaviconForUrl(defaultFavicon, historyItem.url).subscribe()
+            }
+
+            "${Constants.FILE}$faviconFile"
+        } else {
+            "${Constants.FILE}${getDefaultIconFile(app)}"
+        }
+
+        return BookmarkViewModel(
+                title = historyItem.title,
+                url = historyItem.url,
+                iconUrl = iconUrl
+        )
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageReader.kt
similarity index 69%
rename from app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt
rename to app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageReader.kt
index 595475f5..e8cfd38a 100644
--- a/app/src/main/java/acr/browser/lightning/html/BookmarkPageReader.kt
+++ b/app/src/main/java/acr/browser/lightning/html/bookmark/BookmarkPageReader.kt
@@ -1,4 +1,4 @@
-package acr.browser.lightning.html
+package acr.browser.lightning.html.bookmark
 
 import com.anthonycr.mezzanine.FileStream
 
@@ -8,6 +8,6 @@ import com.anthonycr.mezzanine.FileStream
 @FileStream("app/src/main/html/bookmarks.html")
 interface BookmarkPageReader {
 
-    fun provideString(): String
+    fun provideHtml(): String
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/homepage/HomePageBuilder.kt b/app/src/main/java/acr/browser/lightning/html/homepage/HomePageBuilder.kt
new file mode 100644
index 00000000..f6c23935
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/homepage/HomePageBuilder.kt
@@ -0,0 +1,39 @@
+package acr.browser.lightning.html.homepage
+
+import acr.browser.lightning.R
+import acr.browser.lightning.search.SearchEngineProvider
+import android.app.Application
+import com.anthonycr.mezzanine.MezzanineGenerator
+import org.jsoup.Jsoup
+
+/**
+ * A builder for the home page.
+ */
+class HomePageBuilder(private val app: Application,
+                      private val searchEngineProvider: SearchEngineProvider) {
+
+
+    fun buildPage(): String {
+        val html = MezzanineGenerator.HomePageReader().provideHtml()
+
+        val document = Jsoup.parse(html).apply {
+            title(app.getString(R.string.action_bookmarks))
+        }
+
+        val currentSearchEngine = searchEngineProvider.getCurrentSearchEngine()
+
+        val iconUrl = currentSearchEngine.iconUrl
+        val searchUrl = currentSearchEngine.queryUrl
+
+        val body = document.body()
+
+        body.getElementById("image_url").attr("src", iconUrl)
+
+        val javaScriptTag = document.getElementsByTag("script")
+        val javaScript = javaScriptTag.html()
+        val newJavaScript = javaScript.replace("\${BASE_URL}", searchUrl)
+        javaScriptTag.html(newJavaScript)
+
+        return document.outerHtml()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/acr/browser/lightning/html/homepage/HomePageReader.kt b/app/src/main/java/acr/browser/lightning/html/homepage/HomePageReader.kt
new file mode 100644
index 00000000..a1daeb1d
--- /dev/null
+++ b/app/src/main/java/acr/browser/lightning/html/homepage/HomePageReader.kt
@@ -0,0 +1,13 @@
+package acr.browser.lightning.html.homepage
+
+import com.anthonycr.mezzanine.FileStream
+
+/**
+ * The store for the homepage HTML.
+ */
+@FileStream("app/src/main/html/homepage.html")
+interface HomePageReader {
+
+    fun provideHtml(): String
+
+}
\ No newline at end of file
