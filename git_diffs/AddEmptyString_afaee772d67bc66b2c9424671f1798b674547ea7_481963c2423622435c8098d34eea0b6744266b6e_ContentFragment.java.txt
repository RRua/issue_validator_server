M	QuoteUnquote.cloudLib
M	QuoteUnquote.cloudLib.functions
M	QuoteUnquote.utilsLib
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelperTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelperTest.kt
deleted file mode 100644
index 08bf830..0000000
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelperTest.kt
+++ /dev/null
@@ -1,97 +0,0 @@
-package com.github.jameshnsears.quoteunquote
-
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection
-import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Test
-
-class PackageReplacedHelperTest : QuoteUnquoteModelUtility() {
-    @Test
-    fun alignHistoryWithQuotations() {
-        insertQuotationTestData01()
-
-        confirmPreviousIsEmpty()
-
-        createDigestsNotInQuotationsDatabase()
-
-        val packageReplacedHelper = PackageReplacedHelper(WidgetIdHelper.WIDGET_ID_01, context)
-        packageReplacedHelper.alignHistoryWithQuotations(quoteUnquoteModelDouble)
-
-        confirmPreviousIsEmpty()
-    }
-
-    private fun confirmPreviousIsEmpty() {
-        assertFalse(
-            databaseRepositoryDouble.getPreviousDigests(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.ALL
-            ).contains("all-0")
-        )
-
-        assertEquals(
-            0,
-            databaseRepositoryDouble.countPrevious(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.AUTHOR,
-            )
-        )
-
-        assertEquals(
-            0,
-            databaseRepositoryDouble.countPrevious(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.SEARCH,
-            )
-        )
-
-        assertEquals(
-            0,
-            databaseRepositoryDouble.countFavourites().blockingGet()
-        )
-    }
-
-    private fun createDigestsNotInQuotationsDatabase() {
-        databaseRepositoryDouble.markAsPrevious(
-            WidgetIdHelper.WIDGET_ID_01,
-            ContentSelection.ALL,
-            "all-0"
-        )
-        assertEquals(
-            1,
-            databaseRepositoryDouble.countPrevious(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.ALL,
-            )
-        )
-
-        databaseRepositoryDouble.markAsPrevious(
-            WidgetIdHelper.WIDGET_ID_01,
-            ContentSelection.AUTHOR,
-            "author-0"
-        )
-        assertEquals(
-            1,
-            databaseRepositoryDouble.countPrevious(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.AUTHOR,
-            )
-        )
-
-        databaseRepositoryDouble.markAsPrevious(
-            WidgetIdHelper.WIDGET_ID_01,
-            ContentSelection.SEARCH,
-            "search-0"
-        )
-        assertEquals(
-            1,
-            databaseRepositoryDouble.countPrevious(
-                WidgetIdHelper.WIDGET_ID_01,
-                ContentSelection.SEARCH,
-            )
-        )
-
-        databaseRepositoryDouble.markAsFavourite("favourite-0")
-        assertEquals(1, databaseRepositoryDouble.countFavourites().blockingGet())
-    }
-}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
index 3b42fba..b26f79d 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelDouble.java
@@ -2,8 +2,6 @@ package com.github.jameshnsears.quoteunquote;
 
 import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
 
-import androidx.annotation.NonNull;
-
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepositoryDouble;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
@@ -12,26 +10,21 @@ import java.util.List;
 
 public class QuoteUnquoteModelDouble extends QuoteUnquoteModel {
     public QuoteUnquoteModelDouble() {
-        this.context = getApplicationContext();
-        this.databaseRepository = DatabaseRepositoryDouble.getInstance();
+        context = getApplicationContext();
+        databaseRepository = DatabaseRepositoryDouble.getInstance();
     }
 
     public int countReported() {
         return DatabaseRepositoryDouble.getInstance().countReported();
     }
 
-    @NonNull
-    public List<String> getFavourites() {
-        return this.databaseRepository.getFavourites();
-    }
-
-    public int countPrevious(int widgetId) {
-        return this.databaseRepository.countPrevious(widgetId, ContentSelection.ALL)
-                + this.databaseRepository.countPrevious(widgetId, ContentSelection.AUTHOR)
-                + this.databaseRepository.countPrevious(widgetId, ContentSelection.SEARCH);
+    public int countPrevious(final int widgetId) {
+        return databaseRepository.countPrevious(widgetId, ContentSelection.ALL)
+                + databaseRepository.countPrevious(widgetId, ContentSelection.AUTHOR)
+                + databaseRepository.countPrevious(widgetId, ContentSelection.SEARCH);
     }
 
     public List<QuotationEntity> getAllQuotations() {
-        return databaseRepository.getAllQuotations();
+        return this.databaseRepository.getAllQuotations();
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt
new file mode 100644
index 0000000..ac62b88
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModelTest.kt
@@ -0,0 +1,36 @@
+package com.github.jameshnsears.quoteunquote
+
+import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class QuoteUnquoteModelTest : QuoteUnquoteModelUtility() {
+    @Test
+    fun countAll() {
+        insertQuotationTestData01()
+        assertEquals(2, quoteUnquoteModelDouble.countAll().blockingGet())
+    }
+
+    @Test
+    fun authorsSorted() {
+        val sortedList =
+            quoteUnquoteModelDouble.authorsSorted(
+                mutableListOf(
+                    AuthorPOJO("c"), AuthorPOJO("b"), AuthorPOJO("a")
+                )
+            )
+
+        assertTrue(sortedList[0].equals("a"))
+        assertTrue(sortedList[2].equals("c"))
+    }
+
+    @Test
+    fun countAuthorQuotations() {
+        val authorPOJO = AuthorPOJO("a2")
+        authorPOJO.count = 2
+        quoteUnquoteModelDouble.cachedAuthorPOJOList = mutableListOf(authorPOJO)
+
+        assertEquals(2, quoteUnquoteModelDouble.countAuthorQuotations("a2"))
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
index 0714703..f4dcba0 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDeletedTest.kt
@@ -2,7 +2,7 @@ package com.github.jameshnsears.quoteunquote
 
 import android.os.Build
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferPreferences
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import io.mockk.every
@@ -23,20 +23,23 @@ class WidgetDeletedTest : QuoteUnquoteModelUtility() {
             every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
 
             quoteUnquoteWidget.onEnabled(context)
-            val contentPreferences = ContentPreferences(context)
-            assertTrue(contentPreferences.contentFavouritesLocalCode.length == 10)
+            val transferPreferences =
+                TransferPreferences(
+                    context
+                )
+            assertTrue(transferPreferences.transferLocalCode.length == 10)
             quoteUnquoteWidget.onDeleted(context, intArrayOf(WidgetIdHelper.WIDGET_ID_01))
 
             assertDatabase()
-            assertSharedPreferences(contentPreferences)
+            assertSharedPreferences(transferPreferences)
         }
     }
 
-    private fun assertSharedPreferences(contentPreferences: ContentPreferences) {
+    private fun assertSharedPreferences(transferPreferences: TransferPreferences) {
         assertEquals(0, PreferencesFacade.countPreferences(context, WidgetIdHelper.WIDGET_ID_01))
         assertEquals(1, PreferencesFacade.countPreferences(context, WidgetIdHelper.WIDGET_ID_02))
 
-        assertFalse(contentPreferences.contentFavouritesLocalCode.isEmpty())
+        assertFalse(transferPreferences.transferLocalCode.isEmpty())
     }
 
     private fun assertDatabase() {
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
index bafc38c..61ee640 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetDisabledTest.kt
@@ -1,7 +1,7 @@
 package com.github.jameshnsears.quoteunquote
 
 import android.os.Build
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferPreferences
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import io.mockk.every
@@ -21,18 +21,21 @@ open class WidgetDisabledTest : QuoteUnquoteModelUtility() {
             every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
 
             quoteUnquoteWidget.onEnabled(context)
-            val contentPreferences = ContentPreferences(context)
-            assertTrue(contentPreferences.contentFavouritesLocalCode.length == 10)
+            val contentPreferences =
+                TransferPreferences(
+                    context
+                )
+            assertTrue(contentPreferences.transferLocalCode.length == 10)
             quoteUnquoteWidget.onDisabled(context)
 
             assertSharedPreferences(contentPreferences)
         }
     }
 
-    private fun assertSharedPreferences(contentPreferences: ContentPreferences) {
+    private fun assertSharedPreferences(quotationsPreferences: TransferPreferences) {
         assertEquals(0, PreferencesFacade.countPreferences(context, WidgetIdHelper.WIDGET_ID_01))
         // key exist's we jave haven't defined a value
-        assertFalse(contentPreferences.contentFavouritesLocalCode.isEmpty())
+        assertFalse(quotationsPreferences.transferLocalCode.isEmpty())
     }
 
     private fun setupDatabase() {
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt
index da8c0f7..12bd3e9 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFavouriteTest.kt
@@ -14,7 +14,9 @@ class WidgetToolbarFavouriteTest : QuoteUnquoteModelUtility() {
         assertTrue(quoteUnquoteModelDouble.countFavourites().blockingGet() == 0)
         assertFalse(databaseRepositoryDouble.isFavourite(getDefaultQuotation().digest))
 
-        markDefaultQuotationAsFavourite()
+        quoteUnquoteModelDouble.toggleFavourite(
+            WidgetIdHelper.WIDGET_ID_01, DatabaseRepository.getDefaultQuotationDigest()
+        )
 
         assertTrue(databaseRepositoryDouble.isFavourite(getDefaultQuotation().digest))
         assertTrue(quoteUnquoteModelDouble.countFavourites().blockingGet() == 1)
@@ -22,7 +24,5 @@ class WidgetToolbarFavouriteTest : QuoteUnquoteModelUtility() {
         quoteUnquoteModelDouble.toggleFavourite(
             WidgetIdHelper.WIDGET_ID_01, DatabaseRepository.getDefaultQuotationDigest()
         )
-
-        assertTrue(quoteUnquoteModelDouble.countFavourites().blockingGet() == 0)
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
index 3eef434..fbcba20 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarFirstTest.kt
@@ -2,7 +2,7 @@ package com.github.jameshnsears.quoteunquote
 
 import android.appwidget.AppWidgetManager
 import android.os.Build
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import io.mockk.every
@@ -20,7 +20,12 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
 
         every { quoteUnquoteWidget.getQuoteUnquoteModel(any()) } returns quoteUnquoteModelDouble
 
-        every { appWidgetManager.notifyAppWidgetViewDataChanged(WidgetIdHelper.WIDGET_ID_01, any()) } returns Unit
+        every {
+            appWidgetManager.notifyAppWidgetViewDataChanged(
+                WidgetIdHelper.WIDGET_ID_01,
+                any()
+            )
+        } returns Unit
 
         quoteUnquoteWidget.onEnabled(context)
     }
@@ -35,8 +40,12 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
                 getDefaultQuotation().digest
             )
 
-            val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-            contentPreferences.contentSelection = ContentSelection.ALL
+            val quotationsPreferences =
+                QuotationsPreferences(
+                    WidgetIdHelper.WIDGET_ID_01,
+                    context
+                )
+            quotationsPreferences.contentSelection = ContentSelection.ALL
 
             onReceiveToolbarPressedFirst(quoteUnquoteWidget, appWidgetManager)
             assertEquals(
@@ -51,8 +60,12 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
             setup()
 
-            val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-            contentPreferences.contentSelection = ContentSelection.FAVOURITES
+            val quotationsPreferences =
+                QuotationsPreferences(
+                    WidgetIdHelper.WIDGET_ID_01,
+                    context
+                )
+            quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
 
             databaseRepositoryDouble.markAsFavourite(getDefaultQuotation().digest)
             onReceiveToolbarPressedFirst(quoteUnquoteWidget, appWidgetManager)
@@ -64,9 +77,13 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
             setup()
 
-            val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-            contentPreferences.contentSelection = ContentSelection.AUTHOR
-            contentPreferences.contentSelectionAuthor = "a0"
+            val quotationsPreferences =
+                QuotationsPreferences(
+                    WidgetIdHelper.WIDGET_ID_01,
+                    context
+                )
+            quotationsPreferences.contentSelection = ContentSelection.AUTHOR
+            quotationsPreferences.contentSelectionAuthor = "a0"
 
             onReceiveToolbarPressedFirst(quoteUnquoteWidget, appWidgetManager)
             assertEquals(
@@ -81,9 +98,13 @@ class WidgetToolbarFirstTest : QuoteUnquoteModelUtility() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
             setup()
 
-            val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-            contentPreferences.contentSelection = ContentSelection.AUTHOR
-            contentPreferences.contentSelectionAuthor = "a0"
+            val quotationsPreferences =
+                QuotationsPreferences(
+                    WidgetIdHelper.WIDGET_ID_01,
+                    context
+                )
+            quotationsPreferences.contentSelection = ContentSelection.AUTHOR
+            quotationsPreferences.contentSelectionAuthor = "a0"
 
             onReceiveToolbarPressedFirst(quoteUnquoteWidget, appWidgetManager)
             assertEquals(
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt
index c853e90..46303d4 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarNextTest.kt
@@ -1,6 +1,6 @@
 package com.github.jameshnsears.quoteunquote
 
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
@@ -27,8 +27,12 @@ class WidgetToolbarNextTest : QuoteUnquoteModelUtility() {
     private fun moveThroughContentSelection(randomNext: Boolean) {
         insertQuotationTestData01()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.ALL
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.ALL
 
         assertEquals(
             0,
@@ -50,9 +54,13 @@ class WidgetToolbarNextTest : QuoteUnquoteModelUtility() {
         insertQuotationTestData02()
         insertQuotationTestData03()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.AUTHOR
-        contentPreferences.contentSelectionAuthor = "a2"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.AUTHOR
+        quotationsPreferences.contentSelectionAuthor = "a2"
 
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
@@ -71,19 +79,23 @@ class WidgetToolbarNextTest : QuoteUnquoteModelUtility() {
     fun nextFavourite() {
         insertQuotationTestData01()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.FAVOURITES
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
 
         assertEquals(
             0,
-            databaseRepositoryDouble.countNext(contentPreferences)
+            databaseRepositoryDouble.countNext(quotationsPreferences)
         )
 
         markDefaultQuotationAsFavourite()
 
         assertEquals(
             1,
-            databaseRepositoryDouble.countNext(contentPreferences)
+            databaseRepositoryDouble.countNext(quotationsPreferences)
         )
 
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
@@ -104,9 +116,13 @@ class WidgetToolbarNextTest : QuoteUnquoteModelUtility() {
 
         assertEquals(0, quoteUnquoteModelDouble.countPrevious(WidgetIdHelper.WIDGET_ID_01))
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.SEARCH
-        contentPreferences.contentSelectionSearch = "q1"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.SEARCH
+        quotationsPreferences.contentSelectionSearch = "q1"
 
         for (i in 1..4) {
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
index e5b0da5..554dd02 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarPreviousTest.kt
@@ -1,6 +1,6 @@
 package com.github.jameshnsears.quoteunquote
 
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import junit.framework.TestCase.assertEquals
@@ -30,12 +30,16 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
 
         databaseRepositoryDouble.markAsCurrent(WidgetIdHelper.WIDGET_ID_01, "d3")
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
 
         assertEquals(
             4,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
@@ -44,7 +48,7 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
         assertEquals(
             1,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
@@ -66,21 +70,25 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
     fun noMoreNext() {
         insertQuotationTestData02()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.ALL
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.ALL
 
-        pressNext(contentPreferences, "d2", "1/3", false)
-        pressNext(contentPreferences, "d3", "2/3", false)
-        pressPrevious(contentPreferences, "d2", "1/3")
-        pressNext(contentPreferences, "d3", "2/3", false)
-        pressNext(contentPreferences, "d4", "3/3", false)
+        pressNext(quotationsPreferences, "d2", "1/3", false)
+        pressNext(quotationsPreferences, "d3", "2/3", false)
+        pressPrevious(quotationsPreferences, "d2", "1/3")
+        pressNext(quotationsPreferences, "d3", "2/3", false)
+        pressNext(quotationsPreferences, "d4", "3/3", false)
 
-        pressNext(contentPreferences, "d4", "3/3", false)
-        pressPrevious(contentPreferences, "d3", "2/3")
+        pressNext(quotationsPreferences, "d4", "3/3", false)
+        pressPrevious(quotationsPreferences, "d3", "2/3")
     }
 
     private fun pressPrevious(
-        contentPreferences: ContentPreferences,
+        quotationsPreferences: QuotationsPreferences,
         digestIfExpected: String,
         expectedPosition: String,
     ) {
@@ -97,12 +105,15 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
 
         assertEquals(
             expectedPosition,
-            quoteUnquoteModelDouble.getCurrentPosition(WidgetIdHelper.WIDGET_ID_01, contentPreferences)
+            quoteUnquoteModelDouble.getCurrentPosition(
+                WidgetIdHelper.WIDGET_ID_01,
+                quotationsPreferences
+            )
         )
     }
 
     private fun pressNext(
-        contentPreferences: ContentPreferences,
+        quotationsPreferences: QuotationsPreferences,
         digestIfExpected: String,
         expectedPosition: String,
         random: Boolean
@@ -120,7 +131,7 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
         assertEquals(
             expectedPosition,
             quoteUnquoteModelDouble.getCurrentPosition(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
@@ -129,15 +140,19 @@ class WidgetToolbarPreviousTest : QuoteUnquoteModelUtility() {
     fun lastNextRandom() {
         insertQuotationTestData02()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.ALL
-
-        pressNext(contentPreferences, "", "1/3", true)
-        pressNext(contentPreferences, "", "2/3", true)
-        pressPrevious(contentPreferences, "", "1/3")
-        pressNext(contentPreferences, "", "3/3", true)
-        pressPrevious(contentPreferences, "", "2/3")
-        pressNext(contentPreferences, "", "3/3", true)
-        pressNext(contentPreferences, "", "3/3", true)
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.ALL
+
+        pressNext(quotationsPreferences, "", "1/3", true)
+        pressNext(quotationsPreferences, "", "2/3", true)
+        pressPrevious(quotationsPreferences, "", "1/3")
+        pressNext(quotationsPreferences, "", "3/3", true)
+        pressPrevious(quotationsPreferences, "", "2/3")
+        pressNext(quotationsPreferences, "", "3/3", true)
+        pressNext(quotationsPreferences, "", "3/3", true)
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
index c1fe62f..1463e4d 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/WidgetToolbarRandomizationTest.kt
@@ -4,8 +4,8 @@ import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.logging.MethodLineLoggingTree
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import junit.framework.TestCase.assertEquals
-import junit.framework.TestCase.assertTrue
 import junit.framework.TestCase.assertFalse
+import junit.framework.TestCase.assertTrue
 import org.junit.Before
 import org.junit.Test
 import timber.log.Timber
@@ -27,7 +27,7 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
             Timber.plant(MethodLineLoggingTree())
         }
 
-        databaseRepositoryDouble.erase()
+        databaseRepositoryDouble.eraseEverything()
         insertQuotationTestData01()
         insertQuotationTestData02()
         insertQuotationTestData03()
@@ -50,7 +50,7 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
         }
 
-        var actualPreviousOrder = quoteUnquoteModelDouble.databaseRepository?.getPreviousDigests(
+        val actualPreviousOrder = quoteUnquoteModelDouble.databaseRepository?.getPreviousDigests(
             WidgetIdHelper.WIDGET_ID_01,
             ContentSelection.ALL
         )
@@ -60,7 +60,7 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
     }
 
     private fun assertInsertionOrder(expectedAllQuotationsOrder: MutableList<String>) {
-        var actualAllQuotationsOrder = mutableListOf<String>()
+        val actualAllQuotationsOrder = mutableListOf<String>()
         for (quotationEntity in quoteUnquoteModelDouble.allQuotations) {
             actualAllQuotationsOrder.add(quotationEntity.digest)
         }
@@ -77,7 +77,7 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
             quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, true)
         }
 
-        var actualPreviousOrder = quoteUnquoteModelDouble.databaseRepository?.getPreviousDigests(
+        val actualPreviousOrder = quoteUnquoteModelDouble.databaseRepository?.getPreviousDigests(
             WidgetIdHelper.WIDGET_ID_01,
             ContentSelection.ALL
         )
@@ -85,16 +85,4 @@ class WidgetToolbarRandomizationTest : QuoteUnquoteModelUtility() {
 
         assertFalse(expectedAllSequentialOrder == actualPreviousOrder)
     }
-
-    /*
-    "the randomize button stopped randomizing and instead behaves identical to the sequential button"
-
-    Adam Smith @ 1/6 + Sequential button presses:
-    1. Man
-    2. Labour
-    3. The
-    4. It
-    5. People
-    6. There
-     */
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt
new file mode 100644
index 0000000..4f11a05
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceTest.kt
@@ -0,0 +1,15 @@
+package com.github.jameshnsears.quoteunquote.cloud
+
+import org.junit.Test
+
+class CloudServiceTest {
+    @Test
+    fun cloudServiceBackupTest() {
+        // WIP: 13-transfer_backup_restore
+    }
+
+    @Test
+    fun cloudServiceRestoreTest() {
+        // WIP: 13-transfer_backup_restore
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/GsonTestHelper.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/GsonTestHelper.kt
new file mode 100644
index 0000000..bc863ae
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/GsonTestHelper.kt
@@ -0,0 +1,13 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer
+
+import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
+import com.google.gson.Gson
+import com.google.gson.GsonBuilder
+
+open class GsonTestHelper : DatabaseTestHelper() {
+    fun gson(): Gson {
+        val builder = GsonBuilder()
+        builder.setPrettyPrinting()
+        return builder.create()
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt
new file mode 100644
index 0000000..ccbf6d4
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrentTest.kt
@@ -0,0 +1,49 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.os.Build
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Current
+import com.github.jameshnsears.quoteunquote.cloud.transfer.GsonTestHelper
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import io.mockk.every
+import io.mockk.mockkObject
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class TransferBackupCurrentTest : GsonTestHelper() {
+    @Test
+    fun current() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            insertQuotationTestData01()
+            insertQuotationTestData02()
+
+            setupTestData()
+
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(12, 13)
+
+            assertEquals(
+                gson().toJson(expectedCurrent()),
+                gson().toJson(TransferBackupCurrent(context).current(databaseRepositoryDouble))
+            )
+        }
+    }
+
+    fun setupTestData() {
+        setDefaultQuotationAll(12)
+        setDefaultQuotationAll(13)
+    }
+
+    fun expectedCurrent(): List<Current> {
+        setupTestData()
+
+        val currentList = mutableListOf<Current>()
+        currentList.add(
+            Current("7a36e553", 12)
+        )
+        currentList.add(
+            Current("7a36e553", 13)
+        )
+
+        return currentList
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt
new file mode 100644
index 0000000..5dc2436
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavouriteTest.kt
@@ -0,0 +1,26 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class TransferBackupFavouriteTest : DatabaseTestHelper() {
+    @Test
+    fun favourite() {
+        insertQuotationTestData01()
+        insertQuotationTestData02()
+
+        setupTestData()
+
+        val favouritesList = TransferBackupFavourite().favourite(databaseRepositoryDouble)
+        assertTrue(favouritesList.size == 2)
+        assertEquals(favouritesList[0].digest, "11111111")
+        assertEquals(favouritesList[1].digest, "00000000")
+    }
+
+    fun setupTestData() {
+        databaseRepositoryDouble.markAsFavourite("00000000")
+        databaseRepositoryDouble.markAsFavourite("11111111")
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt
new file mode 100644
index 0000000..cb31f33
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPreviousTest.kt
@@ -0,0 +1,36 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.os.Build
+import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class TransferBackupPreviousTest : DatabaseTestHelper() {
+    @Test
+    fun previous() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            insertQuotationTestData01()
+            insertQuotationTestData02()
+
+            setupTestData()
+
+            val previousList = TransferBackupPrevious().previous(databaseRepositoryDouble)
+            assertTrue(previousList.size == 4)
+            assertEquals(previousList[0].contentType, 4)
+            assertEquals(previousList[0].digest, "d3")
+            assertEquals(previousList[0].widgetId, 13)
+            assertEquals(previousList[1].contentType, 3)
+            assertEquals(previousList[1].digest, "d1")
+            assertEquals(previousList[1].widgetId, 12)
+        }
+    }
+
+    fun setupTestData() {
+        databaseRepositoryDouble.markAsPrevious(12, ContentSelection.ALL, "d4")
+        databaseRepositoryDouble.markAsPrevious(13, ContentSelection.FAVOURITES, "d2")
+        databaseRepositoryDouble.markAsPrevious(12, ContentSelection.AUTHOR, "d1")
+        databaseRepositoryDouble.markAsPrevious(13, ContentSelection.SEARCH, "d3")
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
new file mode 100644
index 0000000..57b4614
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettingsTest.kt
@@ -0,0 +1,118 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.os.Build
+import androidx.test.core.app.ApplicationProvider.getApplicationContext
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Appearance
+import com.github.jameshnsears.quoteunquote.cloud.transfer.GsonTestHelper
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Quotations
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Schedule
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Settings
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import io.mockk.every
+import io.mockk.mockkObject
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class TransferBackupSettingsTest : GsonTestHelper() {
+    @Test
+    fun settingsQuotations() {
+        assertEquals(
+            gson().toJson(expectedQuotations()),
+            gson().toJson(
+                TransferBackupSettings(context).settingsQuotations(
+                    1, getApplicationContext()
+                )
+            )
+        )
+    }
+
+    @Test
+    fun settingsAppearance() {
+        assertEquals(
+            gson().toJson(expectedAppearance()),
+            gson().toJson(
+                TransferBackupSettings(context).settingsAppearance(
+                    1, getApplicationContext()
+                )
+            )
+        )
+    }
+
+    @Test
+    fun settingsSchedule() {
+        assertEquals(
+            gson().toJson(expectedSchedule()),
+            gson().toJson(
+                TransferBackupSettings(context).settingsSchedule(
+                    1, getApplicationContext()
+                )
+            )
+        )
+    }
+
+    @Test
+    fun settings() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(1)
+
+            assertEquals(
+                gson().toJson(expectedSettings()),
+                gson().toJson(TransferBackupSettings(context).settings())
+            )
+        }
+    }
+
+    fun expectedSettings(): List<Settings> {
+        val settingsList = mutableListOf<Settings>()
+
+        settingsList.add(
+            Settings(
+                expectedQuotations(),
+                expectedAppearance(),
+                expectedSchedule(),
+                1
+            )
+        )
+
+        return settingsList
+    }
+
+    private fun expectedSchedule() = Schedule(
+        true,
+        false,
+        true,
+        false,
+        false,
+        false,
+        -1,
+        -1
+    )
+
+    private fun expectedAppearance() = Appearance(
+        -1,
+        "#FFF8FD89",
+        "Sans Serif",
+        "Regular",
+        16,
+        "#FF000000",
+        "",
+        false,
+        true,
+        true,
+        true,
+        true,
+        false
+    )
+
+    private fun expectedQuotations() = Quotations(
+        true,
+        true,
+        false,
+        "",
+        false,
+        false,
+        -1,
+        ""
+    )
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt
new file mode 100644
index 0000000..46fafc8
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupTest.kt
@@ -0,0 +1,186 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.os.Build
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.database.DatabaseTestHelper
+import io.mockk.every
+import io.mockk.mockkObject
+import io.mockk.spyk
+import org.junit.Assert
+import org.junit.Test
+
+class TransferBackupTest : DatabaseTestHelper() {
+    /*
+    {
+      "code": "012345672e",
+      "settings": [
+        {
+          "quotations": {
+            "CONTENT_ADD_TO_PREVIOUS_ALL": true,
+            "CONTENT_ALL": false,
+            "CONTENT_AUTHOR": false,
+            "CONTENT_AUTHOR_NAME": "",
+            "CONTENT_FAVOURITES": false,
+            "CONTENT_SEARCH": false,
+            "CONTENT_SEARCH_COUNT": -1,
+            "CONTENT_SEARCH_TEXT": ""
+          },
+          "appearance": {
+            "APPEARANCE_TRANSPARENCY": -1,
+            "APPEARANCE_COLOUR": "#FFF8FD89",
+            "APPEARANCE_TEXT_FAMILY": "Sans Serif",
+            "APPEARANCE_TEXT_STYLE": "Regular",
+            "APPEARANCE_TEXT_SIZE": 16,
+            "APPEARANCE_TEXT_COLOUR": "#FF000000",
+            "APPEARANCE_TOOLBAR_COLOUR": "",
+            "APPEARANCE_TOOLBAR_FIRST": false,
+            "APPEARANCE_TOOLBAR_PREVIOUS": true,
+            "APPEARANCE_TOOLBAR_FAVOURITE": true,
+            "APPEARANCE_TOOLBAR_SHARE": true,
+            "APPEARANCE_TOOLBAR_RANDOM": true,
+            "APPEARANCE_TOOLBAR_SEQUENTIAL": false
+          },
+          "schedule": {
+            "EVENT_NEXT_RANDOM": true,
+            "EVENT_NEXT_SEQUENTIAL": false,
+            "EVENT_DISPLAY_WIDGET": true,
+            "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": false,
+            "EVENT_DAILY": false,
+            "EVENT_DEVICE_UNLOCK": false,
+            "EVENT_DAILY_MINUTE": -1,
+            "EVENT_DAILY_HOUR": -1
+          },
+          "widget_id": 12
+        },
+        {
+          "quotations": {
+            "CONTENT_ADD_TO_PREVIOUS_ALL": true,
+            "CONTENT_ALL": false,
+            "CONTENT_AUTHOR": false,
+            "CONTENT_AUTHOR_NAME": "",
+            "CONTENT_FAVOURITES": false,
+            "CONTENT_SEARCH": false,
+            "CONTENT_SEARCH_COUNT": -1,
+            "CONTENT_SEARCH_TEXT": ""
+          },
+          "appearance": {
+            "APPEARANCE_TRANSPARENCY": -1,
+            "APPEARANCE_COLOUR": "#FFF8FD89",
+            "APPEARANCE_TEXT_FAMILY": "Sans Serif",
+            "APPEARANCE_TEXT_STYLE": "Regular",
+            "APPEARANCE_TEXT_SIZE": 16,
+            "APPEARANCE_TEXT_COLOUR": "#FF000000",
+            "APPEARANCE_TOOLBAR_COLOUR": "",
+            "APPEARANCE_TOOLBAR_FIRST": false,
+            "APPEARANCE_TOOLBAR_PREVIOUS": true,
+            "APPEARANCE_TOOLBAR_FAVOURITE": true,
+            "APPEARANCE_TOOLBAR_SHARE": true,
+            "APPEARANCE_TOOLBAR_RANDOM": true,
+            "APPEARANCE_TOOLBAR_SEQUENTIAL": false
+          },
+          "schedule": {
+            "EVENT_NEXT_RANDOM": true,
+            "EVENT_NEXT_SEQUENTIAL": false,
+            "EVENT_DISPLAY_WIDGET": true,
+            "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION": false,
+            "EVENT_DAILY": false,
+            "EVENT_DEVICE_UNLOCK": false,
+            "EVENT_DAILY_MINUTE": -1,
+            "EVENT_DAILY_HOUR": -1
+          },
+          "widget_id": 13
+        }
+      ],
+      "current": [
+        {
+          "digest": "7a36e553",
+          "widget_id": 12
+        },
+        {
+          "digest": "7a36e553",
+          "widget_id": 13
+        }
+      ],
+      "previous": [
+        {
+          "content_type": 4,
+          "digest": "d3",
+          "navigation": 6,
+          "widget_id": 13
+        },
+        {
+          "content_type": 3,
+          "digest": "d1",
+          "navigation": 5,
+          "widget_id": 12
+        },
+        {
+          "content_type": 2,
+          "digest": "d2",
+          "navigation": 4,
+          "widget_id": 13
+        },
+        {
+          "content_type": 1,
+          "digest": "d4",
+          "navigation": 3,
+          "widget_id": 12
+        },
+        {
+          "content_type": 1,
+          "digest": "7a36e553",
+          "navigation": 2,
+          "widget_id": 13
+        },
+        {
+          "content_type": 1,
+          "digest": "7a36e553",
+          "navigation": 1,
+          "widget_id": 12
+        }
+      ],
+      "favourite": [
+        {
+          "digest": "d4",
+          "navigation": 2
+        },
+        {
+          "digest": "d2",
+          "navigation": 1
+        }
+      ]
+    }
+    */
+
+    @Test
+    fun transfer() {
+        val transferCurrentTest = TransferBackupCurrentTest()
+        val transferPreviousTest = TransferBackupPreviousTest()
+        val transferFavouriteTest = TransferBackupFavouriteTest()
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            insertQuotationTestData01()
+            insertQuotationTestData02()
+
+            val backupTransfer = spyk(TransferBackup(context))
+            val transferCode = "012345672e"
+            every { backupTransfer.getLocalCode() } returns transferCode
+
+            mockkObject(TransferUtility)
+            every { TransferUtility.getWidgetIds(context) } returns intArrayOf(12, 13)
+
+            transferCurrentTest.setupTestData()
+            transferPreviousTest.setupTestData()
+            transferFavouriteTest.setupTestData()
+
+            val transfer = backupTransfer.transfer(databaseRepositoryDouble)
+            Assert.assertEquals(transfer.code, transferCode)
+
+            Assert.assertNotNull(transfer.settings)
+            Assert.assertEquals(transfer.settings.size, 2)
+            Assert.assertNotNull(transfer.current)
+            Assert.assertNotNull(transfer.previous)
+            Assert.assertNotNull(transfer.favourites)
+        }
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetToOneWidgetTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetToOneWidgetTest.kt
new file mode 100644
index 0000000..1140229
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreOneWidgetToOneWidgetTest.kt
@@ -0,0 +1,93 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
+
+import android.os.Build
+import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class RestoreOneWidgetToOneWidgetTest : TransferRestoreUtility() {
+    @Test
+    fun restoreIntoOneWidget() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            // set up
+            setupWidgets(intArrayOf(1))
+
+            // restore
+            val restoreTransfer = getTransferAsset("restore_one_widget.json")
+            TransferRestore().restore(context, databaseRepositoryDouble, restoreTransfer)
+
+            // assert
+            val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
+
+            assertEquals(getLocalCode(), backupTransfer.code)
+
+            assertTrue(backupTransfer.current.size == 1)
+            assertTrue(backupTransfer.favourites.isEmpty())
+            assertTrue(backupTransfer.previous.size == 1)
+
+            assertTrue(backupTransfer.settings.size == 1)
+            assertEquals(
+                restoreTransfer.settings[0].appearance,
+                backupTransfer.settings[0].appearance,
+            )
+            assertEquals(
+                restoreTransfer.settings[0].quotations,
+                backupTransfer.settings[0].quotations,
+            )
+            assertEquals(
+                restoreTransfer.settings[0].schedule,
+                backupTransfer.settings[0].schedule,
+            )
+        }
+    }
+
+    @Test
+    fun restoreIntoTwoWidgets() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            // set up
+            setupWidgets(intArrayOf(1, 2))
+
+            // restore
+            val restoreTransfer = getTransferAsset("restore_one_widget.json")
+            TransferRestore().restore(context, databaseRepositoryDouble, restoreTransfer)
+
+            // assert
+            val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
+//            val restoreJson = TransferRestore().asJson(restoreTransfer)
+//            val backupJson = TransferBackup(context).asJson(backupTransfer)
+
+            assertTrue(backupTransfer.current.size == 2)
+            assertTrue(backupTransfer.favourites.isEmpty())
+            assertTrue(backupTransfer.previous.size == 2)
+
+            assertTrue(backupTransfer.settings.size == 2)
+            assertEquals(
+                restoreTransfer.settings[0].appearance,
+                backupTransfer.settings[0].appearance,
+            )
+            assertEquals(
+                backupTransfer.settings[0].appearance,
+                backupTransfer.settings[1].appearance,
+            )
+
+            assertEquals(
+                restoreTransfer.settings[0].quotations,
+                backupTransfer.settings[0].quotations,
+            )
+            assertEquals(
+                backupTransfer.settings[0].quotations,
+                backupTransfer.settings[1].quotations,
+            )
+
+            assertEquals(
+                restoreTransfer.settings[0].schedule,
+                backupTransfer.settings[0].schedule,
+            )
+            assertEquals(
+                backupTransfer.settings[0].schedule,
+                backupTransfer.settings[1].schedule,
+            )
+        }
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsWithFavourites.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsWithFavourites.kt
new file mode 100644
index 0000000..052b01a
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/RestoreTwoWidgetsWithFavourites.kt
@@ -0,0 +1,45 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
+
+import android.os.Build
+import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup
+import org.junit.Assert
+import org.junit.Test
+
+class RestoreTwoWidgetsWithFavourites : TransferRestoreUtility() {
+    @Test
+    fun restoreIntoOneWidget() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            // set up
+            setupWidgets(intArrayOf(1))
+
+            // restore
+            val restoreTransfer = getTransferAsset("restore_two_widgets_with_favourites.json")
+            TransferRestore().restore(context, databaseRepositoryDouble, restoreTransfer)
+
+            // assert
+            val backupTransfer = TransferBackup(context).transfer(databaseRepositoryDouble)
+            val restoreJson = TransferRestore().asJson(restoreTransfer)
+            val backupJson = TransferBackup(context).asJson(backupTransfer)
+
+            Assert.assertEquals(getLocalCode(), backupTransfer.code)
+
+            Assert.assertTrue(backupTransfer.current.size == 1)
+            Assert.assertTrue(backupTransfer.favourites.size == 4)
+            Assert.assertTrue(backupTransfer.previous.size == 5)
+
+            Assert.assertTrue(backupTransfer.settings.size == 1)
+            Assert.assertEquals(
+                restoreTransfer.settings[1].appearance,
+                backupTransfer.settings[0].appearance,
+            )
+            Assert.assertEquals(
+                restoreTransfer.settings[1].quotations,
+                backupTransfer.settings[0].quotations,
+            )
+            Assert.assertEquals(
+                restoreTransfer.settings[1].schedule,
+                backupTransfer.settings[0].schedule,
+            )
+        }
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestoreUtility.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestoreUtility.kt
new file mode 100644
index 0000000..3e61e90
--- /dev/null
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestoreUtility.kt
@@ -0,0 +1,49 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
+
+import androidx.test.platform.app.InstrumentationRegistry
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
+import com.google.gson.Gson
+import io.mockk.every
+import io.mockk.mockkObject
+import java.io.BufferedReader
+import java.io.InputStream
+
+open class TransferRestoreUtility : QuoteUnquoteModelUtility() {
+    protected fun createSharedPreferencesWithLocalCode(localCode: String) {
+        val preferencesFacade = PreferencesFacade(0, context)
+        preferencesFacade.preferenceHelper?.setPreference(
+            "0:CONTENT_FAVOURITES_LOCAL_CODE",
+            localCode
+        )
+    }
+
+    protected fun getTransferAsset(assetFilename: String): Transfer {
+        val inputStream: InputStream =
+            InstrumentationRegistry.getInstrumentation().context.resources.assets
+                .open(
+                    assetFilename
+                )
+
+        return Gson().fromJson(
+            inputStream.bufferedReader().use(BufferedReader::readText),
+            Transfer::class.java
+        )
+    }
+
+    protected fun getLocalCode(): String {
+        return "F9aT8HEW6d"
+    }
+
+    protected fun setupWidgets(widgetIds: IntArray) {
+        createSharedPreferencesWithLocalCode(getLocalCode())
+        insertQuotationTestData01()
+        insertQuotationTestData02()
+        insertQuotationTestData03()
+
+        mockkObject(TransferUtility)
+        every { TransferUtility.getWidgetIds(context) } returns widgetIds
+    }
+}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt
index 8b57a0e..a399e93 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextFamilySpinnerAdapterTest.kt
@@ -8,7 +8,8 @@ import org.junit.Test
 class AppearanceTextFamilySpinnerAdapterTest {
     @Test
     fun howManyFonts() {
-        val appearanceFontSpinnerAdapter = AppearanceTextFamilySpinnerAdapter(getApplicationContext())
+        val appearanceFontSpinnerAdapter =
+            AppearanceTextFamilySpinnerAdapter(getApplicationContext())
 
         // https://www.cs.cmu.edu/~jbigham/pubs/pdfs/2017/colors.pdf
 
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt
index 8c67846..6bc9719 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceTextStyleSpinnerAdapterTest.kt
@@ -8,7 +8,8 @@ import org.junit.Test
 class AppearanceTextStyleSpinnerAdapterTest {
     @Test
     fun howManyFonts() {
-        val appearanceStyleSpinnerAdapter = AppearanceTextStyleSpinnerAdapter(getApplicationContext())
+        val appearanceStyleSpinnerAdapter =
+            AppearanceTextStyleSpinnerAdapter(getApplicationContext())
 
         assertEquals(4, appearanceStyleSpinnerAdapter.count)
     }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ExportTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ExportTest.kt
deleted file mode 100644
index af0f200..0000000
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ExportTest.kt
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content
-
-import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertTrue
-import org.junit.Test
-
-class ExportTest : QuoteUnquoteModelUtility() {
-    @Test
-    fun exportFavourites() {
-        insertQuotationTestData01()
-        insertQuotationTestData02()
-
-        assertTrue(quoteUnquoteModelDouble.countFavourites().blockingGet() == 0)
-
-        databaseRepositoryDouble.markAsFavourite(DatabaseRepository.getDefaultQuotationDigest())
-
-        // a digest that doesn't exist - i.e. quotation db migration deleted it
-        databaseRepositoryDouble.markAsFavourite("xx")
-
-        databaseRepositoryDouble.markAsFavourite("d2")
-        databaseRepositoryDouble.markAsFavourite("d4")
-
-        assertTrue(quoteUnquoteModelDouble.countFavourites().blockingGet() == 4)
-
-        val exportedFavourites = quoteUnquoteModelDouble.exportFavourites()
-
-        assertEquals(3, exportedFavourites?.size)
-    }
-}
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/AddReadResultToPreviousAllTest.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt
similarity index 80%
rename from app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/AddReadResultToPreviousAllTest.kt
rename to app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt
index d1afd7b..02f8fce 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/AddReadResultToPreviousAllTest.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/AddReadResultToPreviousAllTest.kt
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
 
 import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
@@ -78,10 +78,14 @@ class AddReadResultToPreviousAllTest : QuoteUnquoteModelUtility() {
         )
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentAddToPreviousAll = contentAddToPrevious
-        contentPreferences.contentSelection = ContentSelection.AUTHOR
-        contentPreferences.contentSelectionAuthor = "a2"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentAddToPreviousAll = contentAddToPrevious
+        quotationsPreferences.contentSelection = ContentSelection.AUTHOR
+        quotationsPreferences.contentSelectionAuthor = "a2"
 
         // d2
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
@@ -93,10 +97,14 @@ class AddReadResultToPreviousAllTest : QuoteUnquoteModelUtility() {
     }
 
     fun setupSearchWithAddToPreviousAll(contentAddToPrevious: Boolean) {
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentAddToPreviousAll = contentAddToPrevious
-        contentPreferences.contentSelection = ContentSelection.SEARCH
-        contentPreferences.contentSelectionSearch = "q3"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentAddToPreviousAll = contentAddToPrevious
+        quotationsPreferences.contentSelection = ContentSelection.SEARCH
+        quotationsPreferences.contentSelectionSearch = "q3"
 
         // d3
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
index 9f0d2f7..d182925 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepositoryDouble.java
@@ -14,55 +14,54 @@ public final class DatabaseRepositoryDouble extends DatabaseRepository {
     private static DatabaseRepositoryDouble databaseRepositoryDouble;
 
     private DatabaseRepositoryDouble() {
-        this.abstractQuotationDatabase = Room.inMemoryDatabaseBuilder(
+        abstractQuotationDatabase = Room.inMemoryDatabaseBuilder(
                 ApplicationProvider.getApplicationContext(),
                 AbstractQuotationDatabase.class)
                 .allowMainThreadQueries()
                 .build();
 
-        this.quotationDAO = this.abstractQuotationDatabase.quotationsDAO();
+        quotationDAO = abstractQuotationDatabase.quotationsDAO();
 
-        this.abstractHistoryDatabase = Room.inMemoryDatabaseBuilder(
+        abstractHistoryDatabase = Room.inMemoryDatabaseBuilder(
                 ApplicationProvider.getApplicationContext(),
                 AbstractHistoryDatabase.class)
                 .allowMainThreadQueries()
                 .build();
 
-        this.previousDAO = this.abstractHistoryDatabase.previousDAO();
-        this.favouriteDAO = this.abstractHistoryDatabase.favouritesDAO();
-        this.reportedDAO = this.abstractHistoryDatabase.reportedDAO();
-        this.currentDAO = this.abstractHistoryDatabase.currentDAO();
+        previousDAO = abstractHistoryDatabase.previousDAO();
+        favouriteDAO = abstractHistoryDatabase.favouritesDAO();
+        reportedDAO = abstractHistoryDatabase.reportedDAO();
+        currentDAO = abstractHistoryDatabase.currentDAO();
     }
 
     public static synchronized DatabaseRepositoryDouble getInstance() {
-        if (DatabaseRepositoryDouble.databaseRepositoryDouble == null) {
-            DatabaseRepositoryDouble.databaseRepositoryDouble = new DatabaseRepositoryDouble();
+        if (databaseRepositoryDouble == null) {
+            databaseRepositoryDouble = new DatabaseRepositoryDouble();
         }
 
-        return DatabaseRepositoryDouble.databaseRepositoryDouble;
+        return databaseRepositoryDouble;
     }
 
-    @Override
-    public void erase() {
-        DatabaseRepositoryDouble.databaseRepositoryDouble.abstractQuotationDatabase.quotationsDAO().erase();
+    public void eraseEverything() {
+        databaseRepositoryDouble.abstractQuotationDatabase.quotationsDAO().erase();
         super.erase();
     }
 
-    public void insertQuotations(@NonNull List<QuotationEntity> quotationEntityList) {
-        for (QuotationEntity quotationEntity : quotationEntityList) {
-            this.quotationDAO.insertQuotation(quotationEntity);
+    public void insertQuotations(@NonNull final List<QuotationEntity> quotationEntityList) {
+        for (final QuotationEntity quotationEntity : quotationEntityList) {
+            quotationDAO.insertQuotation(quotationEntity);
         }
     }
 
     public int countReported() {
-        return this.reportedDAO.countReported();
+        return reportedDAO.countReported();
     }
 
-    public int countCurrent(int widgetId) {
-        return this.currentDAO.countCurrent(widgetId);
+    public int countCurrent(final int widgetId) {
+        return currentDAO.countCurrent(widgetId);
     }
 
     public List<String> getNextAllDigests() {
-        return this.quotationDAO.getNextAllDigests();
+        return quotationDAO.getNextAllDigests();
     }
 }
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
index f9171f8..89df945 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/DatabaseTestHelper.kt
@@ -17,8 +17,8 @@ abstract class DatabaseTestHelper {
 
     @After
     fun after() {
-        databaseRepositoryDouble.erase()
-        PreferencesFacade.disable(context)
+        databaseRepositoryDouble.eraseEverything()
+        PreferencesFacade.erase(context)
     }
 
     fun insertQuotationTestData01() {
diff --git a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionText.kt b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionText.kt
index 4d419f3..50f9515 100644
--- a/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionText.kt
+++ b/app/src/androidTest/java/com/github/jameshnsears/quoteunquote/database/QuotationPositionText.kt
@@ -1,7 +1,7 @@
 package com.github.jameshnsears.quoteunquote.database
 
 import com.github.jameshnsears.quoteunquote.QuoteUnquoteModelUtility
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 import org.junit.Assert.assertEquals
@@ -12,13 +12,17 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
     fun positionInPreviousAll() {
         insertQuotationTestData01()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.ALL
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.ALL
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
@@ -27,7 +31,7 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
         assertEquals(
             1,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
@@ -36,46 +40,50 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
     fun positionInPreviousFavourites() {
         insertQuotationTestData01()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.FAVOURITES
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
-        contentPreferences.contentSelection = ContentSelection.ALL
+        quotationsPreferences.contentSelection = ContentSelection.ALL
         markNextQuotationAsFavourite(ContentSelection.ALL)
 
-        contentPreferences.contentSelection = ContentSelection.FAVOURITES
+        quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
-        contentPreferences.contentSelection = ContentSelection.ALL
+        quotationsPreferences.contentSelection = ContentSelection.ALL
         markNextQuotationAsFavourite(ContentSelection.ALL)
 
-        contentPreferences.contentSelection = ContentSelection.FAVOURITES
+        quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
-        contentPreferences.contentSelection = ContentSelection.FAVOURITES
+        quotationsPreferences.contentSelection = ContentSelection.FAVOURITES
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
         assertEquals(
             1,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
@@ -83,7 +91,7 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
         assertEquals(
             2,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
@@ -91,7 +99,8 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
     private fun markNextQuotationAsFavourite(contentSelection: ContentSelection) {
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
         databaseRepositoryDouble.getNextQuotation(WidgetIdHelper.WIDGET_ID_01, contentSelection)
-        val quotationEntity = databaseRepositoryDouble.getNextQuotation(WidgetIdHelper.WIDGET_ID_01, contentSelection)
+        val quotationEntity =
+            databaseRepositoryDouble.getNextQuotation(WidgetIdHelper.WIDGET_ID_01, contentSelection)
         databaseRepositoryDouble.markAsFavourite(quotationEntity.digest)
     }
 
@@ -101,25 +110,29 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
         insertQuotationTestData02()
         insertQuotationTestData03()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.AUTHOR
-        contentPreferences.contentSelectionAuthor = "a2"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.AUTHOR
+        quotationsPreferences.contentSelectionAuthor = "a2"
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
-        contentPreferences.contentSelectionAuthor = "a2"
+        quotationsPreferences.contentSelectionAuthor = "a2"
 
         quoteUnquoteModelDouble.markAsCurrentNext(WidgetIdHelper.WIDGET_ID_01, false)
 
         assertEquals(
             1,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
@@ -130,14 +143,18 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
         insertQuotationTestData02()
         insertQuotationTestData03()
 
-        val contentPreferences = ContentPreferences(WidgetIdHelper.WIDGET_ID_01, context)
-        contentPreferences.contentSelection = ContentSelection.SEARCH
-        contentPreferences.contentSelectionSearch = "q1"
+        val quotationsPreferences =
+            QuotationsPreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
+        quotationsPreferences.contentSelection = ContentSelection.SEARCH
+        quotationsPreferences.contentSelectionSearch = "q1"
 
         assertEquals(
             0,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
 
@@ -146,7 +163,7 @@ class QuotationPositionText : QuoteUnquoteModelUtility() {
         assertEquals(
             1,
             databaseRepositoryDouble.positionInPrevious(
-                WidgetIdHelper.WIDGET_ID_01, contentPreferences
+                WidgetIdHelper.WIDGET_ID_01, quotationsPreferences
             )
         )
     }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelper.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelper.kt
deleted file mode 100644
index ed77338..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/PackageReplacedHelper.kt
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.github.jameshnsears.quoteunquote
-
-import android.content.Context
-import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences
-import com.github.jameshnsears.quoteunquote.configure.fragment.event.EventPreferences
-
-class PackageReplacedHelper(val widgetId: Int, val context: Context) {
-    fun alignHistoryWithQuotations(quoteUnquoteModel: QuoteUnquoteModel) {
-        quoteUnquoteModel.alignHistoryWithQuotations(widgetId)
-        quoteUnquoteModel.alignFavouritesWithQuotations(widgetId)
-        quoteUnquoteModel.markAsCurrentDefault(widgetId)
-    }
-
-    fun migratePreferences() {
-        AppearancePreferences(widgetId, context).performMigration()
-        ContentPreferences(widgetId, context).performMigration()
-        EventPreferences(widgetId, context).performMigration()
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
index f42db8b..1aef653 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
@@ -5,9 +5,9 @@ import android.content.Context;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.github.jameshnsears.quoteunquote.cloud.CloudFavouritesHelper;
-import com.github.jameshnsears.quoteunquote.cloud.SaveRequest;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences;
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer;
+import com.github.jameshnsears.quoteunquote.cloud.transfer.backup.TransferBackup;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
 import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
@@ -17,6 +17,7 @@ import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -27,60 +28,62 @@ import timber.log.Timber;
 public class QuoteUnquoteModel {
     @Nullable
     public DatabaseRepository databaseRepository;
+
     @Nullable
     public List<AuthorPOJO> cachedAuthorPOJOList;
+
     @Nullable
     protected Context context;
 
     public QuoteUnquoteModel() {
     }
 
-    public QuoteUnquoteModel(@NonNull Context widgetContext) {
-        this.context = widgetContext;
-        this.databaseRepository = DatabaseRepository.getInstance(context);
+    public QuoteUnquoteModel(@NonNull final Context widgetContext) {
+        context = widgetContext;
+        databaseRepository = DatabaseRepository.getInstance(this.context);
     }
 
     private boolean isNextNew(
-            int widgetId, @NonNull final ContentPreferences contentPreferences, boolean randomNext) {
-        final int availableQuotations = this.databaseRepository.countNext(contentPreferences);
+            final int widgetId, @NonNull QuotationsPreferences quotationsPreferences, final boolean randomNext) {
+        int availableQuotations = databaseRepository.countNext(quotationsPreferences);
 
-        if (this.databaseRepository.positionInPrevious(widgetId, contentPreferences) == availableQuotations) {
+        if (databaseRepository.positionInPrevious(widgetId, quotationsPreferences) == availableQuotations) {
             return false;
         }
 
         return !randomNext
-                || this.databaseRepository.countPrevious(widgetId, contentPreferences.getContentSelection())
+                || databaseRepository.countPrevious(widgetId, quotationsPreferences.getContentSelection())
                 != availableQuotations;
     }
 
     @NonNull
-    public ContentPreferences getContentPreferences(final int widgetId) {
-        return new ContentPreferences(widgetId, this.context);
+    public QuotationsPreferences getContentPreferences(int widgetId) {
+        return new QuotationsPreferences(widgetId, context);
     }
 
     @Nullable
     public QuotationEntity getPreviousDigests(
-            int widgetId,
-            @NonNull ContentSelection contentSelection,
-            @NonNull String digest) {
+            final int widgetId,
+            @NonNull final ContentSelection contentSelection,
+            @NonNull final String digest) {
 
-        Future<QuotationEntity> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+        final Future<QuotationEntity> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
 
-            final List<String> previousDigests = this.getPreviousDigests(widgetId, contentSelection);
+            List<String> previousDigests = getPreviousDigests(widgetId, contentSelection);
 
             int priorDigestIndex = previousDigests.indexOf(digest) + 1;
             if (priorDigestIndex == previousDigests.size()) {
                 priorDigestIndex -= 1;
             }
 
-            return this.databaseRepository.getQuotation(previousDigests.get(priorDigestIndex));
+            return databaseRepository.getQuotation(previousDigests.get(priorDigestIndex));
         });
 
         QuotationEntity quotationEntity = null;
 
         try {
             quotationEntity = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -90,16 +93,16 @@ public class QuoteUnquoteModel {
 
     @Nullable
     public QuotationEntity getCurrentQuotation(
-            int widgetId) {
+            final int widgetId) {
 
-        Future<QuotationEntity> future = QuoteUnquoteWidget.getExecutorService().submit(() ->
-                this.databaseRepository.getCurrentQuotation(widgetId));
+        final Future<QuotationEntity> future = QuoteUnquoteWidget.getExecutorService().submit(() ->
+                databaseRepository.getCurrentQuotation(widgetId));
 
         QuotationEntity quotationEntity = null;
 
         try {
             quotationEntity = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -109,76 +112,76 @@ public class QuoteUnquoteModel {
 
     @Nullable
     public String getCurrentPosition(
-            int widgetId,
-            @NonNull ContentPreferences contentPreferences) {
-        Future<String> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            int positionInPrevious = this.databaseRepository.positionInPrevious(widgetId, contentPreferences);
+            final int widgetId,
+            @NonNull final QuotationsPreferences quotationsPreferences) {
+        final Future<String> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            int positionInPrevious = databaseRepository.positionInPrevious(widgetId, quotationsPreferences);
 
             if (positionInPrevious == 0) {
                 positionInPrevious += 1;
             }
 
-            return String.format("%d/%d",
+            return String.format(Locale.ENGLISH, "%d/%d",
                     positionInPrevious,
-                    this.databaseRepository.countNext(contentPreferences));
+                    databaseRepository.countNext(quotationsPreferences));
         });
 
         String currentPosition = null;
 
         try {
             currentPosition = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
 
-        Timber.d("%s; %s", contentPreferences.toString(), currentPosition);
+        Timber.d("%s; %s", quotationsPreferences.toString(), currentPosition);
 
         return currentPosition;
     }
 
     public void markAsCurrentNext(
-            int widgetId,
-            boolean randomNext) {
+            final int widgetId,
+            final boolean randomNext) {
         Timber.d("%b", randomNext);
 
-        ContentPreferences contentPreferences = this.getContentPreferences(widgetId);
+        final QuotationsPreferences quotationsPreferences = getContentPreferences(widgetId);
 
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            QuotationEntity nextQuotation = this.getNextQuotation(widgetId, randomNext);
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            QuotationEntity nextQuotation = getNextQuotation(widgetId, randomNext);
 
-            final List<String> previous = this.getPreviousDigests(widgetId, contentPreferences.getContentSelection());
+            List<String> previous = getPreviousDigests(widgetId, quotationsPreferences.getContentSelection());
 
             if (!previous.contains(nextQuotation.digest)) {
-                this.databaseRepository.markAsPrevious(
+                databaseRepository.markAsPrevious(
                         widgetId,
-                        contentPreferences.getContentSelection(),
+                        quotationsPreferences.getContentSelection(),
                         nextQuotation.digest);
             } else {
-                if (!this.isNextNew(widgetId, contentPreferences, randomNext) && randomNext) {
-                    nextQuotation = this.databaseRepository.getQuotation(previous.get(0));
+                if (!isNextNew(widgetId, quotationsPreferences, randomNext) && randomNext) {
+                    nextQuotation = databaseRepository.getQuotation(previous.get(0));
                 }
             }
 
-            this.addToPreviousAll(widgetId, nextQuotation);
+            addToPreviousAll(widgetId, nextQuotation);
 
-            this.databaseRepository.markAsCurrent(
+            databaseRepository.markAsCurrent(
                     widgetId,
                     nextQuotation.digest);
         });
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
 
-    private void addToPreviousAll(int widgetId, @NonNull QuotationEntity quotationEntity) {
-        if (this.getContentPreferences(widgetId).getContentAddToPreviousAll()) {
-            if (!this.getPreviousDigests(widgetId, ContentSelection.ALL).contains(quotationEntity.digest)) {
-                this.databaseRepository.markAsPrevious(
+    private void addToPreviousAll(final int widgetId, @NonNull final QuotationEntity quotationEntity) {
+        if (getContentPreferences(widgetId).getContentAddToPreviousAll()) {
+            if (!getPreviousDigests(widgetId, ContentSelection.ALL).contains(quotationEntity.digest)) {
+                databaseRepository.markAsPrevious(
                         widgetId,
                         ContentSelection.ALL,
                         quotationEntity.digest);
@@ -188,34 +191,34 @@ public class QuoteUnquoteModel {
 
     @NonNull
     public QuotationEntity getNextQuotation(
-            int widgetId,
-            boolean randomNext) {
-        final QuotationEntity nextQuotation;
+            final int widgetId,
+            final boolean randomNext) {
+        QuotationEntity nextQuotation;
 
-        switch (this.getContentPreferences(widgetId).getContentSelection()) {
+        switch (getContentPreferences(widgetId).getContentSelection()) {
             case FAVOURITES:
-                nextQuotation = this.databaseRepository.getNextQuotation(
+                nextQuotation = databaseRepository.getNextQuotation(
                         widgetId,
                         ContentSelection.FAVOURITES,
                         null,
                         randomNext);
                 break;
             case AUTHOR:
-                nextQuotation = this.databaseRepository.getNextQuotation(
+                nextQuotation = databaseRepository.getNextQuotation(
                         widgetId,
                         ContentSelection.AUTHOR,
-                        this.getContentPreferences(widgetId).getContentSelectionAuthor(),
+                        getContentPreferences(widgetId).getContentSelectionAuthor(),
                         randomNext);
                 break;
             case SEARCH:
-                nextQuotation = this.databaseRepository.getNextQuotation(
+                nextQuotation = databaseRepository.getNextQuotation(
                         widgetId,
                         ContentSelection.SEARCH,
-                        this.getContentPreferences(widgetId).getContentSelectionSearch(),
+                        getContentPreferences(widgetId).getContentSelectionSearch(),
                         randomNext);
                 break;
             default:
-                nextQuotation = this.databaseRepository.getNextQuotation(
+                nextQuotation = databaseRepository.getNextQuotation(
                         widgetId,
                         ContentSelection.ALL,
                         null,
@@ -227,62 +230,63 @@ public class QuoteUnquoteModel {
     }
 
     public void markAsCurrentDefault(
-            int widgetId) {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            final ContentSelection contentSelection = this.getContentPreferences(widgetId).getContentSelection();
+            final int widgetId) {
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            ContentSelection contentSelection = getContentPreferences(widgetId).getContentSelection();
 
-            this.setDefault(widgetId, contentSelection);
+            setDefault(widgetId, contentSelection);
 
-            final QuotationEntity quotationEntity
-                    = this.databaseRepository.getNextQuotation(widgetId, contentSelection);
+            QuotationEntity quotationEntity
+                    = databaseRepository.getNextQuotation(widgetId, contentSelection);
 
-            this.addToPreviousAll(widgetId, quotationEntity);
+            addToPreviousAll(widgetId, quotationEntity);
 
-            this.databaseRepository.markAsCurrent(
+            databaseRepository.markAsCurrent(
                     widgetId,
                     quotationEntity.digest);
         });
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
 
     private void setDefault(
-            int widgetId, @NonNull ContentSelection contentSelection) {
+            final int widgetId, @NonNull final ContentSelection contentSelection) {
         switch (contentSelection) {
             case AUTHOR:
-                this.setDefaultAuthor(widgetId);
+                setDefaultAuthor(widgetId);
                 break;
 
             case FAVOURITES:
-                this.setDefaultFavourite(widgetId);
+                setDefaultFavourite(widgetId);
                 break;
 
             case SEARCH:
-                this.setDefaultSearch(widgetId);
+                setDefaultSearch(widgetId);
                 break;
 
             default:
-                this.setDefaultAll(widgetId);
+                setDefaultAll(widgetId);
                 break;
         }
     }
 
+    @NonNull
     public List<String> getPreviousDigests(
-            int widgetId,
-            @NonNull ContentSelection contentSelection) {
-        Future<List<String>> future = QuoteUnquoteWidget.getExecutorService().submit(() ->
-                this.databaseRepository.getPreviousDigests(widgetId, contentSelection));
+            final int widgetId,
+            @NonNull final ContentSelection contentSelection) {
+        final Future<List<String>> future = QuoteUnquoteWidget.getExecutorService().submit(() ->
+                databaseRepository.getPreviousDigests(widgetId, contentSelection));
 
         List<String> allPreviousDigests = new ArrayList<>();
 
         try {
             allPreviousDigests = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -292,57 +296,71 @@ public class QuoteUnquoteModel {
         return allPreviousDigests;
     }
 
-    private void setDefaultAuthor(final int widgetId) {
-        if (this.countPreviousAuthor(widgetId) == 0) {
-            this.databaseRepository.erase(widgetId, ContentSelection.AUTHOR);
-            this.markAsCurrentNext(widgetId, false);
+    private void setDefaultAuthor(int widgetId) {
+        if (countPreviousAuthor(widgetId) == 0) {
+            databaseRepository.erase(widgetId, ContentSelection.AUTHOR);
+            markAsCurrentNext(widgetId, false);
         }
     }
 
-    private void setDefaultFavourite(final int widgetId) {
-        if (this.countPrevious(widgetId, ContentSelection.FAVOURITES) == 0) {
-            this.markAsCurrentNext(widgetId, false);
+    private void setDefaultFavourite(int widgetId) {
+        if (countPrevious(widgetId, ContentSelection.FAVOURITES) == 0) {
+            markAsCurrentNext(widgetId, false);
         }
     }
 
-    private void setDefaultSearch(final int widgetId) {
-        if (this.countPreviousSearch(widgetId) == 0) {
-            this.databaseRepository.erase(widgetId, ContentSelection.SEARCH);
-            this.markAsCurrentNext(widgetId, false);
+    private void setDefaultSearch(int widgetId) {
+        if (countPreviousSearch(widgetId) == 0) {
+            databaseRepository.erase(widgetId, ContentSelection.SEARCH);
+            markAsCurrentNext(widgetId, false);
         }
     }
 
-    private void setDefaultAll(int widgetId) {
-        if (this.countPrevious(widgetId, ContentSelection.ALL) == 0) {
-            this.databaseRepository.markAsPrevious(
+    private void setDefaultAll(final int widgetId) {
+        if (countPrevious(widgetId, ContentSelection.ALL) == 0) {
+            databaseRepository.markAsPrevious(
                     widgetId, ContentSelection.ALL, DatabaseRepository.getDefaultQuotationDigest());
         }
     }
 
-    public int countPrevious(int widgetId,
-                             @NonNull ContentSelection contentSelection) {
-        return this.databaseRepository.countPrevious(widgetId, contentSelection);
+    public int countPrevious(final int widgetId,
+                             @NonNull final ContentSelection contentSelection) {
+        return databaseRepository.countPrevious(widgetId, contentSelection);
+    }
+
+    public int countPrevious(final int widgetId) {
+        final Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.countPrevious(widgetId));
+
+        int countPrevious = 0;
+        try {
+            countPrevious = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
+            Thread.currentThread().interrupt();
+        }
+
+        return countPrevious;
     }
 
-    public int countPreviousAuthor(int widgetId) {
-        return this.databaseRepository.countPrevious(widgetId, ContentSelection.AUTHOR,
-                this.getContentPreferences(widgetId).getContentSelectionAuthor());
+    public int countPreviousAuthor(final int widgetId) {
+        return databaseRepository.countPrevious(widgetId, ContentSelection.AUTHOR,
+                getContentPreferences(widgetId).getContentSelectionAuthor());
     }
 
-    public int countPreviousSearch(int widgetId) {
-        return this.databaseRepository.countPrevious(widgetId, ContentSelection.SEARCH,
-                this.getContentPreferences(widgetId).getContentSelectionSearch());
+    public int countPreviousSearch(final int widgetId) {
+        return databaseRepository.countPrevious(widgetId, ContentSelection.SEARCH,
+                getContentPreferences(widgetId).getContentSelectionSearch());
     }
 
     public int countFavouritesWithoutRx() {
-        Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            return this.databaseRepository.countFavourites().blockingGet();
-        });
+        final Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.countFavourites().blockingGet());
 
         int favouritesCount = 0;
         try {
             favouritesCount = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -350,30 +368,24 @@ public class QuoteUnquoteModel {
         return favouritesCount;
     }
 
-    public int toggleFavourite(int widgetId, @NonNull String digest) {
-        Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            final List<String> favourites = this.databaseRepository.getFavourites();
+    public int toggleFavourite(final int widgetId, @NonNull final String digest) {
+        final Future<Integer> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            List<String> favourites = databaseRepository.getFavouriteDigests();
 
-            Timber.d("%d", favourites.size());
-
-            final boolean isFavourite = favourites.contains(digest);
-
-            Timber.d("digest=%s; %b", digest, isFavourite);
-
-            if (!isFavourite) {
-                this.databaseRepository.markAsFavourite(digest);
-                this.auditFavourite(widgetId, digest);
+            if (!favourites.contains(digest)) {
+                databaseRepository.markAsFavourite(digest);
+                auditFavourite(widgetId, digest);
             } else {
-                this.databaseRepository.eraseFavourite(widgetId, digest);
+                databaseRepository.eraseFavourite(widgetId, digest);
             }
 
-            return this.databaseRepository.countFavourites().blockingGet();
+            return databaseRepository.countFavourites().blockingGet();
         });
 
         int favouritesCount = 0;
         try {
             favouritesCount = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -381,25 +393,25 @@ public class QuoteUnquoteModel {
         return favouritesCount;
     }
 
-    private void auditFavourite(final int widgetId, @NonNull final String digest) {
-        final QuotationEntity quotationEntity = this.getCurrentQuotation(
+    private void auditFavourite(int widgetId, @NonNull String digest) {
+        QuotationEntity quotationEntity = getCurrentQuotation(
                 widgetId);
 
-        final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+        ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
         properties.put("Favourite",
                 "digest=" + digest + "; author=" + quotationEntity.author + "; quotation=" + quotationEntity.quotation);
         AuditEventHelper.auditEvent("FAVOURITE", properties);
     }
 
-    public boolean isFavourite(@NonNull String digest) {
-        Future<Boolean> future = QuoteUnquoteWidget.getExecutorService().submit(()
-                -> this.databaseRepository.isFavourite(digest));
+    public boolean isFavourite(@NonNull final String digest) {
+        final Future<Boolean> future = QuoteUnquoteWidget.getExecutorService().submit(()
+                -> databaseRepository.isFavourite(digest));
 
         boolean isFavourite = false;
 
         try {
             isFavourite = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -408,60 +420,60 @@ public class QuoteUnquoteModel {
         return isFavourite;
     }
 
-    public void delete(int widgetId) {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
-                this.databaseRepository.erase(widgetId)
+    public void delete(final int widgetId) {
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
+                databaseRepository.erase(widgetId)
         );
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
 
     public void disable() {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
-                this.databaseRepository.erase());
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
+                databaseRepository.erase());
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
 
-    public void resetPrevious(int widgetId, @NonNull ContentSelection contentSelection) {
+    public void resetPrevious(final int widgetId, @NonNull final ContentSelection contentSelection) {
         Timber.d("contentSelection=%d", contentSelection.getContentSelection());
 
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
-                this.databaseRepository.erase(widgetId, contentSelection)
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() ->
+                databaseRepository.erase(widgetId, contentSelection)
         );
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
     }
 
     public void markAsCurrentPrevious(
-            int widgetId) {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            final QuotationEntity previousQuotation = this.getPreviousDigests(
+            final int widgetId) {
+        final Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            QuotationEntity previousQuotation = getPreviousDigests(
                     widgetId,
-                    this.getContentPreferences(widgetId).getContentSelection(),
-                    this.getCurrentQuotation(widgetId).digest);
+                    getContentPreferences(widgetId).getContentSelection(),
+                    getCurrentQuotation(widgetId).digest);
 
-            this.databaseRepository.markAsCurrent(widgetId, previousQuotation.digest);
+            databaseRepository.markAsCurrent(widgetId, previousQuotation.digest);
         });
 
         try {
             future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.e(e);
             Thread.currentThread().interrupt();
         }
@@ -469,30 +481,30 @@ public class QuoteUnquoteModel {
 
     @NonNull
     public Single<Integer> countAll() {
-        return this.databaseRepository.countAll();
+        return databaseRepository.countAll();
     }
 
     @NonNull
     public Single<List<AuthorPOJO>> authors() {
-        return this.databaseRepository.getAuthorsAndQuotationCounts();
+        return databaseRepository.getAuthorsAndQuotationCounts();
     }
 
     @NonNull
-    public List<String> authorsSorted(@NonNull List<AuthorPOJO> unsortedAuthorPOJOList) {
+    public List<String> authorsSorted(@NonNull final List<AuthorPOJO> unsortedAuthorPOJOList) {
         cachedAuthorPOJOList = unsortedAuthorPOJOList;
 
         Collections.sort(unsortedAuthorPOJOList);
-        ArrayList<String> authors = new ArrayList<>();
-        for (AuthorPOJO authorPOJO : unsortedAuthorPOJOList) {
+        final ArrayList<String> authors = new ArrayList<>();
+        for (final AuthorPOJO authorPOJO : unsortedAuthorPOJOList) {
             authors.add(authorPOJO.author);
         }
         return authors;
     }
 
-    public int countAuthorQuotations(@NonNull String author) {
+    public int countAuthorQuotations(@NonNull final String author) {
         int countAuthorQuotations = 0;
 
-        for (AuthorPOJO authorPOJO : cachedAuthorPOJOList) {
+        for (final AuthorPOJO authorPOJO : cachedAuthorPOJOList) {
             if (authorPOJO.author.equals(author)) {
                 countAuthorQuotations = authorPOJO.count;
                 break;
@@ -501,9 +513,9 @@ public class QuoteUnquoteModel {
         return countAuthorQuotations;
     }
 
-    public int authorsIndex(@NonNull String author) {
+    public int authorsIndex(@NonNull final String author) {
         int index = 0;
-        for (AuthorPOJO authorPOJO : cachedAuthorPOJOList) {
+        for (final AuthorPOJO authorPOJO : cachedAuthorPOJOList) {
             if (authorPOJO.author.equals(author)) {
                 break;
             } else {
@@ -517,48 +529,43 @@ public class QuoteUnquoteModel {
 
     @NonNull
     public Single<Integer> countFavourites() {
-        return this.databaseRepository.countFavourites();
+        return databaseRepository.countFavourites();
     }
 
     @NonNull
-    public Integer countQuotationWithSearchText(@NonNull String text) {
-        return this.databaseRepository.countSearchText(text);
+    public Integer countQuotationWithSearchText(@NonNull final String text) {
+        return databaseRepository.countSearchText(text);
     }
 
     @NonNull
-    public String getFavouritesToSend(@NonNull Context context) {
-        Future<String> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            final SaveRequest saveRequest = new SaveRequest();
-
-            saveRequest.code = this.localCode(context);
-            saveRequest.digests = this.databaseRepository.getFavourites();
-
-            return CloudFavouritesHelper.jsonSendRequest(saveRequest);
+    public String transferBackup(@NonNull final Context context) {
+        final Future<String> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            TransferBackup transferBackup = new TransferBackup(context);
+            Transfer transfer = transferBackup.transfer(databaseRepository);
+            return transferBackup.asJson(transfer);
         });
 
+        String transferJson = "";
+
         try {
-            return future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
-            Timber.w(e.toString());
+            transferJson = future.get();
+        } catch (@NonNull ExecutionException | InterruptedException e) {
+            Timber.e(e);
             Thread.currentThread().interrupt();
-            return "";
         }
-    }
 
-    @NonNull
-    protected String localCode(@NonNull Context context) {
-        final ContentPreferences contentPreferences = new ContentPreferences(0, context);
-        return contentPreferences.getContentFavouritesLocalCode();
+        Timber.d(transferJson);
+        return transferJson;
     }
 
     @Nullable
     public List<String> exportFavourites() {
-        Future<ArrayList<String>> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            ArrayList<String> exportedFavourites = new ArrayList<>();
+        final Future<ArrayList<String>> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
+            final ArrayList<String> exportedFavourites = new ArrayList<>();
 
-            for (String favouriteDigest : this.databaseRepository.getFavourites()) {
-                QuotationEntity quotationEntity
-                        = this.databaseRepository.getQuotation(favouriteDigest);
+            for (final String favouriteDigest : databaseRepository.getFavouriteDigests()) {
+                final QuotationEntity quotationEntity
+                        = databaseRepository.getQuotation(favouriteDigest);
 
                 if (quotationEntity != null) {
                     exportedFavourites.add(
@@ -575,56 +582,11 @@ public class QuoteUnquoteModel {
 
         try {
             exportedFavourites = future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
+        } catch (@NonNull ExecutionException | InterruptedException e) {
             Timber.w(e.toString());
             Thread.currentThread().interrupt();
         }
 
         return exportedFavourites;
     }
-
-    public void alignHistoryWithQuotations(int widgetId) {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            List<String> history = new ArrayList<>();
-            history.addAll(this.databaseRepository.getPreviousDigests(widgetId, ContentSelection.ALL));
-            history.addAll(this.databaseRepository.getPreviousDigests(widgetId, ContentSelection.AUTHOR));
-            history.addAll(this.databaseRepository.getPreviousDigests(widgetId, ContentSelection.SEARCH));
-
-            int misalignedCount = 1;
-            for (String digest: history) {
-                if (this.databaseRepository.getQuotation(digest) == null) {
-                    Timber.w("misaligned, previous: %d=%s", misalignedCount, digest);
-                    this.databaseRepository.erasePrevious(widgetId, digest);
-                    misalignedCount++;
-                }
-            }
-        });
-
-        try {
-            future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
-            Timber.w(e.toString());
-            Thread.currentThread().interrupt();
-        }
-    }
-
-    public void alignFavouritesWithQuotations(int widgetId) {
-        Future future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            int misalignedCount = 1;
-            for (String digest: this.databaseRepository.getFavourites()) {
-                if (this.databaseRepository.getQuotation(digest) == null) {
-                    Timber.w("misaligned, favourite: %d=%s", misalignedCount, digest);
-                    this.databaseRepository.eraseFavourite(widgetId, digest);
-                    misalignedCount++;
-                }
-            }
-        });
-
-        try {
-            future.get();
-        } catch (@NonNull final ExecutionException | InterruptedException e) {
-            Timber.w(e.toString());
-            Thread.currentThread().interrupt();
-        }
-    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
index 759e779..1785afd 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
@@ -13,13 +13,13 @@ import androidx.annotation.IdRes;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.github.jameshnsears.quoteunquote.cloud.CloudFavouritesHelper;
-import com.github.jameshnsears.quoteunquote.cloud.CloudServiceSend;
+import com.github.jameshnsears.quoteunquote.cloud.CloudServiceBackup;
+import com.github.jameshnsears.quoteunquote.cloud.CloudServiceRestore;
+import com.github.jameshnsears.quoteunquote.cloud.CloudTransferHelper;
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences;
-import com.github.jameshnsears.quoteunquote.configure.fragment.event.EventDailyAlarm;
-import com.github.jameshnsears.quoteunquote.configure.fragment.event.EventPreferences;
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
+import com.github.jameshnsears.quoteunquote.configure.fragment.schedule.ScheduleDailyAlarm;
+import com.github.jameshnsears.quoteunquote.configure.fragment.schedule.SchedulePreferences;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.listview.ListViewService;
 import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
@@ -33,83 +33,87 @@ import java.util.concurrent.TimeUnit;
 
 import timber.log.Timber;
 
-public final class QuoteUnquoteWidget extends AppWidgetProvider {
+public class QuoteUnquoteWidget extends AppWidgetProvider {
     @Nullable
     private static ExecutorService executorService;
+
     private static volatile boolean receiversRegistered;
+
     @NonNull
     private final NotificationHelper notificationHelper = new NotificationHelper();
+
     @Nullable
     public QuoteUnquoteModel quoteUnquoteModel;
 
-    private static void registerReceivers(@NonNull final Context contextIn) {
-        Timber.d("receiversRegistered=%b", QuoteUnquoteWidget.receiversRegistered);
+    private static void registerReceivers(@NonNull Context contextIn) {
+        Timber.d("receiversRegistered=%b", receiversRegistered);
 
-        if (!QuoteUnquoteWidget.receiversRegistered) {
-            final Context context = contextIn.getApplicationContext();
-            final QuoteUnquoteWidget receiver = new QuoteUnquoteWidget();
+        if (!receiversRegistered) {
+            Context context = contextIn.getApplicationContext();
+            QuoteUnquoteWidget receiver = new QuoteUnquoteWidget();
 
-            final IntentFilter userPresent = new IntentFilter();
+            IntentFilter userPresent = new IntentFilter();
             userPresent.addAction("android.intent.action.USER_PRESENT");
             context.registerReceiver(receiver, userPresent);
 
-            final IntentFilter bootCompleted = new IntentFilter();
+            IntentFilter bootCompleted = new IntentFilter();
             bootCompleted.addAction("android.intent.action.BOOT_COMPLETED");
             context.registerReceiver(receiver, bootCompleted);
 
-            final IntentFilter quickBootPowerOn = new IntentFilter();
+            IntentFilter quickBootPowerOn = new IntentFilter();
             quickBootPowerOn.addAction("android.intent.action.QUICKBOOT_POWERON");
             context.registerReceiver(receiver, quickBootPowerOn);
 
-            QuoteUnquoteWidget.receiversRegistered = true;
+            receiversRegistered = true;
         }
     }
 
     @Nullable
     public static ExecutorService getExecutorService() {
-        if (QuoteUnquoteWidget.executorService == null) {
-            QuoteUnquoteWidget.executorService = Executors.newFixedThreadPool(5);
+        if (executorService == null) {
+            executorService = Executors.newFixedThreadPool(5);
         }
-        return QuoteUnquoteWidget.executorService;
+        return executorService;
     }
 
     public static void stopExecutorService() {
-        if (QuoteUnquoteWidget.executorService != null) {
+        if (executorService != null) {
             Runtime.getRuntime().addShutdownHook(new Thread(() -> {
-                QuoteUnquoteWidget.executorService.shutdown();
+                executorService.shutdown();
                 try {
-                    if (!QuoteUnquoteWidget.executorService.awaitTermination(5000, TimeUnit.MICROSECONDS)) {
+                    if (!executorService.awaitTermination(5000, TimeUnit.MICROSECONDS)) {
                         Timber.d("awaitTermination=timeout");
                     }
-                } catch (@NonNull final InterruptedException e) {
+                } catch (@NonNull InterruptedException e) {
                     Timber.e(e);
                     Thread.currentThread().interrupt();
                 }
-                Timber.d(QuoteUnquoteWidget.executorService.toString());
+                Timber.d(executorService.toString());
             }));
         }
     }
 
     @Override
-    public void onEnabled(@NonNull Context context) {
-        ContentPreferences contentPreferences = new ContentPreferences(context);
-        if (contentPreferences.getContentFavouritesLocalCode().equals("")) {
+    public void onEnabled(@NonNull final Context context) {
+        final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(context);
+        if (quotationsPreferences.getContentLocalCode().equals("")) {
             Timber.d("setting LocalCode");
-            contentPreferences.setContentFavouritesLocalCode(CloudFavouritesHelper.getLocalCode());
+            quotationsPreferences.setContentLocalCode(CloudTransferHelper.getLocalCode());
         }
-        this.startDatabaseConnectivity(context);
+
+        startDatabaseConnectivity(context);
     }
 
     @Override
     public void onUpdate(
-            @NonNull Context context,
-            @NonNull AppWidgetManager appWidgetManager,
-            @NonNull int[] widgetIds) {
-        QuoteUnquoteWidget.registerReceivers(context);
+            @NonNull final Context context,
+            @NonNull final AppWidgetManager appWidgetManager,
+            @NonNull final int[] widgetIds) {
+        registerReceivers(context);
 
-        RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.quote_unquote_widget);
+        final RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.quote_unquote_widget);
 
-        for (int widgetId : widgetIds) {
+        for (final int widgetId : widgetIds) {
             Timber.d("%d", widgetId);
 
             remoteViews.setRemoteAdapter(
@@ -144,11 +148,11 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
                     IntentFactoryHelper.createClickPendingIntent(context, widgetId, IntentFactoryHelper.TOOLBAR_PRESSED_NEXT_SEQUENTIAL));
 
             if (widgetId != 0) {
-                this.setTransparency(context, widgetId, remoteViews);
+                setTransparency(context, widgetId, remoteViews);
 
-                this.setToolbarButtonColours(context, widgetId, remoteViews);
+                setToolbarButtonColours(context, widgetId, remoteViews);
 
-                this.setToolbarButtonsVisibility(context, widgetId, remoteViews);
+                setToolbarButtonsVisibility(context, widgetId, remoteViews);
             }
 
             appWidgetManager.updateAppWidget(widgetId, remoteViews);
@@ -159,26 +163,22 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     @Override
-    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+    public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
         super.onReceive(context, intent);
 
-        int widgetId = intent.getIntExtra(
+        final int widgetId = intent.getIntExtra(
                 AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);
 
         Timber.d("%d: action=%s", widgetId, intent.getAction());
 
-        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
+        final AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
 
-        EventDailyAlarm eventDailyAlarm = new EventDailyAlarm(context, widgetId);
+        final ScheduleDailyAlarm scheduleDailyAlarm = new ScheduleDailyAlarm(context, widgetId);
 
         try {
             switch (intent.getAction()) {
-                case Intent.ACTION_MY_PACKAGE_REPLACED:
-                    this.onReceiveMyPackageReplaced(context, widgetId, appWidgetManager);
-                    break;
-
                 case Intent.ACTION_USER_PRESENT:
-                    this.onReceiveDeviceUnlock(context, appWidgetManager);
+                    onReceiveDeviceUnlock(context, appWidgetManager);
                     break;
 
                 case Intent.ACTION_BOOT_COMPLETED:
@@ -188,48 +188,48 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
                 am broadcast -a android.intent.action.BOOT_COMPLETED
                  */
                 case IntentFactoryHelper.ACTIVITY_FINISHED_CONFIGURATION:
-                    this.onReceiveActivityFinishedConfiguration(context, widgetId, eventDailyAlarm);
+                    onReceiveActivityFinishedConfiguration(context, widgetId, scheduleDailyAlarm);
                     break;
 
                 case IntentFactoryHelper.ACTIVITY_FINISHED_REPORT:
-                    this.onReceiveActivityFinishedReport(widgetId, appWidgetManager);
+                    onReceiveActivityFinishedReport(widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.DAILY_ALARM:
-                    this.onReceiveDailyAlarm(context, widgetId, eventDailyAlarm);
+                    onReceiveDailyAlarm(context, widgetId, scheduleDailyAlarm);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_FIRST:
-                    this.onReceiveToolbarPressedFirst(context, widgetId, appWidgetManager);
+                    onReceiveToolbarPressedFirst(context, widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_PREVIOUS:
-                    this.onReceiveToolbarPressedPrevious(context, widgetId, appWidgetManager);
+                    onReceiveToolbarPressedPrevious(context, widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_FAVOURITE:
-                    this.onReceiveToolbarPressedFavourite(context, widgetId, appWidgetManager);
-                    this.sendAllInstancesFavouriteNotification(context, widgetId, appWidgetManager);
+                    onReceiveToolbarPressedFavourite(context, widgetId, appWidgetManager);
+                    sendAllInstancesFavouriteNotification(context, widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.ALL_WIDGET_INSTANCES_FAVOURITE_NOTIFICATION:
-                    onReceiveAllWidgetInstancesFavouriteNotification(context, widgetId, appWidgetManager);
+                    this.onReceiveAllWidgetInstancesFavouriteNotification(context, widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_SHARE:
-                    this.onReceiveToolbarPressedShare(context, widgetId);
+                    onReceiveToolbarPressedShare(context, widgetId);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_NEXT_RANDOM:
-                    this.onReceiveToolbarPressedNextRandom(context, widgetId, appWidgetManager);
+                    onReceiveToolbarPressedNextRandom(context, widgetId, appWidgetManager);
                     break;
 
                 case IntentFactoryHelper.TOOLBAR_PRESSED_NEXT_SEQUENTIAL:
-                    this.onReceiveToolbarPressedNextSequential(context, widgetId, appWidgetManager);
+                    onReceiveToolbarPressedNextSequential(context, widgetId, appWidgetManager);
                     break;
 
                 case AppWidgetManager.ACTION_APPWIDGET_ENABLED:
-                    onReceiveActionAppwidgetEnabled(context, appWidgetManager);
+                    this.onReceiveActionAppwidgetEnabled(context, appWidgetManager);
                     break;
 
                 default:
@@ -237,120 +237,96 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
             }
         } finally {
             if (!intent.getAction().equals(AppWidgetManager.ACTION_APPWIDGET_DISABLED)) {
-                this.onUpdate(context, appWidgetManager, new int[]{widgetId});
+                onUpdate(context, appWidgetManager, new int[]{widgetId});
             }
         }
     }
 
-    private void onReceiveActionAppwidgetEnabled(@NonNull Context context, AppWidgetManager appWidgetManager) {
-        EventDailyAlarm eventDailyAlarm;
-        final int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class));
-        for (int widgetId : widgetIds) {
+    private void onReceiveActionAppwidgetEnabled(@NonNull final Context context, final AppWidgetManager appWidgetManager) {
+        ScheduleDailyAlarm scheduleDailyAlarm;
+        int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class));
+        for (final int widgetId : widgetIds) {
             Timber.d("setDailyAlarm: %d", widgetId);
-            eventDailyAlarm = new EventDailyAlarm(context, widgetId);
-            eventDailyAlarm.setDailyAlarm();
+            scheduleDailyAlarm = new ScheduleDailyAlarm(context, widgetId);
+            scheduleDailyAlarm.setDailyAlarm();
         }
     }
 
     private void onReceiveAllWidgetInstancesFavouriteNotification(
-            @NonNull Context context,
-            int widgetId,
-            AppWidgetManager appWidgetManager) {
+            @NonNull final Context context,
+            final int widgetId,
+            final AppWidgetManager appWidgetManager) {
         Timber.d("allInstancesFavouriteNotification: receive=%d", widgetId);
-        this.setHeartColour(
+        setHeartColour(
                 context,
                 widgetId,
                 new RemoteViews(context.getPackageName(), R.layout.quote_unquote_widget));
 
-        ContentPreferences contentPreferences = new ContentPreferences(widgetId, context);
+        final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
-        final int favouritesCount = this.getQuoteUnquoteModel(context).countFavouritesWithoutRx();
+        int favouritesCount = getQuoteUnquoteModel(context).countFavouritesWithoutRx();
 
-        if (contentPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
+        if (quotationsPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
             if (favouritesCount == 0) {
-                this.noFavouritesSoMoveToAll(context, widgetId, contentPreferences);
+                noFavouritesSoMoveToAll(context, widgetId, quotationsPreferences);
             } else {
-                this.getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+                getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
             }
 
             appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
         }
     }
 
-    private void onReceiveMyPackageReplaced(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        Timber.d("performing update: %d", widgetId);
-
-        this.stopDatabaseConnectivity();
-        QuoteUnquoteWidget.stopExecutorService();
-
-        DatabaseRepository.resetDatabaseInstances(context);
-
-        this.startDatabaseConnectivity(context);
-
-        for (final int id : appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class))) {
-            Timber.d("%d", id);
-            if (id != 0) {
-                PackageReplacedHelper packageReplacedHelper = new PackageReplacedHelper(id, context);
-                packageReplacedHelper.alignHistoryWithQuotations(this.getQuoteUnquoteModel(context));
-                packageReplacedHelper.migratePreferences();
-            }
-            appWidgetManager.notifyAppWidgetViewDataChanged(id, R.id.listViewQuotation);
-        }
-    }
-
-    private void startDatabaseConnectivity(@NonNull final Context context) {
-        this.setQuoteUnquoteModel(new QuoteUnquoteModel(context));
+    private void startDatabaseConnectivity(@NonNull Context context) {
+        setQuoteUnquoteModel(new QuoteUnquoteModel(context));
     }
 
     public void stopDatabaseConnectivity() {
-        this.quoteUnquoteModel = null;
+        quoteUnquoteModel = null;
     }
 
     private void onReceiveActivityFinishedReport(
-            int widgetId, @NonNull AppWidgetManager appWidgetManager) {
+            final int widgetId, @NonNull final AppWidgetManager appWidgetManager) {
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
     }
 
     private void onReceiveDeviceUnlock(
-            @NonNull Context context,
-            @NonNull AppWidgetManager appWidgetManager) {
-        final int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class));
+            @NonNull final Context context,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class));
 
-        for (int widgetId : widgetIds) {
-            if (new EventPreferences(widgetId, context).getEventDeviceUnlock()) {
-                this.scheduleEvent(context, widgetId);
+        for (final int widgetId : widgetIds) {
+            if (new SchedulePreferences(widgetId, context).getEventDeviceUnlock()) {
+                scheduleEvent(context, widgetId);
             }
         }
 
-        this.onUpdate(context, appWidgetManager, widgetIds);
+        onUpdate(context, appWidgetManager, widgetIds);
     }
 
-    public void onReceiveToolbarPressedShare(@NonNull Context context, int widgetId) {
+    public void onReceiveToolbarPressedShare(@NonNull final Context context, final int widgetId) {
         context.startActivity(IntentFactoryHelper.createIntentShare(
                 context.getResources().getString(R.string.app_name),
-                this.getQuoteUnquoteModel(context).getCurrentQuotation(widgetId).theShareContent()));
+                getQuoteUnquoteModel(context).getCurrentQuotation(widgetId).theShareContent()));
     }
 
     private void onReceiveToolbarPressedFavourite(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        ContentPreferences contentPreferences = new ContentPreferences(widgetId, context);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
-        final QuotationEntity currentQuotation = this.getQuoteUnquoteModel(context).getCurrentQuotation(
+        QuotationEntity currentQuotation = getQuoteUnquoteModel(context).getCurrentQuotation(
                 widgetId);
 
-        final int favouritesCount = this.getQuoteUnquoteModel(context).toggleFavourite(
+        int favouritesCount = getQuoteUnquoteModel(context).toggleFavourite(
                 widgetId, currentQuotation.digest);
 
-        if (contentPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
+        if (quotationsPreferences.getContentSelection() == ContentSelection.FAVOURITES) {
             if (favouritesCount == 0) {
-                this.noFavouritesSoMoveToAll(context, widgetId, contentPreferences);
+                noFavouritesSoMoveToAll(context, widgetId, quotationsPreferences);
             } else {
-                this.getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+                getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
             }
 
             appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
@@ -358,13 +334,13 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     private void sendAllInstancesFavouriteNotification(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        for (final int id : appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class))) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        for (int id : appWidgetManager.getAppWidgetIds(new ComponentName(context, QuoteUnquoteWidget.class))) {
             if (id != widgetId) {
                 Timber.d("allInstancesFavouriteNotification: from=%d; send=%d", widgetId, id);
-                Intent instancesIntent = IntentFactoryHelper.createIntent(context, id);
+                final Intent instancesIntent = IntentFactoryHelper.createIntent(context, id);
                 instancesIntent.setAction(IntentFactoryHelper.ALL_WIDGET_INSTANCES_FAVOURITE_NOTIFICATION);
                 context.sendBroadcast(instancesIntent);
             }
@@ -372,100 +348,100 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     private void noFavouritesSoMoveToAll(
-            @NonNull final Context context,
-            final int widgetId,
-            @NonNull final ContentPreferences contentPreferences) {
-        Timber.d("%s", contentPreferences.getContentSelection());
+            @NonNull Context context,
+            int widgetId,
+            @NonNull QuotationsPreferences quotationsPreferences) {
+        Timber.d("%s", quotationsPreferences.getContentSelection());
 
-        if (contentPreferences.getContentSelection() != ContentSelection.ALL) {
-            contentPreferences.setContentSelection(ContentSelection.ALL);
-            Timber.d("%s", contentPreferences.getContentSelection());
-            this.getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+        if (quotationsPreferences.getContentSelection() != ContentSelection.ALL) {
+            quotationsPreferences.setContentSelection(ContentSelection.ALL);
+            Timber.d("%s", quotationsPreferences.getContentSelection());
+            getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
         }
     }
 
     public void onReceiveToolbarPressedFirst(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        this.getQuoteUnquoteModel(context).resetPrevious(widgetId, new ContentPreferences(widgetId, context).getContentSelection());
-        this.getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        getQuoteUnquoteModel(context).resetPrevious(widgetId, new QuotationsPreferences(widgetId, context).getContentSelection());
+        getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
 
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
     }
 
     private void onReceiveToolbarPressedPrevious(
-            @NonNull Context context, int widgetId, @NonNull AppWidgetManager appWidgetManager) {
-        this.getQuoteUnquoteModel(context).markAsCurrentPrevious(widgetId);
+            @NonNull final Context context, final int widgetId, @NonNull final AppWidgetManager appWidgetManager) {
+        getQuoteUnquoteModel(context).markAsCurrentPrevious(widgetId);
 
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
     }
 
     private void onReceiveToolbarPressedNextRandom(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        this.onReceiveToolbarPressedNext(context, widgetId, appWidgetManager, true);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        onReceiveToolbarPressedNext(context, widgetId, appWidgetManager, true);
     }
 
     private void onReceiveToolbarPressedNextSequential(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager) {
-        this.onReceiveToolbarPressedNext(context, widgetId, appWidgetManager, false);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager) {
+        onReceiveToolbarPressedNext(context, widgetId, appWidgetManager, false);
     }
 
     private void onReceiveToolbarPressedNext(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull AppWidgetManager appWidgetManager,
-            boolean randomNext) {
-        this.getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, randomNext);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final AppWidgetManager appWidgetManager,
+            final boolean randomNext) {
+        getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, randomNext);
         appWidgetManager.notifyAppWidgetViewDataChanged(widgetId, R.id.listViewQuotation);
     }
 
     private void onReceiveDailyAlarm(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull EventDailyAlarm scheduleDailyAlarm) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final ScheduleDailyAlarm scheduleDailyAlarm) {
         scheduleDailyAlarm.setDailyAlarm();
-        this.scheduleEvent(context, widgetId);
+        scheduleEvent(context, widgetId);
     }
 
-    private void scheduleEvent(@NonNull final Context context, final int widgetId) {
-        final EventPreferences eventPreferences = new EventPreferences(widgetId, context);
+    private void scheduleEvent(@NonNull Context context, int widgetId) {
+        SchedulePreferences schedulePreferences = new SchedulePreferences(widgetId, context);
 
-        this.getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, eventPreferences.getEventNextRandom());
+        getQuoteUnquoteModel(context).markAsCurrentNext(widgetId, schedulePreferences.getEventNextRandom());
 
-        if (eventPreferences.getEventDisplayWidgetAndNotification()) {
-            final QuotationEntity currentQuotation = this.getQuoteUnquoteModel(context).getCurrentQuotation(
+        if (schedulePreferences.getEventDisplayWidgetAndNotification()) {
+            QuotationEntity currentQuotation = getQuoteUnquoteModel(context).getCurrentQuotation(
                     widgetId);
 
-            this.notificationHelper.displayNotification(context, currentQuotation);
+            notificationHelper.displayNotification(context, currentQuotation);
         }
     }
 
     private void onReceiveActivityFinishedConfiguration(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull EventDailyAlarm eventDailyAlarm) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final ScheduleDailyAlarm scheduleDailyAlarm) {
         Timber.d("%d", widgetId);
-        this.getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
-        eventDailyAlarm.setDailyAlarm();
+        getQuoteUnquoteModel(context).markAsCurrentDefault(widgetId);
+        scheduleDailyAlarm.setDailyAlarm();
     }
 
     private void setTransparency(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull RemoteViews remoteViews) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        int seekBarValue = getAppearancePreferences(context, widgetId).getAppearanceTransparency();
+        int seekBarValue = this.getAppearancePreferences(context, widgetId).getAppearanceTransparency();
         seekBarValue = seekBarValue / 10;
 
-        String appearanceColour = getAppearancePreferences(context, widgetId).getAppearanceColour();
+        final String appearanceColour = this.getAppearancePreferences(context, widgetId).getAppearanceColour();
 
-        int transparencyMask = getTransparencyMask(seekBarValue, appearanceColour);
+        final int transparencyMask = this.getTransparencyMask(seekBarValue, appearanceColour);
 
         final String setBackgroundColor = "setBackgroundColor";
         remoteViews.setInt(R.id.listViewQuotation, setBackgroundColor, transparencyMask);
@@ -478,25 +454,25 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     public int getTransparencyMask(
-            int seekBarValue,
-            @NonNull String appearanceColour) {
+            final int seekBarValue,
+            @NonNull final String appearanceColour) {
 
         float transparency = 1;
         if (seekBarValue != -1) {
             transparency -= seekBarValue * .1f;
         }
 
-        String hex = appearanceColour.replace("#FF", "");
+        final String hex = appearanceColour.replace("#FF", "");
         return (int) (transparency * 0xFF) << 24 | (int) Long.parseLong(hex, 16);
     }
 
     private void setToolbarButtonsVisibility(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull RemoteViews remoteViews) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        AppearancePreferences appearancePreferences = getAppearancePreferences(context, widgetId);
+        final AppearancePreferences appearancePreferences = this.getAppearancePreferences(context, widgetId);
 
         if (!appearancePreferences.getAppearanceToolbarFirst()
                 && !appearancePreferences.getAppearanceToolbarPrevious()
@@ -504,38 +480,38 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
                 && !appearancePreferences.getAppearanceToolbarShare()
                 && !appearancePreferences.getAppearanceToolbarRandom()
                 && !appearancePreferences.getAppearanceToolbarSequential()) {
-            this.setToolbarVisibility(remoteViews, false);
+            setToolbarVisibility(remoteViews, false);
         } else {
-            this.setToolbarVisibility(remoteViews, true);
+            setToolbarVisibility(remoteViews, true);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarFirst(),
                     R.id.imageButtonFirst);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarPrevious(),
                     R.id.imageButtonPrevious);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarFavourite(),
                     R.id.imageButtonFavourite);
 
-            this.setHeartColour(context, widgetId, remoteViews);
+            setHeartColour(context, widgetId, remoteViews);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarShare(),
                     R.id.imageButtonShare);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarRandom(),
                     R.id.imageButtonNextRandom);
 
-            this.setToolbarButtonVisibility(
+            setToolbarButtonVisibility(
                     remoteViews,
                     appearancePreferences.getAppearanceToolbarSequential(),
                     R.id.imageButtonNextSequential);
@@ -543,8 +519,8 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     private void setToolbarVisibility(
-            @NonNull RemoteViews remoteViews,
-            boolean toolbarEnabled) {
+            @NonNull final RemoteViews remoteViews,
+            final boolean toolbarEnabled) {
         if (toolbarEnabled) {
             remoteViews.setViewVisibility(R.id.linearLayoutToolbar, View.VISIBLE);
         } else {
@@ -553,12 +529,12 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     private void setToolbarButtonColours(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull RemoteViews remoteViews) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        if (getAppearancePreferences(context, widgetId).getAppearanceToolbarColour().equals("#FFFFFFFF")) {
+        if (this.getAppearancePreferences(context, widgetId).getAppearanceToolbarColour().equals("#FFFFFFFF")) {
             remoteViews.setImageViewResource(R.id.imageButtonFirst, R.drawable.ic_toolbar_first_ffffffff_24);
             remoteViews.setImageViewResource(R.id.imageButtonPrevious, R.drawable.ic_toolbar_previous_ffffffff_24);
             remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_ffffffff_24);
@@ -575,18 +551,18 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
             remoteViews.setImageViewResource(R.id.imageButtonNextRandom, R.drawable.ic_toolbar_next_random_ff000000_24);
         }
 
-        this.setHeartColour(context, widgetId, remoteViews);
+        setHeartColour(context, widgetId, remoteViews);
     }
 
     @NonNull
-    public AppearancePreferences getAppearancePreferences(@NonNull Context context, int widgetId) {
+    public AppearancePreferences getAppearancePreferences(@NonNull final Context context, final int widgetId) {
         return new AppearancePreferences(widgetId, context);
     }
 
     private void setToolbarButtonVisibility(
-            @NonNull RemoteViews remoteViews,
-            boolean toolbarButtonEnabled,
-            @IdRes int imageButtonId) {
+            @NonNull final RemoteViews remoteViews,
+            final boolean toolbarButtonEnabled,
+            @IdRes final int imageButtonId) {
 
         if (toolbarButtonEnabled) {
             remoteViews.setViewVisibility(imageButtonId, View.VISIBLE);
@@ -596,68 +572,72 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
     }
 
     public void setHeartColour(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull RemoteViews remoteViews) {
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        QuotationEntity quotationEntity = this.getQuoteUnquoteModel(context).getCurrentQuotation(
+        final QuotationEntity quotationEntity = getQuoteUnquoteModel(context).getCurrentQuotation(
                 widgetId);
 
-        if (quotationEntity != null && this.getQuoteUnquoteModel(context).isFavourite(quotationEntity.digest)) {
+        if (quotationEntity != null && getQuoteUnquoteModel(context).isFavourite(quotationEntity.digest)) {
             remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_red_24);
         }
     }
 
     @Override
     public void onDeleted(
-            @NonNull Context context,
-            @NonNull int[] widgetIds) {
+            @NonNull final Context context,
+            @NonNull final int[] widgetIds) {
         // a widget instance deleted
         super.onDeleted(context, widgetIds);
 
-        for (int widgetId : widgetIds) {
+        for (final int widgetId : widgetIds) {
             Timber.d("%d", widgetId);
 
-            this.getQuoteUnquoteModel(context).delete(widgetId);
+            getQuoteUnquoteModel(context).delete(widgetId);
             PreferencesFacade.delete(context, widgetId);
 
-            EventDailyAlarm eventDailyAlarm = new EventDailyAlarm(context, widgetId);
-            eventDailyAlarm.resetAnyExistingDailyAlarm();
+            final ScheduleDailyAlarm scheduleDailyAlarm = new ScheduleDailyAlarm(context, widgetId);
+            scheduleDailyAlarm.resetAnyExistingDailyAlarm();
         }
     }
 
     @Override
-    public void onDisabled(@NonNull Context context) {
+    public void onDisabled(@NonNull final Context context) {
         // last widget instance deleted
         super.onDisabled(context);
 
         try {
-            this.getQuoteUnquoteModel(context).disable();
-            ContentPreferences contentPreferences = new ContentPreferences(context);
-            String localCode = contentPreferences.getContentFavouritesLocalCode();
-            PreferencesFacade.disable(context);
+            getQuoteUnquoteModel(context).disable();
+            final QuotationsPreferences quotationsPreferences = new QuotationsPreferences(context);
+            final String localCode = quotationsPreferences.getContentLocalCode();
+            PreferencesFacade.erase(context);
             Timber.d("setting LocalCode");
-            contentPreferences.setContentFavouritesLocalCode(localCode);
+            quotationsPreferences.setContentLocalCode(localCode);
+
+            if (CloudServiceBackup.isRunning) {
+                context.stopService(new Intent(context, CloudServiceBackup.class));
+            }
 
-            if (CloudServiceSend.isRunning) {
-                context.stopService(new Intent(context, CloudServiceSend.class));
+            if (CloudServiceRestore.isRunning) {
+                context.stopService(new Intent(context, CloudServiceRestore.class));
             }
         } finally {
-            this.stopDatabaseConnectivity();
-            QuoteUnquoteWidget.stopExecutorService();
+            stopDatabaseConnectivity();
+            stopExecutorService();
         }
     }
 
     @Nullable
-    public QuoteUnquoteModel getQuoteUnquoteModel(@NonNull Context context) {
-        if (this.quoteUnquoteModel == null) {
-            this.quoteUnquoteModel = new QuoteUnquoteModel(context);
+    public QuoteUnquoteModel getQuoteUnquoteModel(@NonNull final Context context) {
+        if (quoteUnquoteModel == null) {
+            quoteUnquoteModel = new QuoteUnquoteModel(context);
         }
-        return this.quoteUnquoteModel;
+        return quoteUnquoteModel;
     }
 
-    public void setQuoteUnquoteModel(@Nullable final QuoteUnquoteModel quoteUnquoteModel) {
+    public void setQuoteUnquoteModel(@Nullable QuoteUnquoteModel quoteUnquoteModel) {
         this.quoteUnquoteModel = quoteUnquoteModel;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudService.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudService.java
new file mode 100644
index 0000000..388bd8b
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudService.java
@@ -0,0 +1,44 @@
+package com.github.jameshnsears.quoteunquote.cloud;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+
+public class CloudService extends Service {
+    public static boolean isRunning;
+    @Nullable
+    public final CloudTransfer cloudTransfer = new CloudTransfer();
+    @NonNull
+    public Handler handler = new Handler(Looper.getMainLooper());
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+
+        isRunning = false;
+        CloudTransfer.shutdown();
+    }
+
+    @Override
+    @Nullable
+    public IBinder onBind(@NonNull final Intent intent) {
+        return null;
+    }
+
+    @Nullable
+    public Context getServiceContext() {
+        return this.getApplicationContext();
+    }
+
+    protected void broadcastButtonEnabledEvent(@NonNull String event) {
+        LocalBroadcastManager broadcaster = LocalBroadcastManager.getInstance(this);
+        broadcaster.sendBroadcast(new Intent(event));
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java
new file mode 100644
index 0000000..ab8f22e
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceBackup.java
@@ -0,0 +1,78 @@
+package com.github.jameshnsears.quoteunquote.cloud;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferFragment;
+import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import timber.log.Timber;
+
+public class CloudServiceBackup extends CloudService {
+    @Override
+    public int onStartCommand(
+            @NonNull final Intent intent,
+            final int flags,
+            final int startId) {
+
+        if (!CloudService.isRunning) {
+            CloudService.isRunning = true;
+
+            new Thread(() -> {
+                Timber.d("isRunning=%b", CloudService.isRunning);
+
+                final Context context = getServiceContext();
+
+                if (!cloudTransfer.isInternetAvailable()) {
+                    handler.post(() -> Toast.makeText(
+                            context,
+                            context.getString(R.string.fragment_transfer_internet_missing),
+                            Toast.LENGTH_SHORT).show());
+                } else {
+                    handler.post(() -> Toast.makeText(
+                            context,
+                            context.getString(R.string.fragment_transfer_backup_sending),
+                            Toast.LENGTH_SHORT).show());
+
+                    if (cloudTransfer.backup(intent.getStringExtra("asJson"))) {
+                        handler.post(() -> Toast.makeText(
+                                context,
+                                context.getString(R.string.fragment_transfer_backup_success),
+                                Toast.LENGTH_SHORT).show());
+
+                        auditBackup(intent);
+                    } else {
+                        handler.post(() -> Toast.makeText(
+                                context,
+                                context.getString(R.string.fragment_transfer_internet_missing),
+                                Toast.LENGTH_SHORT).show());
+                    }
+                }
+
+                CloudService.isRunning = false;
+                Timber.d("isRunning=%b", CloudService.isRunning);
+
+                this.broadcastButtonEnabledEvent(TransferFragment.ENABLE_BUTTON_RESTORE);
+                this.broadcastButtonEnabledEvent(TransferFragment.ENABLE_BUTTON_BACKUP);
+
+                stopSelf();
+
+            }).start();
+        }
+
+        return Service.START_NOT_STICKY;
+    }
+
+    private void auditBackup(@NonNull Intent intent) {
+        final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+        properties.put("code", intent.getStringExtra("localCodeValue"));
+        AuditEventHelper.auditEvent("BACKUP", properties);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceHelper.java
deleted file mode 100644
index 71f12ca..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceHelper.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud;
-
-import android.content.Context;
-import android.os.Handler;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-
-import com.github.jameshnsears.quoteunquote.R;
-import com.github.jameshnsears.quoteunquote.utils.ui.ToastHelper;
-
-public class CloudServiceHelper {
-    public static void showNoNetworkToast(@NonNull Context context, @NonNull final Handler handler) {
-        handler.post(() -> ToastHelper.makeToast(
-                context,
-                context.getString(R.string.fragment_content_favourites_share_comms),
-                Toast.LENGTH_LONG));
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java
deleted file mode 100644
index a81886a..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud;
-
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Looper;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.jameshnsears.quoteunquote.R;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentFragment;
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
-import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
-import com.github.jameshnsears.quoteunquote.utils.ui.ToastHelper;
-
-import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
-
-import timber.log.Timber;
-
-public class CloudServiceReceive extends Service {
-    private IBinder binder;
-    private Handler handler = getHandler();
-    private CloudFavourites cloudFavourites = getCloudFavourites();
-    public boolean isRunning;
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        binder = new CloudServiceReceiveLocalBinder(this);
-    }
-
-    @Override
-    public void onDestroy() {
-        Timber.d("%b", isRunning);
-
-        isRunning = false;
-
-        handler = null;
-
-        binder = null;
-
-        CloudFavourites.shutdown();
-        cloudFavourites = null;
-
-        super.onDestroy();
-    }
-
-    @NonNull
-    protected Handler getHandler() {
-        return new Handler(Looper.getMainLooper());
-    }
-
-    @NonNull
-    protected DatabaseRepository getDatabaseRepository(@NonNull final Context context) {
-        return DatabaseRepository.getInstance(context);
-    }
-
-    @Override
-    @NonNull
-    public IBinder onBind(@NonNull Intent intent) {
-        return binder;
-    }
-
-    public void receive(
-            @NonNull ContentFragment contentFragment,
-            @NonNull String remoteCodeValue) {
-
-        if (!isRunning) {
-            isRunning = true;
-
-            new Thread(() -> {
-                Timber.d("isRunning=%b", isRunning);
-
-                Context context = getServiceContext();
-
-                if (!cloudFavourites.isInternetAvailable()) {
-                    CloudServiceHelper.showNoNetworkToast(context, handler);
-                } else {
-                    handler.post(() -> ToastHelper.makeToast(
-                            context,
-                            context.getString(R.string.fragment_content_favourites_share_receiving),
-                            Toast.LENGTH_SHORT));
-
-                    List<String> favouritesReceived = cloudFavourites.receive(
-                            CloudFavourites.TIMEOUT_SECONDS,
-                            CloudFavouritesHelper.jsonReceiveRequest(remoteCodeValue)).digests;
-
-                    if (favouritesReceived == null) {
-                        handler.post(() -> ToastHelper.makeToast(
-                                context, context.getString(R.string.fragment_content_favourites_share_missing), Toast.LENGTH_SHORT));
-                    } else {
-                        DatabaseRepository databaseRepository = getDatabaseRepository(context);
-                        for (String digest: favouritesReceived) {
-                            if (databaseRepository.getQuotation(digest) != null) {
-                                databaseRepository.markAsFavourite(digest);
-                            }
-                        }
-
-                        handler.post(() -> ToastHelper.makeToast(
-                                context, context.getString(R.string.fragment_content_favourites_share_received), Toast.LENGTH_SHORT));
-
-                        if (contentFragment != null) {
-                            contentFragment.setFavouriteCount();
-                        }
-
-                        ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-                        properties.put("code", remoteCodeValue);
-                        AuditEventHelper.auditEvent("FAVOURITE_RECEIVE", properties);
-                    }
-                }
-
-                isRunning = false;
-                Timber.d("isRunning=%b", isRunning);
-
-            }).start();
-        }
-    }
-
-    @NonNull
-    protected CloudFavourites getCloudFavourites() {
-        return new CloudFavourites();
-    }
-
-    @Nullable
-    public Context getServiceContext() {
-        return getApplicationContext();
-    }
-
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveLocalBinder.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveLocalBinder.java
deleted file mode 100644
index 90297f0..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveLocalBinder.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud;
-
-import android.os.Binder;
-
-import androidx.annotation.NonNull;
-
-public class CloudServiceReceiveLocalBinder extends Binder {
-    private final CloudServiceReceive cloudServiceReceive;
-
-    public CloudServiceReceiveLocalBinder(@NonNull CloudServiceReceive cloudServiceReceive) {
-        this.cloudServiceReceive = cloudServiceReceive;
-    }
-
-    @NonNull
-    public CloudServiceReceive getService() {
-        return cloudServiceReceive;
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java
new file mode 100644
index 0000000..df31f5b
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceRestore.java
@@ -0,0 +1,102 @@
+package com.github.jameshnsears.quoteunquote.cloud;
+
+import android.app.Service;
+import android.content.Context;
+import android.content.Intent;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer;
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferRestoreResponse;
+import com.github.jameshnsears.quoteunquote.cloud.transfer.restore.TransferRestore;
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferFragment;
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
+import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import timber.log.Timber;
+
+public class CloudServiceRestore extends CloudService {
+    @Override
+    public int onStartCommand(
+            @NonNull final Intent intent,
+            final int flags,
+            final int startId) {
+
+        if (!CloudService.isRunning) {
+            CloudService.isRunning = true;
+
+            new Thread(() -> {
+                Timber.d("isRunning=%b", CloudService.isRunning);
+
+                final Context context = getServiceContext();
+
+                if (!cloudTransfer.isInternetAvailable()) {
+                    handler.post(() -> Toast.makeText(
+                            context,
+                            context.getString(R.string.fragment_transfer_internet_missing),
+                            Toast.LENGTH_SHORT).show());
+                } else {
+                    auditRestore(intent);
+
+                    handler.post(() -> Toast.makeText(
+                            context,
+                            context.getString(R.string.fragment_transfer_restore_receiving),
+                            Toast.LENGTH_SHORT).show());
+
+                    TransferRestoreResponse transferRestoreResponse
+                            = cloudTransfer.restore(
+                                    CloudTransfer.TIMEOUT_SECONDS,
+                                    new TransferRestore().requestJson(
+                                            intent.getStringExtra("remoteCodeValue")));
+
+                    if (transferRestoreResponse.getReason().equals("no JSON for code")) {
+                        handler.post(() -> Toast.makeText(
+                                context,
+                                context.getString(R.string.fragment_transfer_restore_missing_code),
+                                Toast.LENGTH_SHORT).show());
+                    }
+                    else if (transferRestoreResponse == null) {
+                        handler.post(() -> Toast.makeText(
+                                context,
+                                context.getString(R.string.fragment_transfer_internet_missing),
+                                Toast.LENGTH_SHORT).show());
+                    }
+                    else {
+                        TransferRestore transferRestore = new TransferRestore();
+                        transferRestore.restore(
+                                context,
+                                DatabaseRepository.getInstance(context),
+                                transferRestoreResponse.getTransfer());
+
+                        handler.post(() -> Toast.makeText(
+                                context,
+                                context.getString(R.string.fragment_transfer_restore_success),
+                                Toast.LENGTH_SHORT).show());
+                    }
+
+                    broadcastButtonEnabledEvent(TransferFragment.ENABLE_BUTTON_RESTORE);
+                    broadcastButtonEnabledEvent(TransferFragment.ENABLE_BUTTON_BACKUP);
+                }
+
+                CloudService.isRunning = false;
+                Timber.d("isRunning=%b", CloudService.isRunning);
+
+                stopSelf();
+
+            }).start();
+        }
+
+        return Service.START_NOT_STICKY;
+    }
+
+    protected void auditRestore(@NonNull Intent intent) {
+        final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+        properties.put("code", intent.getStringExtra("remoteCodeValue"));
+        AuditEventHelper.auditEvent("RESTORE", properties);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSend.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSend.java
deleted file mode 100644
index 90f0dc2..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSend.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud;
-
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Looper;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.jameshnsears.quoteunquote.R;
-import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
-import com.github.jameshnsears.quoteunquote.utils.ui.ToastHelper;
-
-import java.util.concurrent.ConcurrentHashMap;
-
-import timber.log.Timber;
-
-public class CloudServiceSend extends Service {
-    public static boolean isRunning;
-    @NonNull
-    public final Handler handler = new Handler(Looper.getMainLooper());
-    @Nullable
-    public final CloudFavourites cloudFavourites = this.getCloudFavourites();
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        Timber.d("%b", CloudServiceSend.isRunning);
-        CloudServiceSend.isRunning = false;
-        CloudFavourites.shutdown();
-    }
-
-    @Override
-    @Nullable
-    public IBinder onBind(@NonNull Intent intent) {
-        return null;
-    }
-
-    @Override
-    public int onStartCommand(
-            @NonNull Intent intent,
-            int flags,
-            int startId) {
-
-        if (!CloudServiceSend.isRunning) {
-            CloudServiceSend.isRunning = true;
-
-            new Thread(() -> {
-                Timber.d("isRunning=%b", CloudServiceSend.isRunning);
-
-                Context context = this.getServiceContext();
-
-                if (!this.cloudFavourites.isInternetAvailable()) {
-                    CloudServiceHelper.showNoNetworkToast(context, this.handler);
-                } else {
-                    this.handler.post(() -> ToastHelper.makeToast(
-                            context,
-                            context.getString(R.string.fragment_content_favourites_share_sending),
-                            Toast.LENGTH_SHORT));
-
-                    if (this.cloudFavourites.save(intent.getStringExtra("savePayload"))) {
-
-                        this.handler.post(() -> ToastHelper.makeToast(
-                                context,
-                                context.getString(R.string.fragment_content_favourites_share_sent),
-                                Toast.LENGTH_SHORT));
-
-                        this.auditSend(intent);
-                    } else {
-                        CloudServiceHelper.showNoNetworkToast(context, this.handler);
-                    }
-                }
-
-                CloudServiceSend.isRunning = false;
-                Timber.d("isRunning=%b", CloudServiceSend.isRunning);
-
-                this.stopSelf();
-
-            }).start();
-        }
-
-        return Service.START_NOT_STICKY;
-    }
-
-    protected void auditSend(@NonNull final Intent intent) {
-        ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-        properties.put("code", intent.getStringExtra("localCodeValue"));
-        AuditEventHelper.auditEvent("FAVOURITE_SEND", properties);
-    }
-
-    @NonNull
-    public CloudFavourites getCloudFavourites() {
-        return new CloudFavourites();
-    }
-
-    @Nullable
-    public Context getServiceContext() {
-        return getApplicationContext();
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferCommon.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferCommon.kt
new file mode 100644
index 0000000..6b0e1fd
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferCommon.kt
@@ -0,0 +1,11 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer
+
+import com.google.gson.GsonBuilder
+
+open class TransferCommon {
+    fun asJson(transfer: Transfer): String {
+        val builder = GsonBuilder()
+        builder.setPrettyPrinting()
+        return builder.create().toJson(transfer)
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferUtility.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferUtility.kt
new file mode 100644
index 0000000..239e3cd
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/TransferUtility.kt
@@ -0,0 +1,18 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer
+
+import android.appwidget.AppWidgetManager
+import android.content.ComponentName
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteWidget
+
+object TransferUtility {
+    fun getWidgetIds(context: Context): IntArray {
+        val appWidgetManager = AppWidgetManager.getInstance(context)
+        return appWidgetManager.getAppWidgetIds(
+            ComponentName(
+                context,
+                QuoteUnquoteWidget::class.java
+            )
+        )
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackup.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackup.kt
new file mode 100644
index 0000000..33ab0c3
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackup.kt
@@ -0,0 +1,23 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferCommon
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferPreferences
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+
+open class TransferBackup(val context: Context) : TransferCommon() {
+    fun transfer(databaseRepository: DatabaseRepository): Transfer {
+        return Transfer(
+            getLocalCode(),
+            TransferBackupCurrent(context).current(databaseRepository),
+            TransferBackupFavourite().favourite(databaseRepository),
+            TransferBackupPrevious().previous(databaseRepository),
+            TransferBackupSettings(context).settings()
+        )
+    }
+
+    open fun getLocalCode(): String {
+        return TransferPreferences(context).transferLocalCode
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt
new file mode 100644
index 0000000..9062a0d
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupCurrent.kt
@@ -0,0 +1,26 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Current
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+
+open class TransferBackupCurrent(val context: Context) {
+    fun current(databaseRepository: DatabaseRepository): List<Current> {
+        val widgetIds = TransferUtility.getWidgetIds(context)
+
+        val currentList = mutableListOf<Current>()
+
+        for (widgetIdsIndex in widgetIds.indices) {
+            val widgetId = widgetIds[widgetIdsIndex]
+            currentList.add(
+                Current(
+                    databaseRepository.getCurrentQuotation(widgetId).digest,
+                    widgetId
+                )
+            )
+        }
+
+        return currentList
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt
new file mode 100644
index 0000000..46d9b16
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupFavourite.kt
@@ -0,0 +1,20 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Favourite
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+
+class TransferBackupFavourite {
+    fun favourite(databaseRepository: DatabaseRepository): List<Favourite> {
+        val favouriteList = mutableListOf<Favourite>()
+
+        for (favourite in databaseRepository.favourites) {
+            favouriteList.add(
+                Favourite(
+                    favourite.digest, favourite.navigation
+                )
+            )
+        }
+
+        return favouriteList
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt
new file mode 100644
index 0000000..95be045
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupPrevious.kt
@@ -0,0 +1,23 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Previous
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+
+open class TransferBackupPrevious {
+    fun previous(databaseRepository: DatabaseRepository): List<Previous> {
+        val previousList = mutableListOf<Previous>()
+
+        for (previous in databaseRepository.previous) {
+            previousList.add(
+                Previous(
+                    previous.contentType.contentSelection,
+                    previous.digest,
+                    previous.navigation,
+                    previous.widgetId
+                )
+            )
+        }
+
+        return previousList
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
new file mode 100644
index 0000000..a26269e
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/backup/TransferBackupSettings.kt
@@ -0,0 +1,97 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.backup
+
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Schedule
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Settings
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Appearance
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Quotations
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.schedule.SchedulePreferences
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection
+
+// Settings are set on demand in the UI; the settings listed here define all possible
+// keys but not accurate values.
+open class TransferBackupSettings(val context: Context) {
+    fun settings(): List<Settings> {
+        val settingsList = mutableListOf<Settings>()
+
+        val widgetIds = TransferUtility.getWidgetIds(context)
+
+        for (widgetIdsIndex in widgetIds.indices) {
+            settingsList.add(
+                Settings(
+                    settingsQuotations(widgetIds[widgetIdsIndex], context),
+                    settingsAppearance(widgetIds[widgetIdsIndex], context),
+                    settingsSchedule(widgetIds[widgetIdsIndex], context),
+                    widgetIds[widgetIdsIndex]
+                )
+            )
+        }
+
+        return settingsList
+    }
+
+    fun settingsQuotations(widgetId: Int, context: Context): Quotations {
+        val quotationPreferences = QuotationsPreferences(widgetId, context)
+        quotationPreferences.setContentSelection(quotationPreferences.contentSelection)
+
+        var all = false
+        var author = false
+        var favourites = false
+        var search = false
+        when (quotationPreferences.contentSelection) {
+            ContentSelection.ALL -> all = true
+            ContentSelection.AUTHOR -> author = true
+            ContentSelection.FAVOURITES -> favourites = true
+            ContentSelection.SEARCH -> search = true
+        }
+
+        return Quotations(
+            quotationPreferences.contentAddToPreviousAll,
+            all,
+            author,
+            quotationPreferences.contentSelectionAuthor,
+            favourites,
+            search,
+            quotationPreferences.contentSelectionSearchCount,
+            quotationPreferences.contentSelectionSearch
+        )
+    }
+
+    fun settingsAppearance(widgetId: Int, context: Context): Appearance {
+        val appearancePreferences = AppearancePreferences(widgetId, context)
+
+        return Appearance(
+            appearancePreferences.appearanceTransparency,
+            appearancePreferences.appearanceColour,
+            appearancePreferences.appearanceTextFamily,
+            appearancePreferences.appearanceTextStyle,
+            appearancePreferences.appearanceTextSize,
+            appearancePreferences.appearanceTextColour,
+            appearancePreferences.appearanceToolbarColour,
+            appearancePreferences.appearanceToolbarFirst,
+            appearancePreferences.appearanceToolbarPrevious,
+            appearancePreferences.appearanceToolbarFavourite,
+            appearancePreferences.appearanceToolbarShare,
+            appearancePreferences.appearanceToolbarRandom,
+            appearancePreferences.appearanceToolbarSequential
+        )
+    }
+
+    fun settingsSchedule(widgetId: Int, context: Context): Schedule {
+        val schedulePreferences = SchedulePreferences(widgetId, context)
+
+        return Schedule(
+            schedulePreferences.eventNextRandom,
+            schedulePreferences.eventNextSequential,
+            schedulePreferences.eventDisplayWidget,
+            schedulePreferences.eventDisplayWidgetAndNotification,
+            schedulePreferences.eventDaily,
+            schedulePreferences.eventDeviceUnlock,
+            schedulePreferences.eventDailyTimeMinute,
+            schedulePreferences.eventDailyTimeHour
+        )
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
new file mode 100644
index 0000000..dafcfa7
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/transfer/restore/TransferRestore.kt
@@ -0,0 +1,179 @@
+package com.github.jameshnsears.quoteunquote.cloud.transfer.restore
+
+import android.content.Context
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Appearance
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Current
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Favourite
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Previous
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Quotations
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Schedule
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Settings
+import com.github.jameshnsears.quoteunquote.cloud.transfer.Transfer
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferCommon
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferRestoreRequest
+import com.github.jameshnsears.quoteunquote.cloud.transfer.TransferUtility
+import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences
+import com.github.jameshnsears.quoteunquote.configure.fragment.schedule.SchedulePreferences
+import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection
+import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade
+import com.google.gson.GsonBuilder
+
+class TransferRestore : TransferCommon() {
+    fun requestJson(remoteCodeValue: String): String {
+        val builder = GsonBuilder()
+        builder.setPrettyPrinting()
+        return builder.create().toJson(TransferRestoreRequest(remoteCodeValue))
+    }
+
+    private fun emptySharedPreferencesExceptLocalCode(context: Context) {
+        val preferencesFacade = PreferencesFacade(context)
+        val localCode =
+            preferencesFacade.preferenceHelper!!.getPreferenceString(preferencesFacade.localCode)
+        PreferencesFacade.erase(context)
+        preferencesFacade.preferenceHelper!!.setPreference(
+            "0:CONTENT_FAVOURITES_LOCAL_CODE",
+            localCode
+        )
+    }
+
+    fun restore(context: Context, databaseRepository: DatabaseRepository, transfer: Transfer) {
+        emptySharedPreferencesExceptLocalCode(context)
+        databaseRepository.erase()
+
+        restoreCurrent(context, databaseRepository, transfer.current)
+        restoreFavourite(databaseRepository, transfer.favourites)
+        restorePrevious(context, databaseRepository, transfer.previous)
+        restoreSettings(context, transfer.settings)
+    }
+
+    private fun restoreCurrent(
+        context: Context,
+        databaseRepository: DatabaseRepository,
+        currentList: List<Current>
+    ) {
+        /*
+        restore 1 widget into 1 widget = current aligned
+
+        restore 1 widget into 2 widgets = current duplicated
+
+        restore 2 widgets into 1 widget = only first restore picked up
+        */
+        for (widgetId in TransferUtility.getWidgetIds(context)) {
+            for (index in (currentList.size - 1) downTo 0 step 1) {
+                val current = currentList[index]
+                var digest = current.digest
+                if (databaseRepository.getQuotation(current.digest) == null) {
+                    digest = DatabaseRepository.getDefaultQuotationDigest()
+                }
+
+                databaseRepository.markAsCurrent(widgetId, digest)
+            }
+        }
+    }
+
+    private fun restoreFavourite(
+        databaseRepository: DatabaseRepository,
+        favouriteList: List<Favourite>
+    ) {
+        for (index in (favouriteList.size - 1) downTo 0 step 1) {
+            val favourite = favouriteList[index]
+            if (databaseRepository.getQuotation(favourite.digest) != null) {
+                databaseRepository.markAsFavourite(favourite.digest)
+            }
+        }
+    }
+
+    fun restorePrevious(
+        context: Context,
+        databaseRepository: DatabaseRepository,
+        previousList: List<Previous>
+    ) {
+        val favourites = 2
+        val author = 3
+        val search = 4
+
+        for (widgetId in TransferUtility.getWidgetIds(context)) {
+            for (index in (previousList.size - 1) downTo 0 step 1) {
+                val previous = previousList[index]
+                if (databaseRepository.getQuotation(previous.digest) != null) {
+                    var contentSelection = ContentSelection.ALL
+                    when (previous.contentType) {
+                        favourites -> contentSelection = ContentSelection.FAVOURITES
+                        author -> contentSelection = ContentSelection.AUTHOR
+                        search -> contentSelection = ContentSelection.SEARCH
+                    }
+                    databaseRepository.markAsPrevious(widgetId, contentSelection, previous.digest)
+                }
+            }
+        }
+    }
+
+    private fun restoreSettings(context: Context, settingsList: List<Settings>) {
+        for (widgetId in TransferUtility.getWidgetIds(context)) {
+            for (setting in settingsList) {
+                restoreSettingsAppearance(widgetId, context, setting.appearance)
+                restoreSettingsQuotations(widgetId, context, setting.quotations)
+                restoreSettingsSchedules(widgetId, context, setting.schedule)
+            }
+        }
+    }
+
+    private fun restoreSettingsSchedules(
+        widgetId: Int,
+        context: Context,
+        schedule: Schedule
+    ) {
+        val schedulePreferences = SchedulePreferences(widgetId, context)
+        schedulePreferences.eventDaily = schedule.eventDaily
+        schedulePreferences.eventDailyTimeHour = schedule.eventDailyHour
+        schedulePreferences.eventDailyTimeMinute = schedule.eventDailyMinute
+        schedulePreferences.eventDeviceUnlock = schedule.eventDeviceUnlock
+        schedulePreferences.setEventdisplayWidgetAndNotification(schedule.eventDisplayAidgetAndNotification)
+        schedulePreferences.eventDisplayWidget = schedule.eventDisplayWidget
+        schedulePreferences.eventNextRandom = schedule.eventNextRandom
+        schedulePreferences.eventNextSequential = schedule.eventNextSequential
+    }
+
+    private fun restoreSettingsQuotations(
+        widgetId: Int,
+        context: Context,
+        quotations: Quotations
+    ) {
+        val quotationsPreferences = QuotationsPreferences(widgetId, context)
+        quotationsPreferences.contentSelectionAuthor = quotations.contentAuthorName
+        quotationsPreferences.contentSelectionSearchCount = quotations.contentSearchCount
+        quotationsPreferences.contentAddToPreviousAll = quotations.contentAddToPreviousAll
+        quotationsPreferences.contentSelectionSearch = quotations.contentSearchText
+
+        if (quotations.contentAuthor) quotationsPreferences.contentSelection =
+            ContentSelection.AUTHOR
+        else if (quotations.contentFavourites) quotationsPreferences.contentSelection =
+            ContentSelection.FAVOURITES
+        else if (quotations.contentSearch) quotationsPreferences.contentSelection =
+            ContentSelection.SEARCH
+        else quotationsPreferences.contentSelection = ContentSelection.ALL
+    }
+
+    private fun restoreSettingsAppearance(
+        widgetId: Int,
+        context: Context,
+        appearance: Appearance
+    ) {
+        val appearancePreferences = AppearancePreferences(widgetId, context)
+        appearancePreferences.appearanceColour = appearance.appearanceColour
+        appearancePreferences.appearanceTextColour = appearance.appearanceTextColour
+        appearancePreferences.appearanceTextFamily = appearance.appearanceTextFamily
+        appearancePreferences.appearanceTextSize = appearance.appearanceTextSize
+        appearancePreferences.appearanceTextStyle = appearance.appearanceTextStyle
+        appearancePreferences.appearanceToolbarColour = appearance.appearanceToolbarColour
+        appearancePreferences.appearanceToolbarFavourite = appearance.appearanceToolbarFavourite
+        appearancePreferences.appearanceToolbarFirst = appearance.appearanceToolbarFirst
+        appearancePreferences.appearanceToolbarPrevious = appearance.appearanceToolbarPrevious
+        appearancePreferences.appearanceToolbarRandom = appearance.appearanceToolbarRandom
+        appearancePreferences.appearanceToolbarSequential = appearance.appearanceToolbarSequential
+        appearancePreferences.appearanceToolbarShare = appearance.appearanceToolbarShare
+        appearancePreferences.appearanceTransparency = appearance.appearanceTransparency
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
index 4d00771..903fa93 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
@@ -14,44 +14,44 @@ import androidx.fragment.app.Fragment;
 
 import com.github.jameshnsears.quoteunquote.R;
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearanceFragment;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentFragment;
-import com.github.jameshnsears.quoteunquote.configure.fragment.event.EventFragment;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsFragment;
+import com.github.jameshnsears.quoteunquote.configure.fragment.schedule.ScheduleFragment;
+import com.github.jameshnsears.quoteunquote.configure.fragment.transfer.TransferFragment;
 import com.github.jameshnsears.quoteunquote.database.DatabaseRepository;
 import com.github.jameshnsears.quoteunquote.databinding.ActivityConfigureBinding;
 import com.github.jameshnsears.quoteunquote.utils.IntentFactoryHelper;
 import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
-import com.github.jameshnsears.quoteunquote.utils.ui.ToastHelper;
 import com.google.android.material.bottomnavigation.BottomNavigationView;
 
 import timber.log.Timber;
 
 public class ConfigureActivity extends AppCompatActivity {
+    public static boolean exportCalled;
+
     public int widgetId = AppWidgetManager.INVALID_APPWIDGET_ID;
 
     @Nullable
     public ActivityConfigureBinding activityConfigureBinding;
 
-    private boolean finishCalled;
-
-    public static boolean exportCalled;
-
-    public boolean broadcastFinishIntent = true;
-
     private final BottomNavigationView.OnNavigationItemSelectedListener navigationItemSelectedListener
             = item -> {
-        Fragment selectedFragment = this.getFragmentContentNewInstance();
+        Fragment selectedFragment = getFragmentContentNewInstance();
 
         switch (item.getItemId()) {
             case R.id.navigationBarQuotations:
-                selectedFragment = this.getFragmentContentNewInstance();
+                selectedFragment = getFragmentContentNewInstance();
                 break;
 
             case R.id.navigationBarAppearance:
-                selectedFragment = AppearanceFragment.newInstance(this.widgetId);
+                selectedFragment = AppearanceFragment.newInstance(widgetId);
                 break;
 
             case R.id.navigationBarSchedule:
-                selectedFragment = EventFragment.newInstance(this.widgetId);
+                selectedFragment = ScheduleFragment.newInstance(widgetId);
+                break;
+
+            case R.id.navigationBarBackupRestore:
+                selectedFragment = TransferFragment.newInstance(widgetId);
                 break;
 
             default:
@@ -62,26 +62,37 @@ public class ConfigureActivity extends AppCompatActivity {
 
         Timber.d("activeFragment=%s", activeFragment);
 
-        this.getSupportFragmentManager()
+        getSupportFragmentManager()
                 .beginTransaction()
                 .replace(R.id.fragmentPlaceholderContent, selectedFragment)
                 .commit();
 
-        this.activityConfigureBinding.scrollView.scrollTo(0, 0);
+        activityConfigureBinding.scrollView.scrollTo(0, 0);
 
         return true;
     };
 
+    public boolean broadcastFinishIntent = true;
+    @Nullable
+
+    private boolean finishCalled;
+
+    ActivityResultLauncher<Intent> wikipediaActivityLancher = this.registerForActivityResult(
+            new ActivityResultContracts.StartActivityForResult(),
+            result -> {
+                if (result.getResultCode() == Activity.RESULT_OK) {
+                    this.finish();
+                }
+            });
+
     @Override
     public void finish() {
         // back pressed
-        if (this.broadcastFinishIntent) {
-            this.broadcastTheFinishIntent();
+        if (broadcastFinishIntent) {
+            broadcastTheFinishIntent();
         }
 
-        ToastHelper.toast = null;
-
-        finishCalled = true;
+        this.finishCalled = true;
 
         super.finish();
     }
@@ -89,89 +100,78 @@ public class ConfigureActivity extends AppCompatActivity {
     @Override
     public void onPause() {
         // back pressed | swipe up | export activity started
-        if (!finishCalled && !exportCalled) {
-            finish();
+        if (!this.finishCalled && !ConfigureActivity.exportCalled) {
+            this.finish();
         }
 
         super.onPause();
     }
 
     public void broadcastTheFinishIntent() {
-        this.sendBroadcast(IntentFactoryHelper.createIntentAction(
-                this, widgetId, IntentFactoryHelper.ACTIVITY_FINISHED_CONFIGURATION));
+        sendBroadcast(IntentFactoryHelper.createIntentAction(
+                this, this.widgetId, IntentFactoryHelper.ACTIVITY_FINISHED_CONFIGURATION));
 
-        this.setResult(RESULT_OK, IntentFactoryHelper.createIntent(widgetId));
+        setResult(Activity.RESULT_OK, IntentFactoryHelper.createIntent(this.widgetId));
     }
 
     @Override
     public void onBackPressed() {
-        ContentFragment.ensureFragmentContentSearchConsistency(this.widgetId, this.getApplicationContext());
+        QuotationsFragment.ensureFragmentContentSearchConsistency(widgetId, getApplicationContext());
 
         super.onBackPressed();
     }
 
     @Override
-    public void onCreate(final @Nullable Bundle bundle) {
+    public void onCreate(@Nullable final Bundle bundle) {
         Timber.d("onCreate");
         super.onCreate(bundle);
 
         AuditEventHelper.createInstance(getApplication());
-        Intent intent = this.getIntent();
-        Bundle extras = intent.getExtras();
-
+        final Intent intent = getIntent();
+        final Bundle extras = intent.getExtras();
 
-        String wikipedia = extras.getString("wikipedia");
+        final String wikipedia = extras.getString("wikipedia");
         if (wikipedia != null && !wikipedia.equals("?") && !wikipedia.equals("")) {
-            linkToWikipedia(wikipedia);
+            this.linkToWikipedia(wikipedia);
         } else {
-            this.widgetId = extras.getInt(
+            widgetId = extras.getInt(
                     AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);
-            this.broadcastFinishIntent = extras.getBoolean("broadcastFinishIntent", true);
+            broadcastFinishIntent = extras.getBoolean("broadcastFinishIntent", true);
 
-            this.activityConfigureBinding = ActivityConfigureBinding.inflate(getLayoutInflater());
-            setContentView(this.activityConfigureBinding.getRoot());
+            activityConfigureBinding = ActivityConfigureBinding.inflate(this.getLayoutInflater());
+            this.setContentView(activityConfigureBinding.getRoot());
 
-            BottomNavigationView bottomNavigationView = this.findViewById(R.id.configureNavigation);
-            bottomNavigationView.setOnNavigationItemSelectedListener(this.navigationItemSelectedListener);
+            final BottomNavigationView bottomNavigationView = findViewById(R.id.configureNavigation);
+            bottomNavigationView.setOnNavigationItemSelectedListener(navigationItemSelectedListener);
 
             bottomNavigationView.setSelectedItemId(R.id.navigationBarQuotations);
         }
     }
 
-    private void linkToWikipedia(@NonNull String wikipedia) {
+    private void linkToWikipedia(@NonNull final String wikipedia) {
         Timber.d("wikipedia=%s", wikipedia);
 
         if (wikipedia.equals("r/quotes/")) {
-            wikipediaActivityLancher.launch(
+            this.wikipediaActivityLancher.launch(
                     IntentFactoryHelper.createIntentActionView("https://www.reddit.com/" + wikipedia));
         } else {
-            wikipediaActivityLancher.launch(
+            this.wikipediaActivityLancher.launch(
                     IntentFactoryHelper.createIntentActionView("https://en.wikipedia.org/wiki/" + wikipedia));
         }
     }
 
-    ActivityResultLauncher<Intent> wikipediaActivityLancher = registerForActivityResult(
-            new ActivityResultContracts.StartActivityForResult(),
-            result -> {
-                if (result.getResultCode() == Activity.RESULT_OK) {
-                    finish();
-                }
-            });
-
     @Override
     public void onDestroy() {
         Timber.d("onDestroy");
 
-        ToastHelper.toast = null;
-
-        DatabaseRepository.close(getApplicationContext());
+        DatabaseRepository.close(this.getApplicationContext());
         DatabaseRepository.databaseRepository = null;
 
         super.onDestroy();
     }
 
     @NonNull
-    public ContentFragment getFragmentContentNewInstance() {
-        return ContentFragment.newInstance(this.widgetId);
+    public QuotationsFragment getFragmentContentNewInstance() {
+        return QuotationsFragment.newInstance(widgetId);
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
index ab2f702..6873ff2 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/FragmentCommon.java
@@ -13,16 +13,16 @@ public class FragmentCommon extends Fragment {
         // ...
     }
 
-    public FragmentCommon(int theWidgetId) {
-        this.widgetId = theWidgetId;
+    public FragmentCommon(final int theWidgetId) {
+        widgetId = theWidgetId;
     }
 
     protected void setSpinner(
-            @NonNull Spinner spinner,
-            @NonNull BaseAdapter spinnerAdapter,
-            @NonNull String preference,
-            final int defaultSelection,
-            final int resourceArrayId) {
+            @NonNull final Spinner spinner,
+            @NonNull final BaseAdapter spinnerAdapter,
+            @NonNull final String preference,
+            int defaultSelection,
+            int resourceArrayId) {
 
         spinner.setAdapter(spinnerAdapter);
 
@@ -30,7 +30,7 @@ public class FragmentCommon extends Fragment {
             spinner.setSelection(defaultSelection);
         } else {
             int selectionIndex = 0;
-            for (String spinnerRow : this.getActivity().getBaseContext().getResources().getStringArray(resourceArrayId)) {
+            for (final String spinnerRow : getActivity().getBaseContext().getResources().getStringArray(resourceArrayId)) {
                 if (spinnerRow.equals(preference)) {
                     spinner.setSelection(selectionIndex);
                     break;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
index f4014a0..1e97e58 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragment.java
@@ -28,13 +28,13 @@ public class AppearanceFragment extends FragmentCommon {
         // dark mode support
     }
 
-    public AppearanceFragment(int widgetId) {
+    public AppearanceFragment(final int widgetId) {
         super(widgetId);
     }
 
     @NonNull
-    public static AppearanceFragment newInstance(int widgetId) {
-        AppearanceFragment fragment = new AppearanceFragment(widgetId);
+    public static AppearanceFragment newInstance(final int widgetId) {
+        final AppearanceFragment fragment = new AppearanceFragment(widgetId);
         fragment.setArguments(null);
         return fragment;
     }
@@ -42,26 +42,26 @@ public class AppearanceFragment extends FragmentCommon {
     @Override
     @NonNull
     public View onCreateView(
-            @NonNull LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        Context context = new ContextThemeWrapper(this.getActivity(), R.style.Theme_MaterialComponents_DayNight);
+            @NonNull final LayoutInflater inflater,
+            final @NonNull ViewGroup container,
+            final @NonNull Bundle savedInstanceState) {
+        final Context context = new ContextThemeWrapper(getActivity(), R.style.Theme_MaterialComponents_DayNight);
 
-        this.fragmentAppearanceBinding = FragmentAppearanceBinding.inflate(inflater.cloneInContext(context));
-        return this.fragmentAppearanceBinding.getRoot();
+        fragmentAppearanceBinding = FragmentAppearanceBinding.inflate(inflater.cloneInContext(context));
+        return fragmentAppearanceBinding.getRoot();
     }
 
     @Override
     public void onViewCreated(
-            @NonNull View view, Bundle savedInstanceState) {
+            @NonNull final View view, final @NonNull Bundle savedInstanceState) {
 
-        this.pagerAdapter = new AppearanceFragmentStateAdapter(this, this.widgetId);
-        this.fragmentAppearanceBinding.viewPager2.setAdapter(this.pagerAdapter);
+        pagerAdapter = new AppearanceFragmentStateAdapter(this, widgetId);
+        fragmentAppearanceBinding.viewPager2.setAdapter(pagerAdapter);
 
-        final String[] tabs = {"Style", "Toolbar"};
+        String[] tabs = {"Style", "Toolbar"};
         new TabLayoutMediator(
-                this.fragmentAppearanceBinding.tabLayout,
-                this.fragmentAppearanceBinding.viewPager2,
+                fragmentAppearanceBinding.tabLayout,
+                fragmentAppearanceBinding.viewPager2,
                 true,
                 false,
                 (tab, position) -> tab.setText(tabs[position])).attach();
@@ -70,6 +70,6 @@ public class AppearanceFragment extends FragmentCommon {
     @Override
     public void onDestroyView() {
         super.onDestroyView();
-        this.fragmentAppearanceBinding = null;
+        fragmentAppearanceBinding = null;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java
index 99cb3f7..2c7b075 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentStateAdapter.java
@@ -10,19 +10,20 @@ import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.tabs.t
 public class AppearanceFragmentStateAdapter extends FragmentStateAdapter {
     private final int widgetId;
 
-    public AppearanceFragmentStateAdapter(@NonNull AppearanceFragment fa, int widgetId) {
+    public AppearanceFragmentStateAdapter(@NonNull final AppearanceFragment fa, final int widgetId) {
         super(fa);
         this.widgetId = widgetId;
     }
 
+    @NonNull
     @Override
-    public Fragment createFragment(int pos) {
+    public Fragment createFragment(final int pos) {
         switch (pos) {
             case 0:
-                return AppearanceStyleFragment.newInstance(this.widgetId);
+                return AppearanceStyleFragment.newInstance(widgetId);
 
             default:
-                return AppearanceToolbarFragment.newInstance(this.widgetId);
+                return AppearanceToolbarFragment.newInstance(widgetId);
         }
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java
index 25809a4..ca24e2a 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearancePreferences.java
@@ -6,24 +6,20 @@ import androidx.annotation.NonNull;
 
 import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
 
-import java.util.Map;
-
-import timber.log.Timber;
-
 public class AppearancePreferences extends PreferencesFacade {
-    private static final String APPEARANCE_TRANSPARENCY = "APPEARANCE_TRANSPARENCY";
-    private static final String APPEARANCE_COLOUR = "APPEARANCE_COLOUR";
-    private static final String APPEARANCE_TEXT_FAMILY = "APPEARANCE_TEXT_FAMILY";
-    private static final String APPEARANCE_TEXT_STYLE = "APPEARANCE_TEXT_STYLE";
-    private static final String APPEARANCE_TEXT_SIZE = "APPEARANCE_TEXT_SIZE";
-    private static final String APPEARANCE_TEXT_COLOUR = "APPEARANCE_TEXT_COLOUR";
-    private static final String APPEARANCE_TOOLBAR_COLOUR = "APPEARANCE_TOOLBAR_COLOUR";
-    private static final String APPEARANCE_TOOLBAR_FIRST = "APPEARANCE_TOOLBAR_FIRST";
-    private static final String APPEARANCE_TOOLBAR_PREVIOUS = "APPEARANCE_TOOLBAR_PREVIOUS";
-    private static final String APPEARANCE_TOOLBAR_FAVOURITE = "APPEARANCE_TOOLBAR_FAVOURITE";
-    private static final String APPEARANCE_TOOLBAR_SHARE = "APPEARANCE_TOOLBAR_SHARE";
-    private static final String APPEARANCE_TOOLBAR_RANDOM = "APPEARANCE_TOOLBAR_RANDOM";
-    private static final String APPEARANCE_TOOLBAR_SEQUENTIAL = "APPEARANCE_TOOLBAR_SEQUENTIAL";
+    public static final String APPEARANCE_TRANSPARENCY = "APPEARANCE_TRANSPARENCY";
+    public static final String APPEARANCE_COLOUR = "APPEARANCE_COLOUR";
+    public static final String APPEARANCE_TEXT_FAMILY = "APPEARANCE_TEXT_FAMILY";
+    public static final String APPEARANCE_TEXT_STYLE = "APPEARANCE_TEXT_STYLE";
+    public static final String APPEARANCE_TEXT_SIZE = "APPEARANCE_TEXT_SIZE";
+    public static final String APPEARANCE_TEXT_COLOUR = "APPEARANCE_TEXT_COLOUR";
+    public static final String APPEARANCE_TOOLBAR_COLOUR = "APPEARANCE_TOOLBAR_COLOUR";
+    public static final String APPEARANCE_TOOLBAR_FIRST = "APPEARANCE_TOOLBAR_FIRST";
+    public static final String APPEARANCE_TOOLBAR_PREVIOUS = "APPEARANCE_TOOLBAR_PREVIOUS";
+    public static final String APPEARANCE_TOOLBAR_FAVOURITE = "APPEARANCE_TOOLBAR_FAVOURITE";
+    public static final String APPEARANCE_TOOLBAR_SHARE = "APPEARANCE_TOOLBAR_SHARE";
+    public static final String APPEARANCE_TOOLBAR_RANDOM = "APPEARANCE_TOOLBAR_RANDOM";
+    public static final String APPEARANCE_TOOLBAR_SEQUENTIAL = "APPEARANCE_TOOLBAR_SEQUENTIAL";
 
     public AppearancePreferences(
             int widgetId,
@@ -159,31 +155,4 @@ public class AppearancePreferences extends PreferencesFacade {
     public void setAppearanceToolbarSequential(boolean value) {
         this.preferenceHelper.setPreference(this.getPreferenceKey(AppearancePreferences.APPEARANCE_TOOLBAR_SEQUENTIAL), value);
     }
-
-    public void performMigration() {
-        Map<String, ?> sharedPreferenceEntries
-                = this.applicationContext.getSharedPreferences("QuoteUnquote-Preferences", Context.MODE_PRIVATE).getAll();
-
-        for (Map.Entry<String, ?> entry : sharedPreferenceEntries.entrySet()) {
-            this.widgetId = Integer.parseInt(entry.getKey().substring(0, entry.getKey().indexOf(":")));
-
-            if (entry.getKey().contains("FragmentAppearance:seekBar")) {
-                final int seekBar = (Integer) entry.getValue();
-                Timber.d("%d: seekBar=%d", this.widgetId, seekBar);
-                this.setAppearanceTransparency(seekBar);
-            }
-
-            if (entry.getKey().contains("FragmentAppearance:spinnerColour")) {
-                final String spinnerColour = (String) entry.getValue();
-                Timber.d("%d: spinnerColour=%s", this.widgetId, spinnerColour);
-                this.setAppearanceTextColour(spinnerColour);
-            }
-
-            if (entry.getKey().contains("FragmentAppearance:spinnerSize")) {
-                final int spinnerSize = (Integer) entry.getValue();
-                Timber.d("%d: spinnerSize=%d", this.widgetId, spinnerSize);
-                this.setAppearanceTextSize(spinnerSize);
-            }
-        }
-    }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceBackgroundColourSpinnerAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceBackgroundColourSpinnerAdapter.java
index 68a9d81..d0dc2de 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceBackgroundColourSpinnerAdapter.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceBackgroundColourSpinnerAdapter.java
@@ -23,37 +23,37 @@ class AppearanceBackgroundColourSpinnerAdapter extends BaseAdapter {
     @NonNull
     private final Context context;
 
-    AppearanceBackgroundColourSpinnerAdapter(@NonNull Context activityContext) {
-        this.context = activityContext;
-        this.colours = new ArrayList<>();
-        this.colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_colour_array)));
+    AppearanceBackgroundColourSpinnerAdapter(@NonNull final Context activityContext) {
+        context = activityContext;
+        colours = new ArrayList<>();
+        colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_colour_array)));
     }
 
     @Override
     public int getCount() {
-        return this.colours.size();
+        return colours.size();
     }
 
     @Override
-    public Object getItem(int arg0) {
-        return this.colours.get(arg0);
+    public Object getItem(final int arg0) {
+        return colours.get(arg0);
     }
 
     @Override
-    public long getItemId(int arg0) {
+    public long getItemId(final int arg0) {
         return arg0;
     }
 
     @Override
-    public View getView(int position, final View convertView, ViewGroup viewGroup) {
+    public View getView(final int position, View convertView, final ViewGroup viewGroup) {
         View view = convertView;
 
         if (view == null) {
-            view = LayoutInflater.from(this.context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
+            view = LayoutInflater.from(context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
         }
 
-        TextView textView = view.findViewById(android.R.id.text1);
-        textView.setBackgroundColor(Color.parseColor(this.colours.get(position)));
+        final TextView textView = view.findViewById(android.R.id.text1);
+        textView.setBackgroundColor(Color.parseColor(colours.get(position)));
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
         textView.setText(" ");
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
index 7e3e82d..ebb7b61 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceStyleFragment.java
@@ -38,13 +38,13 @@ public class AppearanceStyleFragment extends FragmentCommon {
         // dark mode support
     }
 
-    public AppearanceStyleFragment(int widgetId) {
+    public AppearanceStyleFragment(final int widgetId) {
         super(widgetId);
     }
 
     @NonNull
-    public static AppearanceStyleFragment newInstance(int widgetId) {
-        AppearanceStyleFragment fragment = new AppearanceStyleFragment(widgetId);
+    public static AppearanceStyleFragment newInstance(final int widgetId) {
+        final AppearanceStyleFragment fragment = new AppearanceStyleFragment(widgetId);
         fragment.setArguments(null);
         return fragment;
     }
@@ -52,154 +52,154 @@ public class AppearanceStyleFragment extends FragmentCommon {
     @Override
     @NonNull
     public View onCreateView(
-            @NonNull LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        Context context = new ContextThemeWrapper(this.getActivity(), R.style.Theme_MaterialComponents_DayNight);
+            @NonNull final LayoutInflater inflater,
+            final @NonNull ViewGroup container,
+            final @NonNull Bundle savedInstanceState) {
+        final Context context = new ContextThemeWrapper(getActivity(), R.style.Theme_MaterialComponents_DayNight);
 
-        this.appearancePreferences = new AppearancePreferences(widgetId, this.getContext());
+        appearancePreferences = new AppearancePreferences(this.widgetId, getContext());
 
-        this.fragmentAppearanceTabStyleBinding = FragmentAppearanceTabStyleBinding.inflate(inflater.cloneInContext(context));
-        return this.fragmentAppearanceTabStyleBinding.getRoot();
+        fragmentAppearanceTabStyleBinding = FragmentAppearanceTabStyleBinding.inflate(inflater.cloneInContext(context));
+        return fragmentAppearanceTabStyleBinding.getRoot();
     }
 
     @Override
     public void onDestroyView() {
         super.onDestroyView();
-        this.fragmentAppearanceTabStyleBinding = null;
+        fragmentAppearanceTabStyleBinding = null;
     }
 
     @Override
     public void onViewCreated(
-            @NonNull View view, Bundle savedInstanceState) {
-        this.createListenerTransparency();
-        this.createListenerBackgroundColour();
-
-        this.createListenerTextFamily();
-        this.createListenerTextStyle();
-        this.createListenerTextSize();
-        this.createListenerTextColour();
-
-        this.setTransparency();
-        this.setBackgroundColour();
-
-        this.setTextFamily();
-        this.setTextStyle();
-        this.setTextSize();
-        this.setTextColour();
+            @NonNull final View view, final @NonNull Bundle savedInstanceState) {
+        createListenerTransparency();
+        createListenerBackgroundColour();
+
+        createListenerTextFamily();
+        createListenerTextStyle();
+        createListenerTextSize();
+        createListenerTextColour();
+
+        setTransparency();
+        setBackgroundColour();
+
+        setTextFamily();
+        setTextStyle();
+        setTextSize();
+        setTextColour();
     }
 
     private void createListenerTransparency() {
-        this.fragmentAppearanceTabStyleBinding.seekBarTransparency.addOnSliderTouchListener(
+        fragmentAppearanceTabStyleBinding.seekBarTransparency.addOnSliderTouchListener(
                 new Slider.OnSliderTouchListener() {
                     @Override
-                    public void onStartTrackingTouch(@NonNull final Slider slider) {
+                    public void onStartTrackingTouch(@NonNull Slider slider) {
                         // ...
                     }
 
                     @Override
-                    public void onStopTrackingTouch(@NonNull final Slider slider) {
-                        final int sliderValue = (int) slider.getValue();
+                    public void onStopTrackingTouch(@NonNull Slider slider) {
+                        int sliderValue = (int) slider.getValue();
                         Timber.d("%d", sliderValue);
-                        AppearanceStyleFragment.this.appearancePreferences.setAppearanceTransparency(sliderValue);
+                        appearancePreferences.setAppearanceTransparency(sliderValue);
                     }
                 });
     }
 
     private void createListenerTextFamily() {
-        Spinner spinner = this.fragmentAppearanceTabStyleBinding.spinnerFamily;
+        final Spinner spinner = fragmentAppearanceTabStyleBinding.spinnerFamily;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 
             @Override
-            public void onItemSelected(final AdapterView<?> adapterView, final View view, final int i, final long l) {
-                final String selectedItem = spinner.getSelectedItem().toString();
-                if (!AppearanceStyleFragment.this.appearancePreferences.getAppearanceTextFamily().equals(selectedItem)) {
-                    AppearanceStyleFragment.this.appearancePreferences.setAppearanceTextFamily(selectedItem);
+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+                String selectedItem = spinner.getSelectedItem().toString();
+                if (!appearancePreferences.getAppearanceTextFamily().equals(selectedItem)) {
+                    appearancePreferences.setAppearanceTextFamily(selectedItem);
                 }
             }
 
             @Override
-            public void onNothingSelected(final AdapterView<?> adapterView) {
+            public void onNothingSelected(AdapterView<?> adapterView) {
                 // do nothing
             }
         });
     }
 
     private void createListenerTextStyle() {
-        Spinner spinner = this.fragmentAppearanceTabStyleBinding.spinnerStyle;
+        final Spinner spinner = fragmentAppearanceTabStyleBinding.spinnerStyle;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 
             @Override
-            public void onItemSelected(final AdapterView<?> adapterView, final View view, final int i, final long l) {
-                AppearanceStyleFragment.this.appearancePreferences.setAppearanceTextStyle(spinner.getSelectedItem().toString());
+            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+                appearancePreferences.setAppearanceTextStyle(spinner.getSelectedItem().toString());
             }
 
             @Override
-            public void onNothingSelected(final AdapterView<?> adapterView) {
+            public void onNothingSelected(AdapterView<?> adapterView) {
                 // do nothing
             }
         });
     }
 
     private void createListenerBackgroundColour() {
-        Spinner spinner = this.fragmentAppearanceTabStyleBinding.spinnerColour;
+        final Spinner spinner = fragmentAppearanceTabStyleBinding.spinnerColour;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
-            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
-                AppearanceStyleFragment.this.appearancePreferences.setAppearanceColour(spinner.getSelectedItem().toString());
+            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
+                appearancePreferences.setAppearanceColour(spinner.getSelectedItem().toString());
             }
 
             @Override
-            public void onNothingSelected(AdapterView<?> parent) {
+            public void onNothingSelected(final AdapterView<?> parent) {
                 // do nothing
             }
         });
     }
 
     private void createListenerTextSize() {
-        Spinner spinner = this.fragmentAppearanceTabStyleBinding.spinnerSize;
+        final Spinner spinner = fragmentAppearanceTabStyleBinding.spinnerSize;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
-            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
-                AppearanceStyleFragment.this.appearancePreferences.setAppearanceTextSize(Integer.parseInt(spinner.getSelectedItem().toString()));
+            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
+                appearancePreferences.setAppearanceTextSize(Integer.parseInt(spinner.getSelectedItem().toString()));
             }
 
             @Override
-            public void onNothingSelected(AdapterView<?> parent) {
+            public void onNothingSelected(final AdapterView<?> parent) {
                 // do nothing
             }
         });
     }
 
     private void createListenerTextColour() {
-        Spinner spinner = this.fragmentAppearanceTabStyleBinding.spinnerTextColour;
+        final Spinner spinner = fragmentAppearanceTabStyleBinding.spinnerTextColour;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
-            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
-                AppearanceStyleFragment.this.appearancePreferences.setAppearanceTextColour(spinner.getSelectedItem().toString());
+            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
+                appearancePreferences.setAppearanceTextColour(spinner.getSelectedItem().toString());
             }
 
             @Override
-            public void onNothingSelected(AdapterView<?> parent) {
+            public void onNothingSelected(final AdapterView<?> parent) {
                 // do nothing
             }
         });
     }
 
     public void setTextSize() {
-        int[] sizeArray = this.getResources().getIntArray(R.array.fragment_appearance_size_array);
-        List<Integer> sizeIntegerArray = this.getTextSizeIntegerArray(sizeArray);
+        final int[] sizeArray = getResources().getIntArray(R.array.fragment_appearance_size_array);
+        final List<Integer> sizeIntegerArray = getTextSizeIntegerArray(sizeArray);
 
-        ArrayAdapter<Integer> spinnerArrayAdapter =
+        final ArrayAdapter<Integer> spinnerArrayAdapter =
                 new ArrayAdapter<Integer>(
-                        this.getContext(),
+                        getContext(),
                         android.R.layout.simple_list_item_1,
                         sizeIntegerArray) {
 
                     @NonNull
                     @Override
-                    public View getView(int position, View convertView, @NonNull ViewGroup parent) {
-                        return AppearanceStyleFragment.this.getTextSizeDefault(
+                    public View getView(final int position, final View convertView, @NonNull final ViewGroup parent) {
+                        return getTextSizeDefault(
                                 position,
                                 super.getView(position, convertView, parent),
                                 sizeIntegerArray);
@@ -207,24 +207,24 @@ public class AppearanceStyleFragment extends FragmentCommon {
 
                     @NonNull
                     @Override
-                    public View getDropDownView(int position, View convertView, @NonNull ViewGroup parent) {
-                        return AppearanceStyleFragment.this.getTextSizeDefault(
+                    public View getDropDownView(final int position, final View convertView, @NonNull final ViewGroup parent) {
+                        return getTextSizeDefault(
                                 position,
                                 super.getDropDownView(position, convertView, parent),
                                 sizeIntegerArray);
                     }
                 };
 
-        this.fragmentAppearanceTabStyleBinding.spinnerSize.setAdapter(spinnerArrayAdapter);
-        this.setTextSizePreference(sizeIntegerArray, this.fragmentAppearanceTabStyleBinding.spinnerSize);
+        fragmentAppearanceTabStyleBinding.spinnerSize.setAdapter(spinnerArrayAdapter);
+        setTextSizePreference(sizeIntegerArray, fragmentAppearanceTabStyleBinding.spinnerSize);
     }
 
     private void setTextSizePreference(
-            @NonNull List<Integer> sizeIntegerArray,
-            @NonNull Spinner spinnerSize) {
-        int testSizePreference = appearancePreferences.getAppearanceTextSize();
+            @NonNull final List<Integer> sizeIntegerArray,
+            @NonNull final Spinner spinnerSize) {
+        final int testSizePreference = this.appearancePreferences.getAppearanceTextSize();
         if (testSizePreference == -1) {
-            if (this.getContext().getResources().getConfiguration().smallestScreenWidthDp >= 600) {
+            if (getContext().getResources().getConfiguration().smallestScreenWidthDp >= 600) {
                 // tablet
                 spinnerSize.setSelection(4);
             } else {
@@ -233,7 +233,7 @@ public class AppearanceStyleFragment extends FragmentCommon {
             }
         } else {
             int selectionIndex = 0;
-            for (Integer sizeInteger : sizeIntegerArray) {
+            for (final Integer sizeInteger : sizeIntegerArray) {
                 if (testSizePreference == sizeInteger) {
                     spinnerSize.setSelection(selectionIndex);
                     break;
@@ -245,80 +245,80 @@ public class AppearanceStyleFragment extends FragmentCommon {
 
     @NonNull
     public View getTextSizeDefault(
-            int position,
-            @NonNull View view,
-            @NonNull List<Integer> sizeIntegerArray) {
-        TextView textView = (TextView) view;
+            final int position,
+            @NonNull final View view,
+            @NonNull final List<Integer> sizeIntegerArray) {
+        final TextView textView = (TextView) view;
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, sizeIntegerArray.get(position).floatValue());
         return view;
     }
 
     @NonNull
-    private List<Integer> getTextSizeIntegerArray(@NonNull int... sizeArray) {
-        List<Integer> sizeIntegerArray = new ArrayList<>();
-        for (int size : sizeArray) {
-            Integer integer = size;
+    private List<Integer> getTextSizeIntegerArray(@NonNull final int... sizeArray) {
+        final List<Integer> sizeIntegerArray = new ArrayList<>();
+        for (final int size : sizeArray) {
+            final Integer integer = size;
             sizeIntegerArray.add(integer);
         }
         return sizeIntegerArray;
     }
 
     public void setTransparency() {
-        int transparency = this.appearancePreferences.getAppearanceTransparency();
+        final int transparency = appearancePreferences.getAppearanceTransparency();
         Timber.d("%d", transparency);
 
         if (transparency == -1) {
-            this.fragmentAppearanceTabStyleBinding.seekBarTransparency.setValue(0);
+            fragmentAppearanceTabStyleBinding.seekBarTransparency.setValue(0);
         } else {
-            this.fragmentAppearanceTabStyleBinding.seekBarTransparency.setValue(transparency);
+            fragmentAppearanceTabStyleBinding.seekBarTransparency.setValue(transparency);
         }
     }
 
     public void setTextFamily() {
-        this.setSpinner(
-                this.fragmentAppearanceTabStyleBinding.spinnerFamily,
-                new AppearanceTextFamilySpinnerAdapter(this.getActivity().getBaseContext()),
-                this.appearancePreferences.getAppearanceTextFamily(),
+        setSpinner(
+                fragmentAppearanceTabStyleBinding.spinnerFamily,
+                new AppearanceTextFamilySpinnerAdapter(getActivity().getBaseContext()),
+                appearancePreferences.getAppearanceTextFamily(),
                 2,
                 R.array.fragment_appearance_family_array
         );
 
-        this.appearancePreferences.setAppearanceTextFamily(this.fragmentAppearanceTabStyleBinding.spinnerFamily.getSelectedItem().toString());
+        appearancePreferences.setAppearanceTextFamily(fragmentAppearanceTabStyleBinding.spinnerFamily.getSelectedItem().toString());
     }
 
     public void setTextStyle() {
-        this.setSpinner(
-                this.fragmentAppearanceTabStyleBinding.spinnerStyle,
-                new AppearanceTextStyleSpinnerAdapter(this.getActivity().getBaseContext()),
-                this.appearancePreferences.getAppearanceTextStyle(),
+        setSpinner(
+                fragmentAppearanceTabStyleBinding.spinnerStyle,
+                new AppearanceTextStyleSpinnerAdapter(getActivity().getBaseContext()),
+                appearancePreferences.getAppearanceTextStyle(),
                 3,
                 R.array.fragment_appearance_style_array
         );
 
-        this.appearancePreferences.setAppearanceTextStyle(this.fragmentAppearanceTabStyleBinding.spinnerStyle.getSelectedItem().toString());
+        appearancePreferences.setAppearanceTextStyle(fragmentAppearanceTabStyleBinding.spinnerStyle.getSelectedItem().toString());
     }
 
     public void setBackgroundColour() {
-        this.setSpinner(
-                fragmentAppearanceTabStyleBinding.spinnerColour,
-                new AppearanceBackgroundColourSpinnerAdapter(this.getActivity().getBaseContext()),
-                this.appearancePreferences.getAppearanceColour(),
+        setSpinner(
+                this.fragmentAppearanceTabStyleBinding.spinnerColour,
+                new AppearanceBackgroundColourSpinnerAdapter(getActivity().getBaseContext()),
+                appearancePreferences.getAppearanceColour(),
                 1,
                 R.array.fragment_appearance_colour_array
         );
 
-        this.appearancePreferences.setAppearanceColour(this.fragmentAppearanceTabStyleBinding.spinnerColour.getSelectedItem().toString());
+        appearancePreferences.setAppearanceColour(fragmentAppearanceTabStyleBinding.spinnerColour.getSelectedItem().toString());
     }
 
     public void setTextColour() {
-        this.setSpinner(
-                this.fragmentAppearanceTabStyleBinding.spinnerTextColour,
-                new AppearanceTextColourSpinnerAdapter(this.getActivity().getBaseContext()),
-                this.appearancePreferences.getAppearanceTextColour(),
+        setSpinner(
+                fragmentAppearanceTabStyleBinding.spinnerTextColour,
+                new AppearanceTextColourSpinnerAdapter(getActivity().getBaseContext()),
+                appearancePreferences.getAppearanceTextColour(),
                 14,
                 R.array.fragment_appearance_text_colour_array
         );
 
-        this.appearancePreferences.setAppearanceTextColour(this.fragmentAppearanceTabStyleBinding.spinnerTextColour.getSelectedItem().toString());
+        appearancePreferences.setAppearanceTextColour(fragmentAppearanceTabStyleBinding.spinnerTextColour.getSelectedItem().toString());
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextColourSpinnerAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextColourSpinnerAdapter.java
index a98d4b9..e1f9cd1 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextColourSpinnerAdapter.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextColourSpinnerAdapter.java
@@ -23,37 +23,37 @@ class AppearanceTextColourSpinnerAdapter extends BaseAdapter {
     @NonNull
     private final Context context;
 
-    AppearanceTextColourSpinnerAdapter(@NonNull Context activityContext) {
-        this.context = activityContext;
-        this.colours = new ArrayList<>();
-        this.colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_text_colour_array)));
+    AppearanceTextColourSpinnerAdapter(@NonNull final Context activityContext) {
+        context = activityContext;
+        colours = new ArrayList<>();
+        colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_text_colour_array)));
     }
 
     @Override
     public int getCount() {
-        return this.colours.size();
+        return colours.size();
     }
 
     @Override
-    public Object getItem(int arg0) {
-        return this.colours.get(arg0);
+    public Object getItem(final int arg0) {
+        return colours.get(arg0);
     }
 
     @Override
-    public long getItemId(int arg0) {
+    public long getItemId(final int arg0) {
         return arg0;
     }
 
     @Override
-    public View getView(int position, final View convertView, ViewGroup viewGroup) {
+    public View getView(final int position, View convertView, final ViewGroup viewGroup) {
         View view = convertView;
 
         if (view == null) {
-            view = LayoutInflater.from(this.context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
+            view = LayoutInflater.from(context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
         }
 
-        TextView textView = view.findViewById(android.R.id.text1);
-        textView.setBackgroundColor(Color.parseColor(this.colours.get(position)));
+        final TextView textView = view.findViewById(android.R.id.text1);
+        textView.setBackgroundColor(Color.parseColor(colours.get(position)));
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
         textView.setText(" ");
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt
index 50cb8bb..e6e6d1c 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/style/AppearanceTextStyleSpinnerAdapter.kt
@@ -13,7 +13,8 @@ import androidx.annotation.NonNull
 import com.github.jameshnsears.quoteunquote.R
 
 class AppearanceTextStyleSpinnerAdapter(@NonNull private val context: Context) : BaseAdapter() {
-    var style: Array<String> = context.resources.getStringArray(R.array.fragment_appearance_style_array)
+    var style: Array<String> =
+        context.resources.getStringArray(R.array.fragment_appearance_style_array)
 
     override fun getCount(): Int {
         return style.size
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarColourSpinnerAdapter.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarColourSpinnerAdapter.java
index 284382d..3d904e7 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarColourSpinnerAdapter.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarColourSpinnerAdapter.java
@@ -23,37 +23,39 @@ public class AppearanceToolbarColourSpinnerAdapter extends BaseAdapter {
     @NonNull
     private final Context context;
 
-    AppearanceToolbarColourSpinnerAdapter(@NonNull Context activityContext) {
-        this.context = activityContext;
-        this.colours = new ArrayList<>();
-        this.colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_toolbar_colour_array)));
+    AppearanceToolbarColourSpinnerAdapter(@NonNull final Context activityContext) {
+        context = activityContext;
+        colours = new ArrayList<>();
+        colours.addAll(Arrays.asList(activityContext.getResources().getStringArray(R.array.fragment_appearance_toolbar_colour_array)));
     }
 
     @Override
     public int getCount() {
-        return this.colours.size();
+        return colours.size();
     }
 
+    @NonNull
     @Override
-    public Object getItem(int arg0) {
-        return this.colours.get(arg0);
+    public Object getItem(final int arg0) {
+        return colours.get(arg0);
     }
 
     @Override
-    public long getItemId(int arg0) {
+    public long getItemId(final int arg0) {
         return arg0;
     }
 
+    @NonNull
     @Override
-    public View getView(int position, final View convertView, ViewGroup viewGroup) {
+    public View getView(final int position, @NonNull View convertView, final @NonNull ViewGroup viewGroup) {
         View view = convertView;
 
         if (view == null) {
-            view = LayoutInflater.from(this.context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
+            view = LayoutInflater.from(context).inflate(android.R.layout.simple_spinner_dropdown_item, null);
         }
 
-        TextView textView = view.findViewById(android.R.id.text1);
-        textView.setBackgroundColor(Color.parseColor(this.colours.get(position)));
+        final TextView textView = view.findViewById(android.R.id.text1);
+        textView.setBackgroundColor(Color.parseColor(colours.get(position)));
         textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20);
         textView.setText(" ");
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java
index e999edb..72b106c 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/tabs/toolbar/AppearanceToolbarFragment.java
@@ -29,13 +29,13 @@ public class AppearanceToolbarFragment extends FragmentCommon {
         // dark mode support
     }
 
-    public AppearanceToolbarFragment(int widgetId) {
+    public AppearanceToolbarFragment(final int widgetId) {
         super(widgetId);
     }
 
     @NonNull
-    public static AppearanceToolbarFragment newInstance(int widgetId) {
-        AppearanceToolbarFragment fragment = new AppearanceToolbarFragment(widgetId);
+    public static AppearanceToolbarFragment newInstance(final int widgetId) {
+        final AppearanceToolbarFragment fragment = new AppearanceToolbarFragment(widgetId);
         fragment.setArguments(null);
         return fragment;
     }
@@ -43,107 +43,107 @@ public class AppearanceToolbarFragment extends FragmentCommon {
     @Override
     @NonNull
     public View onCreateView(
-            @NonNull LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        Context context = new ContextThemeWrapper(this.getActivity(), R.style.Theme_MaterialComponents_DayNight);
+            @NonNull final LayoutInflater inflater,
+            final @NonNull ViewGroup container,
+            final @NonNull Bundle savedInstanceState) {
+        final Context context = new ContextThemeWrapper(getActivity(), R.style.Theme_MaterialComponents_DayNight);
 
-        this.appearancePreferences = new AppearancePreferences(widgetId, this.getContext());
+        appearancePreferences = new AppearancePreferences(this.widgetId, getContext());
 
-        this.fragmentAppearanceTabToolbarBinding = FragmentAppearanceTabToolbarBinding.inflate(inflater.cloneInContext(context));
-        return this.fragmentAppearanceTabToolbarBinding.getRoot();
+        fragmentAppearanceTabToolbarBinding = FragmentAppearanceTabToolbarBinding.inflate(inflater.cloneInContext(context));
+        return fragmentAppearanceTabToolbarBinding.getRoot();
     }
 
     @Override
     public void onDestroyView() {
         super.onDestroyView();
-        this.fragmentAppearanceTabToolbarBinding = null;
+        fragmentAppearanceTabToolbarBinding = null;
     }
 
     @Override
     public void onViewCreated(
-            @NonNull View view, @NonNull Bundle savedInstanceState) {
-        this.createListenerToolbarColour();
-        this.createListenerToolbarFirst();
-        this.createListenerToolbarPrevious();
-        this.createListenerToolbarToggleFavourite();
-        this.createListenerToolbarShare();
-        this.createListenerToolbarNextRandom();
-        this.createListenerToolbarNextSequential();
-
-        this.setToolbarColour();
-        this.setToolbar();
+            @NonNull final View view, @NonNull final Bundle savedInstanceState) {
+        createListenerToolbarColour();
+        createListenerToolbarFirst();
+        createListenerToolbarPrevious();
+        createListenerToolbarToggleFavourite();
+        createListenerToolbarShare();
+        createListenerToolbarNextRandom();
+        createListenerToolbarNextSequential();
+
+        setToolbarColour();
+        setToolbar();
     }
 
     public void setToolbar() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchFirst.setChecked(this.appearancePreferences.getAppearanceToolbarFirst());
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchPrevious.setChecked(this.appearancePreferences.getAppearanceToolbarPrevious());
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchToggleFavourite.setChecked(this.appearancePreferences.getAppearanceToolbarFavourite());
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchShare.setChecked(this.appearancePreferences.getAppearanceToolbarShare());
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchNextRandom.setChecked(this.appearancePreferences.getAppearanceToolbarRandom());
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchNextSequential.setChecked(this.appearancePreferences.getAppearanceToolbarSequential());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchFirst.setChecked(appearancePreferences.getAppearanceToolbarFirst());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchPrevious.setChecked(appearancePreferences.getAppearanceToolbarPrevious());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchToggleFavourite.setChecked(appearancePreferences.getAppearanceToolbarFavourite());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchShare.setChecked(appearancePreferences.getAppearanceToolbarShare());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchNextRandom.setChecked(appearancePreferences.getAppearanceToolbarRandom());
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchNextSequential.setChecked(appearancePreferences.getAppearanceToolbarSequential());
     }
 
     private void createListenerToolbarColour() {
-        Spinner spinner = this.fragmentAppearanceTabToolbarBinding.spinnerToolbarColour;
+        final Spinner spinner = fragmentAppearanceTabToolbarBinding.spinnerToolbarColour;
         spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
-            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
-                AppearanceToolbarFragment.this.appearancePreferences.setAppearanceToolbarColour(spinner.getSelectedItem().toString());
+            public void onItemSelected(final AdapterView<?> parent, final View view, final int position, final long selectedItemId) {
+                appearancePreferences.setAppearanceToolbarColour(spinner.getSelectedItem().toString());
             }
 
             @Override
-            public void onNothingSelected(AdapterView<?> parent) {
+            public void onNothingSelected(final AdapterView<?> parent) {
                 // do nothing
             }
         });
     }
 
     private void createListenerToolbarFirst() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchFirst.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarFirst(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchFirst.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarFirst(isChecked)
         );
     }
 
     private void createListenerToolbarPrevious() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchPrevious.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarPrevious(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchPrevious.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarPrevious(isChecked)
         );
     }
 
     private void createListenerToolbarToggleFavourite() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchToggleFavourite.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarFavourite(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchToggleFavourite.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarFavourite(isChecked)
         );
     }
 
     private void createListenerToolbarShare() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchShare.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarShare(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchShare.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarShare(isChecked)
         );
     }
 
     private void createListenerToolbarNextRandom() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchNextRandom.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarRandom(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchNextRandom.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarRandom(isChecked)
         );
     }
 
     private void createListenerToolbarNextSequential() {
-        this.fragmentAppearanceTabToolbarBinding.toolbarSwitchNextSequential.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.appearancePreferences.setAppearanceToolbarSequential(isChecked)
+        fragmentAppearanceTabToolbarBinding.toolbarSwitchNextSequential.setOnCheckedChangeListener((buttonView, isChecked) ->
+                appearancePreferences.setAppearanceToolbarSequential(isChecked)
         );
     }
 
     public void setToolbarColour() {
-        this.setSpinner(
-                this.fragmentAppearanceTabToolbarBinding.spinnerToolbarColour,
-                new AppearanceToolbarColourSpinnerAdapter(this.getActivity().getBaseContext()),
-                this.appearancePreferences.getAppearanceToolbarColour(),
+        setSpinner(
+                fragmentAppearanceTabToolbarBinding.spinnerToolbarColour,
+                new AppearanceToolbarColourSpinnerAdapter(getActivity().getBaseContext()),
+                appearancePreferences.getAppearanceToolbarColour(),
                 0,
                 R.array.fragment_appearance_toolbar_colour_array
         );
 
-        this.appearancePreferences.setAppearanceToolbarColour(this.fragmentAppearanceTabToolbarBinding.spinnerToolbarColour.getSelectedItem().toString());
+        appearancePreferences.setAppearanceToolbarColour(fragmentAppearanceTabToolbarBinding.spinnerToolbarColour.getSelectedItem().toString());
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentCloud.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentCloud.java
deleted file mode 100644
index 4a6d8c2..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentCloud.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content;
-
-import android.content.ComponentName;
-import android.content.ServiceConnection;
-import android.os.IBinder;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.jameshnsears.quoteunquote.cloud.CloudServiceReceive;
-import com.github.jameshnsears.quoteunquote.cloud.CloudServiceReceiveLocalBinder;
-
-public class ContentCloud {
-    @Nullable
-    public CloudServiceReceive cloudServiceReceive;
-    public boolean isServiceReceiveBound;
-
-    @NonNull
-    public final ServiceConnection serviceConnection = new ServiceConnection() {
-        @Override
-        public void onServiceConnected(ComponentName name, @Nullable IBinder service) {
-            CloudServiceReceiveLocalBinder binder = (CloudServiceReceiveLocalBinder) service;
-
-            if (service != null) {
-                ContentCloud.this.cloudServiceReceive = binder.getService();
-                ContentCloud.this.isServiceReceiveBound = true;
-            } else {
-                ContentCloud.this.isServiceReceiveBound = false;
-            }
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName name) {
-            ContentCloud.this.isServiceReceiveBound = false;
-        }
-    };
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java
deleted file mode 100644
index e213b94..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java
+++ /dev/null
@@ -1,615 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.ParcelFileDescriptor;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.RadioGroup;
-import android.widget.Toast;
-
-import androidx.activity.result.ActivityResultLauncher;
-import androidx.activity.result.contract.ActivityResultContracts;
-import androidx.annotation.Keep;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.jameshnsears.quoteunquote.BuildConfig;
-import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
-import com.github.jameshnsears.quoteunquote.R;
-import com.github.jameshnsears.quoteunquote.cloud.CloudFavouritesHelper;
-import com.github.jameshnsears.quoteunquote.cloud.CloudServiceReceive;
-import com.github.jameshnsears.quoteunquote.cloud.CloudServiceSend;
-import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
-import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
-import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
-import com.github.jameshnsears.quoteunquote.databinding.FragmentContentBinding;
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
-import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
-import com.github.jameshnsears.quoteunquote.utils.ui.ToastHelper;
-import com.jakewharton.rxbinding2.widget.RxTextView;
-
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.observers.DisposableObserver;
-import io.reactivex.observers.DisposableSingleObserver;
-import io.reactivex.schedulers.Schedulers;
-import timber.log.Timber;
-
-@Keep
-public class ContentFragment extends FragmentCommon {
-    @NonNull
-    private final CompositeDisposable disposables = new CompositeDisposable();
-    @Nullable
-    public QuoteUnquoteModel quoteUnquoteModel;
-    @Nullable
-    public FragmentContentBinding fragmentContentBinding;
-    @NonNull
-    public CountDownLatch latchAllCount = new CountDownLatch(1);
-    @NonNull
-    public CountDownLatch latchAuthor = new CountDownLatch(1);
-    @NonNull
-    public CountDownLatch latchFavouriteCount = new CountDownLatch(1);
-    @Nullable
-    protected ContentPreferences contentPreferences;
-    @Nullable
-    protected ContentCloud contentCloud;
-    @Nullable
-    private DisposableObserver<Integer> disposableObserver;
-    @Nullable
-    private ActivityResultLauncher<Intent> activityResultLauncher;
-
-    public ContentFragment() {
-        // dark mode support
-    }
-
-    public ContentFragment(int widgetId) {
-        super(widgetId);
-    }
-
-    @NonNull
-    public static ContentFragment newInstance(int widgetId) {
-        ContentFragment fragment = new ContentFragment(widgetId);
-        fragment.setArguments(null);
-        return fragment;
-    }
-
-    public static void ensureFragmentContentSearchConsistency(
-            int widgetId,
-            @NonNull final Context context
-    ) {
-        ContentPreferences contentPreferences = new ContentPreferences(widgetId, context);
-
-        if (contentPreferences.getContentSelection() == ContentSelection.SEARCH
-                && contentPreferences.getContentSelectionSearchCount() == 0) {
-            contentPreferences.setContentSelection(ContentSelection.ALL);
-            ToastHelper.makeToast(context,
-                    context.getString(R.string.fragment_content_text_no_search_results), Toast.LENGTH_SHORT);
-        }
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        this.contentCloud = new ContentCloud();
-        this.quoteUnquoteModel = new QuoteUnquoteModel(this.getContext());
-    }
-
-    @Override
-    @NonNull
-    public View onCreateView(
-            @NonNull LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        Intent intent = new Intent(this.getContext(), CloudServiceReceive.class);
-        this.getContext().bindService(intent, this.contentCloud.serviceConnection, Context.BIND_AUTO_CREATE);
-
-        this.contentPreferences = new ContentPreferences(widgetId, getContext());
-
-        this.fragmentContentBinding = FragmentContentBinding.inflate(this.getLayoutInflater());
-        return this.fragmentContentBinding.getRoot();
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        ContentFragment.ensureFragmentContentSearchConsistency(this.widgetId, this.getContext());
-
-        this.fragmentContentBinding = null;
-
-        this.shutdown();
-
-        this.getContext().unbindService(this.contentCloud.serviceConnection);
-        this.contentCloud.isServiceReceiveBound = false;
-    }
-
-    public void shutdown() {
-        this.disposables.clear();
-        this.disposables.dispose();
-
-        if (this.disposableObserver != null) {
-            this.disposableObserver.dispose();
-        }
-    }
-
-    protected void setFavouriteLocalCode() {
-        if ("".equals(this.contentPreferences.getContentFavouritesLocalCode())) {
-            // possible that user wiped storage via OS settings
-            this.contentPreferences.setContentFavouritesLocalCode(CloudFavouritesHelper.getLocalCode());
-        }
-
-        this.fragmentContentBinding.textViewLocalCodeValue.setText(this.contentPreferences.getContentFavouritesLocalCode());
-    }
-
-    protected void setSearch() {
-        this.setSearchObserver();
-
-        String editTextKeywords = this.contentPreferences.getContentSelectionSearch();
-
-        if (editTextKeywords.length() > 0) {
-            ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-            properties.put("Text", editTextKeywords);
-            AuditEventHelper.auditEvent("SEARCH", properties);
-            this.fragmentContentBinding.editTextSearchText.setText(editTextKeywords);
-        }
-    }
-
-    protected void setSearchObserver() {
-        this.disposableObserver = new DisposableObserver<Integer>() {
-            @Override
-            public void onNext(@NonNull Integer value) {
-                ContentFragment.this.fragmentContentBinding.radioButtonSearch.setText(
-                        ContentFragment.this.getResources().getString(R.string.fragment_content_text, value));
-                ContentFragment.this.contentPreferences.setContentSelectionSearchCount(value);
-            }
-
-            @Override
-            public void onError(@NonNull Throwable throwable) {
-                Timber.d("onError=%s", throwable.getMessage());
-            }
-
-            @Override
-            public void onComplete() {
-                Timber.d("onComplete");
-            }
-        };
-
-        RxTextView.textChanges(this.fragmentContentBinding.editTextSearchText)
-                .debounce(25, TimeUnit.MILLISECONDS)
-                .subscribeOn(Schedulers.io())
-                .map(charSequence -> {
-                    String keywords = charSequence.toString();
-
-                    if (!keywords.equals("")) {
-                        Timber.d("%s", keywords);
-
-                        // remove any prior, different, search results in the history
-                        if (!keywords.equals(this.contentPreferences.getContentSelectionSearch())) {
-                            this.quoteUnquoteModel.resetPrevious(widgetId, ContentSelection.SEARCH);
-                        }
-
-                        this.contentPreferences.setContentSelectionSearch(keywords);
-
-                        return this.quoteUnquoteModel.countQuotationWithSearchText(keywords);
-                    } else {
-                        this.contentPreferences.setContentSelectionSearch("");
-                        return 0;
-                    }
-                })
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(this.disposableObserver);
-    }
-
-    @Override
-    public void onViewCreated(
-            @NonNull View view, Bundle savedInstanceState) {
-        this.setInitialCounts();
-
-        this.setFavouriteCount();
-        this.setAllCount();
-        this.setAddToPreviousAll();
-        this.setAuthor();
-        this.setSearch();
-
-        this.createListenerRadioGroup();
-        this.createListenerAddToPreviousAll();
-        this.createListenerAuthor();
-        this.createListenerFavouriteButtonExport();
-        this.createListenerFavouriteButtonSend();
-        this.createListenerFavouriteButtonReceive();
-
-        this.handleStorageAccessFrameworkResult();
-
-        this.setFavouriteLocalCode();
-        this.setSelection();
-    }
-
-    private void setInitialCounts() {
-        ContentFragment.this.fragmentContentBinding.radioButtonAll.setText(
-                ContentFragment.this.getResources().getString(R.string.fragment_content_all,
-                        0));
-
-        this.fragmentContentBinding.radioButtonAuthor.setText(
-                this.getResources().getString(R.string.fragment_content_author,
-                        0));
-
-        ContentFragment.this.fragmentContentBinding.radioButtonFavourites.setText(
-                ContentFragment.this.getResources().getString(R.string.fragment_content_favourites,
-                        0));
-
-        this.fragmentContentBinding.radioButtonSearch.setText(
-                this.getResources().getString(R.string.fragment_content_text,
-                        0));
-    }
-
-    protected void setAddToPreviousAll() {
-        this.fragmentContentBinding.switchAddToPreviousAll.setChecked(this.contentPreferences.getContentAddToPreviousAll());
-    }
-
-    public void setAllCount() {
-        this.disposables.add(this.quoteUnquoteModel.countAll()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<Integer>() {
-                            @Override
-                            public void onSuccess(@NonNull Integer value) {
-                                ContentFragment.this.fragmentContentBinding.radioButtonAll.setText(
-                                        ContentFragment.this.getResources().getString(R.string.fragment_content_all, value));
-
-                                synchronized (this) {
-                                    ContentFragment.this.latchAllCount.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setAuthor() {
-        this.disposables.add(this.quoteUnquoteModel.authors()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<List<AuthorPOJO>>() {
-                            @Override
-                            public void onSuccess(@NonNull List<AuthorPOJO> authorPOJOList) {
-                                List<String> authors
-                                        = ContentFragment.this.quoteUnquoteModel.authorsSorted(authorPOJOList);
-
-                                ArrayAdapter<String> adapter = new ArrayAdapter<>(
-                                        ContentFragment.this.getContext(),
-                                        R.layout.spinner_item,
-                                        authors);
-                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-                                ContentFragment.this.fragmentContentBinding.spinnerAuthors.setAdapter(adapter);
-
-                                if ("".equals(ContentFragment.this.contentPreferences.getContentSelectionAuthor())) {
-                                    ContentFragment.this.contentPreferences.setContentSelectionAuthor(authors.get(0));
-                                }
-
-                                ContentFragment.this.setAuthorName();
-
-                                synchronized (this) {
-                                    ContentFragment.this.latchAuthor.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setAuthorName() {
-        String authorPreference = this.contentPreferences.getContentSelectionAuthor();
-
-        this.fragmentContentBinding.spinnerAuthors.setSelection(
-                this.quoteUnquoteModel.authorsIndex(authorPreference));
-
-        this.fragmentContentBinding.radioButtonAuthor.setText(
-                this.getResources().getString(
-                        R.string.fragment_content_author,
-                        this.quoteUnquoteModel.countAuthorQuotations(authorPreference)));
-
-    }
-
-    public void setFavouriteCount() {
-        this.disposables.add(this.quoteUnquoteModel.countFavourites()
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribeWith(
-                        new DisposableSingleObserver<Integer>() {
-                            @Override
-                            public void onSuccess(@NonNull Integer value) {
-                                ContentFragment.this.fragmentContentBinding.radioButtonFavourites.setEnabled(true);
-                                if (value == 0) {
-                                    ContentFragment.this.fragmentContentBinding.radioButtonFavourites.setEnabled(false);
-
-                                    ContentFragment.this.fragmentContentBinding.buttonExport.setEnabled(false);
-                                    ContentFragment.this.makeButtonAlpha(ContentFragment.this.fragmentContentBinding.buttonExport, false);
-                                    ContentFragment.this.fragmentContentBinding.textViewLocalStorageInstructions.setEnabled(false);
-
-                                    ContentFragment.this.fragmentContentBinding.textViewLocalCodeValue.setEnabled(false);
-                                    ContentFragment.this.fragmentContentBinding.buttonSend.setEnabled(false);
-                                    ContentFragment.this.makeButtonAlpha(ContentFragment.this.fragmentContentBinding.buttonSend, false);
-
-                                    // in case another widget instance changes favourites
-                                    if (contentPreferences.getContentSelection().equals(ContentSelection.FAVOURITES)) {
-                                        contentPreferences.setContentSelection(ContentSelection.ALL);
-                                    }
-                                } else {
-                                    ContentFragment.this.fragmentContentBinding.buttonExport.setEnabled(true);
-                                    ContentFragment.this.makeButtonAlpha(ContentFragment.this.fragmentContentBinding.buttonExport, true);
-                                    ContentFragment.this.fragmentContentBinding.textViewLocalStorageInstructions.setEnabled(true);
-
-                                    ContentFragment.this.fragmentContentBinding.textViewLocalCodeValue.setEnabled(true);
-                                    ContentFragment.this.fragmentContentBinding.buttonSend.setEnabled(true);
-                                    ContentFragment.this.makeButtonAlpha(ContentFragment.this.fragmentContentBinding.buttonSend, true);
-                                }
-
-                                ContentFragment.this.fragmentContentBinding.radioButtonFavourites.setText(
-                                        ContentFragment.this.getResources().getString(R.string.fragment_content_favourites, value));
-
-                                synchronized (this) {
-                                    ContentFragment.this.latchFavouriteCount.countDown();
-                                }
-                            }
-
-                            @Override
-                            public void onError(@NonNull Throwable throwable) {
-                                Timber.d("onError=%s", throwable.getMessage());
-                            }
-                        }));
-    }
-
-    protected void setSelection() {
-        this.enableAuthor(false);
-        this.enableSearch(false);
-
-        switch (this.contentPreferences.getContentSelection()) {
-            case ALL:
-                this.setSelectionAll();
-                break;
-            case AUTHOR:
-                this.setSelectionAuthor();
-                break;
-            case FAVOURITES:
-                this.setSelectionFavourites();
-                break;
-            case SEARCH:
-                this.setSelectionSearch();
-                break;
-            default:
-                Timber.e("unknown switch");
-                break;
-        }
-    }
-
-    private void setSelectionAll() {
-        this.fragmentContentBinding.radioButtonAll.setChecked(true);
-    }
-
-    private void setSelectionAuthor() {
-        this.fragmentContentBinding.radioButtonAuthor.setChecked(true);
-        this.enableAuthor(true);
-    }
-
-    private void setSelectionFavourites() {
-        this.fragmentContentBinding.radioButtonFavourites.setChecked(true);
-    }
-
-    private void setSelectionSearch() {
-        this.fragmentContentBinding.radioButtonSearch.setChecked(true);
-        this.enableSearch(true);
-
-        this.fragmentContentBinding.radioButtonSearch.requestFocus();
-
-        String searchText = this.contentPreferences.getContentSelectionSearch();
-
-        if (!searchText.equals("") && !this.contentPreferences.getContentSelectionSearch().equals(searchText)) {
-            this.contentPreferences.setContentSelectionSearch(searchText);
-
-            EditText editTextKeywordsSearch = this.fragmentContentBinding.editTextSearchText;
-            editTextKeywordsSearch.setText(searchText);
-        }
-    }
-
-    protected void createListenerRadioGroup() {
-        RadioGroup radioGroupContent = this.fragmentContentBinding.radioGroupContent;
-        radioGroupContent.setOnCheckedChangeListener((group, checkedId) -> {
-
-            this.enableAuthor(false);
-            this.enableSearch(false);
-
-            if (checkedId == this.fragmentContentBinding.radioButtonAll.getId()) {
-                this.contentPreferences.setContentSelection(ContentSelection.ALL);
-            }
-
-            if (checkedId == this.fragmentContentBinding.radioButtonAuthor.getId()) {
-                this.enableAuthor(true);
-                this.contentPreferences.setContentSelection(ContentSelection.AUTHOR);
-            }
-
-            if (checkedId == this.fragmentContentBinding.radioButtonFavourites.getId()) {
-                this.contentPreferences.setContentSelection(ContentSelection.FAVOURITES);
-            }
-
-            if (checkedId == this.fragmentContentBinding.radioButtonSearch.getId()) {
-                this.enableSearch(true);
-                this.contentPreferences.setContentSelection(ContentSelection.SEARCH);
-            }
-        });
-    }
-
-    private void enableAuthor(boolean enable) {
-        this.fragmentContentBinding.spinnerAuthors.setEnabled(enable);
-    }
-
-    private void makeButtonAlpha(@NonNull Button button, boolean enable) {
-        button.setAlpha(enable ? 1 : 0.25f);
-    }
-
-    private void enableSearch(boolean enable) {
-        this.fragmentContentBinding.editTextSearchText.setEnabled(enable);
-    }
-
-    protected void createListenerAuthor() {
-        this.fragmentContentBinding.spinnerAuthors.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-            @Override
-            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
-                String author = ContentFragment.this.fragmentContentBinding.spinnerAuthors.getSelectedItem().toString();
-                ContentFragment.this.fragmentContentBinding.radioButtonAuthor.setText(
-                        ContentFragment.this.getResources().getString(R.string.fragment_content_author,
-                                ContentFragment.this.quoteUnquoteModel.countAuthorQuotations(author)));
-
-                if (!ContentFragment.this.contentPreferences.getContentSelectionAuthor().equals(author)) {
-                    Timber.d("author=%s", author);
-                    ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
-                    properties.put("Author", author);
-                    AuditEventHelper.auditEvent("AUTHOR", properties);
-
-                    ContentFragment.this.contentPreferences.setContentSelectionAuthor(author);
-                }
-            }
-
-            @Override
-            public void onNothingSelected(AdapterView<?> parent) {
-                // do nothing
-            }
-        });
-    }
-
-    protected void createListenerAddToPreviousAll() {
-        this.fragmentContentBinding.switchAddToPreviousAll.setOnCheckedChangeListener((buttonView, isChecked) ->
-                this.contentPreferences.setContentAddToPreviousAll(isChecked)
-        );
-    }
-
-    protected void createListenerFavouriteButtonExport() {
-        // invoke Storage Access Framework
-        this.fragmentContentBinding.buttonExport.setOnClickListener(v -> {
-            if (this.fragmentContentBinding.buttonExport.isEnabled()) {
-                ConfigureActivity.exportCalled = true;
-
-                Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
-                intent.addCategory(Intent.CATEGORY_OPENABLE);
-                intent.setType("text/plain");
-                intent.putExtra(Intent.EXTRA_TITLE, "Favourites.txt");
-                this.activityResultLauncher.launch(intent);
-            }
-        });
-    }
-
-    protected final void handleStorageAccessFrameworkResult() {
-        // default: /storage/emulated/0/Download/Favourites.txt
-        this.activityResultLauncher = registerForActivityResult(
-                new ActivityResultContracts.StartActivityForResult(),
-                activityResult -> {
-                    if (activityResult.getResultCode() == Activity.RESULT_OK) {
-
-                        try {
-                            ParcelFileDescriptor parcelFileDescriptor
-                                    = this.getContext().getContentResolver().openFileDescriptor(
-                                    activityResult.getData().getData(), "w");
-                            FileOutputStream fileOutputStream
-                                    = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
-
-                            ArrayList<String> exportableFavourites = (ArrayList) quoteUnquoteModel.exportFavourites();
-                            Collections.reverse(exportableFavourites);
-
-                            int favouriteIndex = 1;
-                            for (String exportFavourite : exportableFavourites) {
-                                String exportableString = "" + favouriteIndex + "\n" + exportFavourite;
-                                fileOutputStream.write(exportableString.getBytes());
-                                favouriteIndex++;
-                            }
-
-                            fileOutputStream.close();
-                            parcelFileDescriptor.close();
-
-                            ToastHelper.makeToast(
-                                    this.getContext(),
-                                    this.getContext().getString(R.string.fragment_content_favourites_export_success),
-                                    Toast.LENGTH_SHORT);
-                        } catch (IOException e) {
-                            Timber.e(e.getMessage());
-                        }
-                    }
-
-                    ConfigureActivity.exportCalled = false;
-                });
-    }
-
-    protected void createListenerFavouriteButtonSend() {
-        this.fragmentContentBinding.buttonSend.setOnClickListener(v -> {
-            if (this.fragmentContentBinding.buttonSend.isEnabled()) {
-
-                Intent serviceIntent = new Intent(this.getContext(), CloudServiceSend.class);
-                serviceIntent.putExtra("savePayload", this.quoteUnquoteModel.getFavouritesToSend(this.getContext()));
-                serviceIntent.putExtra(
-                        "localCodeValue", this.fragmentContentBinding.textViewLocalCodeValue.getText().toString());
-
-                this.getContext().startService(serviceIntent);
-
-            }
-        });
-    }
-
-    protected void createListenerFavouriteButtonReceive() {
-        this.fragmentContentBinding.buttonReceive.setOnClickListener(v -> {
-            if (this.fragmentContentBinding.buttonReceive.isEnabled()) {
-                Timber.d("remoteCode=%s", this.fragmentContentBinding.editTextRemoteCodeValue.getText().toString());
-
-                // correct length?
-                if (this.fragmentContentBinding.editTextRemoteCodeValue.getText().toString().length() != 10) {
-                    ToastHelper.makeToast(
-                            this.getContext(), this.getContext().getString(R.string.fragment_content_favourites_share_remote_code_general), Toast.LENGTH_SHORT);
-                    return;
-                }
-
-                // crc wrong?
-                if (!CloudFavouritesHelper.isRemoteCodeValid(this.fragmentContentBinding.editTextRemoteCodeValue.getText().toString())) {
-                    ToastHelper.makeToast(
-                            this.getContext(), this.getContext().getString(R.string.fragment_content_favourites_share_remote_code_general), Toast.LENGTH_SHORT);
-                    return;
-                }
-
-                // same as code on this device?
-                if (!BuildConfig.DEBUG
-                        && this.fragmentContentBinding.editTextRemoteCodeValue.getText().toString().equals(
-                        this.fragmentContentBinding.textViewLocalCodeValue.getText().toString())) {
-                    ToastHelper.makeToast(
-                            this.getContext(), this.getContext().getString(R.string.fragment_content_favourites_share_remote_code_general), Toast.LENGTH_SHORT);
-                    return;
-                }
-
-                if (this.contentCloud.isServiceReceiveBound) {
-                    this.contentCloud.cloudServiceReceive.receive(this, this.fragmentContentBinding.editTextRemoteCodeValue.getText().toString());
-                }
-            }
-        });
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java
deleted file mode 100644
index 8b8b9af..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java
+++ /dev/null
@@ -1,191 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content;
-
-import android.content.Context;
-
-import androidx.annotation.NonNull;
-
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
-import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
-
-import java.util.Map;
-
-import timber.log.Timber;
-
-public class ContentPreferences extends PreferencesFacade {
-    private static final String CONTENT_ALL = "CONTENT_ALL";
-    private static final String CONTENT_AUTHOR = "CONTENT_AUTHOR";
-    private static final String CONTENT_AUTHOR_NAME = "CONTENT_AUTHOR_NAME";
-    private static final String CONTENT_FAVOURITES = "CONTENT_FAVOURITES";
-    private static final String CONTENT_SEARCH = "CONTENT_SEARCH";
-    private static final String CONTENT_SEARCH_COUNT = "CONTENT_SEARCH_COUNT";
-    private static final String CONTENT_SEARCH_TEXT = "CONTENT_SEARCH_TEXT";
-    private static final String CONTENT_ADD_TO_PREVIOUS_ALL = "CONTENT_ADD_TO_PREVIOUS_ALL";
-
-    public ContentPreferences(@NonNull final Context applicationContext) {
-        super(0, applicationContext);
-    }
-
-    public ContentPreferences(final int widgetId, @NonNull final Context applicationContext) {
-        super(widgetId, applicationContext);
-    }
-
-    @NonNull
-    public String getContentSelectionAuthor() {
-        return preferenceHelper.getPreferenceString(getPreferenceKey(CONTENT_AUTHOR_NAME));
-    }
-
-    public void setContentSelectionAuthor(@NonNull final String value) {
-        preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR_NAME), value);
-    }
-
-    @NonNull
-    public boolean getContentAddToPreviousAll() {
-        return preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_ADD_TO_PREVIOUS_ALL), false);
-    }
-
-    public void setContentAddToPreviousAll(@NonNull final boolean value) {
-        preferenceHelper.setPreference(getPreferenceKey(CONTENT_ADD_TO_PREVIOUS_ALL), value);
-    }
-
-    @NonNull
-    public String getContentFavouritesLocalCode() {
-        return preferenceHelper.getPreferenceString(getFavouritesLocalCode());
-    }
-
-    public void setContentFavouritesLocalCode(@NonNull final String value) {
-        preferenceHelper.setPreference(getFavouritesLocalCode(), value);
-    }
-
-    @NonNull
-    public String getContentSelectionSearch() {
-        return preferenceHelper.getPreferenceString(getPreferenceKey(CONTENT_SEARCH_TEXT));
-    }
-
-    public void setContentSelectionSearch(@NonNull final String value) {
-        preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH_TEXT), value);
-    }
-
-    public int getContentSelectionSearchCount() {
-        return preferenceHelper.getPreferenceInt(getPreferenceKey(CONTENT_SEARCH_COUNT));
-    }
-
-    public void setContentSelectionSearchCount(int value) {
-        preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH_COUNT), value);
-    }
-
-    @NonNull
-    public ContentSelection getContentSelection() {
-        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_AUTHOR), false)) {
-            return ContentSelection.AUTHOR;
-        }
-
-        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_FAVOURITES), false)) {
-            return ContentSelection.FAVOURITES;
-        }
-
-        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_SEARCH), false)) {
-            return ContentSelection.SEARCH;
-        }
-
-        return ContentSelection.ALL;
-    }
-
-    public void setContentSelection(@NonNull final ContentSelection contentSelection) {
-        switch (contentSelection) {
-            case ALL:
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), true);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
-                break;
-
-            case AUTHOR:
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), true);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
-                break;
-
-            case FAVOURITES:
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), true);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
-                break;
-
-            case SEARCH:
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
-                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), true);
-                break;
-
-            default:
-                Timber.e(contentSelection.toString());
-                break;
-        }
-    }
-
-    @NonNull
-    @Override
-    public String toString() {
-        return getContentSelection().toString();
-    }
-
-    public void performMigration() {
-        final Map<String, ?> sharedPreferenceEntries
-                = applicationContext.getSharedPreferences("QuoteUnquote-Preferences", Context.MODE_PRIVATE).getAll();
-
-        for (final Map.Entry<String, ?> entry : sharedPreferenceEntries.entrySet()) {
-            widgetId = Integer.parseInt(entry.getKey().substring(0, entry.getKey().indexOf(":")));
-
-            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonAll", "%d: radioButtonAll=%b", ContentSelection.ALL);
-
-            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonAuthor", "%d: radioButtonAuthor=%b", ContentSelection.AUTHOR);
-
-            this.migrationSpinnerAuthors(entry);
-
-            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonFavourites", "%d: radioButtonFavourites=%b", ContentSelection.FAVOURITES);
-
-            this.migrationTextViewFavouritesCode(entry);
-
-            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonKeywords", "%d: radioButtonKeywords=%b", ContentSelection.SEARCH);
-
-            this.migrationEditTextKeywords(entry);
-        }
-    }
-
-    private void migrationEditTextKeywords(final Map.Entry<String, ?> entry) {
-        if (entry.getKey().contains("FragmentContent:editTextKeywords")) {
-            String editTextKeywords = (String) entry.getValue();
-            Timber.d("%d: editTextKeywords=%s", widgetId, editTextKeywords);
-            setContentSelectionSearch(editTextKeywords);
-        }
-    }
-
-    private void migrationTextViewFavouritesCode(final Map.Entry<String, ?> entry) {
-        if (entry.getKey().equals("0:FragmentContent:textViewFavouritesCode")) {
-            String textViewFavouritesCode = (String) entry.getValue();
-            Timber.d("%d: textViewFavouritesCode=%s", widgetId, textViewFavouritesCode);
-            setContentFavouritesLocalCode(textViewFavouritesCode);
-        }
-    }
-
-    private void migrationSpinnerAuthors(final Map.Entry<String, ?> entry) {
-        if (entry.getKey().contains("FragmentContent:spinnerAuthors")) {
-            String spinnerAuthors = (String) entry.getValue();
-            Timber.d("%d: spinnerAuthors=%s", widgetId, spinnerAuthors);
-            setContentSelectionAuthor(spinnerAuthors);
-        }
-    }
-
-    private void migrationRadioButtonAll(final Map.Entry<String, ?> entry, final String s, final String s2, final ContentSelection all) {
-        if (entry.getKey().contains(s)) {
-            boolean radioButtonAll = (Boolean) entry.getValue();
-            Timber.d(s2, widgetId, radioButtonAll);
-            if (radioButtonAll) {
-                setContentSelection(all);
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragment.java
deleted file mode 100644
index f497220..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragment.java
+++ /dev/null
@@ -1,202 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event;
-
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.CheckBox;
-import android.widget.RadioButton;
-import android.widget.TimePicker;
-
-import androidx.annotation.Keep;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
-import com.github.jameshnsears.quoteunquote.databinding.FragmentEventBinding;
-
-@Keep
-public class EventFragment extends FragmentCommon {
-    @Nullable
-    public FragmentEventBinding fragmentEventBinding;
-
-    @Nullable
-    public EventPreferences eventPreferences;
-
-    public EventFragment() {
-        // dark mode support
-    }
-
-    public EventFragment(int widgetId) {
-        super(widgetId);
-    }
-
-    @NonNull
-    public static EventFragment newInstance(int widgetId) {
-        EventFragment fragment = new EventFragment(widgetId);
-        fragment.setArguments(null);
-        return fragment;
-    }
-
-    @Override
-    @NonNull
-    public View onCreateView(
-            @NonNull LayoutInflater inflater,
-            @NonNull ViewGroup container,
-            @NonNull Bundle savedInstanceState) {
-        this.eventPreferences = new EventPreferences(widgetId, getContext());
-
-        this.fragmentEventBinding = FragmentEventBinding.inflate(this.getLayoutInflater());
-        return this.fragmentEventBinding.getRoot();
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        this.fragmentEventBinding = null;
-    }
-
-    @Override
-    public void onViewCreated(
-            @NonNull View view, @NonNull Bundle savedInstanceState) {
-        this.setNext();
-        this.setDisplay();
-        this.setDeviceUnlock();
-        this.setDaily();
-        this.setDailyTime();
-
-        this.createListenerNextRandom();
-        this.createListenerNextSequential();
-        this.createListenerDisplayWidget();
-        this.createListenerDisplayWidgetAndNotification();
-        this.createListenerDeviceUnlock();
-        this.createListenerDaily();
-        this.createListenerDailyTime();
-    }
-
-    private void setDaily() {
-        boolean booleanDaily = this.eventPreferences.getEventDaily();
-
-        this.fragmentEventBinding.checkBoxDailyAt.setChecked(booleanDaily);
-
-        TimePicker timePicker = this.fragmentEventBinding.timePickerDailyAt;
-
-        timePicker.setEnabled(false);
-        if (booleanDaily) {
-            timePicker.setEnabled(true);
-        }
-    }
-
-    private void setNext() {
-        this.fragmentEventBinding.radioButtonNextRandom.setChecked(this.eventPreferences.getEventNextRandom());
-        this.fragmentEventBinding.radioButtonNextSequential.setChecked(this.eventPreferences.getEventNextSequential());
-    }
-
-    private void setDisplay() {
-        this.fragmentEventBinding.radioButtonWhereInWidget.setChecked(this.eventPreferences.getEventDisplayWidget());
-        this.fragmentEventBinding.radioButtonWhereAsNotification.setChecked(this.eventPreferences.getEventDisplayWidgetAndNotification());
-    }
-
-    private void setDeviceUnlock() {
-        this.fragmentEventBinding.checkBoxDeviceUnlock.setChecked(this.eventPreferences.getEventDeviceUnlock());
-    }
-
-    private void createListenerNextRandom() {
-        RadioButton radioButtonNextRandom = this.fragmentEventBinding.radioButtonNextRandom;
-        radioButtonNextRandom.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventNextRandom() != isChecked) {
-                this.eventPreferences.setEventNextRandom(isChecked);
-            }
-        });
-    }
-
-    private void createListenerNextSequential() {
-        RadioButton radioButtonNextSequential = this.fragmentEventBinding.radioButtonNextSequential;
-        radioButtonNextSequential.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventNextSequential() != isChecked) {
-                this.eventPreferences.setEventNextSequential(isChecked);
-            }
-        });
-    }
-
-    private void createListenerDisplayWidget() {
-        RadioButton radioButtonWhereInWidget = this.fragmentEventBinding.radioButtonWhereInWidget;
-        radioButtonWhereInWidget.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventDisplayWidget() != isChecked) {
-                this.eventPreferences.setEventDisplayWidget(isChecked);
-            }
-        });
-    }
-
-    private void createListenerDisplayWidgetAndNotification() {
-        RadioButton radioButtonWhereAsNotification = this.fragmentEventBinding.radioButtonWhereAsNotification;
-        radioButtonWhereAsNotification.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventDisplayWidgetAndNotification() != isChecked) {
-                this.eventPreferences.setEventdisplayWidgetAndNotification(isChecked);
-            }
-        });
-    }
-
-    private void createListenerDeviceUnlock() {
-        CheckBox checkBoxDeviceUnlock = this.fragmentEventBinding.checkBoxDeviceUnlock;
-        checkBoxDeviceUnlock.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventDeviceUnlock() != isChecked) {
-                this.eventPreferences.setEventDeviceUnlock(isChecked);
-            }
-        });
-    }
-
-    private void createListenerDaily() {
-        CheckBox checkBoxDailyAt = this.fragmentEventBinding.checkBoxDailyAt;
-        checkBoxDailyAt.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            if (this.eventPreferences.getEventDaily() != isChecked) {
-                this.eventPreferences.setEventDaily(isChecked);
-            }
-
-            TimePicker timePicker = this.fragmentEventBinding.timePickerDailyAt;
-
-            timePicker.setEnabled(false);
-            if (isChecked) {
-                timePicker.setEnabled(true);
-            }
-        });
-    }
-
-    private void createListenerDailyTime() {
-        TimePicker timePicker = this.fragmentEventBinding.timePickerDailyAt;
-        timePicker.setOnTimeChangedListener((view1, hourOfDay, minute) -> {
-                    final int h = timePicker.getHour();
-                    if (this.eventPreferences.getEventDailyTimeHour() != h) {
-                        this.eventPreferences.setEventDailyTimeHour(h);
-                    }
-
-                    final int m = timePicker.getMinute();
-                    if (this.eventPreferences.getEventDailyTimeMinute() != m) {
-                        this.eventPreferences.setEventDailyTimeMinute(m);
-                    }
-                }
-        );
-    }
-
-    protected void setDailyTime() {
-        TimePicker timePicker = this.fragmentEventBinding.timePickerDailyAt;
-
-        int hourOfDay = this.eventPreferences.getEventDailyTimeHour();
-        if (hourOfDay == -1) {
-            this.eventPreferences.setEventDailyTimeHour(6);
-            timePicker.setHour(6);
-        } else {
-            timePicker.setHour(hourOfDay);
-        }
-
-        int minute = this.eventPreferences.getEventDailyTimeMinute();
-        if (minute == -1) {
-            this.eventPreferences.setEventDailyTimeMinute(0);
-            timePicker.setMinute(0);
-        } else {
-            timePicker.setMinute(minute);
-        }
-
-        timePicker.setIs24HourView(false);
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventPreferences.java
deleted file mode 100644
index 0adee67..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventPreferences.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event;
-
-import android.content.Context;
-
-import androidx.annotation.NonNull;
-
-import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
-
-import java.util.Map;
-
-import timber.log.Timber;
-
-public class EventPreferences extends PreferencesFacade {
-    private static final String EVENT_NEXT_RANDOM = "EVENT_NEXT_RANDOM";
-    private static final String EVENT_NEXT_SEQUENTIAL = "EVENT_NEXT_SEQUENTIAL";
-    private static final String EVENT_DISPLAY_WIDGET = "EVENT_DISPLAY_WIDGET";
-    private static final String EVENT_DISPLAY_WIDGET_AND_NOTIFICATION = "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION";
-    private static final String EVENT_DAILY = "EVENT_DAILY";
-    private static final String EVENT_DEVICE_UNLOCK = "EVENT_DEVICE_UNLOCK";
-    private static final String EVENT_DAILY_MINUTE = "EVENT_DAILY_MINUTE";
-    private static final String EVENT_DAILY_HOUR = "EVENT_DAILY_HOUR";
-
-    public EventPreferences(int widgetId, @NonNull Context applicationContext) {
-        super(widgetId, applicationContext);
-    }
-
-    public boolean getEventNextRandom() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_NEXT_RANDOM), true);
-    }
-
-    public void setEventNextRandom(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_NEXT_RANDOM), value);
-    }
-
-    public boolean getEventNextSequential() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_NEXT_SEQUENTIAL), false);
-    }
-
-    public void setEventNextSequential(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_NEXT_SEQUENTIAL), value);
-    }
-
-    public boolean getEventDisplayWidget() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_DISPLAY_WIDGET), true);
-    }
-
-    public void setEventDisplayWidget(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DISPLAY_WIDGET), value);
-    }
-
-    public boolean getEventDisplayWidgetAndNotification() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_DISPLAY_WIDGET_AND_NOTIFICATION), false);
-    }
-
-    public void setEventdisplayWidgetAndNotification(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DISPLAY_WIDGET_AND_NOTIFICATION), value);
-    }
-
-    public boolean getEventDaily() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_DAILY), false);
-    }
-
-    public void setEventDaily(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DAILY), value);
-    }
-
-    public boolean getEventDeviceUnlock() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(EventPreferences.EVENT_DEVICE_UNLOCK), false);
-    }
-
-    public void setEventDeviceUnlock(boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DEVICE_UNLOCK), value);
-    }
-
-    public int getEventDailyTimeMinute() {
-        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(EventPreferences.EVENT_DAILY_MINUTE));
-    }
-
-    public void setEventDailyTimeMinute(int value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DAILY_MINUTE), value);
-    }
-
-    public int getEventDailyTimeHour() {
-        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(EventPreferences.EVENT_DAILY_HOUR));
-    }
-
-    public void setEventDailyTimeHour(int value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(EventPreferences.EVENT_DAILY_HOUR), value);
-    }
-
-    public void performMigration() {
-        Map<String, ?> sharedPreferenceEntries
-                = this.applicationContext.getSharedPreferences("QuoteUnquote-Preferences", Context.MODE_PRIVATE).getAll();
-
-        for (Map.Entry<String, ?> entry : sharedPreferenceEntries.entrySet()) {
-            this.widgetId = Integer.parseInt(entry.getKey().substring(0, entry.getKey().indexOf(":")));
-
-            if (entry.getKey().contains("FragmentEvent:checkBoxDeviceUnlock")) {
-                final boolean checkBoxDeviceUnlock = (Boolean) entry.getValue();
-                Timber.d("%d: checkBoxDeviceUnlock=%b", this.widgetId, checkBoxDeviceUnlock);
-                this.setEventDeviceUnlock(checkBoxDeviceUnlock);
-            }
-
-            if (entry.getKey().contains("FragmentEvent:checkBoxDailyAt")) {
-                final boolean checkBoxDailyAt = (Boolean) entry.getValue();
-                Timber.d("%d: checkBoxDailyAt=%b", this.widgetId, checkBoxDailyAt);
-                this.setEventDaily(checkBoxDailyAt);
-            }
-
-            if (entry.getKey().contains("FragmentEvent:timePickerDailyAt:hourOfDay")) {
-                final int hourOfDay = (Integer) entry.getValue();
-                Timber.d("%d: hourOfDay=%d", this.widgetId, hourOfDay);
-                this.setEventDailyTimeHour(hourOfDay);
-            }
-
-            if (entry.getKey().contains("FragmentEvent:timePickerDailyAt:minute")) {
-                final int minute = (Integer) entry.getValue();
-                Timber.d("%d: minute=%d", this.widgetId, minute);
-                this.setEventDailyTimeMinute(minute);
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java
new file mode 100644
index 0000000..a7f828d
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragment.java
@@ -0,0 +1,533 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.ParcelFileDescriptor;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.RadioGroup;
+import android.widget.Toast;
+
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.configure.ConfigureActivity;
+import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentQuotationsBinding;
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.audit.AuditEventHelper;
+import com.jakewharton.rxbinding2.widget.RxTextView;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.observers.DisposableObserver;
+import io.reactivex.observers.DisposableSingleObserver;
+import io.reactivex.schedulers.Schedulers;
+import timber.log.Timber;
+
+@Keep
+public class QuotationsFragment extends FragmentCommon {
+    @NonNull
+    private final CompositeDisposable disposables = new CompositeDisposable();
+    @Nullable
+    public QuoteUnquoteModel quoteUnquoteModel;
+    @Nullable
+    public FragmentQuotationsBinding fragmentQuotationsBinding;
+    @NonNull
+    public CountDownLatch latchAllCount = new CountDownLatch(1);
+    @NonNull
+    public CountDownLatch latchAuthor = new CountDownLatch(1);
+    @NonNull
+    public CountDownLatch latchFavouriteCount = new CountDownLatch(1);
+    @Nullable
+    protected QuotationsPreferences quotationsPreferences;
+    @Nullable
+    private DisposableObserver<Integer> disposableObserver;
+    @Nullable
+    private ActivityResultLauncher<Intent> activityResultLauncher;
+
+    public QuotationsFragment() {
+        // dark mode support
+    }
+
+    public QuotationsFragment(int widgetId) {
+        super(widgetId);
+    }
+
+    @NonNull
+    public static QuotationsFragment newInstance(int widgetId) {
+        QuotationsFragment fragment = new QuotationsFragment(widgetId);
+        fragment.setArguments(null);
+        return fragment;
+    }
+
+    public static void ensureFragmentContentSearchConsistency(
+            int widgetId,
+            @NonNull final Context context
+    ) {
+        QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
+
+        if (quotationsPreferences.getContentSelection() == ContentSelection.SEARCH
+                && quotationsPreferences.getContentSelectionSearchCount() == 0) {
+            quotationsPreferences.setContentSelection(ContentSelection.ALL);
+            Toast.makeText(
+                    context,
+                    context.getString(R.string.fragment_quotations_search_no_results),
+                    Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    @Override
+    public void onCreate(@NonNull Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        quoteUnquoteModel = new QuoteUnquoteModel(getContext());
+    }
+
+    @Override
+    @NonNull
+    public View onCreateView(
+            @NonNull LayoutInflater inflater,
+            @NonNull ViewGroup container,
+            @NonNull Bundle savedInstanceState) {
+        quotationsPreferences = new QuotationsPreferences(widgetId, getContext());
+
+        fragmentQuotationsBinding = FragmentQuotationsBinding.inflate(getLayoutInflater());
+        return fragmentQuotationsBinding.getRoot();
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+
+        QuotationsFragment.ensureFragmentContentSearchConsistency(widgetId, getContext());
+
+        fragmentQuotationsBinding = null;
+
+        shutdown();
+    }
+
+    public void shutdown() {
+        disposables.clear();
+        disposables.dispose();
+
+        if (disposableObserver != null) {
+            disposableObserver.dispose();
+        }
+    }
+
+    protected void setSearch() {
+        setSearchObserver();
+
+        String editTextKeywords = quotationsPreferences.getContentSelectionSearch();
+
+        if (editTextKeywords.length() > 0) {
+            ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+            properties.put("Text", editTextKeywords);
+            AuditEventHelper.auditEvent("SEARCH", properties);
+            fragmentQuotationsBinding.editTextSearchText.setText(editTextKeywords);
+        }
+    }
+
+    protected void setSearchObserver() {
+        disposableObserver = new DisposableObserver<Integer>() {
+            @Override
+            public void onNext(@NonNull Integer value) {
+                QuotationsFragment.this.fragmentQuotationsBinding.radioButtonSearch.setText(
+                        QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_search, value));
+                QuotationsFragment.this.quotationsPreferences.setContentSelectionSearchCount(value);
+            }
+
+            @Override
+            public void onError(@NonNull Throwable throwable) {
+                Timber.d("onError=%s", throwable.getMessage());
+            }
+
+            @Override
+            public void onComplete() {
+                Timber.d("onComplete");
+            }
+        };
+
+        RxTextView.textChanges(this.fragmentQuotationsBinding.editTextSearchText)
+                .debounce(25, TimeUnit.MILLISECONDS)
+                .subscribeOn(Schedulers.io())
+                .map(charSequence -> {
+                    String keywords = charSequence.toString();
+
+                    if (!keywords.equals("")) {
+                        Timber.d("%s", keywords);
+
+                        // remove any prior, different, search results in the history
+                        if (!keywords.equals(this.quotationsPreferences.getContentSelectionSearch())) {
+                            this.quoteUnquoteModel.resetPrevious(widgetId, ContentSelection.SEARCH);
+                        }
+
+                        this.quotationsPreferences.setContentSelectionSearch(keywords);
+
+                        return this.quoteUnquoteModel.countQuotationWithSearchText(keywords);
+                    } else {
+                        this.quotationsPreferences.setContentSelectionSearch("");
+                        return 0;
+                    }
+                })
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(this.disposableObserver);
+    }
+
+    @Override
+    public void onViewCreated(
+            @NonNull View view, @NonNull Bundle savedInstanceState) {
+        this.setInitialCounts();
+
+        this.setFavouriteCount();
+        this.setAllCount();
+        this.setAddToPreviousAll();
+        this.setAuthor();
+        this.setSearch();
+
+        this.createListenerRadioGroup();
+        this.createListenerAddToPreviousAll();
+        this.createListenerAuthor();
+        this.createListenerFavouriteButtonExport();
+
+        this.handleStorageAccessFrameworkResult();
+
+        this.setSelection();
+    }
+
+    private void setInitialCounts() {
+        QuotationsFragment.this.fragmentQuotationsBinding.radioButtonAll.setText(
+                QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_all,
+                        0));
+
+        this.fragmentQuotationsBinding.radioButtonAuthor.setText(
+                this.getResources().getString(R.string.fragment_quotations_author,
+                        0));
+
+        QuotationsFragment.this.fragmentQuotationsBinding.radioButtonFavourites.setText(
+                QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_favourites,
+                        0));
+
+        this.fragmentQuotationsBinding.radioButtonSearch.setText(
+                this.getResources().getString(R.string.fragment_quotations_search,
+                        0));
+    }
+
+    protected void setAddToPreviousAll() {
+        this.fragmentQuotationsBinding.switchAddToPreviousAll.setChecked(this.quotationsPreferences.getContentAddToPreviousAll());
+    }
+
+    public void setAllCount() {
+        this.disposables.add(this.quoteUnquoteModel.countAll()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<Integer>() {
+                            @Override
+                            public void onSuccess(@NonNull Integer value) {
+                                QuotationsFragment.this.fragmentQuotationsBinding.radioButtonAll.setText(
+                                        QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_all, value));
+
+                                synchronized (this) {
+                                    QuotationsFragment.this.latchAllCount.countDown();
+                                }
+                            }
+
+                            @Override
+                            public void onError(@NonNull Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    protected void setAuthor() {
+        this.disposables.add(this.quoteUnquoteModel.authors()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<List<AuthorPOJO>>() {
+                            @Override
+                            public void onSuccess(@NonNull List<AuthorPOJO> authorPOJOList) {
+                                List<String> authors
+                                        = QuotationsFragment.this.quoteUnquoteModel.authorsSorted(authorPOJOList);
+
+                                ArrayAdapter<String> adapter = new ArrayAdapter<>(
+                                        QuotationsFragment.this.getContext(),
+                                        R.layout.spinner_item,
+                                        authors);
+                                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                                QuotationsFragment.this.fragmentQuotationsBinding.spinnerAuthors.setAdapter(adapter);
+
+                                if ("".equals(QuotationsFragment.this.quotationsPreferences.getContentSelectionAuthor())) {
+                                    QuotationsFragment.this.quotationsPreferences.setContentSelectionAuthor(authors.get(0));
+                                }
+
+                                QuotationsFragment.this.setAuthorName();
+
+                                synchronized (this) {
+                                    QuotationsFragment.this.latchAuthor.countDown();
+                                }
+                            }
+
+                            @Override
+                            public void onError(@NonNull Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    protected void setAuthorName() {
+        String authorPreference = this.quotationsPreferences.getContentSelectionAuthor();
+
+        this.fragmentQuotationsBinding.spinnerAuthors.setSelection(
+                this.quoteUnquoteModel.authorsIndex(authorPreference));
+
+        this.fragmentQuotationsBinding.radioButtonAuthor.setText(
+                this.getResources().getString(
+                        R.string.fragment_quotations_author,
+                        this.quoteUnquoteModel.countAuthorQuotations(authorPreference)));
+
+    }
+
+    public void setFavouriteCount() {
+        this.disposables.add(this.quoteUnquoteModel.countFavourites()
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribeWith(
+                        new DisposableSingleObserver<Integer>() {
+                            @Override
+                            public void onSuccess(@NonNull Integer value) {
+                                QuotationsFragment.this.fragmentQuotationsBinding.radioButtonFavourites.setEnabled(true);
+                                if (value == 0) {
+                                    QuotationsFragment.this.fragmentQuotationsBinding.radioButtonFavourites.setEnabled(false);
+
+                                    QuotationsFragment.this.fragmentQuotationsBinding.buttonExport.setEnabled(false);
+                                    makeButtonAlpha(QuotationsFragment.this.fragmentQuotationsBinding.buttonExport, false);
+                                    QuotationsFragment.this.fragmentQuotationsBinding.textViewLocalStorageInstructions.setEnabled(false);
+
+                                    // in case another widget instance changes favourites
+                                    if (quotationsPreferences.getContentSelection().equals(ContentSelection.FAVOURITES)) {
+                                        quotationsPreferences.setContentSelection(ContentSelection.ALL);
+                                    }
+                                } else {
+                                    QuotationsFragment.this.fragmentQuotationsBinding.buttonExport.setEnabled(true);
+                                    makeButtonAlpha(QuotationsFragment.this.fragmentQuotationsBinding.buttonExport, true);
+                                    QuotationsFragment.this.fragmentQuotationsBinding.textViewLocalStorageInstructions.setEnabled(true);
+                                }
+
+                                QuotationsFragment.this.fragmentQuotationsBinding.radioButtonFavourites.setText(
+                                        QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_favourites, value));
+
+                                synchronized (this) {
+                                    QuotationsFragment.this.latchFavouriteCount.countDown();
+                                }
+                            }
+
+                            @Override
+                            public void onError(@NonNull Throwable throwable) {
+                                Timber.d("onError=%s", throwable.getMessage());
+                            }
+                        }));
+    }
+
+    protected void setSelection() {
+        this.enableAuthor(false);
+        this.enableSearch(false);
+
+        switch (this.quotationsPreferences.getContentSelection()) {
+            case ALL:
+                this.setSelectionAll();
+                break;
+            case AUTHOR:
+                this.setSelectionAuthor();
+                break;
+            case FAVOURITES:
+                this.setSelectionFavourites();
+                break;
+            case SEARCH:
+                this.setSelectionSearch();
+                break;
+            default:
+                Timber.e("unknown switch");
+                break;
+        }
+    }
+
+    private void setSelectionAll() {
+        this.fragmentQuotationsBinding.radioButtonAll.setChecked(true);
+    }
+
+    private void setSelectionAuthor() {
+        this.fragmentQuotationsBinding.radioButtonAuthor.setChecked(true);
+        this.enableAuthor(true);
+    }
+
+    private void setSelectionFavourites() {
+        this.fragmentQuotationsBinding.radioButtonFavourites.setChecked(true);
+    }
+
+    private void setSelectionSearch() {
+        this.fragmentQuotationsBinding.radioButtonSearch.setChecked(true);
+        this.enableSearch(true);
+
+        this.fragmentQuotationsBinding.radioButtonSearch.requestFocus();
+
+        String searchText = this.quotationsPreferences.getContentSelectionSearch();
+
+        if (!searchText.equals("") && !this.quotationsPreferences.getContentSelectionSearch().equals(searchText)) {
+            this.quotationsPreferences.setContentSelectionSearch(searchText);
+
+            EditText editTextKeywordsSearch = this.fragmentQuotationsBinding.editTextSearchText;
+            editTextKeywordsSearch.setText(searchText);
+        }
+    }
+
+    protected void createListenerRadioGroup() {
+        RadioGroup radioGroupContent = this.fragmentQuotationsBinding.radioGroupContent;
+        radioGroupContent.setOnCheckedChangeListener((group, checkedId) -> {
+
+            this.enableAuthor(false);
+            this.enableSearch(false);
+
+            if (checkedId == this.fragmentQuotationsBinding.radioButtonAll.getId()) {
+                this.quotationsPreferences.setContentSelection(ContentSelection.ALL);
+            }
+
+            if (checkedId == this.fragmentQuotationsBinding.radioButtonAuthor.getId()) {
+                this.enableAuthor(true);
+                this.quotationsPreferences.setContentSelection(ContentSelection.AUTHOR);
+            }
+
+            if (checkedId == this.fragmentQuotationsBinding.radioButtonFavourites.getId()) {
+                this.quotationsPreferences.setContentSelection(ContentSelection.FAVOURITES);
+            }
+
+            if (checkedId == this.fragmentQuotationsBinding.radioButtonSearch.getId()) {
+                this.enableSearch(true);
+                this.quotationsPreferences.setContentSelection(ContentSelection.SEARCH);
+            }
+        });
+    }
+
+    private void enableAuthor(boolean enable) {
+        this.fragmentQuotationsBinding.spinnerAuthors.setEnabled(enable);
+    }
+
+    public void makeButtonAlpha(@NonNull Button button, boolean enable) {
+        button.setAlpha(enable ? 1 : 0.25f);
+    }
+
+    private void enableSearch(boolean enable) {
+        this.fragmentQuotationsBinding.editTextSearchText.setEnabled(enable);
+    }
+
+    protected void createListenerAuthor() {
+        this.fragmentQuotationsBinding.spinnerAuthors.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long selectedItemId) {
+                String author = QuotationsFragment.this.fragmentQuotationsBinding.spinnerAuthors.getSelectedItem().toString();
+                QuotationsFragment.this.fragmentQuotationsBinding.radioButtonAuthor.setText(
+                        QuotationsFragment.this.getResources().getString(R.string.fragment_quotations_author,
+                                QuotationsFragment.this.quoteUnquoteModel.countAuthorQuotations(author)));
+
+                if (!QuotationsFragment.this.quotationsPreferences.getContentSelectionAuthor().equals(author)) {
+                    Timber.d("author=%s", author);
+                    ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<>();
+                    properties.put("Author", author);
+                    AuditEventHelper.auditEvent("AUTHOR", properties);
+
+                    QuotationsFragment.this.quotationsPreferences.setContentSelectionAuthor(author);
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+                // do nothing
+            }
+        });
+    }
+
+    protected void createListenerAddToPreviousAll() {
+        this.fragmentQuotationsBinding.switchAddToPreviousAll.setOnCheckedChangeListener((buttonView, isChecked) ->
+                this.quotationsPreferences.setContentAddToPreviousAll(isChecked)
+        );
+    }
+
+    protected void createListenerFavouriteButtonExport() {
+        // invoke Storage Access Framework
+        this.fragmentQuotationsBinding.buttonExport.setOnClickListener(v -> {
+            if (this.fragmentQuotationsBinding.buttonExport.isEnabled()) {
+                ConfigureActivity.exportCalled = true;
+
+                Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
+                intent.addCategory(Intent.CATEGORY_OPENABLE);
+                intent.setType("text/plain");
+                intent.putExtra(Intent.EXTRA_TITLE, "Favourites.txt");
+                this.activityResultLauncher.launch(intent);
+            }
+        });
+    }
+
+    protected final void handleStorageAccessFrameworkResult() {
+        // default: /storage/emulated/0/Download/Favourites.txt
+        this.activityResultLauncher = registerForActivityResult(
+                new ActivityResultContracts.StartActivityForResult(),
+                activityResult -> {
+                    if (activityResult.getResultCode() == Activity.RESULT_OK) {
+
+                        try {
+                            ParcelFileDescriptor parcelFileDescriptor
+                                    = this.getContext().getContentResolver().openFileDescriptor(
+                                    activityResult.getData().getData(), "w");
+                            FileOutputStream fileOutputStream
+                                    = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
+
+                            ArrayList<String> exportableFavourites = (ArrayList) quoteUnquoteModel.exportFavourites();
+                            Collections.reverse(exportableFavourites);
+
+                            int favouriteIndex = 1;
+                            for (String exportFavourite : exportableFavourites) {
+                                String exportableString = "" + favouriteIndex + "\n" + exportFavourite;
+                                fileOutputStream.write(exportableString.getBytes());
+                                favouriteIndex++;
+                            }
+
+                            fileOutputStream.close();
+                            parcelFileDescriptor.close();
+
+                            Toast.makeText(
+                                    this.getContext(),
+                                    this.getContext().getString(R.string.fragment_transfer_backup_success),
+                                    Toast.LENGTH_SHORT).show();
+                        } catch (IOException e) {
+                            Timber.e(e.getMessage());
+                        }
+                    }
+
+                    ConfigureActivity.exportCalled = false;
+                });
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
new file mode 100644
index 0000000..f5edc57
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsPreferences.java
@@ -0,0 +1,132 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection;
+import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
+
+import timber.log.Timber;
+
+public class QuotationsPreferences extends PreferencesFacade {
+    public static final String CONTENT_ALL = "CONTENT_ALL";
+    public static final String CONTENT_AUTHOR = "CONTENT_AUTHOR";
+    public static final String CONTENT_AUTHOR_NAME = "CONTENT_AUTHOR_NAME";
+    public static final String CONTENT_FAVOURITES = "CONTENT_FAVOURITES";
+    public static final String CONTENT_SEARCH = "CONTENT_SEARCH";
+    public static final String CONTENT_SEARCH_COUNT = "CONTENT_SEARCH_COUNT";
+    public static final String CONTENT_SEARCH_TEXT = "CONTENT_SEARCH_TEXT";
+    public static final String CONTENT_ADD_TO_PREVIOUS_ALL = "CONTENT_ADD_TO_PREVIOUS_ALL";
+
+    public QuotationsPreferences(@NonNull Context applicationContext) {
+        super(0, applicationContext);
+    }
+
+    public QuotationsPreferences(int widgetId, @NonNull Context applicationContext) {
+        super(widgetId, applicationContext);
+    }
+
+    @NonNull
+    public String getContentSelectionAuthor() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR_NAME));
+    }
+
+    public void setContentSelectionAuthor(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR_NAME), value);
+    }
+
+    @NonNull
+    public boolean getContentAddToPreviousAll() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.CONTENT_ADD_TO_PREVIOUS_ALL), true);
+    }
+
+    public void setContentAddToPreviousAll(@NonNull boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_ADD_TO_PREVIOUS_ALL), value);
+    }
+
+    @NonNull
+    public String getContentLocalCode() {
+        return this.preferenceHelper.getPreferenceString(this.getLocalCode());
+    }
+
+    public void setContentLocalCode(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getLocalCode(), value);
+    }
+
+    @NonNull
+    public String getContentSelectionSearch() {
+        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_TEXT));
+    }
+
+    public void setContentSelectionSearch(@NonNull String value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_TEXT), value);
+    }
+
+    public int getContentSelectionSearchCount() {
+        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_COUNT));
+    }
+
+    public void setContentSelectionSearchCount(final int value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH_COUNT), value);
+    }
+
+    @NonNull
+    public ContentSelection getContentSelection() {
+        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR), false)) {
+            return ContentSelection.AUTHOR;
+        }
+
+        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.CONTENT_FAVOURITES), false)) {
+            return ContentSelection.FAVOURITES;
+        }
+
+        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH), false)) {
+            return ContentSelection.SEARCH;
+        }
+
+        return ContentSelection.ALL;
+    }
+
+    public void setContentSelection(@NonNull ContentSelection contentSelection) {
+        switch (contentSelection) {
+            case ALL:
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_ALL), true);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_FAVOURITES), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH), false);
+                break;
+
+            case AUTHOR:
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_ALL), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR), true);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_FAVOURITES), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH), false);
+                break;
+
+            case FAVOURITES:
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_ALL), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_FAVOURITES), true);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH), false);
+                break;
+
+            case SEARCH:
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_ALL), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_AUTHOR), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_FAVOURITES), false);
+                this.preferenceHelper.setPreference(this.getPreferenceKey(QuotationsPreferences.CONTENT_SEARCH), true);
+                break;
+
+            default:
+                Timber.e(contentSelection.toString());
+                break;
+        }
+    }
+
+    @NonNull
+    @Override
+    public String toString() {
+        return this.getContentSelection().toString();
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventDailyAlarm.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleDailyAlarm.java
similarity index 54%
rename from app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventDailyAlarm.java
rename to app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleDailyAlarm.java
index 4e7cbee..d26d10f 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventDailyAlarm.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleDailyAlarm.java
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event;
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule;
 
 import android.app.AlarmManager;
 import android.app.PendingIntent;
@@ -13,32 +13,32 @@ import java.util.Calendar;
 
 import timber.log.Timber;
 
-public final class EventDailyAlarm {
+public final class ScheduleDailyAlarm {
     @Nullable
-    private final EventPreferences eventPreferences;
+    private final SchedulePreferences schedulePreferences;
     @NonNull
     private final Context context;
     private final int widgetId;
 
-    public EventDailyAlarm(
-            @NonNull Context widgetContext, int theWidgetId) {
-        context = widgetContext;
-        widgetId = theWidgetId;
-        this.eventPreferences = new EventPreferences(theWidgetId, widgetContext);
+    public ScheduleDailyAlarm(
+            @NonNull final Context widgetContext, final int theWidgetId) {
+        this.context = widgetContext;
+        this.widgetId = theWidgetId;
+        schedulePreferences = new SchedulePreferences(theWidgetId, widgetContext);
     }
 
     public void setDailyAlarm() {
-        if (this.eventPreferences.getEventDaily()) {
-            Timber.d("%d", this.widgetId);
+        if (schedulePreferences.getEventDaily()) {
+            Timber.d("%d", widgetId);
 
-            Calendar calendar = Calendar.getInstance();
+            final Calendar calendar = Calendar.getInstance();
             calendar.setTimeInMillis(System.currentTimeMillis());
             calendar.set(
                     Calendar.HOUR_OF_DAY,
-                    this.eventPreferences.getEventDailyTimeHour());
+                    schedulePreferences.getEventDailyTimeHour());
             calendar.set(
                     Calendar.MINUTE,
-                    this.eventPreferences.getEventDailyTimeMinute());
+                    schedulePreferences.getEventDailyTimeMinute());
             calendar.set(Calendar.SECOND, 0);
 
             // if user's time is < now then fire alarm tomorrow
@@ -46,11 +46,11 @@ public final class EventDailyAlarm {
                 calendar.add(Calendar.DAY_OF_YEAR, 1);
             }
 
-            AlarmManager alarmManager =
-                    (AlarmManager) this.context.getSystemService(Context.ALARM_SERVICE);
+            final AlarmManager alarmManager =
+                    (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
 
-            PendingIntent alarmPendingIntent
-                    = IntentFactoryHelper.createClickPendingIntent(this.context, this.widgetId, IntentFactoryHelper.DAILY_ALARM);
+            final PendingIntent alarmPendingIntent
+                    = IntentFactoryHelper.createClickPendingIntent(context, widgetId, IntentFactoryHelper.DAILY_ALARM);
 
             alarmManager.setExact(
                     AlarmManager.RTC_WAKEUP,
@@ -60,13 +60,13 @@ public final class EventDailyAlarm {
     }
 
     public void resetAnyExistingDailyAlarm() {
-        if (!this.eventPreferences.getEventDaily()) {
-            Timber.d("%d", this.widgetId);
+        if (!schedulePreferences.getEventDaily()) {
+            Timber.d("%d", widgetId);
 
-            PendingIntent alarmPendingIntent
-                    = IntentFactoryHelper.createClickPendingIntent(this.context, this.widgetId, IntentFactoryHelper.DAILY_ALARM);
-            AlarmManager alarmManager =
-                    (AlarmManager) this.context.getSystemService(Context.ALARM_SERVICE);
+            final PendingIntent alarmPendingIntent
+                    = IntentFactoryHelper.createClickPendingIntent(context, widgetId, IntentFactoryHelper.DAILY_ALARM);
+            final AlarmManager alarmManager =
+                    (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
             if (alarmManager != null) {
                 alarmManager.cancel(alarmPendingIntent);
             }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragment.java
new file mode 100644
index 0000000..f215a99
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragment.java
@@ -0,0 +1,202 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CheckBox;
+import android.widget.RadioButton;
+import android.widget.TimePicker;
+
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentScheduleBinding;
+
+@Keep
+public class ScheduleFragment extends FragmentCommon {
+    @Nullable
+    public FragmentScheduleBinding fragmentScheduleBinding;
+
+    @Nullable
+    public SchedulePreferences schedulePreferences;
+
+    public ScheduleFragment() {
+        // dark mode support
+    }
+
+    public ScheduleFragment(final int widgetId) {
+        super(widgetId);
+    }
+
+    @NonNull
+    public static ScheduleFragment newInstance(final int widgetId) {
+        final ScheduleFragment fragment = new ScheduleFragment(widgetId);
+        fragment.setArguments(null);
+        return fragment;
+    }
+
+    @Override
+    @NonNull
+    public View onCreateView(
+            @NonNull final LayoutInflater inflater,
+            @NonNull final ViewGroup container,
+            @NonNull final Bundle savedInstanceState) {
+        schedulePreferences = new SchedulePreferences(this.widgetId, this.getContext());
+
+        fragmentScheduleBinding = FragmentScheduleBinding.inflate(getLayoutInflater());
+        return fragmentScheduleBinding.getRoot();
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        fragmentScheduleBinding = null;
+    }
+
+    @Override
+    public void onViewCreated(
+            @NonNull final View view, @NonNull final Bundle savedInstanceState) {
+        setNext();
+        setDisplay();
+        setDeviceUnlock();
+        setDaily();
+        setDailyTime();
+
+        createListenerNextRandom();
+        createListenerNextSequential();
+        createListenerDisplayWidget();
+        createListenerDisplayWidgetAndNotification();
+        createListenerDeviceUnlock();
+        createListenerDaily();
+        createListenerDailyTime();
+    }
+
+    private void setDaily() {
+        final boolean booleanDaily = schedulePreferences.getEventDaily();
+
+        fragmentScheduleBinding.checkBoxDailyAt.setChecked(booleanDaily);
+
+        final TimePicker timePicker = fragmentScheduleBinding.timePickerDailyAt;
+
+        timePicker.setEnabled(false);
+        if (booleanDaily) {
+            timePicker.setEnabled(true);
+        }
+    }
+
+    private void setNext() {
+        fragmentScheduleBinding.radioButtonNextRandom.setChecked(schedulePreferences.getEventNextRandom());
+        fragmentScheduleBinding.radioButtonNextSequential.setChecked(schedulePreferences.getEventNextSequential());
+    }
+
+    private void setDisplay() {
+        fragmentScheduleBinding.radioButtonWhereInWidget.setChecked(schedulePreferences.getEventDisplayWidget());
+        fragmentScheduleBinding.radioButtonWhereAsNotification.setChecked(schedulePreferences.getEventDisplayWidgetAndNotification());
+    }
+
+    private void setDeviceUnlock() {
+        fragmentScheduleBinding.checkBoxDeviceUnlock.setChecked(schedulePreferences.getEventDeviceUnlock());
+    }
+
+    private void createListenerNextRandom() {
+        final RadioButton radioButtonNextRandom = fragmentScheduleBinding.radioButtonNextRandom;
+        radioButtonNextRandom.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventNextRandom() != isChecked) {
+                schedulePreferences.setEventNextRandom(isChecked);
+            }
+        });
+    }
+
+    private void createListenerNextSequential() {
+        final RadioButton radioButtonNextSequential = fragmentScheduleBinding.radioButtonNextSequential;
+        radioButtonNextSequential.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventNextSequential() != isChecked) {
+                schedulePreferences.setEventNextSequential(isChecked);
+            }
+        });
+    }
+
+    private void createListenerDisplayWidget() {
+        final RadioButton radioButtonWhereInWidget = fragmentScheduleBinding.radioButtonWhereInWidget;
+        radioButtonWhereInWidget.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventDisplayWidget() != isChecked) {
+                schedulePreferences.setEventDisplayWidget(isChecked);
+            }
+        });
+    }
+
+    private void createListenerDisplayWidgetAndNotification() {
+        final RadioButton radioButtonWhereAsNotification = fragmentScheduleBinding.radioButtonWhereAsNotification;
+        radioButtonWhereAsNotification.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventDisplayWidgetAndNotification() != isChecked) {
+                schedulePreferences.setEventdisplayWidgetAndNotification(isChecked);
+            }
+        });
+    }
+
+    private void createListenerDeviceUnlock() {
+        final CheckBox checkBoxDeviceUnlock = fragmentScheduleBinding.checkBoxDeviceUnlock;
+        checkBoxDeviceUnlock.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventDeviceUnlock() != isChecked) {
+                schedulePreferences.setEventDeviceUnlock(isChecked);
+            }
+        });
+    }
+
+    private void createListenerDaily() {
+        final CheckBox checkBoxDailyAt = fragmentScheduleBinding.checkBoxDailyAt;
+        checkBoxDailyAt.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            if (schedulePreferences.getEventDaily() != isChecked) {
+                schedulePreferences.setEventDaily(isChecked);
+            }
+
+            final TimePicker timePicker = fragmentScheduleBinding.timePickerDailyAt;
+
+            timePicker.setEnabled(false);
+            if (isChecked) {
+                timePicker.setEnabled(true);
+            }
+        });
+    }
+
+    private void createListenerDailyTime() {
+        final TimePicker timePicker = fragmentScheduleBinding.timePickerDailyAt;
+        timePicker.setOnTimeChangedListener((view1, hourOfDay, minute) -> {
+                    int h = timePicker.getHour();
+                    if (schedulePreferences.getEventDailyTimeHour() != h) {
+                        schedulePreferences.setEventDailyTimeHour(h);
+                    }
+
+                    int m = timePicker.getMinute();
+                    if (schedulePreferences.getEventDailyTimeMinute() != m) {
+                        schedulePreferences.setEventDailyTimeMinute(m);
+                    }
+                }
+        );
+    }
+
+    protected void setDailyTime() {
+        final TimePicker timePicker = fragmentScheduleBinding.timePickerDailyAt;
+
+        final int hourOfDay = schedulePreferences.getEventDailyTimeHour();
+        if (hourOfDay == -1) {
+            schedulePreferences.setEventDailyTimeHour(6);
+            timePicker.setHour(6);
+        } else {
+            timePicker.setHour(hourOfDay);
+        }
+
+        final int minute = schedulePreferences.getEventDailyTimeMinute();
+        if (minute == -1) {
+            schedulePreferences.setEventDailyTimeMinute(0);
+            timePicker.setMinute(0);
+        } else {
+            timePicker.setMinute(minute);
+        }
+
+        timePicker.setIs24HourView(false);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/SchedulePreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/SchedulePreferences.java
new file mode 100644
index 0000000..e9267fb
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/SchedulePreferences.java
@@ -0,0 +1,86 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
+
+public class SchedulePreferences extends PreferencesFacade {
+    public static final String EVENT_NEXT_RANDOM = "EVENT_NEXT_RANDOM";
+    public static final String EVENT_NEXT_SEQUENTIAL = "EVENT_NEXT_SEQUENTIAL";
+    public static final String EVENT_DISPLAY_WIDGET = "EVENT_DISPLAY_WIDGET";
+    public static final String EVENT_DISPLAY_WIDGET_AND_NOTIFICATION = "EVENT_DISPLAY_WIDGET_AND_NOTIFICATION";
+    public static final String EVENT_DAILY = "EVENT_DAILY";
+    public static final String EVENT_DEVICE_UNLOCK = "EVENT_DEVICE_UNLOCK";
+    public static final String EVENT_DAILY_MINUTE = "EVENT_DAILY_MINUTE";
+    public static final String EVENT_DAILY_HOUR = "EVENT_DAILY_HOUR";
+
+    public SchedulePreferences(int widgetId, @NonNull Context applicationContext) {
+        super(widgetId, applicationContext);
+    }
+
+    public boolean getEventNextRandom() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_NEXT_RANDOM), true);
+    }
+
+    public void setEventNextRandom(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_NEXT_RANDOM), value);
+    }
+
+    public boolean getEventNextSequential() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_NEXT_SEQUENTIAL), false);
+    }
+
+    public void setEventNextSequential(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_NEXT_SEQUENTIAL), value);
+    }
+
+    public boolean getEventDisplayWidget() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_DISPLAY_WIDGET), true);
+    }
+
+    public void setEventDisplayWidget(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DISPLAY_WIDGET), value);
+    }
+
+    public boolean getEventDisplayWidgetAndNotification() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_DISPLAY_WIDGET_AND_NOTIFICATION), false);
+    }
+
+    public void setEventdisplayWidgetAndNotification(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DISPLAY_WIDGET_AND_NOTIFICATION), value);
+    }
+
+    public boolean getEventDaily() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY), false);
+    }
+
+    public void setEventDaily(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY), value);
+    }
+
+    public boolean getEventDeviceUnlock() {
+        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(SchedulePreferences.EVENT_DEVICE_UNLOCK), false);
+    }
+
+    public void setEventDeviceUnlock(boolean value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DEVICE_UNLOCK), value);
+    }
+
+    public int getEventDailyTimeMinute() {
+        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY_MINUTE));
+    }
+
+    public void setEventDailyTimeMinute(int value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY_MINUTE), value);
+    }
+
+    public int getEventDailyTimeHour() {
+        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY_HOUR));
+    }
+
+    public void setEventDailyTimeHour(int value) {
+        this.preferenceHelper.setPreference(this.getPreferenceKey(SchedulePreferences.EVENT_DAILY_HOUR), value);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferFragment.java
new file mode 100644
index 0000000..e58fde0
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferFragment.java
@@ -0,0 +1,217 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.transfer;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.Toast;
+
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
+
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
+import com.github.jameshnsears.quoteunquote.R;
+import com.github.jameshnsears.quoteunquote.cloud.CloudServiceBackup;
+import com.github.jameshnsears.quoteunquote.cloud.CloudServiceRestore;
+import com.github.jameshnsears.quoteunquote.cloud.CloudTransferHelper;
+import com.github.jameshnsears.quoteunquote.configure.fragment.FragmentCommon;
+import com.github.jameshnsears.quoteunquote.databinding.FragmentTransferBinding;
+
+import timber.log.Timber;
+
+@Keep
+public class TransferFragment extends FragmentCommon {
+    @Nullable
+    public FragmentTransferBinding fragmentTransferBinding;
+
+    @Nullable
+    public QuoteUnquoteModel quoteUnquoteModel;
+
+    @Nullable
+    protected TransferPreferences transferPreferences;
+
+    @Nullable
+    private BroadcastReceiver receiver;
+
+    @NonNull
+    public static String ENABLE_BUTTON_BACKUP = "ENABLE_BUTTON_BACKUP";
+
+    @NonNull
+    public static String ENABLE_BUTTON_RESTORE = "ENABLE_BUTTON_RESTORE";
+
+    public TransferFragment() {
+        // dark mode support
+    }
+
+    public TransferFragment(int widgetId) {
+        super(widgetId);
+    }
+
+    @NonNull
+    public static TransferFragment newInstance(int widgetId) {
+        TransferFragment fragment = new TransferFragment(widgetId);
+        fragment.setArguments(null);
+        return fragment;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        IntentFilter filterRefreshUpdate = new IntentFilter();
+        filterRefreshUpdate.addAction(ENABLE_BUTTON_BACKUP);
+        filterRefreshUpdate.addAction(ENABLE_BUTTON_RESTORE);
+        LocalBroadcastManager.getInstance(getActivity()).registerReceiver(receiver, filterRefreshUpdate);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        LocalBroadcastManager.getInstance(getActivity()).unregisterReceiver(receiver);
+    }
+
+    @Override
+    public void onCreate(@NonNull Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        quoteUnquoteModel = new QuoteUnquoteModel(getContext());
+
+        receiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                if (intent.getAction().equals(ENABLE_BUTTON_BACKUP)) {
+                    enableButtonBackupDependingUponDatabaseState();
+                }
+                if (intent.getAction().equals(ENABLE_BUTTON_RESTORE)) {
+                    enableButton(fragmentTransferBinding.buttonRestore, true);
+                }
+            }
+        };
+    }
+
+    @Override
+    @NonNull
+    public View onCreateView(
+            @NonNull LayoutInflater inflater,
+            @NonNull ViewGroup container,
+            @NonNull Bundle savedInstanceState) {
+        Intent intent = new Intent(getContext(), CloudServiceRestore.class);
+
+        transferPreferences = new TransferPreferences(getContext());
+
+        fragmentTransferBinding = FragmentTransferBinding.inflate(getLayoutInflater());
+        return fragmentTransferBinding.getRoot();
+    }
+
+    @Override
+    public void onViewCreated(
+            @NonNull View view, @NonNull Bundle savedInstanceState) {
+
+        createListenerFavouriteButtonBackup();
+        createListenerFavouriteButtonRestore();
+
+        setTransferLocalCode();
+
+        enableButtonBackupDependingUponDatabaseState();
+
+        enableButtonsDependingUponServiceState();
+    }
+
+    void enableButtonBackupDependingUponDatabaseState() {
+        if (quoteUnquoteModel.countPrevious(widgetId) == 0) {
+            enableButton(fragmentTransferBinding.buttonBackup, false);
+        } else {
+            enableButton(fragmentTransferBinding.buttonBackup, true);
+        }
+    }
+
+    private void enableButtonsDependingUponServiceState() {
+        if (CloudServiceBackup.isRunning) {
+            enableButton(fragmentTransferBinding.buttonBackup, false);
+        }
+
+        if (CloudServiceRestore.isRunning) {
+            enableButton(fragmentTransferBinding.buttonRestore, false);
+        }
+    }
+
+    public void enableButton(@NonNull Button button, @NonNull Boolean enabled) {
+        button.setEnabled(enabled);
+        button.setAlpha(enabled ? 1 : 0.25f);
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        fragmentTransferBinding = null;
+    }
+
+    protected void setTransferLocalCode() {
+        if ("".equals(transferPreferences.getTransferLocalCode())) {
+            // possible that user wiped storage via App Info settings
+            transferPreferences.setTransferLocalCode(CloudTransferHelper.getLocalCode());
+        }
+
+        fragmentTransferBinding.textViewLocalCodeValue.setText(transferPreferences.getTransferLocalCode());
+    }
+
+    protected void createListenerFavouriteButtonBackup() {
+        fragmentTransferBinding.buttonBackup.setOnClickListener(v -> {
+            if (fragmentTransferBinding.buttonBackup.isEnabled()) {
+
+                enableButton(fragmentTransferBinding.buttonBackup, false);
+                enableButton(fragmentTransferBinding.buttonRestore, false);
+
+                Intent serviceIntent = new Intent(getContext(), CloudServiceBackup.class);
+                serviceIntent.putExtra("asJson", quoteUnquoteModel.transferBackup(getContext()));
+                serviceIntent.putExtra(
+                        "localCodeValue", fragmentTransferBinding.textViewLocalCodeValue.getText().toString());
+
+                getContext().startService(serviceIntent);
+            }
+        });
+    }
+
+    protected void createListenerFavouriteButtonRestore() {
+        fragmentTransferBinding.buttonRestore.setOnClickListener(v -> {
+            if (fragmentTransferBinding.buttonRestore.isEnabled()) {
+                Timber.d("remoteCode=%s", fragmentTransferBinding.editTextRemoteCodeValue.getText().toString());
+
+                // correct length?
+                if (fragmentTransferBinding.editTextRemoteCodeValue.getText().toString().length() != 10) {
+                    Toast.makeText(
+                            getContext(),
+                            getContext().getString(R.string.fragment_transfer_restore_token_missing),
+                            Toast.LENGTH_SHORT).show();
+                    return;
+                }
+
+                // crc wrong?
+                if (!CloudTransferHelper.isRemoteCodeValid(fragmentTransferBinding.editTextRemoteCodeValue.getText().toString())) {
+                    Toast.makeText(
+                            getContext(),
+                            getContext().getString(R.string.fragment_transfer_restore_token_invalid),
+                            Toast.LENGTH_SHORT).show();
+                    return;
+                }
+
+                enableButton(fragmentTransferBinding.buttonBackup, false);
+                enableButton(fragmentTransferBinding.buttonRestore, false);
+
+                Intent serviceIntent = new Intent(getContext(), CloudServiceRestore.class);
+                serviceIntent.putExtra(
+                        "remoteCodeValue", fragmentTransferBinding.editTextRemoteCodeValue.getText().toString());
+
+                getContext().startService(serviceIntent);
+
+            }
+        });
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferPreferences.java
new file mode 100644
index 0000000..028dd2a
--- /dev/null
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/transfer/TransferPreferences.java
@@ -0,0 +1,22 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.transfer;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import com.github.jameshnsears.quoteunquote.utils.preference.PreferencesFacade;
+
+public class TransferPreferences extends PreferencesFacade {
+    public TransferPreferences(@NonNull final Context applicationContext) {
+        super(0, applicationContext);
+    }
+
+    @NonNull
+    public String getTransferLocalCode() {
+        return preferenceHelper.getPreferenceString(getLocalCode());
+    }
+
+    public void setTransferLocalCode(@NonNull final String value) {
+        preferenceHelper.setPreference(getLocalCode(), value);
+    }
+}
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
index 2cebeb6..7be5304 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/DatabaseRepository.java
@@ -6,7 +6,7 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import com.github.jameshnsears.quoteunquote.BuildConfig;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
 import com.github.jameshnsears.quoteunquote.database.history.AbstractHistoryDatabase;
 import com.github.jameshnsears.quoteunquote.database.history.CurrentDAO;
 import com.github.jameshnsears.quoteunquote.database.history.CurrentEntity;
@@ -42,10 +42,10 @@ public class DatabaseRepository {
     @Nullable
     public AbstractQuotationDatabase abstractQuotationDatabase;
     @Nullable
-    protected QuotationDAO quotationDAO;
-    @Nullable
     public AbstractHistoryDatabase abstractHistoryDatabase;
     @Nullable
+    protected QuotationDAO quotationDAO;
+    @Nullable
     protected FavouriteDAO favouriteDAO;
     @Nullable
     protected ReportedDAO reportedDAO;
@@ -56,23 +56,23 @@ public class DatabaseRepository {
         //
     }
 
-    private DatabaseRepository(@NonNull Context context) {
-        this.abstractQuotationDatabase = AbstractQuotationDatabase.getDatabase(context);
-        this.quotationDAO = this.abstractQuotationDatabase.quotationsDAO();
-        this.abstractHistoryDatabase = AbstractHistoryDatabase.getDatabase(context);
-        this.previousDAO = this.abstractHistoryDatabase.previousDAO();
-        this.favouriteDAO = this.abstractHistoryDatabase.favouritesDAO();
-        this.reportedDAO = this.abstractHistoryDatabase.reportedDAO();
-        this.currentDAO = this.abstractHistoryDatabase.currentDAO();
+    private DatabaseRepository(@NonNull final Context context) {
+        abstractQuotationDatabase = AbstractQuotationDatabase.getDatabase(context);
+        quotationDAO = abstractQuotationDatabase.quotationsDAO();
+        abstractHistoryDatabase = AbstractHistoryDatabase.getDatabase(context);
+        previousDAO = abstractHistoryDatabase.previousDAO();
+        favouriteDAO = abstractHistoryDatabase.favouritesDAO();
+        reportedDAO = abstractHistoryDatabase.reportedDAO();
+        currentDAO = abstractHistoryDatabase.currentDAO();
     }
 
-    public static void resetDatabaseInstances(@NonNull Context context) {
+    public static void resetDatabaseInstances(@NonNull final Context context) {
         AbstractQuotationDatabase.quotationDatabase = null;
         AbstractHistoryDatabase.historyDatabase = null;
-        getInstance(context);
+        DatabaseRepository.getInstance(context);
     }
 
-    public static void close(@NonNull Context context) {
+    public static void close(@NonNull final Context context) {
         AbstractQuotationDatabase.getDatabase(context).close();
         AbstractQuotationDatabase.quotationDatabase = null;
 
@@ -81,12 +81,12 @@ public class DatabaseRepository {
     }
 
     @NonNull
-    public static synchronized DatabaseRepository getInstance(@NonNull Context context) {
-        if (databaseRepository == null) {
-            databaseRepository = new DatabaseRepository(context);
+    public static synchronized DatabaseRepository getInstance(@NonNull final Context context) {
+        if (DatabaseRepository.databaseRepository == null) {
+            DatabaseRepository.databaseRepository = new DatabaseRepository(context);
         }
 
-        return databaseRepository;
+        return DatabaseRepository.databaseRepository;
     }
 
     @NonNull
@@ -104,71 +104,75 @@ public class DatabaseRepository {
 
     @NonNull
     public Single<Integer> countAll() {
-        return this.quotationDAO.countAll();
+        return quotationDAO.countAll();
     }
 
-    public int countPrevious(int widgetId, @NonNull ContentSelection contentSelection) {
-        return this.previousDAO.countPrevious(widgetId, contentSelection);
+    public int countPrevious(final int widgetId, @NonNull final ContentSelection contentSelection) {
+        return previousDAO.countPrevious(widgetId, contentSelection);
+    }
+
+    public int countPrevious(final int widgetId) {
+        return previousDAO.countPrevious(widgetId);
     }
 
     public int positionInPrevious(
-            int widgetId,
-            @NonNull ContentPreferences contentPreferences) {
+            final int widgetId,
+            @NonNull final QuotationsPreferences quotationsPreferences) {
 
-        final List<String> allPrevious = this.getPreviousDigests(widgetId, contentPreferences.getContentSelection());
+        List<String> allPrevious = getPreviousDigests(widgetId, quotationsPreferences.getContentSelection());
         Collections.reverse(allPrevious);
 
         int position = 0;
         if (!allPrevious.isEmpty()) {
-            final String currentDigest = this.getCurrentQuotation(widgetId).digest;
+            String currentDigest = getCurrentQuotation(widgetId).digest;
             position = allPrevious.indexOf(currentDigest) + 1;
         }
 
         return position;
     }
 
-    public int countNext(@NonNull ContentPreferences contentPreferences) {
-        final int countTotalNext;
+    public int countNext(@NonNull final QuotationsPreferences quotationsPreferences) {
+        int countTotalNext;
 
-        switch (contentPreferences.getContentSelection()) {
+        switch (quotationsPreferences.getContentSelection()) {
             case FAVOURITES:
-                countTotalNext = this.favouriteDAO.countFavourites().blockingGet();
+                countTotalNext = favouriteDAO.countFavourites().blockingGet();
                 break;
 
             case AUTHOR:
-                countTotalNext = this.quotationDAO.getDigestsForAuthor(contentPreferences.getContentSelectionAuthor()).size();
+                countTotalNext = quotationDAO.getDigestsForAuthor(quotationsPreferences.getContentSelectionAuthor()).size();
                 break;
 
             case SEARCH:
-                countTotalNext = this.quotationDAO.getSearchTextDigests(
-                        "%" + contentPreferences.getContentSelectionSearch() + "%").size();
+                countTotalNext = quotationDAO.getSearchTextDigests(
+                        "%" + quotationsPreferences.getContentSelectionSearch() + "%").size();
                 break;
 
             default:
                 // ALL:
-                countTotalNext = this.quotationDAO.countAll().blockingGet();
+                countTotalNext = quotationDAO.countAll().blockingGet();
                 break;
         }
         return countTotalNext;
     }
 
     public int countPrevious(
-            int widgetId,
-            @NonNull ContentSelection contentSelection,
-            @NonNull String criteria) {
-        final HashSet<String> previousDigests;
-        final HashSet<String> availableDigests;
+            final int widgetId,
+            @NonNull final ContentSelection contentSelection,
+            @NonNull final String criteria) {
+        HashSet<String> previousDigests;
+        HashSet<String> availableDigests;
 
         if (contentSelection == ContentSelection.AUTHOR) {
-            previousDigests = new HashSet<>(this.getPreviousDigests(widgetId, ContentSelection.AUTHOR));
-            availableDigests = new HashSet<>(this.quotationDAO.getDigestsForAuthor(criteria));
+            previousDigests = new HashSet<>(getPreviousDigests(widgetId, ContentSelection.AUTHOR));
+            availableDigests = new HashSet<>(quotationDAO.getDigestsForAuthor(criteria));
         } else {
-            previousDigests = new HashSet<>(this.getPreviousDigests(widgetId, ContentSelection.SEARCH));
-            availableDigests = new HashSet<>(this.quotationDAO.getSearchTextDigests("%" + criteria + "%"));
+            previousDigests = new HashSet<>(getPreviousDigests(widgetId, ContentSelection.SEARCH));
+            availableDigests = new HashSet<>(quotationDAO.getSearchTextDigests("%" + criteria + "%"));
         }
 
         int countPrevious = 0;
-        for (String digest : availableDigests) {
+        for (final String digest : availableDigests) {
             if (previousDigests.contains(digest)) {
                 countPrevious++;
             }
@@ -179,78 +183,88 @@ public class DatabaseRepository {
 
     @NonNull
     public Single<Integer> countFavourites() {
-        return this.favouriteDAO.countFavourites();
+        return favouriteDAO.countFavourites();
+    }
+
+    @NonNull
+    public QuotationEntity getNextQuotation(final int widgetId, @NonNull final ContentSelection contentSelection) {
+        return getQuotation(previousDAO.getPrevious(widgetId, contentSelection).digest);
+    }
+
+    @NonNull
+    public List<String> getPreviousDigests(final int widgetId, @NonNull final ContentSelection contentSelection) {
+        return previousDAO.getPreviousDigests(widgetId, contentSelection);
     }
 
     @NonNull
-    public QuotationEntity getNextQuotation(int widgetId, @NonNull ContentSelection contentSelection) {
-        return this.getQuotation(this.previousDAO.getPrevious(widgetId, contentSelection).digest);
+    public List<PreviousEntity> getPrevious() {
+        return previousDAO.getPrevious();
     }
 
     @NonNull
-    public List<String> getPreviousDigests(int widgetId, @NonNull ContentSelection contentSelection) {
-        return this.previousDAO.getPreviousDigests(widgetId, contentSelection);
+    public List<String> getFavouriteDigests() {
+        return favouriteDAO.getFavouriteDigests();
     }
 
     @NonNull
-    public List<String> getFavourites() {
-        return this.favouriteDAO.getFavouriteDigests();
+    public List<FavouriteEntity> getFavourites() {
+        return favouriteDAO.getFavourites();
     }
 
     @NonNull
     public Single<List<AuthorPOJO>> getAuthorsAndQuotationCounts() {
         if (BuildConfig.DEBUG) {
-            return this.quotationDAO.getAuthorsAndQuotationCounts(1);
+            return quotationDAO.getAuthorsAndQuotationCounts(1);
         }
-        return this.quotationDAO.getAuthorsAndQuotationCounts(5);
+        return quotationDAO.getAuthorsAndQuotationCounts(5);
     }
 
     @NonNull
-    public Integer countSearchText(@NonNull String text) {
-        return this.quotationDAO.countSearchText("%" + text + "%");
+    public Integer countSearchText(@NonNull final String text) {
+        return quotationDAO.countSearchText("%" + text + "%");
     }
 
     @NonNull
     public List<QuotationEntity> getAllQuotations() {
-        return this.quotationDAO.getAllQuotations();
+        return quotationDAO.getAllQuotations();
     }
 
     @NonNull
-    public QuotationEntity getQuotation(@NonNull String digest) {
-        return this.quotationDAO.getQuotation(digest);
+    public QuotationEntity getQuotation(@NonNull final String digest) {
+        return quotationDAO.getQuotation(digest);
     }
 
     public void markAsPrevious(
-            int widgetId,
-            @NonNull ContentSelection contentSelection,
-            @NonNull String digest) {
+            final int widgetId,
+            @NonNull final ContentSelection contentSelection,
+            @NonNull final String digest) {
         Timber.d("contentType=%d; digest=%s", contentSelection.getContentSelection(), digest);
-        this.previousDAO.markAsPrevious(new PreviousEntity(widgetId, contentSelection, digest));
+        previousDAO.markAsPrevious(new PreviousEntity(widgetId, contentSelection, digest));
     }
 
-    public void markAsFavourite(@NonNull String digest) {
-        if (this.favouriteDAO.isFavourite(digest) == 0) {
+    public void markAsFavourite(@NonNull final String digest) {
+        if (favouriteDAO.isFavourite(digest) == 0) {
             Timber.d("digest=%s", digest);
-            this.favouriteDAO.markAsFavourite(new FavouriteEntity(digest));
+            favouriteDAO.markAsFavourite(new FavouriteEntity(digest));
         }
     }
 
-    public void markAsReported(@NonNull String digest) {
+    public void markAsReported(@NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        this.reportedDAO.markAsReported(new ReportedEntity(digest));
+        reportedDAO.markAsReported(new ReportedEntity(digest));
     }
 
     public void markAsCurrent(
-            int widgetId,
-            @NonNull String digest) {
+            final int widgetId,
+            @NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        this.currentDAO.erase(widgetId);
-        this.currentDAO.markAsCurrent(new CurrentEntity(widgetId, digest));
+        currentDAO.erase(widgetId);
+        currentDAO.markAsCurrent(new CurrentEntity(widgetId, digest));
     }
 
     @NonNull
-    public QuotationEntity getCurrentQuotation(int widgetId) {
-        final QuotationEntity quotationEntity = this.getQuotation(this.currentDAO.getCurrentDigest(widgetId));
+    public QuotationEntity getCurrentQuotation(final int widgetId) {
+        QuotationEntity quotationEntity = getQuotation(currentDAO.getCurrentDigest(widgetId));
         if (quotationEntity != null) {
             Timber.d("digest=%s", quotationEntity.digest);
         }
@@ -259,33 +273,33 @@ public class DatabaseRepository {
 
     @NonNull
     public QuotationEntity getNextQuotation(
-            int widgetId,
-            @NonNull ContentSelection contentSelection,
-            @Nullable String searchString,
-            boolean randomNext) {
+            final int widgetId,
+            @NonNull final ContentSelection contentSelection,
+            @Nullable final String searchString,
+            final boolean randomNext) {
         Timber.d("contentType=%d; searchString=%s", contentSelection.getContentSelection(), searchString);
 
-        final List<String> nextQuotationDigests = this.getNextQuotationDigests(widgetId, contentSelection, searchString);
+        List<String> nextQuotationDigests = getNextQuotationDigests(widgetId, contentSelection, searchString);
 
-        final QuotationEntity currentQuotation = this.getCurrentQuotation(widgetId);
-        final QuotationEntity nextQuotation;
+        QuotationEntity currentQuotation = getCurrentQuotation(widgetId);
+        QuotationEntity nextQuotation;
 
         if (!randomNext) {
-            final List<String> previousQuotations = this.getPreviousDigests(widgetId, contentSelection);
+            List<String> previousQuotations = getPreviousDigests(widgetId, contentSelection);
 
             if (previousQuotations.isEmpty()) {
-                nextQuotation = this.getQuotation(nextQuotationDigests.get(0));
+                nextQuotation = getQuotation(nextQuotationDigests.get(0));
             } else {
                 int indexInPrevious = previousQuotations.indexOf(currentQuotation.digest);
 
                 if (indexInPrevious != 0) {
                     // move through previous quotations
                     indexInPrevious -= 1;
-                    nextQuotation = this.getQuotation(previousQuotations.get(indexInPrevious));
+                    nextQuotation = getQuotation(previousQuotations.get(indexInPrevious));
                 } else {
                     if (!nextQuotationDigests.isEmpty()) {
                         // use a new quotation
-                        nextQuotation = this.getQuotation(nextQuotationDigests.get(0));
+                        nextQuotation = getQuotation(nextQuotationDigests.get(0));
                     } else {
                         // we've run out of new quotations
                         nextQuotation = currentQuotation;
@@ -294,7 +308,7 @@ public class DatabaseRepository {
             }
         } else {
             if (!nextQuotationDigests.isEmpty()) {
-                nextQuotation = this.getQuotation(nextQuotationDigests.get(this.getRandomIndex(nextQuotationDigests)));
+                nextQuotation = getQuotation(nextQuotationDigests.get(getRandomIndex(nextQuotationDigests)));
             } else {
                 // we've run out of new quotations
                 nextQuotation = currentQuotation;
@@ -305,40 +319,40 @@ public class DatabaseRepository {
     }
 
     private synchronized List<String> getNextQuotationDigests(
-            final int widgetId,
-            @NonNull final ContentSelection contentSelection,
-            @Nullable final String searchString) {
+            int widgetId,
+            @NonNull ContentSelection contentSelection,
+            @Nullable String searchString) {
         // insertion order required
-        LinkedHashSet<String> nextQuotationDigests;
+        final LinkedHashSet<String> nextQuotationDigests;
 
         // no order needed
-        HashSet<String> previousDigests
-                =  new HashSet<>(this.getPreviousDigests(widgetId, contentSelection));
+        final HashSet<String> previousDigests
+                = new HashSet<>(getPreviousDigests(widgetId, contentSelection));
 
         switch (contentSelection) {
             case FAVOURITES:
                 nextQuotationDigests
-                        = new LinkedHashSet<>(this.favouriteDAO.getNextFavouriteDigests());
+                        = new LinkedHashSet<>(favouriteDAO.getNextFavouriteDigests());
                 nextQuotationDigests.removeAll(previousDigests);
                 break;
 
             case AUTHOR:
-                LinkedHashSet<String> authorDigests
-                        = new LinkedHashSet<>(this.quotationDAO.getNextAuthorDigest(searchString));
+                final LinkedHashSet<String> authorDigests
+                        = new LinkedHashSet<>(quotationDAO.getNextAuthorDigest(searchString));
                 authorDigests.removeAll(previousDigests);
                 nextQuotationDigests = authorDigests;
                 break;
 
             case SEARCH:
-                LinkedHashSet<String> searchDigests
-                        = new LinkedHashSet<>(this.quotationDAO.getNextSearchTextDigests("%" + searchString + "%"));
+                final LinkedHashSet<String> searchDigests
+                        = new LinkedHashSet<>(quotationDAO.getNextSearchTextDigests("%" + searchString + "%"));
                 searchDigests.removeAll(previousDigests);
                 nextQuotationDigests = searchDigests;
                 break;
 
             default:
                 // ALL:
-                LinkedHashSet<String> allDigests = new LinkedHashSet<>(this.quotationDAO.getNextAllDigests());
+                final LinkedHashSet<String> allDigests = new LinkedHashSet<>(quotationDAO.getNextAllDigests());
                 allDigests.removeAll(previousDigests);
                 nextQuotationDigests = allDigests;
                 break;
@@ -347,48 +361,43 @@ public class DatabaseRepository {
         return new ArrayList<>(nextQuotationDigests);
     }
 
-    public int getRandomIndex(@NonNull List<String> availableNextQuotations) {
-        return this.secureRandom.nextInt(availableNextQuotations.size());
+    public int getRandomIndex(@NonNull final List<String> availableNextQuotations) {
+        return secureRandom.nextInt(availableNextQuotations.size());
     }
 
-    public void erasePrevious(int widgetId, @NonNull String digest) {
+    public void erasePrevious(final int widgetId, @NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        this.previousDAO.erase(widgetId, ContentSelection.ALL, digest);
-        this.previousDAO.erase(widgetId, ContentSelection.AUTHOR, digest);
-        this.previousDAO.erase(widgetId, ContentSelection.SEARCH, digest);
+        previousDAO.erase(widgetId, ContentSelection.ALL, digest);
+        previousDAO.erase(widgetId, ContentSelection.AUTHOR, digest);
+        previousDAO.erase(widgetId, ContentSelection.SEARCH, digest);
     }
 
-    public void eraseFavourite(int widgetId, @NonNull String digest) {
+    public void eraseFavourite(final int widgetId, @NonNull final String digest) {
         Timber.d("digest=%s", digest);
-        this.favouriteDAO.deleteFavourite(digest);
-        this.previousDAO.erase(widgetId, ContentSelection.FAVOURITES, digest);
+        favouriteDAO.deleteFavourite(digest);
+        previousDAO.erase(widgetId, ContentSelection.FAVOURITES, digest);
     }
 
     public void erase() {
-        this.previousDAO.erase();
-        this.currentDAO.erase();
-        this.favouriteDAO.erase();
-        this.reportedDAO.erase();
+        previousDAO.erase();
+        currentDAO.erase();
+        favouriteDAO.erase();
+        reportedDAO.erase();
     }
 
-    public void erase(int widgetId) {
-        this.previousDAO.erase(widgetId);
-        this.currentDAO.erase(widgetId);
+    public void erase(final int widgetId) {
+        previousDAO.erase(widgetId);
+        currentDAO.erase(widgetId);
     }
 
-    public void erase(int widgetId, @NonNull ContentSelection contentSelection) {
+    public void erase(final int widgetId, @NonNull final ContentSelection contentSelection) {
         Timber.d("contentType=%d", contentSelection.getContentSelection());
-        this.previousDAO.erase(widgetId, contentSelection);
-        this.currentDAO.erase(widgetId);
-    }
-
-    @NonNull
-    public Boolean isFavourite(@NonNull String digest) {
-        return this.favouriteDAO.isFavourite(digest) > 0;
+        previousDAO.erase(widgetId, contentSelection);
+        currentDAO.erase(widgetId);
     }
 
     @NonNull
-    public Boolean isReported(@NonNull String digest) {
-        return this.reportedDAO.isReported(digest) > 0;
+    public Boolean isFavourite(@NonNull final String digest) {
+        return favouriteDAO.isFavourite(digest) > 0;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java
index 8d590c7..374583b 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/AbstractHistoryDatabase.java
@@ -20,8 +20,8 @@ public abstract class AbstractHistoryDatabase extends RoomDatabase {
     public static final String DATABASE_NAME = "history.db";
     static final Migration MIGRATION_1_2 = new Migration(1, 2) {
         @Override
-        public void migrate(@NonNull final SupportSQLiteDatabase database) {
-            Timber.d(AbstractHistoryDatabase.DATABASE_NAME);
+        public void migrate(@NonNull SupportSQLiteDatabase database) {
+            Timber.d(DATABASE_NAME);
             database.execSQL("CREATE TABLE IF NOT EXISTS `current` (`widget_id` INTEGER NOT NULL, `digest` TEXT NOT NULL, PRIMARY KEY(`widget_id`))");
             database.execSQL("CREATE INDEX IF NOT EXISTS `index_previous_digest` ON `previous` (`digest`)");
             database.execSQL("CREATE INDEX IF NOT EXISTS `index_previous_widget_id_content_type_digest` ON `previous` (`widget_id`, `content_type`, `digest`)");
@@ -31,18 +31,18 @@ public abstract class AbstractHistoryDatabase extends RoomDatabase {
     public static AbstractHistoryDatabase historyDatabase;
 
     @NonNull
-    public static AbstractHistoryDatabase getDatabase(@NonNull Context context) {
+    public static AbstractHistoryDatabase getDatabase(@NonNull final Context context) {
         synchronized (AbstractHistoryDatabase.class) {
-            Timber.d("%b", AbstractHistoryDatabase.historyDatabase == null);
-            if (AbstractHistoryDatabase.historyDatabase == null) {
-                AbstractHistoryDatabase.historyDatabase = Room.databaseBuilder(context,
-                        AbstractHistoryDatabase.class, AbstractHistoryDatabase.DATABASE_NAME)
-                        .addMigrations(AbstractHistoryDatabase.MIGRATION_1_2)
+            Timber.d("%b", historyDatabase == null);
+            if (historyDatabase == null) {
+                historyDatabase = Room.databaseBuilder(context,
+                        AbstractHistoryDatabase.class, DATABASE_NAME)
+                        .addMigrations(MIGRATION_1_2)
                         .fallbackToDestructiveMigration()
                         .build();
             }
 
-            return AbstractHistoryDatabase.historyDatabase;
+            return historyDatabase;
         }
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java
index bb3be25..6c8eab0 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/CurrentEntity.java
@@ -20,8 +20,8 @@ public class CurrentEntity {
     public final String digest;
 
     public CurrentEntity(
-            int widgetId,
-            @NonNull String digest) {
+            final int widgetId,
+            @NonNull final String digest) {
         this.widgetId = widgetId;
         this.digest = digest;
     }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java
index 6cee394..2f56a90 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteDAO.java
@@ -19,6 +19,9 @@ public interface FavouriteDAO {
     @Query("SELECT COUNT(*) FROM FAVOURITE WHERE DIGEST = :digest")
     Integer isFavourite(String digest);
 
+    @Query("SELECT * FROM FAVOURITE ORDER BY NAVIGATION DESC")
+    List<FavouriteEntity> getFavourites();
+
     @Query("SELECT DIGEST FROM FAVOURITE ORDER BY NAVIGATION DESC")
     List<String> getFavouriteDigests();
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java
index 04beeb8..7ec3b21 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/FavouriteEntity.java
@@ -14,7 +14,7 @@ public class FavouriteEntity {
     @PrimaryKey(autoGenerate = true)
     public int navigation;
 
-    public FavouriteEntity(@NonNull String digest) {
+    public FavouriteEntity(@NonNull final String digest) {
         this.digest = digest;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java
index 0aa8c92..9b3c0e2 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousDAO.java
@@ -18,12 +18,18 @@ public interface PreviousDAO {
     @Query("SELECT COUNT(*) FROM PREVIOUS WHERE WIDGET_ID = :widgetId AND CONTENT_TYPE = :contentType")
     int countPrevious(int widgetId, ContentSelection contentType);
 
+    @Query("SELECT COUNT(*) FROM PREVIOUS WHERE WIDGET_ID = :widgetId")
+    int countPrevious(int widgetId);
+
     @Query("SELECT DIGEST FROM PREVIOUS WHERE WIDGET_ID = :widgetId AND CONTENT_TYPE = :contentType ORDER BY NAVIGATION DESC")
     List<String> getPreviousDigests(int widgetId, ContentSelection contentType);
 
     @Query("SELECT * FROM PREVIOUS WHERE WIDGET_ID = :widgetId AND CONTENT_TYPE = :contentType ORDER BY NAVIGATION DESC LIMIT 1")
     PreviousEntity getPrevious(int widgetId, ContentSelection contentType);
 
+    @Query("SELECT * FROM PREVIOUS ORDER BY NAVIGATION DESC")
+    List<PreviousEntity> getPrevious();
+
     @Query("DELETE FROM PREVIOUS")
     void erase();
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java
index f92fb29..502d042 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/PreviousEntity.java
@@ -28,9 +28,9 @@ public class PreviousEntity {
     public int navigation;
 
     public PreviousEntity(
-            int widgetId,
-            @NonNull ContentSelection contentType,
-            @NonNull String digest) {
+            final int widgetId,
+            @NonNull final ContentSelection contentType,
+            @NonNull final String digest) {
         this.widgetId = widgetId;
         this.contentType = contentType;
         this.digest = digest;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java
index 6c2d2a7..e005063 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/history/ReportedEntity.java
@@ -12,7 +12,7 @@ public class ReportedEntity {
     @ColumnInfo(name = "digest")
     public final String digest;
 
-    public ReportedEntity(@NonNull String digest) {
+    public ReportedEntity(@NonNull final String digest) {
         this.digest = digest;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
index a6282ce..6060d7d 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AbstractQuotationDatabase.java
@@ -10,23 +10,23 @@ import androidx.room.RoomDatabase;
 
 import com.github.jameshnsears.quoteunquote.BuildConfig;
 
-@Database(entities = QuotationEntity.class, version = 23)
+@Database(entities = QuotationEntity.class, version = 24)
 public abstract class AbstractQuotationDatabase extends RoomDatabase {
     @Nullable
     public static AbstractQuotationDatabase quotationDatabase;
 
     @NonNull
-    public static AbstractQuotationDatabase getDatabase(@NonNull Context context) {
+    public static AbstractQuotationDatabase getDatabase(@NonNull final Context context) {
         synchronized (AbstractQuotationDatabase.class) {
-            if (AbstractQuotationDatabase.quotationDatabase == null) {
-                AbstractQuotationDatabase.quotationDatabase = Room.databaseBuilder(context,
+            if (quotationDatabase == null) {
+                quotationDatabase = Room.databaseBuilder(context,
                         AbstractQuotationDatabase.class, BuildConfig.DATABASE_QUOTATIONS)
                         .createFromAsset(BuildConfig.DATABASE_QUOTATIONS)
                         // indexes added
                         .fallbackToDestructiveMigration()
                         .build();
             }
-            return AbstractQuotationDatabase.quotationDatabase;
+            return quotationDatabase;
         }
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java
index d02f3b1..3f429bc 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/AuthorPOJO.java
@@ -22,13 +22,13 @@ public class AuthorPOJO implements Comparable<AuthorPOJO> {
     @ColumnInfo(name = "QUOTATION_COUNT")
     public int count;
 
-    public AuthorPOJO(@NonNull String author) {
+    public AuthorPOJO(@NonNull final String author) {
         this.author = author;
-        key = AuthorPOJO.FINAL_COLLATOR.getCollationKey(author);
+        key = FINAL_COLLATOR.getCollationKey(author);
     }
 
     @Override
-    public int compareTo(@NonNull AuthorPOJO authorPOJO) {
+    public int compareTo(@NonNull final AuthorPOJO authorPOJO) {
         return key.compareTo(authorPOJO.key);
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
index 6fae5de..8692d63 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/database/quotation/QuotationEntity.java
@@ -26,10 +26,10 @@ public class QuotationEntity {
     public final String digest;
 
     public QuotationEntity(
-            @NonNull String digest,
-            @NonNull String wikipedia,
-            @NonNull String author,
-            @NonNull String quotation) {
+            @NonNull final String digest,
+            @NonNull final String wikipedia,
+            @NonNull final String author,
+            @NonNull final String quotation) {
         this.author = author;
         this.wikipedia = wikipedia;
         this.quotation = quotation;
@@ -38,16 +38,16 @@ public class QuotationEntity {
 
     @NonNull
     public String theQuotation() {
-        return this.quotation + "\n";
+        return quotation + "\n";
     }
 
     @NonNull
     public String theAuthor() {
-        return this.author + "\n";
+        return author + "\n";
     }
 
     @NonNull
     public String theShareContent() {
-        return theQuotation() + "\n" + theAuthor();
+        return this.theQuotation() + "\n" + this.theAuthor();
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt
index 53a191c..89fea6e 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewLayoutIdHelper.kt
@@ -3,10 +3,6 @@ package com.github.jameshnsears.quoteunquote.listview
 import com.github.jameshnsears.quoteunquote.R
 
 class ListViewLayoutIdHelper {
-    private constructor() {
-        // ...
-    }
-
     companion object {
         fun layoutIdForCursive(
             textSize: String
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
index 5c0f27f..68de67c 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
@@ -15,7 +15,7 @@ import androidx.annotation.Nullable;
 import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel;
 import com.github.jameshnsears.quoteunquote.R;
 import com.github.jameshnsears.quoteunquote.configure.fragment.appearance.AppearancePreferences;
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentPreferences;
+import com.github.jameshnsears.quoteunquote.configure.fragment.quotations.QuotationsPreferences;
 import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 import com.github.jameshnsears.quoteunquote.utils.IntentFactoryHelper;
 
@@ -37,50 +37,47 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     private final QuotationEntity quotationEntity;
 
     private final int textSize;
-
+    @Nullable
+    private final String textColour;
     @Nullable
     public QuoteUnquoteModel quoteUnquoteModel;
-
     @Nullable
     private String quotationPosition;
 
-    @Nullable
-    private final String textColour;
-
-    ListViewProvider(@NonNull Context context, @NonNull Intent intent) {
+    ListViewProvider(@NonNull final Context context, @NonNull final Intent intent) {
         synchronized (this) {
             this.context = context;
 
-            this.widgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, 0);
-            Timber.d("%d", this.widgetId);
+            widgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, 0);
+            Timber.d("%d", widgetId);
 
-            final AppearancePreferences appearancePreferences = new AppearancePreferences(this.widgetId, context);
-            this.textSize = appearancePreferences.getAppearanceTextSize();
-            this.textColour = appearancePreferences.getAppearanceTextColour();
+            AppearancePreferences appearancePreferences = new AppearancePreferences(widgetId, context);
+            textSize = appearancePreferences.getAppearanceTextSize();
+            textColour = appearancePreferences.getAppearanceTextColour();
 
-            final ContentPreferences contentPreferences = new ContentPreferences(this.widgetId, context);
+            QuotationsPreferences quotationsPreferences = new QuotationsPreferences(widgetId, context);
 
-            this.setQuoteUnquoteModel(new QuoteUnquoteModel(context));
+            setQuoteUnquoteModel(new QuoteUnquoteModel(context));
 
-            this.quotationEntity = this.getQuoteUnquoteModel().getCurrentQuotation(
-                    this.widgetId);
+            quotationEntity = getQuoteUnquoteModel().getCurrentQuotation(
+                    widgetId);
 
-            if (this.quotationEntity != null) {
-                Timber.d("digest=%s", this.quotationEntity.digest);
+            if (quotationEntity != null) {
+                Timber.d("digest=%s", quotationEntity.digest);
 
-                this.quotationPosition = this.getQuoteUnquoteModel().getCurrentPosition(
-                        this.widgetId,
-                        contentPreferences);
+                quotationPosition = getQuoteUnquoteModel().getCurrentPosition(
+                        widgetId,
+                        quotationsPreferences);
             }
         }
     }
 
     @Nullable
     public QuoteUnquoteModel getQuoteUnquoteModel() {
-        return this.quoteUnquoteModel;
+        return quoteUnquoteModel;
     }
 
-    public void setQuoteUnquoteModel(@Nullable final QuoteUnquoteModel quoteUnquoteModel) {
+    public void setQuoteUnquoteModel(@Nullable QuoteUnquoteModel quoteUnquoteModel) {
         this.quoteUnquoteModel = quoteUnquoteModel;
     }
 
@@ -91,22 +88,22 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
 
     @Override
     public void onDataSetChanged() {
-        Timber.d("%d", this.widgetId);
+        Timber.d("%d", widgetId);
 
         synchronized (this) {
-            if (this.quotationList.isEmpty()) {
+            if (quotationList.isEmpty()) {
                 // first time call
-                this.quotationList.add(this.quotationEntity.theQuotation());
-                this.quotationList.add(this.quotationEntity.theAuthor());
-                this.quotationList.add(this.quotationPosition);
+                quotationList.add(quotationEntity.theQuotation());
+                quotationList.add(quotationEntity.theAuthor());
+                quotationList.add(quotationPosition);
             } else {
                 // subsequent calls
-                if (!"".equals(this.quotationEntity.theQuotation())
+                if (!"".equals(quotationEntity.theQuotation())
                         &&
-                        !this.quotationList.get(0).equals(this.quotationEntity.theQuotation())) {
-                    this.quotationList.set(0, this.quotationEntity.theQuotation());
-                    this.quotationList.set(1, this.quotationEntity.theAuthor());
-                    this.quotationList.set(2, this.quotationPosition);
+                        !quotationList.get(0).equals(quotationEntity.theQuotation())) {
+                    quotationList.set(0, quotationEntity.theQuotation());
+                    quotationList.set(1, quotationEntity.theAuthor());
+                    quotationList.set(2, quotationPosition);
                 }
             }
         }
@@ -114,8 +111,8 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
 
     @Override
     public void onDestroy() {
-        quoteUnquoteModel.databaseRepository.abstractHistoryDatabase = null;
-        quoteUnquoteModel = null;
+        this.quoteUnquoteModel.databaseRepository.abstractHistoryDatabase = null;
+        this.quoteUnquoteModel = null;
     }
 
     @Override
@@ -125,32 +122,32 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
 
     @Override
     @NonNull
-    public RemoteViews getViewAt(int position) {
-        RemoteViews remoteViews = this.getRemoteViews(position);
+    public RemoteViews getViewAt(final int position) {
+        final RemoteViews remoteViews = getRemoteViews(position);
 
         remoteViews.setOnClickFillInIntent(
                 R.id.textViewRowQuotation,
-                IntentFactoryHelper.createIntent(this.widgetId));
+                IntentFactoryHelper.createIntent(widgetId));
 
         remoteViews.setOnClickFillInIntent(
                 R.id.textViewRowAuthor,
                 IntentFactoryHelper.createClickFillInIntent(
                         "wikipedia",
-                        this.quotationEntity.wikipedia,
-                        widgetId));
+                        quotationEntity.wikipedia,
+                        this.widgetId));
 
         remoteViews.setOnClickFillInIntent(
                 R.id.textViewRowPosition,
-                IntentFactoryHelper.createIntent(this.widgetId));
+                IntentFactoryHelper.createIntent(widgetId));
 
         return remoteViews;
     }
 
     private int getRowLayoutId() {
-        final AppearancePreferences appearancePreferences = new AppearancePreferences(this.widgetId, this.context);
+        AppearancePreferences appearancePreferences = new AppearancePreferences(widgetId, context);
 
-        final String textFamily = appearancePreferences.getAppearanceTextFamily();
-        final String textStyle = appearancePreferences.getAppearanceTextStyle();
+        String textFamily = appearancePreferences.getAppearanceTextFamily();
+        String textStyle = appearancePreferences.getAppearanceTextStyle();
         Timber.d("textFamily=%s; textStyle=%s", textFamily, textStyle);
 
         int layoutId = 0;
@@ -186,50 +183,50 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     }
 
     @NonNull
-    private RemoteViews getRemoteViews(int position) {
-        RemoteViews remoteViews = new RemoteViews(this.context.getPackageName(), this.getRowLayoutId());
+    private RemoteViews getRemoteViews(final int position) {
+        final RemoteViews remoteViews = new RemoteViews(context.getPackageName(), getRowLayoutId());
 
-        remoteViews.setTextViewText(R.id.textViewRowQuotation, this.quotationEntity.theQuotation());
-        remoteViews.setTextViewText(R.id.textViewRowAuthor, this.quotationEntity.theAuthor());
-        remoteViews.setTextViewText(R.id.textViewRowPosition, this.quotationPosition);
+        remoteViews.setTextViewText(R.id.textViewRowQuotation, quotationEntity.theQuotation());
+        remoteViews.setTextViewText(R.id.textViewRowAuthor, quotationEntity.theAuthor());
+        remoteViews.setTextViewText(R.id.textViewRowPosition, quotationPosition);
 
         synchronized (this) {
-            if (!this.quotationList.isEmpty() && !"".equals(this.quotationEntity.theQuotation())) {
-                remoteViews.setTextViewText(R.id.textViewRowQuotation, this.quotationEntity.theQuotation());
-                remoteViews.setTextViewText(R.id.textViewRowAuthor, this.quotationEntity.theAuthor());
-                remoteViews.setTextViewText(R.id.textViewRowPosition, this.quotationPosition);
+            if (!quotationList.isEmpty() && !"".equals(quotationEntity.theQuotation())) {
+                remoteViews.setTextViewText(R.id.textViewRowQuotation, quotationEntity.theQuotation());
+                remoteViews.setTextViewText(R.id.textViewRowAuthor, quotationEntity.theAuthor());
+                remoteViews.setTextViewText(R.id.textViewRowPosition, quotationPosition);
 
                 remoteViews.setTextViewTextSize(
                         R.id.textViewRowQuotation,
                         TypedValue.COMPLEX_UNIT_DIP,
-                        (float) this.textSize);
+                        (float) textSize);
 
                 remoteViews.setTextColor(
                         R.id.textViewRowQuotation,
-                        Color.parseColor(this.textColour));
+                        Color.parseColor(textColour));
 
                 remoteViews.setTextViewTextSize(
                         R.id.textViewRowAuthor,
                         TypedValue.COMPLEX_UNIT_DIP,
-                        (float) this.textSize);
+                        (float) textSize);
 
                 remoteViews.setTextColor(
                         R.id.textViewRowAuthor,
-                        Color.parseColor(this.textColour));
+                        Color.parseColor(textColour));
 
                 remoteViews.setTextViewTextSize(
                         R.id.textViewRowPosition,
                         TypedValue.COMPLEX_UNIT_DIP,
-                        (float) this.textSize);
+                        (float) textSize);
 
                 remoteViews.setTextColor(
                         R.id.textViewRowPosition,
-                        Color.parseColor(this.textColour));
+                        Color.parseColor(textColour));
 
                 final int paintFlags = Paint.ANTI_ALIAS_FLAG;
                 final String methodName = "setPaintFlags";
 
-                if (!this.quotationEntity.wikipedia.equals("?")) {
+                if (!quotationEntity.wikipedia.equals("?")) {
                     remoteViews.setInt(R.id.textViewRowAuthor, methodName,
                             paintFlags | Paint.UNDERLINE_TEXT_FLAG);
                 } else {
@@ -246,7 +243,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     @NonNull
     @Override
     public RemoteViews getLoadingView() {
-        return this.getRemoteViews(0);
+        return getRemoteViews(0);
     }
 
     @Override
@@ -255,7 +252,7 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
     }
 
     @Override
-    public long getItemId(int position) {
+    public long getItemId(final int position) {
         return position;
     }
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java
index 1270ab8..2ec7fb8 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewService.java
@@ -8,7 +8,7 @@ import androidx.annotation.NonNull;
 public class ListViewService extends RemoteViewsService {
     @Override
     @NonNull
-    public RemoteViewsFactory onGetViewFactory(@NonNull Intent intent) {
-        return new ListViewProvider(this.getApplicationContext(), intent);
+    public RemoteViewsFactory onGetViewFactory(@NonNull final Intent intent) {
+        return new ListViewProvider(getApplicationContext(), intent);
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java
index 3928fe5..819c0f1 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/ContentSelection.java
@@ -16,15 +16,15 @@ public enum ContentSelection {
     @NonNull
     private final Integer code;
 
-    ContentSelection(@NonNull Integer value) {
-        code = value;
+    ContentSelection(@NonNull final Integer value) {
+        this.code = value;
     }
 
     @TypeConverter
     @Nullable
-    public static ContentSelection getContentSelection(@NonNull Integer integer) {
+    public static ContentSelection getContentSelection(@NonNull final Integer integer) {
         ContentSelection contentSelection = null;
-        for (ContentSelection contentSelectionValue : ContentSelection.values()) {
+        for (final ContentSelection contentSelectionValue : values()) {
             if (Objects.equals(contentSelectionValue.code, integer)) {
                 contentSelection = contentSelectionValue;
                 break;
@@ -35,12 +35,12 @@ public enum ContentSelection {
 
     @TypeConverter
     @NonNull
-    public static Integer getContentSelectionInt(@NonNull ContentSelection contentSelection) {
+    public static Integer getContentSelectionInt(@NonNull final ContentSelection contentSelection) {
         return contentSelection.code;
     }
 
     @NonNull
     public Integer getContentSelection() {
-        return this.code;
+        return code;
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
index 7e2eb86..f555e66 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/IntentFactoryHelper.java
@@ -42,41 +42,41 @@ public class IntentFactoryHelper {
     private static final SecureRandom SECURE_RANDOM = new SecureRandom();
 
     @NonNull
-    public static Intent createIntent(int widgetId) {
-        Intent resultValue = new Intent();
+    public static Intent createIntent(final int widgetId) {
+        final Intent resultValue = new Intent();
         resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);
         return resultValue;
     }
 
     @NonNull
-    public static Intent createIntentShare(@NonNull String subject, @NonNull String quoteAndAuthor) {
-        Intent shareIntent = new Intent();
+    public static Intent createIntentShare(@NonNull final String subject, @NonNull final String quoteAndAuthor) {
+        final Intent shareIntent = new Intent();
         shareIntent.setAction(Intent.ACTION_SEND);
         shareIntent.setType("text/plain");
         shareIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
         shareIntent.putExtra(Intent.EXTRA_TEXT, quoteAndAuthor);
 
-        Intent chooserIntent = Intent.createChooser(shareIntent, null);
+        final Intent chooserIntent = Intent.createChooser(shareIntent, null);
         chooserIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         return chooserIntent;
     }
 
     @SuppressLint("UnspecifiedImmutableFlag")
     @NonNull
-    public static PendingIntent createPendingIntentTemplate(@NonNull Context context) {
-        Intent pendingIntent = new Intent(context, ConfigureActivity.class);
+    public static PendingIntent createPendingIntentTemplate(@NonNull final Context context) {
+        final Intent pendingIntent = new Intent(context, ConfigureActivity.class);
 
         PendingIntent clickPendingIntent = null;
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
             clickPendingIntent = PendingIntent
                     .getActivity(context, 0,
-                            pendingIntent ,
+                            pendingIntent,
                             PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE);
         } else {
             clickPendingIntent = PendingIntent
                     .getActivity(context, 0,
-                            pendingIntent ,
+                            pendingIntent,
                             PendingIntent.FLAG_UPDATE_CURRENT);
 
         }
@@ -87,10 +87,10 @@ public class IntentFactoryHelper {
     @SuppressLint("UnspecifiedImmutableFlag")
     @NonNull
     public static PendingIntent createClickPendingIntent(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull String action) {
-        Intent intent = IntentFactoryHelper.createIntent(context, widgetId);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final String action) {
+        final Intent intent = createIntent(context, widgetId);
         intent.setAction(action);
 
         int pendingIntentFlags = 0;
@@ -104,10 +104,10 @@ public class IntentFactoryHelper {
     }
 
     @NonNull
-    public static Intent createClickFillInIntent(@NonNull String key, @NonNull String value, int widgetId) {
-        Intent clickFillInIntent = new Intent();
+    public static Intent createClickFillInIntent(@NonNull final String key, @NonNull final String value, final int widgetId) {
+        final Intent clickFillInIntent = new Intent();
 
-        Bundle extras = new Bundle();
+        final Bundle extras = new Bundle();
         extras.putString(key, value);
         extras.putInt(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);
 
@@ -117,40 +117,40 @@ public class IntentFactoryHelper {
     }
 
     @NonNull
-    public static Intent createIntent(@NonNull Context context, int widgetId) {
-        Intent intent = new Intent(context, QuoteUnquoteWidget.class);
+    public static Intent createIntent(@NonNull final Context context, final int widgetId) {
+        final Intent intent = new Intent(context, QuoteUnquoteWidget.class);
         intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);
         return intent;
     }
 
     @NonNull
     public static Intent createIntent(
-            @NonNull Context context,
-            @NonNull Class cls,
-            int widgetId) {
-        Intent intent = new Intent(context, cls);
+            @NonNull final Context context,
+            @NonNull final Class cls,
+            final int widgetId) {
+        final Intent intent = new Intent(context, cls);
         intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);
 
         // support widgetId being sent to correct Widget instance!
-        intent.setData(Uri.fromParts("content", String.valueOf(IntentFactoryHelper.SECURE_RANDOM.nextInt()), null));
+        intent.setData(Uri.fromParts("content", String.valueOf(SECURE_RANDOM.nextInt()), null));
 
         return intent;
     }
 
     @NonNull
     public static Intent createIntentAction(
-            @NonNull Context context,
-            int widgetId,
-            @NonNull String action) {
-        Intent intent = new Intent(context, QuoteUnquoteWidget.class);
+            @NonNull final Context context,
+            final int widgetId,
+            @NonNull final String action) {
+        final Intent intent = new Intent(context, QuoteUnquoteWidget.class);
         intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);
         intent.setAction(action);
         return intent;
     }
 
     @NonNull
-    public static Intent createIntentActionView(@NonNull final String url) {
-        Intent intent = new Intent();
+    public static Intent createIntentActionView(@NonNull String url) {
+        final Intent intent = new Intent();
         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
 
         intent.setAction(Intent.ACTION_VIEW);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
index ab6f4e7..b7de28e 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
@@ -16,32 +16,32 @@ import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 public class NotificationHelper {
     private int notificationId;
 
-    public void displayNotification(@Nullable final Context context, @Nullable final QuotationEntity quotationEntity) {
+    public void displayNotification(@Nullable Context context, @Nullable QuotationEntity quotationEntity) {
         if (quotationEntity != null) {
-            final CharSequence author = this.restrictAuthorSize(quotationEntity.author);
+            CharSequence author = restrictAuthorSize(quotationEntity.author);
 
-            final NotificationCompat.Builder builder = new NotificationCompat.Builder(
-                    context, this.createNotificationChannel(context))
+            NotificationCompat.Builder builder = new NotificationCompat.Builder(
+                    context, createNotificationChannel(context))
                     .setSmallIcon(com.github.jameshnsears.quoteunquote.R.drawable.ic_notification_icon)
                     .setContentTitle(author)
-                    .setStyle(new NotificationCompat.BigTextStyle().bigText(this.restrictQuotationSize(quotationEntity.quotation)))
+                    .setStyle(new NotificationCompat.BigTextStyle().bigText(restrictQuotationSize(quotationEntity.quotation)))
                     .setPriority(NotificationCompat.PRIORITY_HIGH);
 
-            final NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
+            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
 
-            this.notificationId += 1;
-            notificationManager.notify(this.notificationId, builder.build());
+            notificationId += 1;
+            notificationManager.notify(notificationId, builder.build());
         }
     }
 
     @NonNull
-    public String restrictAuthorSize(@NonNull final String author) {
+    public String restrictAuthorSize(@NonNull String author) {
         final int notificationTitleMaxSize = 20;
 
         String reducedAuthor = "";
         int cumlativeWordLength = 0;
 
-        for (final String word : author.split(" ")) {
+        for (String word : author.split(" ")) {
             cumlativeWordLength += word.length();
             if (cumlativeWordLength < notificationTitleMaxSize) {
                 reducedAuthor += word + " ";
@@ -55,13 +55,13 @@ public class NotificationHelper {
     }
 
     @NonNull
-    public CharSequence restrictQuotationSize(@NonNull final String quotation) {
+    public CharSequence restrictQuotationSize(@NonNull String quotation) {
         final int notificationBodyMaxSize = 150;
 
         String reducedQuotation = "";
         int cumlativeWordLength = 0;
 
-        for (final String word : quotation.split(" ")) {
+        for (String word : quotation.split(" ")) {
             cumlativeWordLength += word.length();
             if (cumlativeWordLength < notificationBodyMaxSize) {
                 reducedQuotation += word + " ";
@@ -75,11 +75,11 @@ public class NotificationHelper {
     }
 
     @Nullable
-    private String createNotificationChannel(@NonNull final Context context) {
+    private String createNotificationChannel(@NonNull Context context) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            final String notificationChannelId = context.getString(com.github.jameshnsears.quoteunquote.R.string.notification_channel_id);
+            String notificationChannelId = context.getString(com.github.jameshnsears.quoteunquote.R.string.notification_channel_id);
 
-            final NotificationChannel notificationChannel = new NotificationChannel(
+            NotificationChannel notificationChannel = new NotificationChannel(
                     notificationChannelId,
                     context.getText(com.github.jameshnsears.quoteunquote.R.string.notification_channel_name),
                     NotificationManager.IMPORTANCE_HIGH);
@@ -87,7 +87,7 @@ public class NotificationHelper {
             notificationChannel.setDescription(context.getString(R.string.notification_channel_description));
             notificationChannel.enableVibration(true);
 
-            final NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+            NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
             notificationManager.createNotificationChannel(notificationChannel);
 
             return notificationChannelId;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java
index 869a772..47fcb87 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesFacade.java
@@ -10,19 +10,30 @@ import java.util.Locale;
 public class PreferencesFacade {
     @NonNull
     public static final String PREFERENCES_FILENAME = "QuoteUnquote";
-    @NonNull
-    protected final Context applicationContext;
+
     @Nullable
-    protected final PreferenceHelper preferenceHelper;
+    public PreferenceHelper preferenceHelper;
+
+    @NonNull
+    protected Context applicationContext;
+
     protected int widgetId;
 
-    public PreferencesFacade(int theWidgetId, @NonNull Context applicationContext) {
-        widgetId = theWidgetId;
+    public PreferencesFacade(@NonNull Context applicationContext) {
+        init(applicationContext);
+    }
+
+    private void init(@NonNull Context applicationContext) {
         this.applicationContext = applicationContext;
         preferenceHelper = new PreferenceHelper(PreferencesFacade.PREFERENCES_FILENAME, applicationContext);
     }
 
-    public static void disable(@NonNull Context context) {
+    public PreferencesFacade(int theWidgetId, @NonNull Context applicationContext) {
+        widgetId = theWidgetId;
+        init(applicationContext);
+    }
+
+    public static void erase(@NonNull Context context) {
         PreferenceHelper.empty(PreferencesFacade.PREFERENCES_FILENAME, context);
     }
 
@@ -35,12 +46,12 @@ public class PreferencesFacade {
     }
 
     @NonNull
-    protected String getPreferenceKey(@NonNull String key) {
+    public String getPreferenceKey(@NonNull String key) {
         return String.format(Locale.ENGLISH, "%d:%s", this.widgetId, key);
     }
 
     @NonNull
-    public String getFavouritesLocalCode() {
+    public String getLocalCode() {
         return "0:CONTENT_FAVOURITES_LOCAL_CODE";
     }
 }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesMigration.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesMigration.java
deleted file mode 100644
index 834776e..0000000
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/preference/PreferencesMigration.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.github.jameshnsears.quoteunquote.utils.preference;
-
-import android.content.Context;
-
-import androidx.annotation.NonNull;
-
-public class PreferencesMigration extends PreferencesFacade {
-    @NonNull
-    public static final String PREFERENCES_FILENAME = "QuoteUnquote-Preferences";
-
-    public PreferencesMigration(
-            int widgetId,
-            @NonNull Context applicationContext) {
-        super(widgetId, applicationContext);
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveDouble.kt
deleted file mode 100644
index 48cf1be..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveDouble.kt
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud
-
-import android.content.Context
-import android.os.Handler
-import com.github.jameshnsears.quoteunquote.database.DatabaseRepository
-import io.mockk.every
-import io.mockk.mockk
-
-class CloudServiceReceiveDouble : CloudServiceReceive() {
-    override fun getCloudFavourites(): CloudFavourites {
-        val cloudFavourites = mockk<CloudFavourites>()
-        every { cloudFavourites.isInternetAvailable } returns true
-
-        val receiveResponse = ReceiveResponse()
-        receiveResponse.digests = listOf("d1", "d2")
-        every { cloudFavourites.receive(any(), any()) } returns receiveResponse
-
-        return cloudFavourites
-    }
-
-    override fun getHandler(): Handler {
-        val handler = mockk<Handler>()
-        every { handler.post(any()) } returns true
-        return handler
-    }
-
-    override fun getDatabaseRepository(context: Context): DatabaseRepository {
-        val databaseRepository = mockk<DatabaseRepository>()
-        every { databaseRepository.markAsFavourite(any()) } returns Unit
-        return databaseRepository
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveTest.kt
deleted file mode 100644
index e356a33..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceiveTest.kt
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud
-
-import android.content.Context
-import android.content.Intent
-import android.os.Build
-import androidx.test.core.app.ApplicationProvider.getApplicationContext
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentCloud
-import com.github.jameshnsears.quoteunquote.configure.fragment.content.ContentFragment
-import io.mockk.every
-import io.mockk.mockk
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.robolectric.Robolectric
-import org.robolectric.annotation.Config
-
-@RunWith(AndroidJUnit4::class)
-@Config(sdk = [Build.VERSION_CODES.P])
-class CloudServiceReceiveTest {
-    @Test
-    fun startService() {
-        val intent = Intent(getApplicationContext(), CloudServiceReceiveDouble::class.java)
-
-        val service = Robolectric.setupService(CloudServiceReceiveDouble::class.java)
-        val contentCloud = ContentCloud()
-        service.bindService(intent, contentCloud.serviceConnection, Context.BIND_AUTO_CREATE)
-
-        val contentFragment = mockk<ContentFragment>()
-        every { contentFragment.setFavouriteCount() } returns Unit
-
-        service.receive(contentFragment, "0123456789")
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendDouble.kt
deleted file mode 100644
index f04b623..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendDouble.kt
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud
-
-import android.content.Context
-import android.content.Intent
-import android.os.Binder
-import android.os.IBinder
-import io.mockk.every
-import io.mockk.spyk
-
-class CloudServiceSendDouble : CloudServiceSend() {
-    override fun getCloudFavourites(): CloudFavourites {
-        val cloudFavourites = spyk(CloudFavourites())
-        every { cloudFavourites.save(any()) } returns true
-        return cloudFavourites
-    }
-
-    inner class LocalBinderDouble : Binder() {
-        fun getService() = this@CloudServiceSendDouble
-    }
-
-    override fun onBind(intent: Intent): IBinder {
-        return LocalBinderDouble()
-    }
-
-    override fun getServiceContext(): Context? {
-        return this@CloudServiceSendDouble.applicationContext
-    }
-
-    override fun auditSend(intent: Intent) {
-        // ...
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendTest.kt
deleted file mode 100644
index 8bd1d97..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceSendTest.kt
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.github.jameshnsears.quoteunquote.cloud
-
-import android.content.Intent
-import android.os.Build
-import android.os.Handler
-import androidx.test.core.app.ApplicationProvider.getApplicationContext
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.github.jameshnsears.quoteunquote.utils.logging.ShadowLoggingHelper
-import junit.framework.TestCase.assertTrue
-import org.junit.Assert.assertFalse
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.robolectric.Robolectric
-import org.robolectric.annotation.Config
-
-@RunWith(AndroidJUnit4::class)
-@Config(sdk = [Build.VERSION_CODES.P])
-class CloudServiceSendTest : ShadowLoggingHelper() {
-    @Test
-    fun startService() {
-        assertFalse(CloudServiceSend.isRunning)
-
-        val cloudServiceSendIntent = Intent(getApplicationContext(), CloudServiceSendDouble::class.java)
-        cloudServiceSendIntent.putExtra("savePayload", "{\"code\":\"bc5yX41a20\",\"digests\":[]}")
-        cloudServiceSendIntent.putExtra("localCodeValue", "0123456789")
-
-        val cloudServiceSend = Robolectric.buildService(CloudServiceSendDouble::class.java).get()
-
-        cloudServiceSend.onStartCommand(cloudServiceSendIntent, 0, 0)
-        assertTrue(CloudServiceSend.isRunning)
-
-        Thread.sleep(250)
-        assertFalse(CloudServiceSend.isRunning)
-
-        cloudServiceSend.onDestroy()
-    }
-
-    @Test
-    fun noNetwork() {
-        CloudServiceHelper.showNoNetworkToast(getApplicationContext(), Handler())
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt
index fe7d5eb..660d8db 100644
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/appearance/AppearanceFragmentPreferencesTest.kt
@@ -109,7 +109,7 @@ class AppearanceFragmentPreferencesTest : ShadowLoggingHelper() {
                 fragment.setTransparency()
                 assertEquals(5, fragment.appearancePreferences?.appearanceTransparency)
 
-                AppearancePreferences.disable(getApplicationContext())
+                AppearancePreferences.erase(getApplicationContext())
                 assertEquals(-1, fragment.appearancePreferences?.appearanceTransparency)
             }
         }
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentTest.kt
deleted file mode 100644
index 0fe7b9f..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentTest.kt
+++ /dev/null
@@ -1,124 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content
-
-import android.os.Build
-import android.os.Bundle
-import androidx.fragment.app.Fragment
-import androidx.fragment.app.FragmentFactory
-import androidx.fragment.app.testing.FragmentScenario
-import androidx.fragment.app.testing.launchFragmentInContainer
-import androidx.lifecycle.Lifecycle
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.github.jameshnsears.quoteunquote.BuildConfig
-import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel
-import com.github.jameshnsears.quoteunquote.R
-import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO
-import com.github.jameshnsears.quoteunquote.utils.ContentSelection
-import com.github.jameshnsears.quoteunquote.utils.logging.ShadowLoggingHelper
-import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
-import io.mockk.every
-import io.mockk.mockk
-import io.reactivex.Single
-import org.junit.Assert.assertEquals
-import org.junit.Assert.assertFalse
-import org.junit.Assert.assertTrue
-import org.junit.Before
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.robolectric.annotation.Config
-
-@RunWith(AndroidJUnit4::class)
-@Config(sdk = [Build.VERSION_CODES.P])
-class ContentFragmentTest : ShadowLoggingHelper() {
-    class ContentFragmentDouble : ContentFragment(WidgetIdHelper.WIDGET_ID_01) {
-        override fun onCreate(savedInstanceState: Bundle?) {
-            super.onCreate(savedInstanceState)
-
-            val quoteUnquoteModel = mockk<QuoteUnquoteModel>()
-            every { quoteUnquoteModel.countAll() } returns Single.just(7)
-
-            val authors = listOf(AuthorPOJO("a1"))
-            every { quoteUnquoteModel.authors() } returns Single.just(authors)
-            every { quoteUnquoteModel.authorsSorted(authors) } returns listOf("x", "a", "y")
-
-            every { quoteUnquoteModel.authorsIndex(any()) } returns 0
-            every { quoteUnquoteModel.countAuthorQuotations(any()) } returns 1
-            every { quoteUnquoteModel.countFavourites() } returns Single.just(0)
-
-            this.quoteUnquoteModel = quoteUnquoteModel
-        }
-    }
-
-    private lateinit var scenario: FragmentScenario<ContentFragment>
-
-    @Before
-    fun before() {
-        scenario = launchFragmentInContainer(
-            Bundle(),
-            R.style.FragmentScenarioEmptyFragmentActivityTheme,
-            Lifecycle.State.RESUMED,
-            object :
-                FragmentFactory() {
-                override fun instantiate(
-                    classLoader: ClassLoader,
-                    className: String
-                ): Fragment {
-                    return ContentFragmentDouble()
-                }
-            }
-        )
-    }
-
-    @Test
-    fun confirmInitialContentSelections() {
-        scenario.onFragment { fragment ->
-            assertTrue(fragment.contentPreferences?.contentSelection == ContentSelection.ALL)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.AUTHOR)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.FAVOURITES)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.SEARCH)
-
-            if (BuildConfig.DEBUG) {
-                assertEquals("All: 7", fragment.fragmentContentBinding?.radioButtonAll?.text.toString())
-                assertEquals("Author: 1", fragment.fragmentContentBinding?.radioButtonAuthor?.text.toString())
-                assertEquals("Favourites: 0", fragment.fragmentContentBinding?.radioButtonFavourites?.text.toString())
-            }
-
-            assertEquals("", fragment.fragmentContentBinding?.editTextSearchText?.text.toString())
-
-            fragment.shutdown()
-        }
-    }
-
-    @Test
-    fun changeContentSelection() {
-        scenario.onFragment { fragment ->
-            // default content selection
-            assertTrue(fragment.contentPreferences?.contentSelection == ContentSelection.ALL)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.AUTHOR)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.FAVOURITES)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.SEARCH)
-
-            fragment.contentPreferences?.contentSelection = ContentSelection.AUTHOR
-            fragment.setSelection()
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.ALL)
-            assertTrue(fragment.contentPreferences?.contentSelection == ContentSelection.AUTHOR)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.FAVOURITES)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.SEARCH)
-
-            fragment.contentPreferences?.contentSelection = ContentSelection.FAVOURITES
-            fragment.setSelection()
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.ALL)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.AUTHOR)
-            assertTrue(fragment.contentPreferences?.contentSelection == ContentSelection.FAVOURITES)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.SEARCH)
-
-            fragment.contentPreferences?.contentSelection = ContentSelection.SEARCH
-            fragment.setSelection()
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.ALL)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.AUTHOR)
-            assertFalse(fragment.contentPreferences?.contentSelection == ContentSelection.FAVOURITES)
-            assertTrue(fragment.contentPreferences?.contentSelection == ContentSelection.SEARCH)
-
-            fragment.shutdown()
-        }
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentPreferencesTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentPreferencesTest.kt
deleted file mode 100644
index f93a46e..0000000
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentPreferencesTest.kt
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event
-
-import android.os.Build
-import androidx.fragment.app.testing.launchFragment
-import androidx.test.ext.junit.runners.AndroidJUnit4
-import com.github.jameshnsears.quoteunquote.utils.logging.ShadowLoggingHelper
-import junit.framework.TestCase.assertTrue
-import org.hamcrest.MatcherAssert.assertThat
-import org.hamcrest.core.IsEqual
-import org.junit.Test
-import org.junit.runner.RunWith
-import org.robolectric.annotation.Config
-
-@RunWith(AndroidJUnit4::class)
-@Config(sdk = [Build.VERSION_CODES.P])
-class EventFragmentPreferencesTest : ShadowLoggingHelper() {
-    @Test
-    fun confirmInitialPreferences() {
-        with(launchFragment<EventFragmentDouble>()) {
-            onFragment { fragment ->
-                assertTrue(fragment.eventPreferences?.eventNextRandom == true)
-                assertTrue(fragment.eventPreferences?.eventNextSequential == false)
-                assertTrue(fragment.eventPreferences?.eventDisplayWidget == true)
-                assertTrue(fragment.eventPreferences?.eventDisplayWidgetAndNotification == false)
-
-                assertTrue(fragment.eventPreferences?.eventDeviceUnlock == false)
-
-                assertTrue(fragment.eventPreferences?.eventDaily == false)
-                assertThat(fragment.eventPreferences?.eventDailyTimeHour, IsEqual.equalTo(6))
-                assertThat(fragment.eventPreferences?.eventDailyTimeMinute, IsEqual.equalTo(0))
-            }
-        }
-    }
-
-    @Test
-    fun confirmChangesToPreferences() {
-        with(launchFragment<EventFragmentDouble>()) {
-            onFragment { fragment ->
-                assertThat(fragment.eventPreferences?.eventDailyTimeHour, IsEqual.equalTo(6))
-                assertThat(fragment.eventPreferences?.eventDailyTimeMinute, IsEqual.equalTo(0))
-
-                fragment.setDailyTime()
-                fragment.eventPreferences?.eventDaily = true
-                fragment.eventPreferences?.eventDailyTimeHour = 7
-                fragment.eventPreferences?.eventDailyTimeMinute = 30
-
-                assertThat(fragment.eventPreferences?.eventDailyTimeHour, IsEqual.equalTo(7))
-                assertThat(fragment.eventPreferences?.eventDailyTimeMinute, IsEqual.equalTo(30))
-            }
-        }
-    }
-}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentAuthorTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt
similarity index 71%
rename from app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentAuthorTest.kt
rename to app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt
index f2c18cd..1cfffec 100644
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragmentAuthorTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentAuthorTest.kt
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.content
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
 
 import android.os.Build
 import android.os.Bundle
@@ -17,8 +17,8 @@ import org.robolectric.annotation.Config
 
 @RunWith(AndroidJUnit4::class)
 @Config(sdk = [Build.VERSION_CODES.P])
-class ContentFragmentAuthorTest {
-    private lateinit var scenario: FragmentScenario<ContentFragment>
+class QuotationsFragmentAuthorTest {
+    private lateinit var scenario: FragmentScenario<QuotationsFragment>
 
     @Before
     fun before() {
@@ -32,7 +32,7 @@ class ContentFragmentAuthorTest {
                     classLoader: ClassLoader,
                     className: String
                 ): Fragment {
-                    return ContentFragmentTest.ContentFragmentDouble()
+                    return QuotationsFragmentTest.QuotationsFragmentDouble()
                 }
             }
         )
@@ -41,15 +41,15 @@ class ContentFragmentAuthorTest {
     @Test
     fun setAuthor() {
         scenario.onFragment { fragment ->
-            assertEquals("x", fragment.contentPreferences?.contentSelectionAuthor)
-            fragment.fragmentContentBinding?.spinnerAuthors?.setSelection(1)
-            assertEquals("a", fragment.contentPreferences?.contentSelectionAuthor)
+            assertEquals("x", fragment.quotationsPreferences?.contentSelectionAuthor)
+            fragment.fragmentQuotationsBinding?.spinnerAuthors?.setSelection(1)
+            assertEquals("a", fragment.quotationsPreferences?.contentSelectionAuthor)
             fragment.shutdown()
         }
 
         // visit settings page again
         scenario.onFragment { fragment ->
-            assertEquals("a", fragment.fragmentContentBinding?.spinnerAuthors?.selectedItem)
+            assertEquals("a", fragment.fragmentQuotationsBinding?.spinnerAuthors?.selectedItem)
             fragment.shutdown()
         }
     }
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt
new file mode 100644
index 0000000..92e8da2
--- /dev/null
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/quotations/QuotationsFragmentTest.kt
@@ -0,0 +1,124 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.quotations
+
+import android.os.Build
+import android.os.Bundle
+import androidx.fragment.app.Fragment
+import androidx.fragment.app.FragmentFactory
+import androidx.fragment.app.testing.FragmentScenario
+import androidx.fragment.app.testing.launchFragmentInContainer
+import androidx.lifecycle.Lifecycle
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.github.jameshnsears.quoteunquote.BuildConfig
+import com.github.jameshnsears.quoteunquote.QuoteUnquoteModel
+import com.github.jameshnsears.quoteunquote.R
+import com.github.jameshnsears.quoteunquote.database.quotation.AuthorPOJO
+import com.github.jameshnsears.quoteunquote.utils.ContentSelection
+import com.github.jameshnsears.quoteunquote.utils.logging.ShadowLoggingHelper
+import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
+import io.mockk.every
+import io.mockk.mockk
+import io.reactivex.Single
+import org.junit.Assert.assertEquals
+import org.junit.Assert.assertFalse
+import org.junit.Assert.assertTrue
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.annotation.Config
+
+@RunWith(AndroidJUnit4::class)
+@Config(sdk = [Build.VERSION_CODES.P])
+class QuotationsFragmentTest : ShadowLoggingHelper() {
+    class QuotationsFragmentDouble : QuotationsFragment(WidgetIdHelper.WIDGET_ID_01) {
+        override fun onCreate(savedInstanceState: Bundle?) {
+            super.onCreate(savedInstanceState)
+
+            val quoteUnquoteModel = mockk<QuoteUnquoteModel>()
+            every { quoteUnquoteModel.countAll() } returns Single.just(7)
+
+            val authors = listOf(AuthorPOJO("a1"))
+            every { quoteUnquoteModel.authors() } returns Single.just(authors)
+            every { quoteUnquoteModel.authorsSorted(authors) } returns listOf("x", "a", "y")
+
+            every { quoteUnquoteModel.authorsIndex(any()) } returns 0
+            every { quoteUnquoteModel.countAuthorQuotations(any()) } returns 1
+            every { quoteUnquoteModel.countFavourites() } returns Single.just(0)
+
+            this.quoteUnquoteModel = quoteUnquoteModel
+        }
+    }
+
+    private lateinit var scenario: FragmentScenario<QuotationsFragment>
+
+    @Before
+    fun before() {
+        scenario = launchFragmentInContainer(
+            Bundle(),
+            R.style.FragmentScenarioEmptyFragmentActivityTheme,
+            Lifecycle.State.RESUMED,
+            object :
+                FragmentFactory() {
+                override fun instantiate(
+                    classLoader: ClassLoader,
+                    className: String
+                ): Fragment {
+                    return QuotationsFragmentDouble()
+                }
+            }
+        )
+    }
+
+    @Test
+    fun confirmInitialContentSelections() {
+        scenario.onFragment { fragment ->
+            assertTrue(fragment.quotationsPreferences?.contentSelection == ContentSelection.ALL)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.AUTHOR)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.FAVOURITES)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.SEARCH)
+
+            if (BuildConfig.DEBUG) {
+                assertEquals("All: 7", fragment.fragmentQuotationsBinding?.radioButtonAll?.text.toString())
+                assertEquals("Author: 1", fragment.fragmentQuotationsBinding?.radioButtonAuthor?.text.toString())
+                assertEquals("Favourites: 0", fragment.fragmentQuotationsBinding?.radioButtonFavourites?.text.toString())
+            }
+
+            assertEquals("", fragment.fragmentQuotationsBinding?.editTextSearchText?.text.toString())
+
+            fragment.shutdown()
+        }
+    }
+
+    @Test
+    fun changeContentSelection() {
+        scenario.onFragment { fragment ->
+            // default content selection
+            assertTrue(fragment.quotationsPreferences?.contentSelection == ContentSelection.ALL)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.AUTHOR)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.FAVOURITES)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.SEARCH)
+
+            fragment.quotationsPreferences?.contentSelection = ContentSelection.AUTHOR
+            fragment.setSelection()
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.ALL)
+            assertTrue(fragment.quotationsPreferences?.contentSelection == ContentSelection.AUTHOR)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.FAVOURITES)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.SEARCH)
+
+            fragment.quotationsPreferences?.contentSelection = ContentSelection.FAVOURITES
+            fragment.setSelection()
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.ALL)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.AUTHOR)
+            assertTrue(fragment.quotationsPreferences?.contentSelection == ContentSelection.FAVOURITES)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.SEARCH)
+
+            fragment.quotationsPreferences?.contentSelection = ContentSelection.SEARCH
+            fragment.setSelection()
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.ALL)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.AUTHOR)
+            assertFalse(fragment.quotationsPreferences?.contentSelection == ContentSelection.FAVOURITES)
+            assertTrue(fragment.quotationsPreferences?.contentSelection == ContentSelection.SEARCH)
+
+            fragment.shutdown()
+        }
+    }
+}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentDouble.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentDouble.kt
similarity index 61%
rename from app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentDouble.kt
rename to app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentDouble.kt
index fba57eb..d132e3f 100644
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentDouble.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentDouble.kt
@@ -1,5 +1,5 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule
 
 import com.github.jameshnsears.quoteunquote.utils.widget.WidgetIdHelper
 
-class EventFragmentDouble : EventFragment(WidgetIdHelper.WIDGET_ID_01)
+class ScheduleFragmentDouble : ScheduleFragment(WidgetIdHelper.WIDGET_ID_01)
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentPreferencesTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentPreferencesTest.kt
new file mode 100644
index 0000000..0a185d4
--- /dev/null
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentPreferencesTest.kt
@@ -0,0 +1,52 @@
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule
+
+import android.os.Build
+import androidx.fragment.app.testing.launchFragment
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.github.jameshnsears.quoteunquote.utils.logging.ShadowLoggingHelper
+import junit.framework.TestCase.assertTrue
+import org.hamcrest.MatcherAssert.assertThat
+import org.hamcrest.core.IsEqual
+import org.junit.Test
+import org.junit.runner.RunWith
+import org.robolectric.annotation.Config
+
+@RunWith(AndroidJUnit4::class)
+@Config(sdk = [Build.VERSION_CODES.P])
+class ScheduleFragmentPreferencesTest : ShadowLoggingHelper() {
+    @Test
+    fun confirmInitialPreferences() {
+        with(launchFragment<ScheduleFragmentDouble>()) {
+            onFragment { fragment ->
+                assertTrue(fragment.schedulePreferences?.eventNextRandom == true)
+                assertTrue(fragment.schedulePreferences?.eventNextSequential == false)
+                assertTrue(fragment.schedulePreferences?.eventDisplayWidget == true)
+                assertTrue(fragment.schedulePreferences?.eventDisplayWidgetAndNotification == false)
+
+                assertTrue(fragment.schedulePreferences?.eventDeviceUnlock == false)
+
+                assertTrue(fragment.schedulePreferences?.eventDaily == false)
+                assertThat(fragment.schedulePreferences?.eventDailyTimeHour, IsEqual.equalTo(6))
+                assertThat(fragment.schedulePreferences?.eventDailyTimeMinute, IsEqual.equalTo(0))
+            }
+        }
+    }
+
+    @Test
+    fun confirmChangesToPreferences() {
+        with(launchFragment<ScheduleFragmentDouble>()) {
+            onFragment { fragment ->
+                assertThat(fragment.schedulePreferences?.eventDailyTimeHour, IsEqual.equalTo(6))
+                assertThat(fragment.schedulePreferences?.eventDailyTimeMinute, IsEqual.equalTo(0))
+
+                fragment.setDailyTime()
+                fragment.schedulePreferences?.eventDaily = true
+                fragment.schedulePreferences?.eventDailyTimeHour = 7
+                fragment.schedulePreferences?.eventDailyTimeMinute = 30
+
+                assertThat(fragment.schedulePreferences?.eventDailyTimeHour, IsEqual.equalTo(7))
+                assertThat(fragment.schedulePreferences?.eventDailyTimeMinute, IsEqual.equalTo(30))
+            }
+        }
+    }
+}
diff --git a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentTest.kt b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentTest.kt
similarity index 80%
rename from app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentTest.kt
rename to app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentTest.kt
index 5377ae2..2565505 100644
--- a/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/event/EventFragmentTest.kt
+++ b/app/src/test/java/com/github/jameshnsears/quoteunquote/configure/fragment/schedule/ScheduleFragmentTest.kt
@@ -1,4 +1,4 @@
-package com.github.jameshnsears.quoteunquote.configure.fragment.event
+package com.github.jameshnsears.quoteunquote.configure.fragment.schedule
 
 import android.app.PendingIntent
 import android.content.Context
@@ -15,17 +15,25 @@ import org.robolectric.annotation.Config
 
 @RunWith(AndroidJUnit4::class)
 @Config(sdk = [Build.VERSION_CODES.P])
-class EventFragmentTest {
+class ScheduleFragmentTest {
     @Test
     fun setDailyAlarm() {
         val context: Context = getApplicationContext()
 
         assertFalse(isAlarmSet(context))
 
-        val eventPreferences = EventPreferences(WidgetIdHelper.WIDGET_ID_01, context)
+        val eventPreferences =
+            SchedulePreferences(
+                WidgetIdHelper.WIDGET_ID_01,
+                context
+            )
         eventPreferences.eventDaily = true
 
-        val eventDailyAlarm = EventDailyAlarm(context, WidgetIdHelper.WIDGET_ID_01)
+        val eventDailyAlarm =
+            ScheduleDailyAlarm(
+                context,
+                WidgetIdHelper.WIDGET_ID_01
+            )
         eventDailyAlarm.setDailyAlarm()
 
         assertTrue(isAlarmSet(context))
