diff --git a/app/src/main/java/com/amaze/filemanager/activities/TextEditorActivity.java b/app/src/main/java/com/amaze/filemanager/activities/TextEditorActivity.java
index 280847bb8..d8441894e 100644
--- a/app/src/main/java/com/amaze/filemanager/activities/TextEditorActivity.java
+++ b/app/src/main/java/com/amaze/filemanager/activities/TextEditorActivity.java
@@ -73,6 +73,7 @@ import com.amaze.filemanager.utils.PreferenceUtils;
 import com.amaze.filemanager.utils.RootUtils;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.readystatesoftware.systembartint.SystemBarTintManager;
@@ -551,7 +552,7 @@ public class TextEditorActivity extends ThemedActivity implements TextWatcher, V
             case R.id.openwith:
                 if (mFile.exists()) {
                     boolean useNewStack = sharedPref.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
-                    getFutils().openunknown(new File(mFile.getPath()), this, false, useNewStack);
+                    FileUtils.openunknown(new File(mFile.getPath()), this, false, useNewStack);
                 } else Toast.makeText(this, R.string.not_allowed, Toast.LENGTH_SHORT).show();
                 break;
             case R.id.find:
diff --git a/app/src/main/java/com/amaze/filemanager/activities/superclasses/BasicActivity.java b/app/src/main/java/com/amaze/filemanager/activities/superclasses/BasicActivity.java
index f0d1bb28b..23fe124bf 100644
--- a/app/src/main/java/com/amaze/filemanager/activities/superclasses/BasicActivity.java
+++ b/app/src/main/java/com/amaze/filemanager/activities/superclasses/BasicActivity.java
@@ -4,7 +4,6 @@ import android.support.v7.app.AppCompatActivity;
 
 import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.color.ColorPreference;
-import com.amaze.filemanager.utils.files.Futils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.amaze.filemanager.utils.theme.AppThemeManager;
@@ -26,14 +25,6 @@ public class BasicActivity extends AppCompatActivity implements UtilitiesProvide
         return (AppConfig) getApplication();
     }
 
-    @Override
-    public Futils getFutils() {
-        if (!initialized)
-            initialize();
-
-        return utilsProvider.getFutils();
-    }
-
     public ColorPreference getColorPreference() {
         if (!initialized)
             initialize();
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
index 093306114..266462e9b 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
@@ -53,7 +53,7 @@ import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.amaze.filemanager.utils.theme.AppTheme;
 
@@ -211,7 +211,6 @@ public class AppsAdapter extends ArrayAdapter<LayoutElement> {
         return view;
     }
     void showPopup(View v,final LayoutElement rowItem){
-        final Futils utils = utilsProvider.getFutils();
         v.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -233,7 +232,7 @@ public class AppsAdapter extends ArrayAdapter<LayoutElement> {
                                 ArrayList<File> arrayList2=new ArrayList<File>();
                                 arrayList2.add(new File(rowItem.getDesc()));
                                 themedActivity.getColorPreference();
-                                utils.shareFiles(arrayList2, app.getActivity(), utilsProvider.getAppTheme(), colorAccent);
+                                FileUtils.shareFiles(arrayList2, app.getActivity(), utilsProvider.getAppTheme(), colorAccent);
                                 return true;
                             case R.id.unins:
                                 final BaseFile f1 = new BaseFile(rowItem.getDesc());
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/HiddenAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/HiddenAdapter.java
index 9304536c4..278e052e6 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/HiddenAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/HiddenAdapter.java
@@ -20,7 +20,7 @@ import com.amaze.filemanager.filesystem.HFile;
 import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.asyncronious.asynctasks.DeleteTask;
 import com.amaze.filemanager.utils.DataUtils;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OpenMode;
 
 import java.io.File;
@@ -32,9 +32,7 @@ import java.util.ArrayList;
  */
 public class HiddenAdapter extends RecyclerArrayAdapter<HFile, HiddenAdapter.ViewHolder> {
 
-    private Futils utils;
     private SharedPreferences sharedPrefs;
-
     private MainFragment context;
     private Context c;
     public ArrayList<HFile> items;
@@ -43,11 +41,10 @@ public class HiddenAdapter extends RecyclerArrayAdapter<HFile, HiddenAdapter.Vie
     private DataUtils dataUtils = DataUtils.getInstance();
     ///	public HashMap<Integer, Boolean> myChecked = new HashMap<Integer, Boolean>();
 
-    public HiddenAdapter(Context context, MainFragment mainFrag, Futils utils, SharedPreferences sharedPreferences,
+    public HiddenAdapter(Context context, MainFragment mainFrag, SharedPreferences sharedPreferences,
                          @LayoutRes int layoutId, ArrayList<HFile> items, MaterialDialog materialDialog,
                          boolean hide) {
         addAll(items);
-        this.utils = utils;
         this.c = context;
         this.context = mainFrag;
         sharedPrefs = sharedPreferences;
@@ -128,7 +125,7 @@ public class HiddenAdapter extends RecyclerArrayAdapter<HFile, HiddenAdapter.Vie
                                     context.getActivity().runOnUiThread(new Runnable() {
                                         @Override
                                         public void run() {
-                                            utils.openFile(new File(file.getPath()), (MainActivity) context.getActivity(), sharedPrefs);
+                                            FileUtils.openFile(new File(file.getPath()), (MainActivity) context.getActivity(), sharedPrefs);
                                         }
                                     });
                                 }
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/CountItemsOrAndSizeTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/CountItemsOrAndSizeTask.java
index 6883b4c8a..12bca2efb 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/CountItemsOrAndSizeTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/CountItemsOrAndSizeTask.java
@@ -8,7 +8,7 @@ import android.widget.TextView;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.BaseFile;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OnProgressUpdate;
 
 /**
@@ -42,7 +42,7 @@ public class CountItemsOrAndSizeTask extends AsyncTask<Void, Pair<Integer, Long>
             if(isStorage) {
                 folderSize = file.getUsableSpace();
             } else {
-                folderSize = Futils.folderSize(file, new OnProgressUpdate<Long>() {
+                folderSize = FileUtils.folderSize(file, new OnProgressUpdate<Long>() {
                     @Override
                     public void onUpdate(Long data) {
                         publishProgress(new Pair<>(x, data));
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/DeleteTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/DeleteTask.java
index bc87b7e7e..ea2741ddf 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/DeleteTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/DeleteTask.java
@@ -38,7 +38,7 @@ import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.OTGUtil;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
 import com.amaze.filemanager.utils.files.CryptUtil;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OpenMode;
 import com.cloudrail.si.interfaces.CloudStorage;
 
@@ -143,7 +143,7 @@ public class DeleteTask extends AsyncTask<ArrayList<BaseFile>, String, Boolean>
                 }
             } catch (Exception e) {
                 for (BaseFile f : files) {
-                    Futils.scanFile(f.getPath(), cd);
+                    FileUtils.scanFile(f.getPath(), cd);
                 }
             }
         }
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/GenerateHashesTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/GenerateHashesTask.java
index 7d96a65ac..7b41e06de 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/GenerateHashesTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/GenerateHashesTask.java
@@ -9,7 +9,7 @@ import android.widget.Toast;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.BaseFile;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
 
 import java.io.IOException;
@@ -69,7 +69,7 @@ public class GenerateHashesTask extends AsyncTask<Void, String, String[]> {
                 @Override
                 public boolean onLongClick(View v) {
 
-                    Futils.copyToClipboard(context, hashes[0]);
+                    FileUtils.copyToClipboard(context, hashes[0]);
                     Toast.makeText(context, context.getResources().getString(R.string.md5).toUpperCase() + " " +
                             context.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
@@ -79,7 +79,7 @@ public class GenerateHashesTask extends AsyncTask<Void, String, String[]> {
                 @Override
                 public boolean onLongClick(View v) {
 
-                    Futils.copyToClipboard(context, hashes[1]);
+                    FileUtils.copyToClipboard(context, hashes[1]);
                     Toast.makeText(context, context.getResources().getString(R.string.hash_sha256) + " " +
                             context.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFilesListTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFilesListTask.java
index d739042ae..4d5bb327a 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFilesListTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFilesListTask.java
@@ -48,6 +48,7 @@ import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.files.FileListSorter;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.cloudrail.si.interfaces.CloudStorage;
 
@@ -269,9 +270,8 @@ public class LoadFilesListTask extends AsyncTask<String, String, ArrayList<Layou
                     Bitmap lockBitmap = BitmapFactory.decodeResource(ma.getResources(), R.drawable.ic_folder_lock_white_36dp);
                     BitmapDrawable lockBitmapDrawable = new BitmapDrawable(ma.getResources(), lockBitmap);
 
-                    LayoutElement layoutElement = utilsProvider.getFutils()
-                            .newElement(baseFile.getName().endsWith(CryptUtil.CRYPT_EXTENSION) ? lockBitmapDrawable
-                                            : ma.folder,
+                    LayoutElement layoutElement = FileUtils.newElement(
+                            baseFile.getName().endsWith(CryptUtil.CRYPT_EXTENSION) ? lockBitmapDrawable:ma.folder,
                                     baseFile.getPath(), baseFile.getPermission(), baseFile.getLink(), size, 0, true, false,
                                     baseFile.getDate() + "");
                     layoutElement.setMode(baseFile.getMode());
@@ -291,7 +291,7 @@ public class LoadFilesListTask extends AsyncTask<String, String, ArrayList<Layou
                         //e.printStackTrace();
                     }
                     try {
-                        LayoutElement layoutElement = utilsProvider.getFutils().newElement(Icons.loadMimeIcon(
+                        LayoutElement layoutElement = FileUtils.newElement(Icons.loadMimeIcon(
                                 baseFile.getPath(), !ma.IS_LIST, ma.getResources()), baseFile.getPath(), baseFile.getPermission(),
                                 baseFile.getLink(), size, longSize, false, false, baseFile.getDate() + "");
                         layoutElement.setMode(baseFile.getMode());
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFolderSpaceDataTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFolderSpaceDataTask.java
index c4ba96b6b..d9b3bfe53 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFolderSpaceDataTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/LoadFolderSpaceDataTask.java
@@ -12,7 +12,7 @@ import com.afollestad.materialdialogs.Theme;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OnProgressUpdate;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.github.mikephil.charting.charts.PieChart;
@@ -26,7 +26,7 @@ import java.util.List;
 import static com.amaze.filemanager.utils.Utils.getColor;
 
 /**
- * Loads data for chart in Futils.showPropertiesDialog()
+ * Loads data for chart in FileUtils.showPropertiesDialog()
  *
  * @author Emmanuel Messulam<emmanuelbendavid@gmail.com>
  *         on 12/5/2017, at 00:07.
@@ -54,7 +54,7 @@ public class LoadFolderSpaceDataTask extends AsyncTask<Void, Long, Pair<String,
 
     @Override
     protected Pair<String, List<PieEntry>> doInBackground(Void... params) {
-        long[] dataArray = Futils.getSpaces(file, context, new OnProgressUpdate<Long[]>() {
+        long[] dataArray = FileUtils.getSpaces(file, context, new OnProgressUpdate<Long[]>() {
             @Override
             public void onUpdate(Long[] data) {
                 publishProgress(data);
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/MoveFiles.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/MoveFiles.java
index e0959e05a..faaabdc7d 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/MoveFiles.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/MoveFiles.java
@@ -34,7 +34,7 @@ import com.amaze.filemanager.asyncronious.services.CopyService;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
 import com.amaze.filemanager.utils.files.CryptUtil;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.RootUtils;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
@@ -156,8 +156,8 @@ public class MoveFiles extends AsyncTask<ArrayList<String>, Void, Boolean> {
 
             for (int i = 0; i < paths.size(); i++) {
                 for (BaseFile f : files.get(i)) {
-                    Futils.scanFile(f.getPath(), context);
-                    Futils.scanFile(paths.get(i) + "/" + f.getName(), context);
+                    FileUtils.scanFile(f.getPath(), context);
+                    FileUtils.scanFile(paths.get(i) + "/" + f.getName(), context);
                 }
             }
 
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/PrepareCopyTask.java b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/PrepareCopyTask.java
index b6232f8f3..3a7f82409 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/PrepareCopyTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/asynctasks/PrepareCopyTask.java
@@ -24,7 +24,7 @@ import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -96,7 +96,7 @@ public class PrepareCopyTask extends AsyncTask<ArrayList<BaseFile>, String, Prep
             return null;
         }
 
-        totalBytes = Futils.getTotalBytes(filesToCopy, context);
+        totalBytes = FileUtils.getTotalBytes(filesToCopy, context);
 
         HFile destination = new HFile(openMode, path);
         if (destination.getUsableSpace() < totalBytes) {
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/services/CopyService.java b/app/src/main/java/com/amaze/filemanager/asyncronious/services/CopyService.java
index 04ee4eaee..9d94d0de1 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/services/CopyService.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/services/CopyService.java
@@ -50,7 +50,7 @@ import com.amaze.filemanager.filesystem.RootHelper;
 import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.DataPackage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ProgressHandler;
@@ -144,7 +144,7 @@ public class CopyService extends Service {
 
             // setting up service watchers and initial data packages
             // finding total size on background thread (this is necessary condition for SMB!)
-            totalSize = Futils.getTotalBytes(sourceFiles, c);
+            totalSize = FileUtils.getTotalBytes(sourceFiles, c);
             totalSourceFiles = sourceFiles.size();
             progressHandler = new ProgressHandler(totalSourceFiles, totalSize);
 
@@ -361,7 +361,7 @@ public class CopyService extends Service {
                     failedFOps.add(sourceFile);
                     e.printStackTrace();
                 }
-                Futils.scanFile(targetFile.getPath(), c);
+                FileUtils.scanFile(targetFile.getPath(), c);
             }
 
             private void copyFiles(final BaseFile sourceFile, final HFile targetFile,
diff --git a/app/src/main/java/com/amaze/filemanager/asyncronious/services/ZipService.java b/app/src/main/java/com/amaze/filemanager/asyncronious/services/ZipService.java
index 10bee39e7..517891ae2 100644
--- a/app/src/main/java/com/amaze/filemanager/asyncronious/services/ZipService.java
+++ b/app/src/main/java/com/amaze/filemanager/asyncronious/services/ZipService.java
@@ -40,7 +40,7 @@ import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.DataPackage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
 import com.amaze.filemanager.utils.PreferenceUtils;
 import com.amaze.filemanager.utils.ProgressHandler;
@@ -159,7 +159,7 @@ public class ZipService extends Service {
 
             // setting up service watchers and initial data packages
             // finding total size on background thread (this is necessary condition for SMB!)
-            totalBytes = Futils.getTotalBytes(baseFiles, c);
+            totalBytes = FileUtils.getTotalBytes(baseFiles, c);
             progressHandler = new ProgressHandler(baseFiles.size(), totalBytes);
             progressHandler.setProgressListener(new ProgressHandler.ProgressListener() {
                 @Override
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/HFile.java b/app/src/main/java/com/amaze/filemanager/filesystem/HFile.java
index a1e369b44..ee75274e2 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/HFile.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/HFile.java
@@ -15,7 +15,7 @@ import com.amaze.filemanager.ui.LayoutElement;
 import com.amaze.filemanager.ui.icons.Icons;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.Logger;
 import com.amaze.filemanager.utils.OTGUtil;
 import com.amaze.filemanager.utils.OpenMode;
@@ -506,14 +506,14 @@ public class HFile {
         switch (mode) {
             case SMB:
                 try {
-                    size = Futils.folderSize(new SmbFile(path));
+                    size = FileUtils.folderSize(new SmbFile(path));
                 } catch (MalformedURLException e) {
                     size = 0L;
                     e.printStackTrace();
                 }
                 break;
             case FILE:
-                size = Futils.folderSize(new File(path), null);
+                size = FileUtils.folderSize(new File(path), null);
                 break;
             case ROOT:
                 BaseFile baseFile = generateBaseFileFromParent();
@@ -538,27 +538,27 @@ public class HFile {
         switch (mode){
             case SMB:
                 try {
-                    size = Futils.folderSize(new SmbFile(path));
+                    size = FileUtils.folderSize(new SmbFile(path));
                 } catch (MalformedURLException e) {
                     size = 0l;
                     e.printStackTrace();
                 }
                 break;
             case FILE:
-                size = Futils.folderSize(new File(path), null);
+                size = FileUtils.folderSize(new File(path), null);
                 break;
             case ROOT:
                 BaseFile baseFile=generateBaseFileFromParent();
                 if(baseFile!=null) size = baseFile.getSize();
                 break;
             case OTG:
-                size = Futils.folderSize(path, context);
+                size = FileUtils.folderSize(path, context);
                 break;
             case DROPBOX:
             case BOX:
             case GDRIVE:
             case ONEDRIVE:
-                size = Futils.folderSizeCloud(mode,
+                size = FileUtils.folderSizeCloud(mode,
                         dataUtils.getAccount(mode).getMetadata(CloudUtil.stripPath(mode, path)));
                 break;
             default:
@@ -1059,13 +1059,12 @@ public class HFile {
                 LayoutElement layoutElement;
                 if (isDirectory()) {
 
-                    layoutElement = utilitiesProvider.getFutils()
-                            .newElement(mainFragment.folder,
+                    layoutElement = FileUtils.newElement(mainFragment.folder,
                                     path, RootHelper.parseFilePermission(file),
                                     "", folderSize() + "", 0, true, false,
                                     file.lastModified() + "");
                 } else {
-                    layoutElement = utilitiesProvider.getFutils().newElement(Icons.loadMimeIcon(
+                    layoutElement = FileUtils.newElement(Icons.loadMimeIcon(
                             file.getPath(), !mainFragment.IS_LIST, mainFragment.getResources()),
                             file.getPath(), RootHelper.parseFilePermission(file),
                             file.getPath(), file.length() + "", file.length(), false, false, file.lastModified() + "");
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/RootHelper.java b/app/src/main/java/com/amaze/filemanager/filesystem/RootHelper.java
index af629c9fb..16e140245 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/RootHelper.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/RootHelper.java
@@ -19,16 +19,11 @@
 
 package com.amaze.filemanager.filesystem;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.net.Uri;
-import android.preference.PreferenceManager;
 import android.support.v4.provider.DocumentFile;
-import android.util.Log;
 
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.exceptions.RootNotPermittedException;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.OpenMode;
 
 import java.io.File;
@@ -252,7 +247,7 @@ public class RootHelper {
             for (String s : ls) {
                 if (contains(s.split(" "), name)) {
                     try {
-                        BaseFile path = Futils.parseName(s);
+                        BaseFile path = FileUtils.parseName(s);
                         if (path.getPermission().trim().startsWith("d")) return true;
                         else if (path.getPermission().trim().startsWith("l")) {
                             if (count > 5)
@@ -311,7 +306,7 @@ public class RootHelper {
                         String file = ls.get(i);
                         if (!file.contains("Permission denied"))
                             try {
-                                BaseFile array = Futils.parseName(file);
+                                BaseFile array = FileUtils.parseName(file);
                                 array.setMode(OpenMode.ROOT);
                                 if (array != null) {
                                     array.setName(array.getPath());
@@ -329,7 +324,7 @@ public class RootHelper {
                     }
                     mode = OpenMode.ROOT;
                 }
-            } else if (Futils.canListFiles(new File(path))) {
+            } else if (FileUtils.canListFiles(new File(path))) {
                 // we might as well not require root to load files
                 files = getFilesList(path, showHidden);
                 mode = OpenMode.FILE;
@@ -339,7 +334,7 @@ public class RootHelper {
                 mode = OpenMode.FILE;
                 files = new ArrayList<>();
             }
-        } else if (Futils.canListFiles(new File(path))) {
+        } else if (FileUtils.canListFiles(new File(path))) {
             // we don't have root, so we're taking a chance to load files using basic java filesystem
             files = getFilesList(path, showHidden);
             mode = OpenMode.FILE;
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index 7561e03b3..1164f3bad 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -105,7 +105,7 @@ import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.files.EncryptDecryptUtils;
 import com.amaze.filemanager.utils.files.FileListSorter;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.amaze.filemanager.utils.theme.AppTheme;
 
@@ -164,7 +164,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
 
     private android.support.v7.widget.RecyclerView listView;
     private UtilitiesProviderInterface utilsProvider;
-    private Futils utils;
     private HashMap<String, Bundle> scrolls = new HashMap<>();
     private MainFragment ma = this;
     private View rootView;
@@ -192,7 +191,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         setRetainInstance(true);
 
         utilsProvider = getMainActivity();
-        utils = utilsProvider.getFutils();
         sharedPref = PreferenceManager.getDefaultSharedPreferences(getActivity());
         res = getResources();
 
@@ -689,11 +687,11 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                             case BOX:
                             case GDRIVE:
                             case ONEDRIVE:
-                                utils.shareCloudFile(getLayoutElement(0).getDesc(),
+                                FileUtils.shareCloudFile(getLayoutElement(0).getDesc(),
                                         getLayoutElement(0).getMode(), getContext());
                                 break;
                             default:
-                                utils.shareFiles(arrayList, getActivity(), utilsProvider.getAppTheme(), accentColor);
+                                FileUtils.shareFiles(arrayList, getActivity(), utilsProvider.getAppTheme(), accentColor);
                                 break;
                         }
                     }
@@ -759,7 +757,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                     return true;
                 case R.id.openwith:
                     boolean useNewStack = sharedPref.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
-                    Futils.openunknown(new File(checkedItems.get(0).getDesc()), getActivity(), true, useNewStack);
+                    FileUtils.openunknown(new File(checkedItems.get(0).getDesc()), getActivity(), true, useNewStack);
                     return true;
                 case R.id.addshortcut:
                     addShortcut(checkedItems.get(0));
@@ -816,7 +814,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         public void onReceive(Context context, Intent intent) {
 
             if (isEncryptOpen && encryptBaseFile != null) {
-                getMainActivity().getFutils().openFile(new File(encryptBaseFile.getPath()), getMainActivity(), sharedPref);
+                FileUtils.openFile(new File(encryptBaseFile.getPath()), getMainActivity(), sharedPref);
                 isEncryptOpen = false;
             }
         }
@@ -905,7 +903,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                                 }
                                 break;
                             case OTG:
-                                utils.openFile(OTGUtil.getDocumentFile(e.getDesc(), getContext(), false),
+                                FileUtils.openFile(OTGUtil.getDocumentFile(e.getDesc(), getContext(), false),
                                         (MainActivity) getActivity(), sharedPref);
                                 break;
                             case DROPBOX:
@@ -916,7 +914,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                                 CloudUtil.launchCloud(e.generateBaseFile(), openMode, getMainActivity());
                                 break;
                             default:
-                                utils.openFile(new File(e.getDesc()), (MainActivity) getActivity(), sharedPref);
+                                FileUtils.openFile(new File(e.getDesc()), (MainActivity) getActivity(), sharedPref);
                                 break;
                         }
 
@@ -1337,7 +1335,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                             || CURRENT_PATH.equals(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/")
                             )
                         getMainActivity().exit();
-                    else if (utils.canGoBack(getContext(), currentFile)) {
+                    else if (FileUtils.canGoBack(getContext(), currentFile)) {
                         loadlist(currentFile.getParent(getContext()), true, openMode);
                     } else getMainActivity().exit();
                 }
@@ -1422,7 +1420,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                         || CURRENT_PATH.equals(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + "/")
                         || CURRENT_PATH.equals(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/")) {
                     getMainActivity().exit();
-                } else if (utils.canGoBack(getContext(), currentFile)) {
+                } else if (FileUtils.canGoBack(getContext(), currentFile)) {
                     loadlist(currentFile.getParent(getContext()), true, openMode);
                 } else getMainActivity().exit();
             }
@@ -1611,7 +1609,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                     e.printStackTrace();
                 }
             }
-            Futils.scanFile(path, getActivity());
+            FileUtils.scanFile(path, getActivity());
         }
 
     }
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
index 7b83621cb..b6076e19a 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
@@ -51,7 +51,7 @@ import com.amaze.filemanager.asyncronious.services.ZipService;
 import com.amaze.filemanager.utils.DataPackage;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.github.mikephil.charting.charts.LineChart;
 import com.github.mikephil.charting.components.XAxis;
@@ -358,8 +358,8 @@ public class ProcessViewerFragment extends Fragment {
                 isInitialized = true;
             }
 
-            addEntry(Futils.readableFileSizeFloat(doneBytes),
-                    Futils.readableFileSizeFloat(dataPackage.getSpeedRaw()));
+            addEntry(FileUtils.readableFileSizeFloat(doneBytes),
+                    FileUtils.readableFileSizeFloat(dataPackage.getSpeedRaw()));
 
             mProgressFileNameText.setText(name);
 
@@ -555,7 +555,7 @@ public class ProcessViewerFragment extends Fragment {
         yAxisLeft.setTypeface(Typeface.DEFAULT_BOLD);
         yAxisLeft.setGridColor(Utils.getColor(getContext(), R.color.white_translucent));
 
-        xAxis.setAxisMaximum(Futils.readableFileSizeFloat(totalBytes));
+        xAxis.setAxisMaximum(FileUtils.readableFileSizeFloat(totalBytes));
         xAxis.setAxisMinimum(0.0f);
         xAxis.setAxisLineColor(Color.TRANSPARENT);
         xAxis.setGridColor(Color.TRANSPARENT);
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/PropertiesSheet.java b/app/src/main/java/com/amaze/filemanager/fragments/PropertiesSheet.java
index d2a399676..b49f59503 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/PropertiesSheet.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/PropertiesSheet.java
@@ -16,7 +16,7 @@ import android.widget.TextView;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.BaseFile;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.Utils;
 
 import java.io.File;
@@ -68,7 +68,7 @@ public class PropertiesSheet extends BottomSheetDialogFragment {
         mFileTypeTextView = (TextView) rootView.findViewById(R.id.text_view_file_type);
         mFileTypeTextView.setText(mFile.isDirectory() ? getString(R.string.folder) : mFile.getName().substring(mFile.getName().lastIndexOf(".")));
         mFileSizeTextView = (TextView) rootView.findViewById(R.id.text_view_file_size);
-        mFileSizeTextView.setText(Formatter.formatFileSize(dialog.getContext(), mFile.isDirectory() ? Futils.folderSize(new File(mFile.getPath()), null) : mFile.getSize()));
+        mFileSizeTextView.setText(Formatter.formatFileSize(dialog.getContext(), mFile.isDirectory() ? FileUtils.folderSize(new File(mFile.getPath()), null) : mFile.getSize()));
         mFileLocationTextView = (TextView) rootView.findViewById(R.id.text_view_file_location);
         mFileLocationTextView.setText(mFile.getPath());
         mFileAccessedTextView = (TextView) rootView.findViewById(R.id.text_view_file_accessed);
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
index 525a4386e..a8878767b 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
@@ -51,11 +51,11 @@ import android.widget.Toast;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.adapters.RarAdapter;
-import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.asyncronious.asynctasks.DeleteTask;
-import com.amaze.filemanager.asyncronious.services.ExtractService;
 import com.amaze.filemanager.asyncronious.asynctasks.RarHelperTask;
 import com.amaze.filemanager.asyncronious.asynctasks.ZipHelperTask;
+import com.amaze.filemanager.asyncronious.services.ExtractService;
+import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.ui.ZipObj;
 import com.amaze.filemanager.ui.views.DividerItemDecoration;
 import com.amaze.filemanager.ui.views.FastScroller;
@@ -64,6 +64,7 @@ import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.github.junrar.Archive;
@@ -407,7 +408,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
                 // open most recent entry added to files to be deleted from cache
                 File cacheFile = new File(files.get(files.size() - 1).getPath());
                 if (cacheFile != null && cacheFile.exists())
-                    utilsProvider.getFutils().openFile(cacheFile, mainActivity, mainActivity.sharedPref);
+                    FileUtils.openFile(cacheFile, mainActivity,  mainActivity.sharedPref);
 
                 // reset the flag and cache file, as it's root is already in the list for deletion
                 isOpen = false;
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/FoldersPref.java b/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/FoldersPref.java
index 1540c74d9..4ec760e51 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/FoldersPref.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/FoldersPref.java
@@ -22,7 +22,7 @@ import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.SimpleTextWatcher;
 import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -179,7 +179,7 @@ public class FoldersPref extends PreferenceFragment implements Preference.OnPref
                 .build();
 
         dialog.getActionButton(DialogAction.POSITIVE)
-                .setEnabled(Futils.isPathAccesible(editText2.getText().toString(), sharedPrefs));
+                .setEnabled(FileUtils.isPathAccesible(editText2.getText().toString(), sharedPrefs));
 
         disableButtonIfTitleEmpty(editText1, dialog);
         disableButtonIfNotPath(editText2, dialog);
@@ -259,7 +259,7 @@ public class FoldersPref extends PreferenceFragment implements Preference.OnPref
             @Override
             public void afterTextChanged(Editable s) {
                 dialog.getActionButton(DialogAction.POSITIVE)
-                        .setEnabled(Futils.isPathAccesible(s.toString(), sharedPrefs));
+                        .setEnabled(FileUtils.isPathAccesible(s.toString(), sharedPrefs));
             }
         });
     }
diff --git a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
index f91c54fdd..f06c5f8da 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
@@ -20,7 +20,7 @@ import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.EncryptDecryptUtils;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 
 import java.io.File;
@@ -82,12 +82,12 @@ public class ItemPopupMenu extends PopupMenu implements PopupMenu.OnMenuItemClic
                     case BOX:
                     case GDRIVE:
                     case ONEDRIVE:
-                        utilitiesProvider.getFutils().shareCloudFile(rowItem.getDesc(), rowItem.getMode(), context);
+                        FileUtils.shareCloudFile(rowItem.getDesc(), rowItem.getMode(), context);
                         break;
                     default:
                         ArrayList<File> arrayList = new ArrayList<>();
                         arrayList.add(new File(rowItem.getDesc()));
-                        utilitiesProvider.getFutils().shareFiles(arrayList,
+                        FileUtils.shareFiles(arrayList,
                                 mainFragment.getMainActivity(), utilitiesProvider.getAppTheme(),
                                 accentColor);
                         break;
@@ -129,7 +129,7 @@ public class ItemPopupMenu extends PopupMenu implements PopupMenu.OnMenuItemClic
                 return true;
             case R.id.open_with:
                 boolean useNewStack = sharedPrefs.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
-                Futils.openWith(new File(rowItem.getDesc()), mainFragment.getActivity(), useNewStack);
+                FileUtils.openWith(new File(rowItem.getDesc()), mainFragment.getActivity(), useNewStack);
                 return true;
             case R.id.encrypt:
                 final Intent encryptIntent = new Intent(context, EncryptService.class);
diff --git a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
index 1ce24b368..1aee1c1dc 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
@@ -53,7 +53,7 @@ import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.files.EncryptDecryptUtils;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.github.mikephil.charting.charts.PieChart;
 import com.github.mikephil.charting.components.Legend;
@@ -74,7 +74,7 @@ import java.util.concurrent.Executors;
 import eu.chainfire.libsuperuser.Shell;
 
 import static android.os.Build.VERSION_CODES.M;
-import static com.amaze.filemanager.utils.files.Futils.toHFileArray;
+import static com.amaze.filemanager.utils.files.FileUtils.toHFileArray;
 
 /**
  * Here are a lot of function that create material dialogs
@@ -373,7 +373,7 @@ public class GeneralDialogCreation {
             mNameLinearLayout.setOnLongClickListener(new View.OnLongClickListener() {
                 @Override
                 public boolean onLongClick(View v) {
-                    Futils.copyToClipboard(c, name);
+                    FileUtils.copyToClipboard(c, name);
                     Toast.makeText(c, c.getResources().getString(R.string.name) + " " +
                             c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
@@ -382,7 +382,7 @@ public class GeneralDialogCreation {
             mLocationLinearLayout.setOnLongClickListener(new View.OnLongClickListener() {
                 @Override
                 public boolean onLongClick(View v) {
-                    Futils.copyToClipboard(c, parent);
+                    FileUtils.copyToClipboard(c, parent);
                     Toast.makeText(c, c.getResources().getString(R.string.location) + " " +
                             c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
@@ -391,7 +391,7 @@ public class GeneralDialogCreation {
             mSizeLinearLayout.setOnLongClickListener(new View.OnLongClickListener() {
                 @Override
                 public boolean onLongClick(View v) {
-                    Futils.copyToClipboard(c, items);
+                    FileUtils.copyToClipboard(c, items);
                     Toast.makeText(c, c.getResources().getString(R.string.size) + " " +
                             c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
@@ -400,7 +400,7 @@ public class GeneralDialogCreation {
             mDateLinearLayout.setOnLongClickListener(new View.OnLongClickListener() {
                 @Override
                 public boolean onLongClick(View v) {
-                    Futils.copyToClipboard(c, date);
+                    FileUtils.copyToClipboard(c, date);
                     Toast.makeText(c, c.getResources().getString(R.string.date) + " " +
                             c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show();
                     return false;
@@ -780,7 +780,7 @@ public class GeneralDialogCreation {
                     @Override
                     public void onPositive(MaterialDialog materialDialog) {
                         boolean useNewStack = sharedPrefs.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
-                        Futils.openunknown(f, m, false, useNewStack);
+                        FileUtils.openunknown(f, m, false, useNewStack);
                     }
 
                     @Override
@@ -951,7 +951,7 @@ public class GeneralDialogCreation {
     }
 
 
-    public static void showHistoryDialog(final DataUtils dataUtils, Futils utils, SharedPreferences sharedPrefs,
+    public static void showHistoryDialog(final DataUtils dataUtils, SharedPreferences sharedPrefs,
                                          final MainFragment m, AppTheme appTheme) {
         int accentColor = m.getMainActivity().getColorPreference().getColor(ColorUsage.ACCENT);
         final MaterialDialog.Builder a = new MaterialDialog.Builder(m.getActivity());
@@ -969,7 +969,7 @@ public class GeneralDialogCreation {
         a.theme(appTheme.getMaterialDialogTheme());
 
         a.autoDismiss(true);
-        HiddenAdapter adapter = new HiddenAdapter(m.getActivity(), m, utils, sharedPrefs, R.layout.bookmarkrow,
+        HiddenAdapter adapter = new HiddenAdapter(m.getActivity(), m, sharedPrefs, R.layout.bookmarkrow,
                 toHFileArray(dataUtils.getHistory()), null, true);
         a.adapter(adapter, null);
 
@@ -978,7 +978,7 @@ public class GeneralDialogCreation {
         x.show();
     }
 
-    public static void showHiddenDialog(DataUtils dataUtils, Futils utils, SharedPreferences sharedPrefs,
+    public static void showHiddenDialog(DataUtils dataUtils, SharedPreferences sharedPrefs,
                                         final MainFragment m, AppTheme appTheme) {
         int accentColor = m.getMainActivity().getColorPreference().getColor(ColorUsage.ACCENT);
         final MaterialDialog.Builder a = new MaterialDialog.Builder(m.getActivity());
@@ -987,7 +987,7 @@ public class GeneralDialogCreation {
         a.title(R.string.hiddenfiles);
         a.theme(appTheme.getMaterialDialogTheme());
         a.autoDismiss(true);
-        HiddenAdapter adapter = new HiddenAdapter(m.getActivity(), m, utils, sharedPrefs, R.layout.bookmarkrow,
+        HiddenAdapter adapter = new HiddenAdapter(m.getActivity(), m, sharedPrefs, R.layout.bookmarkrow,
                 toHFileArray(dataUtils.getHiddenfiles()), null, false);
         a.adapter(adapter, null);
         a.dividerColor(Color.GRAY);
@@ -1015,7 +1015,7 @@ public class GeneralDialogCreation {
             Toast.makeText(context, R.string.not_allowed, Toast.LENGTH_SHORT).show();
             return;
         }
-        ArrayList<Boolean[]> arrayList = Futils.parse(perm);
+        ArrayList<Boolean[]> arrayList = FileUtils.parse(perm);
         Boolean[] read = arrayList.get(0);
         Boolean[] write = arrayList.get(1);
         final Boolean[] exe = arrayList.get(2);
@@ -1084,7 +1084,7 @@ public class GeneralDialogCreation {
                 new MaterialDialog.InputCallback() {
                     @Override
                     public void onInput(@NonNull MaterialDialog dialog, CharSequence charSequence) {
-                        boolean isAccessible = Futils.isPathAccesible(charSequence.toString(), prefs);
+                        boolean isAccessible = FileUtils.isPathAccesible(charSequence.toString(), prefs);
                         dialog.getActionButton(DialogAction.POSITIVE).setEnabled(isAccessible);
                     }
                 });
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java b/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
index 2b413a82c..f529015c9 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
@@ -4,6 +4,7 @@ import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
+import android.os.Bundle;
 import android.os.CountDownTimer;
 import android.os.Handler;
 import android.support.annotation.NonNull;
@@ -35,7 +36,7 @@ import com.amaze.filemanager.utils.BottomBarButtonPath;
 import com.amaze.filemanager.utils.MainActivityHelper;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.Utils;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -117,7 +118,7 @@ public class BottomBar implements View.OnTouchListener{
 
             @Override
             public void onFinish() {
-                Futils.crossfadeInverse(buttons, pathLayout);
+                FileUtils.crossfadeInverse(buttons, pathLayout);
             }
         };
 
@@ -135,13 +136,13 @@ public class BottomBar implements View.OnTouchListener{
                 if(fragmentAtFrame instanceof TabFragment) {
                     MainFragment m = mainActivity.get().getCurrentMainFragment();
                     if (m.openMode == OpenMode.FILE) {
-                        Futils.crossfade(buttons, pathLayout);
+                        FileUtils.crossfade(buttons, pathLayout);
                         timer.cancel();
                         timer.start();
                         showButtons(m);
                     }
                 } else if (fragmentAtFrame instanceof ZipExplorerFragment) {
-                    Futils.crossfade(buttons, pathLayout);
+                    FileUtils.crossfade(buttons, pathLayout);
                     timer.cancel();
                     timer.start();
                     showButtons((BottomBarButtonPath) fragmentAtFrame);
@@ -205,10 +206,9 @@ public class BottomBar implements View.OnTouchListener{
                 }
             });
 
-            Pair<ArrayList<String>, ArrayList<String>> nameAndPathPair = Futils.getPaths(path);
+            Pair<ArrayList<String>, ArrayList<String>> nameAndPathPair = FileUtils.getPaths(path);
             ArrayList<String> names = nameAndPathPair.first;
             ArrayList<String> rnames = new ArrayList<>(nameAndPathPair.first);//clone it
-            Collections.reverse(rnames);
             
             final ArrayList<String> rpaths = nameAndPathPair.second;
             Collections.reverse(rpaths);
@@ -223,7 +223,7 @@ public class BottomBar implements View.OnTouchListener{
                 final int k = i;
                 if (rpaths.get(i).equals("/")) {
                     buttons.addView(buttonRoot);
-                } else if (Futils.isStorage(rpaths.get(i))) {
+                } else if (FileUtils.isStorage(rpaths.get(i))) {
                     buttonStorage.setOnClickListener(new View.OnClickListener() {
                         public void onClick(View p1) {
                             buttonPathInterface.changePath(rpaths.get(k));
diff --git a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
index 536acdab8..3a2271dbc 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
@@ -23,9 +23,12 @@ import android.widget.Toast;
 import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
 import com.amaze.filemanager.R;
-import com.amaze.filemanager.activities.superclasses.BasicActivity;
 import com.amaze.filemanager.activities.MainActivity;
+import com.amaze.filemanager.activities.superclasses.BasicActivity;
 import com.amaze.filemanager.activities.superclasses.ThemedActivity;
+import com.amaze.filemanager.asyncronious.asynctasks.DeleteTask;
+import com.amaze.filemanager.asyncronious.services.ExtractService;
+import com.amaze.filemanager.asyncronious.services.ZipService;
 import com.amaze.filemanager.database.CloudHandler;
 import com.amaze.filemanager.database.CryptHandler;
 import com.amaze.filemanager.database.models.EncryptedEntry;
@@ -37,13 +40,9 @@ import com.amaze.filemanager.fragments.CloudSheetFragment;
 import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.fragments.SearchWorkerFragment;
 import com.amaze.filemanager.fragments.TabFragment;
-import com.amaze.filemanager.asyncronious.asynctasks.DeleteTask;
-import com.amaze.filemanager.asyncronious.services.ExtractService;
-import com.amaze.filemanager.asyncronious.services.ZipService;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.CryptUtil;
-import com.amaze.filemanager.utils.files.Futils;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -56,7 +55,6 @@ public class MainActivityHelper {
     public static final int NEW_FOLDER = 0, NEW_FILE = 1, NEW_SMB = 2, NEW_CLOUD = 3;
 
     private MainActivity mainActivity;
-    private Futils utils;
     private DataUtils dataUtils = DataUtils.getInstance();
     private int accentColor;
 
@@ -68,7 +66,6 @@ public class MainActivityHelper {
 
     public MainActivityHelper(MainActivity mainActivity) {
         this.mainActivity = mainActivity;
-        this.utils = mainActivity.getFutils();
         accentColor = mainActivity.getColorPreference().getColor(ColorUsage.ACCENT);
     }
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java b/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
similarity index 85%
rename from app/src/main/java/com/amaze/filemanager/utils/files/Futils.java
rename to app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
index a1a7d4277..36443abb0 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
@@ -78,16 +78,11 @@ import jcifs.smb.SmbFile;
 /**
  * Functions that deal with files
  */
-public class Futils {
+public class FileUtils {
 
     public static final int READ = 4;
     public static final int WRITE = 2;
     public static final int EXECUTE = 1;
-    private Toast studioCount;
-    private DataUtils dataUtils = DataUtils.getInstance();
-
-    public Futils() {
-    }
 
     public static long folderSize(File directory, OnProgressUpdate<Long> updateState) {
         long length = 0;
@@ -266,13 +261,13 @@ public class Futils {
         // participate in layout passes, etc.)
     }
 
-    public void shareCloudFile(String path, final OpenMode openMode, final Context context) {
+    public static void shareCloudFile(String path, final OpenMode openMode, final Context context) {
         new AsyncTask<String, Void, String>() {
 
             @Override
             protected String doInBackground(String... params) {
                 String shareFilePath = params[0];
-                CloudStorage cloudStorage = dataUtils.getAccount(openMode);
+                CloudStorage cloudStorage = DataUtils.getInstance().getAccount(openMode);
                 return cloudStorage.createShareLink(CloudUtil.stripPath(openMode, shareFilePath));
             }
 
@@ -280,14 +275,14 @@ public class Futils {
             protected void onPostExecute(String s) {
                 super.onPostExecute(s);
 
-                Futils.copyToClipboard(context, s);
+                FileUtils.copyToClipboard(context, s);
                 Toast.makeText(context,
                         context.getResources().getString(R.string.cloud_share_copied), Toast.LENGTH_LONG).show();
             }
         }.execute(path);
     }
 
-    public void shareFiles(ArrayList<File> a, Activity c,AppTheme appTheme,int fab_skin) {
+    public static void shareFiles(ArrayList<File> a, Activity c,AppTheme appTheme,int fab_skin) {
 
         ArrayList<Uri> uris = new ArrayList<>();
         boolean b = true;
@@ -364,7 +359,7 @@ public class Futils {
      * @param c
      * @param forcechooser
      */
-    public void openunknown(DocumentFile f, Context c, boolean forcechooser, boolean useNewStack) {
+    public static void openunknown(DocumentFile f, Context c, boolean forcechooser, boolean useNewStack) {
         Intent chooserIntent = new Intent();
         chooserIntent.setAction(Intent.ACTION_VIEW);
         chooserIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
@@ -544,7 +539,7 @@ public class Futils {
         }
     }
 
-    public void openWith(final DocumentFile f, final Context c, final boolean useNewStack) {
+    public static void openWith(final DocumentFile f, final Context c, final boolean useNewStack) {
         MaterialDialog.Builder a = new MaterialDialog.Builder(c);
         a.title(c.getResources().getString(R.string.openas));
         String[] items = new String[]{c.getResources().getString(R.string.text), c.getResources().getString(R.string.image), c.getResources().getString(R.string.video), c.getResources().getString(R.string.audio), c.getResources().getString(R.string.database), c.getResources().getString(R.string.other)};
@@ -596,7 +591,7 @@ public class Futils {
      * @param context
      * @return
      */
-    public boolean canGoBack(Context context, HFile currentFile) {
+    public static boolean canGoBack(Context context, HFile currentFile) {
         switch (currentFile.getMode()) {
 
             // we're on main thread and can't list the cloud files
@@ -615,85 +610,6 @@ public class Futils {
     }
 
     public static long[] getSpaces(HFile hFile, Context context, final OnProgressUpdate<Long[]> updateState) {
-        /*if(hFile.isSmb()) {
-            if (hFile.isDirectory(context)) {
-
-            }
-            return new long[]{-1, -1, -1};
-        } else if (hFile.isDropBoxFile()) {
-            CloudStorage cloudStorageDropbox = dataUtils.getAccount(OpenMode.DROPBOX);
-            CloudMetaData fileMetaDataDropbox = cloudStorageDropbox.getMetadata(CloudUtil.stripPath(OpenMode.DROPBOX,
-                    hFile.getPath()));
-
-            return new long[]{cloudStorageDropbox.getAllocation().getTotal(),
-                    (cloudStorageDropbox.getAllocation().getTotal() - cloudStorageDropbox.getAllocation().getUsed()),
-                    folderSizeCloud(OpenMode.DROPBOX, fileMetaDataDropbox)
-            };
-        } else if (hFile.isBoxFile()) {
-            CloudStorage cloudStorageBox = dataUtils.getAccount(OpenMode.BOX);
-            CloudMetaData fileMetaDataBox = cloudStorageBox.getMetadata(CloudUtil.stripPath(OpenMode.BOX,
-                    hFile.getPath()));
-
-            return new long[]{cloudStorageBox.getAllocation().getTotal(),
-                    (cloudStorageBox.getAllocation().getTotal() - cloudStorageBox.getAllocation().getUsed()),
-                    folderSizeCloud(OpenMode.BOX, fileMetaDataBox)
-            };
-        } else if (hFile.isGoogleDriveFile()) {
-            CloudStorage cloudStorageGDrive = dataUtils.getAccount(OpenMode.GDRIVE);
-
-            CloudMetaData fileMetaDataGDrive = cloudStorageGDrive.getMetadata(CloudUtil.stripPath(OpenMode.GDRIVE,
-                    hFile.getPath()));
-
-            return new long[]{cloudStorageGDrive.getAllocation().getTotal(),
-                    (cloudStorageGDrive.getAllocation().getTotal() - cloudStorageGDrive.getAllocation().getUsed()),
-                    folderSizeCloud(OpenMode.GDRIVE, fileMetaDataGDrive)
-            };
-        } else if (hFile.isOneDriveFile()) {
-            CloudStorage cloudStorageOneDrive = dataUtils.getAccount(OpenMode.ONEDRIVE);
-
-            CloudMetaData fileMetaDataOneDrive = cloudStorageOneDrive.getMetadata(CloudUtil.stripPath(OpenMode.ONEDRIVE,
-                    hFile.getPath()));
-            return new long[]{cloudStorageOneDrive.getAllocation().getTotal(),
-                    (cloudStorageOneDrive.getAllocation().getTotal() - cloudStorageOneDrive.getAllocation().getUsed()),
-                    folderSizeCloud(OpenMode.ONEDRIVE, fileMetaDataOneDrive)
-            };
-        } else if (!hFile.isOtgFile() && !hFile.isCustomPath()
-                && !android.util.Patterns.EMAIL_ADDRESS.matcher(hFile.getPath()).matches()) {
-            try {
-                File file = new File(hFile.getPath());
-                final long totalSpace = file.getTotalSpace(),
-                        freeSpace = file.getFreeSpace(),
-                        folderSize = folderSize(hFile,
-                                new OnProgressUpdate<Long>() {
-                                    @Override
-                                    public void onUpdate(Long data) {
-                                        if(updateState != null)
-                                            updateState.onUpdate(new Long[] {totalSpace, freeSpace, data});
-                                    }
-                                });
-
-                final long totalSpace = hFile.length(context);
-                final long freeSpace = hFile.getUsableSpace();
-                long folderSize = 0l;
-
-                if (hFile.isDirectory(context)) {
-                    folderSize = folderSize(new File(hFile.getPath()),
-                            new OnProgressUpdate<Long>() {
-                                @Override
-                                public void onUpdate(Long data) {
-                                    if(updateState != null)
-                                        updateState.onUpdate(new Long[] {totalSpace, freeSpace, data});
-                                }
-                    });
-                }
-                return new long[] {totalSpace, freeSpace, folderSize};
-            } catch (Exception e) {
-                return new long[]{-1, -1, -1};
-            }
-        } else {
-            return new long[]{-1, -1, -1};
-        }*/
-
         long totalSpace = hFile.getTotal(context);
         long freeSpace = hFile.getUsableSpace();
         long fileSize = 0l;
@@ -734,18 +650,6 @@ public class Futils {
         return new Pair<>(names, paths);
     }
 
-    public boolean deletedirectory(File f){
-        boolean b=true;
-        for(File file:f.listFiles()){
-            boolean c;
-            if(file.isDirectory()){c=deletedirectory(file);}
-            else {c=file.delete();}
-            if(!c)b=false;
-
-        }if(b)b=f.delete();
-        return b;
-    }
-
     public static boolean canListFiles(File f) {
         try {
             return f.canRead() && f.isDirectory();
@@ -754,10 +658,12 @@ public class Futils {
         }
     }
 
-    public void openFile(final File f, final MainActivity m, SharedPreferences sharedPrefs) {
+    public static void openFile(final File f, final MainActivity m, SharedPreferences sharedPrefs) {
         boolean useNewStack = sharedPrefs.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
         boolean defaultHandler = isSelfDefault(f, m);
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(m);
+        final Toast[] studioCount = {null};
+
         if (defaultHandler && f.getName().toLowerCase().endsWith(".zip") ||
                 f.getName().toLowerCase().endsWith(".jar") ||
                 f.getName().toLowerCase().endsWith(".rar")||
@@ -783,19 +689,19 @@ public class Futils {
                     @Override
                     public void onTick(long millisUntilFinished) {
                         int sec = (int)millisUntilFinished/1000;
-                        if (studioCount!=null)
-                            studioCount.cancel();
-                        studioCount = Toast.makeText(m, sec + "", Toast.LENGTH_LONG);
-                        studioCount.show();
+                        if (studioCount[0] !=null)
+                            studioCount[0].cancel();
+                        studioCount[0] = Toast.makeText(m, sec + "", Toast.LENGTH_LONG);
+                        studioCount[0].show();
                     }
 
                     @Override
                     public void onFinish() {
-                        if (studioCount!=null)
-                            studioCount.cancel();
-                        studioCount = Toast.makeText(m, m.getString(R.string.opening),
+                        if (studioCount[0] !=null)
+                            studioCount[0].cancel();
+                        studioCount[0] = Toast.makeText(m, m.getString(R.string.opening),
                                 Toast.LENGTH_LONG);
-                        studioCount.show();
+                        studioCount[0].show();
                         m.startActivity(intent);
                     }
                 }.start();
@@ -811,7 +717,7 @@ public class Futils {
         }
     }
 
-    private boolean isSelfDefault(File f, Context c){
+    private static boolean isSelfDefault(File f, Context c){
         Intent intent = new Intent();
         intent.setAction(android.content.Intent.ACTION_VIEW);
         intent.setDataAndType(Uri.fromFile(f), MimeTypes.getMimeType(f));
@@ -827,7 +733,7 @@ public class Futils {
      * @param f
      * @param m
      */
-    public void openFile(final DocumentFile f, final MainActivity m, SharedPreferences sharedPrefs) {
+    public static void openFile(final DocumentFile f, final MainActivity m, SharedPreferences sharedPrefs) {
         boolean useNewStack = sharedPrefs.getBoolean(PrefFrag.PREFERENCE_TEXTEDITOR_NEWSTACK, false);
         try {
             openunknown(f, m, false, useNewStack);
@@ -891,7 +797,6 @@ public class Futils {
     }
 
     /**
-     *
      * @deprecated use new LayoutElement()
      */
     public static LayoutElement newElement(BitmapDrawable i, String d, String permissions, String symlink,
diff --git a/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProvider.java b/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProvider.java
index e98b989f8..1716bf2d9 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProvider.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProvider.java
@@ -5,7 +5,6 @@ import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 
 import com.amaze.filemanager.utils.color.ColorPreference;
-import com.amaze.filemanager.utils.files.Futils;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.amaze.filemanager.utils.theme.AppThemeManager;
 
@@ -14,23 +13,16 @@ import com.amaze.filemanager.utils.theme.AppThemeManager;
  */
 
 public class UtilitiesProvider implements UtilitiesProviderInterface {
-    private Futils futils;
     private ColorPreference colorPreference;
     private AppThemeManager appThemeManager;
 
     public UtilitiesProvider(Context context) {
         SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
-        futils = new Futils();
 
         colorPreference = ColorPreference.loadFromPreferences(context, sharedPreferences);
         appThemeManager = new AppThemeManager(sharedPreferences);
     }
 
-    @Override
-    public Futils getFutils() {
-        return futils;
-    }
-
     @Override
     public ColorPreference getColorPreference() {
         return colorPreference;
diff --git a/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProviderInterface.java b/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProviderInterface.java
index 2c25cc1db..cf4ada618 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProviderInterface.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/provider/UtilitiesProviderInterface.java
@@ -1,7 +1,6 @@
 package com.amaze.filemanager.utils.provider;
 
 import com.amaze.filemanager.utils.color.ColorPreference;
-import com.amaze.filemanager.utils.files.Futils;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.amaze.filemanager.utils.theme.AppThemeManager;
 
@@ -9,8 +8,6 @@ import com.amaze.filemanager.utils.theme.AppThemeManager;
  * Created by Rémi Piotaix <remi.piotaix@gmail.com> on 2016-10-17.
  */
 public interface UtilitiesProviderInterface {
-    Futils getFutils();
-
     ColorPreference getColorPreference();
 
     AppTheme getAppTheme();
diff --git a/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java b/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
index f9226d1ab..e85f16f4b 100644
--- a/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
+++ b/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
@@ -135,7 +135,7 @@ import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.TinyDB;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.files.Futils;
+import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.theme.AppTheme;
 import com.android.volley.VolleyError;
 import com.android.volley.toolbox.ImageLoader;
@@ -225,7 +225,6 @@ public class MainActivity extends ThemedActivity implements
 
     private AppBar appbar;
     //private HistoryManager history, grid;
-    private Futils utils;
     private MainActivity mainActivity = this;
     private Context con = this;
     private String zippath;
@@ -316,7 +315,6 @@ public class MainActivity extends ThemedActivity implements
         cloudHandler = new CloudHandler(this);
 
         mImageLoader = AppConfig.getInstance().getImageLoader();
-        utils = getFutils();
         mainActivityHelper = new MainActivityHelper(this);
         initialiseFab();
 
@@ -514,7 +512,7 @@ public class MainActivity extends ThemedActivity implements
                                 goToMain(path);
                             else {
                                 goToMain("");
-                                utils.openFile(new File(path), MainActivity.this, sharedPref);
+                                FileUtils.openFile(new File(path), MainActivity.this, sharedPref);
                             }
                         } else {
                             goToMain("");
@@ -685,7 +683,7 @@ public class MainActivity extends ThemedActivity implements
             String strings[] = FileUtil.getExtSdCardPathsForActivity(this);
             for (String s : strings) {
                 File f = new File(s);
-                if (!rv.contains(s) && Futils.canListFiles(f))
+                if (!rv.contains(s) && FileUtils.canListFiles(f))
                     rv.add(s);
             }
         }
@@ -771,7 +769,7 @@ public class MainActivity extends ThemedActivity implements
                     goToMain(path);
                 else {
                     goToMain("");
-                    utils.openFile(new File(path), this, sharedPref);
+                    FileUtils.openFile(new File(path), this, sharedPref);
                 }
             } else {
                 goToMain("");
@@ -1058,7 +1056,7 @@ public class MainActivity extends ThemedActivity implements
                 break;
             case R.id.history:
                 if (ma != null)
-                    GeneralDialogCreation.showHistoryDialog(dataUtils, utils, sharedPref, ma, getAppTheme());
+                    GeneralDialogCreation.showHistoryDialog(dataUtils, sharedPref, ma, getAppTheme());
                 break;
             case R.id.sethome:
                 if (ma == null) return super.onOptionsItemSelected(item);
@@ -1116,7 +1114,7 @@ public class MainActivity extends ThemedActivity implements
                 builder.build().show();
                 break;
             case R.id.hiddenitems:
-                GeneralDialogCreation.showHiddenDialog(dataUtils, utils, sharedPref, ma, getAppTheme());
+                GeneralDialogCreation.showHiddenDialog(dataUtils, sharedPref, ma, getAppTheme());
                 break;
             case R.id.view:
                 final MainFragment mainFragment = ma;
@@ -1981,8 +1979,8 @@ public class MainActivity extends ThemedActivity implements
         floatingActionButton.setOnMenuToggleListener(new FloatingActionMenu.OnMenuToggleListener() {
             @Override
             public void onMenuToggle(boolean b) {
-                if (b) utils.revealShow(fabBgView, true);
-                else utils.revealShow(fabBgView, false);
+                if (b) FileUtils.revealShow(fabBgView, true);
+                else FileUtils.revealShow(fabBgView, false);
             }
         });
 
@@ -2064,7 +2062,7 @@ public class MainActivity extends ThemedActivity implements
             HFile hFile = new HFile(OpenMode.UNKNOWN, pendingPath);
             hFile.generateMode(this);
             if (hFile.isSimpleFile()) {
-                utils.openFile(new File(pendingPath), mainActivity, sharedPref);
+                FileUtils.openFile(new File(pendingPath), mainActivity, sharedPref);
                 pendingPath = null;
                 return;
             }
@@ -2093,7 +2091,7 @@ public class MainActivity extends ThemedActivity implements
                 if (ma != null) {
                     ma.loadlist(path, false, OpenMode.FILE);
                 } else goToMain(path);
-            } else utils.openFile(new File(path), mainActivity, sharedPref);
+            } else FileUtils.openFile(new File(path), mainActivity, sharedPref);
         } else if (i.getStringArrayListExtra(TAG_INTENT_FILTER_FAILED_OPS) != null) {
             ArrayList<BaseFile> failedOps = i.getParcelableArrayListExtra(TAG_INTENT_FILTER_FAILED_OPS);
             if (failedOps != null) {
@@ -2251,11 +2249,11 @@ public class MainActivity extends ThemedActivity implements
      * It covers the fragment.
      */
     public void showSmokeScreen() {
-        Futils.revealShow(fabBgView, true);
+        FileUtils.revealShow(fabBgView, true);
     }
 
     public void hideSmokeScreen() {
-        Futils.revealShow(fabBgView, false);
+        FileUtils.revealShow(fabBgView, false);
     }
 
     @Override
