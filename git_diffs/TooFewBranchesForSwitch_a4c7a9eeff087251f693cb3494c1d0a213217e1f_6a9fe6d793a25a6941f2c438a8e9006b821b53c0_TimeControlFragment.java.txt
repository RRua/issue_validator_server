diff --git a/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java b/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
index 08790f7..c6de372 100644
--- a/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
+++ b/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
@@ -10,6 +10,7 @@ import android.util.Log;
 import android.view.MenuItem;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentTransaction;
@@ -21,15 +22,13 @@ import com.chess.clock.engine.TimeControlWrapper;
 import com.chess.clock.fragments.TimeControlFragment;
 import com.chess.clock.fragments.TimeSettingsFragment;
 import com.chess.clock.service.ChessClockLocalService;
-import com.google.android.material.bottomnavigation.BottomNavigationView;
-import com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener;
 
 import java.util.ArrayList;
 
 /**
  * Activity that manages TimeControl list in the Settings and also TimeControl form.
  */
-public class TimerSettingsActivity extends BaseActivity implements TimeSettingsFragment.OnSettingsListener, TimeControlFragment.OnTimeControlListener, TimeControlManager.Callback, TimeControlFragment.BottomNavigationActionListener {
+public class TimerSettingsActivity extends BaseActivity implements TimeSettingsFragment.OnSettingsListener, TimeControlFragment.OnTimeControlListener, TimeControlManager.Callback {
 
     private static final String TAG = TimerSettingsActivity.class.getName();
 
@@ -75,20 +74,15 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
     /**
      * State
      */
-    private TimeControlManager mTimeControlManager;
-
-    /**
-     * BottomNavigationTab
-     */
-    private BottomNavigationView mBottomNavigationView;
+    private TimeControlManager timeControlManager;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
 
         // This must be called before super.onCreate which performs initialization of all fragments
         // and loaders. TimeControl objects initialization is required before that.
-        mTimeControlManager = new TimeControlManager(getApplicationContext(), savedInstanceState);
-        mTimeControlManager.setTimeControlManagerListener(this);
+        timeControlManager = new TimeControlManager(getApplicationContext(), savedInstanceState);
+        timeControlManager.setTimeControlManagerListener(this);
 
         // Perform initialization of all fragments and loaders.
         super.onCreate(savedInstanceState);
@@ -108,7 +102,6 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
                     .commit();
         }
 
-        mBottomNavigationView = findViewById(R.id.player_selection_bottom_navigation);
         ActionBar actionBar = getSupportActionBar();
         if (actionBar != null) {
             actionBar.setHomeButtonEnabled(true);
@@ -149,7 +142,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
     protected void onDestroy() {
         super.onDestroy();
         // store last settings time control list check position on shared preferences.
-        mTimeControlManager.saveTimeControlIndex(getApplicationContext());
+        timeControlManager.saveTimeControlIndex(getApplicationContext());
     }
 
     @Override
@@ -171,8 +164,8 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
     }
 
     @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        mTimeControlManager.onSaveInstanceState(outState);
+    protected void onSaveInstanceState(@NonNull Bundle outState) {
+        timeControlManager.onSaveInstanceState(outState);
         super.onSaveInstanceState(outState);
     }
 
@@ -190,14 +183,14 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      * @return True if Time Control set up in Clock Timers Activity is the same
      */
     public boolean isSameTimeControlLoaded() {
-        int index = mTimeControlManager.getEditableTimeControlCheckIndex();
-        if (index > 0 && index < mTimeControlManager.getTimeControls().size()) {
-            TimeControl tc = mTimeControlManager.getTimeControls().get(index).getTimeControlPlayerOne();
+        int index = timeControlManager.getEditableTimeControlCheckIndex();
+        if (index > 0 && index < timeControlManager.getTimeControls().size()) {
+            TimeControl tc = timeControlManager.getTimeControls().get(index).getTimeControlPlayerOne();
             String title = tc.getName();
             return mBound && mService.getNameOfTimeControlRunning().equals(title);
         } else {
             Log.e(TAG, "isSameTimeControlLoaded got index out of bounds. index: "
-                    + index + " array size: " + mTimeControlManager.getTimeControls().size());
+                    + index + " array size: " + timeControlManager.getTimeControls().size());
             return false;
         }
     }
@@ -206,8 +199,8 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      * FRAGMENT TRANSACTIONS
      */
 
-    public void loadTimeControlFragment() {
-        loadFragment(new TimeControlFragment(), TAG_TIME_CONTROL_FRAGMENT);
+    public void loadTimeControlFragment(Boolean edit) {
+        loadFragment(TimeControlFragment.newInstance(edit), TAG_TIME_CONTROL_FRAGMENT);
     }
 
     private void loadFragment(Fragment fragment, String tag) {
@@ -228,7 +221,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public ArrayList<TimeControlWrapper> getCurrentTimeControls() {
-        return mTimeControlManager.getTimeControls();
+        return timeControlManager.getTimeControls();
     }
 
     /**
@@ -238,7 +231,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public int getCheckedTimeControlIndex() {
-        return mTimeControlManager.getEditableTimeControlCheckIndex();
+        return timeControlManager.getEditableTimeControlCheckIndex();
     }
 
     /**
@@ -248,7 +241,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public void setCheckedTimeControlIndex(int idx) {
-        mTimeControlManager.setEditableTimeControlCheckIndex(idx);
+        timeControlManager.setEditableTimeControlCheckIndex(idx);
     }
 
     /**
@@ -257,10 +250,10 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
     @Override
     public void addTimeControl() {
 
-        mTimeControlManager.prepareNewEditableTimeControl();
+        timeControlManager.prepareNewEditableTimeControl();
 
         // Load UI
-        loadTimeControlFragment();
+        loadTimeControlFragment(false);
     }
 
     /**
@@ -270,8 +263,8 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public void loadTimeControl(int position) {
-        mTimeControlManager.prepareEditableTimeControl(position);
-        loadTimeControlFragment();
+        timeControlManager.prepareEditableTimeControl(position);
+        loadTimeControlFragment(true);
     }
 
     /**
@@ -279,7 +272,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public void removeTimeControl(int[] positions) {
-        mTimeControlManager.removeTimeControls(getApplicationContext(), positions);
+        timeControlManager.removeTimeControls(getApplicationContext(), positions);
     }
 
     /**
@@ -289,7 +282,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public TimeControlWrapper getEditableTimeControl() {
-        return mTimeControlManager.getEditableTimeControl();
+        return timeControlManager.getEditableTimeControl();
     }
 
     /**
@@ -297,7 +290,7 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
      */
     @Override
     public void saveTimeControl() {
-        mTimeControlManager.saveTimeControl(getApplicationContext());
+        timeControlManager.saveTimeControl(getApplicationContext());
         TimeSettingsFragment f = (TimeSettingsFragment) getSupportFragmentManager().findFragmentByTag(TAG_SETTINGS_FRAGMENT);
         if (f != null) {
             f.refreshTimeControlList();
@@ -308,25 +301,4 @@ public class TimerSettingsActivity extends BaseActivity implements TimeSettingsF
     public void onTimeControlListEmpty() {
         Toast.makeText(this, getString(R.string.list_empty_toast_message), Toast.LENGTH_LONG).show();
     }
-
-    @Override
-    public void setVisibility(int visibility) {
-        if (mBottomNavigationView != null) {
-            mBottomNavigationView.setVisibility(visibility);
-        }
-    }
-
-    @Override
-    public void setSelected(int id) {
-        if (mBottomNavigationView != null) {
-            mBottomNavigationView.setSelectedItemId(id);
-        }
-    }
-
-    @Override
-    public void setBottomNavigationListener(OnNavigationItemSelectedListener listener) {
-        if (mBottomNavigationView != null) {
-            mBottomNavigationView.setOnNavigationItemSelectedListener(listener);
-        }
-    }
 }
diff --git a/app/src/main/java/com/chess/clock/adapters/StageAdapter.java b/app/src/main/java/com/chess/clock/adapters/StageAdapter.java
deleted file mode 100644
index 2b66a1a..0000000
--- a/app/src/main/java/com/chess/clock/adapters/StageAdapter.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.chess.clock.adapters;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.ImageButton;
-import android.widget.TextView;
-
-import androidx.fragment.app.DialogFragment;
-import androidx.fragment.app.Fragment;
-
-import com.chess.clock.R;
-import com.chess.clock.engine.Stage;
-import com.chess.clock.engine.StageManager;
-import com.chess.clock.fragments.TimeControlFragment;
-
-
-public class StageAdapter extends ArrayAdapter<Stage> {
-
-    /**
-     * FRAGMENT TAG
-     */
-    private static final String TAG_DELETE_STAGE_DIALOG_FRAGMENT = "DeleteDialogFragment";
-
-    /**
-     * DIALOG request code
-     */
-    private static final int DELETE_STAGE_DIALOG = 1;
-
-    /**
-     * STATE
-     */
-    private final Context mContext;
-    private final int mLayoutResourceId;
-    private final StageManager mStageManager;
-    private final Fragment mTargetFragment;
-
-    public StageAdapter(Context context, StageManager stageManager, Fragment targetFragment) {
-        super(context, R.layout.list_stage_item, stageManager.getStages());
-
-        mLayoutResourceId = R.layout.list_stage_item;
-        mContext = context;
-        mStageManager = stageManager;
-        mTargetFragment = targetFragment;
-    }
-
-    @Override
-    public int getCount() {
-        return mStageManager.getTotalStages();
-    }
-
-    @Override
-    public Stage getItem(int position) {
-        return mStageManager.getStages()[position];
-    }
-
-    @Override
-    public long getItemId(int position) {
-        return super.getItemId(position);
-    }
-
-    @Override
-    public View getView(final int position, View convertView, ViewGroup parent) {
-        View row = convertView;
-        final StageHolder holder;
-
-        if (row == null) {
-            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();
-            row = inflater.inflate(mLayoutResourceId, parent, false);
-
-            holder = new StageHolder();
-            holder.label = row.findViewById(R.id.stage_label);
-            holder.description = row.findViewById(R.id.stage_description);
-            holder.deleteBtn = row.findViewById(R.id.stage_remove_btn);
-            holder.deleteBtn.setOnClickListener(v -> {
-                int listPosition = (Integer) holder.deleteBtn.getTag();
-                DeleteDialogFragment resetClockDialog = DeleteDialogFragment.newInstance(listPosition);
-                resetClockDialog.setTargetFragment(mTargetFragment, DELETE_STAGE_DIALOG);
-                resetClockDialog.show(mTargetFragment.getActivity().getSupportFragmentManager(),
-                        TAG_DELETE_STAGE_DIALOG_FRAGMENT);
-            });
-
-            row.setTag(holder);
-        } else {
-            holder = (StageHolder) row.getTag();
-        }
-
-        Stage stage = mStageManager.getStages()[position];
-        holder.label.setText(mContext.getString(R.string.stage_item_list_label) + " " + (stage.getId() + 1));
-        holder.description.setText(stage.toString());
-        holder.deleteBtn.setTag(position);
-
-        if (stage.getId() > 0) {
-            holder.deleteBtn.setVisibility(View.VISIBLE);
-
-            // Img Button must set focusable as false otherwise it will steal clicks from parent.
-            holder.deleteBtn.setFocusable(false);
-
-        } else {
-            holder.deleteBtn.setVisibility(View.GONE);
-        }
-
-        return row;
-    }
-
-    /**
-     * Delete dialog to be displayed when user presses the delete widget.
-     */
-    public static class DeleteDialogFragment extends DialogFragment {
-
-        public static final String ARG_STAGE_ID = "stageID";
-
-        public DeleteDialogFragment() {
-            super();
-        }
-
-        public static DeleteDialogFragment newInstance(int stageID) {
-            DeleteDialogFragment myFragment = new DeleteDialogFragment();
-            Bundle args = new Bundle();
-            args.putInt(ARG_STAGE_ID, stageID);
-            myFragment.setArguments(args);
-            return myFragment;
-        }
-
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-
-            // Builder class for convenient dialog construction
-            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
-            builder.setMessage(R.string.delete_stage_dialog_message)
-                    .setPositiveButton(R.string.dialog_yes, (dialog, id) -> {
-                        TimeControlFragment fragment = (TimeControlFragment) getTargetFragment();
-                        int stageID = getArguments().getInt(ARG_STAGE_ID, 0);
-                        fragment.removeStage(stageID);
-                    })
-                    .setNegativeButton(R.string.dialog_no, (dialog, id) -> {
-                        // Resume
-                    });
-            // Create the AlertDialog object and return it
-            Dialog dialog = builder.create();
-            dialog.setCanceledOnTouchOutside(false);
-            return dialog;
-        }
-    }
-
-    static class StageHolder {
-        TextView label;
-        TextView description;
-        ImageButton deleteBtn;
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java b/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
index 1cdd78e..2d2a26b 100644
--- a/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
+++ b/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
@@ -18,23 +18,30 @@ import java.util.ArrayList;
 
 public class TimeControlAdapter extends ArrayAdapter<TimeControlWrapper> {
 
-    private final ArrayList<TimeControlWrapper> mTimeControls;
+    private ArrayList<TimeControlWrapper> data;
     private ColorStateList radioButtonColors;
 
-    public TimeControlAdapter(Context context, ArrayList<TimeControlWrapper> timeControls) {
+    public TimeControlAdapter(
+            Context context,
+            ArrayList<TimeControlWrapper> timeControls,
+            AppTheme theme
+    ) {
         super(context, R.layout.list_time_control_item_single_choice, R.id.time_control_text,
                 timeControls);
-        mTimeControls = timeControls;
+        data = timeControls;
+        if (theme != null) {
+            radioButtonColors = theme.colorStateListChecked(getContext());
+        }
     }
 
     @Override
     public int getCount() {
-        return mTimeControls.size();
+        return data.size();
     }
 
     @Override
     public TimeControlWrapper getItem(int position) {
-        return mTimeControls.get(position);
+        return data.get(position);
     }
 
     @Override
@@ -51,7 +58,7 @@ public class TimeControlAdapter extends ArrayAdapter<TimeControlWrapper> {
         if (tc != null && tc.getTimeControlPlayerOne() != null) {
             row.setText(tc.getTimeControlPlayerOne().getName());
         } else {
-            row.setText(R.string.title_activity_time_control);
+            row.setText(R.string.time_control);
         }
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             row.setCheckMarkTintList(radioButtonColors);
@@ -63,4 +70,9 @@ public class TimeControlAdapter extends ArrayAdapter<TimeControlWrapper> {
         radioButtonColors = theme.colorStateListChecked(getContext());
         notifyDataSetChanged();
     }
+
+    public void updateTimeControls(ArrayList<TimeControlWrapper> currentTimeControls) {
+        data = currentTimeControls;
+        notifyDataSetChanged();
+    }
 }
diff --git a/app/src/main/java/com/chess/clock/compoundviews/StageEditorView.java b/app/src/main/java/com/chess/clock/compoundviews/StageEditorView.java
deleted file mode 100644
index 7e8f07f..0000000
--- a/app/src/main/java/com/chess/clock/compoundviews/StageEditorView.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package com.chess.clock.compoundviews;
-
-import android.content.Context;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.EditText;
-
-import com.chess.clock.R;
-
-public class StageEditorView extends TimePickerView {
-
-    /**
-     * state
-     */
-    private int mCurrentMoves = 0;
-    private boolean mMovesVisible;
-
-    /**
-     * UI components
-     */
-    private EditText mMovesEditText;
-
-    TextWatcher mTextWatcher = new TextWatcher() {
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-        }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            String text = s.toString();
-            if (text.length() != 0 && !text.equals("")) {
-                mCurrentMoves = Integer.valueOf(s.toString());
-            }
-        }
-    };
-
-    /**
-     * Constructors
-     */
-    public StageEditorView(Context context, Type type, boolean movesVisible) {
-        this(context, type, null, movesVisible);
-    }
-
-    public StageEditorView(Context context, Type type, AttributeSet attrs, boolean movesVisible) {
-        this(context, type, attrs, 0, movesVisible);
-    }
-
-    public StageEditorView(Context context, Type type, AttributeSet attrs, int defStyle, boolean movesVisible) {
-        super(context, type, attrs, defStyle, R.layout.widget_stage_editor);
-
-        mMovesVisible = movesVisible;
-
-        // set moves visibility
-        setupMovesEditText(mMovesVisible);
-    }
-
-    /**
-     * @return current moves number.
-     */
-    public int getCurrentMoves() {
-        return mCurrentMoves;
-    }
-
-    /**
-     * Set the current moves.
-     */
-    public void setCurrentMoves(Integer currentHour) {
-        if (mMovesVisible) {
-            mCurrentMoves = currentHour;
-            updateMovesDisplay();
-        }
-    }
-
-    protected void setupMovesEditText(boolean visible) {
-
-        mMovesEditText = findViewById(R.id.stage_moves_edit_text);
-
-        // Set focus marker at the end of the number digits
-        mMovesEditText.setOnFocusChangeListener((v, hasFocus) -> {
-            if (hasFocus) {
-                mMovesEditText.setSelection(mMovesEditText.getText().length());
-            }
-        });
-
-        if (visible) {
-            mMovesEditText.addTextChangedListener(mTextWatcher);
-        } else {
-            findViewById(R.id.stage_moves_container).setVisibility(View.GONE);
-        }
-    }
-
-    public void updateMovesDisplay() {
-        mMovesEditText.setText(String.valueOf(mCurrentMoves));
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/compoundviews/TimeIncrementEditorView.java b/app/src/main/java/com/chess/clock/compoundviews/TimeIncrementEditorView.java
deleted file mode 100644
index 9cf90dd..0000000
--- a/app/src/main/java/com/chess/clock/compoundviews/TimeIncrementEditorView.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.chess.clock.compoundviews;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.util.AttributeSet;
-import android.util.DisplayMetrics;
-import android.view.WindowManager;
-import android.widget.RadioButton;
-import android.widget.RadioGroup;
-import android.widget.TextView;
-
-import com.chess.clock.R;
-import com.chess.clock.engine.TimeIncrement;
-
-public class TimeIncrementEditorView extends TimePickerView {
-
-    /**
-     * state
-     */
-    private int mTimeIncrementTypePosition = 0;
-    private Context mContext;
-
-    /**
-     * UI components
-     */
-    private TextView mTimeIncrementSubtitleText;
-    private RadioGroup mRadioGroup;
-    private RadioButton mDelayBtn;
-    private RadioButton mBronsteinBtn;
-    private RadioButton mFischerBtn;
-
-    /**
-     * Constructors
-     */
-    public TimeIncrementEditorView(Context context, Type type) {
-        this(context, type, null);
-    }
-
-    public TimeIncrementEditorView(Context context, Type type, AttributeSet attrs) {
-        this(context, type, attrs, 0);
-    }
-
-    public TimeIncrementEditorView(Context context, Type type, AttributeSet attrs, int defStyle) {
-        super(context, type, attrs, defStyle, R.layout.widget_time_increment_editor);
-        mContext = context;
-        init();
-    }
-
-    /**
-     * Save used widgets internal references
-     */
-    private void init() {
-
-        mRadioGroup = findViewById(R.id.radio_time_increment_type);
-        mRadioGroup.setOnCheckedChangeListener((group, checkedId) -> {
-            // Check which radio button was clicked
-            switch (checkedId) {
-                case R.id.radio_delay:
-                    mTimeIncrementTypePosition = 0;
-                    break;
-                case R.id.radio_bronstein:
-                    mTimeIncrementTypePosition = 1;
-                    break;
-                case R.id.radio_fischer:
-                    mTimeIncrementTypePosition = 2;
-                    break;
-            }
-            updateSubtitle();
-        });
-
-        mDelayBtn = findViewById(R.id.radio_delay);
-        mBronsteinBtn = findViewById(R.id.radio_bronstein);
-        mFischerBtn = findViewById(R.id.radio_fischer);
-
-        // Setup subtitle text
-        mTimeIncrementSubtitleText = findViewById(R.id.time_increment_type_subtitle);
-
-        // Remove subtitle text view from UI on hdpi and landscapes
-        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
-
-            DisplayMetrics metrics = new DisplayMetrics();
-            WindowManager windowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
-            windowManager.getDefaultDisplay().getMetrics(metrics);
-            switch (metrics.densityDpi) {
-                case DisplayMetrics.DENSITY_HIGH:
-                case DisplayMetrics.DENSITY_MEDIUM:
-                case DisplayMetrics.DENSITY_LOW:
-                    findViewById(R.id.time_increment_type_subtitle).setVisibility(GONE);
-                    break;
-            }
-        }
-    }
-
-    /**
-     * @return current increment type
-     */
-    public int getCurrentIncrementType() {
-        return mTimeIncrementTypePosition;
-    }
-
-    public void setCurrentTimeIncrementType(int type) {
-        mTimeIncrementTypePosition = type;
-        switch (type) {
-            case 0:
-                mDelayBtn.setChecked(true);
-                break;
-            case 1:
-                mBronsteinBtn.setChecked(true);
-                break;
-            case 2:
-                mFischerBtn.setChecked(true);
-                break;
-        }
-        updateSubtitle();
-    }
-
-    /**
-     * Update subtitle text of time increment type
-     */
-    private void updateSubtitle() {
-
-        if (mTimeIncrementSubtitleText != null) {
-            // Set spinner subtitle text
-            String subtitle = "";
-            switch (TimeIncrement.Type.fromInteger(mTimeIncrementTypePosition)) {
-                case DELAY:
-                    subtitle = getResources().getString(R.string.delay_option_subtitle);
-                    break;
-                case BRONSTEIN:
-                    subtitle = getResources().getString(R.string.bronstein_option_subtitle);
-                    break;
-                case FISCHER:
-                    subtitle = getResources().getString(R.string.fischer_option_subtitle);
-                    break;
-            }
-            mTimeIncrementSubtitleText.setText(subtitle);
-        }
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/compoundviews/TimePickerView.java b/app/src/main/java/com/chess/clock/compoundviews/TimePickerView.java
deleted file mode 100644
index c0c861f..0000000
--- a/app/src/main/java/com/chess/clock/compoundviews/TimePickerView.java
+++ /dev/null
@@ -1,277 +0,0 @@
-package com.chess.clock.compoundviews;
-
-import android.content.Context;
-import android.content.res.TypedArray;
-import android.util.AttributeSet;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.NumberPicker;
-
-import com.chess.clock.R;
-
-public class TimePickerView extends FrameLayout {
-
-    private static final NumberPicker.Formatter TWO_DIGIT_FORMATTER = value -> String.format("%02d", value);
-    protected Type mType;
-
-    /**
-     * state
-     */
-    protected int mCurrentHour = 0; // 0-23
-
-    protected int mCurrentMinute = 0; // 0-59
-
-    protected int mCurrentSecond = 0; // 0-59
-
-    /**
-     * ui components
-     */
-    private NumberPicker mHourPicker;
-    private NumberPicker mMinutePicker;
-    private NumberPicker mSecondPicker;
-
-    public TimePickerView(Context context, Type type) {
-        this(context, type, null);
-    }
-
-    public TimePickerView(Context context, Type type, AttributeSet attrs) {
-        this(context, type, attrs, 0);
-    }
-
-    public TimePickerView(Context context, Type type, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-        mType = type;
-
-        // Check xml attrs if inflated from xml resource
-        if (attrs != null) {
-            TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.TimePickerCompoundView, defStyle, 0);
-            int typeInt = t.getInt(R.styleable.TimePickerCompoundView_type, 0);
-            mType = Type.fromInteger(typeInt);
-
-            mCurrentHour = t.getInt(R.styleable.TimePickerCompoundView_hour, 0);
-            mCurrentMinute = t.getInt(R.styleable.TimePickerCompoundView_minute, 0);
-            mCurrentSecond = t.getInt(R.styleable.TimePickerCompoundView_second, 0);
-
-            t.recycle();
-        }
-
-        //Inflate time picker compound view
-        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        inflater.inflate(R.layout.widget_time_picker, this, true);
-
-
-        // hour visibility dependent on picker type
-        setupHourPicker(mType == Type.HOUR_MINUTE_SECOND);
-
-        // digits of minute always visible
-        setupMinutePicker(true);
-
-        // digits of seconds always visible
-        setupSecondPicker(true);
-
-        setCurrentHour(mCurrentHour);
-        setCurrentMinute(mCurrentMinute);
-        setCurrentSecond(mCurrentSecond);
-    }
-
-    /**
-     * Constructor ready for custom subclasses which have different layout
-     */
-    public TimePickerView(Context context, Type type, AttributeSet attrs, int defStyle, int layoutId) {
-        super(context, attrs, defStyle);
-        mType = type;
-
-        // Check xml attrs if inflated from xml resource
-        if (attrs != null) {
-            TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.TimePickerCompoundView, defStyle, 0);
-            int typeInt = t.getInt(R.styleable.TimePickerCompoundView_type, 0);
-            mType = Type.fromInteger(typeInt);
-
-            mCurrentHour = t.getInt(R.styleable.TimePickerCompoundView_hour, 0);
-            mCurrentMinute = t.getInt(R.styleable.TimePickerCompoundView_minute, 0);
-            mCurrentSecond = t.getInt(R.styleable.TimePickerCompoundView_second, 0);
-
-            t.recycle();
-        }
-
-        //Inflate time picker compound view
-        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        inflater.inflate(layoutId, this, true);
-
-        // hour visibility dependent on picker type
-        setupHourPicker(mType == Type.HOUR_MINUTE_SECOND);
-
-        // digits of minute always visible
-        setupMinutePicker(true);
-
-        // digits of seconds always visible
-        setupSecondPicker(true);
-
-        setCurrentHour(mCurrentHour);
-        setCurrentMinute(mCurrentMinute);
-        setCurrentSecond(mCurrentSecond);
-    }
-
-    /**
-     * @return The current hour (0-23).
-     */
-    public Integer getCurrentHour() {
-        return mCurrentHour;
-    }
-
-    /**
-     * Set the current hour.
-     */
-    public void setCurrentHour(Integer currentHour) {
-        if (mType != null && mType == Type.HOUR_MINUTE_SECOND) {
-            this.mCurrentHour = currentHour;
-
-            updateHourPickerDisplay();
-        }
-    }
-
-    /**
-     * @return The current minute.
-     */
-    public Integer getCurrentMinute() {
-        return mCurrentMinute;
-    }
-
-    /**
-     * Set the current minute (0-59).
-     */
-    public void setCurrentMinute(Integer currentMinute) {
-        this.mCurrentMinute = currentMinute;
-
-        updateMinutePickerDisplay();
-    }
-
-    /**
-     * @return The current minute.
-     */
-    public Integer getCurrentSeconds() {
-        return mCurrentSecond;
-    }
-
-    /**
-     * Set the current second (0-59).
-     */
-    public void setCurrentSecond(Integer currentSecond) {
-        this.mCurrentSecond = currentSecond;
-
-        updateSecondsPickerDisplay();
-
-    }
-
-    @Override
-    public int getBaseline() {
-        return mHourPicker.getBaseline();
-    }
-
-    /**
-     * Set the state of the spinners appropriate to the current hour.
-     */
-    private void updateHourPickerDisplay() {
-        if (mType != null && mType == Type.HOUR_MINUTE_SECOND) {
-            int currentHour = mCurrentHour;
-            mHourPicker.setValue(currentHour);
-        }
-    }
-
-    /**
-     * Set the state of the spinners appropriate to the current minute.
-     */
-    private void updateMinutePickerDisplay() {
-        mMinutePicker.setValue(mCurrentMinute);
-    }
-    /**
-     * Set the state of the spinners appropriate to the current second.
-     */
-    private void updateSecondsPickerDisplay() {
-        mSecondPicker.setValue(mCurrentSecond);
-    }
-
-    /**
-     * Set the reference of seconds picker, its digit format and register value change listener.
-     *
-     * @param pickerVisible if false, removes the spinner widget.
-     */
-    protected void setupSecondPicker(boolean pickerVisible) {
-        mSecondPicker = findViewById(R.id.seconds);
-        if (pickerVisible) {
-            mSecondPicker.setMinValue(0);
-            mSecondPicker.setMaxValue(59);
-            mSecondPicker.setFormatter(TWO_DIGIT_FORMATTER);
-            mSecondPicker.setOnValueChangedListener((picker, oldVal, newVal) -> mCurrentSecond = newVal);
-        } else {
-            mHourPicker.setVisibility(View.GONE);
-        }
-    }
-
-    /**
-     * Set the reference of minute picker, its digit format and register value change listener.
-     *
-     * @param pickerVisible if false, removes the spinner widget.
-     */
-    protected void setupMinutePicker(boolean pickerVisible) {
-        mMinutePicker = findViewById(R.id.minute);
-        if (pickerVisible) {
-            mMinutePicker.setMinValue(0);
-            mMinutePicker.setMaxValue(59);
-            mMinutePicker.setFormatter(TWO_DIGIT_FORMATTER);
-            mMinutePicker.setOnValueChangedListener((spinner, oldVal, newVal) -> mCurrentMinute = newVal);
-        } else {
-            mMinutePicker.setVisibility(View.GONE);
-            findViewById(R.id.minute_divider).setVisibility(View.GONE);
-        }
-    }
-
-    /**
-     * Set the reference of hour picker, its digit format and register value change listener.
-     *
-     * @param pickerVisible if false, removes the spinner widget.
-     */
-    protected void setupHourPicker(boolean pickerVisible) {
-
-        mHourPicker = findViewById(R.id.hour);
-        if (pickerVisible) {
-            mHourPicker.setMinValue(0);
-            mHourPicker.setMaxValue(10);
-            mHourPicker.setFormatter(TWO_DIGIT_FORMATTER);
-            mHourPicker.setOnValueChangedListener((picker, oldVal, newVal) -> mCurrentHour = newVal);
-        } else {
-            mHourPicker.setVisibility(View.GONE);
-            findViewById(R.id.hour_divider).setVisibility(View.GONE);
-        }
-    }
-
-    /**
-     * Type of picker. Used to remove unwanted hour picker.
-     */
-    public static enum Type {
-        MINUTE_SECOND(0),
-        HOUR_MINUTE_SECOND(1);
-
-        private final int value;
-
-        private Type(int value) {
-            this.value = value;
-        }
-
-        public static Type fromInteger(int type) {
-            switch (type) {
-                case 0:
-                    return MINUTE_SECOND;
-                case 1:
-                    return HOUR_MINUTE_SECOND;
-                default:
-                    return HOUR_MINUTE_SECOND;
-            }
-        }
-
-        public int getValue() {
-            return value;
-        }
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/dialog/EditStageDialogFragment.java b/app/src/main/java/com/chess/clock/dialog/EditStageDialogFragment.java
new file mode 100644
index 0000000..5a25dd1
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/dialog/EditStageDialogFragment.java
@@ -0,0 +1,233 @@
+package com.chess.clock.dialog;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.res.ColorStateList;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+
+import com.chess.clock.R;
+import com.chess.clock.activities.BaseActivity;
+import com.chess.clock.engine.Stage;
+import com.chess.clock.engine.TimeIncrement;
+import com.chess.clock.entities.AppTheme;
+import com.chess.clock.fragments.TimeControlFragment;
+import com.chess.clock.util.ClockUtils;
+import com.chess.clock.views.ViewUtils;
+
+public class EditStageDialogFragment extends FullScreenDialogFragment
+        implements EditTimeIncrementDialogFragment.OnTimeIncrementEditListener {
+
+    public static final String TAG = "EditStageDialogFragment";
+    private static final String ARG_STAGE_KEY = "arg_stage_key";
+    private static final String ARG_TIME_INCREMENT_KEY = "arg_time_increment_key";
+
+    private Stage stage;
+    private TimeIncrement timeIncrement;
+
+    EditText hoursEt;
+    EditText minutesEt;
+    EditText secondsEt;
+    EditText movesEt;
+    TextView timeIncrementDetailsTv;
+
+    @Override
+    int layoutRes() {
+        return R.layout.dialog_fragment_edit_stage;
+    }
+
+    public static EditStageDialogFragment newInstance(Stage stage, TimeIncrement timeIncrement) {
+
+        Bundle args = new Bundle();
+        args.putParcelable(ARG_STAGE_KEY, stage);
+        args.putParcelable(ARG_TIME_INCREMENT_KEY, timeIncrement);
+
+        EditStageDialogFragment fragment = new EditStageDialogFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        stage = requireArguments().getParcelable(ARG_STAGE_KEY);
+        if (savedInstanceState == null) {
+            timeIncrement = requireArguments().getParcelable(ARG_TIME_INCREMENT_KEY);
+        } else {
+            timeIncrement = savedInstanceState.getParcelable(ARG_TIME_INCREMENT_KEY);
+        }
+
+        return super.onCreateView(inflater, container, savedInstanceState);
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        int titleRes = R.string.stage_editor_dialog_title;
+        setName(view, titleRes);
+        view.findViewById(R.id.backBtn).setOnClickListener(v -> dismissAllowingStateLoss());
+        view.findViewById(R.id.deleteBtn).setOnClickListener(v ->
+                DeleteConfirmationDialogFragment.newInstance(stage.getId())
+                        .show(getParentFragmentManager(), DeleteConfirmationDialogFragment.TAG)
+        );
+
+        timeIncrementDetailsTv = view.findViewById(R.id.incrementDetailsTv);
+        timeIncrementDetailsTv.setText(timeIncrement.toString());
+
+        view.findViewById(R.id.incrementLay).setOnClickListener(v -> {
+            DialogFragment dialogFragment = EditTimeIncrementDialogFragment.newInstance(timeIncrement);
+            dialogFragment.show(getChildFragmentManager(), EditTimeIncrementDialogFragment.TAG);
+        });
+
+        hoursEt = view.findViewById(R.id.hoursEt);
+        minutesEt = view.findViewById(R.id.minutesEt);
+        secondsEt = view.findViewById(R.id.secondsEt);
+        movesEt = view.findViewById(R.id.movesEt);
+
+        ClockUtils.setClockTextWatcher(minutesEt);
+        ClockUtils.setClockTextWatcher(secondsEt);
+
+        ClockUtils.clearFocusOnActionDone(hoursEt);
+        ClockUtils.clearFocusOnActionDone(movesEt);
+
+        if (savedInstanceState == null) {
+            int[] time = stage.getTime();
+            hoursEt.setText(ClockUtils.twoDecimalPlacesFormat(time[0]));
+            minutesEt.setText(ClockUtils.twoDecimalPlacesFormat(time[1]));
+            secondsEt.setText(ClockUtils.twoDecimalPlacesFormat(time[2]));
+            movesEt.setText(String.valueOf(stage.getTotalMoves()));
+        }
+
+        ViewUtils.showView(view.findViewById(R.id.movesLay), stage.getStageType() != Stage.StageType.GAME);
+        ViewUtils.showView(view.findViewById(R.id.movesDivider), stage.getStageType() != Stage.StageType.GAME);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        AppTheme theme = ((BaseActivity) requireActivity()).selectedTheme;
+        if (theme != null) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                ColorStateList tintList = theme.colorStateListFocused(requireContext());
+                hoursEt.setBackgroundTintList(tintList);
+                minutesEt.setBackgroundTintList(tintList);
+                secondsEt.setBackgroundTintList(tintList);
+                movesEt.setBackgroundTintList(tintList);
+            }
+        }
+    }
+
+    @Override
+    public void onDismiss(@NonNull DialogInterface dialog) {
+        super.onDismiss(dialog);
+        int hours = ClockUtils.getIntOrZero(hoursEt);
+        int minutes = ClockUtils.getIntOrZero(minutesEt);
+        int seconds = ClockUtils.getIntOrZero(secondsEt);
+        long duration = hours * 60 * 60 * 1000L + minutes * 60 * 1000L + seconds * 1000L;
+        int moves = Math.max(1, ClockUtils.getIntOrZero(movesEt));
+        Fragment parentFragment = getParentFragment();
+        if (parentFragment != null) {
+            ((OnStageEditListener) parentFragment).onStageEditDone(stage.getId(), moves, duration);
+        }
+    }
+
+    private void setName(@NonNull View view, int titleRes) {
+        switch (stage.getId()) {
+            case Stage.STAGE_ONE_ID:
+                titleRes = R.string.stage_one;
+                break;
+            case Stage.STAGE_TWO_ID:
+                titleRes = R.string.stage_two;
+                break;
+            case Stage.STAGE_THREE_ID:
+                titleRes = R.string.stage_three;
+                break;
+
+        }
+        ((TextView) view.findViewById(R.id.titleTv)).setText(titleRes);
+    }
+
+    @Override
+    public void onTimeIncrementEditDone(TimeIncrement.Type type, long time) {
+        ((EditTimeIncrementDialogFragment.OnTimeIncrementEditListener) requireParentFragment())
+                .onTimeIncrementEditDone(type, time);
+
+        timeIncrement.setType(type);
+        timeIncrement.setValue(time);
+        timeIncrementDetailsTv.setText(timeIncrement.toString());
+    }
+
+    @Override
+    public void onSaveInstanceState(@NonNull Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putParcelable(ARG_TIME_INCREMENT_KEY, timeIncrement);
+    }
+
+    /**
+     * Delete dialog to be displayed when user presses the delete widget.
+     */
+    public static class DeleteConfirmationDialogFragment extends DialogFragment {
+
+        public static final String TAG = "DeleteConfirmationDialogFragment";
+        private static final String ARG_STAGE_ID = "stageID";
+
+        public DeleteConfirmationDialogFragment() {
+            super();
+        }
+
+        public static DeleteConfirmationDialogFragment newInstance(int stageID) {
+            DeleteConfirmationDialogFragment myFragment = new DeleteConfirmationDialogFragment();
+            Bundle args = new Bundle();
+            args.putInt(ARG_STAGE_ID, stageID);
+            myFragment.setArguments(args);
+            return myFragment;
+        }
+
+        @NonNull
+        @Override
+        public Dialog onCreateDialog(Bundle savedInstanceState) {
+
+            // Builder class for convenient dialog construction
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            builder.setMessage(R.string.delete_stage_dialog_message)
+                    .setPositiveButton(R.string.dialog_yes, (dialog, id) -> {
+                        TimeControlFragment fragment = (TimeControlFragment) getParentFragment();
+                        int stageID = requireArguments().getInt(ARG_STAGE_ID, 0);
+                        if (fragment != null) {
+                            fragment.removeStage(stageID);
+                        }
+                    })
+                    .setNegativeButton(R.string.dialog_no, (dialog, id) -> {
+                        // Resume
+                    });
+            // Create the AlertDialog object and return it
+            Dialog dialog = builder.create();
+            dialog.setCanceledOnTouchOutside(false);
+            return dialog;
+        }
+    }
+
+    /**
+     * The callback interface used to indicate the user is done filling in
+     * the stage data (the user clicked on the 'Set' button).
+     */
+    public interface OnStageEditListener {
+
+        /**
+         * @param moves The number of moves that was set.
+         * @param time  The time that was set in milliseconds.
+         */
+        void onStageEditDone(int stageId, int moves, long time);
+    }
+}
diff --git a/app/src/main/java/com/chess/clock/dialog/EditTimeIncrementDialogFragment.java b/app/src/main/java/com/chess/clock/dialog/EditTimeIncrementDialogFragment.java
new file mode 100644
index 0000000..34d9b3e
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/dialog/EditTimeIncrementDialogFragment.java
@@ -0,0 +1,166 @@
+package com.chess.clock.dialog;
+
+import android.content.DialogInterface;
+import android.content.res.ColorStateList;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.widget.AppCompatCheckedTextView;
+import androidx.fragment.app.Fragment;
+
+import com.chess.clock.R;
+import com.chess.clock.activities.BaseActivity;
+import com.chess.clock.engine.TimeIncrement;
+import com.chess.clock.entities.AppTheme;
+import com.chess.clock.util.ClockUtils;
+
+public class EditTimeIncrementDialogFragment extends FullScreenDialogFragment {
+
+    public static final String TAG = "EditTimeIncrementDialogFragment";
+    private static final String ARG_TIME_INCREMENT_KEY = "arg_time_increment_key";
+
+    private TimeIncrement timeIncrement;
+
+    EditText secondsEt;
+    EditText minutesEt;
+
+    AppCompatCheckedTextView delayTv;
+    AppCompatCheckedTextView bronsteinTv;
+    AppCompatCheckedTextView fischerTv;
+    TextView typeDetailsTv;
+
+    @Override
+    int layoutRes() {
+        return R.layout.dialog_fragment_edit_time_increment;
+    }
+
+    public static EditTimeIncrementDialogFragment newInstance(TimeIncrement timeIncrement) {
+
+        Bundle args = new Bundle();
+        args.putParcelable(ARG_TIME_INCREMENT_KEY, timeIncrement);
+
+        EditTimeIncrementDialogFragment fragment = new EditTimeIncrementDialogFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (savedInstanceState == null) {
+            timeIncrement = requireArguments().getParcelable(ARG_TIME_INCREMENT_KEY);
+        } else {
+            timeIncrement = savedInstanceState.getParcelable(ARG_TIME_INCREMENT_KEY);
+        }
+
+        assert view != null;
+        secondsEt = view.findViewById(R.id.secondsEt);
+        minutesEt = view.findViewById(R.id.minutesEt);
+        delayTv = view.findViewById(R.id.delayBtn);
+        bronsteinTv = view.findViewById(R.id.bronsteinBtn);
+        fischerTv = view.findViewById(R.id.fisherBtn);
+        typeDetailsTv = view.findViewById(R.id.typeDetailsTv);
+
+        return view;
+    }
+
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        ((TextView) view.findViewById(R.id.titleTv)).setText(R.string.increment);
+        view.findViewById(R.id.backBtn).setOnClickListener(v -> dismissAllowingStateLoss());
+
+        ClockUtils.clearFocusOnActionDone(minutesEt);
+        ClockUtils.setClockTextWatcher(secondsEt);
+
+        if (savedInstanceState == null) {
+            int[] duration = timeIncrement.getDuration();
+            int minutes = duration[0] * 60 + duration[1];
+            minutesEt.setText(ClockUtils.twoDecimalPlacesFormat(minutes));
+            secondsEt.setText(ClockUtils.twoDecimalPlacesFormat(duration[2]));
+        }
+
+        delayTv.setOnClickListener(v -> setCheckedViews(TimeIncrement.Type.DELAY));
+        bronsteinTv.setOnClickListener(v -> setCheckedViews(TimeIncrement.Type.BRONSTEIN));
+        fischerTv.setOnClickListener(v -> setCheckedViews(TimeIncrement.Type.FISCHER));
+
+        setCheckedViews(timeIncrement.getType());
+    }
+
+    private void setCheckedViews(TimeIncrement.Type type) {
+        delayTv.setChecked(type == TimeIncrement.Type.DELAY);
+        bronsteinTv.setChecked(type == TimeIncrement.Type.BRONSTEIN);
+        fischerTv.setChecked(type == TimeIncrement.Type.FISCHER);
+
+        int subtitleRes;
+        switch (type) {
+            case DELAY:
+                subtitleRes = R.string.delay_option_subtitle;
+                break;
+            case BRONSTEIN:
+                subtitleRes = R.string.bronstein_option_subtitle;
+                break;
+            default:
+                subtitleRes = R.string.fischer_option_subtitle;
+                break;
+        }
+        typeDetailsTv.setText(subtitleRes);
+
+        timeIncrement.setType(type);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        AppTheme theme = ((BaseActivity) requireActivity()).selectedTheme;
+        if (theme != null) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                ColorStateList tintList = theme.colorStateListFocused(requireContext());
+                minutesEt.setBackgroundTintList(tintList);
+                secondsEt.setBackgroundTintList(tintList);
+            }
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(@NonNull Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putParcelable(ARG_TIME_INCREMENT_KEY, timeIncrement);
+    }
+
+    @Override
+    public void onDismiss(@NonNull DialogInterface dialog) {
+        super.onDismiss(dialog);
+
+        int minutes = ClockUtils.getIntOrZero(minutesEt);
+        int seconds = ClockUtils.getIntOrZero(secondsEt);
+        long duration = minutes * 60 * 1000L + seconds * 1000L;
+
+        Fragment parentFragment = getParentFragment();
+        if (parentFragment != null) {
+            ((OnTimeIncrementEditListener) parentFragment)
+                    .onTimeIncrementEditDone(timeIncrement.getType(), duration);
+        }
+    }
+
+    /**
+     * The callback interface used to indicate the user is done filling in
+     * the stage data (the user clicked on the 'Set' button).
+     */
+    public interface OnTimeIncrementEditListener {
+
+        /**
+         * @param type The increment Type that was set.
+         * @param time The time that was set in milliseconds.
+         */
+        void onTimeIncrementEditDone(TimeIncrement.Type type, long time);
+    }
+}
diff --git a/app/src/main/java/com/chess/clock/dialog/FullScreenDialogFragment.java b/app/src/main/java/com/chess/clock/dialog/FullScreenDialogFragment.java
new file mode 100644
index 0000000..53e9ded
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/dialog/FullScreenDialogFragment.java
@@ -0,0 +1,40 @@
+package com.chess.clock.dialog;
+
+import android.app.Dialog;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.content.ContextCompat;
+import androidx.fragment.app.DialogFragment;
+
+import com.chess.clock.R;
+
+abstract class FullScreenDialogFragment extends DialogFragment {
+    abstract int layoutRes();
+
+    @Nullable
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        return inflater.inflate(layoutRes(), container, false);
+    }
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
+        Dialog dialog = new Dialog(requireActivity(), R.style.AppTheme_DialogFullScreen);
+        FrameLayout content = new FrameLayout(requireActivity());
+        content.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        dialog.setContentView(content);
+        dialog.getWindow().setBackgroundDrawable(
+                new ColorDrawable(ContextCompat.getColor(requireContext(), R.color.windowBackground))
+        );
+        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        return dialog;
+    }
+}
diff --git a/app/src/main/java/com/chess/clock/dialog/StageEditorDialog.java b/app/src/main/java/com/chess/clock/dialog/StageEditorDialog.java
deleted file mode 100644
index 9654b07..0000000
--- a/app/src/main/java/com/chess/clock/dialog/StageEditorDialog.java
+++ /dev/null
@@ -1,148 +0,0 @@
-package com.chess.clock.dialog;
-
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.view.View;
-
-import com.chess.clock.compoundviews.StageEditorView;
-import com.chess.clock.compoundviews.TimePickerView;
-
-/**
- * A dialog that prompts the user to edit Stage values. This dialog extends TimePickerDialog as it
- * only adds a Stage moves field on top of the time picker, from TimePickerDialog.
- */
-public class StageEditorDialog extends TimePickerDialog {
-
-    private static final String MOVES = "moves";
-    private OnStageEditListener mCallback;
-    private StageEditorView mStageEditorView;
-    private int mInitialMoves;
-
-    /**
-     * @param context Parent context.
-     * @param theme   the theme to apply to this dialog
-     */
-    public StageEditorDialog(Context context, int theme) {
-        super(context, theme);
-    }
-
-    public void setOnStageEditListener(OnStageEditListener listener) {
-        mCallback = listener;
-    }
-
-    public void setInitialMoves(int initialMoves) {
-        mInitialMoves = initialMoves;
-        if (mStageEditorView != null) {
-            mStageEditorView.setCurrentMoves(mInitialMoves);
-        }
-    }
-
-    @Override
-    public void setView(View view) {
-        super.setView(view);
-        mStageEditorView = (StageEditorView) view;
-    }
-
-    /**
-     * We save Dialog state as the user might have change the fields values, and do
-     * configuration change. The thing is that these values were not saved by the
-     * wrapper Fragment (because the user didn't pressed 'Set' button yet), thus
-     * their initial values, which are set again in configuration change are
-     * deprecated, and we must restore the updated ones.
-     */
-    @Override
-    public Bundle onSaveInstanceState() {
-        Bundle state = super.onSaveInstanceState();
-        state.putInt(MOVES, mStageEditorView.getCurrentMoves());
-        return state;
-    }
-
-    @Override
-    public void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-        int moves = savedInstanceState.getInt(MOVES);
-        mStageEditorView.setCurrentMoves(moves);
-    }
-
-    public void onClick(DialogInterface dialog, int which) {
-        if (mCallback != null) {
-            if (which == BUTTON_POSITIVE) {
-
-                int moves = mStageEditorView.getCurrentMoves();
-                int hour = mStageEditorView.getCurrentHour();
-                int minute = mStageEditorView.getCurrentMinute();
-                int second = mStageEditorView.getCurrentSeconds();
-
-                long newDuration = (hour * 60 * 60 * 1000) + (second * 1000) + (minute * 60 * 1000);
-                mCallback.onStageEditDone(moves, newDuration);
-            }
-        }
-    }
-
-    /**
-     * The callback interface used to indicate the user is done filling in
-     * the stage data (the user clicked on the 'Set' button).
-     */
-    public interface OnStageEditListener {
-
-        /**
-         * @param moves The number of moves that was set.
-         * @param time  The time that was set in milliseconds.
-         */
-        void onStageEditDone(int moves, long time);
-    }
-
-    public static class Builder extends TimePickerDialog.Builder {
-
-        private int mMoves;
-        private boolean mMovesVisible;
-        private OnStageEditListener mOnStageEditListener;
-
-        public Builder(Context context) {
-            super(context);
-        }
-
-        /**
-         * SETTERS
-         */
-
-        public Builder setMovesVisible(boolean visible) {
-            mMovesVisible = visible;
-            return this;
-        }
-
-        public Builder setMoves(int moves) {
-            mMoves = moves;
-            return this;
-        }
-
-        public Builder setOnStageEditListener(OnStageEditListener listener) {
-            mOnStageEditListener = listener;
-            return this;
-        }
-
-        @Override
-        public StageEditorDialog create() {
-
-            // Create Stage Editor compound view, using HOUR_MINUTE_SECOND type as default.
-            StageEditorView stageEditorView = new StageEditorView(mContext,
-                    TimePickerView.Type.HOUR_MINUTE_SECOND, mMovesVisible);
-
-            final StageEditorDialog dialog = new StageEditorDialog(mContext, mTheme);
-
-            // setView() mandatory to be called first, as so the following are applied correctly.
-            dialog.setView(stageEditorView);
-            dialog.setInitialMoves(mMoves);
-            dialog.setInitialHour(mHour);
-            dialog.setInitialMinute(mMinute);
-            dialog.setInitialSecond(mSecond);
-            dialog.setTitle(mTitle);
-            dialog.setButton(BUTTON_POSITIVE, mPositiveButtonText, dialog);
-            dialog.setButton(BUTTON_NEGATIVE, mNegativeButtonText, dialog);
-            dialog.setOnStageEditListener(mOnStageEditListener);
-
-            return dialog;
-        }
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/dialog/TimeIncrementEditorDialog.java b/app/src/main/java/com/chess/clock/dialog/TimeIncrementEditorDialog.java
deleted file mode 100644
index 4a57df6..0000000
--- a/app/src/main/java/com/chess/clock/dialog/TimeIncrementEditorDialog.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.chess.clock.dialog;
-
-import android.content.Context;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.view.View;
-
-import com.chess.clock.compoundviews.TimeIncrementEditorView;
-import com.chess.clock.compoundviews.TimePickerView;
-import com.chess.clock.engine.TimeIncrement;
-
-/**
- * A dialog that prompts the user to edit Stage values. This dialog extends TimePickerDialog as it
- * only adds a Stage moves field on top of the time picker, from TimePickerDialog.
- */
-public class TimeIncrementEditorDialog extends TimePickerDialog {
-
-    private static final String INCREMENT_TYPE = "increment_type";
-    private OnTimeIncrementEditListener mCallback;
-    private TimeIncrementEditorView mTimeIncrementEditorView;
-    private int mInitialTimeIncrementType;
-
-    /**
-     * @param context Parent context.
-     * @param theme   Theme to apply to this dialog.
-     */
-    public TimeIncrementEditorDialog(Context context, int theme) {
-        super(context, theme);
-    }
-
-    public void setOnStageEditListener(OnTimeIncrementEditListener listener) {
-        mCallback = listener;
-    }
-
-    public void setInitialType(int type) {
-        mInitialTimeIncrementType = type;
-        if (mTimeIncrementEditorView != null) {
-            mTimeIncrementEditorView.setCurrentTimeIncrementType(mInitialTimeIncrementType);
-        }
-    }
-
-    @Override
-    public void setView(View view) {
-        super.setView(view);
-        mTimeIncrementEditorView = (TimeIncrementEditorView) view;
-    }
-
-    /**
-     * We save Dialog state as the user might have change the fields values, and do
-     * configuration change. The thing is that these values were not saved by the
-     * wrapper Fragment (because the user didn't pressed 'Set' button yet), thus
-     * their initial values, which are set again in configuration change are
-     * deprecated, and we must restore the updated ones.
-     */
-    @Override
-    public Bundle onSaveInstanceState() {
-        Bundle state = super.onSaveInstanceState();
-        state.putInt(INCREMENT_TYPE, mTimeIncrementEditorView.getCurrentIncrementType());
-        return state;
-    }
-
-    @Override
-    public void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-        int moves = savedInstanceState.getInt(INCREMENT_TYPE);
-        mTimeIncrementEditorView.setCurrentTimeIncrementType(moves);
-    }
-
-    public void onClick(DialogInterface dialog, int which) {
-        if (mCallback != null) {
-            if (which == BUTTON_POSITIVE) {
-
-                TimeIncrement.Type type = TimeIncrement.Type.fromInteger(mTimeIncrementEditorView.getCurrentIncrementType());
-                int hour = mTimeIncrementEditorView.getCurrentHour();
-                int minute = mTimeIncrementEditorView.getCurrentMinute();
-                int second = mTimeIncrementEditorView.getCurrentSeconds();
-
-                long newDuration = (hour * 60 * 60 * 1000) + (second * 1000) + (minute * 60 * 1000);
-                mCallback.onTimeIncrementEditDone(type, newDuration);
-            }
-        }
-    }
-
-    /**
-     * The callback interface used to indicate the user is done filling in
-     * the stage data (the user clicked on the 'Set' button).
-     */
-    public interface OnTimeIncrementEditListener {
-
-        /**
-         * @param type The increment Type that was set.
-         * @param time The time that was set in milliseconds.
-         */
-        void onTimeIncrementEditDone(TimeIncrement.Type type, long time);
-    }
-
-    public static class Builder extends TimePickerDialog.Builder {
-
-        private int mType;
-        private OnTimeIncrementEditListener mOnTimeIncrementEditListener;
-
-        public Builder(Context context) {
-            super(context);
-        }
-
-        /**
-         * SETTERS
-         */
-        public Builder setTimeIncrementType(int type) {
-            mType = type;
-            return this;
-        }
-
-        public Builder setOnTimeIncrementEditListener(OnTimeIncrementEditListener listener) {
-            mOnTimeIncrementEditListener = listener;
-            return this;
-        }
-
-        @Override
-        public TimeIncrementEditorDialog create() {
-
-            // Create Stage Editor compound view, using HOUR_MINUTE_SECOND type as default.
-            TimeIncrementEditorView stageEditorView = new TimeIncrementEditorView(mContext,
-                    TimePickerView.Type.MINUTE_SECOND);
-
-            final TimeIncrementEditorDialog dialog = new TimeIncrementEditorDialog(mContext, mTheme);
-
-            // setView() mandatory to be called first, as so the following are applied correctly.
-            dialog.setView(stageEditorView);
-            dialog.setInitialType(mType);
-            dialog.setInitialHour(mHour);
-            dialog.setInitialMinute(mMinute);
-            dialog.setInitialSecond(mSecond);
-            dialog.setTitle(mTitle);
-            dialog.setButton(BUTTON_POSITIVE, mPositiveButtonText, dialog);
-            dialog.setButton(BUTTON_NEGATIVE, mNegativeButtonText, dialog);
-            dialog.setOnStageEditListener(mOnTimeIncrementEditListener);
-
-            return dialog;
-        }
-    }
-}
diff --git a/app/src/main/java/com/chess/clock/dialog/TimePickerDialog.java b/app/src/main/java/com/chess/clock/dialog/TimePickerDialog.java
deleted file mode 100644
index b89700b..0000000
--- a/app/src/main/java/com/chess/clock/dialog/TimePickerDialog.java
+++ /dev/null
@@ -1,235 +0,0 @@
-package com.chess.clock.dialog;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
-import android.os.Bundle;
-import android.view.View;
-import android.view.Window;
-
-import com.chess.clock.compoundviews.TimePickerView;
-
-/**
- * A dialog that prompts the user for the time value.
- */
-public class TimePickerDialog extends AlertDialog implements OnClickListener {
-
-    private static final String HOUR = "hour";
-    private static final String MINUTE = "minute";
-    private static final String SECONDS = "seconds";
-    protected TimePickerView mTimePickerView;
-    int mInitialHour;
-    int mInitialMinute;
-    int mInitialSecond;
-    private OnTimeSetListener mCallback;
-
-    /**
-     * @param context Parent.
-     * @param theme   the theme to apply to this dialog
-     */
-    public TimePickerDialog(Context context, int theme) {
-        super(context, theme);
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-    }
-
-    public void setOnTimeSetListener(OnTimeSetListener listener) {
-        mCallback = listener;
-    }
-
-    public void setInitialHour(int initialHour) {
-        mInitialHour = initialHour;
-        if (mTimePickerView != null) {
-            mTimePickerView.setCurrentHour(initialHour);
-        }
-    }
-
-    public void setInitialMinute(int initialMinute) {
-        mInitialMinute = initialMinute;
-        if (mTimePickerView != null) {
-            mTimePickerView.setCurrentMinute(initialMinute);
-        }
-    }
-
-    public void setInitialSecond(int initialSecond) {
-        mInitialSecond = initialSecond;
-        if (mTimePickerView != null) {
-            mTimePickerView.setCurrentSecond(initialSecond);
-        }
-    }
-
-    public void onClick(DialogInterface dialog, int which) {
-        if (mCallback != null) {
-            mTimePickerView.clearFocus();
-            if (which == BUTTON_POSITIVE) {
-                mCallback.onTimeSet(mTimePickerView.getCurrentHour(),
-                        mTimePickerView.getCurrentMinute(), mTimePickerView.getCurrentSeconds());
-            }
-        }
-    }
-
-    @Override
-    public void setView(View view) {
-        super.setView(view);
-        mTimePickerView = (TimePickerView) view;
-    }
-
-    /**
-     * We save Dialog state as the user might have change the time picker values,
-     * and do configuration change. The thing is that these values were not saved
-     * by the wrapper Fragment (because the user didn't pressed 'Set' button yet),
-     * thus their initial values, which are set again in configuration change are
-     * deprecated, and we must restore the updated ones.
-     */
-    @Override
-    public Bundle onSaveInstanceState() {
-        Bundle state = super.onSaveInstanceState();
-        state.putInt(HOUR, mTimePickerView.getCurrentHour());
-        state.putInt(MINUTE, mTimePickerView.getCurrentMinute());
-        state.putInt(SECONDS, mTimePickerView.getCurrentSeconds());
-        return state;
-    }
-
-    @Override
-    public void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-        int hour = savedInstanceState.getInt(HOUR);
-        int minute = savedInstanceState.getInt(MINUTE);
-        int seconds = savedInstanceState.getInt(SECONDS);
-        mTimePickerView.setCurrentHour(hour);
-        mTimePickerView.setCurrentMinute(minute);
-        mTimePickerView.setCurrentSecond(seconds);
-    }
-
-    public static enum Type {
-
-        MINUTE_SECOND(0),
-        HOUR_MINUTE_SECOND(1);
-
-        private final int value;
-
-        private Type(int value) {
-            this.value = value;
-        }
-
-        public static Type fromInteger(int type) {
-            switch (type) {
-                case 0:
-                    return MINUTE_SECOND;
-                case 1:
-                    return HOUR_MINUTE_SECOND;
-                default:
-                    return HOUR_MINUTE_SECOND;
-            }
-        }
-
-        public int getValue() {
-            return value;
-        }
-    }
-
-    /**
-     * The callback interface used to indicate the user is done filling in
-     * the time (they clicked on the 'Set' button).
-     */
-    public interface OnTimeSetListener {
-
-        /**
-         * @param hour   The hour that was set.
-         * @param minute The minute that was set.
-         * @param second The second that was set.
-         */
-        void onTimeSet(int hour, int minute, int second);
-    }
-
-    public static class Builder {
-
-        protected Context mContext;
-        protected int mTheme;
-
-        protected Type mType = Type.HOUR_MINUTE_SECOND;
-        protected String mTitle;
-
-        protected CharSequence mPositiveButtonText;
-        protected CharSequence mNegativeButtonText;
-
-        protected int mHour;
-        protected int mMinute;
-        protected int mSecond;
-
-        private OnTimeSetListener mOnTimeSetListener;
-
-        /**
-         * CONSTRUCTOR
-         */
-
-        public Builder(Context context) {
-            mContext = context;
-            mTheme = 0;
-        }
-
-        /**
-         * SETTERS
-         */
-
-        public Builder setType(Type type) {
-            mType = type;
-            return this;
-        }
-
-        public Builder setTitle(String title) {
-            mTitle = title;
-            return this;
-        }
-
-        public Builder setPositiveButton(CharSequence text) {
-            mPositiveButtonText = text;
-            return this;
-        }
-
-        public Builder setNegativeButton(CharSequence text) {
-            mNegativeButtonText = text;
-            return this;
-        }
-
-        public Builder setHour(int hour) {
-            mHour = hour;
-            return this;
-        }
-
-        public Builder setMinute(int minute) {
-            mMinute = minute;
-            return this;
-        }
-
-        public Builder setSecond(int second) {
-            mSecond = second;
-            return this;
-        }
-
-        public Builder setOnTimeSetListener(OnTimeSetListener listener) {
-            mOnTimeSetListener = listener;
-            return this;
-        }
-
-        public TimePickerDialog create() {
-
-            // Create timer compound view, using HOUR_MINUTE_SECOND type as default.
-            TimePickerView tp = new TimePickerView(mContext, TimePickerView.Type.fromInteger(mType.getValue()));
-
-            final TimePickerDialog dialog = new TimePickerDialog(mContext, mTheme);
-
-            // setView() mandatory to be called first, as so the following are applied correctly.
-            dialog.setView(tp);
-            dialog.setInitialHour(mHour);
-            dialog.setInitialMinute(mMinute);
-            dialog.setInitialSecond(mSecond);
-            dialog.setTitle(mTitle);
-            dialog.setOnTimeSetListener(mOnTimeSetListener);
-            dialog.setButton(BUTTON_POSITIVE, mPositiveButtonText, dialog);
-            dialog.setButton(BUTTON_NEGATIVE, mNegativeButtonText, dialog);
-
-            return dialog;
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/chess/clock/engine/CountDownTimer.java b/app/src/main/java/com/chess/clock/engine/CountDownTimer.java
index 17268f1..95d710e 100644
--- a/app/src/main/java/com/chess/clock/engine/CountDownTimer.java
+++ b/app/src/main/java/com/chess/clock/engine/CountDownTimer.java
@@ -562,31 +562,31 @@ public class CountDownTimer implements TimeControl.TimeControlListener {
          *
          * @param millisUntilFinished Time until finish in milliseconds.
          */
-        public void onClockTimeUpdate(long millisUntilFinished);
+        void onClockTimeUpdate(long millisUntilFinished);
 
         /**
          * Called when the time finishes.
          */
-        public void onClockFinish();
+        void onClockFinish();
 
         /**
          * Called when new game stage begins.
          *
          * @param stage The current game stage.
          */
-        public void onStageUpdate(Stage stage);
+        void onStageUpdate(Stage stage);
 
         /**
          * Called when the move count is updated.
          */
-        public void onMoveCountUpdate(int moves);
+        void onMoveCountUpdate(int moves);
 
         /**
          * Called only on registering listener.
          *
          * @param stagesNumber Total number of stages.
          */
-        public void onTotalStageNumber(int stagesNumber);
+        void onTotalStageNumber(int stagesNumber);
     }
 
     /**
@@ -597,6 +597,6 @@ public class CountDownTimer implements TimeControl.TimeControlListener {
         /**
          * Called when the time finishes.
          */
-        public void onClockFinish();
+        void onClockFinish();
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/chess/clock/engine/Stage.java b/app/src/main/java/com/chess/clock/engine/Stage.java
index 3a048ed..ec3e501 100644
--- a/app/src/main/java/com/chess/clock/engine/Stage.java
+++ b/app/src/main/java/com/chess/clock/engine/Stage.java
@@ -12,6 +12,12 @@ import android.util.Log;
 public class Stage implements Parcelable, Cloneable {
 
     private final static String TAG = Stage.class.getName();
+    public static final int STAGE_ONE_ID = 0;
+    public static final int STAGE_TWO_ID = 1;
+    public static final int STAGE_THREE_ID = 2;
+    public static final int MAX_ALLOWED_STAGES_COUNT = 3;
+    public static final int DEFAULT_STAGE_MOVES = 20;
+    public static final int STAGE_DURATION_5_MIN = 300000;
 
     public static final Parcelable.Creator<Stage> CREATOR = new Parcelable.Creator<Stage>() {
         public Stage createFromParcel(Parcel source) {
@@ -94,7 +100,7 @@ public class Stage implements Parcelable, Cloneable {
      * @param id
      */
     public void setId(int id) {
-        if (id >= 0 && id < 3) {
+        if (id >= 0 && id < MAX_ALLOWED_STAGES_COUNT) {
             mId = id;
         }
     }
@@ -361,7 +367,7 @@ public class Stage implements Parcelable, Cloneable {
 
         private final int value;
 
-        private StageType(int value) {
+        StageType(int value) {
             this.value = value;
         }
 
@@ -402,7 +408,7 @@ public class Stage implements Parcelable, Cloneable {
 
         private final int value;
 
-        private StageState(int value) {
+        StageState(int value) {
             this.value = value;
         }
 
@@ -433,7 +439,7 @@ public class Stage implements Parcelable, Cloneable {
          *
          * @param stageFinishedNumber The identifier of the stage finished.
          */
-        public void onStageFinished(int stageFinishedNumber);
+        void onStageFinished(int stageFinishedNumber);
     }
 
     /**
diff --git a/app/src/main/java/com/chess/clock/engine/StageManager.java b/app/src/main/java/com/chess/clock/engine/StageManager.java
index 83864a4..945bb19 100644
--- a/app/src/main/java/com/chess/clock/engine/StageManager.java
+++ b/app/src/main/java/com/chess/clock/engine/StageManager.java
@@ -100,32 +100,36 @@ public class StageManager implements Parcelable, Cloneable, Stage.OnStageFinishL
      * Add new Stage object
      */
     public void addNewStage() {
-
-        if (getTotalStages() < 3) {
-
-            if (getTotalStages() == 1) {
-
-                // Set first stage as type MOVES, with 1 move
-                mStages.get(0).setStageType(Stage.StageType.MOVES);
-                mStages.get(0).setMoves(20);
-
-                Stage newStage = new Stage(1, 300000);
-                newStage.setStageListener(this);
-                mStages.add(newStage);
-
-            } else if (getTotalStages() == 2) {
-
-                // Set second stage as Type MOVES, with 1 move each.
-                mStages.get(1).setStageType(Stage.StageType.MOVES);
-                mStages.get(1).setMoves(20);
-
-                Stage newStage = new Stage(2, 300000);
-                newStage.setStageListener(this);
-                mStages.add(newStage);
-            }
+        if (!canAddStage()) return;
+
+        if (getTotalStages() == 0) {
+            Stage newStage = new Stage(Stage.STAGE_ONE_ID, Stage.STAGE_DURATION_5_MIN);
+            newStage.setStageListener(this);
+            mStages.add(newStage);
+        } else if (getTotalStages() == 1) {
+            // Set first stage as type MOVES, with 1 move
+            mStages.get(Stage.STAGE_ONE_ID).setStageType(Stage.StageType.MOVES);
+            mStages.get(Stage.STAGE_ONE_ID).setMoves(Stage.DEFAULT_STAGE_MOVES);
+
+            Stage newStage = new Stage(Stage.STAGE_TWO_ID, Stage.STAGE_DURATION_5_MIN);
+            newStage.setStageListener(this);
+            mStages.add(newStage);
+
+        } else if (getTotalStages() == 2) {
+            // Set second stage as Type MOVES, with 1 move each.
+            mStages.get(Stage.STAGE_TWO_ID).setStageType(Stage.StageType.MOVES);
+            mStages.get(Stage.STAGE_TWO_ID).setMoves(Stage.DEFAULT_STAGE_MOVES);
+
+            Stage newStage = new Stage(Stage.STAGE_THREE_ID, Stage.STAGE_DURATION_5_MIN);
+            newStage.setStageListener(this);
+            mStages.add(newStage);
         }
     }
 
+    public boolean canAddStage() {
+        return getTotalStages() < Stage.MAX_ALLOWED_STAGES_COUNT;
+    }
+
     /**
      * Remove the stage from the list, update others stages type accordingly.
      *
@@ -305,11 +309,11 @@ public class StageManager implements Parcelable, Cloneable, Stage.OnStageFinishL
          *
          * @param stage The new stage.
          */
-        public void onNewStageUpdate(Stage stage);
+        void onNewStageUpdate(Stage stage);
 
         /**
          * Called when total move count is updated.
          */
-        public void onMoveCountUpdate(int moveCount);
+        void onMoveCountUpdate(int moveCount);
     }
 }
diff --git a/app/src/main/java/com/chess/clock/engine/TimeControl.java b/app/src/main/java/com/chess/clock/engine/TimeControl.java
index 35ce99b..fae4cb4 100644
--- a/app/src/main/java/com/chess/clock/engine/TimeControl.java
+++ b/app/src/main/java/com/chess/clock/engine/TimeControl.java
@@ -220,11 +220,11 @@ public class TimeControl implements Parcelable, Cloneable, StageManager.StageMan
          *
          * @param stage The current game stage.
          */
-        public void onStageUpdate(Stage stage);
+        void onStageUpdate(Stage stage);
 
         /**
          * Called when the move count is updated.
          */
-        public void onMoveCountUpdate(int moves);
+        void onMoveCountUpdate(int moves);
     }
 }
diff --git a/app/src/main/java/com/chess/clock/engine/TimeControlManager.java b/app/src/main/java/com/chess/clock/engine/TimeControlManager.java
index 39af06d..86b2f8f 100644
--- a/app/src/main/java/com/chess/clock/engine/TimeControlManager.java
+++ b/app/src/main/java/com/chess/clock/engine/TimeControlManager.java
@@ -170,9 +170,10 @@ public class TimeControlManager {
         isNewEditableTimeControl = true;
 
         // Set default stage and time increment
-        Stage stage = new Stage(0, 300000);
-        TimeIncrement timeIncrement = new TimeIncrement(TimeIncrement.Type.FISCHER, 5000);
-        TimeControl blank = new TimeControl(null, new Stage[]{stage}, timeIncrement);
+        Stage stage1 = new Stage(0, 2 * 60 * 60 * 1000L, 40);
+        Stage stage2 = new Stage(1, 60 * 60 * 1000L);
+        TimeIncrement timeIncrement = new TimeIncrement(TimeIncrement.Type.FISCHER, 0);
+        TimeControl blank = new TimeControl(null, new Stage[]{stage1, stage2}, timeIncrement);
 
         // Set current editable time control with a new "blank" time control
         try {
@@ -240,6 +241,6 @@ public class TimeControlManager {
         /**
          * Called when Time Control list gets empty.
          */
-        public void onTimeControlListEmpty();
+        void onTimeControlListEmpty();
     }
 }
diff --git a/app/src/main/java/com/chess/clock/engine/TimeControlParser.java b/app/src/main/java/com/chess/clock/engine/TimeControlParser.java
index 431b783..fc58ab6 100644
--- a/app/src/main/java/com/chess/clock/engine/TimeControlParser.java
+++ b/app/src/main/java/com/chess/clock/engine/TimeControlParser.java
@@ -109,8 +109,8 @@ public class TimeControlParser {
                 timeIncrementJSONObject.put(TC_JSON_TYPE, tc.getTimeControlPlayerOne().getTimeIncrement().getType().getValue());
 
                 JSONObject timeIncrementPlayerTwoJSONObject = new JSONObject();
-                timeIncrementPlayerTwoJSONObject.put(TC_JSON_VALUE, tc.getTimeControlPlayerOne().getTimeIncrement().getValue());
-                timeIncrementPlayerTwoJSONObject.put(TC_JSON_TYPE, tc.getTimeControlPlayerOne().getTimeIncrement().getType().getValue());
+                timeIncrementPlayerTwoJSONObject.put(TC_JSON_VALUE, tc.getTimeControlPlayerTwo().getTimeIncrement().getValue());
+                timeIncrementPlayerTwoJSONObject.put(TC_JSON_TYPE, tc.getTimeControlPlayerTwo().getTimeIncrement().getType().getValue());
 
                 // Add name, stages and time increment to TimeControl json object.
                 timeControlJSONObject.put(TC_JSON_NAME, tc.getTimeControlPlayerOne().getName());
diff --git a/app/src/main/java/com/chess/clock/engine/TimeControlWrapper.java b/app/src/main/java/com/chess/clock/engine/TimeControlWrapper.java
index 31a876d..75c5e00 100644
--- a/app/src/main/java/com/chess/clock/engine/TimeControlWrapper.java
+++ b/app/src/main/java/com/chess/clock/engine/TimeControlWrapper.java
@@ -3,85 +3,93 @@ package com.chess.clock.engine;
 import android.os.Parcel;
 import android.os.Parcelable;
 
-public class TimeControlWrapper implements Parcelable, Cloneable{
-  private TimeControl mTimeControlPlayerOne;
-  private TimeControl mTimeControlPlayerTwo;
-  private boolean mSameAsPlayerOne;
-
-  public TimeControlWrapper(TimeControl playerOne, TimeControl playerTwo) {
-    mTimeControlPlayerOne = playerOne;
-    mTimeControlPlayerTwo = playerTwo;
-    mSameAsPlayerOne = true;
-  }
-
-  private TimeControlWrapper(Parcel in) {
-    mTimeControlPlayerOne = in.readParcelable(TimeControl.class.getClassLoader());
-    mTimeControlPlayerTwo = in.readParcelable(TimeControl.class.getClassLoader());
-    mSameAsPlayerOne = in.readParcelable(boolean.class.getClassLoader());
-  }
-
-  public static final Creator<TimeControlWrapper> CREATOR = new Creator<TimeControlWrapper>() {
+public class TimeControlWrapper implements Parcelable, Cloneable {
+    private TimeControl mTimeControlPlayerOne;
+    private TimeControl mTimeControlPlayerTwo;
+    private boolean mSameAsPlayerOne;
+
+    public TimeControlWrapper(TimeControl playerOne, TimeControl playerTwo) {
+        mTimeControlPlayerOne = playerOne;
+        mTimeControlPlayerTwo = playerTwo;
+        mSameAsPlayerOne = true;
+    }
+
+    private TimeControlWrapper(Parcel in) {
+        mTimeControlPlayerOne = in.readParcelable(TimeControl.class.getClassLoader());
+        mTimeControlPlayerTwo = in.readParcelable(TimeControl.class.getClassLoader());
+        mSameAsPlayerOne = in.readByte() != 0;
+    }
+
+    public static final Creator<TimeControlWrapper> CREATOR = new Creator<TimeControlWrapper>() {
+        @Override
+        public TimeControlWrapper createFromParcel(Parcel in) {
+            return new TimeControlWrapper(in);
+        }
+
+        @Override
+        public TimeControlWrapper[] newArray(int size) {
+            return new TimeControlWrapper[size];
+        }
+    };
+
+    public TimeControl getTimeControlPlayerOne() {
+        return mTimeControlPlayerOne;
+    }
+
+    public void setTimeControlPlayerOne(TimeControl timeControl) {
+        mTimeControlPlayerOne = timeControl;
+    }
+
+    public TimeControl getTimeControlPlayerTwo() {
+        return mTimeControlPlayerTwo;
+    }
+
+    public void setTimeControlPlayerTwo(TimeControl timeControl) {
+        mTimeControlPlayerTwo = timeControl;
+    }
+
+    public boolean isSameAsPlayerOne() {
+        return mSameAsPlayerOne;
+    }
+
+    public void setSameAsPlayerOne(boolean sameAsPlayerOne) {
+        mSameAsPlayerOne = sameAsPlayerOne;
+    }
+
     @Override
-    public TimeControlWrapper createFromParcel(Parcel in) {
-      return new TimeControlWrapper(in);
+    public Object clone() throws CloneNotSupportedException {
+        TimeControlWrapper clone = (TimeControlWrapper) super.clone();
+
+        // Clone StageManager object and set this clone as his listener.
+        clone.mTimeControlPlayerOne = (TimeControl) mTimeControlPlayerOne.clone();
+        clone.mTimeControlPlayerTwo = (TimeControl) mTimeControlPlayerTwo.clone();
+        clone.mSameAsPlayerOne = mSameAsPlayerOne;
+
+        return clone;
     }
 
     @Override
-    public TimeControlWrapper[] newArray(int size) {
-      return new TimeControlWrapper[size];
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeParcelable(mTimeControlPlayerOne, flags);
+        dest.writeParcelable(mTimeControlPlayerTwo, flags);
+    }
+
+    public boolean isEqual(TimeControlWrapper wrapper) {
+        return mTimeControlPlayerOne.isEqual(wrapper.getTimeControlPlayerOne()) &&
+                mTimeControlPlayerTwo.isEqual(wrapper.getTimeControlPlayerTwo()) &&
+                mSameAsPlayerOne == wrapper.isSameAsPlayerOne();
+    }
+
+    public boolean bothUsersHaveAtLeastOneStage() {
+        if (mSameAsPlayerOne) {
+            return mTimeControlPlayerOne.getStageManager().getTotalStages() > 0;
+        } else {
+            return mTimeControlPlayerOne.getStageManager().getTotalStages() > 0 && mTimeControlPlayerTwo.getStageManager().getTotalStages() > 0;
+        }
     }
-  };
-
-  public TimeControl getTimeControlPlayerOne() {
-    return mTimeControlPlayerOne;
-  }
-
-  public void setTimeControlPlayerOne(TimeControl timeControl) {
-    mTimeControlPlayerOne = timeControl;
-  }
-
-  public TimeControl getTimeControlPlayerTwo() {
-    return mTimeControlPlayerTwo;
-  }
-
-  public void setTimeControlPlayerTwo(TimeControl timeControl) {
-    mTimeControlPlayerTwo = timeControl;
-  }
-
-  public boolean isSameAsPlayerOne() {
-    return mSameAsPlayerOne;
-  }
-
-  public void setSameAsPlayerOne(boolean sameAsPlayerOne) {
-    mSameAsPlayerOne = sameAsPlayerOne;
-  }
-
-  @Override
-  public Object clone() throws CloneNotSupportedException {
-    TimeControlWrapper clone = (TimeControlWrapper) super.clone();
-
-    // Clone StageManager object and set this clone as his listener.
-    clone.mTimeControlPlayerOne = (TimeControl) mTimeControlPlayerOne.clone();
-    clone.mTimeControlPlayerTwo = (TimeControl) mTimeControlPlayerTwo.clone();
-    clone.mSameAsPlayerOne = mSameAsPlayerOne;
-
-    return clone;
-  }
-
-  @Override
-  public int describeContents() {
-    return 0;
-  }
-
-  @Override
-  public void writeToParcel(Parcel dest, int flags) {
-    dest.writeParcelable(mTimeControlPlayerOne, flags);
-    dest.writeParcelable(mTimeControlPlayerTwo, flags);
-  }
-
-  public boolean isEqual(TimeControlWrapper wrapper) {
-    return mTimeControlPlayerOne.isEqual(wrapper.getTimeControlPlayerOne()) &&
-        mTimeControlPlayerTwo.isEqual(wrapper.getTimeControlPlayerTwo()) &&
-        mSameAsPlayerOne == wrapper.isSameAsPlayerOne();
-  }
 }
diff --git a/app/src/main/java/com/chess/clock/engine/TimeIncrement.java b/app/src/main/java/com/chess/clock/engine/TimeIncrement.java
index 6b70f28..d2998c3 100644
--- a/app/src/main/java/com/chess/clock/engine/TimeIncrement.java
+++ b/app/src/main/java/com/chess/clock/engine/TimeIncrement.java
@@ -184,7 +184,7 @@ public class TimeIncrement implements Parcelable, Cloneable {
 
         private final int value;
 
-        private Type(int value) {
+        Type(int value) {
             this.value = value;
         }
 
diff --git a/app/src/main/java/com/chess/clock/entities/AppTheme.java b/app/src/main/java/com/chess/clock/entities/AppTheme.java
index bb37137..00befcb 100644
--- a/app/src/main/java/com/chess/clock/entities/AppTheme.java
+++ b/app/src/main/java/com/chess/clock/entities/AppTheme.java
@@ -37,6 +37,20 @@ public enum AppTheme {
                 new int[]{-android.R.attr.state_checked}
         };
 
+        int[] colors = new int[]{
+                color(context),
+                ContextCompat.getColor(context, R.color.gray)
+        };
+
+        return new ColorStateList(states, colors);
+    }
+
+    public ColorStateList colorStateListFocused(Context context) {
+        int[][] states = new int[][]{
+                new int[]{android.R.attr.state_enabled, android.R.attr.state_focused},
+                new int[]{}
+        };
+
         int[] colors = new int[]{
                 color(context),
                 ContextCompat.getColor(context, R.color.white_20)
diff --git a/app/src/main/java/com/chess/clock/fragments/StageEditorDialogFragment.java b/app/src/main/java/com/chess/clock/fragments/StageEditorDialogFragment.java
deleted file mode 100644
index 2da050a..0000000
--- a/app/src/main/java/com/chess/clock/fragments/StageEditorDialogFragment.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.chess.clock.fragments;
-
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import androidx.fragment.app.DialogFragment;
-
-import com.chess.clock.R;
-import com.chess.clock.dialog.StageEditorDialog;
-import com.chess.clock.dialog.TimePickerDialog;
-import com.chess.clock.engine.Stage;
-
-/**
- * Stage Editor Dialog Fragment. This DialogFragment extends TimePickerDialogFragment. Overriding
- * Dialog creation, adds a new layout to Dialog content view which adds
- * the moves number edit text field on top of TimePicker widget.
- */
-public class StageEditorDialogFragment extends DialogFragment {
-
-    /**
-     * Save Instance keys
-     */
-    protected static final String KEY_STAGE = "key_stage";
-    protected Context mContext;
-    /**
-     * State
-     */
-    Stage mStage;
-
-    /**
-     * Mandatory constructor
-     */
-    public StageEditorDialogFragment() {
-    }
-
-    /**
-     * Dialog Fragment constructor for Editing Stages.
-     *
-     * @param context Context for the Dialog.
-     * @param stage   Stage being edited.
-     */
-    public StageEditorDialogFragment(Context context, Stage stage) {
-        mContext = context;
-        mStage = stage;
-    }
-
-    /**
-     * Override Dialog creation to use StageEditorDialog instead of TimePickerDialog.
-     */
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-
-        if (savedInstanceState != null) {
-            mContext = getActivity(); // Update activity reference
-            mStage = savedInstanceState.getParcelable(KEY_STAGE);
-        }
-
-        // Get stage details
-        int[] time = mStage.getTime();
-        int hour = time[0];
-        int minute = time[1];
-        int second = time[2];
-        boolean movesVisible = mStage.getStageType() == Stage.StageType.MOVES;
-        int moves = mStage.getTotalMoves();
-
-        StageEditorDialog.Builder builder = new StageEditorDialog.Builder(mContext);
-        builder.setTitle(mContext.getString(R.string.stage_editor_dialog_title));
-        builder.setPositiveButton(mContext.getString(R.string.tstage_editor_dialog_set));
-        builder.setNegativeButton(mContext.getString(R.string.stage_editor_dialog_cancel));
-        builder.setHour(hour);
-        builder.setMinute(minute);
-        builder.setSecond(second);
-        builder.setMovesVisible(movesVisible);
-        builder.setMoves(moves);
-        builder.setType(TimePickerDialog.Type.HOUR_MINUTE_SECOND);
-        builder.setOnStageEditListener((StageEditorDialog.OnStageEditListener) getTargetFragment());
-
-        return builder.create();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        outState.putParcelable(KEY_STAGE, mStage);
-        super.onSaveInstanceState(outState);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java b/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
index a9197c9..0babdc8 100644
--- a/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
+++ b/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
@@ -1,123 +1,80 @@
 package com.chess.clock.fragments;
 
-import android.app.Activity;
+import static android.view.View.GONE;
+import static com.chess.clock.util.ClockUtils.getIntOrZero;
+import static com.chess.clock.util.ClockUtils.setClockTextWatcher;
+import static com.chess.clock.util.ClockUtils.twoDecimalPlacesFormat;
+
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.app.Service;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.os.Build;
 import android.os.Bundle;
-import com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener;
-import androidx.fragment.app.DialogFragment;
-import androidx.fragment.app.Fragment;
-import androidx.appcompat.widget.SwitchCompat;
 import android.text.Editable;
 import android.text.TextWatcher;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.AdapterView;
 import android.widget.EditText;
-import android.widget.FrameLayout;
-import android.widget.ListView;
-import android.widget.TextView;
+import android.widget.LinearLayout;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.widget.SwitchCompat;
+import androidx.core.graphics.drawable.DrawableCompat;
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+
 import com.chess.clock.R;
-import com.chess.clock.adapters.StageAdapter;
-import com.chess.clock.dialog.StageEditorDialog;
-import com.chess.clock.dialog.TimeIncrementEditorDialog;
+import com.chess.clock.dialog.EditStageDialogFragment;
+import com.chess.clock.dialog.EditTimeIncrementDialogFragment;
 import com.chess.clock.engine.Stage;
 import com.chess.clock.engine.TimeControl;
 import com.chess.clock.engine.TimeControlWrapper;
 import com.chess.clock.engine.TimeIncrement;
-
-import static android.view.View.GONE;
-import static android.view.View.VISIBLE;
+import com.chess.clock.entities.AppTheme;
+import com.chess.clock.views.StageRowView;
+import com.chess.clock.views.ViewUtils;
+import com.google.android.material.tabs.TabLayout;
 
 /**
  * UI fragment to create and edit a TimeControl.
  */
-public class TimeControlFragment extends Fragment implements StageEditorDialog.OnStageEditListener,
-        TimeIncrementEditorDialog.OnTimeIncrementEditListener {
-
-    /**
-     * This interface must be implemented by activities that contain this fragment to allow interaction.
-     */
-    public interface BottomNavigationActionListener {
-
-        void setVisibility(int visibility);
-
-        void setSelected(int id);
-
-        void setBottomNavigationListener(OnNavigationItemSelectedListener listener);
-    }
+public class TimeControlFragment extends BaseFragment implements EditStageDialogFragment.OnStageEditListener,
+        EditTimeIncrementDialogFragment.OnTimeIncrementEditListener {
 
     /**
-     * Save Instance state keys
+     * Bundle/Instance state keys
      */
     private static final String STATE_TIME_CONTROL_SNAPSHOT_KEY = "time_control_snapshot_key";
+    private static final String STATE_ADVANCED_MODE_KEY = "advanced_mode_key";
+    private static final String STATE_PLAYER_ONE_KEY = "player_one_key";
+    private static final String ARG_EDIT_MODE = "arg_edit_mode";
     /**
      * Dialog Fragment TAGS
      */
-    private static final String TAG_STAGE_EDITOR_DIALOG_FRAGMENT = "StageEditorDialog";
-    private static final String TAG_TIME_INCREMENT_EDITOR_DIALOG_FRAGMENT = "TimeIncrementEditorDialog";
     private static final String TAG_EXIT_DIALOG_FRAGMENT = "ExitDialogFragment";
     /**
      * DIALOG request code
      */
-    private static final int REQUEST_STAGE_DIALOG = 1;
-    private static final int REQUEST_TIME_INCREMENT_DIALOG = 2;
     private static final int REQUEST_EXIT_DIALOG = 3;
     /**
      * Activity attached.
      */
-    private OnTimeControlListener mListener;
-    private BottomNavigationActionListener mBottomNavigationActionListener;
+    private OnTimeControlListener timeControlListener;
     /**
      * State.
      */
-    private TimeControlWrapper mTimeControlWrapper;
-    private TimeControl mSelectedTimeControl;
-    private boolean mPlayerOneSelected = false;
-    /**
-     * Time Control Name Text WATCHER
-     */
-    TextWatcher mTextWatcher = new TextWatcher() {
-        @Override
-        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-        }
-
-        @Override
-        public void onTextChanged(CharSequence s, int start, int before, int count) {
-
-        }
-
-        @Override
-        public void afterTextChanged(Editable s) {
-            String text = s.toString();
-            if (mTimeControlWrapper != null && text.length() != 0 && !text.equals("")) {
-                mTimeControlWrapper.getTimeControlPlayerOne().setName(s.toString());
-                mTimeControlWrapper.getTimeControlPlayerTwo().setName(s.toString());
-            }
-        }
-    };
-    private int mEditableStageIndex;
-    /**
-     * Listeners
-     */
-    private AdapterView.OnItemClickListener mItemClickListener = new AdapterView.OnItemClickListener() {
+    private TimeControlWrapper timeControlWrapper;
+    private TimeControl selectedTimeControl;
+    private boolean playerOneSelected = true;
+    private boolean advancedMode = false;
+    private boolean editMode = false;
 
-        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-            if (mListener != null) {
-                mEditableStageIndex = position;
-                showStageEditorDialog();
-            }
-        }
-    };
     /**
      * This is used to check for modifications before exiting.
      */
@@ -125,277 +82,323 @@ public class TimeControlFragment extends Fragment implements StageEditorDialog.O
     /**
      * UI
      */
-    private ListView mStageListView;
-    private EditText mTimeControlNameEditText;
-    private ViewGroup mTimeIncrementBtn;
-    private TextView mTimeIncrementDescription;
-    private FrameLayout mSameAsPlayerOneSwitchContainer;
-    private SwitchCompat mSameAsPlayerOneSwtich;
+    private LinearLayout stagesList;
+    private EditText nameEt;
+    private EditText minutesEt;
+    private EditText secondsEt;
+    private EditText incrementMinutesEt;
+    private EditText incrementSecondsEt;
+    private View copyPlayerOneLay;
+    private SwitchCompat copyPLayerOneSwitch;
+    private SwitchCompat advancedModeSwitch;
+    private View baseView;
+    private View advancedView;
+    private View addStageView;
+    private View saveButton;
+    private TabLayout tabLayout;
+
+
+    public TimeControlFragment() {
+    }
 
-    /**
-     * Mandatory empty constructor for the fragment manager to instantiate the
-     * fragment (e.g. upon screen orientation changes).
-     */
-    public TimeControlFragment() {}
+    public static TimeControlFragment newInstance(Boolean editMode) {
+
+        Bundle args = new Bundle();
+        args.putBoolean(ARG_EDIT_MODE, editMode);
+
+        TimeControlFragment fragment = new TimeControlFragment();
+        fragment.setArguments(args);
+        return fragment;
+    }
 
-    /**
-     * Called when a fragment is first attached to its activity.
-     * onCreate(Bundle) will be called after this.
-     *
-     * @param activity Parent Activity.
-     */
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
+    public void onAttach(@NonNull Context context) {
+        super.onAttach(context);
         try {
-            mListener = (OnTimeControlListener) activity;
-            mBottomNavigationActionListener = (BottomNavigationActionListener) activity;
-
+            timeControlListener = (OnTimeControlListener) requireActivity();
             // Fetch current TimeControl object
-            mTimeControlWrapper = mListener.getEditableTimeControl();
+            timeControlWrapper = timeControlListener.getEditableTimeControl();
 
         } catch (ClassCastException e) {
-            throw new ClassCastException(activity.toString()
-                    + " must implement OnTimeControlListener");
+            throw new ClassCastException(requireActivity() + " must implement OnTimeControlListener");
         }
     }
 
     @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Register the Fragment as a contributor to the options Menu
-        setHasOptionsMenu(true);
+    void loadTheme(AppTheme theme) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            ColorStateList tintList = theme.colorStateListFocused(requireContext());
+            minutesEt.setBackgroundTintList(tintList);
+            secondsEt.setBackgroundTintList(tintList);
+            incrementMinutesEt.setBackgroundTintList(tintList);
+            incrementSecondsEt.setBackgroundTintList(tintList);
+        }
+        ColorStateList tintChecked = theme.colorStateListChecked(requireContext());
+        DrawableCompat.setTintList(advancedModeSwitch.getThumbDrawable(), tintChecked);
+        DrawableCompat.setTintList(copyPLayerOneSwitch.getThumbDrawable(), tintChecked);
+        saveButton.setBackgroundResource(theme.primaryColorRes);
+        tabLayout.setSelectedTabIndicatorColor(theme.color(requireContext()));
     }
 
     @Override
-    public void onResume() {
-        super.onResume();
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        requireActivity().setTitle(R.string.custom_time);
+        editMode = requireArguments().getBoolean(ARG_EDIT_MODE);
+        View v = inflater.inflate(R.layout.fragment_time_control, container, false);
+        stagesList = v.findViewById(R.id.list_stages);
+        advancedModeSwitch = v.findViewById(R.id.advancedModeSwitch);
+        baseView = v.findViewById(R.id.baseLay);
+        advancedView = v.findViewById(R.id.advancedLay);
+        copyPlayerOneLay = v.findViewById(R.id.copyPlayerOneLay);
+        copyPLayerOneSwitch = v.findViewById(R.id.copyPlayerOneSwitch);
+        saveButton = v.findViewById(R.id.saveBtn);
+        nameEt = v.findViewById(R.id.time_control_name);
+        minutesEt = v.findViewById(R.id.baseMinEt);
+        secondsEt = v.findViewById(R.id.baseSecEt);
+        incrementMinutesEt = v.findViewById(R.id.baseIncrementMinEt);
+        incrementSecondsEt = v.findViewById(R.id.baseIncrementSecEt);
+        addStageView = v.findViewById(R.id.addStageTv);
+        tabLayout = v.findViewById(R.id.tabLayout);
+        if (timeControlWrapper != null) {
+            selectedTimeControl = timeControlWrapper.getTimeControlPlayerOne();
+
+            if (savedInstanceState != null) {
+                mTimeControlSnapshot = savedInstanceState.getParcelable(STATE_TIME_CONTROL_SNAPSHOT_KEY);
+                advancedMode = savedInstanceState.getBoolean(STATE_ADVANCED_MODE_KEY);
+                playerOneSelected = savedInstanceState.getBoolean(STATE_PLAYER_ONE_KEY);
+            } else {
+                // Save copy to check modifications before exit.
+                mTimeControlSnapshot = null;
+                try {
+                    mTimeControlSnapshot = (TimeControlWrapper) timeControlWrapper.clone();
+                } catch (CloneNotSupportedException e) {
+                    e.printStackTrace();
+                    throw new IllegalStateException("Could not build time control snapshot");
+                }
+            }
 
-        // Update Activity title if it is new time control.
-        TimeControl playerOne = mTimeControlWrapper.getTimeControlPlayerOne();
-        if (playerOne != null && (playerOne.getName() == null || playerOne.getName().equals(""))) {
-            getActivity().setTitle(getString(R.string.title_activity_time_control_new));
-        } else {
-            getActivity().setTitle(getString(R.string.title_activity_time_control));
+            copyPLayerOneSwitch.setChecked(timeControlWrapper.isSameAsPlayerOne());
+
+            String name = selectedTimeControl.getName();
+            if (name != null && !name.isEmpty()) {
+                nameEt.setText(name);
+            }
+            loadStages();
+        }
+        return v;
+    }
+
+    private void loadStages() {
+        Stage[] stages = selectedTimeControl.getStageManager().getStages();
+        ViewUtils.showView(addStageView, stages.length < Stage.MAX_ALLOWED_STAGES_COUNT);
+        int i = 0;
+        while (i < Stage.MAX_ALLOWED_STAGES_COUNT) {
+            StageRowView row = (StageRowView) stagesList.getChildAt(i);
+            if (i < stages.length) {
+                Stage stage = stages[i];
+                row.updateData(i + 1, stage, selectedTimeControl.getTimeIncrement());
+                row.setOnClickListener(v -> {
+                    showStageEditorDialog(stage, selectedTimeControl.getTimeIncrement());
+                });
+                row.setVisibility(View.VISIBLE);
+            } else {
+                row.setOnClickListener(null);
+                row.setVisibility(View.GONE);
+            }
+            i++;
         }
     }
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        saveButton.setOnClickListener(v -> saveTimeControl());
+        addStageView.setOnClickListener(v -> addNewStage());
+        nameEt.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
 
-        View v = inflater.inflate(R.layout.fragment_time_control, container, false);
-        mStageListView = v.findViewById(R.id.list_stages);
-        mSameAsPlayerOneSwitchContainer = v.findViewById(R.id.switch_same_as_player_one_container);
-        mSameAsPlayerOneSwtich = v.findViewById(R.id.switch_same_as_player_one);
-        mSameAsPlayerOneSwtich.setOnCheckedChangeListener((buttonView, isChecked) -> {
-            mTimeControlWrapper.setSameAsPlayerOne(isChecked);
-            if (isChecked && !mPlayerOneSelected) {
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                String text = s.toString();
+                if (timeControlWrapper != null && !text.isEmpty()) {
+                    timeControlWrapper.getTimeControlPlayerOne().setName(s.toString());
+                    timeControlWrapper.getTimeControlPlayerTwo().setName(s.toString());
+                }
+            }
+        });
+        setClockTextWatcher(secondsEt);
+        setClockTextWatcher(incrementSecondsEt);
+        advancedModeSwitch.setChecked(advancedMode);
+        advancedModeSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            advancedMode = isChecked;
+            updateUi();
+        });
+        copyPLayerOneSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
+            timeControlWrapper.setSameAsPlayerOne(isChecked);
+            if (isChecked && !playerOneSelected) {
                 showPlayerOneViews();
             }
         });
-        mSameAsPlayerOneSwitchContainer.setVisibility(GONE);
-        mBottomNavigationActionListener.setVisibility(VISIBLE);
-        mBottomNavigationActionListener.setBottomNavigationListener(
-                item -> {
-                    switch (item.getItemId()) {
-                        case R.id.nav_player1:
-                            mSameAsPlayerOneSwitchContainer.setVisibility(GONE);
-                            break;
-                        case R.id.nav_player2:
-                            mSameAsPlayerOneSwitchContainer.setVisibility(VISIBLE);
-                            break;
-                    }
-                    mPlayerOneSelected = !mPlayerOneSelected;
-                    mSelectedTimeControl = mPlayerOneSelected ? mTimeControlWrapper.getTimeControlPlayerOne() : mTimeControlWrapper.getTimeControlPlayerTwo();
-                    if (!mPlayerOneSelected && mTimeControlWrapper.isSameAsPlayerOne()) {
-                        showPlayerOneViews();
-                    } else {
-                        StageAdapter stageAdapter = new StageAdapter(getActivity(), mSelectedTimeControl.getStageManager(), TimeControlFragment.this);
-                        mStageListView.setAdapter(stageAdapter);
-                        mTimeIncrementDescription.setText(mSelectedTimeControl.getTimeIncrement().toString());
-                        updateDisplay();
-                    }
-                    return true;
-                });
-
-        if (mStageListView != null) {
-
-            mStageListView.setOnItemClickListener(mItemClickListener);
-            if (mTimeControlWrapper != null) {
-
-                if (savedInstanceState != null) {
-                    mTimeControlSnapshot = savedInstanceState.getParcelable(STATE_TIME_CONTROL_SNAPSHOT_KEY);
+        copyPlayerOneLay.setVisibility(GONE);
+        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
+            @Override
+            public void onTabSelected(TabLayout.Tab tab) {
+                boolean playerOneTab = tab.getPosition() == 0;
+                ViewUtils.showView(copyPlayerOneLay, !playerOneTab);
+                playerOneSelected = playerOneTab;
+                selectedTimeControl = playerOneTab ? timeControlWrapper.getTimeControlPlayerOne() : timeControlWrapper.getTimeControlPlayerTwo();
+                if (!playerOneTab && timeControlWrapper.isSameAsPlayerOne()) {
+                    showPlayerOneViews();
                 } else {
-                    // Save copy to check modifications before exit.
-                    mTimeControlSnapshot = null;
-                    try {
-                        mTimeControlSnapshot = (TimeControlWrapper) mTimeControlWrapper.clone();
-                    } catch(CloneNotSupportedException e) {
-                        e.printStackTrace();
-                        throw new IllegalStateException("Could not build time control snapshot");
-                    }
+                    updateStagesDisplay();
                 }
+            }
 
-                mSameAsPlayerOneSwtich.setChecked(mTimeControlWrapper.isSameAsPlayerOne());
-
-                // Setup Time Control Name Edit Text
-                mTimeControlNameEditText = v.findViewById(R.id.time_control_name);
-                mTimeControlNameEditText.addTextChangedListener(mTextWatcher);
-
-                TimeControl tc = mTimeControlWrapper.getTimeControlPlayerOne();
-                if (tc.getName() != null && !tc.getName().equals("")) {
-                    mTimeControlNameEditText.setText(tc.getName());
-                }
+            @Override
+            public void onTabUnselected(TabLayout.Tab tab) {
 
-                // Setup Stages list
-                StageAdapter stageAdapter = new StageAdapter(getActivity(), tc.getStageManager(), this);
-                mStageListView.setAdapter(stageAdapter);
+            }
 
-                // Load Time Increment item
-                mTimeIncrementDescription = v.findViewById(R.id.increment_description);
-                mTimeIncrementDescription.setText(tc.getTimeIncrement().toString());
+            @Override
+            public void onTabReselected(TabLayout.Tab tab) {
 
-                // Setup click listener to Time Increment btn
-                mTimeIncrementBtn = v.findViewById(R.id.btn_edit_increment);
-                mTimeIncrementBtn.setOnClickListener(v1 -> showTimeIncrementEditorDialog());
             }
+        });
+        if (editMode) {
+            view.findViewById(R.id.advancedModeSwitchLay).setVisibility(View.INVISIBLE);
         }
+        if (savedInstanceState == null) {
+            String hint = twoDecimalPlacesFormat(0);
+            minutesEt.setHint(hint);
+            incrementMinutesEt.setHint(hint);
+            secondsEt.setHint(hint);
+            incrementSecondsEt.setHint(hint);
+        } else {
+            int tabId = playerOneSelected ? 0 : 1;
+            TabLayout.Tab tab = tabLayout.getTabAt(tabId);
+            if (tab != null) {
+                tab.select();
+            }
+        }
+        updateUi();
+    }
 
-        mBottomNavigationActionListener.setSelected(R.id.nav_player1);
-        mSelectedTimeControl = mTimeControlWrapper.getTimeControlPlayerOne();
-
-        return v;
+    private void updateUi() {
+        ViewUtils.showView(baseView, !advancedMode && !editMode);
+        ViewUtils.showView(advancedView, advancedMode || editMode);
     }
 
     @Override
     public void onSaveInstanceState(Bundle outState) {
         outState.putParcelable(STATE_TIME_CONTROL_SNAPSHOT_KEY, mTimeControlSnapshot);
+        outState.putBoolean(STATE_ADVANCED_MODE_KEY, advancedMode);
+        outState.putBoolean(STATE_PLAYER_ONE_KEY, playerOneSelected);
         super.onSaveInstanceState(outState);
     }
 
     @Override
     public void onDetach() {
         super.onDetach();
-        mListener = null;
-        mBottomNavigationActionListener.setVisibility(GONE);
+        timeControlListener = null;
     }
 
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        super.onCreateOptionsMenu(menu, inflater);
-        inflater.inflate(R.menu.time_control_actions, menu);
-    }
-
-    @Override
-    public void onPrepareOptionsMenu(Menu menu) {
-        super.onPrepareOptionsMenu(menu);
+    private void saveTimeControl() {
+        if (timeControlWrapper == null) return;
 
-        if (mSelectedTimeControl.getStageManager().getTotalStages() == 3) {
-            menu.findItem(R.id.action_new_stage).setVisible(false);
+        // Hide soft keyboard
+        nameEt.clearFocus();
+        InputMethodManager imm = (InputMethodManager) requireActivity().getSystemService(Service.INPUT_METHOD_SERVICE);
+        imm.hideSoftInputFromWindow(nameEt.getWindowToken(), 0);
+
+        String newControlName = nameEt.getText().toString();
+        if (newControlName.equals("")) {
+            nameEt.requestFocus();
+            Toast.makeText(getActivity(), getString(R.string.toast_requesting_time_control_name), Toast.LENGTH_LONG).show();
+        } else if (!timeControlWrapper.bothUsersHaveAtLeastOneStage()) {
+            Toast.makeText(getActivity(), getString(R.string.toast_requesting_time_control_stage), Toast.LENGTH_LONG).show();
         } else {
-            menu.findItem(R.id.action_new_stage).setVisible(true);
-        }
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-
-        switch (item.getItemId()) {
-            case R.id.action_new_stage:
-                addNewStage();
-                return true;
-            case R.id.action_save_time_control:
-                saveTimeControl();
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-        }
-    }
-
-    private void saveTimeControl() {
-        if (mTimeControlWrapper != null) {
-
-            // Hide soft keyboard
-            mTimeControlNameEditText.clearFocus();
-            InputMethodManager imm =
-                    (InputMethodManager) getActivity().getSystemService(Service.INPUT_METHOD_SERVICE);
-            imm.hideSoftInputFromWindow(mTimeControlNameEditText.getWindowToken(), 0);
-
-            if (mTimeControlNameEditText != null &&
-                    mTimeControlNameEditText.getText().toString() == null ||
-                    mTimeControlNameEditText.getText().toString().equals("")) {
-                mTimeControlNameEditText.requestFocus();
-                Toast.makeText(getActivity(), getString(R.string.toast_requesting_time_control_name), Toast.LENGTH_LONG).show();
-            } else {
-                if (mTimeControlWrapper.isSameAsPlayerOne()) {
+            if (advancedMode || editMode) {
+                if (timeControlWrapper.isSameAsPlayerOne()) {
                     TimeControl playerOneClone = null;
                     try {
-                        playerOneClone = (TimeControl) mTimeControlWrapper.getTimeControlPlayerOne().clone();
-                    } catch(CloneNotSupportedException e) {
+                        playerOneClone = (TimeControl) timeControlWrapper.getTimeControlPlayerOne().clone();
+                    } catch (CloneNotSupportedException e) {
                         e.printStackTrace();
                     }
-                    mTimeControlWrapper.setTimeControlPlayerTwo(playerOneClone);
+                    timeControlWrapper.setTimeControlPlayerTwo(playerOneClone);
+                }
+            } else {
+                int minutes = getIntOrZero(minutesEt);
+                int seconds = getIntOrZero(secondsEt);
+                int incrementMinutes = getIntOrZero(incrementMinutesEt);
+                int incrementSeconds = getIntOrZero(incrementSecondsEt);
+
+                long gameDurationMs = minutes * 60 * 1000L + seconds * 1000L;
+                long incrementMs = incrementMinutes * 60 * 1000L + incrementSeconds * 1000L;
+
+                if (gameDurationMs == 0) {
+                    Toast.makeText(getActivity(), getString(R.string.please_set_time), Toast.LENGTH_LONG).show();
+                    return;
                 }
-                mListener.saveTimeControl();
-                getActivity().getSupportFragmentManager().popBackStack();
+
+                Stage stage = new Stage(0, gameDurationMs);
+                TimeIncrement timeIncrement = new TimeIncrement(TimeIncrement.Type.FISCHER, incrementMs);
+                TimeControl simpleControl = new TimeControl(newControlName, new Stage[]{stage}, timeIncrement);
+                timeControlWrapper.setTimeControlPlayerOne(simpleControl);
+                timeControlWrapper.setTimeControlPlayerTwo(simpleControl);
             }
+            timeControlListener.saveTimeControl();
+            requireActivity().getSupportFragmentManager().popBackStack();
         }
     }
 
-    /**
-     * Update Stage list and menu actions.
-     */
-    public void updateDisplay() {
-        ((StageAdapter) mStageListView.getAdapter()).notifyDataSetChanged();
-
-        // Remove "add stage" action from menu if total stages is 3
-        getActivity().supportInvalidateOptionsMenu();
+    private void updateStagesDisplay() {
+        loadStages();
     }
 
     public void showConfirmGoBackDialog() {
-        if (!(mTimeControlWrapper.isEqual(mTimeControlSnapshot))) {
+        if (!(timeControlWrapper.isEqual(mTimeControlSnapshot))) {
             DialogFragment newFragment = ExitConfirmationDialogFragment.newInstance();
             newFragment.setTargetFragment(this, REQUEST_EXIT_DIALOG);
-            newFragment.show(getFragmentManager(), TAG_EXIT_DIALOG_FRAGMENT);
+            newFragment.show(getParentFragmentManager(), TAG_EXIT_DIALOG_FRAGMENT);
         } else {
-            getActivity().getSupportFragmentManager().popBackStack();
+            requireActivity().getSupportFragmentManager().popBackStack();
         }
     }
 
     private void addNewStage() {
 
         // Hide soft keyboard
-        mTimeControlNameEditText.clearFocus();
+        nameEt.clearFocus();
         InputMethodManager imm =
-                (InputMethodManager) getActivity().getSystemService(Service.INPUT_METHOD_SERVICE);
-        imm.hideSoftInputFromWindow(mTimeControlNameEditText.getWindowToken(), 0);
+                (InputMethodManager) requireActivity().getSystemService(Service.INPUT_METHOD_SERVICE);
+        imm.hideSoftInputFromWindow(nameEt.getWindowToken(), 0);
 
 
-        if (mSelectedTimeControl.getStageManager().getTotalStages() < 3) {
-            mSelectedTimeControl.getStageManager().addNewStage();
-            updateDisplay();
+        if (selectedTimeControl.getStageManager().canAddStage()) {
+            selectedTimeControl.getStageManager().addNewStage();
+            updateStagesDisplay();
         }
     }
 
     public void removeStage(int stageIndex) {
-        mSelectedTimeControl.getStageManager().removeStage(stageIndex);
-        updateDisplay();
+        selectedTimeControl.getStageManager().removeStage(stageIndex);
+        DialogFragment editDialog = (DialogFragment) getChildFragmentManager().findFragmentByTag(EditStageDialogFragment.TAG);
+        if (editDialog != null) {
+            editDialog.dismissAllowingStateLoss();
+        }
+        updateStagesDisplay();
     }
 
-    /**
-     * Launch Stage Editor Dialog where the user can manipulate the Stage's properties.
-     */
-    private void showStageEditorDialog() {
-        // Get correct Stage.
-        Stage stage = mSelectedTimeControl.getStageManager().getStages()[mEditableStageIndex];
-
-        // Setup Stage Editor Dialog.
-        DialogFragment newFragment = new StageEditorDialogFragment(getActivity(), stage);
-        newFragment.setTargetFragment(this, REQUEST_STAGE_DIALOG);
-
-        // Launch Stage Editor Dialog.
-        newFragment.show(getActivity().getSupportFragmentManager(), TAG_STAGE_EDITOR_DIALOG_FRAGMENT);
+    private void showStageEditorDialog(Stage stage, TimeIncrement timeIncrement) {
+        DialogFragment dialogFragment = EditStageDialogFragment.newInstance(stage, timeIncrement);
+        dialogFragment.show(getChildFragmentManager(), EditStageDialogFragment.TAG);
     }
 
     /**
@@ -404,66 +407,50 @@ public class TimeControlFragment extends Fragment implements StageEditorDialog.O
     private void showPlayerOneViews() {
         TimeControl playerOneClone;
         try {
-            playerOneClone = (TimeControl) mTimeControlWrapper.getTimeControlPlayerOne().clone();
-        } catch(CloneNotSupportedException e) {
+            playerOneClone = (TimeControl) timeControlWrapper.getTimeControlPlayerOne().clone();
+        } catch (CloneNotSupportedException e) {
             e.printStackTrace();
             throw new IllegalStateException("Could not clone player one time control");
         }
-        mTimeControlWrapper.setTimeControlPlayerTwo(playerOneClone);
-        mTimeIncrementDescription.setText(playerOneClone.getTimeIncrement().toString());
-        mSelectedTimeControl = mPlayerOneSelected ? mTimeControlWrapper.getTimeControlPlayerOne() : mTimeControlWrapper.getTimeControlPlayerTwo();
+        timeControlWrapper.setTimeControlPlayerTwo(playerOneClone);
+        selectedTimeControl = playerOneSelected ? timeControlWrapper.getTimeControlPlayerOne() : timeControlWrapper.getTimeControlPlayerTwo();
 
-        StageAdapter stageAdapter = new StageAdapter(getActivity(), mSelectedTimeControl.getStageManager(), TimeControlFragment.this);
-        mStageListView.setAdapter(stageAdapter);
+        updateStagesDisplay();
     }
 
     @Override
-    public void onStageEditDone(int moves, long timeValue) {
-        Stage stage = mSelectedTimeControl.getStageManager().getStages()[mEditableStageIndex];
+    public void onStageEditDone(int stageId, int moves, long timeValue) {
+        Stage[] stages = selectedTimeControl.getStageManager().getStages();
 
-        // Save new moves number
+        // verify stage was not removed
+        if (stages.length <= stageId) return;
+
+        Stage stage = stages[stageId];
         stage.setMoves(moves);
 
-        // Save new stage duration
         if (stage.getDuration() != timeValue) {
             stage.setDuration(timeValue);
         }
 
-        // Update stage list
-        updateDisplay();
-    }
-
-    public void showTimeIncrementEditorDialog() {
-        // Get Time Increment
-        TimeIncrement timeIncrement = mSelectedTimeControl.getTimeIncrement();
-
-        // Setup Time Increment Editor Dialog
-        DialogFragment newFragment = new TimeIncrementEditorDialogFragment(getActivity(), timeIncrement);
-        newFragment.setTargetFragment(this, REQUEST_TIME_INCREMENT_DIALOG);
-
-        // Launch Time Increment Editor Dialog.
-        newFragment.show(getActivity().getSupportFragmentManager(), TAG_TIME_INCREMENT_EDITOR_DIALOG_FRAGMENT);
+        updateStagesDisplay();
     }
 
     @Override
     public void onTimeIncrementEditDone(TimeIncrement.Type type, long time) {
         // Get Time Increment
-        TimeIncrement timeIncrement = mSelectedTimeControl.getTimeIncrement();
+        TimeIncrement timeIncrement = selectedTimeControl.getTimeIncrement();
 
         timeIncrement.setType(type);
         timeIncrement.setValue(time);
-
-        // Update Time Increment description
-        mTimeIncrementDescription.setText(timeIncrement.toString());
     }
 
     /**
      * This interface must be implemented by activities that contain this fragment to allow interaction.
      */
     public interface OnTimeControlListener {
-        public TimeControlWrapper getEditableTimeControl();
+        TimeControlWrapper getEditableTimeControl();
 
-        public void saveTimeControl();
+        void saveTimeControl();
     }
 
     /**
@@ -475,6 +462,7 @@ public class TimeControlFragment extends Fragment implements StageEditorDialog.O
             return new ExitConfirmationDialogFragment();
         }
 
+        @NonNull
         @Override
         public Dialog onCreateDialog(Bundle savedInstanceState) {
 
@@ -485,7 +473,7 @@ public class TimeControlFragment extends Fragment implements StageEditorDialog.O
                     .setNegativeButton(getString(R.string.exit_dialog_cancel), (arg0, arg1) -> {
                         Fragment target = getTargetFragment();
                         if (target != null) {
-                            target.getActivity().getSupportFragmentManager().popBackStack();
+                            target.requireActivity().getSupportFragmentManager().popBackStack();
                         }
                     })
                     .setPositiveButton(getString(R.string.exit_dialog_ok), (arg0, arg1) -> {
diff --git a/app/src/main/java/com/chess/clock/fragments/TimeIncrementEditorDialogFragment.java b/app/src/main/java/com/chess/clock/fragments/TimeIncrementEditorDialogFragment.java
deleted file mode 100644
index a995304..0000000
--- a/app/src/main/java/com/chess/clock/fragments/TimeIncrementEditorDialogFragment.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.chess.clock.fragments;
-
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import androidx.fragment.app.DialogFragment;
-
-import com.chess.clock.R;
-import com.chess.clock.dialog.TimeIncrementEditorDialog;
-import com.chess.clock.dialog.TimePickerDialog;
-import com.chess.clock.engine.TimeIncrement;
-
-/**
- * Stage Editor Dialog Fragment. This DialogFragment extends TimePickerDialogFragment. Overriding
- * Dialog creation, adds a new layout to Dialog content view which adds
- * the moves number edit text field on top of TimePicker widget.
- */
-public class TimeIncrementEditorDialogFragment extends DialogFragment {
-
-    /**
-     * Save Instance keys
-     */
-    protected static final String KEY_TIME_INCREMENT = "key_time_increment";
-    protected Context mContext;
-    /**
-     * State
-     */
-    TimeIncrement mTimeIncrement;
-
-    /**
-     * Mandatory constructor
-     */
-    public TimeIncrementEditorDialogFragment() {
-    }
-
-    /**
-     * Dialog Fragment constructor for Editing Stages.
-     *
-     * @param context       Context for the Dialog.
-     * @param timeIncrement TimeIncrement being edited.
-     */
-    public TimeIncrementEditorDialogFragment(Context context, TimeIncrement timeIncrement) {
-        mContext = context;
-        mTimeIncrement = timeIncrement;
-    }
-
-    /**
-     * Override Dialog creation to use StageEditorDialog instead of TimePickerDialog.
-     */
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-
-        if (savedInstanceState != null) {
-            mContext = getActivity(); // Update activity reference
-            mTimeIncrement = savedInstanceState.getParcelable(KEY_TIME_INCREMENT);
-        }
-
-        // Get stage details
-        int[] time = mTimeIncrement.getDuration();
-        int hour = time[0];
-        int minute = time[1];
-        int second = time[2];
-        int incrementType = mTimeIncrement.getType().getValue();
-
-        TimeIncrementEditorDialog.Builder builder = new TimeIncrementEditorDialog.Builder(mContext);
-        builder.setTitle(mContext.getString(R.string.time_increment_editor_dialog_title));
-        builder.setPositiveButton(mContext.getString(R.string.time_increment_editor_dialog_set));
-        builder.setNegativeButton(mContext.getString(R.string.time_increment_editor_dialog_cancel));
-        builder.setHour(hour);
-        builder.setMinute(minute);
-        builder.setSecond(second);
-        builder.setTimeIncrementType(incrementType);
-        builder.setType(TimePickerDialog.Type.MINUTE_SECOND);
-        builder.setOnTimeIncrementEditListener((TimeIncrementEditorDialog.OnTimeIncrementEditListener) getTargetFragment());
-
-        return builder.create();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        outState.putParcelable(KEY_TIME_INCREMENT, mTimeIncrement);
-        super.onSaveInstanceState(outState);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/chess/clock/fragments/TimePickerDialogFragment.java b/app/src/main/java/com/chess/clock/fragments/TimePickerDialogFragment.java
deleted file mode 100644
index b820c07..0000000
--- a/app/src/main/java/com/chess/clock/fragments/TimePickerDialogFragment.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package com.chess.clock.fragments;
-
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import androidx.fragment.app.DialogFragment;
-
-import com.chess.clock.R;
-import com.chess.clock.dialog.TimePickerDialog;
-
-public class TimePickerDialogFragment extends DialogFragment {
-
-    /**
-     * Save Instance keys
-     */
-    protected static final String KEY_TYPE = "key_type";
-    protected int mTypeValue;
-    protected int mHour;
-    protected int mMinute;
-    protected int mSecond;
-    protected Context mContext;
-
-    // Mandatory
-    public TimePickerDialogFragment() {
-
-    }
-
-    /**
-     * Dialog Fragment constructor for a custom TimePicker compound view.
-     *
-     * @param context Dialog Fragment Context.
-     * @param type    Type of TimePicker used.
-     * @param hour    Initial hour value.
-     * @param minute  Initial minute value.
-     * @param second  Initial second value.
-     */
-    public TimePickerDialogFragment(Context context, Type type, int hour, int minute, int second) {
-        mContext = context;
-        mTypeValue = type.getValue();
-        mHour = hour;
-        mMinute = minute;
-        mSecond = second;
-    }
-
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-
-        if (savedInstanceState != null) {
-            mContext = getActivity();
-            mTypeValue = savedInstanceState.getInt(KEY_TYPE);
-        }
-
-        return new TimePickerDialog.Builder(mContext)
-                .setTitle(mContext.getString(R.string.time_picker_dialog_title))
-                .setPositiveButton(mContext.getString(R.string.time_picker_dialog_set))
-                .setNegativeButton(mContext.getString(R.string.time_picker_dialog_cancel))
-                .setHour(mHour)
-                .setMinute(mMinute)
-                .setSecond(mSecond)
-                .setType(TimePickerDialog.Type.fromInteger(mTypeValue))
-                .setOnTimeSetListener((TimePickerDialog.OnTimeSetListener) getTargetFragment())
-                .create();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        outState.putInt(KEY_TYPE, mTypeValue);
-        super.onSaveInstanceState(outState);
-    }
-
-    public enum Type {
-        MINUTE_SECOND(0),
-        HOUR_MINUTE_SECOND(1);
-
-        private final int value;
-
-        private Type(int value) {
-            this.value = value;
-        }
-
-        public static Type fromInteger(int type) {
-            switch (type) {
-                case 0:
-                    return MINUTE_SECOND;
-                case 1:
-                    return HOUR_MINUTE_SECOND;
-            }
-            return null;
-        }
-
-        public int getValue() {
-            return value;
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java b/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
index 0fd3fa6..a1fe891 100644
--- a/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
+++ b/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
@@ -287,7 +287,7 @@ public class TimeSettingsFragment extends BaseFragment implements MultiSelection
             startBtn.setVisibility(View.GONE);
 
         } else {
-            adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls());
+            adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls(), loadedTheme);
             timesListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
             timesListView.setAdapter(adapter);
         }
@@ -388,8 +388,11 @@ public class TimeSettingsFragment extends BaseFragment implements MultiSelection
         if (timesListView != null) {
 
             mTotalItemChecked = 0;
-
-            adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls());
+            if (adapter == null) {
+                adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls(), loadedTheme);
+            } else {
+                adapter.updateTimeControls(mListener.getCurrentTimeControls());
+            }
             timesListView.setAdapter(adapter);
             timesListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
             setListViewItemChecked();
diff --git a/app/src/main/java/com/chess/clock/util/ClockUtils.java b/app/src/main/java/com/chess/clock/util/ClockUtils.java
new file mode 100644
index 0000000..dca6ce7
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/util/ClockUtils.java
@@ -0,0 +1,65 @@
+package com.chess.clock.util;
+
+import android.annotation.SuppressLint;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+
+public class ClockUtils {
+    @SuppressLint("DefaultLocale")
+    public static String twoDecimalPlacesFormat(int value) {
+        return String.format("%02d", value);
+    }
+
+    public static int getIntOrZero(EditText et) {
+        String textValue = et.getText().toString();
+        return textValue.isEmpty() ? 0 : Integer.parseInt(textValue);
+    }
+
+    public static void setClockTextWatcher(EditText editText) {
+        TextWatcher minutesTextWatcher = new TextWatcher() {
+            final int MAX = 59;
+
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                editText.removeTextChangedListener(this);
+                String minutesAsString = s.toString();
+                int minutes = minutesAsString.isEmpty() ? 0 : Integer.parseInt(minutesAsString);
+                if (minutes > MAX) {
+                    s.clear();
+                    s.append(twoDecimalPlacesFormat(MAX));
+                }
+                editText.addTextChangedListener(this);
+            }
+        };
+        editText.addTextChangedListener(minutesTextWatcher);
+        editText.setOnEditorActionListener((v, actionId, event) -> {
+            if (actionId == EditorInfo.IME_ACTION_NEXT || actionId == EditorInfo.IME_ACTION_DONE) {
+                String minutesAsString = v.getText().toString();
+                int minutes = minutesAsString.isEmpty() ? 0 : Integer.parseInt(minutesAsString);
+                v.setText(twoDecimalPlacesFormat(minutes));
+                v.clearFocus();
+            }
+            return false;
+        });
+    }
+
+    public static void clearFocusOnActionDone(EditText editText) {
+        editText.setOnEditorActionListener((v, actionId, event) -> {
+            if (actionId == EditorInfo.IME_ACTION_DONE) {
+                v.clearFocus();
+            }
+            return false;
+        });
+    }
+
+}
diff --git a/app/src/main/java/com/chess/clock/views/StageRowView.java b/app/src/main/java/com/chess/clock/views/StageRowView.java
new file mode 100644
index 0000000..c336bbf
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/views/StageRowView.java
@@ -0,0 +1,39 @@
+package com.chess.clock.views;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.constraintlayout.widget.ConstraintLayout;
+
+import com.chess.clock.R;
+import com.chess.clock.engine.Stage;
+import com.chess.clock.engine.TimeIncrement;
+
+public class StageRowView extends ConstraintLayout {
+
+    TextView stageDetails;
+    TextView timeIncrementDetails;
+    TextView positionLabel;
+
+    public StageRowView(@NonNull Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+
+        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View view = inflater.inflate(R.layout.list_stage_item, this, true);
+
+        positionLabel = view.findViewById(R.id.positionTv);
+        stageDetails = view.findViewById(R.id.stageDetailsTv);
+        timeIncrementDetails = view.findViewById(R.id.incrementDetailsTv);
+    }
+
+    public void updateData(int position, Stage stage, TimeIncrement timeIncrement) {
+        positionLabel.setText(String.valueOf(position));
+        stageDetails.setText(stage.toString());
+        timeIncrementDetails.setText(timeIncrement.toString());
+    }
+}
