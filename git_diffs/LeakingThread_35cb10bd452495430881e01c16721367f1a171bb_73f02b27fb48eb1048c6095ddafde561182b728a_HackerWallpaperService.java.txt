diff --git a/src/com/gulshansingh/hackerlivewallpaper/BitSequence.java b/src/com/gulshansingh/hackerlivewallpaper/BitSequence.java
index 39b4d62..123443d 100644
--- a/src/com/gulshansingh/hackerlivewallpaper/BitSequence.java
+++ b/src/com/gulshansingh/hackerlivewallpaper/BitSequence.java
@@ -54,7 +54,7 @@ public class BitSequence {
 
 	private final ScheduledExecutorService scheduler = Executors
 			.newSingleThreadScheduledExecutor();
-
+	
 	/**
 	 * A runnable that changes the bit, moves the sequence down, and reschedules
 	 * its execution
@@ -65,14 +65,45 @@ public class BitSequence {
 			y += TEXT_SIZE;
 			if (y > HEIGHT) {
 				y = -1 * TEXT_SIZE * NUM_BITS;
-				ScheduledFuture<?> futurePrev = future;
-				future = scheduler.scheduleAtFixedRate(this, r.nextInt(6000),
-						SPEED, TimeUnit.MILLISECONDS);
-				futurePrev.cancel(true);
+				scheduleThread();
 			}
 		}
 	};
 
+	private boolean pause = false;
+	public void pause() {
+		if (!pause) {
+			if (future != null) {
+				future.cancel(true);
+			}
+			pause = true;
+		}
+	}
+
+	public void unpause() {
+		if (pause) {
+			if (y < 0 || y > HEIGHT) {
+				scheduleThread();
+			} else {
+				future = scheduler.scheduleAtFixedRate(changeBitRunnable, 0,
+						SPEED, TimeUnit.MILLISECONDS);
+			}
+			pause = false;
+		}
+	}
+
+	/**
+	 * Schedules the changeBitRunnable, cancelling the previous scheduled future
+	 */
+	public void scheduleThread() {
+		ScheduledFuture<?> futurePrev = future;
+		future = scheduler.scheduleAtFixedRate(changeBitRunnable,
+				r.nextInt(6000), SPEED, TimeUnit.MILLISECONDS);
+		if (futurePrev != null) {
+			futurePrev.cancel(true);
+		}
+	}
+
 	/**
 	 * Configures the BitSequence based on the display
 	 * 
@@ -94,8 +125,7 @@ public class BitSequence {
 		this.y = -1 * TEXT_SIZE * NUM_BITS;
 		initPaint();
 
-		future = scheduler.scheduleAtFixedRate(changeBitRunnable, r.nextInt(6000),
-				SPEED, TimeUnit.MILLISECONDS);
+		scheduleThread();
 	}
 
 	/** Shifts the bits back by one and adds a new bit to the end */
diff --git a/src/com/gulshansingh/hackerlivewallpaper/HackerWallpaperService.java b/src/com/gulshansingh/hackerlivewallpaper/HackerWallpaperService.java
index ec1b08f..dd469ba 100644
--- a/src/com/gulshansingh/hackerlivewallpaper/HackerWallpaperService.java
+++ b/src/com/gulshansingh/hackerlivewallpaper/HackerWallpaperService.java
@@ -6,7 +6,6 @@ import java.util.List;
 import android.graphics.Canvas;
 import android.os.Handler;
 import android.service.wallpaper.WallpaperService;
-import android.util.Log;
 import android.view.SurfaceHolder;
 
 public class HackerWallpaperService extends WallpaperService {
@@ -29,7 +28,6 @@ public class HackerWallpaperService extends WallpaperService {
 		 */
 		private Runnable drawRunnable = new Runnable() {
 			public void run() {
-				Log.d("TAG", "Running");
 				draw();
 			}
 		};
@@ -56,6 +54,22 @@ public class HackerWallpaperService extends WallpaperService {
 			handler.removeCallbacks(drawRunnable);
 			if (visible) {
 				handler.post(drawRunnable);
+			} else {
+				stop();
+			}
+		}
+
+		private void stop() {
+			handler.removeCallbacks(drawRunnable);
+			for (BitSequence sequence : sequences) {
+				sequence.pause();
+			}
+		}
+
+		private void start() {
+			handler.post(drawRunnable);
+			for (BitSequence sequence : sequences) {
+				sequence.unpause();
 			}
 		}
 
@@ -67,7 +81,7 @@ public class HackerWallpaperService extends WallpaperService {
 		@Override
 		public void onSurfaceDestroyed(SurfaceHolder holder) {
 			super.onSurfaceDestroyed(holder);
-			handler.removeCallbacks(drawRunnable);
+			stop();
 		}
 
 		@Override
@@ -75,7 +89,6 @@ public class HackerWallpaperService extends WallpaperService {
 				int width, int height) {
 			super.onSurfaceChanged(holder, format, width, height);
 
-			handler.removeCallbacks(drawRunnable);
 			BitSequence.configure(width, height);
 
 			int numSequences = (int) (width / BitSequence.getWidth());
@@ -86,17 +99,15 @@ public class HackerWallpaperService extends WallpaperService {
 				sequences.add(new BitSequence(
 						(int) (i * BitSequence.getWidth())));
 			}
-
-			handler.post(drawRunnable);
 		}
 
 		@Override
 		public void onVisibilityChanged(boolean visible) {
 			super.onVisibilityChanged(visible);
 			if (visible) {
-				handler.post(drawRunnable);
+				start();
 			} else {
-				handler.removeCallbacks(drawRunnable);
+				stop();
 			}
 			this.visible = visible;
 		}
