diff --git a/app/src/main/java/com/chess/clock/activities/BaseActivity.java b/app/src/main/java/com/chess/clock/activities/BaseActivity.java
new file mode 100644
index 0000000..ea2a36b
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/activities/BaseActivity.java
@@ -0,0 +1,21 @@
+package com.chess.clock.activities;
+
+import android.os.Bundle;
+
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+
+import com.chess.clock.statics.AppData;
+
+public class BaseActivity extends AppCompatActivity {
+    /**
+     * Shared preferences wrapper
+     */
+    protected AppData appData;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        appData = new AppData(getApplicationContext());
+    }
+}
diff --git a/app/src/main/java/com/chess/clock/activities/ClockTimersActivity.java b/app/src/main/java/com/chess/clock/activities/ClockTimersActivity.java
index 7dfd316..02a3175 100644
--- a/app/src/main/java/com/chess/clock/activities/ClockTimersActivity.java
+++ b/app/src/main/java/com/chess/clock/activities/ClockTimersActivity.java
@@ -21,18 +21,16 @@ import android.view.WindowManager;
 
 import androidx.annotation.NonNull;
 import androidx.fragment.app.DialogFragment;
-import androidx.fragment.app.FragmentActivity;
 
 import com.chess.clock.R;
 import com.chess.clock.engine.CountDownTimer;
 import com.chess.clock.engine.Stage;
 import com.chess.clock.engine.TimeControlParser;
 import com.chess.clock.service.ChessClockLocalService;
-import com.chess.clock.statics.AppData;
 import com.chess.clock.views.ClockButton;
 import com.chess.clock.views.ClockMenu;
 
-public class ClockTimersActivity extends FragmentActivity {
+public class ClockTimersActivity extends BaseActivity {
 
     private static final String TAG = ClockTimersActivity.class.getName();
     /**
@@ -67,7 +65,6 @@ public class ClockTimersActivity extends FragmentActivity {
     boolean mBound = false;
 
     private ClockSoundManager soundManager;
-    private AppData appData;
 
     /**
      * UI
@@ -314,8 +311,6 @@ public class ClockTimersActivity extends FragmentActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        appData = new AppData(getApplicationContext());
-
         // Full screen for pre-kitkat
         int currentApiVersion = android.os.Build.VERSION.SDK_INT;
         if (currentApiVersion < Build.VERSION_CODES.KITKAT) {
@@ -576,7 +571,7 @@ public class ClockTimersActivity extends FragmentActivity {
                 // Pause clock before going to settings menu
                 pauseClock();
 
-                Intent settingsIntent = new Intent(ClockTimersActivity.this, SettingsActivity.class);
+                Intent settingsIntent = new Intent(ClockTimersActivity.this, TimerSettingsActivity.class);
                 startActivityForResult(settingsIntent, SETTINGS_REQUEST_CODE);
                 overridePendingTransition(R.anim.right_to_left_full, R.anim.right_to_left_out);
             }
diff --git a/app/src/main/java/com/chess/clock/activities/SettingsActivity.java b/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
similarity index 88%
rename from app/src/main/java/com/chess/clock/activities/SettingsActivity.java
rename to app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
index a2a1d82..4b376fd 100644
--- a/app/src/main/java/com/chess/clock/activities/SettingsActivity.java
+++ b/app/src/main/java/com/chess/clock/activities/TimerSettingsActivity.java
@@ -6,33 +6,33 @@ import android.content.Intent;
 import android.content.ServiceConnection;
 import android.os.Bundle;
 import android.os.IBinder;
-import com.google.android.material.bottomnavigation.BottomNavigationView;
-import com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentTransaction;
-import androidx.appcompat.app.AppCompatActivity;
 import android.util.Log;
 import android.view.MenuItem;
 import android.view.WindowManager;
 import android.widget.Toast;
 
+import androidx.appcompat.app.ActionBar;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
+
 import com.chess.clock.R;
 import com.chess.clock.engine.TimeControl;
 import com.chess.clock.engine.TimeControlManager;
 import com.chess.clock.engine.TimeControlWrapper;
-import com.chess.clock.fragments.SettingsFragment;
 import com.chess.clock.fragments.TimeControlFragment;
+import com.chess.clock.fragments.TimeSettingsFragment;
 import com.chess.clock.service.ChessClockLocalService;
-import com.chess.clock.statics.AppData;
+import com.google.android.material.bottomnavigation.BottomNavigationView;
+import com.google.android.material.bottomnavigation.BottomNavigationView.OnNavigationItemSelectedListener;
 
 import java.util.ArrayList;
 
 /**
  * Activity that manages TimeControl list in the Settings and also TimeControl form.
  */
-public class SettingsActivity extends AppCompatActivity implements SettingsFragment.OnSettingsListener, TimeControlFragment.OnTimeControlListener, TimeControlManager.Callback, TimeControlFragment.BottomNavigationActionListener {
+public class TimerSettingsActivity extends BaseActivity implements TimeSettingsFragment.OnSettingsListener, TimeControlFragment.OnTimeControlListener, TimeControlManager.Callback, TimeControlFragment.BottomNavigationActionListener {
 
-    private static final String TAG = SettingsActivity.class.getName();
+    private static final String TAG = TimerSettingsActivity.class.getName();
 
     /**
      * Fragments TAG
@@ -40,11 +40,6 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
     private final String TAG_SETTINGS_FRAGMENT = "settings";
     private final String TAG_TIME_CONTROL_FRAGMENT = "time_control";
 
-    /**
-     * Shared preferences wrapper
-     */
-    private AppData appData;
-
     /**
      * Chess clock local service (clock engine).
      */
@@ -58,7 +53,7 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
     /**
      * Defines callbacks for service binding, passed to bindService()
      */
-    private ServiceConnection mConnection = new ServiceConnection() {
+    private final ServiceConnection mConnection = new ServiceConnection() {
 
         @Override
         public void onServiceConnected(ComponentName className, IBinder service) {
@@ -91,8 +86,6 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
     @Override
     protected void onCreate(Bundle savedInstanceState) {
 
-        appData = new AppData(getApplicationContext());
-
         // This must be called before super.onCreate which performs initialization of all fragments
         // and loaders. TimeControl objects initialization is required before that.
         mTimeControlManager = new TimeControlManager(getApplicationContext(), savedInstanceState);
@@ -108,15 +101,21 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
             hideFullScreen();
         }
 
-        setContentView(R.layout.activity_settings);
+        setContentView(R.layout.activity_timer_settings);
+
 
         if (savedInstanceState == null) {
             getSupportFragmentManager().beginTransaction()
-                    .add(R.id.container, new SettingsFragment(), TAG_SETTINGS_FRAGMENT)
+                    .add(R.id.container, new TimeSettingsFragment(), TAG_SETTINGS_FRAGMENT)
                     .commit();
         }
 
         mBottomNavigationView = findViewById(R.id.player_selection_bottom_navigation);
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setHomeButtonEnabled(true);
+            actionBar.setDisplayHomeAsUpEnabled(true);
+        }
     }
 
     @Override
@@ -157,10 +156,17 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
 
     @Override
     public void onBackPressed() {
+        showPopupOrFinish(null);
+    }
+
+    private void showPopupOrFinish(Integer resultToSet) {
         Fragment frag = getSupportFragmentManager().findFragmentByTag(TAG_TIME_CONTROL_FRAGMENT);
         if (frag != null && frag.isVisible()) {
             ((TimeControlFragment) frag).showConfirmGoBackDialog();
         } else {
+            if (resultToSet != null) {
+                setResult(resultToSet);
+            }
             finish();
             overridePendingTransition(R.anim.left_to_right_in, R.anim.left_to_right_full);
         }
@@ -174,12 +180,10 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            // Respond to the action bar's Up/Home button
-            case android.R.id.home:
-                setResult(RESULT_CANCELED);
-                finish();
-                return true;
+        // Respond to the action bar's Up/Home button
+        if (item.getItemId() == android.R.id.home) {
+            showPopupOrFinish(RESULT_CANCELED);
+            return true;
         }
         return super.onOptionsItemSelected(item);
     }
@@ -212,7 +216,6 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
                     + index + " array size: " + mTimeControlManager.getTimeControls().size());
             return false;
         }
-
     }
 
     /**
@@ -311,7 +314,7 @@ public class SettingsActivity extends AppCompatActivity implements SettingsFragm
     @Override
     public void saveTimeControl() {
         mTimeControlManager.saveTimeControl(getApplicationContext());
-        SettingsFragment f = (SettingsFragment) getSupportFragmentManager().findFragmentByTag(TAG_SETTINGS_FRAGMENT);
+        TimeSettingsFragment f = (TimeSettingsFragment) getSupportFragmentManager().findFragmentByTag(TAG_SETTINGS_FRAGMENT);
         if (f != null) {
             f.refreshTimeControlList();
         }
diff --git a/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java b/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
index a5e1631..236495e 100644
--- a/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
+++ b/app/src/main/java/com/chess/clock/adapters/TimeControlAdapter.java
@@ -4,10 +4,9 @@ import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
-
+import androidx.appcompat.widget.AppCompatCheckedTextView;
 import com.chess.clock.R;
 import com.chess.clock.engine.TimeControlWrapper;
-import com.chess.clock.views.TimeControlCheckedTextView;
 
 import java.util.ArrayList;
 
@@ -40,9 +39,8 @@ public class TimeControlAdapter extends ArrayAdapter<TimeControlWrapper> {
     @Override
     public View getView(int position, View convertView, ViewGroup parent) {
 
-        TimeControlCheckedTextView row =
-                (TimeControlCheckedTextView) super.getView(position, convertView, parent);
-
+        AppCompatCheckedTextView row =
+                (AppCompatCheckedTextView) super.getView(position, convertView, parent);
         TimeControlWrapper tc = getItem(position);
         if (tc != null && tc.getTimeControlPlayerOne() != null) {
             row.setText(tc.getTimeControlPlayerOne().getName());
diff --git a/app/src/main/java/com/chess/clock/adapters/TimeControlCABAdapter.java b/app/src/main/java/com/chess/clock/adapters/TimeControlCABAdapter.java
index 00f9929..4359491 100644
--- a/app/src/main/java/com/chess/clock/adapters/TimeControlCABAdapter.java
+++ b/app/src/main/java/com/chess/clock/adapters/TimeControlCABAdapter.java
@@ -11,7 +11,7 @@ import android.widget.*;
 import com.chess.clock.R;
 import com.chess.clock.engine.TimeControl;
 import com.chess.clock.engine.TimeControlWrapper;
-import com.chess.clock.fragments.SettingsFragment;
+import com.chess.clock.fragments.TimeSettingsFragment;
 
 import java.util.ArrayList;
 
@@ -67,7 +67,7 @@ public class TimeControlCABAdapter extends ArrayAdapter<TimeControlWrapper> {
             holder.editImgBtn.setFocusable(false);
             holder.editImgBtn.setOnClickListener(v -> {
                 int position1 = (Integer) holder.editImgBtn.getTag();
-                ((SettingsFragment) mTargetFragment).loadTimeControl(position1);
+                ((TimeSettingsFragment) mTargetFragment).loadTimeControl(position1);
             });
 
             row.setTag(holder);
diff --git a/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java b/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
index f49ccc5..a9197c9 100644
--- a/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
+++ b/app/src/main/java/com/chess/clock/fragments/TimeControlFragment.java
@@ -136,9 +136,7 @@ public class TimeControlFragment extends Fragment implements StageEditorDialog.O
      * Mandatory empty constructor for the fragment manager to instantiate the
      * fragment (e.g. upon screen orientation changes).
      */
-    public TimeControlFragment() {
-
-    }
+    public TimeControlFragment() {}
 
     /**
      * Called when a fragment is first attached to its activity.
diff --git a/app/src/main/java/com/chess/clock/fragments/SettingsFragment.java b/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
similarity index 58%
rename from app/src/main/java/com/chess/clock/fragments/SettingsFragment.java
rename to app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
index b78f780..192570a 100644
--- a/app/src/main/java/com/chess/clock/fragments/SettingsFragment.java
+++ b/app/src/main/java/com/chess/clock/fragments/TimeSettingsFragment.java
@@ -1,90 +1,76 @@
 package com.chess.clock.fragments;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
+import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
-import androidx.fragment.app.DialogFragment;
-import androidx.fragment.app.Fragment;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.view.ActionMode;
 import android.util.Log;
 import android.util.SparseBooleanArray;
-import android.view.*;
+import android.view.HapticFeedbackConstants;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.AdapterView;
 import android.widget.ListView;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.appcompat.view.ActionMode;
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentActivity;
 
 import com.chess.clock.R;
-import com.chess.clock.activities.SettingsActivity;
+import com.chess.clock.activities.TimerSettingsActivity;
 import com.chess.clock.adapters.TimeControlAdapter;
 import com.chess.clock.adapters.TimeControlCABAdapter;
 import com.chess.clock.engine.TimeControl;
 import com.chess.clock.engine.TimeControlWrapper;
 import com.chess.clock.service.ChessClockLocalService;
-import com.chess.clock.statics.AppData;
 import com.chess.clock.util.MultiSelectionUtil;
 
 import java.util.ArrayList;
 
 
-public class SettingsFragment extends Fragment implements MultiSelectionUtil.MultiChoiceModeListener {
+public class TimeSettingsFragment extends Fragment implements MultiSelectionUtil.MultiChoiceModeListener {
 
-    private static final String TAG = SettingsFragment.class.getName();
-
-    /**
-     * Shared preferences wrapper
-     */
-    private AppData appData;
-
-    /**
-     * FullScreen  menu item flag
-     */
-    boolean isFullScreen;
+    private static final String TAG = TimeSettingsFragment.class.getName();
 
     /**
      * This interface must be implemented by activities that contain this fragment to allow interaction.
      */
     public interface OnSettingsListener {
 
-        public ArrayList<TimeControlWrapper> getCurrentTimeControls();
+        ArrayList<TimeControlWrapper> getCurrentTimeControls();
 
-        public int getCheckedTimeControlIndex();
+        int getCheckedTimeControlIndex();
 
-        public void setCheckedTimeControlIndex(int position);
+        void setCheckedTimeControlIndex(int position);
 
-        public void loadTimeControl(int position);
+        void loadTimeControl(int position);
 
-        public void addTimeControl();
+        void addTimeControl();
 
-        public void removeTimeControl(int[] positions);
+        void removeTimeControl(int[] positions);
     }
 
     /**
-     * Save Instance KEYS
+     * Constants
      */
     private static final String KEY_ACTION_MODE = "action_mode";
     private static final String KEY_ITEM_SELECTED = "item_selected";
-
-    /**
-     * FRAGMENT TAGS
-     */
     private static final String TAG_RESET_DIALOG_FRAGMENT = "ResetDialogFragment";
-    private View.OnClickListener mStartBtnListener = v -> {
-        SettingsActivity activity = (SettingsActivity) getActivity();
-
-        // Check if current time control selected is the same as the the list selected
-        if (activity.isSameTimeControlLoaded()) {
-            ResetClockDialogFragment resetClockDialog = new ResetClockDialogFragment();
-            resetClockDialog.setTargetFragment(SettingsFragment.this, 0);
-            resetClockDialog.show(getActivity().getSupportFragmentManager(), TAG_RESET_DIALOG_FRAGMENT);
-        } else {
-            startNewClock();
-        }
-    };
+
     /**
      * Time Controls List Adapters and ActionMode helper.
      */
@@ -112,100 +98,68 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
     /**
      * UI
      */
-    private ListView mListView;
-    private AdapterView.OnItemClickListener mItemClickListener = new AdapterView.OnItemClickListener() {
-
-        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-
-            if (mListener != null && mListView != null) {
-                mItemChecked = position - mListView.getHeaderViewsCount();
-                mListener.setCheckedTimeControlIndex(mItemChecked);
-            }
-        }
-    };
+    private ListView timesListView;
     private View mStartBtn;
-    private View.OnClickListener mHeaderClickListener = v -> {
-        final String appPackageName = "com.chess";
-        try {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
-        } catch (android.content.ActivityNotFoundException anfe) {
-            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));
-        }
-    };
 
-    /**
-     * Mandatory empty constructor for the fragment manager to instantiate the
-     * fragment (e.g. upon screen orientation changes).
-     */
-    public SettingsFragment() {
+    public TimeSettingsFragment() {
     }
 
-    /**
-     * Called when a fragment is first attached to its activity. onCreate(Bundle) will be called after this.
-     *
-     * @param activity
-     */
     @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
 
         try {
-            mListener = (OnSettingsListener) activity;
-            appData = new AppData(activity.getApplicationContext());
-            isFullScreen = appData.getClockFullScreen();
+            mListener = (OnSettingsListener) getActivity();
         } catch (ClassCastException e) {
-            throw new ClassCastException(activity.toString()
-                    + " must implement OnSettingsListener");
+            throw new ClassCastException(getActivity() + " must implement OnSettingsListener");
         }
-    }
 
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        // Register the Fragment as a contributor to the options Menu
         setHasOptionsMenu(true);
-
         multiSelectionFinishedByOnDestroyView = false;
     }
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View v = inflater.inflate(R.layout.fragment_settings, container, false);
-
-        // Inflate chess.com logo
-        View header = inflater.inflate(R.layout.list_settings_header, null);
-        header.setOnClickListener(mHeaderClickListener);
-
-        // Init ListView
-        mListView = v.findViewById(R.id.list_time_controls);
-        mListView.addHeaderView(header, null, false);
-        mListView.setOnItemClickListener(mItemClickListener);
-
-        // Set start button listener
-        mStartBtn = v.findViewById(R.id.btn_start);
-        mStartBtn.setOnClickListener(mStartBtnListener);
-
-        // Set List Adapter and selection positions.
-        setupListView(savedInstanceState);
+        View view = inflater.inflate(R.layout.fragment_settings, container, false);
+        initListViewAndInflateHeaders(inflater, view);
+        return view;
+    }
 
-        return v;
+    @Override
+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+        AdapterView.OnItemClickListener itemClickListener = (parent, view1, position, id) -> {
+            if (mListener != null && timesListView != null) {
+                mItemChecked = position - timesListView.getHeaderViewsCount();
+                mListener.setCheckedTimeControlIndex(mItemChecked);
+            }
+        };
+        timesListView.setOnItemClickListener(itemClickListener);
+        mStartBtn = view.findViewById(R.id.startBtn);
+        mStartBtn.setOnClickListener(v -> {
+            TimerSettingsActivity activity = (TimerSettingsActivity) requireActivity();
+
+            // Check if current time control selected is the same as the the list selected
+            if (activity.isSameTimeControlLoaded()) {
+                ResetClockDialogFragment resetClockDialog = new ResetClockDialogFragment();
+                resetClockDialog.setTargetFragment(TimeSettingsFragment.this, 0);
+                resetClockDialog.show(activity.getSupportFragmentManager(), TAG_RESET_DIALOG_FRAGMENT);
+            } else {
+                startNewClock();
+            }
+        });
+        setupListViewAdapter(savedInstanceState);
     }
 
     @Override
     public void onResume() {
         super.onResume();
-        getActivity().setTitle(getString(R.string.title_activity_settings));
-        if (mListView != null && !isMultiSelectionActive) {
+        requireActivity().setTitle(getString(R.string.time_controls));
+        if (timesListView != null && !isMultiSelectionActive) {
             setListViewItemChecked();
         }
     }
 
-    @Override
-    public void onPause() {
-        super.onPause();
-    }
-
     @Override
     public void onDestroyView() {
         super.onDestroyView();
@@ -217,47 +171,23 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
     }
 
     @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
         super.onCreateOptionsMenu(menu, inflater);
         inflater.inflate(R.menu.settings_actions, menu);
     }
 
-    @Override
-    public void onPrepareOptionsMenu(Menu menu) {
-        super.onPrepareOptionsMenu(menu);
-
-        menu.findItem(R.id.action_full_screen).setChecked(isFullScreen);
-
-    }
-
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
-            case R.id.action_new:
-                mListener.addTimeControl();
-                mStartBtn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
-                        HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+            case R.id.action_settings:
+                // todo go to settings screen
+                Toast.makeText(getContext(), R.string.settings, Toast.LENGTH_SHORT).show();
                 return true;
             case R.id.action_edit:
                 startSettingsActionMode();
                 mStartBtn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
                 return true;
-            case R.id.action_full_screen:
-                isFullScreen = !isFullScreen;
-                appData.setClockFullScreen(isFullScreen);
-                int currentApiVersion = android.os.Build.VERSION.SDK_INT;
-                isFullScreen = appData.getClockFullScreen();
-
-                if (isFullScreen) {
-                    ((SettingsActivity) getActivity()).showFullScreen();
-                } else {
-                    ((SettingsActivity) getActivity()).hideFullScreen();
-                }
-
-                if (currentApiVersion >= Build.VERSION_CODES.HONEYCOMB) {
-                    getActivity().invalidateOptionsMenu();
-                }
             default:
                 return super.onOptionsItemSelected(item);
         }
@@ -275,10 +205,37 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
         super.onSaveInstanceState(outState);
     }
 
+    @SuppressLint("InflateParams")
+    private void initListViewAndInflateHeaders(LayoutInflater inflater, View view) {
+        timesListView = view.findViewById(R.id.list_time_controls);
+        View headerPresets = inflater.inflate(R.layout.header_presets, null);
+        View headerLogo = inflater.inflate(R.layout.header_logo, null);
+        headerLogo.setOnClickListener(v -> {
+            final String appPackageName = "com.chess";
+            try {
+                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
+            } catch (ActivityNotFoundException e) {
+                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));
+            }
+        });
+        View headerTimeBtn = inflater.inflate(R.layout.header_time_button, null);
+        headerTimeBtn
+                .findViewById(R.id.timeBtn)
+                .setOnClickListener(v -> {
+                    mListener.addTimeControl();
+                    mStartBtn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
+                            HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+                });
+
+        timesListView.addHeaderView(headerLogo, null, false);
+        timesListView.addHeaderView(headerTimeBtn, null, false);
+        timesListView.addHeaderView(headerPresets, null, false);
+    }
+
     /**
      * Set TimeControl ListView with proper Adapter and item(s) selection positions.
      */
-    private void setupListView(Bundle savedInstanceState) {
+    private void setupListViewAdapter(Bundle savedInstanceState) {
 
         if (savedInstanceState != null) {
             // Restore list selection mode.
@@ -292,12 +249,12 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
 
         // Init the CAB helper
         mMultiSelectionController = MultiSelectionUtil.attachMultiSelectionController(
-                mListView, (AppCompatActivity) getActivity(), this);
+                timesListView, (AppCompatActivity) getActivity(), this);
 
         if (isMultiSelectionActive) {
             adapterCAB = new TimeControlCABAdapter(getActivity(), mListener.getCurrentTimeControls(), this);
-            mListView.setAdapter(adapterCAB);
-            mListView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
+            timesListView.setAdapter(adapterCAB);
+            timesListView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
             mMultiSelectionController.tryRestoreInstanceState(savedInstanceState);
 
             // Hide Start Button
@@ -305,8 +262,8 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
 
         } else {
             adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls());
-            mListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
-            mListView.setAdapter(adapter);
+            timesListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
+            timesListView.setAdapter(adapter);
         }
     }
 
@@ -317,8 +274,8 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
     private void startSettingsActionMode() {
 
         adapterCAB = new TimeControlCABAdapter(getActivity(), mListener.getCurrentTimeControls(), this);
-        mListView.setAdapter(adapterCAB);
-        mListView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
+        timesListView.setAdapter(adapterCAB);
+        timesListView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
         mMultiSelectionController.startActionMode();
 
         // Hide Start Button
@@ -343,7 +300,7 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
         mItemChecked = position;
         mListener.setCheckedTimeControlIndex(mItemChecked);
 
-        mListView.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
+        timesListView.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                 HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
 
         mListener.loadTimeControl(mItemChecked);
@@ -360,22 +317,20 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
 
     @Override
     public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
-        actionMode.setTitle(mTotalItemChecked + " " + getActivity().getString(R.string.settings_cab_title_time_controls_selected));
+        actionMode.setTitle(mTotalItemChecked + " " + requireActivity().getString(R.string.settings_cab_title_time_controls_selected));
         return false; // Return false if nothing is done
     }
 
     @Override
     public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {
-        switch (menuItem.getItemId()) {
-            case R.id.action_delete:
-                mStartBtn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
-                        HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
-                deleteTimeControls();
-                actionMode.finish(); // Action picked, so close the CAB
-                return true;
-            default:
-                return false;
+        if (menuItem.getItemId() == R.id.action_delete) {
+            mStartBtn.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
+                    HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
+            deleteTimeControls();
+            actionMode.finish(); // Action picked, so close the CAB
+            return true;
         }
+        return false;
     }
 
     @Override
@@ -395,17 +350,17 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
         } else {
             mTotalItemChecked--;
         }
-        mode.setTitle(mTotalItemChecked + " " + getActivity().getString(R.string.settings_cab_title_time_controls_selected));
+        mode.setTitle(mTotalItemChecked + " " + getString(R.string.settings_cab_title_time_controls_selected));
     }
 
     private void setListSingleChoiceMode() {
-        if (mListView != null) {
+        if (timesListView != null) {
 
             mTotalItemChecked = 0;
 
             adapter = new TimeControlAdapter(getActivity(), mListener.getCurrentTimeControls());
-            mListView.setAdapter(adapter);
-            mListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
+            timesListView.setAdapter(adapter);
+            timesListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);
             setListViewItemChecked();
 
             mListener.setCheckedTimeControlIndex(mItemChecked);
@@ -415,12 +370,12 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
 
     private void setListViewItemChecked() {
         // Add header offset
-        int itemChecked = mItemChecked + mListView.getHeaderViewsCount();
+        int itemChecked = mItemChecked + timesListView.getHeaderViewsCount();
         if (itemChecked <= 0) {
             itemChecked = 1;
             Log.w(TAG, "Caught itemChecked <= 0. Resetting to 1.");
         }
-        mListView.setItemChecked(itemChecked, true);
+        timesListView.setItemChecked(itemChecked, true);
     }
 
     private void deleteTimeControls() {
@@ -428,7 +383,7 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
 
         boolean updateList = false;
         int[] positions = new int[mTotalItemChecked];
-        SparseBooleanArray checked = mListView.getCheckedItemPositions();
+        SparseBooleanArray checked = timesListView.getCheckedItemPositions();
 
         int tmpItemChecked = mItemChecked;
 
@@ -437,7 +392,7 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
         for (int i = 0; i < checked.size(); i++) {
             // If checked
             if (checked.valueAt(i)) {
-                int position = checked.keyAt(i) - mListView.getHeaderViewsCount();
+                int position = checked.keyAt(i) - timesListView.getHeaderViewsCount();
                 Log.d(TAG, "Marking time control " + position + " to remove.");
                 positions[k] = position;
                 k++;
@@ -462,18 +417,19 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
     }
 
     public void startNewClock() {
-        int position = mItemChecked + mListView.getHeaderViewsCount();
+        int position = mItemChecked + timesListView.getHeaderViewsCount();
         Log.d(TAG, "Starting new clock on list position: " + position);
 
-        TimeControlWrapper timeControlWrapper = (TimeControlWrapper) mListView.getAdapter().getItem(position);
+        TimeControlWrapper timeControlWrapper = (TimeControlWrapper) timesListView.getAdapter().getItem(position);
         if (timeControlWrapper != null) {
             TimeControl playerOne = timeControlWrapper.getTimeControlPlayerOne();
             TimeControl playerTwo = timeControlWrapper.getTimeControlPlayerTwo();
-            Intent startServiceIntent = ChessClockLocalService.getChessClockServiceIntent(getActivity().getApplicationContext(), playerOne, playerTwo);
-            getActivity().startService(startServiceIntent);
-            getActivity().setResult(getActivity().RESULT_OK);
-            getActivity().finish();
-            getActivity().overridePendingTransition(R.anim.left_to_right_in, R.anim.left_to_right_full);
+            FragmentActivity activity = requireActivity();
+            Intent startServiceIntent = ChessClockLocalService.getChessClockServiceIntent(activity.getApplicationContext(), playerOne, playerTwo);
+            activity.startService(startServiceIntent);
+            activity.setResult(Activity.RESULT_OK);
+            activity.finish();
+            activity.overridePendingTransition(R.anim.left_to_right_in, R.anim.left_to_right_full);
         } else {
             Log.w(TAG, "time control not available, ignoring start new clock");
             Thread.dumpStack();
@@ -490,20 +446,18 @@ public class SettingsFragment extends Fragment implements MultiSelectionUtil.Mul
             super();
         }
 
+        @NonNull
         @Override
         public Dialog onCreateDialog(Bundle savedInstanceState) {
-
-            // Builder class for convenient dialog construction
             AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
             builder.setMessage(R.string.dialog_clock_running_reset)
                     .setPositiveButton(R.string.dialog_yes, (dialog, id) -> {
-                        SettingsFragment f = (SettingsFragment) getTargetFragment();
+                        TimeSettingsFragment f = (TimeSettingsFragment) getTargetFragment();
                         if (f != null) {
                             f.startNewClock();
                         }
                     })
-                    .setNegativeButton(R.string.dialog_no, (dialog, id) -> ((SettingsActivity) getActivity()).dismiss());
-            // Create the AlertDialog object and return it
+                    .setNegativeButton(R.string.dialog_no, (dialog, id) -> ((TimerSettingsActivity) requireActivity()).dismiss());
             Dialog dialog = builder.create();
             dialog.setCanceledOnTouchOutside(false);
             return dialog;
diff --git a/app/src/main/java/com/chess/clock/views/ClockButton.java b/app/src/main/java/com/chess/clock/views/ClockButton.java
index a15de1b..c80a347 100644
--- a/app/src/main/java/com/chess/clock/views/ClockButton.java
+++ b/app/src/main/java/com/chess/clock/views/ClockButton.java
@@ -8,7 +8,6 @@ import android.util.AttributeSet;
 import android.util.TypedValue;
 import android.view.LayoutInflater;
 import android.view.View;
-import android.widget.Button;
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
@@ -20,7 +19,6 @@ import com.chess.clock.R;
 
 public class ClockButton extends FrameLayout {
 
-    private final Button button;
     private final TextView timeTv;
     private final TextView movesTv;
     private final View stageOne;
@@ -31,7 +29,6 @@ public class ClockButton extends FrameLayout {
         super(context, attrs);
         LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         View view = inflater.inflate(R.layout.view_clock_button, this, true);
-        button = view.findViewById(R.id.clockButton);
         timeTv = view.findViewById(R.id.clockTimeTv);
         movesTv = view.findViewById(R.id.movesTv);
         stageOne = view.findViewById(R.id.stageOne);
@@ -58,16 +55,15 @@ public class ClockButton extends FrameLayout {
     }
 
     public void setClockButtonClickListener(OnClickListener listener) {
-        button.setOnClickListener(listener);
+        setOnClickListener(listener);
     }
 
     public void updateUi(
             @DrawableRes int btnBgRes,
             @ColorRes int textColorRes
     ) {
-        button.setBackgroundDrawable(getResources().getDrawable(btnBgRes));
+        setBackgroundDrawable(getResources().getDrawable(btnBgRes));
         timeTv.setTextColor(getResources().getColor(textColorRes));
-
     }
 
     private void setStageBg(View stage, Boolean active) {
diff --git a/app/src/main/java/com/chess/clock/views/ClockMenu.java b/app/src/main/java/com/chess/clock/views/ClockMenu.java
index 60c4515..6007e52 100644
--- a/app/src/main/java/com/chess/clock/views/ClockMenu.java
+++ b/app/src/main/java/com/chess/clock/views/ClockMenu.java
@@ -21,6 +21,8 @@ public class ClockMenu extends ConstraintLayout {
         super(context, attrs);
         LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         View view = inflater.inflate(R.layout.view_clock_menu, this, true);
+        view.setBackgroundResource(R.color.toolbar_gray);
+
         settingsButton = view.findViewById(R.id.settingsBtn);
         playPauseButton = view.findViewById(R.id.playPauseBtn);
         resetButton = view.findViewById(R.id.resetBtn);
diff --git a/app/src/main/java/com/chess/clock/views/StyledButton.java b/app/src/main/java/com/chess/clock/views/StyledButton.java
new file mode 100644
index 0000000..9197ad7
--- /dev/null
+++ b/app/src/main/java/com/chess/clock/views/StyledButton.java
@@ -0,0 +1,34 @@
+package com.chess.clock.views;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.cardview.widget.CardView;
+
+import com.chess.clock.R;
+
+public class StyledButton extends CardView {
+
+    public StyledButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        float radius = getResources().getDimension(R.dimen.default_radius);
+        int elevation = getResources().getDimensionPixelSize(R.dimen.default_elevation);
+        setRadius(radius);
+        setCardElevation(elevation);
+
+        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View view = inflater.inflate(R.layout.view_styled_button, this, true);
+        TextView text = view.findViewById(R.id.text);
+
+        if (attrs != null) {
+            TypedArray t = context.obtainStyledAttributes(attrs, R.styleable.StyledButton, 0, 0);
+            String buttonText = t.getString(R.styleable.StyledButton_android_text);
+            t.recycle();
+            text.setText(buttonText);
+        }
+    }
+}
diff --git a/app/src/main/java/com/chess/clock/views/TimeControlCheckedTextView.java b/app/src/main/java/com/chess/clock/views/TimeControlCheckedTextView.java
deleted file mode 100644
index 07c8f49..0000000
--- a/app/src/main/java/com/chess/clock/views/TimeControlCheckedTextView.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.chess.clock.views;
-
-import android.content.Context;
-import android.util.AttributeSet;
-
-import androidx.appcompat.widget.AppCompatCheckedTextView;
-import com.chess.clock.R;
-
-/**
- * Custom CheckedTextView making text color also sensitive to checked state.
- */
-public class TimeControlCheckedTextView extends AppCompatCheckedTextView {
-
-    public TimeControlCheckedTextView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    @Override
-    public void setChecked(boolean checked) {
-        super.setChecked(checked);
-
-        this.setTextColor(checked ?
-                getResources().getColor(R.color.list_item_text_color_checked) :
-                getResources().getColor(R.color.list_item_text_color_normal));
-    }
-}
