diff --git a/app/src/main/java/agersant/polaris/Player.java b/app/src/main/java/agersant/polaris/Player.java
index fd730cb..6fc6a63 100644
--- a/app/src/main/java/agersant/polaris/Player.java
+++ b/app/src/main/java/agersant/polaris/Player.java
@@ -1,12 +1,26 @@
 package agersant.polaris;
 
 import android.content.Intent;
-import android.media.MediaDataSource;
-import android.media.MediaPlayer;
+import android.net.Uri;
 
-import java.io.IOException;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.PlaybackParameters;
+import com.google.android.exoplayer2.Timeline;
+import com.google.android.exoplayer2.extractor.DefaultExtractorsFactory;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 
-public class Player implements MediaPlayer.OnCompletionListener, MediaPlayer.OnErrorListener {
+import java.io.File;
+
+import agersant.polaris.api.remote.PolarisExoPlayerDataSourceFactory;
+
+public class Player implements ExoPlayer.EventListener {
 
 	public static final String PLAYBACK_ERROR = "PLAYBACK_ERROR";
 	public static final String PLAYING_TRACK = "PLAYING_TRACK";
@@ -14,16 +28,17 @@ public class Player implements MediaPlayer.OnCompletionListener, MediaPlayer.OnE
 	public static final String RESUMED_TRACK = "RESUMED_TRACK";
 	public static final String COMPLETED_TRACK = "COMPLETED_TRACK";
 
-	private PolarisMediaPlayer mediaPlayer;
-	private MediaDataSource media;
+	private ExoPlayer mediaPlayer;
+	private Uri currentURI;
 	private CollectionItem item;
 	private PolarisService service;
+	private float resumeProgress;
 
 	Player(PolarisService service) {
 		this.service = service;
-		mediaPlayer = new PolarisMediaPlayer();
-		mediaPlayer.setOnCompletionListener(this);
-		mediaPlayer.setOnErrorListener(this);
+		resumeProgress = -1.f;
+		mediaPlayer = ExoPlayerFactory.newSimpleInstance(service, new DefaultTrackSelector());
+		mediaPlayer.addListener(this);
 	}
 
 	private void broadcast(String event) {
@@ -34,19 +49,15 @@ public class Player implements MediaPlayer.OnCompletionListener, MediaPlayer.OnE
 	}
 
 	void stop() {
-		mediaPlayer.reset();
-		if (media != null) {
-			try {
-				media.close();
-			} catch (IOException e) {
-				System.out.println("Error while closing media datasource: " + e);
-			}
-			media = null;
-		}
+		mediaPlayer.stop();
+		resumeProgress = -1.f;
 		item = null;
 	}
 
 	void play(CollectionItem item) {
+
+		resumeProgress = -1.f;
+
 		if (this.item != null && item.getPath().equals(this.item.getPath())) {
 			System.out.println("Restarting playback for: " + item.getPath());
 			seekTo(0);
@@ -58,9 +69,11 @@ public class Player implements MediaPlayer.OnCompletionListener, MediaPlayer.OnE
 		stop();
 
 		try {
-			media = service.getAPI().getAudio(item);
-			mediaPlayer.setDataSource(media);
-			mediaPlayer.prepareAsync();
+			currentURI = service.getAPI().getAudio(item);
+			PolarisExoPlayerDataSourceFactory dsf = new PolarisExoPlayerDataSourceFactory(service);
+			MediaSource mediaSource = new ExtractorMediaSource(currentURI, dsf, new DefaultExtractorsFactory(), null, null);
+			mediaPlayer.prepare(mediaSource);
+			mediaPlayer.setPlayWhenReady(true);
 		} catch (Exception e) {
 			System.out.println("Error while beginning media playback: " + e);
 			broadcast(PLAYBACK_ERROR);
@@ -78,55 +91,86 @@ public class Player implements MediaPlayer.OnCompletionListener, MediaPlayer.OnE
 		return item == null;
 	}
 
-	boolean isUsing(MediaDataSource media) {
-		return this.media == media;
+	boolean isUsing(File file) {
+		// TODO
+		return false;
 	}
 
 	void resume() {
-		if (mediaPlayer == null) {
-			return;
-		}
-		mediaPlayer.resume();
+		mediaPlayer.setPlayWhenReady(true);
 		broadcast(Player.RESUMED_TRACK);
 	}
 
 	void pause() {
-		if (mediaPlayer == null) {
-			return;
-		}
-		mediaPlayer.pause();
+		mediaPlayer.setPlayWhenReady(false);
 		broadcast(Player.PAUSED_TRACK);
 	}
 
 	boolean isPlaying() {
-		if (mediaPlayer == null) {
-			return false;
-		}
-		return mediaPlayer.isPlaying();
+		return mediaPlayer.getPlayWhenReady();
 	}
 
 	void seekTo(float progress) {
-		if (mediaPlayer != null) {
-			mediaPlayer.seekTo(progress);
+		long duration = mediaPlayer.getDuration();
+		if (duration == C.TIME_UNSET) {
+			resumeProgress = progress;
+			return;
 		}
+		resumeProgress = -1;
+		long position = (long)( duration * progress );
+		mediaPlayer.seekTo(position);
 	}
 
-	float getProgress() {
-		if (mediaPlayer == null) {
-			return 0.f;
+	long getDuration() {
+		long duration = mediaPlayer.getDuration();
+		if (duration == C.TIME_UNSET) {
+			return 0;
 		}
-		return mediaPlayer.getProgress();
+		return duration;
+	}
+
+	long getPosition() {
+		long position = mediaPlayer.getCurrentPosition();
+		if (position == C.TIME_UNSET) {
+			return 0;
+		}
+		return position;
+	}
+
+	@Override
+	public void onTimelineChanged(Timeline timeline, Object manifest) {
+	}
+
+	@Override
+	public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
 	}
 
 	@Override
-	public void onCompletion(MediaPlayer mp) {
-		broadcast(COMPLETED_TRACK);
+	public void onLoadingChanged(boolean isLoading) {
 	}
 
 	@Override
-	public boolean onError(MediaPlayer mediaPlayer, int i, int i1) {
+	public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+		if (playbackState == ExoPlayer.STATE_READY) {
+			if (resumeProgress > 0.f) {
+				seekTo(resumeProgress);
+			}
+		}
+		if (playbackState == ExoPlayer.STATE_ENDED) {
+			broadcast(COMPLETED_TRACK);
+		}
+	}
+
+	@Override
+	public void onPlayerError(ExoPlaybackException error) {
 		broadcast(PLAYBACK_ERROR);
-		return false;
 	}
 
+	@Override
+	public void onPositionDiscontinuity() {
+	}
+
+	@Override
+	public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
+	}
 }
diff --git a/app/src/main/java/agersant/polaris/PolarisApplication.java b/app/src/main/java/agersant/polaris/PolarisApplication.java
index d444ba8..a2823cf 100644
--- a/app/src/main/java/agersant/polaris/PolarisApplication.java
+++ b/app/src/main/java/agersant/polaris/PolarisApplication.java
@@ -2,8 +2,6 @@ package agersant.polaris;
 
 import android.app.Application;
 
-import agersant.polaris.api.remote.RequestQueue;
-
 public class PolarisApplication extends Application {
 
 	private static PolarisApplication instance;
@@ -17,7 +15,6 @@ public class PolarisApplication extends Application {
 	public void onCreate() {
 		super.onCreate();
 		instance = this;
-		RequestQueue.init(this);
 	}
 
 }
diff --git a/app/src/main/java/agersant/polaris/PolarisMediaPlayer.java b/app/src/main/java/agersant/polaris/PolarisMediaPlayer.java
index 3b9a0f5..707e5bf 100644
--- a/app/src/main/java/agersant/polaris/PolarisMediaPlayer.java
+++ b/app/src/main/java/agersant/polaris/PolarisMediaPlayer.java
@@ -1,209 +1,9 @@
 package agersant.polaris;
 
-import android.media.AudioManager;
-import android.media.MediaDataSource;
-import android.media.MediaPlayer;
-
 /**
  * Created by agersant on 12/6/2016.
  */
 
-public class PolarisMediaPlayer
-		implements
-		MediaPlayer.OnPreparedListener,
-		MediaPlayer.OnErrorListener,
-		MediaPlayer.OnCompletionListener {
-
-	private MediaPlayer player;
-	private MediaPlayer.OnCompletionListener onCompletionListener;
-	private MediaPlayer.OnErrorListener onErrorListener;
-	private State state;
-	private boolean pause;
-	private Float seekTarget;
-
-	PolarisMediaPlayer() {
-		seekTarget = null;
-		pause = false;
-		state = State.IDLE;
-		player = new MediaPlayer();
-		player.setAudioStreamType(AudioManager.STREAM_MUSIC);
-		player.setOnPreparedListener(this);
-		player.setOnCompletionListener(this);
-		player.setOnErrorListener(this);
-	}
-
-	@Override
-	public void onCompletion(MediaPlayer mediaPlayer) {
-		state = State.PLAYBACK_COMPLETED;
-		if (onCompletionListener != null) {
-			onCompletionListener.onCompletion(mediaPlayer);
-		}
-	}
-
-	void setOnCompletionListener(MediaPlayer.OnCompletionListener listener) {
-		onCompletionListener = listener;
-	}
-
-	void setOnErrorListener(MediaPlayer.OnErrorListener listener) {
-		onErrorListener = listener;
-	}
-
-	@Override
-	public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
-		state = State.ERROR;
-		if (onErrorListener != null) {
-			return onErrorListener.onError(mediaPlayer, what, extra);
-		}
-		return false;
-	}
-
-	@Override
-	public void onPrepared(MediaPlayer mediaPlayer) {
-		state = State.PREPARED;
-
-		player.start();
-		state = State.STARTED;
-
-		if (seekTarget != null) {
-			seekTo(seekTarget);
-			seekTarget = null;
-		}
-
-		if (pause) {
-			pause();
-		}
-	}
-
-	void setDataSource(MediaDataSource media) {
-		state = State.INITIALIZED;
-		player.setDataSource(media);
-	}
-
-	void prepareAsync() {
-		state = State.PREPARING;
-		player.prepareAsync();
-	}
-
-	void pause() {
-		pause = true;
-		switch (state) {
-			case STARTED:
-				state = State.PAUSED;
-				player.pause();
-				break;
-		}
-	}
-
-	void reset() {
-		state = State.IDLE;
-		pause = false;
-		seekTarget = null;
-		player.reset();
-	}
-
-	void release() {
-		switch (state) {
-			case IDLE:
-			case INITIALIZED:
-			case PREPARING:
-			case END:
-				break;
-			default:
-				player.release();
-		}
-		state = State.END;
-	}
-
-	void resume() {
-		pause = false;
-		switch (state) {
-			case PREPARED:
-			case PAUSED:
-			case PLAYBACK_COMPLETED:
-				state = State.STARTED;
-				player.start();
-				if (seekTarget != null) {
-					seekTo(seekTarget);
-					seekTarget = null;
-				}
-				break;
-		}
-	}
-
-	boolean isPlaying() {
-		if (pause) {
-			return false;
-		}
-		switch (state) {
-			case PREPARING:
-			case STARTED:
-				return true;
-		}
-		return false;
-	}
-
-	void seekTo(float progress) {
-		switch (state) {
-			case IDLE:
-			case INITIALIZED:
-			case PREPARING:
-			case PREPARED:
-				seekTarget = progress;
-				break;
-			case STOPPED:
-			case ERROR:
-			case END:
-				return;
-			case PLAYBACK_COMPLETED:
-				resume();
-				// Fallthrough
-			case STARTED:
-			case PAUSED:
-			{
-				int duration = (int) (progress * player.getDuration());
-				player.seekTo(duration);
-			}
-		}
-	}
-
-	float getProgress() {
-		switch (state) {
-			case IDLE:
-			case INITIALIZED:
-			case PREPARING:
-			case PREPARED:
-				if (seekTarget != null) {
-					return seekTarget;
-				}
-				return 0.f;
-			case STOPPED:
-			case ERROR:
-			case END:
-				return 0.f;
-			case PLAYBACK_COMPLETED:
-				return 1.f;
-			case STARTED:
-			case PAUSED:
-			{
-				int duration = player.getDuration();
-				int position = player.getCurrentPosition();
-				return (float) position / duration;
-			}
-		}
-		return 0;
-	}
-
-	private enum State {
-		IDLE,
-		INITIALIZED,
-		PREPARING,
-		PREPARED,
-		STARTED,
-		STOPPED,
-		PAUSED,
-		PLAYBACK_COMPLETED,
-		END,
-		ERROR,
-	}
+public class PolarisMediaPlayer {
 
 }
diff --git a/app/src/main/java/agersant/polaris/PolarisService.java b/app/src/main/java/agersant/polaris/PolarisService.java
index 4657b55..6f631f8 100644
--- a/app/src/main/java/agersant/polaris/PolarisService.java
+++ b/app/src/main/java/agersant/polaris/PolarisService.java
@@ -12,7 +12,7 @@ import android.content.IntentFilter;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Icon;
 import android.media.AudioManager;
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.os.Binder;
 import android.os.IBinder;
 import android.widget.Toast;
@@ -30,7 +30,6 @@ import agersant.polaris.api.local.LocalAPI;
 import agersant.polaris.api.local.OfflineCache;
 import agersant.polaris.api.remote.DownloadQueue;
 import agersant.polaris.api.remote.ServerAPI;
-import agersant.polaris.api.remote.StreamingMediaDataSource;
 import agersant.polaris.features.player.PlayerActivity;
 
 /**
@@ -221,7 +220,7 @@ public class PolarisService extends Service {
 		state.queueOrdering = getOrdering();
 		CollectionItem currentItem = getCurrentItem();
 		state.queueIndex = state.queueContent.indexOf(currentItem);
-		state.trackProgress = getProgress();
+		state.trackProgress = getPosition();
 
 		// Persist
 		try (FileOutputStream out = new FileOutputStream(storage)) {
@@ -357,8 +356,12 @@ public class PolarisService extends Service {
 		return player.isPlaying();
 	}
 
-	public float getProgress() {
-		return player.getProgress();
+	public long getDuration() {
+		return player.getDuration();
+	}
+
+	public long getPosition() {
+		return player.getPosition();
 	}
 
 	public void seekTo(float progress) {
@@ -369,8 +372,8 @@ public class PolarisService extends Service {
 		player.stop();
 	}
 
-	public boolean isUsing(StreamingMediaDataSource mediaDataSource) {
-		return player.isUsing(mediaDataSource);
+	public boolean isUsing(File file) {
+		return player.isUsing(file);
 	}
 
 	public boolean isOffline() {
@@ -405,7 +408,7 @@ public class PolarisService extends Service {
 		offlineCache.putImage(item, image);
 	}
 
-	public MediaDataSource downloadAudio(CollectionItem item) throws IOException {
+	public Uri downloadAudio(CollectionItem item) throws IOException {
 		return downloadQueue.getAudio(item);
 	}
 
@@ -420,4 +423,12 @@ public class PolarisService extends Service {
 	public ServerAPI getServerAPI() {
 		return serverAPI;
 	}
+
+	public String getAuthCookieHeader() {
+		return serverAPI.getCookieHeader();
+	}
+
+	public String getAuthRawHeader() {
+		return serverAPI.getAuthorizationHeader();
+	}
 }
diff --git a/app/src/main/java/agersant/polaris/api/API.java b/app/src/main/java/agersant/polaris/api/API.java
index b311926..c8ed1db 100644
--- a/app/src/main/java/agersant/polaris/api/API.java
+++ b/app/src/main/java/agersant/polaris/api/API.java
@@ -2,7 +2,7 @@ package agersant.polaris.api;
 
 import android.content.SharedPreferences;
 import android.graphics.Bitmap;
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.preference.PreferenceManager;
 import android.widget.ImageView;
 
@@ -39,7 +39,7 @@ public class API {
 		return preferences.getBoolean(offlineModePreferenceKey, false);
 	}
 
-	public MediaDataSource getAudio(CollectionItem item) throws IOException {
+	public Uri getAudio(CollectionItem item) throws IOException {
 		if (localAPI.hasAudio(item)) {
 			return localAPI.getAudio(item);
 		}
diff --git a/app/src/main/java/agersant/polaris/api/IPolarisAPI.java b/app/src/main/java/agersant/polaris/api/IPolarisAPI.java
index dd1abaa..b18f4e4 100644
--- a/app/src/main/java/agersant/polaris/api/IPolarisAPI.java
+++ b/app/src/main/java/agersant/polaris/api/IPolarisAPI.java
@@ -1,6 +1,6 @@
 package agersant.polaris.api;
 
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.widget.ImageView;
 
 import java.io.IOException;
@@ -15,7 +15,7 @@ public interface IPolarisAPI {
 
 	void getImage(CollectionItem item, ImageView view);
 
-	MediaDataSource getAudio(CollectionItem item) throws IOException;
+	Uri getAudio(CollectionItem item) throws IOException;
 
 	void browse(String path, final ItemsCallback handlers);
 
diff --git a/app/src/main/java/agersant/polaris/api/local/LocalAPI.java b/app/src/main/java/agersant/polaris/api/local/LocalAPI.java
index c81845b..7179a1f 100644
--- a/app/src/main/java/agersant/polaris/api/local/LocalAPI.java
+++ b/app/src/main/java/agersant/polaris/api/local/LocalAPI.java
@@ -1,7 +1,7 @@
 package agersant.polaris.api.local;
 
 import android.graphics.Bitmap;
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.widget.ImageView;
 
 import java.io.IOException;
@@ -29,7 +29,7 @@ public class LocalAPI implements IPolarisAPI {
 	}
 
 	@Override
-	public MediaDataSource getAudio(CollectionItem item) throws IOException {
+	public Uri getAudio(CollectionItem item) throws IOException {
 		String path = item.getPath();
 		return offlineCache.getAudio(path);
 	}
diff --git a/app/src/main/java/agersant/polaris/api/local/OfflineCache.java b/app/src/main/java/agersant/polaris/api/local/OfflineCache.java
index 901ed3c..ac470bf 100644
--- a/app/src/main/java/agersant/polaris/api/local/OfflineCache.java
+++ b/app/src/main/java/agersant/polaris/api/local/OfflineCache.java
@@ -5,7 +5,7 @@ import android.content.SharedPreferences;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.preference.PreferenceManager;
 
 import java.io.File;
@@ -332,7 +332,7 @@ public class OfflineCache {
 		}
 	}
 
-	MediaDataSource getAudio(String virtualPath) throws IOException {
+	Uri getAudio(String virtualPath) throws IOException {
 		if (!hasAudio(virtualPath)) {
 			throw new FileNotFoundException();
 		}
@@ -341,8 +341,7 @@ public class OfflineCache {
 			metadata.lastUse = new Date();
 			saveMetadata(virtualPath, metadata);
 		}
-		File source = getCacheFile(virtualPath, CacheDataType.AUDIO, false);
-		return new LocalMediaDataSource(source);
+		return Uri.fromFile(getCacheFile(virtualPath, CacheDataType.AUDIO, false));
 	}
 
 	Bitmap getImage(String virtualPath) throws IOException {
diff --git a/app/src/main/java/agersant/polaris/api/remote/Auth.java b/app/src/main/java/agersant/polaris/api/remote/Auth.java
index daf5d12..fc51c0c 100644
--- a/app/src/main/java/agersant/polaris/api/remote/Auth.java
+++ b/app/src/main/java/agersant/polaris/api/remote/Auth.java
@@ -31,6 +31,17 @@ class Auth implements Authenticator {
 		cookie = null;
 	}
 
+	public String getCookieHeader() {
+		return cookie;
+	}
+
+	public String getAuthorizationHeader() {
+		String username = preferences.getString(usernameKey, "");
+		String password = preferences.getString(passwordKey, "");
+		String credentials = username + ":" + password;
+		return "Basic " + Base64.encodeToString(credentials.getBytes(), Base64.NO_WRAP);
+	}
+
 	void parseCookie(String header) {
 		Matcher matcher = setCookiePattern.matcher(header);
 		if (matcher.find()) {
@@ -38,12 +49,6 @@ class Auth implements Authenticator {
 		}
 	}
 
-	private String getAuthorizationHeader() {
-		String username = preferences.getString(usernameKey, "");
-		String password = preferences.getString(passwordKey, "");
-		return username + ":" + password;
-	}
-
 	@Override
 	public Request authenticate(Route route, Response response) throws IOException {
 		Request.Builder newRequest = response.request().newBuilder();
@@ -56,7 +61,6 @@ class Auth implements Authenticator {
 		}
 
 		String authorization = getAuthorizationHeader();
-		authorization = "Basic " + Base64.encodeToString(authorization.getBytes(), Base64.NO_WRAP);
 		String oldAuthorization = response.request().header("Authorization");
 		boolean newAuthorization = oldAuthorization == null || !authorization.equals(oldAuthorization);
 		if (newAuthorization) {
diff --git a/app/src/main/java/agersant/polaris/api/remote/DownloadQueue.java b/app/src/main/java/agersant/polaris/api/remote/DownloadQueue.java
index 8f7fe89..9a9db34 100644
--- a/app/src/main/java/agersant/polaris/api/remote/DownloadQueue.java
+++ b/app/src/main/java/agersant/polaris/api/remote/DownloadQueue.java
@@ -1,6 +1,6 @@
 package agersant.polaris.api.remote;
 
-import android.media.MediaDataSource;
+import android.net.Uri;
 
 import java.io.File;
 import java.io.IOException;
@@ -41,20 +41,8 @@ public class DownloadQueue {
 		}, 1500, 500);
 	}
 
-	public synchronized MediaDataSource getAudio(CollectionItem item) throws IOException {
-		DownloadQueueWorkItem existingWorker = findActiveWorker(item);
-		if (existingWorker != null) {
-			return existingWorker.getMediaDataSource();
-		}
-
-		DownloadQueueWorkItem newWorker = findIdleWorker();
-		if (newWorker == null) {
-			newWorker = findInterruptibleWorker();
-			assert newWorker != null;
-		}
-
-		newWorker.beginDownload(item);
-		return newWorker.getMediaDataSource();
+	public synchronized Uri getAudio(CollectionItem item) throws IOException {
+		return service.getServerAPI().serveUri(item.getPath());
 	}
 
 	private DownloadQueueWorkItem findActiveWorker(CollectionItem item) {
diff --git a/app/src/main/java/agersant/polaris/api/remote/DownloadQueueWorkItem.java b/app/src/main/java/agersant/polaris/api/remote/DownloadQueueWorkItem.java
index 5e0c19f..99961dc 100644
--- a/app/src/main/java/agersant/polaris/api/remote/DownloadQueueWorkItem.java
+++ b/app/src/main/java/agersant/polaris/api/remote/DownloadQueueWorkItem.java
@@ -1,7 +1,6 @@
 package agersant.polaris.api.remote;
 
 import android.content.Intent;
-import android.media.MediaDataSource;
 import android.os.AsyncTask;
 
 import java.io.File;
@@ -54,15 +53,15 @@ class DownloadQueueWorkItem {
 		if (mediaDataSource == null) {
 			return false;
 		}
-		return service.isUsing(mediaDataSource);
+		return service.isUsing(mediaDataSource.getFile());
 	}
 
 	boolean isInterruptible() {
 		return !isDataSourceInUse();
 	}
 
-	MediaDataSource getMediaDataSource() {
-		return mediaDataSource;
+	File getMediaFile() {
+		return tempFile;
 	}
 
 	void beginDownload(CollectionItem item) throws IOException {
@@ -95,12 +94,9 @@ class DownloadQueueWorkItem {
 		job.execute();
 	}
 
-	void setContentLength(int length) {
-		mediaDataSource.setContentLength(length);
-	}
-
 	void onJobSuccess() {
-		mediaDataSource.markAsComplete();
+		// TODO?
+		// mediaDataSource.markAsComplete();
 	}
 
 	void onJobError() {
@@ -111,7 +107,7 @@ class DownloadQueueWorkItem {
 		if (stopActiveMedia) {
 			System.out.println("Stopping active datasource");
 			isPaused = !service.isPlaying();
-			mediaProgress = service.getProgress();
+			mediaProgress = service.getPosition();
 			service.stop();
 		}
 
@@ -147,7 +143,8 @@ class DownloadQueueWorkItem {
 		}
 		if (mediaDataSource != null) {
 			try {
-				mediaDataSource.close();
+				// TODO?
+				// mediaDataSource.getFile().close();
 			} catch (Exception e) {
 				System.out.println("Error while closing data source for download queue work item");
 			}
diff --git a/app/src/main/java/agersant/polaris/api/remote/DownloadTask.java b/app/src/main/java/agersant/polaris/api/remote/DownloadTask.java
index 5d14c7a..480d5db 100644
--- a/app/src/main/java/agersant/polaris/api/remote/DownloadTask.java
+++ b/app/src/main/java/agersant/polaris/api/remote/DownloadTask.java
@@ -55,8 +55,6 @@ class DownloadTask extends AsyncTask<Object, Integer, Integer> {
 			System.out.println("Stream content has no response");
 			return 1;
 		}
-		long contentLength = responseBody.contentLength();
-		workItem.setContentLength((int) contentLength);
 
 		try (InputStream inputStream = responseBody.byteStream();
 			 FileOutputStream outputStream = new FileOutputStream(outFile);
diff --git a/app/src/main/java/agersant/polaris/api/remote/PolarisExoPlayerDataSourceFactory.java b/app/src/main/java/agersant/polaris/api/remote/PolarisExoPlayerDataSourceFactory.java
new file mode 100644
index 0000000..e7b8d7f
--- /dev/null
+++ b/app/src/main/java/agersant/polaris/api/remote/PolarisExoPlayerDataSourceFactory.java
@@ -0,0 +1,49 @@
+package agersant.polaris.api.remote;
+
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DefaultDataSource;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+
+import agersant.polaris.PolarisService;
+
+/**
+ * Created by agersant on 6/11/2017.
+ */
+
+public final class PolarisExoPlayerDataSourceFactory implements DataSource.Factory {
+
+	private class PolarisExoPlayerHttpDataSourceFactory implements DataSource.Factory {
+
+		private PolarisService service;
+
+		PolarisExoPlayerHttpDataSourceFactory(PolarisService service) {
+			this.service = service;
+		}
+
+		@Override
+		public DataSource createDataSource() {
+			DefaultHttpDataSource defaultHttpDataSource = new DefaultHttpDataSource("Polaris Android", null);
+			String authCookie = service.getAuthCookieHeader();
+			if (authCookie != null) {
+				defaultHttpDataSource.setRequestProperty("Cookie", authCookie);
+			} else {
+				String authRaw = service.getAuthRawHeader();
+				defaultHttpDataSource.setRequestProperty("Authorization", authRaw);
+			}
+			return defaultHttpDataSource;
+		}
+	}
+
+	PolarisService service;
+	PolarisExoPlayerHttpDataSourceFactory httpDataSourceFactory;
+
+	public PolarisExoPlayerDataSourceFactory(PolarisService service) {
+		this.service = service;
+		httpDataSourceFactory = new PolarisExoPlayerHttpDataSourceFactory(service);
+	}
+
+	@Override
+	public DefaultDataSource createDataSource() {
+		return new DefaultDataSource(service, null, httpDataSourceFactory.createDataSource());
+	}
+}
diff --git a/app/src/main/java/agersant/polaris/api/remote/RequestQueue.java b/app/src/main/java/agersant/polaris/api/remote/RequestQueue.java
index 99ee2f3..dc6269e 100644
--- a/app/src/main/java/agersant/polaris/api/remote/RequestQueue.java
+++ b/app/src/main/java/agersant/polaris/api/remote/RequestQueue.java
@@ -1,7 +1,5 @@
 package agersant.polaris.api.remote;
 
-import android.content.Context;
-
 import java.io.IOException;
 
 import okhttp3.Call;
@@ -13,26 +11,17 @@ import okhttp3.ResponseBody;
 
 public class RequestQueue {
 
-	private static RequestQueue instance;
 	private final OkHttpClient client;
 	private final Auth auth;
 
-	private RequestQueue(Context context) {
-		this.auth = new Auth(context);
+	RequestQueue(Auth auth) {
+		this.auth = auth;
 		this.client = new OkHttpClient.Builder()
 				.retryOnConnectionFailure(true)
 				.authenticator(auth)
 				.build();
 	}
 
-	public static void init(Context context) {
-		instance = new RequestQueue(context);
-	}
-
-	static RequestQueue getInstance() {
-		return instance;
-	}
-
 	ResponseBody requestSync(Request request) throws IOException {
 		Response response = client.newCall(request).execute();
 		if (!response.isSuccessful()) {
diff --git a/app/src/main/java/agersant/polaris/api/remote/ServerAPI.java b/app/src/main/java/agersant/polaris/api/remote/ServerAPI.java
index eadfac4..0fb04ef 100644
--- a/app/src/main/java/agersant/polaris/api/remote/ServerAPI.java
+++ b/app/src/main/java/agersant/polaris/api/remote/ServerAPI.java
@@ -2,7 +2,7 @@ package agersant.polaris.api.remote;
 
 
 import android.content.SharedPreferences;
-import android.media.MediaDataSource;
+import android.net.Uri;
 import android.preference.PreferenceManager;
 import android.widget.ImageView;
 
@@ -34,13 +34,15 @@ public class ServerAPI
 	private final Gson gson;
 	private final SharedPreferences preferences;
 	private final String serverAddressKey;
-	private PolarisService service;
+	private final Auth auth;
+	private final PolarisService service;
 
 	public ServerAPI(PolarisService service) {
 		this.service = service;
 		this.serverAddressKey = service.getString(R.string.pref_key_server_url);
 		this.preferences = PreferenceManager.getDefaultSharedPreferences(service);
-		this.requestQueue = RequestQueue.getInstance();
+		this.auth = new Auth(service);
+		this.requestQueue = new RequestQueue(auth);
 		this.gson = new GsonBuilder()
 				.registerTypeAdapter(CollectionItem.class, new CollectionItem.Deserializer())
 				.registerTypeAdapter(CollectionItem.Directory.class, new CollectionItem.Directory.Deserializer())
@@ -48,6 +50,14 @@ public class ServerAPI
 				.create();
 	}
 
+	public String getCookieHeader() {
+		return auth.getCookieHeader();
+	}
+
+	public String getAuthorizationHeader() {
+		return auth.getAuthorizationHeader();
+	}
+
 	private String getURL() {
 		String address = this.preferences.getString(serverAddressKey, "");
 		address = address.replaceAll("/$", "");
@@ -60,7 +70,7 @@ public class ServerAPI
 	}
 
 	@Override
-	public MediaDataSource getAudio(CollectionItem item) throws IOException {
+	public Uri getAudio(CollectionItem item) throws IOException {
 		return service.downloadAudio(item);
 	}
 
@@ -69,9 +79,13 @@ public class ServerAPI
 		FetchImageTask.load(service, item, view);
 	}
 
-	public ResponseBody serve(String path) throws InterruptedException, ExecutionException, TimeoutException, IOException {
+	public Uri serveUri(String path) {
 		String url = getMediaURL(path);
-		Request request = new Request.Builder().url(url).build();
+		return Uri.parse(url);
+	}
+
+	public ResponseBody serve(String path) throws InterruptedException, ExecutionException, TimeoutException, IOException {
+		Request request = new Request.Builder().url(serveUri(path).toString()).build();
 		return requestQueue.requestSync(request);
 	}
 
diff --git a/app/src/main/java/agersant/polaris/api/remote/StreamingMediaDataSource.java b/app/src/main/java/agersant/polaris/api/remote/StreamingMediaDataSource.java
index f2c49c6..a69f9d5 100644
--- a/app/src/main/java/agersant/polaris/api/remote/StreamingMediaDataSource.java
+++ b/app/src/main/java/agersant/polaris/api/remote/StreamingMediaDataSource.java
@@ -1,7 +1,5 @@
 package agersant.polaris.api.remote;
 
-import android.media.MediaDataSource;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.RandomAccessFile;
@@ -10,65 +8,19 @@ import java.io.RandomAccessFile;
  * Created by agersant on 12/26/2016.
  */
 
-public class StreamingMediaDataSource extends MediaDataSource {
+public class StreamingMediaDataSource {
 
+	private File sourceFile;
 	private RandomAccessFile streamFile;
-	private boolean completed;
-	private int size;
 
-	StreamingMediaDataSource(File streamFile) throws IOException {
+	StreamingMediaDataSource(File sourceFile) throws IOException {
 		super();
-		this.streamFile = new RandomAccessFile(streamFile, "r");
-		completed = false;
-		size = -1;
-	}
-
-	void markAsComplete() {
-		completed = true;
+		this.sourceFile = sourceFile;
+		this.streamFile = new RandomAccessFile(sourceFile, "r");
 	}
 
-	void setContentLength(int length) {
-		size = length;
+	File getFile() {
+		return sourceFile;
 	}
 
-	@Override
-	public int readAt(long position, byte[] buffer, int offset, int bytesToRead) throws IOException {
-		try {
-
-			streamFile.seek(position);
-
-			int read = 0;
-			while (read < bytesToRead) {
-				int bytes = streamFile.read(buffer, offset, bytesToRead - read);
-				if (bytes > 0) {
-					read += bytes;
-					offset += bytes;
-				}
-				if (bytes < 0 && completed) {
-					if (read == 0) {
-						return -1;
-					} else {
-						return read;
-					}
-				}
-			}
-
-			return read;
-
-		} catch (IOException e) {
-			System.out.println("Streaming error: " + e);
-		}
-
-		return -1;
-	}
-
-	@Override
-	public long getSize() throws IOException {
-		return size;
-	}
-
-	@Override
-	public void close() throws IOException {
-		streamFile.close();
-	}
 }
diff --git a/app/src/main/java/agersant/polaris/features/player/PlayerActivity.java b/app/src/main/java/agersant/polaris/features/player/PlayerActivity.java
index 04e4fc4..ab196c4 100644
--- a/app/src/main/java/agersant/polaris/features/player/PlayerActivity.java
+++ b/app/src/main/java/agersant/polaris/features/player/PlayerActivity.java
@@ -105,7 +105,7 @@ public class PlayerActivity extends PolarisActivity {
 					updateSeekBar();
 				}
 			}
-		}, 0, 100); // in ms
+		}, 0, 20); // in ms
 	}
 
 	@Override
@@ -131,7 +131,7 @@ public class PlayerActivity extends PolarisActivity {
 
 			public void onStopTrackingTouch(SeekBar seekBar) {
 				if (service != null) {
-					service.seekTo(newPosition / 100.f);
+					service.seekTo((float) newPosition / seekBar.getMax());
 				}
 				seeking = false;
 				updateControls();
@@ -212,8 +212,10 @@ public class PlayerActivity extends PolarisActivity {
 		if (service == null) {
 			return;
 		}
-		int progress = (int) (seekBar.getMax() * service.getProgress());
-		seekBar.setProgress(progress);
+		int duration = (int) service.getDuration();
+		seekBar.setMax(duration);
+		int position = (int) service.getPosition();
+		seekBar.setProgress(position);
 	}
 
 	private void populateWithTrack(CollectionItem item) {
