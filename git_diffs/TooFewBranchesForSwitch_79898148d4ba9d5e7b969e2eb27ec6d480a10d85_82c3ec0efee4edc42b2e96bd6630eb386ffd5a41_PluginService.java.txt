diff --git a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverArchiveEngine.java b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverArchiveEngine.java
index 44eedfc..934cd89 100644
--- a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverArchiveEngine.java
+++ b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverArchiveEngine.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (C) 2017-2018 Oleg Chernovskiy <adonai@xaker.ru>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
 package com.kanedias.vanilla.coverfetch;
 
 import android.net.Uri;
diff --git a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverEngine.java b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverEngine.java
index 56a84df..902f77b 100644
--- a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverEngine.java
+++ b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverEngine.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017 Oleg Chernovskiy <adonai@xaker.ru>
+ * Copyright (C) 2017-2018 Oleg Chernovskiy <adonai@xaker.ru>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
diff --git a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverShowActivity.java b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverShowActivity.java
index 8c94cc8..7d2a409 100644
--- a/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverShowActivity.java
+++ b/app/src/main/java/com/kanedias/vanilla/coverfetch/CoverShowActivity.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2017 Oleg Chernovskiy <adonai@xaker.ru>
+ * Copyright (C) 2017-2018 Oleg Chernovskiy <adonai@xaker.ru>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -18,9 +18,11 @@ package com.kanedias.vanilla.coverfetch;
 
 import android.app.Activity;
 import android.app.AlertDialog;
+import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
@@ -54,6 +56,7 @@ import com.kanedias.vanilla.plugins.DialogActivity;
 import com.kanedias.vanilla.plugins.PluginConstants;
 import com.kanedias.vanilla.plugins.PluginUtils;
 import com.kanedias.vanilla.plugins.saf.SafRequestActivity;
+import com.kanedias.vanilla.plugins.saf.SafUtils;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -68,7 +71,6 @@ import java.util.UUID;
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static android.view.View.GONE;
 import static android.view.View.VISIBLE;
-import static com.kanedias.vanilla.coverfetch.PluginService.pluginInstalled;
 import static com.kanedias.vanilla.plugins.PluginConstants.*;
 import static com.kanedias.vanilla.plugins.PluginUtils.*;
 import static com.kanedias.vanilla.plugins.saf.SafUtils.findInDocumentTree;
@@ -77,13 +79,35 @@ import static com.kanedias.vanilla.plugins.saf.SafUtils.findInDocumentTree;
  * Main activity of Cover Fetch plugin. This will be presented as a dialog to the user
  * if one chooses it as the requested plugin.
  * <p/>
+ * This activity must be able to handle ACTION_WAKE_PLUGIN and ACTION_LAUNCH_PLUGIN
+ * intents coming from Vanilla Music.
  *
- * @see PluginService service that launches this
+ * <p/>
+ * Casual conversation looks like this:
+ * <pre>
+ *     VanillaMusic                                 Plugin
+ *          |                                         |
+ *          |       ACTION_WAKE_PLUGIN broadcast      |
+ *          |---------------------------------------->| (plugin init if just installed)
+ *          |                                         |
+ *          | ACTION_REQUEST_PLUGIN_PARAMS broadcast  |
+ *          |---------------------------------------->| (this is handled by BroadcastReceiver)
+ *          |                                         |
+ *          |      ACTION_HANDLE_PLUGIN_PARAMS        |
+ *          |<----------------------------------------| (plugin answer with name and desc)
+ *          |                                         |
+ *          |           ACTION_LAUNCH_PLUGIN          |
+ *          |---------------------------------------->| (plugin is allowed to show window)
+ * </pre>
+ * <p/>
+ *
+ * @see PluginConstants
  *
  * @author Oleg Chernovskiy
  */
 public class CoverShowActivity extends DialogActivity {
 
+    private static final String PLUGIN_TAG_EDIT_PKG = "com.kanedias.vanilla.audiotag";
     private static final int PICK_IMAGE_REQUEST = 1;
 
     private SharedPreferences mPrefs;
@@ -100,10 +124,15 @@ public class CoverShowActivity extends DialogActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_cover_show);
-
         mPrefs = PreferenceManager.getDefaultSharedPreferences(this);
 
+        if (handleLaunchPlugin()) {
+            // no UI was required for handling the intent
+            return;
+        }
+
+        setContentView(R.layout.activity_cover_show);
+
         mSwitcher = findViewById(R.id.loading_switcher);
         mCoverImage = findViewById(R.id.cover_image);
         mWriteButton = findViewById(R.id.write_button);
@@ -113,7 +142,42 @@ public class CoverShowActivity extends DialogActivity {
         mCustomMedia = findViewById(R.id.from_custom_media);
 
         setupUI();
-        handlePassedIntent(true); // called in onCreate to be shown only once
+    }
+
+    /**
+     * Handle incoming intent that may possible be ping, other plugin request or user-interactive plugin request
+     * @return true if intent was handled internally, false if activity startup is required
+     */
+    private boolean handleLaunchPlugin() {
+        if (TextUtils.equals(getIntent().getAction(), ACTION_WAKE_PLUGIN)) {
+            // just show that we're okay
+            Log.i(LOG_TAG, "Plugin enabled!");
+            finish();
+            return true;
+        }
+
+        if (!getIntent().hasExtra(EXTRA_PARAM_P2P) && pluginInstalled(this, PLUGIN_TAG_EDIT_PKG)) {
+            // it's user-requested, try to retrieve artwork from the tag first
+            Intent getCover = new Intent(ACTION_LAUNCH_PLUGIN);
+            getCover.setPackage(PLUGIN_TAG_EDIT_PKG);
+            getCover.putExtra(EXTRA_PARAM_URI, (Uri) getIntent().getParcelableExtra(EXTRA_PARAM_URI));
+            getCover.putExtra(EXTRA_PARAM_PLUGIN_APP, getApplicationInfo());
+            getCover.putExtra(EXTRA_PARAM_P2P, P2P_READ_ART); // no extra params needed
+            startActivity(getCover);
+            finish(); // end this activity instance, it will be re-created by incoming intent from Tag Editor
+            return true;
+        }
+
+        // continue startup
+        return false;
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // UI is initialized now
+        handleUiIntent(true);
     }
 
     @Override
@@ -149,17 +213,45 @@ public class CoverShowActivity extends DialogActivity {
                 return true;
             case R.id.reload_option:
                 mSwitcher.setDisplayedChild(0);
-                handlePassedIntent(false);
+                handleUiIntent(false);
                 return true;
         }
         return super.onOptionsItemSelected(item);
     }
 
-    private void handlePassedIntent(boolean useLocal) {
+    /**
+     * This plugin also has P2P functionality with others.
+     * <br/>
+     * Tag plugin - Uses provided field retrieval interface for ARTWORK tag:
+     * <p/>
+     * <pre>
+     *  Cover Fetch Plugin                         Tag Editor Plugin
+     *          |                                         |
+     *          |       P2P intent with artwork request   |
+     *          |---------------------------------------->|
+     *          |                                         |
+     *          |       P2P intent with artwork response  |
+     *          |<----------------------------------------| (can be null if no embedded artwork found)
+     *          |                                         |
+     *
+     *     At this point cover fetcher plugin starts activity with either
+     *     extras from artwork response (if found) or with original intent
+     * </pre>
+     */
+    private static boolean pluginInstalled(Context ctx, String pkgName) {
+        List<ResolveInfo> resolved = ctx.getPackageManager().queryBroadcastReceivers(new Intent(ACTION_REQUEST_PLUGIN_PARAMS), 0);
+        for (ResolveInfo pkg : resolved) {
+            if (TextUtils.equals(pkg.activityInfo.packageName, pkgName)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private void handleUiIntent(boolean useLocal) {
         // check if this is an answer from tag plugin
         if (useLocal && TextUtils.equals(getIntent().getStringExtra(EXTRA_PARAM_P2P), P2P_READ_ART)) {
-            // already checked this string in service, no need in additional checks
-            if (loadFromTag()) {
+            if (getIntent().hasExtra(EXTRA_PARAM_P2P_VAL) && loadFromTag()) {
                 return;
             }
         }
@@ -308,22 +400,18 @@ public class CoverShowActivity extends DialogActivity {
             Log.e(LOG_TAG, "Couldn't share private cover image file to tag editor!", e);
         } finally {
             Intent request = new Intent(ACTION_LAUNCH_PLUGIN);
-            request.setPackage(PluginService.PLUGIN_TAG_EDIT_PKG);
-            request.putExtra(EXTRA_PARAM_URI, (Bundle) getIntent().getParcelableExtra(EXTRA_PARAM_URI));
+            request.setPackage(PLUGIN_TAG_EDIT_PKG);
+            request.putExtra(EXTRA_PARAM_URI, (Uri) getIntent().getParcelableExtra(EXTRA_PARAM_URI));
             request.putExtra(EXTRA_PARAM_PLUGIN_APP, getApplicationInfo());
             request.putExtra(EXTRA_PARAM_P2P, P2P_WRITE_ART);
             if (uri != null) { // artwork write succeeded
-                grantUriPermission(PluginService.PLUGIN_TAG_EDIT_PKG, uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
+                grantUriPermission(PLUGIN_TAG_EDIT_PKG, uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
                 request.putExtra(EXTRA_PARAM_P2P_VAL, uri);
             }
-            startService(request);
+            startActivity(request);
         }
     }
 
-    private boolean isSafNeeded(File mediaFile) {
-        return false;
-    }
-
     /**
      * Click listener for handling writing tag as folder.jpg
      */
@@ -347,7 +435,7 @@ public class CoverShowActivity extends DialogActivity {
         byte[] imgData = stream.toByteArray();
 
         File folderTarget = new File(mediaFile.getParent(), "folder.jpg");
-        if (isSafNeeded(mediaFile)) {
+        if (SafUtils.isSafNeeded(mediaFile, this)) {
             if (mPrefs.contains(PREF_SDCARD_URI)) {
                 // we already got the permission!
                 writeThroughSaf(imgData, mediaFile, folderTarget.getName());
@@ -407,13 +495,19 @@ public class CoverShowActivity extends DialogActivity {
             return;
         }
 
-        if (originalRef == null) {
+        if (originalRef == null || originalRef.getParentFile() == null) {
             // nothing selected or invalid file?
             Toast.makeText(this, R.string.saf_nothing_selected, Toast.LENGTH_LONG).show();
             return;
         }
 
         DocumentFile folderJpgRef = originalRef.getParentFile().createFile("image/*", name);
+        if (folderJpgRef == null) {
+            // couldn't create file?
+            Toast.makeText(this, R.string.saf_write_error, Toast.LENGTH_LONG).show();
+            return;
+        }
+
         try {
             ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(folderJpgRef.getUri(), "rw");
             if (pfd == null) {
@@ -538,7 +632,7 @@ public class CoverShowActivity extends DialogActivity {
             actions.add(getString(R.string.write_to_folder));
 
             // if tag editor is installed, show `write to tag` button
-            if (pluginInstalled(CoverShowActivity.this, PluginService.PLUGIN_TAG_EDIT_PKG)) {
+            if (pluginInstalled(CoverShowActivity.this, PLUGIN_TAG_EDIT_PKG)) {
                 actions.add(getString(R.string.write_to_file));
             }
 
diff --git a/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginQueryBroadcastReceiver.java b/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginQueryBroadcastReceiver.java
index 0726975..0273aa2 100644
--- a/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginQueryBroadcastReceiver.java
+++ b/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginQueryBroadcastReceiver.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2016 Oleg Chernovskiy <adonai@xaker.ru>
+ * Copyright (C) 2016-2018 Oleg Chernovskiy <adonai@xaker.ru>
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -23,7 +23,8 @@ import android.util.Log;
 
 import com.kanedias.vanilla.plugins.PluginConstants;
 
-import java.util.Objects;
+
+import static com.kanedias.vanilla.plugins.PluginConstants.*;
 
 /**
  * Broadcast receiver used for retrieving query intents
@@ -34,9 +35,9 @@ import java.util.Objects;
 public class PluginQueryBroadcastReceiver extends BroadcastReceiver {
 
     /**
-     * Just starts the service. We need a broadcast receiver for this, as ordinary intents
+     * Just answer with plugin parameters. We need a broadcast receiver for this, as ordinary intents
      * are targeted-only. Only query intents will come here, as "plugin launch" intents are targeted
-     * and thus don't need a broadcast receiver to reach service.
+     * and thus don't need a broadcast receiver to reach activity.
      *
      * @param context context this receiver operates in
      * @param intent  incoming query intent
@@ -44,13 +45,29 @@ public class PluginQueryBroadcastReceiver extends BroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
         Log.i(PluginConstants.LOG_TAG, "Received query intent!");
-        switch (Objects.requireNonNull(intent.getAction())) {
+        if (intent.getAction() == null)
+            return;
+
+        switch (intent.getAction()) {
             case PluginConstants.ACTION_REQUEST_PLUGIN_PARAMS:
-                intent.setClass(context, PluginService.class);
-                context.startService(intent);
+                handleRequestPluginParams(context, intent);
                 return;
             default:
                 Log.e(PluginConstants.LOG_TAG, "Unknown intent received by receiver! Action" + intent.getAction());
         }
     }
+
+    /**
+     * Sends plugin info back to Vanilla Music service.
+     *
+     * @param intent intent from player
+     */
+    private void handleRequestPluginParams(Context ctx, Intent intent) {
+        Intent answer = new Intent(ACTION_HANDLE_PLUGIN_PARAMS);
+        answer.setPackage(intent.getPackage());
+        answer.putExtra(EXTRA_PARAM_PLUGIN_NAME, ctx.getString(R.string.cover_fetch));
+        answer.putExtra(EXTRA_PARAM_PLUGIN_APP, ctx.getApplicationInfo());
+        answer.putExtra(EXTRA_PARAM_PLUGIN_DESC, ctx.getString(R.string.plugin_desc));
+        ctx.sendBroadcast(answer);
+    }
 }
diff --git a/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginService.java b/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginService.java
deleted file mode 100644
index 40b20a7..0000000
--- a/app/src/main/java/com/kanedias/vanilla/coverfetch/PluginService.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Copyright (C) 2017 Oleg Chernovskiy <adonai@xaker.ru>
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program. If not, see <http://www.gnu.org/licenses/>.
- */
-package com.kanedias.vanilla.coverfetch;
-
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.os.Bundle;
-import android.os.IBinder;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.kanedias.vanilla.plugins.PluginConstants;
-
-import java.util.List;
-
-import static com.kanedias.vanilla.plugins.PluginConstants.*;
-
-/**
- * Main service of Plugin system.
- * This service must be able to handle ACTION_WAKE_PLUGIN, ACTION_REQUEST_PLUGIN_PARAMS and ACTION_LAUNCH_PLUGIN
- * intents coming from VanillaMusic.
- * <p/>
- * Casual conversation looks like this:
- * <pre>
- *     VanillaMusic                                 Plugin
- *          |                                         |
- *          |       ACTION_WAKE_PLUGIN broadcast      |
- *          |---------------------------------------->| (plugin init if just installed)
- *          |                                         |
- *          | ACTION_REQUEST_PLUGIN_PARAMS broadcast  |
- *          |---------------------------------------->| (this is handled by BroadcastReceiver first)
- *          |                                         |
- *          |      ACTION_HANDLE_PLUGIN_PARAMS        |
- *          |<----------------------------------------| (plugin answer with name and desc)
- *          |                                         |
- *          |           ACTION_LAUNCH_PLUGIN          |
- *          |---------------------------------------->| (plugin is allowed to show window)
- * </pre>
- *
- * @see PluginConstants
- * @see CoverShowActivity
- *
- * @author Oleg Chernovskiy
- */
-public class PluginService extends Service {
-
-    public static final String PLUGIN_TAG_EDIT_PKG = "com.kanedias.vanilla.audiotag";
-
-    private Intent mOriginalIntent;
-
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        if (intent == null) {
-            return START_NOT_STICKY;
-        }
-
-        final String action = intent.getAction();
-        switch (action) {
-            case ACTION_WAKE_PLUGIN:
-                Log.i(LOG_TAG, "Plugin enabled!");
-                break;
-            case ACTION_REQUEST_PLUGIN_PARAMS:
-                handleRequestPluginParams(intent);
-                break;
-            case ACTION_LAUNCH_PLUGIN:
-                handleLaunchPlugin(intent);
-                break;
-            default:
-                Log.e(LOG_TAG, "Unknown intent action received!" + action);
-        }
-        return START_NOT_STICKY;
-    }
-
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        return null;
-    }
-
-    public static boolean pluginInstalled(Context ctx, String pkgName) {
-        List<ResolveInfo> resolved = ctx.getPackageManager().queryBroadcastReceivers(new Intent(ACTION_REQUEST_PLUGIN_PARAMS), 0);
-        for (ResolveInfo pkg : resolved) {
-            if (TextUtils.equals(pkg.activityInfo.packageName, pkgName)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Sends plugin info back to Vanilla Music service.
-     *
-     * @param intent intent from player
-     */
-    private void handleRequestPluginParams(Intent intent) {
-        Intent answer = new Intent(ACTION_HANDLE_PLUGIN_PARAMS);
-        answer.setPackage(intent.getPackage());
-        answer.putExtra(EXTRA_PARAM_PLUGIN_NAME, getString(R.string.cover_fetch));
-        answer.putExtra(EXTRA_PARAM_PLUGIN_APP, getApplicationInfo());
-        answer.putExtra(EXTRA_PARAM_PLUGIN_DESC, getString(R.string.plugin_desc));
-        sendBroadcast(answer);
-    }
-
-    private void handleLaunchPlugin(Intent intent) {
-        if (!intent.hasExtra(EXTRA_PARAM_P2P) && pluginInstalled(this, PLUGIN_TAG_EDIT_PKG)) {
-            // it's user-requested, try to retrieve artwork from the tag first
-            mOriginalIntent = intent; // store intent to reuse it if no artwork is found
-            Intent getCover = new Intent(ACTION_LAUNCH_PLUGIN);
-            getCover.setPackage(PluginService.PLUGIN_TAG_EDIT_PKG);
-            getCover.putExtra(EXTRA_PARAM_URI, (Bundle) intent.getParcelableExtra(EXTRA_PARAM_URI));
-            getCover.putExtra(EXTRA_PARAM_PLUGIN_APP, getApplicationInfo());
-            getCover.putExtra(EXTRA_PARAM_P2P, P2P_READ_ART); // no extra params needed
-            startService(getCover);
-            return;
-        }
-
-        if (intent.hasExtra(EXTRA_PARAM_P2P)) {
-            handleP2pIntent(intent);
-            return;
-        }
-
-        Intent dialogIntent = new Intent(this, CoverShowActivity.class);
-        dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        dialogIntent.putExtras(intent);
-        startActivity(dialogIntent);
-    }
-
-    /**
-     * This plugin also has P2P functionality with others.
-     * <br/>
-     * Tag plugin - Uses provided field retrieval interface for ARTWORK tag:
-     * <p/>
-     * <pre>
-     *  Cover Fetch Plugin                         Tag Editor Plugin
-     *          |                                         |
-     *          |       P2P intent with artwork request   |
-     *          |---------------------------------------->| (LP also stores original intent)
-     *          |                                         |
-     *          |       P2P intent with artwork response  |
-     *          |<----------------------------------------| (can be null if no embedded artwork found)
-     *          |                                         |
-     *
-     *     At this point cover fetcher plugin starts activity with either
-     *     extras from artwork response (if found) or with original intent
-     * </pre>
-     *
-     * @param intent p2p intent that should be handled
-     */
-    private void handleP2pIntent(Intent intent) {
-        switch (intent.getStringExtra(EXTRA_PARAM_P2P)) {
-            case P2P_READ_ART: // this is a reply on our request for artwork tag
-                Intent dialogIntent = new Intent(this, CoverShowActivity.class);
-                dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                dialogIntent.putExtras(mOriginalIntent);
-                if (intent.hasExtra(EXTRA_PARAM_P2P_VAL)) {
-                    // start activity with retrieved artwork
-                    dialogIntent.putExtras(intent);
-                }
-                startActivity(dialogIntent);
-                break;
-        }
-    }
-}
