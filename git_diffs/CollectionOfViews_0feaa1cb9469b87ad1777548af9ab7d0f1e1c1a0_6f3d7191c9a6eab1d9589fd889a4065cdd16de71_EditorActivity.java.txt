diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
index f4da4cc9..5e17ce03 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
@@ -1,7 +1,6 @@
 package ch.rmy.android.http_shortcuts;
 
 import android.annotation.SuppressLint;
-import android.app.Dialog;
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -14,19 +13,12 @@ import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
-import android.view.View.MeasureSpec;
 import android.view.View.OnClickListener;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
 import android.webkit.URLUtil;
 import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.ListAdapter;
-import android.widget.ListView;
 
 import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
@@ -37,17 +29,17 @@ import net.dinglisch.ipack.IpackKeys;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.ArrayList;
 import java.util.List;
 
 import butterknife.Bind;
 import ch.rmy.android.http_shortcuts.http.HttpRequester;
 import ch.rmy.android.http_shortcuts.icons.IconSelector;
+import ch.rmy.android.http_shortcuts.key_value_pairs.KeyValueList;
+import ch.rmy.android.http_shortcuts.key_value_pairs.KeyValuePairFactory;
+import ch.rmy.android.http_shortcuts.key_value_pairs.OnKeyValueChangeListener;
 import ch.rmy.android.http_shortcuts.listeners.OnIconSelectedListener;
 import ch.rmy.android.http_shortcuts.shortcuts.Header;
-import ch.rmy.android.http_shortcuts.shortcuts.HeaderAdapter;
 import ch.rmy.android.http_shortcuts.shortcuts.PostParameter;
-import ch.rmy.android.http_shortcuts.shortcuts.PostParameterAdapter;
 import ch.rmy.android.http_shortcuts.shortcuts.Shortcut;
 import ch.rmy.android.http_shortcuts.shortcuts.ShortcutStorage;
 
@@ -57,7 +49,7 @@ import ch.rmy.android.http_shortcuts.shortcuts.ShortcutStorage;
  * @author Roland Meyer
  */
 @SuppressLint("InflateParams")
-public class EditorActivity extends BaseActivity implements OnClickListener, LabelledSpinner.OnItemChosenListener, OnItemClickListener, TextWatcher {
+public class EditorActivity extends BaseActivity implements LabelledSpinner.OnItemChosenListener, TextWatcher {
 
     public final static String EXTRA_SHORTCUT_ID = "shortcut_id";
     private final static int SELECT_ICON = 1;
@@ -66,8 +58,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
 
     private ShortcutStorage shortcutStorage;
     private Shortcut shortcut;
-    private PostParameterAdapter postParameterAdapter;
-    private HeaderAdapter customHeaderAdapter;
 
     @Bind(R.id.input_method)
     LabelledSpinner methodView;
@@ -92,17 +82,11 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
     @Bind(R.id.post_params_container)
     LinearLayout postParamsContainer;
     @Bind(R.id.post_parameter_list)
-    ListView postParameterList;
-    @Bind(R.id.button_add_post_param)
-    Button postParameterAddButton;
+    KeyValueList postParameterList;
     @Bind(R.id.custom_headers_list)
-    ListView customHeaderList;
-    @Bind(R.id.button_add_custom_header)
-    Button customHeaderAddButton;
+    KeyValueList customHeaderList;
     @Bind(R.id.input_custom_body)
     EditText customBodyView;
-    @Bind(R.id.custom_body_container)
-    LinearLayout customBodyContainer;
 
     private String selectedMethod;
     private int selectedFeedback;
@@ -112,6 +96,13 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
 
     private boolean hasChanges;
 
+    private OnKeyValueChangeListener keyValueChangeListener = new OnKeyValueChangeListener() {
+        @Override
+        public void onChange() {
+            hasChanges = true;
+        }
+    };
+
     @SuppressLint("NewApi")
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -156,22 +147,33 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         } else {
             postParamsContainer.setVisibility(View.VISIBLE);
         }
-        postParameterAdapter = new PostParameterAdapter(this);
-        postParameterList.setAdapter(postParameterAdapter);
-        postParameterAdapter.addAll(shortcutStorage.getPostParametersByID(shortcutID));
-        postParameterAddButton.setOnClickListener(this);
-        postParameterList.setOnItemClickListener(this);
-        if (postParameterAdapter.getCount() == 0) {
-            customBodyContainer.setVisibility(View.VISIBLE);
-        } else {
-            customBodyContainer.setVisibility(View.GONE);
-        }
-
-        customHeaderAdapter = new HeaderAdapter(this);
-        customHeaderList.setAdapter(customHeaderAdapter);
-        customHeaderAdapter.addAll(shortcutStorage.getHeadersByID(shortcutID));
-        customHeaderAddButton.setOnClickListener(this);
-        customHeaderList.setOnItemClickListener(this);
+        postParameterList.addItems(shortcutStorage.getPostParametersByID(shortcutID));
+        postParameterList.setButtonText(R.string.button_add_post_param);
+        postParameterList.setAddDialogTitle(R.string.title_post_param_add);
+        postParameterList.setEditDialogTitle(R.string.title_post_param_edit);
+        postParameterList.setKeyLabel(R.string.label_post_param_key);
+        postParameterList.setValueLabel(R.string.label_post_param_value);
+        postParameterList.setItemFactory(new KeyValuePairFactory<PostParameter>() {
+            @Override
+            public PostParameter create(String key, String value) {
+                return new PostParameter(0, key, value);
+            }
+        });
+        postParameterList.setOnKeyValueChangeListener(keyValueChangeListener);
+
+        customHeaderList.addItems(shortcutStorage.getHeadersByID(shortcutID));
+        customHeaderList.setButtonText(R.string.button_add_custom_header);
+        customHeaderList.setAddDialogTitle(R.string.title_custom_header_add);
+        customHeaderList.setEditDialogTitle(R.string.title_custom_header_edit);
+        customHeaderList.setKeyLabel(R.string.label_custom_header_key);
+        customHeaderList.setValueLabel(R.string.label_custom_header_value);
+        customHeaderList.setItemFactory(new KeyValuePairFactory<Header>() {
+            @Override
+            public Header create(String key, String value) {
+                return new Header(0, key, value);
+            }
+        });
+        customHeaderList.setOnKeyValueChangeListener(keyValueChangeListener);
 
         String[] feedbackStrings = new String[Shortcut.FEEDBACK_OPTIONS.length];
         for (int i = 0; i < Shortcut.FEEDBACK_OPTIONS.length; i++) {
@@ -224,7 +226,12 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         } else {
             iconView.setBackgroundColor(0);
         }
-        iconView.setOnClickListener(this);
+        iconView.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                openIconSelectionDialog();
+            }
+        });
         selectedIcon = shortcut.getIconName();
 
         if (shortcut.isNew()) {
@@ -236,13 +243,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         hasChanges = false;
     }
 
-    @Override
-    public void onResume() {
-        super.onResume();
-        setListViewHeightBasedOnChildren(postParameterList);
-        setListViewHeightBasedOnChildren(customHeaderList);
-    }
-
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         MenuInflater inflater = getMenuInflater();
@@ -271,55 +271,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         return super.onOptionsItemSelected(item);
     }
 
-    @Override
-    public void onClick(View v) {
-        if (v.equals(iconView)) {
-            openIconSelectionDialog();
-        } else if (v.equals(postParameterAddButton)) {
-
-
-            (new MaterialDialog.Builder(this))
-                    .customView(R.layout.dialog_edit_post_parameter, false)
-                    .title(R.string.title_post_param_edit)
-                    .positiveText(R.string.dialog_ok)
-                    .onPositive(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            EditText keyField = (EditText) dialog.findViewById(R.id.input_post_param_key);
-                            EditText valueField = (EditText) dialog.findViewById(R.id.input_post_param_value);
-                            if (!keyField.getText().toString().isEmpty()) {
-                                PostParameter parameter = new PostParameter(0, keyField.getText().toString(), valueField.getText().toString());
-                                postParameterAdapter.add(parameter);
-                                setListViewHeightBasedOnChildren(postParameterList);
-                                customBodyContainer.setVisibility(View.GONE);
-                            }
-                        }
-                    })
-                    .negativeText(R.string.dialog_cancel)
-                    .show();
-        } else if (v.equals(customHeaderAddButton)) {
-
-            (new MaterialDialog.Builder(this))
-                    .customView(R.layout.dialog_edit_custom_header, false)
-                    .title(R.string.title_custom_header_edit)
-                    .positiveText(R.string.dialog_ok)
-                    .onPositive(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            EditText keyField = (EditText) dialog.findViewById(R.id.input_custom_header_key);
-                            EditText valueField = (EditText) dialog.findViewById(R.id.input_custom_header_value);
-                            if (!keyField.getText().toString().isEmpty()) {
-                                Header header = new Header(0, keyField.getText().toString(), valueField.getText().toString());
-                                customHeaderAdapter.add(header);
-                                setListViewHeightBasedOnChildren(customHeaderList);
-                            }
-                        }
-                    })
-                    .negativeText(R.string.dialog_cancel)
-                    .show();
-        }
-    }
-
     private void openIconSelectionDialog() {
         (new MaterialDialog.Builder(this))
                 .title(R.string.change_icon)
@@ -442,14 +393,9 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         shortcut.setTimeout(selectedTimeout);
         shortcut.setRetryPolicy(selectedRetryPolicy);
 
-        List<PostParameter> parameters = new ArrayList<PostParameter>();
-        for (int i = 0; i < postParameterAdapter.getCount(); i++) {
-            parameters.add(postParameterAdapter.getItem(i));
-        }
-        List<Header> headers = new ArrayList<Header>();
-        for (int i = 0; i < customHeaderAdapter.getCount(); i++) {
-            headers.add(customHeaderAdapter.getItem(i));
-        }
+
+        List<PostParameter> parameters = postParameterList.getItems();
+        List<Header> headers = customHeaderList.getItems();
 
         if (testOnly) {
             HttpRequester.executeShortcut(this, shortcut, parameters, headers);
@@ -530,97 +476,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
         }
     }
 
-    @Override
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-
-        if (parent.equals(postParameterList)) {
-            final PostParameter parameter = postParameterAdapter.getItem(position);
-
-            Dialog dialog = (new MaterialDialog.Builder(this))
-                    .customView(R.layout.dialog_edit_post_parameter, false)
-                    .title(R.string.title_post_param_edit)
-                    .positiveText(R.string.dialog_ok)
-                    .onPositive(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            EditText keyField = (EditText) dialog.findViewById(R.id.input_post_param_key);
-                            EditText valueField = (EditText) dialog.findViewById(R.id.input_post_param_value);
-                            if (!keyField.getText().toString().isEmpty()) {
-                                parameter.setKey(keyField.getText().toString());
-                                parameter.setValue(valueField.getText().toString());
-                                postParameterAdapter.notifyDataSetChanged();
-                                hasChanges = true;
-                            }
-                        }
-                    })
-                    .neutralText(R.string.dialog_remove)
-                    .onNeutral(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            postParameterAdapter.remove(parameter);
-                            setListViewHeightBasedOnChildren(postParameterList);
-                            hasChanges = true;
-                            if (postParameterAdapter.getCount() == 0) {
-                                customBodyContainer.setVisibility(View.VISIBLE);
-                            } else {
-                                customBodyContainer.setVisibility(View.GONE);
-                            }
-                        }
-                    })
-                    .negativeText(R.string.dialog_cancel)
-                    .build();
-
-            EditText keyField = (EditText) dialog.findViewById(R.id.input_post_param_key);
-            keyField.setText(parameter.getKey());
-
-            EditText valueField = (EditText) dialog.findViewById(R.id.input_post_param_value);
-            valueField.setText(parameter.getValue());
-
-            dialog.show();
-
-        } else if (parent.equals(customHeaderList)) {
-
-            final Header header = customHeaderAdapter.getItem(position);
-
-            Dialog dialog = (new MaterialDialog.Builder(this))
-                    .customView(R.layout.dialog_edit_custom_header, false)
-                    .title(R.string.title_custom_header_edit)
-                    .positiveText(R.string.dialog_ok)
-                    .onPositive(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            EditText keyField = (EditText) dialog.findViewById(R.id.input_custom_header_key);
-                            EditText valueField = (EditText) dialog.findViewById(R.id.input_custom_header_value);
-                            if (!keyField.getText().toString().isEmpty()) {
-                                header.setKey(keyField.getText().toString());
-                                header.setValue(valueField.getText().toString());
-                                customHeaderAdapter.notifyDataSetChanged();
-                                hasChanges = true;
-                            }
-                        }
-                    }).neutralText(R.string.dialog_remove)
-                    .onNeutral(new MaterialDialog.SingleButtonCallback() {
-                        @Override
-                        public void onClick(MaterialDialog dialog, DialogAction which) {
-                            customHeaderAdapter.remove(header);
-                            setListViewHeightBasedOnChildren(customHeaderList);
-                            hasChanges = true;
-                        }
-                    })
-                    .negativeText(R.string.dialog_cancel)
-                    .build();
-
-            EditText keyField = (EditText) dialog.findViewById(R.id.input_custom_header_key);
-            keyField.setText(header.getKey());
-
-            EditText valueField = (EditText) dialog.findViewById(R.id.input_custom_header_value);
-            valueField.setText(header.getValue());
-
-            dialog.show();
-
-        }
-    }
-
     @Override
     public void onItemChosen(View view, AdapterView<?> parent, View itemView, int position, long id) {
         switch (view.getId()) {
@@ -677,33 +532,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, Lab
     public void afterTextChanged(Editable s) {
     }
 
-    /**
-     * Method for Setting the Height of the ListView dynamically. Hack to fix the issue of not showing all the items of the ListView when placed inside a ScrollView.
-     *
-     * @param listView
-     */
-    private void setListViewHeightBasedOnChildren(ListView listView) {
-        ListAdapter listAdapter = listView.getAdapter();
-        if (listAdapter == null)
-            return;
-
-        int desiredWidth = MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.UNSPECIFIED);
-        int totalHeight = 0;
-        View view = null;
-        for (int i = 0; i < listAdapter.getCount(); i++) {
-            view = listAdapter.getView(i, view, listView);
-            if (i == 0)
-                view.setLayoutParams(new ViewGroup.LayoutParams(desiredWidth, LayoutParams.WRAP_CONTENT));
-
-            view.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
-            totalHeight += view.getMeasuredHeight();
-        }
-        ViewGroup.LayoutParams params = listView.getLayoutParams();
-        params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
-        listView.setLayoutParams(params);
-        listView.requestLayout();
-    }
-
     private void hideErrorLabel(LabelledSpinner spinner) {
         spinner.getChildAt(3).setVisibility(View.GONE);
     }
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/http/AuthRequest.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/http/AuthRequest.java
index 938f111f..24739173 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/http/AuthRequest.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/http/AuthRequest.java
@@ -34,7 +34,14 @@ public class AuthRequest extends StringRequest {
         if (bodyContent.isEmpty()) {
             return super.getBody();
         } else {
-            return bodyContent.getBytes();
+            byte[] regularBody = super.getBody();
+            byte[] customBody = bodyContent.getBytes();
+            byte[] mergedBody = new byte[regularBody.length + customBody.length];
+
+            System.arraycopy(regularBody, 0, mergedBody, 0, regularBody.length);
+            System.arraycopy(customBody, 0, mergedBody, regularBody.length, customBody.length);
+
+            return mergedBody;
         }
     }
 
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameterAdapter.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueAdapter.java
similarity index 68%
rename from HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameterAdapter.java
rename to HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueAdapter.java
index 807335a9..d7487a02 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameterAdapter.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueAdapter.java
@@ -1,4 +1,4 @@
-package ch.rmy.android.http_shortcuts.shortcuts;
+package ch.rmy.android.http_shortcuts.key_value_pairs;
 
 import android.content.Context;
 import android.view.LayoutInflater;
@@ -9,19 +9,19 @@ import android.widget.TextView;
 
 import ch.rmy.android.http_shortcuts.R;
 
-public class PostParameterAdapter extends ArrayAdapter<PostParameter> {
+public class KeyValueAdapter<T extends KeyValuePair> extends ArrayAdapter<T> {
 
-    public PostParameterAdapter(Context context) {
-        super(context, R.layout.post_parameter_item);
+    public KeyValueAdapter(Context context) {
+        super(context, R.layout.key_value_item);
     }
 
     @Override
     public View getView(int position, View rowView, ViewGroup parent) {
-        PostParameter parameter = getItem(position);
+        T parameter = getItem(position);
 
         if (rowView == null) {
             LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            rowView = inflater.inflate(R.layout.post_parameter_item, parent, false);
+            rowView = inflater.inflate(R.layout.key_value_item, parent, false);
         }
 
         TextView keyView = (TextView) rowView.findViewById(R.id.text_key);
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueList.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueList.java
new file mode 100644
index 00000000..634f9fc8
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValueList.java
@@ -0,0 +1,209 @@
+package ch.rmy.android.http_shortcuts.key_value_pairs;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.support.design.widget.TextInputLayout;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+
+import com.afollestad.materialdialogs.DialogAction;
+import com.afollestad.materialdialogs.MaterialDialog;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
+import ch.rmy.android.http_shortcuts.R;
+
+public class KeyValueList<T extends KeyValuePair> extends FrameLayout {
+
+    @Bind(R.id.key_value_list)
+    ListView listView;
+    @Bind(R.id.key_value_list_button)
+    Button button;
+
+    private KeyValueAdapter<T> adapter;
+    private KeyValuePairFactory<T> factory;
+    private int addDialogTitle;
+    private int editDialogTitle;
+    private int keyLabel;
+    private int valueLabel;
+    private OnKeyValueChangeListener listener;
+
+    public KeyValueList(Context context) {
+        super(context);
+        init();
+    }
+
+    public KeyValueList(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public KeyValueList(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    private void init() {
+        inflate(getContext(), R.layout.key_value_list, this);
+        ButterKnife.bind(this, this);
+
+        adapter = new KeyValueAdapter<>(getContext());
+        listView.setAdapter(adapter);
+
+        button.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showAddDialog();
+            }
+        });
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                T item = adapter.getItem(position);
+                showEditDialog(item);
+            }
+        });
+    }
+
+    private void showAddDialog() {
+        Dialog dialog = (new MaterialDialog.Builder(getContext()))
+                .customView(R.layout.dialog_key_value_editor, false)
+                .title(addDialogTitle)
+                .positiveText(R.string.dialog_ok)
+                .onPositive(new MaterialDialog.SingleButtonCallback() {
+                    @Override
+                    public void onClick(MaterialDialog dialog, DialogAction which) {
+                        EditText keyField = (EditText) dialog.findViewById(R.id.key_value_key);
+                        EditText valueField = (EditText) dialog.findViewById(R.id.key_value_value);
+                        if (!keyField.getText().toString().isEmpty()) {
+                            T newItem = factory.create(keyField.getText().toString(), valueField.getText().toString());
+                            adapter.add(newItem);
+                            updateListViewHeightBasedOnChildren();
+                            notifyListener();
+                        }
+                    }
+                })
+                .negativeText(R.string.dialog_cancel)
+                .build();
+
+        ((TextInputLayout) dialog.findViewById(R.id.key_value_key_layout)).setHint(getContext().getString(keyLabel));
+        ((TextInputLayout) dialog.findViewById(R.id.key_value_value_layout)).setHint(getContext().getString(valueLabel));
+
+        dialog.show();
+    }
+
+    private void showEditDialog(final T item) {
+        Dialog dialog = (new MaterialDialog.Builder(getContext()))
+                .customView(R.layout.dialog_key_value_editor, false)
+                .title(editDialogTitle)
+                .positiveText(R.string.dialog_ok)
+                .onPositive(new MaterialDialog.SingleButtonCallback() {
+                    @Override
+                    public void onClick(MaterialDialog dialog, DialogAction which) {
+                        EditText keyField = (EditText) dialog.findViewById(R.id.key_value_key);
+                        EditText valueField = (EditText) dialog.findViewById(R.id.key_value_value);
+                        if (!keyField.getText().toString().isEmpty()) {
+                            item.setKey(keyField.getText().toString());
+                            item.setValue(valueField.getText().toString());
+                            adapter.notifyDataSetChanged();
+                            notifyListener();
+                        }
+                    }
+                })
+                .neutralText(R.string.dialog_remove)
+                .onNeutral(new MaterialDialog.SingleButtonCallback() {
+                    @Override
+                    public void onClick(MaterialDialog dialog, DialogAction which) {
+                        adapter.remove(item);
+                        updateListViewHeightBasedOnChildren();
+                        notifyListener();
+                    }
+                })
+                .negativeText(R.string.dialog_cancel)
+                .build();
+
+        ((EditText) dialog.findViewById(R.id.key_value_key)).setText(item.getKey());
+        ((EditText) dialog.findViewById(R.id.key_value_value)).setText(item.getValue());
+
+        ((TextInputLayout) dialog.findViewById(R.id.key_value_key_layout)).setHint(getContext().getString(keyLabel));
+        ((TextInputLayout) dialog.findViewById(R.id.key_value_value_layout)).setHint(getContext().getString(valueLabel));
+
+        dialog.show();
+    }
+
+    private void notifyListener() {
+        if (listener != null) {
+            listener.onChange();
+        }
+    }
+
+    public void addItems(Collection<T> items) {
+        adapter.addAll(items);
+        updateListViewHeightBasedOnChildren();
+    }
+
+    public List<T> getItems() {
+        List<T> list = new ArrayList<T>();
+        for (int i = 0; i < adapter.getCount(); i++) {
+            list.add(adapter.getItem(i));
+        }
+        return list;
+    }
+
+    public void setButtonText(int resId) {
+        button.setText(resId);
+    }
+
+    public void setAddDialogTitle(int resId) {
+        this.addDialogTitle = resId;
+    }
+
+    public void setEditDialogTitle(int resId) {
+        this.editDialogTitle = resId;
+    }
+
+    public void setItemFactory(KeyValuePairFactory<T> factory) {
+        this.factory = factory;
+    }
+
+    public void setKeyLabel(int resId) {
+        this.keyLabel = resId;
+    }
+
+    public void setValueLabel(int resId) {
+        this.valueLabel = resId;
+    }
+
+    public void setOnKeyValueChangeListener(OnKeyValueChangeListener listener) {
+        this.listener = listener;
+    }
+
+    private void updateListViewHeightBasedOnChildren() {
+        int desiredWidth = MeasureSpec.makeMeasureSpec(listView.getWidth(), MeasureSpec.UNSPECIFIED);
+        int totalHeight = 0;
+        View view = null;
+        for (int i = 0; i < adapter.getCount(); i++) {
+            view = adapter.getView(i, view, listView);
+            if (i == 0)
+                view.setLayoutParams(new ViewGroup.LayoutParams(desiredWidth, ViewGroup.LayoutParams.WRAP_CONTENT));
+
+            view.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
+            totalHeight += view.getMeasuredHeight();
+        }
+        ViewGroup.LayoutParams params = listView.getLayoutParams();
+        params.height = totalHeight + (listView.getDividerHeight() * (adapter.getCount() - 1));
+        listView.setLayoutParams(params);
+        listView.requestLayout();
+    }
+}
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePair.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePair.java
new file mode 100644
index 00000000..b0d88c05
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePair.java
@@ -0,0 +1,13 @@
+package ch.rmy.android.http_shortcuts.key_value_pairs;
+
+public interface KeyValuePair {
+
+    String getKey();
+
+    String getValue();
+
+    void setKey(String key);
+
+    void setValue(String value);
+
+}
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePairFactory.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePairFactory.java
new file mode 100644
index 00000000..8bd6c75d
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/KeyValuePairFactory.java
@@ -0,0 +1,7 @@
+package ch.rmy.android.http_shortcuts.key_value_pairs;
+
+public interface KeyValuePairFactory<T extends KeyValuePair> {
+
+    T create(String key, String value);
+
+}
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/OnKeyValueChangeListener.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/OnKeyValueChangeListener.java
new file mode 100644
index 00000000..3c9b4473
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/key_value_pairs/OnKeyValueChangeListener.java
@@ -0,0 +1,7 @@
+package ch.rmy.android.http_shortcuts.key_value_pairs;
+
+public interface OnKeyValueChangeListener {
+
+    void onChange();
+
+}
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/Header.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/Header.java
index a59742a0..4a764a71 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/Header.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/Header.java
@@ -1,6 +1,8 @@
 package ch.rmy.android.http_shortcuts.shortcuts;
 
-public class Header {
+import ch.rmy.android.http_shortcuts.key_value_pairs.KeyValuePair;
+
+public class Header implements KeyValuePair {
 
     private final long id;
     private String key;
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/HeaderAdapter.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/HeaderAdapter.java
deleted file mode 100644
index 9f7adb81..00000000
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/HeaderAdapter.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package ch.rmy.android.http_shortcuts.shortcuts;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.TextView;
-
-import ch.rmy.android.http_shortcuts.R;
-
-public class HeaderAdapter extends ArrayAdapter<Header> {
-
-    public HeaderAdapter(Context context) {
-        super(context, R.layout.custom_header_item);
-    }
-
-    @Override
-    public View getView(int position, View rowView, ViewGroup parent) {
-        Header header = getItem(position);
-
-        if (rowView == null) {
-            LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            rowView = inflater.inflate(R.layout.custom_header_item, parent, false);
-        }
-
-        TextView keyView = (TextView) rowView.findViewById(R.id.text_key);
-        keyView.setText(header.getKey());
-
-        TextView valueView = (TextView) rowView.findViewById(R.id.text_value);
-        valueView.setText("= " + header.getValue());
-        return rowView;
-    }
-
-}
\ No newline at end of file
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameter.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameter.java
index 5ab6b5e5..386e6bc4 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameter.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/PostParameter.java
@@ -1,6 +1,8 @@
 package ch.rmy.android.http_shortcuts.shortcuts;
 
-public class PostParameter {
+import ch.rmy.android.http_shortcuts.key_value_pairs.KeyValuePair;
+
+public class PostParameter implements KeyValuePair {
 
     private final long id;
     private String key;
