diff --git a/Diaguard/src/main/java/com/android/diaguard/ExportActivity.java b/Diaguard/src/main/java/com/android/diaguard/ExportActivity.java
index a03bd52d8..034aa3564 100644
--- a/Diaguard/src/main/java/com/android/diaguard/ExportActivity.java
+++ b/Diaguard/src/main/java/com/android/diaguard/ExportActivity.java
@@ -1,10 +1,8 @@
 package com.android.diaguard;
 
-import android.app.ProgressDialog;
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Bundle;
 import android.support.v7.app.ActionBarActivity;
 import android.util.Log;
@@ -18,29 +16,12 @@ import android.widget.DatePicker;
 import android.widget.Spinner;
 
 import com.android.diaguard.database.DatabaseDataSource;
-import com.android.diaguard.database.Event;
 import com.android.diaguard.fragments.DatePickerFragment;
-import com.android.diaguard.helpers.Helper;
+import com.android.diaguard.helpers.FileHelper;
 import com.android.diaguard.helpers.PreferenceHelper;
 import com.android.diaguard.helpers.ViewHelper;
-import com.itextpdf.text.BaseColor;
-import com.itextpdf.text.Chunk;
-import com.itextpdf.text.Document;
-import com.itextpdf.text.Element;
-import com.itextpdf.text.Font;
-import com.itextpdf.text.FontFactory;
-import com.itextpdf.text.Paragraph;
-import com.itextpdf.text.Phrase;
-import com.itextpdf.text.Rectangle;
-import com.itextpdf.text.pdf.ColumnText;
-import com.itextpdf.text.pdf.PdfPCell;
-import com.itextpdf.text.pdf.PdfPRow;
-import com.itextpdf.text.pdf.PdfPTable;
-import com.itextpdf.text.pdf.PdfPageEventHelper;
-import com.itextpdf.text.pdf.PdfWriter;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 
@@ -61,8 +42,6 @@ public class ExportActivity extends ActionBarActivity {
     private Button buttonDateEnd;
     private CheckBox checkBoxMail;
 
-    private Event.Category[] selectedCategories;
-
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_export);
@@ -88,8 +67,6 @@ public class ExportActivity extends ActionBarActivity {
         dateStart.set(Calendar.DAY_OF_MONTH, 1);
         dateFormat = preferenceHelper.getDateFormat();
 
-        selectedCategories = new Event.Category[] {Event.Category.BloodSugar, Event.Category.Bolus, Event.Category.Meal, Event.Category.Activity};
-
         getComponents();
         initializeGUI();
     }
@@ -119,17 +96,35 @@ public class ExportActivity extends ActionBarActivity {
 
     private void export() {
         if(validate()) {
-            if(spinnerFormat.getSelectedItem().toString().toLowerCase().equals("pdf")) {
-                PDFExportTask pdfExportTask = new PDFExportTask();
-                pdfExportTask.execute();
+            FileHelper fileHelper = new FileHelper(this);
+            File createdFile = null;
+            String mimeType = null;
+
+            if(spinnerFormat.getSelectedItemPosition() == 0) {
+                createdFile = fileHelper.exportPDF(dateStart, dateEnd);
+                mimeType = FileHelper.MIME_PDF;
             }
+
+            else if(spinnerFormat.getSelectedItemPosition() == 1) {
+                createdFile = fileHelper.exportCSV();
+                mimeType = FileHelper.MIME_CSV;
+            }
+
+            if(createdFile == null || mimeType == null)
+                throw new IllegalArgumentException("File and MimeType cannot be null");
+
+            if(checkBoxMail.isChecked())
+                sendAttachment(createdFile);
+            else
+                openFile(createdFile, mimeType);
         }
     }
 
     private void sendAttachment(File file) {
         Intent intent = new Intent(Intent.ACTION_SEND);
         intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));
-        intent.setType(Helper.MIME_PDF);
+        intent.setType(FileHelper.MIME_MAIL);
+
         // Diaguard Export: DateStart - DateEnd
         SimpleDateFormat format = preferenceHelper.getDateFormat();
         String subject = getString(R.string.app_name) + " " + getString(R.string.export) + ": " +
@@ -137,6 +132,7 @@ public class ExportActivity extends ActionBarActivity {
         intent.putExtra(Intent.EXTRA_SUBJECT, subject);
         intent.putExtra(Intent.EXTRA_TEXT,
                 getString(R.string.pref_data_export_mail_message));
+
         try {
             startActivity(intent);
         } catch (ActivityNotFoundException e) {
@@ -145,14 +141,14 @@ public class ExportActivity extends ActionBarActivity {
         }
     }
 
-    private void openPDF(File file) {
+    private void openFile(File file, String mimeType) {
         Intent intent = new Intent(Intent.ACTION_VIEW);
-        intent.setDataAndType(Uri.fromFile(file), Helper.MIME_PDF);
+        intent.setDataAndType(Uri.fromFile(file), mimeType);
         try {
             startActivity(intent);
         } catch (ActivityNotFoundException e) {
-            ViewHelper.showToastError(this, getString(R.string.error_no_pdf));
-            Log.e("Open PDF", e.getMessage());
+            ViewHelper.showToastError(this, getString(R.string.error_no_app));
+            Log.e("Open " + mimeType, e.getMessage());
         }
     }
 
@@ -182,221 +178,6 @@ public class ExportActivity extends ActionBarActivity {
         }.show(getSupportFragmentManager(), "EndDatePicker");
     }
 
-    // ASYNCTASKS
-
-    private class PDFExportTask extends AsyncTask<Void, String, File> {
-
-        ProgressDialog progressDialog;
-        private final int TEXT_SIZE = 9;
-
-        @Override
-        protected File doInBackground(Void... params) {
-
-            File directory = new File(Helper.PATH_STORAGE);
-            if (directory != null)
-                directory.mkdirs();
-
-            File file = new File(directory + "/export" + new SimpleDateFormat("yyyyMMddHHmmss").
-                    format(Calendar.getInstance().getTime()) + ".pdf");
-
-            // iTextG
-            try {
-                Font fontBasis = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE);
-                Font fontBold = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, Font.BOLD);
-                Font fontGray = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.GRAY);
-                Font fontRed = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.RED);
-                Font fontBlue = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.BLUE);
-
-                Document document = new Document();
-
-                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));
-                HeaderFooter event = new HeaderFooter();
-                writer.setBoxSize("Header", new Rectangle(36, 54, 559, 788));
-                writer.setPageEvent(event);
-
-                document.open();
-                iTextGMetaData(document);
-
-                final Calendar dateIteration = Calendar.getInstance();
-                dateIteration.setTime(dateStart.getTime());
-
-                // One day after last chosen day
-                Calendar dateAfter = Calendar.getInstance();
-                dateAfter.setTime(dateEnd.getTime());
-                dateAfter.set(Calendar.DAY_OF_MONTH, dateAfter.get(Calendar.DAY_OF_MONTH) + 1);
-
-                // Total number of days to export
-                int totalDays = Helper.getDifferenceInDays(dateStart, dateEnd) + 1;
-
-                String[] weekDays = getResources().getStringArray(R.array.weekdays);
-
-                document.add(getWeekBar(dateIteration));
-                document.add(Chunk.NEWLINE);
-
-                // Day by day
-                int currentDay = 1;
-                while(dateIteration.before(dateAfter)) {
-
-                    // title bar for new week
-                    if(currentDay > 1 && dateIteration.get(Calendar.DAY_OF_WEEK) == 2) {
-                        document.newPage();
-                        document.add(getWeekBar(dateIteration));
-                        document.add(Chunk.NEWLINE);
-                    }
-
-                    PdfPTable table = new PdfPTable(13);
-                    table.setWidths(new float[]{3,1,1,1,1,1,1,1,1,1,1,1,1});
-                    table.setWidthPercentage(100);
-
-                    PdfPCell cell;
-
-                    // Header
-                    cell = new PdfPCell(new Phrase(weekDays[dateIteration.get(Calendar.DAY_OF_WEEK)-1].substring(0, 2) + " " +
-                            new SimpleDateFormat("dd.MM.").format(dateIteration.getTime()),
-                            new Font(fontBold)));
-                    cell.setBorder(0);
-                    cell.setBorder(Rectangle.BOTTOM);
-                    table.addCell(cell);
-                    for(int i = 0; i < 12; i++) {
-                        cell = new PdfPCell(new Paragraph(Integer.toString(i * 2), fontGray));
-                        cell.setBorder(0);
-                        cell.setBorder(Rectangle.BOTTOM);
-                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
-                        table.addCell(cell);
-                    }
-
-                    // Content
-                    dataSource.open();
-                    float[][] values = dataSource.getAverageDataTable(dateIteration, selectedCategories, 12);
-                    dataSource.close();
-
-                    // Insert values into table
-                    for(int categoryPosition = 0; categoryPosition < selectedCategories.length; categoryPosition++) {
-                        Event.Category category = selectedCategories[categoryPosition];
-
-                        cell = new PdfPCell(new Paragraph(preferenceHelper.getCategoryName(category), fontGray));
-                        cell.setBorder(0);
-                        if(categoryPosition == selectedCategories.length-1)
-                            cell.setBorder(Rectangle.BOTTOM);
-                        table.addCell(cell);
-
-                        for(int hour = 0; hour < 12; hour++) {
-                            float value = preferenceHelper.formatDefaultToCustomUnit(category,
-                                    values[categoryPosition][hour]);
-
-                            Paragraph paragraph = new Paragraph();
-                            if(value > 0) {
-                                String valueString = preferenceHelper.
-                                        getDecimalFormat(category).format(value);
-
-                                if(category == Event.Category.BloodSugar) {
-                                    if (values[categoryPosition][hour] <
-                                            preferenceHelper.getLimitHypoglycemia())
-                                        paragraph = new Paragraph(valueString, fontBlue);
-                                    else if (values[categoryPosition][hour] >
-                                            preferenceHelper.getLimitHyperglycemia())
-                                        paragraph = new Paragraph(valueString, fontRed);
-                                    else
-                                        paragraph = new Paragraph(valueString, fontBasis);
-                                }
-                            }
-
-                            cell = new PdfPCell(paragraph);
-                            cell.setBorder(0);
-                            if(categoryPosition == selectedCategories.length-1)
-                                cell.setBorder(Rectangle.BOTTOM);
-                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
-                            table.addCell(cell);
-                        }
-                    }
-
-                    // Alternating row background
-                    boolean b = true;
-                    for(PdfPRow r: table.getRows()) {
-                        for(PdfPCell c: r.getCells())
-                            c.setBackgroundColor(b ? BaseColor.WHITE : new BaseColor(230,230,230));
-                        b = !b;
-                    }
-
-                    document.add(table);
-                    document.add(new Paragraph(" ", fontBasis));
-
-                    publishProgress(getString(R.string.day) + " " + currentDay + "/" + totalDays);
-
-                    // Next day
-                    dateIteration.set(Calendar.DAY_OF_MONTH, dateIteration.get(Calendar.DAY_OF_MONTH) + 1);
-                    currentDay++;
-                }
-
-                document.close();
-            }
-            catch (Exception ex) {
-                Log.e("DiaguardError", ex.getMessage());
-            }
-
-            return file;
-        }
-
-        @Override
-        protected void onPostExecute(File file) {
-
-            progressDialog.dismiss();
-
-            if(checkBoxMail.isChecked())
-                sendAttachment(file);
-            else
-                openPDF(file);
-
-            finish();
-        }
-
-        @Override
-        protected void onPreExecute() {
-            progressDialog = new ProgressDialog(ExportActivity.this);
-            progressDialog.setMessage(getResources().getString(R.string.export_progress));
-            progressDialog.setIndeterminate(true);
-            progressDialog.setCancelable(false);
-            progressDialog.show();
-        }
-
-        @Override
-        protected void onProgressUpdate(String... message) {
-            progressDialog.setMessage(message[0]);
-        }
-    }
-
-    private void iTextGMetaData(Document document) {
-        String subject = getResources().getString(R.string.app_name) + " " +
-                getResources().getString(R.string.export) + ": " +
-                preferenceHelper.getDateFormat().format(dateStart.getTime()) + " - " +
-                preferenceHelper.getDateFormat().format(dateEnd.getTime());
-        document.addTitle(subject);
-        document.addAuthor(getResources().getString(R.string.app_name));
-        document.addCreator(getResources().getString(R.string.app_name));
-    }
-
-    private Paragraph getWeekBar(Calendar weekStart) {
-
-        Paragraph paragraph = new Paragraph();
-
-        // Week
-        Chunk chunk = new Chunk(getString(R.string.calendarweek) + " " + weekStart.get(Calendar.WEEK_OF_YEAR));
-        chunk.setFont(FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD));
-        paragraph.add(chunk);
-
-        Calendar weekEnd = Calendar.getInstance();
-        weekEnd.setTime(weekStart.getTime());
-        weekEnd.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
-
-        // Dates
-        chunk = new Chunk("\n" + preferenceHelper.getDateFormat().format(weekStart.getTime()) + " - " +
-            preferenceHelper.getDateFormat().format(weekEnd.getTime()));
-        chunk.setFont(FontFactory.getFont(FontFactory.HELVETICA, 9));
-        paragraph.add(chunk);
-
-        return paragraph;
-    }
-
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
@@ -410,41 +191,4 @@ public class ExportActivity extends ActionBarActivity {
                 return super.onOptionsItemSelected(item);
         }
     }
-
-    class HeaderFooter extends PdfPageEventHelper {
-
-        int pageNumber;
-
-        public void onOpenDocument(PdfWriter writer, Document document) {
-
-        }
-
-        public void onChapter(PdfWriter writer, Document document,
-                              float paragraphPosition, Paragraph title) {
-            pageNumber = 1;
-        }
-
-        public void onStartPage(PdfWriter writer, Document document) {
-            pageNumber++;
-        }
-
-        public void onEndPage(PdfWriter writer, Document document) {
-            Rectangle rect = writer.getBoxSize("Header");
-
-            Calendar today = Calendar.getInstance();
-            String stamp = getString(R.string.export_stamp) + " " +
-                    preferenceHelper.getDateFormat().format(today.getTime());
-            Chunk chunk = new Chunk(stamp,
-                    FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY));
-            ColumnText.showTextAligned(writer.getDirectContent(),
-                    Element.ALIGN_LEFT, new Phrase(chunk),
-                    rect.getLeft(), rect.getBottom() - 18, 0);
-
-            chunk = new Chunk(getString(R.string.app_facebook),
-                    FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY));
-            ColumnText.showTextAligned(writer.getDirectContent(),
-                    Element.ALIGN_RIGHT, new Phrase(chunk),
-                    rect.getRight(), rect.getBottom() - 18, 0);
-        }
-    }
 }
\ No newline at end of file
diff --git a/Diaguard/src/main/java/com/android/diaguard/NewEventActivity.java b/Diaguard/src/main/java/com/android/diaguard/NewEventActivity.java
index a0c46d181..4f4fd33e3 100644
--- a/Diaguard/src/main/java/com/android/diaguard/NewEventActivity.java
+++ b/Diaguard/src/main/java/com/android/diaguard/NewEventActivity.java
@@ -26,7 +26,7 @@ import com.android.diaguard.database.Event;
 import com.android.diaguard.fragments.DatePickerFragment;
 import com.android.diaguard.fragments.TimePickerFragment;
 import com.android.diaguard.helpers.PreferenceHelper;
-import com.android.diaguard.helpers.SwipeDismissTouchListener;
+import com.android.diaguard.adapters.SwipeDismissTouchListener;
 import com.android.diaguard.helpers.Validator;
 import com.android.diaguard.helpers.ViewHelper;
 
diff --git a/Diaguard/src/main/java/com/android/diaguard/PreferencesActivity.java b/Diaguard/src/main/java/com/android/diaguard/PreferencesActivity.java
index 472760f4c..62e81144d 100644
--- a/Diaguard/src/main/java/com/android/diaguard/PreferencesActivity.java
+++ b/Diaguard/src/main/java/com/android/diaguard/PreferencesActivity.java
@@ -13,7 +13,6 @@ public class PreferencesActivity extends PreferenceActivity {
 
     @Override
     public void onBuildHeaders(List<Header> target) {
-        super.onBuildHeaders(target);
         loadHeadersFromResource(R.xml.headers, target);
     }
 
diff --git a/Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissListViewTouchListener.java b/Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissListViewTouchListener.java
similarity index 99%
rename from Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissListViewTouchListener.java
rename to Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissListViewTouchListener.java
index c75738b86..9de6464fb 100644
--- a/Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissListViewTouchListener.java
+++ b/Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissListViewTouchListener.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.android.diaguard.helpers;
+package com.android.diaguard.adapters;
 
 import android.graphics.Rect;
 import android.view.MotionEvent;
diff --git a/Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissTouchListener.java b/Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissTouchListener.java
similarity index 99%
rename from Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissTouchListener.java
rename to Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissTouchListener.java
index 03ff5b7c0..c178f2bde 100644
--- a/Diaguard/src/main/java/com/android/diaguard/helpers/SwipeDismissTouchListener.java
+++ b/Diaguard/src/main/java/com/android/diaguard/adapters/SwipeDismissTouchListener.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package com.android.diaguard.helpers;
+package com.android.diaguard.adapters;
 
 import android.view.MotionEvent;
 import android.view.VelocityTracker;
diff --git a/Diaguard/src/main/java/com/android/diaguard/fragments/MainFragment.java b/Diaguard/src/main/java/com/android/diaguard/fragments/MainFragment.java
index f94152f72..d329ed8f6 100644
--- a/Diaguard/src/main/java/com/android/diaguard/fragments/MainFragment.java
+++ b/Diaguard/src/main/java/com/android/diaguard/fragments/MainFragment.java
@@ -89,10 +89,12 @@ public class MainFragment extends Fragment {
         time = Calendar.getInstance();
 
         if(dataSource.countEvents(Event.Category.BloodSugar) > 0) {
+            textViewLatestValue.setTextSize(60);
             updateLatest();
             updateDashboard();
         }
         else {
+            textViewLatestValue.setTextSize(40);
             textViewAverageMonth.setText(Helper.PLACEHOLDER);
             textViewAverageWeek.setText(Helper.PLACEHOLDER);
             textViewAverageDay.setText(Helper.PLACEHOLDER);
diff --git a/Diaguard/src/main/java/com/android/diaguard/helpers/FileHelper.java b/Diaguard/src/main/java/com/android/diaguard/helpers/FileHelper.java
new file mode 100644
index 000000000..ee49b8fe1
--- /dev/null
+++ b/Diaguard/src/main/java/com/android/diaguard/helpers/FileHelper.java
@@ -0,0 +1,441 @@
+package com.android.diaguard.helpers;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.os.AsyncTask;
+import android.os.Environment;
+import android.util.Log;
+
+import com.android.diaguard.R;
+import com.android.diaguard.database.DatabaseDataSource;
+import com.android.diaguard.database.Event;
+import com.itextpdf.text.BaseColor;
+import com.itextpdf.text.Chunk;
+import com.itextpdf.text.Document;
+import com.itextpdf.text.Element;
+import com.itextpdf.text.Font;
+import com.itextpdf.text.FontFactory;
+import com.itextpdf.text.Paragraph;
+import com.itextpdf.text.Phrase;
+import com.itextpdf.text.Rectangle;
+import com.itextpdf.text.pdf.ColumnText;
+import com.itextpdf.text.pdf.PdfPCell;
+import com.itextpdf.text.pdf.PdfPRow;
+import com.itextpdf.text.pdf.PdfPTable;
+import com.itextpdf.text.pdf.PdfPageEventHelper;
+import com.itextpdf.text.pdf.PdfWriter;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+
+import au.com.bytecode.opencsv.CSVReader;
+import au.com.bytecode.opencsv.CSVWriter;
+
+/**
+ * Created by Filip on 05.06.2014.
+ */
+public class FileHelper {
+
+    public static final String PATH_STORAGE = Environment.getExternalStorageDirectory() + "/Diaguard";
+    public static final char DELIMITER = ';';
+
+    public static final String MIME_MAIL = "message/rfc822";
+    public static final String MIME_PDF = "application/pdf";
+    public static final String MIME_CSV = "text/csv";
+
+    Context context;
+    DatabaseDataSource dataSource;
+    PreferenceHelper preferenceHelper;
+
+    public FileHelper(Context context) {
+        this.context = context;
+        this.dataSource = new DatabaseDataSource(context);
+        this.preferenceHelper = new PreferenceHelper(context);
+    }
+
+    public File exportCSV() {
+        CSVExportTask csvExportTask = new CSVExportTask();
+        csvExportTask.execute();
+
+        File createdFile = null;
+        try {
+            createdFile = csvExportTask.get();
+        }
+        catch(InterruptedException ex) {
+            ex.printStackTrace();
+        }
+        catch(ExecutionException ex) {
+            ex.printStackTrace();
+        }
+        return createdFile;
+    }
+
+    public void importCSV(String fileName) {
+        CSVImportTask csvImportTask = new CSVImportTask();
+        csvImportTask.execute(fileName);
+    }
+
+    public File exportPDF(Calendar dateStart, Calendar dateEnd) {
+        PDFExportTask pdfExportTask = new PDFExportTask();
+        pdfExportTask.execute(dateStart, dateEnd);
+
+        File createdFile = null;
+        try {
+            createdFile = pdfExportTask.get();
+        }
+        catch(InterruptedException ex) {
+            ex.printStackTrace();
+        }
+        catch(ExecutionException ex) {
+            ex.printStackTrace();
+        }
+        return createdFile;
+    }
+
+    private class CSVExportTask extends AsyncTask<Void, Void, File> {
+
+        @Override
+        protected File doInBackground(Void... params) {
+
+            dataSource.open();
+            List<Event> events = dataSource.getEvents();
+            dataSource.close();
+
+            File directory = new File(PATH_STORAGE);
+
+            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
+            File file = new File(directory + "/backup" +
+                    format.format(Calendar.getInstance().getTime()) + ".csv");
+
+            try {
+                FileWriter fileWriter = new FileWriter(file);
+                CSVWriter writer = new CSVWriter(fileWriter, DELIMITER);
+
+                for(Event event : events) {
+                    String[] array = {
+                            Float.toString(event.getValue()),
+                            Helper.getDateDatabaseFormat().format(event.getDate().getTime()),
+                            event.getNotes(),
+                            event.getCategory().name() };
+                    writer.writeNext(array);
+                }
+
+                writer.close();
+            }
+            catch (IOException ex) {
+                Log.e("DiaguardError", ex.getMessage());
+            }
+
+            return file;
+        }
+
+        @Override
+        protected void onPostExecute(File file) {
+            super.onPostExecute(file);
+        }
+
+        @Override
+        protected void onPreExecute() {}
+
+        @Override
+        protected void onProgressUpdate(Void... values) {}
+    }
+
+    private class CSVImportTask extends AsyncTask<String, Void, Void> {
+
+        @Override
+        protected Void doInBackground(String... params) {
+            try {
+                String filePath = PATH_STORAGE + "/" + params[0];
+                CSVReader reader = new CSVReader(new FileReader(filePath), DELIMITER);
+
+                Event event = new Event();
+                String[] nextLine;
+                dataSource.open();
+                while ((nextLine = reader.readNext()) != null) {
+
+                    event.setValue(Float.parseFloat(nextLine[0]));
+                    event.setDate(nextLine[1]);
+                    event.setNotes(nextLine[2]);
+                    event.setCategory(Event.Category.valueOf(nextLine[3]));
+                    dataSource.insertEvent(event);
+                }
+                dataSource.close();
+                reader.close();
+            } catch (IOException ex) {
+                Log.e("DiaguardError", ex.getMessage());
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Void result) {
+        }
+
+        @Override
+        protected void onPreExecute() {
+        }
+
+        @Override
+        protected void onProgressUpdate(Void... values) {
+        }
+    }
+
+    private class PDFExportTask extends AsyncTask<Calendar, String, File> {
+        ProgressDialog progressDialog;
+        private final int TEXT_SIZE = 9;
+
+        Event.Category[] selectedCategories =
+                new Event.Category[] {
+                        Event.Category.BloodSugar,
+                        Event.Category.Bolus,
+                        Event.Category.Meal,
+                        Event.Category.Activity};
+
+        Calendar dateStart;
+        Calendar dateEnd;
+
+        @Override
+        protected File doInBackground(Calendar... params) {
+
+            File directory = new File(PATH_STORAGE);
+            File file = new File(directory + "/export" + new SimpleDateFormat("yyyyMMddHHmmss").
+                    format(Calendar.getInstance().getTime()) + ".pdf");
+
+            dateStart = params[0];
+            dateEnd = params[1];
+
+            // iTextG
+            try {
+                Font fontBasis = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE);
+                Font fontBold = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, Font.BOLD);
+                Font fontGray = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.GRAY);
+                Font fontRed = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.RED);
+                Font fontBlue = FontFactory.getFont(FontFactory.HELVETICA, TEXT_SIZE, BaseColor.BLUE);
+
+                Document document = new Document();
+
+                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(file));
+                HeaderFooter event = new HeaderFooter();
+                writer.setBoxSize("Header", new Rectangle(36, 54, 559, 788));
+                writer.setPageEvent(event);
+
+                document.open();
+                iTextGMetaData(document);
+
+                final Calendar dateIteration = Calendar.getInstance();
+                dateIteration.setTime(dateStart.getTime());
+
+                // One day after last chosen day
+                Calendar dateAfter = Calendar.getInstance();
+                dateAfter.setTime(dateEnd.getTime());
+                dateAfter.set(Calendar.DAY_OF_MONTH, dateAfter.get(Calendar.DAY_OF_MONTH) + 1);
+
+                // Total number of days to export
+                int totalDays = Helper.getDifferenceInDays(dateStart, dateEnd) + 1;
+
+                String[] weekDays = context.getResources().getStringArray(R.array.weekdays);
+
+                document.add(getWeekBar(dateIteration));
+                document.add(Chunk.NEWLINE);
+
+                // Day by day
+                int currentDay = 1;
+                while(dateIteration.before(dateAfter)) {
+
+                    // title bar for new week
+                    if(currentDay > 1 && dateIteration.get(Calendar.DAY_OF_WEEK) == 2) {
+                        document.newPage();
+                        document.add(getWeekBar(dateIteration));
+                        document.add(Chunk.NEWLINE);
+                    }
+
+                    PdfPTable table = new PdfPTable(13);
+                    table.setWidths(new float[]{3,1,1,1,1,1,1,1,1,1,1,1,1});
+                    table.setWidthPercentage(100);
+
+                    PdfPCell cell;
+
+                    // Header
+                    cell = new PdfPCell(new Phrase(weekDays[dateIteration.get(Calendar.DAY_OF_WEEK)-1].substring(0, 2) + " " +
+                            new SimpleDateFormat("dd.MM.").format(dateIteration.getTime()),
+                            new Font(fontBold)));
+                    cell.setBorder(0);
+                    cell.setBorder(Rectangle.BOTTOM);
+                    table.addCell(cell);
+                    for(int i = 0; i < 12; i++) {
+                        cell = new PdfPCell(new Paragraph(Integer.toString(i * 2), fontGray));
+                        cell.setBorder(0);
+                        cell.setBorder(Rectangle.BOTTOM);
+                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
+                        table.addCell(cell);
+                    }
+
+                    // Content
+                    dataSource.open();
+                    float[][] values = dataSource.getAverageDataTable(dateIteration, selectedCategories, 12);
+                    dataSource.close();
+
+                    // Insert values into table
+                    for(int categoryPosition = 0; categoryPosition < selectedCategories.length; categoryPosition++) {
+                        Event.Category category = selectedCategories[categoryPosition];
+
+                        cell = new PdfPCell(new Paragraph(preferenceHelper.getCategoryName(category), fontGray));
+                        cell.setBorder(0);
+                        if(categoryPosition == selectedCategories.length-1)
+                            cell.setBorder(Rectangle.BOTTOM);
+                        table.addCell(cell);
+
+                        for(int hour = 0; hour < 12; hour++) {
+                            float value = preferenceHelper.formatDefaultToCustomUnit(category,
+                                    values[categoryPosition][hour]);
+
+                            Paragraph paragraph = new Paragraph();
+                            if(value > 0) {
+                                String valueString = preferenceHelper.
+                                        getDecimalFormat(category).format(value);
+
+                                if(category == Event.Category.BloodSugar) {
+                                    if (values[categoryPosition][hour] <
+                                            preferenceHelper.getLimitHypoglycemia())
+                                        paragraph = new Paragraph(valueString, fontBlue);
+                                    else if (values[categoryPosition][hour] >
+                                            preferenceHelper.getLimitHyperglycemia())
+                                        paragraph = new Paragraph(valueString, fontRed);
+                                    else
+                                        paragraph = new Paragraph(valueString, fontBasis);
+                                }
+                            }
+
+                            cell = new PdfPCell(paragraph);
+                            cell.setBorder(0);
+                            if(categoryPosition == selectedCategories.length-1)
+                                cell.setBorder(Rectangle.BOTTOM);
+                            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
+                            table.addCell(cell);
+                        }
+                    }
+
+                    // Alternating row background
+                    boolean b = true;
+                    for(PdfPRow r: table.getRows()) {
+                        for(PdfPCell c: r.getCells())
+                            c.setBackgroundColor(b ? BaseColor.WHITE : new BaseColor(230,230,230));
+                        b = !b;
+                    }
+
+                    document.add(table);
+                    document.add(new Paragraph(" ", fontBasis));
+
+                    publishProgress(context.getString(R.string.day) + " " + currentDay + "/" + totalDays);
+
+                    // Next day
+                    dateIteration.set(Calendar.DAY_OF_MONTH, dateIteration.get(Calendar.DAY_OF_MONTH) + 1);
+                    currentDay++;
+                }
+
+                document.close();
+            }
+            catch (Exception ex) {
+                Log.e("DiaguardError", ex.getMessage());
+            }
+
+            return file;
+        }
+
+        @Override
+        protected void onPostExecute(File file) {
+            progressDialog.dismiss();
+            super.onPostExecute(file);
+        }
+
+        @Override
+        protected void onPreExecute() {
+            progressDialog = new ProgressDialog(context);
+            progressDialog.setMessage(context.getResources().getString(R.string.export_progress));
+            progressDialog.setIndeterminate(true);
+            progressDialog.setCancelable(false);
+            progressDialog.show();
+        }
+
+        @Override
+        protected void onProgressUpdate(String... message) {
+            progressDialog.setMessage(message[0]);
+        }
+
+        private void iTextGMetaData(Document document) {
+            String subject = context.getResources().getString(R.string.app_name) + " " +
+                    context.getResources().getString(R.string.export) + ": " +
+                    preferenceHelper.getDateFormat().format(dateStart.getTime()) + " - " +
+                    preferenceHelper.getDateFormat().format(dateEnd.getTime());
+            document.addTitle(subject);
+            document.addAuthor(context.getResources().getString(R.string.app_name));
+            document.addCreator(context.getResources().getString(R.string.app_name));
+        }
+
+        private Paragraph getWeekBar(Calendar weekStart) {
+
+            Paragraph paragraph = new Paragraph();
+
+            // Week
+            Chunk chunk = new Chunk(context.getString(R.string.calendarweek) + " " + weekStart.get(Calendar.WEEK_OF_YEAR));
+            chunk.setFont(FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD));
+            paragraph.add(chunk);
+
+            Calendar weekEnd = Calendar.getInstance();
+            weekEnd.setTime(weekStart.getTime());
+            weekEnd.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
+
+            // Dates
+            chunk = new Chunk("\n" + preferenceHelper.getDateFormat().format(weekStart.getTime()) + " - " +
+                    preferenceHelper.getDateFormat().format(weekEnd.getTime()));
+            chunk.setFont(FontFactory.getFont(FontFactory.HELVETICA, 9));
+            paragraph.add(chunk);
+
+            return paragraph;
+        }
+    }
+
+    class HeaderFooter extends PdfPageEventHelper {
+        int pageNumber;
+
+        public void onOpenDocument(PdfWriter writer, Document document) {
+        }
+
+        public void onChapter(PdfWriter writer, Document document,
+                              float paragraphPosition, Paragraph title) {
+            pageNumber = 1;
+        }
+
+        public void onStartPage(PdfWriter writer, Document document) {
+            pageNumber++;
+        }
+
+        public void onEndPage(PdfWriter writer, Document document) {
+            Rectangle rect = writer.getBoxSize("Header");
+
+            Calendar today = Calendar.getInstance();
+            String stamp = context.getString(R.string.export_stamp) + " " +
+                    preferenceHelper.getDateFormat().format(today.getTime());
+            Chunk chunk = new Chunk(stamp,
+                    FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY));
+            ColumnText.showTextAligned(writer.getDirectContent(),
+                    Element.ALIGN_LEFT, new Phrase(chunk),
+                    rect.getLeft(), rect.getBottom() - 18, 0);
+
+            chunk = new Chunk(context.getString(R.string.app_facebook),
+                    FontFactory.getFont(FontFactory.HELVETICA, 9, BaseColor.GRAY));
+            ColumnText.showTextAligned(writer.getDirectContent(),
+                    Element.ALIGN_RIGHT, new Phrase(chunk),
+                    rect.getRight(), rect.getBottom() - 18, 0);
+        }
+    }
+}
diff --git a/Diaguard/src/main/java/com/android/diaguard/helpers/Helper.java b/Diaguard/src/main/java/com/android/diaguard/helpers/Helper.java
index f20d1fe35..07c7d7b00 100644
--- a/Diaguard/src/main/java/com/android/diaguard/helpers/Helper.java
+++ b/Diaguard/src/main/java/com/android/diaguard/helpers/Helper.java
@@ -15,8 +15,6 @@ import java.util.Calendar;
  */
 public class Helper {
 
-    public static final String PATH_STORAGE = Environment.getExternalStorageDirectory() + "/Diaguard";
-    public static final String MIME_PDF = "application/pdf";
     public static final String PLACEHOLDER = "-";
 
     public static DecimalFormat getDecimalFormat() {
diff --git a/Diaguard/src/main/java/com/android/diaguard/preferences/BackupPreference.java b/Diaguard/src/main/java/com/android/diaguard/preferences/BackupPreference.java
index 5aade32f8..78f24794f 100644
--- a/Diaguard/src/main/java/com/android/diaguard/preferences/BackupPreference.java
+++ b/Diaguard/src/main/java/com/android/diaguard/preferences/BackupPreference.java
@@ -4,31 +4,23 @@ import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.os.AsyncTask;
 import android.preference.DialogPreference;
 import android.util.AttributeSet;
 import android.util.Log;
 
 import com.android.diaguard.R;
 import com.android.diaguard.database.DatabaseDataSource;
-import com.android.diaguard.database.Event;
-import com.android.diaguard.helpers.Helper;
+import com.android.diaguard.helpers.FileHelper;
 import com.android.diaguard.helpers.PreferenceHelper;
 import com.android.diaguard.helpers.ViewHelper;
 
 import java.io.File;
-import java.io.FileReader;
-import java.io.FileWriter;
-import java.io.IOException;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
 
-import au.com.bytecode.opencsv.CSVReader;
-import au.com.bytecode.opencsv.CSVWriter;
-
 /**
  * Created by Filip on 04.11.13.
  */
@@ -63,7 +55,7 @@ public class BackupPreference extends DialogPreference {
                             case ACTION_CREATEBACKUP:
                                 createBackup();
                                 SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
-                                String path = Helper.PATH_STORAGE + "/backup" +
+                                String path = FileHelper.PATH_STORAGE + "/backup" +
                                         format.format(Calendar.getInstance().getTime()) + ".csv";
                                 ViewHelper.showToastMessage(activity,
                                         activity.getResources().getString(R.string.pref_data_backup_finished) + ": " + path);
@@ -83,8 +75,7 @@ public class BackupPreference extends DialogPreference {
     }
 
     private void showBackups() {
-
-        File path = new File(Helper.PATH_STORAGE);
+        File path = new File(FileHelper.PATH_STORAGE);
         File[] files = path.listFiles();
         List<String> csvFiles = new ArrayList<String>();
         for (File file : files) {
@@ -114,9 +105,8 @@ public class BackupPreference extends DialogPreference {
         builder.setTitle(R.string.backup_title)
                 .setItems(csvArrayDates, new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int which) {
-
-                        CSVImportTask csvImportTask = new CSVImportTask();
-                        csvImportTask.execute(csvArray[which]);
+                        FileHelper fileHelper = new FileHelper(getContext());
+                        fileHelper.importCSV(csvArray[which]);
 
                         ViewHelper.showToastMessage(activity,
                                 activity.getResources().getString(R.string.pref_data_backup_import));
@@ -128,99 +118,7 @@ public class BackupPreference extends DialogPreference {
     }
 
     private void createBackup() {
-        CSVExportTask csvExport = new CSVExportTask();
-        csvExport.execute();
-    }
-
-    private class CSVExportTask extends AsyncTask<Void, Void, List<Event>> {
-
-        @Override
-        protected List<Event> doInBackground(Void... params) {
-
-            dataSource.open();
-            List<Event> events = dataSource.getEvents();
-            dataSource.close();
-
-            return events;
-        }
-
-        @Override
-        protected void onPostExecute(List<Event> events) {
-
-            File directory = new File(Helper.PATH_STORAGE);
-
-            if (directory != null)
-                directory.mkdirs();
-
-            SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
-            File file = new File(directory + "/backup" +
-                    format.format(Calendar.getInstance().getTime()) + ".csv");
-
-            try {
-                FileWriter fileWriter = new FileWriter(file);
-                CSVWriter writer = new CSVWriter(fileWriter);
-
-                for(Event event : events) {
-                    String[] array = {
-                            Float.toString(event.getValue()),
-                            Helper.getDateDatabaseFormat().format(event.getDate().getTime()),
-                            event.getNotes(),
-                            event.getCategory().name() };
-                    writer.writeNext(array);
-                }
-
-                writer.close();
-            }
-            catch (IOException ex) {
-                Log.e("DiaguardError", ex.getMessage());
-            }
-        }
-
-        @Override
-        protected void onPreExecute() {}
-
-        @Override
-        protected void onProgressUpdate(Void... values) {}
-    }
-
-
-    private class CSVImportTask extends AsyncTask<String, Void, Void> {
-
-        @Override
-        protected Void doInBackground(String... params) {
-
-            try {
-                String filePath = Helper.PATH_STORAGE + "/" + params[0];
-                CSVReader reader = new CSVReader(new FileReader(filePath));
-
-                Event event = new Event();
-                String[] nextLine;
-                dataSource.open();
-                while((nextLine = reader.readNext()) != null) {
-
-                    event.setValue(Float.parseFloat(nextLine[0]));
-                    event.setDate(nextLine[1]);
-                    event.setNotes(nextLine[2]);
-                    event.setCategory(Event.Category.valueOf(nextLine[3]));
-                    dataSource.insertEvent(event);
-                }
-                dataSource.close();
-                reader.close();
-            }
-            catch (IOException ex) {
-                Log.e("DiaguardError", ex.getMessage());
-            }
-
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(Void result) {}
-
-        @Override
-        protected void onPreExecute() {}
-
-        @Override
-        protected void onProgressUpdate(Void... values) {}
+        FileHelper fileHelper = new FileHelper(getContext());
+        fileHelper.exportCSV();
     }
 }
\ No newline at end of file
