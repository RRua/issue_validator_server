diff --git a/src/com/fr3ts0n/stagefever/NavigationDrawerFragment.java b/src/com/fr3ts0n/stagefever/NavigationDrawerFragment.java
index f59dd7a..5fe3d78 100644
--- a/src/com/fr3ts0n/stagefever/NavigationDrawerFragment.java
+++ b/src/com/fr3ts0n/stagefever/NavigationDrawerFragment.java
@@ -11,8 +11,6 @@ import android.support.v4.app.ActionBarDrawerToggle;
 import android.support.v4.view.GravityCompat;
 import android.support.v4.widget.DrawerLayout;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
@@ -145,9 +143,12 @@ public class NavigationDrawerFragment extends Fragment
 				.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
 		// set up the drawer's list view with items and click listener
 
-		ActionBar actionBar = getActionBar();
-		actionBar.setDisplayHomeAsUpEnabled(true);
-		actionBar.setHomeButtonEnabled(true);
+		ActionBar actionBar = getActivity().getActionBar();
+		if (actionBar != null)
+		{
+			actionBar.setDisplayHomeAsUpEnabled(true);
+			actionBar.setHomeButtonEnabled(true);
+		}
 
 		// ActionBarDrawerToggle ties together the the proper interactions
 		// between the navigation drawer and the action bar app icon.
@@ -257,8 +258,8 @@ public class NavigationDrawerFragment extends Fragment
 	@Override
 	public void onDetach()
 	{
-		super.onDetach();
 		mCallbacks = null;
+		super.onDetach();
 	}
 
 	@Override
@@ -276,47 +277,10 @@ public class NavigationDrawerFragment extends Fragment
 		mDrawerToggle.onConfigurationChanged(newConfig);
 	}
 
-	@Override
-	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater)
-	{
-		// If the drawer is open, show the global app actions in the action bar. See
-		// also
-		// showGlobalContextActionBar, which controls the top-left area of the
-		// action bar.
-		if (mDrawerLayout != null && isDrawerOpen())
-		{
-			inflater.inflate(R.menu.global, menu);
-			showGlobalContextActionBar();
-		}
-		super.onCreateOptionsMenu(menu, inflater);
-	}
-
 	@Override
 	public boolean onOptionsItemSelected(MenuItem item)
 	{
-		if (mDrawerToggle.onOptionsItemSelected(item))
-		{
-			return true;
-		}
-
-		return super.onOptionsItemSelected(item);
-	}
-
-	/**
-	 * Per the navigation drawer design guidelines, updates the action bar to show
-	 * the global app 'context', rather than just what's in the current screen.
-	 */
-	private void showGlobalContextActionBar()
-	{
-		ActionBar actionBar = getActionBar();
-		actionBar.setDisplayShowTitleEnabled(true);
-		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
-		actionBar.setTitle(R.string.app_name);
-	}
-
-	private ActionBar getActionBar()
-	{
-		return getActivity().getActionBar();
+		return mDrawerToggle.onOptionsItemSelected(item) || super.onOptionsItemSelected(item);
 	}
 
 	/**
diff --git a/src/com/fr3ts0n/stagefever/util/SystemUiHider.java b/src/com/fr3ts0n/stagefever/util/SystemUiHider.java
deleted file mode 100644
index 3cc81d8..0000000
--- a/src/com/fr3ts0n/stagefever/util/SystemUiHider.java
+++ /dev/null
@@ -1,191 +0,0 @@
-package com.fr3ts0n.stagefever.util;
-
-import android.app.Activity;
-import android.os.Build;
-import android.view.View;
-
-/**
- * A utility class that helps with showing and hiding system UI such as the
- * status bar and navigation/system bar. This class uses backward-compatibility
- * techniques described in <a href=
- * "http://developer.android.com/training/backward-compatible-ui/index.html">
- * Creating Backward-Compatible UIs</a> to ensure that devices running any
- * version of ndroid OS are supported. More specifically, there are separate
- * implementations of this abstract class: for newer devices,
- * {@link #getInstance} will return a {@link SystemUiHiderHoneycomb} instance,
- * while on older devices {@link #getInstance} will return a
- * {@link SystemUiHiderBase} instance.
- * <p>
- * For more on system bars, see <a href=
- * "http://developer.android.com/design/get-started/ui-overview.html#system-bars"
- * > System Bars</a>.
- * 
- * @see android.view.View#setSystemUiVisibility(int)
- * @see android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN
- */
-public abstract class SystemUiHider
-{
-	/**
-	 * When this flag is set, the
-	 * {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN} flag
-	 * will be set on older devices, making the status bar "float" on top of the
-	 * activity layout. This is most useful when there are no controls at the top
-	 * of the activity layout.
-	 * <p>
-	 * This flag isn't used on newer devices because the <a
-	 * href="http://developer.android.com/design/patterns/actionbar.html">action
-	 * bar</a>, the most important structural element of an Android app, should be
-	 * visible and not obscured by the system UI.
-	 */
-	public static final int								FLAG_LAYOUT_IN_SCREEN_OLDER_DEVICES	= 0x1;
-	
-	/**
-	 * When this flag is set, {@link #show()} and {@link #hide()} will toggle the
-	 * visibility of the status bar. If there is a navigation bar, show and hide
-	 * will toggle low profile mode.
-	 */
-	public static final int								FLAG_FULLSCREEN											= 0x2;
-	
-	/**
-	 * When this flag is set, {@link #show()} and {@link #hide()} will toggle the
-	 * visibility of the navigation bar, if it's present on the device and the
-	 * device allows hiding it. In cases where the navigation bar is present but
-	 * cannot be hidden, show and hide will toggle low profile mode.
-	 */
-	public static final int								FLAG_HIDE_NAVIGATION								= FLAG_FULLSCREEN | 0x4;
-	
-	/**
-	 * The activity associated with this UI hider object.
-	 */
-	protected Activity										mActivity;
-	
-	/**
-	 * The view on which {@link View#setSystemUiVisibility(int)} will be called.
-	 */
-	protected View												mAnchorView;
-	
-	/**
-	 * The current UI hider flags.
-	 * 
-	 * @see #FLAG_FULLSCREEN
-	 * @see #FLAG_HIDE_NAVIGATION
-	 * @see #FLAG_LAYOUT_IN_SCREEN_OLDER_DEVICES
-	 */
-	protected int													mFlags;
-	
-	/**
-	 * The current visibility callback.
-	 */
-	protected OnVisibilityChangeListener	mOnVisibilityChangeListener					= sDummyListener;
-	
-	/**
-	 * Creates and returns an instance of {@link SystemUiHider} that is
-	 * appropriate for this device. The object will be either a
-	 * {@link SystemUiHiderBase} or {@link SystemUiHiderHoneycomb} depending on
-	 * the device.
-	 * 
-	 * @param activity
-	 *          The activity whose window's system UI should be controlled by this
-	 *          class.
-	 * @param anchorView
-	 *          The view on which {@link View#setSystemUiVisibility(int)} will be
-	 *          called.
-	 * @param flags
-	 *          Either 0 or any combination of {@link #FLAG_FULLSCREEN},
-	 *          {@link #FLAG_HIDE_NAVIGATION}, and
-	 *          {@link #FLAG_LAYOUT_IN_SCREEN_OLDER_DEVICES}.
-	 */
-	public static SystemUiHider getInstance(Activity activity, View anchorView,
-			int flags)
-	{
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)
-		{
-			return new SystemUiHiderHoneycomb(activity, anchorView, flags);
-		} else
-		{
-			return new SystemUiHiderBase(activity, anchorView, flags);
-		}
-	}
-	
-	protected SystemUiHider(Activity activity, View anchorView, int flags)
-	{
-		mActivity = activity;
-		mAnchorView = anchorView;
-		mFlags = flags;
-	}
-	
-	/**
-	 * Sets up the system UI hider. Should be called from
-	 * {@link Activity#onCreate}.
-	 */
-	public abstract void setup();
-	
-	/**
-	 * Returns whether or not the system UI is visible.
-	 */
-	public abstract boolean isVisible();
-	
-	/**
-	 * Hide the system UI.
-	 */
-	public abstract void hide();
-	
-	/**
-	 * Show the system UI.
-	 */
-	public abstract void show();
-	
-	/**
-	 * Toggle the visibility of the system UI.
-	 */
-	public void toggle()
-	{
-		if (isVisible())
-		{
-			hide();
-		} else
-		{
-			show();
-		}
-	}
-	
-	/**
-	 * Registers a callback, to be triggered when the system UI visibility
-	 * changes.
-	 */
-	public void setOnVisibilityChangeListener(OnVisibilityChangeListener listener)
-	{
-		if (listener == null)
-		{
-			listener = sDummyListener;
-		}
-		
-		mOnVisibilityChangeListener = listener;
-	}
-	
-	/**
-	 * A dummy no-op callback for use when there is no other listener set.
-	 */
-	private static OnVisibilityChangeListener	sDummyListener	= new OnVisibilityChangeListener()
-																														{
-																															@Override
-																															public void onVisibilityChange(
-																																	boolean visible)
-																															{
-																															}
-																														};
-	
-	/**
-	 * A callback interface used to listen for system UI visibility changes.
-	 */
-	public interface OnVisibilityChangeListener
-	{
-		/**
-		 * Called when the system UI visibility has changed.
-		 * 
-		 * @param visible
-		 *          True if the system UI is visible.
-		 */
-		void onVisibilityChange(boolean visible);
-	}
-}
diff --git a/src/com/fr3ts0n/stagefever/util/SystemUiHiderBase.java b/src/com/fr3ts0n/stagefever/util/SystemUiHiderBase.java
deleted file mode 100644
index 80fe8fc..0000000
--- a/src/com/fr3ts0n/stagefever/util/SystemUiHiderBase.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.fr3ts0n.stagefever.util;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.WindowManager;
-
-/**
- * A base implementation of {@link SystemUiHider}. Uses APIs available in all
- * API levels to show and hide the status bar.
- */
-public class SystemUiHiderBase extends SystemUiHider
-{
-	/**
-	 * Whether or not the system UI is currently visible. This is a cached value
-	 * from calls to {@link #hide()} and {@link #show()}.
-	 */
-	private boolean	mVisible	= true;
-	
-	/**
-	 * Constructor not intended to be called by clients. Use
-	 * {@link SystemUiHider#getInstance} to obtain an instance.
-	 */
-	protected SystemUiHiderBase(Activity activity, View anchorView, int flags)
-	{
-		super(activity, anchorView, flags);
-	}
-	
-	@Override
-	public void setup()
-	{
-		if ((mFlags & FLAG_LAYOUT_IN_SCREEN_OLDER_DEVICES) == 0)
-		{
-			mActivity.getWindow().setFlags(
-					WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
-							| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
-					WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
-							| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
-		}
-	}
-	
-	@Override
-	public boolean isVisible()
-	{
-		return mVisible;
-	}
-	
-	@Override
-	public void hide()
-	{
-		if ((mFlags & FLAG_FULLSCREEN) != 0)
-		{
-			mActivity.getWindow().setFlags(
-					WindowManager.LayoutParams.FLAG_FULLSCREEN,
-					WindowManager.LayoutParams.FLAG_FULLSCREEN);
-		}
-		mOnVisibilityChangeListener.onVisibilityChange(false);
-		mVisible = false;
-	}
-	
-	@Override
-	public void show()
-	{
-		if ((mFlags & FLAG_FULLSCREEN) != 0)
-		{
-			mActivity.getWindow().setFlags(
-					0,
-					WindowManager.LayoutParams.FLAG_FULLSCREEN);
-		}
-		mOnVisibilityChangeListener.onVisibilityChange(true);
-		mVisible = true;
-	}
-}
diff --git a/src/com/fr3ts0n/stagefever/util/SystemUiHiderHoneycomb.java b/src/com/fr3ts0n/stagefever/util/SystemUiHiderHoneycomb.java
deleted file mode 100644
index 7a110f7..0000000
--- a/src/com/fr3ts0n/stagefever/util/SystemUiHiderHoneycomb.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.fr3ts0n.stagefever.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.os.Build;
-import android.view.View;
-import android.view.WindowManager;
-
-/**
- * An API 11+ implementation of {@link SystemUiHider}. Uses APIs available in
- * Honeycomb and later (specifically {@link View#setSystemUiVisibility(int)}) to
- * show and hide the system UI.
- */
-@TargetApi(Build.VERSION_CODES.HONEYCOMB)
-public class SystemUiHiderHoneycomb extends SystemUiHiderBase
-{
-	/**
-	 * Flags for {@link View#setSystemUiVisibility(int)} to use when showing the
-	 * system UI.
-	 */
-	private int			mShowFlags;
-	
-	/**
-	 * Flags for {@link View#setSystemUiVisibility(int)} to use when hiding the
-	 * system UI.
-	 */
-	private int			mHideFlags;
-	
-	/**
-	 * Flags to test against the first parameter in
-	 * {@link android.view.View.OnSystemUiVisibilityChangeListener#onSystemUiVisibilityChange(int)}
-	 * to determine the system UI visibility state.
-	 */
-	private int			mTestFlags;
-	
-	/**
-	 * Whether or not the system UI is currently visible. This is cached from
-	 * {@link android.view.View.OnSystemUiVisibilityChangeListener}.
-	 */
-	private boolean	mVisible	= true;
-	
-	/**
-	 * Constructor not intended to be called by clients. Use
-	 * {@link SystemUiHider#getInstance} to obtain an instance.
-	 */
-	protected SystemUiHiderHoneycomb(Activity activity, View anchorView, int flags)
-	{
-		super(activity, anchorView, flags);
-		
-		mShowFlags = View.SYSTEM_UI_FLAG_VISIBLE;
-		mHideFlags = View.SYSTEM_UI_FLAG_LOW_PROFILE;
-		mTestFlags = View.SYSTEM_UI_FLAG_LOW_PROFILE;
-		
-		if ((mFlags & FLAG_FULLSCREEN) != 0)
-		{
-			// If the client requested fullscreen, add flags relevant to hiding
-			// the status bar. Note that some of these constants are new as of
-			// API 16 (Jelly Bean). It is safe to use them, as they are inlined
-			// at compile-time and do nothing on pre-Jelly Bean devices.
-			mShowFlags |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
-			mHideFlags |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
-					| View.SYSTEM_UI_FLAG_FULLSCREEN;
-		}
-		
-		if ((mFlags & FLAG_HIDE_NAVIGATION) != 0)
-		{
-			// If the client requested hiding navigation, add relevant flags.
-			mShowFlags |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
-			mHideFlags |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
-					| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
-			mTestFlags |= View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
-		}
-	}
-	
-	/** {@inheritDoc} */
-	@Override
-	public void setup()
-	{
-		mAnchorView
-				.setOnSystemUiVisibilityChangeListener(mSystemUiVisibilityChangeListener);
-	}
-	
-	/** {@inheritDoc} */
-	@Override
-	public void hide()
-	{
-		mAnchorView.setSystemUiVisibility(mHideFlags);
-	}
-	
-	/** {@inheritDoc} */
-	@Override
-	public void show()
-	{
-		mAnchorView.setSystemUiVisibility(mShowFlags);
-	}
-	
-	/** {@inheritDoc} */
-	@Override
-	public boolean isVisible()
-	{
-		return mVisible;
-	}
-	
-	private View.OnSystemUiVisibilityChangeListener	mSystemUiVisibilityChangeListener	= new View.OnSystemUiVisibilityChangeListener()
-																																										{
-																																											@Override
-																																											public void onSystemUiVisibilityChange(
-																																													int vis)
-																																											{
-																																												// Test
-																																												// against
-																																												// mTestFlags
-																																												// to
-																																												// see
-																																												// if
-																																												// the
-																																												// system
-																																												// UI
-																																												// is
-																																												// visible.
-																																												if ((vis & mTestFlags) != 0)
-																																												{
-																																													if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)
-																																													{
-																																														// Pre-Jelly
-																																														// Bean,
-																																														// we
-																																														// must
-																																														// manually
-																																														// hide
-																																														// the
-																																														// action
-																																														// bar
-																																														// and
-																																														// use
-																																														// the
-																																														// old
-																																														// window
-																																														// flags
-																																														// API.
-																																														mActivity
-																																																.getActionBar()
-																																																.hide();
-																																														mActivity
-																																																.getWindow()
-																																																.setFlags(
-																																																		WindowManager.LayoutParams.FLAG_FULLSCREEN,
-																																																		WindowManager.LayoutParams.FLAG_FULLSCREEN);
-																																													}
-																																													
-																																													// Trigger
-																																													// the
-																																													// registered
-																																													// listener
-																																													// and
-																																													// cache
-																																													// the
-																																													// visibility
-																																													// state.
-																																													mOnVisibilityChangeListener
-																																															.onVisibilityChange(false);
-																																													mVisible = false;
-																																													
-																																												} else
-																																												{
-																																													mAnchorView
-																																															.setSystemUiVisibility(mShowFlags);
-																																													if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)
-																																													{
-																																														// Pre-Jelly
-																																														// Bean,
-																																														// we
-																																														// must
-																																														// manually
-																																														// show
-																																														// the
-																																														// action
-																																														// bar
-																																														// and
-																																														// use
-																																														// the
-																																														// old
-																																														// window
-																																														// flags
-																																														// API.
-																																														mActivity
-																																																.getActionBar()
-																																																.show();
-																																														mActivity
-																																																.getWindow()
-																																																.setFlags(
-																																																		0,
-																																																		WindowManager.LayoutParams.FLAG_FULLSCREEN);
-																																													}
-																																													
-																																													// Trigger
-																																													// the
-																																													// registered
-																																													// listener
-																																													// and
-																																													// cache
-																																													// the
-																																													// visibility
-																																													// state.
-																																													mOnVisibilityChangeListener
-																																															.onVisibilityChange(true);
-																																													mVisible = true;
-																																												}
-																																											}
-																																										};
-}
