diff --git a/app/src/main/java/com/DartChecker/MainActivity.java b/app/src/main/java/com/DartChecker/MainActivity.java
index c0f89aa..fb3a9e1 100644
--- a/app/src/main/java/com/DartChecker/MainActivity.java
+++ b/app/src/main/java/com/DartChecker/MainActivity.java
@@ -52,7 +52,8 @@ public class MainActivity extends AppCompatActivity {
     public static ArrayList<spieler> allespieler;
     public String startsprache;
     public static boolean themeauswahl = true,
-            setlegmodus = true;
+            firstTo = true,
+            subdesignchoice = true;
     private ArrayAdapter<spieler> arrayAdapter;
     private static int maxspieleranzahl = 8;
 
@@ -148,8 +149,11 @@ public class MainActivity extends AppCompatActivity {
             editor.apply();
         }
         if (settings.contains("Theme")) themeauswahl = settings.getBoolean("Theme", true);
-        if (themeauswahl) setTheme(R.style.AppTheme);
+        if (settings.contains("Style")) subdesignchoice = settings.getBoolean("Style", true);
+        if (themeauswahl && subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
+
         setContentView(R.layout.activity_main);
         ConstraintLayout main = findViewById(R.id.ebene1);
         if (settings.contains("keepscreenonmenu")) main.setKeepScreenOn(settings.getBoolean("keepscreenonmenu",true));
@@ -165,8 +169,8 @@ public class MainActivity extends AppCompatActivity {
         final CharSequence[] roundtclockmode = spielmoderoundtclock.toArray(new CharSequence[spielmoderoundtclock.size()]);
 
         if (settings.contains("setlegmodus"))
-            setlegmodus = settings.getBoolean("setlegmodus", true);
-        if (setlegmodus) {
+            firstTo = settings.getBoolean("setlegmodus", true);
+        if (firstTo) {
             maxlegs = 3;
             maxsets = 7;
         }
@@ -287,7 +291,7 @@ public class MainActivity extends AppCompatActivity {
                     aktuell = 1;
                 else {
                     aktuell++;
-                    if (!setlegmodus && aktuell % 2 == 0) aktuell++;
+                    if (!firstTo && aktuell % 2 == 0) aktuell++;
                     if (aktuell > maxsets) aktuell = 1;
                 }
                 sets.setText(String.valueOf(aktuell));
@@ -304,7 +308,7 @@ public class MainActivity extends AppCompatActivity {
                     aktuell = 1;
                 else {
                     aktuell++;
-                    if (!setlegmodus && aktuell % 2 == 0) aktuell++;
+                    if (!firstTo && aktuell % 2 == 0) aktuell++;
                     if (aktuell > maxlegs) aktuell = 1;
                 }
                 legs.setText(String.valueOf(aktuell));
@@ -1046,7 +1050,8 @@ public class MainActivity extends AppCompatActivity {
         //falls in den einstellungen das theme geÃ¤ndert wurde, neustart der activity
 
         if (settings.contains("Theme")) {
-            if (!(settings.getBoolean("Theme", true) == themeauswahl)) {
+            if (!(settings.getBoolean("Theme", true) == themeauswahl)
+                || !(settings.getBoolean("Style",true) == subdesignchoice) ) {
                 Intent intent = getIntent();
                 finish();
                 startActivity(intent);
@@ -1056,11 +1061,11 @@ public class MainActivity extends AppCompatActivity {
             if (!settings.getBoolean("setlegmodus", true)) {
                 maxlegs = 5;
                 maxsets = 13;
-                setlegmodus = false;
+                firstTo = false;
             } else {
                 maxlegs = 3;
                 maxsets = 7;
-                setlegmodus = true;
+                firstTo = true;
                 Button legsb = findViewById(R.id.legs);
                 Button setsb = findViewById(R.id.sets);
                 if (Integer.parseInt(setsb.getText().toString()) > maxsets)
diff --git a/app/src/main/java/com/DartChecker/cricket.java b/app/src/main/java/com/DartChecker/cricket.java
index 6f060de..f5590f5 100644
--- a/app/src/main/java/com/DartChecker/cricket.java
+++ b/app/src/main/java/com/DartChecker/cricket.java
@@ -11,6 +11,7 @@ import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Color;
 import android.graphics.Paint;
+import android.media.AudioManager;
 import android.os.Build;
 import android.os.Handler;
 
@@ -537,6 +538,8 @@ public class cricket extends AppCompatActivity {
                     }
 
                     Toast.makeText(cricket.this, dart + " " + getResources().getString(R.string.closed), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(cricket.this, Integer.toString(dart));
+                    dc_modules.playAudio(cricket.this, "closed");
                 }
 
 
@@ -564,7 +567,13 @@ public class cricket extends AppCompatActivity {
                         textfeld(dart, aktiverSpieler, 1).setText("X");
                         break;
                     case 3:
+                        if (!textfeld(dart, aktiverSpieler, 1).getText().equals("O")) {
                         textfeld(dart, aktiverSpieler, 1).setText("O");
+                        if (!closed(dart)) {
+                            dc_modules.playAudio(cricket.this, Integer.toString(dart));
+                            dc_modules.playAudio(cricket.this, "open");
+                        }
+                    };
                         break;
                 }
 
@@ -1047,7 +1056,11 @@ public class cricket extends AppCompatActivity {
                                             final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
                                             if (spieler[aktiverSpieler].gewinnerplatz != 0)
                                                 aufnahmetv.setText(spieler[aktiverSpieler].gewinnerplatz + ".");
-                                            else aufnahmetv.setText(Integer.toString(aufnahme));
+                                            else {
+                                                String score = Integer.toString(aufnahme);
+                                                aufnahmetv.setText(score);
+                                                dc_modules.playAudio(cricket.this, score);
+                                            }
                                             aufnahmetv.setVisibility(View.VISIBLE);
                                             new Handler().postDelayed(new Runnable() {
                                                 @Override
@@ -1144,7 +1157,11 @@ public class cricket extends AppCompatActivity {
                         final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
                         if (spieler[aktiverSpieler].gewinnerplatz != 0)
                             aufnahmetv.setText(spieler[aktiverSpieler].gewinnerplatz + ".");
-                        else aufnahmetv.setText(Integer.toString(aufnahme));
+                        else {
+                            String score = Integer.toString(aufnahme);
+                            aufnahmetv.setText(score);
+                            dc_modules.playAudio(getApplicationContext(), score);
+                        }
                         aufnahmetv.setVisibility(View.VISIBLE);
                         new Handler().postDelayed(new Runnable() {
                             @Override
@@ -1191,8 +1208,10 @@ public class cricket extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
+
         setContentView(R.layout.activity_cricket);
         TypedValue outValue = new TypedValue();
         cricket.this.getTheme().resolveAttribute(R.attr.colorButtonNormal, outValue, true);
diff --git a/app/src/main/java/com/DartChecker/dartchecker_imports.java b/app/src/main/java/com/DartChecker/dartchecker_imports.java
deleted file mode 100644
index e3b7412..0000000
--- a/app/src/main/java/com/DartChecker/dartchecker_imports.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package com.DartChecker;
-
-public class dartchecker_imports {
-}
diff --git a/app/src/main/java/com/DartChecker/dc_modules.java b/app/src/main/java/com/DartChecker/dc_modules.java
new file mode 100644
index 0000000..89e98d4
--- /dev/null
+++ b/app/src/main/java/com/DartChecker/dc_modules.java
@@ -0,0 +1,383 @@
+package com.DartChecker;
+
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.media.AudioAttributes;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Handler;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class dc_modules {
+    static MediaPlayer mediaplayer = new MediaPlayer() {
+    @Override
+        public void setOnCompletionListener(OnCompletionListener listener) {
+            super.setOnCompletionListener(listener);
+            this.release();
+        }
+    };
+
+    static void playAudio(Context ctx, String TextToPlay) {
+        SharedPreferences sp = ctx.getSharedPreferences("Einstellungen",0);
+        boolean play=true;
+        if (sp.contains("playaudio")) {
+            play = sp.getBoolean("playaudio", true);
+        }
+        if (!play) return;
+
+        int resourceId=0;
+        // select soundfile resource
+        if (TextToPlay.length() <= 3) { //score is that short only
+            resourceId = ctx.getResources().getIdentifier("s" + TextToPlay, "raw", ctx.getPackageName());
+        }
+        else {
+            switch (TextToPlay.toLowerCase()){
+                case "busted":
+                    resourceId = ctx.getResources().getIdentifier("busted", "raw", ctx.getPackageName());
+                    break;
+                case "madhouse":
+                    resourceId = ctx.getResources().getIdentifier("welcometomadhouse", "raw", ctx.getPackageName());
+                    break;
+                case "split":
+                    resourceId = ctx.getResources().getIdentifier("split", "raw", ctx.getPackageName());
+                    break;
+                case "eliminated":
+                    resourceId = ctx.getResources().getIdentifier("eliminated", "raw", ctx.getPackageName());
+                    break;
+                case "closed":
+                    resourceId = ctx.getResources().getIdentifier("closed", "raw", ctx.getPackageName());
+                    break;
+                case "open":
+                    resourceId = ctx.getResources().getIdentifier("open", "raw", ctx.getPackageName());
+                    break;
+            }
+        }
+
+        if (resourceId != 0) {
+            Uri uri = Uri.parse("android.resource://"+ ctx.getPackageName()+"/"+resourceId);
+            new Handler().post(new Runnable() {
+                @Override
+                public void run() {
+                    // wait until other sound output has finished
+                    while (dc_modules.mediaplayer.isPlaying()) {
+                    }
+                    mediaplayer.reset();
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                        mediaplayer.setAudioAttributes(
+                                new AudioAttributes.Builder()
+                                        .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)
+                                        .setUsage(AudioAttributes.USAGE_MEDIA)
+                                        .build()
+                        );
+                    }
+                    try {
+                        mediaplayer.setDataSource(ctx, uri);
+                        mediaplayer.prepare();
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
+                    }
+                    mediaplayer.start();
+                    }
+                });
+
+        }
+    }
+
+
+    // VorschlÃ¤ge fÃ¼r Checkoutwege berechnen und sortieren
+    static ArrayList<String> vorschlaege(int rest, int lieblingsfinish, int DoubleoutOderTripleout) {
+        ArrayList<String> ergebnisliste = new ArrayList<String>();
+        if (rest < 0 || rest > 180) {
+            return ergebnisliste;
+        }
+        // restliche_Punkte = x1*y1 + x2*y2 + x3*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
+        // DoubleoutOderTripleout heiÃt double out = 2 oder master out = 3
+        // lieblingsfinish==0 fuer alle varianten
+        // rest = x1*y1 + x2*y2 + DoubleoutOderTripleout*y3
+
+        class treffer {
+            int rest;
+            int x1;
+            int y1;
+            int x2;
+            int y2;
+            int x3;
+            int y3;
+        }
+
+        int x1, x2, y1, y2, y3, z, i2, i;
+        treffer[] tl = new treffer[3000];
+        treffer[] ergebnisse = new treffer[6000];
+        treffer[] wanted = new treffer[3000];
+        treffer[] unwanted = new treffer[3000];
+        boolean zweidartfinishvorhanden, change;
+        treffer speicher;
+        z = 0;
+
+        // CheckoutmÃ¶glichkeiten ermitteln
+        for (x1 = 3; x1 >= 0; x1--) {
+            for (y1 = 25; y1 >= 1; y1--) {
+                if (!(((y1 > 20) && (y1 < 25)) || ((y1 == 25) && (x1 == 3)))) {
+                    // 3mal25 gibts nicht und zahlen zw 20 und 25 auch nicht
+                    for (x2 = 3; x2 >= 0; x2--) {
+                        for (y2 = 25; y2 >= 1; y2--) {
+                            if (!(((y2 > 20) && (y2 < 25)) || ((y2 == 25) && (x2 == 3)))) {
+                                //3mal25 gibts nicht und....
+                                if ((rest - (x1 * y1) - (x2 * y2)) <= 60) {
+                                    //doppel checkout theoretisch moeglich?
+                                    for (y3 = 25; y3 >= 1; y3--) {
+                                        if (!((y3 > 20) && (y3 < 25))) {
+                                            // zahlen zw 20 und 25 gibts nicht
+                                            int aktuellerRest = (x1 * y1) + (x2 * y2) + (DoubleoutOderTripleout * y3);
+                                            if (((rest == aktuellerRest) && (y3 != 0))) {
+                                                z++;
+                                                // treffer in array speichern
+                                                tl[z] = new treffer();
+                                                tl[z].rest = aktuellerRest;
+                                                if (x1 * y1 <= 20) {
+                                                    tl[z].x1 = 1;
+                                                    tl[z].y1 = x1 * y1;
+                                                } else {
+                                                    tl[z].x1 = x1;
+                                                    tl[z].y1 = y1;
+                                                }
+                                                if ((x2 * y2) <= 20) {
+                                                    tl[z].x2 = 1;
+                                                    tl[z].y2 = x2 * y2;
+                                                } else {
+                                                    tl[z].x2 = x2;
+                                                    tl[z].y2 = y2;
+                                                }
+                                                tl[z].x3 = DoubleoutOderTripleout;
+                                                tl[z].y3 = y3;
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        // Ã¤quivalente lÃ¶sungen lÃ¶schen:
+        // array: doppel treffer loeschen, wenn
+        //                                 blosse vertauschung der ersten beiden pfeile
+        //                                 blosse vertauschung der letzten beiden pfeile
+        //                                 1. oder 2. pfeil==0 und der punktepfeil gleich dem anderen bei 0    )
+        //
+        // DoubleoutOderTripleout = 2 oder 3
+        // (rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil) )
+
+        for (i = 1; i <= z; i++) {
+            if (tl[i].rest != 0) { // rest=0 sind gelÃ¶schte Treffer
+                for (i2 = i + 1; i2 <= z; i2++) {
+                    if (tl[i2].rest != 0) { // rest=0 sind gelÃ¶schte Treffer
+                        if ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2) && (tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1))
+                            tl[i2].rest = 0;
+                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x2) && (tl[i].y2 == tl[i2].y2))
+                            tl[i2].rest = 0;
+                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x1) && (tl[i].y1 == tl[i2].y1))
+                            tl[i2].rest = 0;
+                        // wenn 2 Pfeile reichen, Ã¼berprÃ¼fen ob sich nur die Reihenfolge der letzten beiden Darts unterscheidet
+                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x3) && (tl[i].y2 == tl[i2].y3))
+                            tl[i2].rest = 0;
+                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x3) && (tl[i].y1 == tl[i2].y3))
+                            tl[i2].rest = 0;
+                        if (((tl[i].x1 == 0) && (tl[i2].x2 == 0)) && ((tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1)))
+                            tl[i2].rest = 0;
+                        if (((tl[i].x2 == 0) && (tl[i2].x1 == 0)) && ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2)))
+                            tl[i2].rest = 0;
+                        // loeschen, wenn 1. und 2. pfeil=0 und gleiches doppel
+                        if ((tl[i].y3 == tl[i2].y3) && (tl[i].x1 == 0) && (tl[i2].x1 == 0) && (tl[i].x2 == 0) && (tl[i2].x2 == 0))
+                            tl[i2].rest = 0;
+                        // lÃ¶schen, wenn alle pfeile identisch sind
+                        if ((tl[i].x1 == tl[i2].x1) && (tl[i].y1 == tl[i2].y1) && (tl[i].x2 == tl[i2].x2) && (tl[i].y2 == tl[i2].y2))
+                            tl[i2].rest = 0;
+                    }
+                }
+            }
+        }
+
+        // ergebnisse dursuchen nach zweidartfinish
+        zweidartfinishvorhanden = false;
+        for (i = 1; i <= z; i++) {
+            if ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) {
+                zweidartfinishvorhanden = true;
+                break;
+            }
+        }
+
+        // relevante ergebnisse in neues, zu sortierendes array kopieren
+        i2 = 0;
+        for (i = 1; i <= z; i++) {
+            if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish != 0 && (tl[i].rest < (lieblingsfinish * DoubleoutOderTripleout))))) {
+                if ((!zweidartfinishvorhanden)
+                        || (zweidartfinishvorhanden && (lieblingsfinish == 0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0))))
+                        || (lieblingsfinish != 0 && (tl[i].rest >= (lieblingsfinish * DoubleoutOderTripleout)))
+                        || (lieblingsfinish != 0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) && (tl[i].rest < (lieblingsfinish * DoubleoutOderTripleout)))) {
+                    i2++;
+                    wanted[i2] = tl[i];
+                }
+            }
+        }
+        int zsafe = z;
+        z = i2;
+        // sort wanted list
+        change = true;
+        while (change) {
+            change = false;
+            for (i = 1; i <= z - 1; i++) {
+                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
+                if ((wanted[i].x1 != 1) && (wanted[i].x2 != 1)) {
+                    if ((wanted[i + 1].x1 == 1) || (wanted[i + 1].x2 == 1)) {
+                        change = true;
+                        speicher = wanted[i];
+                        wanted[i] = wanted[i + 1];
+                        wanted[i + 1] = speicher;
+                    }
+                }
+            }
+        }
+
+        // 2x nach oben
+        change = true;
+        while (change) {
+            change = false;
+            for (i = 1; i <= z - 1; i++) {
+                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
+                if ((wanted[i].x1 == 3) && (wanted[i].x2 == 3)) {
+                    if (((wanted[i + 1].x1 == 2) && (wanted[i + 1].x2 == 3))
+                            || ((wanted[i + 1].x1 == 3) && (wanted[i + 1].x2 == 2))) {
+                        change = true;
+                        speicher = wanted[i];
+                        wanted[i] = wanted[i + 1];
+                        wanted[i + 1] = speicher;
+                    }
+                }
+            }
+        }
+
+        // if favorite checkout selected, search and add other checkouts to list
+        int uw = 0;
+        if (lieblingsfinish != 0) {
+            int lfsafe = lieblingsfinish;
+            lieblingsfinish = 0;
+            for (i = 1; i <= zsafe; i++) {
+                if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish != 0 && (tl[i].rest < (lieblingsfinish * DoubleoutOderTripleout))))) {
+                    if ((!zweidartfinishvorhanden)
+                            || (zweidartfinishvorhanden && (lieblingsfinish == 0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0))))
+                            || (lieblingsfinish != 0 && (tl[i].rest >= (lieblingsfinish * DoubleoutOderTripleout)))
+                            || (lieblingsfinish != 0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) && (tl[i].rest < (lieblingsfinish * DoubleoutOderTripleout)))) {
+                        uw++;
+                        unwanted[uw] = tl[i];
+                    }
+                }
+            }
+            zsafe = uw;
+
+            // sort unwanted list
+            change = true;
+            while (change) {
+                change = false;
+                for (i = 1; i <= zsafe - 1; i++) {
+                    // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
+                    if ((unwanted[i].x1 != 1) && (unwanted[i].x2 != 1)) {
+                        if ((unwanted[i + 1].x1 == 1) || (unwanted[i + 1].x2 == 1)) {
+                            change = true;
+                            speicher = unwanted[i];
+                            unwanted[i] = unwanted[i + 1];
+                            unwanted[i + 1] = speicher;
+                        }
+                    }
+                }
+            }
+
+            // 2x nach oben
+            change = true;
+            while (change) {
+                change = false;
+                for (i = 1; i <= zsafe - 1; i++) {
+                    // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
+                    if ((unwanted[i].x1 == 3) && (unwanted[i].x2 == 3)) {
+                        if (((unwanted[i + 1].x1 == 2) && (unwanted[i + 1].x2 == 3))
+                                || ((unwanted[i + 1].x1 == 3) && (unwanted[i + 1].x2 == 2))) {
+                            change = true;
+                            speicher = unwanted[i];
+                            unwanted[i] = unwanted[i + 1];
+                            unwanted[i + 1] = speicher;
+                        }
+                    }
+                }
+            }
+
+            lieblingsfinish = lfsafe;
+        }
+        ArrayList<treffer> endergebniss = new ArrayList<treffer>();
+        for (i = 1; i <= z; i++) {
+            endergebniss.add(wanted[i]);
+        }
+        // add unwanted list, if lieblingsfinsh is selected
+        if (lieblingsfinish != 0) {
+            for (i = 1; i <= uw; i++) {
+                if (!endergebniss.contains(unwanted[i])) {
+                    endergebniss.add(unwanted[i]);
+                }
+            }
+        }
+
+        // ausgabe der gewaehlten restlichen treffer in hÃ¼bscher Formatierung
+        // rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
+        String dt, str;
+        dt = "";
+        if (DoubleoutOderTripleout == 2) dt = "D";
+        if (DoubleoutOderTripleout == 3) dt = "T";
+        i2 = 0;
+
+        ergebnisliste.add("...");
+        for (treffer ergebnis : endergebniss) {
+            i2++;
+            str = "";
+            if ((ergebnis.x1 * ergebnis.y1) > 0)
+                switch (ergebnis.x1) {
+                    case 1:
+                        str = str + ergebnis.y1;
+                        break;
+                    case 2:
+                        str = str + "D" + ergebnis.y1;
+                        break;
+                    case 3:
+                        str = str + "T" + ergebnis.y1;
+                        break;
+                }
+            if ((ergebnis.x2 * ergebnis.y2) > 0)
+                switch (ergebnis.x2) {
+                    case 1:
+                        str = str + " " + ergebnis.y2;
+                        break;
+                    case 2:
+                        str = str + " " + "D" + ergebnis.y2;
+                        break;
+                    case 3:
+                        str = str + " " + "T" + ergebnis.y2;
+                        break;
+                }
+            if (str.equals(""))
+                str = dt + ergebnis.y3;
+            else str = str + " " + dt + ergebnis.y3;
+
+            ergebnisliste.add(str);
+        }
+
+        if (rest == 2) {
+            ergebnisliste.remove(ergebnisliste.remove(ergebnisliste.size() - 1));
+            ergebnisliste.add("MaDhOuSe");
+        }
+        return ergebnisliste;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/DartChecker/einstellungen.java b/app/src/main/java/com/DartChecker/einstellungen.java
index 3d8c091..3f7b473 100644
--- a/app/src/main/java/com/DartChecker/einstellungen.java
+++ b/app/src/main/java/com/DartChecker/einstellungen.java
@@ -20,7 +20,6 @@ import android.widget.ArrayAdapter;
 import android.widget.Button;
 import android.widget.CompoundButton;
 import android.widget.Spinner;
-import android.widget.Switch;
 import android.widget.TextView;
 import android.widget.Toast;
 import java.util.ArrayList;
@@ -72,19 +71,24 @@ public class einstellungen extends AppCompatActivity {
         SharedPreferences.Editor editor = settings.edit();
 
         boolean darktheme = true,
+                stylecolor = true,
                 slmode = true,
                 inputmode = false,
                 suddendeathmode = false,
                 spielgehtweiter = false;
         if (settings.contains("Theme")) darktheme = settings.getBoolean("Theme", true);
-        if (darktheme) setTheme(R.style.AppTheme);
-        else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
+        if (settings.contains("Style")) stylecolor = settings.getBoolean("Style", true);
+        if (darktheme && stylecolor) setTheme(R.style.AppThemeBlack);
+            else if (darktheme) setTheme(R.style.AppThemeDark);
+                else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_einstellungen);
         ConstraintLayout main = findViewById(R.id.mainlayout);
         if (settings.contains("keepscreenonmenu")) main.setKeepScreenOn(settings.getBoolean("keepscreenonmenu",true));
 
+
         final SwitchCompat setmode = findViewById(R.id.slmode);
         final SwitchCompat themes = findViewById(R.id.themeswitch);
+        final SwitchCompat style = findViewById(R.id.themeswitchsubcolor);
         TextView umschaltzeit = findViewById(R.id.millisekunden);
         final TextView dartanzahl = findViewById(R.id.dartanzahl);
         TextView crazystart = findViewById(R.id.crazystartsegment);
@@ -94,6 +98,7 @@ public class einstellungen extends AppCompatActivity {
         final SwitchCompat undosicherheitsabfrage = findViewById(R.id.undosicherheit);
         final SwitchCompat keepsceenongame = findViewById(R.id.keepscreenongame);
         final SwitchCompat keepscreenonmenu = findViewById(R.id.keepscreenonmenu);
+        final SwitchCompat playaudio = findViewById(R.id.playaudio);
         int anzahldarts = 0;
 
         if (settings.contains("crazystart"))
@@ -113,8 +118,18 @@ public class einstellungen extends AppCompatActivity {
         themes.setChecked(darktheme);
         if (darktheme) {
             themes.setText(getResources().getString(R.string.design_dunkel));
+            style.setEnabled(true);
         } else {
             themes.setText(getResources().getString(R.string.design_hell));
+            style.setEnabled(false);
+        }
+
+        style.setChecked(stylecolor);
+        if (stylecolor) {
+            style.setText(getResources().getString(R.string.subdesign_black));
+        }
+        else {
+            style.setText(getResources().getString(R.string.subdesign_grey));
         }
 
         if (settings.contains("inputmethode"))
@@ -171,6 +186,7 @@ public class einstellungen extends AppCompatActivity {
             keepsceenongame.setChecked(settings.getBoolean("keepscreenongame",true));
         if (settings.contains("keepscreenonmenu"))
             keepscreenonmenu.setChecked(settings.getBoolean("keepscreenonmenu", false));
+        if (settings.contains("playaudio")) playaudio.setChecked(settings.getBoolean("playaudio",true));
 
         spin2.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
@@ -253,11 +269,13 @@ public class einstellungen extends AppCompatActivity {
         themes.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
             @Override
             public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                SwitchCompat substyle = findViewById(R.id.themeswitchsubcolor);
                 if (isChecked) {
                     themes.setText(getResources().getString(R.string.design_dunkel));
+                    substyle.setEnabled(true);
                 } else {
                     themes.setText(getResources().getString(R.string.design_hell));
-
+                    substyle.setEnabled(false);
                 }
                 SwitchCompat theme = findViewById(R.id.themeswitch);
                 editor.putBoolean("Theme", theme.isChecked());
@@ -270,6 +288,29 @@ public class einstellungen extends AppCompatActivity {
         });
         findViewById(R.id.appBarLayout).requestFocus();
 
+        style.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
+                if (style.isChecked()) {
+                    style.setText(getResources().getString(R.string.subdesign_black));
+                } else {
+                    style.setText(getResources().getString(R.string.subdesign_grey));
+                }
+                editor.putBoolean("Style", style.isChecked());
+                editor.apply();
+                Intent intent = getIntent();
+                finish();
+                startActivity(intent);
+            }
+        });
+
+        playaudio.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
+                editor.putBoolean("playaudio", playaudio.isChecked());
+                editor.apply();
+            }
+        });
 
         setmode.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
             @Override
@@ -345,7 +386,7 @@ public class einstellungen extends AppCompatActivity {
     }
 
     public void onBackPressed() {
-        //Zahleneingaben-Einstellungen speichern
+        //safe number inputs
         TextView millisekunden = findViewById(R.id.millisekunden);
         TextView dartanzahl = findViewById(R.id.dartanzahl);
         TextView crazystart = findViewById(R.id.crazystartsegment);
diff --git a/app/src/main/java/com/DartChecker/elimination.java b/app/src/main/java/com/DartChecker/elimination.java
index 12b6b11..7ea0eb7 100644
--- a/app/src/main/java/com/DartChecker/elimination.java
+++ b/app/src/main/java/com/DartChecker/elimination.java
@@ -1149,7 +1149,7 @@ public class elimination extends AppCompatActivity {
     private void eliminate(int dummy, String rundenname,int eliminert_at_wurfindex) {
         // eliminates other player, if hit and set listenpunkte
         eliminationscore elimination_undo_save = new eliminationscore();
-            elimination_undo_save.wurfindex = eliminert_at_wurfindex;//wuerfe.size()-1;
+        elimination_undo_save.wurfindex = eliminert_at_wurfindex;//wuerfe.size()-1;
         switch (spieleranzahl) {
             case 1:
                 break;
@@ -1162,6 +1162,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
                     listenPunkte1.setText("0  Ã: 0");
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                 }
                 if ((!rundenname.equals(spieler2.spielerName)) && (dummy==spieler2.score)) {
                     elimination_undo_save.score_eliminated=spieler2.score;
@@ -1171,6 +1172,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
                     listenPunkte1.setText("0  Ã: 0");
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                 }
                 break;
             case 3:
@@ -1181,6 +1183,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1195,6 +1198,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1209,6 +1213,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1225,6 +1230,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1242,6 +1248,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1259,6 +1266,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1276,6 +1284,7 @@ public class elimination extends AppCompatActivity {
                     spieler4.durchschnitt=0;
                     spieler4.score=0;
                     Toast.makeText(getApplicationContext(), spieler4.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler4.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1295,6 +1304,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1315,6 +1325,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1335,6 +1346,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1355,6 +1367,7 @@ public class elimination extends AppCompatActivity {
                     spieler4.durchschnitt=0;
                     spieler4.score=0;
                     Toast.makeText(getApplicationContext(), spieler4.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler4.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1375,6 +1388,7 @@ public class elimination extends AppCompatActivity {
                     spieler5.durchschnitt=0;
                     spieler5.score=0;
                     Toast.makeText(getApplicationContext(), spieler5.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler5.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1397,6 +1411,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1420,6 +1435,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1443,6 +1459,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1466,6 +1483,7 @@ public class elimination extends AppCompatActivity {
                     spieler4.durchschnitt=0;
                     spieler4.score=0;
                     Toast.makeText(getApplicationContext(), spieler4.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler4.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1489,6 +1507,7 @@ public class elimination extends AppCompatActivity {
                     spieler5.durchschnitt=0;
                     spieler5.score=0;
                     Toast.makeText(getApplicationContext(), spieler5.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler5.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1512,6 +1531,7 @@ public class elimination extends AppCompatActivity {
                     spieler6.durchschnitt=0;
                     spieler6.score=0;
                     Toast.makeText(getApplicationContext(), spieler6.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler6.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1537,6 +1557,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1563,6 +1584,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1590,6 +1612,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1616,6 +1639,7 @@ public class elimination extends AppCompatActivity {
                     spieler4.durchschnitt=0;
                     spieler4.score=0;
                     Toast.makeText(getApplicationContext(), spieler4.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler4.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1642,6 +1666,7 @@ public class elimination extends AppCompatActivity {
                     spieler5.durchschnitt=0;
                     spieler5.score=0;
                     Toast.makeText(getApplicationContext(), spieler5.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler5.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1668,6 +1693,7 @@ public class elimination extends AppCompatActivity {
                     spieler6.durchschnitt=0;
                     spieler6.score=0;
                     Toast.makeText(getApplicationContext(), spieler6.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler6.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1694,6 +1720,7 @@ public class elimination extends AppCompatActivity {
                     spieler7.durchschnitt=0;
                     spieler7.score=0;
                     Toast.makeText(getApplicationContext(), spieler7.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler7.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1722,6 +1749,7 @@ public class elimination extends AppCompatActivity {
                     spieler1.durchschnitt=0;
                     spieler1.score=0;
                     Toast.makeText(getApplicationContext(), spieler1.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler1.spielerName)) {
                         listenPunkte1.setText("0  Ã: 0");
                     }
@@ -1739,6 +1767,7 @@ public class elimination extends AppCompatActivity {
                     spieler2.durchschnitt=0;
                     spieler2.score=0;
                     Toast.makeText(getApplicationContext(), spieler2.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler2.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler2.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler2.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1754,6 +1783,7 @@ public class elimination extends AppCompatActivity {
                     spieler3.durchschnitt=0;
                     spieler3.score=0;
                     Toast.makeText(getApplicationContext(), spieler3.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler3.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler3.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler3.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1769,6 +1799,7 @@ public class elimination extends AppCompatActivity {
                     spieler4.durchschnitt=0;
                     spieler4.score=0;
                     Toast.makeText(getApplicationContext(), spieler4.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler4.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler4.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler4.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1784,6 +1815,7 @@ public class elimination extends AppCompatActivity {
                     spieler5.durchschnitt=0;
                     spieler5.score=0;
                     Toast.makeText(getApplicationContext(), spieler5.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler5.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler5.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler5.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1799,6 +1831,7 @@ public class elimination extends AppCompatActivity {
                     spieler6.durchschnitt=0;
                     spieler6.score=0;
                     Toast.makeText(getApplicationContext(), spieler6.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler6.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler6.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler6.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1814,6 +1847,7 @@ public class elimination extends AppCompatActivity {
                     spieler7.durchschnitt=0;
                     spieler7.score=0;
                     Toast.makeText(getApplicationContext(), spieler7.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler7.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler7.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler7.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1829,6 +1863,7 @@ public class elimination extends AppCompatActivity {
                     spieler8.durchschnitt=0;
                     spieler8.score=0;
                     Toast.makeText(getApplicationContext(), spieler8.spielerName + " " + getResources().getString(R.string.eliminiert), Toast.LENGTH_SHORT).show();
+                    dc_modules.playAudio(getApplicationContext(), "eliminated");
                     if (listenName1.getText().toString().equals(spieler8.spielerName)) listenPunkte1.setText("0  Ã: 0");
                     else if (listenName2.getText().toString().equals(spieler8.spielerName)) listenPunkte2.setText("0  Ã: 0");
                     else if (listenName3.getText().toString().equals(spieler8.spielerName)) listenPunkte3.setText("0  Ã: 0");
@@ -1950,7 +1985,8 @@ public class elimination extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_elimination);
         SharedPreferences settings = getSharedPreferences("Einstellungen", 0);
@@ -2453,8 +2489,10 @@ public class elimination extends AppCompatActivity {
     private void nextplayer_with_freeze() {
         buttonfreeze(true);
         final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
-        aufnahmetv.setText(String.valueOf(setAufnahme()));
+        String score = String.valueOf(setAufnahme());
+        aufnahmetv.setText(score);
         aufnahmetv.setVisibility(View.VISIBLE);
+        dc_modules.playAudio(getApplicationContext(), score);
         new Handler().postDelayed(new Runnable() {
             @Override
             public void run() {
@@ -4551,7 +4589,12 @@ public class elimination extends AppCompatActivity {
 
         String vorschlagswahl="...";
         // auswahl des "besten" vorschlages
-        if (berechneteVorschlaege.size() > 1) {
+
+        // if checkout favorite is selected an still possible, select first in list
+        if (checkoutzahl!=0 && mydummy >= dt*checkoutzahl && berechneteVorschlaege.size() > 1) {
+            vorschlagswahl = berechneteVorschlaege.get(1);
+        }
+        else if (berechneteVorschlaege.size() > 1) {
             int kleinsterVorschlag=20;
             for (String aktuell:berechneteVorschlaege) {
                 if (aktuell.length() < kleinsterVorschlag)
@@ -4785,222 +4828,7 @@ public class elimination extends AppCompatActivity {
 
     // VorschlÃ¤ge fÃ¼r Checkoutwege berechnen und sortieren
     private ArrayList<String> vorschlaege(int rest, int lieblingsfinish, int DoubleoutOderTripleout) {
-        ArrayList<String> ergebnisliste = new ArrayList<String>();
-        if (rest < 0 || rest > 170 || rest == 169 || rest == 168 || rest == 166 || rest == 165 || rest == 163 || rest == 162 || rest == 159) {
-            return ergebnisliste;
-        }
-        // restliche_Punkte = x1*y1 + x2*y2 + x3*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        // DoubleoutOderTripleout heiÃt double out = 2 oder master out = 3
-        // lieblingsfinish==0 fuer alle varianten
-        // rest = x1*y1 + x2*y2 + DoubleoutOderTripleout*y3
-
-        class treffer {
-            int rest;
-            int x1;
-            int y1;
-            int x2;
-            int y2;
-            int x3;
-            int y3;
-        }
-
-        int x1, x2, y1, y2, y3, z, i2, i;
-        treffer[] tl = new treffer[3000];
-        treffer[] ergebnisse = new treffer[3000];
-        boolean zweidartfinishvorhanden, change;
-        treffer speicher;
-        z = 0;
-
-        // CheckoutmÃ¶glichkeiten ermitteln
-        for (x1 = 3; x1 >= 0; x1--) {
-            for (y1=25;y1>=1;y1--) {
-                if (!(((y1 > 20) && (y1 < 25)) || ((y1 == 25) && (x1 == 3)) )) {
-                    // 3mal25 gibts nicht und zahlen zw 20 und 25 auch nicht
-                    for (x2=3;x2>=0;x2--) {
-                        for (y2=25;y2>=1;y2--) {
-                            if (!(((y2 > 20) && (y2 < 25)) || ((y2 == 25) && (x2 == 3)) )) {
-                                //3mal25 gibts nicht und....
-                                if ((rest - (x1 * y1) - (x2 * y2))<=60) {
-                                    //doppel checkout theoretisch moeglich?
-                                    for (y3=25;y3>=1;y3--) {
-                                        if (!((y3 > 20) && (y3 < 25))) {
-                                            // zahlen zw 20 und 25 gibts nicht
-                                            if (((rest == ((x1 * y1) + (x2 * y2) + (DoubleoutOderTripleout * y3))) && (y3 != 0))) {
-                                                z++;
-                                                // treffer in array speichern
-                                                tl[z] = new treffer();
-                                                tl[z].rest = ((x1 * y1) + (x2 * y2) + (DoubleoutOderTripleout * y3));
-                                                if (x1*y1<=20) {
-                                                    tl[z].x1=1;
-                                                    tl[z].y1=x1*y1;
-                                                } else {
-                                                    tl[z].x1 = x1;
-                                                    tl[z].y1 = y1;
-                                                }
-                                                if ((x2*y2)<=20) {
-                                                    tl[z].x2=1;
-                                                    tl[z].y2=x2*y2;
-                                                } else {
-                                                    tl[z].x2 = x2;
-                                                    tl[z].y2 = y2;
-                                                }
-                                                tl[z].x3 = DoubleoutOderTripleout;
-                                                tl[z].y3 = y3;
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-        // Ã¤quivalente lÃ¶sungen lÃ¶schen:
-        // array: doppel treffer loeschen, wenn
-        //                                 blosse vertauschung der ersten beiden pfeile
-        //                                 blosse vertauschung der letzten beiden pfeile
-        //                                 1. oder 2. pfeil==0 und der punktepfeil gleich dem anderen bei 0    )
-        //
-        // DoubleoutOderTripleout = 2 oder 3
-        // (rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil) )
-
-        for (i=1;i<=z;i++) {
-            if (tl[i].rest != 0) { // rest=0 sind gelÃ¶schte Treffer
-                for (i2=i+1;i2<=z;i2++) {
-                    if (tl[i2].rest!=0) { // rest=0 sind gelÃ¶schte Treffer
-                        if ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2) && (tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x2) && (tl[i].y2 == tl[i2].y2))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x1) && (tl[i].y1 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        // wenn 2 Pfeile reichen, Ã¼berprÃ¼fen ob sich nur die Reihenfolge der letzten beiden Darts unterscheidet
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x3) && (tl[i].y2 == tl[i2].y3))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x3) && (tl[i].y1 == tl[i2].y3))
-                            tl[i2].rest=0;
-                        if (((tl[i].x1 == 0) && (tl[i2].x2 == 0)) && ((tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1)))
-                            tl[i2].rest=0;
-                        if (((tl[i].x2 == 0) && (tl[i2].x1 == 0)) && ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2)))
-                            tl[i2].rest=0;
-                        // loeschen, wenn 1. und 2. pfeil=0 und gleiches doppel
-                        if ((tl[i].y3 == tl[i2].y3) && (tl[i].x1 == 0) && (tl[i2].x1 == 0) && (tl[i].x2 == 0) && (tl[i2].x2 == 0))
-                            tl[i2].rest=0;
-                        // lÃ¶schen, wenn alle pfeile identisch sind
-                        if ((tl[i].x1 == tl[i2].x1) && (tl[i].y1==tl[i2].y1) && (tl[i].x2==tl[i2].x2) && (tl[i].y2==tl[i2].y2))
-                            tl[i2].rest=0;
-                    }
-                }
-            }
-        }
-
-        // ergebnisse dursuchen nach zweidartfinish
-        zweidartfinishvorhanden=false;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) {
-                zweidartfinishvorhanden=true;
-                break;
-            }
-        }
-
-        // relevante ergebnisse in neues, zu sortierendes array kopieren
-        i2=0;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish!=0 && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ))   )) {
-                if ((!zweidartfinishvorhanden)
-                        || (zweidartfinishvorhanden && (lieblingsfinish==0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0))   )   )
-                        || (lieblingsfinish!=0 && (tl[i].rest >= (lieblingsfinish*DoubleoutOderTripleout) ))
-                        || (lieblingsfinish!=0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0)) && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ) )){
-                    i2++;
-                    ergebnisse[i2] = tl[i];
-                }
-            }
-        }
-        z=i2;
-
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((ergebnisse[i].x1 != 1) && (ergebnisse[i].x2 != 1)) {
-                    if ((ergebnisse[i + 1].x1 == 1) || (ergebnisse[i + 1].x2 == 1)) {
-                        change=true;
-                        speicher=ergebnisse[i];
-                        ergebnisse[i]=ergebnisse[i + 1];
-                        ergebnisse[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // 2x nach oben
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((ergebnisse[i].x1 == 3) && (ergebnisse[i].x2 == 3)) {
-                    if (((ergebnisse[i + 1].x1 == 2) && (ergebnisse[i + 1].x2 == 3) )
-                            || ((ergebnisse[i + 1].x1 == 3) && (ergebnisse[i + 1].x2 == 2))) {
-                        change=true;
-                        speicher=ergebnisse[i];
-                        ergebnisse[i]=ergebnisse[i + 1];
-                        ergebnisse[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // ausgabe der gewaehlten restlichen treffer in hÃ¼bscher Formatierung
-        // rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        String dt,str;
-        dt="";
-        if (DoubleoutOderTripleout==2) dt="D";
-        if (DoubleoutOderTripleout==3) dt="T";
-        i2=0;
-
-        ergebnisliste.add("...");
-        for (i=1;i<=z;i++) {
-            i2++;
-            str="";
-            if ((ergebnisse[i].x1*ergebnisse[i].y1) > 0)
-                switch (ergebnisse[i].x1) {
-                    case 1:
-                        str = str+ergebnisse[i].y1;
-                        break;
-                    case 2:
-                        str = str+"D"+ergebnisse[i].y1;
-                        break;
-                    case 3:
-                        str = str+"T"+ergebnisse[i].y1;
-                        break;
-                }
-            if ((ergebnisse[i].x2*ergebnisse[i].y2) > 0)
-                switch (ergebnisse[i].x2) {
-                    case 1:
-                        str = str+" "+ergebnisse[i].y2;
-                        break;
-                    case 2:
-                        str = str+" "+"D"+ergebnisse[i].y2;
-                        break;
-                    case 3:
-                        str = str+" "+"T"+ergebnisse[i].y2;
-                        break;
-                }
-            if (str.equals(""))
-                str=dt+ergebnisse[i].y3;
-            else str=str+" "+dt+ergebnisse[i].y3;
-
-            ergebnisliste.add(str);
-        }
-        if (rest == 2) {
-            ergebnisliste.remove(ergebnisliste.remove(ergebnisliste.size()-1));
-            ergebnisliste.add("MaDhOuSe");
-        }
-        return ergebnisliste;
+        return dc_modules.vorschlaege(rest, lieblingsfinish, DoubleoutOderTripleout);
     }
 
 
diff --git a/app/src/main/java/com/DartChecker/halve.java b/app/src/main/java/com/DartChecker/halve.java
index 2dac80a..966cca9 100644
--- a/app/src/main/java/com/DartChecker/halve.java
+++ b/app/src/main/java/com/DartChecker/halve.java
@@ -468,7 +468,8 @@ public class halve extends AppCompatActivity {
                             aufnahmetv.setText(spieler[aktiverSpieler].gewinnerplatz + ".");
                         else aufnahmetv.setText(ausgabe);
                         aufnahmetv.setVisibility(View.VISIBLE);
-                        new Handler().postDelayed(new Runnable() {
+                        dc_modules.playAudio(getApplicationContext(), ausgabe);
+                    new Handler().postDelayed(new Runnable() {
                             @Override
                             public void run() {
                                 buttonfreeze(false);
@@ -647,6 +648,7 @@ public class halve extends AppCompatActivity {
                                     aufnahmetv.setText(spieler[aktiverSpieler].gewinnerplatz + ".");
                                 else aufnahmetv.setText(ausgabe);
                                 aufnahmetv.setVisibility(View.VISIBLE);
+                                dc_modules.playAudio(getApplicationContext(), ausgabe);
                                 new Handler().postDelayed(new Runnable() {
                                     @Override
                                     public void run() {
@@ -765,7 +767,8 @@ public class halve extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_halve);
         TypedValue outValue = new TypedValue();
diff --git a/app/src/main/java/com/DartChecker/hilfe.java b/app/src/main/java/com/DartChecker/hilfe.java
index 3a4419d..e63af87 100644
--- a/app/src/main/java/com/DartChecker/hilfe.java
+++ b/app/src/main/java/com/DartChecker/hilfe.java
@@ -54,7 +54,8 @@ public class hilfe extends AppCompatActivity {
 
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_hilfe);
         SharedPreferences settings = getSharedPreferences("Einstellungen",0);
diff --git a/app/src/main/java/com/DartChecker/info.java b/app/src/main/java/com/DartChecker/info.java
index e866035..5169be3 100644
--- a/app/src/main/java/com/DartChecker/info.java
+++ b/app/src/main/java/com/DartChecker/info.java
@@ -61,7 +61,8 @@ public class info extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_info);
         SharedPreferences settings = getSharedPreferences("Einstellungen",0);
diff --git a/app/src/main/java/com/DartChecker/match.java b/app/src/main/java/com/DartChecker/match.java
index 044830b..129461a 100644
--- a/app/src/main/java/com/DartChecker/match.java
+++ b/app/src/main/java/com/DartChecker/match.java
@@ -9,6 +9,7 @@ import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.content.res.Resources;
+import android.media.MediaPlayer;
 import android.os.Build;
 import android.os.Handler;
 
@@ -27,7 +28,6 @@ import android.widget.Toast;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Locale;
 import java.util.Random;
 
@@ -44,6 +44,7 @@ public class match extends AppCompatActivity {
     private final ArrayList<match.pfeil> wuerfe = new ArrayList<match.pfeil>();
     private final DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US);
     private final DecimalFormat formater = new DecimalFormat("###.##", symbols);
+    private final com.DartChecker.dc_modules dc_modules = new dc_modules();
     private Integer spieleranzahl;
     private boolean doubleout,
                     masterout,
@@ -238,9 +239,9 @@ public class match extends AppCompatActivity {
                             }
 
 
-                            String aktueller_spielername,dartwert;
+                            String aktueller_spielername,last_dart_for_message;
                             aktueller_spielername=rundenname;
-                            dartwert = "0";
+                            last_dart_for_message = "0";
                             dummy = Integer.parseInt(score.getText().toString());
                             int xdartsave=xdart;
                             switch (xdartsave) {
@@ -252,7 +253,7 @@ public class match extends AppCompatActivity {
                                         return;
                                     }
                                     dummy = Integer.parseInt(score.getText().toString());
-                                    dartwert = d3.getText().toString();
+                                    last_dart_for_message = d3.getText().toString();
                                     d3.setText("-");
                                     xdart = 2;
                                     pfeil wurf = wuerfe.get(wuerfe.size()-1);
@@ -265,14 +266,14 @@ public class match extends AppCompatActivity {
                                         wuerfe.remove(wuerfe.size()-1);
                                         wurf = wuerfe.get(wuerfe.size()-1);
                                         if (!(wurf.addpunkte == 111)) { //2. dart gÃ¼ltig?
-                                                                               // -> ja: also 2.und 1. dart abziehen
+                                                                        // -> ja: also 2.und 1. dart abziehen
                                             dummy -= wurf.faktor * wurf.zahl;
                                             wurf = wuerfe.get(wuerfe.size()-2);
                                             dummy -= wurf.faktor * wurf.zahl;
                                         } else { //wenn der 2. auch nicht angerechnet wurde bzw. darf, dann fliegt die anzeige raus
                                             aktueller_spielername = wurf.playername.toString();
                                             wuerfe.remove(wuerfe.size()-1);
-                                            dartwert=d2.getText().toString();
+                                            last_dart_for_message=d2.getText().toString();
                                             d2.setText("-");
                                             xdart = 1;
                                             pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) - 1));
@@ -283,7 +284,7 @@ public class match extends AppCompatActivity {
                                             } else {
                                                 aktueller_spielername = wurf.playername.toString();
                                                 wuerfe.remove(wuerfe.size()-1);
-                                                dartwert=d1.getText().toString();
+                                                last_dart_for_message=d1.getText().toString();
                                                 d1.setText("-");
                                                 xdart = 0;
                                                 pfeile.setText(Integer.toString(Integer.parseInt(pfeile.getText().toString()) - 1));
@@ -297,29 +298,26 @@ public class match extends AppCompatActivity {
                                 }
 
                                 case 1: {
-                                    // zeiger auf vorherigen dart stellen, der nach dem auslesen auch wieder Ã¼berschrieben wird
+                                    // recover last saved dart hit and delete it
                                     pfeil wurf = wuerfe.get(wuerfe.size()-1);
                                     aktueller_spielername = wurf.playername.toString();
                                     if (!(wurf.addpunkte == 111)) {
                                         dummy += wurf.faktor * wurf.zahl;
                                         wuerfe.remove(wuerfe.size()-1);
-
                                     }
-
-                                    dartwert=d1.getText().toString();
+                                    last_dart_for_message=d1.getText().toString();
                                     d1.setText("-");
                                     xdart--;
                                     break;
                                 }
                                 case 2: {
-
                                     pfeil wurf = wuerfe.get(wuerfe.size()-1);
                                     aktueller_spielername = wurf.playername.toString();
                                     if (!(wurf.addpunkte == 111)) {
                                         dummy += wurf.faktor * wurf.zahl;
                                         wuerfe.remove(wuerfe.size()-1);
                                     }
-                                    dartwert=d2.getText().toString();
+                                    last_dart_for_message=d2.getText().toString();
                                     d2.setText("-");
                                     xdart--;
                                     break;
@@ -334,7 +332,7 @@ public class match extends AppCompatActivity {
                             else
                                 durchschnitt.setText("0");
                             vorschlagsetzen(dummy);
-                            Toast.makeText(getApplicationContext(),"undo: "+dartwert+" "+getResources().getString(R.string.von_spieler)+" "+aktueller_spielername,Toast.LENGTH_SHORT).show();
+                            Toast.makeText(getApplicationContext(),"undo: "+last_dart_for_message+" "+getResources().getString(R.string.von_spieler)+" "+aktueller_spielername,Toast.LENGTH_SHORT).show();
                         }
                     });
             alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.nein), new DialogInterface.OnClickListener() {
@@ -2048,7 +2046,8 @@ public class match extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_match);
         SharedPreferences settings = getSharedPreferences("Einstellungen", 0);
@@ -2140,7 +2139,7 @@ public class match extends AppCompatActivity {
             setbeschriftung.setVisibility(View.VISIBLE);
             legbeschriftung.setVisibility(View.VISIBLE);
             //falls "best of" gewÃ¤hlt ist reduziere die eingestellten sets und legs auf grob die hÃ¤lfte
-            if (!MainActivity.setlegmodus) {
+            if (!MainActivity.firstTo) {
                 sets = (sets / 2) + 1;
                 legs = (legs / 2) + 1;
             }
@@ -2574,8 +2573,10 @@ public class match extends AppCompatActivity {
     private void nextplayer_with_freeze() {
         buttonfreeze(true);
         final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
-        aufnahmetv.setText(String.valueOf(setAufnahme()));
+        String score = String.valueOf(setAufnahme());
+        aufnahmetv.setText(score);
         aufnahmetv.setVisibility(View.VISIBLE);
+        dc_modules.playAudio(getApplicationContext(), score);
         new Handler().postDelayed(new Runnable() {
             @Override
             public void run() {
@@ -4954,7 +4955,7 @@ public class match extends AppCompatActivity {
         int dt=1;
         if (doubleout) dt=2;
         if (masterout) dt=3;
-        ArrayList<String> berechneteVorschlaege = vorschlaege(mydummy,checkoutzahl,dt);
+        ArrayList<String> berechneteVorschlaege = dc_modules.vorschlaege(mydummy, checkoutzahl, dt);
         ArrayAdapter vorschlaegefuerspinner = new ArrayAdapter<>(
                 match.this,
                 R.layout.match_spinner_item_head, berechneteVorschlaege);
@@ -5050,7 +5051,7 @@ public class match extends AppCompatActivity {
         int dt=1;
         if (doubleout) dt=2;
         if (masterout) dt=3;
-        ArrayList <String> berechneteVorschlaege = vorschlaege(mydummy,checkoutzahl,dt);
+        ArrayList <String> berechneteVorschlaege = dc_modules.vorschlaege(mydummy, checkoutzahl, dt);
         String vorschlagswahl="";
         if (berechneteVorschlaege.size() > 1) {
             int kleinsterVorschlag=20;
@@ -5142,295 +5143,7 @@ public class match extends AppCompatActivity {
 
     // VorschlÃ¤ge fÃ¼r Checkoutwege berechnen und sortieren
     private ArrayList<String> vorschlaege(int rest, int lieblingsfinish, int DoubleoutOderTripleout) {
-        ArrayList<String> ergebnisliste = new ArrayList<String>();
-        if (rest < 0 || rest > 180) {
-            return ergebnisliste;
-        }
-        // restliche_Punkte = x1*y1 + x2*y2 + x3*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        // DoubleoutOderTripleout heiÃt double out = 2 oder master out = 3
-        // lieblingsfinish==0 fuer alle varianten
-        // rest = x1*y1 + x2*y2 + DoubleoutOderTripleout*y3
-
-        class treffer {
-            int rest;
-            int x1;
-            int y1;
-            int x2;
-            int y2;
-            int x3;
-            int y3;
-        }
-
-        int x1, x2, y1, y2, y3, z, i2, i;
-        treffer[] tl = new treffer[3000];
-        treffer[] ergebnisse = new treffer[6000];
-        treffer[] wanted = new treffer[3000];
-        treffer[] unwanted = new treffer[3000];
-        boolean zweidartfinishvorhanden, change;
-        treffer speicher;
-        z = 0;
-
-        // CheckoutmÃ¶glichkeiten ermitteln
-        for (x1 = 3; x1 >= 0; x1--) {
-            for (y1=25;y1>=1;y1--) {
-                if (!(((y1 > 20) && (y1 < 25)) || ((y1 == 25) && (x1 == 3)) )) {
-                    // 3mal25 gibts nicht und zahlen zw 20 und 25 auch nicht
-                    for (x2=3;x2>=0;x2--) {
-                        for (y2=25;y2>=1;y2--) {
-                            if (!(((y2 > 20) && (y2 < 25)) || ((y2 == 25) && (x2 == 3)) )) {
-                                //3mal25 gibts nicht und....
-                                if ((rest - (x1 * y1) - (x2 * y2))<=60) {
-                                    //doppel checkout theoretisch moeglich?
-                                    for (y3=25;y3>=1;y3--) {
-                                        if (!((y3 > 20) && (y3 < 25))) {
-                                            // zahlen zw 20 und 25 gibts nicht
-                                            int aktuellerRest = (x1 * y1) + (x2 * y2) + (DoubleoutOderTripleout * y3);
-                                            if (((rest == aktuellerRest) && (y3 != 0))) {
-                                                z++;
-                                               // treffer in array speichern
-                                                tl[z] = new treffer();
-                                                tl[z].rest = aktuellerRest;
-                                                if (x1*y1<=20) {
-                                                    tl[z].x1=1;
-                                                    tl[z].y1=x1*y1;
-                                                } else {
-                                                    tl[z].x1 = x1;
-                                                    tl[z].y1 = y1;
-                                                }
-                                                if ((x2*y2)<=20) {
-                                                    tl[z].x2=1;
-                                                    tl[z].y2=x2*y2;
-                                                } else {
-                                                    tl[z].x2 = x2;
-                                                    tl[z].y2 = y2;
-                                                }
-                                                tl[z].x3 = DoubleoutOderTripleout;
-                                                tl[z].y3 = y3;
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-        // Ã¤quivalente lÃ¶sungen lÃ¶schen:
-        // array: doppel treffer loeschen, wenn
-        //                                 blosse vertauschung der ersten beiden pfeile
-        //                                 blosse vertauschung der letzten beiden pfeile
-        //                                 1. oder 2. pfeil==0 und der punktepfeil gleich dem anderen bei 0    )
-        //
-        // DoubleoutOderTripleout = 2 oder 3
-        // (rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil) )
-
-        for (i=1;i<=z;i++) {
-            if (tl[i].rest != 0) { // rest=0 sind gelÃ¶schte Treffer
-                for (i2=i+1;i2<=z;i2++) {
-                    if (tl[i2].rest!=0) { // rest=0 sind gelÃ¶schte Treffer
-                        if ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2) && (tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x2) && (tl[i].y2 == tl[i2].y2))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x1) && (tl[i].y1 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        // wenn 2 Pfeile reichen, Ã¼berprÃ¼fen ob sich nur die Reihenfolge der letzten beiden Darts unterscheidet
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x3) && (tl[i].y2 == tl[i2].y3))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x3) && (tl[i].y1 == tl[i2].y3))
-                            tl[i2].rest=0;
-                        if (((tl[i].x1 == 0) && (tl[i2].x2 == 0)) && ((tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1)))
-                            tl[i2].rest=0;
-                        if (((tl[i].x2 == 0) && (tl[i2].x1 == 0)) && ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2)))
-                            tl[i2].rest=0;
-                        // loeschen, wenn 1. und 2. pfeil=0 und gleiches doppel
-                        if ((tl[i].y3 == tl[i2].y3) && (tl[i].x1 == 0) && (tl[i2].x1 == 0) && (tl[i].x2 == 0) && (tl[i2].x2 == 0))
-                            tl[i2].rest=0;
-                        // lÃ¶schen, wenn alle pfeile identisch sind
-                        if ((tl[i].x1 == tl[i2].x1) && (tl[i].y1==tl[i2].y1) && (tl[i].x2==tl[i2].x2) && (tl[i].y2==tl[i2].y2))
-                            tl[i2].rest=0;
-                    }
-                }
-            }
-        }
-
-        // ergebnisse dursuchen nach zweidartfinish
-        zweidartfinishvorhanden=false;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) {
-                zweidartfinishvorhanden=true;
-                break;
-            }
-        }
-
-        // relevante ergebnisse in neues, zu sortierendes array kopieren
-        i2=0;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish!=0 && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ))   )) {
-                if ((!zweidartfinishvorhanden)
-                || (zweidartfinishvorhanden && (lieblingsfinish==0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0))   )   )
-                || (lieblingsfinish!=0 && (tl[i].rest >= (lieblingsfinish*DoubleoutOderTripleout) ))
-                || (lieblingsfinish!=0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0)) && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ) )){
-                    i2++;
-                    wanted[i2] = tl[i];
-                }
-            }
-        }
-        int zsafe=z;
-        z=i2;
-        // sort wanted list
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((wanted[i].x1 != 1) && (wanted[i].x2 != 1)) {
-                    if ((wanted[i + 1].x1 == 1) || (wanted[i + 1].x2 == 1)) {
-                        change=true;
-                        speicher=wanted[i];
-                        wanted[i]=wanted[i + 1];
-                        wanted[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // 2x nach oben
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((wanted[i].x1 == 3) && (wanted[i].x2 == 3)) {
-                    if (((wanted[i + 1].x1 == 2) && (wanted[i + 1].x2 == 3) )
-                            || ((wanted[i + 1].x1 == 3) && (wanted[i + 1].x2 == 2))) {
-                        change=true;
-                        speicher=wanted[i];
-                        wanted[i]=wanted[i + 1];
-                        wanted[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // if favorite checkout selected, search and add other checkouts to list
-        int uw=0;
-        if (lieblingsfinish != 0) {
-            int lfsafe=lieblingsfinish;
-            lieblingsfinish = 0;
-            for (i=1;i<=zsafe;i++) {
-                if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish!=0 && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ))   )) {
-                    if ((!zweidartfinishvorhanden)
-                            || (zweidartfinishvorhanden && (lieblingsfinish==0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0))   )   )
-                            || (lieblingsfinish!=0 && (tl[i].rest >= (lieblingsfinish*DoubleoutOderTripleout) ))
-                            || (lieblingsfinish!=0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0)) && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ) )){
-                        uw++;
-                        unwanted[uw] = tl[i];
-                    }
-                }
-            }
-            zsafe=uw;
-
-            // sort unwanted list
-            change=true;
-            while (change) {
-                change=false;
-                for (i=1;i<=zsafe-1;i++) {
-                    // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                    if ((unwanted[i].x1 != 1) && (unwanted[i].x2 != 1)) {
-                        if ((unwanted[i + 1].x1 == 1) || (unwanted[i + 1].x2 == 1)) {
-                            change=true;
-                            speicher=unwanted[i];
-                            unwanted[i]=unwanted[i + 1];
-                            unwanted[i + 1]=speicher;
-                        }
-                    }
-                }
-            }
-
-            // 2x nach oben
-            change=true;
-            while (change) {
-                change=false;
-                for (i=1;i<=zsafe-1;i++) {
-                    // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                    if ((unwanted[i].x1 == 3) && (unwanted[i].x2 == 3)) {
-                        if (((unwanted[i + 1].x1 == 2) && (unwanted[i + 1].x2 == 3) )
-                                || ((unwanted[i + 1].x1 == 3) && (unwanted[i + 1].x2 == 2))) {
-                            change=true;
-                            speicher=unwanted[i];
-                            unwanted[i]=unwanted[i + 1];
-                            unwanted[i + 1]=speicher;
-                        }
-                    }
-                }
-            }
-
-            lieblingsfinish = lfsafe;
-        }
-        ArrayList<treffer> endergebniss = new ArrayList<treffer>();
-        for (i = 1; i <= z; i++) {
-            endergebniss.add(wanted[i]);
-        }
-        // add unwanted list, if lieblingsfinsh is selected
-        if (lieblingsfinish != 0 ) {
-            for (i = 1; i <= uw; i++) {
-                if (!endergebniss.contains(unwanted[i])) {
-                   endergebniss.add(unwanted[i]);
-               }
-            }
-        }
-
-    // ausgabe der gewaehlten restlichen treffer in hÃ¼bscher Formatierung
-    // rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        String dt,str;
-        dt="";
-        if (DoubleoutOderTripleout==2) dt="D";
-        if (DoubleoutOderTripleout==3) dt="T";
-        i2=0;
-
-        ergebnisliste.add("...");
-        for (treffer ergebnis:endergebniss) {
-            i2++;
-            str="";
-            if ((ergebnis.x1*ergebnis.y1) > 0)
-                switch (ergebnis.x1) {
-                    case 1:
-                        str = str+ergebnis.y1;
-                        break;
-                    case 2:
-                        str = str+"D"+ergebnis.y1;
-                        break;
-                    case 3:
-                        str = str+"T"+ergebnis.y1;
-                        break;
-                }
-            if ((ergebnis.x2*ergebnis.y2) > 0)
-                switch (ergebnis.x2) {
-                    case 1:
-                        str = str+" "+ergebnis.y2;
-                        break;
-                    case 2:
-                        str = str+" "+"D"+ergebnis.y2;
-                        break;
-                    case 3:
-                        str = str+" "+"T"+ergebnis.y2;
-                        break;
-                }
-            if (str.equals(""))
-                str=dt+ergebnis.y3;
-            else str=str+" "+dt+ergebnis.y3;
-
-            ergebnisliste.add(str);
-        }
-
-        if (rest == 2) {
-            ergebnisliste.remove(ergebnisliste.remove(ergebnisliste.size()-1));
-            ergebnisliste.add("MaDhOuSe");
-        }
-        return ergebnisliste;
+        return dc_modules.vorschlaege(rest, lieblingsfinish, DoubleoutOderTripleout);
     }
 
 
diff --git a/app/src/main/java/com/DartChecker/matchcalc.java b/app/src/main/java/com/DartChecker/matchcalc.java
index de49e94..cc6ac65 100644
--- a/app/src/main/java/com/DartChecker/matchcalc.java
+++ b/app/src/main/java/com/DartChecker/matchcalc.java
@@ -1826,7 +1826,8 @@ public class matchcalc extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_matchcalc);
         SharedPreferences settings = getSharedPreferences("Einstellungen", 0);
@@ -1911,7 +1912,7 @@ public class matchcalc extends AppCompatActivity {
             setbeschriftung.setVisibility(View.VISIBLE);
             legbeschriftung.setVisibility(View.VISIBLE);
             //falls "best of" gewÃ¤hlt ist reduziere die eingestellten sets und legs auf grob die hÃ¤lfte
-            if (!MainActivity.setlegmodus) {
+            if (!MainActivity.firstTo) {
                 sets = (sets / 2) + 1;
                 legs = (legs / 2) + 1;
             }
@@ -2229,8 +2230,11 @@ public class matchcalc extends AppCompatActivity {
     private void nextplayer_with_freeze() {
         buttonfreeze(true);
         final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
-        aufnahmetv.setText(String.valueOf(scoreeingabe.getText()));
+        String score = String.valueOf(scoreeingabe.getText());
+        aufnahmetv.setText(score);
         scoreeingabe.setText("0");
+        aufnahmetv.setVisibility(View.VISIBLE);
+        dc_modules.playAudio(getApplicationContext(), score);
         new Handler().postDelayed(new Runnable() {
             @Override
             public void run() {
@@ -4512,7 +4516,12 @@ public class matchcalc extends AppCompatActivity {
 
         String vorschlagswahl="...";
         // auswahl des "besten" vorschlages
-        if (berechneteVorschlaege.size() > 1) {
+
+        // if checkout favorite is selected an still possible, select first in list
+        if (checkoutzahl!=0 && mydummy >= dt*checkoutzahl && berechneteVorschlaege.size() > 1) {
+            vorschlagswahl = berechneteVorschlaege.get(1);
+        }
+        else if (berechneteVorschlaege.size() > 1) {
             int kleinsterVorschlag=20;
             for (String aktuell:berechneteVorschlaege) {
                 if (aktuell.length() < kleinsterVorschlag)
@@ -4523,8 +4532,8 @@ public class matchcalc extends AppCompatActivity {
             boolean changed=false;
             for (int i=berechneteVorschlaege.size()-1; i>=1;i--) {
                 if (berechneteVorschlaege.get(i).length() == vorschlagswahl.length()
-                        && !berechneteVorschlaege.get(i).substring(0,1).equals("D")
-                        && !berechneteVorschlaege.get(i).substring(0,1).equals("T") ) {
+                        && berechneteVorschlaege.get(i).charAt(0) != 'D'
+                        && berechneteVorschlaege.get(i).charAt(0) != 'T') {
                     vorschlagswahl = berechneteVorschlaege.get(i);
                     changed=true;
                 }
@@ -4686,223 +4695,7 @@ public class matchcalc extends AppCompatActivity {
 
     // VorschlÃ¤ge fÃ¼r Checkoutwege berechnen und sortieren
     private ArrayList<String> vorschlaege(int rest, int lieblingsfinish, int DoubleoutOderTripleout) {
-        ArrayList<String> ergebnisliste = new ArrayList<String>();
-        if (rest < 0 || rest > 180) {
-            return ergebnisliste;
-        }
-        // restliche_Punkte = x1*y1 + x2*y2 + x3*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        // DoubleoutOderTripleout heiÃt double out = 2 oder master out = 3
-        // lieblingsfinish==0 fuer alle varianten
-        // rest = x1*y1 + x2*y2 + DoubleoutOderTripleout*y3
-
-        class treffer {
-            int rest;
-            int x1;
-            int y1;
-            int x2;
-            int y2;
-            int x3;
-            int y3;
-        }
-
-        int x1, x2, y1, y2, y3, z, i2, i;
-        treffer[] tl = new treffer[3000];
-        treffer[] ergebnisse = new treffer[3000];
-        boolean zweidartfinishvorhanden, change;
-        treffer speicher;
-        z = 0;
-
-        // CheckoutmÃ¶glichkeiten ermitteln
-        for (x1 = 3; x1 >= 0; x1--) {
-            for (y1=25;y1>=1;y1--) {
-                if (!(((y1 > 20) && (y1 < 25)) || ((y1 == 25) && (x1 == 3)) )) {
-                    // 3mal25 gibts nicht und zahlen zw 20 und 25 auch nicht
-                    for (x2=3;x2>=0;x2--) {
-                        for (y2=25;y2>=1;y2--) {
-                            if (!(((y2 > 20) && (y2 < 25)) || ((y2 == 25) && (x2 == 3)) )) {
-                                //3mal25 gibts nicht und....
-                                if ((rest - (x1 * y1) - (x2 * y2))<=60) {
-                                    //doppel checkout theoretisch moeglich?
-                                    for (y3=25;y3>=1;y3--) {
-                                        if (!((y3 > 20) && (y3 < 25))) {
-                                            // zahlen zw 20 und 25 gibts nicht
-                                            int aktuellerRest = (x1 * y1) + (x2 * y2) + (DoubleoutOderTripleout * y3);
-                                            if (((rest == aktuellerRest) && (y3 != 0))) {
-                                                z++;
-                                                // treffer in array speichern
-                                                tl[z] = new treffer();
-                                                tl[z].rest = aktuellerRest;
-                                                if (x1*y1<=20) {
-                                                    tl[z].x1=1;
-                                                    tl[z].y1=x1*y1;
-                                                } else {
-                                                    tl[z].x1 = x1;
-                                                    tl[z].y1 = y1;
-                                                }
-                                                if ((x2*y2)<=20) {
-                                                    tl[z].x2=1;
-                                                    tl[z].y2=x2*y2;
-                                                } else {
-                                                    tl[z].x2 = x2;
-                                                    tl[z].y2 = y2;
-                                                }
-                                                tl[z].x3 = DoubleoutOderTripleout;
-                                                tl[z].y3 = y3;
-                                            }
-                                        }
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-        // Ã¤quivalente lÃ¶sungen lÃ¶schen:
-        // array: doppel treffer loeschen, wenn
-        //                                 blosse vertauschung der ersten beiden pfeile
-        //                                 blosse vertauschung der letzten beiden pfeile
-        //                                 1. oder 2. pfeil==0 und der punktepfeil gleich dem anderen bei 0    )
-        //
-        // DoubleoutOderTripleout = 2 oder 3
-        // (rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil) )
-
-        for (i=1;i<=z;i++) {
-            if (tl[i].rest != 0) { // rest=0 sind gelÃ¶schte Treffer
-                for (i2=i+1;i2<=z;i2++) {
-                    if (tl[i2].rest!=0) { // rest=0 sind gelÃ¶schte Treffer
-                        if ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2) && (tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x2) && (tl[i].y2 == tl[i2].y2))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x1) && (tl[i].y1 == tl[i2].y1))
-                            tl[i2].rest=0;
-                        // wenn 2 Pfeile reichen, Ã¼berprÃ¼fen ob sich nur die Reihenfolge der letzten beiden Darts unterscheidet
-                        if ((tl[i].x1 == 0) && (tl[i].x2 == tl[i2].x3) && (tl[i].y2 == tl[i2].y3))
-                            tl[ i2].rest=0;
-                        if ((tl[i].x2 == 0) && (tl[i].x1 == tl[i2].x3) && (tl[i].y1 == tl[i2].y3))
-                            tl[i2].rest=0;
-                        if (((tl[i].x1 == 0) && (tl[i2].x2 == 0)) && ((tl[i].x2 == tl[i2].x1) && (tl[i].y2 == tl[i2].y1)))
-                            tl[i2].rest=0;
-                        if (((tl[i].x2 == 0) && (tl[i2].x1 == 0)) && ((tl[i].x1 == tl[i2].x2) && (tl[i].y1 == tl[i2].y2)))
-                            tl[i2].rest=0;
-                        // loeschen, wenn 1. und 2. pfeil=0 und gleiches doppel
-                        if ((tl[i].y3 == tl[i2].y3) && (tl[i].x1 == 0) && (tl[i2].x1 == 0) && (tl[i].x2 == 0) && (tl[i2].x2 == 0))
-                            tl[i2].rest=0;
-                        // lÃ¶schen, wenn alle pfeile identisch sind
-                        if ((tl[i].x1 == tl[i2].x1) && (tl[i].y1==tl[i2].y1) && (tl[i].x2==tl[i2].x2) && (tl[i].y2==tl[i2].y2))
-                            tl[i2].rest=0;
-                    }
-                }
-            }
-        }
-
-        // ergebnisse dursuchen nach zweidartfinish
-        zweidartfinishvorhanden=false;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1 == 0) || (tl[i].y2 == 0)) {
-                zweidartfinishvorhanden=true;
-                break;
-            }
-        }
-
-        // relevante ergebnisse in neues, zu sortierendes array kopieren
-        i2=0;
-        for (i=1;i<=z;i++) {
-            if ((tl[i].rest != 0) && ((tl[i].y3 == lieblingsfinish) || (lieblingsfinish == 0) || (lieblingsfinish!=0 && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ))   )) {
-                if ((!zweidartfinishvorhanden)
-                        || (zweidartfinishvorhanden && (lieblingsfinish==0 && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0))   )   )
-                        || (lieblingsfinish!=0 && (tl[i].rest >= (lieblingsfinish*DoubleoutOderTripleout) ))
-                        || (lieblingsfinish!=0 && zweidartfinishvorhanden && ((tl[i].x1 == 0) || (tl[i].x2 == 0) || (tl[i].y1==0) || (tl[i].y2==0)) && (tl[i].rest < (lieblingsfinish*DoubleoutOderTripleout) ) )){
-                    i2++;
-                    ergebnisse[i2] = tl[i];
-                }
-            }
-        }
-        z=i2;
-
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((ergebnisse[i].x1 != 1) && (ergebnisse[i].x2 != 1)) {
-                    if ((ergebnisse[i + 1].x1 == 1) || (ergebnisse[i + 1].x2 == 1)) {
-                        change=true;
-                        speicher=ergebnisse[i];
-                        ergebnisse[i]=ergebnisse[i + 1];
-                        ergebnisse[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // 2x nach oben
-        change=true;
-        while (change) {
-            change=false;
-            for (i=1;i<=z-1;i++) {
-                // wenn folgeergebnis mitsingle ist, verschiebe mitsingles nach oben bzw. tausche ergebnisse aus
-                if ((ergebnisse[i].x1 == 3) && (ergebnisse[i].x2 == 3)) {
-                    if (((ergebnisse[i + 1].x1 == 2) && (ergebnisse[i + 1].x2 == 3) )
-                            || ((ergebnisse[i + 1].x1 == 3) && (ergebnisse[i + 1].x2 == 2))) {
-                        change=true;
-                        speicher=ergebnisse[i];
-                        ergebnisse[i]=ergebnisse[i + 1];
-                        ergebnisse[i + 1]=speicher;
-                    }
-                }
-            }
-        }
-
-        // ausgabe der gewaehlten restlichen treffer in hÃ¼bscher Formatierung
-        // rest:= x1*y1 + x2*y2 + DoubleoutOderTripleout*y3 = (1.pfeil + 2.pfeil + 3.pfeil)
-        String dt,str;
-        dt="";
-        if (DoubleoutOderTripleout==2) dt="D";
-        if (DoubleoutOderTripleout==3) dt="T";
-        i2=0;
-
-        ergebnisliste.add("...");
-        for (i=1;i<=z;i++) {
-            i2++;
-            str="";
-            if ((ergebnisse[i].x1*ergebnisse[i].y1) > 0)
-                switch (ergebnisse[i].x1) {
-                    case 1:
-                        str = str+ergebnisse[i].y1;
-                        break;
-                    case 2:
-                        str = str+"D"+ergebnisse[i].y1;
-                        break;
-                    case 3:
-                        str = str+"T"+ergebnisse[i].y1;
-                        break;
-                }
-            if ((ergebnisse[i].x2*ergebnisse[i].y2) > 0)
-                switch (ergebnisse[i].x2) {
-                    case 1:
-                        str = str+" "+ergebnisse[i].y2;
-                        break;
-                    case 2:
-                        str = str+" "+"D"+ergebnisse[i].y2;
-                        break;
-                    case 3:
-                        str = str+" "+"T"+ergebnisse[i].y2;
-                        break;
-                }
-            if (str.equals(""))
-                str=dt+ergebnisse[i].y3;
-            else str=str+" "+dt+ergebnisse[i].y3;
-
-            ergebnisliste.add(str);
-        }
-        if (rest == 2) {
-            ergebnisliste.remove(ergebnisliste.remove(ergebnisliste.size()-1));
-            ergebnisliste.add("MaDhOuSe");
-        }
-        return ergebnisliste;
+        return dc_modules.vorschlaege(rest, lieblingsfinish, DoubleoutOderTripleout);
     }
 
     private final AdapterView.OnItemSelectedListener vorschlagauswahlclick = new AdapterView.OnItemSelectedListener() {
diff --git a/app/src/main/java/com/DartChecker/roundtclock.java b/app/src/main/java/com/DartChecker/roundtclock.java
index 0e324b6..4cb668d 100644
--- a/app/src/main/java/com/DartChecker/roundtclock.java
+++ b/app/src/main/java/com/DartChecker/roundtclock.java
@@ -696,8 +696,13 @@ public class roundtclock extends AppCompatActivity {
                                         final TextView aufnahmetv = findViewById(R.id.aufnahmetv);
                                         if (spieler[aktiverSpieler].gewinnerplatz != 0)
                                             aufnahmetv.setText(spieler[aktiverSpieler].gewinnerplatz + ".");
-                                        else aufnahmetv.setText(Integer.toString(aufnahme));
+                                        else {
+                                            aufnahmetv.setText(Integer.toString(aufnahme));
+                                            dc_modules.playAudio(getApplicationContext(), Integer.toString(aufnahme));
+                                        }
+
                                         aufnahmetv.setVisibility(View.VISIBLE);
+
                                         new Handler().postDelayed(new Runnable() {
                                             @Override
                                             public void run() {
@@ -818,6 +823,7 @@ public class roundtclock extends AppCompatActivity {
                     textfeld(1, aktiverSpieler, 3).setTextSize(TypedValue.COMPLEX_UNIT_PX, textsizeaktiv);
                     textfeld(1, aktiverSpieler, 2).setTextSize(TypedValue.COMPLEX_UNIT_PX, textsizeaktiv);
                     dart = spieler[aktiverSpieler].score;
+                    dc_modules.playAudio(getApplicationContext(), Integer.toString(dart));
                     if (spielmodus.equals("1-20") && dart < 20) {
                         buttonselect(dart + 1).setVisibility(View.VISIBLE);
                     }
@@ -865,7 +871,8 @@ public class roundtclock extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_roundtclock);
         TypedValue outValue = new TypedValue();
diff --git a/app/src/main/java/com/DartChecker/spielende.java b/app/src/main/java/com/DartChecker/spielende.java
index 2e4aba4..eb83686 100644
--- a/app/src/main/java/com/DartChecker/spielende.java
+++ b/app/src/main/java/com/DartChecker/spielende.java
@@ -73,7 +73,8 @@ public class spielende extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_spielende);
         SharedPreferences settings = getSharedPreferences("Einstellungen",0);
diff --git a/app/src/main/java/com/DartChecker/spielerliste.java b/app/src/main/java/com/DartChecker/spielerliste.java
index 4537194..560e835 100644
--- a/app/src/main/java/com/DartChecker/spielerliste.java
+++ b/app/src/main/java/com/DartChecker/spielerliste.java
@@ -70,7 +70,8 @@ public class spielerliste extends AppCompatActivity implements viewadapter.ItemC
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_spielerliste);
         SharedPreferences settings = getSharedPreferences("Einstellungen",0);
diff --git a/app/src/main/java/com/DartChecker/statistik.java b/app/src/main/java/com/DartChecker/statistik.java
index b9d5ffe..2d7f490 100644
--- a/app/src/main/java/com/DartChecker/statistik.java
+++ b/app/src/main/java/com/DartChecker/statistik.java
@@ -102,7 +102,8 @@ public class statistik extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if (MainActivity.themeauswahl) setTheme(R.style.AppTheme);
+        if (MainActivity.themeauswahl && MainActivity.subdesignchoice) setTheme(R.style.AppThemeBlack);
+        else if (MainActivity.themeauswahl) setTheme(R.style.AppThemeDark);
         else setTheme(R.style.Theme_AppCompat_Light_NoActionBar);
         setContentView(R.layout.activity_statistik);
         ArrayAdapter<MainActivity.spieler> arrayAdapter = new ArrayAdapter<>(
