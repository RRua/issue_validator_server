diff --git a/app/src/main/java/com/example/swob_deku/BroadcastSMSDataActivity.java b/app/src/main/java/com/example/swob_deku/BroadcastSMSDataActivity.java
index a095cacb..036dc3f8 100644
--- a/app/src/main/java/com/example/swob_deku/BroadcastSMSDataActivity.java
+++ b/app/src/main/java/com/example/swob_deku/BroadcastSMSDataActivity.java
@@ -11,10 +11,14 @@ import android.util.Log;
 
 import com.example.swob_deku.Models.Images.ImageHandler;
 import com.example.swob_deku.Models.SMS.SMSHandler;
+import com.example.swob_deku.Models.Security.SecurityDH;
 import com.example.swob_deku.Models.Security.SecurityHelpers;
 
+import org.bouncycastle.operator.OperatorCreationException;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.security.GeneralSecurityException;
 
 public class BroadcastSMSDataActivity extends BroadcastReceiver {
 
@@ -29,57 +33,60 @@ public class BroadcastSMSDataActivity extends BroadcastReceiver {
             Log.d(getClass().getName(), "New data received..");
 
         if (intent.getAction().equals(Telephony.Sms.Intents.DATA_SMS_RECEIVED_ACTION)) {
+            if (getResultCode() == Activity.RESULT_OK) {
+                ByteArrayOutputStream messageBuffer = new ByteArrayOutputStream();
+                String address = "";
 
-            switch (getResultCode()) {
-                case Activity.RESULT_OK:
-                    ByteArrayOutputStream messageBuffer = new ByteArrayOutputStream();
-                    String address = new String();
-
-                    for (SmsMessage currentSMS : Telephony.Sms.Intents.getMessagesFromIntent(intent)) {
-                        address = currentSMS.getDisplayOriginatingAddress();
+                for (SmsMessage currentSMS : Telephony.Sms.Intents.getMessagesFromIntent(intent)) {
+                    address = currentSMS.getDisplayOriginatingAddress();
 
-                        try {
-                            messageBuffer.write(currentSMS.getUserData());
-                        } catch (IOException e) {
-                            throw new RuntimeException(e);
-                        }
+                    try {
+                        messageBuffer.write(currentSMS.getUserData());
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
                     }
+                }
+
+                long messageId = -1;
+                try {
+                    String strMessage = messageBuffer.toString();
+                    if (strMessage.contains(SecurityHelpers.FIRST_HEADER)) {
+                        // TODO: register message and store the reference in a shared reference location
+                        messageId = SMSHandler.registerIncomingMessage(context, address, strMessage);
+                        registerIncomingAgreement(context, address, messageBuffer.toByteArray(), 0);
+                    } else if (strMessage.contains(SecurityHelpers.END_HEADER)) {
+                        // TODO: search for registered message and get content from shared reference location
+                        messageId = SMSHandler.registerIncomingMessage(context, address, strMessage);
+                        registerIncomingAgreement(context, address, messageBuffer.toByteArray(), 1);
+                    }
+                    broadcastIntent(context);
 
-                    long messageId = -1;
-                    try {
-                        String strMessage = messageBuffer.toString();
-                        if(strMessage.contains(SecurityHelpers.FIRST_HEADER)){
-                            // TODO: register message and store the reference in a sharedreference location
-                            messageId = SMSHandler.registerIncomingMessage(context, address, strMessage);
-//                            String notificationNote = "New Key request";
-//                            BroadcastSMSTextActivity.sendNotification(context, notificationNote, address, messageId);
-                        }
-                        else if(strMessage.contains(SecurityHelpers.END_HEADER)){
-                            // TODO: search for registered message and get content from sharedreference location
-                            messageId = SMSHandler.registerIncomingMessage(context, address, strMessage);
-                        }
-                        if(checkMessagesAvailable()) {
-                            String notificationNote = "New Key request";
-                            BroadcastSMSTextActivity.sendNotification(context, notificationNote, address, messageId);
-                        }
-                        broadcastIntent(context);
-
-                    }catch(Exception e ) {
-                        e.printStackTrace();
+                    if(checkMessagesAvailable(context, address)) {
+                        String notificationNote = "New Key request";
+
+                        BroadcastSMSTextActivity.sendNotification(context, notificationNote,
+                                address, messageId);
                     }
-                    break;
+
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
             }
         }
     }
 
+    private void registerIncomingAgreement(Context context, String msisdn, byte[] keyPart, int part) throws GeneralSecurityException, IOException, OperatorCreationException {
+        SecurityDH securityDH = new SecurityDH(context);
+        securityDH.securelyStorePublicKeyKeyPair(context, msisdn, keyPart, part);
+    }
+
     private void broadcastIntent(Context context) {
-//        DATA_SMS_RECEIVED_ACTION
         Intent intent = new Intent(BuildConfig.APPLICATION_ID + ".DATA_SMS_RECEIVED_ACTION");
         context.sendBroadcast(intent);
     }
 
-    private boolean checkMessagesAvailable() {
-        return false;
+    private boolean checkMessagesAvailable(Context context, String msisdn) throws GeneralSecurityException, IOException {
+        SecurityDH securityDH = new SecurityDH(context);
+        return securityDH.peerAgreementPublicKeysAvailable(context, msisdn);
     }
-
 }
diff --git a/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java b/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
index 83c8dd9f..8e3745b0 100644
--- a/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
+++ b/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
@@ -200,7 +200,7 @@ public class MessagesThreadsActivity extends AppCompatActivity {
         SecurityDH securityDH = new SecurityDH(getApplicationContext());
 
         String testMSISDN = "+237123456789";
-        PublicKey publicKey = securityDH.generateKeyPairFromPublicKey(pubKeySpecs, testMSISDN);
+        PublicKey publicKey = securityDH.generateKeyPairFromPublicKey(pubKeySpecs);
 
         return publicKey.getEncoded();
     }
diff --git a/app/src/main/java/com/example/swob_deku/Models/Security/SecurityDH.java b/app/src/main/java/com/example/swob_deku/Models/Security/SecurityDH.java
index 29635fc0..79bee9c7 100644
--- a/app/src/main/java/com/example/swob_deku/Models/Security/SecurityDH.java
+++ b/app/src/main/java/com/example/swob_deku/Models/Security/SecurityDH.java
@@ -92,16 +92,15 @@ public class SecurityDH {
     }
 
     private PrivateKey securelyFetchPrivateKey(String keystoreAlias) throws GeneralSecurityException, IOException {
-        keystoreAlias += "-private-key";
         SharedPreferences encryptedSharedPreferences = EncryptedSharedPreferences.create(
                 context,
                 keystoreAlias,
-                this.masterKeyAlias,
+                masterKeyAlias,
                 EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                 EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM );
 
         String encryptedSharedKey = encryptedSharedPreferences.getString(
-                keystoreAlias, "");
+                keystoreAlias + "-private-key", "");
 
         byte[] privateKeyDecoded = Base64.decode(encryptedSharedKey, Base64.DEFAULT);
         KeyFactory keyFactory = KeyFactory.getInstance(DEFAULT_ALGORITHM); // Replace "RSA" with your key algorithm
@@ -111,10 +110,7 @@ public class SecurityDH {
     }
 
     private void securelyStorePrivateKeyKeyPair(Context context, String keystoreAlias, KeyPair keyPair) throws GeneralSecurityException, IOException, OperatorCreationException {
-
         // TODO: make alias know it's private key stored now
-        keystoreAlias += "-private-key";
-
         SharedPreferences encryptedSharedPreferences = EncryptedSharedPreferences.create(
                 context,
                 keystoreAlias,
@@ -124,7 +120,7 @@ public class SecurityDH {
 
         SharedPreferences.Editor sharedPreferencesEditor = encryptedSharedPreferences.edit();
 
-        sharedPreferencesEditor.putString(keystoreAlias,
+        sharedPreferencesEditor.putString(keystoreAlias + "-private-key",
                 Base64.encodeToString(keyPair.getPrivate().getEncoded(), Base64.DEFAULT));
 
         if(!sharedPreferencesEditor.commit()) {
@@ -134,32 +130,47 @@ public class SecurityDH {
 
     public void securelyStorePublicKeyKeyPair(Context context, String keystoreAlias, byte[] keyValue, int part) throws GeneralSecurityException, IOException, OperatorCreationException {
         // TODO: make alias know it's private key stored now
-        String formattedKeystoreAlias = keystoreAlias + "-public-key-" + part;
-
         SharedPreferences encryptedSharedPreferences = EncryptedSharedPreferences.create(
                 context,
-                formattedKeystoreAlias,
+                keystoreAlias,
                 masterKeyAlias,
                 EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                 EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM );
 
+        SharedPreferences.Editor sharedPreferencesEditor = encryptedSharedPreferences.edit();
+
+        String formattedKeystoreAlias = keystoreAlias + "-public-key-" + part;
         String otherFormattedKeystoreAlias = keystoreAlias + "-public-key-" + (part == 1 ? 0 : 1);
 
         if(encryptedSharedPreferences.contains(otherFormattedKeystoreAlias)) {
             // TODO: build the key now
             String otherPart = encryptedSharedPreferences.getString(otherFormattedKeystoreAlias, "");
-            String merged = part == 0 ? otherPart + Base64.encodeToString(keyValue, Base64.DEFAULT) :
-                    Base64.encodeToString(keyValue, Base64.DEFAULT) + otherPart;
 
-        }
+            byte[] otherPartByte = Base64.decode(otherPart, Base64.DEFAULT);
 
-        SharedPreferences.Editor sharedPreferencesEditor = encryptedSharedPreferences.edit();
+            byte[] merged = new byte[otherPartByte.length + keyValue.length];
 
-        sharedPreferencesEditor.putString(keystoreAlias,
-                Base64.encodeToString(keyValue, Base64.DEFAULT));
+            if(part == 0) {
+                System.arraycopy(keyValue, 0, merged, 0, keyValue.length);
+            } else {
+                System.arraycopy(otherPartByte, 0, merged, 0, otherPartByte.length);
+            }
 
-        if(!sharedPreferencesEditor.commit()) {
-            throw new RuntimeException("Failed to store MSISDN");
+            sharedPreferencesEditor
+                    .remove(otherFormattedKeystoreAlias)
+                    .remove(formattedKeystoreAlias)
+                    .putString(keystoreAlias, Base64.encodeToString(merged, Base64.DEFAULT));
+
+            if(!sharedPreferencesEditor.commit()) {
+                throw new RuntimeException("Failed to store merged agreement");
+            }
+        } else {
+            sharedPreferencesEditor.putString(formattedKeystoreAlias,
+                    Base64.encodeToString(keyValue, Base64.DEFAULT));
+
+            if (!sharedPreferencesEditor.commit()) {
+                throw new RuntimeException("Failed to store public key part");
+            }
         }
     }
 
@@ -174,7 +185,7 @@ public class SecurityDH {
         return encryptedSharedPreferences.contains(keystoreAlias);
     }
 
-    public PublicKey generateKeyPairFromPublicKey(byte[] publicKeyEnc, String msisdnAsAlias) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidAlgorithmParameterException, InvalidKeyException {
+    public PublicKey generateKeyPairFromPublicKey(byte[] publicKeyEnc) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidAlgorithmParameterException, InvalidKeyException {
         KeyFactory bobKeyFac = KeyFactory.getInstance(DEFAULT_ALGORITHM);
         X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKeyEnc);
 
diff --git a/app/src/main/java/com/example/swob_deku/SMSSendActivity.java b/app/src/main/java/com/example/swob_deku/SMSSendActivity.java
index 60c6c9cb..81e74867 100644
--- a/app/src/main/java/com/example/swob_deku/SMSSendActivity.java
+++ b/app/src/main/java/com/example/swob_deku/SMSSendActivity.java
@@ -389,7 +389,7 @@ public class SMSSendActivity extends AppCompatActivity {
             public void onReceive(Context context, Intent intent) {
                 Log.d(getLocalClassName(), "Broadcast received data!");
                 singleMessageViewModel.informNewItemChanges();
-                cancelNotifications(getIntent().getStringExtra(THREAD_ID));
+//                cancelNotifications(getIntent().getStringExtra(THREAD_ID));
             }
         };
 
