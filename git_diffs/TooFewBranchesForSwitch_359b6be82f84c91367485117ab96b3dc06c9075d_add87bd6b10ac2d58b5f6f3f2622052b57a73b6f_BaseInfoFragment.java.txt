diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyInfo.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyInfo.java
index a67ee0d..da8eaff 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyInfo.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyInfo.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.data;
 
 import android.content.Context;
@@ -26,7 +26,7 @@ import aws.apps.usbDeviceEnumerator.BuildConfig;
 public class DataProviderCompanyInfo implements DataProvider {
     public static final String UNKNOWN_RESULT = "not found";
     private final String TAG = this.getClass().getName();
-    private Context context;
+    private final Context context;
 
     private String fileFullPath = "";
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyLogo.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyLogo.java
index cc59552..6db9ede 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyLogo.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderCompanyLogo.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.data;
 
 import android.content.Context;
@@ -32,7 +32,7 @@ import aws.apps.usbDeviceEnumerator.BuildConfig;
 
 public class DataProviderCompanyLogo implements DataProvider {
     private final String TAG = this.getClass().getName();
-    private Context context;
+    private final Context context;
 
     private String fileFullPath = "";
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderUsbInfo.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderUsbInfo.java
index c2a95d6..97a159b 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderUsbInfo.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DataProviderUsbInfo.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.data;
 
 import android.content.Context;
@@ -27,7 +27,7 @@ public class DataProviderUsbInfo implements DataProvider {
 
     public static final String UNKNOWN_RESULT = "not found";
     private final String TAG = this.getClass().getName();
-    private Context context;
+    private final Context context;
 
     private String fileFullPath = "";
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
index 6016f44..f749200 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/StorageUtils.java
@@ -3,11 +3,11 @@ package aws.apps.usbDeviceEnumerator.data;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.v4.content.ContextCompat;
 import android.util.Log;
 
 import java.io.File;
 
+import androidx.core.content.ContextCompat;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.util.NotifyUser;
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java
index 15b2aff..3d060dc 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java
@@ -2,18 +2,18 @@ package aws.apps.usbDeviceEnumerator.ui.common;
 
 import android.app.Dialog;
 import android.content.Context;
-import android.support.v7.app.AlertDialog;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.TextView;
 
+import androidx.appcompat.app.AlertDialog;
 import aws.apps.usbDeviceEnumerator.R;
 
 public class DialogFactory {
 
     public static Dialog createOkDialog(final Context context, final int title, final int message) {
         final View view = LayoutInflater.from(context).inflate(R.layout.dialog_textview, null);
-        final TextView textView = (TextView) view.findViewById(R.id.text);
+        final TextView textView = view.findViewById(R.id.text);
 
         textView.setText(message);
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
index c74e7ed..343d38e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
@@ -1,12 +1,12 @@
 package aws.apps.usbDeviceEnumerator.ui.common;
 
 import android.content.Intent;
-import android.support.v4.app.ActivityCompat;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.app.ActivityCompat;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.UsbInfoActivity;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
index b66da46..e96cb08 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
@@ -2,7 +2,6 @@ package aws.apps.usbDeviceEnumerator.ui.dbupdate;
 
 import android.app.AlertDialog;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.os.Environment;
 import android.util.Log;
 
@@ -46,14 +45,10 @@ public class DatabaseUpdater {
 
             builder.setMessage(R.string.alert_update_db)
                     .setNegativeButton(android.R.string.no, null)
-                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
-                        @SuppressWarnings("unchecked")
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            final FileDownloadTask.Downloadable[] array
-                                    = downloadables.toArray(new FileDownloadTask.Downloadable[downloadables.size()]);
-                            new FileDownloadTask(context, progressDialogControl).execute(array);
-                        }
+                    .setPositiveButton(android.R.string.yes, (dialog, which) -> {
+                        final FileDownloadTask.Downloadable[] array
+                                = downloadables.toArray(new FileDownloadTask.Downloadable[0]);
+                        new FileDownloadTask(context, progressDialogControl).execute(array);
                     });
 
             builder.create().show();
@@ -82,7 +77,7 @@ public class DatabaseUpdater {
     }
 
     private List<FileDownloadTask.Downloadable> createDownloadables(final Context context) {
-        final List<FileDownloadTask.Downloadable> downloads = new ArrayList<FileDownloadTask.Downloadable>();
+        final List<FileDownloadTask.Downloadable> downloads = new ArrayList<>();
 
         downloads.add(new FileDownloadTask.Downloadable(
                 dbAccessUsb.getUrl(),
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java
index 6469f2f..32503e4 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java
@@ -60,7 +60,7 @@ import aws.apps.usbDeviceEnumerator.util.NotifyUser;
                     is = new BufferedInputStream(url.openStream());
                     os = new FileOutputStream(filePath);
 
-                    final byte data[] = new byte[1024];
+                    final byte[] data = new byte[1024];
 
                     long total = 0;
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
index 0f00a28..09448a5 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/DebugActivity.java
@@ -1,40 +1,34 @@
 package aws.apps.usbDeviceEnumerator.ui.debug;
 
 import android.os.Bundle;
-import android.support.design.widget.TabLayout;
-import android.support.v4.app.Fragment;
-import android.support.v4.view.ViewPager;
-import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 
+import com.google.android.material.tabs.TabLayout;
+
 import java.util.Set;
 
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.viewpager.widget.ViewPager;
 import aws.apps.usbDeviceEnumerator.R;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class DebugActivity extends AppCompatActivity {
     private static final String TAG = DebugActivity.class.getSimpleName();
     private static final int LAYOUT_ID = R.layout.act_viewpager;
     private static final int MENU_ID = R.menu.debug_menu;
 
-    @BindView(R.id.tabs)
-    protected TabLayout tabLayout;
-
-    @BindView(R.id.pager)
-    protected ViewPager viewPager;
-
     private TabAdapter tabAdapter;
 
     @Override
     public void onCreate(final Bundle bundle) {
         super.onCreate(bundle);
         setContentView(LAYOUT_ID);
-        ButterKnife.bind(this);
 
+        final ViewPager viewPager = findViewById(R.id.pager);
+        final TabLayout tabLayout = findViewById(R.id.tabs);
         tabAdapter = new TabAdapter(this, getSupportFragmentManager());
 
         viewPager.setOffscreenPageLimit(3);
@@ -51,16 +45,15 @@ public class DebugActivity extends AppCompatActivity {
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_refresh:
-                final Set<Fragment> fragments = tabAdapter.getItems();
-                for (final Fragment fragment : fragments) {
-                    if (fragment instanceof Reloadable) {
-                        Log.d(TAG, "Reloading: " + fragment);
-                        ((Reloadable) fragment).reload();
-                    }
+        if (item.getItemId() == R.id.menu_refresh) {
+            final Set<Fragment> fragments = tabAdapter.getItems();
+            for (final Fragment fragment : fragments) {
+                if (fragment instanceof Reloadable) {
+                    Log.d(TAG, "Reloading: " + fragment);
+                    ((Reloadable) fragment).reload();
                 }
-                return true;
+            }
+            return true;
         }
         return false;
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
index b0dfd0c..7cb22d3 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/TabAdapter.java
@@ -1,26 +1,27 @@
 package aws.apps.usbDeviceEnumerator.ui.debug;
 
 import android.content.Context;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentPagerAdapter;
 import android.view.ViewGroup;
 
 import java.util.HashSet;
 import java.util.Set;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentPagerAdapter;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DeviceDumpFragment;
 import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpFragment;
 import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragment;
 
 /*package*/ class TabAdapter extends FragmentPagerAdapter {
-    private static Class<?>[] FRAGMENT_ARRAY = {
+    private static final Class<?>[] FRAGMENT_ARRAY = {
             DirectoryDumpFragment.class,
             DirectoryDumpNativeFragment.class,
             DeviceDumpFragment.class,
     };
-    private static int[] TITLE_ARRAY = {
+    private static final int[] TITLE_ARRAY = {
             R.string.label_tab_directory_dump,
             R.string.label_tab_directory_dump_native,
             R.string.label_tab_device_dump,
@@ -45,6 +46,7 @@ import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragme
         return context.getString(TITLE_ARRAY[position]);
     }
 
+    @NonNull
     @Override
     public Fragment getItem(int position) {
         final Fragment fragment = Fragment.instantiate(context, FRAGMENT_ARRAY[position].getName());
@@ -53,13 +55,14 @@ import aws.apps.usbDeviceEnumerator.ui.debug.fragments.DirectoryDumpNativeFragme
     }
 
     @Override
-    public void destroyItem(ViewGroup container, int position, Object object) {
+    public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) {
         super.destroyItem(container, position, object);
         registeredFragments.remove(object);
     }
 
+    @NonNull
     @Override
-    public Object instantiateItem(ViewGroup container, int position) {
+    public Object instantiateItem(@NonNull ViewGroup container, int position) {
         final Object fragment = super.instantiateItem(container, position);
         registeredFragments.add((Fragment) fragment);
         return fragment;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
index 998d2d6..efa52a0 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDump.java
@@ -1,9 +1,6 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.content.Context;
-import android.support.annotation.ColorInt;
-import android.support.annotation.NonNull;
-import android.support.v4.content.ContextCompat;
 import android.text.Spannable;
 import android.text.SpannableStringBuilder;
 import android.text.style.CharacterStyle;
@@ -12,6 +9,9 @@ import android.text.style.ForegroundColorSpan;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import androidx.annotation.ColorInt;
+import androidx.annotation.NonNull;
+import androidx.core.content.ContextCompat;
 import aws.apps.usbDeviceEnumerator.R;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.dump.ShellSysBusDumper;
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
index b549458..12552c8 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DeviceDumpFragment.java
@@ -1,23 +1,21 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
 import aws.apps.usbDeviceEnumerator.util.Constants;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class DeviceDumpFragment extends Fragment implements Reloadable {
     private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
 
-    @BindView(android.R.id.content)
-    protected TextView textView;
+    private TextView textView;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
@@ -25,9 +23,9 @@ public class DeviceDumpFragment extends Fragment implements Reloadable {
     }
 
     @Override
-    public void onViewCreated(View view, Bundle bundle) {
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
-        ButterKnife.bind(this, view);
+        textView = view.findViewById(android.R.id.content);
         textView.setMaxLines(Integer.MAX_VALUE);
     }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
index dd6f281..0799091 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDump.java
@@ -1,13 +1,13 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.content.Context;
-import android.support.annotation.NonNull;
 import android.text.SpannableStringBuilder;
 
 import java.io.File;
 import java.util.Arrays;
 import java.util.Comparator;
 
+import androidx.annotation.NonNull;
 import aws.apps.usbDeviceEnumerator.R;
 
 /*package*/ class DirectoryDump {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
index 9c33bc7..ddfc03e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpFragment.java
@@ -1,23 +1,21 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
 import aws.apps.usbDeviceEnumerator.util.Constants;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class DirectoryDumpFragment extends Fragment implements Reloadable {
     private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
 
-    @BindView(android.R.id.content)
-    protected TextView textView;
+    private TextView textView;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
@@ -25,9 +23,9 @@ public class DirectoryDumpFragment extends Fragment implements Reloadable {
     }
 
     @Override
-    public void onViewCreated(View view, Bundle bundle) {
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
-        ButterKnife.bind(this, view);
+        textView = view.findViewById(android.R.id.content);
         textView.setMaxLines(Integer.MAX_VALUE);
     }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
index cf9b228..9838963 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNative.java
@@ -1,7 +1,6 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.content.Context;
-import android.support.annotation.NonNull;
 
 import java.io.BufferedReader;
 import java.io.Closeable;
@@ -9,9 +8,11 @@ import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.Arrays;
 
+import androidx.annotation.NonNull;
+
 /*package*/ class DirectoryDumpNative {
 
-    @SuppressWarnings({"StringConcatenationInsideStringBufferAppend", "TryWithIdenticalCatches"})
+    @SuppressWarnings({"StringConcatenationInsideStringBufferAppend"})
     public static CharSequence getDump(@NonNull final Context context,
                                        @NonNull final String dir) {
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
index 1839632..4c29aec 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/debug/fragments/DirectoryDumpNativeFragment.java
@@ -1,25 +1,21 @@
 package aws.apps.usbDeviceEnumerator.ui.debug.fragments;
 
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import java.io.File;
-
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.debug.Reloadable;
 import aws.apps.usbDeviceEnumerator.util.Constants;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class DirectoryDumpNativeFragment extends Fragment implements Reloadable {
     private static final int LAYOUT_ID = R.layout.fragment_monospace_textview;
 
-    @BindView(android.R.id.content)
-    protected TextView textView;
+    private TextView textView;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
@@ -27,9 +23,9 @@ public class DirectoryDumpNativeFragment extends Fragment implements Reloadable
     }
 
     @Override
-    public void onViewCreated(View view, Bundle bundle) {
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
-        ButterKnife.bind(this, view);
+        textView = view.findViewById(android.R.id.content);
         textView.setMaxLines(Integer.MAX_VALUE);
     }
 
@@ -37,7 +33,6 @@ public class DirectoryDumpNativeFragment extends Fragment implements Reloadable
     public void reload() {
         if (isAdded() && getActivity() != null && getView() != null) {
             final String dirString = Constants.PATH_SYS_BUS_USB;
-            final File directory = new File(dirString);
             textView.setText(DirectoryDumpNative.getDump(getContext(), dirString));
         }
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java
index 974c546..d6abae0 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java
@@ -4,7 +4,6 @@ import android.app.Activity;
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
-import android.support.v7.app.AlertDialog;
 import android.text.SpannableString;
 import android.text.method.LinkMovementMethod;
 import android.text.util.Linkify;
@@ -12,6 +11,7 @@ import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.TextView;
 
+import androidx.appcompat.app.AlertDialog;
 import aws.apps.usbDeviceEnumerator.BuildConfig;
 import aws.apps.usbDeviceEnumerator.R;
 
@@ -40,7 +40,7 @@ import aws.apps.usbDeviceEnumerator.R;
 
     public static Dialog createAboutDialog(final Context context) {
         final View view = LayoutInflater.from(context).inflate(R.layout.dialog_textview, null);
-        final TextView textView = (TextView) view.findViewById(R.id.text);
+        final TextView textView = view.findViewById(R.id.text);
 
         final SpannableString text = new SpannableString(constructAboutText(context));
 
@@ -50,9 +50,7 @@ import aws.apps.usbDeviceEnumerator.R;
 
         Linkify.addLinks(text, Linkify.ALL);
 
-        final DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
-            public void onClick(final DialogInterface dialog, final int id) {
-            }
+        final DialogInterface.OnClickListener listener = (dialog, id) -> {
         };
 
         return new AlertDialog.Builder(context)
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
index a7401f2..9ef9fa9 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.ui.main;
 
 import android.content.Context;
@@ -20,16 +20,10 @@ import android.content.Intent;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbManager;
 import android.os.Bundle;
-import android.support.v4.app.ActivityCompat;
-import android.support.v4.app.Fragment;
-import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
-import android.view.View;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
 import android.widget.ArrayAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
@@ -39,6 +33,9 @@ import java.io.File;
 import java.util.Arrays;
 import java.util.Map;
 
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.app.ActivityCompat;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
@@ -101,34 +98,21 @@ public class MainActivity extends AppCompatActivity {
         mDbComp = new DataProviderCompanyInfo(this);
         mZipComp = new DataProviderCompanyLogo(this);
 
-        mTabController.setup(new TabController.OnTabChangeListener() {
-            @Override
-            public void onTabChangeListener(String tag, TabViewHolder holder) {
-                onTabChanged(tag, holder);
-            }
-        });
+        mTabController.setup(this::onTabChanged);
 
         // Setup android list - tab1;
         mTabController.getHolderForTag(TabController.TAB_ANDROID_INFO)
-                .getList().setOnItemClickListener(new OnItemClickListener() {
-
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                ((ListView) parent).setItemChecked(position, true);
-                mNavigation.showAndroidUsbDeviceInfo(((TextView) view).getText().toString());
-            }
+                .getList().setOnItemClickListener((parent, view, position, id) -> {
+            ((ListView) parent).setItemChecked(position, true);
+            mNavigation.showAndroidUsbDeviceInfo(((TextView) view).getText().toString());
         });
 
 
         // Setup linux list - tab2
         mTabController.getHolderForTag(TabController.TAB_LINUX_INFO)
-                .getList().setOnItemClickListener(new OnItemClickListener() {
-
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                ((ListView) parent).setItemChecked(position, true);
-                mNavigation.showLinuxUsbDeviceInfo(mLinuxDeviceMap.get(((TextView) view).getText().toString()));
-            }
+                .getList().setOnItemClickListener((parent, view, position, id) -> {
+            ((ListView) parent).setItemChecked(position, true);
+            mNavigation.showLinuxUsbDeviceInfo(mLinuxDeviceMap.get(((TextView) view).getText().toString()));
         });
 
 
@@ -217,7 +201,7 @@ public class MainActivity extends AppCompatActivity {
     }
 
     private void updateList(final TabViewHolder holder, final Map<String, ?> map) {
-        final String[] array = map.keySet().toArray(new String[map.keySet().size()]);
+        final String[] array = map.keySet().toArray(new String[0]);
 
         Arrays.sort(array);
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
index 1bc51ed..226fa6c 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
@@ -1,14 +1,13 @@
 package aws.apps.usbDeviceEnumerator.ui.main.tabs;
 
 import android.app.Activity;
-import android.support.design.widget.TabLayout;
-import android.support.v4.view.ViewPager;
 import android.view.LayoutInflater;
 import android.view.View;
 
+import com.google.android.material.tabs.TabLayout;
+
+import androidx.viewpager.widget.ViewPager;
 import aws.apps.usbDeviceEnumerator.R;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class TabController {
     public final static String TAB_ANDROID_INFO = "tab_android";
@@ -18,18 +17,15 @@ public class TabController {
     private static final String[] TAB_TAGS = {TAB_ANDROID_INFO, TAB_LINUX_INFO};
 
     private final Activity activity;
-
-    @BindView(R.id.tabs)
-    protected TabLayout tabLayout;
-
-    @BindView(R.id.pager)
-    protected ViewPager viewPager;
+    private final TabLayout tabLayout;
+    private final ViewPager viewPager;
 
     private TabViewHolder[] tabViewHolders;
 
     public TabController(final Activity activity) {
-        ButterKnife.bind(this, activity);
         this.activity = activity;
+        viewPager = activity.findViewById(R.id.pager);
+        tabLayout = activity.findViewById(R.id.tabs);
     }
 
     public void setup(final OnTabChangeListener listener) {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java
index 33d1bf8..b623c48 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java
@@ -1,10 +1,12 @@
 package aws.apps.usbDeviceEnumerator.ui.main.tabs;
 
 import android.content.Context;
-import android.support.v4.view.PagerAdapter;
 import android.view.View;
 import android.view.ViewGroup;
 
+import androidx.annotation.NonNull;
+import androidx.viewpager.widget.PagerAdapter;
+
 /*package*/ class TabPagerAdapter extends PagerAdapter {
 
     private final Context context;
@@ -22,6 +24,7 @@ import android.view.ViewGroup;
         this.pages = pages;
     }
 
+    @NonNull
     @Override
     public Object instantiateItem(ViewGroup collection, int position) {
         collection.addView(pages[position], 0);
@@ -29,7 +32,7 @@ import android.view.ViewGroup;
     }
 
     @Override
-    public void destroyItem(ViewGroup collection, int position, Object view) {
+    public void destroyItem(ViewGroup collection, int position, @NonNull Object view) {
         collection.removeView((View) view);
     }
 
@@ -39,7 +42,7 @@ import android.view.ViewGroup;
     }
 
     @Override
-    public boolean isViewFromObject(View view, Object object) {
+    public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {
         return view == object;
     }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
index a9612fb..65a2647 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
@@ -5,25 +5,23 @@ import android.widget.ListView;
 import android.widget.TextView;
 
 import aws.apps.usbDeviceEnumerator.R;
-import butterknife.BindView;
-import butterknife.ButterKnife;
 
 public class TabViewHolder {
 
     private final View rootView;
-    @BindView(android.R.id.list)
-    protected ListView list;
-    @BindView(android.R.id.empty)
-    protected View empty;
-    @BindView(R.id.count)
-    protected TextView count;
+    private final ListView list;
+    private final View empty;
+    private final TextView count;
 
     public TabViewHolder(final View rootView) {
-        ButterKnife.bind(this, rootView);
-
         this.rootView = rootView;
-        this.list.setEmptyView(empty);
-        this.list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
+
+        list = rootView.findViewById(android.R.id.list);
+        empty = rootView.findViewById(android.R.id.empty);
+        count = rootView.findViewById(R.id.count);
+
+        list.setEmptyView(empty);
+        list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
     }
 
     public ListView getList() {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java
index d9c7e80..7af909e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java
@@ -1,11 +1,11 @@
 package aws.apps.usbDeviceEnumerator.ui.progress;
 
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
 import android.util.Log;
 
+import androidx.fragment.app.DialogFragment;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentTransaction;
 import aws.apps.usbDeviceEnumerator.R;
 
 public class ProgressDialogControl {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
index 54aef7c..3f6fc5e 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
@@ -3,7 +3,9 @@ package aws.apps.usbDeviceEnumerator.ui.progress;
 import android.app.Dialog;
 import android.app.ProgressDialog;
 import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
+
+import androidx.annotation.NonNull;
+import androidx.fragment.app.DialogFragment;
 
 public class ProgressDialogFragment extends DialogFragment {
 
@@ -22,6 +24,7 @@ public class ProgressDialogFragment extends DialogFragment {
         setRetainInstance(true);
     }
 
+    @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         int title = getArguments().getInt("title");
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
index 3f237e1..87e2c61 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
@@ -1,26 +1,26 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.AppCompatActivity;
 import android.view.MenuItem;
 
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentTransaction;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments.FragmentFactory;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
@@ -63,10 +63,9 @@ public class UsbInfoActivity extends AppCompatActivity {
 
     @Override
     public boolean onOptionsItemSelected(final MenuItem item) {
-        switch (item.getItemId()) {
-            case android.R.id.home:
-                onBackPressed();
-                return true;
+        if (item.getItemId() == android.R.id.home) {
+            onBackPressed();
+            return true;
         }
         return super.onOptionsItemSelected(item);
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java
index bd6dd05..c2b6184 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/BaseInfoFragment.java
@@ -1,25 +1,23 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -28,6 +26,8 @@ import android.widget.TableLayout;
 import android.widget.TableRow;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
@@ -38,7 +38,7 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
     private DataFetcher dataFetcher;
 
     @Override
-    public void onAttach(final Context context) {
+    public void onAttach(@NonNull final Context context) {
         super.onAttach(context);
         dataFetcher = new DataFetcher(
                 new DataProviderCompanyInfo(context),
@@ -53,20 +53,19 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
     }
 
     @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+    public void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {
         inflater.inflate(R.menu.frag_menu, menu);
         super.onCreateOptionsMenu(menu, inflater);
     }
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.menu_export:
-                ShareUtils.share(
-                        getActivity(),
-                        getString(R.string.app_name),
-                        getSharePayload());
-                return true;
+        if (item.getItemId() == R.id.menu_export) {
+            ShareUtils.share(
+                    getActivity(),
+                    getString(R.string.app_name),
+                    getSharePayload());
+            return true;
         }
         return super.onOptionsItemSelected(item);
     }
@@ -79,27 +78,19 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
                                  final String pid,
                                  final String reportedVendorName) {
 
-        dataFetcher.fetchData(vid, pid, reportedVendorName, new DataFetcher.Callback() {
-            @Override
-            public void onSuccess(final String vendorFromDb,
-                                  final String productFromDb,
-                                  final Bitmap bitmap) {
+        dataFetcher.fetchData(vid, pid, reportedVendorName, (vendorFromDb, productFromDb, bitmap) -> {
 
-                if (isAdded() && getActivity() != null && getView() != null) {
-                    getActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            viewHolder.getVendorFromDb().setText(vendorFromDb);
-                            viewHolder.getProductFromDb().setText(productFromDb);
-                            if (bitmap != null) {
-                                final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
-                                viewHolder.getLogo().setImageDrawable(drawable);
-                            } else {
-                                viewHolder.getLogo().setImageResource(R.drawable.no_image);
-                            }
-                        }
-                    });
-                }
+            if (isAdded() && getActivity() != null && getView() != null) {
+                getActivity().runOnUiThread(() -> {
+                    viewHolder.getVendorFromDb().setText(vendorFromDb);
+                    viewHolder.getProductFromDb().setText(productFromDb);
+                    if (bitmap != null) {
+                        final BitmapDrawable drawable = new BitmapDrawable(getContext().getResources(), bitmap);
+                        viewHolder.getLogo().setImageDrawable(drawable);
+                    } else {
+                        viewHolder.getLogo().setImageResource(R.drawable.no_image);
+                    }
+                });
             }
         });
     }
@@ -109,8 +100,8 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
                               String cell1Text,
                               String cell2Text) {
         final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
-        final TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
-        final TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
+        final TextView tv1 = row.findViewById(R.id.usb_tablerow_cell1);
+        final TextView tv2 = row.findViewById(R.id.usb_tablerow_cell2);
         tv1.setText(cell1Text);
         tv2.setText(cell2Text);
         tlb.addView(row);
@@ -119,9 +110,9 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
     protected String padLeft(String string,
                              String padding,
                              int size) {
-        String pad = "";
+        StringBuilder pad = new StringBuilder();
         while ((pad + string).length() < size) {
-            pad += padding + pad;
+            pad.append(padding).append(pad);
         }
         return pad + string;
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
index 2c20f7e..64aefbe 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/DataFetcher.java
@@ -24,40 +24,37 @@ import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
                           final String reportedVendorName,
                           final Callback callback) {
 
-        final Runnable runnable = new Runnable() {
-            @Override
-            public void run() {
-                final String vendorFromDb;
-                final String productFromDb;
-                final Bitmap bitmap;
-
-                if (dbUsb.isDataAvailable()) {
-                    vendorFromDb = dbUsb.getVendorName(vid);
-                    productFromDb = dbUsb.getProductName(vid, pid);
-
-                    if (dbComp.isDataAvailable()) {
-                        final String searchFor;
-
-                        if (!TextUtils.isEmpty(vendorFromDb)) {
-                            searchFor = vendorFromDb;
-                        } else {
-                            searchFor = reportedVendorName;
-                        }
-
-                        final String logo = dbComp.getLogoName(searchFor);
-                        bitmap = zipComp.getLogoBitmap(logo);
+        final Runnable runnable = () -> {
+            final String vendorFromDb;
+            final String productFromDb;
+            final Bitmap bitmap;
+
+            if (dbUsb.isDataAvailable()) {
+                vendorFromDb = dbUsb.getVendorName(vid);
+                productFromDb = dbUsb.getProductName(vid, pid);
+
+                if (dbComp.isDataAvailable()) {
+                    final String searchFor;
+
+                    if (!TextUtils.isEmpty(vendorFromDb)) {
+                        searchFor = vendorFromDb;
                     } else {
-                        bitmap = null;
+                        searchFor = reportedVendorName;
                     }
+
+                    final String logo = dbComp.getLogoName(searchFor);
+                    bitmap = zipComp.getLogoBitmap(logo);
                 } else {
-                    vendorFromDb = null;
-                    productFromDb = null;
                     bitmap = null;
                 }
+            } else {
+                vendorFromDb = null;
+                productFromDb = null;
+                bitmap = null;
+            }
 
-                callback.onSuccess(vendorFromDb, productFromDb, bitmap);
+            callback.onSuccess(vendorFromDb, productFromDb, bitmap);
 
-            }
         };
 
         final Thread thread = new Thread(runnable);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
index f1d08c9..4a98c19 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/FragmentFactory.java
@@ -1,7 +1,6 @@
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
-import android.support.v4.app.Fragment;
-
+import androidx.fragment.app.Fragment;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
 public final class FragmentFactory {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
index a95fe3f..5f82f41 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentAndroid.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.content.Context;
@@ -22,13 +22,14 @@ import android.hardware.usb.UsbInterface;
 import android.hardware.usb.UsbManager;
 import android.os.Build;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TableLayout;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 
@@ -53,7 +54,7 @@ public class InfoFragmentAndroid extends BaseInfoFragment {
     }
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle saved) {
         usbKey = getArguments().getString(EXTRA_DATA, DEFAULT_STRING);
         device = usbMan.getDeviceList().get(usbKey);
 
@@ -71,7 +72,7 @@ public class InfoFragmentAndroid extends BaseInfoFragment {
     }
 
     @Override
-    public void onViewCreated(View view, Bundle bundle) {
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
         viewHolder = new ViewHolder(view);
 
@@ -82,7 +83,7 @@ public class InfoFragmentAndroid extends BaseInfoFragment {
             viewHolder = new ViewHolder(view);
             populateDataTable(LayoutInflater.from(getContext()));
         } else {
-            final TextView textView = (TextView) view.findViewById(R.id.errorText);
+            final TextView textView = view.findViewById(R.id.errorText);
             if (usbKey == null) {
                 textView.setText(R.string.error_loading_device_info_unknown);
             } else {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java
index 6a01ce4..084af36 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/InfoFragmentLinux.java
@@ -1,28 +1,29 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TableLayout;
 import android.widget.TextView;
 
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
 import aws.apps.usbDeviceEnumerator.R;
 import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
@@ -38,7 +39,7 @@ public class InfoFragmentLinux extends BaseInfoFragment {
     private ViewHolder viewHolder;
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle saved) {
         device = (SysBusUsbDevice) getArguments().getSerializable(EXTRA_DATA);
         final View view;
 
@@ -54,14 +55,14 @@ public class InfoFragmentLinux extends BaseInfoFragment {
     }
 
     @Override
-    public void onViewCreated(View view, Bundle bundle) {
+    public void onViewCreated(@NonNull View view, Bundle bundle) {
         super.onViewCreated(view, bundle);
 
         if (validData) {
             viewHolder = new ViewHolder(view);
             populateDataTable(LayoutInflater.from(getContext()));
         } else {
-            final TextView textView = (TextView) view.findViewById(R.id.errorText);
+            final TextView textView = view.findViewById(R.id.errorText);
             textView.setText(R.string.error_loading_device_info_unknown);
         }
     }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
index 0e2b5d2..b0d8f5c 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ShareUtils.java
@@ -2,13 +2,13 @@ package aws.apps.usbDeviceEnumerator.ui.usbinfo.fragments;
 
 import android.app.Activity;
 import android.content.Intent;
-import android.support.v4.app.ActivityCompat;
 import android.util.Log;
 import android.view.View;
 import android.widget.TableLayout;
 import android.widget.TableRow;
 import android.widget.TextView;
 
+import androidx.core.app.ActivityCompat;
 import aws.apps.usbDeviceEnumerator.R;
 
 /*package*/ class ShareUtils {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
index fa3ec14..46d1a82 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/fragments/ViewHolder.java
@@ -23,18 +23,18 @@ import aws.apps.usbDeviceEnumerator.R;
     private final ImageButton logo;
 
     public ViewHolder(final View rootView) {
-        tblUsbInfoHeader = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_title);
-        tblUsbInfoTop = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_top);
-        tblUsbInfoBottom = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_bottom);
-        tvVID = ((TextView) rootView.findViewById(R.id.tvVID));
-        tvPID = ((TextView) rootView.findViewById(R.id.tvPID));
-        tvProductDb = ((TextView) rootView.findViewById(R.id.tvProductDb));
-        tvVendorDb = ((TextView) rootView.findViewById(R.id.tvVendorDb));
-        tvProductReported = ((TextView) rootView.findViewById(R.id.tvProductReported));
-        tvVendorReported = ((TextView) rootView.findViewById(R.id.tvVendorReported));
-        tvDevicePath = ((TextView) rootView.findViewById(R.id.tvDevicePath));
-        tvDeviceClass = ((TextView) rootView.findViewById(R.id.tvDeviceClass));
-        logo = (ImageButton) rootView.findViewById(R.id.btnLogo);
+        tblUsbInfoHeader = rootView.findViewById(R.id.tblUsbInfo_title);
+        tblUsbInfoTop = rootView.findViewById(R.id.tblUsbInfo_top);
+        tblUsbInfoBottom = rootView.findViewById(R.id.tblUsbInfo_bottom);
+        tvVID = rootView.findViewById(R.id.tvVID);
+        tvPID = rootView.findViewById(R.id.tvPID);
+        tvProductDb = rootView.findViewById(R.id.tvProductDb);
+        tvVendorDb = rootView.findViewById(R.id.tvVendorDb);
+        tvProductReported = rootView.findViewById(R.id.tvProductReported);
+        tvVendorReported = rootView.findViewById(R.id.tvVendorReported);
+        tvDevicePath = rootView.findViewById(R.id.tvDevicePath);
+        tvDeviceClass = rootView.findViewById(R.id.tvDeviceClass);
+        logo = rootView.findViewById(R.id.btnLogo);
     }
 
     public ImageView getLogo() {
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
index 8a6a1d6..83931c1 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package uk.co.alt236.usbdeviceenumerator;
 
 import javax.annotation.Nonnull;
@@ -125,7 +125,7 @@ public class UsbConstantResolver {
             case USB_ENDPOINT_XFER_BULK:
                 return "Bulk (0x" + Integer.toHexString(usbEndpointType) + ")";
             case USB_ENDPOINT_XFER_INT:
-                return "Intrrupt (0x" + Integer.toHexString(usbEndpointType) + ")";
+                return "Interrupt (0x" + Integer.toHexString(usbEndpointType) + ")";
             default:
                 return "Unknown (0x" + Integer.toHexString(usbEndpointType) + ")";
         }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
index d0af58f..3f7fdfb 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package uk.co.alt236.usbdeviceenumerator.sysbususb;
 
 import java.io.Serializable;
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
index a61f6b5..5b5605f 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
@@ -1,23 +1,22 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package uk.co.alt236.usbdeviceenumerator.sysbususb;
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
 
@@ -90,9 +89,6 @@ import javax.annotation.Nullable;
                         fileContents.append(readData);
                         buf = new char[bufferSize];
                     }
-                } catch (FileNotFoundException e) {
-                    fileContents.setLength(0);
-                    e.printStackTrace();
                 } catch (IOException e) {
                     fileContents.setLength(0);
                     e.printStackTrace();
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
index 5475b66..5fbbb79 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package uk.co.alt236.usbdeviceenumerator.sysbususb;
 
 import java.io.File;
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
index b09240a..c817402 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/dump/ExecTerminal.java
@@ -1,18 +1,18 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
+/*
+ Copyright 2011 Alexandros Schillings
+ <p/>
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+ <p/>
+ http://www.apache.org/licenses/LICENSE-2.0
+ <p/>
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+ */
 package uk.co.alt236.usbdeviceenumerator.sysbususb.dump;
 
 import java.io.BufferedReader;
@@ -38,12 +38,12 @@ import java.io.InputStreamReader;
             BufferedReader reader = new BufferedReader(
                     new InputStreamReader(is));
             try {
-                String fullOutput = "";
+                StringBuilder fullOutput = new StringBuilder();
                 String line;
                 while ((line = reader.readLine()) != null) {
-                    fullOutput = fullOutput + line + "\n";
+                    fullOutput.append(line).append("\n");
                 }
-                return fullOutput;
+                return fullOutput.toString();
             } catch (IOException e) {
                 System.err.println("exec, IOException 1");
                 e.printStackTrace();
@@ -77,12 +77,12 @@ import java.io.InputStreamReader;
             BufferedReader reader = new BufferedReader(new InputStreamReader(is));
 
             try {
-                String fullOutput = "";
+                StringBuilder fullOutput = new StringBuilder();
                 String line;
                 while ((line = reader.readLine()) != null) {
-                    fullOutput = fullOutput + line + "\n";
+                    fullOutput.append(line).append("\n");
                 }
-                return fullOutput;
+                return fullOutput.toString();
             } catch (IOException e) {// It seems IOException is thrown when it reaches EOF.
                 e.printStackTrace();
                 System.err.println("execSU, IOException 1");
diff --git a/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
index 776b171..6e0eff2 100644
--- a/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
+++ b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
@@ -22,7 +22,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void isValidUsbDeviceCandidate_not_existent() throws Exception {
+    public void isValidUsbDeviceCandidate_not_existent() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(false);
 
@@ -30,7 +30,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void isValidUsbDeviceCandidate_not_directory() throws Exception {
+    public void isValidUsbDeviceCandidate_not_directory() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(false);
@@ -39,7 +39,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void isValidUsbDeviceCandidate_is_current_dir() throws Exception {
+    public void isValidUsbDeviceCandidate_is_current_dir() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(true);
@@ -49,7 +49,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void isValidUsbDeviceCandidate_is_parent_dir() throws Exception {
+    public void isValidUsbDeviceCandidate_is_parent_dir() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(true);
@@ -59,7 +59,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void isValidUsbDeviceCandidate_is_valid() throws Exception {
+    public void isValidUsbDeviceCandidate_is_valid() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(true);
@@ -69,19 +69,19 @@ public class ValidationTest {
     }
 
     @Test(expected = NullPointerException.class)
-    public void isValidUsbDeviceCandidate_is_null() throws Exception {
+    public void isValidUsbDeviceCandidate_is_null() {
         final File mockFile = null;
         cut.isValidUsbDeviceCandidate(mockFile);
     }
 
     @Test(expected = NullPointerException.class)
-    public void getListOfChildren_is_null() throws Exception {
+    public void getListOfChildren_is_null() {
         final File mockFile = null;
         cut.getListOfChildren(mockFile);
     }
 
     @Test
-    public void getListOfChildren_not_existent() throws Exception {
+    public void getListOfChildren_not_existent() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(false);
 
@@ -90,7 +90,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void getListOfChildren_not_directory() throws Exception {
+    public void getListOfChildren_not_directory() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(false);
@@ -100,7 +100,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void getListOfChildren_null_children() throws Exception {
+    public void getListOfChildren_null_children() {
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
         Mockito.when(mockFile.isDirectory()).thenReturn(true);
@@ -111,7 +111,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void getListOfChildren_no_children() throws Exception {
+    public void getListOfChildren_no_children() {
         final File[] children = new File[0];
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
@@ -123,7 +123,7 @@ public class ValidationTest {
     }
 
     @Test
-    public void getListOfChildren_valid_children() throws Exception {
+    public void getListOfChildren_valid_children() {
         final File[] children = new File[5];
         final File mockFile = Mockito.mock(File.class);
         Mockito.when(mockFile.exists()).thenReturn(true);
