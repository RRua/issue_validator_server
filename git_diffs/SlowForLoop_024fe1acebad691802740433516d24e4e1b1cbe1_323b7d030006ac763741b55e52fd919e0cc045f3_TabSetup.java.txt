diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
index faba1d0..357b74d 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
@@ -31,7 +31,6 @@ import android.widget.AdapterView.OnItemClickListener;
 import android.widget.ArrayAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
-import android.widget.TabHost.OnTabChangeListener;
 import android.widget.TextView;
 
 import java.io.File;
@@ -45,12 +44,14 @@ import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
 import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
 import aws.apps.usbDeviceEnumerator.ui.common.Navigation;
 import aws.apps.usbDeviceEnumerator.ui.dbupdate.DatabaseUpdater;
+import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabController;
+import aws.apps.usbDeviceEnumerator.ui.main.tabs.TabViewHolder;
 import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.InfoFragmentFactory;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbManager;
 
-public class MainActivity extends AppCompatActivity implements OnTabChangeListener {
+public class MainActivity extends AppCompatActivity {
     final String TAG = this.getClass().getName();
 
     private UsbManager mUsbManAndroid;
@@ -60,16 +61,15 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     private DbAccessCompany mDbComp;
     private ZipAccessCompany mZipComp;
 
-    private TabViewHolder mLinuxTabHolder;
-    private TabViewHolder mAndroidTabHolder;
-
     private Map<String, UsbDevice> mAndroidDeviceMap;
     private Map<String, SysBusUsbDevice> mLinuxDeviceMap;
 
     private ProgressDialogControl progressDialogControl;
     private Navigation mNavigation;
 
-    private void initialiseDbComponents() {
+    private TabController mTabController;
+
+    private void checkIfDbPresent() {
         // Prompt user to DL db if it is missing.
         if (!new File(mDbUsb.getLocalDbFullPath()).exists()) {
             DialogFactory.createOkDialog(this,
@@ -77,7 +77,6 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
                     R.string.alert_db_not_found_instructions)
                     .show();
             Log.w(TAG, "^ Database not found: " + mDbUsb.getLocalDbFullPath());
-            return;
         }
     }
 
@@ -88,47 +87,48 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.act_main);
+        mTabController = new TabController(this);
         mNavigation = new Navigation(this);
 
         mUsbManAndroid = (UsbManager) getSystemService(Context.USB_SERVICE);
         mUsbManagerLinux = new SysBusUsbManager();
 
-
         mDbUsb = new DbAccessUsb(this);
         mDbComp = new DbAccessCompany(this);
         mZipComp = new ZipAccessCompany(this);
 
-
-        final View tab1 = findViewById(R.id.tab_1);
-        final View tab2 = findViewById(R.id.tab_2);
+        mTabController.setup(new TabController.OnTabChangeListener() {
+            @Override
+            public void onTabChangeListener(String tag, TabViewHolder holder) {
+                onTabChanged(tag, holder);
+            }
+        });
 
         // Setup android list - tab1;
-        mAndroidTabHolder = new TabViewHolder(tab1);
-        mAndroidTabHolder.getList().setOnItemClickListener(new OnItemClickListener() {
+        mTabController.getHolderForTag(TabController.TAB_ANDROID_INFO)
+                .getList().setOnItemClickListener(new OnItemClickListener() {
 
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                mAndroidTabHolder.getList().setItemChecked(position, true);
+                ((ListView) parent).setItemChecked(position, true);
                 mNavigation.showAndroidUsbDeviceInfo(((TextView) view).getText().toString());
             }
         });
 
 
         // Setup linux list - tab2
-        mLinuxTabHolder = new TabViewHolder(tab2);
-        mLinuxTabHolder.getList().setOnItemClickListener(new OnItemClickListener() {
+        mTabController.getHolderForTag(TabController.TAB_LINUX_INFO)
+                .getList().setOnItemClickListener(new OnItemClickListener() {
 
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                mLinuxTabHolder.getList().setItemChecked(position, true);
+                ((ListView) parent).setItemChecked(position, true);
                 mNavigation.showLinuxUsbDeviceInfo(mLinuxDeviceMap.get(((TextView) view).getText().toString()));
             }
         });
 
 
-        final TabSetup tabSetup = new TabSetup(this);
-        tabSetup.setup(this);
-        initialiseDbComponents();
+        checkIfDbPresent();
         refreshUsbDevices();
     }
 
@@ -163,40 +163,31 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
         return false;
     }
 
-    @Override
-    public void onTabChanged(String tabId) {
+    private void onTabChanged(String tabId, TabViewHolder tabViewHolder) {
         if (mNavigation.isSmallScreen()) {
             return;
         }
 
-        final int position;
-        final ListView listView;
+        final ListView listView = tabViewHolder.getList();
+        final int checkedItemPosition = listView.getCheckedItemPosition();
         final Fragment fragment;
 
-        switch (tabId) {
-            case TabSetup.TAB_ANDROID_INFO:
-                listView = mAndroidTabHolder.getList();
-                position = listView.getCheckedItemPosition();
-                if (position != ListView.INVALID_POSITION) {
-                    final String text = (String) listView.getItemAtPosition(position);
+        if (checkedItemPosition == ListView.INVALID_POSITION) {
+            fragment = InfoFragmentFactory.getFragment("");
+        } else {
+            final String text = (String) listView.getItemAtPosition(checkedItemPosition);
+
+            switch (tabId) {
+                case TabController.TAB_ANDROID_INFO:
                     fragment = InfoFragmentFactory.getFragment(text);
-                } else {
-                    fragment = InfoFragmentFactory.getFragment("");
-                }
-                break;
-            case TabSetup.TAB_LINUX_INFO:
-                listView = mLinuxTabHolder.getList();
-                position = listView.getCheckedItemPosition();
-                if (position != ListView.INVALID_POSITION) {
-                    final String text = (String) listView.getItemAtPosition(position);
+                    break;
+                case TabController.TAB_LINUX_INFO:
                     fragment = InfoFragmentFactory.getFragment(mLinuxDeviceMap.get(text));
-                } else {
+                    break;
+                default:
                     fragment = InfoFragmentFactory.getFragment("");
-                }
-                break;
-            default:
-                fragment = InfoFragmentFactory.getFragment("");
-                break;
+                    break;
+            }
         }
 
         mNavigation.stackFragment(fragment);
@@ -205,10 +196,10 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
 
     private void refreshUsbDevices() {
         mAndroidDeviceMap = mUsbManAndroid.getDeviceList();
-        updateList(mAndroidTabHolder, mAndroidDeviceMap);
-
         mLinuxDeviceMap = mUsbManagerLinux.getUsbDevices();
-        updateList(mLinuxTabHolder, mLinuxDeviceMap);
+
+        updateList(mTabController.getHolderForTag(TabController.TAB_ANDROID_INFO), mAndroidDeviceMap);
+        updateList(mTabController.getHolderForTag(TabController.TAB_LINUX_INFO), mLinuxDeviceMap);
     }
 
     private void updateList(final TabViewHolder holder, final Map<String, ?> map) {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabSetup.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabSetup.java
deleted file mode 100644
index 0db360e..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabSetup.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package aws.apps.usbDeviceEnumerator.ui.main;
-
-import android.app.Activity;
-import android.widget.TabHost;
-import android.widget.TabWidget;
-import android.widget.TextView;
-
-import aws.apps.usbDeviceEnumerator.R;
-
-public class TabSetup {
-    public final static String TAB_ANDROID_INFO = "tab_android";
-    public final static String TAB_LINUX_INFO = "tab_linux";
-
-    private final Activity activity;
-    private final TabHost mTabHost;
-    private TabWidget mTabWidget;
-
-    public TabSetup(final Activity activity) {
-        this.activity = activity;
-        this.mTabHost = (TabHost) activity.findViewById(android.R.id.tabhost);
-    }
-
-    public void setup(final TabHost.OnTabChangeListener listener) {
-        mTabHost.setup(); // you must call this before adding your tabs!
-
-        mTabHost.addTab(newTab(TAB_ANDROID_INFO, R.string.label_tab_api, R.id.tab_1));
-        mTabHost.addTab(newTab(TAB_LINUX_INFO, R.string.label_tab_linux, R.id.tab_2));
-
-        mTabWidget = mTabHost.getTabWidget();
-
-        for (int i = 0; i < mTabWidget.getChildCount(); i++) {
-            final TextView tv = (TextView) mTabWidget.getChildAt(i).findViewById(android.R.id.title);
-            tv.setTextColor(activity.getResources().getColorStateList(R.drawable.tab_text_selector));
-        }
-
-        mTabHost.setOnTabChangedListener(listener);
-    }
-
-    private TabHost.TabSpec newTab(String tag, int labelId, int tabContentId) {
-        TabHost.TabSpec tabSpec = mTabHost.newTabSpec(tag);
-        tabSpec.setIndicator(tag);
-        tabSpec.setContent(tabContentId);
-        return tabSpec;
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
new file mode 100644
index 0000000..8808867
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
@@ -0,0 +1,90 @@
+package aws.apps.usbDeviceEnumerator.ui.main.tabs;
+
+import android.app.Activity;
+import android.support.design.widget.TabLayout;
+import android.support.v4.view.ViewPager;
+import android.view.LayoutInflater;
+import android.view.View;
+
+import aws.apps.usbDeviceEnumerator.R;
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class TabController {
+    public final static String TAB_ANDROID_INFO = "tab_android";
+    public final static String TAB_LINUX_INFO = "tab_linux";
+
+    private static final int[] TAB_LABELS = {R.string.label_tab_api, R.string.label_tab_linux};
+    private static final String[] TAB_TAGS = {TAB_ANDROID_INFO, TAB_LINUX_INFO};
+
+    private final Activity activity;
+
+    @BindView(R.id.tabs)
+    protected TabLayout tabLayout;
+
+    @BindView(R.id.pager)
+    protected ViewPager viewPager;
+
+    private TabViewHolder[] tabViewHolders;
+
+    public TabController(final Activity activity) {
+        ButterKnife.bind(this, activity);
+        this.activity = activity;
+    }
+
+    public void setup(final OnTabChangeListener listener) {
+        // These should really be fragments
+
+        final View[] pages = createPages();
+        final TabPagerAdapter adapter = new TabPagerAdapter(activity, pages, TAB_LABELS, TAB_TAGS);
+
+        viewPager.setAdapter(adapter);
+        tabLayout.setupWithViewPager(viewPager);
+
+        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+                // NOOP
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+                final String tag = adapter.getTabTag(position);
+                final TabViewHolder holder = tabViewHolders[position];
+
+                listener.onTabChangeListener(tag, holder);
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+                // NOOP
+            }
+        });
+    }
+
+    private View[] createPages() {
+        final View[] views = new View[TAB_TAGS.length];
+        tabViewHolders = new TabViewHolder[TAB_TAGS.length];
+
+        for (int i = 0; i < TAB_TAGS.length; i++) {
+            views[i] = LayoutInflater.from(activity).inflate(R.layout.tab_list, viewPager, false);
+            tabViewHolders[i] = new TabViewHolder(views[i]);
+        }
+
+        return views;
+    }
+
+    public TabViewHolder getHolderForTag(final String tag) {
+        for (int i = 0; i < TAB_TAGS.length; i++) {
+            if (TAB_TAGS[i].equals(tag)) {
+                return tabViewHolders[i];
+            }
+        }
+
+        return null;
+    }
+
+    public interface OnTabChangeListener {
+        void onTabChangeListener(final String tag, final TabViewHolder holder);
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java
new file mode 100644
index 0000000..e0c4460
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabPagerAdapter.java
@@ -0,0 +1,56 @@
+package aws.apps.usbDeviceEnumerator.ui.main.tabs;
+
+import android.content.Context;
+import android.support.v4.view.PagerAdapter;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+/*package*/ class TabPagerAdapter extends PagerAdapter {
+
+    private final Context context;
+    private final int[] labels;
+    private final String[] tabTags;
+    private final View[] pages;
+
+    public TabPagerAdapter(final Context context,
+                           final View[] pages,
+                           final int[] labels,
+                           final String[] tabTags) {
+        this.context = context.getApplicationContext();
+        this.labels = labels;
+        this.tabTags = tabTags;
+        this.pages = pages;
+    }
+
+    @Override
+    public Object instantiateItem(ViewGroup collection, int position) {
+        collection.addView(pages[position], position);
+        return pages[position];
+    }
+
+    @Override
+    public void destroyItem(ViewGroup collection, int position, Object view) {
+        collection.removeView((TextView) view);
+    }
+
+    @Override
+    public int getCount() {
+        return labels.length;
+    }
+
+    @Override
+    public boolean isViewFromObject(View view, Object object) {
+        return view == object;
+    }
+
+    @Override
+    public CharSequence getPageTitle(int position) {
+        return context.getText(labels[position]);
+    }
+
+    public String getTabTag(final int position) {
+        return tabTags[position];
+    }
+
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabViewHolder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
similarity index 73%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabViewHolder.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
index 0b3f19b..a9612fb 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/TabViewHolder.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabViewHolder.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.ui.main;
+package aws.apps.usbDeviceEnumerator.ui.main.tabs;
 
 import android.view.View;
 import android.widget.ListView;
@@ -10,19 +10,20 @@ import butterknife.ButterKnife;
 
 public class TabViewHolder {
 
+    private final View rootView;
     @BindView(android.R.id.list)
     protected ListView list;
-
     @BindView(android.R.id.empty)
     protected View empty;
-
     @BindView(R.id.count)
     protected TextView count;
 
     public TabViewHolder(final View rootView) {
         ButterKnife.bind(this, rootView);
-        list.setEmptyView(empty);
-        list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
+
+        this.rootView = rootView;
+        this.list.setEmptyView(empty);
+        this.list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
     }
 
     public ListView getList() {
