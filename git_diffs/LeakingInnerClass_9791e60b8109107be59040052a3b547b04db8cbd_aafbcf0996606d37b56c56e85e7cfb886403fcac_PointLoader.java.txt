diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/DetailActivity.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/DetailActivity.java
index ba124de..a50b526 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/DetailActivity.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/DetailActivity.java
@@ -1,6 +1,7 @@
 package ch.bubendorf.locusaddon.gsakdatabase;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Bundle;
@@ -35,7 +36,7 @@ public class DetailActivity extends Activity {
         PermissionActivity.checkPermission(this, this::goOn, null);
     }
 
-    private void goOn(final Void data) {
+    private void goOn(final Context context, final Void data) {
         final Intent intent = getIntent();
 
         final File fd = new File(PreferenceManager.getDefaultSharedPreferences(this).getString("db", ""));
@@ -56,9 +57,13 @@ public class DetailActivity extends Activity {
                         point = readGeocacheFromDatabase("db3", value);
                     }
                 }
-                // return data
-                final Intent retIntent = LocusUtils.INSTANCE.prepareResultExtraOnDisplayIntent(point, true);
-                setResult(Activity.RESULT_OK, retIntent);
+                if (point != null) {
+                    // return data
+                    final Intent retIntent = LocusUtils.INSTANCE.prepareResultExtraOnDisplayIntent(point, true);
+                    setResult(Activity.RESULT_OK, retIntent);
+                } else {
+                    setResult(Activity.RESULT_CANCELED);
+                }
             } catch (final Exception e) {
                 Toast.makeText(this, getText(R.string.unable_to_load_detail) + " " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
             } finally {
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/LoadActivity.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/LoadActivity.java
index fd0aa5c..e674cf9 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/LoadActivity.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/LoadActivity.java
@@ -3,24 +3,23 @@ package ch.bubendorf.locusaddon.gsakdatabase;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
+import android.content.Context;
 import android.content.DialogInterface;
-import android.content.DialogInterface.OnClickListener;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.widget.Toast;
 
-import ch.bubendorf.locusaddon.gsakdatabase.util.GeocacheAsyncTask;
-import ch.bubendorf.locusaddon.gsakdatabase.util.Gsak;
-import ch.bubendorf.locusaddon.gsakdatabase.util.GsakReader;
-import ch.bubendorf.locusaddon.gsakdatabase.util.Pair;
-
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.io.File;
 import java.util.List;
 
+import ch.bubendorf.locusaddon.gsakdatabase.util.GeocacheAsyncTask;
+import ch.bubendorf.locusaddon.gsakdatabase.util.Gsak;
+import ch.bubendorf.locusaddon.gsakdatabase.util.GsakReader;
+import ch.bubendorf.locusaddon.gsakdatabase.util.CacheWrapper;
 import locus.api.android.ActionDisplayPoints;
 import locus.api.android.ActionDisplayVarious;
 import locus.api.android.objects.LocusVersion;
@@ -38,7 +37,7 @@ import static android.preference.PreferenceManager.getDefaultSharedPreferences;
  */
 public class LoadActivity extends Activity implements DialogInterface.OnDismissListener {
 
-    private static final String TAG = "LoadActivity";
+//    private static final String TAG = "LoadActivity";
     private ProgressDialog progress;
     private Point point;
     private LoadAsyncTask loadAsyncTask;
@@ -68,7 +67,7 @@ public class LoadActivity extends Activity implements DialogInterface.OnDismissL
                     return null;
                 }
 
-                final List<Pair> gcCodes = GsakReader.readGCCodes(LoadActivity.this, this,
+                final List<CacheWrapper> gcCodes = GsakReader.readGCCodes(LoadActivity.this, this,
                         db, db2, db3, locations[0], null, null);
                 packPoints = GsakReader.readGeocaches(this, gcCodes);
                 return null;
@@ -88,28 +87,24 @@ public class LoadActivity extends Activity implements DialogInterface.OnDismissL
                 return;
             }
 
-//            String filePath = fd.getParent() + File.separator + "data.locus";
-
-            try {
-                final ActionDisplayVarious.ExtraAction action = getDefaultSharedPreferences(LoadActivity.this).getBoolean("import", true) ?
-                        ActionDisplayVarious.ExtraAction.IMPORT :
-                        ActionDisplayVarious.ExtraAction.CENTER;
-                ActionDisplayPoints.INSTANCE.sendPack(LoadActivity.this, packPoints, action);
-            } catch (final OutOfMemoryError e) {
-                final AlertDialog.Builder ad = new AlertDialog.Builder(LoadActivity.this);
-                ad.setIcon(android.R.drawable.ic_dialog_alert);
-                ad.setTitle(R.string.error);
-                ad.setMessage(R.string.out_of_memory);
-                ad.setPositiveButton(android.R.string.ok, new OnClickListener() {
-
-                    public void onClick(final DialogInterface di, final int arg1) {
-                        di.dismiss();
-                    }
-                });
-                ad.show();
-            } catch (final RequiredVersionMissingException rvme) {
-                Toast.makeText(LoadActivity.this, "Error: " + rvme.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            if (packPoints != null && packPoints.getPoints().length > 0) {
+                try {
+                    final ActionDisplayVarious.ExtraAction action = getDefaultSharedPreferences(LoadActivity.this).getBoolean("import", true) ?
+                            ActionDisplayVarious.ExtraAction.IMPORT :
+                            ActionDisplayVarious.ExtraAction.CENTER;
+                    ActionDisplayPoints.INSTANCE.sendPack(LoadActivity.this, packPoints, action);
+                } catch (final OutOfMemoryError e) {
+                    final AlertDialog.Builder ad = new AlertDialog.Builder(LoadActivity.this);
+                    ad.setIcon(android.R.drawable.ic_dialog_alert);
+                    ad.setTitle(R.string.error);
+                    ad.setMessage(R.string.out_of_memory);
+                    ad.setPositiveButton(android.R.string.ok, (di, arg1) -> di.dismiss());
+                    ad.show();
+                } catch (final RequiredVersionMissingException rvme) {
+                    Toast.makeText(LoadActivity.this, "Error: " + rvme.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+                }
             }
+            LoadActivity.this.finish();
         }
 
         @Override
@@ -129,7 +124,7 @@ public class LoadActivity extends Activity implements DialogInterface.OnDismissL
         PermissionActivity.checkPermission(this, this::goOn, null);
     }
 
-    private void goOn(final Void  data) {
+    private void goOn(final Context context, final Void  data) {
         progress = new ProgressDialog(this);
         progress.setMessage(getString(R.string.loading_dots));
         progress.setIcon(android.R.drawable.ic_dialog_info);
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/PermissionActivity.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/PermissionActivity.java
index ca06350..e4951fa 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/PermissionActivity.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/PermissionActivity.java
@@ -2,22 +2,19 @@ package ch.bubendorf.locusaddon.gsakdatabase;
 
 
 import android.Manifest;
-import android.app.AlertDialog;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.Settings;
-import android.widget.Toast;
 
 import androidx.activity.ComponentActivity;
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
 import androidx.core.content.ContextCompat;
 
-import java.util.function.Consumer;
+import java.util.function.BiConsumer;
 
 /**
  * Activity to ask the user for a permission.
@@ -26,15 +23,15 @@ public class PermissionActivity extends ComponentActivity {
 
     private final static String PERMISSION = Manifest.permission.READ_EXTERNAL_STORAGE;
 
-    private static Consumer runnable;
+    private static BiConsumer<Context, Object> runnable;
     private static Object data;
 
-    public static <T> void checkPermission(final Context context, final Consumer<T> callback, final T data) {
+    public static <T> void checkPermission(final Context context, final BiConsumer<Context, T> callback, final T data) {
         if (ContextCompat.checkSelfPermission(context, PERMISSION) == PackageManager.PERMISSION_GRANTED) {
             // Everything OK ==> Go On
-            callback.accept(data);
+            callback.accept(context, data);
         } else {
-            runnable = callback;
+            runnable = (BiConsumer<Context, Object>) callback;
             PermissionActivity.data = data;
             final Intent intent = new Intent(context, PermissionActivity.class);
             context.startActivity(intent);
@@ -54,8 +51,7 @@ public class PermissionActivity extends ComponentActivity {
         final ActivityResultLauncher<String> requestPermissionLauncher =
                 registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
                     if (isGranted) {
-                        // Permission is granted. Continue the action or workflow in your
-                        // app.
+                        // Permission is granted. Continue the action or workflow in your app.
                         goOn();
                     } else {
                         // Explain to the user that the feature is unavailable because the
@@ -67,7 +63,6 @@ public class PermissionActivity extends ComponentActivity {
                         finish();
                         goToAppSettings(this);
                     }
-
                 });
 
         if (ContextCompat.checkSelfPermission(this, PERMISSION) == PackageManager.PERMISSION_GRANTED) {
@@ -107,7 +102,7 @@ public class PermissionActivity extends ComponentActivity {
     private void goOn() {
         finish();
         if (runnable != null) {
-            runnable.accept(data);
+            runnable.accept(getParent(), data);
             runnable = null;
         }
     }
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/LocationReceiver.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/LocationReceiver.java
index 6bec23e..9f85d03 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/LocationReceiver.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/LocationReceiver.java
@@ -63,20 +63,17 @@ public class LocationReceiver extends BroadcastReceiver {
     }
 
     private void update(final Context context, final UpdateContainer updateContainer) {
-        final PointLoader pointLoader = PointLoader.getInstance();
-        pointLoader.setContext(context);
-
         // We need the permission to access the file system. Check and ask for the permission if necessary
         PermissionActivity.checkPermission(context, this::goOn, updateContainer);
     }
 
-    private void goOn(final UpdateContainer updateContainer) {
+    private void goOn(final Context context, final UpdateContainer updateContainer) {
         lastMapCenter = updateContainer.getLocMapCenter();
         lastUpdate = System.currentTimeMillis();
 
         final PointLoader pointLoader = PointLoader.getInstance();
 
-        pointLoader.run(updateContainer.getLocMapCenter(), updateContainer.getMapTopLeft(), updateContainer.getMapBottomRight());
+        pointLoader.run(context, updateContainer.getLocMapCenter(), updateContainer.getMapTopLeft(), updateContainer.getMapBottomRight());
     }
 
     private UpdateContainer getContent(final Context context) {
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoader.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoader.java
index 822bbc1..f535344 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoader.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoader.java
@@ -2,16 +2,7 @@ package ch.bubendorf.locusaddon.gsakdatabase.receiver;
 
 import android.content.Context;
 import android.os.AsyncTask;
-import android.util.Log;
-import android.widget.Toast;
 
-import ch.bubendorf.locusaddon.gsakdatabase.util.GeocacheAsyncTask;
-import ch.bubendorf.locusaddon.gsakdatabase.util.GsakReader;
-import ch.bubendorf.locusaddon.gsakdatabase.util.Pair;
-
-import java.util.List;
-
-import locus.api.android.ActionDisplayPoints;
 import locus.api.objects.extra.Location;
 
 /**
@@ -21,11 +12,10 @@ import locus.api.objects.extra.Location;
  */
 public class PointLoader {
 
-    private static final String TAG = "PointLoader";
+    // private static final String TAG = "PointLoader";
     private static PointLoader instance;
 
-    private Context context;
-    private MapLoadAsyncTask mapLoadAsyncTask;
+    private PointLoaderAsyncTask pointLoaderAsyncTask;
 
     public static PointLoader getInstance() {
         if (instance == null) {
@@ -37,60 +27,13 @@ public class PointLoader {
     private PointLoader() {
     }
 
-    public void setContext(final Context context) {
-        this.context = context;
-    }
-
-    public void run(final Location center, final Location topLeft, final Location bottomRight) {
+    public void run(final Context context, final Location center, final Location topLeft, final Location bottomRight) {
 //        Log.d(TAG, "run(" + center + ")");
-        if (mapLoadAsyncTask != null && mapLoadAsyncTask.getStatus() != AsyncTask.Status.FINISHED) {
-            mapLoadAsyncTask.cancel(true);
+        if (pointLoaderAsyncTask != null && pointLoaderAsyncTask.getStatus() != AsyncTask.Status.FINISHED) {
+            pointLoaderAsyncTask.cancel(true);
         }
-        mapLoadAsyncTask = new MapLoadAsyncTask();
-        mapLoadAsyncTask.execute(center, topLeft, bottomRight);
+        pointLoaderAsyncTask = new PointLoaderAsyncTask(context);
+        pointLoaderAsyncTask.execute(center, topLeft, bottomRight);
     }
 
-    private class MapLoadAsyncTask extends GeocacheAsyncTask {
-
-        @Override
-        protected void onPreExecute() {
-            super.onPreExecute();
-            openDatabases(context);
-        }
-
-        @Override
-        protected Exception doInBackground(final Location... locations) {
-            try {
-                if (isCancelled()) {
-                    return null;
-                }
-
-                final List<Pair> gcCodes = GsakReader.readGCCodes(PointLoader.this.context, this,
-                        db, db2, db3, locations[0], locations[1], locations[2]);
-                packPoints = GsakReader.readGeocaches(this, gcCodes);
-                return null;
-            } catch (final Exception e) {
-                return e;
-            }
-        }
-
-        @Override
-        protected void onPostExecute(final Exception exception) {
-            super.onPostExecute(exception);
-            closeDatabases();
-
-            if (exception != null) {
-//                Log.w(TAG, exception);
-                Toast.makeText(context, "Error: " + exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();
-                return;
-            }
-
-            try {
-                ActionDisplayPoints.INSTANCE.sendPackSilent(PointLoader.this.context, packPoints, false);
-            } catch (final Exception e) {
-                Toast.makeText(PointLoader.this.context, "Error: " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
-            }
-        }
-
-    }
 }
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoaderAsyncTask.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoaderAsyncTask.java
new file mode 100644
index 0000000..4c8b63a
--- /dev/null
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/receiver/PointLoaderAsyncTask.java
@@ -0,0 +1,64 @@
+package ch.bubendorf.locusaddon.gsakdatabase.receiver;
+
+import android.content.Context;
+import android.widget.Toast;
+
+import java.util.List;
+
+import ch.bubendorf.locusaddon.gsakdatabase.util.GeocacheAsyncTask;
+import ch.bubendorf.locusaddon.gsakdatabase.util.GsakReader;
+import ch.bubendorf.locusaddon.gsakdatabase.util.CacheWrapper;
+import locus.api.android.ActionDisplayPoints;
+import locus.api.objects.extra.Location;
+
+public class PointLoaderAsyncTask extends GeocacheAsyncTask {
+
+    private final Context context;
+
+    public PointLoaderAsyncTask(final Context context) {
+        this.context = context;
+    }
+
+    @Override
+    protected void onPreExecute() {
+        super.onPreExecute();
+        openDatabases(context);
+    }
+
+    @Override
+    protected Exception doInBackground(final Location... locations) {
+        try {
+            if (isCancelled()) {
+                return null;
+            }
+
+            final List<CacheWrapper> gcCodes = GsakReader.readGCCodes(context, this,
+                    db, db2, db3, locations[0], locations[1], locations[2]);
+            packPoints = GsakReader.readGeocaches(this, gcCodes);
+            return null;
+        } catch (final Exception e) {
+            return e;
+        }
+    }
+
+    @Override
+    protected void onPostExecute(final Exception exception) {
+        super.onPostExecute(exception);
+        closeDatabases();
+
+        if (exception != null) {
+//                Log.w(TAG, exception);
+            Toast.makeText(context, "Error: " + exception.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            return;
+        }
+
+        if (packPoints != null && packPoints.getPoints().length > 0) {
+            try {
+                ActionDisplayPoints.INSTANCE.sendPackSilent(context, packPoints, false);
+            } catch (final Exception e) {
+                Toast.makeText(context, "Error: " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+}
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/Pair.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/CacheWrapper.java
similarity index 71%
rename from locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/Pair.java
rename to locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/CacheWrapper.java
index be2a96b..c8baf7d 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/Pair.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/CacheWrapper.java
@@ -2,13 +2,13 @@ package ch.bubendorf.locusaddon.gsakdatabase.util;
 
 import android.database.sqlite.SQLiteDatabase;
 
-public class Pair {
+public class CacheWrapper {
 
     public final String gcCode;
     public final float distance;
     public final SQLiteDatabase db;
 
-    public Pair(final float dist, final String code, final SQLiteDatabase db) {
+    public CacheWrapper(final float dist, final String code, final SQLiteDatabase db) {
         this.distance = dist;
         this.gcCode = code;
         this.db = db;
diff --git a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/GsakReader.java b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/GsakReader.java
index 00ab548..abfd4c7 100644
--- a/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/GsakReader.java
+++ b/locusAddonGSAK/src/main/java/ch/bubendorf/locusaddon/gsakdatabase/util/GsakReader.java
@@ -6,19 +6,18 @@ import android.content.SharedPreferences;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
-import ch.bubendorf.locusaddon.gsakdatabase.DetailActivity;
+import androidx.annotation.NonNull;
 
 import org.jetbrains.annotations.Nullable;
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
+import ch.bubendorf.locusaddon.gsakdatabase.DetailActivity;
 import locus.api.android.objects.PackPoints;
 import locus.api.objects.extra.Location;
 import locus.api.objects.geoData.Point;
@@ -36,7 +35,7 @@ public class GsakReader {
     public static SQLiteDatabase openDatabase(final Context context, final String dbId) {
         final SharedPreferences sharedPreferences = getDefaultSharedPreferences(context);
         if (sharedPreferences.getBoolean("pref_use_" + dbId, false)) {
-            final String path = sharedPreferences.getString("db", "");
+            final String path = sharedPreferences.getString(dbId, "");
             if (Gsak.isGsakDatabase(path)) {
                 return SQLiteDatabase.openDatabase(path,
                         null, SQLiteDatabase.NO_LOCALIZED_COLLATORS + SQLiteDatabase.OPEN_READONLY);
@@ -45,59 +44,58 @@ public class GsakReader {
         return null;
     }
 
-    public static List<Pair> readGCCodes(final Context context, final GeocacheAsyncTask asyncTask,
-                                         final SQLiteDatabase db, final SQLiteDatabase db2, final SQLiteDatabase db3,
-                                         final Location centerLocation, final Location topLeftLocation,
-                                         final Location bottomRightLocation) {
-        List<Pair> gcCodes = new ArrayList<>(256);
+    @NonNull
+    public static List<CacheWrapper> readGCCodes(final Context context, final GeocacheAsyncTask asyncTask,
+                                                 final SQLiteDatabase db, final SQLiteDatabase db2, final SQLiteDatabase db3,
+                                                 final Location centerLocation, final Location topLeftLocation,
+                                                 final Location bottomRightLocation) {
+        List<CacheWrapper> gcCodes = new ArrayList<>(256);
         final Set<String> alreadyLoaded = new HashSet<>(256);
 
         if (db != null) {
             GsakReader.loadGCCodes(context, asyncTask, db, gcCodes, alreadyLoaded, centerLocation, topLeftLocation, bottomRightLocation);
             if (asyncTask.isCancelled()) {
-                return null;
+                return gcCodes;
             }
         }
         if (db2 != null) {
             GsakReader.loadGCCodes(context, asyncTask, db2, gcCodes, alreadyLoaded, centerLocation, topLeftLocation, bottomRightLocation);
             if (asyncTask.isCancelled()) {
-                return null;
+                return gcCodes;
             }
         }
         if (db3 != null) {
             GsakReader.loadGCCodes(context, asyncTask, db3, gcCodes, alreadyLoaded, centerLocation, topLeftLocation, bottomRightLocation);
             if (asyncTask.isCancelled()) {
-                return null;
+                return gcCodes;
             }
         }
 
         final int limit = Math.min(2000, parseInt(getDefaultSharedPreferences(context).getString("limit", "100")));
 
         if (limit > 0 && gcCodes.size() > limit) {
-            Collections.sort(gcCodes, new Comparator<Pair>() {
-                public int compare(final Pair p1, final Pair p2) {
-                    return Float.compare(p1.distance, p2.distance);
-                }
-            });
+            gcCodes.sort((p1, p2) -> Float.compare(p1.distance, p2.distance));
             gcCodes = gcCodes.subList(0, limit);
         }
         return gcCodes;
     }
 
-    public static PackPoints readGeocaches(final GeocacheAsyncTask asyncTask, final List<Pair> gcCodes) throws ParseException {
+    @NonNull
+    public static PackPoints readGeocaches(final GeocacheAsyncTask asyncTask, final List<CacheWrapper> gcCodes) throws ParseException {
         int count = 0;
         final PackPoints packPoints = new PackPoints("GSAK data");
-        for (final Pair pair : gcCodes) {
+        for (final CacheWrapper cacheWrapper : gcCodes) {
             if (asyncTask.isCancelled()) {
-                return null;
+                return packPoints;
             }
-            final String gcCode = pair.gcCode;
-            if (++count % 10 == 0) {
+            final String gcCode = cacheWrapper.gcCode;
+            if (count % 10 == 0) {
                 asyncTask.myPublishProgress(count);
             }
-            final SQLiteDatabase database = pair.db;
+            final SQLiteDatabase database = cacheWrapper.db;
             final Point p = GsakReader.readGeocache(database, gcCode, false);
             if (p != null) {
+                count++;
                 packPoints.addPoint(p);
             }
         }
@@ -105,7 +103,7 @@ public class GsakReader {
     }
 
     public static void loadGCCodes(final Context context, final GeocacheAsyncTask asyncTask, final SQLiteDatabase database,
-                                   final List<Pair> gcCodes, final Set<String> alreadyLoaded,
+                                   final List<CacheWrapper> gcCodes, final Set<String> alreadyLoaded,
                                    final Location centerLocation, final Location topLeftLocation,
                                    final Location bottomRightLocation) {
         String sql = buildCacheSQL(context);
@@ -139,7 +137,7 @@ public class GsakReader {
                 loc.setLatitude(c.getDouble(c.getColumnIndex("Latitude")));
                 loc.setLongitude(c.getDouble(c.getColumnIndex("Longitude")));
 //                if (loc.distanceTo(centerLocation) <= radiusMeter) {
-                    gcCodes.add(new Pair(loc.distanceTo(centerLocation), code, database));
+                    gcCodes.add(new CacheWrapper(loc.distanceTo(centerLocation), code, database));
 //                }
             }
         }
@@ -216,7 +214,9 @@ public class GsakReader {
     @Nullable
     public static Point readGeocache(final SQLiteDatabase database, final String gcCode, final boolean withDetails) throws ParseException {
         final Cursor cacheCursor = database.rawQuery("SELECT * FROM CachesAll WHERE Code = ?", new String[]{gcCode});
-        cacheCursor.moveToNext();
+        if (!cacheCursor.moveToNext()) {
+            return null;
+        }
         final Location loc = new Location(cacheCursor.getDouble(cacheCursor.getColumnIndex("Latitude")), cacheCursor.getDouble(cacheCursor.getColumnIndex("Longitude")));
         final Point point = new Point(cacheCursor.getString(cacheCursor.getColumnIndex("Name")), loc);
 
