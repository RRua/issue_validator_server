diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.java
deleted file mode 100644
index 0f27595..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import android.accounts.Account;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.google.common.base.Objects;
-
-public class AccountItem {
-    public static final int TYPE_ACCOUNT = 0;
-    public static final int TYPE_ACTION_ADD = 1;
-
-    @Nullable
-    private Account account;
-
-    @Nullable
-    private String displayName;
-
-    private int type;
-
-    public AccountItem(@NonNull Account account) {
-        this.account = checkNotNull(account);
-        type = TYPE_ACCOUNT;
-    }
-
-    public AccountItem() {
-        type = TYPE_ACTION_ADD;
-    }
-
-    @Nullable
-    public Account getAccount() {
-        return account;
-    }
-
-    public int getType() {
-        return type;
-    }
-
-    public void setDisplayName(@Nullable String displayName) {
-        this.displayName = displayName;
-    }
-
-    @Nullable
-    public String getAccountName() {
-        return account == null ? null : account.name;
-    }
-
-    @Nullable
-    public String getDisplayName() {
-        return displayName;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) return true;
-        if (obj == null || getClass() != obj.getClass()) return false;
-
-        AccountItem accountItem = (AccountItem) obj;
-        if (account == null ^ accountItem.account == null) return false;
-
-        // NOTE: (account == null && accountItem.account == null)
-        return (account == null || Objects.equal(account.name, accountItem.account.name))
-                && Objects.equal(displayName, accountItem.displayName);
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.kt
new file mode 100644
index 0000000..c2aed71
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountItem.kt
@@ -0,0 +1,106 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import com.google.common.base.Objects
+import com.google.common.base.Preconditions
+import dagger.Provides
+
+class AccountItem {
+    var account: Account? = null
+        private set
+    var displayName: String? = null
+    var type: Int
+        private set
+
+    constructor(account: Account) {
+        this.account = Preconditions.checkNotNull(account)
+        type = TYPE_ACCOUNT
+    }
+
+    constructor() {
+        type = TYPE_ACTION_ADD
+    }
+
+    val accountName: String?
+        get() = if (account == null) null else account!!.name
+
+    override fun equals(obj: Any?): Boolean {
+        if (this === obj) return true
+        if (obj == null || javaClass != obj.javaClass) return false
+        val accountItem = obj as AccountItem
+        return if (account == null!! xor accountItem.account == null) false else (account == null || Objects.equal(
+            account!!.name,
+            accountItem.account!!.name
+        ))
+                && Objects.equal(displayName, accountItem.displayName)
+
+        // NOTE: (account == null && accountItem.account == null)
+    }
+
+    companion object {
+        const val TYPE_ACCOUNT = 0
+        const val TYPE_ACTION_ADD = 1
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java
deleted file mode 100644
index 16d23b3..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java
+++ /dev/null
@@ -1,155 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import android.view.LayoutInflater;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.databinding.ViewDataBinding;
-import androidx.recyclerview.widget.DiffUtil;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.bytesforge.linkasanote.databinding.ItemManageAccountsAddBinding;
-import com.bytesforge.linkasanote.databinding.ItemManageAccountsBinding;
-
-import java.security.InvalidParameterException;
-import java.util.List;
-
-public class AccountsAdapter extends RecyclerView.Adapter<AccountsAdapter.ViewHolder> {
-
-    private List<AccountItem> accountItems;
-
-    @NonNull
-    private ManageAccountsPresenter presenter;
-
-    public AccountsAdapter(
-            @NonNull ManageAccountsPresenter presenter, List<AccountItem> accountItems) {
-        this.presenter = checkNotNull(presenter);
-        this.accountItems = accountItems;
-    }
-
-    public static class ViewHolder extends RecyclerView.ViewHolder {
-
-        private final ViewDataBinding binding;
-
-        public ViewHolder(ViewDataBinding binding) {
-            super(binding.getRoot());
-            this.binding = binding;
-        }
-
-        public void bind(AccountItem accountItem) {
-            if (accountItem.getType() == AccountItem.TYPE_ACCOUNT) {
-                ((ItemManageAccountsBinding) binding).setAccountItem(accountItem);
-            }
-            binding.executePendingBindings();
-        }
-    }
-
-    @Override
-    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
-        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
-        if (viewType == AccountItem.TYPE_ACCOUNT) {
-            ItemManageAccountsBinding binding =
-                    ItemManageAccountsBinding.inflate(inflater, parent, false);
-            binding.setPresenter(presenter);
-
-            return new ViewHolder(binding);
-        } else if (viewType == AccountItem.TYPE_ACTION_ADD) {
-            ItemManageAccountsAddBinding binding =
-                    ItemManageAccountsAddBinding.inflate(inflater, parent, false);
-            binding.setPresenter(presenter);
-
-            return new ViewHolder(binding);
-        } else {
-            throw new InvalidParameterException("Unexpected AccountItem type ID [" + viewType + "]");
-        }
-    }
-
-    @Override
-    public void onBindViewHolder(ViewHolder holder, int position) {
-        AccountItem accountItem = accountItems.get(position);
-        holder.bind(accountItem);
-    }
-
-    @Override
-    public int getItemCount() {
-        return accountItems.size();
-    }
-
-    @Override
-    public int getItemViewType(int position) {
-        return accountItems.get(position).getType();
-    }
-
-    public void swapItems(@NonNull List<AccountItem> accountItems) {
-        checkNotNull(accountItems);
-
-        final AccountItemDiffCallback diffCallback =
-                new AccountItemDiffCallback(this.accountItems, accountItems);
-        final DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(diffCallback);
-
-        this.accountItems.clear();
-        this.accountItems.addAll(accountItems);
-
-        diffResult.dispatchUpdatesTo(this);
-    }
-
-    public class AccountItemDiffCallback extends DiffUtil.Callback {
-
-        private List<AccountItem> oldList;
-        private List<AccountItem> newList;
-
-        public AccountItemDiffCallback(List<AccountItem> oldList, List<AccountItem> newList) {
-            this.oldList = oldList;
-            this.newList = newList;
-        }
-
-        @Override
-        public int getOldListSize() {
-            return oldList.size();
-        }
-
-        @Override
-        public int getNewListSize() {
-            return newList.size();
-        }
-
-        @Override
-        public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
-            String oldAccountName = oldList.get(oldItemPosition).getAccountName();
-            String newAccountName = newList.get(newItemPosition).getAccountName();
-
-            return (oldAccountName == null && newAccountName == null)
-                    || (oldAccountName != null && oldAccountName.equals(newAccountName));
-
-        }
-
-        @Override
-        public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
-            AccountItem oldItem = oldList.get(oldItemPosition);
-            AccountItem newItem = newList.get(newItemPosition);
-            return oldItem.equals(newItem);
-        }
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.kt
new file mode 100644
index 0000000..4179542
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.kt
@@ -0,0 +1,165 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import com.bytesforge.linkasanote.databinding.ItemManageAccountsAddBinding
+import com.bytesforge.linkasanote.databinding.ItemManageAccountsBinding
+import com.google.common.base.Preconditions
+import dagger.Provides
+import java.security.InvalidParameterException
+
+class AccountsAdapter(
+    presenter: ManageAccountsPresenter, accountItems: MutableList<AccountItem?>
+) : RecyclerView.Adapter<AccountsAdapter.ViewHolder>() {
+    private val accountItems: MutableList<AccountItem?>
+    private val presenter: ManageAccountsPresenter
+
+    class ViewHolder(private val binding: ViewDataBinding) : RecyclerView.ViewHolder(
+        binding.root
+    ) {
+        fun bind(accountItem: AccountItem?) {
+            if (accountItem.getType() == AccountItem.Companion.TYPE_ACCOUNT) {
+                (binding as ItemManageAccountsBinding).accountItem =
+                    accountItem
+            }
+            binding.executePendingBindings()
+        }
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
+        val inflater = LayoutInflater.from(parent.context)
+        return if (viewType == AccountItem.Companion.TYPE_ACCOUNT) {
+            val binding = ItemManageAccountsBinding.inflate(
+                inflater,
+                parent,
+                false
+            )
+            binding.presenter = presenter
+            ViewHolder(binding)
+        } else if (viewType == AccountItem.Companion.TYPE_ACTION_ADD) {
+            val binding = ItemManageAccountsAddBinding.inflate(
+                inflater,
+                parent,
+                false
+            )
+            binding.presenter = presenter
+            ViewHolder(binding)
+        } else {
+            throw InvalidParameterException("Unexpected AccountItem type ID [$viewType]")
+        }
+    }
+
+    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
+        val accountItem = accountItems[position]
+        holder.bind(accountItem)
+    }
+
+    override fun getItemCount(): Int {
+        return accountItems.size
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return accountItems[position].getType()
+    }
+
+    fun swapItems(accountItems: List<AccountItem?>) {
+        Preconditions.checkNotNull(accountItems)
+        val diffCallback = AccountItemDiffCallback(this.accountItems, accountItems)
+        val diffResult = DiffUtil.calculateDiff(diffCallback)
+        this.accountItems.clear()
+        this.accountItems.addAll(accountItems)
+        diffResult.dispatchUpdatesTo(this)
+    }
+
+    inner class AccountItemDiffCallback(
+        private val oldList: List<AccountItem?>,
+        private val newList: List<AccountItem?>
+    ) : DiffUtil.Callback() {
+        override fun getOldListSize(): Int {
+            return oldList.size
+        }
+
+        override fun getNewListSize(): Int {
+            return newList.size
+        }
+
+        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
+            val oldAccountName = oldList[oldItemPosition].getAccountName()
+            val newAccountName = newList[newItemPosition].getAccountName()
+            return (oldAccountName == null && newAccountName == null
+                    || oldAccountName != null && oldAccountName == newAccountName)
+        }
+
+        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
+            val oldItem = oldList[oldItemPosition]
+            val newItem = newList[newItemPosition]
+            return oldItem == newItem
+        }
+    }
+
+    init {
+        this.presenter = Preconditions.checkNotNull(presenter)
+        this.accountItems = accountItems
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
deleted file mode 100644
index 307f244..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import android.content.Intent;
-import android.os.Bundle;
-
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.ActionBar;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.databinding.DataBindingUtil;
-
-import com.bytesforge.linkasanote.LaanoApplication;
-import com.bytesforge.linkasanote.R;
-import com.bytesforge.linkasanote.databinding.ActivityManageAccountsBinding;
-import com.bytesforge.linkasanote.utils.ActivityUtils;
-
-import javax.inject.Inject;
-
-public class ManageAccountsActivity extends AppCompatActivity {
-
-    private static final String TAG = ManageAccountsActivity.class.getSimpleName();
-
-    @Inject
-    ManageAccountsPresenter presenter;
-
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        ActivityManageAccountsBinding binding =
-                DataBindingUtil.setContentView(this, R.layout.activity_manage_accounts);
-        // Toolbar
-        setSupportActionBar(binding.toolbar);
-        ActionBar actionBar = getSupportActionBar();
-        if (actionBar != null) {
-            actionBar.setTitle(R.string.actionbar_title_manage_accounts);
-            actionBar.setDisplayHomeAsUpEnabled(true);
-            actionBar.setDisplayShowHomeEnabled(true);
-        }
-        // Fragment
-        ManageAccountsFragment fragment = (ManageAccountsFragment) getSupportFragmentManager()
-                .findFragmentById(R.id.content_frame);
-        if (fragment == null) {
-            fragment = ManageAccountsFragment.newInstance();
-            ActivityUtils.addFragmentToActivity(
-                    getSupportFragmentManager(), fragment, R.id.content_frame);
-        }
-        // Presenter
-        LaanoApplication application = (LaanoApplication) getApplication();
-        application.getApplicationComponent()
-                .getManageAccountsComponent(new ManageAccountsPresenterModule(fragment))
-                .inject(this);
-    }
-
-    @Override
-    public boolean onSupportNavigateUp() {
-        onBackPressed();
-        return true;
-    }
-
-    @Override
-    public void onBackPressed() {
-        Intent resultIntent = new Intent();
-        setResult(RESULT_OK, resultIntent);
-        super.onBackPressed();
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.kt
new file mode 100644
index 0000000..edbd38b
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.kt
@@ -0,0 +1,114 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import com.bytesforge.linkasanote.databinding.ActivityManageAccountsBinding
+import dagger.Provides
+
+class ManageAccountsActivity : AppCompatActivity() {
+    @Inject
+    var presenter: ManageAccountsPresenter? = null
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        val binding: ActivityManageAccountsBinding =
+            DataBindingUtil.setContentView(this, R.layout.activity_manage_accounts)
+        // Toolbar
+        setSupportActionBar(binding.toolbar)
+        val actionBar = supportActionBar
+        if (actionBar != null) {
+            actionBar.setTitle(R.string.actionbar_title_manage_accounts)
+            actionBar.setDisplayHomeAsUpEnabled(true)
+            actionBar.setDisplayShowHomeEnabled(true)
+        }
+        // Fragment
+        var fragment = supportFragmentManager
+            .findFragmentById(R.id.content_frame) as ManageAccountsFragment?
+        if (fragment == null) {
+            fragment = ManageAccountsFragment.Companion.newInstance()
+            ActivityUtils.addFragmentToActivity(
+                supportFragmentManager, fragment, R.id.content_frame
+            )
+        }
+        // Presenter
+        val application = application as LaanoApplication
+        application.applicationComponent
+            .getManageAccountsComponent(ManageAccountsPresenterModule(fragment))
+            .inject(this)
+    }
+
+    override fun onSupportNavigateUp(): Boolean {
+        onBackPressed()
+        return true
+    }
+
+    override fun onBackPressed() {
+        val resultIntent = Intent()
+        setResult(RESULT_OK, resultIntent)
+        super.onBackPressed()
+    }
+
+    companion object {
+        private val TAG = ManageAccountsActivity::class.java.simpleName
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
deleted file mode 100644
index 150e089..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import com.bytesforge.linkasanote.FragmentScoped;
-
-import dagger.Subcomponent;
-
-@FragmentScoped
-@Subcomponent(modules = {ManageAccountsPresenterModule.class})
-public interface ManageAccountsComponent {
-
-    void inject(ManageAccountsActivity manageAccountsActivity);
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.kt
new file mode 100644
index 0000000..f845fb8
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.kt
@@ -0,0 +1,72 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import dagger.Provides
+
+@FragmentScoped
+@Subcomponent(modules = [ManageAccountsPresenterModule::class])
+interface ManageAccountsComponent {
+    fun inject(manageAccountsActivity: ManageAccountsActivity?)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
deleted file mode 100644
index 2457f1d..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import android.accounts.Account;
-import android.accounts.AccountManager;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.bytesforge.linkasanote.BasePresenter;
-import com.bytesforge.linkasanote.BaseView;
-
-import java.util.List;
-
-import io.reactivex.Single;
-
-public interface ManageAccountsContract {
-
-    interface View extends BaseView<Presenter> {
-
-        void setAccountManager(@NonNull AccountManager accountManager);
-        boolean isActive();
-        void finishActivity();
-        void cancelActivity();
-
-        void addAccount();
-        void editAccount(Account account);
-        void confirmAccountRemoval(Account account);
-
-        @Nullable Account[] getAccountsWithPermissionCheck();
-        Single<List<AccountItem>> loadAccountItems();
-        void swapItems(@NonNull List<AccountItem> accountItems);
-
-        void showSuccessfullyUpdatedSnackbar();
-        void showNotEnoughPermissionsSnackbar();
-    }
-
-    interface ViewModel extends BaseView<Presenter> {
-    }
-
-
-    interface Presenter extends BasePresenter {
-
-        void result(int requestCode, int resultCode);
-        void loadAccountItems(final boolean showLoading);
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.kt
new file mode 100644
index 0000000..90104c9
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.kt
@@ -0,0 +1,90 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import dagger.Provides
+import io.reactivex.Single
+
+interface ManageAccountsContract {
+    interface View : BaseView<Presenter?> {
+        fun setAccountManager(accountManager: AccountManager)
+        val isActive: Boolean
+        fun finishActivity()
+        fun cancelActivity()
+        fun addAccount()
+        fun editAccount(account: Account?)
+        fun confirmAccountRemoval(account: Account)
+        val accountsWithPermissionCheck: Array<Account>?
+        fun loadAccountItems(): Single<List<AccountItem>>
+        fun swapItems(accountItems: List<AccountItem?>)
+        fun showSuccessfullyUpdatedSnackbar()
+        fun showNotEnoughPermissionsSnackbar()
+    }
+
+    interface ViewModel : BaseView<Presenter?>
+    interface Presenter : BasePresenter {
+        fun result(requestCode: Int, resultCode: Int)
+        fun loadAccountItems(showLoading: Boolean)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
deleted file mode 100644
index a017ef8..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
+++ /dev/null
@@ -1,302 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import android.accounts.Account;
-import android.accounts.AccountManager;
-import android.accounts.AccountManagerCallback;
-import android.accounts.AuthenticatorException;
-import android.accounts.OperationCanceledException;
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Intent;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Handler;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.annotation.VisibleForTesting;
-import androidx.appcompat.app.AlertDialog;
-import androidx.fragment.app.DialogFragment;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentManager;
-import androidx.recyclerview.widget.DividerItemDecoration;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.bytesforge.linkasanote.R;
-import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity;
-import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment;
-import com.bytesforge.linkasanote.databinding.FragmentManageAccountsBinding;
-import com.bytesforge.linkasanote.settings.Settings;
-import com.bytesforge.linkasanote.utils.CloudUtils;
-import com.google.android.material.snackbar.Snackbar;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.List;
-
-import io.reactivex.Single;
-
-public class ManageAccountsFragment extends Fragment implements ManageAccountsContract.View {
-
-    private static final String TAG = ManageAccountsFragment.class.getSimpleName();
-    private static final Handler handler = new Handler();
-
-    private ManageAccountsContract.Presenter presenter;
-    private AccountsAdapter adapter;
-    private FragmentManageAccountsBinding binding;
-    private AccountManager accountManager;
-
-    public static ManageAccountsFragment newInstance() {
-        return new ManageAccountsFragment();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        presenter.subscribe();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        presenter.unsubscribe();
-    }
-
-    @Override
-    public boolean isActive() {
-        return isAdded();
-    }
-
-    @Override
-    public void setPresenter(@NonNull ManageAccountsContract.Presenter presenter) {
-        this.presenter = checkNotNull(presenter);
-    }
-
-    @Override
-    public void setAccountManager(@NonNull AccountManager accountManager) {
-        this.accountManager = checkNotNull(accountManager);
-    }
-
-    @Override
-    public void finishActivity() {
-        getActivity().onBackPressed();
-    }
-
-    @Override
-    public void cancelActivity() {
-        getActivity().setResult(Activity.RESULT_CANCELED);
-        getActivity().finish();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        presenter.result(requestCode, resultCode);
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(
-            LayoutInflater inflater, @Nullable ViewGroup container,
-            @Nullable Bundle savedInstanceState) {
-        binding = FragmentManageAccountsBinding.inflate(inflater, container, false);
-        // RecyclerView
-        setupAccountsRecyclerView(binding.rvAccounts);
-        return binding.getRoot();
-    }
-
-    private void setupAccountsRecyclerView(RecyclerView rvAccounts) {
-        List<AccountItem> accountItems = new ArrayList<>();
-        adapter = new AccountsAdapter((ManageAccountsPresenter) presenter, accountItems);
-        rvAccounts.setAdapter(adapter);
-        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
-        rvAccounts.setLayoutManager(layoutManager);
-        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(
-                rvAccounts.getContext(), layoutManager.getOrientation());
-        rvAccounts.addItemDecoration(dividerItemDecoration);
-    }
-
-    @Override
-    public Single<List<AccountItem>> loadAccountItems() {
-        return Single.fromCallable(() -> {
-            Account[] accounts = getAccountsWithPermissionCheck();
-            if (accounts == null) {
-                throw new NullPointerException("Required permission was not granted");
-            }
-            List<AccountItem> accountItems = new LinkedList<>();
-            for (Account account : accounts) {
-                AccountItem accountItem = CloudUtils.getAccountItem(account, getContext());
-                accountItems.add(accountItem);
-            }
-            if (Settings.GLOBAL_MULTIACCOUNT_SUPPORT || accounts.length <= 0) {
-                accountItems.add(new AccountItem());
-            }
-            return accountItems;
-        });
-    }
-
-    @Override
-    public void showNotEnoughPermissionsSnackbar() {
-        Snackbar.make(binding.rvAccounts,
-                R.string.snackbar_no_permission, Snackbar.LENGTH_LONG)
-                .addCallback(new Snackbar.Callback() {
-
-                    @Override
-                    public void onDismissed(Snackbar transientBottomBar, int event) {
-                        super.onDismissed(transientBottomBar, event);
-                        cancelActivity();
-                    }
-                }).show();
-    }
-
-    @Override
-    public void showSuccessfullyUpdatedSnackbar() {
-        Snackbar.make(binding.rvAccounts,
-                R.string.manage_accounts_account_updated, Snackbar.LENGTH_SHORT).show();
-    }
-
-    @Override
-    public void addAccount() {
-        accountManager.addAccount(getAccountType(getContext()),
-                null, null, null, getActivity(), addAccountCallback, handler);
-    }
-
-    @Override
-    public void editAccount(Account account) {
-        Intent updateAccountIntent = new Intent(getContext(), AddEditAccountActivity.class);
-        int requestCode = AddEditAccountActivity.REQUEST_UPDATE_NEXTCLOUD_ACCOUNT;
-
-        updateAccountIntent.putExtra(NextcloudFragment.ARGUMENT_EDIT_ACCOUNT_ACCOUNT, account);
-        updateAccountIntent.putExtra(AddEditAccountActivity.ARGUMENT_REQUEST_CODE, requestCode);
-        startActivityForResult(updateAccountIntent, requestCode);
-    }
-
-    @Override
-    public void confirmAccountRemoval(Account account) {
-        AccountRemovalConfirmationDialog dialog =
-                AccountRemovalConfirmationDialog.newInstance(account);
-        dialog.setTargetFragment(this, AccountRemovalConfirmationDialog.DIALOG_REQUEST_CODE);
-        FragmentManager fragmentManager = getFragmentManager();
-        if (fragmentManager != null)
-            dialog.show(fragmentManager, AccountRemovalConfirmationDialog.DIALOG_TAG);
-    }
-
-    public void removeAccount(Account account) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
-            accountManager.removeAccount(account, getActivity(), removeAccountCallback, handler);
-        } else {
-            //noinspection deprecation
-            accountManager.removeAccount(account, removeAccountCallbackCompat, handler);
-        }
-    }
-
-    public static class AccountRemovalConfirmationDialog extends DialogFragment {
-
-        private static final String ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT = "ACCOUNT";
-
-        public static final String DIALOG_TAG = "ACCOUNT_REMOVAL_CONFIRMATION";
-        public static final int DIALOG_REQUEST_CODE = 0;
-
-        private Account account;
-
-        public static AccountRemovalConfirmationDialog newInstance(@NonNull Account account) {
-            checkNotNull(account);
-
-            Bundle args = new Bundle();
-            args.putParcelable(ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT, account);
-            AccountRemovalConfirmationDialog dialog = new AccountRemovalConfirmationDialog();
-            dialog.setArguments(args);
-            return dialog;
-        }
-
-        @Override
-        public void onCreate(@Nullable Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            account = getArguments().getParcelable(ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT);
-        }
-
-        @NonNull
-        @Override
-        public Dialog onCreateDialog(Bundle savedInstanceState) {
-            return new AlertDialog.Builder(getContext())
-                    .setTitle(R.string.manage_accounts_removal_confirmation_title)
-                    .setMessage(getResources().getString(
-                            R.string.manage_accounts_removal_confirmation_message, account.name))
-                    .setIcon(R.drawable.ic_warning)
-                    .setPositiveButton(R.string.dialog_button_delete, (dialog, which) ->
-                            ((ManageAccountsFragment) getTargetFragment()).removeAccount(account))
-                    .setNegativeButton(R.string.dialog_button_cancel, null)
-                    .create();
-        }
-    }
-
-    private AccountManagerCallback<Bundle> removeAccountCallback = future -> {
-        if (future != null && future.isDone()) {
-            // NOTE: sync successfully completes if account is removed in the middle
-            presenter.loadAccountItems(true);
-        }
-    };
-
-    private AccountManagerCallback<Boolean> removeAccountCallbackCompat = future -> {
-        if (future != null && future.isDone()) {
-            presenter.loadAccountItems(true);
-        }
-    };
-
-    private AccountManagerCallback<Bundle> addAccountCallback = future -> {
-        if (future == null) return;
-        try {
-            future.getResult(); // NOTE: see exceptions
-            presenter.loadAccountItems(true);
-        } catch (OperationCanceledException e) {
-            Log.d(TAG, "Account creation canceled");
-        } catch (IOException | AuthenticatorException e) {
-            Log.e(TAG, "Account creation finished with an exception", e);
-        }
-    };
-
-    @Override
-    @Nullable
-    public Account[] getAccountsWithPermissionCheck() {
-        return CloudUtils.getAccountsWithPermissionCheck(getContext(), accountManager);
-    }
-
-    @Override
-    public void swapItems(@NonNull List<AccountItem> accountItems) {
-        checkNotNull(accountItems);
-        adapter.swapItems(accountItems);
-    }
-
-    @VisibleForTesting
-    ManageAccountsContract.Presenter getPresenter() {
-        return presenter;
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.kt
new file mode 100644
index 0000000..8cfc210
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.kt
@@ -0,0 +1,295 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.*
+import android.app.Activity
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.app.Dialog
+import android.os.Build
+import android.os.Handler
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.util.Log
+import android.view.Gravity
+import android.view.View
+import androidx.appcompat.app.AlertDialog
+import androidx.fragment.app.DialogFragment
+import androidx.fragment.app.Fragment
+import com.bytesforge.linkasanote.databinding.FragmentManageAccountsBinding
+import com.bytesforge.linkasanote.settings.Settings
+import com.google.common.base.Preconditions
+import dagger.Provides
+import io.reactivex.Single
+import java.io.IOException
+import java.lang.NullPointerException
+import java.util.*
+
+class ManageAccountsFragment : Fragment(), ManageAccountsContract.View {
+    @get:VisibleForTesting
+    var presenter: ManageAccountsContract.Presenter? = null
+        private set
+    private var adapter: AccountsAdapter? = null
+    private var binding: FragmentManageAccountsBinding? = null
+    private var accountManager: AccountManager? = null
+    override fun onResume() {
+        super.onResume()
+        presenter!!.subscribe()
+    }
+
+    override fun onPause() {
+        super.onPause()
+        presenter!!.unsubscribe()
+    }
+
+    override val isActive: Boolean
+        get() = isAdded
+
+    override fun setPresenter(presenter: ManageAccountsContract.Presenter) {
+        this.presenter = Preconditions.checkNotNull(presenter)
+    }
+
+    override fun setAccountManager(accountManager: AccountManager) {
+        this.accountManager = Preconditions.checkNotNull(accountManager)
+    }
+
+    override fun finishActivity() {
+        activity!!.onBackPressed()
+    }
+
+    override fun cancelActivity() {
+        activity!!.setResult(Activity.RESULT_CANCELED)
+        activity!!.finish()
+    }
+
+    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        presenter!!.result(requestCode, resultCode)
+    }
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        binding = FragmentManageAccountsBinding.inflate(inflater, container, false)
+        // RecyclerView
+        setupAccountsRecyclerView(binding!!.rvAccounts)
+        return binding!!.root
+    }
+
+    private fun setupAccountsRecyclerView(rvAccounts: RecyclerView) {
+        val accountItems: MutableList<AccountItem?> = ArrayList()
+        adapter = AccountsAdapter((presenter as ManageAccountsPresenter?)!!, accountItems)
+        rvAccounts.adapter = adapter
+        val layoutManager = LinearLayoutManager(context)
+        rvAccounts.layoutManager = layoutManager
+        val dividerItemDecoration = DividerItemDecoration(
+            rvAccounts.context, layoutManager.orientation
+        )
+        rvAccounts.addItemDecoration(dividerItemDecoration)
+    }
+
+    override fun loadAccountItems(): Single<List<AccountItem>> {
+        return Single.fromCallable {
+            val accounts = accountsWithPermissionCheck
+                ?: throw NullPointerException("Required permission was not granted")
+            val accountItems: MutableList<AccountItem> = LinkedList()
+            for (account in accounts) {
+                val accountItem = CloudUtils.getAccountItem(account, context!!)
+                accountItems.add(accountItem)
+            }
+            if (Settings.GLOBAL_MULTIACCOUNT_SUPPORT || accounts.size <= 0) {
+                accountItems.add(AccountItem())
+            }
+            accountItems
+        }
+    }
+
+    override fun showNotEnoughPermissionsSnackbar() {
+        Snackbar.make(
+            binding!!.rvAccounts,
+            R.string.snackbar_no_permission, Snackbar.LENGTH_LONG
+        )
+            .addCallback(object : Snackbar.Callback() {
+                override fun onDismissed(transientBottomBar: Snackbar, event: Int) {
+                    super.onDismissed(transientBottomBar, event)
+                    cancelActivity()
+                }
+            }).show()
+    }
+
+    override fun showSuccessfullyUpdatedSnackbar() {
+        Snackbar.make(
+            binding!!.rvAccounts,
+            R.string.manage_accounts_account_updated, Snackbar.LENGTH_SHORT
+        ).show()
+    }
+
+    override fun addAccount() {
+        accountManager!!.addAccount(
+            CloudUtils.getAccountType(context!!),
+            null, null, null, activity, addAccountCallback, handler
+        )
+    }
+
+    override fun editAccount(account: Account?) {
+        val updateAccountIntent = Intent(context, AddEditAccountActivity::class.java)
+        val requestCode = AddEditAccountActivity.REQUEST_UPDATE_NEXTCLOUD_ACCOUNT
+        updateAccountIntent.putExtra(NextcloudFragment.ARGUMENT_EDIT_ACCOUNT_ACCOUNT, account)
+        updateAccountIntent.putExtra(AddEditAccountActivity.ARGUMENT_REQUEST_CODE, requestCode)
+        startActivityForResult(updateAccountIntent, requestCode)
+    }
+
+    override fun confirmAccountRemoval(account: Account) {
+        val dialog = AccountRemovalConfirmationDialog.newInstance(account)
+        dialog.setTargetFragment(this, AccountRemovalConfirmationDialog.DIALOG_REQUEST_CODE)
+        val fragmentManager = fragmentManager
+        if (fragmentManager != null) dialog.show(
+            fragmentManager,
+            AccountRemovalConfirmationDialog.DIALOG_TAG
+        )
+    }
+
+    fun removeAccount(account: Account?) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
+            accountManager!!.removeAccount(account, activity, removeAccountCallback, handler)
+        } else {
+            accountManager!!.removeAccount(account, removeAccountCallbackCompat, handler)
+        }
+    }
+
+    class AccountRemovalConfirmationDialog : DialogFragment() {
+        private var account: Account? = null
+        override fun onCreate(savedInstanceState: Bundle?) {
+            super.onCreate(savedInstanceState)
+            account = arguments!!.getParcelable(ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT)
+        }
+
+        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+            return AlertDialog.Builder(context!!)
+                .setTitle(R.string.manage_accounts_removal_confirmation_title)
+                .setMessage(
+                    resources.getString(
+                        R.string.manage_accounts_removal_confirmation_message, account!!.name
+                    )
+                )
+                .setIcon(R.drawable.ic_warning)
+                .setPositiveButton(R.string.dialog_button_delete) { dialog: DialogInterface?, which: Int ->
+                    (targetFragment as ManageAccountsFragment?)!!.removeAccount(
+                        account
+                    )
+                }
+                .setNegativeButton(R.string.dialog_button_cancel, null)
+                .create()
+        }
+
+        companion object {
+            private const val ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT = "ACCOUNT"
+            const val DIALOG_TAG = "ACCOUNT_REMOVAL_CONFIRMATION"
+            const val DIALOG_REQUEST_CODE = 0
+            fun newInstance(account: Account): AccountRemovalConfirmationDialog {
+                Preconditions.checkNotNull(account)
+                val args = Bundle()
+                args.putParcelable(ARGUMENT_REMOVAL_CONFIRMATION_ACCOUNT, account)
+                val dialog = AccountRemovalConfirmationDialog()
+                dialog.arguments = args
+                return dialog
+            }
+        }
+    }
+
+    private val removeAccountCallback =
+        AccountManagerCallback { future: AccountManagerFuture<Bundle?>? ->
+            if (future != null && future.isDone) {
+                // NOTE: sync successfully completes if account is removed in the middle
+                presenter!!.loadAccountItems(true)
+            }
+        }
+    private val removeAccountCallbackCompat =
+        AccountManagerCallback { future: AccountManagerFuture<Boolean?>? ->
+            if (future != null && future.isDone) {
+                presenter!!.loadAccountItems(true)
+            }
+        }
+    private val addAccountCallback =
+        label@ AccountManagerCallback { future: AccountManagerFuture<Bundle?>? ->
+            if (future == null) return@label
+            try {
+                future.result // NOTE: see exceptions
+                presenter!!.loadAccountItems(true)
+            } catch (e: OperationCanceledException) {
+                Log.d(TAG, "Account creation canceled")
+            } catch (e: IOException) {
+                Log.e(TAG, "Account creation finished with an exception", e)
+            } catch (e: AuthenticatorException) {
+                Log.e(TAG, "Account creation finished with an exception", e)
+            }
+        }
+    override val accountsWithPermissionCheck: Array<Account>?
+        get() = CloudUtils.getAccountsWithPermissionCheck(context!!, accountManager!!)
+
+    override fun swapItems(accountItems: List<AccountItem?>) {
+        Preconditions.checkNotNull(accountItems)
+        adapter!!.swapItems(accountItems)
+    }
+
+    companion object {
+        private val TAG = ManageAccountsFragment::class.java.simpleName
+        private val handler = Handler()
+        fun newInstance(): ManageAccountsFragment {
+            return ManageAccountsFragment()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
deleted file mode 100644
index c3b7738..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import android.accounts.Account;
-import android.accounts.AccountManager;
-import android.app.Activity;
-import android.content.Context;
-import android.util.DisplayMetrics;
-import android.view.Gravity;
-import android.widget.ImageButton;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-
-import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity;
-import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
-
-import javax.inject.Inject;
-
-import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.disposables.Disposable;
-
-public final class ManageAccountsPresenter implements ManageAccountsContract.Presenter {
-
-    private static final String TAG = ManageAccountsPresenter.class.getSimpleName();
-
-    private final ManageAccountsContract.View view;
-    private final AccountManager accountManager;
-    private final BaseSchedulerProvider schedulerProvider;
-
-    @NonNull
-    private final CompositeDisposable disposable;
-
-    @Inject
-    public ManageAccountsPresenter(
-            ManageAccountsContract.View view, AccountManager accountManager,
-            BaseSchedulerProvider schedulerProvider) {
-        this.view = view;
-        this.accountManager = accountManager;
-        this.schedulerProvider = schedulerProvider;
-        disposable = new CompositeDisposable();
-    }
-
-    @Inject
-    void setupView() {
-        view.setPresenter(this);
-        view.setAccountManager(accountManager);
-    }
-
-    @Override
-    public void subscribe() {
-        loadAccountItems(true);
-    }
-
-    @Override
-    public void loadAccountItems(final boolean showLoading) {
-        disposable.clear();
-        Disposable disposable = view.loadAccountItems()
-                .subscribeOn(schedulerProvider.computation())
-                .observeOn(schedulerProvider.ui())
-                .subscribe(
-                        view::swapItems,
-                        // NullPointerException
-                        throwable -> view.showNotEnoughPermissionsSnackbar());
-        this.disposable.add(disposable);
-    }
-
-    @Override
-    public void unsubscribe() {
-        disposable.clear();
-    }
-
-    @Override
-    public void result(int requestCode, int resultCode) {
-        if (AddEditAccountActivity.REQUEST_UPDATE_NEXTCLOUD_ACCOUNT == requestCode
-                && Activity.RESULT_OK == resultCode) {
-            view.showSuccessfullyUpdatedSnackbar();
-        }
-    }
-
-    public void onAddClick() {
-        view.addAccount();
-    }
-
-    public void onEditClick(Account account) {
-        view.editAccount(account);
-    }
-
-    public void onRemoveClick(Account account) {
-        view.confirmAccountRemoval(account);
-    }
-
-    public boolean onImageButtonLongClick(ImageButton view) {
-        Context context = view.getContext();
-        Toast toast = Toast.makeText(context, view.getContentDescription(), Toast.LENGTH_SHORT);
-        DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
-        int xOffset = displayMetrics.widthPixels - view.getLeft();
-        int yOffset = view.getBottom() + view.getHeight();
-        toast.setGravity(Gravity.TOP|Gravity.END, xOffset, yOffset);
-        toast.show();
-        return true;
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.kt
new file mode 100644
index 0000000..a060f33
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.kt
@@ -0,0 +1,138 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import android.app.Activity
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import dagger.Provides
+
+class ManageAccountsPresenter @Inject constructor(
+    private val view: ManageAccountsContract.View, private val accountManager: AccountManager,
+    private val schedulerProvider: BaseSchedulerProvider
+) : ManageAccountsContract.Presenter {
+    private val disposable: CompositeDisposable
+    @Inject
+    fun setupView() {
+        view.setPresenter(this)
+        view.setAccountManager(accountManager)
+    }
+
+    override fun subscribe() {
+        loadAccountItems(true)
+    }
+
+    override fun loadAccountItems(showLoading: Boolean) {
+        disposable.clear()
+        val disposable = view.loadAccountItems()
+            .subscribeOn(schedulerProvider.computation())
+            .observeOn(schedulerProvider.ui())
+            .subscribe(
+                { accountItems: List<AccountItem?> -> view.swapItems(accountItems) }
+            )  // NullPointerException
+            { throwable: Throwable? -> view.showNotEnoughPermissionsSnackbar() }
+        this.disposable.add(disposable)
+    }
+
+    override fun unsubscribe() {
+        disposable.clear()
+    }
+
+    override fun result(requestCode: Int, resultCode: Int) {
+        if (AddEditAccountActivity.REQUEST_UPDATE_NEXTCLOUD_ACCOUNT == requestCode
+            && Activity.RESULT_OK == resultCode
+        ) {
+            view.showSuccessfullyUpdatedSnackbar()
+        }
+    }
+
+    fun onAddClick() {
+        view.addAccount()
+    }
+
+    fun onEditClick(account: Account?) {
+        view.editAccount(account)
+    }
+
+    fun onRemoveClick(account: Account) {
+        view.confirmAccountRemoval(account)
+    }
+
+    fun onImageButtonLongClick(view: ImageButton): Boolean {
+        val context = view.context
+        val toast = Toast.makeText(context, view.contentDescription, Toast.LENGTH_SHORT)
+        val displayMetrics = context.resources.displayMetrics
+        val xOffset = displayMetrics.widthPixels - view.left
+        val yOffset = view.bottom + view.height
+        toast.setGravity(Gravity.TOP or Gravity.END, xOffset, yOffset)
+        toast.show()
+        return true
+    }
+
+    companion object {
+        private val TAG = ManageAccountsPresenter::class.java.simpleName
+    }
+
+    init {
+        disposable = CompositeDisposable()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
deleted file mode 100644
index 70fa0f9..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * LaaNo Android application
- *
- * @author Aleksandr Borisenko <developer@laano.net>
- * Copyright (C) 2017 Aleksandr Borisenko
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.bytesforge.linkasanote.manageaccounts;
-
-import dagger.Module;
-import dagger.Provides;
-
-@Module
-public class ManageAccountsPresenterModule {
-
-    private final ManageAccountsContract.View view;
-
-    public ManageAccountsPresenterModule(ManageAccountsContract.View view) {
-        this.view = view;
-    }
-
-    @Provides
-    public ManageAccountsContract.View provideManageAccountsContractView() {
-        return view;
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.kt b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.kt
new file mode 100644
index 0000000..1c5e1a6
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.kt
@@ -0,0 +1,75 @@
+/*
+ * LaaNo Android application
+ *
+ * @author Aleksandr Borisenko <developer@laano.net>
+ * Copyright (C) 2017 Aleksandr Borisenko
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.bytesforge.linkasanote.manageaccounts
+
+import android.accounts.Account
+import com.bytesforge.linkasanote.manageaccounts.AccountItem
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenter
+import androidx.recyclerview.widget.RecyclerView
+import androidx.databinding.ViewDataBinding
+import android.view.ViewGroup
+import android.view.LayoutInflater
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter.AccountItemDiffCallback
+import androidx.recyclerview.widget.DiffUtil.DiffResult
+import androidx.recyclerview.widget.DiffUtil
+import androidx.appcompat.app.AppCompatActivity
+import javax.inject.Inject
+import android.os.Bundle
+import androidx.databinding.DataBindingUtil
+import com.bytesforge.linkasanote.R
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment
+import com.bytesforge.linkasanote.utils.ActivityUtils
+import com.bytesforge.linkasanote.LaanoApplication
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule
+import android.content.Intent
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity
+import com.bytesforge.linkasanote.BaseView
+import android.accounts.AccountManager
+import com.bytesforge.linkasanote.BasePresenter
+import com.bytesforge.linkasanote.manageaccounts.AccountsAdapter
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.DividerItemDecoration
+import com.bytesforge.linkasanote.utils.CloudUtils
+import com.google.android.material.snackbar.Snackbar
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsFragment.AccountRemovalConfirmationDialog
+import android.content.DialogInterface
+import android.accounts.AccountManagerCallback
+import android.accounts.AccountManagerFuture
+import com.bytesforge.linkasanote.FragmentScoped
+import dagger.Subcomponent
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import android.widget.ImageButton
+import android.widget.Toast
+import android.util.DisplayMetrics
+import android.view.Gravity
+import dagger.Module
+import dagger.Provides
+
+@Module
+class ManageAccountsPresenterModule(private val view: ManageAccountsContract.View?) {
+    @Provides
+    fun provideManageAccountsContractView(): ManageAccountsContract.View? {
+        return view
+    }
+}
\ No newline at end of file
