diff --git a/src/com/dconstructing/cooper/ConnectionActivity.java b/src/com/dconstructing/cooper/ConnectionActivity.java
index 6104dc8..3ac3b58 100644
--- a/src/com/dconstructing/cooper/ConnectionActivity.java
+++ b/src/com/dconstructing/cooper/ConnectionActivity.java
@@ -17,6 +17,7 @@
  */
 package com.dconstructing.cooper;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Iterator;
 
@@ -50,7 +51,7 @@ public class ConnectionActivity extends Activity implements DirectoryListener, F
 	Messenger mService = null;
 	ArrayList<Long> mConnectionQueue = new ArrayList<Long>();
 	
-	final Messenger mMessenger = new Messenger(new IncomingHandler());
+	final Messenger mMessenger = new Messenger(new IncomingHandler(this));
 	
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
@@ -277,9 +278,16 @@ public class ConnectionActivity extends Activity implements DirectoryListener, F
     
     
     
-    class IncomingHandler extends Handler {
+    static class IncomingHandler extends Handler {
+    	private final WeakReference<ConnectionActivity> mActivity;
+    	
+    	IncomingHandler(ConnectionActivity activity) {
+            mActivity = new WeakReference<ConnectionActivity>(activity);
+        }
+    	
         @Override
         public void handleMessage(Message msg) {
+        	ConnectionActivity activity = mActivity.get();
             switch (msg.what) {
                 case ConnectionService.MSG_COMMAND_RETURN:
                 	Bundle cmdBundle = msg.getData();
@@ -287,9 +295,9 @@ public class ConnectionActivity extends Activity implements DirectoryListener, F
                 	if (response == null) {
                 		ArrayList<String> files = cmdBundle.getStringArrayList("files");
                 		ArrayList<String> directories = cmdBundle.getStringArrayList("directories");
-                		handleResponse(cmdBundle.getLong("uuid"), files, directories);
+                		activity.handleResponse(cmdBundle.getLong("uuid"), files, directories);
                 	} else {
-                		handleResponse(cmdBundle.getLong("uuid"), cmdBundle.getInt("command"), cmdBundle.getString("parameter"), response);
+                		activity.handleResponse(cmdBundle.getLong("uuid"), cmdBundle.getInt("command"), cmdBundle.getString("parameter"), response);
                 	}
                 default:
                     super.handleMessage(msg);
diff --git a/src/com/dconstructing/cooper/fragments/ConnectionsFragment.java b/src/com/dconstructing/cooper/fragments/ConnectionsFragment.java
index e50f0ce..a95907f 100644
--- a/src/com/dconstructing/cooper/fragments/ConnectionsFragment.java
+++ b/src/com/dconstructing/cooper/fragments/ConnectionsFragment.java
@@ -17,6 +17,8 @@
  */
 package com.dconstructing.cooper.fragments;
 
+import java.lang.ref.WeakReference;
+
 import android.app.Activity;
 import android.app.ListFragment;
 import android.app.LoaderManager;
@@ -53,22 +55,8 @@ public class ConnectionsFragment extends ListFragment implements LoaderManager.L
     
     boolean defaultedToAdd = false;
 
-    private Handler mHandler = new Handler() {
-    	/**
-    	 * Have to jump through this hoop because we want to move immediately to the add page
-    	 * if the home page is loaded without any connections to display. We can't to a
-    	 * fragment transaction called from onLoadFinished of the Loader Callbacks.
-    	 * Even the Contextual Action Bar uses this message because we don't want to do the
-    	 * same thing from multiple locations.
-    	 */
-        @Override
-        public void handleMessage(Message msg) {
-            if(msg.what == MSG_SHOW_ADD_PAGE) {
-            	mAddConnectionCallback.onAddConnectionSelected();
-            }
-        }
-    };
-    
+    private Handler mHandler = new IncomingHandler(this);
+
 	@Override
 	public void onAttach(Activity activity) {
 		super.onAttach(activity);
@@ -192,7 +180,30 @@ public class ConnectionsFragment extends ListFragment implements LoaderManager.L
 	
 	
 	
-	public interface OnAddConnectionOptionListener {
+    static class IncomingHandler extends Handler {
+    	private final WeakReference<ConnectionsFragment> mFragment;
+    	
+    	IncomingHandler(ConnectionsFragment fragment) {
+            mFragment = new WeakReference<ConnectionsFragment>(fragment);
+        }
+    	
+    	/**
+    	 * Have to jump through this hoop because we want to move immediately to the add page
+    	 * if the home page is loaded without any connections to display. We can't to a
+    	 * fragment transaction called from onLoadFinished of the Loader Callbacks.
+    	 * Even the Contextual Action Bar uses this message because we don't want to do the
+    	 * same thing from multiple locations.
+    	 */
+        @Override
+        public void handleMessage(Message msg) {
+        	ConnectionsFragment fragment = mFragment.get();
+            if(msg.what == MSG_SHOW_ADD_PAGE) {
+            	fragment.mAddConnectionCallback.onAddConnectionSelected();
+            }
+        }
+    };
+
+    public interface OnAddConnectionOptionListener {
         public void onAddConnectionSelected();
         public void connectToServer(long id, String host, String username, boolean recycle);
     }
diff --git a/src/com/dconstructing/cooper/services/ConnectionService.java b/src/com/dconstructing/cooper/services/ConnectionService.java
index 255ef0f..2973ca2 100644
--- a/src/com/dconstructing/cooper/services/ConnectionService.java
+++ b/src/com/dconstructing/cooper/services/ConnectionService.java
@@ -225,7 +225,7 @@ public class ConnectionService extends Service {
     
 
     
-    class IncomingHandler extends Handler { // Handler of incoming messages from clients.
+    static class IncomingHandler extends Handler { // Handler of incoming messages from clients.
     	private final WeakReference<ConnectionService> mService;
     	
     	IncomingHandler(ConnectionService service) {
@@ -234,35 +234,35 @@ public class ConnectionService extends Service {
     	
         @Override
         public void handleMessage(Message msg) {
-        	if (MainActivity.isDebuggable) Log.i(TAG, "Message received");
         	ConnectionService service = mService.get();
+        	if (MainActivity.isDebuggable) Log.i(service.TAG, "Message received");
         	
             switch (msg.what) {
 	            case MSG_CONNECTION_INITIATE:
-	            	if (MainActivity.isDebuggable) Log.i(TAG, "Initiate Connection");
+	            	if (MainActivity.isDebuggable) Log.i(service.TAG, "Initiate Connection");
 	            	Bundle bundle = msg.getData();
 	            	service.establishConnection(bundle.getLong("uuid"), bundle.getString("host"), bundle.getInt("port"), bundle.getString("username"), bundle.getString("password"), msg.replyTo);
 	                break;
 	            case MSG_COMMAND_DISPATCH:
-	            	if (MainActivity.isDebuggable) Log.i(TAG, "Send Command Message");
+	            	if (MainActivity.isDebuggable) Log.i(service.TAG, "Send Command Message");
 	            	Bundle cmdBundle = msg.getData();
 	            	service.sendCommand(cmdBundle.getLong("uuid"), cmdBundle.getInt("command"), cmdBundle.getString("parameter"), cmdBundle.getString("content"), msg.replyTo);
 	                break;
 	            case MSG_CONNECTION_CHECK:
-	            	if (MainActivity.isDebuggable) Log.i(TAG, "Checking for existing connection");
+	            	if (MainActivity.isDebuggable) Log.i(service.TAG, "Checking for existing connection");
 	            	Bundle checkBundle = msg.getData();
 	            	try {
 	            		checkBundle.putBoolean("hasConnection", service.checkForConnection(checkBundle.getLong("uuid")));
 	                	Message outgoingMsg = Message.obtain(null, ConnectionService.MSG_CONNECTION_CHECKED);
 	                	outgoingMsg.setData(checkBundle);
-	                	outgoingMsg.replyTo = mMessenger;
+	                	outgoingMsg.replyTo = service.mMessenger;
 	            		msg.replyTo.send(outgoingMsg);
 	            	} catch (RemoteException e) {
 	            		
 	            	}
 	            	break;
 	            case MSG_FILE_SAVE:
-	            	if (MainActivity.isDebuggable) Log.i(TAG, "Saving file service");
+	            	if (MainActivity.isDebuggable) Log.i(service.TAG, "Saving file service");
 	            	Bundle saveBundle = msg.getData();
 	            	service.saveFile(saveBundle.getLong("uuid"), saveBundle.getString("parameter"), saveBundle.getString("content"), msg.replyTo);
 	            	break;
