diff --git a/core/src/com/greenyetilab/race/GameWorld.java b/core/src/com/greenyetilab/race/GameWorld.java
index 7406d50c..cf97f12a 100644
--- a/core/src/com/greenyetilab/race/GameWorld.java
+++ b/core/src/com/greenyetilab/race/GameWorld.java
@@ -13,11 +13,9 @@ import com.badlogic.gdx.physics.box2d.World;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.Pool;
 import com.badlogic.gdx.utils.ReflectionPool;
-import com.greenyetilab.utils.TilePolygons;
+import com.greenyetilab.utils.TileCollisionBodyCreator;
 import com.greenyetilab.utils.log.NLog;
 
-import java.util.Map;
-
 /**
  * Contains all the information and objects running in the world
  */
@@ -203,33 +201,8 @@ public class GameWorld {
         if (layer == null) {
             return;
         }
-
-        Map<Integer, TilePolygons> polygonsForTile = TilePolygons.readTiledMap(mMapInfo.getFile());
-
-        final float tileWidth = Constants.UNIT_FOR_PIXEL * layer.getTileWidth();
-        final float tileHeight = Constants.UNIT_FOR_PIXEL * layer.getTileHeight();
-        for (int ty = 0; ty < layer.getHeight(); ++ty) {
-            for (int tx = 0; tx < layer.getWidth(); ++tx) {
-                TiledMapTileLayer.Cell cell = layer.getCell(tx, ty);
-                if (cell == null) {
-                    continue;
-                }
-                int id = cell.getTile().getId();
-                TilePolygons polygons = polygonsForTile.get(id);
-                if (polygons != null) {
-                    createPolygonBody(tx * tileWidth, ty * tileHeight, tileWidth, tileHeight, polygons);
-                }
-            }
-        }
-    }
-
-    private void createPolygonBody(float x, float y, float width, float height, TilePolygons polygons) {
-        BodyDef bodyDef = new BodyDef();
-        bodyDef.type = BodyDef.BodyType.StaticBody;
-        bodyDef.position.set(x, y);
-        Body body = mBox2DWorld.createBody(bodyDef);
-
-        polygons.createBodyShapes(body, width, height);
+        TileCollisionBodyCreator creator = TileCollisionBodyCreator.fromFileHandle(mMapInfo.getFile());
+        creator.createCollisionBodies(mBox2DWorld, Constants.UNIT_FOR_PIXEL, layer);
     }
 
     private void setupRock(float x, float y, float width, float height) {
diff --git a/core/src/com/greenyetilab/utils/TileCollisionBodyCreator.java b/core/src/com/greenyetilab/utils/TileCollisionBodyCreator.java
new file mode 100644
index 00000000..36333d76
--- /dev/null
+++ b/core/src/com/greenyetilab/utils/TileCollisionBodyCreator.java
@@ -0,0 +1,68 @@
+package com.greenyetilab.utils;
+
+import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
+import com.badlogic.gdx.physics.box2d.Body;
+import com.badlogic.gdx.physics.box2d.BodyDef;
+import com.badlogic.gdx.physics.box2d.World;
+import com.badlogic.gdx.utils.XmlReader;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Create static bodies from the collision objects of a tile map
+ */
+public class TileCollisionBodyCreator {
+    private Map<Integer, TilePolygons> mMap = new HashMap<Integer, TilePolygons>();
+
+    public static TileCollisionBodyCreator fromFileHandle(FileHandle handle) {
+        XmlReader.Element root = FileUtils.parseXml(handle);
+        return fromXml(root);
+    }
+
+    public static TileCollisionBodyCreator fromXml(XmlReader.Element root) {
+        TileCollisionBodyCreator creator = new TileCollisionBodyCreator();
+        for (XmlReader.Element tileSetElement : root.getChildrenByName("tileset")) {
+            int firstGid = tileSetElement.getIntAttribute("firstgid");
+            int tileWidth = tileSetElement.getIntAttribute("tilewidth");
+            int tileHeight = tileSetElement.getIntAttribute("tileheight");
+            for (XmlReader.Element tileElement : tileSetElement.getChildrenByName("tile")) {
+                TilePolygons polygons = TilePolygons.fromXml(tileElement, tileWidth, tileHeight);
+                if (polygons != null) {
+                    Integer gid = firstGid + tileElement.getIntAttribute("id");
+                    creator.mMap.put(gid, polygons);
+                }
+            }
+        }
+        return creator;
+    }
+
+    public void createCollisionBodies(World world, float scale, TiledMapTileLayer layer) {
+        final float tileWidth = scale * layer.getTileWidth();
+        final float tileHeight = scale * layer.getTileHeight();
+        for (int ty = 0; ty < layer.getHeight(); ++ty) {
+            for (int tx = 0; tx < layer.getWidth(); ++tx) {
+                TiledMapTileLayer.Cell cell = layer.getCell(tx, ty);
+                if (cell == null) {
+                    continue;
+                }
+                createBodyForCell(world, cell, tx * tileWidth, ty * tileHeight, tileWidth, tileHeight);
+            }
+        }
+    }
+
+    private void createBodyForCell(World world, TiledMapTileLayer.Cell cell, float x, float y, float width, float height) {
+        int id = cell.getTile().getId();
+        TilePolygons polygons = mMap.get(id);
+        if (polygons == null) {
+            return;
+        }
+        BodyDef bodyDef = new BodyDef();
+        bodyDef.type = BodyDef.BodyType.StaticBody;
+        bodyDef.position.set(x, y);
+        Body body = world.createBody(bodyDef);
+
+        polygons.createBodyShapes(body, width, height, cell.getRotation() * 90);
+    }
+}
diff --git a/core/src/com/greenyetilab/utils/TilePolygons.java b/core/src/com/greenyetilab/utils/TilePolygons.java
index c503bcc0..f125d0bc 100644
--- a/core/src/com/greenyetilab/utils/TilePolygons.java
+++ b/core/src/com/greenyetilab/utils/TilePolygons.java
@@ -1,37 +1,16 @@
 package com.greenyetilab.utils;
 
-import com.badlogic.gdx.files.FileHandle;
+import com.badlogic.gdx.math.Polygon;
 import com.badlogic.gdx.physics.box2d.Body;
 import com.badlogic.gdx.physics.box2d.PolygonShape;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.XmlReader;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Represents the polygons of a tile
  */
 public class TilePolygons {
-    private final Array<float[]> mPolygons = new Array<float[]>();
-
-    public static Map<Integer, TilePolygons> readTiledMap(FileHandle handle) {
-        HashMap<Integer, TilePolygons> map = new HashMap<Integer, TilePolygons>();
-        XmlReader.Element root = FileUtils.parseXml(handle);
-        for (XmlReader.Element tileSetElement : root.getChildrenByName("tileset")) {
-            int firstGid = tileSetElement.getIntAttribute("firstgid");
-            int tileWidth = tileSetElement.getIntAttribute("tilewidth");
-            int tileHeight = tileSetElement.getIntAttribute("tileheight");
-            for (XmlReader.Element tileElement : tileSetElement.getChildrenByName("tile")) {
-                TilePolygons polygons = fromXml(tileElement, tileWidth, tileHeight);
-                if (polygons != null) {
-                    Integer gid = firstGid + tileElement.getIntAttribute("id");
-                    map.put(gid, polygons);
-                }
-            }
-        }
-        return map;
-    }
+    private final Array<Polygon> mPolygons = new Array<Polygon>();
 
     public static TilePolygons fromXml(XmlReader.Element element, int tileWidth, int tileHeight) {
         /*
@@ -65,9 +44,11 @@ public class TilePolygons {
             }
             for (int idx = 0, n = vertices.length; idx < n; idx += 2) {
                 vertices[idx] = vertices[idx] / tileWidth;
-                vertices[idx + 1] = 1 - vertices[idx + 1] /tileHeight;
+                vertices[idx + 1] = 1 - vertices[idx + 1] / tileHeight;
             }
-            polygons.mPolygons.add(vertices);
+            Polygon polygon = new Polygon(vertices);
+            polygon.setOrigin(0.5f, 0.5f);
+            polygons.mPolygons.add(polygon);
         }
         return polygons;
     }
@@ -102,25 +83,17 @@ public class TilePolygons {
         };
     }
 
-    public void createBodyShapes(Body body, float width, float height) {
-        for (float[] vertices : mPolygons) {
-            PolygonShape shape = createPolygonShape(vertices, width, height);
+    public void createBodyShapes(Body body, float width, float height, float rotation) {
+        for (Polygon polygon : mPolygons) {
+            polygon.setRotation(rotation);
+            float[] vertices = polygon.getTransformedVertices().clone();
+            for (int idx = 0; idx < vertices.length; idx += 2) {
+                vertices[idx] *= width;
+                vertices[idx + 1] *= height;
+            }
+            PolygonShape shape = new PolygonShape();
+            shape.set(vertices);
             body.createFixture(shape, 1);
         }
     }
-
-    public static PolygonShape createPolygonShape(float[] vertices, float width, float height) {
-        PolygonShape shape = new PolygonShape();
-        float[] scaledVertices = vertices.clone();
-        scaleVertices(scaledVertices, width, height);
-        shape.set(scaledVertices);
-        return shape;
-    }
-
-    private static void scaleVertices(float[] vertices, float scaleX, float scaleY) {
-        for (int i = 0; i < vertices.length; i += 2) {
-            vertices[i] *= scaleX;
-            vertices[i + 1] *= scaleY;
-        }
-    }
 }
