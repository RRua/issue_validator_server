diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java b/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
index 8ddf3f5..8ec017a 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
@@ -5,6 +5,7 @@ import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.support.annotation.IdRes;
 import android.support.annotation.NonNull;
+import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry;
 import android.support.v7.widget.Toolbar;
 
@@ -15,24 +16,27 @@ import static android.support.test.runner.lifecycle.Stage.RESUMED;
 
 public class TestUtils {
 
-    private static void rotateToLandscape(Activity activity) {
-        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    private static void rotateToLandscape(ActivityTestRule<? extends Activity> activity) {
+        activity.getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
     }
 
-    private static void rotateToPortrait(Activity activity) {
-        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    private static void rotateToPortrait(ActivityTestRule<? extends Activity> activity) {
+        activity.getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
 
-    public static void rotateOrientation(Activity activity) {
-        int currentOrientation = activity.getResources().getConfiguration().orientation;
+    public static void rotateOrientation(ActivityTestRule<? extends Activity> activity) {
+        int currentOrientation =
+                activity.getActivity().getResources().getConfiguration().orientation;
 
         switch (currentOrientation) {
             case Configuration.ORIENTATION_LANDSCAPE:
                 rotateToPortrait(activity);
                 break;
+
             case Configuration.ORIENTATION_PORTRAIT:
                 rotateToLandscape(activity);
                 break;
+
             default:
                 rotateToLandscape(activity);
         }
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java
new file mode 100644
index 0000000..9d8bf1b
--- /dev/null
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java
@@ -0,0 +1,64 @@
+package com.bytesforge.linkasanote.addeditfavorite;
+
+import android.support.test.espresso.Espresso;
+import android.support.test.filters.LargeTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.bytesforge.linkasanote.R;
+import com.bytesforge.linkasanote.TestUtils;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.closeSoftKeyboard;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.containsString;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class AddEditFavoriteActivityTest {
+
+    private final String FAVORITE_NAME = "Favorite";
+    // last tag is not completed
+    private final String FAVORITE_TAGS = "first second third";
+
+    @Rule
+    public ActivityTestRule<AddEditFavoriteActivity> addEditFavoriteActivityTestRule =
+            new ActivityTestRule<>(AddEditFavoriteActivity.class);
+
+    @Before
+    public void registerIdlingResource() {
+        Espresso.registerIdlingResources(
+                addEditFavoriteActivityTestRule.getActivity().getCountingIdlingResource());
+    }
+
+    @After
+    public void unregisterIdlingResource() {
+        Espresso.unregisterIdlingResources(
+                addEditFavoriteActivityTestRule.getActivity().getCountingIdlingResource());
+    }
+
+    @Test
+    public void orientationChange_EditTextFieldsPersists() throws InterruptedException {
+        fillFavoriteFields(FAVORITE_NAME, FAVORITE_TAGS);
+
+        TestUtils.rotateOrientation(addEditFavoriteActivityTestRule);
+
+        onView(withId(R.id.favorite_name)).check(matches(withText(FAVORITE_NAME)));
+        String uncompletedTag = FAVORITE_TAGS.split(" ")[2];
+        onView(withId(R.id.favorite_tags)).check(matches(withText(containsString(uncompletedTag))));
+    }
+
+    private void fillFavoriteFields(String name, String tags) {
+        onView(withId(R.id.favorite_name)).perform(typeText(name), closeSoftKeyboard());
+        onView(withId(R.id.favorite_tags)).perform(typeText(tags), closeSoftKeyboard());
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
index b91dc53..840c0ca 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
@@ -40,7 +40,7 @@ import static org.hamcrest.Matchers.notNullValue;
 public class FavoritesTabTest {
 
     private final List<String> FAVORITE_NAMES;
-     // last space to complete tag and close suggestions
+    // last space to complete tag and close suggestions
     private final String TAGS = "first second third ";
 
     private Repository repository;
@@ -98,12 +98,6 @@ public class FavoritesTabTest {
                 laanoActivityTestRule.getActivity().getCountingIdlingResource());
     }
 
-    @Test
-    public void clickAddFab_opensAddEditFavoriteActivity() {
-        onView(withId(R.id.fab_add)).perform(click());
-        onView(withId(R.id.favorite_name)).check(matches(isDisplayed()));
-    }
-
     @Test
     public void addFavoritesToFavoritesRecyclerView() {
         repository.cacheIsDirty = true;
@@ -115,6 +109,7 @@ public class FavoritesTabTest {
 
     private void createFavorite(String name, String tags) {
         onView(withId(R.id.fab_add)).perform(click());
+        onView(withId(R.id.favorite_name)).check(matches(isDisplayed()));
 
         onView(withId(R.id.favorite_name)).perform(typeText(name), closeSoftKeyboard());
         onView(withId(R.id.favorite_tags)).perform(typeText(tags), closeSoftKeyboard());
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
index 1b5ff4e..0e58a88 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
@@ -1,5 +1,6 @@
 package com.bytesforge.linkasanote.addeditfavorite;
 
+import android.os.Bundle;
 import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.BasePresenter;
@@ -12,7 +13,6 @@ public interface AddEditFavoriteContract {
 
     interface View extends BaseView<Presenter> {
 
-        void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel);
         void swapTagsCompletionViewItems(List<Tag> tags);
 
         boolean isActive();
@@ -23,10 +23,12 @@ public interface AddEditFavoriteContract {
 
         void setTagsCompletionView(@NonNull FavoriteTagsCompletionView completionView);
         void showEmptyFavoriteSnackbar();
+        void onSaveInstanceState(Bundle outState);
     }
 
     interface Presenter extends BasePresenter {
 
+        boolean isNewFavorite();
         void saveFavorite(String name, List<Tag> tags);
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
index a93cbde..3525e16 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
@@ -6,6 +6,8 @@ import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
+import android.text.InputFilter;
+import android.text.SpannableStringBuilder;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -14,8 +16,11 @@ import android.widget.ArrayAdapter;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.databinding.FragmentAddEditFavoriteBinding;
+import com.tokenautocomplete.FilteredArrayAdapter;
 import com.tokenautocomplete.TokenCompleteTextView;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -27,6 +32,7 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
 
     private AddEditFavoriteContract.Presenter presenter;
     private AddEditFavoriteContract.ViewModel viewModel;
+    private FragmentAddEditFavoriteBinding binding;
 
     private List<Tag> tags;
 
@@ -56,11 +62,6 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
         this.presenter = checkNotNull(presenter);
     }
 
-    @Override
-    public void setViewModel(@NonNull AddEditFavoriteContract.ViewModel viewModel) {
-        this.viewModel = checkNotNull(viewModel);
-    }
-
     @Override
     public void finishActivity() {
         getActivity().setResult(Activity.RESULT_OK);
@@ -72,31 +73,82 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
     public View onCreateView(
             LayoutInflater inflater,
             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        FragmentAddEditFavoriteBinding binding = DataBindingUtil.inflate(
+        binding = DataBindingUtil.inflate(
                 inflater, R.layout.fragment_add_edit_favorite, container, false);
-        binding.setViewModel((AddEditFavoriteViewModel) viewModel);
 
+        if (savedInstanceState == null) {
+            // Default state
+            savedInstanceState = new Bundle();
+            savedInstanceState.putInt(AddEditFavoriteViewModel.ADD_BUTTON_TEXT,
+                    presenter.isNewFavorite()
+                            ? R.string.add_edit_favorite_new_button_title
+                            : R.string.add_edit_favorite_edit_button_title);
+        }
+        viewModel = new AddEditFavoriteViewModel(getContext(), savedInstanceState);
+        viewModel.setPresenter(presenter);
+        binding.setViewModel((AddEditFavoriteViewModel) viewModel);
         // FavoriteTags
-        FavoriteTagsCompletionView completionView = binding.favoriteTags;
+        final FavoriteTagsCompletionView completionView = binding.favoriteTags;
         if (completionView != null) {
-            completionView.setTokenClickStyle(TokenCompleteTextView.TokenClickStyle.Select);
-            completionView.setDeletionStyle(TokenCompleteTextView.TokenDeleteStyle.SelectThenDelete);
-            completionView.allowCollapse(false);
-            char[] splitChars = {',', ';', ' '};
-            completionView.setSplitChar(splitChars);
-            completionView.allowDuplicates(false);
-            completionView.performBestGuess(false);
-            int threshold = getContext().getResources().getInteger(R.integer.tags_autocomplete_threshold);
-            completionView.setThreshold(threshold);
-            tags = new ArrayList<>();
-            ArrayAdapter<Tag> adapter = new ArrayAdapter<>(
-                    getContext(), android.R.layout.simple_list_item_1, tags);
-            completionView.setAdapter(adapter);
+            setupTagsCompletionView(completionView);
             viewModel.setTagsCompletionView(completionView);
         }
         return binding.getRoot();
     }
 
+    private void setupTagsCompletionView(FavoriteTagsCompletionView completionView) {
+        // Options
+        completionView.setTokenClickStyle(TokenCompleteTextView.TokenClickStyle.Select);
+        completionView.setDeletionStyle(TokenCompleteTextView.TokenDeleteStyle.SelectThenDelete);
+        completionView.allowCollapse(false);
+        char[] splitChars = {' '};
+        completionView.setSplitChar(splitChars);
+        completionView.allowDuplicates(false);
+        completionView.performBestGuess(false);
+        int threshold = getContext().getResources().getInteger(R.integer.tags_autocomplete_threshold);
+        completionView.setThreshold(threshold);
+        // Adapter
+        tags = new ArrayList<>();
+        ArrayAdapter<Tag> adapter = new FilteredArrayAdapter<Tag>(
+                getContext(), android.R.layout.simple_list_item_1, tags) {
+            @Override
+            protected boolean keepObject(Tag tag, String mask) {
+                return tag.getName().toLowerCase().startsWith(mask)
+                        && !completionView.getObjects().contains(tag);
+            }
+        };
+        completionView.setAdapter(adapter);
+        // Input filter
+        InputFilter alphanumericFilter = (source, start, end, dest, dStart, dEnd) -> {
+            if (source instanceof SpannableStringBuilder) {
+                binding.favoriteTagsLayout.setError(null);
+                return source;
+            } else {
+                StringBuilder filteredStringBuilder = new StringBuilder();
+                for (int i = start; i < end; i++) {
+                    char currentChar = source.charAt(i);
+                    if (Character.isLetterOrDigit(currentChar)) {
+                        filteredStringBuilder.append(currentChar);
+                        binding.favoriteTagsLayout.setError(null);
+                    } else {
+                        binding.favoriteTagsLayout.setError(getResources().getString(
+                                R.string.add_edit_favorite_tags_validation_error));
+                    }
+                }
+                return filteredStringBuilder.toString();
+            }
+        };
+        InputFilter[] inputFilters = ArrayUtils.add(
+                completionView.getFilters(), alphanumericFilter);
+        completionView.setFilters(inputFilters);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        viewModel.onSaveInstanceState(outState);
+    }
+
     @Override
     public void swapTagsCompletionViewItems(List<Tag> tags) {
         if (this.tags != null) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
index 2a06e8d..fe0da79 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
@@ -1,6 +1,5 @@
 package com.bytesforge.linkasanote.addeditfavorite;
 
-import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -44,12 +43,8 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
     }
 
     @Inject
-    void setupView(Context context) {
-        viewModel = new AddEditFavoriteViewModel(context, isNewFavorite());
-        viewModel.setPresenter(this);
-
+    void setupView() {
         view.setPresenter(this);
-        view.setViewModel(viewModel);
     }
 
     @Override
@@ -100,7 +95,8 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
         }
     }
 
-    private boolean isNewFavorite() {
+    @Override
+    public boolean isNewFavorite() {
         return favoriteId == null;
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
index a0ef1dc..f28168b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
@@ -6,6 +6,7 @@ import android.databinding.Bindable;
 import android.databinding.BindingAdapter;
 import android.databinding.ObservableBoolean;
 import android.databinding.ObservableField;
+import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
 import android.text.Editable;
@@ -22,6 +23,10 @@ import static com.google.common.base.Preconditions.checkNotNull;
 public class AddEditFavoriteViewModel extends BaseObservable implements
         AddEditFavoriteContract.ViewModel, TokenCompleteTextView.TokenListener<Tag> {
 
+    public static final String FAVORITE_NAME = "FAVORITE_NAME";
+    public static final String ADD_BUTTON = "ADD_BUTTON";
+    public static final String ADD_BUTTON_TEXT = "ADD_BUTTON_TEXT";
+
     public final ObservableField<String> favoriteName = new ObservableField<>();
     public final ObservableBoolean addButton = new ObservableBoolean(false);
 
@@ -36,13 +41,18 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     @Bindable
     public SnackbarId snackbarId;
 
-    public AddEditFavoriteViewModel(Context context, boolean isNewFavorite) {
+    public AddEditFavoriteViewModel(Context context, Bundle savedInstanceState) {
         this.context = context;
-        if (isNewFavorite) {
-            addButtonText = R.string.add_edit_favorite_new_button_title;
-        } else {
-            addButtonText = R.string.add_edit_favorite_edit_button_title;
-        }
+        favoriteName.set(savedInstanceState.getString(FAVORITE_NAME));
+        addButton.set(savedInstanceState.getBoolean(ADD_BUTTON));
+        addButtonText = savedInstanceState.getInt(ADD_BUTTON_TEXT);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        outState.putString(FAVORITE_NAME, favoriteName.get());
+        outState.putBoolean(ADD_BUTTON, addButton.get());
+        outState.putInt(ADD_BUTTON_TEXT, addButtonText);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
index 6c9299d..f8bf9af 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
@@ -163,23 +163,35 @@ public class Repository implements DataSource {
     public Observable<List<Favorite>> getFavorites() {
         if (cachedFavorites != null && !cacheIsDirty) {
             return Observable.from(cachedFavorites.values()).toList();
-        } else if (cachedFavorites == null) {
-            cachedFavorites = new LinkedHashMap<>();
         }
 
+        Observable<List<Favorite>> localFavorites = getAndCacheLocalFavorites();
+
         Observable<List<Favorite>> cloudFavorites =
                 Observable.just(Collections.<Favorite>emptyList());
 
-        Observable<List<Favorite>> localFavorites = getAndCacheLocalFavorites();
         return Observable.concat(localFavorites, cloudFavorites)
                 .filter(favorites -> !favorites.isEmpty())
                 .first();
     }
 
     private Observable<List<Favorite>> getAndCacheLocalFavorites() {
+        if (cachedFavorites == null) {
+            cachedFavorites = new LinkedHashMap<>();
+        }
+        if (cachedTags == null) {
+            cachedTags = new LinkedHashMap<>();
+        }
         return localDataSource.getFavorites()
                 .flatMap(favorites -> Observable.from(favorites)
-                        .doOnNext(favorite -> cachedFavorites.put(favorite.getId(), favorite))
+                        .doOnNext(favorite -> {
+                            // NOTE: cache invalidation required when all items are requested
+                            cachedFavorites.put(favorite.getId(), favorite);
+                            List<Tag> tags = favorite.getTags();
+                            if (tags != null) {
+                                for (Tag tag : tags) cachedTags.put(tag.getName(), tag);
+                            }
+                        })
                         .toList());
     }
 
@@ -199,9 +211,17 @@ public class Repository implements DataSource {
         if (cachedFavorites == null) {
             cachedFavorites = new LinkedHashMap<>();
         }
-
+        if (cachedTags == null) {
+            cachedTags = new LinkedHashMap<>();
+        }
         Observable<Favorite> localFavorite = localDataSource.getFavorite(favoriteId)
-                .doOnNext(favorite -> cachedFavorites.put(favoriteId, favorite))
+                .doOnNext(favorite -> {
+                    cachedFavorites.put(favoriteId, favorite);
+                    List<Tag> tags = favorite.getTags();
+                    if (tags != null) {
+                        for (Tag tag : tags) cachedTags.put(tag.getName(), tag);
+                    }
+                })
                 .first();
 
         Observable<Favorite> cloudFavorite =
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
index 7b8d402..9c3da15 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
@@ -99,8 +99,10 @@ public class LocalDataSource implements DataSource {
                     int rowIdIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
                     while (cursor.moveToNext()) {
                         String rowId = cursor.getString(rowIdIndex);
-                        List<Tag> tags = readTags(
-                                LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId));
+                        Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
+                        List<Tag> tags = getTagsFrom(favoriteTagsUri)
+                                .toBlocking()
+                                .single();
                         favorites.add(Favorite.from(cursor, tags));
                     }
                     return favorites;
@@ -121,11 +123,12 @@ public class LocalDataSource implements DataSource {
                     if (cursor == null || cursor.getCount() <= 0) return null;
                     else cursor.moveToFirst();
 
-                    String rowId = cursor.getString(
-                            cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID));
-                    List<Tag> tags = readTags(
-                            LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId));
-
+                    int rowIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
+                    String rowId = cursor.getString(rowIndex);
+                    Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
+                    List<Tag> tags = getTagsFrom(favoriteTagsUri)
+                            .toBlocking()
+                            .single();
                     return Favorite.from(cursor, tags);
                 })
                 .first();
@@ -144,9 +147,7 @@ public class LocalDataSource implements DataSource {
         Uri uri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
         List<Tag> tags = favorite.getTags();
         if (tags != null) {
-            for (Tag tag : tags) {
-                saveBoundTag(tag, uri);
-            }
+            for (Tag tag : tags) saveTagTo(tag, uri);
         }
     }
 
@@ -159,12 +160,15 @@ public class LocalDataSource implements DataSource {
 
     @Override
     public Observable<List<Tag>> getTags() {
+        return getTagsFrom(LocalContract.TagEntry.buildTagsUri());
+    }
+
+    private Observable<List<Tag>> getTagsFrom(@NonNull Uri uri) {
         return briteResolver.createQuery(
-                LocalContract.TagEntry.buildTagsUri(),
-                LocalContract.TagEntry.TAG_COLUMNS,
+                uri, LocalContract.TagEntry.TAG_COLUMNS,
                 null, null, null, false)
                 .mapToList(Tag::from)
-                .first(); // Otherwise observer not always be completed
+                .first(); // Otherwise observable not always be completed
     }
 
     @Override
@@ -182,10 +186,10 @@ public class LocalDataSource implements DataSource {
     public void saveTag(@NonNull Tag tag) {
         checkNotNull(tag);
 
-        saveBoundTag(tag, LocalContract.TagEntry.buildTagsUri());
+        saveTagTo(tag, LocalContract.TagEntry.buildTagsUri());
     }
 
-    private void saveBoundTag(@NonNull Tag tag, @NonNull Uri uri) {
+    private void saveTagTo(@NonNull Tag tag, @NonNull Uri uri) {
         checkNotNull(tag);
         checkNotNull(uri);
 
@@ -197,21 +201,4 @@ public class LocalDataSource implements DataSource {
     public void deleteAllTags() {
         contentResolver.delete(LocalContract.TagEntry.buildTagsUri(), null, null);
     }
-
-    // TODO: Tag must be cached when read
-    private List<Tag> readTags(Uri uri) {
-        List<Tag> tags = new ArrayList<>();
-        Cursor tagsCursor = contentResolver.query(
-                uri, LocalContract.TagEntry.TAG_COLUMNS, null, null, null);
-        if (tagsCursor != null) {
-            try {
-                while (tagsCursor.moveToNext()) {
-                    tags.add(Tag.from(tagsCursor));
-                }
-            } finally {
-                tagsCursor.close();
-            }
-        }
-        return tags;
-    }
 }
diff --git a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/FilteredArrayAdapter.java b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/FilteredArrayAdapter.java
index c79cba4..9529f3e 100644
--- a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/FilteredArrayAdapter.java
+++ b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/FilteredArrayAdapter.java
@@ -1,6 +1,7 @@
 package com.tokenautocomplete;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.widget.ArrayAdapter;
 import android.widget.Filter;
 
@@ -77,24 +78,11 @@ abstract public class FilteredArrayAdapter<T> extends ArrayAdapter<T> {
         this.originalObjects = objects;
     }
 
-    @SuppressWarnings("unchecked")
-    @Override
-    public void notifyDataSetChanged() {
-        ((AppFilter)getFilter()).setSourceObjects(this.originalObjects);
-        super.notifyDataSetChanged();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public void notifyDataSetInvalidated(){
-        ((AppFilter)getFilter()).setSourceObjects(this.originalObjects);
-        super.notifyDataSetInvalidated();
-    }
-
+    @NonNull
     @Override
     public Filter getFilter() {
         if (filter == null)
-            filter = new AppFilter(originalObjects);
+            filter = new AppFilter();
         return filter;
     }
 
@@ -116,20 +104,10 @@ abstract public class FilteredArrayAdapter<T> extends ArrayAdapter<T> {
      */
     private class AppFilter extends Filter {
 
-        private ArrayList<T> sourceObjects;
-
-        public AppFilter(List<T> objects) {
-            setSourceObjects(objects);
-        }
-
-        public void setSourceObjects(List<T> objects) {
-            synchronized (this) {
-                sourceObjects = new ArrayList<T>(objects);
-            }
-        }
-
         @Override
         protected FilterResults performFiltering(CharSequence chars) {
+            ArrayList<T> sourceObjects = new ArrayList<T>(originalObjects);
+
             FilterResults result = new FilterResults();
             if (chars != null && chars.length() > 0) {
                 String mask = chars.toString();
diff --git a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
index 1bcf940..307ee80 100644
--- a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
+++ b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
@@ -1357,14 +1357,20 @@ public abstract class TokenCompleteTextView<T> extends MultiAutoCompleteTextView
 
     protected ArrayList<Serializable> getSerializableObjects() {
         ArrayList<Serializable> serializables = new ArrayList<>();
+        boolean isSerializable = true;
         for (Object obj : getObjects()) {
             if (obj instanceof Serializable) {
                 serializables.add((Serializable) obj);
             } else {
+                isSerializable = false;
                 Log.e(TAG, "Unable to save '" + obj + "'");
             }
         }
-        if (serializables.size() != objects.size()) {
+        String currentCompletionText = currentCompletionText();
+        if (!TextUtils.isEmpty(currentCompletionText)) {
+            serializables.add(currentCompletionText);
+        }
+        if (!isSerializable) {
             String message = "You should make your objects Serializable or override\n" +
                     "getSerializableObjects and convertSerializableArrayToObjectArray";
             Log.e(TAG, message);
@@ -1435,7 +1441,11 @@ public abstract class TokenCompleteTextView<T> extends MultiAutoCompleteTextView
 
         addListeners();
         for (T obj : convertSerializableArrayToObjectArray(ss.baseObjects)) {
-            addObject(obj);
+            if (obj instanceof String) {
+                getText().append((String) obj);
+            } else {
+                addObject(obj);
+            }
         }
 
         // Collapse the view if necessary
