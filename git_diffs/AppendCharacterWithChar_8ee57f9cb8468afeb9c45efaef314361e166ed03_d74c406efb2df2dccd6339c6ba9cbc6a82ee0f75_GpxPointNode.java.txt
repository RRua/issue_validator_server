diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index 0ae7cecd..737126e0 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -31,6 +31,7 @@ import ch.bailu.aat.views.MainControlBar;
 import ch.bailu.aat.views.description.MultiView;
 import ch.bailu.aat.views.map.MapFactory;
 import ch.bailu.aat.views.map.OsmInteractiveView;
+import ch.bailu.aat.views.map.overlay.control.FileControlBar;
 import ch.bailu.aat.views.preferences.SolidDirectoryMenuButton;
 import ch.bailu.aat.views.preferences.TitleView;
 import ch.bailu.aat.views.preferences.VerticalScrollView;
@@ -49,6 +50,7 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
 
 
     private GpxListView                 listView;
+    private FileControlBar              fileControlBar;
     private DbSynchronizerBusyIndicator busyControl;
 
 
@@ -105,6 +107,8 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
         final VerticalScrollView filter= new VerticalScrollView(this);
         final VerticalScrollView summary= new VerticalScrollView(this);
         final OsmInteractiveView map = new MapFactory(this, solid_key).list(this);
+        fileControlBar = new FileControlBar(map, this);
+        map.add(fileControlBar);
 
         listView = new GpxListView(this, getGpxListItemData());
         listView.setOnItemClickListener(this);
@@ -144,7 +148,8 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
     public void onResumeWithService() {
 
         iteratorSimple = new IteratorSimple(getServiceContext());
-        listView.setAdapter(getServiceContext(), iteratorSimple);
+        listView.setIterator(getServiceContext(), iteratorSimple);
+        fileControlBar.setIterator(iteratorSimple);
         listView.setSelection(sdirectory.getPosition().getValue());
 
         getServiceContext().getDirectoryService().rescan();
@@ -159,7 +164,8 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
 
         iteratorSimple.close();
         iteratorSimple = Iterator.NULL;
-        listView.setAdapter(getServiceContext(), iteratorSimple);
+        listView.setIterator(getServiceContext(), iteratorSimple);
+        fileControlBar.setIterator(iteratorSimple);
 
         super.onPauseWithService();
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
index 6bc4472f..32c80713 100644
--- a/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
@@ -18,7 +18,7 @@ import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.views.description.MultiView;
-import ch.bailu.aat.views.description.VerticalView;
+import ch.bailu.aat.views.description.VSplitView;
 import ch.bailu.aat.views.graph.DistanceAltitudeGraphView;
 import ch.bailu.aat.views.graph.DistanceSpeedGraphView;
 import ch.bailu.aat.views.map.MapFactory;
@@ -59,7 +59,7 @@ public class FileContentActivity extends AbsFileContentActivity{
         VerticalScrollView summary = new VerticalScrollView(this);
         summary.addAllContent(this, summaryData, InfoID.FILEVIEW);
 
-        View graph = new VerticalView(this, new View[] {
+        View graph = new VSplitView(this, new View[] {
                         new DistanceAltitudeGraphView(this, this, InfoID.FILEVIEW),
                         new DistanceSpeedGraphView(this, this, InfoID.FILEVIEW)});
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java b/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
index 91be05c3..f15eb598 100644
--- a/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
@@ -19,7 +19,7 @@ import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.services.editor.EditorInterface;
 import ch.bailu.aat.views.NodeListView;
 import ch.bailu.aat.views.description.MultiView;
-import ch.bailu.aat.views.description.VerticalView;
+import ch.bailu.aat.views.description.VSplitView;
 import ch.bailu.aat.views.graph.DistanceAltitudeGraphView;
 import ch.bailu.aat.views.map.MapFactory;
 import ch.bailu.aat.views.preferences.VerticalScrollView;
@@ -69,7 +69,7 @@ public class GpxEditorActivity extends AbsFileContentActivity
 
         multiView.add(nodeList);
         multiView.add(map);
-        multiView.add(new VerticalView(this, new View[] {summary, graph}));
+        multiView.add(new VSplitView(this, new View[] {summary, graph}));
 
         return multiView;
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java b/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
index cb1b3383..e35f7737 100644
--- a/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/GpxViewActivity.java
@@ -37,7 +37,7 @@ import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.MainControlBar;
 import ch.bailu.aat.views.description.MultiView;
-import ch.bailu.aat.views.description.VerticalView;
+import ch.bailu.aat.views.description.VSplitView;
 import ch.bailu.aat.views.graph.DistanceAltitudeGraphView;
 import ch.bailu.aat.views.graph.DistanceSpeedGraphView;
 import ch.bailu.aat.views.map.OsmInteractiveView;
@@ -144,7 +144,7 @@ public class GpxViewActivity extends AbsDispatcher
         VerticalScrollView summary = new VerticalScrollView(this);
         summary.addAllContent(this, summaryData, InfoID.FILEVIEW);
 
-        View graph = new VerticalView(this, new View[] {
+        View graph = new VSplitView(this, new View[] {
                 new DistanceAltitudeGraphView(this, this, InfoID.FILEVIEW),
                 new DistanceSpeedGraphView(this, this, InfoID.FILEVIEW)
         });
diff --git a/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java b/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
index bf4078fe..161f9883 100644
--- a/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/NodeDetailActivity.java
@@ -17,11 +17,12 @@ import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxListArray;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.helpers.AppLayout;
+import ch.bailu.aat.helpers.HtmlBuilderGpx;
 import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.HtmlScrollTextView;
 import ch.bailu.aat.views.MainControlBar;
-import ch.bailu.aat.views.description.VerticalView;
+import ch.bailu.aat.views.description.VSplitView;
 import ch.bailu.aat.views.map.MapFactory;
 import ch.bailu.aat.views.map.OsmInteractiveView;
 
@@ -34,22 +35,25 @@ public class NodeDetailActivity extends AbsDispatcher
     private ImageButton nextNode, previousNode;
 
 
-    private VerticalView       verticalView;
-    private OsmInteractiveView map;
-    private HtmlScrollTextView           text;
+    private VSplitView verticalView;
+    private OsmInteractiveView mapView;
+    private HtmlScrollTextView htmlView;
 
     private String fileID="";
 
 
-    private GpxListArray       array = new GpxListArray(GpxList.NULL_ROUTE);
+    private GpxListArray arrayCache = new GpxListArray(GpxList.NULL_ROUTE);
+    private GpxInformation infoCache = GpxInformation.NULL;
 
 
+    private HtmlBuilderGpx htmlBuilder;
+
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-
+        htmlBuilder = new HtmlBuilderGpx(this);
         fileID = getIntent().getStringExtra("ID");
 
         final LinearLayout contentView = new ContentView(this);
@@ -76,13 +80,13 @@ public class NodeDetailActivity extends AbsDispatcher
     }
 
 
-    private VerticalView createVerticalView() {
-        map = new MapFactory(this, SOLID_KEY).node();
+    private VSplitView createVerticalView() {
+        mapView = new MapFactory(this, SOLID_KEY).node();
 
-        text=new HtmlScrollTextView(this);
-        text.enableAutoLink();
+        htmlView =new HtmlScrollTextView(this);
+        htmlView.enableAutoLink();
 
-        return new VerticalView(this, new View[] {text, map});
+        return new VSplitView(this, new View[] {htmlView, mapView});
     }
 
 
@@ -90,13 +94,16 @@ public class NodeDetailActivity extends AbsDispatcher
         addTarget(this, InfoID.FILEVIEW);
         addSource(new CurrentLocationSource(getServiceContext()));
         addSource(new CustomFileSource(getServiceContext(), fileID));
+
+
     }
 
 
     @Override
     public void onContentUpdated(GpxInformation info) {
 
-        array = new GpxListArray(info.getGpxList());
+        arrayCache = new GpxListArray(info.getGpxList());
+        infoCache = info;
 
         int index = getIntent().getIntExtra("I", 0);
         updateToIndex(index);
@@ -104,23 +111,25 @@ public class NodeDetailActivity extends AbsDispatcher
 
 
     private void updateToIndex(int i) {
-        if (array.size()>0) {
-            final StringBuilder builder=new StringBuilder();
+        if (arrayCache.size()>0) {
 
-            if (i<0) i = array.size()-1;
-            if (i>=array.size()) i=0;
+            if (i < 0) i = arrayCache.size()-1;
+            if (i >= arrayCache.size()) i=0;
 
-            map.frameBoundingBox(array.get(i).getBoundingBox());
+            mapView.frameBoundingBox(arrayCache.get(i).getBoundingBox());
 
-            array.get(i).toHtml(this, builder);
-            text.setHtmlText(builder.toString());
+            htmlBuilder.clear();
+            htmlBuilder.appendInfo(infoCache, i);
+            htmlBuilder.appendNode(arrayCache.get(i), infoCache);
+            htmlBuilder.appendAttributes(arrayCache.get(i).getAttributes());
+            htmlView.setHtmlText(htmlBuilder.toString());
         }
     }
 
     @Override
     public void onClick(View v) {
-        if (array.size()>0) {
-            int i = array.getIndex();
+        if (arrayCache.size()>0) {
+            int i = arrayCache.getIndex();
 
             if (v == previousNode) {
                 i--;
diff --git a/app/src/main/java/ch/bailu/aat/activities/TrackerActivity.java b/app/src/main/java/ch/bailu/aat/activities/TrackerActivity.java
index 52c07dac..8021a457 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TrackerActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TrackerActivity.java
@@ -27,7 +27,7 @@ import ch.bailu.aat.views.MvNextButton;
 import ch.bailu.aat.views.description.CockpitView;
 import ch.bailu.aat.views.description.MultiView;
 import ch.bailu.aat.views.description.TrackerStateButton;
-import ch.bailu.aat.views.description.VerticalView;
+import ch.bailu.aat.views.description.VSplitView;
 import ch.bailu.aat.views.graph.DistanceAltitudeGraphView;
 import ch.bailu.aat.views.graph.DistanceSpeedGraphView;
 import ch.bailu.aat.views.map.MapFactory;
@@ -70,7 +70,7 @@ public class TrackerActivity extends AbsDispatcher implements OnClickListener{
         multiView = new MultiView(this, SOLID_KEY);
         multiView.add(createCockpit());
         multiView.add(map);
-        multiView.add(new VerticalView(this,
+        multiView.add(new VSplitView(this,
                 new View[] {
                     new DistanceAltitudeGraphView(this, this, InfoID.TRACKER),
                     new DistanceSpeedGraphView(this, this, InfoID.TRACKER)
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributes.java b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributes.java
index adbccc02..dbfeab07 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributes.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributes.java
@@ -1,147 +1,12 @@
 package ch.bailu.aat.gpx;
 
+public abstract class GpxAttributes {
 
+    public abstract String get(String key);
+    public abstract String getValue(int index);
+    public abstract String getKey(int index);
 
-public class GpxAttributes {
-    public static final GpxAttributes NULL_ATTRIBUTES = 
-            new GpxAttributes();
-
-
-    public static class Tag implements Comparable<Tag> {
-        public Tag(Tag keyValue) {
-            this(keyValue.key, keyValue.value);
-        }
-
-        public Tag(String k, String v) {
-            key=k;
-            value=v;
-        }
-
-        public final String key, value;
-
-
-        @Override
-        public int compareTo(Tag another) {
-            return key.compareTo(another.key);
-        }
-    }
-
-    private Tag[] tagList;
-
-
-    public GpxAttributes() {
-        this(new Tag[]{});
-    }
-
-    public GpxAttributes(Tag[] attr) {
-        tagList=attr;
-    }
-
-
-    public String get(String key) {
-        int index = getIndex(key);
-
-        if (index==size()) return null;
-
-        return tagList[index].value;
-    }
-
-
-    public String getValue(int index) {
-        if (index < size()) {
-            return tagList[index].value;
-        }
-        return null;
-    }
-
-
-    public String getKey(int index) {
-        if (index < size()) {
-            return tagList[index].key;
-        }
-        return null;
-    }
-
-
-
-    public void put(String key, String value) {
-        int index = getIndex(key);
-
-        if (index == size()) {
-            Tag[] newTagList = new Tag[size()+1];
-
-            System.arraycopy(tagList, 0, newTagList, 0, tagList.length);
-            tagList=newTagList;
-        }
-
-        tagList[index] = new Tag(key, value);
-    }
-
-
-    private int getIndex(String key) {
-        for (int i=0; i<size(); i++) {
-            if (tagList[i].key.equals(key)) return i;
-        }
-        return size();
-    }
-
-/*
-    public boolean isEmpty() {
-        return size()==0;
-    }
-*/
-    public int size() {
-        return tagList.length;
-    }
-
-
-
-    public void remove(String key) {
-        int index = getIndex(key);
-
-        if (index < size()) {
-            Tag[] newTagList = new Tag[size()-1];
-
-            int newIndex=0;
-            for (int oldIndex=0; oldIndex<size(); oldIndex++) {
-                if (oldIndex != index) {
-                    newTagList[newIndex] = new Tag(tagList[oldIndex]);
-                    newIndex++;
-                }
-            }
-            tagList=newTagList;
-        }
-    }
-
-
-
-
-    public StringBuilder toHtml(final StringBuilder builder) {
-        for (int i=0; i<size(); i++) {
-            if (getKey(i).equals("name") || getKey(i).equals("display_name")) {
-                appendKeyValueBold(builder,getKey(i), getValue(i));
-            } else {
-                appendKeyValue(builder, getKey(i), getValue(i));                
-            }
-            builder.append("<br>");
-        }
-
-        builder.append("<hr>");
-
-        return builder;
-    }
-
-    
-    public static void appendKeyValueBold(StringBuilder builder, String key, String value) {
-        builder.append("<b>");
-        appendKeyValue(builder,key,value);
-        builder.append("</b>");
-    }
-    
-    public static void appendKeyValue(StringBuilder builder, String key, String value) {
-        builder.append(key);
-        builder.append("=");
-        builder.append(value);
-    }
-
+    public abstract void put(String key, String value);
+    public abstract int size();
+    public abstract void remove(String key);
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java
new file mode 100644
index 00000000..37bdecd5
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java
@@ -0,0 +1,60 @@
+package ch.bailu.aat.gpx;
+
+
+import android.database.Cursor;
+
+import ch.bailu.aat.services.directory.GpxDbConstants;
+
+public class GpxAttributesDbCursor extends GpxAttributes {
+    private final Cursor cursor;
+    private final int position;
+
+    public GpxAttributesDbCursor(Cursor c) {
+        cursor = c;
+        position = cursor.getPosition();
+    }
+
+
+    @Override
+    public int size() {
+        return GpxDbConstants.KEY_LIST.length;
+    }
+
+    @Override
+    public void remove(String key) {}
+
+
+    @Override
+    public String getKey(int i) {
+        return GpxDbConstants.KEY_LIST[i];
+    }
+
+    @Override
+    public void put(String key, String value) {}
+
+
+    @Override
+    public String get(String key) {
+        for (int p = 0; p < size(); p++) {
+            if (getKey(p).equals(key)) {
+                return getValue(p);
+            }
+        }
+
+        for (int p = 0; p < size(); p++) {
+            if (getKey(p).contains(key)) {
+                return getValue(p);
+            }
+        }
+
+        return "";
+    }
+
+
+    public String getValue(int i) {
+        final int column = cursor.getColumnIndex(getKey(i));
+
+        cursor.moveToPosition(position);
+        return cursor.getString(column);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesStatic.java b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesStatic.java
new file mode 100644
index 00000000..6b595a86
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesStatic.java
@@ -0,0 +1,115 @@
+package ch.bailu.aat.gpx;
+
+
+
+public class GpxAttributesStatic extends GpxAttributes{
+    public static final GpxAttributesStatic NULL_ATTRIBUTES =
+            new GpxAttributesStatic();
+
+
+    public static class Tag implements Comparable<Tag> {
+        public Tag(Tag keyValue) {
+            this(keyValue.key, keyValue.value);
+        }
+
+        public Tag(String k, String v) {
+            key=k;
+            value=v;
+        }
+
+        public final String key, value;
+
+
+        @Override
+        public int compareTo(Tag another) {
+            return key.compareTo(another.key);
+        }
+    }
+
+    private Tag[] tagList;
+
+
+    public GpxAttributesStatic() {
+        this(new Tag[]{});
+    }
+
+    public GpxAttributesStatic(Tag[] attr) {
+        tagList=attr;
+    }
+
+
+    @Override
+    public String get(String key) {
+        int index = getIndex(key);
+
+        if (index==size()) return null;
+
+        return tagList[index].value;
+    }
+
+    @Override
+    public String getValue(int index) {
+        if (index < size()) {
+            return tagList[index].value;
+        }
+        return null;
+    }
+
+
+    @Override
+    public String getKey(int index) {
+        if (index < size()) {
+            return tagList[index].key;
+        }
+        return null;
+    }
+
+
+    @Override
+    public void put(String key, String value) {
+        int index = getIndex(key);
+
+        if (index == size()) {
+            Tag[] newTagList = new Tag[size()+1];
+
+            System.arraycopy(tagList, 0, newTagList, 0, tagList.length);
+            tagList=newTagList;
+        }
+
+        tagList[index] = new Tag(key, value);
+    }
+
+
+    private int getIndex(String key) {
+        for (int i=0; i<size(); i++) {
+            if (tagList[i].key.equals(key)) return i;
+        }
+        return size();
+    }
+
+
+    @Override
+    public int size() {
+        return tagList.length;
+    }
+
+
+    @Override
+    public void remove(String key) {
+        int index = getIndex(key);
+
+        if (index < size()) {
+            Tag[] newTagList = new Tag[size()-1];
+
+            int newIndex=0;
+            for (int oldIndex=0; oldIndex<size(); oldIndex++) {
+                if (oldIndex != index) {
+                    newTagList[newIndex] = new Tag(tagList[oldIndex]);
+                    newIndex++;
+                }
+            }
+            tagList=newTagList;
+        }
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java b/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
index 73101a67..ec8e6f2b 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
@@ -6,9 +6,9 @@ import ch.bailu.aat.gpx.interfaces.GpxBigDeltaInterface;
 
 
 public class GpxBigDelta implements GpxBigDeltaInterface {
-    public final static GpxBigDelta NULL= new GpxBigDelta();
+    public final static GpxBigDelta NULL= new GpxBigDelta(new MaxSpeed.Raw());
 
-    private final MaxSpeed maximumSpeed=new MaxSpeed();
+    private final MaxSpeed maximumSpeed;
     private float distance=0;
 
     private long startTime=0;
@@ -20,6 +20,9 @@ public class GpxBigDelta implements GpxBigDeltaInterface {
     private BoundingBox boundingBox = null;
 
 
+    public GpxBigDelta(MaxSpeed max) {
+        maximumSpeed=max;
+    }
 
 
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxList.java b/app/src/main/java/ch/bailu/aat/gpx/GpxList.java
index e67044a1..7f21a692 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxList.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxList.java
@@ -9,13 +9,10 @@ import ch.bailu.aat.gpx.segmented_list.SegmentNodeFactory;
 import ch.bailu.aat.gpx.segmented_list.SegmentedList;
 
 public class GpxList {
-    public static final GpxList NULL_TRACK = new GpxList(GpxType.TRK);
-    public static final GpxList NULL_ROUTE = new GpxList(GpxType.RTE);
+    public static final GpxList NULL_TRACK = new GpxList(GpxType.TRK, new MaxSpeed.Raw());
+    public static final GpxList NULL_ROUTE = new GpxList(GpxType.RTE, new MaxSpeed.Raw());
 
     
-    public GpxList(int type) {
-        delta.setType(type);
-    }
 
 
     private final static SegmentNodeFactory GPX_SEGMENT_FACTORY = new SegmentNodeFactory () {
@@ -34,8 +31,13 @@ public class GpxList {
 
 
     private final SegmentedList list = new SegmentedList(GPX_SEGMENT_FACTORY);
-    private final GpxBigDelta delta=new GpxBigDelta();
-    
+    private final GpxBigDelta delta;
+
+    public GpxList(int type, MaxSpeed max) {
+        delta = new GpxBigDelta(max);
+        delta.setType(type);
+    }
+
 
     public void appendToCurrentSegment(GpxPoint tp, GpxAttributes at) {
         if (list.getSegmentList().size()==0) {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxListArray.java b/app/src/main/java/ch/bailu/aat/gpx/GpxListArray.java
index 6f3869ba..31f5fbcd 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxListArray.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxListArray.java
@@ -6,13 +6,13 @@ public class GpxListArray {
     private int index=0;
     private final GpxList list;
     private Node current;
-    
-    
+
+
     public GpxListArray(GpxList l) {
         list = l;
         current = list.getPointList().getFirst();
     }
-    
+
     public GpxPointNode get(int i) {
         setIndex(i);
         return get();
@@ -23,7 +23,7 @@ public class GpxListArray {
             current= current.getNext();
             index++;
         }
-        
+
         while (index > i) {
             current = current.getPrevious();
             index--;
@@ -33,17 +33,12 @@ public class GpxListArray {
     public GpxPointNode get() {
         return (GpxPointNode) current;
     }
-    
-    
     public int size() {
         return list.getPointList().size();
     }
-    
-
-        public GpxList getList() {
+    public GpxList getList() {
         return list;
     }
-
     public int getIndex() {
         return index;
     }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxListIterator.java b/app/src/main/java/ch/bailu/aat/gpx/GpxListIterator.java
index 85816141..63a33a88 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxListIterator.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxListIterator.java
@@ -7,7 +7,7 @@ public class GpxListIterator {
 
     private class PointPrimerNode extends GpxPointFirstNode {
         public PointPrimerNode() {
-            super(GpxPoint.NULL, GpxAttributes.NULL_ATTRIBUTES);
+            super(GpxPoint.NULL, GpxAttributesStatic.NULL_ATTRIBUTES);
         }
         
         @Override
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java b/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
index b0d968e1..fc640c7a 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
@@ -81,7 +81,7 @@ public class GpxPoint implements GpxPointInterface {
 
     @Override
     public GpxAttributes getAttributes() {
-        return GpxAttributes.NULL_ATTRIBUTES;
+        return GpxAttributesStatic.NULL_ATTRIBUTES;
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxPointNode.java b/app/src/main/java/ch/bailu/aat/gpx/GpxPointNode.java
index 5bbf4bca..3269dd7a 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxPointNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxPointNode.java
@@ -14,7 +14,7 @@ import ch.bailu.aat.gpx.linked_list.Node;
 public abstract class GpxPointNode extends Node implements GpxDeltaPointInterface {
     private final static String NULL_VALUE="0";
 
-    private GpxAttributes attributes = GpxAttributes.NULL_ATTRIBUTES;
+    private GpxAttributes attributes = GpxAttributesStatic.NULL_ATTRIBUTES;
     private final GpxPoint     point;
     
     
@@ -94,8 +94,8 @@ public abstract class GpxPointNode extends Node implements GpxDeltaPointInterfac
     
     
     private void initMap() {
-        if (attributes == GpxAttributes.NULL_ATTRIBUTES) {
-            attributes = new GpxAttributes();
+        if (attributes == GpxAttributesStatic.NULL_ATTRIBUTES) {
+            attributes = new GpxAttributesStatic();
         }
     }
 
@@ -108,7 +108,7 @@ public abstract class GpxPointNode extends Node implements GpxDeltaPointInterfac
     
     private void releaseMap() {
         if (attributes.size() == 0) {
-            attributes = GpxAttributes.NULL_ATTRIBUTES;
+            attributes = GpxAttributesStatic.NULL_ATTRIBUTES;
         }
     }
 
@@ -148,27 +148,4 @@ public abstract class GpxPointNode extends Node implements GpxDeltaPointInterfac
         
         return box;
     }
-
-    public StringBuilder toHtml(Context context, final StringBuilder builder) {
-        final DistanceDescription distance= new DistanceDescription(context);
-        final SpeedDescription    speed = new CurrentSpeedDescription(context);
-        final AltitudeDescription altitude= new AltitudeDescription(context);
-        
-        attributes.toHtml(builder);
-        
-        if (getTimeStamp() != 0 ) {
-            builder.append(speed.getLabel());
-            builder.append(" = ");
-            builder.append(speed.getSpeedDescription(getSpeed()));
-            builder.append("<br>");
-        }
-        
-        builder.append(altitude.getLabel());
-        builder.append("=");
-        builder.append(distance.getAltitudeDescription(getAltitude()));
-        
-        return builder;        
-    }
-    
-
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java b/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
index edad7912..276393d3 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
@@ -7,7 +7,7 @@ import ch.bailu.aat.gpx.segmented_list.SegmentNode;
 
 public class GpxSegmentNode extends SegmentNode implements GpxBigDeltaInterface {
 
-    private final GpxBigDelta delta=new GpxBigDelta();
+    private final GpxBigDelta delta=new GpxBigDelta(new MaxSpeed.Raw());
 
     
     public GpxSegmentNode(GpxPointNode n) {
@@ -20,6 +20,8 @@ public class GpxSegmentNode extends SegmentNode implements GpxBigDeltaInterface
     }
 
 
+
+
     @Override
     public void update(Node n) {
         GpxPointNode node=(GpxPointNode)n;
diff --git a/app/src/main/java/ch/bailu/aat/gpx/MaxSpeed.java b/app/src/main/java/ch/bailu/aat/gpx/MaxSpeed.java
index dae09df2..e1cf6ba8 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/MaxSpeed.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/MaxSpeed.java
@@ -1,42 +1,76 @@
 package ch.bailu.aat.gpx;
 
-public class MaxSpeed {
-    private final static int SAMPLES=5;
+public abstract class MaxSpeed {
 
-    private final float speeds[] = new float[SAMPLES];
-    private int i=0;
+    public abstract float get();
+    public abstract void add(float speed);
 
-    private float maxSpeed=0f;
 
-    public void add(float speed) {
-        insert(speed);
-        set();
-    }
 
+    public static class Raw extends MaxSpeed {
 
-    private void set() {
-        float s = getSmallest();
-        maxSpeed = Math.max(maxSpeed, s);
-    }
+        private float maximum=0f;
 
+        @Override
+        public float get() {
+            return maximum;
+        }
 
-    private void insert(float speed) {
-        speeds[i] = speed;
-        i = (++i) % SAMPLES;
+        @Override
+        public void add(float speed) {
+            maximum=Math.max(speed, maximum);
+        }
     }
 
 
-    private float getSmallest() {
-        float r=speeds[0];
+    public static class Samples extends MaxSpeed {
+        private final float speeds[];
+        private int i = 0;
+
+        private float maximum = 0f;
+
 
-        for (int i=1; i<speeds.length; i++) {
-            r = Math.min(r, speeds[i]);
+        public Samples() {
+            this(5);
+        }
+
+
+        public Samples(int samples) {
+            samples = Math.max(samples, 1);
+            speeds = new float[samples];
+        }
+
+        @Override
+        public float get() {
+            return maximum;
+        }
+
+        @Override
+        public void add(float speed) {
+            insert(speed);
+            set();
+        }
+
+
+        private void set() {
+            float s = getSmallest();
+            maximum = Math.max(maximum, s);
         }
-        return r;
-    }
 
 
-    public float get() {
-        return maxSpeed;
+        private void insert(float speed) {
+            speeds[i] = speed;
+            i = (++i) % speeds.length;
+        }
+
+
+        private float getSmallest() {
+            float r = speeds[0];
+
+            for (int i = 1; i < speeds.length; i++) {
+                r = Math.min(r, speeds[i]);
+            }
+            return r;
+        }
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
index 578c86c7..3b1a96cb 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
@@ -3,6 +3,7 @@ package ch.bailu.aat.gpx.interfaces;
 import org.osmdroid.api.IGeoPoint;
 
 import ch.bailu.aat.gpx.GpxAttributes;
+import ch.bailu.aat.gpx.GpxAttributesStatic;
 
 public interface GpxPointInterface extends IGeoPoint {
     short getAltitude();
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
index aeb94551..52bcb978 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
@@ -4,6 +4,7 @@ import java.io.IOException;
 
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxPoint;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.helpers.file.AbsAccess;
 import ch.bailu.aat.services.background.ThreadControl;
@@ -46,7 +47,7 @@ public class GpxListReader {
         private boolean  haveNewSegment=true;
 
         public OnParsed(int type) {
-            gpxList = new GpxList(type);
+            gpxList = new GpxList(type, new MaxSpeed.Samples());
         }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmTag.java b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmTag.java
index f9192ad6..455b408e 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmTag.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmTag.java
@@ -2,7 +2,7 @@ package ch.bailu.aat.gpx.parser;
 
 import java.io.IOException;
 
-import ch.bailu.aat.gpx.GpxAttributes.Tag;
+import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
 import ch.bailu.aat.gpx.parser.XmlParser.ParserIO;
 
 public class StateOsmTag extends ParserState {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/StateSimpleTag.java b/app/src/main/java/ch/bailu/aat/gpx/parser/StateSimpleTag.java
index 9fc83801..376d3ed1 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/StateSimpleTag.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/StateSimpleTag.java
@@ -2,7 +2,7 @@ package ch.bailu.aat.gpx.parser;
 
 import java.io.IOException;
 
-import ch.bailu.aat.gpx.GpxAttributes.Tag;
+import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
 import ch.bailu.aat.gpx.parser.XmlParser.ParserIO;
 
 public class StateSimpleTag extends ParserState {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
index 63750fb2..bb92b1d1 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
@@ -9,7 +9,8 @@ import java.io.IOException;
 import java.util.ArrayList;
 
 import ch.bailu.aat.gpx.GpxAttributes;
-import ch.bailu.aat.gpx.GpxAttributes.Tag;
+import ch.bailu.aat.gpx.GpxAttributesStatic;
+import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.helpers.file.AbsAccess;
 
@@ -34,7 +35,7 @@ public class XmlParser implements Closeable, GpxPointInterface {
         parsed        = OnParsedInterface.NULL_ONPARSED;
 
         public final SparseArray<GeoPoint> nodeMap = new SparseArray<>(50);
-        public final ArrayList<GpxAttributes.Tag> tagList = new ArrayList<>();
+        public final ArrayList<GpxAttributesStatic.Tag> tagList = new ArrayList<>();
         
         private ParserIO(AbsAccess file) throws IOException {
             stream = new SimpleStream(file);
@@ -77,7 +78,7 @@ public class XmlParser implements Closeable, GpxPointInterface {
 
     
     public GpxAttributes getAttributes() {
-        return new GpxAttributes(io.tagList.toArray(new Tag[]{}));
+        return new GpxAttributesStatic(io.tagList.toArray(new Tag[]{}));
     }
 
     
diff --git a/app/src/main/java/ch/bailu/aat/helpers/FileList.java b/app/src/main/java/ch/bailu/aat/helpers/FileList.java
deleted file mode 100644
index c2a81829..00000000
--- a/app/src/main/java/ch/bailu/aat/helpers/FileList.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package ch.bailu.aat.helpers;
-
-/*
-public class FileList {
-    private final File directory;
-    
-    private File[] files;
-    private int index=0;
-
-
-    
-    public FileList(File d) {
-        directory = d;
-        listFiles();
-    }
-
-    
-
-
-    public boolean listFiles() {
-        files = directory.listFiles();
-        return validateIndex();
-    }
-    
-    
-    public boolean next() {
-        index++;
-        
-        return validateIndex();
-    }
-
-
-    public boolean previous() {
-        index--;
-        return validateIndex();
-    }
-
-
-    public boolean select(int i) {
-        index=i;
-        return validateIndex();
-    }
-    
-
-    public boolean select(String fileName) {
-        for (int i=0; i<files.length; i++) { 
-            if (files[i].getName().equals(fileName)) {
-                index=i;
-                return true;
-            }
-        }
-        return validateIndex();
-    }
-
-    
-    
-    
-    public void delete() {
-        if (isIndexValid()) {
-            files[index].delete();
-            listFiles();
-        }
-    }
-
-
-    
-    public File toFile() {
-        if (isIndexValid()) {
-            return files[index];
-        }
-        return new File("/dev/null");
-    }
-    
-    
-    public String getFileName() {
-        return toFile().getName();
-    }
-
-
-
-
-
-
-    public boolean isIndexValid() {
-        return index < files.length && index > -1;
-    }
-
-    
-    private boolean validateIndex() {
-        if (isIndexValid()) {
-            return true;
-            
-        } else {
-            index = Math.min(files.length-1, index);
-            index = Math.max(0, index);
-            return false;
-            
-        }
-        
-    }
-
-
-    public void rename(File target) {
-        if (isIndexValid()) {
-            files[index].renameTo(target);
-            listFiles();
-        }
-    }
-
-
-    public int size() {
-        return files.length;
-    }
-}
-*/
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilder.java b/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilder.java
new file mode 100644
index 00000000..9afdf5be
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilder.java
@@ -0,0 +1,65 @@
+package ch.bailu.aat.helpers;
+
+public class HtmlBuilder {
+
+    private final StringBuilder b = new StringBuilder();
+
+
+    public void clear() {
+        b.setLength(0);
+    }
+
+
+    public void appendH1(String s) {
+        append("<h1>");
+        append(s);
+        append("</h1>");
+    }
+
+
+    public void appendH2(String s) {
+        append("<h2>");
+        append(s);
+        append("</h2>");
+    }
+
+    public void appendH3(String s) {
+        append("<h3>");
+        append(s);
+        append("</h3>");
+    }
+
+
+    public void append(String s) {
+        b.append(s);
+    }
+
+    public void appendKeyValueBold(String k, String v) {
+        append("<li><b>");
+        append(k);
+        append("=");
+        append(v);
+        append("</b></li>");
+    }
+
+    public void appendKeyValue(String k, String v) {
+        append("<li>");
+        append(k);
+        append("=");
+        append(v);
+        append("</li>");
+    }
+
+    public void append(String l, String v) {
+        append(l);
+        append(": ");
+        append(v);
+    }
+
+
+    @Override
+    public String toString() {
+        return b.toString();
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilderGpx.java b/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilderGpx.java
new file mode 100644
index 00000000..3295292a
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/helpers/HtmlBuilderGpx.java
@@ -0,0 +1,70 @@
+package ch.bailu.aat.helpers;
+
+
+import android.content.Context;
+
+import ch.bailu.aat.description.AltitudeDescription;
+import ch.bailu.aat.description.ContentDescription;
+import ch.bailu.aat.description.CurrentSpeedDescription;
+import ch.bailu.aat.description.DistanceDescription;
+import ch.bailu.aat.description.SpeedDescription;
+import ch.bailu.aat.description.TrackSizeDescription;
+import ch.bailu.aat.gpx.GpxAttributes;
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.GpxPointNode;
+import ch.bailu.aat.gpx.interfaces.GpxType;
+
+public class HtmlBuilderGpx extends HtmlBuilder {
+
+    private final DistanceDescription distance;
+    private final SpeedDescription speed;
+    private final AltitudeDescription altitude;
+
+
+    public HtmlBuilderGpx(Context context) {
+        distance = new DistanceDescription(context);
+        speed = new CurrentSpeedDescription(context);
+        altitude = new AltitudeDescription(context);
+    }
+
+    public void appendInfo(GpxInformation info, int index) {
+        appendH3(info.getName());
+        append("<b>" + index + "</b>/" + info.getGpxList().getPointList().size() + "<br>");
+    }
+
+    public void appendNode(GpxPointNode n, GpxInformation i) {
+        if (i.getType() == GpxType.TRK && n.getTimeStamp() != 0 ) {
+            append(speed.getLabel(), speed.getSpeedDescription(n.getSpeed()));
+            append("<br>");
+        }
+
+        append(altitude.getLabel(), distance.getAltitudeDescription(n.getAltitude()));
+        append("<br>");
+
+    }
+
+
+    public void append(ContentDescription d) {
+        append(d.getLabel(), d.getValueAsString());
+    }
+
+
+
+    public void appendAttributes(GpxAttributes a) {
+        if (a.size()>0) {
+
+            for (int i = 0; i < a.size(); i++) {
+                String k = a.getKey(i);
+                String v = a.getValue(i);
+
+                if (k.contains("name")) {
+                    appendKeyValueBold(k, v);
+                } else {
+                    appendKeyValue(k, v);
+                }
+                append("<br>");
+            }
+        }
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
index 4004f79c..aa5b6af2 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
@@ -12,6 +12,7 @@ import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.GpxPointLinkedNode;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.gpx.GpxSegmentNode;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.linked_list.Node;
 import ch.bailu.aat.gpx.parser.GpxListReader;
@@ -26,7 +27,7 @@ import ch.bailu.aat.services.dem.ElevationUpdaterClient;
 public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient {
     
 
-    private GpxList gpxList=new GpxList(GpxType.TRK);
+    private GpxList gpxList=new GpxList(GpxType.TRK, new MaxSpeed.Samples());
 
     private boolean ready=false;
     
@@ -126,10 +127,11 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
         
     }
 
+
     @Override
     public void onChanged(String id, ServiceContext sc) {
-        if (id.equals(toString()))
-            sc.getIconMapService().iconify(gpxList);
+//        if (id.equals(toString()))
+  //          sc.getIconMapService().iconify(gpxList);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/LockCache.java b/app/src/main/java/ch/bailu/aat/services/cache/LockCache.java
new file mode 100644
index 00000000..86135063
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/cache/LockCache.java
@@ -0,0 +1,100 @@
+package ch.bailu.aat.services.cache;
+
+import java.io.Closeable;
+
+public class LockCache<E extends ObjectHandle>  implements Closeable {
+    private E[] array;
+    private int size;
+
+
+    public LockCache(int capacity) {
+        array = (E[]) new ObjectHandle[capacity];
+        size = 0;
+    }
+
+
+    public int capacity() {
+        return array.length;
+    }
+
+
+    public int size() {
+        return size;
+    }
+
+
+    public E get(int i) {
+        return array[i];
+    }
+
+    public E use(int i) {
+        array[i].access();
+        return array[i];
+    }
+
+
+    public void add(E handle) {
+        int i;
+
+        if (size < array.length) {
+            i = size;
+            size++;
+
+        } else {
+            i = indexOfOldest();
+            array[i].free();
+        }
+
+        array[i] = handle;
+    }
+
+
+    private int indexOfOldest() {
+        int x=0;
+        for (int i = 1; i < size; i++) {
+            if (array[i].getAccessTime() < array[x].getAccessTime()) {
+                x=i;
+            }
+        }
+        return x;
+    }
+
+
+    @Override
+    public void close() {
+        reset();
+    }
+
+
+    public void reset() {
+        for (int i=0; i<size; i++) {
+            array[i].free();
+        }
+        size=0;
+    }
+
+
+    public void ensureCapacity(int capacity) {
+        if (capacity > array.length) {
+            resizeCache(capacity);
+        }
+
+    }
+
+    private void resizeCache(int capacity) {
+        final E[] newArray= (E[]) new ObjectHandle[capacity];
+        final int l = Math.min(newArray.length, array.length);
+        int x,i;
+
+        for (i=0; i<l; i++) {
+            newArray[i]=array[i];
+        }
+
+        for (x=i; x<size; x++) {
+            array[x].free();
+        }
+
+        array = newArray;
+        size = Math.min(size, array.length);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
index fa84af79..71e1352e 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
@@ -66,8 +66,9 @@ public class GpxDbConstants {
         KEY_SOUTH_BOUNDING,
         KEY_TYPE_ID
     };
-    
-    public static final String[] TYPE_LIST = new String[] {
+
+
+    public static final String[] TYPE_LIST_OLD = new String[] {
         TYPE_ID, 
         TYPE_STRING, 
         TYPE_STRING, 
@@ -84,4 +85,21 @@ public class GpxDbConstants {
         TYPE_LONG,
         TYPE_LONG
     };
+
+    public static final String[] TYPE_LIST = new String[] {
+            TYPE_ID,
+            TYPE_STRING,
+            TYPE_FLOAT,
+            TYPE_FLOAT,
+            TYPE_FLOAT,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG,
+            TYPE_LONG
+    };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
index 00f0e0e0..4cfa6590 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
@@ -30,7 +30,7 @@ public class GpxDbOpenHelper extends SQLiteOpenHelper {
             
             for (int i = 0; i<GpxDbConstants.KEY_LIST_OLD.length; i++) {
                 if (i> 0) expression.append(", ");
-                expression.append(GpxDbConstants.KEY_LIST_OLD[i]).append(" ").append(GpxDbConstants.TYPE_LIST[i]);
+                expression.append(GpxDbConstants.KEY_LIST_OLD[i]).append(" ").append(GpxDbConstants.TYPE_LIST_OLD[i]);
             }
             expression.append(")");
             return expression.toString();
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
index 863adbf7..f74af036 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
@@ -18,11 +18,6 @@ public class GpxInformationDbEntry extends GpxInformation {
     }
 
 
-    /*public GpxInformationDbEntry(Cursor c) {
-        cursor=c;
-    }
-*/
-
     @Override
     public boolean isLoaded() {
         return isValid();
@@ -32,7 +27,6 @@ public class GpxInformationDbEntry extends GpxInformation {
     @Override
     public String getPath() {
         return new File(parent, getName()).getAbsolutePath();
-        //return getString(GpxDbConstants.KEY_PATHNAME);
     }
 
     @Override
@@ -63,7 +57,9 @@ public class GpxInformationDbEntry extends GpxInformation {
 
 
     public boolean isValid() {
-        return (cursor.getPosition() > -1 && cursor.getPosition() < cursor.getCount());
+        return (cursor.isClosed() == false &&
+                cursor.getPosition() > -1 &&
+                cursor.getPosition() < cursor.getCount());
     }
 
     private String getString(String key) {
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
index bf057218..680a6eb4 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
@@ -4,12 +4,13 @@ import android.database.Cursor;
 
 import java.io.File;
 
-import ch.bailu.aat.gpx.GpxAttributes;
+import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxBigDelta;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.InfoID;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 
 public class GpxInformationDbSummary extends GpxInformation {
@@ -18,36 +19,30 @@ public class GpxInformationDbSummary extends GpxInformation {
     
     public GpxInformationDbSummary(File dir, Cursor cursor) {
         directory = dir;
-        list = new GpxList(GpxType.WAY);
+        list = new GpxList(GpxType.WAY, new MaxSpeed.Raw());
         
-        GpxBigDelta summary=new GpxBigDelta();
+        GpxBigDelta summary=new GpxBigDelta(new MaxSpeed.Raw());
         GpxInformation entry = new GpxInformationDbEntry(cursor, dir);
         
         cursor.moveToPosition(-1);
         while (cursor.moveToNext()) {
-            addEntryToList(entry);
+            addEntryToList(entry, cursor);
             summary.updateWithPause(entry);
         }
         setVisibleTrackSegment(summary);
         
         
     }
-    
 
-    private void addEntryToList(GpxInformation entry) {
+    private void addEntryToList(GpxInformation entry, Cursor cursor) {
         final GpxPoint point = new GpxPoint(
-                entry.getBoundingBox().toBoundingBoxE6().getCenter(), 
+                entry.getBoundingBox().toBoundingBoxE6().getCenter(),
                 0, entry.getTimeStamp());
 
-        final GpxAttributes attr = new GpxAttributes();
-        final File file = new File(entry.getPath());
-        attr.put("name", file.getName());
-        attr.put("path", file.getPath());
-        
-        list.appendToCurrentSegment(point, attr);
+        list.appendToCurrentSegment(point, GpxAttributesStatic.NULL_ATTRIBUTES);
     }
-    
-    
+
+
     @Override
     public String getName() {
         return directory.getName();
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxIterator.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxIterator.java
index cd74000e..743e8c2b 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxIterator.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxIterator.java
@@ -66,7 +66,7 @@ public class GpxIterator extends AbsIterator {
 
         handle = scontext.getCacheService().getObject( getPath(), new GpxObjectStatic.Factory() );
         oldHandle.free();
-        return handle.getSize()>0;
+        return handle.size()>0;
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/editor/NodeEditor.java b/app/src/main/java/ch/bailu/aat/services/editor/NodeEditor.java
index 12119946..b9de82c2 100644
--- a/app/src/main/java/ch/bailu/aat/services/editor/NodeEditor.java
+++ b/app/src/main/java/ch/bailu/aat/services/editor/NodeEditor.java
@@ -1,12 +1,13 @@
 package ch.bailu.aat.services.editor;
 
-import ch.bailu.aat.gpx.GpxAttributes;
+import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxListWalker;
 import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.GpxPointFirstNode;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.gpx.GpxSegmentNode;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 
@@ -20,8 +21,8 @@ public class NodeEditor {
     }
 
     public NodeEditor(int t) {
-        gpxList = new GpxList(t);
-        node = new GpxPointFirstNode(GpxPoint.NULL, GpxAttributes.NULL_ATTRIBUTES);
+        gpxList = new GpxList(t, new MaxSpeed.Raw());
+        node = new GpxPointFirstNode(GpxPoint.NULL, GpxAttributesStatic.NULL_ATTRIBUTES);
     }
 
     public NodeEditor(GpxPointNode n, GpxList l) {
@@ -73,7 +74,7 @@ public class NodeEditor {
 
 
     private class Unlinker extends GpxListWalker {
-        private final GpxList newList = new GpxList(gpxList.getDelta().getType());
+        private final GpxList newList = new GpxList(gpxList.getDelta().getType(), new MaxSpeed.Raw());
         private boolean startSegment=false;
         private NodeEditor newNode = null;
 
@@ -125,7 +126,7 @@ public class NodeEditor {
 
 
     private class Inserter extends GpxListWalker {
-        private final GpxList newList = new GpxList(gpxList.getDelta().getType());
+        private final GpxList newList = new GpxList(gpxList.getDelta().getType(), new MaxSpeed.Raw());
         private NodeEditor newNode = new NodeEditor(gpxList.getDelta().getType());
         private boolean startSegment=false;
         private final GpxPointInterface newPoint;
@@ -162,7 +163,7 @@ public class NodeEditor {
 
             if (point == node) {
                 newList.appendToCurrentSegment(new GpxPoint(newPoint), 
-                        GpxAttributes.NULL_ATTRIBUTES);
+                        GpxAttributesStatic.NULL_ATTRIBUTES);
                 newNode = insertNewPoint();
             }
         }
@@ -170,7 +171,7 @@ public class NodeEditor {
         public NodeEditor getNewNode() {
             if (newList.getPointList().size() == 0) {
                 newList.appendToCurrentSegment(new GpxPoint(newPoint), 
-                        GpxAttributes.NULL_ATTRIBUTES);
+                        GpxAttributesStatic.NULL_ATTRIBUTES);
                 newNode = insertNewPoint();
             }
             return newNode;
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMap.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMap.java
index 0987ecb9..76d116dc 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMap.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMap.java
@@ -2,29 +2,52 @@ package ch.bailu.aat.services.icons;
 
 import android.util.SparseArray;
 
+import java.io.File;
+
 public class IconMap {
-    private final SparseArray<SparseArray<String>> key_list = new SparseArray<>(50);
-    
+    private final static String ICON_SUFFIX_BIG=".n.64.png";
+    private final static String ICON_SUFFIX_SMALL=".n.48.png";
+
+
+    public class Icon {
+        public final String big;
+        public final String small;
+
+        public Icon(String file_name) {
+            big   = new File(new File(directory,"png"), file_name+ICON_SUFFIX_SMALL).toString();
+            small = new File(new File(directory,"png"), file_name+ICON_SUFFIX_BIG).toString();
+        }
+    }
+
 
-    public void add(String key, String value, String file) {
-        SparseArray<String>  value_list = key_list.get(key.hashCode());
+    private final SparseArray<SparseArray<Icon>> key_list = new SparseArray<>(50);
+    private final String directory;
+
+
+    public IconMap(String d) {
+        directory = d;
+    }
+
+
+    public void add(String key, String value, String file_name) {
+        SparseArray<Icon>  value_list = key_list.get(key.hashCode());
         
         if (value_list == null) {
             value_list = new SparseArray<>(10);
         }
         
-        value_list.put(value.hashCode(), file);
+        value_list.put(value.hashCode(), new Icon(file_name));
         key_list.put(key.hashCode(), value_list);
     }
 
 
-    public String get(String key, String value) {
-        final SparseArray<String> value_list=key_list.get(key.hashCode());
+    public Icon get(String key, String value) {
+        final SparseArray<Icon> value_list=key_list.get(key.hashCode());
 
         if (value_list == null) {
             return null;
         }
         return value_list.get(value.hashCode());
     }
-    
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
index cbfb9fde..c8664f39 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
@@ -8,7 +8,7 @@ import ch.bailu.aat.helpers.file.AbsAccess;
 public class IconMapParser {
     private final static int ICON=0, KEY=1, VALUE=2, END=3, MAX=4; 
     
-    private final String[]  entries= new String[MAX];
+    private final String[] entries = new String[MAX];
     private int entry=0;
     
     private final StringBuilder buffer = new StringBuilder();
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
index d3449f64..850fc769 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
@@ -4,11 +4,6 @@ import java.io.File;
 import java.io.IOException;
 
 import ch.bailu.aat.gpx.GpxAttributes;
-import ch.bailu.aat.gpx.GpxList;
-import ch.bailu.aat.gpx.GpxListWalker;
-import ch.bailu.aat.gpx.GpxPointNode;
-import ch.bailu.aat.gpx.GpxSegmentNode;
-import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.helpers.AppDirectory;
 import ch.bailu.aat.helpers.AppLog;
 import ch.bailu.aat.helpers.file.FileAccess;
@@ -17,25 +12,22 @@ import ch.bailu.aat.services.VirtualService;
 
 public class IconMapService extends VirtualService {
 
-    public static final String KEY_ICON_SMALL = "icon:small";
-    public static final String KEY_ICON_BIG = "icon:big";
+    //public static final String KEY_ICON_SMALL = "icon:small";
+    //public static final String KEY_ICON_BIG = "icon:big";
 
-
-
-
-    private final static String ICON_SUFFIX_BIG=".n.64.png";
-    private final static String ICON_SUFFIX_SMALL=".n.48.png";
     private final static String MAP_FILE="iconmap.txt";
 
 
-    private final IconMap map = new IconMap();
+    private final IconMap map;
 
     private final File directory;
 
 
     public IconMapService(ServiceContext sc) {
         super(sc);
+
         directory = AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_OSM_FEATURES_ICONS);
+        map = new IconMap(directory.toString());
 
         final File mapFile = new File(directory, MAP_FILE);
 
@@ -48,31 +40,40 @@ public class IconMapService extends VirtualService {
         }
     }
 
+
+    public String getIconPath(GpxAttributes attr) {
+        String icon = null;
+        for (int i=0; i<attr.size(); i++) {
+            icon = getBigIconPath(attr.getKey(i), attr.getValue(i));
+            if (icon != null) return icon;
+        }
+        return icon;
+    }
+
+
     private String getSmallIconPath(String key, String value) {
-        String prefix = getIconName(key,value);
+        final IconMap.Icon icon = map.get(key,value);
 
-        if (prefix == null) {
+        if (icon == null) {
             return null;
         }
-        return new File(new File(directory,"png"), prefix+ICON_SUFFIX_SMALL).toString();
+
+        return icon.small;
     }
 
 
     private String getBigIconPath(String key, String value) {
-        String prefix = getIconName(key,value);
+        final IconMap.Icon icon = map.get(key,value);
 
-        if (prefix == null) {
+        if (icon == null) {
             return null;
         }
-        return new File(new File(directory,"png"), prefix+ICON_SUFFIX_BIG).toString();
-    }
-
 
-    private String getIconName(String key, String value) {
-        return map.get(key, value);
+        return icon.big;
     }
 
 
+
     public void iconify(StringBuilder html, String key, String value) {
         String icon = getBigIconPath(key, value);
 
@@ -84,16 +85,18 @@ public class IconMapService extends VirtualService {
     }
 
 
+    /*
     public void iconify(GpxList list) {
         new GpxIconifier().walkTrack(list);
     }
+    */
 
     @Override
     public void close() {
 
     }
 
-
+/*
     private class GpxIconifier extends GpxListWalker {
 
         @Override
@@ -131,7 +134,7 @@ public class IconMapService extends VirtualService {
         }
     }
 
-
+*/
 
     @Override
     public void appendStatusText(StringBuilder builder) {
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
index 0818f525..c44b6ebd 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
@@ -5,10 +5,11 @@ import android.content.Context;
 import java.io.File;
 import java.io.IOException;
 
-import ch.bailu.aat.gpx.GpxAttributes;
+import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.GpxPointNode;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
@@ -19,7 +20,7 @@ public class TrackLogger extends Logger {
     final public static int MIN_TRACKPOINTS=5;
 
     private boolean requestSegment=true;
-    private final GpxList track=new GpxList(GpxType.TRK);
+    private final GpxList track=new GpxList(GpxType.TRK, new MaxSpeed.Samples());
 
     final private File logFile;
     final private GpxListWriter writer;
@@ -89,10 +90,10 @@ public class TrackLogger extends Logger {
     public void log(GpxPointInterface tp) throws IOException {
         if (requestSegment) {
             requestSegment=false;
-            track.appendToNewSegment(new GpxPoint(tp), GpxAttributes.NULL_ATTRIBUTES);
+            track.appendToNewSegment(new GpxPoint(tp), GpxAttributesStatic.NULL_ATTRIBUTES);
 
         } else {
-            track.appendToCurrentSegment(new GpxPoint(tp), GpxAttributes.NULL_ATTRIBUTES);
+            track.appendToCurrentSegment(new GpxPoint(tp), GpxAttributesStatic.NULL_ATTRIBUTES);
         }
 
         setVisibleTrackPoint((GpxPointNode)track.getPointList().getLast());
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/location/MockLocation.java b/app/src/main/java/ch/bailu/aat/services/tracker/location/MockLocation.java
index 29a277fe..f133d679 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/location/MockLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/location/MockLocation.java
@@ -9,6 +9,7 @@ import ch.bailu.aat.coordinates.BoundingBox;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.gpx.InfoID;
+import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.StateID;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.parser.SimpleGpxListReader;
@@ -29,7 +30,7 @@ public class MockLocation extends LocationStackChainedItem implements Runnable{
     public MockLocation(Context c, LocationStackItem i) {
         super(i);
         
-        mockData = new GpxList(GpxType.TRK);
+        mockData = new GpxList(GpxType.TRK, new MaxSpeed.Raw());
         timer=new Timer(this, INTERVAL);
         
         try {
diff --git a/app/src/main/java/ch/bailu/aat/views/GpxListView.java b/app/src/main/java/ch/bailu/aat/views/GpxListView.java
index b2608a49..6f5ed569 100644
--- a/app/src/main/java/ch/bailu/aat/views/GpxListView.java
+++ b/app/src/main/java/ch/bailu/aat/views/GpxListView.java
@@ -32,7 +32,7 @@ public class GpxListView extends ListView implements OnCursorChangedListener {
     }
 
 
-    public void setAdapter(ServiceContext scontext, Iterator iterator) {
+    public void setIterator(ServiceContext scontext, Iterator iterator) {
         iterator.setOnCursorChangedLinsener(this);
         setAdapter(new IteratorAdapter(scontext, iterator));
     }
diff --git a/app/src/main/java/ch/bailu/aat/views/HtmlScrollTextView.java b/app/src/main/java/ch/bailu/aat/views/HtmlScrollTextView.java
index 5c5e8e65..1d06b0a0 100644
--- a/app/src/main/java/ch/bailu/aat/views/HtmlScrollTextView.java
+++ b/app/src/main/java/ch/bailu/aat/views/HtmlScrollTextView.java
@@ -35,4 +35,8 @@ public class HtmlScrollTextView extends VerticalScrollView {
     public void enableAutoLink() {
         textView.setAutoLinkMask(Linkify.ALL);
     }
+
+    public HtmlTextView getTextView() {
+        return textView;
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
index 5eff1307..5622ebc2 100644
--- a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
+++ b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
@@ -10,6 +10,7 @@ import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.helpers.AppHtml;
 import ch.bailu.aat.helpers.AppTheme;
+import ch.bailu.aat.helpers.HtmlBuilderGpx;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.views.map.CachedTileProvider;
 import ch.bailu.aat.views.map.MapDensity;
@@ -57,7 +58,12 @@ public class NodeEntryView extends LinearLayout {
 
 
     public void update(GpxInformation info, GpxPointNode node) {
-        text.setText(AppHtml.fromHtml(node.toHtml(getContext(), new StringBuilder()).toString()));
+        HtmlBuilderGpx html = new HtmlBuilderGpx(getContext());
+        html.appendNode(node, info);
+        html.appendAttributes(node.getAttributes());
+
+        text.setText(AppHtml.fromHtml(html.toString()));
+
         final BoundingBox bounding = node.getBoundingBox();
         map.frameBoundingBox(bounding);
         gpxOverlay.onContentUpdated(info);
diff --git a/app/src/main/java/ch/bailu/aat/views/description/VerticalView.java b/app/src/main/java/ch/bailu/aat/views/description/VSplitView.java
similarity index 92%
rename from app/src/main/java/ch/bailu/aat/views/description/VerticalView.java
rename to app/src/main/java/ch/bailu/aat/views/description/VSplitView.java
index 4aefc399..d8888207 100644
--- a/app/src/main/java/ch/bailu/aat/views/description/VerticalView.java
+++ b/app/src/main/java/ch/bailu/aat/views/description/VSplitView.java
@@ -4,13 +4,13 @@ import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
 
-public class VerticalView extends ViewGroup {
+public class VSplitView extends ViewGroup {
 
     private final View[] views;
 
 
 
-    public VerticalView(Context context, View[] children) {
+    public VSplitView(Context context, View[] children) {
         super(context);
         views = children;
 
diff --git a/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java b/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
index ca471239..ee47d032 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
@@ -12,7 +12,7 @@ public abstract class AbsOsmTileProvider extends AbsTileProvider {
 
     private final ServiceContext scontext;
     private Source sources[] = new Source[]{BitmapTileObject.MAPNIK};
-    private final StringBuilder builder = new StringBuilder();    
+    private final StringBuilder builder = new StringBuilder();
 
 
     public AbsOsmTileProvider(ServiceContext sc) {
@@ -20,20 +20,22 @@ public abstract class AbsOsmTileProvider extends AbsTileProvider {
     }
 
     public TileStackObject getTileHandle(MapTile mapTile) {
-        String id = generateTileID(mapTile);
-        ObjectHandle handle = scontext.getCacheService().getObject(
-                id, 
-                new TileStackObject.Factory(scontext.getContext(), mapTile, sources)
-                );
+        if (scontext.isUp()) {
+            String id = generateTileID(mapTile);
+            ObjectHandle handle = scontext.getCacheService().getObject(
+                    id,
+                    new TileStackObject.Factory(scontext.getContext(), mapTile, sources)
+            );
 
 
-        if (TileStackObject.class.isInstance(handle)) {
-            return (TileStackObject) handle;
+            if (TileStackObject.class.isInstance(handle)) {
+                return (TileStackObject) handle;
+            }
+        }
+
+        return TileStackObject.NULL;
 
-        } else  {
-            return TileStackObject.NULL;
 
-        }
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/map/MapFactory.java b/app/src/main/java/ch/bailu/aat/views/map/MapFactory.java
index 89036aba..ce74cf81 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/MapFactory.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/MapFactory.java
@@ -5,6 +5,8 @@ import ch.bailu.aat.activities.AbsGpxListActivity;
 import ch.bailu.aat.dispatcher.DispatcherInterface;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.directory.Iterator;
+import ch.bailu.aat.services.directory.IteratorSimple;
 import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.map.overlay.CurrentLocationOverlay;
@@ -80,8 +82,6 @@ public class MapFactory {
         m.add(new GpxDynOverlay(m, sc, d, InfoID.LIST_SUMMARY));
         m.add(new GridDynOverlay(m, sc));
         m.add(new InformationBarOverlay(m, d));
-        m.add(new FileControlBar(m, a));
-
         return m;
     }
 
@@ -102,10 +102,9 @@ public class MapFactory {
     public OsmInteractiveView node() {
         base(4);
 
-        m.add(new GpxDynOverlay(m, sc, InfoID.TRACKER));
-        m.add(new GpxDynOverlay(m, sc, InfoID.FILEVIEW));
+        m.add(new GpxDynOverlay(m, sc, d, InfoID.TRACKER));
+        m.add(new GpxDynOverlay(m, sc, d, InfoID.FILEVIEW));
         m.add(new GridDynOverlay(m, sc));
-        m.add(new NavigationBarOverlay(m, d));
 
         return m;
     }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/TileCache.java b/app/src/main/java/ch/bailu/aat/views/map/TileCache.java
index 432c7605..03405945 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/TileCache.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/TileCache.java
@@ -5,49 +5,34 @@ import org.osmdroid.tileprovider.MapTile;
 import java.io.Closeable;
 
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.cache.LockCache;
 import ch.bailu.aat.services.cache.TileStackObject;
 
 public class TileCache implements Closeable {
-    private TileStackObject[] tiles;
+    private LockCache<TileStackObject> tiles;
 
 
     public TileCache(int capacity) {
-        tiles = new TileStackObject[capacity];
-        for (int i = 0; i< tiles.length; i++) 
-            tiles[i] = TileStackObject.NULL;
+        tiles = new LockCache(capacity);
     }
 
 
-    public int getCapacity() {
-        return tiles.length;
-    }
-
-    
     public TileStackObject get(String string) {
-        for (TileStackObject tile : tiles) {
-            if (tile.toString().equals(string)) {
-                return tile;
+        for (int i = 0; i<tiles.size(); i++) {
+            if (tiles.get(i).toString().equals(string)) {
+                return tiles.use(i);
             }
         }
         return null;
     }
 
 
-    public TileStackObject getFromSubTile(String id) {
-        for (TileStackObject tile : tiles) {
-            if (tile.isInStack(id)) {
-                return tile;
-            }
-        }
-        return null;
-    }
-    
+    public TileStackObject get(MapTile mt) {
+        final String mtile = mt.toString();
 
-    public TileStackObject get(MapTile tile) {
-        for (TileStackObject t : tiles) {
-            if (tile.equals(t.getTile())) {
-                t.access();
-                return t;
+        for (int i = 0; i<tiles.size(); i++) {
+            if (mtile.equals(tiles.get(i).getTile())) {
+                return tiles.use(i);
             }
         }
         return null;
@@ -56,70 +41,28 @@ public class TileCache implements Closeable {
 
 
     public void put(TileStackObject handle) {
-        int i = indexOfOldest();
-
-        tiles[i].free();
-        tiles[i] = handle;
-    }
-
-
-
-    private int indexOfOldest() {
-        int x=0;
-        for (int i = 1; i<tiles.length; i++) {
-            if (tiles[i].getAccessTime() < tiles[x].getAccessTime()) {
-                x=i;
-            }
-        }
-        return x;
+        tiles.add(handle);
     }
 
-
     @Override
     public void close() {
-        reset();
+        tiles.close();
     }
 
 
     public void reDownloadTiles(ServiceContext sc) {
-        for (int i=0; i<tiles.length; i++) {
-            
-            tiles[i].reDownload(sc);
+        for (int i = 0; i<tiles.size(); i++) {
+            tiles.get(i).reDownload(sc);
         }
     }
     
     
     public void reset() {
-        for (int i=0; i<tiles.length; i++) {
-            tiles[i].free();
-            tiles[i] = TileStackObject.NULL;
-        }
+        tiles.reset();
     }
 
 
     public void setCapacity(int capacity) {
-        if (capacity > tiles.length) {
-            resizeCache(capacity);
-        }
-        
-    }
-    
-    private void resizeCache(int capacity) {
-        final TileStackObject[] newTiles=new TileStackObject[capacity];
-        final int l = Math.min(newTiles.length, tiles.length);
-        int x,i;
-        
-        for (i=0; i<l; i++) {
-            newTiles[i]=tiles[i];
-        }
-
-        for (x=i; x<newTiles.length; x++) {
-            newTiles[x]=TileStackObject.NULL;
-        }
-        
-        for (x=i; x<tiles.length; x++) {
-            tiles[x].free();
-        }
-        tiles=newTiles;
+        tiles.ensureCapacity(capacity);
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/OsmOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/OsmOverlay.java
index 3ce4ae4c..9cef51b7 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/OsmOverlay.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/OsmOverlay.java
@@ -24,7 +24,6 @@ public abstract class OsmOverlay extends Overlay {
     @Override
     public void draw(Canvas c, MapView m) {
         if (!m.isAnimating()) {
-            osm.mapIconCache.newPass();
             painter.init(c,m);
             draw(painter);
         }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/control/FileControlBar.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/control/FileControlBar.java
index 13e5ef82..427b7069 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/control/FileControlBar.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/control/FileControlBar.java
@@ -6,18 +6,27 @@ import java.io.File;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.activities.AbsGpxListActivity;
+import ch.bailu.aat.description.AverageSpeedDescription;
+import ch.bailu.aat.description.CaloriesDescription;
+import ch.bailu.aat.description.ContentDescription;
+import ch.bailu.aat.description.DateDescription;
+import ch.bailu.aat.description.DistanceDescription;
+import ch.bailu.aat.description.MaximumSpeedDescription;
+import ch.bailu.aat.description.TimeDescription;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.gpx.InfoID;
+import ch.bailu.aat.helpers.HtmlBuilderGpx;
 import ch.bailu.aat.helpers.ToolTip;
 import ch.bailu.aat.helpers.file.FileAction;
 import ch.bailu.aat.menus.FileMenu;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
+import ch.bailu.aat.services.directory.Iterator;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.PreviewView;
 import ch.bailu.aat.views.map.OsmInteractiveView;
 import ch.bailu.aat.views.map.overlay.MapPainter;
-import ch.bailu.aat.views.map.overlay.gpx.InfoViewNodeSelectorOverlay;
+import ch.bailu.aat.views.map.overlay.gpx.NodeViewOverlay;
 
 public class FileControlBar extends ControlBarOverlay{
 
@@ -28,12 +37,17 @@ public class FileControlBar extends ControlBarOverlay{
     }
 
 
+
     private final PreviewView        preview;
     private final AbsGpxListActivity acontext;
     private final Selector           selector;
 
     private final View           action, overlay, reloadPreview, delete;
 
+    private Iterator iterator = Iterator.NULL;
+    private String selectedFile = null;
+
+
     public FileControlBar(OsmInteractiveView osm, AbsGpxListActivity a) {
         super(osm, new ControlBar(
                 osm.getContext(),
@@ -43,6 +57,8 @@ public class FileControlBar extends ControlBarOverlay{
 
         acontext = a;
 
+
+
         selector = new Selector(osm);
         preview = new PreviewView(a.getServiceContext());
 
@@ -51,7 +67,7 @@ public class FileControlBar extends ControlBarOverlay{
         overlay = bar.addImageButton(R.drawable.view_paged);
         reloadPreview = bar.addImageButton(R.drawable.view_refresh);
         delete = bar.addImageButton(R.drawable.user_trash);
-        
+
         preview.setOnClickListener(this);
         preview.setOnLongClickListener(selector);
 
@@ -64,38 +80,62 @@ public class FileControlBar extends ControlBarOverlay{
         acontext.addTarget(selector, InfoID.LIST_SUMMARY);
     }
 
+    public void setIterator(Iterator i) {
+        iterator = i;
+    }
+
 
-    
-    private class Selector extends InfoViewNodeSelectorOverlay {
+    private class Selector extends NodeViewOverlay {
         public Selector(OsmInteractiveView v) {
             super(v);
         }
 
+        final HtmlBuilderGpx builder = new HtmlBuilderGpx(getContext());
+
+
+        final ContentDescription summaryData[] = {
+
+                new DateDescription(getContext()),
+                new TimeDescription(getContext()),
+
+                new DistanceDescription(getContext()),
+                new AverageSpeedDescription(getContext()),
+                new MaximumSpeedDescription(getContext()),
+                new CaloriesDescription(getContext()),
+        };
+
         @Override
         public void setSelectedNode(GpxInformation info, GpxPointNode node, int i) {
-            super.setSelectedNode(info, node, i);
-            preview.setFilePath(getPathFromNode(node));
             new SolidDirectoryQuery(getContext()).getPosition().setValue(i);
+
+            iterator.moveToPosition(i);
+
+            selectedFile = iterator.getInfo().getPath();
+
+            preview.setFilePath(selectedFile);
+
+            builder.clear();
+            builder.appendH3(iterator.getInfo().getName());
+            for (ContentDescription d: summaryData) {
+                d.onContentUpdated(iterator.getInfo());
+                builder.append(d);
+                builder.append("<br>");
+            }
+
+            setHtmlText(builder.toString());
+
         }
-        
+
         @Override
         public boolean onLongClick(View v) {
             acontext.displayFile();
             return true;
         }
     }
-    
-
-    
-    public String getPathFromNode(GpxPointNode node) {
-        if (node != null) {
-            return node.getAttributes().get("path");
-        } else {
-            return "";
-        }
-    }
-    
-    
+
+
+
+
     @Override
     public void draw(MapPainter p) {
         if (isVisible()) {
@@ -109,8 +149,8 @@ public class FileControlBar extends ControlBarOverlay{
         super.onClick(v);
 
         GpxPointNode node =  selector.getSelectedNode();
-        if (node != null) {
-            File file = new File(node.getValue("path"));
+        if (node != null && selectedFile != null) {
+            File file = new File(selectedFile);
 
             if (file.exists()) {
                 if        (v == action) {
@@ -126,8 +166,6 @@ public class FileControlBar extends ControlBarOverlay{
                 }
             }
         }
-
-
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/control/InformationBarOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/control/InformationBarOverlay.java
index 6afebd06..27a832df 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/control/InformationBarOverlay.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/control/InformationBarOverlay.java
@@ -8,7 +8,6 @@ import ch.bailu.aat.activities.ActivitySwitcher;
 import ch.bailu.aat.activities.NominatimActivity;
 import ch.bailu.aat.activities.OverpassActivity;
 import ch.bailu.aat.dispatcher.DispatcherInterface;
-import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.helpers.ToolTip;
 import ch.bailu.aat.menus.LocationMenu;
@@ -18,14 +17,15 @@ import ch.bailu.aat.preferences.SolidMapGrid;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.map.OsmInteractiveView;
 import ch.bailu.aat.views.map.overlay.MapPainter;
-import ch.bailu.aat.views.map.overlay.gpx.InfoViewNodeSelectorOverlay;
+import ch.bailu.aat.views.map.overlay.gpx.AutoNodeViewOverlay;
+import ch.bailu.aat.views.map.overlay.gpx.NodeViewOverlay;
 
 public class InformationBarOverlay extends ControlBarOverlay {
     private final View reload;
 
     private final ImageButton overpass, nominatim, location;
 
-    private final InfoViewNodeSelectorOverlay selector;
+    private final NodeViewOverlay selector;
 
 
 
@@ -46,7 +46,7 @@ public class InformationBarOverlay extends ControlBarOverlay {
         reload = bar.addImageButton(R.drawable.view_refresh);
         location = bar.addImageButton(R.drawable.find_location);
 
-        selector = new InfoViewNodeSelectorOverlay(o);
+        selector = new AutoNodeViewOverlay(o);
 
 
         ToolTip.set(grid,R.string.tt_info_grid);
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/editor/EditorNodeSelectorOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/editor/EditorNodeSelectorOverlay.java
index 30a8713a..bae77324 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/editor/EditorNodeSelectorOverlay.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/editor/EditorNodeSelectorOverlay.java
@@ -1,12 +1,15 @@
 package ch.bailu.aat.views.map.overlay.editor;
 
+import android.view.View;
+
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxPointNode;
+import ch.bailu.aat.helpers.HtmlBuilderGpx;
 import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.views.map.OsmInteractiveView;
-import ch.bailu.aat.views.map.overlay.gpx.InfoViewNodeSelectorOverlay;
+import ch.bailu.aat.views.map.overlay.gpx.NodeViewOverlay;
 
-public class EditorNodeSelectorOverlay extends InfoViewNodeSelectorOverlay {
+public class EditorNodeSelectorOverlay extends NodeViewOverlay {
 
     private final EditorHelper edit;
 
@@ -28,10 +31,17 @@ public class EditorNodeSelectorOverlay extends InfoViewNodeSelectorOverlay {
     @Override
     public void setSelectedNode(GpxInformation info, GpxPointNode node, int index) {
         edit.getEditor().select(node);
-        super.setSelectedNode(info,node, index);
-    }
 
+        HtmlBuilderGpx h = new HtmlBuilderGpx(getContext());
 
+        h.appendInfo(info, index);
+        h.appendNode(node, info);
+        setHtmlText(h.toString());
+    }
 
 
+    @Override
+    public boolean onLongClick(View v) {
+        return false;
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/AutoNodeViewOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/AutoNodeViewOverlay.java
new file mode 100644
index 00000000..94d7a891
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/AutoNodeViewOverlay.java
@@ -0,0 +1,50 @@
+package ch.bailu.aat.views.map.overlay.gpx;
+
+import android.view.View;
+
+import java.io.File;
+
+import ch.bailu.aat.activities.NodeDetailActivity;
+import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.gpx.GpxPointNode;
+import ch.bailu.aat.helpers.HtmlBuilderGpx;
+import ch.bailu.aat.views.map.OsmInteractiveView;
+
+
+public class AutoNodeViewOverlay extends NodeViewOverlay {
+
+    final HtmlBuilderGpx html = new HtmlBuilderGpx(getContext());
+
+    private String fileID = null;
+    private int index = 0;
+
+    public AutoNodeViewOverlay(OsmInteractiveView v) {
+        super(v);
+    }
+
+    @Override
+    public boolean onLongClick(View v) {
+        if (fileID != null && new File(fileID).isFile()) {
+
+            NodeDetailActivity.start(getContext(), fileID, index);
+            return true;
+        }
+        return false;
+    }
+
+
+    @Override
+    public void setSelectedNode(GpxInformation info, GpxPointNode node, int i) {
+        index = i;
+        fileID = info.getPath();
+
+        html.clear();
+
+        html.appendInfo(info, index);
+        html.appendNode(node, info);
+        html.appendAttributes(node.getAttributes());
+
+        setHtmlText(html.toString());
+
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/GpxDynOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/GpxDynOverlay.java
index a2da1053..3d11b807 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/GpxDynOverlay.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/GpxDynOverlay.java
@@ -43,24 +43,21 @@ public class GpxDynOverlay extends OsmOverlay implements OnContentUpdatedInterfa
     }
 
 
-
-
     @Override
     public void draw(MapPainter p) {
         gpxOverlay.draw(p);
         legendOverlay.draw(p);
     }
 
+    private int type = GpxType.NONE;
 
     @Override
     public void onContentUpdated(GpxInformation i) {
-
-        int oldType = toType(infoCache);
-        int newType = toType(i);
-
         infoCache = i;
 
-        if (oldType != newType) {
+        if (type != toType(i)) {
+            type = toType(i);
+
             createGpxOverlay();
             createLegendOverlay();
         }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/InfoViewNodeSelectorOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/InfoViewNodeSelectorOverlay.java
deleted file mode 100644
index 5c00f63a..00000000
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/InfoViewNodeSelectorOverlay.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package ch.bailu.aat.views.map.overlay.gpx;
-
-import android.graphics.Color;
-import android.view.View;
-import android.view.View.OnLongClickListener;
-import android.widget.TextView;
-
-import ch.bailu.aat.activities.NodeDetailActivity;
-import ch.bailu.aat.gpx.GpxInformation;
-import ch.bailu.aat.gpx.GpxPointNode;
-import ch.bailu.aat.helpers.AppHtml;
-import ch.bailu.aat.helpers.AppTheme;
-import ch.bailu.aat.views.map.OsmInteractiveView;
-
-
-public class InfoViewNodeSelectorOverlay extends NodeSelectorOverlay implements OnLongClickListener {
-    private static final int XMARGIN=10;
-    private static final int YMARGIN=35;
-
-    private final int big_margin;
-
-    private String fileID = null;
-    private int index = 0;
-
-    private final TextView infoView;
-
-
-    public InfoViewNodeSelectorOverlay(OsmInteractiveView v) {
-        super(v);
-        big_margin = AppTheme.getBigButtonSize(getContext()) + XMARGIN;
-
-        infoView = new TextView(getContext());
-        infoView.setBackgroundColor(Color.argb(0xcc, 0xff, 0xff, 0xff));
-        infoView.setTextColor(Color.BLACK);
-        infoView.setOnLongClickListener(this);
-
-        v.addView(infoView);
-
-    }
-
-
-    @Override
-    public boolean onLongClick(View v) {
-        if (fileID != null) {
-            NodeDetailActivity.start(getContext(), fileID, index);
-        }
-        return true;
-    }
-
-
-
-
-    @Override
-    public void setSelectedNode(GpxInformation info, GpxPointNode node, int i) {
-        StringBuilder builder = new StringBuilder();
-
-        node.toHtml(getContext(), builder);
-        infoView.setText(AppHtml.fromHtml(builder.toString()));
-
-        fileID=info.getPath();
-        index=i;
-    }
-
-
-    public void showAtLeft() {
-        infoView.layout(XMARGIN, YMARGIN, 
-                getOsmView().getWidth() - big_margin,
-                getOsmView().getHeight() / 3);
-
-        infoView.setVisibility(View.VISIBLE);
-
-        getOsmView().requestRedraw();
-    }
-
-
-    public void showAtRight() {
-        infoView.layout(big_margin, YMARGIN, 
-                getOsmView().getWidth() - XMARGIN,
-                getOsmView().getHeight() / 3);
-        infoView.setVisibility(View.VISIBLE);
-
-        getOsmView().requestRedraw();
-    }
-
-    public void hide() {
-        infoView.setVisibility(View.INVISIBLE);
-
-        getOsmView().requestRedraw();
-    }
-}
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/MapIconCache.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/MapIconCache.java
index 2a422c1f..77a6a002 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/MapIconCache.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/MapIconCache.java
@@ -9,72 +9,69 @@ import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.FreeLater;
 import ch.bailu.aat.services.cache.ImageObject;
+import ch.bailu.aat.services.cache.LockCache;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.services.icons.IconMapService;
 
 public class MapIconCache implements Closeable {
-    private FreeLater current = new FreeLater();
-    private FreeLater old = new FreeLater();
-    
-    // TODO add SparseArray with non existing files (for speed)
-    
-    
-    public void newPass() {
-        FreeLater _old = old;
-        old = current;
-        
-        current=_old;
-        current.freeAll();
-    }
+    private final LockCache<ImageObject> icons = new LockCache(20);
+
 
-    
     public Drawable getIcon(ServiceContext scontext, GpxPointInterface point) {
-        return getIcon(scontext, point, IconMapService.KEY_ICON_BIG);
-    }
-    
-    
-    public static String getIconFileName(GpxPointInterface point, String key) {
-        String fileID=null;
-        
-        GpxAttributes a = point.getAttributes();
-        if (a != null) {
-            
-            fileID = a.get(key);
+        if (scontext.isUp()) {
+            GpxAttributes attr = point.getAttributes();
+            String iconFile = scontext.getIconMapService().getIconPath(attr);
+
+            ImageObject icon = null;
+
+
+            if (iconFile != null && attr != null && scontext.isUp()) {
+
+                icon = get(iconFile);
+
+                if (icon == null) {
+                    icon = add(scontext, iconFile);
+                }
+            }
+
+            if (icon != null) {
+                return icon.getDrawable(scontext.getContext().getResources());
+            }
         }
-        return fileID;
+        return null;
     }
-    
-    
-    private Drawable getIcon(ServiceContext scontext, GpxPointInterface point, String key) {
-        
-        Drawable drawable=null;
-        
-        String fileID=getIconFileName(point, key);
-        if (fileID != null) {
-            drawable = getIcon(scontext, fileID);
+
+
+    private ImageObject get(String id) {
+        for (int i = 0; i < icons.size(); i++) {
+            if (id.equals(icons.get(i).toString())) {
+                return icons.use(i);
+            }
         }
-        return drawable;
+        return null;
     }
 
-    
-    public Drawable getIcon(ServiceContext scontext, String fileID) {
-        Drawable drawable=null;
 
+    private ImageObject add(ServiceContext scontext, String id) {
         if (scontext.isUp()) {
-            final ObjectHandle handle = scontext.getCacheService().getObject(fileID, new ImageObject.Factory());
+            final ObjectHandle handle = scontext.getCacheService().
+                    getObject(id, new ImageObject.Factory());
+
             if (ImageObject.class.isInstance(handle)) {
+                final ImageObject imageHandle = ((ImageObject) handle);
 
-                drawable = ((ImageObject) handle).getDrawable(scontext.getContext().getResources());
-                current.freeLater(handle);
+                icons.add(imageHandle);
+                return imageHandle;
             }
         }
-        return drawable;
+        return null;
     }
 
 
+
+
     @Override
     public void close() {
-        current.close();
-        old.close();
+        icons.close();
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeSelectorOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeSelectorOverlay.java
index 2b561c67..ce06ef4a 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeSelectorOverlay.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeSelectorOverlay.java
@@ -27,16 +27,8 @@ public abstract class NodeSelectorOverlay extends OsmOverlay implements OnConten
     private final SparseArray<GpxInformation> gpxHash =
             new SparseArray<>(5);
 
-
-
-
     private final Rect centerRect = new Rect();
-
-
-    private final Point    selectedPixel = new Point();
-
-
-
+    private final Point selectedPixel = new Point();
 
     private int  foundID, foundIndex;
     private GpxPointNode foundNode;
diff --git a/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeViewOverlay.java b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeViewOverlay.java
new file mode 100644
index 00000000..e4b5ad99
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/map/overlay/gpx/NodeViewOverlay.java
@@ -0,0 +1,111 @@
+package ch.bailu.aat.views.map.overlay.gpx;
+
+import android.graphics.Color;
+import android.view.View;
+import android.view.View.OnLongClickListener;
+
+import ch.bailu.aat.helpers.AppTheme;
+import ch.bailu.aat.views.HtmlScrollTextView;
+import ch.bailu.aat.views.map.OsmInteractiveView;
+
+
+public abstract class NodeViewOverlay extends NodeSelectorOverlay implements OnLongClickListener {
+    private static final int XMARGIN=0;
+    private static final int YMARGIN=0;
+
+    private final int big_margin;
+
+    private final HtmlScrollTextView infoView;
+
+    private int xoffset, yoffset;
+
+
+    public NodeViewOverlay(OsmInteractiveView v) {
+        super(v);
+        big_margin = AppTheme.getBigButtonSize(getContext()) + XMARGIN;
+
+        infoView = new HtmlScrollTextView(getContext());
+        infoView.setBackgroundColor(Color.argb(0xcc, 0xff, 0xff, 0xff));
+        infoView.getTextView().setTextColor(Color.BLACK);
+        infoView.getTextView().setOnLongClickListener(this);
+        infoView.setVisibility(View.GONE);
+
+        v.addView(infoView);
+
+    }
+
+
+
+    public void setHtmlText(String text) {
+        infoView.setHtmlText(text);
+        layout();
+        measure();
+        layout();
+        measure();
+    }
+
+    public void showAtLeft() {
+        toLeft();
+        layout();
+        show();
+    }
+
+
+    public void showAtRight() {
+        toRight();
+        layout();
+        show();
+    }
+
+
+    public void hide() {
+        infoView.setVisibility(View.GONE);
+        getOsmView().requestRedraw();
+    }
+
+
+    private void show() {
+        infoView.setVisibility(View.VISIBLE);
+        getOsmView().requestRedraw();
+
+    }
+
+
+    private void layout() {
+        infoView.layout(
+                xoffset,
+                yoffset,
+                xoffset+getWidth(),
+                yoffset+getHeight());
+    }
+
+    private void measure() {
+        int wspec = View.MeasureSpec.makeMeasureSpec(getWidth(),
+                View.MeasureSpec.EXACTLY);
+        int hspec = View.MeasureSpec.makeMeasureSpec(getHeight(),
+                View.MeasureSpec.EXACTLY);
+
+        infoView.measure(wspec, hspec);
+    }
+
+
+
+    private void toLeft() {
+        xoffset=XMARGIN;
+        yoffset=YMARGIN;
+    }
+
+    public void toRight() {
+        xoffset=big_margin;
+        yoffset=YMARGIN;
+
+    }
+
+    private int getHeight() {
+        return getOsmView().getHeight() / 3;
+    }
+
+    private int getWidth() {
+        return getOsmView().getWidth() - big_margin;
+    }
+}
