diff --git a/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java b/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
index 564d8b2..7171d6b 100644
--- a/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/OpenHexActivity.java
@@ -22,14 +22,11 @@ import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 
 import cc.calliope.mini.R;
-import cc.calliope.mini.ExtendedBluetoothDevice;
 import cc.calliope.mini.databinding.ActivityHexBinding;
 import cc.calliope.mini.fragment.editors.Editor;
 import cc.calliope.mini.utils.FileUtils;
 import cc.calliope.mini.utils.StaticExtra;
-import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
-import cc.calliope.mini.viewmodels.ScannerLiveData;
 
 
 public class OpenHexActivity extends ScannerActivity {
diff --git a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
index 1b8eba9..a938eaa 100644
--- a/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
+++ b/app/src/main/java/cc/calliope/mini/activity/ScannerActivity.java
@@ -16,11 +16,9 @@ import android.view.animation.OvershootInterpolator;
 import android.widget.AdapterView;
 import android.widget.ListView;
 import android.widget.PopupWindow;
-import android.widget.RatingBar;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import androidx.activity.result.ActivityResultLauncher;
 import androidx.activity.result.contract.ActivityResultContracts;
@@ -30,26 +28,17 @@ import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.core.view.ViewCompat;
 import androidx.fragment.app.Fragment;
 import androidx.fragment.app.FragmentManager;
-import androidx.lifecycle.Observer;
-import androidx.lifecycle.ViewModelProvider;
 
 import cc.calliope.mini.App;
-import cc.calliope.mini.MyDeviceKt;
-import cc.calliope.mini.ScanViewModelKt;
-import cc.calliope.mini.dialog.pattern.PatternEnum;
 import cc.calliope.mini.popup.PopupAdapter;
 import cc.calliope.mini.popup.PopupItem;
 import cc.calliope.mini.R;
-import cc.calliope.mini.ExtendedBluetoothDevice;
 import cc.calliope.mini.dialog.pattern.PatternDialogFragment;
 import cc.calliope.mini.utils.Permission;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
-import cc.calliope.mini.viewmodels.ScannerLiveData;
-import cc.calliope.mini.viewmodels.ScannerViewModel;
 import cc.calliope.mini.views.FobParams;
 import cc.calliope.mini.views.MovableFloatingActionButton;
-import no.nordicsemi.android.kotlin.ble.core.scanner.BleScanResults;
 
 public abstract class ScannerActivity extends AppCompatActivity implements DialogInterface.OnDismissListener {
     private static final int SNACKBAR_DURATION = 10000; // how long to display the snackbar message.
diff --git a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
index c35a734..6bb58b2 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/pattern/PatternDialogFragment.java
@@ -70,11 +70,7 @@ public class PatternDialogFragment extends DialogFragment {
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
-        context = getContext();
-        if (context == null) {
-            dismiss();
-        }
-
+        context = requireContext();
         context.registerReceiver(bluetoothStateBroadcastReceiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
         binding = DialogPatternBinding.inflate(inflater, container, false);
         return binding.getRoot();
diff --git a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
index 017c1ca..46e9ef1 100644
--- a/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
+++ b/app/src/main/java/cc/calliope/mini/dialog/scripts/ScriptsFragment.java
@@ -44,6 +44,7 @@ import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+
 import cc.calliope.mini.activity.FlashingActivity;
 import cc.calliope.mini.FileWrapper;
 import cc.calliope.mini.R;
@@ -54,7 +55,6 @@ import cc.calliope.mini.databinding.FragmentScriptsBinding;
 import cc.calliope.mini.fragment.editors.Editor;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
-import cc.calliope.mini.viewmodels.ScannerViewModel;
 import cc.calliope.mini.views.SimpleDividerItemDecoration;
 
 import static android.app.Activity.RESULT_OK;
@@ -66,7 +66,6 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
     private FragmentScriptsBinding binding;
     private FragmentActivity activity;
     private ScriptsRecyclerAdapter scriptsRecyclerAdapter;
-    private ExtendedBluetoothDevice device;
     private FrameLayout bottomSheet;
     private int state = BottomSheetBehavior.STATE_COLLAPSED;
     private String sourceFilePath;
@@ -104,9 +103,6 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
         binding = FragmentScriptsBinding.inflate(inflater, container, false);
         activity = requireActivity();
 
-        ScannerViewModel scannerViewModel = new ViewModelProvider(activity).get(ScannerViewModel.class);
-        scannerViewModel.getScannerState().observe(getViewLifecycleOwner(), result -> device = result.getCurrentDevice());
-
         return binding.getRoot();
     }
 
@@ -159,19 +155,9 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
     }
 
     private void openDfuActivity(FileWrapper file) {
-        if (device != null && device.isRelevant()) {
-            final Intent intent = new Intent(activity, FlashingActivity.class);
-            intent.putExtra(StaticExtra.EXTRA_DEVICE, device);
-            intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
-            startActivity(intent);
-        } else {
-            if (state == BottomSheetBehavior.STATE_EXPANDED) {
-                BottomSheetBehavior<View> bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet);
-                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
-            }
-            Utils.errorSnackbar(binding.getRoot(), getString(R.string.error_snackbar_no_connected)).show();
-
-        }
+        final Intent intent = new Intent(activity, FlashingActivity.class);
+        intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        startActivity(intent);
     }
 
     private void openPopupMenu(View view, FileWrapper file) {
@@ -244,7 +230,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
         }
     }
 
-    public void copyFile(FileWrapper file){
+    public void copyFile(FileWrapper file) {
         //TODO if(...)
         boolean connected = isMiniConnected();
         Utils.log(TAG, "Mini connected: " + connected);
@@ -253,7 +239,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
 
         if (Version.VERSION_Q_AND_NEWER) {
             openDocumentTreeNewApi();
-        }else {
+        } else {
             openDocumentTree();
         }
     }
@@ -273,7 +259,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
         treeUriResultLauncher.launch(intent);
     }
 
-    private void openDocumentTree(){
+    private void openDocumentTree() {
         Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
         treeUriResultLauncher.launch(intent);
     }
@@ -327,7 +313,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
         }
     }
 
-    private boolean isMiniConnected(){
+    private boolean isMiniConnected() {
         UsbManager manager = (UsbManager) activity.getSystemService(Context.USB_SERVICE);
         HashMap<String, UsbDevice> deviceList = manager.getDeviceList();
         for (UsbDevice device : deviceList.values()) {
@@ -337,7 +323,7 @@ public class ScriptsFragment extends BottomSheetDialogFragment {
             Utils.log(Log.DEBUG, "USB_Device", "Device Protocol: " + device.getDeviceProtocol());
 
             String productName = device.getProductName();
-            if(productName != null && productName.contains("Calliope")) {
+            if (productName != null && productName.contains("Calliope")) {
                 Utils.log(Log.ASSERT, TAG, "it`s Calliope");
                 return true;
             }
diff --git a/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java b/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
index 05de4cd..b72444a 100644
--- a/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
+++ b/app/src/main/java/cc/calliope/mini/fragment/web/WebFragment.java
@@ -8,6 +8,7 @@ import android.os.Bundle;
 import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 import androidx.lifecycle.ViewModelProvider;
+
 import cc.calliope.mini.activity.FlashingActivity;
 import cc.calliope.mini.R;
 import cc.calliope.mini.utils.Preference;
@@ -16,7 +17,6 @@ import cc.calliope.mini.ExtendedBluetoothDevice;
 import cc.calliope.mini.utils.FileUtils;
 import cc.calliope.mini.utils.Utils;
 import cc.calliope.mini.utils.Version;
-import cc.calliope.mini.viewmodels.ScannerViewModel;
 
 import android.os.StrictMode;
 import android.util.Base64;
@@ -63,7 +63,6 @@ public class WebFragment extends Fragment implements DownloadListener {
     private String editorUrl;
     private String editorName;
     private WebView webView;
-    private ExtendedBluetoothDevice device;
 
     private class JavaScriptInterface {
         private final Context context;
@@ -159,9 +158,6 @@ public class WebFragment extends Fragment implements DownloadListener {
         // Inflate the layout for this fragment
         View view = inflater.inflate(R.layout.fragment_web, container, false);
 
-        ScannerViewModel scannerViewModel = new ViewModelProvider(requireActivity()).get(ScannerViewModel.class);
-        scannerViewModel.getScannerState().observe(getViewLifecycleOwner(), result -> device = result.getCurrentDevice());
-
         webView = view.findViewById(R.id.webView);
         WebSettings webSettings = webView.getSettings();
 
@@ -314,19 +310,13 @@ public class WebFragment extends Fragment implements DownloadListener {
 
     private void startDfuActivity(File file) {
         boolean autoFlashing = Preference.getBoolean(getContext(), Preference.PREF_KEY_ENABLE_AUTO_FLASHING, true);
-        if(!autoFlashing){
+        if (!autoFlashing) {
             return;
         }
 
-        if (device != null && device.isRelevant()) {
-            Log.e(TAG, "start DFU Activity");
-            final Intent intent = new Intent(getActivity(), FlashingActivity.class);
-            intent.putExtra(StaticExtra.EXTRA_DEVICE, device);
-            intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
-            startActivity(intent);
-        } else {
-            Utils.errorSnackbar(webView, getString(R.string.error_snackbar_no_connected)).show();
-        }
+        final Intent intent = new Intent(getActivity(), FlashingActivity.class);
+        intent.putExtra(StaticExtra.EXTRA_FILE_PATH, file.getAbsolutePath());
+        startActivity(intent);
     }
 
     @Override
diff --git a/app/src/main/java/cc/calliope/mini/viewmodels/ScannerLiveData.java b/app/src/main/java/cc/calliope/mini/viewmodels/ScannerLiveData.java
deleted file mode 100644
index 0b9e477..0000000
--- a/app/src/main/java/cc/calliope/mini/viewmodels/ScannerLiveData.java
+++ /dev/null
@@ -1,277 +0,0 @@
-/*
- * Copyright (c) 2015, Nordic Semiconductor
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of copyright holder nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package cc.calliope.mini.viewmodels;
-
-import static android.bluetooth.BluetoothDevice.BOND_BONDED;
-import static android.content.Context.BLUETOOTH_SERVICE;
-
-import android.bluetooth.BluetoothAdapter;
-import android.bluetooth.BluetoothDevice;
-import android.bluetooth.BluetoothManager;
-import android.util.Log;
-
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.lifecycle.LiveData;
-
-import cc.calliope.mini.ExtendedBluetoothDevice;
-import cc.calliope.mini.dialog.pattern.PatternEnum;
-import cc.calliope.mini.utils.Utils;
-import no.nordicsemi.android.support.v18.scanner.ScanResult;
-
-/**
- * This class keeps the current list of discovered Bluetooth LE devices matching filter.
- * If a new device has been found it is added to the list and the LiveData i observers are
- * notified. If a packet from a device that's already in the list is found, the RSSI and name
- * are updated and observers are also notified.
- */
-
-public class ScannerLiveData extends LiveData<ScannerLiveData> {
-    private final List<ExtendedBluetoothDevice> devices = new ArrayList<>();
-    private Float[] currentPattern = {0f, 0f, 0f, 0f, 0f};
-    private Integer updatedDeviceIndex;
-    private boolean scanningStarted;
-    private boolean bluetoothEnabled;
-    private boolean locationEnabled;
-
-    /* package */ ScannerLiveData(final boolean bluetoothEnabled, final boolean locationEnabled) {
-        this.scanningStarted = false;
-        this.bluetoothEnabled = bluetoothEnabled;
-        this.locationEnabled = locationEnabled;
-        postValue(this);
-    }
-
-    /* package */ void refresh() {
-        postValue(this);
-    }
-
-    /* package */ void scanningStarted() {
-        scanningStarted = true;
-        postValue(this);
-    }
-
-    /* package */ void scanningStopped() {
-        scanningStarted = false;
-        postValue(this);
-    }
-
-    /* package */ void bluetoothEnabled() {
-        bluetoothEnabled = true;
-        postValue(this);
-    }
-
-    /* package */ void bluetoothDisabled() {
-        bluetoothEnabled = false;
-        updatedDeviceIndex = null;
-        devices.clear();
-        postValue(this);
-    }
-
-    /* package */ void setLocationEnabled(final boolean enabled) {
-        locationEnabled = enabled;
-        postValue(this);
-    }
-
-    public Float[] getCurrentPattern() {
-        return currentPattern;
-    }
-
-    void setCurrentPattern(Float[] pattern) {
-        currentPattern = pattern;
-        postValue(this);
-    }
-
-    void createBond() {
-        ExtendedBluetoothDevice extendedDevice = getCurrentDevice();
-        if (extendedDevice != null) {
-            BluetoothDevice device = extendedDevice.getDevice();
-            Utils.log(Log.ASSERT, "BOUND", "Device: " + device.getName());
-            int bondState = device.getBondState();
-            Utils.log(Log.ASSERT, "BOUND", "bondState: " + bondState);
-            if (bondState == BOND_BONDED) {
-                deleteBond(device);
-            }
-            //TODO Костить
-            try {
-                Thread.sleep(1000);
-            } catch (InterruptedException e) {
-                throw new RuntimeException(e);
-            }
-            device.createBond();
-        }
-    }
-
-    private void deleteBond(BluetoothDevice device) {
-        try {
-            Method method = device.getClass().getMethod("removeBond", (Class[]) null);
-            method.invoke(device, (Object[]) null);
-        } catch (NoSuchMethodException | IllegalAccessException
-                 | InvocationTargetException e) {
-            Log.e("ERROR", e.toString());
-        }
-    }
-
-    public ExtendedBluetoothDevice getCurrentDevice() {
-        for (ExtendedBluetoothDevice device : devices) {
-            int coincide = 0;
-            for (int i = 0; i < 5; i++) {
-                char character = device.getPattern().charAt(i);
-                String patternColumn = PatternEnum.forCode(currentPattern[i]).toString();
-                if (patternColumn.contains(String.valueOf(character))) {
-                    coincide++;
-                }
-            }
-            if (coincide == 5) {
-                return device;
-            }
-        }
-        return null;
-    }
-
-    void devicesDiscovered(final List<ScanResult> results) {
-        if (results != null) {
-            devices.clear();
-            for (ScanResult result : results) {
-                deviceDiscovered(result);
-            }
-            postValue(this);
-        }
-    }
-
-    /* package */ void deviceDiscovered(final ScanResult result) {
-        if (result.getScanRecord() != null) {
-            String deviceName = result.getScanRecord().getDeviceName();
-            String address = result.getDevice().getAddress();
-
-//            Utils.log(Log.ASSERT, "SCAN", "Device name: " + deviceName + ", address: " + address);
-            if (deviceName != null) {
-//                System.out.println("Found Device: " + deviceName);
-
-                Pattern p = Pattern.compile("[a-zA-Z :]+\\u005b(([A-Z]){5})\\u005d");
-                Matcher m = p.matcher(deviceName.toUpperCase());
-
-                if (m.matches()) {
-
-                    ExtendedBluetoothDevice device;
-
-                    final int index = indexOf(result);
-                    if (index == -1) {
-                        device = new ExtendedBluetoothDevice(result);
-                        devices.add(device);
-                        updatedDeviceIndex = null;
-                    } else {
-                        device = devices.get(index);
-                        updatedDeviceIndex = index;
-                        // Update RSSI and name
-                        device.setRssi(result.getRssi());
-                        device.setName(result.getScanRecord().getDeviceName());
-                        device.setPattern(m.group(1));
-                        device.setRecentUpdate(new Date().getTime());
-                    }
-                    postValue(this);
-                }
-            }
-        }
-    }
-
-    /**
-     * Returns the list of devices.
-     *
-     * @return current list of devices discovered
-     */
-    @NonNull
-    public List<ExtendedBluetoothDevice> getDevices() {
-        return devices;
-    }
-
-    /**
-     * Returns null if a new device was added, or an index of the updated device.
-     */
-    @Nullable
-    public Integer getUpdatedDeviceIndex() {
-        final Integer i = updatedDeviceIndex;
-        updatedDeviceIndex = null;
-        return i;
-    }
-
-    /**
-     * Returns whether the list is empty.
-     */
-    public boolean isEmpty() {
-        return devices.isEmpty();
-    }
-
-    /**
-     * Returns whether scanning is in progress.
-     */
-    public boolean isScanning() {
-        return scanningStarted;
-    }
-
-    /**
-     * Returns whether Bluetooth adapter is enabled.
-     */
-    public boolean isBluetoothEnabled() {
-        return bluetoothEnabled;
-    }
-
-    /**
-     * Returns whether Location is enabled.
-     */
-    public boolean isLocationEnabled() {
-        return locationEnabled;
-    }
-
-    /**
-     * Finds the index of existing devices on the scan results list.
-     *
-     * @param result scan result
-     * @return index of -1 if not found
-     */
-    private int indexOf(final ScanResult result) {
-        int i = 0;
-        for (final ExtendedBluetoothDevice device : devices) {
-            if (device.matches(result))
-                return i;
-            i++;
-        }
-        return -1;
-    }
-}
diff --git a/app/src/main/java/cc/calliope/mini/viewmodels/ScannerViewModel.java b/app/src/main/java/cc/calliope/mini/viewmodels/ScannerViewModel.java
deleted file mode 100644
index dfa8c83..0000000
--- a/app/src/main/java/cc/calliope/mini/viewmodels/ScannerViewModel.java
+++ /dev/null
@@ -1,270 +0,0 @@
-/*
- * Copyright (c) 2015, Nordic Semiconductor
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- *  Redistributions of source code must retain the above copyright notice, this
- *   list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright notice,
- *   this list of conditions and the following disclaimer in the documentation
- *   and/or other materials provided with the distribution.
- *
- *  Neither the name of copyright holder nor the names of its
- *   contributors may be used to endorse or promote products derived from
- *   this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package cc.calliope.mini.viewmodels;
-
-import android.app.Application;
-import android.bluetooth.BluetoothAdapter;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
-import android.location.LocationManager;
-import android.util.Log;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Timer;
-import java.util.TimerTask;
-
-import androidx.annotation.NonNull;
-import androidx.lifecycle.AndroidViewModel;
-import androidx.preference.PreferenceManager;
-import cc.calliope.mini.App;
-import cc.calliope.mini.utils.Utils;
-import cc.calliope.mini.utils.Version;
-import no.nordicsemi.android.support.v18.scanner.BluetoothLeScannerCompat;
-import no.nordicsemi.android.support.v18.scanner.ScanCallback;
-import no.nordicsemi.android.support.v18.scanner.ScanFilter;
-import no.nordicsemi.android.support.v18.scanner.ScanResult;
-import no.nordicsemi.android.support.v18.scanner.ScanSettings;
-
-import static cc.calliope.mini.App.APP_STATE_FLASHING;
-
-public class ScannerViewModel extends AndroidViewModel {
-
-    // For checking the availability of the device.
-    // If there is no one device in the bluetooth visibility range callback not working.
-    private Timer timer;
-    private static final int REFRESH_PERIOD = 3000;
-
-    /**
-     * MutableLiveData containing the scanner state to notify MainActivity.
-     */
-    private final ScannerLiveData mScannerLiveData;
-
-    public ScannerLiveData getScannerState() {
-        return mScannerLiveData;
-    }
-
-    public ScannerViewModel(final Application application) {
-        super(application);
-
-        mScannerLiveData = new ScannerLiveData(Utils.isBluetoothEnabled(),
-                Utils.isLocationEnabled(application) || Version.VERSION_S_AND_NEWER);
-        registerBroadcastReceivers(application);
-        loadPattern();
-    }
-
-    @Override
-    protected void onCleared() {
-        super.onCleared();
-        Application application = getApplication();
-
-        application.unregisterReceiver(mBluetoothStateBroadcastReceiver);
-
-        if (Version.VERSION_M_AND_NEWER) {
-            application.unregisterReceiver(mLocationProviderChangedReceiver);
-        }
-    }
-
-    public void refresh() {
-        mScannerLiveData.refresh();
-    }
-
-    /**
-     * Start scanning for Bluetooth devices.
-     */
-    public void startScan() {
-        Log.e("SCANNER", "### " + Thread.currentThread().getId() + " # " + "startScan()");
-        boolean isFlashing = ((App) getApplication()).getAppState() == APP_STATE_FLASHING;
-        if (mScannerLiveData.isScanning() || !mScannerLiveData.isBluetoothEnabled() || isFlashing) {
-            return;
-        }
-
-        startTimer();
-
-        // Scanning settings
-        final ScanSettings settings = new ScanSettings.Builder()
-                .setScanMode(ScanSettings.SCAN_MODE_BALANCED)
-                // Refresh the devices list every 5000 ms (5 sec)
-                .setReportDelay(0)
-                // Hardware filtering has some issues on selected devices
-                .setUseHardwareFilteringIfSupported(false)
-                // Samsung S6 and S6 Edge report equal value of RSSI for all devices. In this app we ignore the RSSI.
-                /*.setUseHardwareBatchingIfSupported(false)*/
-                .build();
-
-        // Let's use the filter to scan only for Blinky devices
-//		final ParcelUuid uuid = new ParcelUuid(LBS_UUID_SERVICE);
-        final List<ScanFilter> filters = new ArrayList<>();
-//		filters.add(new ScanFilter.Builder().setServiceUuid(uuid).build());
-//		filters.add(new ScanFilter.Builder().setDeviceName(Pattern.compile("\\u005b([a-z]){5}\\u005d")).build());
-
-        final BluetoothLeScannerCompat scanner = BluetoothLeScannerCompat.getScanner();
-        scanner.startScan(filters, settings, scanCallback);
-        mScannerLiveData.scanningStarted();
-    }
-
-    /**
-     * stop scanning for bluetooth devices.
-     */
-    public void stopScan() {
-        stopTimer();
-        Log.e("SCANNER", "### " + Thread.currentThread().getId() + " # " + "stopScan()");
-        final BluetoothLeScannerCompat scanner = BluetoothLeScannerCompat.getScanner();
-        scanner.stopScan(scanCallback);
-        mScannerLiveData.scanningStopped();
-        savePattern();
-    }
-
-    private final ScanCallback scanCallback = new ScanCallback() {
-        @Override
-        public void onScanResult(final int callbackType, @NonNull final ScanResult result) {
-
-            //TODO Are we need it?
-//			if (Utils.isLocationRequired(getApplication()) && !Utils.isLocationEnabled(getApplication())) {
-//                Utils.markLocationNotRequired(getApplication());
-//            }
-
-            mScannerLiveData.deviceDiscovered(result);
-        }
-
-        @Override
-        public void onBatchScanResults(@NonNull final List<ScanResult> results) {
-            // If the packet has been obtained while Location was disabled, mark Location as not required
-//            mScannerLiveData.devicesDiscovered(results);
-        }
-
-        @Override
-        public void onScanFailed(final int errorCode) {
-            // TODO This should be handled
-            Log.e("SCANNER", "### " + Thread.currentThread().getId() + " # " + "onScanFailed(), errorCode: " + errorCode);
-            stopScan();
-//            mScannerLiveData.scanningStopped();
-        }
-    };
-
-    public void setCurrentPattern(Float[] pattern) {
-        mScannerLiveData.setCurrentPattern(pattern);
-    }
-
-    public void createBond(){
-        mScannerLiveData.createBond();
-    }
-
-    /**
-     * Register for required broadcast receivers.
-     */
-    private void registerBroadcastReceivers(final Application application) {
-        application.registerReceiver(mBluetoothStateBroadcastReceiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));
-        if (Version.VERSION_M_AND_NEWER) {
-            application.registerReceiver(mLocationProviderChangedReceiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
-        }
-    }
-
-    /**
-     * Broadcast receiver to monitor the changes in the location provider
-     */
-    private final BroadcastReceiver mLocationProviderChangedReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(final Context context, final Intent intent) {
-            final boolean enabled = Utils.isLocationEnabled(context);
-            mScannerLiveData.setLocationEnabled(enabled);
-        }
-    };
-
-    /**
-     * Broadcast receiver to monitor the changes in the bluetooth adapter
-     */
-    private final BroadcastReceiver mBluetoothStateBroadcastReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(final Context context, final Intent intent) {
-            final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF);
-            final int previousState = intent.getIntExtra(BluetoothAdapter.EXTRA_PREVIOUS_STATE, BluetoothAdapter.STATE_OFF);
-
-            switch (state) {
-                case BluetoothAdapter.STATE_ON:
-                    startScan();
-                    mScannerLiveData.bluetoothEnabled();
-                    break;
-                case BluetoothAdapter.STATE_TURNING_OFF:
-                case BluetoothAdapter.STATE_OFF:
-                    if (previousState != BluetoothAdapter.STATE_TURNING_OFF && previousState != BluetoothAdapter.STATE_OFF) {
-                        stopScan();
-                        mScannerLiveData.bluetoothDisabled();
-                    }
-                    break;
-            }
-        }
-    };
-
-    public void savePattern() {
-        Float[] currentPattern = mScannerLiveData.getCurrentPattern();
-        if (currentPattern != null) {
-            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getApplication());
-            SharedPreferences.Editor edit = sharedPreferences.edit();
-            for (int i = 0; i < 5; i++) {
-                edit.putFloat("PATTERN_" + i, currentPattern[i]);
-            }
-            edit.apply();
-        }
-    }
-
-    public void loadPattern() {
-        Float[] currentPattern = {0f, 0f, 0f, 0f, 0f};
-        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getApplication());
-        for (int i = 0; i < 5; i++) {
-            currentPattern[i] = preferences.getFloat("PATTERN_" + i, 0f);
-        }
-        mScannerLiveData.setCurrentPattern(currentPattern);
-    }
-
-    public void startTimer() {
-        stopTimer();
-        timer = new Timer();
-        timer.schedule(new TimerTask() {
-            @Override
-            public void run() {
-                refresh();
-//                Log.w("Timer", "### " + Thread.currentThread().getId() + " # " + "scannerViewModel.refresh()");
-            }
-        }, 0, REFRESH_PERIOD);
-        Log.d("Timer", "### " + Thread.currentThread().getId() + " # " + "timer: " + timer);
-    }
-
-    public void stopTimer() {
-        if (timer != null) {
-            timer.cancel();
-            timer.purge();
-        }
-    }
-}
