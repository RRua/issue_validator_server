diff --git a/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java b/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
index 29caff89..373ec40e 100644
--- a/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
+++ b/app/src/main/java/com/example/swob_deku/MessagesThreadsActivity.java
@@ -34,7 +34,6 @@ import java.util.List;
 
 public class MessagesThreadsActivity extends AppCompatActivity {
     // TODO: Change address to friendly name if in phonebook
-    MessagesThreadRecyclerAdapter messagesThreadRecyclerAdapter = new MessagesThreadRecyclerAdapter();
     MessagesThreadViewModel messagesThreadViewModel;
 
     @Override
@@ -92,7 +91,7 @@ public class MessagesThreadsActivity extends AppCompatActivity {
         });
 
         LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
-        messagesThreadRecyclerAdapter = new MessagesThreadRecyclerAdapter(
+        MessagesThreadRecyclerAdapter messagesThreadRecyclerAdapter = new MessagesThreadRecyclerAdapter(
                 this, R.layout.messages_threads_layout);
 
         RecyclerView messagesThreadRecyclerView = findViewById(R.id.messages_threads_recycler_view);
@@ -178,8 +177,8 @@ public class MessagesThreadsActivity extends AppCompatActivity {
                             int contactIndexInformation = contactCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
                             String number = contactCursor.getString(contactIndexInformation);
 
-                            Intent singleMessageThreadIntent = new Intent(this, SendSMSActivity.class);
-                            singleMessageThreadIntent.putExtra(SendSMSActivity.ADDRESS, number);
+                            Intent singleMessageThreadIntent = new Intent(this, SMSSendActivity.class);
+                            singleMessageThreadIntent.putExtra(SMSSendActivity.ADDRESS, number);
                             startActivity(singleMessageThreadIntent);
                         }
                     }
diff --git a/app/src/main/java/com/example/swob_deku/Models/Messages/MessagesThreadRecyclerAdapter.java b/app/src/main/java/com/example/swob_deku/Models/Messages/MessagesThreadRecyclerAdapter.java
index 9aa3bea3..bc46a374 100644
--- a/app/src/main/java/com/example/swob_deku/Models/Messages/MessagesThreadRecyclerAdapter.java
+++ b/app/src/main/java/com/example/swob_deku/Models/Messages/MessagesThreadRecyclerAdapter.java
@@ -4,7 +4,6 @@ import android.Manifest;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.graphics.Typeface;
 import android.net.Uri;
 import android.text.Spannable;
 import android.text.Spanned;
@@ -30,10 +29,9 @@ import androidx.work.WorkQuery;
 import com.example.swob_deku.Commons.Contacts;
 import com.example.swob_deku.Commons.Helpers;
 import com.example.swob_deku.Models.SMS.SMS;
-import com.example.swob_deku.Models.SMS.SMSHandler;
 import com.example.swob_deku.R;
-import com.example.swob_deku.SMSReceiverActivity;
-import com.example.swob_deku.SendSMSActivity;
+import com.example.swob_deku.SMSTextReceiverBroadcastActivity;
+import com.example.swob_deku.SMSSendActivity;
 import com.google.common.util.concurrent.ListenableFuture;
 
 
@@ -41,9 +39,7 @@ import java.sql.Date;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 
 public class MessagesThreadRecyclerAdapter extends RecyclerView.Adapter<MessagesThreadRecyclerAdapter.ViewHolder> {
 
@@ -52,17 +48,11 @@ public class MessagesThreadRecyclerAdapter extends RecyclerView.Adapter<Messages
     Context context;
     int renderLayout;
     Boolean isSearch = false;
-    String searchString = new String();
-
-//    Set<String> threadIdSet = new HashSet<>();
-
-    public MessagesThreadRecyclerAdapter() {}
+    String searchString = "";
 
     public MessagesThreadRecyclerAdapter(Context context, int renderLayout) {
        this.context = context;
        this.renderLayout = renderLayout;
-
-//       this.threadIdSet = SMSHandler.hasUnreadMessagesAll(context);
     }
 
     public MessagesThreadRecyclerAdapter(Context context, int renderLayout, Boolean isSearch, String searchString) {
@@ -130,6 +120,7 @@ public class MessagesThreadRecyclerAdapter extends RecyclerView.Adapter<Messages
         }
         holder.date.setText(date);
 
+        // TODO: change color of unread messages in thread
         //if(SMSHandler.hasUnreadMessages(context, sms.getThreadId())) {
 //        if(this.threadIdSet.contains(sms.getThreadId())) {
 //            // Make bold
@@ -144,14 +135,14 @@ public class MessagesThreadRecyclerAdapter extends RecyclerView.Adapter<Messages
         View.OnClickListener onClickListener = new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                Intent singleMessageThreadIntent = new Intent(context, SendSMSActivity.class);
-                singleMessageThreadIntent.putExtra(SendSMSActivity.ADDRESS, sms.getAddress());
-                singleMessageThreadIntent.putExtra(SendSMSActivity.THREAD_ID, sms.getThreadId());
+                Intent singleMessageThreadIntent = new Intent(context, SMSSendActivity.class);
+                singleMessageThreadIntent.putExtra(SMSSendActivity.ADDRESS, sms.getAddress());
+                singleMessageThreadIntent.putExtra(SMSSendActivity.THREAD_ID, sms.getThreadId());
 
                 if (isSearch)
-                    singleMessageThreadIntent.putExtra(SendSMSActivity.ID, sms.getId());
+                    singleMessageThreadIntent.putExtra(SMSSendActivity.ID, sms.getId());
                 if (!searchString.isEmpty())
-                    singleMessageThreadIntent.putExtra(SendSMSActivity.SEARCH_STRING, searchString);
+                    singleMessageThreadIntent.putExtra(SMSSendActivity.SEARCH_STRING, searchString);
 
                 context.startActivity(singleMessageThreadIntent);
             }
@@ -166,7 +157,7 @@ public class MessagesThreadRecyclerAdapter extends RecyclerView.Adapter<Messages
                 public void onClick(View view) {
                     // TODO: restart the work
                     WorkQuery workQuery = WorkQuery.Builder
-                            .fromTags(Arrays.asList(SMSReceiverActivity.TAG_NAME))
+                            .fromTags(Arrays.asList(SMSTextReceiverBroadcastActivity.TAG_NAME))
                             .addStates(Arrays.asList(WorkInfo.State.ENQUEUED))
                             .addUniqueWorkNames(Arrays.asList(sms.getId()))
                             .build();
diff --git a/app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessageViewModel.java b/app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessageViewModel.java
new file mode 100644
index 00000000..4674d1d7
--- /dev/null
+++ b/app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessageViewModel.java
@@ -0,0 +1,45 @@
+package com.example.swob_deku.Models.Messages;
+
+import android.content.Context;
+import android.database.Cursor;
+
+import androidx.lifecycle.LiveData;
+import androidx.lifecycle.MutableLiveData;
+import androidx.lifecycle.ViewModel;
+
+import com.example.swob_deku.Models.SMS.SMS;
+import com.example.swob_deku.Models.SMS.SMSHandler;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class SingleMessageViewModel extends ViewModel {
+    private MutableLiveData<List<SMS>> messagesList;
+
+    String threadId;
+
+    public LiveData<List<SMS>> getMessages(Context context, String threadId){
+        if(messagesList == null) {
+            this.threadId = threadId;
+            messagesList = new MutableLiveData<>();
+            loadSMSThreads(context);
+        }
+        return messagesList;
+    }
+
+    public void informChanges(Context context) {
+        loadSMSThreads(context);
+    }
+
+    private void loadSMSThreads(Context context) {
+        Cursor cursor = SMSHandler.fetchSMSForThread(context, this.threadId);
+        if(cursor.moveToFirst()) {
+            List<SMS> smsList = new ArrayList<>();
+            do {
+                SMS sms = new SMS(cursor);
+                smsList.add(sms);
+            } while(cursor.moveToNext());
+            messagesList.setValue(smsList);
+        }
+    }
+}
diff --git a/app/src/main/java/com/example/swob_deku/Models/SMS/SingleMessagesThreadRecyclerAdapter.java b/app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessagesThreadRecyclerAdapter.java
similarity index 84%
rename from app/src/main/java/com/example/swob_deku/Models/SMS/SingleMessagesThreadRecyclerAdapter.java
rename to app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessagesThreadRecyclerAdapter.java
index 96178454..3b42e0ce 100644
--- a/app/src/main/java/com/example/swob_deku/Models/SMS/SingleMessagesThreadRecyclerAdapter.java
+++ b/app/src/main/java/com/example/swob_deku/Models/Messages/SingleMessagesThreadRecyclerAdapter.java
@@ -1,4 +1,4 @@
-package com.example.swob_deku.Models.SMS;
+package com.example.swob_deku.Models.Messages;
 
 import android.content.Context;
 import android.provider.Telephony;
@@ -14,6 +14,8 @@ import android.view.ViewGroup;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.AsyncListDiffer;
+import androidx.recyclerview.widget.DiffUtil;
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.example.swob_deku.Models.SMS.SMS;
@@ -28,24 +30,19 @@ import java.util.List;
 public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
 
     Context context;
-    List<SMS> messagesList;
     int renderLayoutReceived, renderLayoutSent, renderLayoutTimestamp;
     int focusPosition = -1;
-    long focusId;
+    Long focusId;
     RecyclerView view;
     String searchString;
 
-    public SingleMessagesThreadRecyclerAdapter(Context context, List<SMS> messagesList, int renderLayoutReceived, int renderLayoutSent, int renderLayoutTimestamp) {
-        this.context = context;
-        this.messagesList = messagesList;
-        this.renderLayoutReceived = renderLayoutReceived;
-        this.renderLayoutSent = renderLayoutSent;
-        this.renderLayoutTimestamp = renderLayoutTimestamp;
-    }
+    private final AsyncListDiffer<SMS> mDiffer = new AsyncListDiffer(this, DIFF_CALLBACK);
 
-    public SingleMessagesThreadRecyclerAdapter(Context context, List<SMS> messagesList, int renderLayoutReceived, int renderLayoutSent, int renderLayoutTimestamp, long focusId, String searchString) {
+    public SingleMessagesThreadRecyclerAdapter(Context context, int renderLayoutReceived,
+                                               int renderLayoutSent,
+                                               int renderLayoutTimestamp,
+                                               Long focusId, String searchString) {
         this.context = context;
-        this.messagesList = messagesList;
         this.renderLayoutReceived = renderLayoutReceived;
         this.renderLayoutSent = renderLayoutSent;
         this.renderLayoutTimestamp = renderLayoutTimestamp;
@@ -85,11 +82,10 @@ public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
     public void onViewAttachedToWindow(@NonNull RecyclerView.ViewHolder holder) {
         super.onViewAttachedToWindow(holder);
 
-
         if(focusPosition != -1 && holder.getAdapterPosition() == focusPosition) {
             if(!searchString.isEmpty()) {
                 Log.d("", "Focus not empty..");
-                String text = messagesList.get(focusPosition).getBody();
+                String text = mDiffer.getCurrentList().get(focusPosition).getBody();
                 Spannable spannable = Spannable.Factory.getInstance().newSpannable(text);
 
                 for (int index = text.indexOf(searchString); index >= 0; index = text.indexOf(searchString, index + 1)) {
@@ -119,12 +115,13 @@ public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
     @Override
     public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
 
-        SMS sms = messagesList.get(position);
+        SMS sms = mDiffer.getCurrentList().get(position);
 
-        if(focusId != -1 && sms.getId() != null && Long.valueOf(sms.getId()) == focusId) {
-            final int finalPosition = position;
-            this.focusPosition = finalPosition;
-        }
+        // TODO: for search
+//        if(focusId != -1 && sms.getId() != null && Long.valueOf(sms.getId()) == focusId) {
+//            final int finalPosition = position;
+//            this.focusPosition = finalPosition;
+//        }
 
         String date = sms.getDate();
         if(sms.isDatesOnly()) {
@@ -199,12 +196,12 @@ public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
 
                 break;
             case "4":
-                ((MessageSentViewHandler)holder).sentMessage.setText(messagesList.get(position).getBody());
+                ((MessageSentViewHandler)holder).sentMessage.setText(mDiffer.getCurrentList().get(position).getBody());
                 ((MessageSentViewHandler) holder).date.setText(date);
                 ((MessageSentViewHandler) holder).sentMessageStatus.setText("sending...");
                 break;
             case "5":
-                ((MessageSentViewHandler)holder).sentMessage.setText(messagesList.get(position).getBody());
+                ((MessageSentViewHandler)holder).sentMessage.setText(mDiffer.getCurrentList().get(position).getBody());
                 ((MessageSentViewHandler) holder).date.setText(date);
                 ((MessageSentViewHandler) holder).sentMessageStatus.setText("failed");
                 break;
@@ -213,16 +210,20 @@ public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
 
     @Override
     public int getItemCount() {
-        return this.messagesList.size();
+        return mDiffer.getCurrentList().size();
+    }
+
+    public void submitList(List<SMS> list) {
+        mDiffer.submitList(list);
     }
 
     @Override
     public int getItemViewType(int position)
     {
-        if(messagesList.get(position).isDatesOnly())
+        if(mDiffer.getCurrentList().get(position).isDatesOnly())
             return 100;
 
-        int messageType = Integer.parseInt(messagesList.get(position).getType());
+        int messageType = Integer.parseInt(mDiffer.getCurrentList().get(position).getType());
         return (messageType > -1 )? messageType : 0;
     }
 
@@ -257,4 +258,17 @@ public class SingleMessagesThreadRecyclerAdapter extends RecyclerView.Adapter{
             date = itemView.findViewById(R.id.message_thread_received_date_text);
         }
     }
+
+    public static final DiffUtil.ItemCallback<SMS> DIFF_CALLBACK =
+            new DiffUtil.ItemCallback<SMS>() {
+                @Override
+                public boolean areItemsTheSame(@NonNull SMS oldItem, @NonNull SMS newItem) {
+                    return oldItem.id.equals(newItem.id);
+                }
+
+                @Override
+                public boolean areContentsTheSame(@NonNull SMS oldItem, @NonNull SMS newItem) {
+                    return oldItem.equals(newItem);
+                }
+            };
 }
diff --git a/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java b/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
index 16d65b64..25fcaedd 100644
--- a/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
+++ b/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
@@ -103,7 +103,6 @@ public class SMSHandler {
 
     public static Cursor fetchSMSMessagesAddress(Context context, String address) {
         address = address.replaceAll("[\\s-]", "");
-        Log.d("", "Composing to: " + address);
 
         Cursor smsMessagesCursor = context.getContentResolver().query(
                 Telephony.Sms.CONTENT_URI,
@@ -116,7 +115,7 @@ public class SMSHandler {
     }
 
     public static Cursor fetchSMSForThread(Context context, String threadId) {
-        String[] selection = new String[] { "_id", "thread_id", "address", "date"};
+        String[] selection = new String[] { "_id", "thread_id", "address", "person", "date","body", "type" };
 
         Cursor smsMessagesCursor = context.getContentResolver().query(
                 Telephony.Sms.CONTENT_URI,
diff --git a/app/src/main/java/com/example/swob_deku/RouterActivity.java b/app/src/main/java/com/example/swob_deku/RouterActivity.java
index ffb34049..5a9db91c 100644
--- a/app/src/main/java/com/example/swob_deku/RouterActivity.java
+++ b/app/src/main/java/com/example/swob_deku/RouterActivity.java
@@ -107,7 +107,7 @@ public class RouterActivity extends AppCompatActivity {
     public ArrayList<ArrayList<String>> listRouteJobs() {
 
         WorkQuery workQuery = WorkQuery.Builder
-                .fromTags(Arrays.asList(SMSReceiverActivity.TAG_NAME))
+                .fromTags(Arrays.asList(SMSTextReceiverBroadcastActivity.TAG_NAME))
                 .addStates(Arrays.asList(
                         WorkInfo.State.SUCCEEDED,
                         WorkInfo.State.ENQUEUED,
diff --git a/app/src/main/java/com/example/swob_deku/SMSDataReceiverActivity.java b/app/src/main/java/com/example/swob_deku/SMSDataReceiverBroadcastActivity.java
similarity index 90%
rename from app/src/main/java/com/example/swob_deku/SMSDataReceiverActivity.java
rename to app/src/main/java/com/example/swob_deku/SMSDataReceiverBroadcastActivity.java
index 23598974..62275537 100644
--- a/app/src/main/java/com/example/swob_deku/SMSDataReceiverActivity.java
+++ b/app/src/main/java/com/example/swob_deku/SMSDataReceiverBroadcastActivity.java
@@ -12,7 +12,7 @@ import com.example.swob_deku.Models.SMS.SMSHandler;
 
 import java.nio.charset.StandardCharsets;
 
-public class SMSDataReceiverActivity extends BroadcastReceiver {
+public class SMSDataReceiverBroadcastActivity extends BroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
 
@@ -41,7 +41,7 @@ public class SMSDataReceiverActivity extends BroadcastReceiver {
                     String stringMessage = messageStringBuffer.toString();
                     long messageId = SMSHandler.registerIncomingMessage(context, address, stringMessage);
 
-                    SMSReceiverActivity.sendNotification(context, stringMessage, address, messageId);
+                    SMSTextReceiverBroadcastActivity.sendNotification(context, stringMessage, address, messageId);
                     break;
             }
         }
diff --git a/app/src/main/java/com/example/swob_deku/SendSMSActivity.java b/app/src/main/java/com/example/swob_deku/SMSSendActivity.java
similarity index 81%
rename from app/src/main/java/com/example/swob_deku/SendSMSActivity.java
rename to app/src/main/java/com/example/swob_deku/SMSSendActivity.java
index c50f3cdc..3b46bf03 100644
--- a/app/src/main/java/com/example/swob_deku/SendSMSActivity.java
+++ b/app/src/main/java/com/example/swob_deku/SMSSendActivity.java
@@ -1,5 +1,6 @@
 package com.example.swob_deku;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.Toolbar;
@@ -7,10 +8,13 @@ import androidx.constraintlayout.widget.ConstraintLayout;
 import androidx.core.app.ActivityCompat;
 import androidx.core.app.NotificationManagerCompat;
 import androidx.core.content.ContextCompat;
+import androidx.lifecycle.Observer;
+import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.PendingIntent;
 import android.content.BroadcastReceiver;
@@ -33,7 +37,9 @@ import android.widget.Toast;
 
 import com.example.swob_deku.Commons.Contacts;
 import com.example.swob_deku.Commons.Helpers;
-import com.example.swob_deku.Models.SMS.SingleMessagesThreadRecyclerAdapter;
+import com.example.swob_deku.Models.Messages.MessagesThreadViewModel;
+import com.example.swob_deku.Models.Messages.SingleMessageViewModel;
+import com.example.swob_deku.Models.Messages.SingleMessagesThreadRecyclerAdapter;
 import com.example.swob_deku.Models.SMS.SMS;
 import com.example.swob_deku.Models.SMS.SMSHandler;
 import com.google.android.material.textfield.TextInputEditText;
@@ -44,9 +50,13 @@ import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
 
-public class SendSMSActivity extends AppCompatActivity {
+public class SMSSendActivity extends AppCompatActivity {
 
-    List<String> messagesList = new ArrayList();
+    // TODO: incoming message MessagesThread
+    // TODO: incoming message from notification
+    // TODO: incoming message from shared intent
+
+    SingleMessageViewModel singleMessageViewModel;
 
     public static final String ADDRESS = "address";
     public static final String THREAD_ID = "thread_id";
@@ -57,10 +67,8 @@ public class SendSMSActivity extends AppCompatActivity {
     public static final String SMS_DELIVERED_INTENT = "SMS_DELIVERED";
 
     public static final int SEND_SMS_PERMISSION_REQUEST_CODE = 1;
-    boolean currentlyActive = false;
 
-    SingleMessagesThreadRecyclerAdapter singleMessagesThreadRecyclerAdapter;
-    RecyclerView singleMessagesThreadRecyclerView;
+    String threadId = "";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -76,37 +84,88 @@ public class SendSMSActivity extends AppCompatActivity {
         // Enable the Up button
         ab.setDisplayHomeAsUpEnabled(true);
 
-        currentlyActive = true;
-        if(!checkPermissionToSendSMSMessages())
-            ActivityCompat.requestPermissions(
-                    this,
-                    new String[]{Manifest.permission.SEND_SMS}, SEND_SMS_PERMISSION_REQUEST_CODE);
+        getMessagesThreadId();
+
+        // TODO: should be used when message is about to be sent
+//        if(!checkPermissionToSendSMSMessages())
+//            ActivityCompat.requestPermissions(
+//                    this,
+//                    new String[]{Manifest.permission.SEND_SMS}, SEND_SMS_PERMISSION_REQUEST_CODE);
+
+        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
+        linearLayoutManager.setStackFromEnd(false);
+        linearLayoutManager.setReverseLayout(true);
+
+        RecyclerView singleMessagesThreadRecyclerView = findViewById(R.id.single_messages_thread_recycler_view);
 
-        singleMessagesThreadRecyclerView = findViewById(R.id.single_messages_thread_recycler_view);
+        SingleMessagesThreadRecyclerAdapter singleMessagesThreadRecyclerAdapter = new SingleMessagesThreadRecyclerAdapter(
+                this,
+                R.layout.messages_thread_received_layout,
+                R.layout.messages_thread_sent_layout,
+                R.layout.messages_thread_timestamp_layout,
+                null,
+                null);
+        singleMessagesThreadRecyclerView.setLayoutManager(linearLayoutManager);
+        singleMessagesThreadRecyclerView.setAdapter(singleMessagesThreadRecyclerAdapter);
+
+        singleMessageViewModel = new ViewModelProvider(this).get(
+                SingleMessageViewModel.class);
+
+        singleMessageViewModel.getMessages(getApplicationContext(), threadId).observe(this,
+                new Observer<List<SMS>>() {
+                    @Override
+                    public void onChanged(List<SMS> smsList) {
+                        singleMessagesThreadRecyclerAdapter.submitList(smsList);
+                    }
+                });
+
+//        processForSharedIntent();
+//
+//        handleIncomingMessage();
+//
+//        cancelNotifications(getIntent().getStringExtra(THREAD_ID));
+//
+//        improveMessagingUX();
     }
 
-    @Override
-    protected void onPostCreate(Bundle savedInstanceStates) {
-        super.onPostCreate(savedInstanceStates);
-        processForSharedIntent();
-        handleIncomingMessage();
-        cancelNotifications(getIntent().getStringExtra(THREAD_ID));
+    private void getMessagesThreadId() {
+        if(getIntent().hasExtra(THREAD_ID))
+            threadId = getIntent().getStringExtra(THREAD_ID);
+
+        else if(getIntent().hasExtra(ADDRESS)) {
+            String address = getIntent().getStringExtra(ADDRESS);
+            Cursor cursor = SMSHandler.fetchSMSMessagesAddress(getApplicationContext(), address);
+            if(cursor.moveToFirst()) {
+                do {
+                    SMS sms = new SMS(cursor);
+                    String smsThreadId = sms.getThreadId();
+
+                    if(PhoneNumberUtils.compare(address, sms.getAddress()) && !smsThreadId.equals("-1")) {
+                        threadId = smsThreadId;
+                        break;
+                    }
+                }
+                while(cursor.moveToNext());
+            }
+        }
+    }
 
+    private void improveMessagingUX() {
         runOnUiThread(new Runnable() {
+            @SuppressLint("ClickableViewAccessibility")
             @Override
             public void run() {
                 ActionBar ab = getSupportActionBar();
                 String address = getIntent().getStringExtra(ADDRESS);
 
                 EditText smsText = findViewById(R.id.sms_text);
-//                smsText.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
-//                smsText.setMovementMethod(ScrollingMovementMethod.getInstance());
                 smsText.setOnTouchListener(new View.OnTouchListener() {
                     @Override
                     public boolean onTouch(View view, MotionEvent motionEvent) {
 
                         view.getParent().requestDisallowInterceptTouchEvent(true);
-                        if ((motionEvent.getAction() & MotionEvent.ACTION_UP) != 0 && (motionEvent.getActionMasked() & MotionEvent.ACTION_UP) != 0)
+                        if ((motionEvent.getAction() & MotionEvent.ACTION_UP) != 0 &&
+                                (motionEvent.getActionMasked() & MotionEvent.ACTION_UP) != 0)
                         {
                             view.getParent().requestDisallowInterceptTouchEvent(false);
                         }
@@ -121,7 +180,6 @@ public class SendSMSActivity extends AppCompatActivity {
 
                 // TODO: if has letters, make sure reply cannot happen
                 ab.setTitle(Contacts.retrieveContactName(getApplicationContext(), address));
-                populateMessageThread();
             }
         });
     }
@@ -130,12 +188,16 @@ public class SendSMSActivity extends AppCompatActivity {
         String indentAction = getIntent().getAction();
         if(indentAction != null && getIntent().getAction().equals(Intent.ACTION_SENDTO)) {
             String sendToString = getIntent().getDataString();
-            Log.d("", "Processing shared #: " + sendToString);
+
+            if(BuildConfig.DEBUG)
+                Log.d("", "Processing shared #: " + sendToString);
+
             if(sendToString.contains("%2B"))
                 sendToString = sendToString.replace("%2B", "+")
                                 .replace("%20", "");
 
-            Log.d("", "Working on a shared Intent... " + sendToString);
+            if(BuildConfig.DEBUG)
+                Log.d("", "Working on a shared Intent... " + sendToString);
 
             if(sendToString.indexOf("smsto:") > -1 || sendToString.indexOf("sms:") > -1) {
                String address = sendToString.substring(sendToString.indexOf(':') + 1);
@@ -160,7 +222,7 @@ public class SendSMSActivity extends AppCompatActivity {
 //        https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessage(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.app.PendingIntent,%20android.app.PendingIntent,%20long)
         BroadcastReceiver sentBroadcastReceiver = new BroadcastReceiver() {
             @Override
-            public void onReceive(Context context, Intent intent) {
+            public void onReceive(Context context, @NonNull Intent intent) {
                 long id = intent.getLongExtra(ID, -1);
                 switch(getResultCode()) {
 
@@ -186,7 +248,6 @@ public class SendSMSActivity extends AppCompatActivity {
                         }
                 }
                 if(isCurrentlyActive()) {
-                    updateStack();
                     unregisterReceiver(this);
                 }
             }
@@ -214,7 +275,6 @@ public class SendSMSActivity extends AppCompatActivity {
                             Log.d(getLocalClassName(), "Failed to deliver: " + getResultCode());
                 }
                 if(isCurrentlyActive()) {
-                    updateStack();
                     unregisterReceiver(this);
                 }
             }
@@ -246,7 +306,6 @@ public class SendSMSActivity extends AppCompatActivity {
                             if (isCurrentlyActive() && sms.getThreadId().equals(getIntent().getStringExtra(THREAD_ID))) {
                                 getIntent().putExtra(ADDRESS, sms.getAddress());
                                 cancelNotifications(sms.getThreadId());
-                                updateStack();
                             }
                         }
                     }
@@ -258,7 +317,7 @@ public class SendSMSActivity extends AppCompatActivity {
          registerReceiver(incomingBroadcastReceiver, new IntentFilter(Telephony.Sms.Intents.SMS_RECEIVED_ACTION));
     }
 
-    List<SMS> getMessagesFromCursor(Cursor cursor) {
+    List<SMS> getMessagesFromCursor(@NonNull Cursor cursor) {
         List<SMS> appendedList = new ArrayList<>();
         Date previousDate = null;
         Calendar currentDate = Calendar.getInstance();
@@ -287,7 +346,6 @@ public class SendSMSActivity extends AppCompatActivity {
         return appendedList;
     }
 
-
     void populateMessageThread() {
         String threadId = "-1";
         if(getIntent().hasExtra(THREAD_ID))
@@ -313,33 +371,6 @@ public class SendSMSActivity extends AppCompatActivity {
         Cursor cursor = SMSHandler.fetchSMSForThread(getApplicationContext(), threadId);
         List<SMS> messagesForThread = getMessagesFromCursor(cursor);
 
-        if(getIntent().hasExtra(ID) && getIntent().hasExtra(SEARCH_STRING)) {
-            singleMessagesThreadRecyclerAdapter = new SingleMessagesThreadRecyclerAdapter(
-                    this,
-                    messagesForThread,
-                    R.layout.messages_thread_received_layout,
-                    R.layout.messages_thread_sent_layout,
-                    R.layout.messages_thread_timestamp_layout,
-                    Long.valueOf(getIntent().getStringExtra(ID)),
-                    getIntent().getStringExtra(SEARCH_STRING));
-            singleMessagesThreadRecyclerAdapter.setView(singleMessagesThreadRecyclerView);
-        }
-        else
-            singleMessagesThreadRecyclerAdapter = new SingleMessagesThreadRecyclerAdapter(
-                    this,
-                    messagesForThread,
-                    R.layout.messages_thread_received_layout,
-                    R.layout.messages_thread_sent_layout,
-                    R.layout.messages_thread_timestamp_layout);
-
-        singleMessagesThreadRecyclerView.setAdapter(singleMessagesThreadRecyclerAdapter);
-
-        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);
-        linearLayoutManager.setStackFromEnd(false);
-        linearLayoutManager.setReverseLayout(true);
-
-        singleMessagesThreadRecyclerView.setLayoutManager(linearLayoutManager);
-
         String finalThreadId = threadId;
         Thread thread = new Thread(new Runnable() {
             @Override
@@ -356,7 +387,6 @@ public class SendSMSActivity extends AppCompatActivity {
         thread.start();
     }
 
-
     public void sendMessage(View view) {
         // TODO: Don't let sending happen if message box is empty
         String destinationAddress = getIntent().getStringExtra(ADDRESS);
@@ -398,7 +428,6 @@ public class SendSMSActivity extends AppCompatActivity {
 
 
             smsTextView.setText("");
-            updateStack();
         }
 
         catch(IllegalArgumentException e ) {
@@ -412,10 +441,6 @@ public class SendSMSActivity extends AppCompatActivity {
 
     }
 
-    private void updateStack() {
-       populateMessageThread();
-    }
-
     public boolean checkPermissionToSendSMSMessages() {
         int check = ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS);
 
@@ -439,9 +464,7 @@ public class SendSMSActivity extends AppCompatActivity {
     @Override
     protected void onResume() {
         super.onResume();
-
-        updateStack();
-        cancelNotifications(getIntent().getStringExtra(THREAD_ID));
+        // cancelNotifications(getIntent().getStringExtra(THREAD_ID));
     }
 
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/example/swob_deku/SMSReceiverActivity.java b/app/src/main/java/com/example/swob_deku/SMSTextReceiverBroadcastActivity.java
similarity index 95%
rename from app/src/main/java/com/example/swob_deku/SMSReceiverActivity.java
rename to app/src/main/java/com/example/swob_deku/SMSTextReceiverBroadcastActivity.java
index 64aef3ba..ce00f4f3 100644
--- a/app/src/main/java/com/example/swob_deku/SMSReceiverActivity.java
+++ b/app/src/main/java/com/example/swob_deku/SMSTextReceiverBroadcastActivity.java
@@ -32,7 +32,7 @@ import java.nio.charset.Charset;
 import java.nio.charset.CharsetDecoder;
 import java.util.concurrent.TimeUnit;
 
-public class SMSReceiverActivity extends BroadcastReceiver {
+public class SMSTextReceiverBroadcastActivity extends BroadcastReceiver {
     Context context;
 
     public static final String TAG_NAME = "RECEIVED_SMS_ROUTING";
@@ -112,7 +112,7 @@ public class SMSReceiverActivity extends BroadcastReceiver {
     }
 
     public static void sendNotification(Context context, String text, String address, long messageId) {
-        Intent receivedSmsIntent = new Intent(context, SendSMSActivity.class);
+        Intent receivedSmsIntent = new Intent(context, SMSSendActivity.class);
 
         Cursor cursor = SMSHandler.fetchSMSMessageThreadIdFromMessageId(context, messageId);
 
@@ -121,8 +121,8 @@ public class SMSReceiverActivity extends BroadcastReceiver {
             SMS sms = new SMS(cursor);
             threadId = sms.getThreadId();
         }
-        receivedSmsIntent.putExtra(SendSMSActivity.ADDRESS, address);
-        receivedSmsIntent.putExtra(SendSMSActivity.THREAD_ID, threadId);
+        receivedSmsIntent.putExtra(SMSSendActivity.ADDRESS, address);
+        receivedSmsIntent.putExtra(SMSSendActivity.THREAD_ID, threadId);
 
         receivedSmsIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
 
