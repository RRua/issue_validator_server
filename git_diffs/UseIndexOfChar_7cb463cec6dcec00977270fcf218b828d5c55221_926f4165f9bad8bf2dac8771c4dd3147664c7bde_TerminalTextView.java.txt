diff --git a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
index 9eba838..d0d2646 100644
--- a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
+++ b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
@@ -117,7 +117,7 @@ public class MyAndroidTest {
      */
     private void addMissingMansToList(List<String> missingCommands, String... mans) {
         for (String man : mans) {
-            Command command = realm.where(Command.class).equalTo(Command.NAME, man).findFirst();
+            Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), man).findFirst();
             if (command == null) {
                 if (!missingCommands.contains(man)) {
                     missingCommands.add(man);
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java
index 985d577..ca82c37 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/CommandManActivity.java
@@ -89,13 +89,13 @@ public class CommandManActivity extends LoadingBaseActivity {
 
         Realm realm = Realm.getDefaultInstance();
         if (mId != INVALID) {
-            Command command = realm.where(Command.class).equalTo(Command.ID, mId).findFirst();
+            Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), mId).findFirst();
             if(command != null) {
                 mCategory = command.getCategory();
                 mName = command.getName().toUpperCase();
             }
         } else {
-            Command command = realm.where(Command.class).equalTo(Command.NAME, mName).findFirst();
+            Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), mName).findFirst();
             if(command != null) {
                 mCategory = command.getCategory();
                 mId = command.getId();
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandDetailAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandDetailAdapter.java
index 804e183..bf7b68a 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandDetailAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandDetailAdapter.java
@@ -47,7 +47,7 @@ public class CommandDetailAdapter extends RecyclerView.Adapter<CommandDetailAdap
         CommandChildModel item = mCommandGroupModel.getCommands().get(position);
 
         viewHolder.command.setText(item.getCommand());
-        viewHolder.command.setCommands(CommandChildModel.getMans(item));
+        viewHolder.command.setCommands(CommandChildModel.Companion.getMans(item));
         viewHolder.share.setOnClickListener(v -> startShareActivity(item));
     }
 
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
index 5758449..37ab842 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
@@ -139,7 +139,7 @@ public class ManExpandableListAdapter extends BaseExpandableListAdapter {
         ArrayList<String> tmp = new ArrayList<>();
         while (m.find()) {
             String extractedCommand = m.group(0).substring(0, m.group(0).length() - 3).trim();
-            Command command = realm.where(Command.class).equalTo(Command.NAME, extractedCommand).findFirst();
+            Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), extractedCommand).findFirst();
             if (command != null) {
                 tmp.add(extractedCommand);
             }
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java
index 6b3b7ce..79e9b9c 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ScriptChildrenAdapter.java
@@ -61,7 +61,7 @@ public class ScriptChildrenAdapter extends RealmRecyclerViewAdapter<CommandGroup
 
             TerminalTextView tv = ((TerminalTextView) v.findViewById(R.id.row_scriptdescription_child_tv_description));
             tv.setText(command.getCommand());
-            tv.setCommands(CommandChildModel.getMans(command));
+            tv.setCommands(CommandChildModel.Companion.getMans(command));
 
             ImageButton btn = (ImageButton) v.findViewById(R.id.row_scriptdescription_child_iv_share);
             btn.setOnClickListener(view -> startShareActivity(view.getContext(), command));
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/SearchAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/SearchAdapter.java
index 504fa86..8a01163 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/SearchAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/SearchAdapter.java
@@ -63,7 +63,7 @@ public class SearchAdapter extends RealmRecyclerViewAdapter<CommandGroupModel, S
 
             TerminalTextView tv = ((TerminalTextView) v.findViewById(R.id.row_scriptdescription_child_tv_description));
             tv.setText(command.getCommand());
-            tv.setCommands(CommandChildModel.getMans(command));
+            tv.setCommands(CommandChildModel.Companion.getMans(command));
 
             ImageButton btn = (ImageButton) v.findViewById(R.id.row_scriptdescription_child_iv_share);
             btn.setOnClickListener(view -> startShareActivity(view.getContext(), command));
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
index 06d048d..63ded35 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
@@ -117,7 +117,7 @@ public class CommandManFragment extends AppIndexFragment implements OnConvertFro
         mFirebaseAnalytics = FirebaseAnalytics.getInstance(getContext());
 
         Realm realm = Realm.getDefaultInstance();
-        Command command = realm.where(Command.class).equalTo(Command.ID, mId).findFirst();
+        Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), mId).findFirst();
         if(command != null) {
             trackSelectContent(command.getName());
         }
@@ -217,7 +217,7 @@ public class CommandManFragment extends AppIndexFragment implements OnConvertFro
      */
     private ManExpandableListAdapter createAdapter() {
 
-        RealmResults<CommandPage> pages = mRealm.where(CommandPage.class).equalTo(CommandPage.COMMANDID, mId).findAll();
+        RealmResults<CommandPage> pages = mRealm.where(CommandPage.class).equalTo(CommandPage.Companion.getCOMMANDID(), mId).findAll();
 
         ArrayList<String> groups = new ArrayList<>();
         ArrayList<ArrayList<CharSequence>> child = new ArrayList<>();
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
index 7359f30..aef9784 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
@@ -228,7 +228,7 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
         List<RealmResults<Command>> results = new ArrayList<>();
         List<Long> ids = AppManager.getBookmarkIds(getContext());
         for (long id : ids) {
-            results.add(mRealm.where(Command.class).equalTo(Command.ID, id).findAll());
+            results.add(mRealm.where(Command.class).equalTo(Command.Companion.getID(), id).findAll());
         }
         results.add(mRealm.where(Command.class).findAll().sort("name"));
         return results;
@@ -241,10 +241,10 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
      */
     private void search(String query) {
         List<RealmResults<Command>> results = new ArrayList<>();
-        results.add(mRealm.where(Command.class).equalTo(Command.NAME, query).findAll());
-        results.add(mRealm.where(Command.class).beginsWith(Command.NAME, query).notEqualTo(Command.NAME, query).findAll());
-        results.add(mRealm.where(Command.class).contains(Command.NAME, query).not().beginsWith(Command.NAME, query).notEqualTo(Command.NAME, query).findAll());
-        results.add(mRealm.where(Command.class).contains(Command.DESCRIPTION, query).not().contains(Command.NAME, query).findAll());
+        results.add(mRealm.where(Command.class).equalTo(Command.Companion.getNAME(), query).findAll());
+        results.add(mRealm.where(Command.class).beginsWith(Command.Companion.getNAME(), query).notEqualTo(Command.Companion.getNAME(), query).findAll());
+        results.add(mRealm.where(Command.class).contains(Command.Companion.getNAME(), query).not().beginsWith(Command.Companion.getNAME(), query).notEqualTo(Command.Companion.getNAME(), query).findAll());
+        results.add(mRealm.where(Command.class).contains(Command.Companion.getDESCRIPTION(), query).not().contains(Command.Companion.getNAME(), query).findAll());
 
         mAdapter.updateRealmResults(results);
         mAdapter.setSearchQuery(query);
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
index 47002b0..19fbc1c 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
@@ -56,7 +56,7 @@ public class FragmentCoordinator {
 
             Realm realm = Realm.getDefaultInstance();
 
-            Command command = realm.where(Command.class).equalTo(Command.ID, id).findFirst();
+            Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), id).findFirst();
             String name = command.getName().toUpperCase();
             int category = command.getCategory();
 
@@ -68,7 +68,7 @@ public class FragmentCoordinator {
 
     public static void startCommandManActivity(FragmentActivity activity, String name) {
         Realm realm = Realm.getDefaultInstance();
-        Command command = realm.where(Command.class).equalTo(Command.NAME, name).findFirst();
+        Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), name).findFirst();
         if(command == null) {
             realm.close();
             return;
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
index d8a52c4..cd77127 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/models/CommandChildModel.kt
@@ -13,7 +13,7 @@ open class CommandChildModel : RealmObject {
 
     @Required
     var command: String? = null
-    var mans: RealmList<CommandManModel>? = null
+    var mans: RealmList<CommandManModel> = RealmList()
 
     constructor() {
 
@@ -22,20 +22,16 @@ open class CommandChildModel : RealmObject {
     constructor(_command: String, _mans: ArrayList<String>) {
         command = _command
         for (man in _mans) {
-            mans!!.add(CommandManModel(man))
+            mans.add(CommandManModel(man))
         }
     }
 
     companion object {
 
         fun getMans(model: CommandChildModel): Array<String> {
-            if (model.mans == null) {
-                return arrayOf()
-            }
-
-            val data = arrayOfNulls<String>(model.mans!!.size)
-            for (i in 0 until model.mans!!.size) {
-                data[i] = model.mans!![i]!!.man
+            val data = arrayOf<String>()
+            for (i in 0 until model.mans.size) {
+                data[i] = model.mans[i]?.man!!
             }
             return data
         }
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.java
deleted file mode 100644
index f133db8..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.view;
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.support.v7.widget.AppCompatImageView;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
-
-/**
- * Created by simon on 23/01/17.
- */
-public class AdView extends AppCompatImageView {
-
-    public AdView(Context context) {
-        super(context);
-        init();
-    }
-
-    public AdView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        init();
-    }
-
-    public AdView(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-        init();
-    }
-
-    private void init() {
-        // Hide ads if remote is already installed
-        if (AppManager.getHideAdvertising(getContext()) || Utils.isAppInstalled(getContext(), Utils.PACKAGE_LINUXREMOTE) || Utils.isAppInstalled(getContext(), Utils.PACKAGE_LINUXREMOTE_PRO)) {
-            setVisibility(View.GONE);
-        } else {
-            setOnClickListener(view -> startRemoteControl());
-        }
-    }
-
-    private void startRemoteControl() {
-        final String appPackageName = Utils.PACKAGE_LINUXREMOTE;
-        try {
-            getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
-        } catch (android.content.ActivityNotFoundException anfe) {
-            getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
-        }
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt
new file mode 100644
index 0000000..47c52a3
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt
@@ -0,0 +1,48 @@
+package com.inspiredandroid.linuxcommandbibliotheca.view
+
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.support.v7.widget.AppCompatImageView
+import android.util.AttributeSet
+import android.view.View
+
+import com.inspiredandroid.linuxcommandbibliotheca.misc.AppManager
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils
+
+/**
+ * Created by simon on 23/01/17.
+ */
+class AdView : AppCompatImageView {
+
+    constructor(context: Context) : super(context) {
+        init()
+    }
+
+    constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {
+        init()
+    }
+
+    constructor(context: Context, attrs: AttributeSet, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {
+        init()
+    }
+
+    private fun init() {
+        // Hide ads if remote is already installed
+        if (AppManager.getHideAdvertising(context) || Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE) || Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE_PRO)) {
+            visibility = View.GONE
+        } else {
+            setOnClickListener { view -> startRemoteControl() }
+        }
+    }
+
+    private fun startRemoteControl() {
+        val appPackageName = Utils.PACKAGE_LINUXREMOTE
+        try {
+            context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=$appPackageName")))
+        } catch (anfe: android.content.ActivityNotFoundException) {
+            context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=$appPackageName")))
+        }
+
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.java
deleted file mode 100644
index 9bac633..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.view;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.support.v7.widget.AppCompatTextView;
-import android.text.SpannableString;
-import android.text.Spanned;
-import android.text.TextPaint;
-import android.text.method.LinkMovementMethod;
-import android.text.style.ClickableSpan;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnLinkClickListener;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This View makes it very easy to highlightQueryInsideText defined commands in an normal textview. Define the
- * words which should be highlighted in an string array and link it in the layout resource.
- */
-public class ClickableTextView extends AppCompatTextView {
-
-    private OnLinkClickListener mOnLinkClickListener;
-
-    public ClickableTextView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-
-        if (isInEditMode()) {
-            return;
-        }
-
-        setMovementMethod(LinkMovementMethod.getInstance());
-        setHighlightColor(Color.TRANSPARENT);
-    }
-
-    /**
-     * Loop through text and ad a clickable at each point the phrase occurs
-     *
-     * @param ss
-     * @param text
-     * @param phrase
-     * @param onLinkClickListener
-     */
-    public static void addClickableSpanToPhrases(SpannableString ss, String text, String phrase, final OnLinkClickListener onLinkClickListener) {
-        // would end in endless loop
-        if (phrase.isEmpty()) {
-            return;
-        }
-
-        int indexStart = 0;
-        while (text.indexOf(phrase, indexStart) != -1) {
-            indexStart = text.indexOf(phrase, indexStart);
-            int indexEnd = indexStart + phrase.length();
-
-            ClickableSpan clickableSpan = new ClickableSpan() {
-                @Override
-                public void onClick(View textView) {
-                    onLinkClickListener.onLinkClick();
-                }
-
-                @Override
-                public void updateDrawState(TextPaint ds) {
-                    super.updateDrawState(ds);
-                    ds.setUnderlineText(false);
-                }
-            };
-
-            if (indexStart == -1 || indexEnd == -1) {
-                break;
-            }
-
-            ss.setSpan(clickableSpan, indexStart, indexEnd, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
-            indexStart++;
-        }
-    }
-
-    /**
-     * Set clickable word
-     *
-     * @param word
-     */
-    public void setClickableWord(String word) {
-        setText(createSpannable(getText().toString(), word));
-    }
-
-    /**
-     * Set OnLinkClickListener
-     *
-     * @param onLinkClickListener
-     */
-    public void setClickInterface(OnLinkClickListener onLinkClickListener) {
-        mOnLinkClickListener = onLinkClickListener;
-    }
-
-    /**
-     * Highlights commands of the text and make them clickable
-     *
-     * @param text spannable content
-     * @param word the word which should get highlighted
-     * @return
-     */
-    private SpannableString createSpannable(String text, final String word) {
-        SpannableString spannableString = new SpannableString(text);
-
-        ClickableTextView.addClickableSpanToPhrases(spannableString, text, word, mOnLinkClickListener);
-
-        return spannableString;
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.kt
new file mode 100644
index 0000000..7c21ee8
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/ClickableTextView.kt
@@ -0,0 +1,110 @@
+package com.inspiredandroid.linuxcommandbibliotheca.view
+
+import android.content.Context
+import android.graphics.Color
+import android.support.v7.widget.AppCompatTextView
+import android.text.SpannableString
+import android.text.Spanned
+import android.text.TextPaint
+import android.text.method.LinkMovementMethod
+import android.text.style.ClickableSpan
+import android.util.AttributeSet
+import android.view.View
+
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnLinkClickListener
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This View makes it very easy to highlightQueryInsideText defined commands in an normal textview. Define the
+ * words which should be highlighted in an string array and link it in the layout resource.
+ */
+class ClickableTextView(context: Context, attrs: AttributeSet) : AppCompatTextView(context, attrs) {
+
+    private var mOnLinkClickListener: OnLinkClickListener? = null
+
+    init {
+
+        if (!isInEditMode) {
+            movementMethod = LinkMovementMethod.getInstance()
+            highlightColor = Color.TRANSPARENT
+        }
+    }
+
+    /**
+     * Set clickable word
+     *
+     * @param word
+     */
+    fun setClickableWord(word: String) {
+        text = createSpannable(text.toString(), word)
+    }
+
+    /**
+     * Set OnLinkClickListener
+     *
+     * @param onLinkClickListener
+     */
+    fun setClickInterface(onLinkClickListener: OnLinkClickListener) {
+        mOnLinkClickListener = onLinkClickListener
+    }
+
+    /**
+     * Highlights commands of the text and make them clickable
+     *
+     * @param text spannable content
+     * @param word the word which should get highlighted
+     * @return
+     */
+    private fun createSpannable(text: String, word: String): SpannableString {
+        val spannableString = SpannableString(text)
+
+        ClickableTextView.addClickableSpanToPhrases(spannableString, text, word, mOnLinkClickListener)
+
+        return spannableString
+    }
+
+    companion object {
+
+        /**
+         * Loop through text and ad a clickable at each point the phrase occurs
+         *
+         * @param ss
+         * @param text
+         * @param phrase
+         * @param onLinkClickListener
+         */
+        fun addClickableSpanToPhrases(ss: SpannableString, text: String, phrase: String, listener: OnLinkClickListener?) {
+            // would end in endless loop
+            if (phrase.isEmpty()) {
+                return
+            }
+
+            var indexStart = 0
+            while (text.indexOf(phrase, indexStart) != -1) {
+                indexStart = text.indexOf(phrase, indexStart)
+                val indexEnd = indexStart + phrase.length
+
+                val clickableSpan = object : ClickableSpan() {
+                    override fun onClick(textView: View) {
+                        listener?.onLinkClick()
+                    }
+
+                    override fun updateDrawState(ds: TextPaint) {
+                        super.updateDrawState(ds)
+                        ds.isUnderlineText = false
+                    }
+                }
+
+                if (indexStart == -1 || indexEnd == -1) {
+                    break
+                }
+
+                ss.setSpan(clickableSpan, indexStart, indexEnd, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
+                indexStart++
+            }
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.java
deleted file mode 100644
index 0e6af99..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.java
+++ /dev/null
@@ -1,163 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.view;
-
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.res.TypedArray;
-import android.graphics.Color;
-import android.graphics.Typeface;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.content.ContextCompat;
-import android.support.v7.widget.AppCompatTextView;
-import android.text.SpannableString;
-import android.text.method.LinkMovementMethod;
-import android.text.style.ForegroundColorSpan;
-import android.text.style.StyleSpan;
-import android.util.AttributeSet;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.TypefaceUtils;
-
-/**
- * Created by Simon Schubert
- * <p/>
- * This View makes it very easy to highlightQueryInsideText defined mCommands in an normal textview. Define the
- * mCommands which should be highlighted in an string array and link it in the layout resource as
- * "command".
- */
-public class TerminalTextView extends AppCompatTextView {
-
-    private String[] mCommands;
-    private int[] mOutputRows;
-
-    public TerminalTextView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-
-        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.TerminalTextView);
-        int resID = ta.getResourceId(R.styleable.TerminalTextView_commands, R.array.default_codetextview_commands);
-        int outputRowsResID = ta.getResourceId(R.styleable.TerminalTextView_outputRows, R.array.default_codetextview_commands);
-        mCommands = context.getResources().getStringArray(resID);
-        mOutputRows = context.getResources().getIntArray(outputRowsResID);
-        boolean mIgnoreTerminalStyle = ta.getBoolean(R.styleable.TerminalTextView_ignoreTerminalStyle, false);
-        ta.recycle();
-
-        if (isInEditMode()) {
-            return;
-        }
-
-        updateLinks();
-        setMovementMethod(LinkMovementMethod.getInstance());
-        setHighlightColor(Color.TRANSPARENT);
-
-        if (!mIgnoreTerminalStyle) {
-            Typeface typeface = TypefaceUtils.getTypeFace(getContext());
-            setTypeface(typeface);
-        }
-    }
-
-    /**
-     * Set clickable man pages(mCommands)
-     *
-     * @param commands
-     */
-    public void setCommands(String[] commands) {
-        mCommands = commands;
-        updateLinks();
-    }
-
-    /**
-     * Mark man pages(mCommands) clickable
-     */
-    private void updateLinks() {
-        setText(createSpannable(getText().toString(), mCommands));
-    }
-
-    /**
-     * Highlights Commands of the text and make them clickable
-     *
-     * @param text     spannable content
-     * @param commands list of mCommands to highlightQueryInsideText
-     * @return
-     */
-    private SpannableString createSpannable(String text, String[] commands) {
-        SpannableString ss = new SpannableString(text);
-
-        for (final String command : commands) {
-            ClickableTextView.addClickableSpanToPhrases(ss, text, command, () ->
-                    FragmentCoordinator.startCommandManActivity(getActivity(), command));
-        }
-
-
-        addItalicSpans(ss, text);
-        addOutputSpans(ss, text);
-
-        return ss;
-    }
-
-    private FragmentActivity getActivity() {
-        Context context = getContext();
-        while (context instanceof ContextWrapper) {
-            if (context instanceof FragmentActivity) {
-                return (FragmentActivity)context;
-            }
-            context = ((ContextWrapper)context).getBaseContext();
-        }
-        return null;
-    }
-
-    /**
-     * @param ss
-     * @param text
-     */
-    private void addOutputSpans(SpannableString ss, String text) {
-        if (mOutputRows.length == 0) {
-            return;
-        }
-
-        String lines[] = text.split("\\r?\\n");
-        int start = 0;
-        int end = 0;
-
-        for (int i = 0; i < lines.length; i++) {
-            end += lines[i].length();
-            if (doesArrayContainsInt(mOutputRows, i)) {
-                ss.setSpan(new ForegroundColorSpan(ContextCompat.getColor(getContext(), R.color.grey)), start, end, 0);
-            }
-            end += 1;
-            start = end;
-        }
-    }
-
-    /**
-     * @param array
-     * @param value
-     * @return
-     */
-    private boolean doesArrayContainsInt(int[] array, int value) {
-        for (int anArray : array) {
-            if (anArray == value) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Make placeholder text italic
-     *
-     * @param ss
-     * @param text
-     */
-    private void addItalicSpans(SpannableString ss, String text) {
-        int indexStart = 0;
-        while (text.indexOf("[", indexStart) != -1) {
-            int start = text.indexOf("[", indexStart);
-            int end = text.indexOf("]", indexStart);
-            if (start == -1 || end == -1 || start >= end) {
-                break;
-            }
-            ss.setSpan(new StyleSpan(Typeface.ITALIC), start, end + 1, 0);
-            indexStart = end + 1;
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.kt
new file mode 100644
index 0000000..89eec6b
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/TerminalTextView.kt
@@ -0,0 +1,164 @@
+package com.inspiredandroid.linuxcommandbibliotheca.view
+
+import android.content.Context
+import android.content.ContextWrapper
+import android.graphics.Color
+import android.graphics.Typeface
+import android.support.v4.app.FragmentActivity
+import android.support.v4.content.ContextCompat
+import android.support.v7.widget.AppCompatTextView
+import android.text.SpannableString
+import android.text.method.LinkMovementMethod
+import android.text.style.ForegroundColorSpan
+import android.text.style.StyleSpan
+import android.util.AttributeSet
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.OnLinkClickListener
+import com.inspiredandroid.linuxcommandbibliotheca.misc.FragmentCoordinator
+import com.inspiredandroid.linuxcommandbibliotheca.misc.TypefaceUtils
+
+/**
+ * Created by Simon Schubert
+ *
+ *
+ * This View makes it very easy to highlightQueryInsideText defined mCommands in an normal textview. Define the
+ * mCommands which should be highlighted in an string array and link it in the layout resource as
+ * "command".
+ */
+class TerminalTextView(context: Context, attrs: AttributeSet) : AppCompatTextView(context, attrs) {
+
+    private var mCommands: Array<String>? = null
+    private val mOutputRows: IntArray
+
+    private val activity: FragmentActivity?
+        get() {
+            var context = context
+            while (context is ContextWrapper) {
+                if (context is FragmentActivity) {
+                    return context
+                }
+                context = context.baseContext
+            }
+            return null
+        }
+
+    init {
+
+        val ta = context.obtainStyledAttributes(attrs, R.styleable.TerminalTextView)
+        val resID = ta.getResourceId(R.styleable.TerminalTextView_commands, R.array.default_codetextview_commands)
+        val outputRowsResID = ta.getResourceId(R.styleable.TerminalTextView_outputRows, R.array.default_codetextview_commands)
+        mCommands = context.resources.getStringArray(resID)
+        mOutputRows = context.resources.getIntArray(outputRowsResID)
+        val mIgnoreTerminalStyle = ta.getBoolean(R.styleable.TerminalTextView_ignoreTerminalStyle, false)
+        ta.recycle()
+
+        if (!isInEditMode) {
+            updateLinks()
+            movementMethod = LinkMovementMethod.getInstance()
+            highlightColor = Color.TRANSPARENT
+
+            if (!mIgnoreTerminalStyle) {
+                val typeface = TypefaceUtils.getTypeFace(getContext())
+                setTypeface(typeface)
+            }
+        }
+    }
+
+    /**
+     * Set clickable man pages(mCommands)
+     *
+     * @param commands
+     */
+    fun setCommands(commands: Array<String>) {
+        mCommands = commands
+        updateLinks()
+    }
+
+    /**
+     * Mark man pages(mCommands) clickable
+     */
+    private fun updateLinks() {
+        text = createSpannable(text.toString(), mCommands!!)
+    }
+
+    /**
+     * Highlights Commands of the text and make them clickable
+     *
+     * @param text     spannable content
+     * @param commands list of mCommands to highlightQueryInsideText
+     * @return
+     */
+    private fun createSpannable(text: String, commands: Array<String>): SpannableString {
+        val ss = SpannableString(text)
+
+        for (command in commands) {
+
+            val listener = OnLinkClickListener() {
+                FragmentCoordinator.startCommandManActivity(activity, command)
+            }
+            ClickableTextView.addClickableSpanToPhrases(ss, text, command, listener)
+        }
+
+        addItalicSpans(ss, text)
+        addOutputSpans(ss, text)
+
+        return ss
+    }
+
+    /**
+     * @param ss
+     * @param text
+     */
+    private fun addOutputSpans(ss: SpannableString, text: String) {
+        if (mOutputRows.size == 0) {
+            return
+        }
+
+        val lines = text.split("\\r?\\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+        var start = 0
+        var end = 0
+
+        for (i in lines.indices) {
+            end += lines[i].length
+            if (doesArrayContainsInt(mOutputRows, i)) {
+                ss.setSpan(ForegroundColorSpan(ContextCompat.getColor(context, R.color.grey)), start, end, 0)
+            }
+            end += 1
+            start = end
+        }
+    }
+
+    /**
+     * @param array
+     * @param value
+     * @return
+     */
+    private fun doesArrayContainsInt(array: IntArray, value: Int): Boolean {
+        for (anArray in array) {
+            if (anArray == value) {
+                return true
+            }
+        }
+        return false
+    }
+
+    /**
+     * Make placeholder text italic
+     *
+     * @param ss
+     * @param text
+     */
+    private fun addItalicSpans(ss: SpannableString, text: String) {
+        var indexStart = 0
+        while (text.indexOf("[", indexStart) != -1) {
+            val start = text.indexOf("[", indexStart)
+            val end = text.indexOf("]", indexStart)
+            if (start == -1 || end == -1 || start >= end) {
+                break
+            }
+            ss.setSpan(StyleSpan(Typeface.ITALIC), start, end + 1, 0)
+            indexStart = end + 1
+        }
+    }
+}
\ No newline at end of file
