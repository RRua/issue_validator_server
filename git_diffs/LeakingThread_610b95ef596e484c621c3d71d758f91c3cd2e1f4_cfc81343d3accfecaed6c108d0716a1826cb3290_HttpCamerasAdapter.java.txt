diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
index 0e2739f..955a573 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ActionStatus.java
@@ -22,7 +22,7 @@ public class ActionStatus {
 
 
     @SerializedName("status")
-    private int status;
+    private int status = 0;
 
     public ActionStatus(int status) {
         this.status = status;
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java
new file mode 100644
index 0000000..a308c95
--- /dev/null
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageError.java
@@ -0,0 +1,37 @@
+package com.developerfromjokela.motioneyeclient.classes;
+
+public class CameraImageError {
+    private String errorCode;
+    private String errorCause;
+    private boolean displayRetry = true;
+
+    public CameraImageError(String errorCode, String errorCause, boolean displayRetry) {
+        this.errorCode = errorCode;
+        this.errorCause = errorCause;
+        this.displayRetry = displayRetry;
+    }
+
+    public String getErrorCode() {
+        return errorCode;
+    }
+
+    public void setErrorCode(String errorCode) {
+        this.errorCode = errorCode;
+    }
+
+    public String getErrorCause() {
+        return errorCause;
+    }
+
+    public void setErrorCause(String errorCause) {
+        this.errorCause = errorCause;
+    }
+
+    public boolean isDisplayRetry() {
+        return displayRetry;
+    }
+
+    public void setDisplayRetry(boolean displayRetry) {
+        this.displayRetry = displayRetry;
+    }
+}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java
new file mode 100644
index 0000000..f966612
--- /dev/null
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/CameraImageFrame.java
@@ -0,0 +1,81 @@
+package com.developerfromjokela.motioneyeclient.classes;
+
+import android.graphics.Bitmap;
+
+import java.sql.Time;
+import java.util.ArrayList;
+import java.util.List;
+
+
+/**
+ * This class is for video frame transmitting to the RecyclerView
+ */
+public class CameraImageFrame {
+    private Camera camera;
+    private Device device;
+    private Bitmap bitmap;
+    private boolean initialLoadDone = false;
+    private String frameRateText = "";
+    private CameraImageError error = null;
+    private List<Long> times = new ArrayList<>();
+
+
+    public CameraImageFrame(Camera camera, Device device, Bitmap bitmap, boolean initialLoadDone) {
+        this.camera = camera;
+        this.device = device;
+        this.bitmap = bitmap;
+        this.initialLoadDone = initialLoadDone;
+    }
+
+    public List<Long> getTimes() {
+        return times;
+    }
+
+    public CameraImageError getError() {
+        return error;
+    }
+
+    public void setError(CameraImageError error) {
+        this.error = error;
+    }
+
+    public String getFrameRateText() {
+        return frameRateText;
+    }
+
+    public void setFrameRateText(String frameRateText) {
+        this.frameRateText = frameRateText;
+    }
+
+    public Camera getCamera() {
+        return camera;
+    }
+
+    public void setCamera(Camera camera) {
+        this.camera = camera;
+    }
+
+    public Device getDevice() {
+        return device;
+    }
+
+    public void setDevice(Device device) {
+        this.device = device;
+    }
+
+    public Bitmap getBitmap() {
+        return bitmap;
+    }
+
+    public void setBitmap(Bitmap bitmap) {
+        this.bitmap = bitmap;
+    }
+
+    public boolean isInitialLoadDone() {
+        return initialLoadDone;
+    }
+
+    public void setInitialLoadDone(boolean initialLoadDone) {
+        this.initialLoadDone = initialLoadDone;
+    }
+}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java
new file mode 100644
index 0000000..e5fd5d3
--- /dev/null
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/classes/ErrorResponse.java
@@ -0,0 +1,31 @@
+package com.developerfromjokela.motioneyeclient.classes;
+
+import com.google.gson.annotations.SerializedName;
+
+public class ErrorResponse {
+    @SerializedName("prompt")
+    private boolean prompt;
+    @SerializedName("error")
+    private String error;
+
+    public ErrorResponse(boolean prompt, String error) {
+        this.prompt = prompt;
+        this.error = error;
+    }
+
+    public boolean isPrompt() {
+        return prompt;
+    }
+
+    public void setPrompt(boolean prompt) {
+        this.prompt = prompt;
+    }
+
+    public String getError() {
+        return error;
+    }
+
+    public void setError(String error) {
+        this.error = error;
+    }
+}
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
index d2bf8d5..c15cbe4 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/CameraViewer.java
@@ -18,27 +18,42 @@ package com.developerfromjokela.motioneyeclient.ui.activities;
 
 import android.content.Context;
 import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.GridLayoutManager;
+import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
 import android.util.Log;
+import android.util.Range;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+import android.widget.TextView;
 
 import com.developerfromjokela.motioneyeclient.R;
 import com.developerfromjokela.motioneyeclient.api.ApiInterface;
 import com.developerfromjokela.motioneyeclient.api.MotionEyeHelper;
 import com.developerfromjokela.motioneyeclient.api.ServiceGenerator;
 import com.developerfromjokela.motioneyeclient.classes.Camera;
+import com.developerfromjokela.motioneyeclient.classes.CameraImage;
+import com.developerfromjokela.motioneyeclient.classes.CameraImageError;
+import com.developerfromjokela.motioneyeclient.classes.CameraImageFrame;
 import com.developerfromjokela.motioneyeclient.classes.Cameras;
 import com.developerfromjokela.motioneyeclient.classes.Device;
+import com.developerfromjokela.motioneyeclient.classes.ErrorResponse;
 import com.developerfromjokela.motioneyeclient.database.Source;
 import com.developerfromjokela.motioneyeclient.other.Utils;
 import com.developerfromjokela.motioneyeclient.ui.adapters.HttpCamerasAdapter;
@@ -49,12 +64,22 @@ import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.lang.annotation.Annotation;
+import java.net.URL;
+import java.net.URLConnection;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.List;
+import java.util.Map;
 
 import okhttp3.ResponseBody;
 import retrofit2.Call;
 import retrofit2.Callback;
+import retrofit2.Converter;
 import retrofit2.Response;
+import retrofit2.Retrofit;
 
 import static android.app.DownloadManager.Request.NETWORK_MOBILE;
 
@@ -64,6 +89,9 @@ public class CameraViewer extends AppCompatActivity {
     private Device device;
     private String ID;
     private Source source;
+    private List<CameraImageFrame> cameraImageFrames = new ArrayList<>();
+    private boolean sleeping = false;
+    private GridLayoutManager manager;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -82,8 +110,6 @@ public class CameraViewer extends AppCompatActivity {
         source = new Source(this);
         if (intent.getExtras() != null) {
             ID = intent.getStringExtra("DeviceId");
-
-
         } else {
             finish();
         }
@@ -93,22 +119,35 @@ public class CameraViewer extends AppCompatActivity {
     @Override
     public void onResume() {
         super.onResume();
+        sleeping = false;
         try {
             device = source.get(ID);
+
             setTitle(device.getDeviceName());
             Log.e(CameraViewer.class.getSimpleName(), new Gson().toJson(device));
             RecyclerView recyclerView = findViewById(R.id.cameras);
-            recyclerView.setLayoutManager(new GridLayoutManager(this, 1));
-            adapter = new HttpCamerasAdapter(this, new HttpCamerasAdapter.CamerasAdapterListener() {
+            manager = new GridLayoutManager(this, 1);
+            recyclerView.setLayoutManager(manager);
+            recyclerView.setItemAnimator(null);
+            for (Camera camera : device.getCameras()) {
+                CameraImageFrame frame = new CameraImageFrame(camera, device, null, false);
+                cameraImageFrames.add(frame);
+            }
+            adapter = new HttpCamerasAdapter(new HttpCamerasAdapter.CamerasAdapterListener() {
                 @Override
-                public void onImageClick(int position, Camera camera) {
+                public void onImageClick(int position, CameraImageFrame camera) {
                     Intent fullscreen = new Intent(CameraViewer.this, FullCameraViewer.class);
                     fullscreen.putExtra("DeviceId", ID);
-                    fullscreen.putExtra("Camera", new Gson().toJson(camera));
+                    fullscreen.putExtra("Camera", new Gson().toJson(camera.getCamera()));
                     startActivity(fullscreen);
                 }
 
-            }, device);
+                @Override
+                public void onRefreshRequest(int position, CameraImageFrame cameraImageFrame) {
+                    getRunnableForCamera(position).run();
+                }
+
+            }, cameraImageFrames);
             recyclerView.setAdapter(adapter);
             adapter.notifyDataSetChanged();
             String baseurl;
@@ -144,58 +183,86 @@ public class CameraViewer extends AppCompatActivity {
                 public void onResponse(Call<Cameras> call, Response<Cameras> response) {
                     Cameras cameras = response.body();
                     if (response.isSuccessful()) {
-                    device.setCameras(cameras.getCameras());
-                    apiInterface.getMotionDetails(baseurl + "/version").enqueue(new Callback<ResponseBody>() {
-                        @Override
-                        public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
-                            if (response.headers().get("Server").toLowerCase().contains("motioneye")) {
-                                try {
-                                    final String stringResponse = response.body().string();
-                                    Document html = Jsoup.parse(stringResponse);
-                                    Elements elements = html.select("body");
-                                    String[] lines = elements.html().replace("\"", "").replace("\n", "").split("<br>");
-                                    for (String string : lines) {
-                                        String[] paramParts = string.split("=");
-                                        String paramName = paramParts[0].trim();
-                                        String paramValue = paramParts[1];
-                                        if (paramName.contains("hostname"))
-                                            device.setDeviceName(paramValue);
-                                        else if (paramName.contains("motion_version"))
-                                            device.setMotionVersion(paramValue);
-                                        else if (paramName.contains("os_version"))
-                                            device.setOsVersion(paramValue);
-                                        else if (paramName.equals("version"))
-                                            device.setMotioneyeVersion(paramValue);
-
+                        device.setCameras(cameras.getCameras());
+                        apiInterface.getMotionDetails(baseurl + "/version").enqueue(new Callback<ResponseBody>() {
+                            @Override
+                            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
+                                if (response.headers().get("Server").toLowerCase().contains("motioneye")) {
+                                    try {
+                                        final String stringResponse = response.body().string();
+                                        Document html = Jsoup.parse(stringResponse);
+                                        Elements elements = html.select("body");
+                                        String[] lines = elements.html().replace("\"", "").replace("\n", "").split("<br>");
+                                        for (String string : lines) {
+                                            String[] paramParts = string.split("=");
+                                            String paramName = paramParts[0].trim();
+                                            String paramValue = paramParts[1];
+                                            if (paramName.contains("hostname"))
+                                                device.setDeviceName(paramValue);
+                                            else if (paramName.contains("motion_version"))
+                                                device.setMotionVersion(paramValue);
+                                            else if (paramName.contains("os_version"))
+                                                device.setOsVersion(paramValue);
+                                            else if (paramName.equals("version"))
+                                                device.setMotioneyeVersion(paramValue);
+
+                                        }
+
+                                        cameraImageFrames.clear();
+
+                                        for (Camera camera : device.getCameras()) {
+                                            CameraImageFrame frame = new CameraImageFrame(camera, device, null, false);
+                                            cameraImageFrames.add(frame);
+                                            getRunnableForCamera(cameraImageFrames.size() - 1).run();
+                                        }
+
+                                        adapter.notifyDataSetChanged();
+                                        setTitle(device.getDeviceName());
+
+                                        source.editEntry(device);
+
+
+                                    } catch (IOException e) {
+                                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
+                                            cameraImageFrame.setError(new CameraImageError("motioneye_error5", e.getMessage(), true));
+                                        }
+                                        adapter.notifyDataSetChanged();
+                                    } catch (Exception e) {
+                                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
+                                            cameraImageFrame.setError(new CameraImageError("motioneye_error6", e.getMessage(), true));
+                                        }
+                                        adapter.notifyDataSetChanged();
                                     }
-                                    adapter.notifyDataSetChanged();
-                                    setTitle(device.getDeviceName());
-
-                                    source.editEntry(device);
 
 
-                                } catch (IOException e) {
-                                    e.printStackTrace();
-                                } catch (Exception e) {
-                                    e.printStackTrace();
                                 }
-
-
                             }
-                        }
 
 
-                        @Override
-                        public void onFailure(Call<ResponseBody> call, Throwable t) {
+                            @Override
+                            public void onFailure(Call<ResponseBody> call, Throwable t) {
+                                for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
+                                    cameraImageFrame.setError(new CameraImageError("motioneye_error2", t.getMessage(), true));
+                                }
+                                adapter.notifyDataSetChanged();
+                            }
+                        });
+                    } else {
 
+                        ErrorResponse message = new Gson().fromJson(response.errorBody().charStream(), ErrorResponse.class);
+                        for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
+                            cameraImageFrame.setError(new CameraImageError("motioneye_error4", message.getError(), true));
                         }
-                    });
+                        adapter.notifyDataSetChanged();
                     }
                 }
 
                 @Override
                 public void onFailure(Call<Cameras> call, Throwable t) {
-
+                    for (CameraImageFrame cameraImageFrame : cameraImageFrames) {
+                        cameraImageFrame.setError(new CameraImageError("motioneye_error3", t.getMessage(), true));
+                    }
+                    adapter.notifyDataSetChanged();
                 }
             });
 
@@ -203,23 +270,20 @@ public class CameraViewer extends AppCompatActivity {
         } catch (Exception e) {
             e.printStackTrace();
         }
-        if (adapter != null)
-            adapter.onResume();
+
 
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        if (adapter != null)
-            adapter.onPause();
+        sleeping = true;
     }
 
     @Override
     public void onDestroy() {
         super.onDestroy();
-        if (adapter != null)
-            adapter.onDestroy();
+        sleeping = true;
     }
 
     @Override
@@ -241,6 +305,144 @@ public class CameraViewer extends AppCompatActivity {
         }
     }
 
+    private Runnable getRunnableForCamera(int position) {
+        return new Runnable() {
+            @Override
+            public void run() {
+                MotionEyeHelper helper = new MotionEyeHelper();
+                helper.setUsername(device.getUser().getUsername());
+                try {
+                    helper.setPasswordHash(device.getUser().getPassword());
+                } catch (NoSuchAlgorithmException e) {
+                    e.printStackTrace();
+                }
+
+
+                CameraImageFrame frame = cameraImageFrames.get(position);
+                String cameraId = frame.getCamera().getId();
+                String serverurl;
+                if (device.getDdnsURL().length() > 5) {
+                    if ((Utils.getNetworkType(CameraViewer.this)) == NETWORK_MOBILE) {
+                        serverurl = device.getDDNSUrlCombo();
+                    } else if (device.getWlan().networkId == Utils.getCurrentWifiNetworkId(CameraViewer.this)) {
+                        serverurl = device.getDeviceUrlCombo();
+
+                    } else {
+                        serverurl = device.getDDNSUrlCombo();
+
+                    }
+                } else {
+                    serverurl = device.getDeviceUrlCombo();
+
+                }
+                String baseurl;
+                if (!serverurl.contains("://"))
+                    baseurl = removeSlash("http://" + serverurl);
+                else
+                    baseurl = removeSlash(serverurl);
+
+                String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
+                url = helper.addAuthParams("GET", url, "");
+                String finalUrl = url;
+                boolean visible = position >= manager.findFirstVisibleItemPosition() && position <= manager.findLastVisibleItemPosition();
+                if (!sleeping) {
+                    if (visible)
+                        new DownloadImageFromInternet(position, frame, this).execute(finalUrl);
+                    if (!visible)
+                        new Handler().postDelayed(this, Utils.imageRefreshInterval); //Start timer after 1 sec
+                }
+
+            }
+        };
+    }
+
+
+    private class DownloadImageFromInternet extends AsyncTask<String, Void, CameraImage> {
+        Runnable timerRunnable;
+        CameraImageFrame camera;
+        int position;
+        Handler timeHandler;
+
+        public DownloadImageFromInternet(int position, CameraImageFrame camera, Runnable timerRunnable) {
+            this.camera = camera;
+            this.timerRunnable = timerRunnable;
+            this.position = position;
+            timeHandler = new Handler();
+        }
+
+        protected void onPreExecute() {
+        }
+
+        protected CameraImage doInBackground(String... urls) {
+
+            String imageURL = urls[0];
+
+
+            try {
+                URL url = new URL(imageURL);
+                URLConnection connection = url.openConnection();
+                Map<String, List<String>> fps = connection.getHeaderFields();
+                InputStream in = url.openStream();
+                final Bitmap decoded = BitmapFactory.decodeStream(in);
+                in.close();
+                for (Map.Entry<String, List<String>> key : fps.entrySet()) {
+                    for (String string : key.getValue()) {
+                        if (string.contains("capture_fps")) {
+                            double d = Double.parseDouble(string.split("capture_fps_" + camera.getCamera().getId() + "=")[1].split(";")[0].trim());
+                            String humanReadableFPS = String.valueOf(Math.round((int) d));
+                            return new CameraImage(humanReadableFPS, decoded, true);
+
+                        }
+
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+                return new CameraImage(false, e.getMessage());
+            }
+            return null;
+
+        }
+
+        protected void onPostExecute(CameraImage result) {
+
+            camera.setError(null);
+            if (result.isSuccessful()) {
+                if (!camera.isInitialLoadDone()) {
+                    camera.setInitialLoadDone(true);
+                }
+                camera.setBitmap(result.getBitmap());
+                List<Long> time = camera.getTimes();
+
+                if (time.size() == Utils.fpsLen) {
+
+                    long streamingFps = time.size() * 1000 / (time.get(time.size() - 1) - time.get(0));
+                    int fpsDeliv = Math.round(streamingFps);
+                    camera.setFrameRateText((fpsDeliv + "/" + result.getFps() + " fps"));
+
+                }
+
+                long timeNow = new Date().getTime();
+                time.add(timeNow);
+                if (time.size() > Utils.fpsLen) {
+                    time.remove(0);
+                }
+
+                if (!isFinishing()) {
+                    timeHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
+                }
+
+            } else {
+                camera.setInitialLoadDone(false);
+                camera.setError(new CameraImageError("motioneye_err1", result.getErrorString(), true));
+            }
+
+            adapter.notifyItemChanged(position);
+
+        }
+    }
+
+
 
 
     private static String removeSlash(String url) {
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/DeviceSettings.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/DeviceSettings.java
index 651e60e..33b5a35 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/DeviceSettings.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/DeviceSettings.java
@@ -63,6 +63,8 @@ import org.jsoup.nodes.Document;
 import org.jsoup.select.Elements;
 
 import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.security.NoSuchAlgorithmException;
 import java.util.Date;
 
@@ -515,38 +517,45 @@ public class DeviceSettings extends AppCompatActivity {
                                     @Override
                                     public void afterTextChanged(Editable s) {
                                         String url = s.toString();
-                                        if (Utils.validIP(url)) {
 
+                                        if (!url.isEmpty()) {
 
                                             if (checkForDuplicate(device.getDeviceUrl(), url)) {
                                                 b.setEnabled(false);
-                                            }
-                                            else
+                                            } else
                                                 b.setEnabled(true);
 
-                                        } else {
-
-                                            b.setEnabled(false);
-                                        }
-                                        if (url.contains(":")) {
-                                            final String[] portparts = url.split(":");
-                                            editText.setText(portparts[0]);
-                                            editText.setSelection(url.length());
-
-                                            if (Utils.validIP(portparts[0])) {
 
-                                                if (checkForDuplicate(device.getDeviceUrl(), url)) {
+                                            if (url.split("://").length >= 2) {
+                                                String nUrl = url.split("://")[1];
+                                                if (nUrl.contains(":")) {
+                                                    Log.e("DS", "PORT D");
                                                     b.setEnabled(false);
-                                                }
-                                                else
+                                                    return;
+                                                } else
                                                     b.setEnabled(true);
-
                                             } else {
-
-                                                b.setEnabled(false);
+                                                if (url.contains(":")) {
+                                                    Log.e("DS", "PORT D");
+                                                    b.setEnabled(false);
+                                                    return;
+                                                } else
+                                                    b.setEnabled(true);
                                             }
 
+                                            if (!URLUtil.isValidUrl(url)) {
+                                                url = "http://" + url;
+                                                b.setEnabled(URLUtil.isValidUrl(url));
+                                            } else
+                                                b.setEnabled(true);
+
+
+                                        } else {
+                                            b.setEnabled(false);
+
                                         }
+
+
                                     }
                                 });
                                 b.setOnClickListener(new View.OnClickListener() {
@@ -615,8 +624,6 @@ public class DeviceSettings extends AppCompatActivity {
                                     public void afterTextChanged(Editable s) {
                                         String url = editText.getText().toString();
                                         if (!url.isEmpty()) {
-                                            if (Utils.isValidURL(url)) {
-
 
                                                 if (checkForDuplicate(device.getDdnsURL(), url)) {
                                                     b.setEnabled(false);
@@ -624,35 +631,34 @@ public class DeviceSettings extends AppCompatActivity {
                                                 else
                                                     b.setEnabled(true);
 
-                                            } else {
-
-                                                b.setEnabled(false);
-                                            }
-
-                                            if (url.contains(":")) {
-                                                final String[] portparts = url.split(":");
-                                                editText.setText(portparts[0]);
-                                                editText.setSelection(url.length());
-
-                                                if (Utils.isValidURL(portparts[0])) {
-
-                                                    if (checkForDuplicate(device.getDdnsURL(), url)) {
-                                                        b.setEnabled(false);
-                                                    }
-                                                    else
-                                                        b.setEnabled(true);
-
-                                                } else {
+                                            if (!URLUtil.isValidUrl(url)) {
+                                                url = "http://" + url;
+                                                b.setEnabled(URLUtil.isValidUrl(url));
+                                            } else
+                                                b.setEnabled(true);
 
+                                            if (url.contains("://") && url.split("://").length >= 2) {
+                                                String nUrl = url.split("://")[1];
+                                                if (nUrl.contains(":")) {
+                                                    Log.e("DS", "PORT D2");
                                                     b.setEnabled(false);
-                                                }
+                                                } else
+                                                    b.setEnabled(true);
+                                            } else {
+                                                if (url.contains(":")) {
+                                                    Log.e("DS", "PORT D");
+                                                    b.setEnabled(false);
+                                                } else
+                                                    b.setEnabled(true);
 
                                             }
+
                                         } else {
                                             b.setEnabled(true);
 
                                         }
 
+
                                     }
                                 });
                                 b.setOnClickListener(new View.OnClickListener() {
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
index f606cde..6f84b75 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/activities/FullCameraViewer.java
@@ -91,8 +91,15 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     private String baseurl;
     private Device device;
     private Camera camera;
-
-
+    private ImageView cameraImage;
+    private LinearLayout loadingBar;
+    private RelativeLayout cameraFrame;
+    private LinearLayout bottomBar;
+    private LinearLayout topBar;
+    private TextView fps;
+    private ProgressBar loadingCircle;
+    private List<Long> time;
+    private String finalUrl;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -103,13 +110,13 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
         getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                 WindowManager.LayoutParams.FLAG_FULLSCREEN);
         setContentView(R.layout.activity_full_camera_viewer);
-        ImageView cameraImage = findViewById(R.id.cameraFullImage);
-        LinearLayout loadingBar = findViewById(R.id.progressBar);
-        RelativeLayout cameraFrame = findViewById(R.id.cameraFrame);
-        LinearLayout bottomBar = findViewById(R.id.bottomBar);
-        LinearLayout topBar = findViewById(R.id.topBar);
-        TextView fps = findViewById(R.id.cameraFPS);
-        ProgressBar loadingCircle = findViewById(R.id.progressBar2);
+        cameraImage = findViewById(R.id.cameraFullImage);
+        loadingBar = findViewById(R.id.progressBar);
+        cameraFrame = findViewById(R.id.cameraFrame);
+        bottomBar = findViewById(R.id.bottomBar);
+        topBar = findViewById(R.id.topBar);
+        fps = findViewById(R.id.cameraFPS);
+        loadingCircle = findViewById(R.id.progressBar2);
         TextView cameraName = findViewById(R.id.cameraName);
         RecyclerView actions = findViewById(R.id.actions);
         LinearLayout joystick = findViewById(R.id.dircontrols);
@@ -205,7 +212,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                         }
                     }
                 });
-                List<Long> time = new ArrayList<>();
+                time = new ArrayList<>();
 
                 Device finalDevice = device;
                 timerRunnable = new Runnable() {
@@ -244,7 +251,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                 };
                 String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
                 url = helper.addAuthParams("GET", url, "");
-                String finalUrl = url;
+                finalUrl = url;
                 new DownloadImageFromInternet(cameraImage, loadingBar, fps, status, loadingCircle, camera, time, cameraFrame).execute(finalUrl);
 
 
@@ -263,8 +270,9 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     }
 
     @Override
-    public void onActionClicked(int position, String action, View button) {
+    public void onActionClicked(String action, View button) {
 
+        Log.e("FCV", "Action clicked");
         try {
             String url = baseurl + "/action/" + camera.getId() + "/" + action + "/?_=" + new Date().getTime();
             MotionEyeHelper helper = new MotionEyeHelper();
@@ -276,6 +284,9 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
             apiInterface.peformAction(url).enqueue(new Callback<ActionStatus>() {
                 @Override
                 public void onResponse(Call<ActionStatus> call, Response<ActionStatus> response) {
+                    if (response.body() != null && response.body().getStatus() != 0)
+                        Toast.makeText(FullCameraViewer.this, getString(R.string.task_failed, String.valueOf(response.body().getStatus())), Toast.LENGTH_SHORT).show();
+
                     button.setEnabled(true);
 
                 }
@@ -283,8 +294,7 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
                 @Override
                 public void onFailure(Call<ActionStatus> call, Throwable t) {
                     button.setEnabled(true);
-
-                    Toast.makeText(FullCameraViewer.this, t.getMessage(), Toast.LENGTH_SHORT).show();
+                    Toast.makeText(FullCameraViewer.this, t.getMessage(), Toast.LENGTH_LONG).show();
                 }
             });
         } catch (NoSuchAlgorithmException e) {
@@ -466,6 +476,8 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
     public void onResume() {
         super.onResume();
         attached = true;
+        new DownloadImageFromInternet(cameraImage, loadingBar, fps, status, loadingCircle, camera, time, cameraFrame).execute(finalUrl);
+
     }
 
     @Override
@@ -524,19 +536,19 @@ public class FullCameraViewer extends Activity implements ActionsAdapter.Actions
             if (actionString.contains("up")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 up.setVisibility(View.VISIBLE);
-                up.setOnClickListener(v -> listener.onActionClicked(-1, "up", up));
+                up.setOnClickListener(v -> listener.onActionClicked("up", up));
             } else if (actionString.contains("right")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 right.setVisibility(View.VISIBLE);
-                right.setOnClickListener(v -> listener.onActionClicked(-1, "right", right));
+                right.setOnClickListener(v -> listener.onActionClicked("right", right));
             } else if (actionString.contains("down")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 down.setVisibility(View.VISIBLE);
-                down.setOnClickListener(v -> listener.onActionClicked(-1, "down", down));
+                down.setOnClickListener(v -> listener.onActionClicked("down", down));
             } else if (actionString.contains("left")) {
                 dircontrols.setVisibility(View.VISIBLE);
                 left.setVisibility(View.VISIBLE);
-                left.setOnClickListener(v -> listener.onActionClicked(-1, "left", left));
+                left.setOnClickListener(v -> listener.onActionClicked("left", left));
             }
         }
         if (left.getVisibility() == View.GONE && right.getVisibility() == View.GONE)
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
index 52c5dad..ba9f79d 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/ActionsAdapter.java
@@ -20,6 +20,7 @@ import android.content.Context;
 import android.support.v7.widget.AppCompatImageView;
 import android.support.v7.widget.CardView;
 import android.support.v7.widget.RecyclerView;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -129,14 +130,16 @@ public class ActionsAdapter extends RecyclerView.Adapter<ActionsAdapter.ActionsV
         holder.action.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                listener.onActionClicked(position, actionString, v);
+                Log.e("AA", "Action clicked");
+                listener.onActionClicked(actionString, v);
             }
         });
+
     }
 
     public interface ActionsAdapterListener {
 
-        void onActionClicked(int position, String action, View button);
+        void onActionClicked(String action, View button);
     }
 
     @Override
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
index dddd786..8de2c6b 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/adapters/HttpCamerasAdapter.java
@@ -21,8 +21,10 @@ import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.AsyncTask;
 import android.os.Handler;
+import android.support.annotation.NonNull;
 import android.support.v7.widget.CardView;
 import android.support.v7.widget.RecyclerView;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -36,6 +38,7 @@ import com.developerfromjokela.motioneyeclient.R;
 import com.developerfromjokela.motioneyeclient.api.MotionEyeHelper;
 import com.developerfromjokela.motioneyeclient.classes.Camera;
 import com.developerfromjokela.motioneyeclient.classes.CameraImage;
+import com.developerfromjokela.motioneyeclient.classes.CameraImageFrame;
 import com.developerfromjokela.motioneyeclient.classes.Device;
 import com.developerfromjokela.motioneyeclient.other.Utils;
 
@@ -47,17 +50,15 @@ import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 
 import static android.app.DownloadManager.Request.NETWORK_MOBILE;
 
 public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.CamerasViewHolder> {
 
-    private Context mContext;
     private CamerasAdapterListener listener;
-    private Device device;
+    private List<CameraImageFrame> cameraImageFrames;
 
-    private boolean attached = true;
-    private Handler timerHandler = new Handler();
 
 
     public class CamerasViewHolder extends RecyclerView.ViewHolder {
@@ -68,9 +69,11 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
         ProgressBar progressBar;
         Button tryagain;
         CardView itemCard;
+        boolean attached;
 
         CamerasViewHolder(View itemView) {
             super(itemView);
+
             cameraImage = itemView.findViewById(R.id.cameraImage);
             loadingBar = itemView.findViewById(R.id.cameraBar);
             itemCard = itemView.findViewById(R.id.itemCard);
@@ -78,15 +81,25 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
             status = itemView.findViewById(R.id.status);
             progressBar = itemView.findViewById(R.id.progressar);
             tryagain = itemView.findViewById(R.id.tryagain);
+            attached = false;
         }
+
+
     }
 
-    public HttpCamerasAdapter(Context mContext, CamerasAdapterListener listener, Device device) {
-        this.mContext = mContext;
+    public HttpCamerasAdapter(CamerasAdapterListener listener, List<CameraImageFrame> cameraImageFrames) {
         this.listener = listener;
+        this.cameraImageFrames = cameraImageFrames;
+    }
 
-        this.device = device;
+    @Override
+    public void onViewDetachedFromWindow(@NonNull CamerasViewHolder holder) {
+        holder.attached = false;
+    }
 
+    @Override
+    public void onViewAttachedToWindow(@NonNull CamerasViewHolder holder) {
+        holder.attached = true;
     }
 
     @Override
@@ -96,231 +109,64 @@ public class HttpCamerasAdapter extends RecyclerView.Adapter<HttpCamerasAdapter.
     }
 
     @Override
-    public void onBindViewHolder(final HttpCamerasAdapter.CamerasViewHolder holder, final int position) {
-        boolean loaded = false;
-        final Camera camera = device.getCameras().get(position);
-        holder.cameraImage.setId(Integer.valueOf(camera.getId()));
-        holder.loadingBar.setId(Integer.valueOf(camera.getId()) + 4495);
-
-        int framerate = Integer.valueOf(camera.getFramerate());
-        List<Long> time = new ArrayList<>();
-        Runnable timerRunnable = new Runnable() {
-            @Override
-            public void run() {
-                // Here you can update your adapter data
-                MotionEyeHelper helper = new MotionEyeHelper();
-                helper.setUsername(device.getUser().getUsername());
-                try {
-                    helper.setPasswordHash(device.getUser().getPassword());
-                } catch (NoSuchAlgorithmException e) {
-                    e.printStackTrace();
-                }
-
-                String cameraId = camera.getId();
-                String serverurl;
-                if (device.getDdnsURL().length() > 5) {
-                    if ((Utils.getNetworkType(mContext)) == NETWORK_MOBILE) {
-                        serverurl = device.getDDNSUrlCombo();
-                    } else if (device.getWlan().networkId == Utils.getCurrentWifiNetworkId(mContext)) {
-                        serverurl = device.getDeviceUrlCombo();
-
-                    } else {
-                        serverurl = device.getDDNSUrlCombo();
-
-                    }
-                } else {
-                    serverurl = device.getDeviceUrlCombo();
-
-                }
-                String baseurl;
-                if (!serverurl.contains("://"))
-                    baseurl = removeSlash("http://" + serverurl);
-                else
-                    baseurl = removeSlash(serverurl);
-
-                String url = baseurl + "/picture/" + cameraId + "/current?_=" + new Date().getTime();
-                url = helper.addAuthParams("GET", url, "");
-                String finalUrl = url;
-
-                new DownloadImageFromInternet(holder, camera, this, time, loaded).execute(finalUrl);
-
-
+    public void onBindViewHolder(final HttpCamerasAdapter.CamerasViewHolder holder, int position) {
+        final CameraImageFrame camera = cameraImageFrames.get(position);
+
+        if (camera.getError() != null) {
+            holder.cameraImage.setVisibility(View.GONE);
+            holder.fps.setVisibility(View.GONE);
+            holder.loadingBar.setVisibility(View.VISIBLE);
+            holder.progressBar.setVisibility(View.GONE);
+            holder.tryagain.setVisibility(camera.getError().isDisplayRetry() ? View.VISIBLE : View.GONE);
+            holder.status.setText(camera.getError().getErrorCause());
+
+
+        } else {
+            if (camera.getBitmap() != null && camera.isInitialLoadDone()) {
+                holder.loadingBar.setVisibility(View.GONE);
+                holder.cameraImage.setVisibility(View.VISIBLE);
+                holder.fps.setVisibility(View.VISIBLE);
+                holder.cameraImage.setImageBitmap(camera.getBitmap());
+                holder.fps.setText(camera.getFrameRateText());
+            } else {
+                holder.cameraImage.setVisibility(View.GONE);
+                holder.fps.setVisibility(View.GONE);
+                holder.loadingBar.setVisibility(View.VISIBLE);
+                holder.progressBar.setVisibility(View.VISIBLE);
+                holder.status.setText(R.string.loading);
             }
-        };
+        }
+
 
         holder.tryagain.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
-
+                listener.onRefreshRequest(position, camera);
             }
         });
-        timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
 
-        holder.itemCard.setOnClickListener(new View.OnClickListener() {
+        holder.itemView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 listener.onImageClick(position, camera);
             }
         });
-    }
 
-    public interface CamerasAdapterListener {
 
-        void onImageClick(int position, Camera camera);
     }
 
-    @Override
-    public int getItemCount() {
-        return device.getCameras().size();
-    }
-
-    private static String removeSlash(String url) {
-        if (!url.endsWith("/"))
-            return url;
-        String[] parts = url.split("/");
-
-        return parts[0];
-    }
-
-    private class DownloadImageFromInternet extends AsyncTask<String, Void, CameraImage> {
-        ImageView imageView;
-        LinearLayout progressBar;
-        ProgressBar loading;
-        TextView fps, status;
-        Camera camera;
-        boolean loaded;
-        Runnable timerRunnable;
-        Button tryagain;
-        List<Long> time;
-
-        public DownloadImageFromInternet(CamerasViewHolder viewholder, Camera camera, Runnable timerRunnable, List<Long> time, boolean loaded) {
-            this.imageView = viewholder.cameraImage;
-            this.progressBar = viewholder.loadingBar;
-            this.loaded = loaded;
-            this.fps = viewholder.fps;
-            this.loading = viewholder.progressBar;
-            this.status = viewholder.status;
-            this.camera = camera;
-            this.timerRunnable = timerRunnable;
-            this.tryagain = viewholder.tryagain;
-            this.time = time;
-
-        }
-
-        protected void onPreExecute() {
-
-            status.setText(R.string.loading);
-            loading.setVisibility(View.VISIBLE);
-            tryagain.setVisibility(View.GONE);
-        }
-
-        protected CameraImage doInBackground(String... urls) {
-            String imageURL = urls[0];
-
-
-            try {
-                URL url = new URL(imageURL);
-                URLConnection connection = url.openConnection();
-                Map<String, List<String>> fps = connection.getHeaderFields();
-                String humanReadableFPS = "0";
-                InputStream in = url.openStream();
-                final Bitmap decoded = BitmapFactory.decodeStream(in);
-                in.close();
-                for (Map.Entry<String, List<String>> key : fps.entrySet()) {
-                    for (String string : key.getValue()) {
-                        if (string.contains("capture_fps")) {
-                            int ii = 0;
-
-                            double d = Double.parseDouble(string.split("capture_fps_" + camera.getId() + "=")[1].split(";")[0].trim());
-                            ii = (int) d;
-                            humanReadableFPS = String.valueOf(Math.round(ii));
-                            return new CameraImage(humanReadableFPS, decoded, true);
-
-                        }
-
-                    }
-                }
-
-
-
-
-            } catch (Exception e) {
-                e.printStackTrace();
-                return new CameraImage(false, e.getMessage());
-            }
-            return null;
-
-        }
-
-        protected void onPostExecute(CameraImage result) {
-            if (result.isSuccessful()) {
-                if (!loaded) {
-                    progressBar.setVisibility(View.GONE);
-
-                    imageView.setVisibility(View.VISIBLE);
-                    loaded = true;
-
-                }
-                imageView.setImageBitmap(result.getBitmap());
-                cameraViewVisible(loaded, progressBar, imageView);
-
-                if (time.size() == Utils.fpsLen) {
-
-                    long streamingFps = time.size() * 1000 / (time.get(time.size()-1) - time.get(0));
-                    int fpsDeliv = Math.round(streamingFps);
-                    fps.setText(fpsDeliv + "/"+result.getFps()+" fps");
-
-                }
-
-                long timeNow = new Date().getTime();
-                time.add(timeNow);
-                if (time.size() > Utils.fpsLen) {
-                    time.remove(0);
-                }
-
-                if (attached) {
-                    timerHandler.postDelayed(timerRunnable, Utils.imageRefreshInterval); //Start timer after 1 sec
-
-                }
-
-            } else {
-                loaded = false;
-                imageView.setVisibility(View.GONE);
-                progressBar.setVisibility(View.VISIBLE);
-                loading.setVisibility(View.GONE);
-                tryagain.setVisibility(View.VISIBLE);
-                status.setText(result.getErrorString());
-            }
-
-
-        }
-    }
+    public interface CamerasAdapterListener {
 
+        void onImageClick(int position, CameraImageFrame cameraImageFrame);
 
-    public void onPause() {
-        attached = false;
+        void onRefreshRequest(int position, CameraImageFrame cameraImageFrame);
     }
 
-    public void onResume() {
-        attached = true;
-        notifyDataSetChanged();
-    }
-
-    public void onDestroy() {
-        attached = false;
+    @Override
+    public int getItemCount() {
+        return cameraImageFrames.size();
     }
 
 
-    private void cameraViewVisible(boolean loaded, LinearLayout progressBar, ImageView imageView) {
-        if (!loaded) {
-            progressBar.setVisibility(View.GONE);
-            imageView.setVisibility(View.VISIBLE);
-            loaded = true;
-
-
-        }
-    }
-
 
 }
diff --git a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/setup/activities/SetupStartScreen.java b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/setup/activities/SetupStartScreen.java
index 014c8c7..3c46bfd 100644
--- a/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/setup/activities/SetupStartScreen.java
+++ b/app/src/main/java/com/developerfromjokela/motioneyeclient/ui/setup/activities/SetupStartScreen.java
@@ -445,7 +445,7 @@ public class SetupStartScreen extends AppCompatActivity {
 
                                     Log.e("Setup", "Set Local Port " + portparts[1]);
                                 }
-                            }, 900);
+                            }, 1000);
                         }
                         if (validIP(portparts[0])) {
                             device.setDeviceUrl(url);
