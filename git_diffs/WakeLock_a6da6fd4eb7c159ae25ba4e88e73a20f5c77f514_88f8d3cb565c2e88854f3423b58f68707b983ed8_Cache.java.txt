diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/Cache.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/Cache.java
deleted file mode 100644
index a7c0793e..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/Cache.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import be.ugent.zeus.hydra.common.request.Result;
-import be.ugent.zeus.hydra.common.request.CacheableRequest;
-
-import java.io.Serializable;
-
-/**
- * A cache. This is a map like data structure that holds keys and objects. While the keys must be strings,
- * no restriction is applied on the objects. The objects are thus heterogeneous.
- * <p>
- * This is a file cache for {@link CacheableRequest}s. This is not a cache for a non-determined amount of keys. Use
- * something like DiskLruCache for that.
- * <p>
- * The cache is not thread safe. You should make sure to not write using the same key from different threads at the
- * same time. Behavior in that scenario is undefined.
- * <p>
- * The cache duration of an object is specified at retrieval. This simplifies forcing evicting the cache.
- * <p>
- * If the cache duration is set to {@link #NEVER}, the request will not be cached at all. The duration of the cache has
- * a millisecond precision.
- * <p>
- * Note: using 0 as duration is undefined behavior. You should in general only use multiples of the available
- * constants.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-public interface Cache {
-
-    /**
-     * Special value that indicates this request should not be cached.
-     */
-    long NEVER = -1;
-    long ALWAYS = -2;
-    long ONE_SECOND = 1000;
-    long ONE_MINUTE = 60 * ONE_SECOND;
-    long ONE_HOUR = 60 * ONE_MINUTE;
-    long ONE_DAY = 24 * ONE_HOUR;
-    long ONE_WEEK = 7 * ONE_DAY;
-
-    /**
-     * This method returns {@code true} if the cached value for the given key was saved longer than the given duration
-     * ago. When using {@link #NEVER} as duration, this methods always returns true.
-     * <p>
-     * Keys for which there is no cache will also return true.
-     *
-     * @param key      The key used to save the cache.
-     * @param duration Expiration to check against (in ms).
-     *
-     * @return True if it is expired, false otherwise.
-     */
-    boolean isExpired(String key, long duration);
-
-    /**
-     * Delete the cache for a given key. For a key that was not cached, this method does nothing.
-     *
-     * @param key The key of the cache.
-     *
-     * @return True if the file was deleted (or there was no file).
-     */
-    boolean evict(String key);
-
-    /**
-     * Get the data. Depending on the cache implementation, this might be cached data or fresh data. If new data is
-     * acquired from the request, it will be cached.
-     *
-     * If {@link #NEVER} is used as duration, existing cache will not be used. The new data will still be cached.
-     *
-     * This method will only throw an exception if no new data could be acquired. All other exceptions, such as errors
-     * while accessing the cache will fail silently and cause the existing cache to be invalidated.
-     *
-     * @param request  The request to get data from.
-     * @param args     The arguments for the request.
-     * @param duration Expiration of the cache.
-     *
-     * @return The data, as if provided by the request.
-     */
-    @NonNull
-    <R extends Serializable> Result<R> get(CacheableRequest<R> request, @Nullable Bundle args, long duration);
-
-    /**
-     * Same as the other method, but uses the built-in cache duration of the request.
-     *
-     * @see #get(CacheableRequest, Bundle, long)
-     */
-    @NonNull
-    <R extends Serializable> Result<R> get(CacheableRequest<R> request, @Nullable Bundle args);
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheException.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheException.java
deleted file mode 100644
index 47bbd37b..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheException.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-/**
- * Exception thrown when the cache could not be read or saved.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-class CacheException extends Exception {
-
-    CacheException(String message) {
-        super(message);
-    }
-
-    CacheException(Throwable throwable) {
-        super(throwable);
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheExecutor.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheExecutor.java
deleted file mode 100644
index f09f841d..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheExecutor.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import android.support.annotation.NonNull;
-
-import java.io.Serializable;
-
-/**
- * This interface defines the part of the {@link GenericCache} that will serialize the data and save it to disk.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-public interface CacheExecutor {
-
-    /**
-     * Save the data to disk. After calling this method, the data should be cached in such a way that it can be read
-     * again by the same CacheExecutor implementation.
-     *
-     * @param key The key for the cache.
-     * @param data The data to cache.
-
-     * @throws CacheException If the data could not be saved.
-     */
-    <D extends Serializable> void save(String key, CacheObject<D> data) throws CacheException;
-
-    /**
-     * Read data from disk.
-     *
-     * @param key The key for the cache.
-     *
-     * @return The data, read from disk.
-     *
-     * @throws CacheException If there is no data or the data could not be read.
-     */
-    @NonNull
-    <D extends Serializable> CacheObject<D> read(String key) throws CacheException;
-}
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheManager.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheManager.java
deleted file mode 100644
index 249700de..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheManager.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import android.content.Context;
-
-/**
- * Provide access to the cache instance.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-public class CacheManager {
-
-    private static Cache cache;
-
-    /**
-     * Get an instance of the default cache. When called multiple times, the same instance will be returned. This
-     * method is thread-safe.
-     *
-     * @param context A context.
-     *
-     * @return The default cache.
-     */
-    public static synchronized Cache defaultCache(Context context) {
-        if (cache == null) {
-            cache = new GenericCache(context);
-        }
-
-        return cache;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheObject.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheObject.java
deleted file mode 100644
index a1ea9ba7..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/CacheObject.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import be.ugent.zeus.hydra.BuildConfig;
-import org.threeten.bp.Duration;
-import org.threeten.bp.Instant;
-
-import java.io.Serializable;
-
-/**
- * Wrapper object for a {@link Cache} to save additional metadata. This object is serializable, to enable use
- * in file based caching. A side effect of this is that the encapsulated value also must be serializable.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-@SuppressWarnings("WeakerAccess")
-class CacheObject<T extends Serializable> implements Serializable {
-
-    private final long lastUpdated;
-    private final T data;
-    private final int version;
-
-    /**
-     * Create a new object.
-     *
-     * @param data The data to save.
-     */
-    public CacheObject(T data) {
-        this.lastUpdated = Instant.now().toEpochMilli();
-        this.data = data;
-        this.version = BuildConfig.VERSION_CODE;
-    }
-
-    CacheObject(long lastUpdated, T data, int version) {
-        this.lastUpdated = lastUpdated;
-        this.data = data;
-        this.version = version;
-    }
-
-    /**
-     * @return When the data was cached.
-     */
-    public Instant getLastUpdated() {
-        return Instant.ofEpochMilli(this.lastUpdated);
-    }
-
-    /**
-     * Check if the data is expired. Data is expired when it was cached longer ago than the given duration.
-     *
-     * @param duration The duration.
-     *
-     * @return True if the data is expired.
-     */
-    public boolean isExpired(Duration duration) {
-        // Sometimes null is cached, so null is always expired.
-        return data == null || getLastUpdated().plus(duration).isBefore(Instant.now());
-    }
-
-    /**
-     * @return The data.
-     */
-    public T getData() {
-        return data;
-    }
-
-    /**
-     * @return The app version this data was cached.
-     */
-    public int getVersion() {
-        return version;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/GenericCache.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/GenericCache.java
deleted file mode 100644
index 4f97049b..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/GenericCache.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.util.Log;
-import be.ugent.zeus.hydra.BuildConfig;
-import be.ugent.zeus.hydra.common.request.Result;
-import be.ugent.zeus.hydra.common.request.CacheableRequest;
-import org.threeten.bp.Duration;
-
-import java.io.File;
-import java.io.Serializable;
-
-/**
- * A generic cache that the serializes and deserializes data to disk. If not supplied, the
- * cache will use {@link SerializableExecutor} as a default.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-class GenericCache implements Cache {
-
-    private static final String TAG = "GenericCache";
-
-    private final CacheExecutor executor;
-    private final File directory;
-
-    GenericCache(Context context) {
-        this.directory = context.getCacheDir();
-        this.executor = new SerializableExecutor(this.directory);
-    }
-
-    GenericCache(File directory, CacheExecutor executor) {
-        this.directory = directory;
-        this.executor = executor;
-    }
-
-    File getDirectory() {
-        return directory;
-    }
-
-    @Override
-    public boolean isExpired(String key, long duration) {
-        CacheObject<?> cacheObject = readOrNull(key);
-        return shouldRefresh(cacheObject, duration);
-    }
-
-    @Override
-    public boolean evict(String key) {
-        File file = new File(directory, key);
-        return !file.isFile() || file.delete();
-    }
-
-    @NonNull
-    @Override
-    public <D extends Serializable> Result<D> get(CacheableRequest<D> request, @Nullable Bundle args, long duration) {
-        //Else we do the caching.
-        CacheObject<D> object = readOrNull(request.getCacheKey());
-
-        if (shouldRefresh(object, duration)) {
-            Log.i(TAG, "New response for request " + request.getCacheKey());
-            Result<D> data = request.performRequest(args);
-            // If the request was executed without error, save it to cache.
-            if (data.isWithoutError()) {
-                CacheObject<D> newObject = new CacheObject<>(data.getData());
-                try {
-                    executor.save(request.getCacheKey(), newObject);
-                } catch (CacheException e) {
-                    Log.w(TAG, "Could not cache request " + request.getCacheKey(), e);
-                }
-            }
-            return data;
-        } else {
-            Log.i(TAG, "Cached response for request " + request);
-            assert object != null;
-            return new Result.Builder<D>()
-                    .withData(object.getData())
-                    .build();
-        }
-    }
-
-    @NonNull
-    @Override
-    public <R extends Serializable> Result<R> get(CacheableRequest<R> request, @Nullable Bundle args) {
-        return get(request, args, request.getCacheDuration());
-    }
-
-    @Nullable
-    private <D extends Serializable> CacheObject<D> readOrNull(String key) {
-        try {
-            return executor.read(key);
-        } catch (CacheException e) {
-            Log.i(TAG, "Could not read cache for " + key, e);
-            return null;
-        }
-    }
-
-    /**
-     * @return True if fresh data should be used, for various reasons.
-     */
-    @VisibleForTesting
-    boolean shouldRefresh(CacheObject<?> object, long duration) {
-        return object == null || (duration != ALWAYS //The cache never expires.
-                && (duration == Cache.NEVER  //Never cache
-                || object.isExpired(Duration.ofMillis(duration)) //Expired cache
-                || object.getVersion() != BuildConfig.VERSION_CODE)); //Old cache version
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/caching/SerializableExecutor.java b/app/src/main/java/be/ugent/zeus/hydra/common/caching/SerializableExecutor.java
deleted file mode 100644
index 45076bc4..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/caching/SerializableExecutor.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package be.ugent.zeus.hydra.common.caching;
-
-import android.support.annotation.NonNull;
-import android.util.Log;
-
-import java.io.*;
-
-/**
- * Cache executor that uses default Java serialization to write/read objects.
- *
- * On Android, the default serializer is not fast. However, for the current use in the application (save some 'smaller'
- * data), it is sufficient. It is also executed in a background thread, so worst case scenario, the user has to wait a
- * little longer for the data (ns or ms). The alternative would be to use an external serializer library
- * (such as fst[1]). This makes the app take up a lot more space, so we do not do that currently.
- * If profiling suggests the serialisation here is really the bottleneck, which is unlikely since
- * it is about network requests, we can easily switch to fst.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-class SerializableExecutor implements CacheExecutor {
-
-    private static final String TAG = "SerializableExecutor";
-
-    private final File directory;
-
-    /**
-     * @param directory The cache directory, where the data should be saved.
-     */
-    SerializableExecutor(File directory) {
-        this.directory = directory;
-    }
-
-    @Override
-    public <D extends Serializable> void save(String key, CacheObject<D> data) throws CacheException {
-        //TODO try with resources
-        ObjectOutputStream stream = null;
-        try {
-            stream = new ObjectOutputStream(new FileOutputStream(new File(directory, key)));
-            stream.writeObject(data);
-        } catch (IOException e) {
-            throw new CacheException(e);
-        } finally {
-            try {
-                if (stream != null) {
-                    stream.close();
-                }
-            } catch (IOException e) {
-                Log.w(TAG, "Error while closing stream.", e);
-            }
-        }
-    }
-
-    @NonNull
-    @Override
-    @SuppressWarnings("unchecked")
-    public <D extends Serializable> CacheObject<D> read(String key) throws CacheException {
-        //TODO try with resources
-        ObjectInputStream stream = null;
-        try {
-            stream = new ObjectInputStream(new FileInputStream(new File(directory, key)));
-            return (CacheObject<D>) stream.readObject();
-        } catch (ClassNotFoundException | IOException | ClassCastException e) {
-            throw new CacheException(e);
-        } finally {
-            try {
-                if (stream != null) {
-                    stream.close();
-                }
-            } catch (IOException e) {
-                Log.w(TAG, "Error while closing stream.", e);
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheRequest.java b/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheRequest.java
deleted file mode 100644
index afe0152d..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheRequest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package be.ugent.zeus.hydra.common.request;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.util.Log;
-
-import be.ugent.zeus.hydra.common.arch.data.BaseLiveData;
-import be.ugent.zeus.hydra.common.caching.Cache;
-import be.ugent.zeus.hydra.common.caching.CacheManager;
-import be.ugent.zeus.hydra.common.network.IOFailureException;
-
-import java.io.Serializable;
-
-/**
- * Caches a request. The use is similar to the reader-related libraries in Java; this class wraps another request.
- *
- * Mapping this request will still only cache the original value, the mapping itself is not cached. This is to prevent
- * conflicts where multiple mapped requests of the same source request will all save different data for the same key.
- * 
- * @author Niko Strijbol
- */
-@Deprecated
-final class CacheRequest<R extends Serializable> implements Request<R> {
-    
-    private final CacheableRequest<R> wrapping;
-    private final Cache cache;
-
-    private CacheRequest(CacheableRequest<R> wrapping, Context context) {
-        this.wrapping = wrapping;
-        this.cache = CacheManager.defaultCache(context);
-    }
-
-    @VisibleForTesting
-    CacheRequest(CacheableRequest<R> wrapping, Cache cache) {
-        this.wrapping = wrapping;
-        this.cache = cache;
-    }
-
-    public static <R extends Serializable> CacheRequest<R> cache(CacheableRequest<R> request, Context context) {
-        return new CacheRequest<>(request, context);
-    }
-
-    @NonNull
-    @Override
-    public Result<R> performRequest(@Nullable Bundle args) {
-        Result<R> data;
-
-        boolean shouldRefresh = args != null && args.getBoolean(BaseLiveData.REFRESH_COLD, false);
-
-        if (shouldRefresh) {
-            data = cache.get(wrapping, args, Cache.NEVER);
-        } else {
-            data = cache.get(wrapping, args);
-        }
-
-        // If getting data failed because of the network, get the cached data anyway.
-        if (data.hasException() && data.getError() instanceof IOFailureException) {
-            Log.w("CachedRequest", "Could not get data from network, getting cached data.");
-            data = data.updateWith(cache.get(wrapping, args, Cache.ALWAYS));
-        }
-
-        return data;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheableRequest.java b/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheableRequest.java
deleted file mode 100644
index 434c2a1c..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/request/CacheableRequest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package be.ugent.zeus.hydra.common.request;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import be.ugent.zeus.hydra.common.caching.Cache;
-import java8.util.function.Function;
-
-/**
- * A request that provides additional metadata about the requested data to facilitate caching of said data.
- * This is especially useful when getting data from a remote source, or when calculating the data is very resource
- * intensive.
- *
- * Note that this request is not responsible for the caching itself, this interface merely indicates that the data can
- * be cached. The request should thus behave like a normal {@link Request} and always return fresh data.
- *
- * It is up to the caller to decide which data to use and which not. Refer to the {@link Cache} implementation for
- * details.
- *
- * @param <D> Type of data that is cached.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-public interface CacheableRequest<D> extends Request<D> {
-
-    /**
-     * Provide a suggestion to the caller under which name this data can be saved.
-     *
-     * @return The key under which the result will be stored by the {@link Cache}.
-     */
-    @NonNull
-    String getCacheKey();
-
-    /**
-     * Provide a suggestion for the maximal cache duration.
-     *
-     * @return The maximal duration the data should be cached.
-     */
-    long getCacheDuration();
-
-    /**
-     * Construct a new cacheable request where a given function has been applied to the output of this request.
-     * The cache key and duration are still the same.
-     *
-     * @param function The function to apply.
-     *
-     * @param <R> The resulting type.
-     *
-     * @return The new request.
-     */
-    @Override
-    default <R> CacheableRequest<R> map(Function<D, R> function) {
-        CacheableRequest<D> r = this;
-        return new CacheableRequest<R>() {
-            @NonNull
-            @Override
-            public String getCacheKey() {
-                return r.getCacheKey();
-            }
-
-            @Override
-            public long getCacheDuration() {
-                return r.getCacheDuration();
-            }
-
-            @NonNull
-            @Override
-            public Result<R> performRequest(@Nullable Bundle args) {
-                return r.performRequest(args).map(function);
-            }
-        };
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/be/ugent/zeus/hydra/common/request/Requests.java b/app/src/main/java/be/ugent/zeus/hydra/common/request/Requests.java
deleted file mode 100644
index e52f1cfb..00000000
--- a/app/src/main/java/be/ugent/zeus/hydra/common/request/Requests.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package be.ugent.zeus.hydra.common.request;
-
-import android.content.Context;
-
-import java8.util.function.Function;
-
-import java.io.Serializable;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Utility methods for use with {@link Request}s.
- *
- * @author Niko Strijbol
- */
-@Deprecated
-public class Requests {
-
-    /**
-     * Cache a request.
-     *
-     * Implementation note: we cannot make this a default function on {@link Request}, since it requires
-     * {@code R} to be {@link Serializable}.
-     *
-     * @param context The context.
-     * @param request The request.
-     * @param <R>     The type of data.
-     *
-     * @return The new request.
-     */
-    public static <R extends Serializable> Request<R> cache(Context context, CacheableRequest<R> request) {
-        return CacheRequest.cache(request, context);
-    }
-
-    /**
-     * Shortcut for calling {@link #cache(Context, CacheableRequest)} and then {@link Request#map(Function)}.
-     *
-     * It will cache a request and then transform the resulting array into a list.
-     *
-     * Implementation note: we cannot make this a default function on {@link Request}, since it requires
-     * {@code R} to be {@link Serializable} and an array.
-     *
-     * @param context The context.
-     * @param request The request.
-     * @param <R>     The type of the data.
-     *
-     * @return The cached and "listified" request.
-     */
-    public static <R extends Serializable> Request<List<R>> cachedList(Context context, CacheableRequest<R[]> request) {
-        return cache(context, request).map(Arrays::asList);
-    }
-}
\ No newline at end of file
