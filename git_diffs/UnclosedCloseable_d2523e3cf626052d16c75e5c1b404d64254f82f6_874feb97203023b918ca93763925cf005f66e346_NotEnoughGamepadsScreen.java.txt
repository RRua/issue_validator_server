diff --git a/core/src/com/agateau/pixelwheels/gameinput/EnoughGamepadsChecker.java b/core/src/com/agateau/pixelwheels/gameinput/EnoughInputsChecker.java
similarity index 92%
rename from core/src/com/agateau/pixelwheels/gameinput/EnoughGamepadsChecker.java
rename to core/src/com/agateau/pixelwheels/gameinput/EnoughInputsChecker.java
index cf6c4e8e..341c8cc4 100644
--- a/core/src/com/agateau/pixelwheels/gameinput/EnoughGamepadsChecker.java
+++ b/core/src/com/agateau/pixelwheels/gameinput/EnoughInputsChecker.java
@@ -23,7 +23,7 @@ import com.agateau.ui.GamepadInputMappers;
 import com.agateau.utils.log.NLog;
 import com.badlogic.gdx.utils.Array;
 
-public class EnoughGamepadsChecker {
+public class EnoughInputsChecker {
 
     public interface Listener {
         void onNotEnoughInputs();
@@ -37,7 +37,7 @@ public class EnoughGamepadsChecker {
     private int mMissingInputCount = 0;
     private int mInputCount = 0;
 
-    public EnoughGamepadsChecker(GameConfig gameConfig, Listener listener) {
+    public EnoughInputsChecker(GameConfig gameConfig, Listener listener) {
         mGameConfig = gameConfig;
         mListener = listener;
         GamepadInputMappers.getInstance()
@@ -45,12 +45,12 @@ public class EnoughGamepadsChecker {
                         new GamepadInputMappers.Listener() {
                             @Override
                             public void onGamepadConnected() {
-                                EnoughGamepadsChecker.this.onGamepadConnected();
+                                EnoughInputsChecker.this.onGamepadConnected();
                             }
 
                             @Override
                             public void onGamepadDisconnected() {
-                                EnoughGamepadsChecker.this.onGamepadDisconnected();
+                                EnoughInputsChecker.this.onGamepadDisconnected();
                             }
                         });
     }
diff --git a/core/src/com/agateau/pixelwheels/gamesetup/ChampionshipMaestro.java b/core/src/com/agateau/pixelwheels/gamesetup/ChampionshipMaestro.java
index d0a92610..ebcfa24f 100644
--- a/core/src/com/agateau/pixelwheels/gamesetup/ChampionshipMaestro.java
+++ b/core/src/com/agateau/pixelwheels/gamesetup/ChampionshipMaestro.java
@@ -102,7 +102,7 @@ public class ChampionshipMaestro extends Maestro {
                 new SelectChampionshipScreen.Listener() {
                     @Override
                     public void onBackPressed() {
-                        stopEnoughGamepadChecker();
+                        stopEnoughInputChecker();
                         getGame().popScreen();
                     }
 
@@ -154,7 +154,7 @@ public class ChampionshipMaestro extends Maestro {
 
                     @Override
                     public void onQuitPressed() {
-                        stopEnoughGamepadChecker();
+                        stopEnoughInputChecker();
                         getGame().showMainMenu();
                     }
 
diff --git a/core/src/com/agateau/pixelwheels/gamesetup/Maestro.java b/core/src/com/agateau/pixelwheels/gamesetup/Maestro.java
index c22e9fe9..e7a664a5 100644
--- a/core/src/com/agateau/pixelwheels/gamesetup/Maestro.java
+++ b/core/src/com/agateau/pixelwheels/gamesetup/Maestro.java
@@ -19,37 +19,37 @@
 package com.agateau.pixelwheels.gamesetup;
 
 import com.agateau.pixelwheels.PwGame;
-import com.agateau.pixelwheels.gameinput.EnoughGamepadsChecker;
+import com.agateau.pixelwheels.gameinput.EnoughInputsChecker;
 import com.agateau.pixelwheels.rewards.Reward;
 import com.agateau.pixelwheels.rewards.RewardManager;
 import com.agateau.pixelwheels.screens.NavStageScreen;
-import com.agateau.pixelwheels.screens.NotEnoughGamepadsScreen;
+import com.agateau.pixelwheels.screens.NotEnoughInputsScreen;
 import com.agateau.pixelwheels.screens.UnlockedRewardScreen;
 import com.agateau.utils.log.NLog;
 import java.util.Set;
 
 /** Orchestrate changes between screens for a game */
-public abstract class Maestro implements EnoughGamepadsChecker.Listener {
+public abstract class Maestro implements EnoughInputsChecker.Listener {
     private final PwGame mGame;
     private final int mPlayerCount;
-    private final EnoughGamepadsChecker mEnoughGamepadsChecker;
+    private final EnoughInputsChecker mEnoughInputsChecker;
 
-    private NotEnoughGamepadsScreen mNotEnoughGamepadsScreen;
+    private NotEnoughInputsScreen mNotEnoughInputsScreen;
 
     public Maestro(PwGame game, int playerCount) {
         mGame = game;
         mPlayerCount = playerCount;
-        mEnoughGamepadsChecker = new EnoughGamepadsChecker(mGame.getConfig(), this);
-        mEnoughGamepadsChecker.setInputCount(playerCount);
+        mEnoughInputsChecker = new EnoughInputsChecker(mGame.getConfig(), this);
+        mEnoughInputsChecker.setInputCount(playerCount);
     }
 
     public abstract void start();
 
-    public void stopEnoughGamepadChecker() {
-        if (mNotEnoughGamepadsScreen != null) {
-            hideNotEnoughGamepadsScreen();
+    public void stopEnoughInputChecker() {
+        if (mNotEnoughInputsScreen != null) {
+            hideNotEnoughInputsScreen();
         }
-        mEnoughGamepadsChecker.setInputCount(0);
+        mEnoughInputsChecker.setInputCount(0);
     }
 
     public int getPlayerCount() {
@@ -62,25 +62,24 @@ public abstract class Maestro implements EnoughGamepadsChecker.Listener {
 
     @Override
     public void onNotEnoughInputs() {
-        NLog.e("There aren't enough connected gamepads");
-        if (mNotEnoughGamepadsScreen == null) {
-            mNotEnoughGamepadsScreen =
-                    new NotEnoughGamepadsScreen(mGame, this, mEnoughGamepadsChecker);
-            mGame.getScreenStack().showBlockingScreen(mNotEnoughGamepadsScreen);
+        NLog.e("There aren't enough connected inputs");
+        if (mNotEnoughInputsScreen == null) {
+            mNotEnoughInputsScreen = new NotEnoughInputsScreen(mGame, this, mEnoughInputsChecker);
+            mGame.getScreenStack().showBlockingScreen(mNotEnoughInputsScreen);
         } else {
-            mNotEnoughGamepadsScreen.updateMissingGamepads();
+            mNotEnoughInputsScreen.updateMissingInputs();
         }
     }
 
     @Override
     public void onEnoughInputs() {
-        NLog.i("There are enough connected gamepads");
-        hideNotEnoughGamepadsScreen();
+        NLog.i("There are enough connected inputs");
+        hideNotEnoughInputsScreen();
     }
 
-    private void hideNotEnoughGamepadsScreen() {
+    private void hideNotEnoughInputsScreen() {
         mGame.getScreenStack().hideBlockingScreen();
-        mNotEnoughGamepadsScreen = null;
+        mNotEnoughInputsScreen = null;
     }
 
     void showUnlockedRewardScreen(final Runnable doAfterLastReward) {
diff --git a/core/src/com/agateau/pixelwheels/gamesetup/QuickRaceMaestro.java b/core/src/com/agateau/pixelwheels/gamesetup/QuickRaceMaestro.java
index 556bf8a2..54b8db63 100644
--- a/core/src/com/agateau/pixelwheels/gamesetup/QuickRaceMaestro.java
+++ b/core/src/com/agateau/pixelwheels/gamesetup/QuickRaceMaestro.java
@@ -92,7 +92,7 @@ public class QuickRaceMaestro extends Maestro {
                 new SelectTrackScreen.Listener() {
                     @Override
                     public void onBackPressed() {
-                        stopEnoughGamepadChecker();
+                        stopEnoughInputChecker();
                         getGame().popScreen();
                     }
 
@@ -127,13 +127,13 @@ public class QuickRaceMaestro extends Maestro {
 
                     @Override
                     public void onQuitPressed() {
-                        stopEnoughGamepadChecker();
+                        stopEnoughInputChecker();
                         getGame().showMainMenu();
                     }
 
                     @Override
                     public void onNextTrackPressed() {
-                        stopEnoughGamepadChecker();
+                        stopEnoughInputChecker();
                         showUnlockedRewardScreen(() -> getGame().showMainMenu());
                     }
                 };
diff --git a/core/src/com/agateau/pixelwheels/screens/NotEnoughGamepadsScreen.java b/core/src/com/agateau/pixelwheels/screens/NotEnoughInputsScreen.java
similarity index 77%
rename from core/src/com/agateau/pixelwheels/screens/NotEnoughGamepadsScreen.java
rename to core/src/com/agateau/pixelwheels/screens/NotEnoughInputsScreen.java
index 560ec094..8c18e410 100644
--- a/core/src/com/agateau/pixelwheels/screens/NotEnoughGamepadsScreen.java
+++ b/core/src/com/agateau/pixelwheels/screens/NotEnoughInputsScreen.java
@@ -5,7 +5,7 @@ import static com.agateau.translations.Translator.tr;
 import com.agateau.pixelwheels.Assets;
 import com.agateau.pixelwheels.PwGame;
 import com.agateau.pixelwheels.PwRefreshHelper;
-import com.agateau.pixelwheels.gameinput.EnoughGamepadsChecker;
+import com.agateau.pixelwheels.gameinput.EnoughInputsChecker;
 import com.agateau.pixelwheels.gamesetup.Maestro;
 import com.agateau.pixelwheels.utils.StringUtils;
 import com.agateau.ui.ScreenStack;
@@ -17,17 +17,17 @@ import com.agateau.utils.FileUtils;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.utils.Array;
 
-public class NotEnoughGamepadsScreen extends PwStageScreen {
+public class NotEnoughInputsScreen extends PwStageScreen {
     private final PwGame mGame;
     private final Maestro mMaestro;
-    private final EnoughGamepadsChecker mEnoughGamepadsChecker;
+    private final EnoughInputsChecker mEnoughInputsChecker;
     private Label mLabel;
 
-    public NotEnoughGamepadsScreen(PwGame game, Maestro maestro, EnoughGamepadsChecker checker) {
+    public NotEnoughInputsScreen(PwGame game, Maestro maestro, EnoughInputsChecker checker) {
         super(game.getAssets().ui);
         mGame = game;
         mMaestro = maestro;
-        mEnoughGamepadsChecker = checker;
+        mEnoughInputsChecker = checker;
         setupUi();
         new PwRefreshHelper(mGame, getStage()) {
             @Override
@@ -35,10 +35,10 @@ public class NotEnoughGamepadsScreen extends PwStageScreen {
                 ScreenStack stack = mGame.getScreenStack();
                 stack.hideBlockingScreen();
                 stack.showBlockingScreen(
-                        new NotEnoughGamepadsScreen(mGame, mMaestro, mEnoughGamepadsChecker));
+                        new NotEnoughInputsScreen(mGame, mMaestro, mEnoughInputsChecker));
             }
         };
-        updateMissingGamepads();
+        updateMissingInputs();
     }
 
     @Override
@@ -46,10 +46,10 @@ public class NotEnoughGamepadsScreen extends PwStageScreen {
 
     private static final StringBuilder sStringBuilder = new StringBuilder();
 
-    public void updateMissingGamepads() {
+    public void updateMissingInputs() {
         sStringBuilder.setLength(0);
-        Array<String> inputNames = mEnoughGamepadsChecker.getInputNames();
-        for (int playerId = 0; playerId < mEnoughGamepadsChecker.getInputCount(); ++playerId) {
+        Array<String> inputNames = mEnoughInputsChecker.getInputNames();
+        for (int playerId = 0; playerId < mEnoughInputsChecker.getInputCount(); ++playerId) {
             if (playerId > 0) {
                 sStringBuilder.append("\n");
             }
@@ -78,7 +78,7 @@ public class NotEnoughGamepadsScreen extends PwStageScreen {
                         new MenuItemListener() {
                             @Override
                             public void triggered() {
-                                mMaestro.stopEnoughGamepadChecker();
+                                mMaestro.stopEnoughInputChecker();
                                 mGame.showMainMenu();
                             }
                         });
