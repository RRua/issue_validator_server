diff --git a/app/src/main/java/com/amaze/filemanager/activities/PreferencesActivity.java b/app/src/main/java/com/amaze/filemanager/activities/PreferencesActivity.java
index 785ef3988..653104095 100644
--- a/app/src/main/java/com/amaze/filemanager/activities/PreferencesActivity.java
+++ b/app/src/main/java/com/amaze/filemanager/activities/PreferencesActivity.java
@@ -43,7 +43,7 @@ import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.fragments.preference_fragments.AdvancedSearchPref;
 import com.amaze.filemanager.fragments.preference_fragments.ColorPref;
 import com.amaze.filemanager.fragments.preference_fragments.FoldersPref;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.fragments.preference_fragments.QuickAccessPref;
 import com.amaze.filemanager.utils.PreferenceUtils;
 import com.amaze.filemanager.utils.color.ColorUsage;
@@ -177,7 +177,7 @@ public class PreferencesActivity extends ThemedActivity implements ActivityCompa
         selectedItem = i;
         switch (i) {
             case START_PREFERENCE:
-                loadPrefFragment(new Preffrag(), R.string.setting);
+                loadPrefFragment(new PrefFrag(), R.string.setting);
                 break;
             case COLORS_PREFERENCE:
                 loadPrefFragment(new ColorPref(), R.string.color_title);
@@ -198,11 +198,11 @@ public class PreferencesActivity extends ThemedActivity implements ActivityCompa
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                            @NonNull int[] grantResults) {
         if (requestCode == 66) {
-            Preffrag preffrag = (Preffrag) getFragmentManager().findFragmentById(R.id.prefsfragment);
+            PrefFrag prefFrag = (PrefFrag) getFragmentManager().findFragmentById(R.id.prefsfragment);
 
-            if (preffrag != null) {
+            if (prefFrag != null) {
 
-                preffrag.invalidateGplus();
+                prefFrag.invalidateGplus();
             }
         }
 
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
index c5f60d3c9..535765aa9 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
@@ -45,7 +45,7 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.fragments.AppsList;
+import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.services.CopyService;
 import com.amaze.filemanager.services.DeleteTask;
 import com.amaze.filemanager.ui.LayoutElement;
@@ -67,12 +67,12 @@ public class AppsAdapter extends ArrayAdapter<LayoutElement> {
     Context context;
     List<LayoutElement> items;
     public SparseBooleanArray myChecked = new SparseBooleanArray();
-    AppsList app;
+    AppsListFragment app;
 
     private ThemedActivity themedActivity;
 
     public AppsAdapter(Context context, ThemedActivity ba, UtilitiesProviderInterface utilsProvider,
-                       int resourceId, AppsList app) {
+                       int resourceId, AppsListFragment app) {
         super(context, resourceId);
         themedActivity = ba;
         this.utilsProvider = utilsProvider;
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java
index 6f027e8c4..747633902 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java
@@ -22,7 +22,7 @@ import android.widget.Toast;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.BaseFile;
-import com.amaze.filemanager.fragments.ZipViewer;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.amaze.filemanager.services.ExtractService;
 import com.amaze.filemanager.services.asynctasks.RarHelperTask;
 import com.amaze.filemanager.services.asynctasks.ZipHelperTask;
@@ -50,12 +50,12 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
     private Drawable folder, unknown;
     private ArrayList<FileHeader> enter;
     private ArrayList<ZipObj> enter1;
-    private ZipViewer zipViewer;
+    private ZipExplorerFragment zipExplorerFragment;
     private LayoutInflater mInflater;
     private SparseBooleanArray myChecked = new SparseBooleanArray();
     private boolean zipMode = false;  // flag specify whether adapter is based on a Rar file or not
 
-    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<FileHeader> enter, ZipViewer zipViewer) {
+    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<FileHeader> enter, ZipExplorerFragment zipExplorerFragment) {
         this.utilsProvider = utilsProvider;
         this.enter = enter;
         for (int i = 0; i < enter.size(); i++)
@@ -65,10 +65,10 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         this.c = c;
         folder = c.getResources().getDrawable(R.drawable.ic_grid_folder_new);
         unknown = c.getResources().getDrawable(R.drawable.ic_doc_generic_am);
-        this.zipViewer = zipViewer;
+        this.zipExplorerFragment = zipExplorerFragment;
     }
 
-    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<ZipObj> enter, ZipViewer zipViewer, boolean l) {
+    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<ZipObj> enter, ZipExplorerFragment zipExplorerFragment, boolean l) {
         this.utilsProvider = utilsProvider;
         this.enter1 = enter;
         for (int i = 0; i < enter.size(); i++) {
@@ -79,7 +79,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         if (c == null) return;
         folder = c.getResources().getDrawable(R.drawable.ic_grid_folder_new);
         unknown = c.getResources().getDrawable(R.drawable.ic_doc_generic_am);
-        this.zipViewer = zipViewer;
+        this.zipExplorerFragment = zipExplorerFragment;
         mInflater = (LayoutInflater) c.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
     }
 
@@ -90,7 +90,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
      * @param imageView the circular {@link CircleGradientDrawable} that is to be animated
      */
     private void toggleChecked(int position, ImageView imageView) {
-        zipViewer.stopAnim();
+        zipExplorerFragment.stopAnim();
         stoppedAnimation = true;
         if (myChecked.get(position)) {
             // if the view at position is checked, un-check it
@@ -116,17 +116,17 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         }
 
         notifyDataSetChanged();
-        if (!zipViewer.selection || zipViewer.mActionMode == null) {
-            zipViewer.selection = true;
-            /*zipViewer.mActionMode = zipViewer.getActivity().startActionMode(
-                   zipViewer.mActionModeCallback);*/
-            zipViewer.mActionMode = zipViewer.mainActivity.getAppbar().getToolbar().startActionMode(zipViewer.mActionModeCallback);
+        if (!zipExplorerFragment.selection || zipExplorerFragment.mActionMode == null) {
+            zipExplorerFragment.selection = true;
+            /*zipExplorerFragment.mActionMode = zipExplorerFragment.getActivity().startActionMode(
+                   zipExplorerFragment.mActionModeCallback);*/
+            zipExplorerFragment.mActionMode = zipExplorerFragment.mainActivity.getAppbar().getToolbar().startActionMode(zipExplorerFragment.mActionModeCallback);
         }
-        zipViewer.mActionMode.invalidate();
+        zipExplorerFragment.mActionMode.invalidate();
         if (getCheckedItemPositions().size() == 0) {
-            zipViewer.selection = false;
-            zipViewer.mActionMode.finish();
-            zipViewer.mActionMode = null;
+            zipExplorerFragment.selection = false;
+            zipExplorerFragment.mActionMode.finish();
+            zipExplorerFragment.mActionMode = null;
         }
     }
 
@@ -209,7 +209,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
 
     private void animate(RarAdapter.ViewHolder holder) {
         holder.rl.clearAnimation();
-        localAnimation = AnimationUtils.loadAnimation(zipViewer.getActivity(), R.anim.fade_in_top);
+        localAnimation = AnimationUtils.loadAnimation(zipExplorerFragment.getActivity(), R.anim.fade_in_top);
         localAnimation.setStartOffset(this.offset);
         holder.rl.startAnimation(localAnimation);
         this.offset = (30 + this.offset);
@@ -244,26 +244,26 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         GradientDrawable gradientDrawable = (GradientDrawable) holder.genericIcon.getBackground();
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            holder.checkImageView.setBackground(new CircleGradientDrawable(zipViewer.accentColor,
-                    utilsProvider.getAppTheme(), zipViewer.getResources().getDisplayMetrics()));
+            holder.checkImageView.setBackground(new CircleGradientDrawable(zipExplorerFragment.accentColor,
+                    utilsProvider.getAppTheme(), zipExplorerFragment.getResources().getDisplayMetrics()));
         } else
-            holder.checkImageView.setBackgroundDrawable(new CircleGradientDrawable(zipViewer.accentColor,
-                    utilsProvider.getAppTheme(), zipViewer.getResources().getDisplayMetrics()));
+            holder.checkImageView.setBackgroundDrawable(new CircleGradientDrawable(zipExplorerFragment.accentColor,
+                    utilsProvider.getAppTheme(), zipExplorerFragment.getResources().getDisplayMetrics()));
 
         if (rowItem.getEntry() == null) {
-            holder.genericIcon.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.ic_arrow_left_white_24dp));
+            holder.genericIcon.setImageDrawable(zipExplorerFragment.getResources().getDrawable(R.drawable.ic_arrow_left_white_24dp));
             gradientDrawable.setColor(Utils.getColor(c, R.color.goback_item));
             holder.txtTitle.setText("..");
             holder.txtDesc.setText("");
             holder.date.setText(R.string.goback);
         } else {
-            holder.genericIcon.setImageDrawable(Icons.loadMimeIcon(rowItem.getName(), false, zipViewer.res));
+            holder.genericIcon.setImageDrawable(Icons.loadMimeIcon(rowItem.getName(), false, zipExplorerFragment.res));
             final StringBuilder stringBuilder = new StringBuilder(rowItem.getName());
-            if (zipViewer.showLastModified)
-                holder.date.setText(Utils.getDate(rowItem.getTime(), zipViewer.year));
+            if (zipExplorerFragment.showLastModified)
+                holder.date.setText(Utils.getDate(rowItem.getTime(), zipExplorerFragment.year));
             if (rowItem.isDirectory()) {
                 holder.genericIcon.setImageDrawable(folder);
-                gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
+                gradientDrawable.setColor(Color.parseColor(zipExplorerFragment.iconskin));
                 if (stringBuilder.toString().length() > 0) {
                     stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
                     try {
@@ -273,13 +273,13 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
                     }
                 }
             } else {
-                if (zipViewer.showSize)
+                if (zipExplorerFragment.showSize)
                     holder.txtDesc.setText(Formatter.formatFileSize(c, rowItem.getSize()));
                 holder.txtTitle.setText(rowItem.getName().substring(rowItem.getName().lastIndexOf("/") + 1));
-                if (zipViewer.coloriseIcons) {
+                if (zipExplorerFragment.coloriseIcons) {
                     ColorUtils.colorizeIcons(c, Icons.getTypeOfFile(rowItem.getName()),
-                            gradientDrawable, Color.parseColor(zipViewer.iconskin));
-                } else gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
+                            gradientDrawable, Color.parseColor(zipExplorerFragment.iconskin));
+                } else gradientDrawable.setColor(Color.parseColor(zipExplorerFragment.iconskin));
             }
         }
 
@@ -315,7 +315,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
             }
             holder.rl.setSelected(false);
             if (checked) {
-                //holder.genericIcon.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
+                //holder.genericIcon.setImageDrawable(zipExplorerFragment.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
                 holder.checkImageView.setVisibility(View.VISIBLE);
                 gradientDrawable.setColor(Utils.getColor(c, R.color.goback_item));
                 holder.rl.setSelected(true);
@@ -325,9 +325,9 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
 
             public void onClick(View p1) {
                 if (rowItem.getEntry() == null)
-                    zipViewer.goBack();
+                    zipExplorerFragment.goBack();
                 else {
-                    if (zipViewer.selection) {
+                    if (zipExplorerFragment.selection) {
 
                         toggleChecked(position1, holder.checkImageView);
                     } else {
@@ -337,36 +337,36 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
 
                         if (rowItem.isDirectory()) {
 
-                            new ZipHelperTask(zipViewer, stringBuilder.toString()).execute(zipViewer.s);
+                            new ZipHelperTask(zipExplorerFragment, stringBuilder.toString()).execute(zipExplorerFragment.s);
 
                         } else {
 
-                            String fileName = zipViewer.f.getName().substring(0,
-                                    zipViewer.f.getName().lastIndexOf("."));
-                            String archiveCacheDirPath = zipViewer.getActivity().getExternalCacheDir().getPath() +
+                            String fileName = zipExplorerFragment.f.getName().substring(0,
+                                    zipExplorerFragment.f.getName().lastIndexOf("."));
+                            String archiveCacheDirPath = zipExplorerFragment.getActivity().getExternalCacheDir().getPath() +
                                     "/" + fileName;
 
                             BaseFile file = new BaseFile(archiveCacheDirPath + "/"
                                     + rowItem.getName().replaceAll("\\\\", "/"));
                             file.setMode(OpenMode.FILE);
                             // this file will be opened once service finishes up it's extraction
-                            zipViewer.files.add(file);
+                            zipExplorerFragment.files.add(file);
                             // setting flag for binder to know
-                            zipViewer.isOpen = true;
+                            zipExplorerFragment.isOpen = true;
 
-                            Toast.makeText(zipViewer.getContext(),
-                                    zipViewer.getContext().getResources().getString(R.string.please_wait),
+                            Toast.makeText(zipExplorerFragment.getContext(),
+                                    zipExplorerFragment.getContext().getResources().getString(R.string.please_wait),
                                     Toast.LENGTH_SHORT).show();
-                            Intent intent = new Intent(zipViewer.getContext(), ExtractService.class);
+                            Intent intent = new Intent(zipExplorerFragment.getContext(), ExtractService.class);
                             ArrayList<String> a = new ArrayList<>();
 
                             // adding name of entry to extract from zip, before opening it
                             a.add(rowItem.getName());
-                            intent.putExtra(ExtractService.KEY_PATH_ZIP, zipViewer.f.getPath());
+                            intent.putExtra(ExtractService.KEY_PATH_ZIP, zipExplorerFragment.f.getPath());
                             intent.putExtra(ExtractService.KEY_ENTRIES_ZIP, a);
                             intent.putExtra(ExtractService.KEY_PATH_EXTRACT,
-                                    zipViewer.getActivity().getExternalCacheDir().getPath());
-                            ServiceWatcherUtil.runService(zipViewer.getContext(), intent);
+                                    zipExplorerFragment.getActivity().getExternalCacheDir().getPath());
+                            ServiceWatcherUtil.runService(zipExplorerFragment.getContext(), intent);
                         }
                     }
                 }
@@ -386,28 +386,28 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         }
         if (position1 < 0) return;
         final FileHeader rowItem = enter.get(position1);
-        zipViewer.elementsRar.add(position1, headerRequired(rowItem));
+        zipExplorerFragment.elementsRar.add(position1, headerRequired(rowItem));
 
         GradientDrawable gradientDrawable = (GradientDrawable) holder.genericIcon.getBackground();
 
-        holder.genericIcon.setImageDrawable(Icons.loadMimeIcon(rowItem.getFileNameString(), false, zipViewer.res));
+        holder.genericIcon.setImageDrawable(Icons.loadMimeIcon(rowItem.getFileNameString(), false, zipExplorerFragment.res));
         holder.txtTitle.setText(rowItem.getFileNameString().substring(rowItem.getFileNameString().lastIndexOf("\\") + 1));
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            holder.checkImageView.setBackground(new CircleGradientDrawable(zipViewer.accentColor,
-                    utilsProvider.getAppTheme(), zipViewer.getResources().getDisplayMetrics()));
+            holder.checkImageView.setBackground(new CircleGradientDrawable(zipExplorerFragment.accentColor,
+                    utilsProvider.getAppTheme(), zipExplorerFragment.getResources().getDisplayMetrics()));
         } else
-            holder.checkImageView.setBackgroundDrawable(new CircleGradientDrawable(zipViewer.accentColor,
-                    utilsProvider.getAppTheme(), zipViewer.getResources().getDisplayMetrics()));
+            holder.checkImageView.setBackgroundDrawable(new CircleGradientDrawable(zipExplorerFragment.accentColor,
+                    utilsProvider.getAppTheme(), zipExplorerFragment.getResources().getDisplayMetrics()));
 
         if (rowItem.isDirectory()) {
             holder.genericIcon.setImageDrawable(folder);
-            gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
+            gradientDrawable.setColor(Color.parseColor(zipExplorerFragment.iconskin));
         } else {
-            if (zipViewer.coloriseIcons) {
+            if (zipExplorerFragment.coloriseIcons) {
                 ColorUtils.colorizeIcons(c, Icons.getTypeOfFile(rowItem.getFileNameString()),
-                        gradientDrawable, Color.parseColor(zipViewer.iconskin));
-            } else gradientDrawable.setColor(Color.parseColor(zipViewer.iconskin));
+                        gradientDrawable, Color.parseColor(zipExplorerFragment.iconskin));
+            } else gradientDrawable.setColor(Color.parseColor(zipExplorerFragment.iconskin));
         }
 
 
@@ -438,7 +438,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
             }
             holder.rl.setSelected(false);
             if (checked) {
-                //holder.genericIcon.setImageDrawable(zipViewer.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
+                //holder.genericIcon.setImageDrawable(zipExplorerFragment.getResources().getDrawable(R.drawable.abc_ic_cab_done_holo_dark));
                 holder.checkImageView.setVisibility(View.VISIBLE);
                 gradientDrawable.setColor(Utils.getColor(c, R.color.goback_item));
                 holder.rl.setSelected(true);
@@ -447,21 +447,21 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         holder.rl.setOnClickListener(new View.OnClickListener() {
 
             public void onClick(View p1) {
-                if (zipViewer.selection) {
+                if (zipExplorerFragment.selection) {
 
                     toggleChecked(position1, holder.checkImageView);
                 } else {
 
                     if (rowItem.isDirectory()) {
 
-                        zipViewer.elementsRar.clear();
-                        new RarHelperTask(zipViewer, rowItem.getFileNameString()).execute
-                                (zipViewer.f);
+                        zipExplorerFragment.elementsRar.clear();
+                        new RarHelperTask(zipExplorerFragment, rowItem.getFileNameString()).execute
+                                (zipExplorerFragment.f);
 
                     } else {
-                        String fileName = zipViewer.f.getName().substring(0,
-                                zipViewer.f.getName().lastIndexOf("."));
-                        String archiveCacheDirPath = zipViewer.getActivity().getExternalCacheDir().getPath() +
+                        String fileName = zipExplorerFragment.f.getName().substring(0,
+                                zipExplorerFragment.f.getName().lastIndexOf("."));
+                        String archiveCacheDirPath = zipExplorerFragment.getActivity().getExternalCacheDir().getPath() +
                                 "/" + fileName;
 
                         BaseFile file1 = new BaseFile(archiveCacheDirPath + "/"
@@ -469,23 +469,23 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
                         file1.setMode(OpenMode.FILE);
 
                         // this file will be opened once service finishes up it's extraction
-                        zipViewer.files.add(file1);
+                        zipExplorerFragment.files.add(file1);
                         // setting flag for binder to know
-                        zipViewer.isOpen = true;
+                        zipExplorerFragment.isOpen = true;
 
-                        Toast.makeText(zipViewer.getContext(),
-                                zipViewer.getContext().getResources().getString(R.string.please_wait),
+                        Toast.makeText(zipExplorerFragment.getContext(),
+                                zipExplorerFragment.getContext().getResources().getString(R.string.please_wait),
                                 Toast.LENGTH_SHORT).show();
-                        Intent intent = new Intent(zipViewer.getContext(), ExtractService.class);
+                        Intent intent = new Intent(zipExplorerFragment.getContext(), ExtractService.class);
                         ArrayList<String> a = new ArrayList<>();
 
                         // adding name of entry to extract from zip, before opening it
                         a.add(rowItem.getFileNameString());
-                        intent.putExtra(ExtractService.KEY_PATH_ZIP, zipViewer.f.getPath());
+                        intent.putExtra(ExtractService.KEY_PATH_ZIP, zipExplorerFragment.f.getPath());
                         intent.putExtra(ExtractService.KEY_ENTRIES_ZIP, a);
                         intent.putExtra(ExtractService.KEY_PATH_EXTRACT,
-                                zipViewer.getActivity().getExternalCacheDir().getPath());
-                        ServiceWatcherUtil.runService(zipViewer.getContext(), intent);
+                                zipExplorerFragment.getActivity().getExternalCacheDir().getPath());
+                        ServiceWatcherUtil.runService(zipExplorerFragment.getContext(), intent);
                     }
                 }
             }
@@ -510,7 +510,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
 
     private FileHeader headerRequired(FileHeader rowItem) {
 
-        for (FileHeader fileHeader : zipViewer.archive.getFileHeaders()) {
+        for (FileHeader fileHeader : zipExplorerFragment.archive.getFileHeaders()) {
             String req = fileHeader.getFileNameString();
             if (rowItem.getFileNameString().equals(req))
                 return fileHeader;
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/AppsList.java b/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
similarity index 97%
rename from app/src/main/java/com/amaze/filemanager/fragments/AppsList.java
rename to app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
index 77f98bc39..d0ceabc1f 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/AppsList.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
@@ -44,10 +44,10 @@ import com.amaze.filemanager.utils.theme.AppTheme;
 
 import java.util.List;
 
-public class AppsList extends ListFragment implements LoaderManager.LoaderCallbacks<List<LayoutElement>> {
+public class AppsListFragment extends ListFragment implements LoaderManager.LoaderCallbacks<List<LayoutElement>> {
 
     UtilitiesProviderInterface utilsProvider;
-    AppsList app = this;
+    AppsListFragment app = this;
     AppsAdapter adapter;
 
     public SharedPreferences Sp;
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewer.java b/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
similarity index 99%
rename from app/src/main/java/com/amaze/filemanager/fragments/ProcessViewer.java
rename to app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
index b255c8eb5..d2a66d0c9 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewer.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/ProcessViewerFragment.java
@@ -64,7 +64,7 @@ import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
 import java.util.ArrayList;
 import java.util.concurrent.TimeUnit;
 
-public class ProcessViewer extends Fragment {
+public class ProcessViewerFragment extends Fragment {
 
     boolean isInitialized = false;
     SharedPreferences sharedPrefs;
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/ZipViewer.java b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
similarity index 99%
rename from app/src/main/java/com/amaze/filemanager/fragments/ZipViewer.java
rename to app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
index c1cdb471e..26cc5db4c 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/ZipViewer.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
@@ -73,7 +73,7 @@ import java.io.File;
 import java.util.ArrayList;
 import java.util.Calendar;
 
-public class ZipViewer extends Fragment implements BottomBarButtonPath {
+public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath {
 
     private static final int ZIP_FILE = 0, RAR_FILE = 1;
 
@@ -101,6 +101,7 @@ public class ZipViewer extends Fragment implements BottomBarButtonPath {
     public RarAdapter rarAdapter;
     public ActionMode mActionMode;
     public boolean coloriseIcons, showSize, showLastModified, gobackitem;
+    ZipExplorerFragment zipExplorerFragment = this;
     public Archive archive;
     public ArrayList<FileHeader> wholelistRar = new ArrayList<>();
     public ArrayList<FileHeader> elementsRar = new ArrayList<>();
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/Preffrag.java b/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/PrefFrag.java
similarity index 99%
rename from app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/Preffrag.java
rename to app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/PrefFrag.java
index 36b06cffd..1f6042d67 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/Preffrag.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/preference_fragments/PrefFrag.java
@@ -58,7 +58,7 @@ import java.util.List;
 
 import static com.amaze.filemanager.R.string.feedback;
 
-public class Preffrag extends PreferenceFragment implements Preference.OnPreferenceClickListener {
+public class PrefFrag extends PreferenceFragment implements Preference.OnPreferenceClickListener {
 
     private static final String PREFERENCE_KEY_ABOUT = "about";
     private static final String[] PREFERENCE_KEYS =
diff --git a/app/src/main/java/com/amaze/filemanager/services/CopyService.java b/app/src/main/java/com/amaze/filemanager/services/CopyService.java
index ca86f4b30..9fd035c8b 100644
--- a/app/src/main/java/com/amaze/filemanager/services/CopyService.java
+++ b/app/src/main/java/com/amaze/filemanager/services/CopyService.java
@@ -46,6 +46,7 @@ import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HFile;
 import com.amaze.filemanager.filesystem.Operations;
 import com.amaze.filemanager.filesystem.RootHelper;
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.DataPackage;
 import com.amaze.filemanager.utils.files.Futils;
@@ -444,7 +445,7 @@ public class CopyService extends Service {
 
     /**
      * Publish the results of the progress to notification and {@link DataPackage}
-     * and eventually to {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * and eventually to {@link ProcessViewerFragment}
      *
      * @param id             id of current service
      * @param fileName       file name of current file being copied
@@ -592,10 +593,10 @@ public class CopyService extends Service {
 
     /**
      * Returns the {@link #dataPackages} list which contains
-     * data to be transferred to {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * data to be transferred to {@link ProcessViewerFragment}
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @return
      */
@@ -611,7 +612,7 @@ public class CopyService extends Service {
      * Puts a {@link DataPackage} into a list
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @param dataPackage
      */
diff --git a/app/src/main/java/com/amaze/filemanager/services/DeleteTask.java b/app/src/main/java/com/amaze/filemanager/services/DeleteTask.java
index f51aa5ed5..b0d9f7ad8 100644
--- a/app/src/main/java/com/amaze/filemanager/services/DeleteTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/DeleteTask.java
@@ -33,8 +33,7 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.database.CryptHandler;
 import com.amaze.filemanager.exceptions.RootNotPermittedException;
 import com.amaze.filemanager.filesystem.BaseFile;
-import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.fragments.ZipViewer;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.OTGUtil;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
@@ -50,7 +49,7 @@ public class DeleteTask extends AsyncTask<ArrayList<BaseFile>, String, Boolean>
     private ArrayList<BaseFile> files;
     private Context cd;
     private boolean rootMode;
-    private ZipViewer zipViewer;
+    private ZipExplorerFragment zipExplorerFragment;
     private DataUtils dataUtils = DataUtils.getInstance();
 
     public DeleteTask(ContentResolver c, Context cd) {
@@ -58,10 +57,10 @@ public class DeleteTask extends AsyncTask<ArrayList<BaseFile>, String, Boolean>
         rootMode = PreferenceManager.getDefaultSharedPreferences(cd).getBoolean("rootmode", false);
     }
 
-    public DeleteTask(ContentResolver c, Context cd, ZipViewer zipViewer) {
+    public DeleteTask(ContentResolver c, Context cd, ZipExplorerFragment zipExplorerFragment) {
         this.cd = cd;
         rootMode = PreferenceManager.getDefaultSharedPreferences(cd).getBoolean("rootmode", false);
-        this.zipViewer = zipViewer;
+        this.zipExplorerFragment = zipExplorerFragment;
     }
 
     @Override
@@ -167,12 +166,12 @@ public class DeleteTask extends AsyncTask<ArrayList<BaseFile>, String, Boolean>
 
         if (!b) {
             Toast.makeText(cd, cd.getResources().getString(R.string.error), Toast.LENGTH_SHORT).show();
-        } else if (zipViewer==null) {
+        } else if (zipExplorerFragment ==null) {
             Toast.makeText(cd, cd.getResources().getString(R.string.done), Toast.LENGTH_SHORT).show();
         }
 
-        if (zipViewer!=null) {
-            zipViewer.files.clear();
+        if (zipExplorerFragment !=null) {
+            zipExplorerFragment.files.clear();
         }
     }
 
diff --git a/app/src/main/java/com/amaze/filemanager/services/EncryptService.java b/app/src/main/java/com/amaze/filemanager/services/EncryptService.java
index 2476d1321..2614ce1e2 100644
--- a/app/src/main/java/com/amaze/filemanager/services/EncryptService.java
+++ b/app/src/main/java/com/amaze/filemanager/services/EncryptService.java
@@ -18,6 +18,7 @@ import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HFile;
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.files.CryptUtil;
 import com.amaze.filemanager.utils.DataPackage;
 import com.amaze.filemanager.utils.OpenMode;
@@ -322,10 +323,10 @@ public class EncryptService extends Service {
 
     /**
      * Returns the {@link #dataPackages} list which contains
-     * data to be transferred to {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * data to be transferred to {@link ProcessViewerFragment}
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      * @return
      */
     public synchronized DataPackage getDataPackage(int index) {
@@ -340,7 +341,7 @@ public class EncryptService extends Service {
      * Puts a {@link DataPackage} into a list
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      * @param dataPackage
      */
     private synchronized void putDataPackage(DataPackage dataPackage) {
diff --git a/app/src/main/java/com/amaze/filemanager/services/ExtractService.java b/app/src/main/java/com/amaze/filemanager/services/ExtractService.java
index 42eb112b0..da1671c16 100644
--- a/app/src/main/java/com/amaze/filemanager/services/ExtractService.java
+++ b/app/src/main/java/com/amaze/filemanager/services/ExtractService.java
@@ -39,6 +39,7 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.utils.application.AppConfig;
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.DataPackage;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
 import com.amaze.filemanager.utils.ProgressHandler;
@@ -680,10 +681,10 @@ public class ExtractService extends Service {
 
     /**
      * Returns the {@link #dataPackages} list which contains
-     * data to be transferred to {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * data to be transferred to {@link ProcessViewerFragment}
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @return
      */
@@ -699,7 +700,7 @@ public class ExtractService extends Service {
      * Puts a {@link DataPackage} into a list
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @param dataPackage
      */
diff --git a/app/src/main/java/com/amaze/filemanager/services/ZipTask.java b/app/src/main/java/com/amaze/filemanager/services/ZipTask.java
index d50a10dc7..c363b7c04 100644
--- a/app/src/main/java/com/amaze/filemanager/services/ZipTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/ZipTask.java
@@ -38,6 +38,7 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.FileUtil;
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.utils.DataPackage;
 import com.amaze.filemanager.utils.files.Futils;
 import com.amaze.filemanager.utils.files.GenericCopyUtil;
@@ -330,10 +331,10 @@ public class ZipTask extends Service {
 
     /**
      * Returns the {@link #dataPackages} list which contains
-     * data to be transferred to {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * data to be transferred to {@link ProcessViewerFragment}
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @return
      */
@@ -349,7 +350,7 @@ public class ZipTask extends Service {
      * Puts a {@link DataPackage} into a list
      * Method call is synchronized so as to avoid modifying the list
      * by {@link ServiceWatcherUtil#handlerThread} while {@link MainActivity#runOnUiThread(Runnable)}
-     * is executing the callbacks in {@link com.amaze.filemanager.fragments.ProcessViewer}
+     * is executing the callbacks in {@link ProcessViewerFragment}
      *
      * @param dataPackage
      */
diff --git a/app/src/main/java/com/amaze/filemanager/services/asynctasks/RarHelperTask.java b/app/src/main/java/com/amaze/filemanager/services/asynctasks/RarHelperTask.java
index b2215b7f1..be39e31d4 100644
--- a/app/src/main/java/com/amaze/filemanager/services/asynctasks/RarHelperTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/asynctasks/RarHelperTask.java
@@ -6,7 +6,7 @@ package com.amaze.filemanager.services.asynctasks;
 
 import android.os.AsyncTask;
 
-import com.amaze.filemanager.fragments.ZipViewer;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.github.junrar.Archive;
 import com.github.junrar.rarfile.FileHeader;
 
@@ -20,16 +20,16 @@ import java.util.Comparator;
  */
 public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>> {
 
-    ZipViewer zipViewer;
+    ZipExplorerFragment zipExplorerFragment;
     String dir;
 
     /**
      * AsyncTask to load RAR file items.
-     * @param zipViewer the zipViewer fragment instance
+     * @param zipExplorerFragment the zipExplorerFragment fragment instance
      * @param dir
      */
-    public RarHelperTask(ZipViewer zipViewer, String dir) {
-        this.zipViewer = zipViewer;
+    public RarHelperTask(ZipExplorerFragment zipExplorerFragment, String dir) {
+        this.zipExplorerFragment = zipExplorerFragment;
         this.dir = dir;
     }
 
@@ -37,7 +37,7 @@ public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>>
     protected void onPreExecute() {
         super.onPreExecute();
 
-        zipViewer.swipeRefreshLayout.setRefreshing(true);
+        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
     }
 
     @Override
@@ -45,18 +45,18 @@ public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>>
         ArrayList<FileHeader> elements = new ArrayList<>();
         try {
             Archive zipfile = new Archive(params[0]);
-            zipViewer.archive = zipfile;
-            if (zipViewer.wholelistRar.size() == 0) {
+            zipExplorerFragment.archive = zipfile;
+            if (zipExplorerFragment.wholelistRar.size() == 0) {
 
                 FileHeader fh = zipfile.nextFileHeader();
                 while (fh != null) {
-                    zipViewer.wholelistRar.add(fh);
+                    zipExplorerFragment.wholelistRar.add(fh);
                     fh = zipfile.nextFileHeader();
                 }
             }
             if (dir == null || dir.trim().length() == 0 || dir.equals("")) {
 
-                for (FileHeader header : zipViewer.wholelistRar) {
+                for (FileHeader header : zipExplorerFragment.wholelistRar) {
                     String name = header.getFileNameString();
 
                     if (!name.contains("\\")) {
@@ -65,7 +65,7 @@ public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>>
                     }
                 }
             } else {
-                for (FileHeader header : zipViewer.wholelistRar) {
+                for (FileHeader header : zipExplorerFragment.wholelistRar) {
                     String name = header.getFileNameString();
                     if (name.substring(0, name.lastIndexOf("\\")).equals(dir)) {
                         elements.add(header);
@@ -82,8 +82,8 @@ public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>>
     @Override
     protected void onPostExecute(ArrayList<FileHeader> zipEntries) {
         super.onPostExecute(zipEntries);
-        zipViewer.swipeRefreshLayout.setRefreshing(false);
-        zipViewer.createRarViews(zipEntries, dir);
+        zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
+        zipExplorerFragment.createRarViews(zipEntries, dir);
     }
 
     private class FileListSorter implements Comparator<FileHeader> {
diff --git a/app/src/main/java/com/amaze/filemanager/services/asynctasks/ZipHelperTask.java b/app/src/main/java/com/amaze/filemanager/services/asynctasks/ZipHelperTask.java
index dd5980a2a..ae2d2f4cc 100644
--- a/app/src/main/java/com/amaze/filemanager/services/asynctasks/ZipHelperTask.java
+++ b/app/src/main/java/com/amaze/filemanager/services/asynctasks/ZipHelperTask.java
@@ -3,7 +3,7 @@ package com.amaze.filemanager.services.asynctasks;
 import android.net.Uri;
 import android.os.AsyncTask;
 
-import com.amaze.filemanager.fragments.ZipViewer;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.amaze.filemanager.ui.ZipObj;
 
 import java.io.File;
@@ -20,44 +20,44 @@ import java.util.zip.ZipInputStream;
  */
 public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObj>> {
 
-    ZipViewer zipViewer;
+    ZipExplorerFragment zipExplorerFragment;
     String dir;
 
     /**
      * AsyncTask to load ZIP file items.
-     * @param zipViewer the zipViewer fragment instance
+     * @param zipExplorerFragment the zipExplorerFragment fragment instance
      * @param dir
      */
-    public ZipHelperTask(ZipViewer zipViewer, String dir) {
-        this.zipViewer = zipViewer;
+    public ZipHelperTask(ZipExplorerFragment zipExplorerFragment, String dir) {
+        this.zipExplorerFragment = zipExplorerFragment;
         this.dir = dir;
-        zipViewer.swipeRefreshLayout.setRefreshing(true);
+        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
     }
 
     @Override
     protected void onPreExecute() {
         super.onPreExecute();
-        zipViewer.swipeRefreshLayout.setRefreshing(true);
+        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
     }
 
     @Override
     protected ArrayList<ZipObj> doInBackground(String... params) {
         ArrayList<ZipObj> elements = new ArrayList<>();
         try {
-            if (zipViewer.wholelist.size() == 0) {
+            if (zipExplorerFragment.wholelist.size() == 0) {
                 Uri uri = Uri.parse(params[0]);
                 if (new File(uri.getPath()).canRead()) {
                     ZipFile zipfile = new ZipFile(uri.getPath());
                     for (Enumeration e = zipfile.entries(); e.hasMoreElements(); ) {
                         ZipEntry entry = (ZipEntry) e.nextElement();
-                        zipViewer.wholelist.add(new ZipObj(entry, entry.getTime(), entry.getSize(), entry.isDirectory()));
+                        zipExplorerFragment.wholelist.add(new ZipObj(entry, entry.getTime(), entry.getSize(), entry.isDirectory()));
                     }
                 } else {
                     ZipEntry entry1;
-                    if (zipViewer.wholelist.size() == 0) {
-                        ZipInputStream zipfile1 = new ZipInputStream(zipViewer.getActivity().getContentResolver().openInputStream(uri));
+                    if (zipExplorerFragment.wholelist.size() == 0) {
+                        ZipInputStream zipfile1 = new ZipInputStream(zipExplorerFragment.getActivity().getContentResolver().openInputStream(uri));
                         while ((entry1 = zipfile1.getNextEntry()) != null) {
-                            zipViewer.wholelist.add(new ZipObj(entry1, entry1.getTime(), entry1.getSize(), entry1.isDirectory()));
+                            zipExplorerFragment.wholelist.add(new ZipObj(entry1, entry1.getTime(), entry1.getSize(), entry1.isDirectory()));
                         }
                     }
                 }
@@ -65,7 +65,7 @@ public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObj>> {
             ArrayList<String> strings = new ArrayList<>();
             //  int fileCount = zipfile.size();
 
-            for (ZipObj entry : zipViewer.wholelist) {
+            for (ZipObj entry : zipExplorerFragment.wholelist) {
 
                 String s = entry.getName();
                 //  System.out.println(s);
@@ -120,17 +120,17 @@ public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObj>> {
         }
 
         Collections.sort(elements, new FileListSorter());
-        if (zipViewer.gobackitem && dir != null && dir.trim().length() != 0)
+        if (zipExplorerFragment.gobackitem && dir != null && dir.trim().length() != 0)
             elements.add(0, new ZipObj(null, 0, 0, true));
-        zipViewer.elements = elements;
+        zipExplorerFragment.elements = elements;
         return elements;
     }
 
     @Override
     protected void onPostExecute(ArrayList<ZipObj> zipEntries) {
         super.onPostExecute(zipEntries);
-        zipViewer.swipeRefreshLayout.setRefreshing(false);
-        zipViewer.createZipViews(zipEntries, dir);
+        zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
+        zipExplorerFragment.createZipViews(zipEntries, dir);
     }
 
     private class FileListSorter implements Comparator<ZipObj> {
diff --git a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
index 5765873a4..7a2638104 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
@@ -14,7 +14,7 @@ import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.fragments.MainFragment;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.services.EncryptService;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.utils.DataUtils;
@@ -159,18 +159,18 @@ public class ItemPopupMenu extends PopupMenu implements PopupMenu.OnMenuItemClic
                             @Override
                             public void onButtonPressed(Intent intent) throws Exception {
                                 // check if a master password or fingerprint is set
-                                if (!preferences.getString(Preffrag.PREFERENCE_CRYPT_MASTER_PASSWORD,
-                                        Preffrag.PREFERENCE_CRYPT_MASTER_PASSWORD_DEFAULT).equals("")) {
+                                if (!preferences.getString(PrefFrag.PREFERENCE_CRYPT_MASTER_PASSWORD,
+                                        PrefFrag.PREFERENCE_CRYPT_MASTER_PASSWORD_DEFAULT).equals("")) {
 
                                     EncryptDecryptUtils.startEncryption(context,
                                             rowItem.generateBaseFile().getPath(),
-                                            Preffrag.ENCRYPT_PASSWORD_MASTER, encryptIntent);
-                                } else if (preferences.getBoolean(Preffrag.PREFERENCE_CRYPT_FINGERPRINT,
-                                        Preffrag.PREFERENCE_CRYPT_FINGERPRINT_DEFAULT)) {
+                                            PrefFrag.ENCRYPT_PASSWORD_MASTER, encryptIntent);
+                                } else if (preferences.getBoolean(PrefFrag.PREFERENCE_CRYPT_FINGERPRINT,
+                                        PrefFrag.PREFERENCE_CRYPT_FINGERPRINT_DEFAULT)) {
 
                                     EncryptDecryptUtils.startEncryption(context,
                                             rowItem.generateBaseFile().getPath(),
-                                            Preffrag.ENCRYPT_PASSWORD_FINGERPRINT, encryptIntent);
+                                            PrefFrag.ENCRYPT_PASSWORD_FINGERPRINT, encryptIntent);
                                 } else {
                                     // let's ask a password from user
                                     GeneralDialogCreation.showEncryptAuthenticateDialog(context, encryptIntent,
@@ -184,8 +184,8 @@ public class ItemPopupMenu extends PopupMenu implements PopupMenu.OnMenuItemClic
                             }
                         };
 
-                if (preferences.getBoolean(Preffrag.PREFERENCE_CRYPT_WARNING_REMEMBER,
-                        Preffrag.PREFERENCE_CRYPT_WARNING_REMEMBER_DEFAULT)) {
+                if (preferences.getBoolean(PrefFrag.PREFERENCE_CRYPT_WARNING_REMEMBER,
+                        PrefFrag.PREFERENCE_CRYPT_WARNING_REMEMBER_DEFAULT)) {
                     // let's skip warning dialog call
                     try {
                         encryptButtonCallbackInterface.onButtonPressed(encryptIntent);
diff --git a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
index 57abb22b4..6e9c419a6 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
@@ -39,9 +39,9 @@ import com.amaze.filemanager.exceptions.RootNotPermittedException;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.HFile;
 import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.fragments.AppsList;
+import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.fragments.MainFragment;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.services.asynctasks.CountItemsOrAndSize;
 import com.amaze.filemanager.services.asynctasks.GenerateHashes;
 import com.amaze.filemanager.services.asynctasks.LoadFolderSpaceData;
@@ -615,7 +615,7 @@ public class GeneralDialogCreation {
         builder.onNegative(new MaterialDialog.SingleButtonCallback() {
             @Override
             public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
-                preferences.edit().putBoolean(Preffrag.PREFERENCE_CRYPT_WARNING_REMEMBER, true).apply();
+                preferences.edit().putBoolean(PrefFrag.PREFERENCE_CRYPT_WARNING_REMEMBER, true).apply();
                 try {
                     encryptButtonCallbackInterface.onButtonPressed(intent);
                 } catch (Exception e) {
@@ -909,7 +909,7 @@ public class GeneralDialogCreation {
         a.build().show();
     }
 
-    public static void showSortDialog(final AppsList m, AppTheme appTheme) {
+    public static void showSortDialog(final AppsListFragment m, AppTheme appTheme) {
         int accentColor = ((ThemedActivity) m.getActivity()).getColorPreference().getColor(ColorUsage.ACCENT);
         String[] sort = m.getResources().getStringArray(R.array.sortbyApps);
         int current = Integer.parseInt(m.Sp.getString("sortbyApps", "0"));
@@ -930,7 +930,7 @@ public class GeneralDialogCreation {
 
                 m.Sp.edit().putString("sortbyApps", "" + dialog.getSelectedIndex()).commit();
                 m.getSortModes();
-                m.getLoaderManager().restartLoader(AppsList.ID_LOADER_APP_LIST, null, m);
+                m.getLoaderManager().restartLoader(AppsListFragment.ID_LOADER_APP_LIST, null, m);
                 dialog.dismiss();
             }
         });
@@ -941,7 +941,7 @@ public class GeneralDialogCreation {
 
                 m.Sp.edit().putString("sortbyApps", "" + (dialog.getSelectedIndex() + 3)).commit();
                 m.getSortModes();
-                m.getLoaderManager().restartLoader(AppsList.ID_LOADER_APP_LIST, null, m);
+                m.getLoaderManager().restartLoader(AppsListFragment.ID_LOADER_APP_LIST, null, m);
                 dialog.dismiss();
             }
         });
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java b/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
index fe53bac73..2b413a82c 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/appbar/BottomBar.java
@@ -28,8 +28,8 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.fragments.TabFragment;
-import com.amaze.filemanager.fragments.ZipViewer;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.utils.BottomBarButtonPath;
 import com.amaze.filemanager.utils.MainActivityHelper;
@@ -121,7 +121,7 @@ public class BottomBar implements View.OnTouchListener{
             }
         };
 
-        allowChangePaths = mainActivity.get().sharedPref.getBoolean(Preffrag.PREFERENCE_CHANGEPATHS, false);
+        allowChangePaths = mainActivity.get().sharedPref.getBoolean(PrefFrag.PREFERENCE_CHANGEPATHS, false);
 
         gestureDetector = new GestureDetector(a.getApplicationContext(), new GestureDetector.SimpleOnGestureListener() {
             @Override
@@ -140,7 +140,7 @@ public class BottomBar implements View.OnTouchListener{
                         timer.start();
                         showButtons(m);
                     }
-                } else if (fragmentAtFrame instanceof ZipViewer) {
+                } else if (fragmentAtFrame instanceof ZipExplorerFragment) {
                     Futils.crossfade(buttons, pathLayout);
                     timer.cancel();
                     timer.start();
diff --git a/app/src/main/java/com/amaze/filemanager/utils/DataPackage.java b/app/src/main/java/com/amaze/filemanager/utils/DataPackage.java
index 62f1c3d94..4252bd9a1 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/DataPackage.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/DataPackage.java
@@ -3,12 +3,14 @@ package com.amaze.filemanager.utils;
 import android.os.Parcel;
 import android.os.Parcelable;
 
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
+
 /**
  * Created by Arpit on 01-08-2015.
  *
  * Class stores the {@link com.amaze.filemanager.services.CopyService} progress variables.
  * This class also acts as a middle layer to communicate with
- * {@link com.amaze.filemanager.fragments.ProcessViewer}
+ * {@link ProcessViewerFragment}
  */
 public class DataPackage implements Parcelable {
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java b/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
index 044a6d3f3..980566084 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/ProgressHandler.java
@@ -1,11 +1,13 @@
 package com.amaze.filemanager.utils;
 
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
+
 /**
  * Created by arpitkh96 on 18/8/16.
  *
  * Base class to handle progress of services operation
  * Utilized for generation of notification,
- * talking to {@link com.amaze.filemanager.fragments.ProcessViewer} through
+ * talking to {@link ProcessViewerFragment} through
  * {@link com.amaze.filemanager.utils.DataPackage}
  *
  */
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java b/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
index ac412a8b5..5b3da60ce 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
@@ -14,6 +14,7 @@ import com.amaze.filemanager.exceptions.CryptException;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HFile;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ProgressHandler;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
@@ -63,8 +64,8 @@ import javax.security.auth.x500.X500Principal;
  * The service then calls the constructor which fires up the subsequent encryption/decryption process.
  *
  * We differentiate between already encrypted files from <i>new ones</i> by encrypting the plaintext
- * {@link com.amaze.filemanager.fragments.preference_fragments.Preffrag#ENCRYPT_PASSWORD_MASTER}
- * and {@link com.amaze.filemanager.fragments.preference_fragments.Preffrag#ENCRYPT_PASSWORD_FINGERPRINT}
+ * {@link PrefFrag#ENCRYPT_PASSWORD_MASTER}
+ * and {@link PrefFrag#ENCRYPT_PASSWORD_FINGERPRINT}
  * against the path in database. At the time of decryption, we check for these values
  * and either retrieve master password from preferences or fire up the fingerprint sensor authentication.
  *
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/EncryptDecryptUtils.java b/app/src/main/java/com/amaze/filemanager/utils/files/EncryptDecryptUtils.java
index 75edf2226..0512a02cf 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/EncryptDecryptUtils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/EncryptDecryptUtils.java
@@ -5,7 +5,6 @@ import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Build;
 import android.preference.PreferenceManager;
-import android.util.Log;
 import android.widget.Toast;
 
 import com.amaze.filemanager.R;
@@ -15,7 +14,7 @@ import com.amaze.filemanager.database.models.EncryptedEntry;
 import com.amaze.filemanager.exceptions.CryptException;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.fragments.MainFragment;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.services.EncryptService;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.utils.OpenMode;
@@ -98,7 +97,7 @@ public class EncryptDecryptUtils {
         }
 
         switch (encryptedEntry.getPassword()) {
-            case Preffrag.ENCRYPT_PASSWORD_FINGERPRINT:
+            case PrefFrag.ENCRYPT_PASSWORD_FINGERPRINT:
                 try {
                     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                         GeneralDialogCreation.showDecryptFingerprintDialog(c,
@@ -112,12 +111,12 @@ public class EncryptDecryptUtils {
                             Toast.LENGTH_LONG).show();
                 }
                 break;
-            case Preffrag.ENCRYPT_PASSWORD_MASTER:
+            case PrefFrag.ENCRYPT_PASSWORD_MASTER:
                 try {
                     GeneralDialogCreation.showDecryptDialog(c,
                             mainActivity, decryptIntent, utilsProvider.getAppTheme(),
-                            CryptUtil.decryptPassword(c, preferences1.getString(Preffrag.PREFERENCE_CRYPT_MASTER_PASSWORD,
-                                    Preffrag.PREFERENCE_CRYPT_MASTER_PASSWORD_DEFAULT)), decryptButtonCallbackInterface);
+                            CryptUtil.decryptPassword(c, preferences1.getString(PrefFrag.PREFERENCE_CRYPT_MASTER_PASSWORD,
+                                    PrefFrag.PREFERENCE_CRYPT_MASTER_PASSWORD_DEFAULT)), decryptButtonCallbackInterface);
                 } catch (CryptException e) {
                     e.printStackTrace();
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java b/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java
index 800658e31..5c382f440 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/Futils.java
@@ -52,7 +52,7 @@ import com.amaze.filemanager.activities.DatabaseViewerActivity;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.HFile;
-import com.amaze.filemanager.fragments.preference_fragments.Preffrag;
+import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.ui.LayoutElement;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.ui.icons.Icons;
@@ -1032,9 +1032,9 @@ public class Futils {
 
     public static boolean isPathAccesible(String dir, SharedPreferences pref) {
         File f = new File(dir);
-        boolean showIfHidden = pref.getBoolean(Preffrag.PREFERENCE_SHOW_HIDDENFILES, false),
+        boolean showIfHidden = pref.getBoolean(PrefFrag.PREFERENCE_SHOW_HIDDENFILES, false),
                 isDirSelfOrParent = dir.endsWith("/.") || dir.endsWith("/.."),
-                showIfRoot = pref.getBoolean(Preffrag.PREFERENCE_ROOTMODE, false);
+                showIfRoot = pref.getBoolean(PrefFrag.PREFERENCE_ROOTMODE, false);
 
         return f.exists() && f.isDirectory()
                 && (!f.isHidden() || (showIfHidden && !isDirSelfOrParent))
diff --git a/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java b/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
index 79ae94074..923c31153 100644
--- a/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
+++ b/app/src/play/java/com/amaze/filemanager/activities/MainActivity.java
@@ -97,15 +97,15 @@ import com.amaze.filemanager.filesystem.BaseFile;
 import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HFile;
 import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.fragments.AppsList;
+import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.fragments.CloudSheetFragment;
 import com.amaze.filemanager.fragments.CloudSheetFragment.CloudConnectionCallbacks;
 import com.amaze.filemanager.fragments.FTPServerFragment;
 import com.amaze.filemanager.fragments.MainFragment;
-import com.amaze.filemanager.fragments.ProcessViewer;
+import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.fragments.SearchWorkerFragment;
 import com.amaze.filemanager.fragments.TabFragment;
-import com.amaze.filemanager.fragments.ZipViewer;
+import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.amaze.filemanager.fragments.preference_fragments.QuickAccessPref;
 import com.amaze.filemanager.services.CopyService;
 import com.amaze.filemanager.services.DeleteTask;
@@ -164,8 +164,8 @@ import java.util.regex.Pattern;
 import eu.chainfire.libsuperuser.Shell;
 
 import static android.os.Build.VERSION.SDK_INT;
-import static com.amaze.filemanager.fragments.preference_fragments.Preffrag.PREFERENCE_SHOW_SIDEBAR_FOLDERS;
-import static com.amaze.filemanager.fragments.preference_fragments.Preffrag.PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES;
+import static com.amaze.filemanager.fragments.preference_fragments.PrefFrag.PREFERENCE_SHOW_SIDEBAR_FOLDERS;
+import static com.amaze.filemanager.fragments.preference_fragments.PrefFrag.PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES;
 
 public class MainActivity extends ThemedActivity implements
         GoogleApiClient.ConnectionCallbacks,
@@ -487,7 +487,7 @@ public class MainActivity extends ThemedActivity implements
                 if (savedInstanceState == null) {
                     if (openProcesses) {
                         FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
-                        transaction.replace(R.id.content_frame, new ProcessViewer(), KEY_INTENT_PROCESS_VIEWER);
+                        transaction.replace(R.id.content_frame, new ProcessViewerFragment(), KEY_INTENT_PROCESS_VIEWER);
                         //transaction.addToBackStack(null);
                         selectedStorage = SELECT_102;
                         openProcesses = false;
@@ -742,25 +742,25 @@ public class MainActivity extends ThemedActivity implements
             } else {
                 getCurrentMainFragment().goBack();
             }
-        } else if (fragment instanceof ZipViewer) {
-            ZipViewer zipViewer = (ZipViewer) getSupportFragmentManager().findFragmentById(R.id.content_frame);
-            if (zipViewer.mActionMode == null) {
-                if (zipViewer.canGoBack()) {
-                    zipViewer.goBack();
+        } else if (fragment instanceof ZipExplorerFragment) {
+            ZipExplorerFragment zipExplorerFragment = (ZipExplorerFragment) getSupportFragmentManager().findFragmentById(R.id.content_frame);
+            if (zipExplorerFragment.mActionMode == null) {
+                if (zipExplorerFragment.canGoBack()) {
+                    zipExplorerFragment.goBack();
                 } else if (openzip) {
                     openzip = false;
                     finish();
                 } else {
                     FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
                     fragmentTransaction.setCustomAnimations(R.anim.slide_out_bottom, R.anim.slide_out_bottom);
-                    fragmentTransaction.remove(zipViewer);
+                    fragmentTransaction.remove(zipExplorerFragment);
                     fragmentTransaction.commit();
                     supportInvalidateOptionsMenu();
                     floatingActionButton.setVisibility(View.VISIBLE);
                     floatingActionButton.showMenuButton(true);
                 }
             } else {
-                zipViewer.mActionMode.finish();
+                zipExplorerFragment.mActionMode.finish();
             }
         } else if (fragment instanceof FTPServerFragment) {
             //returning back from FTP server
@@ -991,7 +991,7 @@ public class MainActivity extends ThemedActivity implements
             menu.findItem(R.id.extract).setVisible(false);
             invalidatePasteButton(menu.findItem(R.id.paste));
             findViewById(R.id.buttonbarframe).setVisibility(View.VISIBLE);
-        } else if (fragmentName.contains("AppsList") || fragmentName.contains("ProcessViewer") ||
+        } else if (fragmentName.contains("AppsListFragment") || fragmentName.contains("ProcessViewerFragment") ||
                 fragmentName.contains(FTPServerFragment.class.getName())) {
             appBarLayout.setExpanded(true);
             menu.findItem(R.id.sethome).setVisible(false);
@@ -1001,7 +1001,7 @@ public class MainActivity extends ThemedActivity implements
             menu.findItem(R.id.home).setVisible(false);
             menu.findItem(R.id.history).setVisible(false);
             menu.findItem(R.id.extract).setVisible(false);
-            if (fragmentName.contains("ProcessViewer")) menu.findItem(R.id.sort).setVisible(false);
+            if (fragmentName.contains("ProcessViewerFragment")) menu.findItem(R.id.sort).setVisible(false);
             else {
                 menu.findItem(R.id.dsort).setVisible(false);
                 menu.findItem(R.id.sortby).setVisible(false);
@@ -1009,7 +1009,7 @@ public class MainActivity extends ThemedActivity implements
             menu.findItem(R.id.hiddenitems).setVisible(false);
             menu.findItem(R.id.view).setVisible(false);
             menu.findItem(R.id.paste).setVisible(false);
-        } else if (fragmentName.contains("ZipViewer")) {
+        } else if (fragmentName.contains("ZipExplorerFragment")) {
             menu.findItem(R.id.sethome).setVisible(false);
             if (indicator_layout != null) indicator_layout.setVisibility(View.GONE);
             getAppbar().getBottomBar().resetClickListener();
@@ -1091,8 +1091,8 @@ public class MainActivity extends ThemedActivity implements
                 break;
             case R.id.sort:
                 Fragment fragment = getFragmentAtFrame();
-                if (fragment.getClass().getName().contains("AppsList"))
-                    GeneralDialogCreation.showSortDialog((AppsList) fragment, getAppTheme());
+                if (fragment.getClass().getName().contains("AppsListFragment"))
+                    GeneralDialogCreation.showSortDialog((AppsListFragment) fragment, getAppTheme());
                 break;
             case R.id.sortby:
                 if (ma != null)
@@ -1182,8 +1182,8 @@ public class MainActivity extends ThemedActivity implements
                 break;
             case R.id.extract:
                 Fragment fragment1 = getSupportFragmentManager().findFragmentById(R.id.content_frame);
-                if (fragment1.getClass().getName().contains("ZipViewer"))
-                    mainActivityHelper.extractFile(((ZipViewer) fragment1).f);
+                if (fragment1.getClass().getName().contains("ZipExplorerFragment"))
+                    mainActivityHelper.extractFile(((ZipExplorerFragment) fragment1).f);
                 break;
             case R.id.search:
                 getAppbar().getSearchView().revealSearchView();
@@ -1352,7 +1352,7 @@ public class MainActivity extends ThemedActivity implements
         appBarLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
         FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
         fragmentTransaction.setCustomAnimations(R.anim.slide_in_top, R.anim.slide_in_bottom);
-        Fragment zipFragment = new ZipViewer();
+        Fragment zipFragment = new ZipExplorerFragment();
         Bundle bundle = new Bundle();
         bundle.putString("path", path);
         zipFragment.setArguments(bundle);
@@ -1892,7 +1892,7 @@ public class MainActivity extends ThemedActivity implements
             @Override
             public void onClick(View v) {
                 android.support.v4.app.FragmentTransaction transaction2 = getSupportFragmentManager().beginTransaction();
-                transaction2.replace(R.id.content_frame, new AppsList());
+                transaction2.replace(R.id.content_frame, new AppsListFragment());
                 appBarLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
                 pending_fragmentTransaction = transaction2;
                 if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
@@ -2110,7 +2110,7 @@ public class MainActivity extends ThemedActivity implements
 
         } else if ((openProcesses = i.getBooleanExtra(KEY_INTENT_PROCESS_VIEWER, false))) {
             FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
-            transaction.replace(R.id.content_frame, new ProcessViewer(), KEY_INTENT_PROCESS_VIEWER);
+            transaction.replace(R.id.content_frame, new ProcessViewerFragment(), KEY_INTENT_PROCESS_VIEWER);
             //   transaction.addToBackStack(null);
             selectedStorage = SELECT_102;
             openProcesses = false;
