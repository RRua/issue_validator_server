diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
index 0b83809..1407463 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/Navigation.java
@@ -8,7 +8,6 @@ import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.usbinfo.BaseInfoFragment;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.InfoFragmentFactory;
 import aws.apps.usbDeviceEnumerator.ui.usbinfo.UsbInfoActivity;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
@@ -26,8 +25,7 @@ public class Navigation {
 
     public void showAndroidUsbDeviceInfo(String device) {
         if (isSmallScreen()) {
-            Intent i = new Intent(activity.getApplicationContext(), UsbInfoActivity.class);
-            i.putExtra(UsbInfoActivity.EXTRA_TYPE, BaseInfoFragment.TYPE_ANDROID_INFO);
+            final Intent i = new Intent(activity.getApplicationContext(), UsbInfoActivity.class);
             i.putExtra(UsbInfoActivity.EXTRA_DATA_ANDROID, device);
             startActivity(i);
         } else {
@@ -38,8 +36,7 @@ public class Navigation {
 
     public void showLinuxUsbDeviceInfo(SysBusUsbDevice device) {
         if (isSmallScreen()) {
-            Intent i = new Intent(activity.getApplicationContext(), UsbInfoActivity.class);
-            i.putExtra(UsbInfoActivity.EXTRA_TYPE, BaseInfoFragment.TYPE_LINUX_INFO);
+            final Intent i = new Intent(activity.getApplicationContext(), UsbInfoActivity.class);
             i.putExtra(UsbInfoActivity.EXTRA_DATA_LINUX, device);
             startActivity(i);
         } else {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
index 8808867..239a25d 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/tabs/TabController.java
@@ -67,7 +67,7 @@ public class TabController {
         tabViewHolders = new TabViewHolder[TAB_TAGS.length];
 
         for (int i = 0; i < TAB_TAGS.length; i++) {
-            views[i] = LayoutInflater.from(activity).inflate(R.layout.tab_list, viewPager, false);
+            views[i] = LayoutInflater.from(activity).inflate(R.layout.tab_device_list, viewPager, false);
             tabViewHolders[i] = new TabViewHolder(views[i]);
         }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
index 7a7c6b6..747be28 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
@@ -16,23 +16,16 @@
 package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbInterface;
 import android.hardware.usb.UsbManager;
 import android.os.Bundle;
-import android.util.Log;
+import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.LinearLayout;
 import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
 
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DbAccessCompany;
@@ -44,180 +37,123 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
     public final static int TYPE_ANDROID_INFO = 0;
     public final static int TYPE_LINUX_INFO = 1;
     public final static String DEFAULT_STRING = "???";
-    private final static String BUNDLE_USB_KEY = "BUNDLE_USBKEY";
+    private final static String EXTRA_DATA = AndroidUsbInfoFragment.class.getName() + ".BUNDLE_DATA";
+    private static final int LAYOUT_ID = R.layout.fragment_usb_info;
+
     private final String TAG = this.getClass().getName();
     private String usbKey = DEFAULT_STRING;
-    private TableLayout tblUsbInfoHeader;
-    private TableLayout tblUsbInfoTop;
-    private TableLayout tblUsbInfoBottom;
-    private TextView tvVID;
-    private TextView tvPID;
-    private TextView tvVendorDb;
-    private TextView tvProductDb;
-    private TextView tvDevicePath;
-    private TextView tvDeviceClass;
-    private ImageButton btnLogo;
+    private InfoViewHolder viewHolder;
     private UsbManager usbMan;
     private DbAccessUsb dbUsb;
     private DbAccessCompany dbComp;
     private ZipAccessCompany zipComp;
 
-    private Context context;
-
-    public AndroidUsbInfoFragment() {
-
-    }
-
-    public AndroidUsbInfoFragment(String usbKey) {
-        this.usbKey = usbKey;
-    }
-
-    private void addDataRow(LayoutInflater inflater, TableLayout tlb, String cell1Text, String cell2Text) {
-        TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
-        TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
-        TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
-        tv1.setText(cell1Text);
-        tv2.setText(cell2Text);
-        tlb.addView(row);
+    public static Fragment create(final String usbKey) {
+        final Fragment fragment = new AndroidUsbInfoFragment();
+        final Bundle bundle = new Bundle();
+        bundle.putString(EXTRA_DATA, usbKey);
+        fragment.setArguments(bundle);
+        return fragment;
     }
 
     @Override
-    public int getType() {
-        return TYPE_ANDROID_INFO;
-    }
-
-    private void loadLogo(String logo) {
-        Drawable d = context.getResources().getDrawable(R.drawable.no_image);
-        Bitmap b = zipComp.getLogo(logo);
+    public void onAttach(final Context context) {
+        super.onAttach(context);
 
-        if (b != null) {
-            d = new BitmapDrawable(b);
-        } else {
-            Log.w(TAG, "^ Bitmap is null");
-        }
+        usbMan = (UsbManager) getContext().getSystemService(Context.USB_SERVICE);
 
-        btnLogo.setImageDrawable(d);
+        dbUsb = new DbAccessUsb(context);
+        dbComp = new DbAccessCompany(context);
+        zipComp = new ZipAccessCompany(context);
     }
 
-    /**
-     * If we are being created with saved state, restore our state
-     */
     @Override
-    public void onCreate(Bundle saved) {
-        super.onCreate(saved);
-        if (null != saved) {
-            usbKey = saved.getString(BUNDLE_USB_KEY);
-        }
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        return inflater.inflate(LAYOUT_ID, container, false);
     }
 
-
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        View v = new LinearLayout(getActivity().getApplicationContext());
-        context = getActivity().getApplicationContext();
-        usbMan = (UsbManager) context.getSystemService(Context.USB_SERVICE);
-
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        viewHolder = new InfoViewHolder(view);
 
-        if (usbMan == null || usbMan.getDeviceList().get(usbKey) == null) {
-            return v;
-        } else {
-            v = inflater.inflate(R.layout.usb_info_android, container, false);
-        }
-
-        tblUsbInfoHeader = (TableLayout) v.findViewById(R.id.tblUsbInfo_title);
-        tblUsbInfoTop = (TableLayout) v.findViewById(R.id.tblUsbInfo_top);
-        tblUsbInfoBottom = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
-        tvVID = ((TextView) v.findViewById(R.id.tvVID));
-        tvPID = ((TextView) v.findViewById(R.id.tvPID));
-        tvProductDb = ((TextView) v.findViewById(R.id.tvProductDb));
-        tvVendorDb = ((TextView) v.findViewById(R.id.tvVendorDb));
-        tvDevicePath = ((TextView) v.findViewById(R.id.tvDevicePath));
-        tvDeviceClass = ((TextView) v.findViewById(R.id.tvDeviceClass));
-        btnLogo = (ImageButton) v.findViewById(R.id.btnLogo);
-        btnLogo.setImageDrawable(context.getResources().getDrawable(R.drawable.no_image));
-        dbUsb = new DbAccessUsb(context);
-        dbComp = new DbAccessCompany(context);
-        zipComp = new ZipAccessCompany(context);
+        usbKey = getArguments().getString(EXTRA_DATA, DEFAULT_STRING);
 
-        populateAndroidTable(inflater);
-
-        return v;
+        populateAndroidTable(LayoutInflater.from(getContext()));
     }
 
-    @Override
-    public void onSaveInstanceState(Bundle toSave) {
-        toSave.putString(BUNDLE_USB_KEY, usbKey);
-    }
+    private void populateAndroidTable(LayoutInflater inflater) {
+        final UsbDevice device = usbMan.getDeviceList().get(usbKey);
 
-    private String padLeft(String string, String padding, int size) {
-        String pad = "";
-        while ((pad + string).length() < size) {
-            pad += padding + pad;
+        if (device == null) {
+            return;
         }
-        return pad + string;
-    }
+        final String vid = CommonLogic.padLeft(Integer.toHexString(device.getVendorId()), "0", 4);
+        final String pid = CommonLogic.padLeft(Integer.toHexString(device.getDeviceId()), "0", 4);
+        final String deviceClass = UsbConstants.resolveUsbClass(device.getDeviceClass());
 
-    private void populateAndroidTable(LayoutInflater inflater) {
-        UsbDevice device = usbMan.getDeviceList().get(usbKey);
-        tvDevicePath.setText(usbKey);
+        viewHolder.getLogo().setImageResource(R.drawable.no_image);
 
-        if (device != null) {
-            tvVID.setText(padLeft(Integer.toHexString(device.getVendorId()), "0", 4));
-            tvPID.setText(padLeft(Integer.toHexString(device.getDeviceId()), "0", 4));
-            tvDeviceClass.setText(UsbConstants.resolveUsbClass(device.getDeviceClass()));
-            if (dbUsb.doDBChecks()) {
-                String vid = tvVID.getText().toString();
-                String pid = tvPID.getText().toString();
-                String vendor_name = dbUsb.getVendor(vid);
+        viewHolder.getVid().setText(vid);
+        viewHolder.getPid().setText(pid);
+        viewHolder.getDevicePath().setText(usbKey);
+        viewHolder.getDeviceClass().setText(deviceClass);
 
-                tvVendorDb.setText(vendor_name);
-                tvProductDb.setText(dbUsb.getProduct(vid, pid));
+        viewHolder.getReportedVendor().setText("n/a");
+        viewHolder.getReportedProduct().setText("n/a");
 
+        if (dbUsb.doDBChecks()) {
+            String vendor_name = dbUsb.getVendor(vid);
 
-                if (dbComp.doDBChecks()) {
-                    String logo = dbComp.getLogo(vendor_name);
-                    loadLogo(logo);
-                }
+            viewHolder.getVendorFromDb().setText(vendor_name);
+            viewHolder.getProductFromDb().setText(dbUsb.getProduct(vid, pid));
+
+            if (dbComp.doDBChecks()) {
+                final String logo = dbComp.getLogo(vendor_name);
+                CommonLogic.loadLogo(viewHolder.getLogo(), zipComp, logo);
             }
+        }
 
-            UsbInterface iface;
-            for (int i = 0; i < device.getInterfaceCount(); i++) {
-                iface = device.getInterface(i);
-                if (iface != null) {
-
-                    addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.interface_) + i, "");
-                    addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.class_), UsbConstants.resolveUsbClass((iface.getInterfaceClass())));
-
-                    String endpointText = getActivity().getString(R.string.none);
-                    if (iface.getEndpointCount() > 0) {
-                        UsbEndpoint endpoint;
-                        for (int j = 0; j < iface.getEndpointCount(); j++) {
-                            endpoint = iface.getEndpoint(j);
-                            endpointText = "#" + j + "\n";
-                            endpointText += getActivity().getString(R.string.address_) + endpoint.getAddress() + " (" + padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8) + ")\n";
-                            endpointText += getActivity().getString(R.string.number_) + endpoint.getEndpointNumber() + "\n";
-                            endpointText += getActivity().getString(R.string.direction_) + UsbConstants.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";
-                            endpointText += getActivity().getString(R.string.type_) + UsbConstants.resolveUsbEndpointType(endpoint.getType()) + "\n";
-                            endpointText += getActivity().getString(R.string.poll_interval_) + endpoint.getInterval() + "\n";
-                            endpointText += getActivity().getString(R.string.max_packet_size_) + endpoint.getMaxPacketSize() + "\n";
-                            endpointText += getActivity().getString(R.string.attributes_) + padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
-                            addDataRow(inflater, tblUsbInfoBottom, "\t" + getActivity().getString(R.string.endpoint_), endpointText);
-                        }
-                    } else {
-                        addDataRow(inflater, tblUsbInfoBottom, "\tEndpoints:", "none");
+        UsbInterface iFace;
+        for (int i = 0; i < device.getInterfaceCount(); i++) {
+            iFace = device.getInterface(i);
+            if (iFace != null) {
+                final TableLayout bottomTable = viewHolder.getBottomTable();
+                final String usbClass = UsbConstants.resolveUsbClass((iFace.getInterfaceClass()));
+
+                CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.interface_) + i, "");
+                CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.class_), usbClass);
+
+                if (iFace.getEndpointCount() > 0) {
+                    String endpointText;
+                    for (int j = 0; j < iFace.getEndpointCount(); j++) {
+                        endpointText = getEndpointText(iFace.getEndpoint(j), j);
+                        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.endpoint_), endpointText);
                     }
+                } else {
+                    CommonLogic.addDataRow(inflater, bottomTable, "\tEndpoints:", "none");
                 }
             }
         }
     }
 
+    private String getEndpointText(final UsbEndpoint endpoint, final int index) {
+        final String addressInBinary = CommonLogic.padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8);
+
+        String endpointText = "#" + index + "\n";
+        endpointText += getString(R.string.address_) + endpoint.getAddress() + " (" + addressInBinary + ")\n";
+        endpointText += getString(R.string.number_) + endpoint.getEndpointNumber() + "\n";
+        endpointText += getString(R.string.direction_) + UsbConstants.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";
+        endpointText += getString(R.string.type_) + UsbConstants.resolveUsbEndpointType(endpoint.getType()) + "\n";
+        endpointText += getString(R.string.poll_interval_) + endpoint.getInterval() + "\n";
+        endpointText += getString(R.string.max_packet_size_) + endpoint.getMaxPacketSize() + "\n";
+        endpointText += getString(R.string.attributes_) + CommonLogic.padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
+
+        return endpointText;
+    }
+
     @Override
     public String getSharePayload() {
-        final StringBuilder sb = new StringBuilder();
-        sb.append(ShareUtils.tableToString(tblUsbInfoHeader));
-        sb.append(ShareUtils.tableToString(tblUsbInfoTop));
-        sb.append('\n');
-        sb.append(ShareUtils.tableToString(tblUsbInfoBottom));
-        return sb.toString();
+        return CommonLogic.getSharePayload(viewHolder);
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
index bbd2002..fd57933 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
@@ -23,11 +23,7 @@ import android.view.MenuItem;
 
 import aws.apps.usbDeviceEnumerator.R;
 
-public abstract class BaseInfoFragment extends Fragment {
-    public final static int TYPE_ANDROID_INFO = 0;
-    public final static int TYPE_LINUX_INFO = 1;
-
-    public abstract int getType();
+/*package*/ abstract class BaseInfoFragment extends Fragment {
 
     @Override
     public void onCreate(Bundle saved) {
@@ -45,7 +41,7 @@ public abstract class BaseInfoFragment extends Fragment {
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.menu_export:
-                ShareUtils.share(getActivity(), "USB Info", getSharePayload());
+                ShareUtils.share(getContext(), getString(R.string.app_name), getSharePayload());
                 return true;
         }
         return super.onOptionsItemSelected(item);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java
new file mode 100644
index 0000000..db33098
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/CommonLogic.java
@@ -0,0 +1,58 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.widget.ImageView;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
+
+/*package*/ class CommonLogic {
+    private static final String TAG = CommonLogic.class.getSimpleName();
+
+    private static final int NO_IMAGE_DRAWABLE = R.drawable.no_image;
+
+    public static void loadLogo(final ImageView imageView, final ZipAccessCompany zipComp, final String logo) {
+        imageView.setImageResource(NO_IMAGE_DRAWABLE);
+
+        final Bitmap bitmap = zipComp.getLogo(logo);
+        if (bitmap != null) {
+            final Drawable drawable = new BitmapDrawable(bitmap);
+            imageView.setImageDrawable(drawable);
+        } else {
+            Log.w(TAG, "^ Could not load/find bitmap for " + logo);
+        }
+    }
+
+    public static void addDataRow(LayoutInflater inflater, TableLayout tlb, String cell1Text, String cell2Text) {
+        final TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
+        final TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
+        final TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
+        tv1.setText(cell1Text);
+        tv2.setText(cell2Text);
+        tlb.addView(row);
+    }
+
+    public static String padLeft(String string, String padding, int size) {
+        String pad = "";
+        while ((pad + string).length() < size) {
+            pad += padding + pad;
+        }
+        return pad + string;
+    }
+
+    public static String getSharePayload(final InfoViewHolder holder) {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(ShareUtils.tableToString(holder.getHeaderTable()));
+        sb.append(ShareUtils.tableToString(holder.getTopTable()));
+        sb.append('\n');
+        sb.append(ShareUtils.tableToString(holder.getBottomTable()));
+        return sb.toString();
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java
index 47def1d..10ee0af 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoFragmentFactory.java
@@ -7,10 +7,10 @@ import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 public final class InfoFragmentFactory {
 
     public static Fragment getFragment(String usbKey) {
-        return new AndroidUsbInfoFragment(usbKey);
+        return AndroidUsbInfoFragment.create(usbKey);
     }
 
     public static Fragment getFragment(SysBusUsbDevice usbDevice) {
-        return new LinuxUsbInfoFragment(usbDevice);
+        return LinuxUsbInfoFragment.create(usbDevice);
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java
new file mode 100644
index 0000000..221e3a3
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/InfoViewHolder.java
@@ -0,0 +1,87 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.TableLayout;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+
+/*package*/ class InfoViewHolder {
+    private final TableLayout tblUsbInfoHeader;
+    private final TableLayout tblUsbInfoTop;
+    private final TableLayout tblUsbInfoBottom;
+    private final TextView tvVID;
+    private final TextView tvPID;
+    private final TextView tvVendorReported;
+    private final TextView tvProductReported;
+    private final TextView tvVendorDb;
+    private final TextView tvProductDb;
+    private final TextView tvDevicePath;
+    private final TextView tvDeviceClass;
+    private final ImageButton logo;
+
+    public InfoViewHolder(final View rootView) {
+        tblUsbInfoHeader = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_title);
+        tblUsbInfoTop = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_top);
+        tblUsbInfoBottom = (TableLayout) rootView.findViewById(R.id.tblUsbInfo_bottom);
+        tvVID = ((TextView) rootView.findViewById(R.id.tvVID));
+        tvPID = ((TextView) rootView.findViewById(R.id.tvPID));
+        tvProductDb = ((TextView) rootView.findViewById(R.id.tvProductDb));
+        tvVendorDb = ((TextView) rootView.findViewById(R.id.tvVendorDb));
+        tvProductReported = ((TextView) rootView.findViewById(R.id.tvProductReported));
+        tvVendorReported = ((TextView) rootView.findViewById(R.id.tvVendorReported));
+        tvDevicePath = ((TextView) rootView.findViewById(R.id.tvDevicePath));
+        tvDeviceClass = ((TextView) rootView.findViewById(R.id.tvDeviceClass));
+        logo = (ImageButton) rootView.findViewById(R.id.btnLogo);
+    }
+
+    public ImageView getLogo() {
+        return logo;
+    }
+
+    public TableLayout getHeaderTable() {
+        return tblUsbInfoHeader;
+    }
+
+    public TableLayout getTopTable() {
+        return tblUsbInfoTop;
+    }
+
+    public TableLayout getBottomTable() {
+        return tblUsbInfoBottom;
+    }
+
+    public TextView getPid() {
+        return tvPID;
+    }
+
+    public TextView getVid() {
+        return tvVID;
+    }
+
+    public TextView getDevicePath() {
+        return tvDevicePath;
+    }
+
+    public TextView getDeviceClass() {
+        return tvDeviceClass;
+    }
+
+    public TextView getProductFromDb() {
+        return tvProductDb;
+    }
+
+    public TextView getVendorFromDb() {
+        return tvVendorDb;
+    }
+
+    public TextView getReportedProduct() {
+        return tvProductReported;
+    }
+
+    public TextView getReportedVendor() {
+        return tvVendorReported;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
index 1f4ece0..5a5a7e4 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
@@ -16,19 +16,13 @@
 package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
 import android.os.Bundle;
-import android.util.Log;
+import android.support.v4.app.Fragment;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.LinearLayout;
 import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
 
 import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DbAccessCompany;
@@ -38,172 +32,96 @@ import aws.apps.usbDeviceEnumerator.usb.UsbConstants;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 
 public class LinuxUsbInfoFragment extends BaseInfoFragment {
-    public final static int TYPE_ANDROID_INFO = 0;
-    public final static int TYPE_LINUX_INFO = 1;
     public final static String DEFAULT_STRING = "???";
-    private final static String BUNDLE_MY_USB_INFO = "BUNDLE_MY_USB_INFO";
+    private final static String EXTRA_DATA = LinuxUsbInfoFragment.class.getName() + ".BUNDLE_DATA";
+    private static final int LAYOUT_ID = R.layout.fragment_usb_info;
     private final String TAG = this.getClass().getName();
-    private TableLayout tblUsbInfoHeader;
-    private TableLayout tblUsbInfoTop;
-    private TableLayout tblUsbInfoBottom;
-    private TextView tvVID;
-    private TextView tvPID;
-    private TextView tvVendorReported;
-    private TextView tvProductReported;
-    private TextView tvVendorDb;
-    private TextView tvProductDb;
-    private TextView tvDevicePath;
-    private TextView tvDeviceClass;
-    private ImageButton btnLogo;
     private DbAccessUsb dbUsb;
     private DbAccessCompany dbComp;
     private ZipAccessCompany zipComp;
-    private SysBusUsbDevice myUsbDevice;
-
-
-    private Context context;
-
-    public LinuxUsbInfoFragment() {
-    }
-
-
-    public LinuxUsbInfoFragment(SysBusUsbDevice myUsbDevice) {
-        this.myUsbDevice = myUsbDevice;
-    }
-
-    private void addDataRow(LayoutInflater inflater, TableLayout tlb, String cell1Text, String cell2Text) {
-        TableRow row = (TableRow) inflater.inflate(R.layout.usb_table_row_data, null);
-        TextView tv1 = (TextView) row.findViewById(R.id.usb_tablerow_cell1);
-        TextView tv2 = (TextView) row.findViewById(R.id.usb_tablerow_cell2);
-        tv1.setText(cell1Text);
-        tv2.setText(cell2Text);
-        tlb.addView(row);
-    }
-
-    @Override
-    public int getType() {
-        return TYPE_LINUX_INFO;
-    }
-
-    private void loadLogo(String logo) {
-        Drawable d = context.getResources().getDrawable(R.drawable.no_image);
-        Bitmap b = zipComp.getLogo(logo);
-
-        if (b != null) {
-            d = new BitmapDrawable(b);
-        } else {
-            Log.w(TAG, "^ Bitmap is null");
-        }
-
-        btnLogo.setImageDrawable(d);
-    }
-
-
-    /**
-     * If we are being created with saved state, restore our state
-     */
-    @Override
-    public void onCreate(Bundle saved) {
-        super.onCreate(saved);
-        if (null != saved) {
-            myUsbDevice = (SysBusUsbDevice) saved.getParcelable(BUNDLE_MY_USB_INFO);
-        }
+    private SysBusUsbDevice device;
+    private InfoViewHolder viewHolder;
+
+    public static Fragment create(final SysBusUsbDevice usbDevice) {
+        final Fragment fragment = new LinuxUsbInfoFragment();
+        final Bundle bundle = new Bundle();
+        bundle.putParcelable(EXTRA_DATA, usbDevice);
+        fragment.setArguments(bundle);
+        return fragment;
     }
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
-        View v = new LinearLayout(getActivity().getApplicationContext());
-        context = getActivity().getApplicationContext();
+    public void onAttach(final Context context) {
+        super.onAttach(context);
 
-        if (myUsbDevice == null) {
-            return v;
-        } else {
-            v = inflater.inflate(R.layout.usb_info_linux, container, false);
-        }
-
-        tblUsbInfoHeader = (TableLayout) v.findViewById(R.id.tblUsbInfo_title);
-        tblUsbInfoTop = (TableLayout) v.findViewById(R.id.tblUsbInfo_top);
-        tblUsbInfoBottom = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
-        tvVID = ((TextView) v.findViewById(R.id.tvVID));
-        tvPID = ((TextView) v.findViewById(R.id.tvPID));
-        tvProductDb = ((TextView) v.findViewById(R.id.tvProductDb));
-        tvVendorDb = ((TextView) v.findViewById(R.id.tvVendorDb));
-        tvProductReported = ((TextView) v.findViewById(R.id.tvProductReported));
-        tvVendorReported = ((TextView) v.findViewById(R.id.tvVendorReported));
-        tvDevicePath = ((TextView) v.findViewById(R.id.tvDevicePath));
-        tvDeviceClass = ((TextView) v.findViewById(R.id.tvDeviceClass));
-        btnLogo = (ImageButton) v.findViewById(R.id.btnLogo);
-        btnLogo.setImageDrawable(context.getResources().getDrawable(R.drawable.no_image));
         dbUsb = new DbAccessUsb(context);
         dbComp = new DbAccessCompany(context);
         zipComp = new ZipAccessCompany(context);
-
-        populateLinuxTable(inflater);
-
-        return v;
     }
 
     @Override
-    public void onSaveInstanceState(Bundle toSave) {
-        toSave.putParcelable(BUNDLE_MY_USB_INFO, myUsbDevice);
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle saved) {
+        return inflater.inflate(LAYOUT_ID, container, false);
     }
 
-    private String padLeft(String string, String padding, int size) {
-        String pad = "";
-        while ((pad + string).length() < size) {
-            pad += padding + pad;
-        }
-        return pad + string;
+    @Override
+    public void onViewCreated(View view, Bundle bundle) {
+        super.onViewCreated(view, bundle);
+        viewHolder = new InfoViewHolder(view);
+
+        device = getArguments().getParcelable(EXTRA_DATA);
+
+        populateLinuxTable(LayoutInflater.from(getContext()));
     }
 
     private void populateLinuxTable(LayoutInflater inflater) {
-        if (myUsbDevice == null) {
+        if (device == null) {
             return;
         }
-        tvDevicePath.setText(myUsbDevice.getDevicePath());
 
-        tvVID.setText(padLeft(myUsbDevice.getVID(), "0", 4));
-        tvPID.setText(padLeft(myUsbDevice.getPID(), "0", 4));
-        tvDeviceClass.setText(UsbConstants.resolveUsbClass(myUsbDevice.getDeviceClass()));
+        final String vid = CommonLogic.padLeft(device.getVID(), "0", 4);
+        final String pid = CommonLogic.padLeft(device.getPID(), "0", 4);
+        final String deviceClass = UsbConstants.resolveUsbClass(device.getDeviceClass());
+
+        viewHolder.getLogo().setImageResource(R.drawable.no_image);
 
-        tvVendorReported.setText(myUsbDevice.getReportedVendorName());
-        tvProductReported.setText(myUsbDevice.getReportedProductName());
+        viewHolder.getVid().setText(vid);
+        viewHolder.getPid().setText(pid);
+        viewHolder.getDevicePath().setText(device.getDevicePath());
+        viewHolder.getDeviceClass().setText(deviceClass);
+
+        viewHolder.getReportedVendor().setText(device.getReportedVendorName());
+        viewHolder.getReportedProduct().setText(device.getReportedProductName());
 
         if (dbUsb.doDBChecks()) {
-            String vid = tvVID.getText().toString();
-            String pid = tvPID.getText().toString();
-            tvVendorDb.setText(dbUsb.getVendor(vid));
-            tvProductDb.setText(dbUsb.getProduct(vid, pid));
-        }
+            final String vendorFromDb = dbUsb.getVendor(vid);
+            viewHolder.getVendorFromDb().setText(vendorFromDb);
+            viewHolder.getProductFromDb().setText(dbUsb.getProduct(vid, pid));
 
-        if (dbComp.doDBChecks()) {
-            String searchFor = "";
+            if (dbComp.doDBChecks()) {
+                final String searchFor;
 
-            if (tvVendorDb.getText().toString().trim().length() > 0) {
-                searchFor = tvVendorDb.getText().toString();
-            } else {
-                searchFor = myUsbDevice.getReportedVendorName();
+                if (!TextUtils.isEmpty(vendorFromDb)) {
+                    searchFor = vendorFromDb;
+                } else {
+                    searchFor = device.getReportedVendorName();
+                }
+
+                final String logo = dbComp.getLogo(searchFor);
+                CommonLogic.loadLogo(viewHolder.getLogo(), zipComp, logo);
             }
-            Log.d(TAG, "^ Searching for '" + searchFor + "'");
-            loadLogo(dbComp.getLogo(searchFor));
         }
-        addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.usb_version_), myUsbDevice.getUsbVersion());
-        addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.speed_), myUsbDevice.getSpeed());
-        addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.protocol_), myUsbDevice.getDeviceProtocol());
-        addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.maximum_power_), myUsbDevice.getMaxPower());
-        addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.serial_number_), myUsbDevice.getSerialNumber());
-
-        //addHeaderRow(inflater, tblUsbInfo, "Interfaces");
 
+        final TableLayout bottomTable = viewHolder.getBottomTable();
+        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.usb_version_), device.getUsbVersion());
+        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.speed_), device.getSpeed());
+        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.protocol_), device.getDeviceProtocol());
+        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.maximum_power_), device.getMaxPower());
+        CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.serial_number_), device.getSerialNumber());
     }
 
     @Override
     public String getSharePayload() {
-        final StringBuilder sb = new StringBuilder();
-        sb.append(ShareUtils.tableToString(tblUsbInfoHeader));
-        sb.append(ShareUtils.tableToString(tblUsbInfoTop));
-        sb.append('\n');
-        sb.append(ShareUtils.tableToString(tblUsbInfoBottom));
-        return sb.toString();
+        return CommonLogic.getSharePayload(viewHolder);
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
index 6698163..73191bb 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
@@ -24,50 +24,43 @@ import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 
 public class UsbInfoActivity extends AppCompatActivity {
-    public static final String EXTRA_TYPE = "type";
-    public static final String EXTRA_DATA_ANDROID = "data_android";
-    public static final String EXTRA_DATA_LINUX = "data_linux";
-
-    /**
-     * Called when the activity is first created.
-     */
-
-    private int mType;
-    private String mAndroidKey;
-    private SysBusUsbDevice mLinuxDevice;
+    public static final String EXTRA_DATA_ANDROID = UsbInfoActivity.class.getName() + ".EXTRA_DATA_ANDROID";
+    public static final String EXTRA_DATA_LINUX = UsbInfoActivity.class.getName() + ".EXTRA_DATA_LINUX";
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.act_usb_info);
 
-        Bundle b = getIntent().getExtras();
-        if (b != null) {
-            mType = b.getInt(EXTRA_TYPE);
-            mAndroidKey = b.getString(EXTRA_DATA_ANDROID);
-            mLinuxDevice = b.getParcelable(EXTRA_DATA_LINUX);
-
-            if (mType == BaseInfoFragment.TYPE_ANDROID_INFO) {
-                Fragment f = new AndroidUsbInfoFragment(mAndroidKey);
-
-                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
-                ft.replace(R.id.fragment_container, f);
-                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
-
-                ft.commit();
-            } else if (mType == BaseInfoFragment.TYPE_LINUX_INFO) {
-                Fragment f = new LinuxUsbInfoFragment(mLinuxDevice);
+        final Bundle b = getIntent().getExtras();
+        if (b == null) {
+            finish();
+        } else {
+            final String androidKey = b.getString(EXTRA_DATA_ANDROID);
+            final SysBusUsbDevice linuxDevice = b.getParcelable(EXTRA_DATA_LINUX);
 
-                FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
-                ft.replace(R.id.fragment_container, f);
-                ft.setTransition(FragmentTransaction.TRANSIT_NONE);
+            final Fragment fragment;
 
-                ft.commit();
+            if (androidKey != null) {
+                fragment = InfoFragmentFactory.getFragment(androidKey);
+            } else if (linuxDevice != null) {
+                fragment = InfoFragmentFactory.getFragment(linuxDevice);
             } else {
+                fragment = null;
+            }
+
+            if (fragment == null) {
                 finish();
+            } else {
+                showFragment(fragment);
             }
-        } else {
-            finish();
         }
     }
+
+    private void showFragment(final Fragment fragment) {
+        final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
+        ft.replace(R.id.fragment_container, fragment);
+        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
+        ft.commit();
+    }
 }
