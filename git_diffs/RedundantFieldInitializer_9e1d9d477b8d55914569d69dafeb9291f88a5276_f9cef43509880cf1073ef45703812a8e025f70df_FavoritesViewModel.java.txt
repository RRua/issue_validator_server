diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
index 0a50b92..3a56c0b 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/AddEditAccountNextcloudScreenTest.java
@@ -21,7 +21,8 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
-import org.mockito.Mockito;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 
 import java.util.ArrayList;
 
@@ -46,7 +47,6 @@ import static org.mockito.Mockito.verify;
 @LargeTest
 public class AddEditAccountNextcloudScreenTest {
 
-    private OperationsService serviceMock;
     private ArgumentCaptor<NextcloudFragment> viewCaptor;
 
     private final String MALFORMED_URL = "demo.nextcloud.com:port";
@@ -60,8 +60,13 @@ public class AddEditAccountNextcloudScreenTest {
     public ActivityTestRule<AddEditAccountActivity> addEditAccountActivityTestRule =
             new ActivityTestRule<>(AddEditAccountActivity.class);
 
+    @Mock
+    private OperationsService serviceMock;
+
     @Before
     public void setupAddEditAccountActivityNextcloud() {
+        MockitoAnnotations.initMocks(this);
+
         TestUtils.allowPermissionIfNeeded(Manifest.permission.GET_ACCOUNTS);
 
         AddEditAccountActivity activity = addEditAccountActivityTestRule.getActivity();
@@ -75,7 +80,6 @@ public class AddEditAccountNextcloudScreenTest {
         NextcloudContract.Presenter presenter = fragment.getPresenter();
         assertThat(presenter, notNullValue());
 
-        serviceMock = Mockito.mock(OperationsService.class);
         // TODO: check if race condition is possible
         fragment.setOperationsService(serviceMock);
         viewCaptor = ArgumentCaptor.forClass(NextcloudFragment.class);
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
index 65b9d37..16801b4 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
@@ -55,6 +55,7 @@ public class FavoritesTabTest {
                     super.beforeActivityLaunched();
                     // TODO: fix data loss on non-test DB; testApplicationId is not enough
                     repository = ((LaanoApplication) InstrumentationRegistry
+                            .getInstrumentation()
                             .getTargetContext().getApplicationContext())
                             .getApplicationComponent().getRepository();
                     repository.deleteAllFavorites();
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
index 95902bd..b9c8518 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
@@ -14,27 +14,28 @@ import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 
+import com.bytesforge.linkasanote.ApplicationComponent;
+import com.bytesforge.linkasanote.ApplicationModule;
+import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.TestUtils;
 
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
-import org.mockito.Mockito;
+import org.mockito.ArgumentMatchers;
+import org.mockito.Mock;
+
+import it.cosenonjaviste.daggermock.DaggerMockRule;
 
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.action.ViewActions.click;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.RootMatchers.isDialog;
-import static android.support.test.espresso.matcher.ViewMatchers.assertThat;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
 import static android.support.test.espresso.matcher.ViewMatchers.withId;
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
-import static org.hamcrest.Matchers.notNullValue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
@@ -49,44 +50,52 @@ public class ManageAccountsActivityTest {
 
     private static final String USER_NAME = "demo";
 
+    private Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();
+
+    @Rule
+    public DaggerMockRule<ApplicationComponent> daggerMockRule = new DaggerMockRule<>(
+            ApplicationComponent.class, new ApplicationModule(context)).set(component ->
+            ((LaanoApplication) context.getApplicationContext()).setApplicationComponent(component));
+
     @Rule
     public ActivityTestRule<ManageAccountsActivity> manageAccountsActivityTestRule =
-            new ActivityTestRule<>(ManageAccountsActivity.class);
+            new ActivityTestRule<ManageAccountsActivity>(ManageAccountsActivity.class, false, false) {
+
+                @Override
+                protected void afterActivityLaunched() {
+                    super.afterActivityLaunched();
+                    setupManageAccountsActivity();
+                    registerIdlingResource();
+                }
+
+                @Override
+                protected void afterActivityFinished() {
+                    super.afterActivityFinished();
+                    unregisterIdlingResource();
+                }
+            };
 
     private static String ACCOUNT_TYPE;
     private static Account[] ACCOUNTS;
-    private AccountManager mockAccountManager;
-    private ManageAccountsContract.Presenter presenter;
-    private Context context;
 
-    @Before
-    public void setupManageAccountsActivity() {
-        TestUtils.allowPermissionIfNeeded(Manifest.permission.GET_ACCOUNTS);
-        mockAccountManager = Mockito.mock(AccountManager.class);
-        context = InstrumentationRegistry.getTargetContext();
+    @Mock
+    private AccountManager mockAccountManager;
 
+    public ManageAccountsActivityTest() {
         ACCOUNT_TYPE = getAccountType(context);
         ACCOUNTS = new Account[]{new Account(USER_NAME + "@demo.nextcloud.com", ACCOUNT_TYPE)};
+    }
 
-        ManageAccountsActivity activity = manageAccountsActivityTestRule.getActivity();
-        assertThat(activity, notNullValue());
-        ManageAccountsFragment fragment = (ManageAccountsFragment) activity
-                .getSupportFragmentManager()
-                .findFragmentById(R.id.content_frame);
-        assertThat(fragment, notNullValue());
-        fragment.setAccountManager(mockAccountManager);
-        presenter = fragment.getPresenter();
-        assertThat(presenter, notNullValue());
+    public void setupManageAccountsActivity() { // @Before
+        TestUtils.allowPermissionIfNeeded(Manifest.permission.GET_ACCOUNTS);
     }
 
-    @Before
-    public void registerIdlingResource() {
+    public void registerIdlingResource() { // @Before
         Espresso.registerIdlingResources(
                 manageAccountsActivityTestRule.getActivity().getCountingIdlingResource());
     }
 
-    @After
-    public void unregisterIdlingResource() {
+    public void unregisterIdlingResource() { // @After
         Espresso.unregisterIdlingResources(
                 manageAccountsActivityTestRule.getActivity().getCountingIdlingResource());
     }
@@ -94,8 +103,8 @@ public class ManageAccountsActivityTest {
     @Test
     public void checkInitialState() {
         when(mockAccountManager.getAccountsByType(anyString())).thenReturn(new Account[0]);
-        // TODO: look for better way then reloading with mockAccountManager
-        presenter.loadAccountItems(true);
+        manageAccountsActivityTestRule.launchActivity(null);
+
         onView(withId(R.id.add_account_view)).check(
                 matches(withText(R.string.item_manage_accounts_add)));
     }
@@ -103,7 +112,8 @@ public class ManageAccountsActivityTest {
     @Test
     public void checkInitialStateWithOneAccountAdded() {
         when(mockAccountManager.getAccountsByType(anyString())).thenReturn(ACCOUNTS);
-        presenter.loadAccountItems(true);
+        manageAccountsActivityTestRule.launchActivity(null);
+
         if (context.getResources().getBoolean(R.bool.multiaccount_support)) {
             onView(withId(R.id.add_account_view)).check(
                     matches(withText(R.string.item_manage_accounts_add)));
@@ -115,18 +125,19 @@ public class ManageAccountsActivityTest {
     @Test
     public void clickOnAddItem_MakesAccountManagerAddAccountCall() {
         when(mockAccountManager.getAccountsByType(anyString())).thenReturn(new Account[0]);
-        presenter.loadAccountItems(true);
+        manageAccountsActivityTestRule.launchActivity(null);
+
         onView(withId(R.id.add_account_view)).perform(click());
-        verify(mockAccountManager).addAccount(eq(ACCOUNT_TYPE), isNull(String.class),
-                isNull(String[].class), isNull(Bundle.class), any(Activity.class),
-                Matchers.<AccountManagerCallback<Bundle>>any(), any(Handler.class));
+        verify(mockAccountManager).addAccount(eq(ACCOUNT_TYPE), isNull(),
+                isNull(), isNull(), any(Activity.class),
+                ArgumentMatchers.<AccountManagerCallback<Bundle>>any(), any(Handler.class));
     }
 
     @Test
     public void clickOnItemEditButton_OpensAddEditAccountActivityWithAppropriateUsername() {
         when(mockAccountManager.getAccountsByType(anyString())).thenReturn(ACCOUNTS);
-        presenter.loadAccountItems(true);
-        TestUtils.sleep(250); // TODO: gracefully wait for UI
+        manageAccountsActivityTestRule.launchActivity(null);
+
         onView(withId(R.id.account_edit_button)).perform(click());
         onView(withId(R.id.account_username)).check(matches(withText(USER_NAME)));
     }
@@ -134,12 +145,12 @@ public class ManageAccountsActivityTest {
     @Test
     public void clickOnItemDeleteButton_AfterConfirmationMakesAccountManagerRemoveAccountCall() {
         when(mockAccountManager.getAccountsByType(anyString())).thenReturn(ACCOUNTS);
-        presenter.loadAccountItems(true);
-        TestUtils.sleep(250); // TODO: gracefully wait for UI
+        manageAccountsActivityTestRule.launchActivity(null);
+
         onView(withId(R.id.account_delete_button)).perform(click());
         onView(withText(R.string.dialog_button_ok)).inRoot(isDialog()).check(matches(isDisplayed()));
         onView(withText(R.string.dialog_button_ok)).inRoot(isDialog()).perform(click());
         verify(mockAccountManager).removeAccount(any(Account.class), any(Activity.class),
-                Matchers.<AccountManagerCallback<Bundle>>any(), any(Handler.class));
+                ArgumentMatchers.<AccountManagerCallback<Bundle>>any(), any(Handler.class));
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java b/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
index 6f2e6e2..4cb30a1 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
@@ -4,9 +4,19 @@ import android.content.ContentResolver;
 import android.content.Context;
 import android.content.SharedPreferences;
 
+import com.bytesforge.linkasanote.addeditaccount.AddEditAccountComponent;
+import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudPresenterModule;
+import com.bytesforge.linkasanote.addeditfavorite.AddEditFavoriteComponent;
+import com.bytesforge.linkasanote.addeditfavorite.AddEditFavoritePresenterModule;
 import com.bytesforge.linkasanote.data.source.ProviderModule;
 import com.bytesforge.linkasanote.data.source.Repository;
 import com.bytesforge.linkasanote.data.source.RepositoryModule;
+import com.bytesforge.linkasanote.laano.LaanoComponent;
+import com.bytesforge.linkasanote.laano.favorites.FavoritesPresenterModule;
+import com.bytesforge.linkasanote.laano.links.LinksPresenterModule;
+import com.bytesforge.linkasanote.laano.notes.NotesPresenterModule;
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsComponent;
+import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule;
 import com.bytesforge.linkasanote.settings.SettingsModule;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.bytesforge.linkasanote.utils.schedulers.SchedulerProviderModule;
@@ -31,4 +41,13 @@ public interface ApplicationComponent {
     ContentResolver getContentResolver();
     BriteContentResolver getBriteContentResolver();
     BaseSchedulerProvider getSchedulerProvider();
+
+    // Subcomponents
+    AddEditAccountComponent getAddEditAccountComponent(NextcloudPresenterModule module);
+    AddEditFavoriteComponent getAddEditFavoriteComponent(AddEditFavoritePresenterModule module);
+    LaanoComponent getLaanoComponent(
+            LinksPresenterModule linksPresenterModule,
+            FavoritesPresenterModule favoritesPresenterModule,
+            NotesPresenterModule notesPresenterModule);
+    ManageAccountsComponent getManageAccountsComponent(ManageAccountsPresenterModule module);
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/ApplicationModule.java b/app/src/main/java/com/bytesforge/linkasanote/ApplicationModule.java
index 8d51741..414f5f6 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/ApplicationModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/ApplicationModule.java
@@ -8,7 +8,7 @@ import dagger.Module;
 import dagger.Provides;
 
 @Module
-public final class ApplicationModule {
+public class ApplicationModule { // NOTE: final removed and public added for sake of DaggerMock
 
     private final Context context;
 
@@ -18,7 +18,7 @@ public final class ApplicationModule {
 
     @Provides
     @Singleton
-    Context provideContext() {
+    public Context provideContext() {
         return context;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
index 76659dc..2b1eace 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
@@ -3,6 +3,7 @@ package com.bytesforge.linkasanote;
 import android.app.Application;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.support.annotation.VisibleForTesting;
 
 import com.bytesforge.linkasanote.data.source.ProviderModule;
 import com.bytesforge.linkasanote.data.source.RepositoryModule;
@@ -38,6 +39,11 @@ public class LaanoApplication extends Application {
         return applicationComponent;
     }
 
+    @VisibleForTesting
+    public void setApplicationComponent(ApplicationComponent applicationComponent) {
+        this.applicationComponent = applicationComponent;
+    }
+
     public static Context getContext() {
         return context.get();
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
index 6596b8b..7b1860f 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
@@ -19,7 +19,6 @@ import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudFragment;
 import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudPresenter;
 import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudPresenterModule;
 import com.bytesforge.linkasanote.databinding.ActivityAddEditAccountBinding;
-import com.bytesforge.linkasanote.sync.operations.OperationsService;
 import com.bytesforge.linkasanote.utils.ActivityUtils;
 import com.bytesforge.linkasanote.utils.CloudUtils;
 
@@ -43,7 +42,6 @@ public class AddEditAccountActivity extends AppCompatActivity implements
     private static final String TAG = AddEditAccountActivity.class.getSimpleName();
 
     private ActivityAddEditAccountBinding binding;
-    private OperationsService operationsService;
     private Bundle currentViewModelSate;
 
     @Inject
@@ -69,10 +67,10 @@ public class AddEditAccountActivity extends AppCompatActivity implements
                     getSupportFragmentManager(), nextcloudFragment, R.id.content_frame);
         }
         // Presenter
-        DaggerAddEditAccountComponent.builder()
-                .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .nextcloudPresenterModule(new NextcloudPresenterModule(this, nextcloudFragment, account))
-                .build().inject(this);
+        LaanoApplication application = (LaanoApplication) getApplication();
+        application.getApplicationComponent().getAddEditAccountComponent(
+                new NextcloudPresenterModule(this, nextcloudFragment, account))
+                .inject(this);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
index 39117bd..cbd3057 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountComponent.java
@@ -1,14 +1,12 @@
 package com.bytesforge.linkasanote.addeditaccount;
 
-import com.bytesforge.linkasanote.ApplicationComponent;
 import com.bytesforge.linkasanote.FragmentScoped;
 import com.bytesforge.linkasanote.addeditaccount.nextcloud.NextcloudPresenterModule;
 
-import dagger.Component;
+import dagger.Subcomponent;
 
 @FragmentScoped
-@Component(dependencies = {ApplicationComponent.class},
-        modules = {NextcloudPresenterModule.class})
+@Subcomponent(modules = {NextcloudPresenterModule.class})
 public interface AddEditAccountComponent {
 
     void inject(AddEditAccountActivity addEditAccountActivity);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
index f3c1c32..9a938e0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
@@ -27,7 +27,7 @@ public interface NextcloudContract {
                 @NonNull GetServerInfoOperation.ServerInfo serverInfo);
         void finishActivity(@NonNull Account account, @NonNull String password, @NonNull Bundle data);
         void cancelActivity();
-        Bundle getAccountState(@NonNull Account account);
+        void setupAccountState(@NonNull Account account);
         void requestFocusOnAccountPassword();
         boolean sendGetServerInfoOperation(String url);
         boolean sendCheckCredentialsOperation(
@@ -40,6 +40,7 @@ public interface NextcloudContract {
         void setInstanceState(@Nullable Bundle savedInstanceState);
         void loadInstanceState(@NonNull Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
+        Bundle getDefaultInstanceState();
 
         void validateServer();
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
index 44f303d..4464976 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
@@ -124,7 +124,7 @@ public class NextcloudFragment extends Fragment implements
         viewModel.setInstanceState(savedInstanceState);
         binding.setViewModel((NextcloudViewModel) viewModel);
         if (savedInstanceState == null && !presenter.isNewAccount()) {
-            // NOTE: here because must be intact on orientation change
+            // NOTE: here because populated account must stay intact on orientation change
             presenter.populateAccount();
         }
         return binding.getRoot();
@@ -327,10 +327,18 @@ public class NextcloudFragment extends Fragment implements
     }
 
     @Override
-    public Bundle getAccountState(@NonNull Account account) {
+    public void setupAccountState(@NonNull Account account) {
         checkNotNull(account);
 
-        Bundle state = new Bundle();
+        Bundle state = getAccountState(account);
+        viewModel.applyInstanceState(state);
+        requestFocusOnAccountPassword();
+    }
+
+    private Bundle getAccountState(@NonNull Account account) {
+        checkNotNull(account);
+
+        Bundle state = viewModel.getDefaultInstanceState();
         state.putBoolean(NextcloudViewModel.STATE_SERVER_URL, false);
         state.putString(NextcloudViewModel.STATE_SERVER_URL_TEXT,
                 accountManager.getUserData(account, AccountUtils.Constants.KEY_OC_BASE_URL));
@@ -338,8 +346,7 @@ public class NextcloudFragment extends Fragment implements
         state.putString(NextcloudViewModel.STATE_ACCOUNT_USERNAME_TEXT,
                 getAccountUsername(account.name));
         // NOTE: security hole, non-authorized user can view the password
-        /*state.putString(NextcloudViewModel.STATE_ACCOUNT_PASSWORD_TEXT,
-                accountManager.getPassword(account));*/
+        state.putString(NextcloudViewModel.STATE_ACCOUNT_PASSWORD_TEXT, null); // accountManager.getPassword(account)
 
         return state;
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
index 89e7dd0..8c997ac 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
@@ -55,12 +55,10 @@ public final class NextcloudPresenter implements NextcloudContract.Presenter {
     @Override
     public void populateAccount() {
         if (account == null) {
-            throw new RuntimeException("populateAccount() was called but account is null.");
+            throw new RuntimeException("populateAccount() was called but account is null");
         }
-        Bundle state = view.getAccountState(account);
-        viewModel.applyInstanceState(state);
+        view.setupAccountState(account);
         viewModel.validateServer();
-        view.requestFocusOnAccountPassword();
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
index 3826445..6a70d74 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenterModule.java
@@ -25,24 +25,24 @@ public class NextcloudPresenterModule {
     }
 
     @Provides
-    NextcloudContract.View provideNextcloudContractView() {
+    public NextcloudContract.View provideNextcloudContractView() {
         return view;
     }
 
     @Provides
-    NextcloudContract.ViewModel provideNextcloudContractViewModel() {
+    public NextcloudContract.ViewModel provideNextcloudContractViewModel() {
         return new NextcloudViewModel(context);
     }
 
     @Provides
-    AccountManager provideAccountManager() {
+    public AccountManager provideAccountManager() {
         return AccountManager.get(context);
     }
 
     @Provides
     @Nullable
     @NextcloudAccount
-    Account provideAccount() {
+    public Account provideAccount() {
         return account;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
index a2cb63e..4f25ef9 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
@@ -113,7 +113,8 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
         notifyChange();
     }
 
-    private Bundle getDefaultInstanceState() {
+    @Override
+    public Bundle getDefaultInstanceState() {
         Bundle defaultState = new Bundle();
 
         defaultState.putBoolean(STATE_SERVER_URL, true);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
index bd4b490..2514a45 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
@@ -18,8 +18,6 @@ import javax.inject.Inject;
 
 public class AddEditFavoriteActivity extends AppCompatActivity {
 
-    public static final int REQUEST_ADD_FAVORITE = 1;
-
     @Inject
     AddEditFavoritePresenter presenter;
 
@@ -53,10 +51,10 @@ public class AddEditFavoriteActivity extends AppCompatActivity {
                     getSupportFragmentManager(), fragment, R.id.content_frame);
         }
         // Presenter
-        DaggerAddEditFavoriteComponent.builder()
-                .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .addEditFavoritePresenterModule(new AddEditFavoritePresenterModule(this, fragment, favoriteId))
-                .build().inject(this);
+        LaanoApplication application = (LaanoApplication) getApplication();
+        application.getApplicationComponent().getAddEditFavoriteComponent(
+                new AddEditFavoritePresenterModule(this, fragment, favoriteId))
+                .inject(this);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
index 21d8601..478636d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteComponent.java
@@ -1,13 +1,11 @@
 package com.bytesforge.linkasanote.addeditfavorite;
 
-import com.bytesforge.linkasanote.ApplicationComponent;
 import com.bytesforge.linkasanote.FragmentScoped;
 
-import dagger.Component;
+import dagger.Subcomponent;
 
 @FragmentScoped
-@Component(dependencies = {ApplicationComponent.class},
-        modules = {AddEditFavoritePresenterModule.class})
+@Subcomponent(modules = {AddEditFavoritePresenterModule.class})
 public interface AddEditFavoriteComponent {
 
     void inject(AddEditFavoriteActivity addEditFavoriteActivity);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
index 9ff8d3e..18cbdb4 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
@@ -6,6 +6,7 @@ import android.support.annotation.Nullable;
 
 import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
+import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Tag;
 
 import java.util.List;
@@ -19,6 +20,7 @@ public interface AddEditFavoriteContract {
         void finishActivity();
 
         void swapTagsCompletionViewItems(List<Tag> tags);
+        void setupFavoriteState(Favorite favorite);
     }
 
     interface ViewModel extends BaseView<Presenter> {
@@ -26,15 +28,27 @@ public interface AddEditFavoriteContract {
         void setInstanceState(@Nullable Bundle savedInstanceState);
         void loadInstanceState(Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
+        Bundle getDefaultInstanceState();
 
         void setTagsCompletionView(@NonNull FavoriteTagsCompletionView completionView);
         void showEmptyFavoriteSnackbar();
         void showDuplicateKeyError();
+
+        boolean isValid();
+        void checkAddButton();
+        void enableAddButton();
+        void disableAddButton();
+        void hideNameError();
+        void afterNameChanged();
+        void afterTagsChanged();
+
+        void setFavoriteTags(List<Tag> tags);
     }
 
     interface Presenter extends BasePresenter {
 
         boolean isNewFavorite();
         void saveFavorite(String name, List<Tag> tags);
+        void populateFavorite();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
index 9e9d871..62235fa 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
@@ -14,6 +14,7 @@ import android.view.ViewGroup;
 import android.widget.ArrayAdapter;
 
 import com.bytesforge.linkasanote.R;
+import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.databinding.FragmentAddEditFavoriteBinding;
 import com.bytesforge.linkasanote.utils.CommonUtils;
@@ -81,6 +82,9 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
                 inflater, R.layout.fragment_add_edit_favorite, container, false);
         viewModel.setInstanceState(savedInstanceState);
         binding.setViewModel((AddEditFavoriteViewModel) viewModel);
+        if (savedInstanceState == null && !presenter.isNewFavorite()) {
+            presenter.populateFavorite();
+        }
         // FavoriteTags
         final FavoriteTagsCompletionView completionView = binding.favoriteTags;
         if (completionView != null) {
@@ -90,6 +94,24 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
         return binding.getRoot();
     }
 
+    @Override
+    public void setupFavoriteState(@NonNull Favorite favorite) {
+        checkNotNull(favorite);
+
+        Bundle state = getFavoriteState(favorite);
+        viewModel.applyInstanceState(state);
+        viewModel.setFavoriteTags(favorite.getTags());
+    }
+
+    private Bundle getFavoriteState(@NonNull Favorite favorite) {
+        checkNotNull(favorite);
+
+        Bundle state = viewModel.getDefaultInstanceState();
+        state.putString(AddEditFavoriteViewModel.STATE_FAVORITE_NAME, favorite.getName());
+
+        return state;
+    }
+
     private void setupTagsCompletionView(FavoriteTagsCompletionView completionView) {
         // Options
         completionView.setTokenClickStyle(TokenCompleteTextView.TokenClickStyle.Select);
@@ -101,13 +123,15 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
         completionView.performBestGuess(false);
         int threshold = getContext().getResources().getInteger(R.integer.tags_autocomplete_threshold);
         completionView.setThreshold(threshold);
+        completionView.setTokenListener((AddEditFavoritePresenter) presenter);
         // Adapter
         tags = new ArrayList<>();
         ArrayAdapter<Tag> adapter = new FilteredArrayAdapter<Tag>(
                 getContext(), android.R.layout.simple_list_item_1, tags) {
             @Override
             protected boolean keepObject(Tag tag, String mask) {
-                return tag.getName().toLowerCase().startsWith(mask)
+                String name = tag.getName();
+                return name != null && name.toLowerCase().startsWith(mask)
                         && !completionView.getObjects().contains(tag);
             }
         };
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
index 30a5006..4136b08 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
@@ -7,8 +7,10 @@ import android.support.annotation.Nullable;
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.Repository;
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
+import com.tokenautocomplete.TokenCompleteTextView;
 
 import java.util.List;
 
@@ -18,7 +20,8 @@ import rx.Observer;
 import rx.Subscription;
 import rx.subscriptions.CompositeSubscription;
 
-public final class AddEditFavoritePresenter implements AddEditFavoriteContract.Presenter {
+public final class AddEditFavoritePresenter implements
+        AddEditFavoriteContract.Presenter, TokenCompleteTextView.TokenListener<Tag> {
 
     private final Repository repository;
     private final AddEditFavoriteContract.View view;
@@ -26,7 +29,6 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
     private final BaseSchedulerProvider schedulerProvider;
     private final String favoriteId;
 
-
     @NonNull
     private final CompositeSubscription subscription;
 
@@ -57,9 +59,14 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
         loadTags();
     }
 
+    @Override
+    public void unsubscribe() {
+        subscription.clear();
+    }
+
     private void loadTags() {
         EspressoIdlingResource.increment();
-        subscription.clear();
+        //subscription.clear(); // NOTE: stop all other subscriptions
 
         Subscription subscription = repository.getTags()
                 .subscribeOn(schedulerProvider.computation())
@@ -87,8 +94,41 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
     }
 
     @Override
-    public void unsubscribe() {
-        subscription.clear();
+    public boolean isNewFavorite() {
+        return favoriteId == null;
+    }
+
+    @Override
+    public void populateFavorite() {
+        if (favoriteId == null) {
+            throw new RuntimeException("populateFavorite() was called but favoriteId is null");
+        }
+        EspressoIdlingResource.increment();
+
+        Subscription subscription = repository.getFavorite(favoriteId)
+                .subscribeOn(schedulerProvider.computation())
+                .observeOn(schedulerProvider.ui())
+                .doOnTerminate(() -> {
+                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
+                        EspressoIdlingResource.decrement();
+                    }
+                })
+                .subscribe(new Observer<Favorite>() {
+                    @Override
+                    public void onCompleted() {
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                    }
+
+                    @Override
+                    public void onNext(Favorite favorite) {
+                        view.setupFavoriteState(favorite);
+                        viewModel.checkAddButton();
+                    }
+                });
+        this.subscription.add(subscription);
     }
 
     @Override
@@ -100,17 +140,13 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
         }
     }
 
-    @Override
-    public boolean isNewFavorite() {
-        return favoriteId == null;
-    }
-
     private void createFavorite(String name, List<Tag> tags) {
         Favorite favorite = new Favorite(name, tags);
         if (favorite.isEmpty()) {
             viewModel.showEmptyFavoriteSnackbar();
             return;
         }
+        favorite.setSyncState(SyncState.State.UNSYNCED);
         try {
             repository.saveFavorite(favorite);
             view.finishActivity();
@@ -119,10 +155,33 @@ public final class AddEditFavoritePresenter implements AddEditFavoriteContract.P
         }
     }
 
-    // TODO: implement Favorite update
     private void updateFavorite(String name, List<Tag> tags) {
-        if (isNewFavorite()) {
-            throw new RuntimeException("updateFavorite() was called but Favorite is new.");
+        if (favoriteId == null) {
+            throw new RuntimeException("updateFavorite() was called but favoriteId is null");
         }
+        Favorite favorite = new Favorite(favoriteId, name, tags);
+        if (favorite.isEmpty()) {
+            viewModel.showEmptyFavoriteSnackbar();
+            return;
+        }
+        favorite.setSyncState(SyncState.State.UNSYNCED);
+        try {
+            repository.saveFavorite(favorite);
+            view.finishActivity();
+        } catch (SQLiteConstraintException e) {
+            viewModel.showDuplicateKeyError();
+        }
+    }
+
+    // ViewModel
+
+    @Override
+    public void onTokenAdded(Tag tag) {
+        viewModel.afterTagsChanged();
+    }
+
+    @Override
+    public void onTokenRemoved(Tag tag) {
+        viewModel.afterTagsChanged();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
index 8a1e8c8..e26873f 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterModule.java
@@ -21,19 +21,19 @@ public class AddEditFavoritePresenterModule {
     }
 
     @Provides
-    AddEditFavoriteContract.View provideAddEditFavoriteContractView() {
+    public AddEditFavoriteContract.View provideAddEditFavoriteContractView() {
         return view;
     }
 
     @Provides
-    AddEditFavoriteContract.ViewModel provideAddEditFavoriteContractViewModel() {
+    public AddEditFavoriteContract.ViewModel provideAddEditFavoriteContractViewModel() {
         return new AddEditFavoriteViewModel(context);
     }
 
     @Provides
     @Nullable
     @FavoriteId
-    String provideFavoriteId() {
+    public String provideFavoriteId() {
         return favoriteId;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
index 1c80e41..0edc6ff 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
@@ -11,19 +11,19 @@ import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.design.widget.Snackbar;
 import android.support.design.widget.TextInputLayout;
-import android.text.Editable;
 import android.widget.LinearLayout;
 
 import com.bytesforge.linkasanote.BR;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.data.Tag;
 import com.google.common.base.Strings;
-import com.tokenautocomplete.TokenCompleteTextView;
+
+import java.util.List;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 public class AddEditFavoriteViewModel extends BaseObservable implements
-        AddEditFavoriteContract.ViewModel, TokenCompleteTextView.TokenListener<Tag> {
+        AddEditFavoriteContract.ViewModel {
 
     public static final String STATE_FAVORITE_NAME = "FAVORITE_NAME";
     public static final String STATE_ADD_BUTTON = "ADD_BUTTON";
@@ -79,7 +79,8 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
         nameErrorText = state.getString(STATE_NAME_ERROR_TEXT);
     }
 
-    private Bundle getDefaultInstanceState() {
+    @Override
+    public Bundle getDefaultInstanceState() {
         Bundle defaultState = new Bundle();
 
         defaultState.putString(STATE_FAVORITE_NAME, null);
@@ -101,7 +102,6 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     @Override
     public void setTagsCompletionView(@NonNull FavoriteTagsCompletionView completionView) {
         favoriteTags = completionView;
-        favoriteTags.setTokenListener(this);
     }
 
     @BindingAdapter({"snackbarId"})
@@ -135,34 +135,20 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
 
     public void onAddButtonClick() {
         favoriteTags.performCompletion();
+        // NOTE: there is no way to pass these values directly to the presenter
         presenter.saveFavorite(favoriteName.get(), favoriteTags.getObjects());
     }
 
-    private void enableAddButton() {
+    @Override
+    public void enableAddButton() {
         addButton.set(true);
     }
 
-    private void disableAddButton() {
+    @Override
+    public void disableAddButton() {
         addButton.set(false);
     }
 
-    public void afterNameChanged(Editable s) {
-        hideNameError();
-        if (isNameValid() && isTagsValid()) {
-            enableAddButton();
-        } else {
-            disableAddButton();
-        }
-    }
-
-    public void afterTagsChanged(Editable s) {
-        if (isNameValid() && isTagsValid()) {
-            enableAddButton();
-        } else {
-            disableAddButton();
-        }
-    }
-
     private boolean isNameValid() {
         return !Strings.isNullOrEmpty(favoriteName.get());
     }
@@ -172,13 +158,8 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     }
 
     @Override
-    public void onTokenAdded(Tag tag) {
-        afterTagsChanged(null);
-    }
-
-    @Override
-    public void onTokenRemoved(Tag tag) {
-        afterTagsChanged(null);
+    public boolean isValid() {
+        return isNameValid() && isTagsValid();
     }
 
     @Override
@@ -194,8 +175,37 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
         notifyPropertyChanged(BR.nameErrorText);
     }
 
-    private void hideNameError() {
+    @Override
+    public void hideNameError() {
         nameErrorText = null;
         notifyPropertyChanged(BR.nameErrorText);
     }
+
+    @Override
+    public void afterNameChanged() {
+        hideNameError();
+        checkAddButton();
+    }
+
+    @Override
+    public void afterTagsChanged() {
+        checkAddButton();
+    }
+
+    @Override
+    public void checkAddButton() {
+        if (isValid()) enableAddButton();
+        else disableAddButton();
+    }
+
+    @Override
+    public void setFavoriteTags(List<Tag> tags) {
+        if (tags == null) {
+            favoriteTags.clear();
+            return;
+        }
+        for (Tag tag : tags) {
+            favoriteTags.addObject(tag);
+        }
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
index 481c9c7..1cba83c 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
@@ -7,6 +7,7 @@ import android.support.annotation.Nullable;
 import android.util.Log;
 
 import com.bytesforge.linkasanote.data.source.local.LocalContract;
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.CloudUtils;
 import com.google.common.base.Joiner;
 import com.google.common.base.Objects;
@@ -23,7 +24,7 @@ import static com.bytesforge.linkasanote.utils.UuidUtils.generateKey;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static java.lang.System.currentTimeMillis;
 
-public final class Favorite {
+public final class Favorite extends SyncState {
 
     private static final String TAG = Favorite.class.getSimpleName();
 
@@ -44,23 +45,20 @@ public final class Favorite {
     @Nullable
     private final String eTag;
 
-    private final boolean conflicted;
-    private final boolean synced;
-
     @Nullable
     private final List<Tag> tags;
 
     public Favorite(@Nullable String name, @Nullable List<Tag> tags) {
-        this(generateKey(), currentTimeMillis(), name, null, false, false, tags);
+        this(generateKey(), currentTimeMillis(), name, null, false, false, false, tags);
     }
 
     public Favorite(@NonNull String id, @Nullable String name, @Nullable List<Tag> tags) {
-        this(id, currentTimeMillis(), name, null, false, false, tags);
+        this(id, currentTimeMillis(), name, null, false, false, false, tags);
     }
 
     public Favorite(
             @NonNull String id, long added, @Nullable String name, @Nullable String eTag,
-            boolean conflicted, boolean synced, @Nullable List<Tag> tags) {
+            boolean conflicted, boolean deleted, boolean synced, @Nullable List<Tag> tags) {
         this.id = checkNotNull(id);
 
         this.added = added;
@@ -68,11 +66,9 @@ public final class Favorite {
         this.name = name;
         this.eTag = eTag;
 
-        this.conflicted = conflicted;
-        this.synced = synced;
+        setSyncState(conflicted, deleted, synced);
 
         this.tags = tags;
-
     }
 
     public static Favorite from(Cursor cursor, List<Tag> tags) {
@@ -89,10 +85,12 @@ public final class Favorite {
 
         boolean conflicted = cursor.getInt(cursor.getColumnIndexOrThrow(
                 LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED)) == 1;
+        boolean deleted = cursor.getInt(cursor.getColumnIndexOrThrow(
+                LocalContract.FavoriteEntry.COLUMN_NAME_DELETED)) == 1;
         boolean synced = cursor.getInt(cursor.getColumnIndexOrThrow(
                 LocalContract.FavoriteEntry.COLUMN_NAME_SYNCED)) == 1;
 
-        return new Favorite(id, added, name, eTag, conflicted, synced, tags);
+        return new Favorite(id, added, name, eTag, conflicted, deleted, synced, tags);
     }
 
     public static Favorite from(ContentValues values, List<Tag> tags) {
@@ -103,10 +101,11 @@ public final class Favorite {
         String name = values.getAsString(LocalContract.FavoriteEntry.COLUMN_NAME_NAME);
         String eTag = values.getAsString(LocalContract.FavoriteEntry.COLUMN_NAME_ETAG);
 
-        boolean conflicted = values.getAsInteger(LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED) == 1;
-        boolean synced = values.getAsInteger(LocalContract.FavoriteEntry.COLUMN_NAME_SYNCED) == 1;
+        boolean conflicted = values.getAsBoolean(LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED);
+        boolean deleted = values.getAsBoolean(LocalContract.FavoriteEntry.COLUMN_NAME_DELETED);
+        boolean synced = values.getAsBoolean(LocalContract.FavoriteEntry.COLUMN_NAME_SYNCED);
 
-        return new Favorite(id, added, name, eTag, conflicted, synced, tags);
+        return new Favorite(id, added, name, eTag, conflicted, deleted, synced, tags);
     }
 
     public static Favorite from(String jsonFavoriteString) {
@@ -136,7 +135,7 @@ public final class Favorite {
     }
 
     public ContentValues getContentValues() {
-        ContentValues values = new ContentValues();
+        ContentValues values = getSyncStateValues();
 
         values.put(LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID, getId());
 
@@ -145,9 +144,6 @@ public final class Favorite {
         values.put(LocalContract.FavoriteEntry.COLUMN_NAME_NAME, getName());
         values.put(LocalContract.FavoriteEntry.COLUMN_NAME_ETAG, getETag());
 
-        values.put(LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED, isConflicted() ? 1 : 0);
-        values.put(LocalContract.FavoriteEntry.COLUMN_NAME_SYNCED, isSynced() ? 1 : 0);
-
         return values;
     }
 
@@ -180,14 +176,6 @@ public final class Favorite {
         return eTag;
     }
 
-    public boolean isConflicted() {
-        return conflicted;
-    }
-
-    public boolean isSynced() {
-        return synced;
-    }
-
     @Nullable
     public List<Tag> getTags() {
         return tags;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
index 6822c51..a6aeef7 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
@@ -27,6 +27,7 @@ public interface DataSource {
     Observable<Favorite> getFavorite(@NonNull String favoriteId);
     void saveFavorite(@NonNull Favorite favorite);
     void deleteAllFavorites();
+    void deleteFavorite(@NonNull String favoriteId);
 
     Observable<List<Tag>> getTags();
     Observable<Tag> getTag(@NonNull String tagId);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
index 2209191..dea7767 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
@@ -130,9 +130,7 @@ public class Provider extends ContentProvider {
         }
     }
 
-    /*
-    * Note: all queries receive ENTRY_ID (except *_TAG).
-    * */
+    // NOTE: all queries take ENTRY_ID (except *_TAG).
     @Nullable
     @Override
     public Cursor query(@NonNull Uri uri, String[] projection,
@@ -176,9 +174,7 @@ public class Provider extends ContentProvider {
 
         }
         Cursor returnCursor = db.query(
-                tableName, projection,
-                selection, selectionArgs,
-                null, null, sortOrder);
+                tableName, projection, selection, selectionArgs, null, null, sortOrder);
         returnCursor.setNotificationUri(contentResolver, uri);
 
         return returnCursor;
@@ -199,10 +195,8 @@ public class Provider extends ContentProvider {
             case LINK:
                 db.beginTransaction();
                 try {
-                    rowId = updateOrInsert(db,
-                            LocalContract.LinkEntry.TABLE_NAME,
-                            LocalContract.LinkEntry.COLUMN_NAME_ENTRY_ID,
-                            values);
+                    rowId = updateOrInsert(db, LocalContract.LinkEntry.TABLE_NAME,
+                            LocalContract.LinkEntry.COLUMN_NAME_ENTRY_ID, values);
                     db.setTransactionSuccessful();
                     returnUri = LocalContract.LinkEntry.buildLinksUriWith(rowId);
                 } finally {
@@ -212,10 +206,8 @@ public class Provider extends ContentProvider {
             case FAVORITE:
                 db.beginTransaction();
                 try {
-                    rowId = updateOrInsert(db,
-                            LocalContract.FavoriteEntry.TABLE_NAME,
-                            LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID,
-                            values);
+                    rowId = updateOrInsert(db, LocalContract.FavoriteEntry.TABLE_NAME,
+                            LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID, values);
                     db.setTransactionSuccessful();
                     returnUri = LocalContract.FavoriteEntry.buildFavoritesUriWith(rowId);
                 } finally {
@@ -225,10 +217,8 @@ public class Provider extends ContentProvider {
             case FAVORITE_TAG:
                 db.beginTransaction();
                 try {
-                    rowId = appendTag(db,
-                            LocalContract.FavoriteEntry.TABLE_NAME,
-                            LocalContract.FavoriteEntry.getFavoriteId(uri),
-                            values);
+                    rowId = appendTag(db, LocalContract.FavoriteEntry.TABLE_NAME,
+                            LocalContract.FavoriteEntry.getFavoriteId(uri), values);
                     db.setTransactionSuccessful();
                     returnUri = LocalContract.TagEntry.buildTagsUriWith(rowId);
                 } finally {
@@ -282,9 +272,10 @@ public class Provider extends ContentProvider {
                 db.beginTransaction();
                 try {
                     String idValue = LocalContract.FavoriteEntry.getFavoriteId(uri);
-                    numRows = updateEntry(db, LocalContract.FavoriteEntry.TABLE_NAME,
+                    long rowId = updateEntry(db, LocalContract.FavoriteEntry.TABLE_NAME,
                             LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID, idValue,
                             values);
+                    numRows = rowId > 0 ? 1 : 0;
                     db.setTransactionSuccessful();
                 } finally {
                     db.endTransaction();
@@ -308,24 +299,9 @@ public class Provider extends ContentProvider {
         final String tagNameField = LocalContract.TagEntry.COLUMN_NAME_NAME;
         final String tagNameValue = values.getAsString(tagNameField);
 
-        Cursor exists = db.query(
-                tagTable, new String[]{BaseColumns._ID},
-                tagNameField + " = ?", new String[]{tagNameValue},
-                null, null, null);
-
-        long tagId = 0;
-        if (exists.moveToLast()) {
-            int tagIdIndex = exists.getColumnIndexOrThrow(BaseColumns._ID);
-            tagId = exists.getLong(tagIdIndex);
-            exists.close();
-        }
+        long tagId = queryRowId(db, tagTable, tagNameField, tagNameValue);
         if (tagId <= 0) {
-            tagId = db.insert(tagTable, null, values);
-            if (tagId <= 0) {
-                throw new SQLException(String.format(
-                        "Failed to insert tag [%s] bound with table [%s] for record [%s]",
-                        tagNameValue, leftTable, leftId));
-            }
+            tagId = insertEntry(db, tagTable, values);
         }
         // Reference
         final String refTable = leftTable + "_" + tagTable;
@@ -333,12 +309,8 @@ public class Provider extends ContentProvider {
         refValues.put(LocalContract.MANY_TO_MANY_COMMON_NAME_ADDED, currentTimeMillis());
         refValues.put(leftTable + BaseColumns._ID, leftId);
         refValues.put(tagTable + BaseColumns._ID, tagId);
+        insertEntry(db, refTable, refValues); // NOTE: refTable rowId can be ignored
 
-        long rowId = db.insert(refTable, null, refValues);
-        if (rowId <= 0) {
-            throw new SQLException(String.format(
-                    "Failed to insert reference [%s] with table [%s]", leftId, leftTable));
-        }
         return tagId;
     }
 
@@ -348,55 +320,84 @@ public class Provider extends ContentProvider {
         checkNotNull(db);
 
         String idValue = values.getAsString(idField);
-        // NOTE: update does not produce rowId
-        Cursor exists = db.query(
-                tableName, new String[]{BaseColumns._ID},
-                idField + " = ?", new String[]{idValue},
-                null, null, null);
-        long rowId = 0;
-        if (exists.moveToLast()) {
-            int rowIdIndex = exists.getColumnIndexOrThrow(BaseColumns._ID);
-            rowId = exists.getLong(rowIdIndex);
-            exists.close();
+        long rowId = updateEntry(db, tableName, idField, idValue, values);
+        if (rowId <= 0) {
+            rowId = insertEntry(db, tableName, values);
         }
-        if (rowId > 0) {
-            int numRows = db.update(
-                    tableName, values,
-                    BaseColumns._ID + " = ?", new String[]{Long.toString(rowId)});
-            if (numRows <= 0) {
-                throw new SQLException(String.format(
-                        "Failed to update the row [%s] in table [%s]", idValue, tableName));
-            }
-        } else {
-            rowId = db.insertOrThrow(tableName, null, values); // SQLiteConstraintException
-            if (rowId <= 0) {
-                throw new SQLException(String.format(
-                        "Failed to insert row [%s] in table [%s]", idValue, tableName));
-            }
+        return rowId;
+    }
+
+    private long insertEntry(
+            @NonNull final SQLiteDatabase db,
+            final String tableName, final ContentValues values) {
+        checkNotNull(db);
+
+        long rowId = db.insertOrThrow(tableName, null, values); // SQLiteConstraintException
+        if (rowId <= 0) {
+            throw new SQLException(String.format(
+                    "Failed to insert a row to the table [%s]", tableName));
         }
         return rowId;
     }
 
-    private int updateEntry(
+    /**
+     * Method for updating Row with the specified ID (idField, idValue)
+     *
+     * @return RowID of the updated record or 0 if the record was not found
+     */
+    private long updateEntry(
             @NonNull final SQLiteDatabase db, final String tableName,
             final String idField, final String idValue, final ContentValues values) {
         checkNotNull(db);
-        if (Strings.isNullOrEmpty(idValue)) return 0;
 
-        Cursor exists = db.query(
-                tableName, new String[]{BaseColumns._ID},
-                idField + " = ?", new String[]{idValue},
-                null, null, null);
-        boolean isExists = exists.moveToLast();
-        exists.close();
-        if (!isExists) return 0;
+        long rowId = queryRowId(db, tableName, idField, idValue);
+        if (rowId <= 0) return 0;
 
-        int numRows = db.update(tableName, values, idField + " = ?", new String[]{idValue});
+        final String selection = BaseColumns._ID + " = ?";
+        final String[] selectionArgs = new String[]{Long.toString(rowId)};
+        int numRows = db.update(tableName, values, selection, selectionArgs);
         if (numRows <= 0) {
             throw new SQLiteConstraintException(String.format(
-                    "Failed to update row [%s] in table [%s]", idValue, tableName));
+                    "Failed to update row with ID [%s, table=%s]", idValue, tableName));
         }
-        return numRows;
+        // NOTE: will be recreated with the new set of tags
+        deleteTagReferences(db, tableName, rowId);
+
+        return rowId;
+    }
+
+    private int deleteTagReferences(
+            final @NonNull SQLiteDatabase db, final String leftTable, final long leftId) {
+        checkNotNull(db);
+
+        final String tagTable = LocalContract.TagEntry.TABLE_NAME;
+        final String refTable = leftTable + "_" + tagTable;
+
+        final String selection = leftTable + BaseColumns._ID + " = ?";
+        final String[] selectionArgs = new String[]{Long.toString(leftId)};
+
+        return db.delete(refTable, selection, selectionArgs);
+    }
+
+
+    private long queryRowId(
+            @NonNull final SQLiteDatabase db, final String tableName,
+            final String idField, final String idValue) {
+        checkNotNull(db);
+        if (Strings.isNullOrEmpty(idValue)) return 0;
+
+        final String selection = idField + " = ?";
+        final String[] selectionArgs = new String[]{idValue};
+        Cursor exists = db.query(
+                tableName, new String[]{BaseColumns._ID},
+                selection, selectionArgs, null, null, null);
+        long rowId = 0;
+        if (exists.moveToLast()) {
+            int rowIdIndex = exists.getColumnIndexOrThrow(BaseColumns._ID);
+            rowId = exists.getLong(rowIdIndex);
+        }
+        exists.close();
+        return rowId;
     }
 
     private static String sqlJoinManyToManyWithTags(final String leftTable) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
index 03052c9..9a73165 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
@@ -198,6 +198,7 @@ public class Repository implements DataSource {
     @Override
     public Observable<Favorite> getFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
+
         if (!isKeyValidUuid(favoriteId)) {
             throw new InvalidParameterException(
                     "getFavorite() called with invalid UUID ID [" + favoriteId + "]");
@@ -284,6 +285,19 @@ public class Repository implements DataSource {
         cachedFavorites.clear();
     }
 
+    @Override
+    public void deleteFavorite(@NonNull String favoriteId) {
+        checkNotNull(favoriteId);
+
+        localDataSource.deleteFavorite(favoriteId);
+        cloudDataSource.deleteFavorite(favoriteId);
+
+        if (cachedFavorites == null) {
+            cachedFavorites = new LinkedHashMap<>();
+        }
+        cachedFavorites.remove(favoriteId);
+    }
+
     // Tags: tag is part of the object and should be bound with the object
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
index 043848c..dc47ec3 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
@@ -70,6 +70,8 @@ public class CloudDataSource implements DataSource {
     public void deleteAllLinks() {
     }
 
+    // Notes
+
     @Override
     public Observable<List<Note>> getNotes() {
         return null;
@@ -88,6 +90,8 @@ public class CloudDataSource implements DataSource {
     public void deleteAllNotes() {
     }
 
+    // Favorites
+
     @Override
     public Observable<List<Favorite>> getFavorites() {
         return null;
@@ -140,6 +144,12 @@ public class CloudDataSource implements DataSource {
     public void deleteAllFavorites() {
     }
 
+    @Override
+    public void deleteFavorite(@NonNull String favoriteId) {
+    }
+
+    // Tags
+
     @Override
     public Observable<List<Tag>> getTags() {
         throw new RuntimeException("getTags() was called but this operation cannot be applied to the cloud");
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
index 9c3da15..453ae06 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
@@ -5,12 +5,14 @@ import android.content.ContentValues;
 import android.database.Cursor;
 import android.net.Uri;
 import android.support.annotation.NonNull;
+import android.util.Log;
 
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Link;
 import com.bytesforge.linkasanote.data.Note;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.DataSource;
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.squareup.sqlbrite.BriteContentResolver;
 
 import java.util.ArrayList;
@@ -25,6 +27,8 @@ import static com.google.common.base.Preconditions.checkNotNull;
 @Singleton
 public class LocalDataSource implements DataSource {
 
+    private static final String TAG = LocalDataSource.class.getSimpleName();
+
     private ContentResolver contentResolver;
     private BriteContentResolver briteResolver;
 
@@ -87,10 +91,12 @@ public class LocalDataSource implements DataSource {
 
     @Override
     public Observable<List<Favorite>> getFavorites() {
+        final String selection = LocalContract.FavoriteEntry.COLUMN_NAME_DELETED + " = ?";
+        final String[] selectionArgs = {"0"};
         return briteResolver.createQuery(
                 LocalContract.FavoriteEntry.buildFavoritesUri(),
                 LocalContract.FavoriteEntry.FAVORITE_COLUMNS,
-                null, null, null, false)
+                selection, selectionArgs, null, false)
                 .map(query -> {
                     Cursor cursor = query.run();
                     if (cursor == null) return null;
@@ -114,24 +120,27 @@ public class LocalDataSource implements DataSource {
     public Observable<Favorite> getFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
 
-        return briteResolver.createQuery(
-                LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId),
-                LocalContract.FavoriteEntry.FAVORITE_COLUMNS,
-                null, null, null, false)
-                .map(query -> {
-                    Cursor cursor = query.run();
-                    if (cursor == null || cursor.getCount() <= 0) return null;
-                    else cursor.moveToFirst();
-
-                    int rowIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
-                    String rowId = cursor.getString(rowIndex);
-                    Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
-                    List<Tag> tags = getTagsFrom(favoriteTagsUri)
-                            .toBlocking()
-                            .single();
-                    return Favorite.from(cursor, tags);
-                })
-                .first();
+        return Observable.fromCallable(() -> {
+            Cursor cursor = contentResolver.query(
+                    LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId),
+                    LocalContract.FavoriteEntry.FAVORITE_COLUMNS, null, null, null);
+            if (cursor == null) {
+                return null;
+            } else if (cursor.getCount() <= 0) {
+                cursor.close();
+                return null;
+            }
+            cursor.moveToFirst();
+            int rowIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
+            String rowId = cursor.getString(rowIndex);
+            Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
+            List<Tag> tags = getTagsFrom(favoriteTagsUri)
+                    .toBlocking().single();
+            Favorite favorite = Favorite.from(cursor, tags);
+            cursor.close();
+
+            return favorite;
+        });
     }
 
     @Override
@@ -156,6 +165,19 @@ public class LocalDataSource implements DataSource {
         contentResolver.delete(LocalContract.FavoriteEntry.buildFavoritesUri(), null, null);
     }
 
+    @Override
+    public void deleteFavorite(@NonNull String favoriteId) {
+        checkNotNull(favoriteId);
+
+        Uri uri = LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId);
+        ContentValues values = SyncState.getSyncStateValues(SyncState.State.DELETED);
+        int numRows = contentResolver.update(uri, values, null, null);
+        if (numRows != 1) {
+            Log.w(TAG, "deleteFavorite(): updated unexpected number of rows "
+                    + "[" + numRows + ", id=" + favoriteId + "]");
+        }
+    }
+
     // Tags
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
index 7cae546..66a0fe0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
@@ -26,6 +26,8 @@ import android.support.v7.app.ActionBar;
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
 
@@ -33,13 +35,10 @@ import com.bytesforge.linkasanote.BaseFragment;
 import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.ActivityLaanoBinding;
-import com.bytesforge.linkasanote.laano.favorites.FavoritesFragment;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesPresenter;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesPresenterModule;
-import com.bytesforge.linkasanote.laano.links.LinksFragment;
 import com.bytesforge.linkasanote.laano.links.LinksPresenter;
 import com.bytesforge.linkasanote.laano.links.LinksPresenterModule;
-import com.bytesforge.linkasanote.laano.notes.NotesFragment;
 import com.bytesforge.linkasanote.laano.notes.NotesPresenter;
 import com.bytesforge.linkasanote.laano.notes.NotesPresenterModule;
 import com.bytesforge.linkasanote.manageaccounts.ManageAccountsActivity;
@@ -74,6 +73,8 @@ public class LaanoActivity extends AppCompatActivity implements
     NotesPresenter notesPresenter;
 
     private ActivityLaanoBinding binding;
+    // TODO: restore on orientation change
+    private int viewPagerCurrentTab;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -105,17 +106,20 @@ public class LaanoActivity extends AppCompatActivity implements
             adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.FAVORITES_TAB);
             adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.NOTES_TAB);
             adapter.finishUpdate(viewPager);
+            setupViewPagerListener(viewPager);
+            viewPagerCurrentTab = viewPager.getCurrentItem();
             if (binding.tabLayout != null) {
                 setupTabsContent(binding.tabLayout, viewPager);
             }
         }
         // Presenters
-        DaggerLaanoComponent.builder()
-                .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .linksPresenterModule(new LinksPresenterModule(adapter.getLinksFragment()))
-                .favoritesPresenterModule(new FavoritesPresenterModule(this, adapter.getFavoritesFragment()))
-                .notesPresenterModule(new NotesPresenterModule(adapter.getNotesFragment()))
-                .build().inject(this);
+        LaanoApplication application = (LaanoApplication) getApplication();
+        application.getApplicationComponent()
+                .getLaanoComponent(
+                        new LinksPresenterModule(adapter.getLinksFragment()),
+                        new FavoritesPresenterModule(this, adapter.getFavoritesFragment()),
+                        new NotesPresenterModule(adapter.getNotesFragment()))
+                .inject(this);
         // FAB
         if (binding.fabAdd != null) {
             setupFabAdd(binding.fabAdd);
@@ -143,6 +147,13 @@ public class LaanoActivity extends AppCompatActivity implements
         }
     }
 
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.toolbar_laano, menu);
+        return true;
+    }
+
     private void updateAccountList() {
         // TODO: update status in Navigation Drawer
     }
@@ -185,8 +196,58 @@ public class LaanoActivity extends AppCompatActivity implements
         }
     }
 
+    private void notifyTabSelected(int position) {
+        switch (position) {
+            case LaanoFragmentPagerAdapter.LINKS_TAB:
+                break;
+            case LaanoFragmentPagerAdapter.FAVORITES_TAB:
+                favoritesPresenter.onTabSelected();
+                break;
+            case LaanoFragmentPagerAdapter.NOTES_TAB:
+                break;
+            default:
+                throw new IllegalStateException("Unexpected tab was selected");
+        }
+    }
+
+    private void notifyTabDeselected(int position) {
+        switch (position) {
+            case LaanoFragmentPagerAdapter.LINKS_TAB:
+                break;
+            case LaanoFragmentPagerAdapter.FAVORITES_TAB:
+                favoritesPresenter.onTabDeselected();
+                break;
+            case LaanoFragmentPagerAdapter.NOTES_TAB:
+                break;
+            default:
+                throw new IllegalStateException("Unexpected tab was selected");
+        }
+    }
+
     // Setup
 
+    private void setupViewPagerListener(ViewPager viewPager) {
+        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+                if (viewPagerCurrentTab != position) {
+                    notifyTabDeselected(viewPagerCurrentTab);
+                    notifyTabSelected(position);
+                    viewPagerCurrentTab = position;
+                }
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+            }
+        });
+    }
+
     private void setupDrawerLayout(@NonNull final DrawerLayout drawerLayout) {
         checkNotNull(drawerLayout);
 
@@ -270,18 +331,22 @@ public class LaanoActivity extends AppCompatActivity implements
         });
     }
 
-    // TODO: refactor to get rid of instanceof checking
     private void setupFabAdd(@NonNull FloatingActionButton fab) {
         checkNotNull(fab);
 
         fab.setOnClickListener(v -> {
-                    BaseFragment fragment = getCurrentFragment();
-                    if (fragment instanceof LinksFragment) {
-                        linksPresenter.addLink();
-                    } else if (fragment instanceof FavoritesFragment) {
-                        favoritesPresenter.addFavorite();
-                    } else if (fragment instanceof NotesFragment) {
-                        notesPresenter.addNote();
+                    switch (viewPagerCurrentTab) {
+                        case LaanoFragmentPagerAdapter.LINKS_TAB:
+                            linksPresenter.addLink();
+                            break;
+                        case LaanoFragmentPagerAdapter.FAVORITES_TAB:
+                            favoritesPresenter.addFavorite();
+                            break;
+                        case LaanoFragmentPagerAdapter.NOTES_TAB:
+                            notesPresenter.addNote();
+                            break;
+                        default:
+                            throw new IllegalStateException("Unexpected tab was selected");
                     }
                 }
         );
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
index 4d5c3c0..c6a4209 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoComponent.java
@@ -1,19 +1,17 @@
 package com.bytesforge.linkasanote.laano;
 
-import com.bytesforge.linkasanote.ApplicationComponent;
 import com.bytesforge.linkasanote.FragmentScoped;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesPresenterModule;
 import com.bytesforge.linkasanote.laano.links.LinksPresenterModule;
 import com.bytesforge.linkasanote.laano.notes.NotesPresenterModule;
 
-import dagger.Component;
+import dagger.Subcomponent;
 
 @FragmentScoped
-@Component(dependencies = {ApplicationComponent.class},
-        modules = {
-                LinksPresenterModule.class,
-                FavoritesPresenterModule.class,
-                NotesPresenterModule.class})
+@Subcomponent(modules = {
+        LinksPresenterModule.class,
+        FavoritesPresenterModule.class,
+        NotesPresenterModule.class})
 public interface LaanoComponent {
 
     void inject(LaanoActivity activity);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
index 19ba19a..929676e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
@@ -3,7 +3,6 @@ package com.bytesforge.linkasanote.laano.favorites;
 import android.support.annotation.NonNull;
 import android.support.v7.util.DiffUtil;
 import android.support.v7.widget.RecyclerView;
-import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.ViewGroup;
 
@@ -20,7 +19,6 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
     private final FavoritesViewModel viewModel;
 
     private List<Favorite> favorites;
-    private SparseBooleanArray selectedIds;
 
     public FavoritesAdapter(
             @NonNull List<Favorite> favorites,
@@ -29,7 +27,6 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
         this.favorites = checkNotNull(favorites);
         this.presenter = checkNotNull(presenter);
         this.viewModel = checkNotNull(viewModel);
-        selectedIds = new SparseBooleanArray();
     }
 
     public static class ViewHolder extends RecyclerView.ViewHolder {
@@ -46,7 +43,7 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
                 FavoritesViewModel viewModel, Integer position) {
             binding.setFavorite(favorite);
             binding.setPresenter(presenter);
-            binding.setViewModel(viewModel);
+            binding.setViewModel(viewModel); // NOTE: global viewModel for fragment and all items
             binding.setPosition(position);
 
             binding.executePendingBindings();
@@ -72,50 +69,31 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
         return favorites.size();
     }
 
-    // Selection
+    // Items
 
-    public void toggleSelection(int position) {
-        boolean isSelected = selectedIds.get(position);
-        if (isSelected) {
-            selectedIds.delete(position);
-        } else {
-            selectedIds.put(position, true);
-        }
-        notifyItemChanged(position);
-    }
-
-    public void removeSelection() {
-        selectedIds.clear();
-        notifyDataSetChanged();
-    }
-
-    public int getSelectedCount() {
-        return selectedIds.size();
+    @NonNull
+    public Favorite removeItem(int position) {
+        Favorite favorite = favorites.remove(position);
+        notifyItemRemoved(position);
+        return favorite;
     }
 
-    public SparseBooleanArray getSelectedIds() {
-        return selectedIds;
-    }
-
-    // Swap
-
     public void swapItems(List<Favorite> favorites) {
-        final FavoriteDiffCallback diffCallback =
-                new FavoriteDiffCallback(this.favorites, favorites);
+        final FavoritesDiffCallback diffCallback =
+                new FavoritesDiffCallback(this.favorites, favorites);
         final DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(diffCallback);
 
         this.favorites.clear();
         this.favorites.addAll(favorites);
-
         diffResult.dispatchUpdatesTo(this);
     }
 
-    public class FavoriteDiffCallback extends DiffUtil.Callback {
+    public class FavoritesDiffCallback extends DiffUtil.Callback {
 
         private List<Favorite> oldList;
         private List<Favorite> newList;
 
-        public FavoriteDiffCallback(List<Favorite> oldList, List<Favorite> newList) {
+        public FavoritesDiffCallback(List<Favorite> oldList, List<Favorite> newList) {
             this.oldList = oldList;
             this.newList = newList;
         }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
index b73d3a8..3917a0f 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
@@ -3,6 +3,7 @@ package com.bytesforge.linkasanote.laano.favorites;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.SparseBooleanArray;
 
 import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
@@ -18,8 +19,12 @@ public interface FavoritesContract {
         boolean isActive();
 
         void showAddFavorite();
+        void showEditFavorite(@NonNull String favoriteId);
         void showFavorites(List<Favorite> favorites);
-        void onFavoriteSelected(int position);
+        void enableActionMode();
+        void disableActionMode();
+        void selectionChanged(int position);
+        Favorite removeFavorite(int position);
     }
 
     interface ViewModel extends BaseView<Presenter> {
@@ -30,7 +35,15 @@ public interface FavoritesContract {
 
         void setFavoriteListSize(int favoriteListSize);
         boolean isActionMode();
-        void setActionMode(boolean actionMode);
+        void enableActionMode();
+        void disableActionMode();
+
+        boolean isSelected(int position);
+        void toggleSelection(int position);
+        void removeSelection();
+        void removeSelection(int position);
+        int getSelectedCount();
+        SparseBooleanArray getSelectedIds();
     }
 
     interface Presenter extends BasePresenter {
@@ -40,5 +53,14 @@ public interface FavoritesContract {
 
         void onFavoriteClick(int position);
         boolean onFavoriteLongClick(int position);
+        void onCheckboxClick(int position);
+
+        void onEditClick(@NonNull String favoriteId);
+        void onToLinksClick(@NonNull String favoriteId);
+        void onToNotesClick(@NonNull String favoriteId);
+        void onDeleteClick();
+
+        void onTabSelected();
+        void onTabDeselected();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
index d4734fd..240128e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
@@ -1,18 +1,26 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
+import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v7.app.AppCompatActivity;
 import android.support.v7.view.ActionMode;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
+import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
 import com.bytesforge.linkasanote.BaseFragment;
+import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.addeditfavorite.AddEditFavoriteActivity;
+import com.bytesforge.linkasanote.addeditfavorite.AddEditFavoriteFragment;
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.databinding.FragmentLaanoFavoritesBinding;
 
@@ -23,6 +31,9 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 public class FavoritesFragment extends BaseFragment implements FavoritesContract.View {
 
+    public static final int REQUEST_ADD_FAVORITE = 1;
+    public static final int REQUEST_EDIT_FAVORITE = 2;
+
     private FavoritesContract.Presenter presenter;
     private FavoritesContract.ViewModel viewModel;
     private FavoritesAdapter adapter;
@@ -36,6 +47,9 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     public void onResume() {
         super.onResume();
         presenter.subscribe();
+        if (viewModel.isActionMode()) {
+            enableActionMode();
+        }
     }
 
     @Override
@@ -59,6 +73,12 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
         this.viewModel = checkNotNull(viewModel);
     }
 
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setHasOptionsMenu(true);
+    }
+
     @Nullable
     @Override
     public View onCreateView(
@@ -75,6 +95,22 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
         return binding.getRoot();
     }
 
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        inflater.inflate(R.menu.toolbar_favorites, menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.toolbar_favorite_action_mode:
+                enableActionMode();
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
@@ -84,7 +120,14 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     @Override
     public void showAddFavorite() {
         Intent intent = new Intent(getContext(), AddEditFavoriteActivity.class);
-        startActivityForResult(intent, AddEditFavoriteActivity.REQUEST_ADD_FAVORITE);
+        startActivityForResult(intent, REQUEST_ADD_FAVORITE);
+    }
+
+    @Override
+    public void showEditFavorite(@NonNull String favoriteId) {
+        Intent intent = new Intent(getContext(), AddEditFavoriteActivity.class);
+        intent.putExtra(AddEditFavoriteFragment.ARGUMENT_EDIT_FAVORITE_ID, favoriteId);
+        startActivityForResult(intent, REQUEST_EDIT_FAVORITE);
     }
 
     @Override
@@ -95,7 +138,16 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
 
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
+        switch (requestCode) {
+            case REQUEST_ADD_FAVORITE:
+                break;
+            case REQUEST_EDIT_FAVORITE:
+                if (resultCode == Activity.RESULT_OK) {
+                }
+                break;
+            default:
+                throw new IllegalStateException("The result received from the unexpected activity");
+        }
     }
 
     private void setupFavoritesRecyclerView(RecyclerView rvFavorites) {
@@ -106,7 +158,95 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     }
 
     @Override
-    public void onFavoriteSelected(int position) {
+    public void enableActionMode() {
+        if (!viewModel.isActionMode()) {
+            viewModel.enableActionMode();
+        }
+        if (actionMode == null) {
+            actionMode = ((AppCompatActivity) getActivity()).startSupportActionMode(
+                    new FavoritesActionModeCallback());
+        }
+        updateActionModeTitle();
+    }
 
+    @Override
+    public void disableActionMode() {
+        if (actionMode != null) {
+            actionMode.finish(); // NOTE: will call destroyActionMode
+        }
+    }
+
+    private void destroyActionMode() {
+        if (viewModel.isActionMode()) {
+            SparseBooleanArray selected = viewModel.getSelectedIds().clone();
+            viewModel.removeSelection();
+            for (int i = 0; i < selected.size(); i++) {
+                if (selected.valueAt(i)) {
+                    adapter.notifyItemChanged(selected.keyAt(i));
+                }
+            }
+            viewModel.disableActionMode();
+        }
+        if (actionMode != null) {
+            actionMode = null;
+        }
+    }
+
+    @Override
+    public void selectionChanged(int position) {
+        adapter.notifyItemChanged(position);
+        updateActionModeTitle();
+    }
+
+    private void updateActionModeTitle() {
+        if (actionMode != null) {
+            actionMode.setTitle(getContext().getResources().getString(
+                    R.string.laano_favorites_action_mode_selected, viewModel.getSelectedCount()));
+            if (adapter.getItemCount() <= 0) {
+                disableActionMode();
+            }
+        } // if
+    }
+
+    @Override
+    public Favorite removeFavorite(int position) {
+        Favorite favorite = adapter.removeItem(position);
+        selectionChanged(position);
+        viewModel.setFavoriteListSize(adapter.getItemCount());
+
+        return favorite;
+    }
+
+    public class FavoritesActionModeCallback implements ActionMode.Callback {
+
+        @Override
+        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+            mode.getMenuInflater().inflate(R.menu.action_mode_favorites, menu);
+            return true;
+        }
+
+        @Override
+        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
+            menu.findItem(R.id.favorites_delete).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
+            return true;
+        }
+
+        @Override
+        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+            switch (item.getItemId()) {
+                case R.id.favorites_delete:
+                    presenter.onDeleteClick();
+                    break;
+                default:
+                    throw new UnsupportedOperationException(
+                            "Unknown ActionMode item [" + item.getItemId() + "]");
+            }
+            return true;
+        }
+
+        @Override
+        public void onDestroyActionMode(ActionMode mode) {
+            destroyActionMode();
+        }
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
index 7e6c5ed..3034d16 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
@@ -1,6 +1,7 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
 import android.support.annotation.NonNull;
+import android.util.SparseBooleanArray;
 
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.source.Repository;
@@ -59,6 +60,16 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
         subscription.clear();
     }
 
+    @Override
+    public void onTabSelected() {
+
+    }
+
+    @Override
+    public void onTabDeselected() {
+        view.disableActionMode();
+    }
+
     @Override
     public void addFavorite() {
         view.showAddFavorite();
@@ -108,16 +119,49 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
     @Override
     public void onFavoriteClick(int position) {
         if (viewModel.isActionMode()) {
-            view.onFavoriteSelected(position);
+            onFavoriteSelected(position);
         }
     }
 
     @Override
     public boolean onFavoriteLongClick(int position) {
-        if (!viewModel.isActionMode()) {
-            viewModel.setActionMode(true);
-        }
-        view.onFavoriteSelected(position);
+        view.enableActionMode();
+        onFavoriteSelected(position);
         return true;
     }
+
+    @Override
+    public void onCheckboxClick(int position) {
+        onFavoriteSelected(position);
+    }
+
+    private void onFavoriteSelected(int position) {
+        viewModel.toggleSelection(position);
+        view.selectionChanged(position);
+    }
+
+    @Override
+    public void onEditClick(@NonNull String favoriteId) {
+        view.showEditFavorite(favoriteId);
+    }
+
+    @Override
+    public void onToLinksClick(@NonNull String favoriteId) {
+    }
+
+    @Override
+    public void onToNotesClick(@NonNull String favoriteId) {
+    }
+
+    @Override
+    public void onDeleteClick() {
+        SparseBooleanArray selectedIds = viewModel.getSelectedIds();
+        int size = selectedIds.size();
+        for (int i = size - 1; i >= 0; i--) {
+            int key = selectedIds.keyAt(i);
+            viewModel.removeSelection(key);
+            String favoriteId = view.removeFavorite(key).getId();
+            repository.deleteFavorite(favoriteId);
+        }
+    } // onDeleteClick
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
index b0d951a..471f178 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
@@ -17,12 +17,12 @@ public class FavoritesPresenterModule {
     }
 
     @Provides
-    FavoritesContract.View provideFavoritesContractView() {
+    public FavoritesContract.View provideFavoritesContractView() {
         return view;
     }
 
     @Provides
-    FavoritesContract.ViewModel provideFavoritesContractViewModel() {
+    public FavoritesContract.ViewModel provideFavoritesContractViewModel() {
         return new FavoritesViewModel(context);
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
index 67d3f7a..ba213e4 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
@@ -4,33 +4,41 @@ import android.content.Context;
 import android.databinding.BaseObservable;
 import android.databinding.Bindable;
 import android.databinding.ObservableBoolean;
+import android.databinding.ObservableInt;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.SparseBooleanArray;
 
-import com.android.databinding.library.baseAdapters.BR;
+import com.bytesforge.linkasanote.BR;
+import com.bytesforge.linkasanote.utils.SparseBooleanParcelableArray;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
+// NOTE: global viewModel, applied to fragment and every Item
 public class FavoritesViewModel extends BaseObservable implements FavoritesContract.ViewModel {
 
-    public static final String STATE_ACTION_MODE = "ACTION_MODE";
+    private static final String STATE_ACTION_MODE = "ACTION_MODE";
+    private static final String STATE_LIST_SIZE = "LIST_SIZE";
+    private static final String STATE_SELECTED_IDS = "SELECTED_IDS";
 
-    public final ObservableBoolean toLinksButton = new ObservableBoolean(true);
-    public final ObservableBoolean selectedCheckbox = new ObservableBoolean(true);
-    public final ObservableBoolean toNotesButton = new ObservableBoolean(true);
-    public final ObservableBoolean editButton = new ObservableBoolean(true);
+    public final ObservableBoolean actionMode = new ObservableBoolean();
+    public final ObservableInt favoriteListSize = new ObservableInt(0);
 
     private FavoritesContract.Presenter presenter;
     private Context context;
 
-    private int favoriteListSize = 0;
-    private boolean actionMode;
+    private SparseBooleanArray selectedIds;
 
     public FavoritesViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
     }
 
+    @Bindable
+    public boolean isFavoriteListEmpty() {
+        return favoriteListSize.get() <= 0;
+    }
+
     @Override
     public void setInstanceState(@Nullable Bundle savedInstanceState) {
         if (savedInstanceState == null) {
@@ -44,15 +52,18 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
     public void loadInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
 
-        outState.putBoolean(STATE_ACTION_MODE, actionMode);
+        outState.putBoolean(STATE_ACTION_MODE, actionMode.get());
+        outState.putInt(STATE_LIST_SIZE, favoriteListSize.get());
+        outState.putParcelable(STATE_SELECTED_IDS, new SparseBooleanParcelableArray(selectedIds));
     }
 
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
 
-        actionMode = state.getBoolean(STATE_ACTION_MODE);
-        setActionMode(actionMode);
+        actionMode.set(state.getBoolean(STATE_ACTION_MODE));
+        favoriteListSize.set(state.getInt(STATE_LIST_SIZE));
+        selectedIds = state.getParcelable(STATE_SELECTED_IDS);
 
         notifyChange();
     }
@@ -61,6 +72,8 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
         Bundle defaultState = new Bundle();
 
         defaultState.putBoolean(STATE_ACTION_MODE, false);
+        defaultState.putInt(STATE_LIST_SIZE, 0);
+        defaultState.putParcelable(STATE_SELECTED_IDS, new SparseBooleanParcelableArray());
 
         return defaultState;
     }
@@ -70,33 +83,61 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
         this.presenter = checkNotNull(presenter);
     }
 
-    @Bindable
-    public boolean isFavoritesEmpty() {
-        return favoriteListSize <= 0;
+    public void setFavoriteListSize(int favoriteListSize) {
+        this.favoriteListSize.set(favoriteListSize);
+        notifyPropertyChanged(BR.favoriteListEmpty);
     }
 
     @Override
-    public void setFavoriteListSize(int favoriteListSize) {
-        this.favoriteListSize = favoriteListSize;
-        notifyPropertyChanged(BR.favoritesEmpty);
+    public boolean isActionMode() {
+        return actionMode.get();
     }
 
-    public boolean isActionMode() {
-        return actionMode;
+    @Override
+    public void enableActionMode() {
+        actionMode.set(true);
+        notifyChange(); // NOTE: otherwise, the only current Item will be notified
+    }
+
+    @Override
+    public void disableActionMode() {
+        actionMode.set(false);
+        notifyChange();
+    }
+
+    // Selection
+
+    @Override
+    public boolean isSelected(int position) {
+        return selectedIds.get(position);
     }
 
-    public void setActionMode(boolean actionMode) {
-        this.actionMode = actionMode;
-        if (this.actionMode) {
-            toLinksButton.set(false);
-            selectedCheckbox.set(true);
-            toNotesButton.set(false);
-            editButton.set(true);
+    @Override
+    public void toggleSelection(int position) {
+        if (isSelected(position)) {
+            selectedIds.delete(position);
         } else {
-            toLinksButton.set(true);
-            selectedCheckbox.set(false);
-            toNotesButton.set(true);
-            editButton.set(false);
+            selectedIds.put(position, true);
         }
     }
+
+    @Override
+    public void removeSelection() {
+        selectedIds.clear();
+    }
+
+    @Override
+    public void removeSelection(int position) {
+        selectedIds.delete(position);
+    }
+
+    @Override
+    public int getSelectedCount() {
+        return selectedIds.size();
+    }
+
+    @Override
+    public SparseBooleanArray getSelectedIds() {
+        return selectedIds;
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenterModule.java
index fbdbbb7..47e73a5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenterModule.java
@@ -13,7 +13,7 @@ public class LinksPresenterModule {
     }
 
     @Provides
-    LinksContract.View provideLinksContractView() {
+    public LinksContract.View provideLinksContractView() {
         return view;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenterModule.java
index eccda19..b91a11b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenterModule.java
@@ -13,7 +13,7 @@ public class NotesPresenterModule {
     }
 
     @Provides
-    NotesContract.View provideNotesContractView() {
+    public NotesContract.View provideNotesContractView() {
         return view;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
index d73293b..d7663a6 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
@@ -55,10 +55,10 @@ public class ManageAccountsActivity extends AppCompatActivity {
         }
         view = fragment;
         // Presenter
-        DaggerManageAccountsComponent.builder()
-                .applicationComponent(((LaanoApplication) getApplication()).getApplicationComponent())
-                .manageAccountsPresenterModule(new ManageAccountsPresenterModule(this, fragment))
-                .build().inject(this);
+        LaanoApplication application = (LaanoApplication) getApplication();
+        application.getApplicationComponent().getManageAccountsComponent(
+                new ManageAccountsPresenterModule(this, fragment))
+                .inject(this);
         // Accounts
         if (savedInstanceState != null) {
             accountNames = savedInstanceState.getStringArray(STATE_ACCOUNT_NAMES);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
index 00b0341..e0eaf25 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsComponent.java
@@ -1,13 +1,11 @@
 package com.bytesforge.linkasanote.manageaccounts;
 
-import com.bytesforge.linkasanote.ApplicationComponent;
 import com.bytesforge.linkasanote.FragmentScoped;
 
-import dagger.Component;
+import dagger.Subcomponent;
 
 @FragmentScoped
-@Component(dependencies = {ApplicationComponent.class},
-        modules = {ManageAccountsPresenterModule.class})
+@Subcomponent(modules = {ManageAccountsPresenterModule.class})
 public interface ManageAccountsComponent {
 
     void inject(ManageAccountsActivity manageAccountsActivity);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
index 3f171bc..66c565d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
@@ -35,9 +35,13 @@ import com.owncloud.android.lib.common.accounts.AccountUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 
 import rx.Observable;
+import rx.Observer;
+import rx.observables.SyncOnSubscribe;
 
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountUsername;
@@ -123,26 +127,46 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
 
     @Override
     public Observable<AccountItem> loadAccountItems() {
-        return Observable.create(subscriber -> {
-            Account[] accounts = getAccountsWithPermissionCheck();
-            if (accounts == null) {
-                subscriber.onError(new NullPointerException());
-                return;
-            }
-            for (Account account : accounts) {
-                AccountItem accountItem = new AccountItem(account);
-                try {
-                    OwnCloudAccount ownCloudAccount = new OwnCloudAccount(account, getContext());
-                    accountItem.setDisplayName(ownCloudAccount.getDisplayName());
-                } catch (AccountUtils.AccountNotFoundException e) {
-                    accountItem.setDisplayName(getAccountUsername(account.name));
+        return Observable.create(new SyncOnSubscribe<Iterator<AccountItem>, AccountItem>() {
+            @Override
+            protected Iterator<AccountItem> generateState() {
+                Account[] accounts = getAccountsWithPermissionCheck();
+                if (accounts == null) return null;
+
+                List<AccountItem> accountItems = new LinkedList<>();
+                for (Account account : accounts) {
+                    accountItems.add(new AccountItem(account));
+                }
+                if (getResources().getBoolean(R.bool.multiaccount_support) || accounts.length <= 0) {
+                    accountItems.add(new AccountItem());
                 }
-                subscriber.onNext(accountItem);
+                return accountItems.iterator();
             }
-            if (getResources().getBoolean(R.bool.multiaccount_support) || accounts.length <= 0) {
-                subscriber.onNext(new AccountItem());
+
+            @Override
+            protected Iterator<AccountItem> next(
+                    Iterator<AccountItem> state, Observer<? super AccountItem> observer) {
+                if (state == null) {
+                    observer.onError(new NullPointerException());
+                } else if (state.hasNext()) {
+                    AccountItem accountItem = state.next();
+                    Account account = accountItem.getAccount();
+                    if (account != null) {
+                        try {
+                            OwnCloudAccount ocAccount = new OwnCloudAccount(account, getContext());
+                            accountItem.setDisplayName(ocAccount.getDisplayName());
+                        } catch (AccountUtils.AccountNotFoundException e) {
+                            accountItem.setDisplayName(getAccountUsername(account.name));
+                        }
+                        observer.onNext(accountItem);
+                    } else {
+                        observer.onNext(new AccountItem());
+                    }
+                } else {
+                    observer.onCompleted();
+                }
+                return state;
             }
-            subscriber.onCompleted();
         });
     }
 
@@ -169,7 +193,7 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
     @Override
     public void addAccount() {
         accountManager.addAccount(getAccountType(getContext()),
-                null, null, null, getActivity(), addAccountCallback, new Handler());
+                null, null, null, getActivity(), addAccountCallback, handler);
     }
 
     @Override
diff --git a/app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
similarity index 81%
rename from app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
rename to app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
index aa7fd6a..8a4ec1e 100644
--- a/app/src/mock/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
@@ -9,8 +9,8 @@ import dagger.Provides;
 @Module
 public class ManageAccountsPresenterModule {
 
-    private final Context context;
     private final ManageAccountsContract.View view;
+    private final Context context;
 
     public ManageAccountsPresenterModule(Context context, ManageAccountsContract.View view) {
         this.context = context;
@@ -18,12 +18,12 @@ public class ManageAccountsPresenterModule {
     }
 
     @Provides
-    ManageAccountsContract.View provideManageAccountsContractView() {
+    public ManageAccountsContract.View provideManageAccountsContractView() {
         return view;
     }
 
     @Provides
-    AccountManager provideAccountManager() {
+    public AccountManager provideAccountManager() {
         return AccountManager.get(context);
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/SyncState.java b/app/src/main/java/com/bytesforge/linkasanote/sync/SyncState.java
new file mode 100644
index 0000000..8e30687
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/SyncState.java
@@ -0,0 +1,78 @@
+package com.bytesforge.linkasanote.sync;
+
+import android.content.ContentValues;
+
+import com.bytesforge.linkasanote.data.source.local.LocalContract;
+
+abstract public class SyncState {
+
+    private boolean conflicted;
+    private boolean deleted;
+    private boolean synced;
+
+    public enum State {
+        UNSYNCED, SYNCED, DELETED, CONFLICTED_UPDATE, CONFLICTED_DELETE}
+
+    public static ContentValues getSyncStateValues(State state) {
+        // NOTE: check setSyncState below
+        switch (state) {
+            case UNSYNCED:
+                return getSyncStateValues(false, false, false);
+            case SYNCED:
+                return getSyncStateValues(false, false, true);
+            case DELETED:
+                return getSyncStateValues(false, true, false);
+            case CONFLICTED_UPDATE:
+                return getSyncStateValues(true, false, false);
+            case CONFLICTED_DELETE:
+                return getSyncStateValues(true, true, false);
+            default:
+                throw new IllegalArgumentException("Unexpected state was provided [" + state + "]");
+        }
+    }
+
+    private static ContentValues getSyncStateValues(
+            boolean conflicted, boolean deleted, boolean synced) {
+        ContentValues values = new ContentValues();
+        values.put(LocalContract.COMMON_NAME_CONFLICTED, conflicted);
+        values.put(LocalContract.COMMON_NAME_DELETED, deleted);
+        values.put(LocalContract.COMMON_NAME_SYNCED, synced);
+        return values;
+    }
+
+    public void setSyncState(State state) {
+        switch (state) {
+            case UNSYNCED:
+                setSyncState(false, false, false); // cds
+                break;
+            case SYNCED:
+                setSyncState(false, false, true); // cdS
+                break;
+            case DELETED:
+                setSyncState(false, true, false); // cDs, cDS successfully deleted (delete record)
+                break;
+            case CONFLICTED_UPDATE:
+                // NOTE: Local record was updated and Cloud one was modified or deleted
+                // TODO: Conflicted record must preload Cloud copy and check if conflict still exists
+                // TODO: Cloud copy: empty & cDs - deleted, cds - updated
+                setSyncState(true, false, false); // Cds, CdS successfully resolved (syncedState)
+                break;
+            case CONFLICTED_DELETE:
+                // NOTE: Local record was deleted and Cloud one was modified
+                setSyncState(true, true, false); // CDs, CDS successfully resolved (syncedState)
+                break;
+            default:
+                throw new IllegalArgumentException("Unexpected state was provided [" + state + "]");
+        }
+    }
+
+    protected void setSyncState(boolean conflicted, boolean deleted, boolean synced) {
+        this.conflicted = conflicted;
+        this.deleted = deleted;
+        this.synced = synced;
+    }
+
+    protected ContentValues getSyncStateValues() {
+        return getSyncStateValues(conflicted, deleted, synced);
+    }
+}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java b/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
index 386066d..07dfda5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/files/JsonFile.java
@@ -8,11 +8,12 @@ import android.os.Parcelable;
 import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.data.source.local.LocalContract;
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.google.common.base.Objects;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-public class JsonFile implements Parcelable, Comparable<JsonFile> {
+public class JsonFile extends SyncState implements Parcelable, Comparable<JsonFile> {
 
     private static final String MIME_TYPE = "application/json";
 
@@ -23,9 +24,6 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
     private String localPath;
     private String remotePath;
     private String eTag;
-    private boolean conflicted;
-    private boolean deleted;
-    private boolean synced;
 
     public static final Creator<JsonFile> CREATOR = new Creator<JsonFile>() {
         @Override
@@ -51,9 +49,6 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         localPath = null;
         this.remotePath = remotePath;
         eTag = null;
-        conflicted = false;
-        deleted = false;
-        synced = false;
     }
 
     protected JsonFile(Parcel in) {
@@ -62,9 +57,6 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         localPath = in.readString();
         remotePath = in.readString();
         eTag = in.readString();
-        conflicted = in.readInt() == 1;
-        deleted = in.readInt() == 1;
-        synced = in.readInt() == 1;
     }
 
     @Override
@@ -79,9 +71,6 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         dest.writeString(localPath);
         dest.writeString(remotePath);
         dest.writeString(eTag);
-        dest.writeInt(conflicted ? 1 : 0);
-        dest.writeInt(deleted ? 1 : 0);
-        dest.writeInt(synced ? 1 : 0);
     }
 
     @Override
@@ -142,38 +131,6 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
         this.eTag = eTag;
     }
 
-    // States
-
-    public void setState(boolean conflicted, boolean deleted, boolean synced) {
-        this.conflicted = conflicted;
-        this.deleted = deleted;
-        this.synced = synced;
-    }
-
-    public void setUnsyncedState() {
-        setState(false, false, false); // cds
-    }
-
-    public void setSyncedState() {
-        setState(false, false, true); // cdS
-    }
-
-    public void setLocalDeletedState() {
-        setState(false, true, false); // cDs, cDS successfully deleted (delete record)
-    }
-
-    public void setConflictedUpdate() {
-        // NOTE: Local record was updated and Cloud one was modified or deleted
-        // TODO: Conflicted record must preload Cloud copy and check if conflict still exists
-        // TODO: Cloud copy: empty & cDs - deleted, cds - updated
-        setState(true, false, false); // Cds, CdS successfully resolved (syncedState)
-    }
-
-    public void setConflictedDelete() {
-        // NOTE: Local record was deleted and Cloud one was modified
-        setState(true, true, false); // CDs, CDS successfully resolved (syncedState)
-    }
-
     public String getKey(@NonNull Account account) {
         checkNotNull(account);
         return account.name + getRemotePath();
@@ -181,12 +138,8 @@ public class JsonFile implements Parcelable, Comparable<JsonFile> {
 
     @NonNull
     public ContentValues getUpdateValues() {
-        ContentValues values = new ContentValues();
+        ContentValues values = getSyncStateValues();
         values.put(LocalContract.COMMON_NAME_ETAG, getETag());
-        values.put(LocalContract.COMMON_NAME_CONFLICTED, conflicted);
-        values.put(LocalContract.COMMON_NAME_DELETED, deleted);
-        values.put(LocalContract.COMMON_NAME_SYNCED, synced);
-
         return values;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java b/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
index 94fe1e1..e299c94 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/operations/nextcloud/UploadFileOperation.java
@@ -7,6 +7,7 @@ import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;
 
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.sync.files.JsonFile;
 import com.owncloud.android.lib.common.OwnCloudClient;
 import com.owncloud.android.lib.common.operations.RemoteOperation;
@@ -28,7 +29,8 @@ import static com.google.common.base.Preconditions.checkNotNull;
 public class UploadFileOperation extends RemoteOperation {
 
     private static final String NEXTCLOUD_HEADER_PREFIX = "OC-".toLowerCase();
-    private static final String NEXTCLOUD_ETAG_HEADER = NEXTCLOUD_HEADER_PREFIX + "ETag".toLowerCase();
+    private static final String NEXTCLOUD_FILE_ID_HEADER = NEXTCLOUD_HEADER_PREFIX + "FileId".toLowerCase();
+    private static final String NEXTCLOUD_E_TAG_HEADER = NEXTCLOUD_HEADER_PREFIX + "ETag".toLowerCase();
     private static final String TAG = UploadFileOperation.class.getSimpleName();
 
     private Account account;
@@ -72,7 +74,7 @@ public class UploadFileOperation extends RemoteOperation {
         result = uploadOperation.execute(client);
         if (result.isSuccess()) {
             file.setETag(uploadOperation.getETag());
-            file.setSyncedState();
+            file.setSyncState(SyncState.State.SYNCED);
             int rowsUpdated = contentResolver.update(
                     file.getUri(), file.getUpdateValues(), null, null);
             if (rowsUpdated != 1) {
@@ -108,8 +110,8 @@ public class UploadFileOperation extends RemoteOperation {
 
     private class EnhancedUploadRemoteFileOperation extends UploadRemoteFileOperation {
 
-        private Map<String, String> nextcloudHeaders = new HashMap<>();
         private OwnCloudClient client;
+        private String fileId;
         private String eTag;
 
         public EnhancedUploadRemoteFileOperation(String localPath, String remotePath, String mimeType) {
@@ -120,25 +122,38 @@ public class UploadFileOperation extends RemoteOperation {
         public String getETag() {
             if (eTag != null) return eTag;
 
-            if (nextcloudHeaders != null) {
-                eTag = nextcloudHeaders.get(NEXTCLOUD_ETAG_HEADER);
-            }
-            if (eTag == null) {
-                ReadRemoteFileOperation operation = new ReadRemoteFileOperation(this.mRemotePath);
-                RemoteOperationResult result = operation.execute(client);
-                if (result.isSuccess()) {
-                    RemoteFile file = (RemoteFile) result.getData().get(0);
-                    eTag = file.getEtag();
-                }
-            }
+            requestNextcloudFileAttributes();
             return eTag;
         }
 
+        @Nullable
+        public String getFileId() {
+            if (fileId != null) return fileId;
+
+            requestNextcloudFileAttributes();
+            return fileId;
+        }
+
+        private void requestNextcloudFileAttributes() {
+            ReadRemoteFileOperation operation = new ReadRemoteFileOperation(this.mRemotePath);
+            RemoteOperationResult result = operation.execute(client);
+            if (result.isSuccess()) {
+                RemoteFile file = (RemoteFile) result.getData().get(0);
+                fileId = file.getRemoteId();
+                eTag = file.getEtag();
+            }
+        }
+
         @Override
         public RemoteOperationResult execute(OwnCloudClient client) {
             this.client = client;
             RemoteOperationResult result = super.execute(client);
-            nextcloudHeaders = extractNextcloudResponseHeaders(this.mPutMethod.getResponseHeaders());
+            Map<String, String> nextcloudHeaders =
+                    extractNextcloudResponseHeaders(this.mPutMethod.getResponseHeaders());
+            if (nextcloudHeaders != null) {
+                fileId = nextcloudHeaders.get(NEXTCLOUD_FILE_ID_HEADER);
+                eTag = nextcloudHeaders.get(NEXTCLOUD_E_TAG_HEADER);
+            }
             return result;
         }
 
@@ -156,5 +171,5 @@ public class UploadFileOperation extends RemoteOperation {
             }
             return nextcloudHeaders.size() <= 0 ? null : nextcloudHeaders;
         }
-    } // class EnhancedUploadRemoteFileOperation
+    } // class
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/SparseBooleanParcelableArray.java b/app/src/main/java/com/bytesforge/linkasanote/utils/SparseBooleanParcelableArray.java
new file mode 100644
index 0000000..1718a08
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/SparseBooleanParcelableArray.java
@@ -0,0 +1,60 @@
+package com.bytesforge.linkasanote.utils;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.SparseBooleanArray;
+
+public class SparseBooleanParcelableArray extends SparseBooleanArray implements Parcelable {
+
+    public static final Creator<SparseBooleanParcelableArray> CREATOR =
+            new Creator<SparseBooleanParcelableArray>() {
+        @Override
+        public SparseBooleanParcelableArray createFromParcel(Parcel in) {
+            SparseBooleanParcelableArray read = new SparseBooleanParcelableArray();
+            int size = in.readInt();
+
+            int[] keys = new int[size];
+            boolean[] values = new boolean[size];
+            in.readIntArray(keys);
+            in.readBooleanArray(values);
+            for (int i = 0; i < size; i++) {
+                read.put(keys[i], values[i]);
+            }
+            return read;
+        }
+
+        @Override
+        public SparseBooleanParcelableArray[] newArray(int size) {
+            return new SparseBooleanParcelableArray[size];
+        }
+    };
+
+    public SparseBooleanParcelableArray() {
+    }
+
+    public SparseBooleanParcelableArray(SparseBooleanArray sparseBooleanArray) {
+        for (int i = 0; i < sparseBooleanArray.size(); i++) {
+            this.put(sparseBooleanArray.keyAt(i), sparseBooleanArray.valueAt(i));
+        }
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        int size = size();
+
+        int[] keys = new int[size];
+        boolean[] values = new boolean[size];
+        for (int i = 0; i < size; i++) {
+            keys[i] = keyAt(i);
+            values[i] = valueAt(i);
+        }
+        dest.writeInt(size);
+        dest.writeIntArray(keys);
+        dest.writeBooleanArray(values);
+    }
+}
diff --git a/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java b/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
deleted file mode 100644
index 54b31b0..0000000
--- a/app/src/prod/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenterModule.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.bytesforge.linkasanote.manageaccounts;
-
-import android.accounts.AccountManager;
-import android.content.Context;
-
-import dagger.Module;
-import dagger.Provides;
-
-@Module
-public class ManageAccountsPresenterModule {
-
-    private final ManageAccountsContract.View view;
-    private final Context context;
-
-    public ManageAccountsPresenterModule(Context context, ManageAccountsContract.View view) {
-        this.context = context;
-        this.view = view;
-    }
-
-    @Provides
-    ManageAccountsContract.View provideManageAccountsContractView() {
-        return view;
-    }
-
-    @Provides
-    AccountManager provideAccountManager() {
-        return AccountManager.get(context);
-    }
-}
