diff --git a/app/src/main/java/com/blanyal/remindme/MainActivity.java b/app/src/main/java/com/blanyal/remindme/MainActivity.java
index 8a75014..70375c4 100644
--- a/app/src/main/java/com/blanyal/remindme/MainActivity.java
+++ b/app/src/main/java/com/blanyal/remindme/MainActivity.java
@@ -18,21 +18,18 @@
 package com.blanyal.remindme;
 
 import android.content.Intent;
-import android.os.Build;
 import android.support.v7.app.ActionBarActivity;
 import android.os.Bundle;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.Toolbar;
 import android.util.Log;
-import android.util.SparseBooleanArray;
 import android.view.ContextMenu;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AdapterView;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -50,11 +47,8 @@ import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.Date;
 import java.util.LinkedHashMap;
 import java.util.List;
-import java.util.Map;
-import java.util.Random;
 
 
 public class MainActivity extends ActionBarActivity {
@@ -64,12 +58,10 @@ public class MainActivity extends ActionBarActivity {
     private FloatingActionButton mAddReminderButton;
     private int mTempPost;
     private LinkedHashMap<Integer, Integer> IDmap = new LinkedHashMap<>();
-
     private ReminderDatabase rb;
     private MultiSelector mMultiSelector = new MultiSelector();
 
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -93,11 +85,10 @@ public class MainActivity extends ActionBarActivity {
         mAddReminderButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                Intent intent = new Intent(v.getContext(), AddReminderActivity.class);
+                Intent intent = new Intent(v.getContext(), ReminderAddActivity.class);
                 startActivity(intent);
             }
         });
-
     }
 
 
@@ -121,15 +112,12 @@ public class MainActivity extends ActionBarActivity {
             switch (menuItem.getItemId()) {
 
                 case R.id.discard_reminder:
-
                     actionMode.finish();
 
                     for (int i = IDmap.size(); i >= 0; i--) {
                         if (mMultiSelector.isSelected(i, 0)) {
                             int id = IDmap.get(i);
 
-                            //Log.d("ID: ", Integer.toString(id));
-
                             Reminder temp = rb.getReminder(id);
                             rb.deleteReminder(temp);
                             mAdapter.removeItemSelected(i);
@@ -144,9 +132,7 @@ public class MainActivity extends ActionBarActivity {
                             Toast.LENGTH_SHORT).show();
                     return true;
 
-
                 case R.id.save_reminder:
-
                     actionMode.finish();
                     mMultiSelector.clearSelections();
                     return true;
@@ -160,14 +146,18 @@ public class MainActivity extends ActionBarActivity {
 
 
     private void selectReminder(int mClickID) {
-
-        Log.d("LOG","ExtraID " + mClickID);
-
+        Log.d("LOG", "ExtraID " + mClickID);
         String mStringClickID = Integer.toString(mClickID);
 
-        Intent i = new Intent(this, AddReminderActivity.class);
-        //i.putExtra(EditReminderActivity.EXTRA_REMINDER_ID, mStringClickID);
+        Intent i = new Intent(this, ReminderEditActivity.class);
+        i.putExtra(ReminderEditActivity.EXTRA_REMINDER_ID, mStringClickID);
+        startActivityForResult(i, 1);
+    }
+
 
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        mAdapter.setItemCount(getDefaultItemCount());
     }
 
 
@@ -203,10 +193,8 @@ public class MainActivity extends ActionBarActivity {
 
 
     public class SimpleAdapter extends RecyclerView.Adapter<SimpleAdapter.VerticalItemHolder> {
-
         private ArrayList<ReminderItem> mItems;
 
-
         public SimpleAdapter() {
             mItems = new ArrayList<>();
         }
@@ -225,19 +213,6 @@ public class MainActivity extends ActionBarActivity {
         }
 
 
-        public void addItem() {
-            mItems.add(1, generateDummyItem());
-            notifyItemInserted(1);
-        }
-
-
-        public void removeItem() {
-            if (mItems.isEmpty()) return;
-            mItems.remove(0);
-            notifyItemRemoved(0);
-        }
-
-
         public void removeItemSelected(int selected) {
             if (mItems.isEmpty()) return;
             mItems.remove(selected);
@@ -253,16 +228,17 @@ public class MainActivity extends ActionBarActivity {
             return new VerticalItemHolder(root, this);
         }
 
+
         @Override
         public void onBindViewHolder(VerticalItemHolder itemHolder, int position) {
             ReminderItem item = mItems.get(position);
-
             itemHolder.setReminderTitle(item.mTitle);
             itemHolder.setReminderDateTime(item.mDateTime);
             itemHolder.setReminderRepeatInfo(item.mRepeat, item.mRepeatNo, item.mRepeatType);
             itemHolder.setActiveImage(item.mActive);
         }
 
+
         @Override
         public int getItemCount() {
             return mItems.size();
@@ -270,7 +246,6 @@ public class MainActivity extends ActionBarActivity {
 
 
         public  class ReminderItem {
-
             public String mTitle;
             public String mDateTime;
             public String mRepeat;
@@ -280,7 +255,6 @@ public class MainActivity extends ActionBarActivity {
 
 
             public ReminderItem(String Title, String DateTime, String Repeat, String RepeatNo, String RepeatType, String Active) {
-
                 this.mTitle = Title;
                 this.mDateTime = DateTime;
                 this.mRepeat = Repeat;
@@ -292,7 +266,6 @@ public class MainActivity extends ActionBarActivity {
 
 
         public class DateTimeComparator implements Comparator {
-
             DateFormat f = new SimpleDateFormat("dd/mm/yyyy hh:mm");
 
             public int compare(Object a, Object b) {
@@ -311,7 +284,6 @@ public class MainActivity extends ActionBarActivity {
 
         public  class VerticalItemHolder extends SwappingHolder
                 implements View.OnClickListener, View.OnLongClickListener {
-
             private TextView mTitleText, mDateAndTimeText, mRepeatInfoText;
             private ImageView mActiveImage , mThumbnailImage;
             private ColorGenerator mColorGenerator = ColorGenerator.DEFAULT;
@@ -320,7 +292,6 @@ public class MainActivity extends ActionBarActivity {
 
 
             public VerticalItemHolder(View itemView, SimpleAdapter adapter) {
-
                 super(itemView, mMultiSelector);
                 itemView.setOnClickListener(this);
                 itemView.setOnLongClickListener(this);
@@ -338,22 +309,13 @@ public class MainActivity extends ActionBarActivity {
 
             @Override
             public void onClick(View v) {
-
                 if (!mMultiSelector.tapSelection(this)) {
-
                     mTempPost = mList.getChildAdapterPosition(v);
 
-                    Log.d("LOG", "Position " + mTempPost);
-
                     int mReminderClickID = IDmap.get(mTempPost);
-
-                    Log.d("LOG", "ID " + mReminderClickID);
-
                     selectReminder(mReminderClickID);
 
                 } else if(mMultiSelector.getSelectedPositions().isEmpty()){
-
-                    Log.d("LOG","CLEAR!!!!!!!!!!! ");
                     mAdapter.setItemCount(getDefaultItemCount());
                 }
             }
@@ -390,7 +352,6 @@ public class MainActivity extends ActionBarActivity {
 
 
             public void setReminderRepeatInfo(String repeat, String repeatNo, String repeatType) {
-
                 if(repeat.equals("true")){
                     mRepeatInfoText.setText("Every " + repeatNo + " " + repeatType + "(s)");
                 }else if (repeat.equals("false")) {
@@ -401,7 +362,6 @@ public class MainActivity extends ActionBarActivity {
 
 
             public void setActiveImage(String active){
-
                 if(active.equals("true")){
                     mActiveImage.setImageResource(R.drawable.ic_toggle_star);
                 }else if (active.equals("false")) {
@@ -410,14 +370,15 @@ public class MainActivity extends ActionBarActivity {
             }
         }
 
+
         public  ReminderItem generateDummyItem() {
             return new ReminderItem("1", "2", "3", "4", "5", "6");
         }
 
+
         public List<ReminderItem> generateData(int count) {
             ArrayList<SimpleAdapter.ReminderItem> items = new ArrayList<>();
 
-
             List<Reminder> reminders = rb.getAllReminders();
 
             List<String> Titles = new ArrayList<>();
@@ -427,13 +388,10 @@ public class MainActivity extends ActionBarActivity {
             List<String> Actives = new ArrayList<>();
             List<String> DateAndTime = new ArrayList<>();
             List<Integer> IDList= new ArrayList<>();
-            Map<String, String> map = new LinkedHashMap<>();
-
-
+            List<DateTimeSorter> DateTimeSortList = new ArrayList<>();
 
 
             for (Reminder r : reminders) {
-
                 Titles.add(r.getTitle());
                 DateAndTime.add(r.getDate() + " " + r.getTime());
                 Repeats.add(r.getRepeat());
@@ -444,21 +402,15 @@ public class MainActivity extends ActionBarActivity {
             }
 
 
-            List<DateTimeSorter> DateTimeSortList = new ArrayList<>();
-
-
-            int key=0;
+            int key = 0;
 
-            for(int k=0;k<Titles.size();k++){
-                map.put(DateAndTime.get(k),Integer.toString(key));
+            for(int k = 0; k<Titles.size(); k++){
                 DateTimeSortList.add(new DateTimeSorter(key, DateAndTime.get(k)));
                 key++;
             }
 
-
             Collections.sort(DateTimeSortList, new DateTimeComparator());
 
-
             int k = 0;
 
             for (DateTimeSorter item:DateTimeSortList) {
diff --git a/app/src/main/java/com/blanyal/remindme/Reminder.java b/app/src/main/java/com/blanyal/remindme/Reminder.java
index ff573f5..94f3882 100644
--- a/app/src/main/java/com/blanyal/remindme/Reminder.java
+++ b/app/src/main/java/com/blanyal/remindme/Reminder.java
@@ -41,6 +41,7 @@ public class Reminder {
         mActive = Active;
     }
 
+
     public Reminder(String Title, String Date, String Time, String Repeat, String RepeatNo, String RepeatType, String Active){
         mTitle = Title;
         mDate = Date;
diff --git a/app/src/main/java/com/blanyal/remindme/AddReminderActivity.java b/app/src/main/java/com/blanyal/remindme/ReminderAddActivity.java
similarity index 96%
rename from app/src/main/java/com/blanyal/remindme/AddReminderActivity.java
rename to app/src/main/java/com/blanyal/remindme/ReminderAddActivity.java
index 2d85024..441108b 100644
--- a/app/src/main/java/com/blanyal/remindme/AddReminderActivity.java
+++ b/app/src/main/java/com/blanyal/remindme/ReminderAddActivity.java
@@ -15,11 +15,8 @@
  */
 
 
-
-
 package com.blanyal.remindme;
 
-
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.os.Bundle;
@@ -42,16 +39,13 @@ import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
 import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout;
 import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;
 
-import java.text.DecimalFormat;
-import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.List;
 
 
-public class AddReminderActivity extends ActionBarActivity implements
+public class ReminderAddActivity extends ActionBarActivity implements
         TimePickerDialog.OnTimeSetListener,
         DatePickerDialog.OnDateSetListener{
-
     private Toolbar mToolbar;
     private EditText mReminderText;
     private TextView mDateText, mTimeText, mRepeatText, mRepeatNoText, mRepeatTypeText;
@@ -73,7 +67,6 @@ public class AddReminderActivity extends ActionBarActivity implements
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_add_reminder);
 
-
         mToolbar = (Toolbar) findViewById(R.id.toolbar);
         mReminderText = (EditText) findViewById(R.id.reminder_title);
         mDateText = (TextView) findViewById(R.id.set_date);
@@ -82,19 +75,16 @@ public class AddReminderActivity extends ActionBarActivity implements
         mRepeatNoText = (TextView) findViewById(R.id.set_repeat_no);
         mRepeatTypeText = (TextView) findViewById(R.id.set_repeat_type);
 
-
         setSupportActionBar(mToolbar);
         getSupportActionBar().setTitle(R.string.title_activity_add_reminder);
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
         getSupportActionBar().setHomeButtonEnabled(true);
 
-
         mActive = "true";
         mRepeat = "true";
         mRepeatNo = Integer.toString(1);
         mRepeatType = "Hour";
 
-
         mCalendar = Calendar.getInstance();
         mHour = mCalendar.get(Calendar.HOUR_OF_DAY);
         mMinute = mCalendar.get(Calendar.MINUTE);
@@ -102,16 +92,12 @@ public class AddReminderActivity extends ActionBarActivity implements
         mMonth = mCalendar.get(Calendar.MONTH);
         mDay = mCalendar.get(Calendar.DATE);
 
-
         mDate = mDay + "/" + mMonth + "/" + mYear;
         mTime = mHour + ":" + mMinute;
 
-
         mReminderText.addTextChangedListener(new TextWatcher() {
             @Override
-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-
-            }
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
 
             @Override
             public void onTextChanged(CharSequence s, int start, int before, int count) {
@@ -120,9 +106,7 @@ public class AddReminderActivity extends ActionBarActivity implements
             }
 
             @Override
-            public void afterTextChanged(Editable s) {
-
-            }
+            public void afterTextChanged(Editable s) {}
         });
 
         mDateText.setText(mDate);
@@ -130,7 +114,6 @@ public class AddReminderActivity extends ActionBarActivity implements
         mRepeatNoText.setText(mRepeatNo);
         mRepeatTypeText.setText(mRepeatType);
         mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
-
     }
 
 
@@ -165,6 +148,7 @@ public class AddReminderActivity extends ActionBarActivity implements
         mTimeText.setText(mTime);
     }
 
+
     @Override
     public void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {
         mDate = dayOfMonth + "/" + monthOfYear + "/" + year;
@@ -178,7 +162,6 @@ public class AddReminderActivity extends ActionBarActivity implements
         mFAB2 = (FloatingActionButton) findViewById(R.id.starred2);
         mFAB2.setVisibility(View.VISIBLE);
         mActive = "true";
-        Log.d("Active", mActive);
     }
 
 
@@ -188,13 +171,11 @@ public class AddReminderActivity extends ActionBarActivity implements
         mFAB1 = (FloatingActionButton) findViewById(R.id.starred1);
         mFAB1.setVisibility(View.VISIBLE);
         mActive = "false";
-        Log.d("Active", mActive);
     }
 
 
     public void onSwitchRepeat(View view) {
         boolean on = ((Switch) view).isChecked();
-
         if (on) {
             mRepeat = "true";
             mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
@@ -206,7 +187,6 @@ public class AddReminderActivity extends ActionBarActivity implements
 
 
     public void selectRepeatType(View v){
-
         final String[] items = new String[5];
 
         items[0] = "Minute";
@@ -235,7 +215,6 @@ public class AddReminderActivity extends ActionBarActivity implements
     public void setRepeatNo(View v){
         AlertDialog.Builder alert = new AlertDialog.Builder(this);
         alert.setTitle("Enter Number");
-        //alert.setMessage("Enter Number");
 
         final EditText input = new EditText(this);
         input.setInputType(InputType.TYPE_CLASS_NUMBER);
@@ -249,7 +228,6 @@ public class AddReminderActivity extends ActionBarActivity implements
                         mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
                     }
                 });
-
         alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
             public void onClick(DialogInterface dialog, int whichButton) {
                 // do nothing
@@ -260,7 +238,6 @@ public class AddReminderActivity extends ActionBarActivity implements
 
 
     public void saveReminder(){
-
         ReminderDatabase rb = new ReminderDatabase(this);
 
         // Inserting Reminder
@@ -275,7 +252,6 @@ public class AddReminderActivity extends ActionBarActivity implements
 
             Log.d("Name: ", log);
         }
-
         Toast.makeText(getApplicationContext(), "Saved",
                 Toast.LENGTH_SHORT).show();
 
@@ -326,5 +302,4 @@ public class AddReminderActivity extends ActionBarActivity implements
                 return super.onOptionsItemSelected(item);
         }
     }
-
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/blanyal/remindme/ReminderEditActivity.java b/app/src/main/java/com/blanyal/remindme/ReminderEditActivity.java
new file mode 100644
index 0000000..8537e5e
--- /dev/null
+++ b/app/src/main/java/com/blanyal/remindme/ReminderEditActivity.java
@@ -0,0 +1,334 @@
+/*
+ * Copyright 2015 Blanyal D'souza.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package com.blanyal.remindme;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.ActionBarActivity;
+import android.support.v7.widget.Toolbar;
+import android.text.Editable;
+import android.text.InputType;
+import android.text.TextWatcher;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.Switch;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.getbase.floatingactionbutton.FloatingActionButton;
+import com.wdullaer.materialdatetimepicker.date.DatePickerDialog;
+import com.wdullaer.materialdatetimepicker.time.RadialPickerLayout;
+import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;
+
+import java.util.Calendar;
+import java.util.List;
+
+
+public class ReminderEditActivity extends ActionBarActivity implements
+        TimePickerDialog.OnTimeSetListener,
+        DatePickerDialog.OnDateSetListener{
+    private Toolbar mToolbar;
+    private EditText mReminderText;
+    private TextView mDateText, mTimeText, mRepeatText, mRepeatNoText, mRepeatTypeText;
+    private FloatingActionButton mFAB1;
+    private FloatingActionButton mFAB2;
+    private Calendar mCalendar;
+    private int mYear, mMonth, mHour, mMinute, mDay;
+    private String mTitle;
+    private String mTime;
+    private String mDate;
+    private String mRepeatNo;
+    private String mRepeatType;
+    private String mActive;
+    private String mRepeat;
+    private int mReceivedID;
+    public static final String EXTRA_REMINDER_ID = "Reminder_ID";
+    private Reminder mReceivedReminder;
+    private ReminderDatabase rb;
+
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_add_reminder);
+
+        mToolbar = (Toolbar) findViewById(R.id.toolbar);
+        mReminderText = (EditText) findViewById(R.id.reminder_title);
+        mDateText = (TextView) findViewById(R.id.set_date);
+        mTimeText = (TextView) findViewById(R.id.set_time);
+        mRepeatText = (TextView) findViewById(R.id.set_repeat);
+        mRepeatNoText = (TextView) findViewById(R.id.set_repeat_no);
+        mRepeatTypeText = (TextView) findViewById(R.id.set_repeat_type);
+        mFAB1 = (FloatingActionButton) findViewById(R.id.starred1);
+        mFAB2 = (FloatingActionButton) findViewById(R.id.starred2);
+
+        setSupportActionBar(mToolbar);
+        getSupportActionBar().setTitle(R.string.title_activity_add_reminder);
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        getSupportActionBar().setHomeButtonEnabled(true);
+
+        mActive = "true";
+        mRepeat = "true";
+        mRepeatNo = Integer.toString(1);
+        mRepeatType = "Hour";
+
+        mCalendar = Calendar.getInstance();
+        mHour = mCalendar.get(Calendar.HOUR_OF_DAY);
+        mMinute = mCalendar.get(Calendar.MINUTE);
+        mYear = mCalendar.get(Calendar.YEAR);
+        mMonth = mCalendar.get(Calendar.MONTH);
+        mDay = mCalendar.get(Calendar.DATE);
+
+        mDate = mDay + "/" + mMonth + "/" + mYear;
+        mTime = mHour + ":" + mMinute;
+
+        mReminderText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                mTitle = s.toString().trim();
+                mReminderText.setError(null);
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {}
+        });
+
+        mReceivedID = Integer.parseInt(getIntent().getStringExtra(EXTRA_REMINDER_ID));
+
+        rb = new ReminderDatabase(this);
+        mReceivedReminder = rb.getReminder(mReceivedID);
+
+        mTitle = mReceivedReminder.getTitle();
+        mDate = mReceivedReminder.getDate();
+        mTime = mReceivedReminder.getTime();
+        mRepeat = mReceivedReminder.getRepeat();
+        mRepeatNo = mReceivedReminder.getRepeatNo();
+        mRepeatType = mReceivedReminder.getRepeatType();
+        mActive = mReceivedReminder.getActive();
+
+        mReminderText.setText(mTitle);
+        mDateText.setText(mDate);
+        mTimeText.setText(mTime);
+        mRepeatNoText.setText(mRepeatNo);
+        mRepeatTypeText.setText(mRepeatType);
+        mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
+
+        if (mActive.equals("false")) {
+            mFAB1.setVisibility(View.VISIBLE);
+            mFAB2.setVisibility(View.GONE);
+        } else if (mActive.equals("true")) {
+            mFAB1.setVisibility(View.GONE);
+            mFAB2.setVisibility(View.VISIBLE);
+        }
+    }
+
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+
+    }
+
+
+    public void setTime(View v){
+        Calendar now = Calendar.getInstance();
+        TimePickerDialog tpd = TimePickerDialog.newInstance(
+                this,
+                now.get(Calendar.HOUR_OF_DAY),
+                now.get(Calendar.MINUTE),
+                false
+        );
+        tpd.setThemeDark(false);
+        tpd.show(getFragmentManager(), "Timepickerdialog");
+    }
+
+
+    public void setDate(View v){
+        Calendar now = Calendar.getInstance();
+        DatePickerDialog dpd = DatePickerDialog.newInstance(
+                this,
+                now.get(Calendar.YEAR),
+                now.get(Calendar.MONTH),
+                now.get(Calendar.DAY_OF_MONTH)
+        );
+        dpd.show(getFragmentManager(), "Datepickerdialog");
+    }
+
+
+    @Override
+    public void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute) {
+        mTime = hourOfDay + ":" + minute;
+        mTimeText.setText(mTime);
+    }
+
+
+    @Override
+    public void onDateSet(DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {
+        mDate = dayOfMonth + "/" + monthOfYear + "/" + year;
+        mDateText.setText(mDate);
+    }
+
+
+    public void selectFab1(View v) {
+        mFAB1 = (FloatingActionButton) findViewById(R.id.starred1);
+        mFAB1.setVisibility(View.GONE);
+        mFAB2 = (FloatingActionButton) findViewById(R.id.starred2);
+        mFAB2.setVisibility(View.VISIBLE);
+        mActive = "true";
+    }
+
+
+    public void selectFab2(View v) {
+        mFAB2 = (FloatingActionButton) findViewById(R.id.starred2);
+        mFAB2.setVisibility(View.GONE);
+        mFAB1 = (FloatingActionButton) findViewById(R.id.starred1);
+        mFAB1.setVisibility(View.VISIBLE);
+        mActive = "false";
+    }
+
+
+    public void onSwitchRepeat(View view) {
+        boolean on = ((Switch) view).isChecked();
+        if (on) {
+            mRepeat = "true";
+            mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
+        } else {
+            mRepeat = "false";
+            mRepeatText.setText(R.string.repeat_off);
+        }
+    }
+
+
+    public void selectRepeatType(View v){
+        final String[] items = new String[5];
+
+        items[0] = "Minute";
+        items[1] = "Hour";
+        items[2] = "Day";
+        items[3] = "Week";
+        items[4] = "Month";
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle("Select Type");
+        builder.setItems(items, new DialogInterface.OnClickListener() {
+
+            public void onClick(DialogInterface dialog, int item) {
+
+                mRepeatType = items[item];
+                mRepeatTypeText.setText(mRepeatType);
+                mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
+            }
+        });
+        AlertDialog alert = builder.create();
+        alert.show();
+
+    }
+
+
+    public void setRepeatNo(View v){
+        AlertDialog.Builder alert = new AlertDialog.Builder(this);
+        alert.setTitle("Enter Number");
+
+        final EditText input = new EditText(this);
+        input.setInputType(InputType.TYPE_CLASS_NUMBER);
+        alert.setView(input);
+        alert.setPositiveButton("Ok",
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int whichButton) {
+
+                        mRepeatNo = input.getText().toString().trim();
+                        mRepeatNoText.setText(mRepeatNo);
+                        mRepeatText.setText("Every " + mRepeatNo + " " + mRepeatType + "(s)");
+                    }
+                });
+        alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int whichButton) {
+                // do nothing
+            }
+        });
+        alert.show();
+    }
+
+
+    public void updateReminder(){
+        mReceivedReminder.setTitle(mTitle);
+        mReceivedReminder.setDate(mDate);
+        mReceivedReminder.setTime(mTime);
+        mReceivedReminder.setRepeat(mRepeat);
+        mReceivedReminder.setRepeatNo(mRepeatNo);
+        mReceivedReminder.setRepeatType(mRepeatType);
+        mReceivedReminder.setActive(mActive);
+
+        rb.updateReminder(mReceivedReminder);
+
+        Toast.makeText(getApplicationContext(), "Edited",
+                Toast.LENGTH_SHORT).show();
+        onBackPressed();
+    }
+
+
+    @Override
+    public void onBackPressed() {
+        super.onBackPressed();
+    }
+
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.menu_add_reminder, menu);
+        return true;
+    }
+
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+
+            case android.R.id.home:
+                onBackPressed();
+                return true;
+
+            case R.id.save_reminder:
+                mReminderText.setText(mTitle);
+
+                if (mReminderText.getText().toString().length() == 0)
+                    mReminderText.setError("Reminder Title cannot be blank!");
+                else {
+                    updateReminder();
+                }
+                return true;
+
+            case R.id.discard_reminder:
+                Toast.makeText(getApplicationContext(), "Discarded",
+                        Toast.LENGTH_SHORT).show();
+
+                onBackPressed();
+                return true;
+
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+}
\ No newline at end of file
