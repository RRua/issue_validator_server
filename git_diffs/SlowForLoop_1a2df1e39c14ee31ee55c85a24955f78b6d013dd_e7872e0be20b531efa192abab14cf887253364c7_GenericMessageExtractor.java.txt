diff --git a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/BasicMessageExtractor.java b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/BasicMessageExtractor.java
new file mode 100644
index 0000000..c92f054
--- /dev/null
+++ b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/BasicMessageExtractor.java
@@ -0,0 +1,62 @@
+package com.abhijitvalluri.android.fitnotifications.services;
+
+import android.app.Notification;
+import android.os.Build;
+import android.os.Bundle;
+
+/**
+ * A basic extractor that just retrieves notification title and text from "extras".
+ * No special logic is applied apart from merging "text" and "big text".
+ */
+class BasicMessageExtractor implements MessageExtractor {
+
+    @Override
+    public CharSequence[] getTitleAndText(String appPackageName, Bundle extras, int notificationFlags) {
+        CharSequence notificationTitle = extras.getCharSequence(Notification.EXTRA_TITLE);
+
+        CharSequence notificationText = extras.getCharSequence(Notification.EXTRA_TEXT);
+
+        CharSequence notificationBigText = null;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            notificationBigText = extras.getCharSequence(Notification.EXTRA_BIG_TEXT);
+        }
+
+        if (startsWith(notificationBigText, notificationText)) {
+            // if notification "big text" starts with the short text - just use the big one
+            notificationText = notificationBigText;
+            notificationBigText = null;
+        }
+
+        StringBuilder sb = new StringBuilder();
+        if (notificationText != null) {
+            sb.append(notificationText);
+        }
+
+        if (!isBlank(notificationBigText)) {
+            sb.append(" -- ").append(notificationBigText);
+        }
+
+        String text = sb.toString().trim().replaceAll("\\s+", " ");
+
+        return new CharSequence[] { notificationTitle, text };
+    }
+
+
+    protected static boolean startsWith(CharSequence big, CharSequence small) {
+        return big != null && small != null && big.length() >= small.length()
+                && big.subSequence(0, small.length()).toString().contentEquals(small);
+    }
+
+
+    protected static boolean isBlank(CharSequence text) {
+        if (text != null && text.length() > 0) {
+            for (int i = 0; i < text.length(); i++) {
+                // FIXME: isWhitespace() does not recognize some characters (e.g. non-breaking space)
+                if (!Character.isWhitespace(text.charAt(i))) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+}
diff --git a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GenericMessageExtractor.java b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GenericMessageExtractor.java
index 881dce3..7ac23cf 100644
--- a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GenericMessageExtractor.java
+++ b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GenericMessageExtractor.java
@@ -1,21 +1,23 @@
 package com.abhijitvalluri.android.fitnotifications.services;
 
-import android.app.Notification;
-import android.os.Build;
 import android.os.Bundle;
 
 import java.util.HashMap;
 import java.util.Map;
 
 
-class GenericMessageExtractor implements MessageExtractor {
+/**
+ * An extension of the <code>BasicMessageExtractor</code> that also filters out
+ * every other instance of duplicate notifications
+ */
+class GenericMessageExtractor extends BasicMessageExtractor {
 
     private Map<String, String> mNotificationStringMap = new HashMap<>();
 
 
     @Override
     public CharSequence[] getTitleAndText(String appPackageName, Bundle extras, int notificationFlags) {
-        CharSequence[] titleAndText = extractTitleAndText(extras);
+        CharSequence[] titleAndText = super.getTitleAndText(appPackageName, extras, notificationFlags);
 
         String text = titleAndText[1].toString();
         String prevNotificationText = mNotificationStringMap.put(appPackageName, text);
@@ -31,51 +33,4 @@ class GenericMessageExtractor implements MessageExtractor {
     }
 
 
-    protected static CharSequence[] extractTitleAndText(Bundle extras) {
-        CharSequence notificationTitle = extras.getCharSequence(Notification.EXTRA_TITLE);
-
-        CharSequence notificationText = extras.getCharSequence(Notification.EXTRA_TEXT);
-
-        CharSequence notificationBigText = null;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            notificationBigText = extras.getCharSequence(Notification.EXTRA_BIG_TEXT);
-        }
-
-        if (startsWith(notificationBigText, notificationText)) {
-            // if notification "big text" starts with the short text - just use the big one
-            notificationText = notificationBigText;
-            notificationBigText = null;
-        }
-
-        StringBuilder sb = new StringBuilder();
-        if (notificationText != null) {
-            sb.append(notificationText);
-        }
-
-        if (!isBlank(notificationBigText)) {
-            sb.append(" -- ").append(notificationBigText);
-        }
-
-        String text = sb.toString().trim().replaceAll("\\s+", " ");
-
-        return new CharSequence[] { notificationTitle, text };
-    }
-
-    protected static boolean startsWith(CharSequence big, CharSequence small) {
-        return big != null && small != null && big.length() >= small.length()
-                && big.subSequence(0, small.length()).toString().contentEquals(small);
-    }
-
-
-    protected static boolean isBlank(CharSequence text) {
-        if (text != null && text.length() > 0) {
-            for (int i = 0; i < text.length(); i++) {
-                // FIXME: isWhitespace() does not recognize some characters (e.g. non-breaking space)
-                if (!Character.isWhitespace(text.charAt(i))) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
 }
diff --git a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GroupSummaryMessageExtractor.java b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GroupSummaryMessageExtractor.java
index 5d711cc..a60dd74 100644
--- a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GroupSummaryMessageExtractor.java
+++ b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/GroupSummaryMessageExtractor.java
@@ -12,7 +12,12 @@ import java.util.List;
 import java.util.regex.Pattern;
 
 
-class GroupSummaryMessageExtractor extends GenericMessageExtractor {
+/**
+ * A special extractor that ignores all non-summary notifications and extracts the new messages
+ * from the group summary "lines" property. It can also handle messages from multiple chats
+ * (when the message is prefixed with the chat/sender name).
+ */
+class GroupSummaryMessageExtractor extends BasicMessageExtractor {
 
     private static final Pattern NEW_MESSAGES = Pattern.compile("\\d+ new messages");
     private static final Pattern NEW_MESSAGES_MULTIPLE_CHATS = Pattern.compile("\\d+ (new )?messages from \\d+ chats");
@@ -80,13 +85,13 @@ class GroupSummaryMessageExtractor extends GenericMessageExtractor {
             // 1. regular text - use the generic approach
             if (notificationText == null || !matchesAnyPattern(notificationText, allNewMessagesPatterns)) {
                 lastSeenMessageHash = hash(notificationTitle, notificationText);
-                return extractTitleAndText(extras);
+                return super.getTitleAndText(appPackageName, extras, notificationFlags);
             }
 
             CharSequence[] lines = extras.getCharSequenceArray(Notification.EXTRA_TEXT_LINES);
             if (lines == null) {
                 lastSeenMessageHash = hash(notificationTitle, notificationText);
-                return extractTitleAndText(extras);
+                return super.getTitleAndText(appPackageName, extras, notificationFlags);
             }
 
             int newestMessageIndex = newMessagesFirst ? 0 : lines.length - 1;
diff --git a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/NLService.java b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/NLService.java
index 894ba81..847d225 100644
--- a/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/NLService.java
+++ b/app/src/main/java/com/abhijitvalluri/android/fitnotifications/services/NLService.java
@@ -142,6 +142,8 @@ public class NLService extends NotificationListenerService {
         messageExtractors.put("org.telegram.messenger", new GroupSummaryMessageExtractor(res, true));
         // WhatsApp
         messageExtractors.put("com.whatsapp", new GroupSummaryMessageExtractor(res, false));
+        // Google Calendar
+        messageExtractors.put("com.google.android.calendar", new BasicMessageExtractor());
     }
 
     @Override
