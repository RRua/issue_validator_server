diff --git a/app/src/main/java/com/kanedias/vanilla/audiotag/PluginConstants.java b/app/src/main/java/com/kanedias/vanilla/audiotag/PluginConstants.java
index 29f6c5d..c242354 100644
--- a/app/src/main/java/com/kanedias/vanilla/audiotag/PluginConstants.java
+++ b/app/src/main/java/com/kanedias/vanilla/audiotag/PluginConstants.java
@@ -38,13 +38,14 @@ public class PluginConstants {
     // this is passed to plugin when it is selected by user
     static final String EXTRA_PARAM_FILE_PATH = "ch.blinkenlights.android.vanilla.extra.FILE_PATH";
 
-    // this is plugin-to-plugin extras
+    // plugin-to-plugin extras (pass EXTRA_PARAM_PLUGIN_APP too to know whom to answer)
     static final String EXTRA_PARAM_P2P = "ch.blinkenlights.android.vanilla.extra.P2P"; // marker
     static final String EXTRA_PARAM_P2P_KEY = "ch.blinkenlights.android.vanilla.extra.P2P_KEY";
     static final String EXTRA_PARAM_P2P_VAL = "ch.blinkenlights.android.vanilla.extra.P2P_VALUE";
 
-    static final String P2P_WRITE_LYRICS = "WRITE_LYRICS";
-    static final String P2P_READ_LYRICS = "READ_LYRICS";
+    // related to tag editor
+    static final String P2P_WRITE_TAG = "WRITE_TAG";
+    static final String P2P_READ_TAG = "READ_TAG";
 
     static final String LOG_TAG = "Vanilla:TagEditorPlugin";
 
diff --git a/app/src/main/java/com/kanedias/vanilla/audiotag/PluginService.java b/app/src/main/java/com/kanedias/vanilla/audiotag/PluginService.java
index 508eab6..e0f04ba 100644
--- a/app/src/main/java/com/kanedias/vanilla/audiotag/PluginService.java
+++ b/app/src/main/java/com/kanedias/vanilla/audiotag/PluginService.java
@@ -17,10 +17,35 @@
 package com.kanedias.vanilla.audiotag;
 
 import android.app.IntentService;
+import android.app.Service;
 import android.content.ComponentName;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.media.MediaScannerConnection;
+import android.os.Binder;
+import android.os.IBinder;
+import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
+import android.text.TextUtils;
 import android.util.Log;
+import android.widget.Toast;
 
+import org.jaudiotagger.audio.AudioFile;
+import org.jaudiotagger.audio.AudioFileIO;
+import org.jaudiotagger.audio.exceptions.CannotReadException;
+import org.jaudiotagger.audio.exceptions.CannotWriteException;
+import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
+import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
+import org.jaudiotagger.tag.FieldDataInvalidException;
+import org.jaudiotagger.tag.FieldKey;
+import org.jaudiotagger.tag.Tag;
+import org.jaudiotagger.tag.TagException;
+
+import java.io.File;
+import java.io.IOException;
+
+import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static com.kanedias.vanilla.audiotag.PluginConstants.*;
 
 /**
@@ -50,30 +75,48 @@ import static com.kanedias.vanilla.audiotag.PluginConstants.*;
  *
  * @author Oleg Chernovskiy
  */
-public class PluginService extends IntentService {
+public class PluginService extends Service {
+
+    private Intent mLaunchIntent;
+    private AudioFile mAudioFile;
+    private Tag mTag;
 
-    public PluginService() {
-        super("PluginService");
+    public class PluginBinder extends Binder {
+
+        public PluginService getService() {
+            return PluginService.this;
+        }
     }
 
+    @Nullable
     @Override
-    protected void onHandleIntent(Intent intent) {
+    public IBinder onBind(Intent intent) {
+        if (loadFile()) {
+            return new PluginBinder();
+        }
+        return null;
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent != null) {
             final String action = intent.getAction();
             switch (action) {
                 case ACTION_WAKE_PLUGIN:
-                    Log.i(PluginConstants.LOG_TAG, "Plugin enabled!");
-                    return;
+                    Log.i(LOG_TAG, "Plugin enabled!");
+                    break;
                 case ACTION_REQUEST_PLUGIN_PARAMS:
                     handleRequestPluginParams();
-                    return;
+                    break;
                 case ACTION_LAUNCH_PLUGIN:
-                    handleLaunchPlugin(intent);
-                    return;
+                    mLaunchIntent = intent;
+                    handleLaunchPlugin();
+                    break;
                 default:
-                    Log.e(PluginConstants.LOG_TAG, "Unknown intent action received!" + action);
+                    Log.e(LOG_TAG, "Unknown intent action received!" + action);
             }
         }
+        return START_NOT_STICKY;
     }
 
     /**
@@ -88,14 +131,142 @@ public class PluginService extends IntentService {
         getApplicationContext().startService(answer);
     }
 
-    /**
-     * Handle action Baz in the provided background thread with the provided
-     * parameters.
-     */
-    private void handleLaunchPlugin(Intent intent) {
+    private void handleLaunchPlugin() {
+        int permResponse = ContextCompat.checkSelfPermission(this, WRITE_EXTERNAL_STORAGE);
+        boolean hasAccessToSd = permResponse == PackageManager.PERMISSION_GRANTED;
+        if (hasAccessToSd && mLaunchIntent.hasExtra(EXTRA_PARAM_P2P)) {
+            if(loadFile()) {
+                handleP2pIntent();
+            }
+            return;
+        }
+
         Intent dialogIntent = new Intent(this, TagEditActivity.class);
         dialogIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        dialogIntent.putExtras(intent);
+        dialogIntent.putExtras(mLaunchIntent);
         startActivity(dialogIntent);
     }
+
+    public Tag getTag() {
+        return mTag;
+    }
+
+    /**
+     * Loads file as {@link AudioFile} and performs initial tag creation if it's absent.
+     * If error happens while loading, shows popup indicating error details.
+     * @return true if and only if file was successfully read and initialized in tag system, false otherwise
+     */
+    public boolean loadFile() {
+        // we need only path passed to us
+        String filePath = mLaunchIntent.getStringExtra(EXTRA_PARAM_FILE_PATH);
+        if (TextUtils.isEmpty(filePath)) {
+            return false;
+        }
+
+        File file = new File(filePath);
+        if (!file.exists()) {
+            return false;
+        }
+
+        try {
+            mAudioFile = AudioFileIO.read(file);
+            mTag = mAudioFile.getTagOrCreateAndSetDefault();
+        } catch (CannotReadException | IOException | TagException | ReadOnlyFileException | InvalidAudioFrameException e) {
+            Log.e(LOG_TAG,
+                    String.format(getString(R.string.error_audio_file), filePath), e);
+            Toast.makeText(this,
+                    String.format(getString(R.string.error_audio_file) + ", %s",
+                            filePath,
+                            e.getLocalizedMessage()),
+                    Toast.LENGTH_SHORT).show();
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Writes changes in tags into file and closes activity.
+     * If something goes wrong, leaves activity intact.
+     */
+    public void persistChanges() {
+        try {
+            AudioFileIO.write(mAudioFile);
+            Toast.makeText(this, R.string.file_written_successfully, Toast.LENGTH_SHORT).show();
+
+            // update media database
+            MediaScannerConnection.scanFile(this,
+                    new String[]{mAudioFile.getFile().getAbsolutePath()},
+                    null,
+                    null);
+        } catch (CannotWriteException e) {
+            Log.e(LOG_TAG,
+                    String.format(getString(R.string.error_audio_file), mAudioFile.getFile().getPath()), e);
+            Toast.makeText(this,
+                    String.format(getString(R.string.error_audio_file) + ", %s",
+                            mAudioFile.getFile().getPath(),
+                            e.getLocalizedMessage()),
+                    Toast.LENGTH_SHORT).show();
+        }
+    }
+
+    /**
+     * This plugin also has P2P functionality with others. It provides generic way to
+     * read and write tags for the file.
+     * <br/>
+     * If intent is passed with EXTRA_PARAM_P2P and READ then EXTRA_PARAM_P2P_KEY is considered
+     * as an array of field keys to retrieve from file. The values read are written in the same order
+     * into answer intent into EXTRA_PARAM_P2P_VAL.
+     * <br/>
+     * If intent is passed with EXTRA_PARAM_P2P and WRITE then EXTRA_PARAM_P2P_KEY is considered
+     * as an array of field keys to write to file. EXTRA_PARAM_P2P_VAL represents values to be written in
+     * the same order.
+     *
+     */
+    private void handleP2pIntent() {
+        String request = mLaunchIntent.getStringExtra(EXTRA_PARAM_P2P);
+        switch (request) {
+            case P2P_WRITE_TAG: {
+                String[] fields = mLaunchIntent.getStringArrayExtra(EXTRA_PARAM_P2P_KEY);
+                String[] values = mLaunchIntent.getStringArrayExtra(EXTRA_PARAM_P2P_VAL);
+                for (int i = 0; i < fields.length; ++i) {
+                    try {
+                        FieldKey key = FieldKey.valueOf(fields[i]);
+                        mTag.setField(key, values[i]);
+                    } catch (IllegalArgumentException iae) {
+                        Log.e(LOG_TAG, "Invalid tag requested: " + fields[i], iae);
+                        Toast.makeText(this, R.string.invalid_tag_requested, Toast.LENGTH_SHORT).show();
+                    } catch (FieldDataInvalidException e) {
+                        // should not happen
+                        Log.e(LOG_TAG, "Error writing tag", e);
+                    }
+                }
+                persistChanges();
+                break;
+            }
+            case P2P_READ_TAG: {
+                String[] fields = mLaunchIntent.getStringArrayExtra(EXTRA_PARAM_P2P_KEY);
+                ApplicationInfo responseApp = mLaunchIntent.getParcelableExtra(EXTRA_PARAM_PLUGIN_APP);
+
+                String[] values = new String[fields.length];
+                for (int i = 0; i < fields.length; ++i) {
+                    try {
+                        FieldKey key = FieldKey.valueOf(fields[i]);
+                        values[i] = mTag.getFirst(key);
+                    } catch (IllegalArgumentException iae) {
+                        Log.e(LOG_TAG, "Invalid tag requested: " + fields[i], iae);
+                        Toast.makeText(this, R.string.invalid_tag_requested, Toast.LENGTH_SHORT).show();
+                    }
+                }
+
+                Intent response = new Intent(ACTION_LAUNCH_PLUGIN);
+                response.putExtra(EXTRA_PARAM_P2P, P2P_READ_TAG);
+                response.setPackage(responseApp.packageName);
+                response.putExtra(EXTRA_PARAM_P2P_VAL, values);
+                startService(response);
+                break;
+            }
+        }
+
+    }
 }
diff --git a/app/src/main/java/com/kanedias/vanilla/audiotag/TagEditActivity.java b/app/src/main/java/com/kanedias/vanilla/audiotag/TagEditActivity.java
index bd1c320..b4f4d58 100644
--- a/app/src/main/java/com/kanedias/vanilla/audiotag/TagEditActivity.java
+++ b/app/src/main/java/com/kanedias/vanilla/audiotag/TagEditActivity.java
@@ -17,9 +17,13 @@
 package com.kanedias.vanilla.audiotag;
 
 import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.ServiceConnection;
 import android.content.pm.PackageManager;
 import android.media.MediaScannerConnection;
 import android.os.Bundle;
+import android.os.IBinder;
 import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.content.ContextCompat;
@@ -34,25 +38,15 @@ import android.widget.Button;
 import android.widget.EditText;
 import android.widget.Spinner;
 import android.widget.SpinnerAdapter;
-import android.widget.Toast;
 
 import com.kanedias.vanilla.audiotag.misc.HintSpinnerAdapter;
 
-import org.jaudiotagger.audio.AudioFile;
-import org.jaudiotagger.audio.AudioFileIO;
-import org.jaudiotagger.audio.exceptions.CannotReadException;
-import org.jaudiotagger.audio.exceptions.CannotWriteException;
-import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
-import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
 import org.jaudiotagger.tag.FieldDataInvalidException;
 import org.jaudiotagger.tag.FieldKey;
 import org.jaudiotagger.tag.Tag;
-import org.jaudiotagger.tag.TagException;
-
-import java.io.File;
-import java.io.IOException;
 
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static com.kanedias.vanilla.audiotag.PluginConstants.*;
 
 /**
  * Main activity of Tag Editor plugin. This will be presented as a dialog to the user
@@ -75,9 +69,28 @@ public class TagEditActivity extends Activity {
     private EditText mCustomTagEdit;
     private Button mConfirm, mCancel;
 
-    private AudioFile mAudioFile;
+    private PluginService mService;
     private Tag mTag;
 
+    private ServiceConnection mServiceConn = new ServiceConnection() {
+        @Override
+        public void onServiceConnected(ComponentName name, IBinder service) {
+            if (service == null) { // couldn't load file
+                finish();
+                return;
+            }
+
+            mService = ((PluginService.PluginBinder) service).getService();
+            mTag = mService.getTag();
+            fillInitialValues();
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName name) {
+            mService = null;
+        }
+    };
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -94,6 +107,14 @@ public class TagEditActivity extends Activity {
         setupUI();
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (mService != null) {
+            unbindService(mServiceConn);
+        }
+    }
+
     /**
      * Initialize UI elements with handlers and action listeners
      */
@@ -108,7 +129,8 @@ public class TagEditActivity extends Activity {
         mConfirm.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                persistAndQuit();
+                mService.persistChanges();
+                finish();
             }
         });
 
@@ -144,89 +166,6 @@ public class TagEditActivity extends Activity {
         mAlbumEdit.addTextChangedListener(new FieldKeyListener(FieldKey.ALBUM));
     }
 
-    /**
-     * Writes changes in tags into file and closes activity.
-     * If something goes wrong, leaves activity intact.
-     */
-    private void persistAndQuit() {
-        try {
-            AudioFileIO.write(mAudioFile);
-            Toast.makeText(TagEditActivity.this, R.string.file_written_successfully, Toast.LENGTH_SHORT).show();
-
-            // update media database
-            MediaScannerConnection.scanFile(TagEditActivity.this,
-                    new String[]{mAudioFile.getFile().getAbsolutePath()},
-                    null,
-                    null);
-            finish();
-        } catch (CannotWriteException e) {
-            Log.e(PluginConstants.LOG_TAG,
-                    String.format(getString(R.string.error_audio_file), mAudioFile.getFile().getPath()), e);
-            Toast.makeText(TagEditActivity.this,
-                    String.format(getString(R.string.error_audio_file) + ", %s",
-                        mAudioFile.getFile().getPath(),
-                        e.getLocalizedMessage()),
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    /**
-     * Handles P2P intents.
-     *
-     * When this method is fired we still don't see the activity window
-     * this makes it perfect place to perform P2P and exit seamlessly.
-     *
-     * Can't do that in service because permission request still requires
-     * initialized activity.
-     */
-    @Override
-    protected void onStart() {
-        super.onStart();
-
-        if (!checkAndRequestPermissions(WRITE_EXTERNAL_STORAGE)) {
-            return; // no permissions, proceed to onResume (see note there)
-        }
-
-        if (!getIntent().hasExtra(PluginConstants.EXTRA_PARAM_P2P)) {
-            return; // not p2p intent, proceed
-        }
-
-        if (!loadFile()) {
-            finish(); // couldn't load file, exiting
-            return;
-        }
-
-        handleP2pIntent();
-    }
-
-    private void handleP2pIntent() {
-        String request = getIntent().getStringExtra(PluginConstants.EXTRA_PARAM_P2P);
-        switch (request) {
-            case PluginConstants.P2P_WRITE_LYRICS:
-                String[] fields = getIntent().getStringArrayExtra(PluginConstants.EXTRA_PARAM_P2P_KEY);
-                String[] values = getIntent().getStringArrayExtra(PluginConstants.EXTRA_PARAM_P2P_VAL);
-                for (int i = 0; i < fields.length; ++i) {
-                    try {
-                        FieldKey key = FieldKey.valueOf(fields[i]);
-                        mTag.setField(key, values[i]);
-                    } catch (IllegalArgumentException iae) {
-                        Log.e(PluginConstants.LOG_TAG, "Invalid tag requested: " + fields[i], iae);
-                        Toast.makeText(this, R.string.invalid_tag_requested, Toast.LENGTH_SHORT).show();
-                    } catch (FieldDataInvalidException e) {
-                        // should not happen
-                        Log.e(PluginConstants.LOG_TAG, "Error writing tag", e);
-                    }
-                }
-                persistAndQuit();
-                break;
-            case PluginConstants.P2P_READ_LYRICS:
-
-                finish();
-                break;
-        }
-
-    }
-
     /**
      * Handle Vanilla Music player intents. This will show activity window and load
      * all needed info from file.
@@ -240,26 +179,21 @@ public class TagEditActivity extends Activity {
             return;
         }
 
-        if (!loadFile()) {
-            finish(); // couldn't load file, exiting
-            return;
-        }
-
-        if (getIntent().hasExtra(PluginConstants.EXTRA_PARAM_P2P)) {
-            /**
-             * Normally we won't get here. But if user installed tag editor and sent p2p request before
-             * the first launch, we'll request permissions in {@link #onStart()} and will be able to handle it
-             * only here as {@link #onStart()} won't fire again. So this check should also be present here.
-             */
-            handleP2pIntent();
+        if (getIntent().hasExtra(EXTRA_PARAM_P2P)) {
+            Intent serviceStart = new Intent(this, PluginService.class);
+            serviceStart.setAction(ACTION_LAUNCH_PLUGIN);
+            serviceStart.putExtras(getIntent());
+            startService(serviceStart); // pass intent back to the service
+            finish();
         } else {
-            fillInitialValues();
+            // we'll need service at hand while editing
+            Intent bind = new Intent(this, PluginService.class);
+            bindService(bind, mServiceConn, 0);
         }
     }
 
     /**
-     * Fills UI with initial values from loaded file. At this point both {@link #mAudioFile}
-     * and {@link #mTag} must be initialized.
+     * Fills UI with initial values from loaded file. At this point {@link #mTag} must be initialized.
      */
     private void fillInitialValues() {
         mTitleEdit.setText(mTag.getFirst(FieldKey.TITLE));
@@ -267,40 +201,6 @@ public class TagEditActivity extends Activity {
         mAlbumEdit.setText(mTag.getFirst(FieldKey.ALBUM));
     }
 
-    /**
-     * Loads file as {@link AudioFile} and performs initial tag creation if it's absent.
-     * If error happens while loading, shows popup indicating error details.
-     * @return true if and only if file was successfully read and initialized in tag system, false otherwise
-     */
-    private boolean loadFile() {
-        // we need only path passed to us
-        String filePath = getIntent().getStringExtra(PluginConstants.EXTRA_PARAM_FILE_PATH);
-        if (TextUtils.isEmpty(filePath)) {
-            return false;
-        }
-
-        File file = new File(filePath);
-        if (!file.exists()) {
-            return false;
-        }
-
-        try {
-            mAudioFile = AudioFileIO.read(file);
-            mTag = mAudioFile.getTagOrCreateAndSetDefault();
-        } catch (CannotReadException | IOException | TagException | ReadOnlyFileException | InvalidAudioFrameException e) {
-            Log.e(PluginConstants.LOG_TAG,
-                    String.format(getString(R.string.error_audio_file), filePath), e);
-            Toast.makeText(this,
-                    String.format(getString(R.string.error_audio_file) + ", %s",
-                            filePath,
-                            e.getLocalizedMessage()),
-                    Toast.LENGTH_SHORT).show();
-            return false;
-        }
-
-        return true;
-    }
-
     /**
      * We're the good guys, we catch it back from {@link #checkAndRequestPermissions(String)} here.
      * So, if user declined our request, just close the activity entirely.
@@ -365,7 +265,7 @@ public class TagEditActivity extends Activity {
                 mTag.setField(key, s.toString());
             } catch (FieldDataInvalidException e) {
                 // should not happen
-                Log.e(PluginConstants.LOG_TAG, "Error writing tag", e);
+                Log.e(LOG_TAG, "Error writing tag", e);
             }
         }
     }
