diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/AnswerScreenState.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/AnswerScreenState.java
index fd002ea..4339b8b 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/AnswerScreenState.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/AnswerScreenState.java
@@ -1,4 +1,10 @@
 package androdns.android.leetdreams.ch.androdns;
+import android.util.JsonWriter;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
 import java.io.Serializable;
 
 /**
@@ -6,24 +12,59 @@ import java.io.Serializable;
  */
 
 public class AnswerScreenState implements Serializable {
-    public long timestamp = System.currentTimeMillis();
     public String status="";
     public int rcode=-1;
     public String server="";
-
     public int qsize=0;
     public int asize=0;
-
     public boolean flag_AA=false;
     public boolean flag_TC=false;
     public boolean flag_RD=false;
     public boolean flag_RA=false;
     public boolean flag_AD=false;
     public boolean flag_CD=false;
-
     public String answerText ="";
+    public long runtimestamp;
+    public long duration;
 
     public AnswerScreenState(){
 
     }
+
+
+    public void toJSON(JsonWriter writer) throws IOException {
+        writer.beginObject();
+        writer.name("status").value(status);
+        writer.name("rcode").value(rcode);
+        writer.name("server").value(server);
+        writer.name("qsize").value(qsize);
+        writer.name("asize").value(asize);
+        writer.name("flag_AA").value(flag_AA);
+        writer.name("flag_TC").value(flag_TC);
+        writer.name("flag_RD").value(flag_RD);
+        writer.name("flag_RA").value(flag_RA);
+        writer.name("flag_AD").value(flag_AD);
+        writer.name("flag_CD").value(flag_CD);
+        writer.name("answerText").value(answerText);
+        writer.name("runtimestamp").value(runtimestamp);
+        writer.name("duration").value(duration);
+        writer.endObject();
+    }
+
+    public void fromJSON(JSONObject json) throws JSONException {
+        status = json.getString("status");
+        rcode = json.getInt("rcode");
+        server = json.getString("server");
+        qsize = json.getInt("qsize");
+        asize = json.getInt("asize");
+        flag_AA = json.getBoolean("flag_AA");
+        flag_TC = json.getBoolean("flag_TC");
+        flag_RD = json.getBoolean("flag_RD");
+        flag_RA = json.getBoolean("flag_RA");
+        flag_AD = json.getBoolean("flag_AD");
+        flag_CD = json.getBoolean("flag_CD");
+        answerText = json.getString("answerText");
+        runtimestamp = json.getLong("runtimestamp");
+        duration = json.getLong("duration");
+    }
 }
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/BookmarkedQueries.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/BookmarkedQueries.java
index 89ca5d2..71258d3 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/BookmarkedQueries.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/BookmarkedQueries.java
@@ -26,58 +26,13 @@ public class BookmarkedQueries {
     }
 
     public void save() {
-        try {
-
-            FileOutputStream fos = context.openFileOutput(bookmarkFile, Context.MODE_PRIVATE);
-
-            JsonWriter writer = new JsonWriter(new OutputStreamWriter(fos, "UTF-8"));
-            writer.setIndent("  ");
-            writer.beginArray();
-            for (Session s : bookmarks) {
-                s.toJSON(writer);
-            }
-            writer.endArray();
-            writer.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
+        SessionStorage.save(context, bookmarkFile,bookmarks);
     }
 
-    public String loadJSONStringFromFile() {
-        String json = null;
-        try {
-            InputStream is = context.openFileInput(bookmarkFile);
-            int size = is.available();
-            byte[] buffer = new byte[size];
-            is.read(buffer);
-            is.close();
-            json = new String(buffer, "UTF-8");
-        } catch (IOException ex) {
-            ex.printStackTrace();
-            return null;
-        }
-        return json;
-    }
 
     public void load() {
-        bookmarks.clear();
-        try {
-            JSONTokener tokener = new JSONTokener(loadJSONStringFromFile());
-            JSONArray jsa = new JSONArray(tokener);
-            for (int i = 0; i < jsa.length(); i++) {
-                JSONObject obj = jsa.getJSONObject(i);
-                Session s = new Session();
-                try {
-                    s.fromJSON(obj);
-                    bookmarks.add(s);
-                } catch (JSONException je) {
-                    je.printStackTrace();
-                }
-            }
-
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
+        bookmarks = SessionStorage.load(context, bookmarkFile);
+
         if(bookmarks.isEmpty()){
             bookmarks = getDefaultBookmarks();
         }
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
index d8bc618..dedc87f 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/DNSFormActivity.java
@@ -10,12 +10,9 @@ import android.os.Bundle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.util.Log;
-import android.view.Gravity;
-import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
-import android.view.MotionEvent;
 import android.view.View;
 import android.view.animation.AlphaAnimation;
 import android.view.animation.Animation;
@@ -26,8 +23,6 @@ import android.widget.Button;
 import android.widget.CheckBox;
 import android.widget.EditText;
 import android.widget.ImageButton;
-import android.widget.LinearLayout;
-import android.widget.PopupWindow;
 import android.widget.Spinner;
 import android.widget.TextView;
 
@@ -152,9 +147,12 @@ public class DNSFormActivity extends AppCompatActivity implements AdapterView.On
         Runnable guiUpdate = new Runnable() {
             @Override
             public void run() {
-                long runts = session.runtimestamp;
+                long runts = 0;
+                if (session.answer != null) {
+                    runts = session.answer.runtimestamp;
+                }
                 if (runts > 0) {
-                    setTitle(HistoryAdapter.getDate(session.runtimestamp, "yyyy-MM-dd hh:mm:ss"));
+                    setTitle(HistoryAdapter.getDate(session.answer.runtimestamp, "yyyy-MM-dd hh:mm:ss"));
                 } else {
                     setTitle("");
                 }
@@ -270,8 +268,8 @@ public class DNSFormActivity extends AppCompatActivity implements AdapterView.On
      */
     public void doLookup(Session session) {
         activeSession = session;
-        session.runtimestamp = System.currentTimeMillis();
         AnswerScreenState answerState = new AnswerScreenState();
+        answerState.runtimestamp = System.currentTimeMillis();
         String answerOutput = "";
 
         try {
@@ -375,7 +373,7 @@ public class DNSFormActivity extends AppCompatActivity implements AdapterView.On
             }
             ((Button) findViewById(R.id.button)).clearAnimation();
             long duration = System.currentTimeMillis() - startTS;
-            session.duration = duration;
+            answerState.duration = duration;
             answerState.status = duration + " ms";
             answerState.asize = response.numBytes();
 
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/HistoryAdapter.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/HistoryAdapter.java
index 01dd5f5..e0ade11 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/HistoryAdapter.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/HistoryAdapter.java
@@ -37,7 +37,7 @@ public class HistoryAdapter extends ArrayAdapter<Session> {
         Session session = values[position];
 
         TextView dateView = (TextView) rowView.findViewById(R.id.history_entry_date);
-        dateView.setText(getDate(session.runtimestamp, "yyyy-MM-dd hh:mm:ss"));
+        dateView.setText(getDate(session.answer.runtimestamp, "yyyy-MM-dd hh:mm:ss"));
 
         String qname = session.qname;
         if (!session.server.equals("")){
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/Session.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/Session.java
index 1480d4a..4057a3f 100644
--- a/app/src/main/java/androdns/android/leetdreams/ch/androdns/Session.java
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/Session.java
@@ -21,8 +21,6 @@ public class Session implements Serializable {
     public boolean flag_DO;
     public boolean TCP;
 
-    public long created;
-    public long runtimestamp;
 
     public AnswerScreenState answer;
 
@@ -58,7 +56,7 @@ public class Session implements Serializable {
     }
 
     public Session(){
-        created = System.currentTimeMillis();
+
     }
 
     public Session(String server, String qname, int qtype){
@@ -79,7 +77,6 @@ public class Session implements Serializable {
         this("",qname,qtype);
     }
 
-    public long duration;
 
     public void toJSON(JsonWriter writer) throws IOException {
         writer.beginObject();
@@ -93,6 +90,15 @@ public class Session implements Serializable {
         writer.name("flag_do").value(flag_DO);
         writer.name("tcp").value(TCP);
         writer.name("port").value(port);
+
+
+        writer.name("answer");
+        if(answer != null){
+            answer.toJSON(writer);
+        } else {
+            writer.nullValue();
+        }
+
         writer.endObject();
     }
 
@@ -111,6 +117,15 @@ public class Session implements Serializable {
         } catch(JSONException e){
             port = 0;
         }
+        try {
+            JSONObject answerObject = json.getJSONObject("answer");
+            answer = new AnswerScreenState();
+            answer.fromJSON(answerObject);
+            this.answer = answer;
+
+        } catch (JSONException e){
+            answer = null;
+        }
 
     }
 
diff --git a/app/src/main/java/androdns/android/leetdreams/ch/androdns/SessionStorage.java b/app/src/main/java/androdns/android/leetdreams/ch/androdns/SessionStorage.java
new file mode 100644
index 0000000..d5f98e1
--- /dev/null
+++ b/app/src/main/java/androdns/android/leetdreams/ch/androdns/SessionStorage.java
@@ -0,0 +1,81 @@
+package androdns.android.leetdreams.ch.androdns;
+
+import android.content.Context;
+import android.util.JsonWriter;
+import android.util.Log;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStreamWriter;
+import java.util.ArrayList;
+
+public class SessionStorage {
+
+    public static void save(Context context, String filename, ArrayList<Session> sessions) {
+        try {
+
+            FileOutputStream fos = context.openFileOutput(filename, Context.MODE_PRIVATE);
+
+            JsonWriter writer = new JsonWriter(new OutputStreamWriter(fos, "UTF-8"));
+            writer.setIndent("  ");
+            writer.beginArray();
+            for (Session s : sessions) {
+                s.toJSON(writer);
+            }
+            writer.endArray();
+            writer.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        // verify
+        loadJSONStringFromFile(context, filename);
+    }
+
+    public static String loadJSONStringFromFile(Context context, String filename) {
+        String json = null;
+        try {
+            InputStream is = context.openFileInput(filename);
+            int size = is.available();
+            byte[] buffer = new byte[size];
+            is.read(buffer);
+            is.close();
+            json = new String(buffer, "UTF-8");
+        } catch (IOException ex) {
+            ex.printStackTrace();
+            return null;
+        }
+        Log.d("JSON",json);
+        return json;
+    }
+
+    public static ArrayList<Session> load(Context context, String filename) {
+        ArrayList<Session> sessions = new ArrayList<Session>();
+        try {
+            JSONTokener tokener = new JSONTokener(loadJSONStringFromFile(context,filename));
+            JSONArray jsa = new JSONArray(tokener);
+            for (int i = 0; i < jsa.length(); i++) {
+                JSONObject obj = jsa.getJSONObject(i);
+                Session s = new Session();
+                try {
+                    s.fromJSON(obj);
+                    sessions.add(s);
+                } catch (JSONException je) {
+                    je.printStackTrace();
+                }
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return sessions;
+    }
+
+
+
+}
