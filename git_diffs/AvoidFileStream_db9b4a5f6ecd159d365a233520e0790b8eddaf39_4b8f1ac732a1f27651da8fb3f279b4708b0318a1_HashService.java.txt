diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/EncryptionData.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/EncryptionData.java
index 603fbd6..afe25d2 100644
--- a/app/src/main/java/com/codedead/deadline/deadhash/domain/EncryptionData.java
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/EncryptionData.java
@@ -7,14 +7,14 @@ public class EncryptionData {
 
     private String compareCheck;
 
-    public EncryptionData(String encryption_name, String encryption_data, String compareCheck) {
+    EncryptionData(String encryption_name, String encryption_data, String compareCheck) {
         this.encryption_name = encryption_name;
         this.encryption_data = encryption_data;
 
         this.compareCheck = compareCheck;
     }
 
-    public String getCompareCheck() {
+    String getCompareCheck() {
         return compareCheck;
     }
 
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/FileHashGenerator.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/FileHashGenerator.java
new file mode 100644
index 0000000..3546398
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/FileHashGenerator.java
@@ -0,0 +1,17 @@
+package com.codedead.deadline.deadhash.domain;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+
+public class FileHashGenerator extends HashGenerator {
+
+    public FileHashGenerator(File file, boolean md5, boolean sha1, boolean sha224, boolean sha256, boolean sha384, boolean sha512, boolean crc32, String compare) throws IOException {
+        super(file, md5, sha1, sha224, sha256, sha384, sha512, crc32, compare);
+    }
+
+    @Override
+    protected void onPostExecute(List<EncryptionData> data) {
+        delegate.hashDataFile(data);
+    }
+}
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/HashGenerator.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashGenerator.java
new file mode 100644
index 0000000..579682d
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashGenerator.java
@@ -0,0 +1,119 @@
+package com.codedead.deadline.deadhash.domain;
+
+import android.os.AsyncTask;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class HashGenerator extends AsyncTask<Void, Void, List<EncryptionData>> {
+
+    private byte[] data;
+
+    private boolean md5;
+    private boolean sha1;
+    private boolean sha224;
+    private boolean sha256;
+    private boolean sha384;
+    private boolean sha512;
+    private boolean crc32;
+
+    private String compare;
+    private List<EncryptionData> encryptionData;
+
+    public HashResponse delegate = null;
+
+    HashGenerator(byte[] data, boolean md5, boolean sha1, boolean sha224, boolean sha256, boolean sha384, boolean sha512, boolean crc32, String compare) {
+        encryptionData = new ArrayList<>();
+        this.data = data;
+
+        this.md5 = md5;
+        this.sha1 = sha1;
+        this.sha224 = sha224;
+        this.sha256 = sha256;
+        this.sha384 = sha384;
+        this.sha512 = sha512;
+        this.crc32 = crc32;
+        this.compare = compare;
+    }
+
+    HashGenerator(File data, boolean md5, boolean sha1, boolean sha224, boolean sha256, boolean sha384, boolean sha512, boolean crc32, String compare) throws IOException {
+        encryptionData = new ArrayList<>();
+        this.data = fullyReadFileToBytes(data);
+
+        this.md5 = md5;
+        this.sha1 = sha1;
+        this.sha224 = sha224;
+        this.sha256 = sha256;
+        this.sha384 = sha384;
+        this.sha512 = sha512;
+        this.crc32 = crc32;
+        this.compare = compare;
+    }
+
+    private byte[] fullyReadFileToBytes(File f) throws IOException {
+        int size = (int) f.length();
+        byte bytes[] = new byte[size];
+        byte tmpBuff[] = new byte[size];
+        try (FileInputStream fis = new FileInputStream(f)) {
+            int read = fis.read(bytes, 0, size);
+            if (read < size) {
+                int remain = size - read;
+                while (remain > 0) {
+                    read = fis.read(tmpBuff, 0, remain);
+                    System.arraycopy(tmpBuff, 0, bytes, size - remain, read);
+                    remain -= read;
+                }
+            }
+        }
+
+        return bytes;
+    }
+
+    @Override
+    protected List<EncryptionData> doInBackground(Void... params) {
+
+        if (md5) {
+            String md5 = HashService.calculateHash(getData(), "MD5");
+            encryptionData.add(new EncryptionData("MD5", md5, compare));
+        }
+
+        if (sha1) {
+            String sha1 = HashService.calculateHash(getData(), "SHA-1");
+            encryptionData.add(new EncryptionData("SHA-1", sha1, compare));
+        }
+
+        if (sha224) {
+            String sha224 = HashService.calculateHash(getData(), "SHA-224");
+            encryptionData.add(new EncryptionData("SHA-224", sha224, compare));
+        }
+
+        if (sha256) {
+            String sha256 = HashService.calculateHash(getData(), "SHA-256");
+            encryptionData.add(new EncryptionData("SHA-256", sha256, compare));
+        }
+
+        if (sha384) {
+            String sha384 = HashService.calculateHash(getData(), "SHA-384");
+            encryptionData.add(new EncryptionData("SHA-384", sha384, compare));
+        }
+
+        if (sha512) {
+            String sha512 = HashService.calculateHash(getData(), "SHA-512");
+            encryptionData.add(new EncryptionData("SHA-512", sha512, compare));
+        }
+
+        if (crc32) {
+            String crc32 = HashService.calculateCRC32(getData());
+            encryptionData.add(new EncryptionData("CRC32", crc32, compare));
+        }
+
+        return encryptionData;
+    }
+
+    public byte[] getData() {
+        return data;
+    }
+}
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/HashResponse.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashResponse.java
new file mode 100644
index 0000000..126317d
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashResponse.java
@@ -0,0 +1,8 @@
+package com.codedead.deadline.deadhash.domain;
+
+import java.util.List;
+
+public interface HashResponse {
+    void hashDataFile(List<EncryptionData> data);
+    void hashDataText(List<EncryptionData> data);
+}
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/HashService.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashService.java
index 2172e0d..a397760 100644
--- a/app/src/main/java/com/codedead/deadline/deadhash/domain/HashService.java
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/HashService.java
@@ -1,13 +1,9 @@
 package com.codedead.deadline.deadhash.domain;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.InputStream;
 import java.security.MessageDigest;
 import java.util.zip.CRC32;
 
-public final class HashService {
+final class HashService {
 
     private static String convertToHex(byte[] data) {
         StringBuilder buf = new StringBuilder();
@@ -22,11 +18,10 @@ public final class HashService {
         return buf.toString();
     }
 
-    public static String calculateStringHash(String text, String kind) {
+    static String calculateHash(byte[] bytes, String kind) {
         try {
             MessageDigest md = MessageDigest.getInstance(kind);
-            byte[] textBytes = text.getBytes();
-            md.update(textBytes, 0, textBytes.length);
+            md.update(bytes, 0, bytes.length);
             byte[] hash = md.digest();
             return convertToHex(hash);
         } catch (Exception ex) {
@@ -34,45 +29,11 @@ public final class HashService {
         }
     }
 
-    public static String calculateFileHash(File fileName, String kind) {
+    static String calculateCRC32(byte[] bytes) {
         try {
-            MessageDigest digest = MessageDigest.getInstance(kind);
-            InputStream fis = new FileInputStream(fileName);
-            int n = 0;
-            byte[] buffer = new byte[8192];
-            while (n != -1) {
-                n = fis.read(buffer);
-                if (n > 0) {
-                    digest.update(buffer, 0, n);
-                }
-            }
-
-            return convertToHex(digest.digest());
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    public static String calculateStringCRC32(String data) {
-        try {
-            CRC32 crc = new CRC32();
-            crc.update(data.getBytes());
-
-            return Long.toHexString(crc.getValue());
-        } catch (Exception ex) {
-            return null;
-        }
-    }
-
-    public static String calculateFileCRC32(File filePath) {
-        try {
-            InputStream inputStream = new BufferedInputStream(new FileInputStream(filePath));
             CRC32 crc = new CRC32();
-            int cnt;
+            crc.update(bytes);
 
-            while ((cnt = inputStream.read()) != -1) {
-                crc.update(cnt);
-            }
             return Long.toHexString(crc.getValue());
         } catch (Exception ex) {
             return null;
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/domain/TextHashGenerator.java b/app/src/main/java/com/codedead/deadline/deadhash/domain/TextHashGenerator.java
new file mode 100644
index 0000000..6edc1ea
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadline/deadhash/domain/TextHashGenerator.java
@@ -0,0 +1,15 @@
+package com.codedead.deadline.deadhash.domain;
+
+import java.util.List;
+
+public class TextHashGenerator extends HashGenerator {
+
+    public TextHashGenerator(byte[] data, boolean md5, boolean sha1, boolean sha224, boolean sha256, boolean sha384, boolean sha512, boolean crc32, String compare) {
+        super(data, md5, sha1, sha224, sha256, sha384, sha512, crc32, compare);
+    }
+
+    @Override
+    protected void onPostExecute(List<EncryptionData> datas) {
+        delegate.hashDataText(datas);
+    }
+}
diff --git a/app/src/main/java/com/codedead/deadline/deadhash/gui/MainActivity.java b/app/src/main/java/com/codedead/deadline/deadhash/gui/MainActivity.java
index d62d532..4e359dd 100644
--- a/app/src/main/java/com/codedead/deadline/deadhash/gui/MainActivity.java
+++ b/app/src/main/java/com/codedead/deadline/deadhash/gui/MainActivity.java
@@ -8,6 +8,7 @@ import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.CountDownTimer;
 import android.os.Environment;
 import android.os.Handler;
 import android.support.annotation.NonNull;
@@ -28,6 +29,7 @@ import android.widget.Button;
 import android.widget.CheckBox;
 import android.widget.EditText;
 import android.widget.ImageButton;
+import android.widget.ProgressBar;
 import android.widget.Spinner;
 import android.widget.Toast;
 import android.widget.ViewFlipper;
@@ -36,13 +38,20 @@ import com.codedead.deadline.deadhash.R;
 import com.codedead.deadline.deadhash.domain.DataAdapter;
 import com.codedead.deadline.deadhash.domain.EncryptionData;
 import com.codedead.deadline.deadhash.domain.FileDialog;
-import com.codedead.deadline.deadhash.domain.HashService;
+import com.codedead.deadline.deadhash.domain.FileHashGenerator;
+import com.codedead.deadline.deadhash.domain.HashGenerator;
+import com.codedead.deadline.deadhash.domain.HashResponse;
 import com.codedead.deadline.deadhash.domain.LocaleHelper;
+import com.codedead.deadline.deadhash.domain.TextHashGenerator;
+import com.tapadoo.alerter.Alerter;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
 
-public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
+public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener, HashResponse {
     private boolean doubleBackToExitPressedOnce;
 
     private ViewFlipper viewFlipper;
@@ -50,6 +59,9 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
     private RecyclerView mRecyclerViewFile;
     private RecyclerView mRecyclerViewText;
 
+    private ProgressBar pgbFile;
+    private ProgressBar pgbText;
+
     private RecyclerView.LayoutManager mLayoutManagerFile;
 
     private ArrayList<EncryptionData> fileDataArrayList = new ArrayList<>();
@@ -60,6 +72,9 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
 
     private SharedPreferences sharedPreferences;
 
+    private boolean fileLoading;
+    private boolean textLoading;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
 
@@ -99,6 +114,52 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         content_help();
         content_about();
         content_settings();
+
+        content_alerts();
+    }
+
+    private void content_alerts() {
+        if (sharedPreferences.getInt("reviewTimes", 0) >= 2) return;
+
+        Random rnd = new Random();
+
+        new CountDownTimer(rnd.nextInt(30) * 1000, 1000) {
+
+            @Override
+            public void onTick(long millisUntilFinished) {
+
+            }
+
+            @Override
+            public void onFinish() {
+                Alerter.create(MainActivity.this)
+                        .setTitle(R.string.alert_review_title)
+                        .setText(R.string.alert_review_text)
+                        .setIcon(R.drawable.ic_rate_review)
+                        .setBackgroundColor(R.color.colorAccent)
+                        .setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                addReview(true);
+                                openPlayStore();
+                            }
+                        })
+                        .show();
+                addReview(false);
+            }
+        }.start();
+    }
+
+    private void addReview(boolean done) {
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+
+        if (done) {
+            editor.putInt("reviewTimes", 3);
+        } else {
+            editor.putInt("reviewTimes", sharedPreferences.getInt("reviewTimes", 0) + 1);
+        }
+
+        editor.apply();
     }
 
     private void content_file() {
@@ -106,6 +167,7 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
             ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 0);
         }
 
+        pgbFile = (ProgressBar) findViewById(R.id.PgbFile);
         mRecyclerViewFile = (RecyclerView) findViewById(R.id.file_recycler);
         mRecyclerViewFile.setHasFixedSize(true);
         mLayoutManagerFile = new LinearLayoutManager(this);
@@ -141,6 +203,8 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         btnGenerate.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
+                if (fileLoading) return;
+
                 mRecyclerViewFile.setAdapter(null);
 
                 fileDataArrayList = new ArrayList<>();
@@ -162,45 +226,32 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
                     compare = edtCompare.getText().toString();
                 }
 
-                if (sharedPreferences.getBoolean("md5", true)) {
-                    String md5 = HashService.calculateFileHash(file, "MD5");
-                    addFileHash("MD5", md5, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha1", true)) {
-                    String sha1 = HashService.calculateFileHash(file, "SHA-1");
-                    addFileHash("SHA-1", sha1, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha224", true)) {
-                    String sha224 = HashService.calculateFileHash(file, "SHA-224");
-                    addFileHash("SHA-224", sha224, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha256", true)) {
-                    String sha256 = HashService.calculateFileHash(file, "SHA-256");
-                    addFileHash("SHA-256", sha256, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha384", true)) {
-                    String sha384 = HashService.calculateFileHash(file, "SHA-384");
-                    addFileHash("SHA-384", sha384, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha512", true)) {
-                    String sha512 = HashService.calculateFileHash(file, "SHA-512");
-                    addFileHash("SHA-512", sha512, compare);
-                }
-
-                if (sharedPreferences.getBoolean("crc32", true)) {
-                    String crc32 = HashService.calculateFileCRC32(file);
-                    addFileHash("CRC32", crc32, compare);
+                try {
+                    HashGenerator fileHashGenerator = new FileHashGenerator(
+                            file,
+                            sharedPreferences.getBoolean("md5", true),
+                            sharedPreferences.getBoolean("sha1", true),
+                            sharedPreferences.getBoolean("sha224", true),
+                            sharedPreferences.getBoolean("sha256", true),
+                            sharedPreferences.getBoolean("sha384", true),
+                            sharedPreferences.getBoolean("sha512", true),
+                            sharedPreferences.getBoolean("crc32", true),
+                            compare);
+                    fileLoading = true;
+                    fileHashGenerator.delegate = MainActivity.this;
+                    fileHashGenerator.execute();
+
+                    pgbFile.setVisibility(View.VISIBLE);
+                } catch (IOException e) {
+                    Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
+                    pgbFile.setVisibility(View.GONE);
                 }
             }
         });
     }
 
     private void content_text() {
+        pgbText = (ProgressBar) findViewById(R.id.PgbText);
         mRecyclerViewText = (RecyclerView) findViewById(R.id.text_recycler);
         mRecyclerViewText.setHasFixedSize(true);
         mLayoutManagerFile = new LinearLayoutManager(this);
@@ -216,6 +267,7 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         btnGenerate.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
+                if (textLoading) return;
                 mRecyclerViewText.setAdapter(null);
 
                 textDataArrayList = new ArrayList<>();
@@ -237,40 +289,21 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
                     compare = edtCompare.getText().toString();
                 }
 
-                if (sharedPreferences.getBoolean("md5", true)) {
-                    String md5 = HashService.calculateStringHash(data, "MD5");
-                    addTextHash("MD5", md5, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha1", true)) {
-                    String sha1 = HashService.calculateStringHash(data, "SHA-1");
-                    addTextHash("SHA-1", sha1, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha224", true)) {
-                    String sha224 = HashService.calculateStringHash(data, "SHA-224");
-                    addTextHash("SHA-224", sha224, compare);
-                }
 
-                if (sharedPreferences.getBoolean("sha256", true)) {
-                    String sha256 = HashService.calculateStringHash(data, "SHA-256");
-                    addTextHash("SHA-256", sha256, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha384", true)) {
-                    String sha384 = HashService.calculateStringHash(data, "SHA-384");
-                    addTextHash("SHA-384", sha384, compare);
-                }
-
-                if (sharedPreferences.getBoolean("sha512", true)) {
-                    String sha512 = HashService.calculateStringHash(data, "SHA-512");
-                    addTextHash("SHA-512", sha512, compare);
-                }
-
-                if (sharedPreferences.getBoolean("crc32", true)) {
-                    String crc32 = HashService.calculateStringCRC32(data);
-                    addTextHash("CRC32", crc32, compare);
-                }
+                HashGenerator textHashGenerator = new TextHashGenerator(
+                        data.getBytes(),
+                        sharedPreferences.getBoolean("md5", true),
+                        sharedPreferences.getBoolean("sha1", true),
+                        sharedPreferences.getBoolean("sha224", true),
+                        sharedPreferences.getBoolean("sha256", true),
+                        sharedPreferences.getBoolean("sha384", true),
+                        sharedPreferences.getBoolean("sha512", true),
+                        sharedPreferences.getBoolean("crc32", true),
+                        compare);
+                textLoading = true;
+                textHashGenerator.delegate = MainActivity.this;
+                textHashGenerator.execute();
+                pgbText.setVisibility(View.VISIBLE);
             }
         });
     }
@@ -282,7 +315,7 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         btnWebsite.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                openCodeDead();
+                openSite("http://codedead.com/");
             }
         });
 
@@ -305,7 +338,7 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         btnWebsite.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                openCodeDead();
+                openSite("http://codedead.com/");
             }
         });
     }
@@ -401,28 +434,24 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         edit.apply();
     }
 
-    private void openCodeDead() {
-        Uri uriUrl = Uri.parse("http://codedead.com/");
-        Intent launchBrowser = new Intent(Intent.ACTION_VIEW, uriUrl);
-        startActivity(launchBrowser);
-    }
-
-    private void addFileHash(String hashName, String data, String compare) {
-        if (hashName == null || hashName.length() == 0) return;
-        if (data == null || data.length() == 0) return;
+    private void openSite(String site) {
+        try {
+            Uri uriUrl = Uri.parse(site);
+            Intent launchBrowser = new Intent(Intent.ACTION_VIEW, uriUrl);
+            startActivity(launchBrowser);
+        } catch (Exception e) {
 
-        EncryptionData encryptionData = new EncryptionData(hashName, data, compare);
-        fileDataArrayList.add(encryptionData);
-        mAdapterFile.notifyItemInserted(fileDataArrayList.size());
+        }
     }
 
-    private void addTextHash(String hashName, String data, String compare) {
-        if (hashName == null || hashName.length() == 0) return;
-        if (data == null || data.length() == 0) return;
+    private void openPlayStore() {
+        try {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse("market://details?id=com.codedead.deadline.deadhash"));
+            startActivity(intent);
+        } catch (Exception e) {
 
-        EncryptionData encryptionData = new EncryptionData(hashName, data, compare);
-        textDataArrayList.add(encryptionData);
-        mAdapterText.notifyItemInserted(textDataArrayList.size());
+        }
     }
 
     @Override
@@ -485,4 +514,26 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         drawer.closeDrawer(GravityCompat.START);
         return true;
     }
+
+    @Override
+    public void hashDataFile(List<EncryptionData> data) {
+        fileLoading = false;
+        pgbFile.setVisibility(View.GONE);
+
+        for (EncryptionData d : data) {
+            fileDataArrayList.add(d);
+            mAdapterFile.notifyItemInserted(fileDataArrayList.size());
+        }
+    }
+
+    @Override
+    public void hashDataText(List<EncryptionData> data) {
+        textLoading = false;
+        pgbText.setVisibility(View.GONE);
+
+        for (EncryptionData d : data) {
+            textDataArrayList.add(d);
+            mAdapterText.notifyItemInserted(textDataArrayList.size());
+        }
+    }
 }
