diff --git a/app/src/main/java/com/apk/editor/activities/APKSignActivity.java b/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
index 3b61ad4..23e4ff6 100644
--- a/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/APKSignActivity.java
@@ -1,5 +1,6 @@
 package com.apk.editor.activities;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Intent;
 import android.graphics.Color;
@@ -19,9 +20,6 @@ import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 import com.google.android.material.textview.MaterialTextView;
 
 import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
 
 import in.sunilpaulmathew.sCommon.Utils.sUtils;
 
@@ -30,8 +28,8 @@ import in.sunilpaulmathew.sCommon.Utils.sUtils;
  */
 public class APKSignActivity extends AppCompatActivity {
 
-    private AppCompatImageButton mClearKey, mClearRSA;
-    private MaterialTextView mKeySummary, mRSASummary;
+    private AppCompatImageButton mClearKey, mClearCert;
+    private MaterialTextView mKeySummary, mCertSummary;
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -40,12 +38,12 @@ public class APKSignActivity extends AppCompatActivity {
 
         AppCompatImageButton mBack = findViewById(R.id.back);
         mClearKey = findViewById(R.id.clear_key);
-        mClearRSA = findViewById(R.id.clear_rsa);
+        mClearCert = findViewById(R.id.clear_cert);
         MaterialTextView mInfo = findViewById(R.id.info);
         mKeySummary = findViewById(R.id.key_summary);
-        mRSASummary = findViewById(R.id.rsa_summary);
+        mCertSummary = findViewById(R.id.cert_summary);
         FrameLayout mKey = findViewById(R.id.private_key);
-        FrameLayout mRSA = findViewById(R.id.rsa);
+        FrameLayout mCert = findViewById(R.id.cert);
 
         mInfo.setOnClickListener(v -> {
             Intent documentation = new Intent(this, DocumentationActivity.class);
@@ -68,7 +66,7 @@ public class APKSignActivity extends AppCompatActivity {
             }
         });
 
-        mRSA.setOnClickListener(v -> {
+        mCert.setOnClickListener(v -> {
             if (Build.VERSION.SDK_INT >= 29) {
                 Intent installer = new Intent(Intent.ACTION_GET_CONTENT);
                 installer.setType("*/*");
@@ -100,33 +98,22 @@ public class APKSignActivity extends AppCompatActivity {
             mClearKey.setVisibility(View.GONE);
         }
 
-        if (sUtils.getString("RSATemplate", null, this) != null) {
-            mRSASummary.setText(sUtils.getString("RSATemplate", null, this));
-            mClearRSA.setColorFilter(Color.RED);
-            mClearRSA.setVisibility(View.VISIBLE);
-            mClearRSA.setOnClickListener(v -> {
-                sUtils.saveString("RSATemplate", null, this);
-                new File(getFilesDir(), "signing/APKEditor").delete();
-                mRSASummary.setText(getString(R.string.rsa_template_summary));
-                mClearRSA.setVisibility(View.GONE);
+        if (sUtils.getString("X509Certificate", null, this) != null) {
+            mCertSummary.setText(sUtils.getString("X509Certificate", null, this));
+            mClearCert.setColorFilter(Color.RED);
+            mClearCert.setVisibility(View.VISIBLE);
+            mClearCert.setOnClickListener(v -> {
+                sUtils.saveString("X509Certificate", null, this);
+                new File(getFilesDir(), "signing/APKEditorCert").delete();
+                mCertSummary.setText(getString(R.string.x509_certificate_summary));
+                mClearCert.setVisibility(View.GONE);
             });
         } else {
-            mClearRSA.setVisibility(View.GONE);
+            mClearCert.setVisibility(View.GONE);
         }
     }
 
-    private void writeFile(File file, Uri uri) {
-        try (FileOutputStream outputStream = new FileOutputStream(file, false)) {
-            InputStream inputStream = getContentResolver().openInputStream(uri);
-            int read;
-            byte[] bytes = new byte[8192];
-            while ((read = inputStream.read(bytes)) != -1) {
-                outputStream.write(bytes, 0, read);
-            }
-        } catch (IOException ignored) {}
-        setStatus();
-    }
-
+    @SuppressLint("StringFormatInvalid")
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
@@ -136,18 +123,18 @@ public class APKSignActivity extends AppCompatActivity {
 
             if (uri != null) {
                 new MaterialAlertDialogBuilder(this)
-                        .setMessage(getString(R.string.signing_select_question, requestCode == 0 ? getString(R.string.private_key) : getString(R.string.rsa_template)))
+                        .setMessage(getString(R.string.signing_select_question, requestCode == 0 ? getString(R.string.private_key) : getString(R.string.x509_certificate)))
                         .setNegativeButton(R.string.cancel, (dialog, id) -> {
                         })
                         .setPositiveButton(R.string.select, (dialog, id) -> {
                             if (requestCode == 0) {
                                 sUtils.saveString("PrivateKey", new File(getFilesDir(), "signing/APKEditor.pk8").getAbsolutePath(), this);
-                                writeFile(new File(getFilesDir(), "signing/APKEditor.pk8"), uri);
+                                sUtils.copy(uri, new File(getFilesDir(), "signing/APKEditor.pk8"), this);
                             } else if (requestCode == 1) {
-                                sUtils.saveString("RSATemplate", new File(getFilesDir(), "signing/APKEditor").getAbsolutePath(), this);
-                                writeFile(new File(getFilesDir(), "signing/APKEditor"), uri);
+                                sUtils.saveString("X509Certificate", new File(getFilesDir(), "signing/APKEditorCert").getAbsolutePath(), this);
+                                sUtils.copy(uri, new File(getFilesDir(), "signing/APKEditorCert"), this);
                             }
-
+                            setStatus();
                         }).show();
             }
         }
diff --git a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
index 91d6782..3869624 100644
--- a/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
+++ b/app/src/main/java/com/apk/editor/activities/FilePickerActivity.java
@@ -85,7 +85,7 @@ public class FilePickerActivity extends AppCompatActivity {
                         .setMessage(Common.getFileToReplace() != null ? getString(R.string.replace_question, new File(Common.getFileToReplace()).getName()) + " " +
                                 new File(APKExplorer.getData(getFilesList(), true, this).get(position)).getName() + "?" : getString(R.string.signing_question,
                                 new File(APKExplorer.getData(getFilesList(), true, this).get(position)).getName()) + " " + getString(Common.hasPrivateKey() ?
-                                R.string.private_key : R.string.rsa_template))
+                                R.string.private_key : R.string.x509_certificate))
                         .setNegativeButton(R.string.cancel, (dialog, id) -> {
                         })
                         .setPositiveButton(Common.getFileToReplace() != null ? R.string.replace : R.string.select, (dialog, id) -> {
@@ -99,7 +99,7 @@ public class FilePickerActivity extends AppCompatActivity {
                                     sUtils.copy(new File(APKExplorer.getData(getFilesList(), true, this).get(position)), new File(getFilesDir(), "signing/APKEditor.pk8"));
                                     Common.setPrivateKeyStatus(false);
                                 } else {
-                                    sUtils.saveString("RSATemplate", APKExplorer.getData(getFilesList(), true, this).get(position), this);
+                                    sUtils.saveString("X509Certificate", APKExplorer.getData(getFilesList(), true, this).get(position), this);
                                     sUtils.copy(new File(APKExplorer.getData(getFilesList(), true, this).get(position)), new File(getFilesDir(), "signing/APKEditor"));
                                     Common.setRSATemplateStatus(false);
                                 }
diff --git a/app/src/main/java/com/apk/editor/utils/APKData.java b/app/src/main/java/com/apk/editor/utils/APKData.java
index 7cdc82a..c4fbf71 100644
--- a/app/src/main/java/com/apk/editor/utils/APKData.java
+++ b/app/src/main/java/com/apk/editor/utils/APKData.java
@@ -18,13 +18,11 @@ import androidx.core.content.FileProvider;
 import com.apk.editor.BuildConfig;
 import com.apk.editor.R;
 import com.apk.editor.activities.APKTasksActivity;
-import com.apk.editor.utils.apkSigner.ApkSigner;
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -91,23 +89,21 @@ public class APKData {
         try {
             checkAndPrepareSigningEnvironment(context);
 
-            ApkSigner apkSigner = new ApkSigner(new File(getSigningEnvironmentDir(context), "APKEditor"), new File(getSigningEnvironmentDir(context), "APKEditor.pk8"));
+            APKSigner apkSigner = new APKSigner(context);
             apkSigner.sign(apk, signedAPK);
         } catch (Exception ignored) {}
     }
 
     private static void checkAndPrepareSigningEnvironment(Context context) {
-        File signingEnvironment = getSigningEnvironmentDir(context);
-        File pastFile = new File(signingEnvironment, "APKEditor");
-        File privateKeyFile = new File(signingEnvironment, "APKEditor.pk8");
+        File privateKey = new File(getSigningEnvironmentDir(context), "APKEditor.pk8");
 
-        if (pastFile.exists() && privateKeyFile.exists())
+        if (privateKey.exists()) {
             return;
+        }
 
-        signingEnvironment.mkdir();
+        sUtils.mkdir(getSigningEnvironmentDir(context));
 
-        sUtils.copyAssetFile("APKEditor", pastFile, context);
-        sUtils.copyAssetFile("APKEditor.pk8", privateKeyFile, context);
+        sUtils.copyAssetFile("APKEditor.pk8", privateKey, context);
     }
 
     private static File getSigningEnvironmentDir(Context context) {
@@ -220,7 +216,7 @@ public class APKData {
                 if (mBuildDir.exists()) {
                     sUtils.delete(mBuildDir);
                 }
-                mBuildDir.mkdirs();
+                sUtils.mkdir(mBuildDir);
 
                 if (mTMPZip.exists()) {
                     sUtils.delete(mTMPZip);
@@ -241,7 +237,7 @@ public class APKData {
                     if (mParent.exists()) {
                         sUtils.delete(mParent);
                     }
-                    mParent.mkdirs();
+                    sUtils.mkdir(mParent);
                     for (String mSplits : splitApks(sPackageUtils.getSourceDir(Common.getAppID(), activity))) {
                         if (!new File(mSplits).getName().equals("base.apk")) {
                             Common.setStatus(activity.getString(R.string.signing, new File(mSplits).getName()));
@@ -328,7 +324,7 @@ public class APKData {
                         if (mParent.exists()) {
                             sUtils.delete(mParent);
                         }
-                        mParent.mkdirs();
+                        sUtils.mkdir(mParent);
                         for (String mSplits : Common.getAPKList()) {
                             signApks(new File(mSplits), new File(mParent, new File(mSplits).getName()), activity);
                         }
@@ -408,7 +404,7 @@ public class APKData {
                 mProgressDialog.setCancelable(false);
                 mProgressDialog.show();
                 if (!getExportAPKsPath(context).exists()) {
-                    getExportAPKsPath(context).mkdirs();
+                    sUtils.mkdir(getExportAPKsPath(context));
                 }
             }
 
@@ -418,9 +414,8 @@ public class APKData {
                     File mParent = new File(getExportAPKsPath(context) , packageName);
                     if (mParent.exists()) {
                         sUtils.delete(mParent);
-                    } else {
-                        mParent.mkdirs();
                     }
+                    sUtils.mkdir(mParent);
                     for (String mSplits : splitApks(sPackageUtils.getSourceDir(packageName, context))) {
                         if (mSplits.endsWith(".apk")) {
                             sUtils.copy(new File(mSplits), new File(mParent, new File(mSplits).getName()));
@@ -476,7 +471,7 @@ public class APKData {
             @Override
             public void doInBackground() {
                 if (mFile.exists()) {
-                    mFile.delete();
+                    sUtils.delete(mFile);
                 }
                 APKEditorUtils.zip(new File(path), mFile);
             }
@@ -521,7 +516,7 @@ public class APKData {
             @Override
             public void doInBackground() {
                 try {
-                    InputStream inputStream = new FileInputStream(file);
+                    FileInputStream inputStream = new FileInputStream(file);
                     ContentValues values = new ContentValues();
                     values.put(MediaStore.MediaColumns.DISPLAY_NAME, file.getName());
                     values.put(MediaStore.MediaColumns.MIME_TYPE, "*/*");
diff --git a/app/src/main/java/com/apk/editor/utils/APKSigner.java b/app/src/main/java/com/apk/editor/utils/APKSigner.java
new file mode 100644
index 0000000..833c849
--- /dev/null
+++ b/app/src/main/java/com/apk/editor/utils/APKSigner.java
@@ -0,0 +1,92 @@
+package com.apk.editor.utils;
+
+import android.content.Context;
+
+import com.android.apksig.ApkSigner;
+
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.KeyFactory;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivateKey;
+import java.security.cert.CertificateException;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.PKCS8EncodedKeySpec;
+import java.util.Collections;
+
+import in.sunilpaulmathew.sCommon.Utils.sUtils;
+
+/*
+ * Created by APK Explorer & Editor <apkeditor@protonmail.com> on January 16, 2023
+ */
+public class APKSigner {
+
+    private final Context mContext;
+
+    public APKSigner(Context context) {
+        mContext = context;
+    }
+
+    private static PrivateKey getPrivateKey(File keyFile) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
+        FileInputStream fis = new FileInputStream(keyFile);
+        DataInputStream dis = new DataInputStream(fis);
+        byte[] keyBytes = new byte[(int) keyFile.length()];
+        dis.readFully(keyBytes);
+        dis.close();
+        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
+        KeyFactory kf =
+                KeyFactory.getInstance("RSA");
+        return kf.generatePrivate(spec);
+    }
+
+    private static X509Certificate getCertificate(File certificateFile) throws CertificateException {
+        String certificateString;
+        if (certificateFile.exists()) {
+            certificateString =sUtils.read(certificateFile);
+        } else {
+            certificateString = "-----BEGIN CERTIFICATE-----\n" +
+                    "MIICyTCCAbGgAwIBAgIEfNgbbDANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwpB\n" +
+                    "UEsgRWRpdG9yMB4XDTIxMDIyNzEyNDM0NFoXDTQ2MDIyMTEyNDM0NFowFTETMBEG\n" +
+                    "A1UEAxMKQVBLIEVkaXRvcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n" +
+                    "ALzPirwEi4iJdk2YG6UT0LY9mp01En7MvIfomupQ+++3eKT6HEIBzcrVrWTUbmu9\n" +
+                    "fLii3CWkGmw0jx6Sdjvv2LpZKk8Vw2pB0rI5ewXNjXcjwpEtQQDPu0YaG8wcRgiA\n" +
+                    "lwVm5L1qxxiS/Gpp7jsJDQsjlxt+U329X5E4ODbg6GDNEe/zss9W2+AQID7FbPVN\n" +
+                    "UWM3NzMIMzl8i7XVIQujzYiL7B3FE4oXMaqhQcEG7yo4LH30cEL5k98uFpKc0nWA\n" +
+                    "b0rMB4nNZn9dexNT6CUcnEXHVd1bDDUe3l6UZrl+2PO/gcZFMbK+2LJASkt92jGf\n" +
+                    "cH7YSBYLoB6PAem650tm2ZECAwEAAaMhMB8wHQYDVR0OBBYEFK4U40Qda8jX9A2f\n" +
+                    "iuBn6vV2QevRMA0GCSqGSIb3DQEBCwUAA4IBAQBjnGi5A0PjA2gpcdHTNZYEBHG2\n" +
+                    "e+9IVCq+LaZbmo5flby1XjGQ/FipzMjmtKFmYHtXgCVt2edgI5Urhj7nLFYa8Yjy\n" +
+                    "zrN0sWjJagCJM/CjyRo8B0A+xNEq7pmiFQfsP2DFGvAkz89gavPtlaDKQHUkedLK\n" +
+                    "QGI9YAK6mgStb6Olw4DGhCUE3IH7TBH08HvubizzgtHyxs9pGt6/QumWYnJnfEGd\n" +
+                    "0Sk2k337vc0OH+rZPYChcqis48OZ+IrQodP2N749M6yOEXHcV2NixmciJ1vrWdu3\n" +
+                    "aJDI5t2p3qX1HYneBQ8yc9rvWIf4xFjT5AXzHt8cszdSNBrrJrewrvmJr1kZ\n" +
+                    "-----END CERTIFICATE-----";
+        }
+        InputStream inputStream = new ByteArrayInputStream(certificateString.getBytes());
+        return (X509Certificate) CertificateFactory
+                .getInstance("X509")
+                .generateCertificate(inputStream);
+    }
+
+    public void sign(File apkFile, File output) throws Exception {
+        ApkSigner.SignerConfig signerConfig = new ApkSigner.SignerConfig.Builder("CERT", getPrivateKey(
+                new File(mContext.getFilesDir(), "signing/APKEditor.pk8")), Collections.singletonList(getCertificate(
+                        new File(mContext.getFilesDir(), "signing/APKEditorCert")))).build();
+        ApkSigner.Builder builder = new ApkSigner.Builder(Collections.singletonList(signerConfig));
+        builder.setInputApk(apkFile);
+        builder.setOutputApk(output);
+        builder.setCreatedBy("APK Editor");
+        builder.setV1SigningEnabled(true);
+        builder.setV2SigningEnabled(true);
+        builder.setMinSdkVersion(-1);
+        ApkSigner signer = builder.build();
+        signer.sign();
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/AppSettings.java b/app/src/main/java/com/apk/editor/utils/AppSettings.java
index 12e35a1..4aee66d 100644
--- a/app/src/main/java/com/apk/editor/utils/AppSettings.java
+++ b/app/src/main/java/com/apk/editor/utils/AppSettings.java
@@ -124,8 +124,9 @@ public class AppSettings {
         mData.add(new sSerializableItems(null, "Willi Ye", "Kernel Adiutor", "https://github.com/Grarak/KernelAdiutor"));
         mData.add(new sSerializableItems(null, "Hsiafan", "APK parser", "https://github.com/hsiafan/apk-parser"));
         mData.add(new sSerializableItems(null, "Srikanth Reddy Lingala", "Zip4j", "https://github.com/srikanth-lingala/zip4j"));
+        mData.add(new sSerializableItems(null, "Aefyr", "SAI", "https://github.com/Aefyr/SAI"));
         if (APKEditorUtils.isFullVersion(context)) {
-            mData.add(new sSerializableItems(null, "Aefyr", "PseudoApkSigner", "https://github.com/Aefyr/PseudoApkSigner"));
+            mData.add(new sSerializableItems(null, "Google", "apksig", "https://android.googlesource.com/platform/tools/apksig"));
         }
         mData.add(new sSerializableItems(null, "Connor Tumbleson", "Apktool", "https://github.com/iBotPeaches/Apktool/"));
         mData.add(new sSerializableItems(null, "Ben Gruver", "smali/baksmali", "https://github.com/JesusFreke/smali/"));
@@ -583,9 +584,9 @@ public class AppSettings {
                 if (itemPosition == 0) {
                     if (isCustomKey(context)) {
                         sUtils.saveString("PrivateKey", null, context);
-                        new File(context.getFilesDir(), "signing/APKEditor.pk8").delete();
-                        sUtils.saveString("RSATemplate", null, context);
-                        new File(context.getFilesDir(), "signing/APKEditor").delete();
+                        sUtils.delete(new File(context.getFilesDir(), "signing/APKEditor.pk8"));
+                        sUtils.saveString("X509Certificate", null, context);
+                        sUtils.delete(new File(context.getFilesDir(), "signing/APKEditorCert"));
                         getData(context).set(position, new sSerializableItems(sUtils.getDrawable(R.drawable.ic_key, context), context.getString(R.string.sign_apk_with), getAPKSign(context), null));
                         adapter.notifyItemChanged(position);
                     }
@@ -611,7 +612,9 @@ public class AppSettings {
                     sUtils.delete(activity.getFilesDir());
                     if (APKEditorUtils.isFullVersion(activity) && isCustomKey(activity)) {
                         sUtils.saveString("PrivateKey", null, activity);
-                        sUtils.saveString("RSATemplate", null, activity);
+                        sUtils.delete(new File(activity.getFilesDir(), "signing/APKEditor.pk8"));
+                        sUtils.saveString("X509Certificate", null, activity);
+                        sUtils.delete(new File(activity.getFilesDir(), "signing/APKEditorCert"));
                     }
                     activity.finish();
                 }).show();
@@ -660,7 +663,7 @@ public class AppSettings {
 
     private static boolean isCustomKey(Context context) {
         return sUtils.getString("PrivateKey", null, context) != null &&
-                sUtils.getString("RSATemplate", null, context) != null;
+                sUtils.getString("X509Certificate", null, context) != null;
     }
 
     public static boolean isTextEditingEnabled(Context context) {
diff --git a/app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java b/app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java
deleted file mode 100644
index 93cc5ca..0000000
--- a/app/src/main/java/com/apk/editor/utils/apkSigner/APKSignerUtils.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.apk.editor.utils.apkSigner;
-
-import android.util.Base64;
-
-import java.io.InputStream;
-import java.security.MessageDigest;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
- * Based on the original work of Aefyr for https://github.com/Aefyr/PseudoApkSigner
- */
-public class APKSignerUtils {
-
-    static byte[] getFileHash(InputStream fileInputStream, String hashingAlgorithm) throws Exception {
-        MessageDigest messageDigest = MessageDigest.getInstance(hashingAlgorithm);
-
-        byte[] buffer = new byte[1024 * 1024];
-
-        int read;
-        while ((read = fileInputStream.read(buffer)) > 0)
-            messageDigest.update(buffer, 0, read);
-
-        fileInputStream.close();
-
-        return messageDigest.digest();
-    }
-
-    static byte[] hash(byte[] bytes, String hashingAlgorithm) throws Exception {
-        MessageDigest messageDigest = MessageDigest.getInstance(hashingAlgorithm);
-        messageDigest.update(bytes);
-        return messageDigest.digest();
-    }
-
-    static String base64Encode(byte[] bytes) {
-        return Base64.encodeToString(bytes, 0);
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java b/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
deleted file mode 100644
index 0af249c..0000000
--- a/app/src/main/java/com/apk/editor/utils/apkSigner/ApkSigner.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package com.apk.editor.utils.apkSigner;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
-import java.security.KeyFactory;
-import java.security.PrivateKey;
-import java.security.Signature;
-import java.security.interfaces.RSAPrivateKey;
-import java.security.spec.PKCS8EncodedKeySpec;
-import java.util.Enumeration;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import java.util.zip.ZipOutputStream;
-
-import in.sunilpaulmathew.sCommon.Utils.sUtils;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
- * Based on the original work of Aefyr for https://github.com/Aefyr/PseudoApkSigner
- */
-public class ApkSigner {
-
-    private static final String HASHING_ALGORITHM = "SHA1";
-    private final RSAPrivateKey mPrivateKey;
-    private final File mTemplateFile;
-
-    public ApkSigner(File template, File privateKey) throws Exception {
-        mTemplateFile = template;
-        mPrivateKey = readPrivateKey(privateKey);
-    }
-
-    public void sign(File apkFile, File output) throws Exception {
-        ManifestGenerator manifest = new ManifestGenerator(apkFile, HASHING_ALGORITHM);
-        SignatureFileGenerator signature = new SignatureFileGenerator(manifest);
-
-        ZipFile apkZipFile = new ZipFile(apkFile);
-
-        ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(output));
-        Enumeration<? extends ZipEntry> zipEntries = apkZipFile.entries();
-        while (zipEntries.hasMoreElements()) {
-            ZipEntry zipEntry = zipEntries.nextElement();
-
-            if (zipEntry.getName().toLowerCase().startsWith("meta-inf"))
-                continue;
-
-            InputStream entryInputStream = apkZipFile.getInputStream(zipEntry);
-
-            zipOutputStream.putNextEntry(new ZipEntry(zipEntry.getName()));
-            sUtils.copyStream(entryInputStream, zipOutputStream);
-            zipOutputStream.closeEntry();
-        }
-
-        zipOutputStream.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"));
-        zipOutputStream.write(manifest.generate().getBytes(StandardCharsets.UTF_8));
-        zipOutputStream.closeEntry();
-
-        zipOutputStream.putNextEntry(new ZipEntry("META-INF/APKEDITOR.SF"));
-        zipOutputStream.write(signature.generate().getBytes(StandardCharsets.UTF_8));
-        zipOutputStream.closeEntry();
-
-        zipOutputStream.putNextEntry(new ZipEntry("META-INF/APKEDITOR.RSA"));
-        zipOutputStream.write(readFile(mTemplateFile));
-        zipOutputStream.write(sign(mPrivateKey, signature.generate().getBytes(StandardCharsets.UTF_8)));
-        zipOutputStream.closeEntry();
-
-        apkZipFile.close();
-        zipOutputStream.close();
-    }
-
-    private byte[] sign(PrivateKey privateKey, byte[] message) throws Exception {
-        Signature sign = Signature.getInstance(HASHING_ALGORITHM + "withRSA");
-        sign.initSign(privateKey);
-        sign.update(message);
-        return sign.sign();
-    }
-
-    private RSAPrivateKey readPrivateKey(File file) throws Exception {
-        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(readFile(file));
-        return (RSAPrivateKey) KeyFactory.getInstance("RSA").generatePrivate(keySpec);
-    }
-
-    private byte[] readFile(File file) throws IOException {
-        byte[] fileBytes = new byte[(int) file.length()];
-
-        FileInputStream inputStream = new FileInputStream(file);
-        inputStream.read(fileBytes);
-        inputStream.close();
-
-        return fileBytes;
-    }
-}
diff --git a/app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java b/app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java
deleted file mode 100644
index 7be18de..0000000
--- a/app/src/main/java/com/apk/editor/utils/apkSigner/ManifestGenerator.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.apk.editor.utils.apkSigner;
-
-import com.apk.editor.BuildConfig;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Enumeration;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
- * Based on the original work of Aefyr for https://github.com/Aefyr/PseudoApkSigner
- */
-class ManifestGenerator {
-
-    private final File mApkFile;
-    private final String mHashingAlgorithm;
-    private final ArrayList<ManifestEntry> mEntries;
-
-    private long mVersion = 0;
-    private String mCachedManifest;
-    private long mCachedVersion = -1;
-
-    ManifestGenerator(File apkFile, String hashingAlgorithm) {
-        mApkFile = apkFile;
-        mHashingAlgorithm = hashingAlgorithm;
-        mEntries = new ArrayList<>();
-    }
-
-    String getHashingAlgorithm() {
-        return mHashingAlgorithm;
-    }
-
-    String generate() throws Exception {
-        if (mVersion == mCachedVersion)
-            return mCachedManifest;
-
-        parseApkAndGenerateEntries();
-
-        StringBuilder stringBuilder = new StringBuilder();
-
-        stringBuilder.append(generateHeader().toString());
-        for (ManifestEntry entry : mEntries) {
-            stringBuilder.append(entry.toString());
-        }
-
-        mCachedVersion = mVersion;
-        mCachedManifest = stringBuilder.toString();
-
-        return mCachedManifest;
-    }
-
-    private ManifestEntry generateHeader() {
-        ManifestEntry header = new ManifestEntry();
-        header.setAttribute("Manifest-Version", "1.0");
-        header.setAttribute("Created-By", String.format("APK Editor %s", BuildConfig.VERSION_NAME));
-        return header;
-    }
-
-    static class ManifestEntry {
-        private final LinkedHashMap<String, String> mAttributes;
-
-        ManifestEntry() {
-            mAttributes = new LinkedHashMap<>();
-        }
-
-        void setAttribute(String attribute, String value) {
-            mAttributes.put(attribute, value);
-        }
-
-        String getAttribute() {
-            return mAttributes.get("Name");
-        }
-
-        @Override
-        public String toString() {
-            StringBuilder stringBuilder = new StringBuilder();
-
-            for (String key : mAttributes.keySet())
-                stringBuilder.append(String.format("%s: %s\r\n", key, mAttributes.get(key)));
-
-            stringBuilder.append("\r\n");
-
-            return stringBuilder.toString();
-        }
-    }
-
-    private void addEntry(ManifestEntry entry) {
-        mEntries.add(entry);
-        mVersion++;
-    }
-
-    List<ManifestEntry> getEntries() {
-        return mEntries;
-    }
-
-    private void parseApkAndGenerateEntries() throws Exception {
-        mEntries.clear();
-
-        ZipFile apkZipFile = new ZipFile(mApkFile);
-
-        Enumeration<? extends ZipEntry> zipEntries = apkZipFile.entries();
-        while (zipEntries.hasMoreElements()) {
-            ZipEntry zipEntry = zipEntries.nextElement();
-
-            if (zipEntry.isDirectory())
-                continue;
-
-            if (zipEntry.getName().toLowerCase().startsWith("meta-inf"))
-                continue;
-
-            ManifestEntry manifestEntry = new ManifestEntry();
-            manifestEntry.setAttribute("Name", zipEntry.getName());
-            manifestEntry.setAttribute(mHashingAlgorithm + "-Digest", APKSignerUtils.base64Encode(APKSignerUtils.getFileHash(apkZipFile.getInputStream(zipEntry), mHashingAlgorithm)));
-            addEntry(manifestEntry);
-        }
-
-        apkZipFile.close();
-    }
-}
diff --git a/app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java b/app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java
deleted file mode 100644
index 8f99c70..0000000
--- a/app/src/main/java/com/apk/editor/utils/apkSigner/SignatureFileGenerator.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.apk.editor.utils.apkSigner;
-
-import com.apk.editor.BuildConfig;
-
-import java.nio.charset.StandardCharsets;
-
-/*
- * Created by APK Explorer & Editor <apkeditor@protonmail.com> on March 04, 2021
- * Based on the original work of Aefyr for https://github.com/Aefyr/PseudoApkSigner
- */
-class SignatureFileGenerator {
-
-    private final ManifestGenerator mManifest;
-    private final String mHashingAlgorithm;
-
-    SignatureFileGenerator(ManifestGenerator manifestGenerator) {
-        mManifest = manifestGenerator;
-        mHashingAlgorithm = manifestGenerator.getHashingAlgorithm();
-    }
-
-    String generate() throws Exception {
-        StringBuilder stringBuilder = new StringBuilder();
-        stringBuilder.append(generateHeader().toString());
-
-        for (ManifestGenerator.ManifestEntry manifestEntry : mManifest.getEntries()) {
-            ManifestGenerator.ManifestEntry sfEntry = new ManifestGenerator.ManifestEntry();
-            sfEntry.setAttribute("Name", manifestEntry.getAttribute());
-            sfEntry.setAttribute(mHashingAlgorithm + "-Digest", APKSignerUtils.base64Encode(APKSignerUtils.hash(manifestEntry.toString().getBytes(StandardCharsets.UTF_8), mHashingAlgorithm)));
-            stringBuilder.append(sfEntry.toString());
-        }
-
-        return stringBuilder.toString();
-    }
-
-    private ManifestGenerator.ManifestEntry generateHeader() throws Exception {
-        ManifestGenerator.ManifestEntry header = new ManifestGenerator.ManifestEntry();
-        header.setAttribute("Signature-Version", "1.0");
-        header.setAttribute("Created-By", String.format("APK Editor %s", BuildConfig.VERSION_NAME));
-        header.setAttribute(mHashingAlgorithm + "-Digest-Manifest", APKSignerUtils.base64Encode(APKSignerUtils.hash(mManifest.generate().getBytes(StandardCharsets.UTF_8), mHashingAlgorithm)));
-        return header;
-    }
-
-}
