diff --git a/src/aws/apps/usbDeviceEnumerator/Act_UsbDeviceEnumerator.java b/src/aws/apps/usbDeviceEnumerator/Act_Main.java
similarity index 90%
rename from src/aws/apps/usbDeviceEnumerator/Act_UsbDeviceEnumerator.java
rename to src/aws/apps/usbDeviceEnumerator/Act_Main.java
index ef45a88..67e0e4a 100644
--- a/src/aws/apps/usbDeviceEnumerator/Act_UsbDeviceEnumerator.java
+++ b/src/aws/apps/usbDeviceEnumerator/Act_Main.java
@@ -47,22 +47,13 @@ import aws.apps.usbDeviceEnumerator.ui.MyAlertBox;
 import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 import aws.apps.usbDeviceEnumerator.util.UsefulBits.SOFTWARE_INFO;
 
-enum MENU_BUTTONS {
-	ABOUT, UPDATE_DB;
-
-	public static MENU_BUTTONS lookUpByOrdinal(int i) {
-		return MENU_BUTTONS.values()[i];
-	}
-}
-
-public class Act_UsbDeviceEnumerator extends TabActivity{
+public class Act_Main extends TabActivity{
 	final String TAG =  this.getClass().getName();
 	final int DIALOGUE_UPDATE_DB = 0;
 	
 	private final static String TAB_ANDROID_INFO = "Android";
 	private final static String TAB_LINUX_INFO = "Linux";
 	
-	
 	private UsefulBits uB;
 	private ProgressDialog dlProgressDialog;
 	private String usbDbDirectory = "";
@@ -74,20 +65,22 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 	private String companyLogoZipDirectory = "";
 	private String companyLogoZipFullPath = "";
 
-	ListView listUsbAndroid;
-	TextView tvDeviceCountAndroid;
+	private ListView listUsbAndroid;
+	private TextView tvDeviceCountAndroid;
 
-	ListView listUsbLinux;
-	TextView tvDeviceCountLinux;
+	private ListView listUsbLinux;
+	private TextView tvDeviceCountLinux;
 
-	UsbManager usbManAndroid;
-	MyUsbManager usbManagerLinux;
+	private UsbManager usbManAndroid;
+	private MyUsbManager usbManagerLinux;
 	
 	private TabHost tabHost;
-	TabWidget tabWidget;
-	HashMap<String, UsbDevice> androidUsbDeviceList;
-	HashMap<String, MyUsbDevice> linuxUsbDeviceList;
+	private TabWidget tabWidget;
+	private HashMap<String, UsbDevice> androidUsbDeviceList;
+	private HashMap<String, MyUsbDevice> linuxUsbDeviceList;	
 
+	private Frag_UsbDeviceInfo currentInfoFragment;
+	
 	/** Called when the activity is first created. */
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
@@ -231,12 +224,13 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 			ArrayAdapter<String> usbDeviceAdaptorLinux = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item, linuxUsbArray);
 			listUsbLinux.setAdapter(usbDeviceAdaptorLinux);
 			tvDeviceCountLinux.setText("Device List (" + linuxUsbDeviceList.size()+ "):");
-			//MyAlertBox.create(this, MyUsbManager.getUsbInfo(), "Linux Result:", getString(android.R.string.ok)).show();
 		}
 	}
 
 	private void stackAFragment(String usbKey) {
 		Fragment f = new Frag_UsbDeviceInfoAndroid(usbKey);
+		currentInfoFragment = (Frag_UsbDeviceInfo) f;
+		
 		FragmentTransaction ft = getFragmentManager().beginTransaction();
 		ft.replace(R.id.fragment_container, f);
 		ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
@@ -246,6 +240,8 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 
 	private void stackAFragment(MyUsbDevice usbDevice) {
 		Fragment f = new Frag_UsbDeviceInfoLinux(usbDevice);
+		currentInfoFragment = (Frag_UsbDeviceInfo) f;
+		
 		FragmentTransaction ft = getFragmentManager().beginTransaction();
 		ft.replace(R.id.fragment_container, f);
 		ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
@@ -263,21 +259,11 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 	/** Handles item selections */
 	public boolean onOptionsItemSelected(MenuItem item) {
 		switch (item.getItemId()) {
-		case R.id.menu_about:
-			String text = "";
-			String title = "";
-
-			text += uB.getSoftwareInfo(SOFTWARE_INFO.CHANGELOG);
-			text += "\n\n";
-			text += uB.getSoftwareInfo(SOFTWARE_INFO.NOTES);
-			text += "\n\n";
-			text += uB.getSoftwareInfo(SOFTWARE_INFO.ACKNOWLEDGEMENTS);
-			text += "\n\n";
-			text += uB.getSoftwareInfo(SOFTWARE_INFO.COPYRIGHT);
-			title = uB.getSoftwareInfo(SOFTWARE_INFO.NAME) + " v"
-					+ uB.getSoftwareInfo(SOFTWARE_INFO.VERSION);
-
-			MyAlertBox.create(this, text, title, getString(android.R.string.ok)).show();
+		case R.id.menu_about:			
+			 String title = uB.getSoftwareInfo(SOFTWARE_INFO.NAME) + " v" + uB.getSoftwareInfo(SOFTWARE_INFO.VERSION);
+			 String messeage = uB.getAboutDialogueText();
+
+			MyAlertBox.create(this, messeage, title, getString(android.R.string.ok)).show();
 			return true;
 		case R.id.menu_update_db:
 			if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
@@ -319,7 +305,16 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 		case R.id.menu_refresh:
 			refreshUsbDevices();
 			return true;
+			
+		case R.id.menu_export:
+			if ( currentInfoFragment != null ){
+				uB.share("USB Info", currentInfoFragment.toString());
+			}else{
+				uB.showToast(getString(R.string.no_usb_device_selected_), Toast.LENGTH_SHORT, Gravity.BOTTOM, 0, 0);
+			}
+		
 		}
+	
 		return false;
 	}
 
@@ -409,9 +404,9 @@ public class Act_UsbDeviceEnumerator extends TabActivity{
 		protected void onPostExecute(Boolean result) {
 
 			if(result){ // The download is ok.
-				Toast.makeText(Act_UsbDeviceEnumerator.this, getString(R.string.download_ok), Toast.LENGTH_SHORT).show();
+				Toast.makeText(Act_Main.this, getString(R.string.download_ok), Toast.LENGTH_SHORT).show();
 			}else{     // There was an error.
-				Toast.makeText(Act_UsbDeviceEnumerator.this, getString(R.string.download_error), Toast.LENGTH_SHORT).show();
+				Toast.makeText(Act_Main.this, getString(R.string.download_error), Toast.LENGTH_SHORT).show();
 			}
 
 			Log.d(TAG, "^ Dismissing dialogue");
diff --git a/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfo.java b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfo.java
new file mode 100644
index 0000000..b60d34e
--- /dev/null
+++ b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfo.java
@@ -0,0 +1,10 @@
+package aws.apps.usbDeviceEnumerator;
+
+import android.app.Fragment;
+
+public abstract class Frag_UsbDeviceInfo extends Fragment{
+
+	
+	public abstract String toString();
+	
+}
diff --git a/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoAndroid.java b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoAndroid.java
index 9df3bec..7e92bd0 100644
--- a/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoAndroid.java
+++ b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoAndroid.java
@@ -1,6 +1,5 @@
 package aws.apps.usbDeviceEnumerator;
 
-import android.app.Fragment;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
@@ -23,8 +22,9 @@ import aws.apps.usbDeviceEnumerator.dataAccess.DbAccessCompany;
 import aws.apps.usbDeviceEnumerator.dataAccess.DbAccessUsb;
 import aws.apps.usbDeviceEnumerator.dataAccess.ZipAccessCompany;
 import aws.apps.usbDeviceEnumerator.util.UsbConstants;
+import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
-public class Frag_UsbDeviceInfoAndroid extends Fragment {
+public class Frag_UsbDeviceInfoAndroid extends Frag_UsbDeviceInfo {
 	private final String TAG =  this.getClass().getName();
 	
 	private final static String BUNDLE_USB_KEY = "BUNDLE_USBKEY";
@@ -34,7 +34,9 @@ public class Frag_UsbDeviceInfoAndroid extends Fragment {
 	
 	public final static String DEFAULT_STRING = "???";
     private String usbKey = DEFAULT_STRING;
-    private TableLayout tblUsbInfo;
+	private TableLayout tblUsbInfoHeader;
+	private TableLayout tblUsbInfoTop;
+    private TableLayout tblUsbInfoBottom;
 	private TextView tvVID;
 	private TextView tvPID;
 	private TextView tvVendorDb;
@@ -88,7 +90,9 @@ public class Frag_UsbDeviceInfoAndroid extends Fragment {
     		v = inflater.inflate(R.layout.usb_info_android, container, false);
     	}
     	
-   		tblUsbInfo = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
+    	tblUsbInfoHeader = (TableLayout) v.findViewById(R.id.tblUsbInfo_title);
+    	tblUsbInfoTop = (TableLayout) v.findViewById(R.id.tblUsbInfo_top);
+    	tblUsbInfoBottom = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
 		tvVID = ((TextView) v.findViewById(R.id.tvVID));
 		tvPID = ((TextView) v.findViewById(R.id.tvPID));
 		tvProductDb = ((TextView) v.findViewById(R.id.tvProductDb));
@@ -134,26 +138,26 @@ public class Frag_UsbDeviceInfoAndroid extends Fragment {
     			iface = device.getInterface(i);
     			if(iface != null){
     				
-    				addDataRow(inflater, tblUsbInfo, "Interface #" + i, "");
-    				addDataRow(inflater, tblUsbInfo, "Class:", UsbConstants.resolveUsbClass((iface.getInterfaceClass())));
+    				addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.interface_) + i, "");
+    				addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.class_), UsbConstants.resolveUsbClass((iface.getInterfaceClass())));
     				
-    				String endpointText = "None";
+    				String endpointText = getActivity().getString(R.string.none);
     				if(iface.getEndpointCount() > 0){
     					UsbEndpoint endpoint;
     					for(int j=0; j < iface.getEndpointCount(); j++){
     						endpoint = iface.getEndpoint(j);
         					endpointText = "#" + j + "\n";
-        					endpointText += "Address        : " + endpoint.getAddress() + " (" + padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8) + ")\n";
-        					endpointText += "Number         : " + endpoint.getEndpointNumber() + "\n";
-    						endpointText += "Direction      : " + UsbConstants.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";        					
-        					endpointText += "Type           : " + UsbConstants.resolveUsbEndpointType(endpoint.getType()) + "\n";
-    						endpointText += "Poll Interval  : " + endpoint.getInterval() + "\n";
-    						endpointText += "Max Packet Size: " + endpoint.getMaxPacketSize() + "\n";
-    						endpointText += "Attributes     : " + padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
-    						addDataRow(inflater, tblUsbInfo, "\tEndpoint:", endpointText);
+        					endpointText += getActivity().getString(R.string.address_) + endpoint.getAddress() + " (" + padLeft(Integer.toBinaryString(endpoint.getAddress()), "0", 8) + ")\n";
+        					endpointText += getActivity().getString(R.string.number_) + endpoint.getEndpointNumber() + "\n";
+    						endpointText += getActivity().getString(R.string.direction_) + UsbConstants.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";        					
+        					endpointText += getActivity().getString(R.string.type_) + UsbConstants.resolveUsbEndpointType(endpoint.getType()) + "\n";
+    						endpointText += getActivity().getString(R.string.poll_interval_) + endpoint.getInterval() + "\n";
+    						endpointText += getActivity().getString(R.string.max_packet_size_) + endpoint.getMaxPacketSize() + "\n";
+    						endpointText += getActivity().getString(R.string.attributes_) + padLeft(Integer.toBinaryString(endpoint.getAttributes()), "0", 8);
+    						addDataRow(inflater, tblUsbInfoBottom, "\t" + getActivity().getString(R.string.endpoint_), endpointText);
     					}
     				} else {
-    					addDataRow(inflater, tblUsbInfo, "\tEndpoints:", "none");
+    					addDataRow(inflater, tblUsbInfoBottom, "\tEndpoints:", "none");
     				}
     			}
     		}
@@ -197,4 +201,15 @@ private void loadLogo(String logo){
     	}
     	return pad+string;
     }
+
+	@Override
+	public String toString() {
+		StringBuilder sb = new StringBuilder();
+		UsefulBits uB = new UsefulBits(getActivity());
+		sb.append(uB.tableToString(tblUsbInfoHeader));
+		sb.append(uB.tableToString(tblUsbInfoTop));
+		sb.append("\n");
+		sb.append(uB.tableToString(tblUsbInfoBottom));
+		return sb.toString();
+	}
 }
diff --git a/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoLinux.java b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoLinux.java
index 4cd8225..ad06225 100644
--- a/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoLinux.java
+++ b/src/aws/apps/usbDeviceEnumerator/Frag_UsbDeviceInfoLinux.java
@@ -1,6 +1,5 @@
 package aws.apps.usbDeviceEnumerator;
 
-import android.app.Fragment;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.drawable.BitmapDrawable;
@@ -20,9 +19,9 @@ import aws.apps.usbDeviceEnumerator.dataAccess.DbAccessCompany;
 import aws.apps.usbDeviceEnumerator.dataAccess.DbAccessUsb;
 import aws.apps.usbDeviceEnumerator.dataAccess.ZipAccessCompany;
 import aws.apps.usbDeviceEnumerator.util.UsbConstants;
+import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
-public class Frag_UsbDeviceInfoLinux extends Fragment {
-//	private final String TAG =  this.getClass().getName();
+public class Frag_UsbDeviceInfoLinux extends Frag_UsbDeviceInfo {
 	private final String TAG =  this.getClass().getName();
 	private final static String BUNDLE_MY_USB_INFO = "BUNDLE_MY_USB_INFO";
 	
@@ -30,7 +29,9 @@ public class Frag_UsbDeviceInfoLinux extends Fragment {
 	public final static int TYPE_LINUX_INFO = 1;	
 	
 	public final static String DEFAULT_STRING = "???";
-    private TableLayout tblUsbInfo;
+	private TableLayout tblUsbInfoHeader;
+	private TableLayout tblUsbInfoTop;
+    private TableLayout tblUsbInfoBottom;
 	private TextView tvVID;
 	private TextView tvPID;
 	private TextView tvVendorReported;
@@ -82,7 +83,9 @@ public class Frag_UsbDeviceInfoLinux extends Fragment {
     		v = inflater.inflate(R.layout.usb_info_linux, container, false);
     	}
     	
-   		tblUsbInfo = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
+    	tblUsbInfoHeader = (TableLayout) v.findViewById(R.id.tblUsbInfo_title);
+    	tblUsbInfoTop = (TableLayout) v.findViewById(R.id.tblUsbInfo_top);
+    	tblUsbInfoBottom = (TableLayout) v.findViewById(R.id.tblUsbInfo_bottom);
 		tvVID = ((TextView) v.findViewById(R.id.tvVID));
 		tvPID = ((TextView) v.findViewById(R.id.tvPID));
 		tvProductDb = ((TextView) v.findViewById(R.id.tvProductDb));
@@ -132,13 +135,13 @@ public class Frag_UsbDeviceInfoLinux extends Fragment {
 			Log.d(TAG, "^ Searching for '"+searchFor+"'");
 			loadLogo(dbComp.getLogo(searchFor));
 		}
-		addDataRow(inflater, tblUsbInfo, "USB Version:",myUsbDevice.getUsbVersion());
-		addDataRow(inflater, tblUsbInfo, "Speed:",myUsbDevice.getSpeed());
-		addDataRow(inflater, tblUsbInfo, "Protocol:", myUsbDevice.getDeviceProtocol());
-		addDataRow(inflater, tblUsbInfo, "Maximum Power:",myUsbDevice.getMaxPower());
-		addDataRow(inflater, tblUsbInfo, "Serial Number:",myUsbDevice.getSerialNumber());
+		addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.usb_version_),myUsbDevice.getUsbVersion());
+		addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.speed_),myUsbDevice.getSpeed());
+		addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.protocol_), myUsbDevice.getDeviceProtocol());
+		addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.maximum_power_),myUsbDevice.getMaxPower());
+		addDataRow(inflater, tblUsbInfoBottom, getActivity().getString(R.string.serial_number_),myUsbDevice.getSerialNumber());
 		
-		addHeaderRow(inflater, tblUsbInfo, "Interfaces");
+		//addHeaderRow(inflater, tblUsbInfo, "Interfaces");
 		
     }
 
@@ -178,4 +181,15 @@ private void loadLogo(String logo){
     	}
     	return pad+string;
     }
+
+	@Override
+	public String toString() {
+		StringBuilder sb = new StringBuilder();
+		UsefulBits uB = new UsefulBits(getActivity());
+		sb.append(uB.tableToString(tblUsbInfoHeader));
+		sb.append(uB.tableToString(tblUsbInfoTop));
+		sb.append("\n");
+		sb.append(uB.tableToString(tblUsbInfoBottom));
+		return sb.toString();
+	}
 }
diff --git a/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbDevice.java b/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbDevice.java
index c35b950..d0144f8 100644
--- a/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbDevice.java
+++ b/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbDevice.java
@@ -3,10 +3,7 @@ package aws.apps.usbDeviceEnumerator.MyUsb;
 import java.io.Serializable;
 
 public class MyUsbDevice implements Serializable{
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 4917560687401662145L;
+	private static final long serialVersionUID = 5383159744871594658L;
 	
 	private String VID;
 	private String PID;
diff --git a/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbManager.java b/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbManager.java
index 6dc2e2d..a1793b1 100644
--- a/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbManager.java
+++ b/src/aws/apps/usbDeviceEnumerator/MyUsb/MyUsbManager.java
@@ -76,13 +76,13 @@ public class MyUsbManager {
 		}
 	}
 
-	private String pad(String text, int maxsize, String padding){
-		String res = text;
-		while(res.length()<maxsize){
-			res = padding + res;
-		}
-		return res;
-	}
+//	private String pad(String text, int maxsize, String padding){
+//		String res = text;
+//		while(res.length()<maxsize){
+//			res = padding + res;
+//		}
+//		return res;
+//	}
 		
 	public HashMap<String, MyUsbDevice> getUsbDevices(){
 		populateList();
@@ -125,7 +125,7 @@ public class MyUsbManager {
         return res.trim();
 	}
 
-	public static String getUsbInfo(){
+	public static String getUsbInfoViaShell(){
 		String res = (new ExecTerminal()).exec(COMMAND_GET_USB_INFO);
 		
 		res = res.replace(DEVICE_START + "\n" + DEVICE_END + "\n", "");
diff --git a/src/aws/apps/usbDeviceEnumerator/dataAccess/DbAccessCompany.java b/src/aws/apps/usbDeviceEnumerator/dataAccess/DbAccessCompany.java
index 55d5afa..c673a43 100644
--- a/src/aws/apps/usbDeviceEnumerator/dataAccess/DbAccessCompany.java
+++ b/src/aws/apps/usbDeviceEnumerator/dataAccess/DbAccessCompany.java
@@ -35,7 +35,7 @@ public class DbAccessCompany {
 		Cursor cur = executeQuery(  "companies, company_name_spellings", 
 									new String[]{"companies.logo"}, 
 									"company_name_spellings.company_name='" + CompanyNameString + 
-										"' AND company_name_spellings.companyId=companies._id", 
+									"' AND company_name_spellings.companyId=companies._id", 
 									"companies.logo ASC");
 
 		if (cur!= null){
diff --git a/src/aws/apps/usbDeviceEnumerator/dataAccess/ZipAccessCompany.java b/src/aws/apps/usbDeviceEnumerator/dataAccess/ZipAccessCompany.java
index 2113be5..c140236 100644
--- a/src/aws/apps/usbDeviceEnumerator/dataAccess/ZipAccessCompany.java
+++ b/src/aws/apps/usbDeviceEnumerator/dataAccess/ZipAccessCompany.java
@@ -43,8 +43,11 @@ public class ZipAccessCompany {
 
 			while ((ze = zis.getNextEntry()) != null) {
                 if (ze.getName().equals(logo)) {
+                	Log.d(TAG, "^ Found it!");
                 	result = BitmapFactory.decodeStream(zis);
                     break;
+                } else {
+                	
                 }
             } 
 			
diff --git a/src/aws/apps/usbDeviceEnumerator/util/UsefulBits.java b/src/aws/apps/usbDeviceEnumerator/util/UsefulBits.java
index 586cdc0..e57d4da 100644
--- a/src/aws/apps/usbDeviceEnumerator/util/UsefulBits.java
+++ b/src/aws/apps/usbDeviceEnumerator/util/UsefulBits.java
@@ -10,15 +10,28 @@ import java.util.Date;
 
 import android.app.AlertDialog;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.PackageInfo;
 import android.content.res.Resources;
 import android.net.ConnectivityManager;
 import android.util.Log;
 import android.view.Gravity;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
 import android.widget.Toast;
+import aws.apps.usbDeviceEnumerator.R;
 
 public class UsefulBits {
 	final String TAG =  this.getClass().getName();
+	
+	public enum SOFTWARE_INFO{
+		NAME, VERSION, NOTES, CHANGELOG, COPYRIGHT, ACKNOWLEDGEMENTS
+	}
+	
+	
 	private Context c;
 
 	public UsefulBits(Context cntx) {
@@ -57,14 +70,7 @@ public class UsefulBits {
 				return false;
 			}
 	}
-
-	/**
-	 * Gets the software version and version name for this application
-	 */
-	public enum SOFTWARE_INFO{
-		NAME, VERSION, NOTES, CHANGELOG, COPYRIGHT, ACKNOWLEDGEMENTS
-	}
-
+	
 	public String getSoftwareInfo(SOFTWARE_INFO info) {
 		try {
 			PackageInfo pi = c.getPackageManager().getPackageInfo(c.getPackageName(), 0);
@@ -103,6 +109,21 @@ public class UsefulBits {
 		}
 	} 
 
+	public String getAboutDialogueText(){
+		StringBuilder sbText = new StringBuilder();
+		
+		
+		sbText.append(c.getString(R.string.app_changelog));
+		sbText.append("\n\n");
+		sbText.append(c.getString(R.string.app_notes));
+		sbText.append("\n\n");
+		sbText.append(c.getString(R.string.app_acknowledgements));
+		sbText.append("\n\n");
+		sbText.append(c.getString(R.string.app_copyright));
+		
+		return sbText.toString();
+	}
+	
 	public String formatDateTime(String formatString, Date d){
 		Format formatter = new SimpleDateFormat(formatString);
 		return formatter.format(d);
@@ -179,4 +200,46 @@ public class UsefulBits {
 			return false;
 		}
 	}
+	
+	public String tableToString(TableLayout t) {
+		String res = "";
+
+		for (int i=0; i <= t.getChildCount()-1; i++){
+			TableRow row = (TableRow) t.getChildAt(i);
+
+			for (int j=0; j <= row.getChildCount()-1; j++){
+				View v = row.getChildAt(j);
+
+				try {
+					if(v.getClass() == Class.forName("android.widget.TextView")){
+						TextView tmp = (TextView) v;
+						res += tmp.getText();
+
+						if(j==0){res += " ";}
+					} else if(v.getClass() == Class.forName("android.widget.EditText")){
+						EditText tmp = (EditText) v;
+						res += tmp.getText().toString();
+					} else {
+						//do nothing
+					}
+				} catch (Exception e) {
+					res = e.toString();
+					Log.e(TAG, "^ ERROR: tableToString: " + res);
+				}
+			}
+			res +="\n";
+		}
+		return res;
+	}
+	
+	public void share(String subject, String text){
+		Intent intent = new Intent(Intent.ACTION_SEND);
+		
+		intent.setType("text/plain");
+		intent.putExtra(Intent.EXTRA_TEXT, text);
+		intent.putExtra(Intent.EXTRA_SUBJECT, subject);
+		intent.addCategory(Intent.CATEGORY_DEFAULT);
+		Intent share = Intent.createChooser(intent, "Share result via:");
+		c.startActivity(share);		
+	}
 }
