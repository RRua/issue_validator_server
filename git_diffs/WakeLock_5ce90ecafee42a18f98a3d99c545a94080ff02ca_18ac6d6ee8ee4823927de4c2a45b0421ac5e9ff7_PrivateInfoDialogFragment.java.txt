diff --git a/app/src/main/java/com/boardgamegeek/extensions/AlertDialog.kt b/app/src/main/java/com/boardgamegeek/extensions/AlertDialog.kt
index 75c2a6231..6b11ed18e 100644
--- a/app/src/main/java/com/boardgamegeek/extensions/AlertDialog.kt
+++ b/app/src/main/java/com/boardgamegeek/extensions/AlertDialog.kt
@@ -4,7 +4,7 @@ import android.support.v7.app.AlertDialog
 import android.view.View
 import android.view.WindowManager
 
-fun AlertDialog.requestFocus(view: View?) {
+fun AlertDialog.requestFocus(view: View? = null) {
     view?.requestFocus()
     window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE)
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/boardgamegeek/extensions/EditText.kt b/app/src/main/java/com/boardgamegeek/extensions/EditText.kt
index 0cef67ef0..cbac593f3 100644
--- a/app/src/main/java/com/boardgamegeek/extensions/EditText.kt
+++ b/app/src/main/java/com/boardgamegeek/extensions/EditText.kt
@@ -6,3 +6,11 @@ fun EditText.setAndSelectExistingText(existingText: String?) {
     setText(existingText)
     setSelection(0, existingText?.length ?: 0)
 }
+
+fun EditText.getInt(defaultValue: Int = 0): Int {
+    return if (text.isNullOrBlank()) defaultValue else text.trim().toString().toInt()
+}
+
+fun EditText.getDouble(defaultValue: Double = 0.0): Double {
+    return if (text.isNullOrBlank()) defaultValue else text.trim().toString().toDouble()
+}
diff --git a/app/src/main/java/com/boardgamegeek/extensions/Long.kt b/app/src/main/java/com/boardgamegeek/extensions/Long.kt
index 70b3827a2..fc1e3084a 100644
--- a/app/src/main/java/com/boardgamegeek/extensions/Long.kt
+++ b/app/src/main/java/com/boardgamegeek/extensions/Long.kt
@@ -5,6 +5,9 @@ import android.support.annotation.StringRes
 import android.text.format.DateUtils
 import com.boardgamegeek.R
 import com.boardgamegeek.util.PreferencesUtils
+import java.text.DateFormat
+import java.text.SimpleDateFormat
+import java.util.*
 import java.util.concurrent.TimeUnit
 
 fun Long.isOlderThan(duration: Int, timeUnit: TimeUnit) = System.currentTimeMillis() - this > timeUnit.toMillis(duration.toLong())
@@ -28,3 +31,11 @@ fun Long.formatTimestamp(context: Context, isForumTimestamp: Boolean, includeTim
         } else DateUtils.getRelativeTimeSpanString(this, System.currentTimeMillis(), DateUtils.MINUTE_IN_MILLIS, flags)
     }
 }
+
+val FORMAT_API: DateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.US)
+
+fun Long.asDateForApi(): String {
+    val c = Calendar.getInstance()
+    c.timeInMillis = this
+    return FORMAT_API.format(c.time)
+}
diff --git a/app/src/main/java/com/boardgamegeek/extensions/String.kt b/app/src/main/java/com/boardgamegeek/extensions/String.kt
index 19f7789cf..8b1962fbf 100644
--- a/app/src/main/java/com/boardgamegeek/extensions/String.kt
+++ b/app/src/main/java/com/boardgamegeek/extensions/String.kt
@@ -6,6 +6,7 @@ import com.boardgamegeek.R
 import com.boardgamegeek.io.BggService
 import timber.log.Timber
 import java.text.DateFormat
+import java.util.*
 
 fun String?.replaceHtmlLineFeeds(): String {
     return if (this == null || isBlank()) "" else replace("&#10;", "\n")
@@ -63,6 +64,24 @@ fun String.toMillis(format: DateFormat): Long {
     }
 }
 
+/**
+ * Converts an API date (<code>yyyy-mm-dd</code>) to millis
+ */
+fun String?.toMillisFromApiDate(defaultMillis: Long = 0L): Long {
+    if (this == null) return defaultMillis
+    if (isBlank()) return defaultMillis
+    val parts = split("-".toRegex()).toTypedArray()
+    if (parts.size != 3) return defaultMillis
+    val calendar = Calendar.getInstance()
+    try {
+        calendar.set(parts[0].toInt(), parts[1].toInt() - 1, parts[2].toInt())
+    } catch (e: Exception) {
+        Timber.w(e, "Couldn't get a date from the API: %s", this)
+    }
+
+    return calendar.timeInMillis
+}
+
 fun String?.asCurrency(): String {
     return when (this) {
         null, "USD", "CAD", "AUD" -> "$"
diff --git a/app/src/main/java/com/boardgamegeek/service/SyncPlays.kt b/app/src/main/java/com/boardgamegeek/service/SyncPlays.kt
index d26bd9b94..77216ff2e 100644
--- a/app/src/main/java/com/boardgamegeek/service/SyncPlays.kt
+++ b/app/src/main/java/com/boardgamegeek/service/SyncPlays.kt
@@ -4,6 +4,7 @@ import android.accounts.Account
 import android.content.SyncResult
 import com.boardgamegeek.BggApplication
 import com.boardgamegeek.R
+import com.boardgamegeek.extensions.asDateForApi
 import com.boardgamegeek.io.BggService
 import com.boardgamegeek.io.model.PlaysResponse
 import com.boardgamegeek.mappers.PlayMapper
@@ -12,7 +13,10 @@ import com.boardgamegeek.model.persister.PlayPersister
 import com.boardgamegeek.pref.SyncPrefs
 import com.boardgamegeek.provider.BggContract.Plays
 import com.boardgamegeek.tasks.CalculatePlayStatsTask
-import com.boardgamegeek.util.*
+import com.boardgamegeek.util.PreferencesUtils
+import com.boardgamegeek.util.RemoteConfig
+import com.boardgamegeek.util.SelectionBuilder
+import com.boardgamegeek.util.TaskUtils
 import retrofit2.Response
 import timber.log.Timber
 
@@ -43,7 +47,7 @@ class SyncPlays(application: BggApplication, service: BggService, syncResult: Sy
                     return
                 }
             } else {
-                val date = DateTimeUtils.formatDateForApi(newestSyncDate)
+                val date = newestSyncDate.asDateForApi()
                 if (executeCall(account.name, date, null)) {
                     cancel()
                     return
@@ -53,7 +57,7 @@ class SyncPlays(application: BggApplication, service: BggService, syncResult: Sy
 
             val oldestDate = SyncPrefs.getPlaysOldestTimestamp(context)
             if (oldestDate > 0) {
-                val date = DateTimeUtils.formatDateForApi(oldestDate)
+                val date = oldestDate.asDateForApi()
                 if (executeCall(account.name, null, date)) {
                     cancel()
                     return
@@ -148,7 +152,7 @@ class SyncPlays(application: BggApplication, service: BggService, syncResult: Sy
                 SelectionBuilder.whereZeroOrNull(Plays.UPDATE_TIMESTAMP) + " AND " +
                 SelectionBuilder.whereZeroOrNull(Plays.DELETE_TIMESTAMP) + " AND " +
                 SelectionBuilder.whereZeroOrNull(Plays.DIRTY_TIMESTAMP),
-                arrayOf(startTime.toString(), DateTimeUtils.formatDateForApi(time)))
+                arrayOf(startTime.toString(), time.asDateForApi()))
     }
 
     private fun deletePlays(selection: String, selectionArgs: Array<String>) {
diff --git a/app/src/main/java/com/boardgamegeek/ui/GameCollectionItemFragment.java b/app/src/main/java/com/boardgamegeek/ui/GameCollectionItemFragment.java
index a85aacaa5..597b2d2dc 100644
--- a/app/src/main/java/com/boardgamegeek/ui/GameCollectionItemFragment.java
+++ b/app/src/main/java/com/boardgamegeek/ui/GameCollectionItemFragment.java
@@ -171,7 +171,6 @@ public class GameCollectionItemFragment extends Fragment implements LoaderCallba
 		R.id.for_trade,
 		R.id.wishlist
 	}) List<CheckBox> statusViews;
-	private PrivateInfoDialogFragment privateInfoDialogFragment;
 
 	private int gameId = BggContract.INVALID_ID;
 	private int collectionId = BggContract.INVALID_ID;
@@ -381,7 +380,7 @@ public class GameCollectionItemFragment extends Fragment implements LoaderCallba
 		if (colorizedHeaders == null || textEditorViews == null) return;
 		Palette.Swatch swatch = PaletteUtils.getHeaderSwatch(palette);
 		ButterKnife.apply(colorizedHeaders, PaletteUtils.getRgbTextViewSetter(), swatch.getRgb());
-		for (TextEditorView textEditorView: textEditorViews) {
+		for (TextEditorView textEditorView : textEditorViews) {
 			textEditorView.setHeaderColor(swatch);
 		}
 	}
@@ -490,16 +489,30 @@ public class GameCollectionItemFragment extends Fragment implements LoaderCallba
 	@DebugLog
 	@OnClick(R.id.private_info_edit_container)
 	public void onPrivateInfoClick() {
-		ensurePrivateInfoDialogFragment();
-		privateInfoDialogFragment.setPriceCurrency(String.valueOf(editPrivateInfoView.getTag(R.id.price_currency)));
-		privateInfoDialogFragment.setPrice(getDoubleFromTag(editPrivateInfoView, R.id.price));
-		privateInfoDialogFragment.setCurrentValueCurrency(String.valueOf(editPrivateInfoView.getTag(R.id.current_value_currency)));
-		privateInfoDialogFragment.setCurrentValue(getDoubleFromTag(editPrivateInfoView, R.id.current_value));
-		privateInfoDialogFragment.setQuantity(getIntFromTag(editPrivateInfoView, R.id.quantity));
-		privateInfoDialogFragment.setAcquisitionDate(String.valueOf(editPrivateInfoView.getTag(R.id.acquisition_date)));
-		privateInfoDialogFragment.setAcquiredFrom(String.valueOf(editPrivateInfoView.getTag(R.id.acquired_from)));
-		privateInfoDialogFragment.setInventoryLocation(String.valueOf(editPrivateInfoView.getTag(R.id.inventory_location)));
-		DialogUtils.showFragment(getActivity(), privateInfoDialogFragment, "private_info_dialog");
+		PrivateInfoDialogFragment privateInfoDialogFragment = PrivateInfoDialogFragment.newInstance(
+			privateInfoEditContainer,
+			new PrivateInfoDialogListener() {
+				@Override
+				public void onFinishEditDialog(@NonNull PrivateInfo privateInfo) {
+					UpdateCollectionItemPrivateInfoTask task =
+						new UpdateCollectionItemPrivateInfoTask(getContext(), gameId, collectionId, internalId, privateInfo);
+					TaskUtils.executeAsyncTask(task);
+				}
+			}
+		);
+
+		privateInfoDialogFragment.setPrivateInfo(new PrivateInfo(
+			String.valueOf(editPrivateInfoView.getTag(R.id.priceCurrencyView)),
+			getDoubleFromTag(editPrivateInfoView, R.id.priceView),
+			String.valueOf(editPrivateInfoView.getTag(R.id.currentValueCurrencyView)),
+			getDoubleFromTag(editPrivateInfoView, R.id.currentValueView),
+			getIntFromTag(editPrivateInfoView, R.id.quantityView),
+			String.valueOf(editPrivateInfoView.getTag(R.id.acquisitionDateView)),
+			String.valueOf(editPrivateInfoView.getTag(R.id.acquiredFromView)),
+			String.valueOf(editPrivateInfoView.getTag(R.id.inventoryLocationView))
+		));
+
+		DialogUtils.showAndSurvive(this, privateInfoDialogFragment);
 	}
 
 	private double getDoubleFromTag(View textView, @IdRes int key) {
@@ -514,23 +527,6 @@ public class GameCollectionItemFragment extends Fragment implements LoaderCallba
 		return (int) tag;
 	}
 
-	@DebugLog
-	private void ensurePrivateInfoDialogFragment() {
-		if (privateInfoDialogFragment == null) {
-			privateInfoDialogFragment = PrivateInfoDialogFragment.newInstance(
-				privateInfoEditContainer,
-				new PrivateInfoDialogListener() {
-					@Override
-					public void onFinishEditDialog(PrivateInfo privateInfo) {
-						UpdateCollectionItemPrivateInfoTask task =
-							new UpdateCollectionItemPrivateInfoTask(getContext(), gameId, collectionId, internalId, privateInfo);
-						TaskUtils.executeAsyncTask(task);
-					}
-				}
-			);
-		}
-	}
-
 	@DebugLog
 	public boolean triggerRefresh() {
 		mightNeedRefreshing = false;
@@ -631,14 +627,14 @@ public class GameCollectionItemFragment extends Fragment implements LoaderCallba
 		privateInfoHintView.setVisibility(hasPrivateInfo(item) ? View.GONE : View.VISIBLE);
 		editPrivateInfoView.setVisibility(hasPrivateInfo(item) ? View.VISIBLE : View.GONE);
 		editPrivateInfoView.setText(getPrivateInfo(item));
-		editPrivateInfoView.setTag(R.id.price_currency, item.getPriceCurrency());
-		editPrivateInfoView.setTag(R.id.price, item.getPrice());
-		editPrivateInfoView.setTag(R.id.current_value_currency, item.getCurrentValueCurrency());
-		editPrivateInfoView.setTag(R.id.current_value, item.getCurrentValue());
-		editPrivateInfoView.setTag(R.id.quantity, item.getQuantity());
-		editPrivateInfoView.setTag(R.id.acquisition_date, item.getAcquisitionDate());
-		editPrivateInfoView.setTag(R.id.acquired_from, item.getAcquiredFrom());
-		editPrivateInfoView.setTag(R.id.inventory_location, item.getInventoryLocation());
+		editPrivateInfoView.setTag(R.id.priceCurrencyView, item.getPriceCurrency());
+		editPrivateInfoView.setTag(R.id.priceView, item.getPrice());
+		editPrivateInfoView.setTag(R.id.currentValueCurrencyView, item.getCurrentValueCurrency());
+		editPrivateInfoView.setTag(R.id.currentValueView, item.getCurrentValue());
+		editPrivateInfoView.setTag(R.id.quantityView, item.getQuantity());
+		editPrivateInfoView.setTag(R.id.acquisitionDateView, item.getAcquisitionDate());
+		editPrivateInfoView.setTag(R.id.acquiredFromView, item.getAcquiredFrom());
+		editPrivateInfoView.setTag(R.id.inventoryLocationView, item.getInventoryLocation());
 
 		// both
 		privateInfoCommentView.setContent(item.getPrivateComment(), item.getPrivateInfoTimestamp());
diff --git a/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.java b/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.java
deleted file mode 100644
index 776526965..000000000
--- a/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.java
+++ /dev/null
@@ -1,243 +0,0 @@
-package com.boardgamegeek.ui.dialog;
-
-import android.app.DatePickerDialog.OnDateSetListener;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v7.app.AlertDialog;
-import android.text.TextUtils;
-import android.text.format.DateUtils;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
-import android.widget.DatePicker;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-
-import com.boardgamegeek.R;
-import com.boardgamegeek.provider.BggContract.Collection;
-import com.boardgamegeek.ui.adapter.AutoCompleteAdapter;
-import com.boardgamegeek.ui.model.PrivateInfo;
-import com.boardgamegeek.ui.widget.DatePickerDialogFragment;
-import com.boardgamegeek.ui.widget.TextInputAutoCompleteTextView;
-import com.boardgamegeek.util.DateTimeUtils;
-import com.boardgamegeek.util.DialogUtils;
-import com.boardgamegeek.util.PresentationUtils;
-import com.boardgamegeek.util.StringUtils;
-
-import java.text.DecimalFormat;
-import java.util.Calendar;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import butterknife.OnClick;
-import hugo.weaving.DebugLog;
-import icepick.Icepick;
-import icepick.State;
-
-public class PrivateInfoDialogFragment extends DialogFragment {
-	private static final DecimalFormat CURRENCY_FORMAT = new DecimalFormat("0.00");
-	private static final String DATE_PICKER_DIALOG_TAG = "DATE_PICKER_DIALOG";
-
-	public interface PrivateInfoDialogListener {
-		void onFinishEditDialog(PrivateInfo privateInfo);
-	}
-
-	private ViewGroup root;
-	private PrivateInfoDialogListener listener;
-	@BindView(R.id.price_currency) Spinner priceCurrencyView;
-	@BindView(R.id.price) EditText priceView;
-	@BindView(R.id.current_value_currency) Spinner currentValueCurrencyView;
-	@BindView(R.id.current_value) EditText currentValueView;
-	@BindView(R.id.quantity) EditText quantityView;
-	@BindView(R.id.acquisition_date_label) TextView acquisitionDateLabelView;
-	@BindView(R.id.acquisition_date) TextView acquisitionDateView;
-	@BindView(R.id.acquired_from) TextInputAutoCompleteTextView acquiredFromView;
-	@BindView(R.id.inventory_location) TextInputAutoCompleteTextView inventoryLocationView;
-
-	private AutoCompleteAdapter acquiredFromAdapter;
-	private AutoCompleteAdapter inventoryLocationAdapter;
-
-	@State String priceCurrency;
-	@State double price;
-	@State String currentValueCurrency;
-	@State double currentValue;
-	@State String quantity;
-	@State String acquisitionDate;
-	@State String acquiredFrom;
-	@State String inventoryLocation;
-
-	@NonNull
-	public static PrivateInfoDialogFragment newInstance(@Nullable ViewGroup root, PrivateInfoDialogListener listener) {
-		PrivateInfoDialogFragment fragment = new PrivateInfoDialogFragment();
-		fragment.initialize(root, listener);
-		return fragment;
-	}
-
-	private void initialize(@Nullable ViewGroup root, PrivateInfoDialogListener listener) {
-		this.root = root;
-		this.listener = listener;
-	}
-
-	@Override
-	@NonNull
-	public Dialog onCreateDialog(Bundle savedInstanceState) {
-		LayoutInflater layoutInflater = LayoutInflater.from(getActivity());
-		View rootView = layoutInflater.inflate(R.layout.dialog_private_info, root, false);
-		ButterKnife.bind(this, rootView);
-
-		Icepick.restoreInstanceState(this, savedInstanceState);
-		populateUi();
-
-		AlertDialog.Builder builder = new AlertDialog.Builder(getContext(), R.style.Theme_bgglight_Dialog_Alert);
-		builder.setTitle(R.string.title_private_info);
-		builder.setView(rootView)
-			.setNegativeButton(R.string.cancel, null)
-			.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
-				@Override
-				public void onClick(DialogInterface dialog, int which) {
-					if (listener != null) {
-						PrivateInfo privateInfo = new PrivateInfo(
-							priceCurrencyView.getSelectedItem().toString(),
-							StringUtils.parseDouble(priceView.getText().toString().trim()),
-							currentValueCurrencyView.getSelectedItem().toString(),
-							StringUtils.parseDouble(currentValueView.getText().toString().trim()),
-							StringUtils.parseInt(quantityView.getText().toString().trim(), 1),
-							acquisitionDate,
-							acquiredFromView.getText().toString().trim(),
-							inventoryLocationView.getText().toString().trim());
-						listener.onFinishEditDialog(privateInfo);
-					}
-				}
-			});
-
-		final AlertDialog dialog = builder.create();
-		DialogUtils.requestFocus(dialog);
-		return dialog;
-	}
-
-	@Override
-	public void onResume() {
-		super.onResume();
-
-		acquiredFromAdapter = new AutoCompleteAdapter(getContext(), Collection.PRIVATE_INFO_ACQUIRED_FROM, Collection.buildAcquiredFromUri());
-		acquiredFromView.setAdapter(acquiredFromAdapter);
-
-		inventoryLocationAdapter = new AutoCompleteAdapter(getContext(), Collection.PRIVATE_INFO_INVENTORY_LOCATION, Collection.buildInventoryLocationUri());
-		inventoryLocationView.setAdapter(inventoryLocationAdapter);
-	}
-
-	@Override
-	public void onPause() {
-		super.onPause();
-		if (acquiredFromAdapter != null) acquiredFromAdapter.changeCursor(null);
-		if (inventoryLocationAdapter != null) inventoryLocationAdapter.changeCursor(null);
-	}
-
-	@Override
-	public void onSaveInstanceState(Bundle outState) {
-		super.onSaveInstanceState(outState);
-		Icepick.saveInstanceState(this, outState);
-	}
-
-	private void populateUi() {
-		setUpCurrencyView(priceCurrencyView, priceCurrency);
-		setUpValue(priceView, price);
-		setUpCurrencyView(currentValueCurrencyView, currentValueCurrency);
-		setUpValue(currentValueView, currentValue);
-		PresentationUtils.setAndSelectExistingText(quantityView, quantity);
-		showOrHideAcquisitionDateLabel();
-		acquisitionDateView.setText(DateTimeUtils.formatDateFromApi(getContext(), acquisitionDate));
-		PresentationUtils.setAndSelectExistingText(acquiredFromView, acquiredFrom);
-		PresentationUtils.setAndSelectExistingText(inventoryLocationView, inventoryLocation);
-	}
-
-	private void setUpCurrencyView(Spinner spinner, String item) {
-		ArrayAdapter<CharSequence> priceCurrencyAdapter = ArrayAdapter.createFromResource(getContext(), R.array.currency, android.R.layout.simple_spinner_item);
-		priceCurrencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-		spinner.setAdapter(priceCurrencyAdapter);
-		spinner.setSelection(priceCurrencyAdapter.getPosition(item));
-	}
-
-	private void setUpValue(EditText editText, double value) {
-		if (value == 0.0) {
-			editText.setText("");
-		} else {
-			PresentationUtils.setAndSelectExistingText(editText, CURRENCY_FORMAT.format(value));
-		}
-	}
-
-	private void showOrHideAcquisitionDateLabel() {
-		acquisitionDateLabelView.setVisibility(TextUtils.isEmpty(acquisitionDate) ? View.INVISIBLE : View.VISIBLE);
-	}
-
-	@DebugLog
-	@OnClick(R.id.acquisition_date)
-	public void onDateClick() {
-		final FragmentManager fragmentManager = getFragmentManager();
-		if (fragmentManager == null) return;
-		DatePickerDialogFragment datePickerDialogFragment = (DatePickerDialogFragment) fragmentManager.findFragmentByTag(DATE_PICKER_DIALOG_TAG);
-		if (datePickerDialogFragment == null) {
-			datePickerDialogFragment = new DatePickerDialogFragment();
-			datePickerDialogFragment.setOnDateSetListener(new OnDateSetListener() {
-				@Override
-				public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
-					acquisitionDate = DateTimeUtils.formatDateForApi(year, monthOfYear, dayOfMonth);
-					Calendar calendar = Calendar.getInstance();
-					calendar.set(year, monthOfYear, dayOfMonth);
-					acquisitionDateView.setText(DateUtils.formatDateTime(getContext(), calendar.getTimeInMillis(), DateUtils.FORMAT_SHOW_DATE));
-					showOrHideAcquisitionDateLabel();
-				}
-			});
-		}
-		fragmentManager.executePendingTransactions();
-		datePickerDialogFragment.setCurrentDateInMillis(DateTimeUtils.getMillisFromApiDate(acquisitionDate, System.currentTimeMillis()));
-		datePickerDialogFragment.show(fragmentManager, DATE_PICKER_DIALOG_TAG);
-	}
-
-	@DebugLog
-	@OnClick(R.id.clear_date)
-	public void onClearDateClick() {
-		acquisitionDate = "";
-		acquisitionDateView.setText("");
-		showOrHideAcquisitionDateLabel();
-	}
-
-	public void setPriceCurrency(String priceCurrency) {
-		this.priceCurrency = priceCurrency;
-	}
-
-	public void setPrice(double price) {
-		this.price = price;
-	}
-
-	public void setCurrentValueCurrency(String currentValueCurrency) {
-		this.currentValueCurrency = currentValueCurrency;
-	}
-
-	public void setCurrentValue(double currentValue) {
-		this.currentValue = currentValue;
-	}
-
-	public void setQuantity(int quantity) {
-		this.quantity = String.valueOf(quantity);
-	}
-
-	public void setAcquisitionDate(String acquisitionDate) {
-		this.acquisitionDate = acquisitionDate;
-	}
-
-	public void setAcquiredFrom(String acquiredFrom) {
-		this.acquiredFrom = acquiredFrom;
-	}
-
-	public void setInventoryLocation(String inventoryLocation) {
-		this.inventoryLocation = inventoryLocation;
-	}
-}
diff --git a/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.kt b/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.kt
new file mode 100644
index 000000000..b5d4f395e
--- /dev/null
+++ b/app/src/main/java/com/boardgamegeek/ui/dialog/PrivateInfoDialogFragment.kt
@@ -0,0 +1,203 @@
+package com.boardgamegeek.ui.dialog
+
+import android.app.DatePickerDialog.OnDateSetListener
+import android.app.Dialog
+import android.os.Bundle
+import android.support.v4.app.DialogFragment
+import android.support.v7.app.AlertDialog
+import android.text.format.DateUtils
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ArrayAdapter
+import android.widget.EditText
+import android.widget.Spinner
+import com.boardgamegeek.R
+import com.boardgamegeek.extensions.*
+import com.boardgamegeek.provider.BggContract.Collection
+import com.boardgamegeek.ui.adapter.AutoCompleteAdapter
+import com.boardgamegeek.ui.model.PrivateInfo
+import com.boardgamegeek.ui.widget.DatePickerDialogFragment
+import kotlinx.android.synthetic.main.dialog_private_info.*
+import org.jetbrains.anko.support.v4.ctx
+import java.text.DecimalFormat
+import java.util.*
+
+class PrivateInfoDialogFragment : DialogFragment() {
+    var privateInfo = PrivateInfo()
+
+    interface PrivateInfoDialogListener {
+        fun onFinishEditDialog(privateInfo: PrivateInfo)
+    }
+
+    private lateinit var layout: View
+    private var root: ViewGroup? = null
+    private var listener: PrivateInfoDialogListener? = null
+    private var acquisitionDate = ""
+
+    private val acquiredFromAdapter: AutoCompleteAdapter by lazy {
+        AutoCompleteAdapter(ctx, Collection.PRIVATE_INFO_ACQUIRED_FROM, Collection.buildAcquiredFromUri())
+    }
+
+    private val inventoryLocationAdapter: AutoCompleteAdapter by lazy {
+        AutoCompleteAdapter(ctx, Collection.PRIVATE_INFO_INVENTORY_LOCATION, Collection.buildInventoryLocationUri())
+    }
+
+    private fun initialize(root: ViewGroup?, listener: PrivateInfoDialogListener) {
+        this.root = root
+        this.listener = listener
+    }
+
+    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {
+        layout = LayoutInflater.from(ctx).inflate(R.layout.dialog_private_info, root, false)
+        return AlertDialog.Builder(ctx, R.style.Theme_bgglight_Dialog_Alert)
+                .setTitle(R.string.title_private_info)
+                .setView(layout)
+                .setNegativeButton(R.string.cancel, null)
+                .setPositiveButton(R.string.ok) { _, _ ->
+                    if (listener != null) {
+                        val privateInfo = captureForm()
+                        listener?.onFinishEditDialog(privateInfo)
+                    }
+                }
+                .create().apply {
+                    requestFocus()
+                }
+    }
+
+    private fun captureForm(): PrivateInfo {
+        return PrivateInfo(
+                priceCurrencyView.selectedItem.toString(),
+                priceView.getDouble(),
+                currentValueCurrencyView.selectedItem.toString(),
+                currentValueView.getDouble(),
+                quantityView.getInt(),
+                acquisitionDate,
+                acquiredFromView.text.trim().toString(),
+                inventoryLocationView.text.trim().toString())
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        return layout
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        if (savedInstanceState != null) {
+            privateInfo = PrivateInfo(
+                    savedInstanceState.getString(KEY_PRICE_CURRENCY),
+                    savedInstanceState.getDouble(KEY_PRICE),
+                    savedInstanceState.getString(KEY_CURRENT_VALUE_CURRENCY),
+                    savedInstanceState.getDouble(KEY_CURRENT_VALUE),
+                    savedInstanceState.getInt(KEY_QUANTITY),
+                    savedInstanceState.getString(KEY_ACQUISITION_DATE),
+                    savedInstanceState.getString(KEY_ACQUIRED_FROM),
+                    savedInstanceState.getString(KEY_INVENTORY_LOCATION)
+            )
+        }
+
+        setUpCurrencyView(priceCurrencyView, privateInfo.priceCurrency)
+        setUpValue(priceView, privateInfo.price)
+        setUpCurrencyView(currentValueCurrencyView, privateInfo.currentValueCurrency)
+        setUpValue(currentValueView, privateInfo.currentValue)
+        quantityView.setAndSelectExistingText(privateInfo.quantity.toString())
+        acquisitionDate = privateInfo.acquisitionDate ?: ""
+        acquisitionDateView.text = formatDateFromApi(privateInfo.acquisitionDate)
+        showOrHideAcquisitionDateLabel()
+        acquiredFromView.setAndSelectExistingText(privateInfo.acquiredFrom)
+        inventoryLocationView.setAndSelectExistingText(privateInfo.inventoryLocation)
+
+        acquisitionDateView.setOnClickListener {
+            val datePickerDialogFragment = createDatePickerDialogFragment()
+            fragmentManager?.executePendingTransactions()
+            datePickerDialogFragment.setOnDateSetListener(OnDateSetListener { _, year, monthOfYear, dayOfMonth ->
+                val calendar = Calendar.getInstance()
+                calendar.set(year, monthOfYear, dayOfMonth)
+                acquisitionDateView.text = DateUtils.formatDateTime(context, calendar.timeInMillis, DateUtils.FORMAT_SHOW_DATE)
+                acquisitionDate = calendar.timeInMillis.asDateForApi()
+                showOrHideAcquisitionDateLabel()
+            })
+            datePickerDialogFragment.setCurrentDateInMillis(privateInfo.acquisitionDate.toMillisFromApiDate(System.currentTimeMillis()))
+            datePickerDialogFragment.show(fragmentManager, DATE_PICKER_DIALOG_TAG)
+        }
+
+
+        clearDateView.setOnClickListener {
+            acquisitionDate = ""
+            acquisitionDateView.text = ""
+            showOrHideAcquisitionDateLabel()
+        }
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        super.onSaveInstanceState(outState)
+        captureForm().apply {
+            outState.putString(KEY_PRICE_CURRENCY, priceCurrency)
+            outState.putDouble(KEY_PRICE, price)
+            outState.putString(KEY_CURRENT_VALUE_CURRENCY, currentValueCurrency)
+            outState.putDouble(KEY_CURRENT_VALUE, currentValue)
+            outState.putInt(KEY_QUANTITY, quantity)
+            outState.putString(KEY_ACQUISITION_DATE, acquisitionDate)
+            outState.putString(KEY_ACQUIRED_FROM, acquiredFrom)
+            outState.putString(KEY_INVENTORY_LOCATION, inventoryLocation)
+        }
+    }
+
+    private fun formatDateFromApi(date: String?): String {
+        val millis = date.toMillisFromApiDate()
+        return if (millis == 0L) "" else DateUtils.formatDateTime(ctx, millis, DateUtils.FORMAT_SHOW_DATE)
+    }
+
+    private fun createDatePickerDialogFragment(): DatePickerDialogFragment {
+        return fragmentManager?.findFragmentByTag(DATE_PICKER_DIALOG_TAG) as DatePickerDialogFragment?
+                ?: DatePickerDialogFragment()
+    }
+
+    override fun onResume() {
+        super.onResume()
+        acquiredFromView.setAdapter<AutoCompleteAdapter>(acquiredFromAdapter)
+        inventoryLocationView.setAdapter<AutoCompleteAdapter>(inventoryLocationAdapter)
+    }
+
+    override fun onPause() {
+        super.onPause()
+        acquiredFromAdapter.changeCursor(null)
+        inventoryLocationAdapter.changeCursor(null)
+    }
+
+    private fun setUpCurrencyView(spinner: Spinner, item: String?) {
+        val priceCurrencyAdapter = ArrayAdapter.createFromResource(ctx, R.array.currency, android.R.layout.simple_spinner_item)
+        priceCurrencyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
+        spinner.adapter = priceCurrencyAdapter
+        spinner.setSelection(priceCurrencyAdapter.getPosition(item))
+    }
+
+    private fun setUpValue(editText: EditText, value: Double) {
+        editText.setAndSelectExistingText(if (value == 0.0) "" else CURRENCY_FORMAT.format(value))
+    }
+
+    private fun showOrHideAcquisitionDateLabel() {
+        acquisitionDateLabelView.visibility = if (acquisitionDateView.text.isEmpty()) View.INVISIBLE else View.VISIBLE
+    }
+
+    companion object {
+        private val CURRENCY_FORMAT = DecimalFormat("0.00")
+        private const val DATE_PICKER_DIALOG_TAG = "DATE_PICKER_DIALOG"
+        private const val KEY_PRICE_CURRENCY = "PRICE_CURRENCY"
+        private const val KEY_PRICE = "PRICE"
+        private const val KEY_CURRENT_VALUE_CURRENCY = "CURRENT_VALUE_CURRENCY"
+        private const val KEY_CURRENT_VALUE = "ACQUISITION_DATE"
+        private const val KEY_QUANTITY = "QUANTITY"
+        private const val KEY_ACQUISITION_DATE = "ACQUISITION_DATE"
+        private const val KEY_ACQUIRED_FROM = "ACQUIRED_FROM"
+        private const val KEY_INVENTORY_LOCATION = "INVENTORY_LOCATION"
+
+        @JvmStatic
+        fun newInstance(root: ViewGroup?, listener: PrivateInfoDialogListener): PrivateInfoDialogFragment {
+            val fragment = PrivateInfoDialogFragment()
+            fragment.initialize(root, listener)
+            return fragment
+        }
+    }
+}
diff --git a/app/src/main/java/com/boardgamegeek/ui/model/PrivateInfo.kt b/app/src/main/java/com/boardgamegeek/ui/model/PrivateInfo.kt
index 8b034420c..6724e0d50 100644
--- a/app/src/main/java/com/boardgamegeek/ui/model/PrivateInfo.kt
+++ b/app/src/main/java/com/boardgamegeek/ui/model/PrivateInfo.kt
@@ -2,9 +2,9 @@ package com.boardgamegeek.ui.model
 
 data class PrivateInfo(
         val priceCurrency: String? = null,
-        val price: Double = 0.toDouble(),
+        val price: Double = 0.0,
         val currentValueCurrency: String? = null,
-        val currentValue: Double = 0.toDouble(),
+        val currentValue: Double = 0.0,
         val quantity: Int = 1,
         val acquisitionDate: String? = null,
         val acquiredFrom: String? = null,
diff --git a/app/src/main/java/com/boardgamegeek/ui/widget/DatePickerDialogFragment.kt b/app/src/main/java/com/boardgamegeek/ui/widget/DatePickerDialogFragment.kt
index 55da5586f..95db3051e 100644
--- a/app/src/main/java/com/boardgamegeek/ui/widget/DatePickerDialogFragment.kt
+++ b/app/src/main/java/com/boardgamegeek/ui/widget/DatePickerDialogFragment.kt
@@ -22,7 +22,7 @@ class DatePickerDialogFragment : DialogFragment() {
                 calendar.get(Calendar.DAY_OF_MONTH))
     }
 
-    fun setOnDateSetListener(listener: DatePickerDialog.OnDateSetListener) {
+    fun setOnDateSetListener(listener: OnDateSetListener) {
         this.listener = listener
     }
 
diff --git a/app/src/main/java/com/boardgamegeek/util/DateTimeUtils.java b/app/src/main/java/com/boardgamegeek/util/DateTimeUtils.java
index a6ade7331..87c58d9af 100644
--- a/app/src/main/java/com/boardgamegeek/util/DateTimeUtils.java
+++ b/app/src/main/java/com/boardgamegeek/util/DateTimeUtils.java
@@ -95,14 +95,6 @@ public class DateTimeUtils {
 		return String.format("%04d", year) + "-" + String.format("%02d", month + 1) + "-" + String.format("%02d", day);
 	}
 
-	public static String formatDateFromApi(Context context, String date) {
-		long millis = getMillisFromApiDate(date, Long.MAX_VALUE);
-		if (millis == Long.MAX_VALUE) {
-			return "";
-		}
-		return DateUtils.formatDateTime(context, millis, DateUtils.FORMAT_SHOW_DATE);
-	}
-
 	public static long getMillisFromApiDate(String date, long defaultMillis) {
 		if (TextUtils.isEmpty(date)) {
 			return defaultMillis;
diff --git a/app/src/main/java/com/boardgamegeek/util/DialogUtils.java b/app/src/main/java/com/boardgamegeek/util/DialogUtils.java
index 00b2aba49..75a719901 100644
--- a/app/src/main/java/com/boardgamegeek/util/DialogUtils.java
+++ b/app/src/main/java/com/boardgamegeek/util/DialogUtils.java
@@ -97,10 +97,6 @@ public class DialogUtils {
 		fragment.show(ft, tag);
 	}
 
-	public static void requestFocus(@NonNull AlertDialog dialog) {
-		requestFocus(dialog, null);
-	}
-
 	public static void requestFocus(@NonNull AlertDialog dialog, View view) {
 		if (view != null) view.requestFocus();
 		Window window = dialog.getWindow();
