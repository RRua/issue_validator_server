diff --git a/app/src/main/java/com/sdex/activityrunner/ApplicationListViewModel.java b/app/src/main/java/com/sdex/activityrunner/ApplicationListViewModel.java
index 580a1fb..9835f2f 100644
--- a/app/src/main/java/com/sdex/activityrunner/ApplicationListViewModel.java
+++ b/app/src/main/java/com/sdex/activityrunner/ApplicationListViewModel.java
@@ -9,7 +9,7 @@ import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 
 import com.sdex.activityrunner.db.AppDatabase;
-import com.sdex.activityrunner.db.application.ItemModel;
+import com.sdex.activityrunner.db.application.ApplicationModel;
 import com.sdex.activityrunner.db.query.GetApplicationsQuery;
 import com.sdex.activityrunner.preferences.SortingPreferences;
 
@@ -28,14 +28,14 @@ public class ApplicationListViewModel extends AndroidViewModel {
     sortingPreferences = new SortingPreferences(sharedPreferences);
   }
 
-  public LiveData<List<ItemModel>> getItems(String searchText) {
+  public LiveData<List<ApplicationModel>> getItems(String searchText) {
     GetApplicationsQuery query =
       new GetApplicationsQuery(searchText, sortingPreferences);
     return appDatabase.getApplicationModelDao()
       .getApplicationModels(new SimpleSQLiteQuery(query.toString()));
   }
 
-  public LiveData<List<ItemModel>> getItems() {
+  public LiveData<List<ApplicationModel>> getItems() {
     return getItems(null);
   }
 }
diff --git a/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter.java b/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter.java
index bba74dd..d492468 100644
--- a/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter.java
+++ b/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter.java
@@ -73,8 +73,6 @@ public class ApplicationsListAdapter extends BaseExpandableListAdapter {
 
     View view = inflater.inflate(R.layout.item_activity, parent, false);
 
-    View divider = view.findViewById(R.id.divider);
-
     TextView text1 = view.findViewById(android.R.id.text1);
     text1.setText(activityModel.getName());
 
@@ -95,12 +93,6 @@ public class ApplicationsListAdapter extends BaseExpandableListAdapter {
         .fitCenter())
       .into(icon);
 
-    if (isLastChild) {
-      divider.setVisibility(View.GONE);
-    } else {
-      divider.setVisibility(View.VISIBLE);
-    }
-
     return view;
   }
 
@@ -146,7 +138,7 @@ public class ApplicationsListAdapter extends BaseExpandableListAdapter {
 
     view.findViewById(R.id.app_menu).setOnClickListener(v -> {
       PopupMenu popup = new PopupMenu(context, v);
-      popup.inflate(R.menu.app_menu);
+      popup.inflate(R.menu.application_item_menu);
       popup.show();
       popup.setOnMenuItemClickListener(item -> {
         final String packageName = applicationModel.getPackageName();
diff --git a/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter2.java b/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter2.java
new file mode 100644
index 0000000..1c230ec
--- /dev/null
+++ b/app/src/main/java/com/sdex/activityrunner/ApplicationsListAdapter2.java
@@ -0,0 +1,110 @@
+package com.sdex.activityrunner;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.v7.recyclerview.extensions.ListAdapter;
+import android.support.v7.util.DiffUtil;
+import android.support.v7.widget.PopupMenu;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.request.RequestOptions;
+import com.sdex.activityrunner.app.ActivitiesListActivity;
+import com.sdex.activityrunner.db.application.ApplicationModel;
+import com.sdex.activityrunner.manifest.ManifestViewerActivity;
+import com.sdex.activityrunner.util.GlideApp;
+import com.sdex.activityrunner.util.IntentUtils;
+
+public class ApplicationsListAdapter2 extends ListAdapter<ApplicationModel,
+  ApplicationsListAdapter2.AppViewHolder> {
+
+  private final RequestManager glide;
+
+  protected ApplicationsListAdapter2(Context context) {
+    super(DIFF_CALLBACK);
+    this.glide = GlideApp.with(context);
+  }
+
+  @NonNull
+  @Override
+  public AppViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+    LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+    View view = inflater.inflate(R.layout.item_application, parent, false);
+    return new AppViewHolder(view);
+  }
+
+  @Override
+  public void onBindViewHolder(@NonNull AppViewHolder holder, int position) {
+    holder.bindTo(getItem(position), glide);
+  }
+
+  static class AppViewHolder extends RecyclerView.ViewHolder {
+
+    private final TextView name;
+    private final TextView packageName;
+    private final ImageView icon;
+    private final View overflowMenu;
+
+    public AppViewHolder(View itemView) {
+      super(itemView);
+      name = itemView.findViewById(android.R.id.text1);
+      packageName = itemView.findViewById(android.R.id.text2);
+      icon = itemView.findViewById(android.R.id.icon);
+      overflowMenu = itemView.findViewById(R.id.app_menu);
+    }
+
+    public void bindTo(ApplicationModel item, RequestManager glide) {
+      name.setText(item.getName());
+      packageName.setText(item.getPackageName());
+
+      glide.load(item.getIconPath())
+        .apply(new RequestOptions()
+          .fitCenter())
+        .into(icon);
+
+      Context context = itemView.getContext();
+
+      itemView.setOnClickListener(v -> ActivitiesListActivity.start(context, item));
+
+      overflowMenu.setOnClickListener(v -> {
+        PopupMenu popup = new PopupMenu(context, v);
+        popup.inflate(R.menu.application_item_menu);
+        popup.show();
+        popup.setOnMenuItemClickListener(menuItem -> {
+          final String packageName = item.getPackageName();
+          switch (menuItem.getItemId()) {
+            case R.id.action_open_app_info: {
+              IntentUtils.openApplicationInfo(context, packageName);
+              return true;
+            }
+            case R.id.action_open_app_manifest: {
+              ManifestViewerActivity.start(context, packageName, item.getName());
+              return true;
+            }
+          }
+          return false;
+        });
+
+      });
+    }
+  }
+
+  public static final DiffUtil.ItemCallback<ApplicationModel> DIFF_CALLBACK =
+    new DiffUtil.ItemCallback<ApplicationModel>() {
+
+      @Override
+      public boolean areItemsTheSame(ApplicationModel oldItem, ApplicationModel newItem) {
+        return oldItem.getPackageName().equals(newItem.getPackageName());
+      }
+
+      @Override
+      public boolean areContentsTheSame(ApplicationModel oldItem, ApplicationModel newItem) {
+        return oldItem.equals(newItem);
+      }
+    };
+}
diff --git a/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java b/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
index 82fd410..8216810 100644
--- a/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
+++ b/app/src/main/java/com/sdex/activityrunner/AppsListFragment.java
@@ -2,50 +2,30 @@ package com.sdex.activityrunner;
 
 import android.arch.lifecycle.ViewModelProviders;
 import android.content.Intent;
-import android.content.SharedPreferences;
+import android.graphics.drawable.Drawable;
 import android.os.Bundle;
-import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.widget.ContentLoadingProgressBar;
 import android.support.v4.widget.SwipeRefreshLayout;
-import android.text.TextUtils;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ExpandableListAdapter;
-import android.widget.ExpandableListView;
-import android.widget.ExpandableListView.ExpandableListContextMenuInfo;
-import android.widget.Toast;
 
-import com.sdex.activityrunner.db.activity.ActivityModel;
-import com.sdex.activityrunner.intent.LaunchParamsActivity;
-import com.sdex.activityrunner.preferences.AdvancedPreferences;
 import com.sdex.activityrunner.service.AppLoaderIntentService;
-import com.sdex.activityrunner.util.IntentUtils;
-import com.sdex.activityrunner.util.RunActivityTask;
 
 public class AppsListFragment extends Fragment {
 
   public static final String TAG = "AppsListFragment";
 
-  private static final int ACTION_CREATE_SHORTCUT = 1;
-  private static final int ACTION_LAUNCH_ACTIVITY = 2;
-  private static final int ACTION_LAUNCH_ACTIVITY_PARAMS = 3;
-  private static final int ACTION_LAUNCH_ACTIVITY_BY_ROOT = 4;
-
-  private ExpandableListView list;
-  private ApplicationsListAdapter adapter;
+  private ApplicationsListAdapter2 adapter;
   private SwipeRefreshLayout refreshLayout;
   private ContentLoadingProgressBar progressBar;
   private ApplicationListViewModel viewModel;
-  private AdvancedPreferences advancedPreferences;
   private String searchText;
 
   @Override
@@ -55,38 +35,22 @@ public class AppsListFragment extends Fragment {
     progressBar = view.findViewById(R.id.progress);
     progressBar.show();
     refreshLayout = view.findViewById(R.id.refresh);
-    list = view.findViewById(R.id.list);
-    adapter = new ApplicationsListAdapter(getActivity());
+    RecyclerView list = view.findViewById(R.id.list);
+    final Drawable dividerDrawable = ContextCompat.getDrawable(getActivity(), R.drawable.list_divider);
+    if (dividerDrawable != null) {
+      DividerItemDecoration dividerItemDecoration =
+        new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL);
+      dividerItemDecoration.setDrawable(dividerDrawable);
+      list.addItemDecoration(dividerItemDecoration);
+    }
+    adapter = new ApplicationsListAdapter2(getActivity());
     list.setAdapter(adapter);
-    list.setOnChildClickListener((parent, v, groupPosition, childPosition, id) -> {
-      ExpandableListAdapter adapter = parent.getExpandableListAdapter();
-      ActivityModel activityModel = (ActivityModel) adapter.getChild(groupPosition, childPosition);
-      if (getActivity() != null) {
-        if (activityModel.isExported()) {
-          IntentUtils.launchActivity(getActivity(),
-            activityModel.getComponentName(), activityModel.getName());
-        } else {
-          if (advancedPreferences.isRootIntegrationEnabled()) {
-            RunActivityTask runActivityTask =
-              new RunActivityTask(activityModel.getComponentName());
-            runActivityTask.execute();
-          } else {
-            Toast.makeText(getActivity(), R.string.settings_error_root_not_active,
-              Toast.LENGTH_SHORT).show();
-          }
-        }
-      }
-      return false;
-    });
     refreshLayout.setOnRefreshListener(() -> {
       refreshLayout.setRefreshing(true);
       final Intent work = new Intent();
       work.putExtra(AppLoaderIntentService.ARG_REASON, AppLoaderIntentService.REFRESH_USER);
       AppLoaderIntentService.enqueueWork(getActivity(), work);
     });
-    SharedPreferences sharedPreferences =
-      PreferenceManager.getDefaultSharedPreferences(getActivity());
-    advancedPreferences = new AdvancedPreferences(sharedPreferences);
     return view;
   }
 
@@ -100,100 +64,17 @@ public class AppsListFragment extends Fragment {
   public void onResume() {
     super.onResume();
     viewModel.getItems(searchText).observe(this, itemModels -> {
-      if (itemModels != null && !itemModels.isEmpty()) {
-        adapter.setShowNotExported(advancedPreferences.isShowNotExported());
-        adapter.setItems(itemModels);
-        refreshLayout.setRefreshing(false);
-        progressBar.hide();
-      }
+      adapter.submitList(itemModels);
+      refreshLayout.setRefreshing(false);
+      progressBar.hide();
     });
   }
 
-  @Override
-  public void onActivityCreated(Bundle savedInstanceState) {
-    super.onActivityCreated(savedInstanceState);
-    registerForContextMenu(list);
-  }
-
-  @Override
-  public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-    ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) menuInfo;
-    if (getView() != null) {
-      ExpandableListView list = getView().findViewById(R.id.list);
-      switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
-        case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
-          ActivityModel activity = (ActivityModel) list.getExpandableListAdapter()
-            .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
-              ExpandableListView.getPackedPositionChild(info.packedPosition));
-          String title = !TextUtils.isEmpty(activity.getName()) ?
-            activity.getName() :
-            activity.getComponentName().getShortClassName();
-          menu.setHeaderTitle(title);
-          if (activity.isExported()) {
-            menu.add(Menu.NONE, ACTION_CREATE_SHORTCUT, 1,
-              R.string.context_action_shortcut);
-            menu.add(Menu.NONE, ACTION_LAUNCH_ACTIVITY, 2,
-              R.string.context_action_launch);
-            menu.add(Menu.NONE, ACTION_LAUNCH_ACTIVITY_PARAMS, 3,
-              R.string.context_action_launch_params);
-          }
-          if (advancedPreferences.isRootIntegrationEnabled()) {
-            menu.add(Menu.NONE, ACTION_LAUNCH_ACTIVITY_BY_ROOT, 4,
-              R.string.context_action_launch_root);
-          }
-          break;
-      }
-    }
-    super.onCreateContextMenu(menu, v, menuInfo);
-  }
-
-  @Override
-  public boolean onContextItemSelected(MenuItem item) {
-    ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) item.getMenuInfo();
-    if (getView() != null) {
-      ExpandableListView list = getView().findViewById(R.id.list);
-      switch (ExpandableListView.getPackedPositionType(info.packedPosition)) {
-        case ExpandableListView.PACKED_POSITION_TYPE_CHILD:
-          ActivityModel activityModel = (ActivityModel) list.getExpandableListAdapter()
-            .getChild(ExpandableListView.getPackedPositionGroup(info.packedPosition),
-              ExpandableListView.getPackedPositionChild(info.packedPosition));
-          switch (item.getItemId()) {
-            case ACTION_CREATE_SHORTCUT:
-              if (getFragmentManager() != null) {
-                DialogFragment dialog = AddShortcutDialogFragment.newInstance(activityModel);
-                dialog.show(getFragmentManager(), AddShortcutDialogFragment.TAG);
-              }
-              break;
-            case ACTION_LAUNCH_ACTIVITY:
-              if (getActivity() != null) {
-                IntentUtils.launchActivity(getActivity(),
-                  activityModel.getComponentName(), activityModel.getName());
-              }
-              break;
-            case ACTION_LAUNCH_ACTIVITY_PARAMS:
-              if (getActivity() != null) {
-                LaunchParamsActivity.start(getActivity(), activityModel);
-              }
-              break;
-            case ACTION_LAUNCH_ACTIVITY_BY_ROOT:
-              if (getActivity() != null) {
-                RunActivityTask runActivityTask =
-                  new RunActivityTask(activityModel.getComponentName());
-                runActivityTask.execute();
-              }
-              break;
-          }
-          break;
-      }
-    }
-    return super.onContextItemSelected(item);
-  }
-
   public void filter(String text) {
     if (adapter != null) {
       this.searchText = text;
       viewModel.getItems(text).observe(this,
-        itemModels -> adapter.setItems(itemModels));
+        itemModels -> adapter.submitList(itemModels));
     }
   }
 }
diff --git a/app/src/main/java/com/sdex/activityrunner/MainActivity.java b/app/src/main/java/com/sdex/activityrunner/MainActivity.java
index 6d5b897..540da0d 100644
--- a/app/src/main/java/com/sdex/activityrunner/MainActivity.java
+++ b/app/src/main/java/com/sdex/activityrunner/MainActivity.java
@@ -201,7 +201,7 @@ public class MainActivity extends BaseActivity {
         return true;
       }
       case R.id.action_settings: {
-        startActivity(new Intent(this, SettingsActivity.class));
+        SettingsActivity.start(this);
         return true;
       }
       default:
diff --git a/app/src/main/java/com/sdex/activityrunner/SettingsActivity.java b/app/src/main/java/com/sdex/activityrunner/SettingsActivity.java
index 119e436..709fafc 100644
--- a/app/src/main/java/com/sdex/activityrunner/SettingsActivity.java
+++ b/app/src/main/java/com/sdex/activityrunner/SettingsActivity.java
@@ -1,6 +1,7 @@
 package com.sdex.activityrunner;
 
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.preference.ListPreference;
@@ -29,6 +30,11 @@ public class SettingsActivity extends AppCompatPreferenceActivity {
   public static final String KEY_ADVANCED_ROOT_INTEGRATION = "advanced_root_integration";
   public static final boolean KEY_ADVANCED_ROOT_INTEGRATION_DEFAULT = false;
 
+  public static void start(Context context) {
+      Intent starter = new Intent(context, SettingsActivity.class);
+      context.startActivity(starter);
+  }
+
   @Override
   protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
diff --git a/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListActivity.java b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListActivity.java
new file mode 100644
index 0000000..46f778f
--- /dev/null
+++ b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListActivity.java
@@ -0,0 +1,112 @@
+package com.sdex.activityrunner.app;
+
+import android.arch.lifecycle.ViewModelProviders;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.support.annotation.Nullable;
+import android.support.design.widget.Snackbar;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+
+import com.sdex.activityrunner.AddShortcutDialogFragment;
+import com.sdex.activityrunner.R;
+import com.sdex.activityrunner.SettingsActivity;
+import com.sdex.activityrunner.db.activity.ActivityModel;
+import com.sdex.activityrunner.db.application.ApplicationModel;
+import com.sdex.activityrunner.intent.LaunchParamsActivity;
+import com.sdex.activityrunner.preferences.AdvancedPreferences;
+import com.sdex.activityrunner.util.IntentUtils;
+import com.sdex.activityrunner.util.RunActivityTask;
+import com.sdex.commons.BaseActivity;
+
+public class ActivitiesListActivity extends BaseActivity
+  implements ActivitiesListAdapter.Callback {
+
+  public static final String ARG_APPLICATION = "arg_application";
+
+  private AdvancedPreferences advancedPreferences;
+
+  public static void start(Context context, ApplicationModel item) {
+    Intent starter = new Intent(context, ActivitiesListActivity.class);
+    starter.putExtra(ARG_APPLICATION, item);
+    context.startActivity(starter);
+  }
+
+  @Override
+  protected int getLayout() {
+    return R.layout.activity_activities_list;
+  }
+
+  @Override
+  protected void onCreate(@Nullable Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    ApplicationModel item = (ApplicationModel) getIntent().getSerializableExtra(ARG_APPLICATION);
+    setTitle(item.getName());
+    enableBackButton();
+    RecyclerView list = findViewById(R.id.list);
+    final Drawable dividerDrawable = ContextCompat.getDrawable(this, R.drawable.list_divider);
+    if (dividerDrawable != null) {
+      DividerItemDecoration dividerItemDecoration =
+        new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);
+      dividerItemDecoration.setDrawable(dividerDrawable);
+      list.addItemDecoration(dividerItemDecoration);
+    }
+    ActivitiesListAdapter adapter = new ActivitiesListAdapter(this, this);
+    list.setAdapter(adapter);
+    ActivitiesListViewModel viewModel =
+      ViewModelProviders.of(this).get(ActivitiesListViewModel.class);
+    viewModel.getItems(item.getPackageName()).observe(this, activityModels -> {
+      adapter.submitList(activityModels);
+      if (activityModels != null) {
+        int size = activityModels.size();
+        setSubtitle(getResources().getQuantityString(R.plurals.activities_count, size, size));
+      }
+    });
+
+    SharedPreferences sharedPreferences =
+      PreferenceManager.getDefaultSharedPreferences(this);
+    this.advancedPreferences = new AdvancedPreferences(sharedPreferences);
+  }
+
+  @Override
+  public void showShortcutDialog(ActivityModel item) {
+    DialogFragment dialog = AddShortcutDialogFragment.newInstance(item);
+    dialog.show(getSupportFragmentManager(), AddShortcutDialogFragment.TAG);
+  }
+
+  @Override
+  public void launchActivity(ActivityModel item) {
+    if (item.isExported()) {
+      IntentUtils.launchActivity(this, item.getComponentName(), item.getName());
+    } else {
+      tryRunWithRoot(item);
+    }
+  }
+
+  @Override
+  public void launchActivityWithParams(ActivityModel item) {
+    LaunchParamsActivity.start(this, item);
+  }
+
+  private void tryRunWithRoot(ActivityModel item) {
+    if (advancedPreferences.isRootIntegrationEnabled()) {
+      RunActivityTask runActivityTask =
+        new RunActivityTask(item.getComponentName());
+      runActivityTask.execute();
+    } else {
+      View view = findViewById(R.id.container);
+      Snackbar.make(view, R.string.settings_error_root_not_active, Snackbar.LENGTH_SHORT)
+        .setAction(R.string.action_settings,
+          v -> SettingsActivity.start(ActivitiesListActivity.this))
+        .setActionTextColor(ContextCompat.getColor(this, R.color.yellow))
+        .show();
+    }
+  }
+}
diff --git a/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListAdapter.java b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListAdapter.java
new file mode 100644
index 0000000..4aea045
--- /dev/null
+++ b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListAdapter.java
@@ -0,0 +1,137 @@
+package com.sdex.activityrunner.app;
+
+import android.content.Context;
+import android.support.annotation.ColorRes;
+import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.recyclerview.extensions.ListAdapter;
+import android.support.v7.util.DiffUtil;
+import android.support.v7.widget.PopupMenu;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.RequestManager;
+import com.bumptech.glide.request.RequestOptions;
+import com.sdex.activityrunner.R;
+import com.sdex.activityrunner.db.activity.ActivityModel;
+import com.sdex.activityrunner.util.GlideApp;
+
+public class ActivitiesListAdapter extends ListAdapter<ActivityModel,
+  ActivitiesListAdapter.ViewHolder> {
+
+  private final Callback callback;
+  private final RequestManager glide;
+
+  protected ActivitiesListAdapter(Context context, Callback callback) {
+    super(DIFF_CALLBACK);
+    this.callback = callback;
+    this.glide = GlideApp.with(context);
+  }
+
+  @NonNull
+  @Override
+  public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+    LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+    View view = inflater.inflate(R.layout.item_activity, parent, false);
+    return new ViewHolder(view);
+  }
+
+  @Override
+  public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
+    holder.bindTo(getItem(position), glide, callback);
+  }
+
+  interface Callback {
+    void showShortcutDialog(ActivityModel item);
+
+    void launchActivity(ActivityModel item);
+
+    void launchActivityWithParams(ActivityModel item);
+  }
+
+  static class ViewHolder extends RecyclerView.ViewHolder {
+
+    private final TextView name;
+    private final TextView packageName;
+    private final ImageView icon;
+    private final View overflowMenu;
+
+    public ViewHolder(View itemView) {
+      super(itemView);
+      name = itemView.findViewById(android.R.id.text1);
+      packageName = itemView.findViewById(android.R.id.text2);
+      icon = itemView.findViewById(android.R.id.icon);
+      overflowMenu = itemView.findViewById(R.id.app_menu);
+    }
+
+    public void bindTo(ActivityModel item, RequestManager glide, Callback callback) {
+      name.setText(item.getName());
+      packageName.setText(item.getComponentName().getShortClassName());
+
+      glide.load(item.getIconPath())
+        .apply(new RequestOptions()
+          .fitCenter())
+        .into(icon);
+
+      Context context = itemView.getContext();
+
+      @ColorRes final int color;
+      if (item.isExported()) {
+        color = android.R.color.black;
+      } else {
+        color = R.color.red;
+      }
+      name.setTextColor(ContextCompat.getColor(context, color));
+
+      itemView.setOnClickListener(v -> callback.launchActivity(item));
+
+      overflowMenu.setOnClickListener(v -> {
+        PopupMenu popup = new PopupMenu(context, v);
+        popup.inflate(R.menu.activity_item_menu);
+        Menu menu = popup.getMenu();
+        menu.setGroupVisible(R.id.menu_group_activity_exported,
+          item.isExported());
+        menu.setGroupVisible(R.id.menu_group_activity_not_exported,
+          !item.isExported());
+        popup.show();
+        popup.setOnMenuItemClickListener(menuItem -> {
+          switch (menuItem.getItemId()) {
+            case R.id.action_activity_add_shortcut: {
+              callback.showShortcutDialog(item);
+              return true;
+            }
+            case R.id.action_activity_launch_with_params: {
+              callback.launchActivityWithParams(item);
+              return true;
+            }
+            case R.id.action_activity_launch_with_root: {
+              callback.launchActivity(item);
+              return true;
+            }
+          }
+          return false;
+        });
+
+      });
+    }
+  }
+
+  public static final DiffUtil.ItemCallback<ActivityModel> DIFF_CALLBACK =
+    new DiffUtil.ItemCallback<ActivityModel>() {
+
+      @Override
+      public boolean areItemsTheSame(ActivityModel oldItem, ActivityModel newItem) {
+        return oldItem.equals(newItem);
+      }
+
+      @Override
+      public boolean areContentsTheSame(ActivityModel oldItem, ActivityModel newItem) {
+        return oldItem.equals(newItem);
+      }
+    };
+}
diff --git a/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListViewModel.java b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListViewModel.java
new file mode 100644
index 0000000..ba79750
--- /dev/null
+++ b/app/src/main/java/com/sdex/activityrunner/app/ActivitiesListViewModel.java
@@ -0,0 +1,36 @@
+package com.sdex.activityrunner.app;
+
+import android.app.Application;
+import android.arch.lifecycle.AndroidViewModel;
+import android.arch.lifecycle.LiveData;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+
+import com.sdex.activityrunner.db.AppDatabase;
+import com.sdex.activityrunner.db.activity.ActivityModel;
+import com.sdex.activityrunner.preferences.AdvancedPreferences;
+
+import java.util.List;
+
+public class ActivitiesListViewModel extends AndroidViewModel {
+
+  private final AppDatabase appDatabase;
+  private final AdvancedPreferences advancedPreferences;
+
+  public ActivitiesListViewModel(@NonNull Application application) {
+    super(application);
+    appDatabase = AppDatabase.getDatabase(application);
+    SharedPreferences sharedPreferences =
+      PreferenceManager.getDefaultSharedPreferences(application);
+    advancedPreferences = new AdvancedPreferences(sharedPreferences);
+
+  }
+
+  public LiveData<List<ActivityModel>> getItems(String packageName) {
+    boolean showNotExported = advancedPreferences.isShowNotExported();
+    return appDatabase.getActivityModelDao()
+      .getActivityModels(packageName, showNotExported ? -1 : 0 );
+  }
+
+}
diff --git a/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModel.java b/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModel.java
index 2fd068b..d9c5e50 100644
--- a/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModel.java
+++ b/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModel.java
@@ -86,4 +86,22 @@ public class ActivityModel implements Serializable {
   public ComponentName getComponentName() {
     return new ComponentName(packageName, className);
   }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+
+    ActivityModel that = (ActivityModel) o;
+
+    if (!packageName.equals(that.packageName)) return false;
+    return className.equals(that.className);
+  }
+
+  @Override
+  public int hashCode() {
+    int result = packageName.hashCode();
+    result = 31 * result + className.hashCode();
+    return result;
+  }
 }
diff --git a/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModelDao.java b/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModelDao.java
index 08927e8..630c7c3 100644
--- a/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModelDao.java
+++ b/app/src/main/java/com/sdex/activityrunner/db/activity/ActivityModelDao.java
@@ -1,11 +1,13 @@
 package com.sdex.activityrunner.db.activity;
 
+import android.arch.lifecycle.LiveData;
 import android.arch.persistence.room.Dao;
 import android.arch.persistence.room.Delete;
 import android.arch.persistence.room.Insert;
 import android.arch.persistence.room.OnConflictStrategy;
 import android.arch.persistence.room.Query;
 import android.arch.persistence.room.Update;
+
 import java.util.List;
 
 @Dao
@@ -20,6 +22,8 @@ public interface ActivityModelDao {
   @Delete
   void delete(ActivityModel... models);
 
-  @Query("SELECT * FROM ActivityModel WHERE packageName=:packageName")
-  List<ActivityModel> getActivityModels(String packageName);
+  @Query("SELECT * FROM ActivityModel " +
+    "WHERE packageName=:packageName AND exported > :exported " +
+    "ORDER BY name")
+  LiveData<List<ActivityModel>> getActivityModels(String packageName, int exported);
 }
diff --git a/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModel.java b/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModel.java
index e75db3e..532570d 100644
--- a/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModel.java
+++ b/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModel.java
@@ -3,8 +3,10 @@ package com.sdex.activityrunner.db.application;
 import android.arch.persistence.room.Entity;
 import android.support.annotation.NonNull;
 
+import java.io.Serializable;
+
 @Entity(primaryKeys = {"packageName"})
-public class ApplicationModel {
+public class ApplicationModel implements Serializable {
 
   public static final String TABLE = "ApplicationModel";
   public static final String NAME = "name";
@@ -24,7 +26,7 @@ public class ApplicationModel {
   private int exportedActivitiesCount;
 
   public ApplicationModel(@NonNull String name, @NonNull String packageName,
-    @NonNull String iconPath) {
+                          @NonNull String iconPath) {
     this.name = name;
     this.packageName = packageName;
     this.iconPath = iconPath;
@@ -62,4 +64,17 @@ public class ApplicationModel {
   public void setExportedActivitiesCount(@NonNull int exportedActivitiesCount) {
     this.exportedActivitiesCount = exportedActivitiesCount;
   }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+    ApplicationModel that = (ApplicationModel) o;
+    return packageName.equals(that.packageName);
+  }
+
+  @Override
+  public int hashCode() {
+    return packageName.hashCode();
+  }
 }
diff --git a/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModelDao.java b/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModelDao.java
index 8efb611..d4483e3 100644
--- a/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModelDao.java
+++ b/app/src/main/java/com/sdex/activityrunner/db/application/ApplicationModelDao.java
@@ -11,8 +11,6 @@ import android.arch.persistence.room.RawQuery;
 import android.arch.persistence.room.Transaction;
 import android.arch.persistence.room.Update;
 
-import com.sdex.activityrunner.db.activity.ActivityModel;
-
 import java.util.List;
 
 @Dao
@@ -28,8 +26,8 @@ public interface ApplicationModelDao {
   void delete(ApplicationModel... models);
   
   @Transaction
-  @RawQuery(observedEntities = {ApplicationModel.class, ActivityModel.class})
-  LiveData<List<ItemModel>> getApplicationModels(SupportSQLiteQuery query);
+  @RawQuery(observedEntities = {ApplicationModel.class})
+  LiveData<List<ApplicationModel>> getApplicationModels(SupportSQLiteQuery query);
 
   @Query("SELECT COUNT(*) FROM ApplicationModel")
   int count();
