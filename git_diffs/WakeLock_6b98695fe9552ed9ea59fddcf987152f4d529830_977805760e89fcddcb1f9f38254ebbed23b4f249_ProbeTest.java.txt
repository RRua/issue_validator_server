diff --git a/Android/app/src/main/java/app/intra/net/doh/JavaProbe.java b/Android/app/src/main/java/app/intra/net/doh/JavaProbe.java
deleted file mode 100644
index f45566a..0000000
--- a/Android/app/src/main/java/app/intra/net/doh/JavaProbe.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
-Copyright 2019 Jigsaw Operations LLC
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-https://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-package app.intra.net.doh;
-
-import androidx.annotation.NonNull;
-import app.intra.net.dns.DnsUdpQuery;
-import java.io.IOException;
-import okhttp3.Call;
-import okhttp3.Response;
-
-/**
- * Implements a Probe using the OkHttp-based DoH client.
- */
-class JavaProbe extends Probe {
-
-  private static final DnsUdpQuery QUERY = DnsUdpQuery.fromUdpBody(QUERY_DATA);
-
-  static Probe.Factory factory = (context, url, callback) ->
-      new JavaProbe(new ServerConnectionFactory(context), url, callback);
-
-  private final ServerConnectionFactory serverConnectionFactory;
-  private final String url;
-
-  /**
-   * Creates a Probe.  Call start() to run the probe asynchronously.
-   * @param serverConnectionFactory This factory is used to connect to the specified URL.
-   * @param url The URL of the DOH server.
-   * @param callback A callback indicating whether the connection succeeded or failed.  Runs on an
-   *   arbitrary thread.
-   */
-  JavaProbe(ServerConnectionFactory serverConnectionFactory, String url, Callback callback) {
-    this.serverConnectionFactory = serverConnectionFactory;
-    this.url = url;
-    this.callback = callback;
-  }
-
-  private class QueryCallback implements okhttp3.Callback {
-    @Override
-    public void onFailure(@NonNull Call call, @NonNull IOException e) {
-      fail();
-    }
-
-    @Override
-    public void onResponse(@NonNull Call call, @NonNull Response response) {
-      succeed();
-    }
-  }
-
-  @Override
-  protected void execute() {
-    ServerConnection conn = serverConnectionFactory.get(url);
-    if (Thread.interrupted() || conn == null) {
-      fail();
-      return;
-    }
-    conn.performDnsRequest(QUERY, QUERY_DATA, new QueryCallback());
-  }
-}
diff --git a/Android/app/src/main/java/app/intra/net/doh/JavaProber.java b/Android/app/src/main/java/app/intra/net/doh/JavaProber.java
new file mode 100644
index 0000000..dd0a2f5
--- /dev/null
+++ b/Android/app/src/main/java/app/intra/net/doh/JavaProber.java
@@ -0,0 +1,65 @@
+/*
+Copyright 2019 Jigsaw Operations LLC
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+https://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+package app.intra.net.doh;
+
+import androidx.annotation.NonNull;
+import app.intra.net.dns.DnsUdpQuery;
+import java.io.IOException;
+import okhttp3.Call;
+import okhttp3.Response;
+
+/**
+ * Implements a Prober using the OkHttp-based DoH client.
+ */
+class JavaProber extends Prober {
+
+  private static final DnsUdpQuery QUERY = DnsUdpQuery.fromUdpBody(QUERY_DATA);
+
+  private final ServerConnectionFactory factory;
+  JavaProber(ServerConnectionFactory factory) {
+    this.factory = factory;
+  }
+
+  private class QueryCallback implements okhttp3.Callback {
+    private Callback callback;
+    QueryCallback(Callback callback) {
+      this.callback = callback;
+    }
+
+    @Override
+    public void onFailure(@NonNull Call call, @NonNull IOException e) {
+      callback.onCompleted(false);
+    }
+
+    @Override
+    public void onResponse(@NonNull Call call, @NonNull Response response) {
+      callback.onCompleted(true);
+    }
+  }
+
+  @Override
+  public void probe(String url, Callback callback) {
+    new Thread(() -> {
+      // Factory.get() is a slow, synchronous call, so it has to run in a new thread.
+      ServerConnection conn = factory.get(url);
+      if (conn == null) {
+        callback.onCompleted(false);
+        return;
+      }
+      conn.performDnsRequest(QUERY, QUERY_DATA, new QueryCallback(callback));
+    }).start();
+  }
+}
diff --git a/Android/app/src/main/java/app/intra/net/doh/Probe.java b/Android/app/src/main/java/app/intra/net/doh/Probe.java
deleted file mode 100644
index c5979d3..0000000
--- a/Android/app/src/main/java/app/intra/net/doh/Probe.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
-Copyright 2019 Jigsaw Operations LLC
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-https://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-*/
-package app.intra.net.doh;
-
-import android.content.Context;
-import androidx.annotation.NonNull;
-
-/**
- * Represents an asynchronous check to determine whether a DOH server is working.  Each instance can
- * only be used once.
- */
-public abstract class Probe extends Thread {
-
-  public interface Factory {
-
-    /**
-     * @param context The application context in which the probe will run.
-     * @param url The DOH server URL to probe.
-     * @param callback How to report the probe results
-     * @return A probe that will check whether a server is working when the owner calls start().
-     */
-    @NonNull Probe get(Context context, String url, Callback callback);
-  }
-
-  protected static final byte[] QUERY_DATA = {
-      0, 0,  // [0-1]   query ID
-      1, 0,  // [2-3]   flags, RD=1
-      0, 1,  // [4-5]   QDCOUNT (number of queries) = 1
-      0, 0,  // [6-7]   ANCOUNT (number of answers) = 0
-      0, 0,  // [8-9]   NSCOUNT (number of authoritative answers) = 0
-      0, 0,  // [10-11] ARCOUNT (number of additional records) = 0
-      // Start of first query
-      7, 'y', 'o', 'u', 't', 'u', 'b', 'e',
-      3, 'c', 'o', 'm',
-      0,  // null terminator of FQDN (DNS root)
-      0, 1,  // QTYPE = A
-      0, 1   // QCLASS = IN (Internet)
-  };
-
-  enum Status { NEW, RUNNING, SUCCEEDED, FAILED }
-  protected Status status = Status.NEW;
-
-  public interface Callback {
-    void onSuccess();
-    void onFailure();
-  }
-  protected Callback callback;
-
-  public synchronized Status getStatus() {
-    return status;
-  }
-
-  protected synchronized void setStatus(Status s) {
-    status = s;
-  }
-
-  /**
-   * Report success to the callback and owner.
-   */
-  protected void succeed() {
-    setStatus(Status.SUCCEEDED);
-    callback.onSuccess();
-  }
-
-  /**
-   * Report failure to the callback and owner.
-   */
-  protected void fail() {
-    setStatus(Status.FAILED);
-    callback.onFailure();
-  }
-
-  @Override
-  public void run() {
-    setStatus(Status.RUNNING);
-    execute();
-  }
-
-  /**
-   * Called on the thread to execute the probe.
-   */
-  protected abstract void execute();
-}
diff --git a/Android/app/src/main/java/app/intra/net/doh/Prober.java b/Android/app/src/main/java/app/intra/net/doh/Prober.java
new file mode 100644
index 0000000..411c7d8
--- /dev/null
+++ b/Android/app/src/main/java/app/intra/net/doh/Prober.java
@@ -0,0 +1,48 @@
+/*
+Copyright 2019 Jigsaw Operations LLC
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+https://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+package app.intra.net.doh;
+
+/**
+ * A prober can perform asynchronous checks to determine whether a DOH server is working.
+ */
+public abstract class Prober {
+
+  protected static final byte[] QUERY_DATA = {
+      0, 0,  // [0-1]   query ID
+      1, 0,  // [2-3]   flags, RD=1
+      0, 1,  // [4-5]   QDCOUNT (number of queries) = 1
+      0, 0,  // [6-7]   ANCOUNT (number of answers) = 0
+      0, 0,  // [8-9]   NSCOUNT (number of authoritative answers) = 0
+      0, 0,  // [10-11] ARCOUNT (number of additional records) = 0
+      // Start of first query
+      7, 'y', 'o', 'u', 't', 'u', 'b', 'e',
+      3, 'c', 'o', 'm',
+      0,  // null terminator of FQDN (DNS root)
+      0, 1,  // QTYPE = A
+      0, 1   // QCLASS = IN (Internet)
+  };
+
+  public interface Callback {
+    void onCompleted(boolean succeeded);
+  }
+
+  /**
+   * Called to execute the probe on a new thread.
+   * @param url The DOH server URL to probe.
+   * @param callback How to report the probe results
+   */
+  public abstract void probe(String url, Callback callback);
+}
diff --git a/Android/app/src/main/java/app/intra/net/doh/Race.java b/Android/app/src/main/java/app/intra/net/doh/Race.java
index 5dd89cc..ba65c52 100644
--- a/Android/app/src/main/java/app/intra/net/doh/Race.java
+++ b/Android/app/src/main/java/app/intra/net/doh/Race.java
@@ -16,17 +16,15 @@ limitations under the License.
 package app.intra.net.doh;
 
 import android.content.Context;
-import app.intra.net.doh.Probe.Status;
-import app.intra.net.go.GoProbe;
+import app.intra.net.go.GoProber;
 import app.intra.sys.firebase.RemoteConfig;
-import java.util.ArrayList;
-import java.util.List;
 
 /**
  * This class performs parallel probes to all of the specified servers and calls the listener when
  * the fastest probe succeeds or all probes have failed.  Each instance can only be used once.
  */
 public class Race {
+
   public interface Listener {
     /**
      * This method is called once, when the race has concluded.
@@ -42,66 +40,60 @@ public class Race {
    * @param listener Called once on an arbitrary thread with the result of the race.
    */
   public static void start(Context context, String[] urls, Listener listener) {
-    Probe.Factory factory = RemoteConfig.getUseGoDoh() ? GoProbe.factory : JavaProbe.factory;
-    start(factory, context, urls, listener);
+    Prober prober = RemoteConfig.getUseGoDoh() ? new GoProber(context) :
+        new JavaProber(new ServerConnectionFactory(context));
+    start(prober, urls, listener);
   }
 
   // Exposed for unit testing only.
-  static void start(Probe.Factory factory, Context context, String[] urls, Listener listener) {
-    List<Probe> probes = new ArrayList<>(urls.length);
+  static void start(Prober prober, String[] urls, Listener listener) {
+    Collector collector = new Collector(urls.length, listener);
     for (int i = 0; i < urls.length; ++i) {
-      probes.add(factory.get(context, urls[i], new Callback(i, probes, listener)));
-    }
-    synchronized (probes) {
-      for (Probe task : probes) {
-        task.start();
-      }
+      prober.probe(urls[i], new Callback(i, collector));
     }
   }
 
-  private static class Callback implements JavaProbe.Callback {
-    private final int index;
-    private final List<Probe> probes;
+  private static class Collector {
+    private final int numCallbacks;
     private final Listener listener;
+    private int numFailed = 0;
+    private boolean reportedSuccess = false;
 
-
-    private Callback(int index, List<Probe> probes, Listener listener) {
-      this.index = index;
-      this.probes = probes;
+    Collector(int numCallbacks, Listener listener) {
+      this.numCallbacks = numCallbacks;
       this.listener = listener;
     }
 
-    @Override
-    public void onFailure() {
-      synchronized(probes) {
-        if (probes.isEmpty()) {
-          return;
+    synchronized void onCompleted(int index, boolean succeeded) {
+      if (succeeded) {
+        if (!reportedSuccess) {
+          listener.onResult(index);
+          reportedSuccess = true;
         }
-        for (Probe task : probes) {
-          if (task.getStatus() != Status.FAILED) {
-            return;
-          }
+      } else {
+        ++numFailed;
+        if (numFailed == numCallbacks) {
+          // All probes failed
+          listener.onResult(-1);
         }
-        // All probes have failed.
-        listener.onResult(-1);
-        probes.clear();
       }
     }
 
+  }
+
+  private static class Callback implements Prober.Callback {
+    private final int index;
+    private final Collector collector;
+
+
+    private Callback(int index, Collector collector) {
+      this.index = index;
+      this.collector = collector;
+    }
+
     @Override
-    public void onSuccess() {
-      synchronized (probes) {
-        if (probes.isEmpty()) {
-          return;
-        }
-        listener.onResult(index);
-        // Minor optimization: cancel any probes that haven't issued a probe query yet.
-        for (Probe probe : probes) {
-          probe.interrupt();
-        }
-        // Mark the race as completed to prevent additional Listener callbacks.
-        probes.clear();
-      }
+    public void onCompleted(boolean succeeded) {
+      collector.onCompleted(index, succeeded);
     }
   }
 }
diff --git a/Android/app/src/main/java/app/intra/net/go/GoProbe.java b/Android/app/src/main/java/app/intra/net/go/GoProber.java
similarity index 50%
rename from Android/app/src/main/java/app/intra/net/go/GoProbe.java
rename to Android/app/src/main/java/app/intra/net/go/GoProber.java
index 7d5b6de..a5e20eb 100644
--- a/Android/app/src/main/java/app/intra/net/go/GoProbe.java
+++ b/Android/app/src/main/java/app/intra/net/go/GoProber.java
@@ -16,7 +16,7 @@ limitations under the License.
 package app.intra.net.go;
 
 import android.content.Context;
-import app.intra.net.doh.Probe;
+import app.intra.net.doh.Prober;
 import app.intra.net.doh.ServerConnectionFactory;
 import doh.Transport;
 import tun2socks.Tun2socks;
@@ -24,41 +24,33 @@ import tun2socks.Tun2socks;
 /**
  * Implements a Probe using the Go-based DoH client.
  */
-public class GoProbe extends Probe {
-
-  public static Probe.Factory factory = (context, url, callback) ->
-      new GoProbe(context, url, callback);
+public class GoProber extends Prober {
 
   private final Context context;
-  private final String url;
 
-  private GoProbe(Context context, String url, Callback callback) {
+  public GoProber(Context context) {
     this.context = context;
-    this.callback = callback;
-    this.url = url;
   }
 
   @Override
-  protected void execute() {
-    String dohIPs = ServerConnectionFactory.getIpString(context, url);
-    if (isInterrupted()) {
-      fail();
-      return;
-    }
-    try {
-      Transport transport = Tun2socks.newDoHTransport(url, dohIPs, null);
-      if (transport == null || isInterrupted()) {
-        fail();
-        return;
-      }
-      byte[] response = transport.query(QUERY_DATA);
-      if (response != null && response.length > 0) {
-        succeed();
-        return;
+  public void probe(String url, Callback callback) {
+    new Thread(() -> {
+      String dohIPs = ServerConnectionFactory.getIpString(context, url);
+      try {
+        Transport transport = Tun2socks.newDoHTransport(url, dohIPs, null);
+        if (transport == null) {
+          callback.onCompleted(false);
+          return;
+        }
+        byte[] response = transport.query(QUERY_DATA);
+        if (response != null && response.length > 0) {
+          callback.onCompleted(true);
+          return;
+        }
+        callback.onCompleted(false);
+      } catch (Exception e) {
+        callback.onCompleted(false);
       }
-      fail();
-    } catch (Exception e) {
-      fail();
-    }
+    }).start();
   }
 }
diff --git a/Android/app/src/test/java/app/intra/net/doh/JavaProbeTest.java b/Android/app/src/test/java/app/intra/net/doh/JavaProberTest.java
similarity index 72%
rename from Android/app/src/test/java/app/intra/net/doh/JavaProbeTest.java
rename to Android/app/src/test/java/app/intra/net/doh/JavaProberTest.java
index cdeb5bf..f051c74 100644
--- a/Android/app/src/test/java/app/intra/net/doh/JavaProbeTest.java
+++ b/Android/app/src/test/java/app/intra/net/doh/JavaProberTest.java
@@ -21,7 +21,6 @@ import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 import app.intra.net.dns.DnsUdpQuery;
-import app.intra.net.doh.Probe.Status;
 import java.util.concurrent.Semaphore;
 import okhttp3.Callback;
 import org.junit.After;
@@ -32,7 +31,7 @@ import org.mockito.Captor;
 import org.mockito.MockitoAnnotations;
 import org.mockito.invocation.InvocationOnMock;
 
-public class JavaProbeTest {
+public class JavaProberTest {
   private static final String URL = "foo";
   private ServerConnectionFactory mockFactory;
   private Semaphore done = new Semaphore(0);
@@ -79,25 +78,15 @@ public class JavaProbeTest {
         dataCaptor.capture(),
         callbackCaptor.capture());
 
-    JavaProbe.Callback callback = new JavaProbe.Callback() {
-      @Override
-      public void onSuccess() {
-        done.release();
-      }
-
-      @Override
-      public void onFailure() {
+    Prober prober = new JavaProber(mockFactory);
+    prober.probe(URL, succeeded -> {
+      if (!succeeded) {
         fail();
-        done.release();
       }
-    };
-    JavaProbe probe = new JavaProbe(mockFactory, URL, callback);
-    assertEquals(Status.NEW, probe.getStatus());
-    probe.start();
+      done.release();
+    });
     // Wait for call to ServerConnectionFactory.get()
     done.acquire();
-    // ServerConnectionFactory.get() was called.
-    assertEquals(Status.RUNNING, probe.getStatus());
     // Wait for call to ServerConnection.performDnsRequest()
     done.acquire();
     // performDnsRequest was called.
@@ -106,7 +95,6 @@ public class JavaProbeTest {
     callbackCaptor.getValue().onResponse(null, null);
     // Wait for success callback.
     done.acquire();
-    assertEquals(Status.SUCCEEDED, probe.getStatus());
   }
 
   @Test
@@ -125,25 +113,15 @@ public class JavaProbeTest {
         dataCaptor.capture(),
         callbackCaptor.capture());
 
-    JavaProbe.Callback callback = new JavaProbe.Callback() {
-      @Override
-      public void onSuccess() {
+    Prober prober = new JavaProber(mockFactory);
+    prober.probe(URL, succeeded -> {
+      if (succeeded) {
         fail();
-        done.release();
-      }
-
-      @Override
-      public void onFailure() {
-        done.release();
       }
-    };
-    JavaProbe probe = new JavaProbe(mockFactory, URL, callback);
-    assertEquals(Status.NEW, probe.getStatus());
-    probe.start();
+      done.release();
+    });
     // Wait for call to ServerConnectionFactory.get()
     done.acquire();
-    // ServerConnectionFactory.get() was called.
-    assertEquals(Status.RUNNING, probe.getStatus());
     // Wait for call to ServerConnection.performDnsRequest()
     done.acquire();
     // performDnsRequest was called.
@@ -152,7 +130,6 @@ public class JavaProbeTest {
     callbackCaptor.getValue().onFailure(null, null);
     // Wait for failure callback.
     done.acquire();
-    assertEquals(Status.FAILED, probe.getStatus());
   }
 
   @Test
@@ -161,24 +138,15 @@ public class JavaProbeTest {
       return null;  // Indicates bootstrap failure.
     });
 
-    JavaProbe.Callback callback = new JavaProbe.Callback() {
-      @Override
-      public void onSuccess() {
+    Prober prober = new JavaProber(mockFactory);
+    prober.probe(URL, succeeded -> {
+      if (succeeded) {
         fail();
-        done.release();
-      }
-
-      @Override
-      public void onFailure() {
-        done.release();
       }
-    };
-    JavaProbe probe = new JavaProbe(mockFactory, URL, callback);
-    assertEquals(Status.NEW, probe.getStatus());
-    probe.start();
+      done.release();
+    });
     // Wait for failure callback.
     done.acquire();
-    assertEquals(Status.FAILED, probe.getStatus());
   }
 
 }
diff --git a/Android/app/src/test/java/app/intra/net/doh/RaceTest.java b/Android/app/src/test/java/app/intra/net/doh/RaceTest.java
index 4d18b04..2283974 100644
--- a/Android/app/src/test/java/app/intra/net/doh/RaceTest.java
+++ b/Android/app/src/test/java/app/intra/net/doh/RaceTest.java
@@ -21,35 +21,20 @@ import org.junit.Test;
 
 public class RaceTest {
 
-  private class SuccessProbe extends Probe {
-    SuccessProbe(Callback c) {
-      callback = c;
-    }
-
+  private class SuccessProber extends Prober {
     @Override
-    protected void execute() {
-      succeed();
-    }
-  }
+    public void probe(String url, Callback callback) {
+      new Thread(() -> callback.onCompleted(true)).start();
 
-  private class FailProbe extends Probe {
-    FailProbe(Callback c) {
-      callback = c;
-    }
-
-    @Override
-    protected void execute() {
-      fail();
     }
   }
 
   @Test
   public void Success() throws Exception {
-    Probe.Factory successFactory = (context, url, callback) -> new SuccessProbe(callback);
     final int N = 7;
     String[] urls = new String[N];
     Semaphore done = new Semaphore(0);
-    Race.start(successFactory, null, urls, (int index) -> {
+    Race.start(new SuccessProber(), urls, (int index) -> {
       assertTrue(index >= 0);
       assertTrue(index < N);
       done.release();
@@ -62,33 +47,40 @@ public class RaceTest {
     done.acquire();
   }
 
+  private class FailProber extends Prober {
+    @Override
+    public void probe(String url, Callback callback) {
+      new Thread(() -> callback.onCompleted(false)).start();
+    }
+  }
+
   @Test
   public void AllFail() throws Exception {
-    Probe.Factory failFactory = (context, url, callback) -> new FailProbe(callback);
     final int N = 7;
     String[] urls = new String[N];
     for (int i = 0; i < N; ++i) {
       urls[i] = String.format("server%d", i);
     }
     Semaphore done = new Semaphore(0);
-    Race.start(failFactory, null, urls, (int index) -> {
+    Race.start(new FailProber(), urls, (int index) -> {
       assertEquals(-1, index);
       done.release();
     });
     done.acquire();
   }
 
+  private class HalfProber extends Prober {
+    @Override
+    public void probe(String url, Callback callback) {
+      int i = Integer.parseInt(url);
+      // Even-number servers succeed.
+      boolean succeed = (i % 2 == 0);
+      new Thread(() -> callback.onCompleted(succeed)).start();
+    }
+  }
+
   @Test
   public void HalfFail() throws Exception {
-    Probe.Factory halfFactory = (context, url, callback) -> {
-      int i = Integer.parseInt(url);
-      if (i % 2 == 0) {
-        // Even-number servers succeed.
-        return new SuccessProbe(callback);
-      } else {
-        return new FailProbe(callback);
-      }
-    };
     final int N = 7;
     String[] urls = new String[N];
     ServerConnection[] connections = new ServerConnection[N];
@@ -96,7 +88,7 @@ public class RaceTest {
       urls[i] = String.format("%d", i);
     }
     Semaphore done = new Semaphore(0);
-    Race.start(halfFactory, null, urls, (int index) -> {
+    Race.start(new HalfProber(), urls, (int index) -> {
       assertTrue(index >= 0);
       assertTrue(index < N);
       // Only the even-numbered servers succeeded.
