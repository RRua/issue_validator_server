diff --git a/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java b/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
index c2c8ab5c6..b8abd7ff6 100644
--- a/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
+++ b/app/src/main/java/com/amaze/filemanager/activities/MainActivity.java
@@ -31,10 +31,8 @@ import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.Cursor;
-import android.graphics.Color;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.hardware.usb.UsbManager;
 import android.media.RingtoneManager;
 import android.net.Uri;
@@ -49,15 +47,12 @@ import android.support.annotation.NonNull;
 import android.support.design.widget.AppBarLayout;
 import android.support.design.widget.CoordinatorLayout;
 import android.support.design.widget.Snackbar;
-import android.support.v4.app.ActionBarDrawerToggle;
 import android.support.v4.app.ActivityCompat.OnRequestPermissionsResultCallback;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.LoaderManager;
-import android.support.v4.content.ContextCompat;
 import android.support.v4.content.CursorLoader;
 import android.support.v4.content.Loader;
-import android.support.v4.widget.DrawerLayout;
 import android.text.TextUtils;
 import android.view.KeyEvent;
 import android.view.Menu;
@@ -69,18 +64,13 @@ import android.view.Window;
 import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
-import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.ListView;
-import android.widget.RelativeLayout;
 import android.widget.Toast;
 
 import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.superclasses.ThemedActivity;
-import com.amaze.filemanager.adapters.DrawerAdapter;
-import com.amaze.filemanager.adapters.data.DrawerItem;
 import com.amaze.filemanager.asynchronous.asynctasks.DeleteTask;
 import com.amaze.filemanager.asynchronous.asynctasks.MoveFiles;
 import com.amaze.filemanager.asynchronous.asynctasks.PrepareCopyTask;
@@ -99,6 +89,7 @@ import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.PasteHelper;
 import com.amaze.filemanager.filesystem.RootHelper;
 import com.amaze.filemanager.filesystem.ssh.CustomSshJConfig;
+import com.amaze.filemanager.filesystem.ssh.SshConnectionPool;
 import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.fragments.CloudSheetFragment;
 import com.amaze.filemanager.fragments.CloudSheetFragment.CloudConnectionCallbacks;
@@ -109,16 +100,14 @@ import com.amaze.filemanager.fragments.ProcessViewerFragment;
 import com.amaze.filemanager.fragments.SearchWorkerFragment;
 import com.amaze.filemanager.fragments.TabFragment;
 import com.amaze.filemanager.fragments.preference_fragments.PreferencesConstants;
-import com.amaze.filemanager.fragments.preference_fragments.QuickAccessPref;
-import com.amaze.filemanager.filesystem.ssh.SshConnectionPool;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.ui.dialogs.RenameBookmark;
 import com.amaze.filemanager.ui.dialogs.RenameBookmark.BookmarkCallback;
 import com.amaze.filemanager.ui.dialogs.SftpConnectDialog;
 import com.amaze.filemanager.ui.dialogs.SmbConnectDialog;
 import com.amaze.filemanager.ui.dialogs.SmbConnectDialog.SmbConnectionListener;
-import com.amaze.filemanager.ui.views.ScrimInsetsRelativeLayout;
 import com.amaze.filemanager.ui.views.appbar.AppBar;
+import com.amaze.filemanager.ui.views.drawer.Drawer;
 import com.amaze.filemanager.utils.BookSorter;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.DataUtils.DataChangeListener;
@@ -127,14 +116,11 @@ import com.amaze.filemanager.utils.OTGUtil;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.PreferenceUtils;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
-import com.amaze.filemanager.utils.TinyDB;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.files.FileUtils;
 import com.amaze.filemanager.utils.theme.AppTheme;
-import com.android.volley.VolleyError;
-import com.android.volley.toolbox.ImageLoader;
 import com.cloudrail.si.CloudRail;
 import com.cloudrail.si.exceptions.AuthenticationException;
 import com.cloudrail.si.exceptions.ParseException;
@@ -172,9 +158,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
 
     private DataUtils dataUtils = DataUtils.getInstance();
 
-    public DrawerLayout mDrawerLayout;
-    public ListView mDrawerList;
-    public ScrimInsetsRelativeLayout mDrawerLinear;
     public String path = "", launchPath;
     public FrameLayout frameLayout;
     public boolean mReturnIntent = false;
@@ -182,14 +165,10 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     public boolean mRingtonePickerIntent = false, colourednavigation = false;
     public int skinStatusBar;
 
-    public volatile int storage_count = 0; // number of storage available (internal/external/otg etc)
-
     public FABsMenu floatingActionButton;
     public LinearLayout pathbar;
     public FrameLayout buttonBarFrame;
-    public boolean isDrawerLocked = false;
 
-    public DrawerAdapter adapter;
     public MainActivityHelper mainActivityHelper;
 
     public int operation = -1;
@@ -201,7 +180,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     // oppathList - the paths at which certain operation needs to be performed (pairs with oparrayList)
     public String oppathe, oppathe1;
     public ArrayList<String> oppatheList;
-    public RelativeLayout drawerHeaderParent;
 
     /**
      * @deprecated use getCurrentMainFragment()
@@ -221,23 +199,19 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     private static final int image_selector_request_code = 31;
 
     private AppBar appbar;
+    private Drawer drawer;
     //private HistoryManager history, grid;
     private MainActivity mainActivity = this;
     private Context con = this;
     private String zippath;
-    private FragmentTransaction pending_fragmentTransaction;
-    private String pendingPath;
     private boolean openProcesses = false;
     private int hidemode;
     private MaterialDialog materialDialog;
     private String newPath = null;
     private boolean backPressedToExitOnce = false;
     private Toast toast = null;
-    private ActionBarDrawerToggle mDrawerToggle;
     private Intent intent;
-    private View drawerHeaderLayout;
-    private View drawerHeaderView, indicator_layout;
-    private ImageLoader mImageLoader;
+    private View indicator_layout;
 
     private TabHandler tabHandler;
     /* A flag indicating that a PendingIntent is in progress and prevents
@@ -248,38 +222,13 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
 
     private AppBarLayout appBarLayout;
 
-    /**
-     * In drawer nothing is selected.
-     */
-    private static final int DRAWER_SELECTED_NONE = -1;
-    /**
-     * In drawer first storage is selected.
-     */
-    private static final int DRAWER_SELECTED_DEFAULT = 0;
-    /**
-     * In drawer {@link ProcessViewerFragment} is selected (which is a special case
-     * of {@link #DRAWER_SELECTED_NONE} as ProcessViewer has no drawer item). //TODO might be wrong
-     */
-    private static final int DRAWER_SELECTED_PROCESSVIEWER = 102;
-    /**
-     * In drawer FTP or Apps list (also Settings for a brief second) are selected.
-     */
-    private static final int DRAWER_SELECTED_LASTSECTION = -2;
-
-    /**
-     * Which item in nav drawer is selected values go from 0 to the length of the nav drawer list,
-     * special values are {@link #DRAWER_SELECTED_DEFAULT}, {@link #DRAWER_SELECTED_NONE},
-     * {@link #DRAWER_SELECTED_PROCESSVIEWER} and {@link #DRAWER_SELECTED_LASTSECTION}.
-     */
-    private int selectedStorage;
-
     private CoordinatorLayout mScreenLayout;
     private View fabBgView;
     private UtilsHandler utilsHandler;
     private CloudHandler cloudHandler;
 
-    private static final int REQUEST_CODE_SAF = 223;
-    private static final String VALUE_PREF_OTG_NULL = "n/a";
+    public static final int REQUEST_CODE_SAF = 223;
+    public static final String VALUE_PREF_OTG_NULL = "n/a";
 
     public static final String KEY_INTENT_PROCESS_VIEWER = "openprocesses";
     public static final String TAG_INTENT_FILTER_FAILED_OPS = "failedOps";
@@ -348,7 +297,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         utilsHandler = AppConfig.getInstance().getUtilsHandler();
         cloudHandler = new CloudHandler(this);
 
-        mImageLoader = AppConfig.getInstance().getImageLoader();
         mainActivityHelper = new MainActivityHelper(this);
         initialiseFab();// TODO: 7/12/2017 not init when actionIntent != null
 
@@ -371,8 +319,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         checkForExternalIntent(intent);
 
         if (savedInstanceState != null) {
-
-            selectedStorage = savedInstanceState.getInt(KEY_DRAWER_SELECTED, DRAWER_SELECTED_DEFAULT);
+            drawer.setSomethingSelected(savedInstanceState.getBoolean(KEY_DRAWER_SELECTED));
         }
 
         // setting window background color instead of each item, in order to reduce pixel overdraw
@@ -389,47 +336,17 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             getWindow().setBackgroundDrawableResource(R.color.holo_dark_background);
         }
 
-        if (getAppTheme().equals(AppTheme.DARK)) {
-            mDrawerList.setBackgroundColor(ContextCompat.getColor(this, R.color.holo_dark_background));
-        } else if (getAppTheme().equals(AppTheme.BLACK)) {
-            mDrawerList.setBackgroundColor(ContextCompat.getColor(this, android.R.color.black));
-        }
-        mDrawerList.setDivider(null);
-        if (!isDrawerLocked) {
-            mDrawerToggle = new ActionBarDrawerToggle(
-                    this,                  /* host Activity */
-                    mDrawerLayout,         /* DrawerLayout object */
-                    R.drawable.ic_drawer_l,  /* nav drawer image to replace 'Up' caret */
-                    R.string.drawer_open,  /* "open drawer" description for accessibility */
-                    R.string.drawer_close  /* "close drawer" description for accessibility */
-            ) {
-                public void onDrawerClosed(View view) {
-                    mainActivity.onDrawerClosed();
-                }
-
-                public void onDrawerOpened(View drawerView) {
-                    //title.setText("Amaze File Manager");
-                    // creates call to onPrepareOptionsMenu()
-                }
-            };
-            mDrawerLayout.setDrawerListener(mDrawerToggle);
-            getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_drawer_l);
-            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
-            getSupportActionBar().setHomeButtonEnabled(true);
-            mDrawerToggle.syncState();
-        }
         /*findViewById(R.id.drawer_buttton).setOnClickListener(new ImageView.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (mDrawerLayout.isDrawerOpen(mDrawerLinear)) {
-                    mDrawerLayout.closeDrawer(mDrawerLinear);
+                if (mDrawerLayout.isOpen(mDrawerLinear)) {
+                    mDrawerLayout.close(mDrawerLinear);
                 } else mDrawerLayout.openDrawer(mDrawerLinear);
             }
         });*/
-        if (mDrawerToggle != null) {
-            mDrawerToggle.setDrawerIndicatorEnabled(true);
-            mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_drawer_l);
-        }
+
+        drawer.setDrawerIndicatorEnabled();
+
         //recents header color implementation
         if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             ActivityManager.TaskDescription taskDescription = new ActivityManager.TaskDescription("Amaze",
@@ -465,14 +382,14 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             @Override
             public Void onPostExecute(Object result) {
 
-                refreshDrawer();
+                drawer.refreshDrawer();
 
                 if (savedInstanceState == null) {
                     if (openProcesses) {
                         FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
                         transaction.replace(R.id.content_frame, new ProcessViewerFragment(), KEY_INTENT_PROCESS_VIEWER);
                         //transaction.addToBackStack(null);
-                        selectedStorage = DRAWER_SELECTED_PROCESSVIEWER;
+                        drawer.setSomethingSelected(true);
                         openProcesses = false;
                         //title.setText(utils.getString(con, R.string.process_viewer));
                         //Commit the transaction
@@ -486,8 +403,8 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                         transaction2.replace(R.id.content_frame, new FTPServerFragment());
                         appBarLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
 
-                        selectedStorage = DRAWER_SELECTED_LASTSECTION;
-                        adapter.deselectEverything();
+                        drawer.setSomethingSelected(true);
+                        drawer.deselectEverything();
                         transaction2.commit();
                     } else {
                         if (path != null && path.length() > 0) {
@@ -510,9 +427,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                     oppathe1 = savedInstanceState.getString(KEY_OPERATED_ON_PATH);
                     oparrayList = savedInstanceState.getParcelableArrayList(KEY_OPERATIONS_PATH_LIST);
                     operation = savedInstanceState.getInt(KEY_OPERATION);
-                    selectedStorage = savedInstanceState.getInt(KEY_DRAWER_SELECTED, DRAWER_SELECTED_DEFAULT);
                     //mainFragment = (Main) savedInstanceState.getParcelable("main_fragment");
-                    adapter.toggleChecked(selectedStorage);
                 }
                 return null;
             }
@@ -753,9 +668,9 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
 
     @Override
     public void onBackPressed() {
-        if (!isDrawerLocked) {
-            if (mDrawerLayout.isDrawerOpen(mDrawerLinear)) {
-                mDrawerLayout.closeDrawer(mDrawerLinear);
+        if (!drawer.isLocked()) {
+            if (drawer.isOpen()) {
+                drawer.close();
             } else {
                 onbackpressed();
             }
@@ -836,14 +751,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         }
     }
 
-    public void selectCorrectDrawerItemForPath(final String path) {
-        Integer position = dataUtils.findLongestContainingDrawerItem(path);
-
-        if (adapter != null) {
-            adapter.toggleChecked(position != null? position:-1);
-        }
-    }
-
     public void goToMain(String path) {
         android.support.v4.app.FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
         //title.setText(R.string.app_name);
@@ -855,7 +762,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         }
         transaction.replace(R.id.content_frame, tabFragment);
         // Commit the transaction
-        selectedStorage = DRAWER_SELECTED_DEFAULT;
+        drawer.setSomethingSelected(true);
         transaction.addToBackStack("tabt" + 1);
         transaction.commitAllowingStateLoss();
         appbar.setTitle(null);
@@ -870,56 +777,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         }
     }
 
-    public void selectItem(final int i) {
-        ArrayList<DrawerItem> directoryDrawerItems = dataUtils.getDrawerItems();
-        switch (directoryDrawerItems.get(i).type) {
-            case DrawerItem.ITEM_ENTRY:
-                if ((selectedStorage == DRAWER_SELECTED_NONE || selectedStorage >= directoryDrawerItems.size())) {
-                    TabFragment tabFragment = new TabFragment();
-                    Bundle a = new Bundle();
-                    a.putString("path", directoryDrawerItems.get(i).path);
-
-                    tabFragment.setArguments(a);
-
-                    android.support.v4.app.FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
-                    transaction.replace(R.id.content_frame, tabFragment);
-
-                    transaction.addToBackStack("tabt1" + 1);
-                    pending_fragmentTransaction = transaction;
-                    selectedStorage = i;
-                    adapter.toggleChecked(selectedStorage);
-                    if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
-                    else onDrawerClosed();
-                    floatingActionButton.setVisibility(View.VISIBLE);
-                    floatingActionButton.getMenuButton().show();
-                } else {
-                    pendingPath = directoryDrawerItems.get(i).path;
-
-                    selectedStorage = i;
-                    adapter.toggleChecked(selectedStorage);
-
-                    if (directoryDrawerItems.get(i).path.contains(OTGUtil.PREFIX_OTG) &&
-                            getPrefs().getString(KEY_PREF_OTG, null).equals(VALUE_PREF_OTG_NULL)) {
-                        // we've not gotten otg path yet
-                        // start system request for storage access framework
-                        Toast.makeText(getApplicationContext(),
-                                getString(R.string.otg_access), Toast.LENGTH_LONG).show();
-                        Intent safIntent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
-                        startActivityForResult(safIntent, REQUEST_CODE_SAF);
-                    } else {
-                        if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
-                        else onDrawerClosed();
-                    }
-                }
-                break;
-            case DrawerItem.ITEM_INTENT:
-                directoryDrawerItems.get(i).onClickListener.onClick();
-                selectedStorage = i;
-                adapter.toggleChecked(selectedStorage);
-                break;
-        }
-    }
-
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         MenuInflater menuInflater = getMenuInflater();
@@ -1049,9 +906,8 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     public boolean onOptionsItemSelected(MenuItem item) {
         // The action bar home/up action should open or close the drawer.
         // ActionBarDrawerToggle will take care of this.
-        if (mDrawerToggle != null && mDrawerToggle.onOptionsItemSelected(item)) {
-            return true;
-        }
+        if (drawer.onOptionsItemSelected(item)) return true;
+
         // Handle action buttons
         MainFragment ma = getCurrentMainFragment();
 
@@ -1189,21 +1045,20 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     protected void onPostCreate(Bundle savedInstanceState) {
         super.onPostCreate(savedInstanceState);
         // Sync the toggle state after onRestoreInstanceState has occurred.
-        if (mDrawerToggle != null) mDrawerToggle.syncState();
+        drawer.syncState();
     }
 
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
         // Pass any configuration change to the drawer toggls
-        if (mDrawerToggle != null) mDrawerToggle.onConfigurationChanged(newConfig);
+        drawer.onConfigurationChanged(newConfig);
     }
 
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        if (selectedStorage != DRAWER_SELECTED_NONE)
-            outState.putInt(KEY_DRAWER_SELECTED, selectedStorage);
+        outState.putBoolean(KEY_DRAWER_SELECTED, drawer.isSomethingSelected());
         if(pasteHelper != null) {
             outState.putParcelable(PASTEHELPER_BUNDLE, pasteHelper);
         }
@@ -1239,6 +1094,8 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             materialDialog = null;
         }
 
+        drawer.deselectEverything();
+
         IntentFilter newFilter = new IntentFilter();
         newFilter.addAction(Intent.ACTION_MEDIA_MOUNTED);
         newFilter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
@@ -1270,10 +1127,10 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         public void onReceive(Context context, Intent intent) {
             if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
                 getPrefs().edit().putString(KEY_PREF_OTG, VALUE_PREF_OTG_NULL).apply();
-                refreshDrawer();
+                drawer.refreshDrawer();
             } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
                 getPrefs().edit().putString(KEY_PREF_OTG, null).apply();
-                refreshDrawer();
+                drawer.refreshDrawer();
                 goToMain(null);
             }
         }
@@ -1392,190 +1249,22 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
 
         return null;
     }
-    
-    public void refreshDrawer() {
-
-        ArrayList<DrawerItem> sectionDrawerItems = new ArrayList<>();
-        ArrayList<String> storageDirectories = getStorageDirectories();
-        storage_count = 0;
-        for (String file : storageDirectories) {
-            File f = new File(file);
-            String name;
-            Drawable icon1 = ContextCompat.getDrawable(this, R.drawable.ic_sd_storage_white_24dp);
-            if ("/storage/emulated/legacy".equals(file) || "/storage/emulated/0".equals(file)) {
-                name = getResources().getString(R.string.storage);
-            } else if ("/storage/sdcard1".equals(file)) {
-                name = getResources().getString(R.string.extstorage);
-            } else if ("/".equals(file)) {
-                name = getResources().getString(R.string.rootdirectory);
-                icon1 = ContextCompat.getDrawable(this, R.drawable.ic_drawer_root_white);
-            } else if (file.contains(OTGUtil.PREFIX_OTG)) {
-                name = "OTG";
-                icon1 = ContextCompat.getDrawable(this, R.drawable.ic_usb_white_24dp);
-            } else name = f.getName();
-            if (!f.isDirectory() || f.canExecute()) {
-                storage_count++;
-                sectionDrawerItems.add(new DrawerItem(name, file, icon1));
-            }
-        }
-        dataUtils.setStorages(storageDirectories);
-        sectionDrawerItems.add(new DrawerItem(DrawerItem.ITEM_SECTION));
-
-        if (dataUtils.getServers().size() > 0) {
-            Collections.sort(dataUtils.getServers(), new BookSorter());
-            synchronized (dataUtils.getServers()) {
-                for (String[] file : dataUtils.getServers()) {
-                    sectionDrawerItems.add(new DrawerItem(file[0], file[1], ContextCompat.getDrawable(this,
-                            (file[1].startsWith(SshConnectionPool.SSH_URI_PREFIX)) ?
-                                    R.drawable.ic_linux_grey600_24dp : R.drawable.ic_settings_remote_white_24dp)));
-                }
-            }
-            sectionDrawerItems.add(new DrawerItem(DrawerItem.ITEM_SECTION));
-        }
-
-        ArrayList<String[]> accountAuthenticationList = new ArrayList<>();
-
-        if (CloudSheetFragment.isCloudProviderAvailable(this)) {
-            for (CloudStorage cloudStorage : dataUtils.getAccounts()) {
-                if (cloudStorage instanceof Dropbox) {
-
-                    sectionDrawerItems.add(new DrawerItem(CloudHandler.CLOUD_NAME_DROPBOX,
-                            CloudHandler.CLOUD_PREFIX_DROPBOX + "/",
-                            ContextCompat.getDrawable(this, R.drawable.ic_dropbox_white_24dp)));
-
-                    accountAuthenticationList.add(new String[] {
-                            CloudHandler.CLOUD_NAME_DROPBOX,
-                            CloudHandler.CLOUD_PREFIX_DROPBOX + "/",
-                    });
-                } else if (cloudStorage instanceof Box) {
-
-                    sectionDrawerItems.add(new DrawerItem(CloudHandler.CLOUD_NAME_BOX,
-                            CloudHandler.CLOUD_PREFIX_BOX + "/",
-                            ContextCompat.getDrawable(this, R.drawable.ic_box_white_24dp)));
-
-                    accountAuthenticationList.add(new String[] {
-                            CloudHandler.CLOUD_NAME_BOX,
-                            CloudHandler.CLOUD_PREFIX_BOX + "/",
-                    });
-                } else if (cloudStorage instanceof OneDrive) {
 
-                    sectionDrawerItems.add(new DrawerItem(CloudHandler.CLOUD_NAME_ONE_DRIVE,
-                            CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/",
-                            ContextCompat.getDrawable(this, R.drawable.ic_onedrive_white_24dp)));
-
-                    accountAuthenticationList.add(new String[] {
-                            CloudHandler.CLOUD_NAME_ONE_DRIVE,
-                            CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/",
-                    });
-                } else if (cloudStorage instanceof GoogleDrive) {
-
-                    sectionDrawerItems.add(new DrawerItem(CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,
-                            CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + "/",
-                            ContextCompat.getDrawable(this, R.drawable.ic_google_drive_white_24dp)));
-
-                    accountAuthenticationList.add(new String[] {
-                            CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,
-                            CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + "/",
-                    });
-                }
-            }
-            Collections.sort(accountAuthenticationList, new BookSorter());
-
-            if (accountAuthenticationList.size() != 0)
-                sectionDrawerItems.add(new DrawerItem(DrawerItem.ITEM_SECTION));
-        }
-
-        if (getPrefs().getBoolean(PreferencesConstants.PREFERENCE_SHOW_SIDEBAR_FOLDERS, true)) {
-            if (dataUtils.getBooks().size() > 0) {
-
-                Collections.sort(dataUtils.getBooks(), new BookSorter());
-
-                synchronized (dataUtils.getBooks()) {
-                    for (String[] file : dataUtils.getBooks()) {
-                        sectionDrawerItems.add(new DrawerItem(file[0], file[1],
-                                ContextCompat.getDrawable(this, R.drawable.ic_folder_white_24dp)));
-                    }
-                }
-                sectionDrawerItems.add(new DrawerItem(DrawerItem.ITEM_SECTION));
-            }
-        }
-
-        Boolean[] quickAccessPref = TinyDB.getBooleanArray(getPrefs(), QuickAccessPref.KEY,
-                QuickAccessPref.DEFAULT);
-
-        if (getPrefs().getBoolean(PreferencesConstants.PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES, true)) {
-            if (quickAccessPref[0])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.quick), "5",
-                        ContextCompat.getDrawable(this, R.drawable.ic_star_white_24dp)));
-            if (quickAccessPref[1])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.recent), "6",
-                        ContextCompat.getDrawable(this, R.drawable.ic_history_white_24dp)));
-            if (quickAccessPref[2])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.images), "0",
-                        ContextCompat.getDrawable(this, R.drawable.ic_photo_library_white_24dp)));
-            if (quickAccessPref[3])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.videos), "1",
-                        ContextCompat.getDrawable(this, R.drawable.ic_video_library_white_24dp)));
-            if (quickAccessPref[4])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.audio), "2",
-                        ContextCompat.getDrawable(this, R.drawable.ic_library_music_white_24dp)));
-            if (quickAccessPref[5])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.documents), "3",
-                        ContextCompat.getDrawable(this, R.drawable.ic_library_books_white_24dp)));
-            if (quickAccessPref[6])
-                sectionDrawerItems.add(new DrawerItem(getResources().getString(R.string.apks), "4",
-                        ContextCompat.getDrawable(this, R.drawable.ic_apk_library_white_24dp)));
-        } else {
-            sectionDrawerItems.remove(sectionDrawerItems.size() - 1); //Deletes last divider
-        }
-
-        sectionDrawerItems.add(new DrawerItem(DrawerItem.ITEM_SECTION));
-
-        sectionDrawerItems.add(new DrawerItem(getString(R.string.ftp),
-                ContextCompat.getDrawable(this, R.drawable.ic_ftp_white_24dp), () -> {
-                    FragmentTransaction transaction2 = getSupportFragmentManager().beginTransaction();
-                    transaction2.replace(R.id.content_frame, new FTPServerFragment());
-                    appBarLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
-                    pending_fragmentTransaction = transaction2;
-                    if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
-                    else onDrawerClosed();
-        }));
-        sectionDrawerItems.add(new DrawerItem(getString(R.string.apps),
-                ContextCompat.getDrawable(this, R.drawable.ic_android_white_24dp), () -> {
-                    FragmentTransaction transaction2 = getSupportFragmentManager().beginTransaction();
-                    transaction2.replace(R.id.content_frame, new AppsListFragment());
-                    appBarLayout.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
-                    pending_fragmentTransaction = transaction2;
-                    if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
-                    else onDrawerClosed();
-        }));
-        sectionDrawerItems.add(new DrawerItem(getString(R.string.setting),
-                ContextCompat.getDrawable(this, R.drawable.ic_settings_white_24dp), () -> {
-                    Intent in = new Intent(MainActivity.this, PreferencesActivity.class);
-                    startActivity(in);
-                    finish();
-        }));
-
-        dataUtils.setDrawerItems(sectionDrawerItems);
-
-        adapter = new DrawerAdapter(this, getUtilsProvider(), sectionDrawerItems, this);
-        mDrawerList.setAdapter(adapter);
+    public FABsMenu getFAB() {
+        return floatingActionButton;
     }
 
     public AppBar getAppbar() {
         return appbar;
     }
 
+    public Drawer getDrawer() {
+        return drawer;
+    }
+
     protected void onActivityResult(int requestCode, int responseCode, Intent intent) {
-        if (requestCode == image_selector_request_code) {
-            if (getPrefs() != null && intent != null && intent.getData() != null) {
-                if (SDK_INT >= Build.VERSION_CODES.KITKAT)
-                    getContentResolver().takePersistableUriPermission(intent.getData(),
-                            Intent.FLAG_GRANT_READ_URI_PERMISSION);
-                getPrefs().edit().putString(PreferencesConstants.PREFERENCE_DRAWER_HEADER_PATH,
-                        intent.getData().toString()).commit();
-                setDrawerHeaderBackground();
-            }
+        if (requestCode == Drawer.image_selector_request_code) {
+            drawer.onActivityResult(requestCode, responseCode, intent);
         } else if (requestCode == 3) {
             Uri treeUri;
             if (responseCode == Activity.RESULT_OK) {
@@ -1660,11 +1349,11 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             // otg access
             getPrefs().edit().putString(KEY_PREF_OTG, intent.getData().toString()).apply();
 
-            if (!isDrawerLocked) mDrawerLayout.closeDrawer(mDrawerLinear);
-            else onDrawerClosed();
+            drawer.closeIfNotLocked();
+            if(drawer.isLocked()) drawer.onDrawerClosed();
         } else if (requestCode == REQUEST_CODE_SAF && responseCode != Activity.RESULT_OK) {
             // otg access not provided
-            pendingPath = null;
+            drawer.resetPendingPath();
         }
     }
 
@@ -1684,48 +1373,14 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         buttonBarFrame = findViewById(R.id.buttonbarframe);
 
         //buttonBarFrame.setBackgroundColor(Color.parseColor(currentTab==1 ? skinTwo : skin));
-        drawerHeaderLayout = getLayoutInflater().inflate(R.layout.drawerheader, null);
-        drawerHeaderParent = (RelativeLayout) drawerHeaderLayout.findViewById(R.id.drawer_header_parent);
-        drawerHeaderView = drawerHeaderLayout.findViewById(R.id.drawer_header);
-        drawerHeaderView.setOnLongClickListener(v -> {
-            Intent intent1;
-            if (SDK_INT < Build.VERSION_CODES.KITKAT) {
-                intent1 = new Intent();
-                intent1.setAction(Intent.ACTION_GET_CONTENT);
-            } else {
-                intent1 = new Intent(Intent.ACTION_OPEN_DOCUMENT);
 
-            }
-            intent1.addCategory(Intent.CATEGORY_OPENABLE);
-            intent1.setType("image/*");
-            startActivityForResult(intent1, image_selector_request_code);
-            return false;
-        });
         setSupportActionBar(getAppbar().getToolbar());
+
+        drawer = new Drawer(this);
+
         frameLayout = findViewById(R.id.content_frame);
         indicator_layout = findViewById(R.id.indicator_layout);
-        mDrawerLinear = findViewById(R.id.left_drawer);
-        if (getAppTheme().equals(AppTheme.DARK)) mDrawerLinear.setBackgroundColor(Utils.getColor(this, R.color.holo_dark_background));
-        else if (getAppTheme().equals(AppTheme.BLACK)) mDrawerLinear.setBackgroundColor(Utils.getColor(this, android.R.color.black));
-        else mDrawerLinear.setBackgroundColor(Color.WHITE);
-        mDrawerLayout = findViewById(R.id.drawer_layout);
-        //mDrawerLayout.setStatusBarBackgroundColor(Color.parseColor((currentTab==1 ? skinTwo : skin)));
-        mDrawerList = findViewById(R.id.menu_drawer);
-        drawerHeaderView.setBackgroundResource(R.drawable.amaze_header);
-        //drawerHeaderParent.setBackgroundColor(Color.parseColor((currentTab==1 ? skinTwo : skin)));
-
-        if (findViewById(R.id.tab_frame) != null) {
-            mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN, mDrawerLinear);
-            mDrawerLayout.setScrimColor(Color.TRANSPARENT);
-            mDrawerLayout.post(() -> mDrawerLayout.openDrawer(mDrawerLinear));
-            isDrawerLocked = true;
-        } else {
-            mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED, mDrawerLinear);
-            mDrawerLayout.post(() -> mDrawerLayout.closeDrawer(mDrawerLinear));
-            isDrawerLocked = false;
-        }
 
-        mDrawerList.addHeaderView(drawerHeaderLayout);
         getSupportActionBar().setDisplayShowTitleEnabled(false);
         fabBgView = findViewById(R.id.fab_bg);
         if (getAppTheme().equals(AppTheme.DARK) || getAppTheme().equals(AppTheme.BLACK)) {
@@ -1736,7 +1391,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             if (getAppbar().getSearchView().isEnabled()) getAppbar().getSearchView().hideSearchView();
         });
 
-        setDrawerHeaderBackground();
+        drawer.setDrawerHeaderBackground();
         //getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor((currentTab==1 ? skinTwo : skin))));
 
         // status bar0
@@ -1746,12 +1401,12 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             //tintManager.setStatusBarTintColor(Color.parseColor((currentTab==1 ? skinTwo : skin)));
             FrameLayout.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) findViewById(R.id.drawer_layout).getLayoutParams();
             SystemBarTintManager.SystemBarConfig config = tintManager.getConfig();
-            if (!isDrawerLocked) p.setMargins(0, config.getStatusBarHeight(), 0, 0);
+            if (!drawer.isLocked()) p.setMargins(0, config.getStatusBarHeight(), 0, 0);
         } else if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             Window window = getWindow();
             window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
             //window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
-            if (isDrawerLocked) {
+            if (drawer.isLocked()) {
                 window.setStatusBarColor((skinStatusBar));
             } else window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
             if (colourednavigation)
@@ -1769,10 +1424,8 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         mainActivity.buttonBarFrame.setBackgroundColor(colorDrawable.getColor());
         // action bar color
         mainActivity.getSupportActionBar().setBackgroundDrawable(colorDrawable);
-        // drawer status bar I guess
-        mainActivity.mDrawerLayout.setStatusBarBackgroundColor(colorDrawable.getColor());
-        // drawer header background
-        mainActivity.drawerHeaderParent.setBackgroundColor(colorDrawable.getColor());
+
+        drawer.setBackgroundColor(colorDrawable.getColor());
 
         if (SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             // for lollipop devices, the status bar color
@@ -1862,33 +1515,6 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         }
     }
 
-    void onDrawerClosed() {
-        if (pending_fragmentTransaction != null) {
-            pending_fragmentTransaction.commit();
-            pending_fragmentTransaction = null;
-        }
-
-        if (pendingPath != null) {
-            HybridFile hFile = new HybridFile(OpenMode.UNKNOWN, pendingPath);
-            hFile.generateMode(this);
-            if (hFile.isSimpleFile()) {
-                FileUtils.openFile(new File(pendingPath), mainActivity, getPrefs());
-                pendingPath = null;
-                return;
-            }
-
-            MainFragment mainFrag = getCurrentMainFragment();
-            if (mainFrag != null) {
-                mainFrag.loadlist(pendingPath, false, OpenMode.UNKNOWN);
-            } else {
-                goToMain(pendingPath);
-                return;
-            }
-            pendingPath = null;
-        }
-        supportInvalidateOptionsMenu();
-    }
-
     public PasteHelper getPaste() {
         return pasteHelper;
     }
@@ -1924,7 +1550,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
             transaction.replace(R.id.content_frame, new ProcessViewerFragment(), KEY_INTENT_PROCESS_VIEWER);
             //   transaction.addToBackStack(null);
-            selectedStorage = DRAWER_SELECTED_PROCESSVIEWER;
+            drawer.setSomethingSelected(true);
             openProcesses = false;
             //title.setText(utils.getString(con, R.string.process_viewer));
             //Commit the transaction
@@ -1938,38 +1564,16 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                 if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {
                     if (getPrefs().getString(KEY_PREF_OTG, null) == null) {
                         getPrefs().edit().putString(KEY_PREF_OTG, VALUE_PREF_OTG_NULL).apply();
-                        refreshDrawer();
+                        drawer.refreshDrawer();
                     }
                 } else if (intent.getAction().equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {
                     getPrefs().edit().putString(KEY_PREF_OTG, null).apply();
-                    refreshDrawer();
+                    drawer.refreshDrawer();
                 }
             }
         }
     }
 
-    void setDrawerHeaderBackground() {
-        String path1 = getPrefs().getString(PreferencesConstants.PREFERENCE_DRAWER_HEADER_PATH,
-                null);
-        if (path1 == null) return;
-        try {
-            final ImageView headerImageView = new ImageView(MainActivity.this);
-            headerImageView.setImageDrawable(drawerHeaderParent.getBackground());
-            mImageLoader.get(path1, new ImageLoader.ImageListener() {
-                @Override
-                public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {
-                    headerImageView.setImageBitmap(response.getBitmap());
-                    drawerHeaderView.setBackgroundResource(R.drawable.amaze_header_2);
-                }
-
-                @Override
-                public void onErrorResponse(VolleyError error) {}
-            });
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
     private BroadcastReceiver receiver2 = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent i) {
@@ -1988,21 +1592,25 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
 
         if (requestCode == 77) {
             if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                refreshDrawer();
+                drawer.refreshDrawer();
                 TabFragment tabFragment = getTabFragment();
                 boolean b = getPrefs().getBoolean(PreferencesConstants.PREFERENCE_NEED_TO_SET_HOME, true);
                 //reset home and current paths according to new storages
                 if (b) {
                     tabHandler.clear();
-                    if (storage_count > 1)
-                        tabHandler.addTab(new Tab(1, dataUtils.getDrawerItems().get(1).path, "/"));
-                    else
+
+                    if (drawer.getStorageCount() > 1) {
+                        tabHandler.addTab(new Tab(1, drawer.getSecondPath(), "/"));
+                    } else {
                         tabHandler.addTab(new Tab(1, "/", "/"));
-                    if (!dataUtils.getDrawerItems().get(0).isSection()) {
-                        String pa = dataUtils.getDrawerItems().get(0).path;
+                    }
+
+                    if (drawer.getFirstPath() != null) {
+                        String pa = drawer.getFirstPath();
                         tabHandler.addTab(new Tab(2, pa, pa));
-                    } else
-                        tabHandler.addTab(new Tab(2, dataUtils.getDrawerItems().get(1).path, "/"));
+                    } else {
+                        tabHandler.addTab(new Tab(2, drawer.getSecondPath(), "/"));
+                    }
                     if (tabFragment != null) {
                         Fragment main = tabFragment.getFragmentAtIndex(0);
                         if (main != null)
@@ -2094,7 +1702,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         if (!edit) {
             if ((dataUtils.containsServer(path)) == -1) {
                 dataUtils.addServer(s);
-                refreshDrawer();
+                drawer.refreshDrawer();
 
                 AppConfig.runInBackground(() -> {
                     utilsHandler.addSmb(name, encryptedPath);
@@ -2117,7 +1725,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             }
             dataUtils.addServer(s);
             Collections.sort(dataUtils.getServers(), new BookSorter());
-            mainActivity.refreshDrawer();
+            drawer.refreshDrawer();
             //mainActivity.grid.addPath(name, encryptedPath, DataUtils.SMB, 1);
         }
     }
@@ -2133,7 +1741,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
                 utilsHandler.removeSmbPath(name, path);
             });
             //grid.removePath(name, path, DataUtils.SMB);
-            refreshDrawer();
+            drawer.refreshDrawer();
         }
 
     }
@@ -2160,8 +1768,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     public void onBookAdded(String[] path, boolean refreshdrawer) {
 
         utilsHandler.addBookmark(path[0], path[1]);
-        if (refreshdrawer)
-            refreshDrawer();
+        if (refreshdrawer) drawer.refreshDrawer();
     }
 
     @Override
@@ -2174,7 +1781,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     public void delete(String title, String path) {
 
         utilsHandler.removeBookmarksPath(title, path);
-        refreshDrawer();
+        drawer.refreshDrawer();
 
     }
 
@@ -2182,7 +1789,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
     public void modify(String oldpath, String oldname, String newPath, String newname) {
 
         utilsHandler.renameBookmark(oldname, oldpath, newname, newPath);
-        refreshDrawer();
+        drawer.refreshDrawer();
     }
 
     @Override
@@ -2244,7 +1851,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
         cloudHandler.clear(service);
         dataUtils.removeAccount(service);
 
-        runOnUiThread(this::refreshDrawer);
+        runOnUiThread(drawer::refreshDrawer);
     }
 
     @Override
@@ -2554,7 +2161,7 @@ public class MainActivity extends ThemedActivity implements OnRequestPermissions
             protected void onPostExecute(Boolean refreshDrawer) {
                 super.onPostExecute(refreshDrawer);
                 if (refreshDrawer) {
-                    refreshDrawer();
+                    drawer.refreshDrawer();
                 }
             }
         }.execute();
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/DrawerAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/DrawerAdapter.java
deleted file mode 100644
index f6f673e7a..000000000
--- a/app/src/main/java/com/amaze/filemanager/adapters/DrawerAdapter.java
+++ /dev/null
@@ -1,249 +0,0 @@
-/*
- * Copyright (C) 2014 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>
- *
- * This file is part of Amaze File Manager.
- *
- * Amaze File Manager is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.amaze.filemanager.adapters;
-
-import android.content.Context;
-import android.graphics.Color;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.NonNull;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AbsListView;
-import android.widget.ArrayAdapter;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.amaze.filemanager.R;
-import com.amaze.filemanager.activities.MainActivity;
-import com.amaze.filemanager.activities.superclasses.ThemedActivity;
-import com.amaze.filemanager.adapters.data.DrawerItem;
-import com.amaze.filemanager.database.CloudHandler;
-import com.amaze.filemanager.filesystem.HybridFile;
-import com.amaze.filemanager.filesystem.Operations;
-import com.amaze.filemanager.filesystem.RootHelper;
-import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
-import com.amaze.filemanager.utils.DataUtils;
-import com.amaze.filemanager.utils.OpenMode;
-import com.amaze.filemanager.utils.Utils;
-import com.amaze.filemanager.utils.cloud.CloudUtil;
-import com.amaze.filemanager.utils.color.ColorUsage;
-import com.amaze.filemanager.utils.provider.UtilitiesProvider;
-import com.amaze.filemanager.utils.theme.AppTheme;
-
-import java.io.File;
-import java.util.ArrayList;
-
-public class DrawerAdapter extends ArrayAdapter<DrawerItem> {
-    public static final int SELECTED_NONE = -1;
-
-    private final Context context;
-    private UtilitiesProvider utilsProvider;
-    private final ArrayList<DrawerItem> values;
-    private MainActivity m;
-    private int selectedItem = SELECTED_NONE;
-    private DataUtils dataUtils = DataUtils.getInstance();
-    private LayoutInflater inflater;
-
-    public DrawerAdapter(Context context, UtilitiesProvider utilsProvider,
-                         ArrayList<DrawerItem> values, MainActivity m) {
-        super(context, R.layout.drawerrow, values);
-        this.utilsProvider = utilsProvider;
-
-        this.context = context;
-        this.values = values;
-
-        selectedItem = SELECTED_NONE;
-        this.m = m;
-        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-    }
-
-    public void toggleChecked(int position) {
-        selectedItem = position;
-        notifyDataSetChanged();
-    }
-
-    public void deselectEverything() {
-        selectedItem = SELECTED_NONE;
-        notifyDataSetChanged();
-    }
-
-    @NonNull
-    @Override
-    public View getView(final int position, View convertView, @NonNull ViewGroup parent) {
-        if (values.get(position).isSection()) {
-            ImageView view = new ImageView(context);
-            if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT))
-                view.setImageResource(R.color.divider);
-            else
-                view.setImageResource(R.color.divider_dark);
-            view.setClickable(false);
-            view.setFocusable(false);
-            if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT))
-                view.setBackgroundColor(Color.WHITE);
-            else if (utilsProvider.getAppTheme().equals(AppTheme.BLACK))
-                view.setBackgroundColor(Color.BLACK);
-            else view.setBackgroundResource(R.color.background_material_dark);
-            view.setLayoutParams(new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, Utils.dpToPx(m, 17)));
-            view.setPadding(0, Utils.dpToPx(m, 8), 0, Utils.dpToPx(m, 8));
-            return view;
-        } else {
-            View view = inflater.inflate(R.layout.drawerrow, parent, false);
-            final TextView txtTitle = (TextView) view.findViewById(R.id.firstline);
-            final ImageView imageView = (ImageView) view.findViewById(R.id.icon);
-            if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT)) {
-                view.setBackgroundResource(R.drawable.safr_ripple_white);
-            } else {
-                view.setBackgroundResource(R.drawable.safr_ripple_black);
-            }
-            view.setOnClickListener(p1 -> {
-                if(getItem(position).type == DrawerItem.ITEM_INTENT) {
-                    getItem(position).onClickListener.onClick();
-                } else {
-                    DrawerItem drawerItem = getItem(position);
-
-                    if (dataUtils.containsBooks(new String[]{drawerItem.title, drawerItem.path}) != -1) {
-
-                        checkForPath(drawerItem.path);
-                    }
-
-                    if (dataUtils.getAccounts().size() > 0 && (drawerItem.path.startsWith(CloudHandler.CLOUD_PREFIX_BOX) ||
-                            drawerItem.path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX) ||
-                            drawerItem.path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE) ||
-                            drawerItem.path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE))) {
-                        // we have cloud accounts, try see if token is expired or not
-                        CloudUtil.checkToken(drawerItem.path, m);
-                    }
-                }
-
-                m.selectItem(position);
-            });
-            view.setOnLongClickListener(v -> {
-                if (!getItem(position).isSection())
-                    // not to remove the first bookmark (storage) and permanent bookmarks
-                    if (position > m.storage_count && position < values.size() - 7) {
-                        DrawerItem drawerItem = getItem(position);
-                        String title = drawerItem.title;
-                        String path = (drawerItem).path;
-                        if (dataUtils.containsBooks(new String[]{drawerItem.title, path}) != -1) {
-                            m.renameBookmark((drawerItem).title, path);
-                        } else if (path.startsWith("smb:/")) {
-                            m.showSMBDialog(drawerItem.title, path, true);
-                        } else if (path.startsWith("ssh:/")) {
-                            m.showSftpDialog(drawerItem.title, path, true);
-                        } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX)) {
-
-                            GeneralDialogCreation.showCloudDialog(m, utilsProvider.getAppTheme(), OpenMode.DROPBOX);
-
-                        } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE)) {
-
-                            GeneralDialogCreation.showCloudDialog(m, utilsProvider.getAppTheme(), OpenMode.GDRIVE);
-
-                        } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_BOX)) {
-
-                            GeneralDialogCreation.showCloudDialog(m, utilsProvider.getAppTheme(), OpenMode.BOX);
-
-                        } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE)) {
-
-                            GeneralDialogCreation.showCloudDialog(m, utilsProvider.getAppTheme(), OpenMode.ONEDRIVE);
-                        }
-                    } else if (position < m.storage_count) {
-                        String path = getItem(position).path;
-                        if (!path.equals("/"))
-                            GeneralDialogCreation.showPropertiesDialogForStorage(RootHelper.generateBaseFile(new File(path), true), m, utilsProvider.getAppTheme());
-                    }
-
-                // return true to denote no further processing
-                return true;
-            });
-
-            txtTitle.setText((values.get(position)).title);
-            imageView.setImageDrawable(getDrawable(position));
-            imageView.clearColorFilter();
-
-            if (selectedItem == position) {
-                int accentColor = m.getColorPreference().getColor(ColorUsage.ACCENT);
-                if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT)) {
-                    view.setBackgroundColor(Color.parseColor("#ffeeeeee"));
-                } else {
-                    view.setBackgroundColor(Color.parseColor("#ff424242"));
-                }
-                imageView.setColorFilter(accentColor);
-                txtTitle.setTextColor(accentColor);
-            } else {
-                if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT)) {
-                    imageView.setColorFilter(Color.parseColor("#666666"));
-                    txtTitle.setTextColor(Utils.getColor(m, android.R.color.black));
-                } else {
-                    imageView.setColorFilter(Color.WHITE);
-                    txtTitle.setTextColor(Utils.getColor(m, android.R.color.white));
-                }
-            }
-
-            return view;
-        }
-    }
-
-    /**
-     * Checks whether path for bookmark exists
-     * If path is not found, empty directory is created
-     *
-     * @param path
-     */
-    private void checkForPath(String path) {
-        // TODO: Add support for SMB and OTG in this function
-        if (!new File(path).exists()) {
-            Toast.makeText(getContext(), getContext().getString(R.string.bookmark_lost), Toast.LENGTH_SHORT).show();
-            Operations.mkdir(RootHelper.generateBaseFile(new File(path), true), getContext(),
-                    ThemedActivity.rootMode, new Operations.ErrorCallBack() {
-                        //TODO empty
-                        @Override
-                        public void exists(HybridFile file) {
-
-                        }
-
-                        @Override
-                        public void launchSAF(HybridFile file) {
-
-                        }
-
-                        @Override
-                        public void launchSAF(HybridFile file, HybridFile file1) {
-
-                        }
-
-                        @Override
-                        public void done(HybridFile hFile, boolean b) {
-
-                        }
-
-                        @Override
-                        public void invalidName(HybridFile file) {
-
-                        }
-                    });
-        }
-    }
-
-    private Drawable getDrawable(int position) {
-        return getItem(position).icon;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/data/DrawerItem.java b/app/src/main/java/com/amaze/filemanager/adapters/data/DrawerItem.java
deleted file mode 100644
index d09d3ab31..000000000
--- a/app/src/main/java/com/amaze/filemanager/adapters/data/DrawerItem.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package com.amaze.filemanager.adapters.data;
-
-import android.graphics.drawable.Drawable;
-
-public final class DrawerItem {
-
-	public static final int ITEM_SECTION = 0, ITEM_ENTRY = 1, ITEM_INTENT = 2;
-
-	public final int type;
-	public final String title;
-	public final String path;
-	public final Drawable icon;
-	public final OnClickListener onClickListener;
-
-	public DrawerItem(int type) {
-	    if(type != ITEM_SECTION) throw new IllegalArgumentException("This constructor is for ITEM_SECTION!");
-	    this.type = type;
-        this.title = null;
-        this.path = null;
-        this.icon = null;
-        this.onClickListener = null;
-	}
-
-    public DrawerItem(String title, String path, Drawable icon) {
-        this.type = ITEM_ENTRY;
-        this.title = title;
-        this.path = path;
-        this.icon = icon;
-        this.onClickListener = null;
-    }
-
-    public DrawerItem(String title, Drawable icon, OnClickListener onClickListener) {
-        this.type = ITEM_INTENT;
-        this.title = title;
-        this.icon = icon;
-        this.onClickListener = onClickListener;
-        this.path = null;
-    }
-
-    public boolean isSection() {
-	    return type == ITEM_SECTION;
-    }
-
-    public interface OnClickListener {
-        void onClick();
-    }
-
-}
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index c007d3d44..460a79566 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -500,10 +500,8 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
             getMainActivity().updateViews(new ColorDrawable(res.getColor(R.color.holo_dark_action_mode)));
 
             // do not allow drawer to open when item gets selected
-            if (!getMainActivity().isDrawerLocked) {
-
-                getMainActivity().mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNDEFINED,
-                        getMainActivity().mDrawerLinear);
+            if (!getMainActivity().getDrawer().isLocked()) {
+                getMainActivity().getDrawer().lock(DrawerLayout.LOCK_MODE_UNDEFINED);
             }
             return true;
         }
@@ -765,9 +763,8 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
             getMainActivity().updateViews(new ColorDrawable(MainActivity.currentTab == 1 ?
                     primaryTwoColor : primaryColor));
 
-            if (!getMainActivity().isDrawerLocked) {
-                getMainActivity().mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED,
-                        getMainActivity().mDrawerLinear);
+            if (!getMainActivity().getDrawer().isLocked()) {
+                getMainActivity().getDrawer().unlock();
             }
         }
     };
@@ -1450,6 +1447,8 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         super.onResume();
         (getActivity()).registerReceiver(receiver2, new IntentFilter(MainActivity.KEY_INTENT_LOAD_LIST));
 
+        getMainActivity().getDrawer().selectCorrectDrawerItemForPath(getPath());
+
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
 
             (getActivity()).registerReceiver(decryptReceiver, new IntentFilter(EncryptDecryptUtils.DECRYPT_BROADCAST));
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/TabFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/TabFragment.java
index c547cff59..6b4f38991 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/TabFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/TabFragment.java
@@ -108,15 +108,15 @@ public class TabFragment extends android.support.v4.app.Fragment
             int i = tabs1.size();
             if (i == 0) {
                 // creating tabs in db for the first time, probably the first launch of app
-                if (mainActivity.storage_count > 1)
-                    addTab(new Tab(1, dataUtils.getDrawerItems().get(1).path, "/"), 1, "");
+                if (mainActivity.getDrawer().getStorageCount() > 1)
+                    addTab(new Tab(1, mainActivity.getDrawer().getSecondPath(), "/"), 1, "");
                 else
-                    addTab(new Tab(1,"/", "/"), 1, "");
-                if (!dataUtils.getDrawerItems().get(0).isSection()) {
-                    String pa = dataUtils.getDrawerItems().get(0).path;
-                    addTab(new Tab(2, pa, pa), 2, "");
+                    addTab(new Tab(1, "/", "/"), 1, "");
+                if (mainActivity.getDrawer().getFirstPath() != null) {
+                    String pa = mainActivity.getDrawer().getFirstPath();
+                    addTab(new Tab(2,  pa, pa), 2, "");
                 } else
-                    addTab(new Tab(2, dataUtils.getDrawerItems().get(1).path, "/"), 2, "");
+                    addTab(new Tab(2, mainActivity.getDrawer().getSecondPath(), "/"), 2, "");
             } else {
                 if (path != null && path.length() != 0) {
                     if (l == 1)
@@ -208,7 +208,7 @@ public class TabFragment extends android.support.v4.app.Fragment
                 if (i - 1 == MainActivity.currentTab && i == pos) {
                     mainActivity.getAppbar().getBottomBar().updatePath(m.getCurrentPath(), m.results,
                             MainActivityHelper.SEARCH_TEXT, m.openMode, m.folder_count, m.file_count, m);
-                    mainActivity.selectCorrectDrawerItemForPath(m.getCurrentPath());
+                    mainActivity.getDrawer().selectCorrectDrawerItemForPath(m.getCurrentPath());
                 }
                 if (m.openMode == OpenMode.FILE) {
                     tabHandler.addTab(new Tab(i, m.getCurrentPath(), m.home));
@@ -285,7 +285,7 @@ public class TabFragment extends android.support.v4.app.Fragment
         if (fragment != null && fragment instanceof MainFragment) {
             MainFragment ma = (MainFragment) fragment;
             if (ma.getCurrentPath() != null) {
-                mainActivity.selectCorrectDrawerItemForPath(ma.getCurrentPath());
+                mainActivity.getDrawer().selectCorrectDrawerItemForPath(ma.getCurrentPath());
                 mainActivity.getAppbar().getBottomBar().updatePath(ma.getCurrentPath(),
                         ma.results, MainActivityHelper.SEARCH_TEXT, ma.openMode,
                         ma.folder_count, ma.file_count, ma);
diff --git a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
index 9aaa02ba4..906d3462d 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/ItemPopupMenu.java
@@ -111,7 +111,7 @@ public class ItemPopupMenu extends PopupMenu implements PopupMenu.OnMenuItemClic
             case R.id.book:
                 DataUtils dataUtils = DataUtils.getInstance();
                 dataUtils.addBook(new String[]{rowItem.title, rowItem.desc}, true);
-                mainFragment.getMainActivity().refreshDrawer();
+                mainFragment.getMainActivity().getDrawer().refreshDrawer();
                 Toast.makeText(mainFragment.getActivity(), mainFragment.getResources().getString(R.string.bookmarksadded), Toast.LENGTH_LONG).show();
                 return true;
             case R.id.delete:
diff --git a/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java b/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
index a9e4ac06a..2bd3f1034 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/dialogs/SftpConnectDialog.java
@@ -44,18 +44,19 @@ import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
 import com.amaze.filemanager.activities.superclasses.BasicActivity;
 import com.amaze.filemanager.database.UtilsHandler;
-import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.filesystem.ssh.SshClientUtils;
 import com.amaze.filemanager.filesystem.ssh.SshConnectionPool;
 import com.amaze.filemanager.filesystem.ssh.tasks.AsyncTaskResult;
+import com.amaze.filemanager.filesystem.ssh.tasks.GetSshHostFingerprintTask;
 import com.amaze.filemanager.filesystem.ssh.tasks.PemToKeyPairTask;
 import com.amaze.filemanager.filesystem.ssh.tasks.SshAuthenticationTask;
-import com.amaze.filemanager.filesystem.ssh.tasks.GetSshHostFingerprintTask;
+import com.amaze.filemanager.fragments.MainFragment;
 import com.amaze.filemanager.utils.BookSorter;
 import com.amaze.filemanager.utils.SimpleTextWatcher;
 import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.OpenMode;
+import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.color.ColorUsage;
 import com.amaze.filemanager.utils.provider.UtilitiesProvider;
 
@@ -225,7 +226,7 @@ public class SftpConnectDialog extends DialogFragment {
                 AppConfig.runInBackground(() -> {
                     utilsHandler.removeSftpPath(connectionName, path);
                 });
-                ((MainActivity) getActivity()).refreshDrawer();
+                ((MainActivity) getActivity()).getDrawer().refreshDrawer();
             }
             dialog.dismiss();
             }).neutralText(R.string.cancel).onNeutral((dialog, which) -> dialog.dismiss());
@@ -320,7 +321,7 @@ public class SftpConnectDialog extends DialogFragment {
 
                     if(DataUtils.getInstance().containsServer(path) == -1) {
                         DataUtils.getInstance().addServer(new String[]{connectionName, path});
-                        ((MainActivity) getActivity()).refreshDrawer();
+                        ((MainActivity) getActivity()).getDrawer().refreshDrawer();
 
                         utilsHandler.addSsh(connectionName, encryptedPath, hostKeyFingerprint,
                                 selectedParsedKeyPairName, getPemContents());
@@ -346,7 +347,7 @@ public class SftpConnectDialog extends DialogFragment {
             DataUtils.getInstance().removeServer(DataUtils.getInstance().containsServer(path));
             DataUtils.getInstance().addServer(new String[]{connectionName, path});
             Collections.sort(DataUtils.getInstance().getServers(), new BookSorter());
-            ((MainActivity) getActivity()).refreshDrawer();
+            ((MainActivity) getActivity()).getDrawer().refreshDrawer();
 
             AppConfig.runInBackground(() -> {
                 utilsHandler.updateSsh(connectionName,
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/ActionViewStateManager.java b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/ActionViewStateManager.java
new file mode 100644
index 000000000..6e8c8622b
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/ActionViewStateManager.java
@@ -0,0 +1,42 @@
+package com.amaze.filemanager.ui.views.drawer;
+
+import android.content.res.ColorStateList;
+import android.support.annotation.ColorInt;
+import android.support.design.widget.NavigationView;
+import android.view.MenuItem;
+import android.widget.ImageButton;
+
+/**
+ * This manages to set the color of the selected ActionView
+ * and unset the ActionView that is not selected anymore
+ */
+public class ActionViewStateManager {
+
+    private ImageButton lastItemSelected = null;
+    private @ColorInt int idleIconColor;
+    private @ColorInt int selectedIconColor;
+
+    public ActionViewStateManager(NavigationView navView, @ColorInt int idleColor,
+                                  @ColorInt int accentColor) {
+        idleIconColor = idleColor;
+        selectedIconColor = accentColor;
+    }
+
+    public void deselectCurrentActionView() {
+        if(lastItemSelected != null) {
+            lastItemSelected.setColorFilter(idleIconColor);
+            lastItemSelected = null;
+        }
+    }
+
+    public void selectActionView(MenuItem item) {
+        if(lastItemSelected != null) {
+            lastItemSelected.setColorFilter(idleIconColor);
+        }
+        if(item.getActionView() != null) {
+            lastItemSelected = (ImageButton) item.getActionView();
+            lastItemSelected.setColorFilter(selectedIconColor);
+        }
+    }
+
+}
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
new file mode 100644
index 000000000..c941928e6
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
@@ -0,0 +1,660 @@
+package com.amaze.filemanager.ui.views.drawer;
+
+import android.content.Intent;
+import android.content.res.ColorStateList;
+import android.content.res.Configuration;
+import android.content.res.Resources;
+import android.graphics.Color;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.ColorInt;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+import android.support.design.widget.NavigationView;
+import android.support.v4.app.ActionBarDrawerToggle;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.widget.DrawerLayout;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.animation.DecelerateInterpolator;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.Toast;
+
+import com.amaze.filemanager.BuildConfig;
+import com.amaze.filemanager.R;
+import com.amaze.filemanager.activities.MainActivity;
+import com.amaze.filemanager.activities.PreferencesActivity;
+import com.amaze.filemanager.database.CloudHandler;
+import com.amaze.filemanager.filesystem.HybridFile;
+import com.amaze.filemanager.filesystem.RootHelper;
+import com.amaze.filemanager.fragments.AppsListFragment;
+import com.amaze.filemanager.fragments.CloudSheetFragment;
+import com.amaze.filemanager.fragments.FTPServerFragment;
+import com.amaze.filemanager.fragments.MainFragment;
+import com.amaze.filemanager.fragments.TabFragment;
+import com.amaze.filemanager.fragments.preference_fragments.PreferencesConstants;
+import com.amaze.filemanager.fragments.preference_fragments.QuickAccessPref;
+import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
+import com.amaze.filemanager.utils.BookSorter;
+import com.amaze.filemanager.utils.DataUtils;
+import com.amaze.filemanager.utils.OTGUtil;
+import com.amaze.filemanager.utils.OpenMode;
+import com.amaze.filemanager.utils.TinyDB;
+import com.amaze.filemanager.utils.Utils;
+import com.amaze.filemanager.utils.application.AppConfig;
+import com.amaze.filemanager.utils.cloud.CloudUtil;
+import com.amaze.filemanager.utils.color.ColorUsage;
+import com.amaze.filemanager.utils.files.FileUtils;
+import com.amaze.filemanager.utils.theme.AppTheme;
+import com.android.volley.VolleyError;
+import com.android.volley.toolbox.ImageLoader;
+import com.cloudrail.si.interfaces.CloudStorage;
+import com.cloudrail.si.services.Box;
+import com.cloudrail.si.services.Dropbox;
+import com.cloudrail.si.services.GoogleDrive;
+import com.cloudrail.si.services.OneDrive;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+
+import eu.chainfire.libsuperuser.Debug;
+
+import static android.os.Build.VERSION.SDK_INT;
+
+/**
+ * @author Emmanuel Messulam <emmanuelbendavid@gmail.com>
+ *         on 26/12/2017, at 23:08.
+ */
+
+public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
+
+    public static final int image_selector_request_code = 31;
+    
+    public static final int STORAGES_GROUP = 0, SERVERS_GROUP = 1, CLOUDS_GROUP = 2, FOLDERS_GROUP = 3,
+                                QUICKACCESSES_GROUP = 4, LASTGROUP = 5;
+    public static final int[] GROUPS = {STORAGES_GROUP, SERVERS_GROUP, CLOUDS_GROUP, FOLDERS_GROUP,
+            QUICKACCESSES_GROUP, LASTGROUP};
+    
+
+    private MainActivity mainActivity;
+    private Resources resources;
+    private DataUtils dataUtils = DataUtils.getInstance();
+
+    private ActionViewStateManager actionViewStateManager;
+    private boolean isSomethingSelected;
+    private volatile int storage_count = 0; // number of storage available (internal/external/otg etc)
+    private boolean isDrawerLocked = false;
+    private FragmentTransaction pending_fragmentTransaction;
+    private String pendingPath;
+    private ImageLoader mImageLoader;
+    private String firstPath = null, secondPath = null;
+
+    private DrawerLayout mDrawerLayout;
+    private ActionBarDrawerToggle mDrawerToggle;
+    private NavigationView navView;
+    private RelativeLayout drawerHeaderParent;
+    private View drawerHeaderLayout, drawerHeaderView;
+
+    public Drawer(MainActivity mainActivity) {
+        this.mainActivity = mainActivity;
+        resources = mainActivity.getResources();
+
+        drawerHeaderLayout = mainActivity.getLayoutInflater().inflate(R.layout.drawerheader, null);
+        drawerHeaderParent = (RelativeLayout) drawerHeaderLayout.findViewById(R.id.drawer_header_parent);
+        drawerHeaderView = drawerHeaderLayout.findViewById(R.id.drawer_header);
+        drawerHeaderView.setOnLongClickListener(v -> {
+            Intent intent1;
+            if (SDK_INT < Build.VERSION_CODES.KITKAT) {
+                intent1 = new Intent();
+                intent1.setAction(Intent.ACTION_GET_CONTENT);
+            } else {
+                intent1 = new Intent(Intent.ACTION_OPEN_DOCUMENT);
+
+            }
+            intent1.addCategory(Intent.CATEGORY_OPENABLE);
+            intent1.setType("image/*");
+            mainActivity.startActivityForResult(intent1, image_selector_request_code);
+            return false;
+        });
+
+        mImageLoader = AppConfig.getInstance().getImageLoader();
+
+        navView = mainActivity.findViewById(R.id.navigation);
+        navView.setNavigationItemSelectedListener(this);
+
+        int accentColor = mainActivity.getColorPreference().getColor(ColorUsage.ACCENT),
+                idleColor;
+
+        if (mainActivity.getAppTheme().equals(AppTheme.LIGHT)) {
+            idleColor = mainActivity.getResources().getColor(R.color.item_light_theme);
+        } else {
+            idleColor = Color.WHITE;
+        }
+
+        actionViewStateManager = new ActionViewStateManager(navView, idleColor, accentColor);
+
+        ColorStateList drawerColors = new ColorStateList(
+                new int[][]{
+                        new int[]{android.R.attr.state_checked},
+                        new int[]{android.R.attr.state_enabled},
+                        new int[]{android.R.attr.state_pressed},
+                        new int[]{android.R.attr.state_focused},
+                        new int[]{android.R.attr.state_pressed}
+                },
+                new int[] {accentColor, idleColor, idleColor, idleColor, idleColor}
+        );
+
+        navView.setItemTextColor(drawerColors);
+        navView.setItemIconTintList(drawerColors);
+
+        if (mainActivity.getAppTheme().equals(AppTheme.DARK)) navView.setBackgroundColor(Utils.getColor(mainActivity, R.color.holo_dark_background));
+        else if (mainActivity.getAppTheme().equals(AppTheme.BLACK)) navView.setBackgroundColor(Utils.getColor(mainActivity, android.R.color.black));
+        else navView.setBackgroundColor(Color.WHITE);
+        mDrawerLayout = mainActivity.findViewById(R.id.drawer_layout);
+        //mDrawerLayout.setStatusBarBackgroundColor(Color.parseColor((currentTab==1 ? skinTwo : skin)));
+        drawerHeaderView.setBackgroundResource(R.drawable.amaze_header);
+        //drawerHeaderParent.setBackgroundColor(Color.parseColor((currentTab==1 ? skinTwo : skin)));
+        if (mainActivity.findViewById(R.id.tab_frame) != null) {
+            lock(DrawerLayout.LOCK_MODE_LOCKED_OPEN);
+            open();
+            mDrawerLayout.setScrimColor(Color.TRANSPARENT);
+            mDrawerLayout.post(this::open);
+        } else if (mainActivity.findViewById(R.id.tab_frame) == null) {
+            unlock();
+            close();
+            mDrawerLayout.post(this::close);
+        }
+        navView.addHeaderView(drawerHeaderLayout);
+
+        if (!isDrawerLocked) {
+            mDrawerToggle = new ActionBarDrawerToggle(
+                    mainActivity,                  /* host Activity */
+                    mDrawerLayout,         /* DrawerLayout object */
+                    R.drawable.ic_drawer_l,  /* nav drawer image to replace 'Up' caret */
+                    R.string.drawer_open,  /* "open drawer" description for accessibility */
+                    R.string.drawer_close  /* "close drawer" description for accessibility */
+            ) {
+                public void onDrawerClosed(View view) {
+                    Drawer.this.onDrawerClosed();
+                }
+
+                public void onDrawerOpened(View drawerView) {
+                    //title.setText("Amaze File Manager");
+                    // creates call to onPrepareOptionsMenu()
+                }
+            };
+            mDrawerLayout.setDrawerListener(mDrawerToggle);
+            mainActivity.getSupportActionBar().setHomeAsUpIndicator(R.drawable.ic_drawer_l);
+            mainActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+            mainActivity.getSupportActionBar().setHomeButtonEnabled(true);
+            mDrawerToggle.syncState();
+        }
+
+    }
+
+
+    public void refreshDrawer() {
+        Menu menu = navView.getMenu();
+        menu.clear();
+        actionViewStateManager.deselectCurrentActionView();
+
+        int order = 0;
+        ArrayList<String> storageDirectories = mainActivity.getStorageDirectories();
+        storage_count = 0;
+        for (String file : storageDirectories) {
+            File f = new File(file);
+            String name;
+            @DrawableRes int icon1 = R.drawable.ic_sd_storage_white_24dp;
+            if ("/storage/emulated/legacy".equals(file) || "/storage/emulated/0".equals(file)) {
+                name = resources.getString(R.string.storage);
+            } else if ("/storage/sdcard1".equals(file)) {
+                name = resources.getString(R.string.extstorage);
+            } else if ("/".equals(file)) {
+                name = resources.getString(R.string.rootdirectory);
+                icon1 = R.drawable.ic_drawer_root_white;
+            } else if (file.contains(OTGUtil.PREFIX_OTG)) {
+                name = "OTG";
+                icon1 = R.drawable.ic_usb_white_24dp;
+            } else name = f.getName();
+            if (!f.isDirectory() || f.canExecute()) {
+                storage_count++;
+                addNewItem(menu, STORAGES_GROUP, order++, name, new MenuMetadata(file), icon1,
+                        R.drawable.ic_show_chart_black_24dp);
+                if(order == 0) firstPath = file;
+                else if(order == 1) secondPath = file;
+            }
+        }
+        dataUtils.setStorages(storageDirectories);
+
+        if (dataUtils.getServers().size() > 0) {
+            Collections.sort(dataUtils.getServers(), new BookSorter());
+            synchronized (dataUtils.getServers()) {
+                for (String[] file : dataUtils.getServers()) {
+                    addNewItem(menu, SERVERS_GROUP, order++, file[0],
+                            new MenuMetadata(file[1]), R.drawable.ic_settings_remote_white_24dp,
+                            R.drawable.ic_edit_24dp);
+                }
+            }
+        }
+
+        ArrayList<String[]> accountAuthenticationList = new ArrayList<>();
+
+        if (CloudSheetFragment.isCloudProviderAvailable(mainActivity)) {
+            for (CloudStorage cloudStorage : dataUtils.getAccounts()) {
+                if (cloudStorage instanceof Dropbox) {
+                    addNewItem(menu, CLOUDS_GROUP, order++, CloudHandler.CLOUD_NAME_DROPBOX,
+                            new MenuMetadata(CloudHandler.CLOUD_PREFIX_DROPBOX + "/"),
+                            R.drawable.ic_dropbox_white_24dp, R.drawable.ic_edit_24dp);
+
+                    accountAuthenticationList.add(new String[] {
+                            CloudHandler.CLOUD_NAME_DROPBOX,
+                            CloudHandler.CLOUD_PREFIX_DROPBOX + "/",
+                    });
+                } else if (cloudStorage instanceof Box) {
+                    addNewItem(menu, CLOUDS_GROUP, order++, CloudHandler.CLOUD_NAME_BOX,
+                            new MenuMetadata(CloudHandler.CLOUD_PREFIX_BOX + "/"),
+                            R.drawable.ic_box_white_24dp, R.drawable.ic_edit_24dp);
+
+                    accountAuthenticationList.add(new String[] {
+                            CloudHandler.CLOUD_NAME_BOX,
+                            CloudHandler.CLOUD_PREFIX_BOX + "/",
+                    });
+                } else if (cloudStorage instanceof OneDrive) {
+                    addNewItem(menu, CLOUDS_GROUP, order++, CloudHandler.CLOUD_NAME_ONE_DRIVE,
+                            new MenuMetadata(CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/"),
+                            R.drawable.ic_onedrive_white_24dp, R.drawable.ic_edit_24dp);
+
+                    accountAuthenticationList.add(new String[] {
+                            CloudHandler.CLOUD_NAME_ONE_DRIVE,
+                            CloudHandler.CLOUD_PREFIX_ONE_DRIVE + "/",
+                    });
+                } else if (cloudStorage instanceof GoogleDrive) {
+                    addNewItem(menu, CLOUDS_GROUP, order++, CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,
+                            new MenuMetadata(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + "/"),
+                            R.drawable.ic_google_drive_white_24dp, R.drawable.ic_edit_24dp);
+
+                    accountAuthenticationList.add(new String[] {
+                            CloudHandler.CLOUD_NAME_GOOGLE_DRIVE,
+                            CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE + "/",
+                    });
+                }
+            }
+            Collections.sort(accountAuthenticationList, new BookSorter());
+        }
+
+        if (mainActivity.getPrefs().getBoolean(PreferencesConstants.PREFERENCE_SHOW_SIDEBAR_FOLDERS, true)) {
+            if (dataUtils.getBooks().size() > 0) {
+
+                Collections.sort(dataUtils.getBooks(), new BookSorter());
+
+                synchronized (dataUtils.getBooks()) {
+                    for (String[] file : dataUtils.getBooks()) {
+                        addNewItem(menu, FOLDERS_GROUP, order++, file[0],
+                                new MenuMetadata(file[1]), R.drawable.ic_folder_white_24dp,
+                                R.drawable.ic_edit_24dp);
+                    }
+                }
+            }
+        }
+
+        Boolean[] quickAccessPref = TinyDB.getBooleanArray(mainActivity.getPrefs(), QuickAccessPref.KEY,
+                QuickAccessPref.DEFAULT);
+
+        if (mainActivity.getPrefs().getBoolean(PreferencesConstants.PREFERENCE_SHOW_SIDEBAR_QUICKACCESSES, true)) {
+            if (quickAccessPref[0]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.quick,
+                        new MenuMetadata("5"), R.drawable.ic_star_white_24dp, null);
+            }
+            if (quickAccessPref[1]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.recent,
+                        new MenuMetadata("6"), R.drawable.ic_history_white_24dp, null);
+            }
+            if (quickAccessPref[2]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.images,
+                        new MenuMetadata("0"), R.drawable.ic_photo_library_white_24dp, null);
+            }
+            if (quickAccessPref[3]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.videos,
+                        new MenuMetadata("1"), R.drawable.ic_video_library_white_24dp, null);
+            }
+            if (quickAccessPref[4]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.audio,
+                        new MenuMetadata("2"), R.drawable.ic_library_music_white_24dp, null);
+            }
+            if (quickAccessPref[5]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.documents,
+                        new MenuMetadata("3"), R.drawable.ic_library_books_white_24dp, null);
+            }
+            if (quickAccessPref[6]) {
+                addNewItem(menu, QUICKACCESSES_GROUP, order++, R.string.apks,
+                        new MenuMetadata("4"), R.drawable.ic_apk_library_white_24dp, null);
+            }
+        }
+
+        addNewItem(menu, LASTGROUP, order++, R.string.ftp,
+                new MenuMetadata(() -> {
+                    FragmentTransaction transaction2 = mainActivity.getSupportFragmentManager().beginTransaction();
+                    transaction2.replace(R.id.content_frame, new FTPServerFragment());
+                    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
+                    pending_fragmentTransaction = transaction2;
+                    if (!isDrawerLocked) close();
+                    else onDrawerClosed();
+                }),
+                R.drawable.ic_ftp_white_24dp, null);
+
+        addNewItem(menu, LASTGROUP, order++, R.string.apps,
+                new MenuMetadata(() -> {
+                    FragmentTransaction transaction2 = mainActivity.getSupportFragmentManager().beginTransaction();
+                    transaction2.replace(R.id.content_frame, new AppsListFragment());
+                    mainActivity.getAppbar().getAppbarLayout().animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();
+                    pending_fragmentTransaction = transaction2;
+                    if (!isDrawerLocked) close();
+                    else onDrawerClosed();
+                }),
+                R.drawable.ic_android_white_24dp, null);
+
+
+        addNewItem(menu, LASTGROUP, order++, R.string.setting,
+                new MenuMetadata(() -> {
+                    Intent in = new Intent(mainActivity, PreferencesActivity.class);
+                    mainActivity.startActivity(in);
+                }),
+                R.drawable.ic_settings_white_24dp, null);
+
+        for(int i = 0; i < navView.getMenu().size(); i++) {
+            navView.getMenu().getItem(i).setEnabled(true);
+        }
+
+        for (int group : GROUPS) {
+            menu.setGroupCheckable(group, true, true);
+        }
+    }
+
+    private void addNewItem(Menu menu, int group, int order, @StringRes int text, MenuMetadata meta,
+                            @DrawableRes int icon, @DrawableRes Integer actionViewIcon) {
+        if(BuildConfig.DEBUG && menu.findItem(order) != null) throw new IllegalStateException("Item already id exists: " + order);
+
+        MenuItem item = menu.add(group, order, order, text).setIcon(icon);
+        dataUtils.putDrawerMetadata(item, meta);
+        if(actionViewIcon != null) {
+            item.setActionView(R.layout.layout_draweractionview);
+
+            ImageView imageView = item.getActionView().findViewById(R.id.imageButton);
+            imageView.setImageResource(actionViewIcon);
+            if (!mainActivity.getAppTheme().equals(AppTheme.LIGHT)) {
+                imageView.setColorFilter(Color.WHITE);
+            }
+
+            item.getActionView().setOnClickListener((view) -> onNavigationItemActionClick(item));
+        }
+    }
+
+    private void addNewItem(Menu menu, int group, int order, String text, MenuMetadata meta,
+                            @DrawableRes int icon, @DrawableRes Integer actionViewIcon) {
+        if(BuildConfig.DEBUG && menu.findItem(order) != null) throw new IllegalStateException("Item already id exists: " + order);
+
+        MenuItem item = menu.add(group, order, order, text).setIcon(icon);
+        dataUtils.putDrawerMetadata(item, meta);
+
+        if(actionViewIcon != null) {
+            item.setActionView(R.layout.layout_draweractionview);
+
+            ImageView imageView = item.getActionView().findViewById(R.id.imageButton);
+            imageView.setImageResource(actionViewIcon);
+            if (!mainActivity.getAppTheme().equals(AppTheme.LIGHT)) {
+                imageView.setColorFilter(Color.WHITE);
+            }
+
+            item.getActionView().setOnClickListener((view) -> onNavigationItemActionClick(item));
+        }
+    }
+
+    public void onActivityResult(int requestCode, int responseCode, Intent intent) {
+        if (mainActivity.getPrefs() != null && intent != null && intent.getData() != null) {
+            if (SDK_INT >= Build.VERSION_CODES.KITKAT)
+                mainActivity.getContentResolver().takePersistableUriPermission(intent.getData(),
+                        Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            mainActivity.getPrefs().edit().putString(PreferencesConstants.PREFERENCE_DRAWER_HEADER_PATH,
+                    intent.getData().toString()).commit();
+            setDrawerHeaderBackground();
+        }
+    }
+
+    public void closeIfNotLocked() {
+        if(!isLocked()) close();
+    }
+
+    public boolean isLocked() {
+        return isDrawerLocked;
+    }
+
+    public boolean isOpen() {
+        return mDrawerLayout.isDrawerOpen(navView);
+    }
+
+    public void open() {
+        mDrawerLayout.openDrawer(navView);
+    }
+
+    public void close() {
+        mDrawerLayout.closeDrawer(navView);
+    }
+
+    public void onDrawerClosed() {
+        if (pending_fragmentTransaction != null) {
+            pending_fragmentTransaction.commit();
+            pending_fragmentTransaction = null;
+        }
+
+        if (pendingPath != null) {
+            HybridFile hFile = new HybridFile(OpenMode.UNKNOWN, pendingPath);
+            hFile.generateMode(mainActivity);
+            if (hFile.isSimpleFile()) {
+                FileUtils.openFile(new File(pendingPath), mainActivity, mainActivity.getPrefs());
+                pendingPath = null;
+                return;
+            }
+
+            MainFragment mainFrag = mainActivity.getCurrentMainFragment();
+            if (mainFrag != null) {
+                mainFrag.loadlist(pendingPath, false, OpenMode.UNKNOWN);
+            } else {
+                mainActivity.goToMain(pendingPath);
+                return;
+            }
+            pendingPath = null;
+        }
+        mainActivity.supportInvalidateOptionsMenu();
+    }
+
+    @Override
+    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
+        actionViewStateManager.deselectCurrentActionView();
+        actionViewStateManager.selectActionView(item);
+        isSomethingSelected = true;
+
+        String title = item.getTitle().toString();
+        MenuMetadata meta = dataUtils.getDrawerMetadata(item);
+
+        switch (meta.type) {
+            case MenuMetadata.ITEM_ENTRY:
+                if (dataUtils.containsBooks(new String[]{title, meta.path}) != -1) {
+                    FileUtils.checkForPath(mainActivity, meta.path);
+                }
+
+                if (dataUtils.getAccounts().size() > 0 && (meta.path.startsWith(CloudHandler.CLOUD_PREFIX_BOX) ||
+                        meta.path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX) ||
+                        meta.path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE) ||
+                        meta.path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE))) {
+                    // we have cloud accounts, try see if token is expired or not
+                    CloudUtil.checkToken(meta.path, mainActivity);
+                }
+
+                pendingPath = meta.path;
+
+                if (meta.path.contains(OTGUtil.PREFIX_OTG) &&
+                        mainActivity.getPrefs().getString(MainActivity.KEY_PREF_OTG, null).equals(MainActivity.VALUE_PREF_OTG_NULL)) {
+                    // we've not gotten otg path yet
+                    // start system request for storage access framework
+                    Toast.makeText(mainActivity, mainActivity.getString(R.string.otg_access), Toast.LENGTH_LONG).show();
+                    Intent safIntent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
+                    mainActivity.startActivityForResult(safIntent, mainActivity.REQUEST_CODE_SAF);
+                } else {
+                    closeIfNotLocked();
+                    if(isLocked()) onDrawerClosed();
+                }
+
+                break;
+            case MenuMetadata.ITEM_INTENT:
+                meta.onClickListener.onClick();
+                break;
+        }
+
+        return true;
+    }
+
+    public void onNavigationItemActionClick(MenuItem item) {
+        String title = item.getTitle().toString();
+        MenuMetadata meta = dataUtils.getDrawerMetadata(item);
+        String path = meta.path;
+
+        switch (item.getGroupId()) {
+            case STORAGES_GROUP:
+                if (!path.equals("/")) {
+                    GeneralDialogCreation.showPropertiesDialogForStorage(
+                            RootHelper.generateBaseFile(new File(path), true),
+                            mainActivity, mainActivity.getAppTheme());
+                }
+                break;
+            // not to remove the first bookmark (storage) and permanent bookmarks
+            case SERVERS_GROUP:
+            case CLOUDS_GROUP:
+            case FOLDERS_GROUP:
+                if (dataUtils.containsBooks(new String[]{title, path}) != -1) {
+                    mainActivity.renameBookmark(title, path);
+                } else if (path.startsWith("smb:/")) {
+                    mainActivity.showSMBDialog(title, path, true);
+                } else if (path.startsWith("ssh:/")) {
+                    mainActivity.showSftpDialog(title, path, true);
+                } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX)) {
+                    GeneralDialogCreation.showCloudDialog(mainActivity, mainActivity.getAppTheme(), OpenMode.DROPBOX);
+                } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE)) {
+                    GeneralDialogCreation.showCloudDialog(mainActivity, mainActivity.getAppTheme(), OpenMode.GDRIVE);
+                } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_BOX)) {
+                    GeneralDialogCreation.showCloudDialog(mainActivity, mainActivity.getAppTheme(), OpenMode.BOX);
+                } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE)) {
+                    GeneralDialogCreation.showCloudDialog(mainActivity, mainActivity.getAppTheme(), OpenMode.ONEDRIVE);
+                }
+        }
+    }
+
+    public boolean isSomethingSelected() {
+        return isSomethingSelected;
+    }
+
+    public void setSomethingSelected(boolean isSelected) {
+        isSomethingSelected = isSelected;
+    }
+
+    public int getStorageCount() {
+        return storage_count;
+    }
+
+    public void setDrawerHeaderBackground() {
+        String path1 = mainActivity.getPrefs().getString(PreferencesConstants.PREFERENCE_DRAWER_HEADER_PATH, null);
+        if (path1 == null) return;
+        try {
+            final ImageView headerImageView = new ImageView(mainActivity);
+            headerImageView.setImageDrawable(drawerHeaderParent.getBackground());
+            mImageLoader.get(path1, new ImageLoader.ImageListener() {
+                @Override
+                public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {
+                    headerImageView.setImageBitmap(response.getBitmap());
+                    drawerHeaderView.setBackgroundResource(R.drawable.amaze_header_2);
+                }
+
+                @Override
+                public void onErrorResponse(VolleyError error) {}
+            });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void selectCorrectDrawerItemForPath(final String path) {
+        Integer id = dataUtils.findLongestContainingDrawerItem(path);
+
+        if(id == null) deselectEverything();
+        else {
+            navView.getMenu().findItem(id).setChecked(true);
+            actionViewStateManager.selectActionView(navView.getMenu().findItem(id));
+        }
+    }
+
+    public void setBackgroundColor(@ColorInt int color) {
+        mDrawerLayout.setStatusBarBackgroundColor(color);
+        drawerHeaderParent.setBackgroundColor(color);
+    }
+
+    public void resetPendingPath() {
+        pendingPath = null;
+    }
+
+    public void syncState() {
+        if (mDrawerToggle != null) mDrawerToggle.syncState();
+    }
+
+    public void onConfigurationChanged(Configuration newConfig) {
+        if (mDrawerToggle != null) mDrawerToggle.onConfigurationChanged(newConfig);
+    }
+
+    public boolean onOptionsItemSelected(MenuItem item) {
+        return mDrawerToggle != null && mDrawerToggle.onOptionsItemSelected(item);
+    }
+
+    public void setDrawerIndicatorEnabled() {
+        if (mDrawerToggle != null) {
+            mDrawerToggle.setDrawerIndicatorEnabled(true);
+            mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_drawer_l);
+        }
+    }
+
+    public void deselectEverything() {
+        actionViewStateManager.deselectCurrentActionView();//If you set the item as checked the listener doesn't trigger
+        if(!isSomethingSelected) return;
+
+        for(int i = 0; i < navView.getMenu().size(); i++) {
+            navView.getMenu().getItem(i).setChecked(false);
+        }
+
+        isSomethingSelected = false;
+    }
+
+    /**
+     * @param mode {@link DrawerLayout#LOCK_MODE_LOCKED_CLOSED},
+     *              {@link DrawerLayout#LOCK_MODE_LOCKED_OPEN}
+     *             or {@link DrawerLayout#LOCK_MODE_UNDEFINED}
+     */
+    public void lock(int mode) {
+        mDrawerLayout.setDrawerLockMode(mode, navView);
+        isDrawerLocked = true;
+    }
+
+    public void unlock() {
+        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED, navView);
+        isDrawerLocked = false;
+    }
+
+    public String getFirstPath() {
+        return firstPath;
+    }
+
+    public String getSecondPath() {
+        return secondPath;
+    }
+}
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/MenuMetadata.java b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/MenuMetadata.java
new file mode 100644
index 000000000..dd14ff501
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/MenuMetadata.java
@@ -0,0 +1,32 @@
+package com.amaze.filemanager.ui.views.drawer;
+
+/**
+ * @author Emmanuel Messulam <emmanuelbendavid@gmail.com>
+ *         on 28/12/2017, at 18:01.
+ */
+
+public final class MenuMetadata {
+
+    public static final int ITEM_ENTRY = 1, ITEM_INTENT = 2;
+
+    public final int type;
+    public final String path;
+    public final OnClickListener onClickListener;
+
+    public MenuMetadata(String path) {
+        this.type = ITEM_ENTRY;
+        this.path = path;
+        this.onClickListener = null;
+    }
+
+    public MenuMetadata(OnClickListener onClickListener) {
+        this.type = ITEM_INTENT;
+        this.onClickListener = onClickListener;
+        this.path = null;
+    }
+
+    public interface OnClickListener {
+        void onClick();
+    }
+
+}
diff --git a/app/src/main/java/com/amaze/filemanager/utils/DataUtils.java b/app/src/main/java/com/amaze/filemanager/utils/DataUtils.java
index b432724bd..a02f845c5 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/DataUtils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/DataUtils.java
@@ -2,7 +2,9 @@ package com.amaze.filemanager.utils;
 
 import android.support.annotation.Nullable;
 
-import com.amaze.filemanager.adapters.data.DrawerItem;
+import android.view.MenuItem;
+
+import com.amaze.filemanager.ui.views.drawer.MenuMetadata;
 import com.amaze.filemanager.utils.application.AppConfig;
 import com.cloudrail.si.interfaces.CloudStorage;
 import com.cloudrail.si.services.Box;
@@ -17,6 +19,7 @@ import com.googlecode.concurrenttrees.radixinverted.InvertedRadixTree;
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -39,8 +42,8 @@ public class DataUtils {
     private LinkedList<String> history = new LinkedList<>();
     private ArrayList<String> storages = new ArrayList<>();
 
-    private ArrayList<DrawerItem> drawerItems = new ArrayList<>();
-    private InvertedRadixTree<Integer> tree;
+    private InvertedRadixTree<Integer> tree = new ConcurrentInvertedRadixTree<>(new DefaultCharArrayNodeFactory());
+    private HashMap<MenuItem, MenuMetadata> menuMetadataMap = new HashMap<>();//Faster HashMap<Integer, V>
 
     private ArrayList<String[]> servers = new ArrayList<>();
     private ArrayList<String[]> books = new ArrayList<>();
@@ -125,6 +128,8 @@ public class DataUtils {
         listfiles = new ArrayList<>();
         history.clear();
         storages = new ArrayList<>();
+        tree = new ConcurrentInvertedRadixTree<>(new DefaultCharArrayNodeFactory());
+        menuMetadataMap.clear();
         servers = new ArrayList<>();
         books = new ArrayList<>();
         accounts = new ArrayList<>();
@@ -376,22 +381,18 @@ public class DataUtils {
         this.storages = storages;
     }
 
-    public ArrayList<DrawerItem> getDrawerItems() {
-        return drawerItems;
+    public MenuMetadata getDrawerMetadata(MenuItem item) {
+        return menuMetadataMap.get(item);
     }
 
-    public synchronized void setDrawerItems(ArrayList<DrawerItem> drawerItems) {
-        tree = new ConcurrentInvertedRadixTree<>(new DefaultCharArrayNodeFactory());
-        for (int i = 0; i < drawerItems.size(); i++) {
-            String path = drawerItems.get(i).path;
-            if(path != null) tree.put(path, i);
-        }
-        this.drawerItems = drawerItems;
+    public void putDrawerMetadata(MenuItem item, MenuMetadata metadata) {
+        menuMetadataMap.put(item, metadata);
+        if(metadata.path != null) tree.put(metadata.path, item.getItemId());
     }
 
     /**
      * @param path the path to find
-     * @return the index of the longest containing DrawerItem in getDrawerItems() or null
+     * @return the id of the longest containing MenuMetadata.path in getDrawerMetadata() or null
      */
     public @Nullable Integer findLongestContainingDrawerItem(CharSequence path) {
         return tree.getValueForLongestKeyPrefixing(path);
diff --git a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
index 09a6a548f..65af018b6 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
@@ -92,13 +92,13 @@ public class MainActivityHelper {
                     String a = intent.getData().getPath();
                     if (a != null && a.trim().length() != 0 && new File(a).exists() && new File(a).canExecute()) {
                         dataUtils.getStorages().add(a);
-                        mainActivity.refreshDrawer();
+                        mainActivity.getDrawer().refreshDrawer();
                     } else {
-                        mainActivity.refreshDrawer();
+                        mainActivity.getDrawer().refreshDrawer();
                     }
                 } else if (intent.getAction().equals(Intent.ACTION_MEDIA_UNMOUNTED)) {
 
-                    mainActivity.refreshDrawer();
+                    mainActivity.getDrawer().refreshDrawer();
                 }
             }
         }
diff --git a/app/src/main/java/com/amaze/filemanager/utils/Utils.java b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
index 4fdf223df..c447b87e1 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/Utils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
@@ -1,5 +1,6 @@
 package com.amaze.filemanager.utils;
 
+import android.app.Activity;
 import android.content.Context;
 import android.content.pm.ActivityInfo;
 import android.content.res.ColorStateList;
@@ -12,6 +13,7 @@ import android.support.v4.content.ContextCompat;
 import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.DisplayMetrics;
 import android.view.View;
+import android.view.Window;
 import android.widget.CheckBox;
 import android.widget.Toast;
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java b/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
index 36db9a698..d9827571a 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/FileUtils.java
@@ -49,20 +49,23 @@ import com.afollestad.materialdialogs.MaterialDialog;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.DatabaseViewerActivity;
 import com.amaze.filemanager.activities.MainActivity;
+import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
+import com.amaze.filemanager.filesystem.Operations;
+import com.amaze.filemanager.filesystem.RootHelper;
 import com.amaze.filemanager.fragments.preference_fragments.PreferencesConstants;
 import com.amaze.filemanager.filesystem.compressed.CompressedHelper;
 import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
 import com.amaze.filemanager.ui.icons.Icons;
 import com.amaze.filemanager.ui.icons.MimeTypes;
-import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.DataUtils;
 import com.amaze.filemanager.utils.OTGUtil;
 import com.amaze.filemanager.utils.OnFileFound;
 import com.amaze.filemanager.utils.OnProgressUpdate;
 import com.amaze.filemanager.utils.OpenMode;
+import com.amaze.filemanager.utils.application.AppConfig;
 import com.amaze.filemanager.utils.cloud.CloudUtil;
 import com.amaze.filemanager.utils.share.ShareTask;
 import com.amaze.filemanager.utils.theme.AppTheme;
@@ -960,4 +963,43 @@ public class FileUtils {
         return b;
     }
 
+    /**
+     * Checks whether path for bookmark exists
+     * If path is not found, empty directory is created
+     */
+    public static void checkForPath(Context context, String path) {
+        // TODO: Add support for SMB and OTG in this function
+        if (!new File(path).exists()) {
+            Toast.makeText(context, context.getString(R.string.bookmark_lost), Toast.LENGTH_SHORT).show();
+            Operations.mkdir(RootHelper.generateBaseFile(new File(path), true), context,
+                    ThemedActivity.rootMode, new Operations.ErrorCallBack() {
+                        //TODO empty
+                        @Override
+                        public void exists(HybridFile file) {
+
+                        }
+
+                        @Override
+                        public void launchSAF(HybridFile file) {
+
+                        }
+
+                        @Override
+                        public void launchSAF(HybridFile file, HybridFile file1) {
+
+                        }
+
+                        @Override
+                        public void done(HybridFile hFile, boolean b) {
+
+                        }
+
+                        @Override
+                        public void invalidName(HybridFile file) {
+
+                        }
+                    });
+        }
+    }
+
 }
