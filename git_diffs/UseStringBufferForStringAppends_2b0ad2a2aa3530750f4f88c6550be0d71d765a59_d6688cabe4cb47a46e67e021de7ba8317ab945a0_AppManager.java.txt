diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.java
deleted file mode 100644
index be33794..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca;
-
-import android.app.Application;
-
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Constants;
-
-import io.realm.Realm;
-import io.realm.RealmConfiguration;
-
-/**
- * Created by simon on 27/02/16.
- */
-public class MyApp extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        Realm.init(this);
-        RealmConfiguration config = new RealmConfiguration.Builder().name(Constants.REALM_DATABASE).schemaVersion(13).build();
-        Realm.setDefaultConfiguration(config);
-    }
-
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.kt
new file mode 100644
index 0000000..fad93d3
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/MyApp.kt
@@ -0,0 +1,22 @@
+package com.inspiredandroid.linuxcommandbibliotheca
+
+import android.app.Application
+
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Constants
+
+import io.realm.Realm
+import io.realm.RealmConfiguration
+
+/**
+ * Created by simon on 27/02/16.
+ */
+class MyApp : Application() {
+
+    override fun onCreate() {
+        super.onCreate()
+        Realm.init(this)
+        val config = RealmConfiguration.Builder().name(Constants.REALM_DATABASE).schemaVersion(13).build()
+        Realm.setDefaultConfiguration(config)
+    }
+
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.java
deleted file mode 100644
index ca26886..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.interfaces;
-
-import java.util.ArrayList;
-
-/**
- * Created by Simon Schubert
- */
-public interface OnConvertFromHtmlToSpannableListener {
-
-    /**
-     * @param spannable
-     */
-    void onConvertHtmlToSpannable(ArrayList<ArrayList<CharSequence>> spannable);
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.kt
new file mode 100644
index 0000000..39ce891
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnConvertFromHtmlToSpannableListener.kt
@@ -0,0 +1,14 @@
+package com.inspiredandroid.linuxcommandbibliotheca.interfaces
+
+import java.util.ArrayList
+
+/**
+ * Created by Simon Schubert
+ */
+interface OnConvertFromHtmlToSpannableListener {
+
+    /**
+     * @param spannable
+     */
+    fun onConvertHtmlToSpannable(spannable: ArrayList<ArrayList<CharSequence>>)
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.java
deleted file mode 100644
index c4b74b7..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.interfaces;
-
-/**
- * Created by Simon Schubert
- */
-public interface OnCraftDatabaseListener {
-
-    /**
-     * Successfully created the database
-     */
-    void onDatabaseCreateSuccess();
-
-    /**
-     * Failed to create database
-     */
-    void onDatabaseCreateFail();
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.kt
new file mode 100644
index 0000000..6e9f619
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnCraftDatabaseListener.kt
@@ -0,0 +1,17 @@
+package com.inspiredandroid.linuxcommandbibliotheca.interfaces
+
+/**
+ * Created by Simon Schubert
+ */
+interface OnCraftDatabaseListener {
+
+    /**
+     * Successfully created the database
+     */
+    fun onDatabaseCreateSuccess()
+
+    /**
+     * Failed to create database
+     */
+    fun onDatabaseCreateFail()
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.java
deleted file mode 100644
index f530ad3..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.interfaces;
-
-/**
- * Created by Simon Schubert
- */
-public interface OnLinkClickListener {
-
-    /**
-     * Clicked
-     */
-    void onLinkClick();
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.kt
new file mode 100644
index 0000000..14edbf5
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnLinkClickListener.kt
@@ -0,0 +1,12 @@
+package com.inspiredandroid.linuxcommandbibliotheca.interfaces
+
+/**
+ * Created by Simon Schubert
+ */
+interface OnLinkClickListener {
+
+    /**
+     * Clicked
+     */
+    fun onLinkClick()
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.java
deleted file mode 100644
index c91efda..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.interfaces;
-
-/**
- * Created by simon on 24/01/17.
- */
-public interface OnListClickListener {
-    void onClick(int id);
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.kt
new file mode 100644
index 0000000..0f82f2d
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/OnListClickListener.kt
@@ -0,0 +1,8 @@
+package com.inspiredandroid.linuxcommandbibliotheca.interfaces
+
+/**
+ * Created by simon on 24/01/17.
+ */
+interface OnListClickListener {
+    fun onClick(id: Int)
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.java
deleted file mode 100644
index af4eef4..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.java
+++ /dev/null
@@ -1,183 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.misc;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import java.util.ArrayList;
-
-/**
- * Created by simon on 29.11.15.
- */
-public class AppManager {
-
-    private static final String KEY_APP_OPEN_COUNT = "KEY_APP_OPEN_COUNT";
-    private static final String KEY_RATING_DIALOG_STATE = "KEY_RATING_DIALOG_STATE";
-    private static final String KEY_BOOKMARKS = "KEY_BOOKMARKS";
-    private static final String KEY_BOOKMARKCHANGED = "KEY_BOOKMARKCHANGED";
-    private static final String KEY_DATABASE_VERSION = "KEY_DATABASE_VERSION";
-    private static final String KEY_HIDE_ADVERTISING = "KEY_HIDE_ADVERTISING";
-    private static final String KEY_NEWS_DIALOG_STATE = "KEY_NEWS_DIALOG_STATE";
-
-    private static int CURRENTDATABSEVERSION = 4;
-
-    public static boolean getHideAdvertising(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        return prefs.getBoolean(KEY_HIDE_ADVERTISING, false);
-    }
-
-    public static void setHideAdvertising(Context context, boolean hide) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor editor = prefs.edit();
-        editor.putBoolean(KEY_HIDE_ADVERTISING, hide);
-        editor.apply();
-    }
-
-    public static boolean isDatabaseVersionUpToDate(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        return prefs.getInt(KEY_DATABASE_VERSION, 0) == CURRENTDATABSEVERSION;
-    }
-
-    public static void setDatabaseVersionUpToDate(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor editor = prefs.edit();
-        editor.putInt(KEY_DATABASE_VERSION, CURRENTDATABSEVERSION);
-        editor.apply();
-    }
-
-    public static boolean shouldShowRateDialog(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        if (prefs.getInt(KEY_RATING_DIALOG_STATE, 0) == 0) {
-
-            SharedPreferences.Editor edit = prefs.edit();
-            edit.putInt(KEY_APP_OPEN_COUNT, prefs.getInt(KEY_APP_OPEN_COUNT, 0) + 1);
-            edit.apply();
-
-            if (prefs.getInt(KEY_APP_OPEN_COUNT, 0) % 10 == 0) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    public static void disableRateDialog(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        SharedPreferences.Editor edit = prefs.edit();
-        edit.putInt(KEY_RATING_DIALOG_STATE, 1);
-        edit.apply();
-    }
-
-    /**
-     * get arraylist of ids
-     *
-     * @param context
-     * @return
-     */
-    public static ArrayList<Long> getBookmarkIds(Context context) {
-        String[] bookmarkIds = getBookmarkIdsChain(context).split(",");
-        ArrayList<Long> ids = new ArrayList<>();
-        for (String id : bookmarkIds) {
-            if (!id.isEmpty()) {
-                ids.add(Long.valueOf(id));
-            }
-        }
-        return ids;
-    }
-
-    /**
-     * get list of ids divided by commas
-     *
-     * @param context
-     * @return
-     */
-    private static String getBookmarkIdsChain(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        String bookmarksChain = prefs.getString(KEY_BOOKMARKS, "");
-        if (!bookmarksChain.isEmpty()) {
-            bookmarksChain = bookmarksChain.substring(1);
-        }
-        return bookmarksChain;
-    }
-
-    /**
-     * ad id to bookmark list
-     *
-     * @param context
-     * @param id
-     */
-    public static void addBookmark(Context context, long id) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        String bookmarksChain = prefs.getString(KEY_BOOKMARKS, "");
-        bookmarksChain += "," + id;
-        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply();
-        bookmarkHasChanged(context);
-    }
-
-    /**
-     * is id bookmarked
-     *
-     * @param context
-     * @param id
-     * @return
-     */
-    public static boolean hasBookmark(Context context, long id) {
-        return getBookmarkIds(context).contains(id);
-    }
-
-    /**
-     * remove id from list
-     *
-     * @param context
-     * @param id
-     */
-    public static void removeBookmark(Context context, long id) {
-        ArrayList<Long> bookmarksIds = getBookmarkIds(context);
-
-        bookmarksIds.remove(id);
-
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        String bookmarksChain = "";
-        for (Long bookmark : bookmarksIds) {
-            bookmarksChain += "," + bookmark;
-        }
-        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply();
-
-        bookmarkHasChanged(context);
-    }
-
-    /**
-     * Set a flag for the list view that the content has changed
-     *
-     * @param context
-     */
-    private static void bookmarkHasChanged(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, true).apply();
-    }
-
-    /**
-     * Reads the flag if bookmark has changed, automatically resets flag
-     *
-     * @param context
-     * @return
-     */
-    public static boolean hasBookmarkChanged(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        boolean changed = prefs.getBoolean(KEY_BOOKMARKCHANGED, false);
-        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, false).apply();
-        return changed;
-    }
-
-    public static boolean shouldShowNewsDialog(Context context) {
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        if (prefs.getInt(KEY_NEWS_DIALOG_STATE, 0) < 1) {
-
-            SharedPreferences.Editor edit = prefs.edit();
-            edit.putInt(KEY_NEWS_DIALOG_STATE, 1);
-            edit.apply();
-
-            return true;
-        }
-        return false;
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.kt
new file mode 100644
index 0000000..7207889
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/AppManager.kt
@@ -0,0 +1,171 @@
+package com.inspiredandroid.linuxcommandbibliotheca.misc
+
+import android.content.Context
+import android.content.SharedPreferences
+import android.preference.PreferenceManager
+
+import java.util.ArrayList
+
+/**
+ * Created by simon on 29.11.15.
+ */
+object AppManager {
+
+    private val KEY_APP_OPEN_COUNT = "KEY_APP_OPEN_COUNT"
+    private val KEY_RATING_DIALOG_STATE = "KEY_RATING_DIALOG_STATE"
+    private val KEY_BOOKMARKS = "KEY_BOOKMARKS"
+    private val KEY_BOOKMARKCHANGED = "KEY_BOOKMARKCHANGED"
+    private val KEY_DATABASE_VERSION = "KEY_DATABASE_VERSION"
+    private val KEY_HIDE_ADVERTISING = "KEY_HIDE_ADVERTISING"
+    private val KEY_NEWS_DIALOG_STATE = "KEY_NEWS_DIALOG_STATE"
+
+    private val CURRENTDATABSEVERSION = 4
+
+    fun isDatabaseVersionUpToDate(context: Context): Boolean {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        return prefs.getInt(KEY_DATABASE_VERSION, 0) == CURRENTDATABSEVERSION
+    }
+
+    fun setDatabaseVersionUpToDate(context: Context) {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        val editor = prefs.edit()
+        editor.putInt(KEY_DATABASE_VERSION, CURRENTDATABSEVERSION)
+        editor.apply()
+    }
+
+    fun shouldShowRateDialog(context: Context): Boolean {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        if (prefs.getInt(KEY_RATING_DIALOG_STATE, 0) == 0) {
+
+            val edit = prefs.edit()
+            edit.putInt(KEY_APP_OPEN_COUNT, prefs.getInt(KEY_APP_OPEN_COUNT, 0) + 1)
+            edit.apply()
+
+            if (prefs.getInt(KEY_APP_OPEN_COUNT, 0) % 10 == 0) {
+                return true
+            }
+        }
+        return false
+    }
+
+    fun disableRateDialog(context: Context) {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        val edit = prefs.edit()
+        edit.putInt(KEY_RATING_DIALOG_STATE, 1)
+        edit.apply()
+    }
+
+    /**
+     * get arraylist of ids
+     *
+     * @param context
+     * @return
+     */
+    fun getBookmarkIds(context: Context): ArrayList<Long> {
+        val bookmarkIds = getBookmarkIdsChain(context).split(",".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
+        val ids = ArrayList<Long>()
+        for (id in bookmarkIds) {
+            if (!id.isEmpty()) {
+                ids.add(java.lang.Long.valueOf(id))
+            }
+        }
+        return ids
+    }
+
+    /**
+     * get list of ids divided by commas
+     *
+     * @param context
+     * @return
+     */
+    private fun getBookmarkIdsChain(context: Context): String {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        var bookmarksChain = prefs.getString(KEY_BOOKMARKS, "")
+        if (!bookmarksChain!!.isEmpty()) {
+            bookmarksChain = bookmarksChain.substring(1)
+        }
+        return bookmarksChain
+    }
+
+    /**
+     * ad id to bookmark list
+     *
+     * @param context
+     * @param id
+     */
+    fun addBookmark(context: Context, id: Long) {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        var bookmarksChain = prefs.getString(KEY_BOOKMARKS, "")
+        bookmarksChain += ",$id"
+        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply()
+        bookmarkHasChanged(context)
+    }
+
+    /**
+     * is id bookmarked
+     *
+     * @param context
+     * @param id
+     * @return
+     */
+    fun hasBookmark(context: Context, id: Long): Boolean {
+        return getBookmarkIds(context).contains(id)
+    }
+
+    /**
+     * remove id from list
+     *
+     * @param context
+     * @param id
+     */
+    fun removeBookmark(context: Context, id: Long) {
+        val bookmarksIds = getBookmarkIds(context)
+
+        bookmarksIds.remove(id)
+
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        var bookmarksChain = ""
+        for (bookmark in bookmarksIds) {
+            bookmarksChain += ",$bookmark"
+        }
+        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply()
+
+        bookmarkHasChanged(context)
+    }
+
+    /**
+     * Set a flag for the list view that the content has changed
+     *
+     * @param context
+     */
+    private fun bookmarkHasChanged(context: Context) {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, true).apply()
+    }
+
+    /**
+     * Reads the flag if bookmark has changed, automatically resets flag
+     *
+     * @param context
+     * @return
+     */
+    fun hasBookmarkChanged(context: Context): Boolean {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        val changed = prefs.getBoolean(KEY_BOOKMARKCHANGED, false)
+        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, false).apply()
+        return changed
+    }
+
+    fun shouldShowNewsDialog(context: Context): Boolean {
+        val prefs = PreferenceManager.getDefaultSharedPreferences(context)
+        if (prefs.getInt(KEY_NEWS_DIALOG_STATE, 0) < 1) {
+
+            val edit = prefs.edit()
+            edit.putInt(KEY_NEWS_DIALOG_STATE, 1)
+            edit.apply()
+
+            return true
+        }
+        return false
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.java
deleted file mode 100644
index 50c9c06..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.misc;
-
-/**
- * Created by simon on 27/02/16.
- */
-public class Constants {
-
-    public final static String REALM_DATABASE = "database.realm";
-
-    public static final int SECTION_USERCOMMANDS = 1;
-    public static final int SECTION_SYSTEMCALLS = 2;
-    public static final int SECTION_GAMES = 6;
-    public static final int SECTION_MISSCELANOUS = 7;
-    public static final int SECTION_SYSTEMADMINANDDEAMON = 8;
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.kt
new file mode 100644
index 0000000..e4b36b9
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Constants.kt
@@ -0,0 +1,15 @@
+package com.inspiredandroid.linuxcommandbibliotheca.misc
+
+/**
+ * Created by simon on 27/02/16.
+ */
+object Constants {
+
+    val REALM_DATABASE = "database.realm"
+
+    val SECTION_USERCOMMANDS = 1
+    val SECTION_SYSTEMCALLS = 2
+    val SECTION_GAMES = 6
+    val SECTION_MISSCELANOUS = 7
+    val SECTION_SYSTEMADMINANDDEAMON = 8
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
deleted file mode 100644
index 9b9e4a3..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.misc;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-import com.inspiredandroid.linuxcommandbibliotheca.ScriptChildrenActivity;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.BasicChildrenFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandManFragment;
-import com.inspiredandroid.linuxcommandbibliotheca.models.Command;
-
-import io.realm.Realm;
-
-/**
- * Created by simon on 25/01/17.
- */
-public class FragmentCoordinator {
-
-    public static void startScriptCategoryActivity(FragmentActivity activity, int category) {
-        if (!isTabletLayout(activity)) {
-            Intent intent = new Intent(activity, ScriptChildrenActivity.class);
-            intent.putExtra(ScriptChildrenActivity.Companion.getEXTRA_CATEGORY_ID(), category);
-            activity.startActivity(intent);
-        } else {
-            View container = activity.findViewById(R.id.fragment_container_secondary);
-            ((ViewGroup) container).removeAllViews();
-
-            activity.getIntent().putExtra(ScriptChildrenActivity.Companion.getEXTRA_CATEGORY_ID(), category);
-
-            Fragment fragment = new BasicChildrenFragment();
-
-            FragmentManager fragmentManager = activity.getSupportFragmentManager();
-            FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-            fragmentTransaction.replace(R.id.fragment_container_secondary, fragment);
-            fragmentTransaction.commitAllowingStateLoss();
-        }
-    }
-
-    public static void startCommandManActivity(FragmentActivity activity, long id) {
-        if (!isTabletLayout(activity)) {
-            Intent intent = new Intent(activity, CommandManActivity.class);
-            intent.putExtra(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
-            activity.startActivity(intent);
-        } else {
-            View container = activity.findViewById(R.id.fragment_container_secondary);
-            ((ViewGroup) container).removeAllViews();
-
-            Realm realm = Realm.getDefaultInstance();
-
-            Command command = realm.where(Command.class).equalTo(Command.Companion.getID(), id).findFirst();
-            String name = command.getName().toUpperCase();
-            int category = command.getCategory();
-
-            realm.close();
-
-            showManFragmentInSecondaryFrame(activity, name, id, category);
-        }
-    }
-
-    public static void startCommandManActivity(FragmentActivity activity, String name) {
-        Realm realm = Realm.getDefaultInstance();
-        Command command = realm.where(Command.class).equalTo(Command.Companion.getNAME(), name).findFirst();
-        if(command == null) {
-            realm.close();
-            return;
-        }
-        long id = command.getId();
-        int category = command.getCategory();
-        realm.close();
-
-        if (!isTabletLayout(activity)) {
-            Intent intent = new Intent(activity, CommandManActivity.class);
-            intent.putExtra(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
-            activity.startActivity(intent);
-        } else {
-            View container = activity.findViewById(R.id.fragment_container_secondary);
-            ((ViewGroup) container).removeAllViews();
-
-            showManFragmentInSecondaryFrame(activity, name, id, category);
-        }
-    }
-
-    /**
-     * @param name     command name
-     * @param id       unique command id
-     * @param category command category
-     */
-    private static void showManFragmentInSecondaryFrame(FragmentActivity activity, String name, long id, int category) {
-        Fragment fragment = new CommandManFragment();
-
-        // Add unique command ID for fragment
-        Bundle bundle = new Bundle();
-        bundle.putLong(CommandManActivity.Companion.getEXTRA_COMMAND_ID(), id);
-        bundle.putString(CommandManActivity.Companion.getEXTRA_COMMAND_NAME(), name);
-        bundle.putInt(CommandManActivity.Companion.getEXTRA_COMMAND_CATEGORY(), category);
-        fragment.setArguments(bundle);
-
-        FragmentManager fragmentManager = activity.getSupportFragmentManager();
-        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-
-        fragmentTransaction.replace(R.id.fragment_container_secondary, fragment);
-        fragmentTransaction.commitAllowingStateLoss();
-    }
-
-    public static boolean isTabletLayout(Activity activity) {
-        return activity.findViewById(R.id.fragment_container_secondary) != null;
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.kt
new file mode 100644
index 0000000..57a2383
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/FragmentCoordinator.kt
@@ -0,0 +1,117 @@
+package com.inspiredandroid.linuxcommandbibliotheca.misc
+
+import android.app.Activity
+import android.content.Intent
+import android.os.Bundle
+import android.support.v4.app.Fragment
+import android.support.v4.app.FragmentActivity
+import android.support.v4.app.FragmentManager
+import android.support.v4.app.FragmentTransaction
+import android.view.View
+import android.view.ViewGroup
+
+import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity
+import com.inspiredandroid.linuxcommandbibliotheca.R
+import com.inspiredandroid.linuxcommandbibliotheca.ScriptChildrenActivity
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.BasicChildrenFragment
+import com.inspiredandroid.linuxcommandbibliotheca.fragments.CommandManFragment
+import com.inspiredandroid.linuxcommandbibliotheca.models.Command
+
+import io.realm.Realm
+
+/**
+ * Created by simon on 25/01/17.
+ */
+object FragmentCoordinator {
+
+    fun startScriptCategoryActivity(activity: FragmentActivity, category: Int) {
+        if (!isTabletLayout(activity)) {
+            val intent = Intent(activity, ScriptChildrenActivity::class.java)
+            intent.putExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, category)
+            activity.startActivity(intent)
+        } else {
+            val container = activity.findViewById<View>(R.id.fragment_container_secondary)
+            (container as ViewGroup).removeAllViews()
+
+            activity.intent.putExtra(ScriptChildrenActivity.EXTRA_CATEGORY_ID, category)
+
+            val fragment = BasicChildrenFragment()
+
+            val fragmentManager = activity.supportFragmentManager
+            val fragmentTransaction = fragmentManager.beginTransaction()
+
+            fragmentTransaction.replace(R.id.fragment_container_secondary, fragment)
+            fragmentTransaction.commitAllowingStateLoss()
+        }
+    }
+
+    fun startCommandManActivity(activity: FragmentActivity, id: Long) {
+        if (!isTabletLayout(activity)) {
+            val intent = Intent(activity, CommandManActivity::class.java)
+            intent.putExtra(CommandManActivity.EXTRA_COMMAND_ID, id)
+            activity.startActivity(intent)
+        } else {
+            val container = activity.findViewById<View>(R.id.fragment_container_secondary)
+            (container as ViewGroup).removeAllViews()
+
+            val realm = Realm.getDefaultInstance()
+
+            val command = realm.where(Command::class.java).equalTo(Command.ID, id).findFirst()
+            val name = command!!.name!!.toUpperCase()
+            val category = command.category
+
+            realm.close()
+
+            showManFragmentInSecondaryFrame(activity, name, id, category)
+        }
+    }
+
+    fun startCommandManActivity(activity: FragmentActivity, name: String) {
+        val realm = Realm.getDefaultInstance()
+        val command = realm.where(Command::class.java).equalTo(Command.NAME, name).findFirst()
+        if (command == null) {
+            realm.close()
+            return
+        }
+        val id = command.id.toLong()
+        val category = command.category
+        realm.close()
+
+        if (!isTabletLayout(activity)) {
+            val intent = Intent(activity, CommandManActivity::class.java)
+            intent.putExtra(CommandManActivity.EXTRA_COMMAND_ID, id)
+            activity.startActivity(intent)
+        } else {
+            val container = activity.findViewById<View>(R.id.fragment_container_secondary)
+            (container as ViewGroup).removeAllViews()
+
+            showManFragmentInSecondaryFrame(activity, name, id, category)
+        }
+    }
+
+    /**
+     * @param name     command name
+     * @param id       unique command id
+     * @param category command category
+     */
+    private fun showManFragmentInSecondaryFrame(activity: FragmentActivity, name: String, id: Long, category: Int) {
+        val fragment = CommandManFragment()
+
+        // Add unique command ID for fragment
+        val bundle = Bundle()
+        bundle.putLong(CommandManActivity.EXTRA_COMMAND_ID, id)
+        bundle.putString(CommandManActivity.EXTRA_COMMAND_NAME, name)
+        bundle.putInt(CommandManActivity.EXTRA_COMMAND_CATEGORY, category)
+        fragment.arguments = bundle
+
+        val fragmentManager = activity.supportFragmentManager
+        val fragmentTransaction = fragmentManager.beginTransaction()
+
+        fragmentTransaction.replace(R.id.fragment_container_secondary, fragment)
+        fragmentTransaction.commitAllowingStateLoss()
+    }
+
+    fun isTabletLayout(activity: Activity): Boolean {
+        return activity.findViewById<View>(R.id.fragment_container_secondary) != null
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.java
deleted file mode 100644
index 76a5af1..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.misc;
-
-import android.content.Context;
-import android.graphics.Typeface;
-
-public class TypefaceUtils {
-
-    private static Typeface typeface;
-
-    /**
-     * Get typeface by filename from assets main directory
-     *
-     * @param context
-     * @return
-     */
-    public static Typeface getTypeFace(final Context context) {
-        if (typeface == null) {
-            typeface = Typeface.createFromAsset(context.getAssets(), "ShareTechMono-Regular.ttf");
-        }
-        return typeface;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.kt
new file mode 100644
index 0000000..bf3dc39
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/TypefaceUtils.kt
@@ -0,0 +1,22 @@
+package com.inspiredandroid.linuxcommandbibliotheca.misc
+
+import android.content.Context
+import android.graphics.Typeface
+
+object TypefaceUtils {
+
+    private var typeface: Typeface? = null
+
+    /**
+     * Get typeface by filename from assets main directory
+     *
+     * @param context
+     * @return
+     */
+    fun getTypeFace(context: Context): Typeface {
+        if (typeface == null) {
+            typeface = Typeface.createFromAsset(context.assets, "ShareTechMono-Regular.ttf")
+        }
+        return typeface!!
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.java
deleted file mode 100644
index 276ce87..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.misc;
-
-import android.content.Context;
-import android.content.pm.PackageManager;
-import android.support.v4.content.ContextCompat;
-import android.text.Spannable;
-import android.text.SpannableString;
-import android.text.style.ForegroundColorSpan;
-
-import com.inspiredandroid.linuxcommandbibliotheca.R;
-
-import java.text.Normalizer;
-
-/**
- * Created by Simon Schubert
- */
-public class Utils {
-
-    public final static String PACKAGE_BURGER = "com.inspiredandroid.stopandroll";
-    public final static String PACKAGE_LINUXREMOTE = "com.inspiredandroid.linuxcontrolcenter";
-    public final static String PACKAGE_LINUXREMOTE_PRO = "com.inspiredandroid.linuxcontrolcenterpro";
-    public static final String PACKAGE_ORCGENOCIDE = "com.inspiredandroid.orcgenocide";
-    public static final String PACKAGE_BIMO = "com.inspiredandroid.bimo";
-    public static final String PACKAGE_QUIZ = "com.inspiredandroid.twoplayerquiz";
-    public static final String PACKAGE_COMMANDLIBRARY = "com.inspiredandroid.linuxcommandbibliotheca";
-
-    /**
-     * Check if app is installed
-     *
-     * @param packageName
-     * @return
-     */
-    public static boolean isAppInstalled(Context context, String packageName) {
-        PackageManager pm = context.getPackageManager();
-        boolean installed;
-        try {
-            pm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);
-            installed = true;
-        } catch (PackageManager.NameNotFoundException e) {
-            installed = false;
-        }
-        return installed;
-    }
-
-    /**
-     * Highlight the the appearance of search query inside originalText
-     *
-     * @param context
-     * @param query
-     * @param originalText
-     * @return
-     */
-    public static CharSequence highlightQueryInsideText(Context context, String query, String originalText) {
-        if (query.isEmpty() || originalText.isEmpty()) {
-            return originalText;
-        }
-
-        // ignore case and accents
-        // the same thing should have been done for the search text
-        String normalizedText = Normalizer.normalize(originalText, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
-        Spannable highlighted = new SpannableString(originalText);
-
-        for (String subSearchQuery : query.split("[,\\s]+")) {
-            int start = normalizedText.indexOf(subSearchQuery);
-            while (start >= 0) {
-                int spanStart = Math.min(start, originalText.length());
-                int spanEnd = Math.min(start + subSearchQuery.length(), originalText.length());
-
-                if(spanStart == -1 || spanEnd == -1) {
-                    break;
-                }
-
-                highlighted.setSpan(new ForegroundColorSpan(ContextCompat.getColor(context, R.color.ab_primary)), spanStart, spanEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
-
-                start = normalizedText.indexOf(subSearchQuery, spanEnd);
-            }
-        }
-
-        return highlighted;
-    }
-}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.kt
new file mode 100644
index 0000000..a99bd84
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/misc/Utils.kt
@@ -0,0 +1,82 @@
+package com.inspiredandroid.linuxcommandbibliotheca.misc
+
+import android.content.Context
+import android.content.pm.PackageManager
+import android.support.v4.content.ContextCompat
+import android.text.Spannable
+import android.text.SpannableString
+import android.text.style.ForegroundColorSpan
+
+import com.inspiredandroid.linuxcommandbibliotheca.R
+
+import java.text.Normalizer
+
+/**
+ * Created by Simon Schubert
+ */
+object Utils {
+
+    val PACKAGE_BURGER = "com.inspiredandroid.stopandroll"
+    val PACKAGE_LINUXREMOTE = "com.inspiredandroid.linuxcontrolcenter"
+    val PACKAGE_LINUXREMOTE_PRO = "com.inspiredandroid.linuxcontrolcenterpro"
+    val PACKAGE_ORCGENOCIDE = "com.inspiredandroid.orcgenocide"
+    val PACKAGE_BIMO = "com.inspiredandroid.bimo"
+    val PACKAGE_QUIZ = "com.inspiredandroid.twoplayerquiz"
+    val PACKAGE_COMMANDLIBRARY = "com.inspiredandroid.linuxcommandbibliotheca"
+
+    /**
+     * Check if app is installed
+     *
+     * @param packageName
+     * @return
+     */
+    fun isAppInstalled(context: Context, packageName: String): Boolean {
+        val pm = context.packageManager
+        var installed: Boolean
+        try {
+            pm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES)
+            installed = true
+        } catch (e: PackageManager.NameNotFoundException) {
+            installed = false
+        }
+
+        return installed
+    }
+
+    /**
+     * Highlight the the appearance of search query inside originalText
+     *
+     * @param context
+     * @param query
+     * @param originalText
+     * @return
+     */
+    fun highlightQueryInsideText(context: Context, query: String, originalText: String): CharSequence {
+        if (query.isEmpty() || originalText.isEmpty()) {
+            return originalText
+        }
+
+        // ignore case and accents
+        // the same thing should have been done for the search text
+        val normalizedText = Normalizer.normalize(originalText, Normalizer.Form.NFD).replace("\\p{InCombiningDiacriticalMarks}+".toRegex(), "").toLowerCase()
+        val highlighted = SpannableString(originalText)
+
+        for (subSearchQuery in query.split("[,\\s]+".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()) {
+            var start = normalizedText.indexOf(subSearchQuery)
+            while (start >= 0) {
+                val spanStart = Math.min(start, originalText.length)
+                val spanEnd = Math.min(start + subSearchQuery.length, originalText.length)
+
+                if (spanStart == -1 || spanEnd == -1) {
+                    break
+                }
+
+                highlighted.setSpan(ForegroundColorSpan(ContextCompat.getColor(context, R.color.ab_primary)), spanStart, spanEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)
+
+                start = normalizedText.indexOf(subSearchQuery, spanEnd)
+            }
+        }
+
+        return highlighted
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt
index 47c52a3..e3fdccd 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/view/AdView.kt
@@ -29,7 +29,7 @@ class AdView : AppCompatImageView {
 
     private fun init() {
         // Hide ads if remote is already installed
-        if (AppManager.getHideAdvertising(context) || Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE) || Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE_PRO)) {
+        if (Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE) || Utils.isAppInstalled(context, Utils.PACKAGE_LINUXREMOTE_PRO)) {
             visibility = View.GONE
         } else {
             setOnClickListener { view -> startRemoteControl() }
