diff --git a/src/lbms/plugins/mldht/kad/Key.java b/src/lbms/plugins/mldht/kad/Key.java
index e415002..b739ae7 100644
--- a/src/lbms/plugins/mldht/kad/Key.java
+++ b/src/lbms/plugins/mldht/kad/Key.java
@@ -132,10 +132,14 @@ public class Key implements Radixable<Key> {
 		if(mmi == -1)
 			return 0;
 		
+		//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 		int h = Byte.toUnsignedInt(h0[mmi]);
+		//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 		int a = Byte.toUnsignedInt(h1[mmi]);
+		//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 		int b = Byte.toUnsignedInt(h2[mmi]);
-		
+
+		//noinspection newapi: L$r8$backportedMethods$utility$Integer$2$compareUnsigned;->compareUnsigned(II)I
 		return Integer.compareUnsigned(a ^ h, b ^ h);
 	}
 
@@ -172,6 +176,7 @@ public class Key implements Radixable<Key> {
 	
 	public int getInt(int offset) {
 		byte[] hash = this.hash;
+		//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 		return Byte.toUnsignedInt(hash[offset]) << 24 | Byte.toUnsignedInt(hash[offset+1]) << 16 | Byte.toUnsignedInt(hash[offset+2]) << 8 | Byte.toUnsignedInt(hash[offset+3]);
 	}
 	
@@ -278,6 +283,7 @@ public class Key implements Radixable<Key> {
 		int carry = 0;
 		Key out = new Key(this);
 		for(int i=19;i>=0;i--) {
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 			carry = Byte.toUnsignedInt(out.hash[i]) + Byte.toUnsignedInt(x.hash[i]) + carry;
 			out.hash[i] = (byte)(carry & 0xff);
 			carry >>>= 8;
diff --git a/src/lbms/plugins/mldht/kad/NodeList.java b/src/lbms/plugins/mldht/kad/NodeList.java
index 1caa44c..d61855c 100644
--- a/src/lbms/plugins/mldht/kad/NodeList.java
+++ b/src/lbms/plugins/mldht/kad/NodeList.java
@@ -75,6 +75,7 @@ public interface NodeList {
 					
 					buf.get(rawId);
 					buf.get(rawAddr);
+					//noinspection newapi: L$r8$backportedMethods$utility$Short$1$toUnsignedInt;->toUnsignedInt(S)I
 					int port = Short.toUnsignedInt(buf.getShort());
 					
 					InetAddress addr = unchecked(() -> AddressUtils.fromBytesVerbatim(rawAddr));
diff --git a/src/lbms/plugins/mldht/kad/Prefix.java b/src/lbms/plugins/mldht/kad/Prefix.java
index 739f6a0..c9fad9c 100644
--- a/src/lbms/plugins/mldht/kad/Prefix.java
+++ b/src/lbms/plugins/mldht/kad/Prefix.java
@@ -114,6 +114,7 @@ public class Prefix extends Key {
 		
 		boolean lastByteDiff = (diff & (0xff80 >>> (n & 0x07))) == 0;
 		
+		//noinspection newapi
 		return mmi == lastToCheck ? lastByteDiff : Integer.compareUnsigned(mmi, lastToCheck) > 0;
 	}
 	
diff --git a/src/lbms/plugins/mldht/kad/utils/AddressUtils.java b/src/lbms/plugins/mldht/kad/utils/AddressUtils.java
index 247dd3e..95649a2 100644
--- a/src/lbms/plugins/mldht/kad/utils/AddressUtils.java
+++ b/src/lbms/plugins/mldht/kad/utils/AddressUtils.java
@@ -118,6 +118,7 @@ public class AddressUtils {
 		int i = 0;
 		while(buf.hasRemaining()) {
 			buf.get(ip);
+			//noinspection newapi: L$r8$backportedMethods$utility$Short$1$toUnsignedInt;->toUnsignedInt(S)I
 			addrs[i] = new InetSocketAddress(unchecked(() -> AddressUtils.fromBytesVerbatim(ip)), Short.toUnsignedInt(buf.getShort()));
 			i++;
 		}
diff --git a/src/lbms/plugins/mldht/kad/utils/PackUtil.java b/src/lbms/plugins/mldht/kad/utils/PackUtil.java
index ee25498..6508831 100644
--- a/src/lbms/plugins/mldht/kad/utils/PackUtil.java
+++ b/src/lbms/plugins/mldht/kad/utils/PackUtil.java
@@ -70,6 +70,7 @@ public class PackUtil {
 		//UnknownHostException shouldn't occur since IP is provided
 		try {
 
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 			addr = new InetSocketAddress(InetAddress.getByAddress(inetaddr), Short.toUnsignedInt(bb.getShort()));
 		} catch (UnknownHostException e) {
 			e.printStackTrace();
diff --git a/src/the8472/bt/PullMetaDataConnection.java b/src/the8472/bt/PullMetaDataConnection.java
index 54c4a31..d84781a 100644
--- a/src/the8472/bt/PullMetaDataConnection.java
+++ b/src/the8472/bt/PullMetaDataConnection.java
@@ -442,6 +442,7 @@ public class PullMetaDataConnection implements Selectable {
 			}
 			
 			if(msgLength < 0) {
+				//noinspection newapi: L$r8$backportedMethods$utility$Integer$1$toUnsignedLong;->toUnsignedLong(B)J
 				terminate("invalid message size:" + Integer.toUnsignedLong(msgLength));
 				return;
 			}
diff --git a/src/the8472/utils/AnonAllocator.java b/src/the8472/utils/AnonAllocator.java
index f00e3fe..abad2b3 100644
--- a/src/the8472/utils/AnonAllocator.java
+++ b/src/the8472/utils/AnonAllocator.java
@@ -15,6 +15,7 @@ import java.nio.file.StandardOpenOption;
 
 public class AnonAllocator {
 
+	/*
 	static final boolean MAP_AND_UNLINK_SUPPORTED;
 
 	static {
@@ -45,12 +46,14 @@ public class AnonAllocator {
 
 		MAP_AND_UNLINK_SUPPORTED = result;
 	}
+	*/
 	
 	/**
 	 * on posix systems: allocates disk-backed bytebuffer and immediately unlinks the file
 	 * on others: simply returns a direct bytebuffer
 	 */
 	public static ByteBuffer allocate(int size) {
+/*
 		if(MAP_AND_UNLINK_SUPPORTED) {
 			try {
 				Path p = Files.createTempFile("anon-mapping", ".tmp");
@@ -67,6 +70,7 @@ public class AnonAllocator {
 			}
 		}
 		
+ */
 		return ByteBuffer.allocateDirect(size);
 	}
 
diff --git a/src/the8472/utils/Arrays.java b/src/the8472/utils/Arrays.java
index 251da77..f88bad3 100644
--- a/src/the8472/utils/Arrays.java
+++ b/src/the8472/utils/Arrays.java
@@ -85,6 +85,7 @@ public class Arrays {
 		int minLength = Math.min(a.length, b.length);
 		for(int i=0;i+7<minLength;i+=8)
 		{
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedLong;->toUnsignedLong(B)J
 			long la = Byte.toUnsignedLong(a[i]) << 56 |
 					Byte.toUnsignedLong(a[i+1]) << 48 |
 					Byte.toUnsignedLong(a[i+2]) << 40 |
@@ -93,6 +94,7 @@ public class Arrays {
 					Byte.toUnsignedLong(a[i+5]) << 16 |
 					Byte.toUnsignedLong(a[i+6]) << 8 |
 					Byte.toUnsignedLong(a[i+7]) << 0;
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedLong;->toUnsignedLong(B)J
 			long lb = Byte.toUnsignedLong(b[i]) << 56 |
 					Byte.toUnsignedLong(b[i+1]) << 48 |
 					Byte.toUnsignedLong(b[i+2]) << 40 |
@@ -103,6 +105,7 @@ public class Arrays {
 					Byte.toUnsignedLong(b[i+7]) << 0;
 			
 			if(la != lb)
+				//noinspection newapi: L$r8$backportedMethods$utility$Integer$2$compare;->compare(II)I
 				return Long.compareUnsigned(la, lb);
 			
 		}
@@ -110,7 +113,9 @@ public class Arrays {
 		int offset = minLength - minLength & 0x7;
 		
 		for(int i=offset;i<minLength;i++) {
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 			int ia = Byte.toUnsignedInt(a[i]);
+			//noinspection newapi: L$r8$backportedMethods$utility$Byte$1$toUnsignedInt;->toUnsignedInt(B)I
 			int ib = Byte.toUnsignedInt(b[i]);
 			if(ia != ib)
 				return Integer.compare(ia, ib);
diff --git a/src/the8472/utils/ConfigReader.java b/src/the8472/utils/ConfigReader.java
index 96d0dc6..f4f6914 100644
--- a/src/the8472/utils/ConfigReader.java
+++ b/src/the8472/utils/ConfigReader.java
@@ -38,7 +38,7 @@ import org.xml.sax.SAXException;
 
 
 public class ConfigReader {
-	
+	/* Android: NOt Used
 	public static class ParseException extends RuntimeException {
 		public ParseException(Exception cause) {
 			super(cause);
@@ -108,7 +108,7 @@ public class ConfigReader {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-		*/
+		* /
 	}
 	
 	public Document read() {
@@ -188,5 +188,5 @@ public class ConfigReader {
 	}
 
 	
-
+*/
 }
diff --git a/src/the8472/utils/FilesystemNotifications.java b/src/the8472/utils/FilesystemNotifications.java
index fa33fc0..e7e60b0 100644
--- a/src/the8472/utils/FilesystemNotifications.java
+++ b/src/the8472/utils/FilesystemNotifications.java
@@ -20,7 +20,7 @@ import java.util.function.BiConsumer;
 
 
 public class FilesystemNotifications {
-	
+/*  Android: Not Used	
 	WatchService service;
 	
 	Thread t = new Thread(this::run, "FS-notify");
@@ -78,5 +78,5 @@ public class FilesystemNotifications {
 		callbacks.put(p, callback);
 		
 	}
-
+*/
 }
diff --git a/src/the8472/utils/io/FileIO.java b/src/the8472/utils/io/FileIO.java
index fe65fe3..62a72a3 100644
--- a/src/the8472/utils/io/FileIO.java
+++ b/src/the8472/utils/io/FileIO.java
@@ -14,7 +14,7 @@ import java.nio.file.StandardCopyOption;
 import java.util.function.Consumer;
 
 public class FileIO {
-
+/* Not Used
 	public static void writeAndAtomicMove(Path targetName, Consumer<PrintWriter> write) throws IOException {
 		Path tempFile = Files.createTempFile(targetName.getParent(), targetName.getFileName().toString(), ".tmp");
 		
@@ -26,5 +26,5 @@ public class FileIO {
 			Files.move(tempFile, targetName, StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING);
 		}
 	}
-
+*/
 }
