diff --git a/app/src/main/java/com/innodroid/mongobrowser/ui/BaseActivity.java b/app/src/main/java/com/innodroid/mongobrowser/ui/BaseActivity.java
new file mode 100644
index 0000000..bd222fe
--- /dev/null
+++ b/app/src/main/java/com/innodroid/mongobrowser/ui/BaseActivity.java
@@ -0,0 +1,161 @@
+package com.innodroid.mongobrowser.ui;
+
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v7.app.AppCompatActivity;
+import android.widget.FrameLayout;
+
+import com.innodroid.mongobrowser.Constants;
+import com.innodroid.mongobrowser.Events;
+import com.innodroid.mongobrowser.R;
+import com.innodroid.mongobrowser.data.MongoBrowserProviderHelper;
+import com.innodroid.mongobrowser.util.SafeAsyncTask;
+
+import de.greenrobot.event.EventBus;
+
+public abstract class BaseActivity extends AppCompatActivity {
+	private static final String STATE_COLLECTION_NAME = "collname";
+	
+	protected String mCollectionName;
+	protected FrameLayout mFrame1;
+	protected static boolean mHavePromptedToAddConnection = false;
+
+	@Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(getLayoutResource());
+
+        mFrame1 = (FrameLayout)findViewById(R.id.frame_1);
+
+        if (savedInstanceState == null) {
+        	loadConnectionListPane();
+        } else {
+        	mCollectionName = savedInstanceState.getString(STATE_COLLECTION_NAME);
+        }
+
+    	if (!mHavePromptedToAddConnection) {
+    		mHavePromptedToAddConnection = true;
+    		new AddConnectionIfNoneExistTask().execute();
+    	}
+    }
+
+	@Override
+	protected void onStart() {
+		super.onStart();
+
+		EventBus.getDefault().register(this);
+	}
+
+	@Override
+	protected void onStop() {
+		super.onStop();
+
+		EventBus.getDefault().unregister(this);
+	}
+
+	@Override
+	protected void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		outState.putString(STATE_COLLECTION_NAME, mCollectionName);
+	}
+
+	protected abstract int getLayoutResource();
+	protected abstract void loadConnectionListPane();
+	protected abstract void loadConnectionDetailsPane(long id);
+	protected abstract void loadCollectionListPane(long connectionId);
+	protected abstract void loadDocumentListPane(long connectionId, String collection);
+	protected abstract void loadDocumentDetailsPane(String content);
+	protected abstract void hideDocumentDetailPane();
+
+	public void onEvent(Events.ConnectionSelected e) {
+		loadConnectionDetailsPane(e.ConnectionId);
+	}
+
+	private void showAddConnection() {
+		DialogFragment fragment = ConnectionEditDialogFragment.newInstance(0);
+		fragment.show(getSupportFragmentManager(), null);
+	}
+
+    public void onEvent(Events.AddConnection e) {
+		showAddConnection();
+    }
+
+	public void onEvent(Events.AddDocument e) {
+		DocumentEditDialogFragment fragment = DocumentEditDialogFragment.newInstance(mCollectionName, true, Constants.NEW_DOCUMENT_CONTENT_PADDED);
+		fragment.show(getSupportFragmentManager(), null);
+	}
+
+	public void onEvent(Events.CollectionSelected e) {
+		if (e.CollectionName != null) {
+			mCollectionName = e.CollectionName;
+			loadDocumentListPane(e.ConnectionId, e.CollectionName);
+		}
+	}
+
+	public void onEvent(Events.DocumentClicked e) {
+		loadDocumentDetailsPane(e.Content);
+	}
+
+	public void onEvent(Events.Connected e) {
+		loadCollectionListPane(e.ConnectionId);
+	}
+
+	public void onEvent(Events.ConnectionDeleted e) {
+        getSupportFragmentManager().beginTransaction()
+	        .remove(getSupportFragmentManager().findFragmentById(R.id.frame_2))
+	        .commit();        
+	}
+
+	public void onEvent(Events.ConnectionAdded e) {
+		reloadConnectionListAndSelect(e.ConnectionId);
+	}
+
+	public void onEvent(Events.ConnectionUpdated e) {
+		reloadConnectionListAndSelect(e.ConnectionId);
+	}
+
+	protected void reloadConnectionListAndSelect(long id) {
+		if (isFinishing())
+			return;
+		
+		ConnectionListFragment fragment = (ConnectionListFragment) getSupportFragmentManager().findFragmentById(R.id.frame_1);
+		
+		if (fragment != null)
+			fragment.reloadAndSelect(id);
+	}
+
+	public void onEvent(Events.DocumentDeleted e) {
+		hideDocumentDetailPane();
+		getSupportFragmentManager().executePendingTransactions();
+	}
+
+	public void onEvent(Events.EditDocument e) {
+		DocumentEditDialogFragment fragment = DocumentEditDialogFragment.newInstance(mCollectionName, false, e.Content);
+		fragment.show(getSupportFragmentManager(), null);
+	}
+
+    private class AddConnectionIfNoneExistTask extends SafeAsyncTask<Void, Void, Boolean> {
+		public AddConnectionIfNoneExistTask() {
+			super(BaseActivity.this);
+		}
+
+		@Override
+		protected Boolean safeDoInBackground(Void... arg0) {
+			return new MongoBrowserProviderHelper(getContentResolver()).getConnectionCount() == 0;
+		}
+
+		@Override
+		protected void safeOnPostExecute(Boolean res) {
+			if (res) {
+				showAddConnection();
+			}
+		}
+
+		@Override
+		protected String getErrorTitle() {
+			return "Failed to Check Connections";
+		}
+    }
+}
+
diff --git a/app/src/main/java/com/innodroid/mongobrowser/ui/MainActivity.java b/app/src/main/java/com/innodroid/mongobrowser/ui/MainActivity.java
deleted file mode 100644
index 7025faa..0000000
--- a/app/src/main/java/com/innodroid/mongobrowser/ui/MainActivity.java
+++ /dev/null
@@ -1,441 +0,0 @@
-package com.innodroid.mongobrowser.ui;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.v4.app.DialogFragment;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.support.v7.app.AppCompatActivity;
-import android.view.View;
-import android.view.ViewGroup.MarginLayoutParams;
-import android.view.Window;
-import android.view.animation.Animation;
-import android.view.animation.AnimationSet;
-import android.widget.FrameLayout;
-
-import com.innodroid.mongobrowser.Constants;
-import com.innodroid.mongobrowser.Events;
-import com.innodroid.mongobrowser.R;
-import com.innodroid.mongobrowser.data.MongoBrowserProviderHelper;
-import com.innodroid.mongobrowser.util.LeftMarginAnimation;
-import com.innodroid.mongobrowser.util.SafeAsyncTask;
-import com.innodroid.mongobrowser.util.WidthAnimation;
-
-import de.greenrobot.event.EventBus;
-
-public class MainActivity extends AppCompatActivity {
-	private static final String STATE_COLLECTION_NAME = "collname";
-	
-	private boolean mTwoPane;
-	private int mScreenWidth;
-	private int mLeftPaneWidth;
-	private int mRightPaneWidth;
-	private String mCollectionName;
-    private FrameLayout mFrame1;
-    private FrameLayout mFrame2;
-    private FrameLayout mFrame3;
-    private FrameLayout mFrame4;
-    private static boolean mHavePromptedToAddConnection = false;
-
-	@SuppressWarnings("deprecation")
-	@Override
-    public void onCreate(Bundle savedInstanceState) {
-		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
-		
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.activity_generic);
-
-        mFrame1 = (FrameLayout)findViewById(R.id.frame_1);
-        mFrame2 = (FrameLayout)findViewById(R.id.frame_2);
-        mFrame3 = (FrameLayout)findViewById(R.id.frame_3);
-        mFrame4 = (FrameLayout)findViewById(R.id.frame_4);
-
-        if (mFrame2 != null)
-            mTwoPane = true;
-
-        if (mTwoPane) {
-        	setTitle(R.string.app_name);
-        	mScreenWidth = getWindowManager().getDefaultDisplay().getWidth();
-        	mLeftPaneWidth = mScreenWidth/2 - (mScreenWidth/10);
-        	mRightPaneWidth = mScreenWidth - mLeftPaneWidth;
-        }
-        else {
-        	setTitle(R.string.title_connection_list);
-        }
-
-        if (savedInstanceState == null) {
-        	if (mTwoPane) {
-	        	positionFramesOnScreen(mFrame1, mFrame2);
-	        	moveOffscreenToRight(mFrame3);
-	        	moveOffscreenToRight(mFrame4);
-        	}
-
-        	loadConnectionListPane();
-        } else {
-        	mCollectionName = savedInstanceState.getString(STATE_COLLECTION_NAME);
-
-        	if (mTwoPane) {
-	        	int depth = getSupportFragmentManager().getBackStackEntryCount();
-	        	if (depth == 2) {
-	            	moveOffscreenToLeft(mFrame1);
-	            	moveOffscreenToLeft(mFrame2);
-	            	positionFramesOnScreen(mFrame3, mFrame4);
-	        	} else if (depth == 1) {
-	            	moveOffscreenToLeft(mFrame1);
-	            	positionFramesOnScreen(mFrame2, mFrame3);
-	            	moveOffscreenToRight(mFrame4);
-	        	} else {
-	            	positionFramesOnScreen(mFrame1, mFrame2);
-	            	moveOffscreenToRight(mFrame3);
-	            	moveOffscreenToRight(mFrame4);
-	        	}
-        	}
-        }
-
-    	if (mHavePromptedToAddConnection)
-    		setProgressBarIndeterminateVisibility(false);
-    	else {
-    		mHavePromptedToAddConnection = true;
-    		new AddConnectionIfNoneExistTask().execute();
-    	}
-    }
-
-	@Override
-	protected void onStart() {
-		super.onStart();
-
-		EventBus.getDefault().register(this);
-	}
-
-	@Override
-	protected void onStop() {
-		super.onStop();
-
-		EventBus.getDefault().unregister(this);
-	}
-
-	private void moveOffscreenToLeft(View view) {
-		((MarginLayoutParams)view.getLayoutParams()).leftMargin = mScreenWidth + 1;
-	}
-
-	private void moveOffscreenToRight(View view) {		
-		((MarginLayoutParams)view.getLayoutParams()).leftMargin = mScreenWidth + 1;
-	}
-
-	private void positionFramesOnScreen(View left, View right) {
-		left.getLayoutParams().width = mLeftPaneWidth;
-    	((MarginLayoutParams)right.getLayoutParams()).leftMargin = mLeftPaneWidth;
-    	right.getLayoutParams().width = mRightPaneWidth;
-	}
-
-	@Override
-	protected void onSaveInstanceState(Bundle outState) {
-		super.onSaveInstanceState(outState);
-		outState.putString(STATE_COLLECTION_NAME, mCollectionName);
-	}
-
-	@Override
-	public void onBackPressed() {
-		FragmentManager fm = getSupportFragmentManager();
-
-		if (!mTwoPane) {
-			if (fm.getBackStackEntryCount() > 0) {
-				fm.popBackStack();
-				return;
-			}
-		} else {
-			if (fm.getBackStackEntryCount() > 1) {
-				hideDocumentDetailPane();
-				return;
-			}
-
-			if (fm.getBackStackEntryCount() > 0) {
-				hideDocumentListPane();
-				return;
-			}
-		}
-
-		super.onBackPressed();
-	}
-
-	public void onEvent(Events.ConnectionSelected e) {
-		loadConnectionDetailsPane(e.ConnectionId);
-	}
-
-	private void loadConnectionListPane() {
-		ConnectionListFragment fragment = ConnectionListFragment.newInstance(mTwoPane);
-
-		getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).commit();
-	}
-
-	private void loadConnectionDetailsPane(long id) {
-		ConnectionDetailFragment fragment = ConnectionDetailFragment.newInstance(id);
-
-		if (mTwoPane) {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_2, fragment).commit();
-		} else {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).addToBackStack(null).commit();
-		}
-	}
-
-	private void loadCollectionListPane(long connectionId) {
-		CollectionListFragment fragment = CollectionListFragment.newInstance(connectionId, mTwoPane);
-
-		if (mTwoPane) {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_2, fragment).commit();
-		} else {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).addToBackStack(null).commit();
-		}
-    }
-
-	private void showAddConnection() {
-		DialogFragment fragment = ConnectionEditDialogFragment.newInstance(0);
-		fragment.show(getSupportFragmentManager(), null);
-	}
-
-    private void loadDocumentListPane(long connectionId, String collection) {
-		DocumentListFragment fragment = DocumentListFragment.newInstance(connectionId, collection, mTwoPane);
-
-		FragmentManager fm = getSupportFragmentManager();
-
-		if (mTwoPane) {
-			boolean alreadyShiftedFrames = fm.getBackStackEntryCount() > 0;
-
-			if (!alreadyShiftedFrames)
-				shiftAllLeft(mFrame1, mFrame2, mFrame3);
-
-			Fragment connectionList = fm.findFragmentById(R.id.frame_1);
-			FragmentTransaction ft = fm.beginTransaction();
-			ft.replace(R.id.frame_3, fragment);
-
-			if (!alreadyShiftedFrames) {
-				ft.remove(connectionList);
-				ft.addToBackStack("doclist");
-			}
-
-			ft.commit();
-		} else {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).addToBackStack(null).commit();
-		}
-    }
-
-	private void loadDocumentDetailsPane(String content) {
-		DocumentDetailFragment fragment = DocumentDetailFragment.newInstance(content, mCollectionName);
-
-		FragmentManager fm = getSupportFragmentManager();
-
-		if (mTwoPane) {
-			boolean alreadyShiftedFrames = fm.getBackStackEntryCount() > 1;
-
-			if (!alreadyShiftedFrames)
-				shiftAllLeft(mFrame2, mFrame3, mFrame4);
-
-			Fragment collectionList = fm.findFragmentById(R.id.frame_2);
-			FragmentTransaction ft = fm.beginTransaction();
-			ft.replace(R.id.frame_4, fragment);
-
-			if (!alreadyShiftedFrames) {
-				ft.remove(collectionList);
-				ft.addToBackStack("docdetails");
-			}
-
-			ft.commit();
-		} else {
-			getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).addToBackStack(null).commit();
-		}
-    }
-
-	private void hideDocumentListPane() {
-    	getSupportFragmentManager().popBackStack();
-    	shiftAllRight(mFrame1, mFrame2, mFrame3);
-    }
-
-    private void hideDocumentDetailPane() {
-    	getSupportFragmentManager().popBackStack();
-
-		if (mTwoPane) {
-			// Pop the back stack isnt really enough since the fragment added in the transaction may have been replaced
-			FragmentManager fm = getSupportFragmentManager();
-			fm.beginTransaction().remove(fm.findFragmentById(R.id.frame_4)).commit();
-			shiftAllRight(mFrame2, mFrame3, mFrame4);
-		}
-    }
-
-    private void shiftAllLeft(View view1, View view2, View view3) {
-		animateFromLeftPaneOffscreen(view1);
-		animateFromRightPaneToLeftPane(view2);
-		animateFromOffscreenToRightPane(view3);
-    }
-    
-    private void shiftAllRight(View view1, View view2, View view3) {
-		animateFromRightPaneOffscreen(view3);
-		animateFromLeftPaneToRightPane(view2);
-		animateFromOffscreenToLeftPane(view1);
-    }
-    
-    private void animateFromOffscreenToRightPane(View view) {
-    	((MarginLayoutParams)view.getLayoutParams()).width = mRightPaneWidth;
-    	view.requestLayout();
-    	
-		Animation animation = new LeftMarginAnimation(view, mScreenWidth, mLeftPaneWidth);
-		view.startAnimation(animation);
-	}
-
-	private void animateFromRightPaneToLeftPane(View view) {
-		Animation translate = new LeftMarginAnimation(view, mLeftPaneWidth, 0);
-		Animation width = new WidthAnimation(view, mRightPaneWidth, mLeftPaneWidth);
-		
-		AnimationSet set = new AnimationSet(true);
-		set.addAnimation(translate);
-		set.addAnimation(width);
-		view.startAnimation(set);
-	}
-
-	private void animateFromLeftPaneOffscreen(View view) {
-		Animation animation = new LeftMarginAnimation(view, 0, -mLeftPaneWidth);
-		view.startAnimation(animation);
-	}
-
-    private void animateFromOffscreenToLeftPane(View view) {
-    	((MarginLayoutParams)view.getLayoutParams()).width = mLeftPaneWidth;
-    	view.requestLayout();
-    	
-		Animation animation = new LeftMarginAnimation(view, -mLeftPaneWidth, 0);
-		view.startAnimation(animation);
-	}
-
-	private void animateFromLeftPaneToRightPane(View view) {
-		Animation translate = new LeftMarginAnimation(view, 0, mLeftPaneWidth);
-		Animation width = new WidthAnimation(view, mLeftPaneWidth, mRightPaneWidth);
-		
-		AnimationSet set = new AnimationSet(true);
-		set.addAnimation(translate);
-		set.addAnimation(width);
-		view.startAnimation(set);
-	}
-
-	private void animateFromRightPaneOffscreen(View view) {
-		Animation animation = new LeftMarginAnimation(view, mLeftPaneWidth, mScreenWidth+1);
-		view.startAnimation(animation);
-	}
-
-    public void onEvent(Events.AddConnection e) {
-		showAddConnection();
-    }
-
-	public void onEvent(Events.AddDocument e) {
-		DocumentEditDialogFragment fragment = DocumentEditDialogFragment.newInstance(mCollectionName, true, Constants.NEW_DOCUMENT_CONTENT_PADDED);
-		fragment.show(getSupportFragmentManager(), null);
-	}
-
-	public void onEvent(Events.CollectionSelected e) {
-		if (e.CollectionName != null) {
-			mCollectionName = e.CollectionName;
-			loadDocumentListPane(e.ConnectionId, e.CollectionName);
-		}
-	}
-
-	public void onEvent(Events.DocumentClicked e) {
-		loadDocumentDetailsPane(e.Content);
-	}
-
-	public void onEvent(Events.DocumentSelected e) {
-		if (e.Content == null && !mTwoPane) {
-			return;
-		}
-
-		// If nothing was selected (i.e., refresh) and we aren't showing the details pane, then dont shift to it
-		if (e.Content == null && getSupportFragmentManager().getBackStackEntryCount() < 2)
-			return;
-		
-		loadDocumentDetailsPane(e.Content);
-	}
-
-	public void onEvent(Events.Connected e) {
-		loadCollectionListPane(e.ConnectionId);
-	}
-
-	public void onEvent(Events.ConnectionDeleted e) {
-        getSupportFragmentManager().beginTransaction()
-	        .remove(getSupportFragmentManager().findFragmentById(R.id.frame_2))
-	        .commit();        
-	}
-
-	public void onEvent(Events.ConnectionAdded e) {
-		reloadConnectionListAndSelect(e.ConnectionId);
-	}
-
-	public void onEvent(Events.ConnectionUpdated e) {
-		reloadConnectionListAndSelect(e.ConnectionId);
-	}
-
-	private void reloadConnectionListAndSelect(long id) {
-		if (isFinishing())
-			return;
-		
-		ConnectionListFragment fragment = (ConnectionListFragment) getSupportFragmentManager().findFragmentById(R.id.frame_1);
-		
-		if (fragment != null)
-			fragment.reloadAndSelect(id);
-        
-        if (mTwoPane)
-        	loadConnectionDetailsPane(id);
-	}
-
-	public void onEvent(Events.DocumentDeleted e) {
-		hideDocumentDetailPane();
-		getSupportFragmentManager().executePendingTransactions();
-
-		if (!mTwoPane) {
-			DocumentListFragment f = (DocumentListFragment)getSupportFragmentManager().findFragmentById(R.id.frame_1);
-			f.onEvent(e);
-		}
-	}
-
-	public void onEvent(Events.CollectionDropped e) {
-        FragmentManager fm = getSupportFragmentManager();
-
-		if (mTwoPane) {
-			if (fm.getBackStackEntryCount() > 1) {
-				hideDocumentDetailPane();
-			}
-
-			fm.beginTransaction().remove(fm.findFragmentById(R.id.frame_3)).commit();
-		} else {
-			fm.popBackStackImmediate();
-			CollectionListFragment fragment = (CollectionListFragment)fm.findFragmentById(R.id.frame_1);
-			fragment.onEvent(e);
-		}
-	}
-	
-	public void onEvent(Events.EditDocument e) {
-		DocumentEditDialogFragment fragment = DocumentEditDialogFragment.newInstance(mCollectionName, false, e.Content);
-		fragment.show(getSupportFragmentManager(), null);
-	}
-
-    private class AddConnectionIfNoneExistTask extends SafeAsyncTask<Void, Void, Boolean> {
-		public AddConnectionIfNoneExistTask() {
-			super(MainActivity.this);
-		}
-
-		@Override
-		protected Boolean safeDoInBackground(Void... arg0) {
-			return new MongoBrowserProviderHelper(getContentResolver()).getConnectionCount() == 0;
-		}
-
-		@Override
-		protected void safeOnPostExecute(Boolean res) {
-			if (res) {
-				showAddConnection();
-			}
-		}
-
-		@Override
-		protected String getErrorTitle() {
-			return "Failed to Check Connections";
-		}
-    }
-}
-
diff --git a/app/src/main/java/com/innodroid/mongobrowser/ui/MultiPaneActivity.java b/app/src/main/java/com/innodroid/mongobrowser/ui/MultiPaneActivity.java
new file mode 100644
index 0000000..8cdb07f
--- /dev/null
+++ b/app/src/main/java/com/innodroid/mongobrowser/ui/MultiPaneActivity.java
@@ -0,0 +1,263 @@
+package com.innodroid.mongobrowser.ui;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.view.View;
+import android.view.ViewGroup.MarginLayoutParams;
+import android.view.Window;
+import android.view.animation.Animation;
+import android.view.animation.AnimationSet;
+import android.widget.FrameLayout;
+
+import com.innodroid.mongobrowser.Events;
+import com.innodroid.mongobrowser.R;
+import com.innodroid.mongobrowser.util.LeftMarginAnimation;
+import com.innodroid.mongobrowser.util.WidthAnimation;
+
+public class MultiPaneActivity extends BaseActivity {
+	private int mScreenWidth;
+	private int mLeftPaneWidth;
+	private int mRightPaneWidth;
+    private FrameLayout mFrame2;
+    private FrameLayout mFrame3;
+    private FrameLayout mFrame4;
+
+	@Override
+	protected int getLayoutResource() {
+		return R.layout.activity_multi_pane;
+	}
+
+	@Override
+    public void onCreate(Bundle savedInstanceState) {
+		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
+		
+        super.onCreate(savedInstanceState);
+
+        mFrame2 = (FrameLayout)findViewById(R.id.frame_2);
+        mFrame3 = (FrameLayout)findViewById(R.id.frame_3);
+        mFrame4 = (FrameLayout)findViewById(R.id.frame_4);
+
+		mScreenWidth = getWindowManager().getDefaultDisplay().getWidth();
+		mLeftPaneWidth = mScreenWidth/2 - (mScreenWidth/10);
+		mRightPaneWidth = mScreenWidth - mLeftPaneWidth;
+
+        if (savedInstanceState == null) {
+			positionFramesOnScreen(mFrame1, mFrame2);
+			moveOffscreenToRight(mFrame3);
+			moveOffscreenToRight(mFrame4);
+        } else {
+			int depth = getSupportFragmentManager().getBackStackEntryCount();
+			if (depth == 2) {
+				moveOffscreenToLeft(mFrame1);
+				moveOffscreenToLeft(mFrame2);
+				positionFramesOnScreen(mFrame3, mFrame4);
+			} else if (depth == 1) {
+				moveOffscreenToLeft(mFrame1);
+				positionFramesOnScreen(mFrame2, mFrame3);
+				moveOffscreenToRight(mFrame4);
+			} else {
+				positionFramesOnScreen(mFrame1, mFrame2);
+				moveOffscreenToRight(mFrame3);
+				moveOffscreenToRight(mFrame4);
+			}
+        }
+    }
+
+	private void moveOffscreenToLeft(View view) {
+		((MarginLayoutParams)view.getLayoutParams()).leftMargin = mScreenWidth + 1;
+	}
+
+	private void moveOffscreenToRight(View view) {		
+		((MarginLayoutParams)view.getLayoutParams()).leftMargin = mScreenWidth + 1;
+	}
+
+	private void positionFramesOnScreen(View left, View right) {
+		left.getLayoutParams().width = mLeftPaneWidth;
+    	((MarginLayoutParams)right.getLayoutParams()).leftMargin = mLeftPaneWidth;
+    	right.getLayoutParams().width = mRightPaneWidth;
+	}
+
+	@Override
+	public void onBackPressed() {
+		FragmentManager fm = getSupportFragmentManager();
+
+		if (fm.getBackStackEntryCount() > 1) {
+			hideDocumentDetailPane();
+			return;
+		}
+
+		if (fm.getBackStackEntryCount() > 0) {
+			hideDocumentListPane();
+			return;
+		}
+
+		super.onBackPressed();
+	}
+
+	@Override
+	protected void loadConnectionListPane() {
+		ConnectionListFragment fragment = ConnectionListFragment.newInstance(true);
+
+		getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).commit();
+	}
+
+	@Override
+	protected void loadConnectionDetailsPane(long id) {
+		ConnectionDetailFragment fragment = ConnectionDetailFragment.newInstance(id);
+
+		getSupportFragmentManager().beginTransaction().replace(R.id.frame_2, fragment).commit();
+	}
+
+	@Override
+	protected void loadCollectionListPane(long connectionId) {
+		CollectionListFragment fragment = CollectionListFragment.newInstance(connectionId, true);
+
+		getSupportFragmentManager().beginTransaction().replace(R.id.frame_2, fragment).commit();
+	}
+
+	@Override
+	protected void loadDocumentListPane(long connectionId, String collection) {
+		DocumentListFragment fragment = DocumentListFragment.newInstance(connectionId, collection, true);
+
+		FragmentManager fm = getSupportFragmentManager();
+
+		boolean alreadyShiftedFrames = fm.getBackStackEntryCount() > 0;
+
+		if (!alreadyShiftedFrames)
+			shiftAllLeft(mFrame1, mFrame2, mFrame3);
+
+		Fragment connectionList = fm.findFragmentById(R.id.frame_1);
+		FragmentTransaction ft = fm.beginTransaction();
+		ft.replace(R.id.frame_3, fragment);
+
+		if (!alreadyShiftedFrames) {
+			ft.remove(connectionList);
+			ft.addToBackStack("doclist");
+		}
+
+		ft.commit();
+    }
+
+	@Override
+	protected void loadDocumentDetailsPane(String content) {
+		DocumentDetailFragment fragment = DocumentDetailFragment.newInstance(content, mCollectionName);
+
+		FragmentManager fm = getSupportFragmentManager();
+
+		boolean alreadyShiftedFrames = fm.getBackStackEntryCount() > 1;
+
+		if (!alreadyShiftedFrames)
+			shiftAllLeft(mFrame2, mFrame3, mFrame4);
+
+		Fragment collectionList = fm.findFragmentById(R.id.frame_2);
+		FragmentTransaction ft = fm.beginTransaction();
+		ft.replace(R.id.frame_4, fragment);
+
+		if (!alreadyShiftedFrames) {
+			ft.remove(collectionList);
+			ft.addToBackStack("docdetails");
+		}
+
+		ft.commit();
+	}
+
+	private void hideDocumentListPane() {
+    	getSupportFragmentManager().popBackStack();
+		shiftAllRight(mFrame1, mFrame2, mFrame3);
+    }
+
+	@Override
+	protected void hideDocumentDetailPane() {
+    	getSupportFragmentManager().popBackStack();
+
+		// Pop the back stack isnt really enough since the fragment added in the transaction may have been replaced
+		FragmentManager fm = getSupportFragmentManager();
+		fm.beginTransaction().remove(fm.findFragmentById(R.id.frame_4)).commit();
+		shiftAllRight(mFrame2, mFrame3, mFrame4);
+	}
+
+    private void shiftAllLeft(View view1, View view2, View view3) {
+		animateFromLeftPaneOffscreen(view1);
+		animateFromRightPaneToLeftPane(view2);
+		animateFromOffscreenToRightPane(view3);
+	}
+    
+    private void shiftAllRight(View view1, View view2, View view3) {
+		animateFromRightPaneOffscreen(view3);
+		animateFromLeftPaneToRightPane(view2);
+		animateFromOffscreenToLeftPane(view1);
+	}
+    
+    private void animateFromOffscreenToRightPane(View view) {
+    	((MarginLayoutParams)view.getLayoutParams()).width = mRightPaneWidth;
+    	view.requestLayout();
+
+		Animation animation = new LeftMarginAnimation(view, mScreenWidth, mLeftPaneWidth);
+		view.startAnimation(animation);
+	}
+
+	private void animateFromRightPaneToLeftPane(View view) {
+		Animation translate = new LeftMarginAnimation(view, mLeftPaneWidth, 0);
+		Animation width = new WidthAnimation(view, mRightPaneWidth, mLeftPaneWidth);
+		
+		AnimationSet set = new AnimationSet(true);
+		set.addAnimation(translate);
+		set.addAnimation(width);
+		view.startAnimation(set);
+	}
+
+	private void animateFromLeftPaneOffscreen(View view) {
+		Animation animation = new LeftMarginAnimation(view, 0, -mLeftPaneWidth);
+		view.startAnimation(animation);
+	}
+
+    private void animateFromOffscreenToLeftPane(View view) {
+    	((MarginLayoutParams)view.getLayoutParams()).width = mLeftPaneWidth;
+    	view.requestLayout();
+
+		Animation animation = new LeftMarginAnimation(view, -mLeftPaneWidth, 0);
+		view.startAnimation(animation);
+	}
+
+	private void animateFromLeftPaneToRightPane(View view) {
+		Animation translate = new LeftMarginAnimation(view, 0, mLeftPaneWidth);
+		Animation width = new WidthAnimation(view, mLeftPaneWidth, mRightPaneWidth);
+		
+		AnimationSet set = new AnimationSet(true);
+		set.addAnimation(translate);
+		set.addAnimation(width);
+		view.startAnimation(set);
+	}
+
+	private void animateFromRightPaneOffscreen(View view) {
+		Animation animation = new LeftMarginAnimation(view, mLeftPaneWidth, mScreenWidth+1);
+		view.startAnimation(animation);
+	}
+
+	public void onEvent(Events.DocumentSelected e) {
+		// If nothing was selected (i.e., refresh) and we aren't showing the details pane, then dont shift to it
+		if (e.Content == null && getSupportFragmentManager().getBackStackEntryCount() < 2)
+			return;
+		
+		loadDocumentDetailsPane(e.Content);
+	}
+
+	@Override
+	protected void reloadConnectionListAndSelect(long id) {
+		super.reloadConnectionListAndSelect(id);
+		loadConnectionDetailsPane(id);
+	}
+
+	public void onEvent(Events.CollectionDropped e) {
+        FragmentManager fm = getSupportFragmentManager();
+
+		if (fm.getBackStackEntryCount() > 1) {
+			hideDocumentDetailPane();
+		}
+
+		fm.beginTransaction().remove(fm.findFragmentById(R.id.frame_3)).commit();
+	}
+}
+
diff --git a/app/src/main/java/com/innodroid/mongobrowser/ui/SinglePaneActivity.java b/app/src/main/java/com/innodroid/mongobrowser/ui/SinglePaneActivity.java
new file mode 100644
index 0000000..81a9326
--- /dev/null
+++ b/app/src/main/java/com/innodroid/mongobrowser/ui/SinglePaneActivity.java
@@ -0,0 +1,89 @@
+package com.innodroid.mongobrowser.ui;
+
+import android.support.v4.app.FragmentManager;
+
+import com.innodroid.mongobrowser.Events;
+import com.innodroid.mongobrowser.R;
+
+public class SinglePaneActivity extends BaseActivity {
+	@Override
+	protected int getLayoutResource() {
+		return R.layout.activity_single_pane;
+	}
+
+	@Override
+	public void onBackPressed() {
+		FragmentManager fm = getSupportFragmentManager();
+
+		if (fm.getBackStackEntryCount() > 0) {
+			fm.popBackStack();
+			return;
+		}
+
+		super.onBackPressed();
+	}
+
+	@Override
+	protected void loadConnectionListPane() {
+		ConnectionListFragment fragment = ConnectionListFragment.newInstance(false);
+
+		getSupportFragmentManager().beginTransaction().replace(R.id.frame_1, fragment).commit();
+	}
+
+	@Override
+	protected void loadConnectionDetailsPane(long id) {
+		ConnectionDetailFragment fragment = ConnectionDetailFragment.newInstance(id);
+
+		loadContentPane(fragment);
+	}
+
+	@Override
+	protected void loadCollectionListPane(long connectionId) {
+		CollectionListFragment fragment = CollectionListFragment.newInstance(connectionId, false);
+
+		loadContentPane(fragment);
+    }
+
+	@Override
+    protected void loadDocumentListPane(long connectionId, String collection) {
+		DocumentListFragment fragment = DocumentListFragment.newInstance(connectionId, collection, false);
+
+		loadContentPane(fragment);
+    }
+
+	@Override
+	protected void loadDocumentDetailsPane(String content) {
+		DocumentDetailFragment fragment = DocumentDetailFragment.newInstance(content, mCollectionName);
+
+		loadContentPane(fragment);
+    }
+
+	@Override
+    protected void hideDocumentDetailPane() {
+    	getSupportFragmentManager().popBackStack();
+    }
+
+	@Override
+	public void onEvent(Events.DocumentDeleted e) {
+		super.onEvent(e);
+
+		DocumentListFragment f = (DocumentListFragment)getSupportFragmentManager().findFragmentById(R.id.frame_1);
+		f.onEvent(e);
+	}
+
+	public void onEvent(Events.CollectionDropped e) {
+        FragmentManager fm = getSupportFragmentManager();
+		fm.popBackStackImmediate();
+		CollectionListFragment fragment = (CollectionListFragment)fm.findFragmentById(R.id.frame_1);
+		fragment.onEvent(e);
+	}
+	
+	private void loadContentPane(BaseFragment fragment) {
+		getSupportFragmentManager()
+				.beginTransaction()
+				.replace(R.id.frame_1, fragment)
+				.addToBackStack(null)
+				.commit();
+	}
+}
+
diff --git a/app/src/main/java/com/innodroid/mongobrowser/ui/StartupActivity.java b/app/src/main/java/com/innodroid/mongobrowser/ui/StartupActivity.java
new file mode 100644
index 0000000..2360181
--- /dev/null
+++ b/app/src/main/java/com/innodroid/mongobrowser/ui/StartupActivity.java
@@ -0,0 +1,23 @@
+package com.innodroid.mongobrowser.ui;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.PersistableBundle;
+
+import com.innodroid.mongobrowser.R;
+
+public class StartupActivity extends Activity {
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (getResources().getBoolean(R.bool.multi_pane)) {
+            startActivity(new Intent(this, MultiPaneActivity.class));
+        } else {
+            startActivity(new Intent(this, SinglePaneActivity.class));
+        }
+
+        finish();
+    }
+}
