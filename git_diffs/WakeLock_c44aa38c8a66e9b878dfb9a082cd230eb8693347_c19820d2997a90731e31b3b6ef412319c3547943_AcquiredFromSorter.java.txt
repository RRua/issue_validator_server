diff --git a/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.java b/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.java
deleted file mode 100644
index 7f0042d1d..000000000
--- a/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.boardgamegeek.sorter;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.support.annotation.NonNull;
-import android.support.annotation.StringRes;
-
-import com.boardgamegeek.R;
-import com.boardgamegeek.provider.BggContract.Collection;
-
-public class AcquiredFromSorter extends CollectionSorter {
-	private static final String COLUMN_NAME = Collection.PRIVATE_INFO_ACQUIRED_FROM;
-	@NonNull private final String nowhere;
-
-	public AcquiredFromSorter(@NonNull Context context) {
-		super(context);
-		nowhere = context.getString(R.string.nowhere_in_angle_brackets);
-	}
-
-	@StringRes
-	@Override
-	protected int getDescriptionId() {
-		return R.string.collection_sort_acquired_from;
-	}
-
-	@StringRes
-	@Override
-	public int getTypeResource() {
-		return R.string.collection_sort_type_acquired_from;
-	}
-
-	@Override
-	protected String getSortColumn() {
-		return COLUMN_NAME;
-	}
-
-	@NonNull
-	@Override
-	public String getHeaderText(@NonNull Cursor cursor) {
-		return getString(cursor, COLUMN_NAME, nowhere);
-	}
-}
diff --git a/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.kt b/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.kt
new file mode 100644
index 000000000..7c6e6f262
--- /dev/null
+++ b/app/src/main/java/com/boardgamegeek/sorter/AcquiredFromSorter.kt
@@ -0,0 +1,33 @@
+package com.boardgamegeek.sorter
+
+import android.content.Context
+import android.database.Cursor
+import android.support.annotation.StringRes
+
+import com.boardgamegeek.R
+import com.boardgamegeek.getString
+import com.boardgamegeek.provider.BggContract.Collection
+
+class AcquiredFromSorter(context: Context) : CollectionSorter(context) {
+    private val nowhere = context.getString(R.string.nowhere_in_angle_brackets)
+
+    override val descriptionId: Int
+        @StringRes
+        get() = R.string.collection_sort_acquired_from
+
+    public override val typeResource: Int
+        @StringRes
+        get() = R.string.collection_sort_type_acquired_from
+
+    override val sortColumn: String
+        get() = COLUMN_NAME
+
+    override val shouldCollate: Boolean
+        get() = true
+
+    public override fun getHeaderText(cursor: Cursor) = cursor.getString(COLUMN_NAME, nowhere)
+
+    companion object {
+        private val COLUMN_NAME = Collection.PRIVATE_INFO_ACQUIRED_FROM
+    }
+}
diff --git a/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.java b/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.java
deleted file mode 100644
index f2d5fddc1..000000000
--- a/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package com.boardgamegeek.sorter;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.support.annotation.NonNull;
-import android.support.annotation.StringRes;
-
-import com.boardgamegeek.provider.BggContract.Collection;
-import com.boardgamegeek.util.StringUtils;
-
-public abstract class CollectionSorter extends Sorter {
-	public CollectionSorter(@NonNull Context context) {
-		super(context);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public String getDescription() {
-		String description = super.getDescription();
-		if (getSubDescriptionId() > 0) {
-			description += " - " + getContext().getString(getSubDescriptionId());
-		}
-		return description;
-	}
-
-	@StringRes
-	protected int getSubDescriptionId() {
-		return 0;
-	}
-
-	@Override
-	public int getType() {
-		return StringUtils.parseInt(getContext().getString(getTypeResource()), CollectionSorterFactory.TYPE_DEFAULT);
-	}
-
-	@StringRes
-	protected abstract int getTypeResource();
-
-	@Override
-	protected String getDefaultSort() {
-		return Collection.DEFAULT_SORT;
-	}
-
-	/**
-	 * Gets the text to display on each row.
-	 */
-	public String getDisplayInfo(Cursor cursor) {
-		return getHeaderText(cursor);
-	}
-
-	public long getTimestamp(Cursor cursor) {
-		return 0;
-	}
-}
diff --git a/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.kt b/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.kt
new file mode 100644
index 000000000..fbf21b878
--- /dev/null
+++ b/app/src/main/java/com/boardgamegeek/sorter/CollectionSorter.kt
@@ -0,0 +1,43 @@
+package com.boardgamegeek.sorter
+
+import android.content.Context
+import android.database.Cursor
+import android.support.annotation.StringRes
+
+import com.boardgamegeek.provider.BggContract.Collection
+import com.boardgamegeek.util.StringUtils
+
+abstract class CollectionSorter(context: Context) : Sorter(context) {
+
+    /**
+     * {@inheritDoc}
+     */
+    override val description: String
+        get() {
+            var description = super.description
+            if (subDescriptionId > 0) {
+                description += " - " + context.getString(subDescriptionId)
+            }
+            return description
+        }
+
+    protected open val subDescriptionId: Int
+        @StringRes
+        get() = 0
+
+    override val type: Int
+        get() = StringUtils.parseInt(context.getString(typeResource), CollectionSorterFactory.TYPE_DEFAULT)
+
+    @get:StringRes
+    protected abstract val typeResource: Int
+
+    override val defaultSort: String
+        get() = Collection.DEFAULT_SORT
+
+    /**
+     * Gets the text to display on each row.
+     */
+    open fun getDisplayInfo(cursor: Cursor) = getHeaderText(cursor)
+
+    open fun getTimestamp(cursor: Cursor) = 0L
+}
diff --git a/app/src/main/java/com/boardgamegeek/sorter/Sorter.kt b/app/src/main/java/com/boardgamegeek/sorter/Sorter.kt
index 6c5baebe6..7c430a615 100644
--- a/app/src/main/java/com/boardgamegeek/sorter/Sorter.kt
+++ b/app/src/main/java/com/boardgamegeek/sorter/Sorter.kt
@@ -4,6 +4,7 @@ import android.content.Context
 import android.database.Cursor
 import android.support.annotation.StringRes
 import com.boardgamegeek.*
+import com.boardgamegeek.provider.BggContract
 import java.text.DecimalFormat
 
 abstract class Sorter(protected val context: Context) {
@@ -25,7 +26,11 @@ abstract class Sorter(protected val context: Context) {
     val orderByClause: String
         get() = if (sortColumn.isEmpty()) {
             defaultSort
-        } else sortColumn + (if (isSortDescending) " DESC, " else " ASC, ") + defaultSort
+        } else {
+            val sortOrder = if (isSortDescending) "DESC" else "ASC"
+            val collateNoCase = if (shouldCollate) BggContract.COLLATE_NOCASE else ""
+            "$sortColumn $collateNoCase $sortOrder, $defaultSort"
+        }
 
     protected open val sortColumn: String
         get() = ""
@@ -36,6 +41,9 @@ abstract class Sorter(protected val context: Context) {
     protected open val isSortDescending: Boolean
         get() = false
 
+    protected open val shouldCollate: Boolean
+        get() = false
+
     /**
      * The default sort order if the sort order isn't specified. Also applied as a secondary sort.
      */
