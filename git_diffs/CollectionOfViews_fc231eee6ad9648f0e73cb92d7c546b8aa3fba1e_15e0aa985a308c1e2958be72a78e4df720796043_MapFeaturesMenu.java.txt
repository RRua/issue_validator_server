diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
index 9e2051f7..66f1ab6f 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
@@ -3,7 +3,6 @@ package ch.bailu.aat.activities;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.net.Uri;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -16,14 +15,10 @@ import ch.bailu.aat.dispatcher.CustomFileSource;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.menus.ResultFileMenu;
 import ch.bailu.aat.services.InsideContext;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundService;
-import ch.bailu.aat.services.background.DownloadTask;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OsmApiHelper;
 import ch.bailu.aat.util.TextBackup;
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat.views.BusyViewControl;
 import ch.bailu.aat.views.ContentView;
@@ -38,7 +33,7 @@ import ch.bailu.util_java.foc.Foc;
 public abstract class AbsOsmApiActivity extends ActivityContext implements OnClickListener {
 
 
-    private MyImageButton download;
+    private MyImageButton   download;
     private BusyViewControl downloadBusy;
 
     private View               fileMenu;
@@ -53,21 +48,10 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
         @Override
         public void onReceive(Context context, Intent intent) {
 
-            new InsideContext(getServiceContext()) {
-                @Override
-                public void run() {
-                    final DownloadTask task =
-                            getServiceContext().getBackgroundService().findDownloadTask(osmApi.getResultFile());
-
-                    if (task != null) {
-                        downloadBusy.startWaiting();
-                    } else {
-                        downloadBusy.stopWaiting();
-                    }
-
-                }
-            };
+            if (osmApi.isTaskRunning(getServiceContext())) downloadBusy.startWaiting();
+            else downloadBusy.stopWaiting();
         }
+
     };
 
 
@@ -78,36 +62,38 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
 
         try {
             osmApi = getApiHelper(AppIntent.getBoundingBox(getIntent()));
-        } catch (Exception e) {
-            AppLog.e(this,e);
+        } catch (IOException e) {
+            e.printStackTrace();
         }
+
         setContentView(createContentView());
 
-        addSource(new CustomFileSource(getServiceContext(),osmApi.getResultFile().getPath()));
+        addSource(new CustomFileSource(getServiceContext(), osmApi.getResultFile().getPath()));
         addTarget(list, InfoID.FILEVIEW);
 
-        setQueryTextFromIntent();
+        //setQueryTextFromIntent();
 
         AppBroadcaster.register(this, onDownloadsChanged, AppBroadcaster.ON_DOWNLOADS_CHANGED);
     }
 
-
+/*
     private void setQueryTextFromIntent() {
         String query = queryFromIntent(getIntent());
         if (query != null) {
             editorView.setText(query);
         }
     }
-
-
+*/
+/*
     public static String queryFromIntent(Intent intent) {
         Uri  uri = intent.getData();
         if (uri != null) return queryFromUri(uri);
         return null;
     }
+*/
 
-
-    public static String queryFromUri(Uri uri) {
+/*
+    private static String queryFromUri(Uri uri) {
 
         String query = uri.getEncodedQuery();
         if (query != null) {
@@ -120,7 +106,7 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
         }
         return null;
     }
-
+*/
 
 
     private View createContentView()  {
@@ -208,42 +194,14 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
 
 
     private void download() {
-        new InsideContext(getServiceContext()) {
-            @Override
-            public void run() {
-                try {
-                    BackgroundService background = getServiceContext().getBackgroundService();
-
-                    DownloadTask task = getServiceContext().getBackgroundService().findDownloadTask(osmApi.getResultFile());
-
-                    if (task != null) {
-                        task.stopProcessing();
-
-                    } else {
-                        String query = editorView.toString();
-
-                        task = new ApiQueryTask(
-                                getServiceContext().getContext(),
-                                osmApi.getUrl(query),
-                                osmApi.getResultFile(),
-                                query,
-                                osmApi.getQueryFile());
-
-                        background.process(task);
-                    }
-
-                } catch (Exception e) {
-                    AppLog.e(AbsOsmApiActivity.this, e);
-                }
-            }
-        };
+        if (osmApi.isTaskRunning(getServiceContext())) {
+            osmApi.stopTask(getServiceContext());
+        } else {
+            osmApi.startTask(getServiceContext(), editorView.toString());
+        }
     }
 
 
-
-
-
-
     private void showFileMenu(View parent) throws IOException {
         final String query = TextBackup.read(osmApi.getQueryFile());
         final String prefix = OsmApiHelper.getFilePrefix(query);
@@ -264,41 +222,6 @@ public abstract class AbsOsmApiActivity extends ActivityContext implements OnCli
         unregisterReceiver(onDownloadsChanged);
         super.onDestroy();
     }
+}
 
 
-
-
-    private static class ApiQueryTask extends DownloadTask {
-        private final String queryString;
-        private final Foc queryFile;
-
-
-        public ApiQueryTask(Context c, String source, Foc target, String qs, Foc qf) {
-            super(c, source, target);
-            queryString = qs;
-            queryFile   = qf;
-        }
-
-
-        @Override
-        public long bgOnProcess(ServiceContext sc) {
-            try {
-                long size = bgDownload();
-                TextBackup.write(queryFile, queryString);
-
-                AppBroadcaster.broadcast(sc.getContext(),
-                        AppBroadcaster.FILE_CHANGED_ONDISK, getFile(), getSource());
-
-                return size;
-            } catch (Exception e) {
-                logError(e);
-                return 1;
-            }
-        }
-
-        @Override
-        protected void logError(Exception e) {
-            AppLog.e(getContext(), e);
-        }
-    }
-}
diff --git a/app/src/main/java/ch/bailu/aat/activities/MapActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
index 7d57cf13..e1ae2be0 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
@@ -51,7 +51,7 @@ public class MapActivity extends AbsKeepScreenOnActivity {
 
         if (Objects.equals(intent.getAction(),Intent.ACTION_VIEW) && uri != null) {
             setMapCenterFromUri(map, uri);
-            openQueryFromUri(uri);
+            //openQueryFromUri(uri);
         }
     }
 
@@ -66,7 +66,7 @@ public class MapActivity extends AbsKeepScreenOnActivity {
         }
     }
 
-
+/*
     private void openQueryFromUri(Uri uri) {
         String query = AbsOsmApiActivity.queryFromUri(uri);
 
@@ -77,7 +77,7 @@ public class MapActivity extends AbsKeepScreenOnActivity {
             ActivitySwitcher.start(this, NominatimActivity.class, intent);
         }
     }
-
+*/
 
     private MapViewInterface createMap(EditorSource edit) {
         return MapFactory.DEF(this, SOLID_KEY).map(edit, createButtonBar());
diff --git a/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java b/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
index 55708476..00b381f7 100644
--- a/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
@@ -15,6 +15,7 @@ import ch.bailu.aat.views.bar.MainControlBar;
 import ch.bailu.aat.views.description.MultiView;
 import ch.bailu.aat.views.osm_features.MapFeaturesListView;
 import ch.bailu.aat.views.osm_features.MapFeaturesView;
+import ch.bailu.aat.views.osm_features.OnSelected;
 
 public class OverpassActivity extends AbsOsmApiActivity  {
 
@@ -46,15 +47,15 @@ public class OverpassActivity extends AbsOsmApiActivity  {
     private View createOsmFeaturesView() {
         osmFeatures = new MapFeaturesView(getServiceContext());
         osmFeatures.setOnTextSelected((e, action, variant) -> {
-            if (action == MapFeaturesListView.OnSelected.FILTER) {
-                osmFeatures.setFilterText(e.summarySearchKey);
+            if (action == OnSelected.FILTER) {
+                osmFeatures.setFilterText(e.getSummaryKey());
 
-            } else if (action == MapFeaturesListView.OnSelected.EDIT){
+            } else if (action == OnSelected.EDIT){
                 insertLine(variant);
 
                 if (multiView != null) multiView.setNext();
 
-            } else if (action == MapFeaturesListView.OnSelected.SHOW) {
+            } else if (action == OnSelected.SHOW) {
 
             }
         });
diff --git a/app/src/main/java/ch/bailu/aat/activities/PoiActivity.java b/app/src/main/java/ch/bailu/aat/activities/PoiActivity.java
index d1e5397f..3f59e13d 100644
--- a/app/src/main/java/ch/bailu/aat/activities/PoiActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/PoiActivity.java
@@ -3,25 +3,34 @@ package ch.bailu.aat.activities;
 import android.view.View;
 import android.widget.LinearLayout;
 
+import org.mapsforge.poi.storage.PoiCategory;
+
 import java.io.IOException;
+import java.util.ArrayList;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.OsmApiHelper;
 import ch.bailu.aat.util.PoiApi;
 import ch.bailu.aat.util.ui.AppLayout;
+import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.views.PercentageLayout;
-import ch.bailu.aat.views.bar.ControlBar;
 import ch.bailu.aat.views.bar.MainControlBar;
 import ch.bailu.aat.views.description.MultiView;
+import ch.bailu.aat.views.osm_features.PoiView;
 
 public class PoiActivity extends AbsOsmApiActivity {
 
     private MultiView multiView;
-
+    private PoiView poiView;
 
     @Override
     public OsmApiHelper getApiHelper(BoundingBoxE6 boundingBox) throws SecurityException, IOException {
-        return new PoiApi(this);
+        return new PoiApi(this, boundingBox) {
+            @Override
+            protected ArrayList<PoiCategory> getCategories() {
+                return poiView.getCategories();
+            }
+        };
     }
 
 
@@ -60,6 +69,20 @@ public class PoiActivity extends AbsOsmApiActivity {
     }
 
     private View createPoiListView() {
-        return new View(this);
+
+
+        poiView = new PoiView(getServiceContext());
+
+
+        AppTheme.alt.background(poiView);
+        return poiView;
+
     }
+
+    @Override
+    public void onPause() {
+        poiView.onPause(getServiceContext());
+        super.onPause();
+    }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/menus/MapFeaturesMenu.java b/app/src/main/java/ch/bailu/aat/menus/MapFeaturesMenu.java
index f9d2dd62..ce803c63 100644
--- a/app/src/main/java/ch/bailu/aat/menus/MapFeaturesMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/MapFeaturesMenu.java
@@ -8,17 +8,17 @@ import android.view.MenuItem;
 import java.util.ArrayList;
 
 import ch.bailu.aat.services.cache.osm_features.MapFeaturesListEntry;
-import ch.bailu.aat.views.osm_features.MapFeaturesListView;
+import ch.bailu.aat.views.osm_features.OnSelected;
 
 public final class MapFeaturesMenu extends AbsMenu {
 
-    private final MapFeaturesListView.OnSelected onSelected;
+    private final OnSelected onSelected;
 
     private final MapFeaturesListEntry element;
 
     private final ArrayList<String> variants;
 
-    public MapFeaturesMenu(MapFeaturesListEntry d, MapFeaturesListView.OnSelected s) {
+    public MapFeaturesMenu(MapFeaturesListEntry d, OnSelected s) {
         element = d;
         onSelected = s;
         variants = element.getVariants();
@@ -28,7 +28,7 @@ public final class MapFeaturesMenu extends AbsMenu {
     @Override
     public void inflate(Menu menu) {
 
-        int g = MapFeaturesListView.OnSelected.EDIT;
+        int g = OnSelected.EDIT;
         int i = 0;
         for (String v : variants) {
             menu.add(g,i,Menu.NONE,v);
@@ -53,7 +53,7 @@ public final class MapFeaturesMenu extends AbsMenu {
 
     @Override
     public boolean onItemClick(MenuItem item) {
-        onSelected.onSelected(element, MapFeaturesListView.OnSelected.EDIT ,variants.get(item.getItemId()));
+        onSelected.onSelected(element, OnSelected.EDIT ,variants.get(item.getItemId()));
         return true;
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java b/app/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java
index 3418d1f0..b24668a9 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java
@@ -12,19 +12,8 @@ public abstract class BackgroundTask implements ThreadControl {
         }
     };
 
-/*
-    public static final BackgroundTask NULL_PROCESSED = new BackgroundTask() {
 
-        @Override
-        public long bgOnProcess(ServiceContext sc) {
-            return 0;
-        }
-
-        public boolean canContinue() {
-            return false;
-        }
-    };
-*/
+    private Exception exception;
 
     private boolean processing = true;
 
@@ -51,4 +40,12 @@ public abstract class BackgroundTask implements ThreadControl {
 
     public void onInsert() {}
     public void onRemove() {}
+
+    protected void setException(Exception e) {
+        exception = e;
+    }
+
+    public  Exception getException() {
+        return exception;
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesHandle.java b/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesHandle.java
index 90c3881f..40cc3507 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesHandle.java
@@ -12,8 +12,9 @@ import ch.bailu.aat.services.background.BackgroundTask;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.services.cache.OnObject;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.filter_list.FilterList;
+import ch.bailu.aat.util.filter_list.AbsFilterList;
 import ch.bailu.aat.util.filter_list.KeyList;
+import ch.bailu.aat.util.filter_list.ListEntry;
 
 public final class MapFeaturesHandle extends ObjectHandle {
 
@@ -30,7 +31,7 @@ public final class MapFeaturesHandle extends ObjectHandle {
             list.clear();
         }
 
-        public synchronized void sync(FilterList<MapFeaturesListEntry> f) {
+        public synchronized void sync(AbsFilterList<ListEntry> f) {
             for (int i = f.sizeAll(); i < list.size(); i++) {
                 f.add(list.get(i));
             }
@@ -68,7 +69,7 @@ public final class MapFeaturesHandle extends ObjectHandle {
     }
 
 
-    public void syncList(FilterList<MapFeaturesListEntry> filterList) {
+    public void syncList(AbsFilterList<ListEntry> filterList) {
         list.sync(filterList);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesListEntry.java b/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesListEntry.java
index bbd9b77c..79b1f596 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesListEntry.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/osm_features/MapFeaturesListEntry.java
@@ -2,14 +2,17 @@ package ch.bailu.aat.services.cache.osm_features;
 
 import java.util.ArrayList;
 
+import ch.bailu.aat.gpx.attributes.Keys;
 import ch.bailu.aat.util.filter_list.KeyList;
+import ch.bailu.aat.util.filter_list.ListEntry;
 
 
-public final class MapFeaturesListEntry {
+public final class MapFeaturesListEntry extends ListEntry {
     private final boolean isSummary;
-    public final String name, key, value, summarySearchKey, summaryKey,  html;
-    public final KeyList keys;
-    public final int id;
+    private final String name, key, value, summarySearchKey, html;
+
+    private final KeyList keys;
+    private final int id;
 
     public MapFeaturesListEntry(MapFeaturesParser parser) {
 
@@ -25,7 +28,6 @@ public final class MapFeaturesListEntry {
 
         value = parser.getValue();
         id = parser.getId();
-        summaryKey = parser.getSumaryKey();
         html = parser.addHtml(new StringBuilder()).toString();
 
         summarySearchKey = parser.getSummarySearchKey();
@@ -36,10 +38,36 @@ public final class MapFeaturesListEntry {
 
     }
 
+    @Override
+    public boolean isSelected() {
+        return false;
+    }
+
+    @Override
     public boolean isSummary() {
         return isSummary;
     }
 
+    @Override
+    public KeyList getKeys() {
+        return keys;
+    }
+
+    @Override
+    public String getSummaryKey() {
+        return summarySearchKey;
+    }
+
+    public int getID() {
+        return id;
+    }
+
+    @Override
+    public void select() {
+
+    }
+
+
     public int length() {
         int l = name.length() +
                 key.length() +
@@ -68,4 +96,16 @@ public final class MapFeaturesListEntry {
         }
         return list;
     }
+
+    public int getOsmKey() {
+        return Keys.toIndex(key);
+    }
+
+    public String getOsmValue() {
+        return value;
+    }
+
+    public String getHtml() {
+        return html;
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/DownloadApi.java b/app/src/main/java/ch/bailu/aat/util/DownloadApi.java
new file mode 100644
index 00000000..e370d3d2
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/DownloadApi.java
@@ -0,0 +1,101 @@
+package ch.bailu.aat.util;
+
+import android.content.Context;
+
+import java.io.UnsupportedEncodingException;
+
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.background.BackgroundService;
+import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat.services.background.DownloadTask;
+import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.util_java.foc.Foc;
+
+public abstract class DownloadApi extends OsmApiHelper {
+
+    private static class ApiQueryTask extends DownloadTask {
+        private final String queryString;
+        private final Foc queryFile;
+
+
+        public ApiQueryTask(Context c, String source, Foc target, String qs, Foc qf) {
+            super(c, source, target);
+            queryString = qs;
+            queryFile   = qf;
+        }
+
+
+        @Override
+        public long bgOnProcess(ServiceContext sc) {
+            try {
+                long size = bgDownload();
+                TextBackup.write(queryFile, queryString);
+
+                AppBroadcaster.broadcast(sc.getContext(),
+                        AppBroadcaster.FILE_CHANGED_ONDISK, getFile(), getSource());
+
+                return size;
+            } catch (Exception e) {
+                logError(e);
+                return 1;
+            }
+        }
+
+        @Override
+        protected void logError(Exception e) {
+            AppLog.e(getContext(), e);
+        }
+    }
+
+
+    @Override
+    public boolean isTaskRunning(ServiceContext scontext) {
+        final boolean[] running = {false};
+
+        new InsideContext(scontext) {
+            @Override
+            public void run() {
+                BackgroundService background = scontext.getBackgroundService();
+                running[0] = background.findDownloadTask(getResultFile()) != null;
+            }
+        };
+        return running[0];
+    }
+
+
+    @Override
+    public void stopTask(ServiceContext scontext) {
+        new InsideContext(scontext) {
+            @Override
+            public void run() {
+                BackgroundService background = scontext.getBackgroundService();
+                BackgroundTask task = background.findDownloadTask(getResultFile());
+                if (task != null) task.stopProcessing();
+            }
+        };
+    }
+
+    @Override
+    public void startTask(ServiceContext scontext, String query) {
+        new InsideContext(scontext) {
+            @Override
+            public void run() {
+
+                try {
+                    BackgroundService background = scontext.getBackgroundService();
+
+                    ApiQueryTask task = new ApiQueryTask(
+                            scontext.getContext(),
+                            getUrl(query),
+                            getResultFile(),
+                            query,
+                            getQueryFile());
+                    background.process(task);
+                } catch (UnsupportedEncodingException e) {
+                    e.printStackTrace();
+                }
+            }
+        };
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
index 5c6b95a2..9c939010 100644
--- a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
@@ -5,11 +5,17 @@ import android.content.Context;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
+import ch.bailu.aat.activities.AbsOsmApiActivity;
 import ch.bailu.aat.coordinates.BoundingBoxE6;
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.background.BackgroundService;
+import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat.services.background.DownloadTask;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.util_java.foc.Foc;
 
-public class NominatimApi extends OsmApiHelper {
+public class NominatimApi extends DownloadApi {
     public final static String NAME="Nominatim";
     public final static String URL="https://nominatim.openstreetmap.org/search/";
     public final static String POST="?format=xml";
@@ -69,6 +75,7 @@ public class NominatimApi extends OsmApiHelper {
     }
 
 
+
     @Override
     public String getUrl(String query) throws UnsupportedEncodingException {
         final StringBuilder url = new StringBuilder();
diff --git a/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java b/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
index 6840388d..2c328ad7 100644
--- a/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
+++ b/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
@@ -2,6 +2,7 @@ package ch.bailu.aat.util;
 
 import java.io.UnsupportedEncodingException;
 
+import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.util_java.foc.Foc;
 
@@ -18,6 +19,12 @@ public abstract class OsmApiHelper {
         public abstract Foc getBaseDirectory();
         public abstract String getFileExtension();
 
+        public abstract String getUrlPreview(String s);
+        public abstract boolean isTaskRunning(ServiceContext scontext);
+        public abstract void stopTask(ServiceContext scontext);
+        public abstract void startTask(ServiceContext scontext, String query);
+
+
         public Foc getResultFile() {
             return getBaseDirectory().child("result"+ getFileExtension());
         }
@@ -47,9 +54,6 @@ public abstract class OsmApiHelper {
                 name.append(c);
             }
         }
-
-
-    public abstract String getUrlPreview(String s);
 }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
index 915e0684..b74c42e6 100644
--- a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
@@ -12,7 +12,7 @@ import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.util_java.foc.Foc;
 
-public class OverpassApi extends OsmApiHelper {
+public class OverpassApi extends DownloadApi {
 
     public final String NAME;
     public final static String EXT=".osm";
diff --git a/app/src/main/java/ch/bailu/aat/util/PoiApi.java b/app/src/main/java/ch/bailu/aat/util/PoiApi.java
index b0942412..98d4df1d 100644
--- a/app/src/main/java/ch/bailu/aat/util/PoiApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/PoiApi.java
@@ -2,18 +2,41 @@ package ch.bailu.aat.util;
 
 import android.content.Context;
 
+import org.mapsforge.core.model.BoundingBox;
+import org.mapsforge.poi.android.storage.AndroidPoiPersistenceManagerFactory;
+import org.mapsforge.poi.storage.ExactMatchPoiCategoryFilter;
+import org.mapsforge.poi.storage.PoiCategory;
+import org.mapsforge.poi.storage.PoiCategoryFilter;
+import org.mapsforge.poi.storage.PoiPersistenceManager;
+import org.mapsforge.poi.storage.PointOfInterest;
+
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.Collection;
 
+import ch.bailu.aat.coordinates.BoundingBoxE6;
+import ch.bailu.aat.gpx.writer.WayWriter;
+import ch.bailu.aat.services.InsideContext;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat.services.background.FileTask;
+import ch.bailu.aat.test.GpxPointPoi;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.util_java.foc.Foc;
 
-public class PoiApi extends OsmApiHelper {
+public abstract class PoiApi extends OsmApiHelper {
     public final static String NAME="MapsForge Poi";
     public final static String EXT=".gpx";
 
     private final Foc directory;
 
-    public PoiApi(Context context) {
+    private final BoundingBoxE6 bounding;
+
+    private BackgroundTask task = BackgroundTask.NULL;
+
+    public PoiApi(Context context, BoundingBoxE6 box) {
+        bounding = box;
         directory = AppDirectory.getDataDirectory(context, AppDirectory.DIR_NOMINATIM);
 
     }
@@ -46,4 +69,104 @@ public class PoiApi extends OsmApiHelper {
     public String getUrlPreview(String s) {
         return "";
     }
+
+    @Override
+    public boolean isTaskRunning(ServiceContext scontext) {
+        return false;
+    }
+
+    @Override
+    public void stopTask(ServiceContext scontext) {
+        task.stopProcessing();
+    }
+
+    @Override
+    public void startTask(ServiceContext scontext, String query) {
+
+        final ArrayList<PoiCategory> categories = getCategories();
+
+        if (categories.size() > 0) {
+            new InsideContext(scontext) {
+                @Override
+                public void run() {
+                    task.stopProcessing();
+                    task = new PoiToGpx(getResultFile(), bounding.toBoundingBox(), categories);
+                    scontext.getBackgroundService().process(task);
+
+                }
+            };
+        }
+    }
+
+    protected abstract ArrayList<PoiCategory> getCategories();
+
+
+    private static class PoiToGpx extends FileTask {
+
+        private final static int LIMIT = 100;
+        private final static String POI_FILE = "/storage/0B35-1209/maps/Alps/Alps_ML.poi";
+
+
+        private final BoundingBox bounding;
+        private final ArrayList<PoiCategory> categories;
+
+        public PoiToGpx(Foc result, BoundingBox b, ArrayList<PoiCategory> c) {
+            super(result);
+            bounding = b;
+            categories = c;
+        }
+
+
+        @Override
+        public long bgOnProcess(ServiceContext sc) {
+            final PoiPersistenceManager persistenceManager =
+                    AndroidPoiPersistenceManagerFactory.getPoiPersistenceManager(POI_FILE);
+
+            try {
+                queryPois(persistenceManager, bounding);
+            } catch (Exception e) {
+                setException(e);
+            }
+
+            persistenceManager.close();
+
+            AppBroadcaster.broadcast(sc.getContext(), AppBroadcaster.FILE_CHANGED_ONDISK,
+                    getFile().getPath(), POI_FILE);
+
+            return 100;
+        }
+
+        private void queryPois(PoiPersistenceManager persistenceManager, BoundingBox box) throws IOException {
+            final Collection<PointOfInterest> pois = searchPoi(persistenceManager, box);
+
+            if (pois != null) {
+                if (getFile().exists()) getFile().remove();
+                writeGpxFile(pois);
+            }
+        }
+
+        private Collection<PointOfInterest> searchPoi(PoiPersistenceManager persistenceManager,
+                                                      BoundingBox box) {
+
+            final PoiCategoryFilter categoryFilter = new ExactMatchPoiCategoryFilter();
+
+            for (PoiCategory category : categories)
+                categoryFilter.addCategory(category);
+
+            return persistenceManager.findInRect(box, categoryFilter, null, LIMIT);
+        }
+
+
+        private void writeGpxFile(Collection<PointOfInterest> pois) throws IOException {
+            WayWriter writer = new WayWriter(getFile());
+
+            writer.writeHeader(System.currentTimeMillis());
+
+            for (PointOfInterest poi : pois) {
+                writer.writeTrackPoint(new GpxPointPoi(poi));
+            }
+            writer.writeFooter();
+            writer.close();
+        }
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/filter_list/AbsFilterList.java b/app/src/main/java/ch/bailu/aat/util/filter_list/AbsFilterList.java
new file mode 100644
index 00000000..f6aa3906
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/filter_list/AbsFilterList.java
@@ -0,0 +1,73 @@
+package ch.bailu.aat.util.filter_list;
+
+import java.util.ArrayList;
+
+public abstract class AbsFilterList<T> {
+    private final ArrayList<T> visible = new ArrayList<>(100);
+    private final ArrayList<T> all = new ArrayList<>(100);
+
+
+    private KeyList filterKeys = new KeyList();
+
+
+
+    public void filter(String s) {
+        filterKeys = new KeyList(s);
+
+        filterAll();
+    }
+
+
+    public void filterAll() {
+        visible.clear();
+
+        for (T t: all) {
+            if (showElement(t, filterKeys))
+                visible.add(t);
+        }
+    }
+
+
+    public void filterMore() {
+        for (int i = visible.size()-1; i > -1; i--) {
+            if (showElement(visible.get(i), filterKeys) == false)
+                visible.remove(i);
+        }
+    }
+
+
+    private void showAll() {
+        if (visible.size() != all.size()) {
+            visible.clear();
+            visible.addAll(all);
+        }
+    }
+
+
+    public abstract boolean showElement(T t, KeyList keyList);
+
+
+    public void add(T t) {
+        all.add(t);
+
+        if (showElement(t, filterKeys))
+            visible.add(t);
+    }
+
+    public T get(int index) {
+        return visible.get(index);
+    }
+
+
+    public void clear() {
+        visible.clear();
+        all.clear();
+    }
+
+    public int sizeVisible() {
+        return visible.size();
+    }
+    public int sizeAll() {
+        return all.size();
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/filter_list/FilterList.java b/app/src/main/java/ch/bailu/aat/util/filter_list/FilterList.java
index 292457ac..6191d126 100644
--- a/app/src/main/java/ch/bailu/aat/util/filter_list/FilterList.java
+++ b/app/src/main/java/ch/bailu/aat/util/filter_list/FilterList.java
@@ -1,73 +1,12 @@
 package ch.bailu.aat.util.filter_list;
 
-import java.util.ArrayList;
-
-public abstract class FilterList<T> {
-    private final ArrayList<T> visible = new ArrayList<>(100);
-    private final ArrayList<T> all = new ArrayList<>(100);
-
-
-    private KeyList filterKeys = new KeyList();
-
-
-
-    public void filter(String s) {
-        filterKeys = new KeyList(s);
-
-        filterAll();
-    }
-
-
-    public void filterAll() {
-        visible.clear();
-
-        for (T t: all) {
-            if (showElement(t, filterKeys))
-                visible.add(t);
-        }
-    }
-
-
-    public void filterMore() {
-        for (int i = visible.size()-1; i > -1; i--) {
-            if (showElement(visible.get(i), filterKeys) == false)
-                visible.remove(i);
+public class FilterList extends AbsFilterList<ListEntry> {
+    @Override
+    public boolean showElement(ListEntry listEntry, KeyList keyList) {
+        if (keyList.isEmpty()) {
+            return listEntry.isSelected() || listEntry.isSummary();
+        } else {
+            return listEntry.isSelected() || listEntry.getKeys().fits(keyList);
         }
     }
-
-
-    private void showAll() {
-        if (visible.size() != all.size()) {
-            visible.clear();
-            visible.addAll(all);
-        }
-    }
-
-
-    public abstract boolean showElement(T t, KeyList keyList);
-
-
-    public void add(T t) {
-        all.add(t);
-
-        if (showElement(t, filterKeys))
-            visible.add(t);
-    }
-
-    public T get(int index) {
-        return visible.get(index);
-    }
-
-
-    public void clear() {
-        visible.clear();
-        all.clear();
-    }
-
-    public int sizeVisible() {
-        return visible.size();
-    }
-    public int sizeAll() {
-        return all.size();
-    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/filter_list/KeyList.java b/app/src/main/java/ch/bailu/aat/util/filter_list/KeyList.java
index efd8cf49..418d399e 100644
--- a/app/src/main/java/ch/bailu/aat/util/filter_list/KeyList.java
+++ b/app/src/main/java/ch/bailu/aat/util/filter_list/KeyList.java
@@ -91,4 +91,9 @@ public class KeyList {
         }
         return l;
     }
+
+    public String getFirstKey() {
+        if (keys.size() > 0) return keys.get(0);
+        else return "";
+    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/util/filter_list/ListEntry.java b/app/src/main/java/ch/bailu/aat/util/filter_list/ListEntry.java
new file mode 100644
index 00000000..74724134
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/filter_list/ListEntry.java
@@ -0,0 +1,12 @@
+package ch.bailu.aat.util.filter_list;
+
+public abstract class ListEntry {
+    public abstract boolean isSelected();
+    public abstract boolean isSummary();
+    public abstract KeyList getKeys();
+    public abstract String getSummaryKey();
+
+    public abstract int getID();
+
+    public abstract void select();
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/filter_list/PoiListEntry.java b/app/src/main/java/ch/bailu/aat/util/filter_list/PoiListEntry.java
new file mode 100644
index 00000000..4d4bfd70
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/filter_list/PoiListEntry.java
@@ -0,0 +1,74 @@
+package ch.bailu.aat.util.filter_list;
+
+import org.mapsforge.poi.storage.PoiCategory;
+
+public class PoiListEntry extends ListEntry {
+    private final PoiCategory self;
+
+    private final boolean isSummary;
+    private boolean isSelected = false;
+
+    private final KeyList keys;
+    private final String summaryKey;
+
+
+    public PoiListEntry(PoiCategory c) {
+        isSummary = true;
+        self = c;
+
+        keys = new KeyList(c.getTitle());
+        summaryKey = "_" + keys.getFirstKey();
+        keys.addKeys(summaryKey);
+
+    }
+
+    public PoiListEntry(PoiCategory c, PoiListEntry s) {
+        isSummary = false;
+
+        self = c;
+
+        summaryKey = s.getSummaryKey();
+        keys = new KeyList(c.getTitle());
+        keys.addKeys(summaryKey);
+
+
+    }
+
+    @Override
+    public boolean isSelected() {
+        return isSelected;
+    }
+
+    @Override
+    public boolean isSummary() {
+        return isSummary;
+    }
+
+    @Override
+    public KeyList getKeys() {
+        return keys;
+    }
+
+    @Override
+    public String getSummaryKey() {
+        return summaryKey;
+    }
+
+
+    public String getTitle() {
+        return self.getTitle();
+    }
+
+    public int getID() {
+        return self.getID();
+    }
+
+    @Override
+    public void select() {
+        if (!isSummary()) isSelected = !isSelected;
+    }
+
+    public PoiCategory getCategory() {
+        return self;
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/EditTextTool.java b/app/src/main/java/ch/bailu/aat/views/EditTextTool.java
index 8e4e4095..9e6b1fc5 100644
--- a/app/src/main/java/ch/bailu/aat/views/EditTextTool.java
+++ b/app/src/main/java/ch/bailu/aat/views/EditTextTool.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.views;
 
 
+import android.graphics.Color;
 import android.text.Layout;
 import android.text.Selection;
 import android.view.View;
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesEntryView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesEntryView.java
index 36935dd6..6ca259f8 100644
--- a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesEntryView.java
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesEntryView.java
@@ -6,7 +6,6 @@ import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.gpx.attributes.Keys;
 import ch.bailu.aat.menus.MapFeaturesMenu;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.osm_features.MapFeaturesListEntry;
@@ -21,12 +20,12 @@ public class MapFeaturesEntryView extends LinearLayout implements View.OnClickLi
     private final TextView text;
     private final SVGAssetView icon;
 
-    private final MapFeaturesListView.OnSelected onSelected;
+    private final OnSelected onSelected;
 
     private MapFeaturesListEntry entry;
 
 
-    public MapFeaturesEntryView(final ServiceContext scontext, MapFeaturesListView.OnSelected s) {
+    public MapFeaturesEntryView(final ServiceContext scontext, OnSelected s) {
         super(scontext.getContext());
 
 
@@ -53,8 +52,8 @@ public class MapFeaturesEntryView extends LinearLayout implements View.OnClickLi
 
     public void set(final MapFeaturesListEntry e) {
         entry = e;
-        icon.setImageObject(Keys.toIndex(entry.key), entry.value);
-        text.setText(AppHtml.fromHtml(entry.html));
+        icon.setImageObject(entry.getOsmKey(), entry.getOsmValue());
+        text.setText(AppHtml.fromHtml(entry.getHtml()));
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesListView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesListView.java
index dbdab70d..72c5b3a0 100644
--- a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesListView.java
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesListView.java
@@ -9,7 +9,8 @@ import android.widget.ListView;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.osm_features.MapFeaturesListEntry;
-import ch.bailu.aat.util.filter_list.FilterList;
+import ch.bailu.aat.util.filter_list.AbsFilterList;
+import ch.bailu.aat.util.filter_list.ListEntry;
 import ch.bailu.aat.util.ui.AppTheme;
 
 
@@ -17,15 +18,13 @@ public class MapFeaturesListView extends ListView  {
 
 
     private DataSetObserver observer=null;
-    private final FilterList<MapFeaturesListEntry> list;
+    private final AbsFilterList<ListEntry> list;
     private final ServiceContext scontext;
 
-    private OnSelected onSelected = (data, action, variant) -> {
+    private OnSelected onSelected = OnSelected.NULL;
 
-    };
 
-
-    public MapFeaturesListView(ServiceContext sc, FilterList<MapFeaturesListEntry> l) {
+    public MapFeaturesListView(ServiceContext sc, AbsFilterList<ListEntry> l) {
         super(sc.getContext());
 
         scontext = sc;
@@ -50,16 +49,6 @@ public class MapFeaturesListView extends ListView  {
     }
 
 
-    public interface OnSelected {
-        int EDIT = 0;
-        int SHOW = 1;
-        int FILTER = 2;
-
-        void onSelected(MapFeaturesListEntry e, int action, String variant);
-    }
-
-
-
     private class Adapter implements ListAdapter, android.widget.AdapterView.OnItemClickListener{
 
         @Override
@@ -77,7 +66,7 @@ public class MapFeaturesListView extends ListView  {
                 view = new MapFeaturesEntryView(scontext, onSelected);
             }
 
-            view.set(list.get(index));
+            view.set((MapFeaturesListEntry) list.get(index));
             return view;
         }
 
@@ -95,10 +84,10 @@ public class MapFeaturesListView extends ListView  {
 
         @Override
         public void onItemClick(AdapterView<?> arg0, View view, int index, long arg3) {
-            final MapFeaturesListEntry d = list.get(index);
+            final MapFeaturesListEntry d = (MapFeaturesListEntry) list.get(index);
 
             if (d.isSummary())
-                onSelected.onSelected(d,OnSelected.FILTER, d.summarySearchKey);
+                onSelected.onSelected(d,OnSelected.FILTER, d.getSummaryKey());
             else
                 onSelected.onSelected(d,OnSelected.EDIT, d.getDefaultQuery());
 
@@ -113,7 +102,7 @@ public class MapFeaturesListView extends ListView  {
 
         @Override
         public long getItemId(int position) {
-            return list.get(position).id;
+            return list.get(position).getID();
         }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesView.java
index 80cd50c7..c1f99406 100644
--- a/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesView.java
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/MapFeaturesView.java
@@ -11,14 +11,15 @@ import android.widget.EditText;
 import android.widget.LinearLayout;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.preferences.map.SolidOsmFeaturesList;
 import ch.bailu.aat.preferences.SolidString;
+import ch.bailu.aat.preferences.map.SolidOsmFeaturesList;
 import ch.bailu.aat.services.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.osm_features.MapFeaturesHandle;
 import ch.bailu.aat.services.cache.osm_features.MapFeaturesListEntry;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
+import ch.bailu.aat.util.filter_list.AbsFilterList;
 import ch.bailu.aat.util.filter_list.FilterList;
 import ch.bailu.aat.util.filter_list.KeyList;
 import ch.bailu.aat.views.BusyIndicator;
@@ -41,16 +42,7 @@ public class MapFeaturesView extends LinearLayout implements SharedPreferences.O
 
 
 
-    private final FilterList<MapFeaturesListEntry> list = new FilterList<MapFeaturesListEntry>() {
-        @Override
-        public boolean showElement(MapFeaturesListEntry e, KeyList keyList) {
-            if (keyList.isEmpty()) {
-                return e.isSummary();
-            } else {
-                return e.keys.fits(keyList);
-            }
-        }
-    };
+    private final FilterList list = new FilterList();
 
 
     private final BroadcastReceiver onListLoaded = new BroadcastReceiver() {
@@ -101,7 +93,7 @@ public class MapFeaturesView extends LinearLayout implements SharedPreferences.O
         return layout;
     }
 
-    public void setOnTextSelected(MapFeaturesListView.OnSelected s) {
+    public void setOnTextSelected(OnSelected s) {
         listView.setOnTextSelected(s);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/OnSelected.java b/app/src/main/java/ch/bailu/aat/views/osm_features/OnSelected.java
new file mode 100644
index 00000000..24681a83
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/OnSelected.java
@@ -0,0 +1,20 @@
+package ch.bailu.aat.views.osm_features;
+
+import ch.bailu.aat.util.filter_list.ListEntry;
+
+public interface OnSelected {
+    int EDIT = 0;
+    int SHOW = 1;
+    int FILTER = 2;
+    int SELECT = 3;
+
+    OnSelected NULL = new OnSelected() {
+        @Override
+        public void onSelected(ListEntry e, int action, String variant) {
+
+        }
+    };
+
+
+    void onSelected(ListEntry e, int action, String variant);
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListEntryView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListEntryView.java
new file mode 100644
index 00000000..901e1064
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListEntryView.java
@@ -0,0 +1,68 @@
+package ch.bailu.aat.views.osm_features;
+
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.filter_list.PoiListEntry;
+import ch.bailu.aat.util.ui.AppTheme;
+
+public class PoiListEntryView extends LinearLayout  {
+
+    private PoiListEntry entry;
+
+    private final OnSelected onSelected;
+
+    private final CheckBox checkBox;
+    private final TextView text;
+
+
+    public PoiListEntryView(final ServiceContext scontext, OnSelected s) {
+        super(scontext.getContext());
+
+
+
+        onSelected = s;
+
+        checkBox = new CheckBox(getContext());
+        checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+
+            }
+        });
+        checkBox.setClickable(false);
+        addView(checkBox);
+
+        text = new TextView(getContext());
+        this.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onSelected.onSelected(entry, 0, null);
+            }
+        });
+
+        addView(text);
+
+
+    }
+
+
+    public void set(final PoiListEntry e) {
+        entry = e;
+
+        if (e.isSummary()) {
+            checkBox.setVisibility(INVISIBLE);
+            AppTheme.main.header(text);
+        } else {
+            checkBox.setChecked(e.isSelected());
+            checkBox.setVisibility(VISIBLE);
+            AppTheme.main.content(text);
+        }
+
+        text.setText(entry.getTitle());
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListView.java
new file mode 100644
index 00000000..c6663581
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiListView.java
@@ -0,0 +1,139 @@
+package ch.bailu.aat.views.osm_features;
+
+import android.database.DataSetObserver;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.filter_list.FilterList;
+import ch.bailu.aat.util.filter_list.PoiListEntry;
+import ch.bailu.aat.util.ui.AppTheme;
+
+public class PoiListView extends ListView {
+
+
+    private DataSetObserver observer=null;
+    private final FilterList list;
+    private final ServiceContext scontext;
+
+    private OnSelected onSelected = OnSelected.NULL;
+
+
+    public PoiListView(ServiceContext sc, FilterList l) {
+        super(sc.getContext());
+
+        scontext = sc;
+        list = l;
+        final PoiListView.Adapter listAdapter = new PoiListView.Adapter();
+
+
+        AppTheme.themifyList(this);
+
+        setAdapter(listAdapter);
+        setOnItemClickListener(listAdapter);
+    }
+
+
+    public void onChanged() {
+        if (observer != null) observer.onChanged();
+    }
+
+
+    public void setOnTextSelected(OnSelected s) {
+        onSelected = s;
+    }
+
+
+    private class Adapter implements ListAdapter, android.widget.AdapterView.OnItemClickListener{
+
+        @Override
+        public int getCount() {
+            return list.sizeVisible();
+        }
+
+
+        @Override
+        public View getView(int index, View v, ViewGroup p) {
+            PoiListEntryView view;
+            if (v instanceof  MapFeaturesEntryView) {
+                view = (PoiListEntryView) v;
+            } else {
+                view = new PoiListEntryView(scontext, onSelected);
+            }
+
+            view.set((PoiListEntry) list.get(index));
+            return view;
+        }
+
+        @Override
+        public void registerDataSetObserver(DataSetObserver o) {
+            observer=o;
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver o) {
+            observer = null;
+        }
+
+
+
+        @Override
+        public void onItemClick(AdapterView<?> arg0, View view, int index, long arg3) {
+            onSelected.onSelected(list.get(index), 0,null);
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return list.get(position);
+        }
+
+
+        @Override
+        public long getItemId(int position) {
+            return list.get(position).getID();
+        }
+
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+
+        @Override
+        public boolean isEmpty() {
+            return getCount()==0;
+        }
+
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+
+        @Override
+        public boolean isEnabled(int index) {
+            return true;
+        }
+
+    }
+
+
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/osm_features/PoiView.java b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiView.java
new file mode 100644
index 00000000..2df7017a
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/osm_features/PoiView.java
@@ -0,0 +1,154 @@
+package ch.bailu.aat.views.osm_features;
+
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+
+import org.mapsforge.poi.android.storage.AndroidPoiPersistenceManagerFactory;
+import org.mapsforge.poi.storage.PoiCategory;
+import org.mapsforge.poi.storage.PoiCategoryManager;
+import org.mapsforge.poi.storage.PoiPersistenceManager;
+import org.mapsforge.poi.storage.UnknownPoiCategoryException;
+
+import java.util.ArrayList;
+
+import ch.bailu.aat.preferences.SolidString;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.filter_list.FilterList;
+import ch.bailu.aat.util.filter_list.ListEntry;
+import ch.bailu.aat.util.filter_list.PoiListEntry;
+import ch.bailu.aat.views.EditTextTool;
+import ch.bailu.aat.views.preferences.TitleView;
+
+public class PoiView  extends LinearLayout {
+
+    private final static String POI_FILE = "/storage/0B35-1209/maps/Alps/Alps_ML.poi";
+    private final static String FILTER_KEY = "PoiView";
+
+    private EditText filterView;
+    private PoiListView listView;
+
+    private final ServiceContext scontext;
+
+    private final FilterList list = new FilterList();
+
+
+    public PoiView(ServiceContext sc) {
+        super(sc.getContext());
+        scontext = sc;
+
+        setOrientation(VERTICAL);
+        addView(createHeader());
+        addView(createFilterView());
+        addView(createPoiList());
+
+        readList();
+    }
+
+
+    private void readList() {
+        list.clear();
+
+
+        final PoiPersistenceManager persistenceManager =
+                AndroidPoiPersistenceManagerFactory.getPoiPersistenceManager(POI_FILE);
+
+        final PoiCategoryManager categoryManager = persistenceManager.getCategoryManager();
+
+        try {
+            readList(categoryManager);
+        } catch (UnknownPoiCategoryException e) {
+            e.printStackTrace();
+        }
+
+        persistenceManager.close();
+        listView.onChanged();
+    }
+
+    private void readList(PoiCategoryManager categoryManager) throws UnknownPoiCategoryException {
+        final PoiCategory root = categoryManager.getRootCategory();
+
+        for (PoiCategory summary : root.getChildren()) {
+            PoiListEntry summaryEntry = new PoiListEntry(summary);
+            list.add(summaryEntry);
+
+            for (PoiCategory category : summary.getChildren()) {
+                list.add(new PoiListEntry(category, summaryEntry));
+            }
+        }
+
+    }
+
+    public View createHeader() {
+
+        LinearLayout layout = new LinearLayout(getContext());
+        layout.setOrientation(HORIZONTAL);
+        layout.addView(new TitleView(getContext(), POI_FILE));
+
+        return layout;
+    }
+
+
+    private View createPoiList() {
+        listView = new PoiListView(scontext, list);
+        listView.setOnTextSelected((e, action, variant) -> {
+            if (e.isSummary()) {
+                filterView.setText(e.getSummaryKey());
+
+            } else {
+                e.select();
+                list.filterAll();
+                listView.onChanged();
+            }
+        });
+
+        return listView;
+    }
+
+
+    private View createFilterView() {
+        filterView = new EditText(getContext());
+        filterView.setSingleLine(true);
+        filterView.setText(new SolidString(getContext(), FILTER_KEY).getValueAsStringNonDef());
+        filterView.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+                list.filter(charSequence.toString());
+                listView.onChanged();
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+
+            }
+        });
+
+        EditTextTool layout = new EditTextTool(filterView, LinearLayout.VERTICAL);
+        return layout;
+    }
+
+
+    public void onPause(ServiceContext sc) {
+        new SolidString(sc.getContext(), FILTER_KEY).setValue(filterView.getText().toString());
+    }
+
+    public ArrayList<PoiCategory> getCategories() {
+        ArrayList<PoiCategory> export = new ArrayList<>(10);
+
+        for (int i = 0; i< list.sizeVisible(); i++) {
+            PoiListEntry e = (PoiListEntry) list.get(i);
+
+            if (e.isSelected()) {
+                export.add(e.getCategory());
+            }
+        }
+        return export;
+    }
+}
