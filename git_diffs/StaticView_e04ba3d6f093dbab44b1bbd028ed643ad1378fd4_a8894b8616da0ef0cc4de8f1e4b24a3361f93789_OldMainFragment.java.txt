diff --git a/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryListAdapter.java b/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryListAdapter.java
new file mode 100644
index 0000000..693352b
--- /dev/null
+++ b/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryListAdapter.java
@@ -0,0 +1,51 @@
+package com.lubenard.oring_reminder.custom_components;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.lubenard.oring_reminder.DbManager;
+import com.lubenard.oring_reminder.MainActivity;
+import com.lubenard.oring_reminder.R;
+import com.lubenard.oring_reminder.ui.MainFragment;
+
+import java.util.ArrayList;
+
+public class HistoryListAdapter extends RecyclerView.Adapter<HistoryViewHolder> {
+
+    private ArrayList <RingModel> entryList;
+    private Context context;
+    private onListItemClickListener onListItemClickListener;
+
+    public HistoryListAdapter(ArrayList<RingModel> datas, onListItemClickListener onListItemClickListener) {
+        entryList = datas;
+        this.onListItemClickListener = onListItemClickListener;
+    }
+
+    @NonNull
+    @Override
+    public HistoryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
+        View view = inflater.inflate(R.layout.custom_entry_list_element, parent, false);
+        context = parent.getContext();
+        return new HistoryViewHolder(view, onListItemClickListener);
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull HistoryViewHolder holder, int position) {
+        holder.updateElementDatas(entryList.get(position), context);
+    }
+
+    @Override
+    public int getItemCount() {
+        return entryList.size();
+    }
+
+    public interface onListItemClickListener {
+        void onListItemClickListener(int position);
+    }
+}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryViewHolder.java b/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryViewHolder.java
new file mode 100644
index 0000000..977ff8c
--- /dev/null
+++ b/app/src/main/java/com/lubenard/oring_reminder/custom_components/HistoryViewHolder.java
@@ -0,0 +1,100 @@
+package com.lubenard.oring_reminder.custom_components;
+
+import android.content.Context;
+import android.view.View;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.lubenard.oring_reminder.MainActivity;
+import com.lubenard.oring_reminder.R;
+import com.lubenard.oring_reminder.broadcast_receivers.AfterBootBroadcastReceiver;
+import com.lubenard.oring_reminder.ui.MainFragment;
+import com.lubenard.oring_reminder.utils.Utils;
+
+import java.util.Date;
+import java.util.concurrent.TimeUnit;
+
+public class HistoryViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
+
+    private TextView weared_from;
+    private TextView weared_to;
+    private TextView weared_during;
+    private Context context;
+    private HistoryListAdapter.onListItemClickListener onListItemClickListener;
+
+    public HistoryViewHolder(@NonNull View itemView, HistoryListAdapter.onListItemClickListener onListItemClickListener) {
+        super(itemView);
+        weared_from = itemView.findViewById(R.id.custom_view_date_weared_from);
+        weared_to = itemView.findViewById(R.id.custom_view_date_weared_to);
+        weared_during = itemView.findViewById(R.id.custom_view_date_time_weared);
+        this.onListItemClickListener = onListItemClickListener;
+        itemView.setOnClickListener(this);
+    }
+
+    /**
+     * Convert the timeWeared from a int into a readable hour:minutes format
+     * @param timeWeared timeWeared is in minutes
+     * @return a string containing the time the user weared the protection
+     */
+    private String convertTimeWeared(int timeWeared) {
+        if (timeWeared < 60)
+            return timeWeared + context.getString(R.string.minute_with_M_uppercase);
+        else
+            return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
+    }
+
+    /**
+     * Get the total time pause for one session
+     * @param datePut The datetime the user put the protection
+     * @param entryId the entry id of the session
+     * @param dateRemoved The datetime the user removed the protection
+     * @return the total time in Minutes of new wearing time
+     */
+    private int getTotalTimePause(String datePut, long entryId, String dateRemoved) {
+        long oldTimeBeforeRemove;
+        int newValue;
+        long totalTimePause = 0;
+
+        if (dateRemoved == null)
+            oldTimeBeforeRemove = Utils.getDateDiff(datePut, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
+        else
+            oldTimeBeforeRemove = Utils.getDateDiff(datePut, dateRemoved, TimeUnit.MINUTES);
+
+        totalTimePause = AfterBootBroadcastReceiver.computeTotalTimePause(MainActivity.getDbManager(), entryId);
+        newValue = (int) (oldTimeBeforeRemove - totalTimePause);
+        return (newValue < 0) ? 0 : newValue;
+    }
+
+    public void updateElementDatas(RingModel dataModel, Context context) {
+        this.context = context;
+        String[] datePut = dataModel.getDatePut().split(" ");
+        weared_from.setText(datePut[0] + "\n" + datePut[1]);
+
+        if (!dataModel.getDateRemoved().equals("NOT SET YET")) {
+            String[] dateRemoved = dataModel.getDateRemoved().split(" ");
+            weared_to.setText(dateRemoved[0] + "\n" + dateRemoved[1]);
+        } else
+            weared_to.setText(dataModel.getDateRemoved());
+
+        if (dataModel.getIsRunning() == 0) {
+            int totalTimePause = getTotalTimePause(dataModel.getDatePut(), dataModel.getId(), dataModel.getDateRemoved());
+            if (totalTimePause / 60 >= 15)
+                weared_during.setTextColor(context.getResources().getColor(android.R.color.holo_green_dark));
+            else
+                weared_during.setTextColor(context.getResources().getColor(android.R.color.holo_red_dark));
+            weared_during.setText(convertTimeWeared(totalTimePause));
+        }
+        else {
+            long timeBeforeRemove = getTotalTimePause(dataModel.getDatePut(), dataModel.getId(), null);
+            weared_during.setTextColor(context.getResources().getColor(R.color.yellow));
+            weared_during.setText(String.format("%dh%02dm", timeBeforeRemove / 60, timeBeforeRemove % 60));
+        }
+    }
+
+    @Override
+    public void onClick(View view) {
+        onListItemClickListener.onListItemClickListener(getAdapterPosition());
+    }
+}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java b/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java
deleted file mode 100644
index bf0d7a1..0000000
--- a/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.lubenard.oring_reminder.custom_components;
-
-import com.lubenard.oring_reminder.MainActivity;
-import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.broadcast_receivers.AfterBootBroadcastReceiver;
-import com.lubenard.oring_reminder.utils.Utils;
-
-import java.util.Date;
-import java.util.concurrent.TimeUnit;
-
-public class MainListViewHolder {
-
-    /**
-     * Convert the timeWeared from a int into a readable hour:minutes format
-     * @param timeWeared timeWeared is in minutes
-     * @return a string containing the time the user weared the protection
-     */
-    /*private String convertTimeWeared(int timeWeared) {
-        if (timeWeared < 60)
-            return timeWeared + getString(R.string.minute_with_M_uppercase);
-        else
-            return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
-    }*/
-
-    /**
-     * Get the total time pause for one session
-     * @param datePut The datetime the user put the protection
-     * @param entryId the entry id of the session
-     * @param dateRemoved The datetime the user removed the protection
-     * @return the total time in Minutes of new wearing time
-     */
-    private int getTotalTimePause(String datePut, long entryId, String dateRemoved) {
-        long oldTimeBeforeRemove;
-        int newValue;
-        long totalTimePause = 0;
-
-        if (dateRemoved == null)
-            oldTimeBeforeRemove = Utils.getDateDiff(datePut, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
-        else
-            oldTimeBeforeRemove = Utils.getDateDiff(datePut, dateRemoved, TimeUnit.MINUTES);
-
-        totalTimePause = AfterBootBroadcastReceiver.computeTotalTimePause(MainActivity.getDbManager(), entryId);
-        newValue = (int) (oldTimeBeforeRemove - totalTimePause);
-        return (newValue < 0) ? 0 : newValue;
-    }
-}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/HistoryFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/HistoryFragment.java
new file mode 100644
index 0000000..80c5f41
--- /dev/null
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/HistoryFragment.java
@@ -0,0 +1,150 @@
+package com.lubenard.oring_reminder.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+
+import com.lubenard.oring_reminder.MainActivity;
+import com.lubenard.oring_reminder.DbManager;
+import com.lubenard.oring_reminder.R;
+import com.lubenard.oring_reminder.custom_components.HistoryListAdapter;
+import com.lubenard.oring_reminder.custom_components.RingModel;
+import com.lubenard.oring_reminder.utils.Utils;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.DividerItemDecoration;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+
+import android.view.ViewGroup;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.concurrent.TimeUnit;
+
+public class HistoryFragment extends Fragment implements HistoryListAdapter.onListItemClickListener{
+
+    public static final String TAG = "HistoryFragment";
+
+    // We can set thoses variables as static, because we know the view is going to be created
+    private static ArrayList<RingModel> dataModels;
+    private static DbManager dbManager;
+    private static HistoryListAdapter adapter;
+    private static RecyclerView recyclerView;
+    private static Context context;
+    private static boolean orderEntryByDesc = true;
+    private LinearLayoutManager linearLayoutManager;
+    private static HistoryListAdapter.onListItemClickListener onListItemClickListener;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        return inflater.inflate(R.layout.main_content_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        getActivity().setTitle(R.string.app_name);
+        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+
+        recyclerView = view.findViewById(R.id.main_list);
+
+        // Add dividers (like listView) to recyclerView
+        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(),
+                DividerItemDecoration.VERTICAL);
+        recyclerView.addItemDecoration(dividerItemDecoration);
+
+        linearLayoutManager = new LinearLayoutManager(getContext());
+        recyclerView.setLayoutManager(linearLayoutManager);
+
+        onListItemClickListener = this;
+
+        dataModels = new ArrayList<>();
+        dbManager = MainActivity.getDbManager();
+        context = getContext();
+
+        Log.d(TAG, "DB version is: " + dbManager.getVersion());
+    }
+
+    /**
+     * Update the listView by fetching all elements from the db
+     */
+    public static void updateElementList() {
+        Log.d(TAG, "Updated history Listview");
+        dataModels.clear();
+        LinkedHashMap<Integer, RingModel> entrysDatas = dbManager.getAllDatasForMainList(orderEntryByDesc);
+        for (LinkedHashMap.Entry<Integer, RingModel> oneElemData : entrysDatas.entrySet())
+            dataModels.add(oneElemData.getValue());
+        adapter = new HistoryListAdapter(dataModels, onListItemClickListener);
+        recyclerView.setAdapter(adapter);
+    }
+
+    /**
+     * Compute all pause time into interval
+     * @param dbManager The database manager, avoiding to create a new instance
+     * @param entryId entry for the wanted session
+     * @param date24HoursAgo oldest boundaries
+     * @param dateNow interval newest boundaries
+     * @return the time in Minutes of pauses between the interval
+     */
+    public static int computeTotalTimePauseForId(DbManager dbManager, long entryId, String date24HoursAgo, String dateNow) {
+        ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
+        int totalTimePause = 0;
+        for (int i = 0; i < pausesDatas.size(); i++) {
+            RingModel currentBreak = pausesDatas.get(i);
+            if (pausesDatas.get(i).getIsRunning() == 0) {
+                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0 &&
+                        Utils.getDateDiff(currentBreak.getDatePut(), dateNow, TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "pause at index " + i + " is added: " + pausesDatas.get(i).getTimeWeared());
+                    totalTimePause += currentBreak.getTimeWeared();
+                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0 &&
+                        Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS));
+                    totalTimePause += Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.MINUTES);
+                }
+            } else {
+                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "running pause at index " + i + " is added: " + Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.SECONDS));
+                    totalTimePause += Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.MINUTES);
+                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0) {
+                    Log.d(TAG, "running pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
+                    totalTimePause += Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
+                }
+            }
+        }
+        return totalTimePause;
+    }
+
+    /**
+     * Each time the app is resumed, fetch new entry
+     */
+    @Override
+    public void onResume() {
+        super.onResume();
+        updateElementList();
+    }
+
+    /**
+     * onClickManager handling clicks on the main List
+     */
+    @Override
+    public void onListItemClickListener(int position) {
+        RingModel dataModel= dataModels.get(position);
+        Log.d(TAG, "Element " + dataModel.getId());
+        EntryDetailsFragment fragment = new EntryDetailsFragment();
+        Bundle bundle = new Bundle();
+        bundle.putLong("entryId", dataModel.getId());
+        fragment.setArguments(bundle);
+        getActivity().getSupportFragmentManager().beginTransaction()
+                .replace(android.R.id.content, fragment, null)
+                .addToBackStack(null).commit();
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
index fdb6ceb..48129ae 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
@@ -42,6 +42,7 @@ public class MainFragment extends Fragment {
     private TextView progress_bar_text;
     private Button button_start_break;
     private ImageButton button_see_curr_session;
+    private Button button_see_full_history;
     private FloatingActionButton fab;
     private TextView text_view_break;
     private View view;
@@ -309,24 +310,18 @@ public class MainFragment extends Fragment {
             fab.setBackgroundTintList(ColorStateList.valueOf(getContext().getResources().getColor(android.R.color.holo_red_dark)));
             fab.setImageDrawable(getResources().getDrawable(R.drawable.outline_close_24));
             updateCurrSessionDatas();
-            button_see_curr_session.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    EntryDetailsFragment fragment = new EntryDetailsFragment();
-                    Bundle bundle = new Bundle();
-                    bundle.putLong("entryId", dbManager.getLastRunningEntry().getId());
-                    fragment.setArguments(bundle);
-                    getActivity().getSupportFragmentManager().beginTransaction()
-                            .replace(android.R.id.content, fragment, null)
-                            .addToBackStack(null).commit();
-                }
+            button_see_curr_session.setOnClickListener(v -> {
+                EntryDetailsFragment fragment = new EntryDetailsFragment();
+                Bundle bundle = new Bundle();
+                bundle.putLong("entryId", dbManager.getLastRunningEntry().getId());
+                fragment.setArguments(bundle);
+                getActivity().getSupportFragmentManager().beginTransaction()
+                        .replace(android.R.id.content, fragment, null)
+                        .addToBackStack(null).commit();
             });
-            fab.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    dbManager.endSession(dbManager.getLastRunningEntry().getId());
-                    updateDesign();
-                }
+            fab.setOnClickListener(v -> {
+                dbManager.endSession(dbManager.getLastRunningEntry().getId());
+                updateDesign();
             });
         }
         updateHistoryList();
@@ -352,11 +347,23 @@ public class MainFragment extends Fragment {
         button_start_break = view.findViewById(R.id.button_start_break);
         button_see_curr_session = view.findViewById(R.id.see_current_session);
 
+        button_see_full_history = view.findViewById(R.id.button_see_history);
+
         this.view = view;
 
         getActivity().setTitle(R.string.app_name);
         ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
 
+        button_see_full_history.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                HistoryFragment fragment = new HistoryFragment();
+                getActivity().getSupportFragmentManager().beginTransaction()
+                        .replace(android.R.id.content, fragment, null)
+                        .addToBackStack(null).commit();
+            }
+        });
+
         updateDesign();
     }
 }
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java
deleted file mode 100644
index be10f06..0000000
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java
+++ /dev/null
@@ -1,226 +0,0 @@
-package com.lubenard.oring_reminder.ui;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-
-import com.google.android.material.floatingactionbutton.FloatingActionButton;
-import com.lubenard.oring_reminder.MainActivity;
-import com.lubenard.oring_reminder.DbManager;
-import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.custom_components.RingModel;
-import com.lubenard.oring_reminder.utils.Utils;
-
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.fragment.app.Fragment;
-import androidx.preference.PreferenceManager;
-import androidx.recyclerview.widget.DividerItemDecoration;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-
-import android.view.ViewGroup;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.LinkedHashMap;
-import java.util.concurrent.TimeUnit;
-
-public class OldMainFragment extends Fragment{
-
-    public static final String TAG = "MainFragment";
-
-    // We can set thoses variables as static, because we know the view is going to be created
-    private static ArrayList<RingModel> dataModels;
-    private static DbManager dbManager;
-    private static RecyclerView recyclerView;
-    private static Context context;
-    private static boolean orderEntryByDesc = true;
-    private static TextView statLastDayTextview;
-    private LinearLayoutManager linearLayoutManager;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setHasOptionsMenu(true);
-        return inflater.inflate(R.layout.fragment_main, container, false);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-
-        getActivity().setTitle(R.string.app_name);
-        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
-
-        FloatingActionButton fab = view.findViewById(R.id.fab);
-
-        recyclerView = view.findViewById(R.id.main_list);
-
-        // Add dividers (like listView) to recyclerView
-        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(),
-                DividerItemDecoration.VERTICAL);
-        recyclerView.addItemDecoration(dividerItemDecoration);
-
-        linearLayoutManager = new LinearLayoutManager(getContext());
-        recyclerView.setLayoutManager(linearLayoutManager);
-
-        dataModels = new ArrayList<>();
-        dbManager = MainActivity.getDbManager();
-        context = getContext();
-
-        Log.d(TAG, "DB version is: " + dbManager.getVersion());
-
-        statLastDayTextview = view.findViewById(R.id.header_last_day);
-
-        fab.setOnClickListener(view12 -> actionOnPlusButton(false));
-
-        fab.setOnLongClickListener(view1 -> {
-            actionOnPlusButton(true);
-            return true;
-        });
-    }
-
-    /**
-     * Define what action should be done on longClick on the '+' button
-     * @param isLongClick act if it is a long click or not
-     */
-    private void actionOnPlusButton(boolean isLongClick) {
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
-        String action = sharedPreferences.getString("ui_action_on_plus_button", "default");
-
-        if (isLongClick) {
-            if (action.equals("default")) {
-                createNewEntry();
-            } else {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-            }
-        } else {
-            if (action.equals("default")) {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-            } else {
-                createNewEntry();
-            }
-        }
-    }
-
-
-    /**
-     * Recompute last 24 h header according to pauses
-     */
-    private static void recomputeLastWearingTime() {
-        int totalTimeLastDay = 0;
-        int pauseTimeForThisEntry = 0;
-        Calendar calendar = Calendar.getInstance();
-        String todayDate = Utils.getdateFormatted(calendar.getTime());
-        calendar.add(Calendar.HOUR_OF_DAY, -24);
-        String last24Hours = Utils.getdateFormatted(calendar.getTime());
-        Log.d(TAG, "Computing last 24 hours: interval is between: " + last24Hours + " and " + todayDate);
-        RingModel currentModel;
-        for (int i = 0; i != ((dataModels.size() > 5) ? 5 : dataModels.size()); i++) {
-            currentModel = dataModels.get(i);
-            pauseTimeForThisEntry = computeTotalTimePauseForId(dbManager, currentModel.getId(), last24Hours, todayDate);
-            if (currentModel.getIsRunning() == 0) {
-                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0 &&
-                        Utils.getDateDiff(currentModel.getDateRemoved(), todayDate, TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "entry at index " + i + " is added: " + dataModels.get(i).getTimeWeared());
-                    totalTimeLastDay += currentModel.getTimeWeared() - pauseTimeForThisEntry;
-                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0 &&
-                        Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(),  TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.SECONDS));
-                    totalTimeLastDay += Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                }
-            } else {
-                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "running entry at index " + i + " is added: " + Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.SECONDS));
-                    totalTimeLastDay += Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0) {
-                    Log.d(TAG, "running entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
-                    totalTimeLastDay += Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                }
-            }
-        }
-        Log.d(TAG, "Computed last 24 hours is: " + totalTimeLastDay + "mn");
-        statLastDayTextview.setText(context.getString(R.string.last_day_string_header) + String.format("%dh%02dm", totalTimeLastDay / 60, totalTimeLastDay % 60));
-    }
-
-    /**
-     * Compute all pause time into interval
-     * @param dbManager The database manager, avoiding to create a new instance
-     * @param entryId entry for the wanted session
-     * @param date24HoursAgo oldest boundaries
-     * @param dateNow interval newest boundaries
-     * @return the time in Minutes of pauses between the interval
-     */
-    public static int computeTotalTimePauseForId(DbManager dbManager, long entryId, String date24HoursAgo, String dateNow) {
-        ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
-        int totalTimePause = 0;
-        for (int i = 0; i < pausesDatas.size(); i++) {
-            RingModel currentBreak = pausesDatas.get(i);
-            if (pausesDatas.get(i).getIsRunning() == 0) {
-                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0 &&
-                        Utils.getDateDiff(currentBreak.getDatePut(), dateNow, TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "pause at index " + i + " is added: " + pausesDatas.get(i).getTimeWeared());
-                    totalTimePause += currentBreak.getTimeWeared();
-                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0 &&
-                        Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS));
-                    totalTimePause += Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.MINUTES);
-                }
-            } else {
-                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "running pause at index " + i + " is added: " + Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.SECONDS));
-                    totalTimePause += Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.MINUTES);
-                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0) {
-                    Log.d(TAG, "running pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
-                    totalTimePause += Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
-                }
-            }
-        }
-        return totalTimePause;
-    }
-
-    /**
-     * Launch the new Entry fragment, and specify we do not want to update a entry
-     */
-    private void createNewEntry() {
-        EditEntryFragment fragment = new EditEntryFragment(getContext());
-        Bundle bundle = new Bundle();
-        bundle.putLong("entryId", -1);
-        fragment.setArguments(bundle);
-        getActivity().getSupportFragmentManager().beginTransaction()
-                .replace(android.R.id.content, fragment, null)
-                .addToBackStack(null).commit();
-    }
-
-    /**
-     * onClickManager handling clicks on the main List
-     */
-    /*@Override
-    public void onListItemClickListener(int position) {
-        RingModel dataModel= dataModels.get(position);
-        Log.d(TAG, "Element " + dataModel.getId());
-        EntryDetailsFragment fragment = new EntryDetailsFragment();
-        Bundle bundle = new Bundle();
-        bundle.putLong("entryId", dataModel.getId());
-        fragment.setArguments(bundle);
-        getActivity().getSupportFragmentManager().beginTransaction()
-                .replace(android.R.id.content, fragment, null)
-                .addToBackStack(null).commit();
-    }*/
-}
\ No newline at end of file
