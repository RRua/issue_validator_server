M	QuoteUnquote.cloudLib
M	QuoteUnquote.cloudLib.functions
M	QuoteUnquote.utilsLib
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
index 5c399ff..f42db8b 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteModel.java
@@ -552,9 +552,9 @@ public class QuoteUnquoteModel {
     }
 
     @Nullable
-    public ArrayList<String> exportFavourites() {
+    public List<String> exportFavourites() {
         Future<ArrayList<String>> future = QuoteUnquoteWidget.getExecutorService().submit(() -> {
-            ArrayList<String> exportedFavourites = new ArrayList<String>();
+            ArrayList<String> exportedFavourites = new ArrayList<>();
 
             for (String favouriteDigest : this.databaseRepository.getFavourites()) {
                 QuotationEntity quotationEntity
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
index cff6a47..42f9128 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/QuoteUnquoteWidget.java
@@ -559,25 +559,21 @@ public final class QuoteUnquoteWidget extends AppWidgetProvider {
             @NonNull RemoteViews remoteViews) {
         Timber.d("%d", widgetId);
 
-        switch (getAppearancePreferences(context, widgetId).getAppearanceToolbarColour()) {
-            case "#FFFFFFFF":
-                remoteViews.setImageViewResource(R.id.imageButtonFirst, R.drawable.ic_toolbar_first_ffffffff_24);
-                remoteViews.setImageViewResource(R.id.imageButtonPrevious, R.drawable.ic_toolbar_previous_ffffffff_24);
-                remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_ffffffff_24);
-                remoteViews.setImageViewResource(R.id.imageButtonShare, R.drawable.ic_toolbar_share_ffffffff_24);
-                remoteViews.setImageViewResource(R.id.imageButtonNextSequential, R.drawable.ic_toolbar_next_sequential_ffffffff_24);
-                remoteViews.setImageViewResource(R.id.imageButtonNextRandom, R.drawable.ic_toolbar_next_random_ffffffff_24);
-                break;
-
-            default:
-                // case "#FF000000":
-                remoteViews.setImageViewResource(R.id.imageButtonFirst, R.drawable.ic_toolbar_first_ff000000_24);
-                remoteViews.setImageViewResource(R.id.imageButtonPrevious, R.drawable.ic_toolbar_previous_ff000000_24);
-                remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_ff000000_24);
-                remoteViews.setImageViewResource(R.id.imageButtonShare, R.drawable.ic_toolbar_share_ff000000_24);
-                remoteViews.setImageViewResource(R.id.imageButtonNextSequential, R.drawable.ic_toolbar_next_sequential_ff000000_24);
-                remoteViews.setImageViewResource(R.id.imageButtonNextRandom, R.drawable.ic_toolbar_next_random_ff000000_24);
-                break;
+        if (getAppearancePreferences(context, widgetId).getAppearanceToolbarColour().equals("#FFFFFFFF")) {
+            remoteViews.setImageViewResource(R.id.imageButtonFirst, R.drawable.ic_toolbar_first_ffffffff_24);
+            remoteViews.setImageViewResource(R.id.imageButtonPrevious, R.drawable.ic_toolbar_previous_ffffffff_24);
+            remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_ffffffff_24);
+            remoteViews.setImageViewResource(R.id.imageButtonShare, R.drawable.ic_toolbar_share_ffffffff_24);
+            remoteViews.setImageViewResource(R.id.imageButtonNextSequential, R.drawable.ic_toolbar_next_sequential_ffffffff_24);
+            remoteViews.setImageViewResource(R.id.imageButtonNextRandom, R.drawable.ic_toolbar_next_random_ffffffff_24);
+        } else {
+            // "#FF000000":
+            remoteViews.setImageViewResource(R.id.imageButtonFirst, R.drawable.ic_toolbar_first_ff000000_24);
+            remoteViews.setImageViewResource(R.id.imageButtonPrevious, R.drawable.ic_toolbar_previous_ff000000_24);
+            remoteViews.setImageViewResource(R.id.imageButtonFavourite, R.drawable.ic_toolbar_favorite_ff000000_24);
+            remoteViews.setImageViewResource(R.id.imageButtonShare, R.drawable.ic_toolbar_share_ff000000_24);
+            remoteViews.setImageViewResource(R.id.imageButtonNextSequential, R.drawable.ic_toolbar_next_sequential_ff000000_24);
+            remoteViews.setImageViewResource(R.id.imageButtonNextRandom, R.drawable.ic_toolbar_next_random_ff000000_24);
         }
 
         this.setHeartColour(context, widgetId, remoteViews);
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java
index e865912..a81886a 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/cloud/CloudServiceReceive.java
@@ -23,11 +23,8 @@ import java.util.concurrent.ConcurrentHashMap;
 import timber.log.Timber;
 
 public class CloudServiceReceive extends Service {
-    @NonNull
     private IBinder binder;
-    @NonNull
     private Handler handler = getHandler();
-    @NonNull
     private CloudFavourites cloudFavourites = getCloudFavourites();
     public boolean isRunning;
 
@@ -81,7 +78,6 @@ public class CloudServiceReceive extends Service {
 
                 Context context = getServiceContext();
 
-
                 if (!cloudFavourites.isInternetAvailable()) {
                     CloudServiceHelper.showNoNetworkToast(context, handler);
                 } else {
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
index 343d38b..4d00771 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/ConfigureActivity.java
@@ -111,7 +111,7 @@ public class ConfigureActivity extends AppCompatActivity {
     }
 
     @Override
-    public void onCreate(final @NonNull Bundle bundle) {
+    public void onCreate(final @Nullable Bundle bundle) {
         Timber.d("onCreate");
         super.onCreate(bundle);
 
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java
index e9ef523..5750cdf 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentFragment.java
@@ -537,7 +537,7 @@ public class ContentFragment extends FragmentCommon {
                             FileOutputStream fileOutputStream
                                     = new FileOutputStream(parcelFileDescriptor.getFileDescriptor());
 
-                            ArrayList<String> exportableFavourites = quoteUnquoteModel.exportFavourites();
+                        ArrayList<String> exportableFavourites = (ArrayList) quoteUnquoteModel.exportFavourites();
                             Collections.reverse(exportableFavourites);
 
                             int favouriteIndex = 1;
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java
index 661bca2..8b8b9af 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/configure/fragment/content/ContentPreferences.java
@@ -21,103 +21,103 @@ public class ContentPreferences extends PreferencesFacade {
     private static final String CONTENT_SEARCH_TEXT = "CONTENT_SEARCH_TEXT";
     private static final String CONTENT_ADD_TO_PREVIOUS_ALL = "CONTENT_ADD_TO_PREVIOUS_ALL";
 
-    public ContentPreferences(@NonNull Context applicationContext) {
+    public ContentPreferences(@NonNull final Context applicationContext) {
         super(0, applicationContext);
     }
 
-    public ContentPreferences(int widgetId, @NonNull Context applicationContext) {
+    public ContentPreferences(final int widgetId, @NonNull final Context applicationContext) {
         super(widgetId, applicationContext);
     }
 
     @NonNull
     public String getContentSelectionAuthor() {
-        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR_NAME));
+        return preferenceHelper.getPreferenceString(getPreferenceKey(CONTENT_AUTHOR_NAME));
     }
 
-    public void setContentSelectionAuthor(@NonNull String value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR_NAME), value);
+    public void setContentSelectionAuthor(@NonNull final String value) {
+        preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR_NAME), value);
     }
 
     @NonNull
     public boolean getContentAddToPreviousAll() {
-        return this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(ContentPreferences.CONTENT_ADD_TO_PREVIOUS_ALL), false);
+        return preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_ADD_TO_PREVIOUS_ALL), false);
     }
 
-    public void setContentAddToPreviousAll(@NonNull boolean value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_ADD_TO_PREVIOUS_ALL), value);
+    public void setContentAddToPreviousAll(@NonNull final boolean value) {
+        preferenceHelper.setPreference(getPreferenceKey(CONTENT_ADD_TO_PREVIOUS_ALL), value);
     }
 
     @NonNull
     public String getContentFavouritesLocalCode() {
-        return this.preferenceHelper.getPreferenceString(this.getFavouritesLocalCode());
+        return preferenceHelper.getPreferenceString(getFavouritesLocalCode());
     }
 
-    public void setContentFavouritesLocalCode(@NonNull String value) {
-        this.preferenceHelper.setPreference(this.getFavouritesLocalCode(), value);
+    public void setContentFavouritesLocalCode(@NonNull final String value) {
+        preferenceHelper.setPreference(getFavouritesLocalCode(), value);
     }
 
     @NonNull
     public String getContentSelectionSearch() {
-        return this.preferenceHelper.getPreferenceString(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH_TEXT));
+        return preferenceHelper.getPreferenceString(getPreferenceKey(CONTENT_SEARCH_TEXT));
     }
 
-    public void setContentSelectionSearch(@NonNull String value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH_TEXT), value);
+    public void setContentSelectionSearch(@NonNull final String value) {
+        preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH_TEXT), value);
     }
 
     public int getContentSelectionSearchCount() {
-        return this.preferenceHelper.getPreferenceInt(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH_COUNT));
+        return preferenceHelper.getPreferenceInt(getPreferenceKey(CONTENT_SEARCH_COUNT));
     }
 
-    public void setContentSelectionSearchCount(final int value) {
-        this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH_COUNT), value);
+    public void setContentSelectionSearchCount(int value) {
+        preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH_COUNT), value);
     }
 
     @NonNull
     public ContentSelection getContentSelection() {
-        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR), false)) {
+        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_AUTHOR), false)) {
             return ContentSelection.AUTHOR;
         }
 
-        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(ContentPreferences.CONTENT_FAVOURITES), false)) {
+        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_FAVOURITES), false)) {
             return ContentSelection.FAVOURITES;
         }
 
-        if (this.preferenceHelper.getPreferenceBoolean(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH), false)) {
+        if (preferenceHelper.getPreferenceBoolean(getPreferenceKey(CONTENT_SEARCH), false)) {
             return ContentSelection.SEARCH;
         }
 
         return ContentSelection.ALL;
     }
 
-    public void setContentSelection(@NonNull ContentSelection contentSelection) {
+    public void setContentSelection(@NonNull final ContentSelection contentSelection) {
         switch (contentSelection) {
             case ALL:
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_ALL), true);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_FAVOURITES), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), true);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
                 break;
 
             case AUTHOR:
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_ALL), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR), true);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_FAVOURITES), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), true);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
                 break;
 
             case FAVOURITES:
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_ALL), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_FAVOURITES), true);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), true);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), false);
                 break;
 
             case SEARCH:
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_ALL), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_AUTHOR), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_FAVOURITES), false);
-                this.preferenceHelper.setPreference(this.getPreferenceKey(ContentPreferences.CONTENT_SEARCH), true);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_ALL), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_AUTHOR), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_FAVOURITES), false);
+                preferenceHelper.setPreference(getPreferenceKey(CONTENT_SEARCH), true);
                 break;
 
             default:
@@ -129,62 +129,62 @@ public class ContentPreferences extends PreferencesFacade {
     @NonNull
     @Override
     public String toString() {
-        return this.getContentSelection().toString();
+        return getContentSelection().toString();
     }
 
     public void performMigration() {
-        Map<String, ?> sharedPreferenceEntries
-                = this.applicationContext.getSharedPreferences("QuoteUnquote-Preferences", Context.MODE_PRIVATE).getAll();
-
-        for (Map.Entry<String, ?> entry : sharedPreferenceEntries.entrySet()) {
-            this.widgetId = Integer.parseInt(entry.getKey().substring(0, entry.getKey().indexOf(":")));
-
-            if (entry.getKey().contains("FragmentContent:radioButtonAll")) {
-                final boolean radioButtonAll = (Boolean) entry.getValue();
-                Timber.d("%d: radioButtonAll=%b", this.widgetId, radioButtonAll);
-                if (radioButtonAll) {
-                    this.setContentSelection(ContentSelection.ALL);
-                }
-            }
+        final Map<String, ?> sharedPreferenceEntries
+                = applicationContext.getSharedPreferences("QuoteUnquote-Preferences", Context.MODE_PRIVATE).getAll();
 
-            if (entry.getKey().contains("FragmentContent:radioButtonAuthor")) {
-                final boolean radioButtonAuthor = (Boolean) entry.getValue();
-                Timber.d("%d: radioButtonAuthor=%b", this.widgetId, radioButtonAuthor);
-                if (radioButtonAuthor) {
-                    this.setContentSelection(ContentSelection.AUTHOR);
-                }
-            }
-            if (entry.getKey().contains("FragmentContent:spinnerAuthors")) {
-                final String spinnerAuthors = (String) entry.getValue();
-                Timber.d("%d: spinnerAuthors=%s", this.widgetId, spinnerAuthors);
-                this.setContentSelectionAuthor(spinnerAuthors);
-            }
+        for (final Map.Entry<String, ?> entry : sharedPreferenceEntries.entrySet()) {
+            widgetId = Integer.parseInt(entry.getKey().substring(0, entry.getKey().indexOf(":")));
 
-            if (entry.getKey().contains("FragmentContent:radioButtonFavourites")) {
-                final boolean radioButtonFavourites = (Boolean) entry.getValue();
-                Timber.d("%d: radioButtonFavourites=%b", this.widgetId, radioButtonFavourites);
-                if (radioButtonFavourites) {
-                    this.setContentSelection(ContentSelection.FAVOURITES);
-                }
-            }
+            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonAll", "%d: radioButtonAll=%b", ContentSelection.ALL);
 
-            if (entry.getKey().equals("0:FragmentContent:textViewFavouritesCode")) {
-                final String textViewFavouritesCode = (String) entry.getValue();
-                Timber.d("%d: textViewFavouritesCode=%s", this.widgetId, textViewFavouritesCode);
-                this.setContentFavouritesLocalCode(textViewFavouritesCode);
-            }
+            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonAuthor", "%d: radioButtonAuthor=%b", ContentSelection.AUTHOR);
 
-            if (entry.getKey().contains("FragmentContent:radioButtonKeywords")) {
-                final boolean radioButtonKeywords = (Boolean) entry.getValue();
-                Timber.d("%d: radioButtonKeywords=%b", this.widgetId, radioButtonKeywords);
-                if (radioButtonKeywords) {
-                    this.setContentSelection(ContentSelection.SEARCH);
-                }
-            }
-            if (entry.getKey().contains("FragmentContent:editTextKeywords")) {
-                final String editTextKeywords = (String) entry.getValue();
-                Timber.d("%d: editTextKeywords=%s", this.widgetId, editTextKeywords);
-                this.setContentSelectionSearch(editTextKeywords);
+            this.migrationSpinnerAuthors(entry);
+
+            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonFavourites", "%d: radioButtonFavourites=%b", ContentSelection.FAVOURITES);
+
+            this.migrationTextViewFavouritesCode(entry);
+
+            this.migrationRadioButtonAll(entry, "FragmentContent:radioButtonKeywords", "%d: radioButtonKeywords=%b", ContentSelection.SEARCH);
+
+            this.migrationEditTextKeywords(entry);
+        }
+    }
+
+    private void migrationEditTextKeywords(final Map.Entry<String, ?> entry) {
+        if (entry.getKey().contains("FragmentContent:editTextKeywords")) {
+            String editTextKeywords = (String) entry.getValue();
+            Timber.d("%d: editTextKeywords=%s", widgetId, editTextKeywords);
+            setContentSelectionSearch(editTextKeywords);
+        }
+    }
+
+    private void migrationTextViewFavouritesCode(final Map.Entry<String, ?> entry) {
+        if (entry.getKey().equals("0:FragmentContent:textViewFavouritesCode")) {
+            String textViewFavouritesCode = (String) entry.getValue();
+            Timber.d("%d: textViewFavouritesCode=%s", widgetId, textViewFavouritesCode);
+            setContentFavouritesLocalCode(textViewFavouritesCode);
+        }
+    }
+
+    private void migrationSpinnerAuthors(final Map.Entry<String, ?> entry) {
+        if (entry.getKey().contains("FragmentContent:spinnerAuthors")) {
+            String spinnerAuthors = (String) entry.getValue();
+            Timber.d("%d: spinnerAuthors=%s", widgetId, spinnerAuthors);
+            setContentSelectionAuthor(spinnerAuthors);
+        }
+    }
+
+    private void migrationRadioButtonAll(final Map.Entry<String, ?> entry, final String s, final String s2, final ContentSelection all) {
+        if (entry.getKey().contains(s)) {
+            boolean radioButtonAll = (Boolean) entry.getValue();
+            Timber.d(s2, widgetId, radioButtonAll);
+            if (radioButtonAll) {
+                setContentSelection(all);
             }
         }
     }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
index c4bde8f..c8952f7 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/listview/ListViewProvider.java
@@ -97,25 +97,17 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
         synchronized (this) {
             if (this.quotationList.isEmpty()) {
                 // first time call
-
-                if (quotationEntity.theQuotation() == null) {
-                    this.quotationList.add("");
-                    this.quotationList.add("");
-                    this.quotationList.add("");
-                }
-                else {
-                    this.quotationList.add(this.quotationEntity.theQuotation());
-                    this.quotationList.add(this.quotationEntity.theAuthor());
-                    this.quotationList.add(this.quotationPosition);
-                }
+                this.quotationList.add(this.quotationEntity.theQuotation());
+                this.quotationList.add(this.quotationEntity.theAuthor());
+                this.quotationList.add(this.quotationPosition);
             } else {
                 // subsequent calls
-                if (!"".equals(this.quotationEntity.theQuotation())) {
-                    if (!this.quotationList.get(0).equals(this.quotationEntity.theQuotation())) {
-                        this.quotationList.set(0, this.quotationEntity.theQuotation());
-                        this.quotationList.set(1, this.quotationEntity.theAuthor());
-                        this.quotationList.set(2, this.quotationPosition);
-                    }
+                if (!"".equals(this.quotationEntity.theQuotation())
+                        &&
+                        !this.quotationList.get(0).equals(this.quotationEntity.theQuotation())) {
+                    this.quotationList.set(0, this.quotationEntity.theQuotation());
+                    this.quotationList.set(1, this.quotationEntity.theAuthor());
+                    this.quotationList.set(2, this.quotationPosition);
                 }
             }
         }
@@ -235,15 +227,16 @@ class ListViewProvider implements RemoteViewsService.RemoteViewsFactory {
                         R.id.textViewRowPosition,
                         Color.parseColor(this.textColour));
 
-                final int paintFlags = Paint.ANTI_ALIAS_FLAG; // | Paint.FAKE_BOLD_TEXT_FLAG;
+                final int paintFlags = Paint.ANTI_ALIAS_FLAG;
+                final String methodName = "setPaintFlags";
 
                 if (!this.quotationEntity.wikipedia.equals("?")) {
-                    remoteViews.setInt(R.id.textViewRowAuthor, "setPaintFlags",
+                    remoteViews.setInt(R.id.textViewRowAuthor, methodName,
                             paintFlags | Paint.UNDERLINE_TEXT_FLAG);
                 } else {
-                    remoteViews.setInt(R.id.textViewRowQuotation, "setPaintFlags", paintFlags);
-                    remoteViews.setInt(R.id.textViewRowAuthor, "setPaintFlags", paintFlags);
-                    remoteViews.setInt(R.id.textViewRowPosition, "setPaintFlags", paintFlags);
+                    remoteViews.setInt(R.id.textViewRowQuotation, methodName, paintFlags);
+                    remoteViews.setInt(R.id.textViewRowAuthor, methodName, paintFlags);
+                    remoteViews.setInt(R.id.textViewRowPosition, methodName, paintFlags);
                 }
             }
         }
diff --git a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
index 730e6dc..ab6f4e7 100644
--- a/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
+++ b/app/src/main/java/com/github/jameshnsears/quoteunquote/utils/NotificationHelper.java
@@ -16,7 +16,7 @@ import com.github.jameshnsears.quoteunquote.database.quotation.QuotationEntity;
 public class NotificationHelper {
     private int notificationId;
 
-    public void displayNotification(@NonNull final Context context, @Nullable final QuotationEntity quotationEntity) {
+    public void displayNotification(@Nullable final Context context, @Nullable final QuotationEntity quotationEntity) {
         if (quotationEntity != null) {
             final CharSequence author = this.restrictAuthorSize(quotationEntity.author);
 
