diff --git a/privacypolice/src/main/java/be/uhasselt/privacypolice/MACManagerActivity.java b/privacypolice/src/main/java/be/uhasselt/privacypolice/MACManagerActivity.java
new file mode 100644
index 0000000..9f36432
--- /dev/null
+++ b/privacypolice/src/main/java/be/uhasselt/privacypolice/MACManagerActivity.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 2014, 2015 Bram Bonné
+ *
+ * This file is part of Wi-Fi PrivacyPolice.
+ *
+ * Wi-Fi PrivacyPolice is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Wi-Fi PrivacyPolice is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Wi-Fi PrivacyPolice.  If not, see <http://www.gnu.org/licenses/>.
+ **/
+
+package be.uhasselt.privacypolice;
+
+import android.app.ListActivity;
+
+/**
+ * Activity that allows the user to view and modify the stored list of allowed / blocked MAC
+ * addresses for a specific network.
+ */
+public class MACManagerActivity extends ListActivity {
+
+}
diff --git a/privacypolice/src/main/java/be/uhasselt/privacypolice/NetworkManagerActivity.java b/privacypolice/src/main/java/be/uhasselt/privacypolice/NetworkManagerActivity.java
new file mode 100644
index 0000000..9bab1c6
--- /dev/null
+++ b/privacypolice/src/main/java/be/uhasselt/privacypolice/NetworkManagerActivity.java
@@ -0,0 +1,189 @@
+/*
+ * Copyright 2014, 2015 Bram Bonné
+ *
+ * This file is part of Wi-Fi PrivacyPolice.
+ *
+ * Wi-Fi PrivacyPolice is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Wi-Fi PrivacyPolice is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Wi-Fi PrivacyPolice.  If not, see <http://www.gnu.org/licenses/>.
+ **/
+
+package be.uhasselt.privacypolice;
+
+import android.app.ListActivity;
+import android.content.Context;
+import android.net.wifi.WifiManager;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ListAdapter;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+
+/**
+ * Activity that allows the user to view and modify the stored list of allowed / blocked networks.
+ * This activity contains only a list of the networks, and the option (in the menu) to remove
+ * all stored networks.
+ * This activity is subclassed by SSIDManagerActivity and MACManagerActivity, to manage respectively
+ * the list of networks, and the list of access points for a specific network.
+ */
+
+public abstract class NetworkManagerActivity extends ListActivity {
+    protected ListAdapter adapter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        // This menu contains only one item: the removal of all networks altogether
+        inflater.inflate(R.menu.ssidmanager, menu);
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case R.id.action_removeall:
+                // Ask the user to confirm that he/she wants to remove all networks
+                confirmClearAll();
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    /**
+     * Ask the user for confirmation that he/she really wants to remove all trusted/untrusted
+     * APs, and remove them if the user confirms.
+     */
+    public abstract void confirmClearAll();
+
+    /**
+     * Adapter that is responsible for populating the list of networks. In this case, the adapter
+     * also contains all logic to sort the networks by availability, and for getting the list from
+     * the preference storage.
+     */
+    protected abstract class NetworkManagerAdapter extends BaseAdapter {
+        protected PreferencesStorage prefs = null;
+        protected WifiManager wifiManager = null;
+        private LayoutInflater layoutInflater = null;
+        // Store the list of networks we know, together with their current availability
+        protected ArrayList<NetworkAvailability> networkList = null;
+
+        public NetworkManagerAdapter() {
+            Context context = NetworkManagerActivity.this.getApplicationContext();
+            prefs = new PreferencesStorage(context);
+            wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
+            layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+
+            // Create the list for the first time
+            refresh();
+        }
+
+        /**
+         * Repopulate the list by getting the latest information on available networks, and
+         * combining them by networks stored in the preferences.
+         * Only displays networks that are stored in the preferences.
+         */
+        public abstract void refresh();
+
+        @Override
+        public int getCount() {
+            return networkList.size();
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return networkList.get(position);
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return position;
+        }
+
+        /**
+         * Get the layout for list item at position 'position'
+         * @param position the position in the list
+         * @param convertView a previously created view (if available)
+         * @param parent the parent view
+         * @return the layout that can be used in the list
+         */
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            LinearLayout layout;
+            // Recycle a previous view, if available
+            if (convertView == null) {
+                // Not available, create a new view
+                layout = (LinearLayout) layoutInflater.inflate(R.layout.item_ssidmanager, null);
+            } else {
+                layout = (LinearLayout) convertView;
+            }
+
+            // Fill in the text part of the layout with the NetworkAvailability
+            NetworkAvailability SSIDinfo = (NetworkAvailability) getItem(position);
+            TextView SSIDtext = (TextView) layout.findViewById(R.id.SSIDname);
+            SSIDtext.setText(SSIDinfo.getName());
+            // Make the 'signal strength' icon visible if the network is available
+            ImageView signalStrengthImage = (ImageView) layout.findViewById(R.id.signalStrength);
+            if (SSIDinfo.isAvailable()) {
+                signalStrengthImage.setVisibility(View.VISIBLE);
+            } else {
+                signalStrengthImage.setVisibility(View.INVISIBLE);
+            }
+
+            return layout;
+        }
+    }
+
+    /**
+     * Helper class used for storing a network together with whether the network is currently
+     * available.
+     */
+    protected class NetworkAvailability {
+        private String name;
+        private boolean available;
+
+        public NetworkAvailability(String name, boolean available) {
+            this.setName(name);
+            this.setAvailable(available);
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public boolean isAvailable() {
+            return available;
+        }
+
+        public void setAvailable(boolean available) {
+            this.available = available;
+        }
+    }
+}
diff --git a/privacypolice/src/main/java/be/uhasselt/privacypolice/PreferencesActivity.java b/privacypolice/src/main/java/be/uhasselt/privacypolice/PreferencesActivity.java
index df1ac4d..d9ebed7 100644
--- a/privacypolice/src/main/java/be/uhasselt/privacypolice/PreferencesActivity.java
+++ b/privacypolice/src/main/java/be/uhasselt/privacypolice/PreferencesActivity.java
@@ -68,8 +68,8 @@ public class PreferencesActivity extends Activity {
                 Log.e("PrivacyPolice", "Null pointer exception when trying to register shared preference change listener");
             }
 
-            // Allow clearing of allowed & blocked APs, via a separate button
-            Preference modifyHotspotsPreference = findPreference("clearHotspots");
+            // Allow modifying of allowed & blocked APs, via a separate button
+            Preference modifyHotspotsPreference = findPreference("modifyHotspots");
             modifyHotspotsPreference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
                 @Override
                 public boolean onPreferenceClick(Preference preference) {
@@ -93,9 +93,10 @@ public class PreferencesActivity extends Activity {
         }
 
         /**
-         * Launch the SSIDManagerActivity
+         * Launch the SSID manager activity
          */
         public void modifyHotspots() {
+            Log.v("PrivacyPolice", "Launching SSID manager");
             Intent intent = new Intent(getActivity(), SSIDManagerActivity.class);
             startActivity(intent);
         }
diff --git a/privacypolice/src/main/java/be/uhasselt/privacypolice/SSIDManagerActivity.java b/privacypolice/src/main/java/be/uhasselt/privacypolice/SSIDManagerActivity.java
index 82828c2..41483dc 100644
--- a/privacypolice/src/main/java/be/uhasselt/privacypolice/SSIDManagerActivity.java
+++ b/privacypolice/src/main/java/be/uhasselt/privacypolice/SSIDManagerActivity.java
@@ -1,43 +1,10 @@
-/*
- * Copyright 2014, 2015 Bram Bonné
- *
- * This file is part of Wi-Fi PrivacyPolice.
- *
- * Wi-Fi PrivacyPolice is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 2 of the License, or
- * (at your option) any later version.
- *
- * Wi-Fi PrivacyPolice is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Wi-Fi PrivacyPolice.  If not, see <http://www.gnu.org/licenses/>.
- **/
-
 package be.uhasselt.privacypolice;
 
 import android.app.AlertDialog;
-import android.app.ListActivity;
 import android.content.DialogInterface;
 import android.net.wifi.ScanResult;
-import android.content.Context;
-import android.net.wifi.WifiManager;
 import android.os.Bundle;
 import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseAdapter;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.ListAdapter;
-import android.widget.TextView;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -45,46 +12,21 @@ import java.util.Set;
 
 /**
  * Activity that allows the user to view and modify the stored list of allowed / blocked networks.
- * This activity contains only a list of the networks, and the option (in the menu) to remove
- * all stored networks.
- */
-
-public class SSIDManagerActivity extends ListActivity {
-    private ListAdapter adapter;
-
+ * This activity contains only a list of the SSIDs, and the option (in the menu) to remove
+ * all stored SSIDs.
+ **/
+public class SSIDManagerActivity extends NetworkManagerActivity {
     @Override
     public void onCreate(Bundle savedInstanceState) {
+        Log.v("PrivacyPolice", "Creating SSID manager activity");
         super.onCreate(savedInstanceState);
 
-        adapter = new SSIDAdapter(this);
+        adapter = new SSIDManagerAdapter();
         setListAdapter(adapter);
     }
 
     @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-        // This menu contains only one item: the removal of all networks altogether
-        inflater.inflate(R.menu.ssidmanager, menu);
-        return super.onCreateOptionsMenu(menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.action_removeall:
-                // Ask the user to confirm that he/she wants to remove all networks
-                clearHotspots();
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-        }
-    }
-
-    /**
-     * Ask the user for confirmation that he/she really wants to remove all trusted/untrusted
-     * APs.
-     */
-    public void clearHotspots() {
+    public void confirmClearAll() {
         // Ask for confirmation first
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         builder.setMessage(R.string.dialog_clearhotspots);
@@ -103,36 +45,11 @@ public class SSIDManagerActivity extends ListActivity {
         builder.show();
     }
 
-    /**
-     * Adapter that is responsible for populating the list of networks. In this case, the adapter
-     * also contains all logic to sort the networks by availability, and for getting the list from
-     * the preference storage.
-     */
-    private class SSIDAdapter extends BaseAdapter {
-        private PreferencesStorage prefs = null;
-        private WifiManager wifiManager = null;
-        private LayoutInflater layoutInflater = null;
-        // Store the list of SSIDs we know, together with their current availability
-        private ArrayList<SSID> ssidList = null;
-
-        public SSIDAdapter(Context ctx) {
-            prefs = new PreferencesStorage(ctx);
-            wifiManager = (WifiManager) ctx.getSystemService(Context.WIFI_SERVICE);
-            layoutInflater = (LayoutInflater) ctx.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-
-            // Create the list for the first time
-            refresh();
-        }
-
-        /**
-         * Repopulate the list by getting the latest information on available networks, and
-         * combining them by networks stored in the preferences.
-         * Only displays networks that are stored in the preferences.
-         */
+    protected class SSIDManagerAdapter extends NetworkManagerAdapter {
         public void refresh() {
-            Log.v("PrivacyPolice", "Refreshing the SSID adapter");
+            Log.v("PrivacyPolice", "Refreshing the network list adapter");
             // Use an ArrayMap so we can put available networks at the top
-            ssidList = new ArrayList<>();
+            networkList = new ArrayList<>();
 
             // Combine the SSIDs that we know of with the SSIDs that are available.
             List<ScanResult> scanResults = wifiManager.getScanResults();
@@ -141,93 +58,15 @@ public class SSIDManagerActivity extends ListActivity {
             // Add currently available networks that are stored in the preferences to the list
             for (ScanResult scanResult : scanResults) {
                 if (knownSSIDs.contains(scanResult.SSID)) {
-                    ssidList.add(new SSID(scanResult.SSID, true));
+                    networkList.add(new NetworkAvailability(scanResult.SSID, true));
                     knownSSIDs.remove(scanResult.SSID);
                 }
             }
 
             // Add all other (non-available) saved SSIDs to the list
             for (String SSID : knownSSIDs) {
-                ssidList.add(new SSID(SSID, false));
+                networkList.add(new NetworkAvailability(SSID, false));
             }
         }
-
-        @Override
-        public int getCount() {
-            return ssidList.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return ssidList.get(position);
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return position;
-        }
-
-        /**
-         * Get the layout for list item at position 'position'
-         * @param position the position in the list
-         * @param convertView a previously created view (if available)
-         * @param parent the parent view
-         * @return the layout that can be used in the list
-         */
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            LinearLayout layout;
-            // Recycle a previous view, if available
-            if (convertView == null) {
-                // Not available, create a new view
-                layout = (LinearLayout) layoutInflater.inflate(R.layout.item_ssidmanager, null);
-            } else {
-                layout = (LinearLayout) convertView;
-            }
-
-            // Fill in the text part of the layout with the SSID
-            SSID SSIDinfo = (SSID) getItem(position);
-            TextView SSIDtext = (TextView) layout.findViewById(R.id.SSIDname);
-            SSIDtext.setText(SSIDinfo.getName());
-            // Make the 'signal strength' icon visible if the network is available
-            ImageView signalStrengthImage = (ImageView) layout.findViewById(R.id.signalStrength);
-            if (SSIDinfo.isAvailable()) {
-                signalStrengthImage.setVisibility(View.VISIBLE);
-            } else {
-                signalStrengthImage.setVisibility(View.INVISIBLE);
-            }
-
-            return layout;
-        }
-    }
-
-    /**
-     * Helper class used for storing an SSID together with whether the network is currently
-     * available.
-     */
-    private class SSID {
-        private String name;
-        private boolean available;
-
-        private SSID(String name, boolean available) {
-            this.setName(name);
-            this.setAvailable(available);
-        }
-
-        public String getName() {
-            return name;
-        }
-
-        public void setName(String name) {
-            this.name = name;
-        }
-
-        public boolean isAvailable() {
-            return available;
-        }
-
-        public void setAvailable(boolean available) {
-            this.available = available;
-        }
     }
 }
