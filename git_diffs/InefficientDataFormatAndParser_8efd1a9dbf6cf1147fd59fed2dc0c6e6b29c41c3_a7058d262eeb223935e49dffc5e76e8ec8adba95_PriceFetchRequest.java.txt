diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/DecklistFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/DecklistFragment.java
index 4185437f..55a60e79 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/DecklistFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/DecklistFragment.java
@@ -618,23 +618,11 @@ public class DecklistFragment extends FamiliarListFragment {
             if (cdi.header == null) {
                 for (CardHelpers.IndividualSetInfo isi : cdi.mInfo) {
                     if (isi.mPrice != null) {
+                        MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                         if (isi.mIsFoil) {
-                            totalPrice += isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * isi.mNumberOf;
-                        } else {
-                            switch (getPriceSetting()) {
-                                case LOW_PRICE:
-                                    totalPrice += isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * isi.mNumberOf;
-                                    break;
-                                case AVG_PRICE:
-                                    totalPrice += isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * isi.mNumberOf;
-                                    break;
-                                case HIGH_PRICE:
-                                    totalPrice += isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * isi.mNumberOf;
-                                    break;
-                                default:
-                                    break;
-                            }
+                            type = MarketPriceInfo.CardType.FOIL;
                         }
+                        totalPrice += isi.mPrice.getPrice(type, getPriceSetting()) * isi.mNumberOf;
                     }
                 }
             }
@@ -648,8 +636,8 @@ public class DecklistFragment extends FamiliarListFragment {
     }
 
     @Override
-    public int getPriceSetting() {
-        return Integer.parseInt(PreferenceAdapter.getDeckPrice(getContext()));
+    public MarketPriceInfo.PriceType getPriceSetting() {
+        return MarketPriceInfo.PriceType.fromInt(Integer.parseInt(PreferenceAdapter.getDeckPrice(getContext())));
     }
 
     @Override
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/FamiliarListFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/FamiliarListFragment.java
index b25a55f6..ce6692b3 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/FamiliarListFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/FamiliarListFragment.java
@@ -61,10 +61,6 @@ import io.reactivex.functions.Consumer;
 public abstract class FamiliarListFragment extends FamiliarFragment {
 
     /* Pricing */
-    public static final int LOW_PRICE = 0;
-    public static final int AVG_PRICE = 1;
-    public static final int HIGH_PRICE = 2;
-    public static final int FOIL_PRICE = 3;
     static final String PRICE_FORMAT = "$%.02f";
 
     private int mPriceFetchRequests = 0;
@@ -474,29 +470,11 @@ public abstract class FamiliarListFragment extends FamiliarFragment {
 
         /* If the priceInfo is already loaded, don't bother performing a query */
         if (data.mPriceInfo != null) {
+            MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
             if (data.mIsFoil) {
-                data.mPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-            } else {
-                switch (getPriceSetting()) {
-                    case LOW_PRICE: {
-                        data.mPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * 100);
-                        break;
-                    }
-                    default:
-                    case AVG_PRICE: {
-                        data.mPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * 100);
-                        break;
-                    }
-                    case HIGH_PRICE: {
-                        data.mPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * 100);
-                        break;
-                    }
-                    case FOIL_PRICE: {
-                        data.mPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-                        break;
-                    }
-                }
+                type = MarketPriceInfo.CardType.FOIL;
             }
+            data.mPrice = (int) (data.mPriceInfo.getPrice(type, getPriceSetting()) * 100);
         } else {
             mPriceFetchRequests++;
             getFamiliarActivity().setLoading();
@@ -513,30 +491,11 @@ public abstract class FamiliarListFragment extends FamiliarFragment {
 
                                 /* Only reset the price to the downloaded one if the old price isn't custom */
                                 if (!data.mIsCustomPrice) {
+                                    MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                                     if (data.mIsFoil) {
-                                        data.mPrice = (int) (result.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-                                    } else {
-                                        switch (getPriceSetting()) {
-                                            case LOW_PRICE: {
-                                                data.mPrice = (int) (result.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * 100);
-                                                break;
-                                            }
-                                            default:
-                                            case AVG_PRICE: {
-                                                data.mPrice = (int) (result.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * 100);
-                                                break;
-                                            }
-                                            case HIGH_PRICE: {
-                                                data.mPrice = (int) (result.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * 100);
-                                                break;
-                                            }
-                                            case FOIL_PRICE: {
-                                                data.mPrice = (int) (result.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-                                                break;
-                                            }
-
-                                        }
+                                        type = MarketPriceInfo.CardType.FOIL;
                                     }
+                                    data.mPrice = (int) (result.getPrice(type, getPriceSetting()) * 100);
                                 }
                                 /* Clear the message */
                                 data.mMessage = null;
@@ -604,7 +563,7 @@ public abstract class FamiliarListFragment extends FamiliarFragment {
     /**
      * @return the current price setting
      */
-    public abstract int getPriceSetting();
+    public abstract MarketPriceInfo.PriceType getPriceSetting();
 
     /**
      * @param priceSetting The price setting to write to preferences
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/TradeFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/TradeFragment.java
index 1ea7b72b..f9e434a7 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/TradeFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/TradeFragment.java
@@ -523,8 +523,8 @@ public class TradeFragment extends FamiliarListFragment {
     }
 
     @Override
-    public int getPriceSetting() {
-        return Integer.parseInt(PreferenceAdapter.getTradePrice(getContext()));
+    public MarketPriceInfo.PriceType getPriceSetting() {
+        return MarketPriceInfo.PriceType.fromInt(Integer.parseInt(PreferenceAdapter.getTradePrice(getContext())));
     }
 
     @Override
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/WishlistFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/WishlistFragment.java
index 77dfa75e..0bc169e3 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/WishlistFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/WishlistFragment.java
@@ -434,23 +434,11 @@ public class WishlistFragment extends FamiliarListFragment {
             for (CompressedWishlistInfo cwi : mCompressedWishlist) {
                 for (IndividualSetInfo isi : cwi.mInfo) {
                     if (isi.mPrice != null) {
+                        MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                         if (isi.mIsFoil) {
-                            totalPrice += (isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * isi.mNumberOf);
-                        } else {
-                            switch (getPriceSetting()) {
-                                case LOW_PRICE:
-                                    totalPrice += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * isi.mNumberOf);
-                                    break;
-                                case AVG_PRICE:
-                                    totalPrice += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * isi.mNumberOf);
-                                    break;
-                                case HIGH_PRICE:
-                                    totalPrice += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * isi.mNumberOf);
-                                    break;
-                                default:
-                                    break;
-                            }
+                            type = MarketPriceInfo.CardType.FOIL;
                         }
+                        totalPrice += (isi.mPrice.getPrice(type, getPriceSetting()) * isi.mNumberOf);
                     }
                 }
             }
@@ -464,8 +452,8 @@ public class WishlistFragment extends FamiliarListFragment {
     }
 
     @Override
-    public int getPriceSetting() {
-        return Integer.parseInt(PreferenceAdapter.getTradePrice(getContext()));
+    public MarketPriceInfo.PriceType getPriceSetting() {
+        return MarketPriceInfo.PriceType.fromInt(Integer.parseInt(PreferenceAdapter.getTradePrice(getContext())));
     }
 
     @Override
@@ -684,45 +672,18 @@ public class WishlistFragment extends FamiliarListFragment {
                     /* Show individual prices and number of each card, or message if price does not exist, if desired */
                 TextView priceText = setRow.findViewById(R.id.wishlistRowPrice);
                 if (mShowIndividualPrices) {
+                    MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                     if (isi.mIsFoil) {
-                        if (isi.mPrice == null || isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) == 0) {
-                            priceText.setText(String.format(Locale.US, "%dx %s", isi.mNumberOf, isi.mMessage));
-                            priceText.setTextColor(ContextCompat.getColor(getContext(), R.color.material_red_500));
-                        } else {
-                            priceText.setText(String.format(Locale.US, "%dx " + PRICE_FORMAT, isi.mNumberOf, isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET)));
-                        }
+                        type = MarketPriceInfo.CardType.FOIL;
+                    }
+
+                    double price = 0;
+                    if (isi.mPrice == null || (price = isi.mPrice.getPrice(type, getPriceSetting())) == 0) {
+                        priceText.setText(String.format(Locale.US, "%dx %s", isi.mNumberOf, isi.mMessage));
+                        priceText.setTextColor(ContextCompat.getColor(getContext(), R.color.material_red_500));
                     } else {
-                        boolean priceFound = false;
-                        if (isi.mPrice != null) {
-                            switch (getPriceSetting()) {
-                                case LOW_PRICE:
-                                    if (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) != 0) {
-                                        priceText.setText(String.format(Locale.US, "%dx " + PRICE_FORMAT, isi.mNumberOf, isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW)));
-                                        priceFound = true;
-                                    }
-                                    break;
-                                case AVG_PRICE:
-                                    if (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) != 0) {
-                                        priceText.setText(String.format(Locale.US, "%dx " + PRICE_FORMAT, isi.mNumberOf, isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID)));
-                                        priceFound = true;
-                                    }
-                                    break;
-                                case HIGH_PRICE:
-                                    if (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) != 0) {
-                                        priceText.setText(String.format(Locale.US, "%dx " + PRICE_FORMAT, isi.mNumberOf, isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH)));
-                                        priceFound = true;
-                                    }
-                                    break;
-                                default:
-                                    break;
-                            }
-                            priceText.setTextColor(ContextCompat.getColor(getContext(),
-                                    getResourceIdFromAttr(R.attr.color_text)));
-                        }
-                        if (!priceFound) {
-                            priceText.setText(String.format(Locale.US, "%dx %s", isi.mNumberOf, isi.mMessage));
-                            priceText.setTextColor(ContextCompat.getColor(getContext(), R.color.material_red_500));
-                        }
+                        priceText.setText(String.format(Locale.US, "%dx " + PRICE_FORMAT, isi.mNumberOf, price));
+                        priceText.setTextColor(ContextCompat.getColor(getContext(), getResourceIdFromAttr(R.attr.color_text)));
                     }
                 } else {
                         /* Just show the number of */
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/TradeDialogFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/TradeDialogFragment.java
index 1fb3e09f..6507cfd0 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/TradeDialogFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/TradeDialogFragment.java
@@ -272,29 +272,13 @@ public class TradeDialogFragment extends FamiliarDialogFragment {
                                  * to the cached price */
                                 int oldPrice;
                                 if (data.mPriceInfo != null) {
+                                    MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                                     if (data.mIsFoil) {
-                                        oldPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-                                    } else {
-                                        switch (getParentTradeFragment().getPriceSetting()) {
-                                            case TradeFragment.LOW_PRICE: {
-                                                oldPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * 100);
-                                                break;
-                                            }
-                                            default:
-                                            case TradeFragment.AVG_PRICE: {
-                                                oldPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * 100);
-                                                break;
-                                            }
-                                            case TradeFragment.HIGH_PRICE: {
-                                                oldPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * 100);
-                                                break;
-                                            }
-                                            case TradeFragment.FOIL_PRICE: {
-                                                oldPrice = (int) (data.mPriceInfo.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * 100);
-                                                break;
-                                            }
-                                        }
+                                        type = MarketPriceInfo.CardType.FOIL;
                                     }
+
+                                    oldPrice = (int) (data.mPriceInfo.getPrice(type, getParentTradeFragment().getPriceSetting()) * 100);
+
                                     if (oldPrice != data.mPrice) {
                                         data.mIsCustomPrice = true;
                                     }
@@ -415,13 +399,11 @@ public class TradeDialogFragment extends FamiliarDialogFragment {
                 /* Build the dialog with some choices */
                 return new MaterialDialog.Builder(this.getActivity())
                         .title(R.string.pref_trade_price_title)
-                        .items(getString(R.string.trader_Low),
-                                getString(R.string.trader_Average),
-                                getString(R.string.trader_High))
-                        .itemsCallbackSingleChoice(getParentTradeFragment().getPriceSetting(), new MaterialDialog.ListCallbackSingleChoice() {
+                        .items(getResources().getStringArray(R.array.trade_option_entries))
+                        .itemsCallbackSingleChoice(getParentTradeFragment().getPriceSetting().toInt(), new MaterialDialog.ListCallbackSingleChoice() {
                             @Override
                             public boolean onSelection(MaterialDialog dialog, View itemView, int which, CharSequence text) {
-                                if (getParentTradeFragment().getPriceSetting() != which) {
+                                if (getParentTradeFragment().getPriceSetting().toInt() != which) {
                                     getParentTradeFragment().setPriceSetting(which);
 
                                     /* Update ALL the prices! */
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/WishlistDialogFragment.java b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/WishlistDialogFragment.java
index ecdc4d31..9080b1ad 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/WishlistDialogFragment.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/fragments/dialogs/WishlistDialogFragment.java
@@ -90,12 +90,11 @@ public class WishlistDialogFragment extends FamiliarDialogFragment {
             case DIALOG_PRICE_SETTING: {
                 return new MaterialDialog.Builder(this.getActivity())
                         .title(R.string.pref_trade_price_title)
-                        .items(getString(R.string.trader_Low),
-                                getString(R.string.trader_Average), getString(R.string.trader_High))
-                        .itemsCallbackSingleChoice(getParentWishlistFragment().getPriceSetting(), new MaterialDialog.ListCallbackSingleChoice() {
+                        .items(getResources().getStringArray(R.array.trade_option_entries))
+                        .itemsCallbackSingleChoice(getParentWishlistFragment().getPriceSetting().toInt(), new MaterialDialog.ListCallbackSingleChoice() {
                             @Override
                             public boolean onSelection(MaterialDialog dialog, View itemView, int which, CharSequence text) {
-                                if (getParentWishlistFragment().getPriceSetting() != which) {
+                                if (getParentWishlistFragment().getPriceSetting().toInt() != which) {
                                     getParentWishlistFragment().setPriceSetting(which);
                                     PreferenceAdapter.setTradePrice(getContext(),
                                             String.valueOf(getParentWishlistFragment().getPriceSetting()));
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/WishlistHelpers.java b/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/WishlistHelpers.java
index bf976c10..610ebc08 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/WishlistHelpers.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/WishlistHelpers.java
@@ -41,10 +41,6 @@ import java.util.Map;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
-import static com.gelakinetic.mtgfam.fragments.WishlistFragment.AVG_PRICE;
-import static com.gelakinetic.mtgfam.fragments.WishlistFragment.HIGH_PRICE;
-import static com.gelakinetic.mtgfam.fragments.WishlistFragment.LOW_PRICE;
-
 /**
  * This class has helpers used for reading, writing, and modifying the wishlist from different fragments
  */
@@ -180,7 +176,7 @@ public class WishlistHelpers {
      */
     public static String GetSharableWishlist(ArrayList<CompressedWishlistInfo> mCompressedWishlist,
                                              Context ctx, boolean shareText, boolean sharePrice,
-                                             int priceOption) {
+                                             MarketPriceInfo.PriceType priceOption) {
         StringBuilder readableWishlist = new StringBuilder();
 
         /* For each wishlist entry */
@@ -211,24 +207,11 @@ public class WishlistHelpers {
                 /* Attempt to append the price */
                 if (sharePrice && isi.mPrice != null) {
                     double price = 0;
+                    MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                     if (isi.mIsFoil) {
-                        price = isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET);
-                    } else {
-                        switch (priceOption) {
-                            case LOW_PRICE: {
-                                price = isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW);
-                                break;
-                            }
-                            case AVG_PRICE: {
-                                price = isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID);
-                                break;
-                            }
-                            case HIGH_PRICE: {
-                                price = isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH);
-                                break;
-                            }
-                        }
+                        type = MarketPriceInfo.CardType.FOIL;
                     }
+                    price = isi.mPrice.getPrice(type, priceOption);
                     if (price != 0) {
                         readableWishlist
                                 .append(", $")
@@ -310,26 +293,16 @@ public class WishlistHelpers {
          * @param priceSetting LOW_PRICE, AVG_PRICE, or HIGH_PRICE
          * @return The sum price of all cards in this object
          */
-        public double getTotalPrice(int priceSetting) {
+        public double getTotalPrice(MarketPriceInfo.PriceType priceSetting) {
             double sumWish = 0;
 
             for (IndividualSetInfo isi : mInfo) {
                 try {
+                    MarketPriceInfo.CardType type = MarketPriceInfo.CardType.NORMAL;
                     if (isi.mIsFoil) {
-                        sumWish += (isi.mPrice.getPrice(MarketPriceInfo.CardType.FOIL, MarketPriceInfo.PriceType.MARKET) * isi.mNumberOf);
-                    } else {
-                        switch (priceSetting) {
-                            case LOW_PRICE:
-                                sumWish += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.LOW) * isi.mNumberOf);
-                                break;
-                            case AVG_PRICE:
-                                sumWish += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.MID) * isi.mNumberOf);
-                                break;
-                            case HIGH_PRICE:
-                                sumWish += (isi.mPrice.getPrice(MarketPriceInfo.CardType.NORMAL, MarketPriceInfo.PriceType.HIGH) * isi.mNumberOf);
-                                break;
-                        }
+                        type = MarketPriceInfo.CardType.FOIL;
                     }
+                    sumWish += (isi.mPrice.getPrice(type, priceSetting) * isi.mNumberOf);
                 } catch (NullPointerException e) {
                     /* eat it, no price is loaded */
                 }
@@ -345,7 +318,7 @@ public class WishlistHelpers {
     public static class WishlistComparator implements Comparator<CompressedWishlistInfo> {
 
         final ArrayList<SortOption> options = new ArrayList<>();
-        int mPriceSetting = 0;
+        MarketPriceInfo.PriceType mPriceSetting = MarketPriceInfo.PriceType.MARKET;
 
         /**
          * Constructor. It parses an "order by" string into search options. The first options have
@@ -354,7 +327,7 @@ public class WishlistHelpers {
          * @param orderByStr   The string to parse. It uses SQLite syntax: "KEY asc,KEY2 desc" etc
          * @param priceSetting The current price setting (LO/AVG/HIGH) used to sort by prices
          */
-        public WishlistComparator(String orderByStr, int priceSetting) {
+        public WishlistComparator(String orderByStr, MarketPriceInfo.PriceType priceSetting) {
             int idx = 0;
             for (String option : orderByStr.split(",")) {
                 String key = option.split(" ")[0];
diff --git a/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/tcgp/MarketPriceInfo.java b/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/tcgp/MarketPriceInfo.java
index 986e6904..62d20791 100644
--- a/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/tcgp/MarketPriceInfo.java
+++ b/mobile/src/main/java/com/gelakinetic/mtgfam/helpers/tcgp/MarketPriceInfo.java
@@ -36,7 +36,48 @@ public class MarketPriceInfo {
         LOW,
         MID,
         HIGH,
-        MARKET
+        MARKET;
+
+        /**
+         * Convert a price type to an integer
+         * This must match the values in trade_option_entries and trade_option_values
+         *
+         * @return The integer representation of the type
+         */
+        public int toInt() {
+            switch (this) {
+                case LOW:
+                    return 0;
+                case MID:
+                    return 1;
+                case HIGH:
+                    return 2;
+                default:
+                case MARKET:
+                    return 3;
+            }
+        }
+
+        /**
+         * Convert an integer to a price type
+         * This must match the values in trade_option_entries and trade_option_values
+         *
+         * @param i The integer to convert
+         * @return The PriceType representation of this integer
+         */
+        public static PriceType fromInt(int i) {
+            switch (i) {
+                case 0:
+                    return MarketPriceInfo.PriceType.LOW;
+                case 1:
+                    return MarketPriceInfo.PriceType.MID;
+                case 2:
+                    return MarketPriceInfo.PriceType.HIGH;
+                default:
+                case 3:
+                    return MarketPriceInfo.PriceType.MARKET;
+            }
+        }
     }
 
     class Price {
