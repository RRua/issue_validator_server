diff --git a/app/src/main/java/com/github/axet/darknessimmunity/AssetsProvider.java b/app/src/main/java/com/github/axet/darknessimmunity/AssetsProvider.java
deleted file mode 100644
index 4429e9e..0000000
--- a/app/src/main/java/com/github/axet/darknessimmunity/AssetsProvider.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package com.github.axet.darknessimmunity;
-
-import android.content.ContentProvider;
-import android.content.ContentResolver;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.pm.ProviderInfo;
-import android.content.res.AssetFileDescriptor;
-import android.content.res.AssetManager;
-import android.database.Cursor;
-import android.database.MatrixCursor;
-import android.net.Uri;
-import android.os.CancellationSignal;
-import android.provider.OpenableColumns;
-import android.support.annotation.Nullable;
-import android.webkit.MimeTypeMap;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * <application>
- * <provider
- * android:name=".AssetsProvider"
- * android:authorities="com.github.axet.appspace"
- * android:exported="false"
- * android:grantUriPermissions="true">
- * </provider>
- * </application>
- */
-public class AssetsProvider extends ContentProvider {
-    static final String[] COLUMNS = {OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
-
-    static Map<Uri, String> types = new HashMap<>();
-    static Map<Uri, String> names = new HashMap<>();
-    static Map<Uri, AssetFileDescriptor> files = new HashMap<>();
-
-    static ProviderInfo info;
-
-    @Override
-    public void attachInfo(Context context, ProviderInfo info) {
-        super.attachInfo(context, info);
-        this.info = info;
-        AssetManager am = getContext().getAssets();
-        try {
-            String[] a = am.list("");
-            for (String f : a) {
-                addFile(f, am.openFd(f));
-            }
-        } catch (IOException e) {
-        }
-    }
-
-    @Override
-    public boolean onCreate() {
-        return true;
-    }
-
-    @Override
-    public AssetFileDescriptor openAssetFile(Uri uri, String mode) throws FileNotFoundException {
-        AssetManager am = getContext().getAssets();
-        String file_name = uri.getLastPathSegment();
-        if (file_name == null)
-            throw new FileNotFoundException();
-        AssetFileDescriptor afd = null;
-        try {
-            afd = am.openFd(file_name);
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-        return afd;
-    }
-
-    public static Uri addFile(String name, AssetFileDescriptor file) {
-        Uri u = Uri.parse(ContentResolver.SCHEME_CONTENT + "://" + info.authority + "/" + name);
-        String type = MimeTypeMap.getFileExtensionFromUrl(u.toString());
-        type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(type);
-        types.put(u, type);
-        names.put(u, name);
-        files.put(u, file);
-        return u;
-    }
-
-    @Override
-    public String getType(Uri p1) {
-        return types.get(p1);
-    }
-
-    @Nullable
-    @Override
-    public Uri insert(Uri uri, ContentValues values) {
-        return null;
-    }
-
-    @Override
-    public int delete(Uri uri, String selection, String[] selectionArgs) {
-        return 0;
-    }
-
-    @Override
-    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
-        return 0;
-    }
-
-    @Override
-    public Cursor query(Uri p1, String[] p2, String p3, String[] p4, String p5) {
-        return null;
-    }
-
-    @Override
-    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) {
-        if (projection == null) {
-            projection = COLUMNS;
-        }
-
-        String file_name = uri.getLastPathSegment();
-        if (file_name == null)
-            return null;
-
-        String[] cols = new String[projection.length];
-        Object[] values = new Object[projection.length];
-        int i = 0;
-        for (String col : projection) {
-            if (OpenableColumns.DISPLAY_NAME.equals(col)) {
-                cols[i] = OpenableColumns.DISPLAY_NAME;
-                values[i++] = names.get(uri);
-            } else if (OpenableColumns.SIZE.equals(col)) {
-                cols[i] = OpenableColumns.SIZE;
-                values[i++] = files.get(uri).getLength();
-            }
-        }
-        cols = copyOf(cols, i);
-        values = copyOf(values, i);
-        final MatrixCursor cursor = new MatrixCursor(cols, 1);
-        cursor.addRow(values);
-        return cursor;
-    }
-
-    private static String[] copyOf(String[] original, int newLength) {
-        final String[] result = new String[newLength];
-        System.arraycopy(original, 0, result, 0, newLength);
-        return result;
-    }
-
-    private static Object[] copyOf(Object[] original, int newLength) {
-        final Object[] result = new Object[newLength];
-        System.arraycopy(original, 0, result, 0, newLength);
-        return result;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/axet/darknessimmunity/CircleImageView.java b/app/src/main/java/com/github/axet/darknessimmunity/CircleImageView.java
new file mode 100644
index 0000000..b40219a
--- /dev/null
+++ b/app/src/main/java/com/github/axet/darknessimmunity/CircleImageView.java
@@ -0,0 +1,155 @@
+package com.github.axet.darknessimmunity;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RadialGradient;
+import android.graphics.Shader;
+import android.graphics.drawable.ShapeDrawable;
+import android.graphics.drawable.shapes.OvalShape;
+import android.support.annotation.Nullable;
+import android.support.v4.view.ViewCompat;
+import android.util.AttributeSet;
+import android.view.animation.Animation;
+import android.widget.ImageView;
+
+/**
+ * Private class created to work around issues with AnimationListeners being
+ * called before the animation is actually complete and support shadows on older
+ * platforms.
+ */
+public class CircleImageView extends ImageView {
+    private static final int KEY_SHADOW_COLOR = 0x1E000000;
+    private static final int FILL_SHADOW_COLOR = 0x3D000000;
+    // PX
+    private static final float X_OFFSET = 0f;
+    private static final float Y_OFFSET = 1.75f;
+    private static final float SHADOW_RADIUS = 3.5f;
+    private static final int SHADOW_ELEVATION = 4;
+
+    private Animation.AnimationListener mListener;
+    private int mShadowRadius;
+
+    public CircleImageView(Context context) {
+        super(context);
+        create(context);
+    }
+
+    public CircleImageView(Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs, 0);
+        create(context);
+    }
+
+    public CircleImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        create(context);
+    }
+
+    @TargetApi(21)
+    public CircleImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        create(context);
+    }
+
+    public void create(Context context) {
+        final float radius = 10;
+        final float density = getContext().getResources().getDisplayMetrics().density;
+        final int diameter = (int) (radius * density * 2);
+        final int shadowYOffset = (int) (density * Y_OFFSET);
+        final int shadowXOffset = (int) (density * X_OFFSET);
+
+        mShadowRadius = (int) (density * SHADOW_RADIUS);
+
+        ShapeDrawable circle;
+        if (elevationSupported()) {
+            circle = new ShapeDrawable(new OvalShape());
+            ViewCompat.setElevation(this, SHADOW_ELEVATION * density);
+        } else {
+            OvalShape oval = new OvalShadow(mShadowRadius, diameter);
+            circle = new ShapeDrawable(oval);
+            ViewCompat.setLayerType(this, ViewCompat.LAYER_TYPE_SOFTWARE, circle.getPaint());
+            circle.getPaint().setShadowLayer(mShadowRadius, shadowXOffset, shadowYOffset, KEY_SHADOW_COLOR);
+            final int padding = mShadowRadius;
+            // set padding so the inner image sits correctly within the shadow.
+            setPadding(padding, padding, padding, padding);
+        }
+        circle.getPaint().setColor(0xEEEEEE);
+        setBackgroundDrawable(circle);
+    }
+
+    private boolean elevationSupported() {
+        return android.os.Build.VERSION.SDK_INT >= 21;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        if (!elevationSupported()) {
+            setMeasuredDimension(getMeasuredWidth() + mShadowRadius * 2, getMeasuredHeight() + mShadowRadius * 2);
+        }
+    }
+
+    public void setAnimationListener(Animation.AnimationListener listener) {
+        mListener = listener;
+    }
+
+    @Override
+    public void onAnimationStart() {
+        super.onAnimationStart();
+        if (mListener != null) {
+            mListener.onAnimationStart(getAnimation());
+        }
+    }
+
+    @Override
+    public void onAnimationEnd() {
+        super.onAnimationEnd();
+        if (mListener != null) {
+            mListener.onAnimationEnd(getAnimation());
+        }
+    }
+
+    /**
+     * Update the background color of the circle image view.
+     *
+     * @param colorRes Id of a color resource.
+     */
+    public void setBackgroundColorRes(int colorRes) {
+        setBackgroundColor(getContext().getResources().getColor(colorRes));
+    }
+
+    @Override
+    public void setBackgroundColor(int color) {
+        if (getBackground() instanceof ShapeDrawable) {
+            ((ShapeDrawable) getBackground()).getPaint().setColor(color);
+        }
+    }
+
+    private class OvalShadow extends OvalShape {
+        private RadialGradient mRadialGradient;
+        private Paint mShadowPaint;
+        private int mCircleDiameter;
+
+        public OvalShadow(int shadowRadius, int circleDiameter) {
+            super();
+            mShadowPaint = new Paint();
+            mShadowRadius = shadowRadius;
+            mCircleDiameter = circleDiameter;
+            mRadialGradient = new RadialGradient(mCircleDiameter / 2, mCircleDiameter / 2,
+                    mShadowRadius, new int[]{
+                    FILL_SHADOW_COLOR, Color.TRANSPARENT
+            }, null, Shader.TileMode.CLAMP);
+            mShadowPaint.setShader(mRadialGradient);
+        }
+
+        @Override
+        public void draw(Canvas canvas, Paint paint) {
+            final int viewWidth = CircleImageView.this.getWidth();
+            final int viewHeight = CircleImageView.this.getHeight();
+            canvas.drawCircle(viewWidth / 2, viewHeight / 2, (mCircleDiameter / 2 + mShadowRadius), mShadowPaint);
+            canvas.drawCircle(viewWidth / 2, viewHeight / 2, (mCircleDiameter / 2), paint);
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/axet/darknessimmunity/MainActivity.java b/app/src/main/java/com/github/axet/darknessimmunity/MainActivity.java
index 419769d..85609a3 100644
--- a/app/src/main/java/com/github/axet/darknessimmunity/MainActivity.java
+++ b/app/src/main/java/com/github/axet/darknessimmunity/MainActivity.java
@@ -185,10 +185,10 @@ public class MainActivity extends AppCompatActivity {
                     wm.setBitmap(bm);
                 } catch (IOException e) {
                     Log.d("TAG", "SetBitmap", e);
-                    Snackbar.make(fab, "Darkness Immunity Not Installed", Snackbar.LENGTH_LONG).setAction("Action", null).show();
+                    Snackbar.make(fab, "Error", Snackbar.LENGTH_LONG).setAction("Action", null).show();
                     return true;
                 }
-                Snackbar.make(fab, "Darkness Immunity Installed as Wallpaper", Snackbar.LENGTH_LONG).setAction("Action", null).show();
+                Snackbar.make(fab, getString(R.string.app_name) + " " + getString(R.string.installed), Snackbar.LENGTH_LONG).setAction("Action", null).show();
             }
             return true;
         }
