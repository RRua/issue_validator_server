diff --git a/gpslogger/src/main/java/com/mendhak/gpslogger/common/Strings.java b/gpslogger/src/main/java/com/mendhak/gpslogger/common/Strings.java
index 4a0e996c..b3010890 100644
--- a/gpslogger/src/main/java/com/mendhak/gpslogger/common/Strings.java
+++ b/gpslogger/src/main/java/com/mendhak/gpslogger/common/Strings.java
@@ -193,7 +193,7 @@ public class Strings {
      * @return
      */
     public static boolean isNullOrEmpty(String text) {
-        return text == null || text.length() == 0;
+        return text == null ||  text.trim().length() == 0;
     }
 
     public static String htmlDecode(String text) {
diff --git a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/email/AutoEmailJob.java b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/email/AutoEmailJob.java
index 42d373af..84477120 100644
--- a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/email/AutoEmailJob.java
+++ b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/email/AutoEmailJob.java
@@ -86,6 +86,7 @@ public class AutoEmailJob extends Job {
 
     @Override
     protected void onCancel() {
+        LOG.debug("Email job cancelled");
     }
 
     @Override
diff --git a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OSMJob.java b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OSMJob.java
index 84583e04..bcb76c9e 100644
--- a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OSMJob.java
+++ b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OSMJob.java
@@ -1,29 +1,29 @@
 package com.mendhak.gpslogger.senders.osm;
 
+import com.mendhak.gpslogger.BuildConfig;
+import com.mendhak.gpslogger.common.PreferenceHelper;
+import com.mendhak.gpslogger.common.Strings;
 import com.mendhak.gpslogger.common.events.UploadEvents;
 import com.mendhak.gpslogger.common.slf4j.Logs;
 import com.path.android.jobqueue.Job;
 import com.path.android.jobqueue.Params;
 import de.greenrobot.event.EventBus;
 import oauth.signpost.OAuthConsumer;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.entity.mime.HttpMultipartMode;
-import org.apache.http.entity.mime.MultipartEntity;
-import org.apache.http.entity.mime.content.FileBody;
-import org.apache.http.entity.mime.content.StringBody;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
+import okhttp3.*;
+
 import org.slf4j.Logger;
+import se.akerfeldt.okhttp.signpost.OkHttpOAuthConsumer;
+import se.akerfeldt.okhttp.signpost.OkHttpOAuthProvider;
+import se.akerfeldt.okhttp.signpost.SigningInterceptor;
 
 import java.io.File;
+import java.io.IOException;
 
 public class OSMJob extends Job {
 
 
     private static final Logger LOG = Logs.of(OSMJob.class);
-    OAuthConsumer consumer;
+    //OAuthConsumer consumer;
     String gpsTraceUrl;
     File chosenFile;
     String description;
@@ -33,7 +33,7 @@ public class OSMJob extends Job {
     protected OSMJob(OAuthConsumer consumer, String gpsTraceUrl, File chosenFile, String description, String tags, String visibility) {
         super(new Params(1).requireNetwork().persist().addTags(getJobTag(chosenFile)));
 
-        this.consumer = consumer;
+//        this.consumer = consumer;
         this.gpsTraceUrl = gpsTraceUrl;
         this.chosenFile = chosenFile;
         this.description = description;
@@ -44,42 +44,52 @@ public class OSMJob extends Job {
     @Override
     public void onAdded() {
 
+        LOG.debug("OSM Job added");
     }
 
     @Override
     public void onRun() throws Throwable {
-        HttpPost request = new HttpPost(gpsTraceUrl);
 
-        consumer.sign(request);
 
-        MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
+        OkHttpOAuthConsumer consumer = new OkHttpOAuthConsumer(BuildConfig.OSM_CONSUMER_KEY, BuildConfig.OSM_CONSUMER_SECRET);
+        consumer.setTokenWithSecret(PreferenceHelper.getInstance().getOSMAccessToken(), PreferenceHelper.getInstance().getOSMAccessTokenSecret());
 
-        FileBody gpxBody = new FileBody(chosenFile);
+        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(new SigningInterceptor(consumer)).build();
+
+        RequestBody requestBody = new MultipartBody.Builder()
+                .setType(MultipartBody.FORM)
+                .addFormDataPart("file", chosenFile.getName(), RequestBody.create(MediaType.parse("application/xml+gpx"), chosenFile))
+                .addFormDataPart("description", Strings.isNullOrEmpty(description) ? "GPSLogger for Android" : description)
+                .addFormDataPart("tags", tags)
+                .addFormDataPart("visibility",visibility)
+                .build();
+
+//        consumer.sign(requestBody);
 
-        entity.addPart("file", gpxBody);
-        if (description == null || description.length() <= 0) {
-            description = "GPSLogger for Android";
-        }
 
-        entity.addPart("description", new StringBody(description));
-        entity.addPart("tags", new StringBody(tags));
-        entity.addPart("visibility", new StringBody(visibility));
+        Request request = new Request.Builder()
+                .url(gpsTraceUrl)
+                .post(requestBody)
+                .build();
 
-        request.setEntity(entity);
-        DefaultHttpClient httpClient = new DefaultHttpClient();
-		HttpParams params = httpClient.getParams();
-		HttpConnectionParams.setConnectionTimeout(params, 10000);
-		HttpConnectionParams.setSoTimeout(params, 30000);
 
-        HttpResponse response = httpClient.execute(request);
-        int statusCode = response.getStatusLine().getStatusCode();
-        LOG.debug("OSM Upload - " + String.valueOf(statusCode));
-        EventBus.getDefault().post(new UploadEvents.OpenStreetMap().succeeded());
+        Response response = client.newCall(request).execute();
+        ResponseBody body = response.body();
+
+        if(response.isSuccessful()){
+            String message = body.string();
+            LOG.debug("OSM Response body: " + message);
+            EventBus.getDefault().post(new UploadEvents.OpenStreetMap().succeeded());
+        }
+        else {
+            body.close();
+            EventBus.getDefault().post(new UploadEvents.OpenStreetMap().failed());
+        }
     }
 
     @Override
     protected void onCancel() {
-
+        LOG.debug("OSM Job cancelled ");
     }
 
     @Override
diff --git a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OpenStreetMapManager.java b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OpenStreetMapManager.java
index 9757c5e8..8072724a 100644
--- a/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OpenStreetMapManager.java
+++ b/gpslogger/src/main/java/com/mendhak/gpslogger/senders/osm/OpenStreetMapManager.java
@@ -20,13 +20,17 @@ package com.mendhak.gpslogger.senders.osm;
 import com.mendhak.gpslogger.BuildConfig;
 import com.mendhak.gpslogger.common.AppSettings;
 import com.mendhak.gpslogger.common.PreferenceHelper;
+import com.mendhak.gpslogger.common.Strings;
+import com.mendhak.gpslogger.common.slf4j.Logs;
 import com.mendhak.gpslogger.senders.FileSender;
 import com.path.android.jobqueue.JobManager;
 import com.path.android.jobqueue.TagConstraint;
 import oauth.signpost.OAuthConsumer;
 import oauth.signpost.OAuthProvider;
-import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
-import oauth.signpost.commonshttp.CommonsHttpOAuthProvider;
+import org.slf4j.Logger;
+import se.akerfeldt.okhttp.signpost.OkHttpOAuthConsumer;
+import se.akerfeldt.okhttp.signpost.OkHttpOAuthProvider;
+
 
 import java.io.File;
 import java.util.List;
@@ -35,11 +39,11 @@ public class OpenStreetMapManager extends FileSender {
 
 
 
-
-    final String OSM_REQUESTTOKEN_URL = "http://www.openstreetmap.org/oauth/request_token";
-    final String OSM_ACCESSTOKEN_URL = "http://www.openstreetmap.org/oauth/access_token";
-    final String OSM_AUTHORIZE_URL = "http://www.openstreetmap.org/oauth/authorize";
-    final String OSM_GPSTRACE_URL = "http://www.openstreetmap.org/api/0.6/gpx/create";
+    private static final Logger LOG = Logs.of(OpenStreetMapManager.class);
+    static final String OSM_REQUESTTOKEN_URL = "http://www.openstreetmap.org/oauth/request_token";
+    static final String OSM_ACCESSTOKEN_URL = "http://www.openstreetmap.org/oauth/access_token";
+    static final String OSM_AUTHORIZE_URL = "http://www.openstreetmap.org/oauth/authorize";
+    static final String OSM_GPSTRACE_URL = "http://www.openstreetmap.org/api/0.6/gpx/create";
     private PreferenceHelper preferenceHelper;
 
     public OpenStreetMapManager(PreferenceHelper preferenceHelper) {
@@ -47,8 +51,8 @@ public class OpenStreetMapManager extends FileSender {
 
     }
 
-    public OAuthProvider getOSMAuthProvider() {
-        return new CommonsHttpOAuthProvider(OSM_REQUESTTOKEN_URL, OSM_ACCESSTOKEN_URL, OSM_AUTHORIZE_URL);
+    public static OAuthProvider getOSMAuthProvider() {
+        return new OkHttpOAuthProvider(OSM_REQUESTTOKEN_URL, OSM_ACCESSTOKEN_URL, OSM_AUTHORIZE_URL);
     }
 
     public boolean isOsmAuthorized() {
@@ -56,27 +60,26 @@ public class OpenStreetMapManager extends FileSender {
         return (oAuthAccessToken != null && oAuthAccessToken.length() > 0);
     }
 
-    public OAuthConsumer getOSMAuthConsumer() {
+    public static OAuthConsumer getOSMAuthConsumer() {
 
         OAuthConsumer consumer = null;
 
         try {
 
-            consumer = new CommonsHttpOAuthConsumer(BuildConfig.OSM_CONSUMER_KEY, BuildConfig.OSM_CONSUMER_SECRET);
+            consumer = new OkHttpOAuthConsumer(BuildConfig.OSM_CONSUMER_KEY, BuildConfig.OSM_CONSUMER_SECRET);
 
 
-            String osmAccessToken =  preferenceHelper.getOSMAccessToken();
-            String osmAccessTokenSecret = preferenceHelper.getOSMAccessTokenSecret();
+            String osmAccessToken =  PreferenceHelper.getInstance().getOSMAccessToken();
+            String osmAccessTokenSecret = PreferenceHelper.getInstance().getOSMAccessTokenSecret();
 
-            if (osmAccessToken != null && osmAccessToken.length() > 0
-                    && osmAccessTokenSecret != null
-                    && osmAccessTokenSecret.length() > 0) {
-                consumer.setTokenWithSecret(osmAccessToken,
-                        osmAccessTokenSecret);
+            if (Strings.isNullOrEmpty(osmAccessToken) || Strings.isNullOrEmpty(osmAccessTokenSecret)) {
+                return consumer;
+            } else {
+                consumer.setTokenWithSecret(osmAccessToken, osmAccessTokenSecret);
             }
 
         } catch (Exception e) {
-            //Swallow the exception
+            LOG.error("Error getting OAuth Consumer", e);
         }
 
         return consumer;
diff --git a/gpslogger/src/main/java/com/mendhak/gpslogger/ui/fragments/settings/OSMAuthorizationFragment.java b/gpslogger/src/main/java/com/mendhak/gpslogger/ui/fragments/settings/OSMAuthorizationFragment.java
index c0fd0892..2523ddde 100644
--- a/gpslogger/src/main/java/com/mendhak/gpslogger/ui/fragments/settings/OSMAuthorizationFragment.java
+++ b/gpslogger/src/main/java/com/mendhak/gpslogger/ui/fragments/settings/OSMAuthorizationFragment.java
@@ -40,8 +40,10 @@ public class OSMAuthorizationFragment extends PermissionedPreferenceFragment imp
 
     private static final Logger LOG = Logs.of(OSMAuthorizationFragment.class);
     private static PreferenceHelper preferenceHelper = PreferenceHelper.getInstance();
-    private OAuthProvider provider;
-    private OAuthConsumer consumer;
+
+    //Must be static - when user returns from OSM, this needs to be set already
+    private static OAuthProvider provider;
+    private static OAuthConsumer consumer;
     OpenStreetMapManager manager;
 
     @Override
@@ -62,12 +64,12 @@ public class OSMAuthorizationFragment extends PermissionedPreferenceFragment imp
 
             try {
                 if (provider == null) {
-                    provider = manager.getOSMAuthProvider();
+                    provider = OpenStreetMapManager.getOSMAuthProvider();
                 }
 
                 if (consumer == null) {
                     //In case consumer is null, re-initialize from stored values.
-                    consumer = manager.getOSMAuthConsumer();
+                    consumer = OpenStreetMapManager.getOSMAuthConsumer();
                 }
 
                 //Ask OpenStreetMap for the access token. This is the main event.
