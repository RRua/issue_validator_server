diff --git a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java b/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
index 094def9..d82be16 100644
--- a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
+++ b/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
@@ -1,13 +1,5 @@
 package com.intervigil.micdroid;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-import net.sourceforge.autotalent.Autotalent;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.os.AsyncTask;
@@ -21,11 +13,20 @@ import com.intervigil.micdroid.interfaces.DependentTask;
 import com.intervigil.wave.WaveReader;
 import com.intervigil.wave.WaveWriter;
 
+import net.sourceforge.autotalent.Autotalent;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
 
 public class AutotalentTask {
 
     private static final int AUTOTALENT_CHUNK_SIZE = 8192;
-    
+
     public static final int AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR = 48105;
 
     private final Context context;
@@ -103,7 +104,7 @@ public class AutotalentTask {
             }
             return null;
         }
-        
+
         private void processPitchCorrection(String file) throws IOException {
             WaveReader reader = null;
             WaveWriter writer = null;
@@ -153,12 +154,12 @@ public class AutotalentTask {
             byte[] buf = new byte[1024];
             File src = new File(
                     context.getCacheDir().getAbsolutePath()
-                    + File.separator
-                    + context.getString(R.string.default_recording_name));
+                            + File.separator
+                            + context.getString(R.string.default_recording_name));
             File dst = new File(
                     ApplicationHelper.getLibraryDirectory()
-                    + File.separator
-                    + file);
+                            + File.separator
+                            + file);
             try {
                 in = new FileInputStream(src);
                 out = new FileOutputStream(dst);
diff --git a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java b/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
index ef0e9d2..e2a421b 100644
--- a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
+++ b/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
@@ -19,22 +19,22 @@
 
 package com.intervigil.micdroid;
 
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
-import android.view.WindowManager;
 import android.view.View.OnClickListener;
+import android.view.WindowManager;
 import android.widget.Button;
 import android.widget.EditText;
 
 import com.intervigil.micdroid.model.Recording;
 
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
 public class FileNameEntry extends Activity {
 
     private AlertDialog invalidNameAlert;
@@ -42,9 +42,8 @@ public class FileNameEntry extends Activity {
     /**
      * Called when the activity is starting. This is where most initialization
      * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     * 
-     * @param savedInstanceState
-     *            Activity's saved state, if any.
+     *
+     * @param savedInstanceState Activity's saved state, if any.
      */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
diff --git a/app/src/main/java/com/intervigil/micdroid/Mic.java b/app/src/main/java/com/intervigil/micdroid/Mic.java
index 66fb9c6..88c526f 100644
--- a/app/src/main/java/com/intervigil/micdroid/Mic.java
+++ b/app/src/main/java/com/intervigil/micdroid/Mic.java
@@ -20,7 +20,6 @@
 
 package com.intervigil.micdroid;
 
-import net.sourceforge.autotalent.Autotalent;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
@@ -38,10 +37,10 @@ import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.Button;
 import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
 import android.widget.TextView;
 import android.widget.Toast;
 import android.widget.ToggleButton;
-import android.widget.CompoundButton.OnCheckedChangeListener;
 
 import com.intervigil.micdroid.helper.AudioHelper;
 import com.intervigil.micdroid.helper.DialogHelper;
@@ -52,6 +51,8 @@ import com.intervigil.micdroid.interfaces.DependentTask;
 import com.intervigil.micdroid.interfaces.Recorder;
 import com.intervigil.micdroid.recorder.SipdroidRecorder;
 
+import net.sourceforge.autotalent.Autotalent;
+
 public class Mic extends Activity implements OnClickListener {
 
     private static final String CLASS_MIC = "Mic";
@@ -72,7 +73,9 @@ public class Mic extends Activity implements OnClickListener {
     private ToggleButton recordingButton;
     private AutotalentTask autotalentTask;
 
-    /** Called when the activity is first created. */
+    /**
+     * Called when the activity is first created.
+     */
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
diff --git a/app/src/main/java/com/intervigil/micdroid/MicApplication.java b/app/src/main/java/com/intervigil/micdroid/MicApplication.java
index 8995293..96f387f 100644
--- a/app/src/main/java/com/intervigil/micdroid/MicApplication.java
+++ b/app/src/main/java/com/intervigil/micdroid/MicApplication.java
@@ -19,12 +19,12 @@
 
 package com.intervigil.micdroid;
 
-import java.io.File;
-
 import android.app.Application;
 
 import com.intervigil.micdroid.helper.ApplicationHelper;
 
+import java.io.File;
+
 public class MicApplication extends Application {
 
     @Override
diff --git a/app/src/main/java/com/intervigil/micdroid/Preferences.java b/app/src/main/java/com/intervigil/micdroid/Preferences.java
index 93a27d5..02287d6 100644
--- a/app/src/main/java/com/intervigil/micdroid/Preferences.java
+++ b/app/src/main/java/com/intervigil/micdroid/Preferences.java
@@ -19,17 +19,18 @@
 
 package com.intervigil.micdroid;
 
-import net.sourceforge.autotalent.Autotalent;
 import android.app.AlertDialog.Builder;
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.preference.Preference;
-import android.preference.PreferenceActivity;
 import android.preference.Preference.OnPreferenceClickListener;
+import android.preference.PreferenceActivity;
 import android.util.Log;
 
 import com.intervigil.micdroid.helper.PreferenceHelper;
 
+import net.sourceforge.autotalent.Autotalent;
+
 public class Preferences extends PreferenceActivity {
 
     private static final String CLASS_PREFERENCES = "Preferences";
@@ -37,9 +38,8 @@ public class Preferences extends PreferenceActivity {
     /**
      * Called when the activity is starting. This is where most initialization
      * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     * 
-     * @param icicle
-     *            Activity's saved state, if any.
+     *
+     * @param icicle Activity's saved state, if any.
      */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -96,21 +96,21 @@ public class Preferences extends PreferenceActivity {
                             new DialogInterface.OnClickListener() {
                                 @Override
                                 public void onClick(DialogInterface dialog,
-                                        int which) {
+                                                    int which) {
                                     PreferenceHelper
                                             .setDefaultPreferences(Preferences.this);
                                     dialog.dismiss();
                                     finish();
                                 }
                             }).setNegativeButton(
-                            R.string.confirm_reset_prefs_btn_no,
-                            new DialogInterface.OnClickListener() {
-                                @Override
-                                public void onClick(DialogInterface dialog,
-                                        int which) {
-                                    dialog.dismiss();
-                                }
-                            });
+                    R.string.confirm_reset_prefs_btn_no,
+                    new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog,
+                                            int which) {
+                            dialog.dismiss();
+                        }
+                    });
             confirmDialogBuilder.create().show();
             return true;
         }
diff --git a/app/src/main/java/com/intervigil/micdroid/RecordingLibrary.java b/app/src/main/java/com/intervigil/micdroid/RecordingLibrary.java
index b842321..9c4e96d 100644
--- a/app/src/main/java/com/intervigil/micdroid/RecordingLibrary.java
+++ b/app/src/main/java/com/intervigil/micdroid/RecordingLibrary.java
@@ -19,12 +19,6 @@
 
 package com.intervigil.micdroid;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
 import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
@@ -34,19 +28,19 @@ import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.ContextMenu;
+import android.view.ContextMenu.ContextMenuInfo;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.ContextMenu.ContextMenuInfo;
 import android.widget.AdapterView;
+import android.widget.AdapterView.AdapterContextMenuInfo;
+import android.widget.AdapterView.OnItemClickListener;
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
-import android.widget.AdapterView.AdapterContextMenuInfo;
-import android.widget.AdapterView.OnItemClickListener;
 
 import com.google.android.gms.ads.AdView;
 import com.intervigil.micdroid.helper.AdHelper;
@@ -57,6 +51,12 @@ import com.intervigil.micdroid.helper.RecordingOptionsHelper;
 import com.intervigil.micdroid.model.Recording;
 import com.intervigil.wave.exception.InvalidWaveException;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
 public class RecordingLibrary extends Activity implements OnItemClickListener {
 
     private static final String CLASS_RECORDING_LIBRARY = "RecordingLibrary";
@@ -74,9 +74,8 @@ public class RecordingLibrary extends Activity implements OnItemClickListener {
     /**
      * Called when the activity is starting. This is where most initialization
      * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     * 
-     * @param savedInstanceState
-     *            Activity's saved state, if any.
+     *
+     * @param savedInstanceState Activity's saved state, if any.
      */
     @SuppressWarnings("unchecked")
     @Override
@@ -189,7 +188,7 @@ public class RecordingLibrary extends Activity implements OnItemClickListener {
 
     @Override
     public void onCreateContextMenu(ContextMenu menu, View v,
-            ContextMenuInfo menuInfo) {
+                                    ContextMenuInfo menuInfo) {
         super.onCreateContextMenu(menu, v, menuInfo);
 
         menu.setHeaderTitle(R.string.recording_options_title);
diff --git a/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java b/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java
index 614031a..c782c52 100644
--- a/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java
+++ b/app/src/main/java/com/intervigil/micdroid/RecordingPlayer.java
@@ -25,8 +25,8 @@ import android.content.res.Configuration;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
-import android.view.WindowManager;
 import android.view.View.OnClickListener;
+import android.view.WindowManager;
 import android.widget.Button;
 import android.widget.SeekBar;
 import android.widget.TextView;
@@ -45,9 +45,8 @@ public class RecordingPlayer extends Activity implements OnClickListener {
     /**
      * Called when the activity is starting. This is where most initialization
      * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     * 
-     * @param savedInstanceState
-     *            Activity's saved state, if any.
+     *
+     * @param savedInstanceState Activity's saved state, if any.
      */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
diff --git a/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java b/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java
index 076f47f..02c0659 100644
--- a/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java
+++ b/app/src/main/java/com/intervigil/micdroid/SeekableMediaPlayer.java
@@ -19,9 +19,6 @@
 
 package com.intervigil.micdroid;
 
-import java.io.FileInputStream;
-import java.io.IOException;
-
 import android.media.MediaPlayer;
 import android.media.MediaPlayer.OnCompletionListener;
 import android.os.Handler;
@@ -29,6 +26,9 @@ import android.os.Message;
 import android.widget.SeekBar;
 import android.widget.SeekBar.OnSeekBarChangeListener;
 
+import java.io.FileInputStream;
+import java.io.IOException;
+
 public class SeekableMediaPlayer {
 
     private static final int REFRESH = 1;
@@ -141,7 +141,7 @@ public class SeekableMediaPlayer {
         }
 
         public void onProgressChanged(SeekBar seekBar, int progress,
-                boolean fromUser) {
+                                      boolean fromUser) {
             if (fromUser) {
                 int progressMs = (progress * mediaPlayer.getDuration())
                         / seekBar.getMax();
@@ -169,12 +169,12 @@ public class SeekableMediaPlayer {
         @Override
         public void handleMessage(Message msg) {
             switch (msg.what) {
-            case REFRESH:
-                long delay = onRefresh();
-                queueNextRefresh(delay);
-                break;
-            default:
-                break;
+                case REFRESH:
+                    long delay = onRefresh();
+                    queueNextRefresh(delay);
+                    break;
+                default:
+                    break;
             }
         }
     }
diff --git a/app/src/main/java/com/intervigil/micdroid/StartupDialog.java b/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
index 72f0a07..c3d3ed3 100644
--- a/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
+++ b/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
@@ -37,7 +37,7 @@ public class StartupDialog extends Dialog {
     private int buttonLabelId;
 
     public StartupDialog(Context context, int titleId, int textId,
-            int buttonLabelId) {
+                         int buttonLabelId) {
         super(context);
         this.context = context;
         this.titleId = titleId;
diff --git a/app/src/main/java/com/intervigil/micdroid/Timer.java b/app/src/main/java/com/intervigil/micdroid/Timer.java
index 2b23ca2..c10239e 100644
--- a/app/src/main/java/com/intervigil/micdroid/Timer.java
+++ b/app/src/main/java/com/intervigil/micdroid/Timer.java
@@ -51,25 +51,25 @@ public class Timer {
         @Override
         public void handleMessage(Message msg) {
             switch (msg.what) {
-            case TIMER_START:
-                display.setText(getTime());
-                this.sleep(DEFAULT_TIMER_COUNT);
-                break;
-            case TIMER_STOP:
-                this.removeMessages(TIMER_COUNT_UP);
-                this.removeMessages(TIMER_START);
-                this.removeMessages(TIMER_STOP);
-                this.removeMessages(TIMER_RESET);
-                break;
-            case TIMER_RESET:
-                timer = 0;
-                display.setText(getTime());
-                break;
-            case TIMER_COUNT_UP:
-                display.setText(getTime());
-                timer++;
-                this.sleep(DEFAULT_TIMER_COUNT);
-                break;
+                case TIMER_START:
+                    display.setText(getTime());
+                    this.sleep(DEFAULT_TIMER_COUNT);
+                    break;
+                case TIMER_STOP:
+                    this.removeMessages(TIMER_COUNT_UP);
+                    this.removeMessages(TIMER_START);
+                    this.removeMessages(TIMER_STOP);
+                    this.removeMessages(TIMER_RESET);
+                    break;
+                case TIMER_RESET:
+                    timer = 0;
+                    display.setText(getTime());
+                    break;
+                case TIMER_COUNT_UP:
+                    display.setText(getTime());
+                    timer++;
+                    this.sleep(DEFAULT_TIMER_COUNT);
+                    break;
             }
         }
 
@@ -77,5 +77,7 @@ public class Timer {
             this.removeMessages(TIMER_COUNT_UP);
             sendMessageDelayed(this.obtainMessage(TIMER_COUNT_UP), delayMillis);
         }
-    };
+    }
+
+    ;
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/AdHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/AdHelper.java
index 3a86ee9..8d8f6c0 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/AdHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/AdHelper.java
@@ -19,9 +19,6 @@
 
 package com.intervigil.micdroid.helper;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.AdView;
 
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/ApplicationHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/ApplicationHelper.java
index 0241cf4..56ddf07 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/ApplicationHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/ApplicationHelper.java
@@ -19,12 +19,12 @@
 
 package com.intervigil.micdroid.helper;
 
-import java.io.File;
-
 import android.content.Context;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.os.Environment;
 
+import java.io.File;
+
 public class ApplicationHelper {
 
     public static int getPackageVersion(Context context) {
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/AudioHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/AudioHelper.java
index 7e4ef95..b1f8893 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/AudioHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/AudioHelper.java
@@ -42,77 +42,72 @@ public class AudioHelper {
 
     /**
      * Convert Android AudioFormat.CHANNEL_CONFIGURATION constants to integers
-     * 
-     * @param androidChannels
-     *            Android AudioFormat constant
+     *
+     * @param androidChannels Android AudioFormat constant
      */
     public static int getChannelConfig(int androidChannels) {
         switch (androidChannels) {
-        case AudioFormat.CHANNEL_CONFIGURATION_MONO:
-            return 1;
-        case AudioFormat.CHANNEL_CONFIGURATION_STEREO:
-            return 2;
-        default:
-            return 1;
+            case AudioFormat.CHANNEL_CONFIGURATION_MONO:
+                return 1;
+            case AudioFormat.CHANNEL_CONFIGURATION_STEREO:
+                return 2;
+            default:
+                return 1;
         }
     }
 
     /**
      * Convert Android AudioFormat.ENCODING_PCM constants to integers
-     * 
-     * @param androidEncoding
-     *            Android AudioFormat constant
+     *
+     * @param androidEncoding Android AudioFormat constant
      */
     public static int getPcmEncoding(int androidEncoding) {
         switch (androidEncoding) {
-        case AudioFormat.ENCODING_PCM_8BIT:
-            return 8;
-        case AudioFormat.ENCODING_PCM_16BIT:
-            return 16;
-        default:
-            return 8;
+            case AudioFormat.ENCODING_PCM_8BIT:
+                return 8;
+            case AudioFormat.ENCODING_PCM_16BIT:
+                return 16;
+            default:
+                return 8;
         }
     }
 
     /**
      * Convert integers to AudioFormat.CHANNEL_CONFIGURATION constants
-     * 
-     * @param numChannels
-     *            number of channels, typically 1 or 2
+     *
+     * @param numChannels number of channels, typically 1 or 2
      */
     public static int getAndroidChannelConfig(int numChannels) {
         switch (numChannels) {
-        case 1:
-            return AudioFormat.CHANNEL_CONFIGURATION_MONO;
-        case 2:
-            return AudioFormat.CHANNEL_CONFIGURATION_STEREO;
-        default:
-            return AudioFormat.CHANNEL_CONFIGURATION_DEFAULT;
+            case 1:
+                return AudioFormat.CHANNEL_CONFIGURATION_MONO;
+            case 2:
+                return AudioFormat.CHANNEL_CONFIGURATION_STEREO;
+            default:
+                return AudioFormat.CHANNEL_CONFIGURATION_DEFAULT;
         }
     }
 
     /**
      * Convert integers to AudioFormat.ENCODING_PCM constants
-     * 
-     * @param bitsPerSample
-     *            bits in a sample of audio, typically 8 or 16
+     *
+     * @param bitsPerSample bits in a sample of audio, typically 8 or 16
      */
     public static int getAndroidPcmEncoding(int bitsPerSample) {
         switch (bitsPerSample) {
-        case 8:
-            return AudioFormat.ENCODING_PCM_8BIT;
-        case 16:
-            return AudioFormat.ENCODING_PCM_16BIT;
-        default:
-            return AudioFormat.ENCODING_DEFAULT;
+            case 8:
+                return AudioFormat.ENCODING_PCM_8BIT;
+            case 16:
+                return AudioFormat.ENCODING_PCM_16BIT;
+            default:
+                return AudioFormat.ENCODING_DEFAULT;
         }
     }
 
     /**
      * Gets an AudioTrack object using the current playback settings
-     * 
-     * @param context
-     *            Context which we are getting recorder for
+     *
+     * @param context Context which we are getting recorder for
      */
     public static AudioTrack getPlayer(Context context)
             throws IllegalArgumentException {
@@ -145,9 +140,8 @@ public class AudioHelper {
     /**
      * Gets the validity of the current recorder settings, particularly sample
      * rate; This function wraps getRecorderBufferSize(Context)
-     * 
-     * @param context
-     *            Context which we are getting recorder information about
+     *
+     * @param context Context which we are getting recorder information about
      */
     public static boolean isValidRecorderConfiguration(Context context) {
         return getRecorderBufferSize(context) != AudioRecord.ERROR_BAD_VALUE;
@@ -159,9 +153,8 @@ public class AudioHelper {
      * PcmFormat) which means this function can return
      * AudioRecord.ERROR_BAD_VALUE for invalid settings or AudioRecord.ERROR
      * when the system is unable to query hardware for proper settings
-     * 
-     * @param context
-     *            Context which we are getting recorder information about
+     *
+     * @param context Context which we are getting recorder information about
      */
     public static int getRecorderBufferSize(Context context) {
         int bufferSize = 0;
@@ -177,9 +170,8 @@ public class AudioHelper {
 
     /**
      * Gets an AudioRecord object using the current recording settings
-     * 
-     * @param context
-     *            Context which we are getting recorder for
+     *
+     * @param context Context which we are getting recorder for
      */
     public static AudioRecord getRecorder(Context context)
             throws IllegalArgumentException {
@@ -210,9 +202,8 @@ public class AudioHelper {
      * Attempts to autoconfigure current Context's sample rate, buffer size,
      * or buffer size adjuster . Will show a pop-up warning if configuration
      * failed to initialize an AudioRecord instance.
-     * 
-     * @param context
-     *            Context which we are attempting to configure
+     *
+     * @param context Context which we are attempting to configure
      */
     public static void configureRecorder(Context context) {
         AudioRecord rec = null;
@@ -269,7 +260,7 @@ public class AudioHelper {
                         Constants.DEFAULT_PCM_FORMAT);
                 if (bufferSize != AudioRecord.ERROR && bufferSize != AudioRecord.ERROR_BAD_VALUE) {
                     if (bufferSize <= 4096) {
-                        bufferSize = 4096 * 3/2;
+                        bufferSize = 4096 * 3 / 2;
                     }
                     rec = new AudioRecord(
                             AudioSource.MIC,
@@ -307,7 +298,7 @@ public class AudioHelper {
      * Tries to figure out if the current phone is Galaxy S based, since it has
      * recording issues This is pretty nasty since we are string matching, but
      * unless I can get a better way to do it...
-     * 
+     *
      * @param
      */
     public static boolean isSamsungGalaxyS() {
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/DialogHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/DialogHelper.java
index 8e0e76a..6741bc0 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/DialogHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/DialogHelper.java
@@ -42,7 +42,7 @@ public class DialogHelper {
     }
 
     public static void showConfirmation(Context context, int titleId, int messageId,
-            int positiveId, int negativeId, OnClickListener clickListener) {
+                                        int positiveId, int negativeId, OnClickListener clickListener) {
         Builder confirmDialogBuilder = new Builder(context);
         confirmDialogBuilder.setTitle(R.string.confirm_delete_title)
                 .setMessage(R.string.confirm_delete_message)
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/MediaStoreHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/MediaStoreHelper.java
index 629dbed..8785ff7 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/MediaStoreHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/MediaStoreHelper.java
@@ -44,8 +44,8 @@ public class MediaStoreHelper {
                     .getAbsolutePath());
 
             Cursor results = resolver.query(contentUri,
-                    new String[] { "_display_name" }, "_display_name=?",
-                    new String[] { r.getName() }, null);
+                    new String[]{"_display_name"}, "_display_name=?",
+                    new String[]{r.getName()}, null);
 
             int count = 0;
             if (results != null) {
@@ -82,11 +82,11 @@ public class MediaStoreHelper {
                     .getAbsolutePath());
 
             Cursor results = resolver.query(contentUri,
-                    new String[] { "_display_name" }, "_display_name=?",
-                    new String[] { r.getName() }, null);
+                    new String[]{"_display_name"}, "_display_name=?",
+                    new String[]{r.getName()}, null);
             if (results != null && results.getCount() > 0) {
-                resolver.delete(contentUri, "_display_name=?", new String[] { r
-                        .getName() });
+                resolver.delete(contentUri, "_display_name=?", new String[]{r
+                        .getName()});
                 results.close();
             }
 
@@ -114,11 +114,11 @@ public class MediaStoreHelper {
                     .getAbsolutePath());
 
             Cursor results = resolver.query(contentUri,
-                    new String[] { "_display_name" }, "_display_name=?",
-                    new String[] { r.getName() }, null);
+                    new String[]{"_display_name"}, "_display_name=?",
+                    new String[]{r.getName()}, null);
             if (results != null && results.getCount() > 0) {
-                resolver.delete(contentUri, "_display_name=?", new String[] { r
-                        .getName() });
+                resolver.delete(contentUri, "_display_name=?", new String[]{r
+                        .getName()});
                 results.close();
             }
             resolver = null;
@@ -150,7 +150,7 @@ public class MediaStoreHelper {
             Uri contentUri = MediaStore.Audio.Media
                     .getContentUriForPath(recording.getAbsolutePath());
             resolver.delete(contentUri, "_display_name=?",
-                    new String[] { recording.getName() });
+                    new String[]{recording.getName()});
             Uri recordingUri = resolver.insert(contentUri, values);
             resolver = null;
             return recordingUri;
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/PreferenceHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/PreferenceHelper.java
index 896ce9e..6181348 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/PreferenceHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/PreferenceHelper.java
@@ -31,7 +31,7 @@ public class PreferenceHelper {
 
     public static boolean getShowAds(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         boolean pref = prefReader.getBoolean(
                 context.getString(R.string.prefs_enable_ads_key),
                 Boolean.parseBoolean(context.getString(R.string.prefs_enable_ads_default)));
@@ -40,7 +40,7 @@ public class PreferenceHelper {
 
     public static boolean getScreenLock(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         boolean pref = prefReader.getBoolean(
                 context.getString(R.string.prefs_prevent_screen_lock_key),
                 Boolean.parseBoolean(context.getString(R.string.prefs_prevent_screen_lock_default)));
@@ -49,7 +49,7 @@ public class PreferenceHelper {
 
     public static boolean getLiveMode(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         boolean pref = prefReader.getBoolean(
                 context.getString(R.string.prefs_live_mode_key),
                 Boolean.parseBoolean(context.getString(R.string.prefs_live_mode_default)));
@@ -58,7 +58,7 @@ public class PreferenceHelper {
 
     public static char getKey(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefReader.getString(
                 context.getString(R.string.prefs_key_key),
                 context.getString(R.string.prefs_key_default));
@@ -67,7 +67,7 @@ public class PreferenceHelper {
 
     public static float getPullToFixedPitch(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_pitch_pull_key),
                 context.getString(R.string.prefs_pitch_pull_default));
@@ -76,7 +76,7 @@ public class PreferenceHelper {
 
     public static float getPitchShift(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_pitch_shift_key),
                 context.getString(R.string.prefs_pitch_shift_default));
@@ -85,7 +85,7 @@ public class PreferenceHelper {
 
     public static float getCorrectionStrength(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_corr_str_key),
                 context.getString(R.string.prefs_corr_str_default));
@@ -94,7 +94,7 @@ public class PreferenceHelper {
 
     public static float getCorrectionSmoothness(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_corr_smooth_key),
                 context.getString(R.string.prefs_corr_smooth_default));
@@ -103,7 +103,7 @@ public class PreferenceHelper {
 
     public static boolean getFormantCorrection(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         boolean pref = prefReader.getBoolean(
                 context.getString(R.string.prefs_formant_corr_key),
                 Boolean.parseBoolean(context.getString(R.string.prefs_formant_corr_default)));
@@ -112,7 +112,7 @@ public class PreferenceHelper {
 
     public static float getFormantWarp(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_formant_warp_key),
                 context.getString(R.string.prefs_formant_warp_default));
@@ -121,7 +121,7 @@ public class PreferenceHelper {
 
     public static float getMix(Context context) {
         SharedPreferences prefs =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String pref = prefs.getString(
                 context.getString(R.string.prefs_corr_mix_key),
                 context.getString(R.string.prefs_corr_mix_default));
@@ -130,7 +130,7 @@ public class PreferenceHelper {
 
     public static int getSampleRate(Context context) {
         SharedPreferences prefReader =
-            PreferenceManager.getDefaultSharedPreferences(context);
+                PreferenceManager.getDefaultSharedPreferences(context);
         String sampleRate = prefReader.getString(
                 context.getString(R.string.prefs_sample_rate_key), "-1");
         return Integer.parseInt(sampleRate);
@@ -138,7 +138,7 @@ public class PreferenceHelper {
 
     public static void setSampleRate(Context context, int sampleRate) {
         Editor prefEditor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         prefEditor.putString(context.getString(R.string.prefs_sample_rate_key),
                 String.format("%d", sampleRate));
         prefEditor.commit();
@@ -154,9 +154,9 @@ public class PreferenceHelper {
     }
 
     public static void setBufferSize(Context context,
-            int bufferSize) {
+                                     int bufferSize) {
         Editor prefEditor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         prefEditor.putString(
                 context.getString(R.string.prefs_buffer_size_key),
                 String.format("%d", bufferSize));
@@ -173,9 +173,9 @@ public class PreferenceHelper {
     }
 
     public static void setBufferSizeAdjuster(Context context,
-            int bufferSizeAdjuster) {
+                                             int bufferSizeAdjuster) {
         Editor prefEditor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         prefEditor.putString(
                 context.getString(R.string.prefs_buffer_size_adjuster_key),
                 String.format("%d", bufferSizeAdjuster));
@@ -189,14 +189,14 @@ public class PreferenceHelper {
 
     public static void setLastVersionCode(Context context, int value) {
         Editor editor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         editor.putInt(Constants.KEY_LAST_VERSION_CODE, value);
         editor.commit();
     }
 
     public static void setDefaultPreferences(Context context) {
         Editor prefEditor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         prefEditor.clear().commit();
 
         AudioHelper.configureRecorder(context);
@@ -204,21 +204,21 @@ public class PreferenceHelper {
 
     public static void resetFormantCorrectionDefault(Context context) {
         Editor editor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         editor.remove(context.getString(R.string.prefs_formant_corr_key));
         editor.commit();
     }
 
     public static void resetPitchShiftDefault(Context context) {
         Editor editor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         editor.remove(context.getString(R.string.prefs_pitch_shift_key));
         editor.commit();
     }
 
     public static void unsetRecordingSettings(Context context) {
         Editor editor =
-            PreferenceManager.getDefaultSharedPreferences(context).edit();
+                PreferenceManager.getDefaultSharedPreferences(context).edit();
         editor.remove(context.getString(R.string.prefs_sample_rate_key));
         editor.remove(context.getString(R.string.prefs_buffer_size_key));
         editor.remove(context.getString(R.string.prefs_buffer_size_adjuster_key));
diff --git a/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java b/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
index 879bc22..d4a57c7 100644
--- a/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
+++ b/app/src/main/java/com/intervigil/micdroid/helper/RecordingOptionsHelper.java
@@ -57,7 +57,7 @@ public class RecordingOptionsHelper {
     }
 
     public static boolean setNotificationTone(Context context,
-            Recording recording) {
+                                              Recording recording) {
         Uri recordingUri = MediaStoreHelper.getRecordingUri(context, recording);
         if (recordingUri != null) {
             RingtoneManager.setActualDefaultRingtoneUri(context,
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java b/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
index 9fb9901..d3e427c 100644
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
+++ b/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
@@ -3,6 +3,6 @@ package com.intervigil.micdroid.interfaces;
 public interface DependentTask {
 
     public void doTask();
-    
+
     public void handleError();
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java b/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
index 78f22ba..37f51f7 100644
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
+++ b/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
@@ -4,10 +4,10 @@ package com.intervigil.micdroid.interfaces;
 public interface Recorder {
 
     public void start();
-    
+
     public void stop();
-    
+
     public void cleanup();
-    
-    public boolean isRunning(); 
+
+    public boolean isRunning();
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/model/Recording.java b/app/src/main/java/com/intervigil/micdroid/model/Recording.java
index 9f1b880..aa44b9b 100644
--- a/app/src/main/java/com/intervigil/micdroid/model/Recording.java
+++ b/app/src/main/java/com/intervigil/micdroid/model/Recording.java
@@ -19,16 +19,16 @@
 
 package com.intervigil.micdroid.model;
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
 import android.os.Parcel;
 import android.os.Parcelable;
 
 import com.intervigil.wave.WaveReader;
 import com.intervigil.wave.exception.InvalidWaveException;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
 public class Recording implements Parcelable {
     public static final int WAVE_HEADER_SIZE = 44;
     public static final int MILLISECONDS_IN_SECOND = 1000;
diff --git a/app/src/main/java/com/intervigil/micdroid/recorder/SimpleRecorder.java b/app/src/main/java/com/intervigil/micdroid/recorder/SimpleRecorder.java
deleted file mode 100644
index 293c353..0000000
--- a/app/src/main/java/com/intervigil/micdroid/recorder/SimpleRecorder.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package com.intervigil.micdroid.recorder;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-import net.sourceforge.autotalent.Autotalent;
-import android.content.Context;
-import android.media.AudioManager;
-import android.media.AudioRecord;
-import android.media.AudioTrack;
-import android.os.Handler;
-import android.os.Message;
-import android.widget.Toast;
-
-import com.intervigil.micdroid.Constants;
-import com.intervigil.micdroid.R;
-import com.intervigil.micdroid.helper.AudioHelper;
-import com.intervigil.micdroid.helper.DialogHelper;
-import com.intervigil.micdroid.helper.PreferenceHelper;
-import com.intervigil.micdroid.interfaces.DependentTask;
-import com.intervigil.micdroid.interfaces.Recorder;
-import com.intervigil.wave.WaveWriter;
-import com.intervigil.wave.exception.InvalidWaveException;
-
-public class SimpleRecorder implements Recorder {
-
-    private static final int SIMPLE_RECORDER_BUFFER_SIZE = 8192;
-
-    private static final int RECORDER_MESSAGE_IO_ERROR = 8675308;
-    private static final int RECORDER_MESSAGE_RECORD_ERROR = 8675310;
-    private static final int RECORDER_MESSAGE_FINISHED = 8675307;
-
-    private final Context context;
-    private MicWriter writerThread;
-    private final boolean isLiveMode;
-    private final int sampleRate;
-    private final DependentTask postRecordTask;
-
-    public SimpleRecorder(Context context, DependentTask postRecordTask, boolean isLiveMode) {
-        this.context = context;
-        this.sampleRate = PreferenceHelper.getSampleRate(context);
-        this.postRecordTask = postRecordTask;
-        this.isLiveMode = isLiveMode;
-    }
-
-    @Override
-    public void start() {
-        try {
-            writerThread = new MicWriter();
-            writerThread.start();
-            Toast.makeText(context,
-                    R.string.recording_started_toast,
-                    Toast.LENGTH_SHORT).show();
-        } catch (IllegalArgumentException e) {
-            DialogHelper.showWarning(context,
-                    R.string.audio_record_exception_title,
-                    R.string.audio_record_exception_warning);
-            postRecordTask.handleError();
-        }
-    }
-
-    @Override
-    public void stop() {
-        if (isRunning()) {
-            writerThread.close();
-            try {
-                writerThread.join();
-            } catch (InterruptedException e) {}
-            writerThread = null;
-        }
-    }
-
-    @Override
-    public void cleanup() {
-        stop();
-    }
-
-    @Override
-    public boolean isRunning() {
-        return (writerThread != null
-                && writerThread.getState() != Thread.State.NEW && writerThread
-                .getState() != Thread.State.TERMINATED);
-    }
-
-    private Handler recorderHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case RECORDER_MESSAGE_RECORD_ERROR:
-                    DialogHelper.showWarning(context,
-                            R.string.audio_record_exception_title,
-                            R.string.audio_record_exception_warning);
-                    postRecordTask.handleError();
-                    break;
-                case RECORDER_MESSAGE_IO_ERROR:
-                    DialogHelper.showWarning(context,
-                            R.string.recording_io_error_title,
-                            R.string.recording_io_error_warning);
-                    postRecordTask.handleError();
-                    break;
-                case RECORDER_MESSAGE_FINISHED:
-                    postRecordTask.doTask();
-                    break;
-            }
-        }
-    };
-
-    private class MicWriter extends Thread {
-        private final AudioRecord audioRecord;
-        private AudioTrack audioTrack;
-        private final WaveWriter writer;
-        private boolean running;
-
-        public MicWriter() throws IllegalArgumentException {
-            this.running = false;
-            this.audioRecord = AudioHelper.getRecorder(context);
-            this.writer = new WaveWriter(context.getCacheDir().getAbsolutePath(),
-                    context.getString(R.string.default_recording_name), sampleRate,
-                    AudioHelper.getChannelConfig(Constants.DEFAULT_CHANNEL_CONFIG),
-                    AudioHelper.getPcmEncoding(Constants.DEFAULT_PCM_FORMAT));
-
-            if (isLiveMode) {
-                this.audioTrack = AudioHelper.getPlayer(context);
-            }
-        }
-
-        public synchronized void close() {
-            running = false;
-        }
-
-        public void initialize() throws FileNotFoundException, InvalidWaveException, IOException {
-            writer.createWaveFile();
-            if (isLiveMode) {
-                AudioManager am = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
-                am.setMode(AudioManager.MODE_NORMAL);
-            }
-        }
-
-        public void cleanup() {
-            // stop things
-            if (audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) {
-                audioRecord.stop();
-            }
-            audioRecord.release();
-            if (isLiveMode) {
-                audioTrack.stop();
-                audioTrack.release();
-            }
-            // close file
-            try {
-                writer.closeWaveFile();
-            } catch (IOException e) {
-                // no recovery possible here
-                e.printStackTrace();
-            }
-        }
-
-        public void run() {
-            Message msg;
-            int numSamples;
-            short[] buf = new short[SIMPLE_RECORDER_BUFFER_SIZE];
-
-            try {
-                initialize();
-                running = true;
-                audioRecord.startRecording();
-                if (isLiveMode) {
-                    audioTrack.play();
-                }
-                while (running) {
-                    numSamples = audioRecord.read(buf, 0, SIMPLE_RECORDER_BUFFER_SIZE);
-                    if (isLiveMode) {
-                        processLiveAudio(buf, numSamples);
-                        audioTrack.write(buf, 0, numSamples);
-                    }
-                    writer.write(buf, 0, numSamples);
-                }
-                msg = recorderHandler.obtainMessage(RECORDER_MESSAGE_FINISHED);
-            } catch (IllegalStateException e) {
-                msg = recorderHandler.obtainMessage(RECORDER_MESSAGE_RECORD_ERROR);
-            } catch (IOException e) {
-                // file IO error, no recovery possible?
-                e.printStackTrace();
-                msg = recorderHandler.obtainMessage(RECORDER_MESSAGE_IO_ERROR);
-            }
-            cleanup();
-            recorderHandler.sendMessage(msg);
-        }
-
-        private void processLiveAudio(short[] samples, int numSamples) throws IOException {
-            Autotalent.processSamples(samples, numSamples);
-        }
-    }
-}
diff --git a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java b/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
index d05ab0e..b5249ae 100644
--- a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
+++ b/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
@@ -20,10 +20,6 @@
 
 package com.intervigil.micdroid.recorder;
 
-import java.io.FileNotFoundException;
-import java.io.IOException;
-
-import net.sourceforge.autotalent.Autotalent;
 import android.content.Context;
 import android.media.AudioManager;
 import android.media.AudioRecord;
@@ -44,6 +40,11 @@ import com.intervigil.micdroid.interfaces.Recorder;
 import com.intervigil.wave.WaveWriter;
 import com.intervigil.wave.exception.InvalidWaveException;
 
+import net.sourceforge.autotalent.Autotalent;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
 public class SipdroidRecorder implements Recorder {
 
     private static final String CLASS_SIPDROID_RECORDER = "SipdroidRecorder";
@@ -85,7 +86,8 @@ public class SipdroidRecorder implements Recorder {
             writerThread.close();
             try {
                 writerThread.join();
-            } catch (InterruptedException e) {}
+            } catch (InterruptedException e) {
+            }
             writerThread = null;
         }
     }
@@ -219,7 +221,8 @@ public class SipdroidRecorder implements Recorder {
                     if (nextFrameDelay > 0) {
                         try {
                             sleep(nextFrameDelay);
-                        } catch (InterruptedException e) {}
+                        } catch (InterruptedException e) {
+                        }
                         lastFrameTime = lastFrameTime + nextFrameDelay;
                     }
                     num = audioRecord.read(buf, 0, frameSize);
diff --git a/app/src/main/java/com/intervigil/wave/WaveReader.java b/app/src/main/java/com/intervigil/wave/WaveReader.java
index cb5081f..4c91b6c 100644
--- a/app/src/main/java/com/intervigil/wave/WaveReader.java
+++ b/app/src/main/java/com/intervigil/wave/WaveReader.java
@@ -19,14 +19,14 @@
 
 package com.intervigil.wave;
 
+import com.intervigil.wave.exception.InvalidWaveException;
+
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 
-import com.intervigil.wave.exception.InvalidWaveException;
-
 public class WaveReader {
     private static final int WAV_HEADER_CHUNK_ID = 0x52494646;  // "RIFF"
     private static final int WAV_FORMAT = 0x57415645;  // "WAVE"
@@ -47,8 +47,8 @@ public class WaveReader {
     /**
      * Constructor; initializes WaveReader to read from given file
      *
-     * @param path  path to input file
-     * @param name  name of input file
+     * @param path path to input file
+     * @param name name of input file
      */
     public WaveReader(String path, String name) {
         this.mInFile = new File(path + File.separator + name);
@@ -57,7 +57,7 @@ public class WaveReader {
     /**
      * Constructor; initializes WaveReader to read from given file
      *
-     * @param file  handle to input file
+     * @param file handle to input file
      */
     public WaveReader(File file) {
         this.mInFile = file;
@@ -67,8 +67,8 @@ public class WaveReader {
      * Open WAV file for reading
      *
      * @throws FileNotFoundException if input file does not exist
-     * @throws InvalidWaveException if input file is not a valid WAVE file
-     * @throws IOException if I/O error occurred during file read
+     * @throws InvalidWaveException  if input file is not a valid WAVE file
+     * @throws IOException           if I/O error occurred during file read
      */
     public void openWave() throws FileNotFoundException, InvalidWaveException, IOException {
         FileInputStream fileStream = new FileInputStream(mInFile);
@@ -83,14 +83,14 @@ public class WaveReader {
         if (format != WAV_FORMAT) {
             throw new InvalidWaveException("Invalid WAVE format");
         }
-        
+
         int formatId = readUnsignedInt(mInStream);  // should be "fmt "
         if (formatId != WAV_FORMAT_CHUNK_ID) {
             throw new InvalidWaveException("Invalid WAVE format chunk ID");
         }
         int formatSize = readUnsignedIntLE(mInStream);
         if (formatSize != 16) {
-            
+
         }
         int audioFormat = readUnsignedShortLE(mInStream);
         if (audioFormat != 1) {
@@ -101,7 +101,7 @@ public class WaveReader {
         int byteRate = readUnsignedIntLE(mInStream);
         int blockAlign = readUnsignedShortLE(mInStream);
         mSampleBits = readUnsignedShortLE(mInStream);
-        
+
         int dataId = readUnsignedInt(mInStream);
         if (dataId != WAV_DATA_CHUNK_ID) {
             throw new InvalidWaveException("Invalid WAVE data chunk ID");
@@ -135,7 +135,7 @@ public class WaveReader {
     public int getPcmFormat() {
         return mSampleBits;
     }
-    
+
     /**
      * Get file size
      *
@@ -171,11 +171,9 @@ public class WaveReader {
     /**
      * Read audio data from input file (mono)
      *
-     * @param dst  mono audio data output buffer
-     * @param numSamples  number of samples to read
-     *
+     * @param dst        mono audio data output buffer
+     * @param numSamples number of samples to read
      * @return number of samples read
-     *
      * @throws IOException if file I/O error occurs
      */
     public int read(short[] dst, int numSamples) throws IOException {
@@ -187,8 +185,8 @@ public class WaveReader {
         int index = 0;
         int bytesRead = mInStream.read(buf, 0, numSamples * 2);
 
-        for (int i = 0; i < bytesRead; i+=2) {
-            dst[index] = byteToShortLE(buf[i], buf[i+1]);
+        for (int i = 0; i < bytesRead; i += 2) {
+            dst[index] = byteToShortLE(buf[i], buf[i + 1]);
             index++;
         }
 
@@ -198,12 +196,10 @@ public class WaveReader {
     /**
      * Read audio data from input file (stereo)
      *
-     * @param left  left channel audio output buffer
-     * @param right  right channel audio output buffer
-     * @param numSamples  number of samples to read
-     *
+     * @param left       left channel audio output buffer
+     * @param right      right channel audio output buffer
+     * @param numSamples number of samples to read
      * @return number of samples read
-     *
      * @throws IOException if file I/O error occurs
      */
     public int read(short[] left, short[] right, int numSamples) throws IOException {
@@ -214,8 +210,8 @@ public class WaveReader {
         int index = 0;
         int bytesRead = mInStream.read(buf, 0, numSamples * 4);
 
-        for (int i = 0; i < bytesRead; i+=2) {
-            short val = byteToShortLE(buf[0], buf[i+1]);
+        for (int i = 0; i < bytesRead; i += 2) {
+            short val = byteToShortLE(buf[0], buf[i + 1]);
             if (i % 4 == 0) {
                 left[index] = val;
             } else {
@@ -237,7 +233,7 @@ public class WaveReader {
             mInStream.close();
         }
     }
-    
+
     private static short byteToShortLE(byte b1, byte b2) {
         return (short) (b1 & 0xFF | ((b2 & 0xFF) << 8));
     }
@@ -255,7 +251,7 @@ public class WaveReader {
                     | (buf[3] & 0xFF));
         }
     }
-    
+
     private static int readUnsignedIntLE(BufferedInputStream in) throws IOException {
         int ret;
         byte[] buf = new byte[4];
@@ -269,7 +265,7 @@ public class WaveReader {
                     | ((buf[3] & 0xFF) << 24));
         }
     }
-    
+
     private static short readUnsignedShortLE(BufferedInputStream in) throws IOException {
         int ret;
         byte[] buf = new byte[2];
diff --git a/app/src/main/java/com/intervigil/wave/WaveWriter.java b/app/src/main/java/com/intervigil/wave/WaveWriter.java
index 2478c6a..9ba0ef9 100644
--- a/app/src/main/java/com/intervigil/wave/WaveWriter.java
+++ b/app/src/main/java/com/intervigil/wave/WaveWriter.java
@@ -41,14 +41,14 @@ public class WaveWriter {
     /**
      * Constructor; initializes WaveWriter with file name and path
      *
-     * @param path  output file path
-     * @param name  output file name
-     * @param sampleRate  output sample rate
-     * @param channels  number of channels
-     * @param sampleBits  number of bits per sample (S8LE, S16LE)
+     * @param path       output file path
+     * @param name       output file name
+     * @param sampleRate output sample rate
+     * @param channels   number of channels
+     * @param sampleBits number of bits per sample (S8LE, S16LE)
      */
     public WaveWriter(String path, String name, int sampleRate, int channels,
-            int sampleBits) {
+                      int sampleBits) {
         this.mOutFile = new File(path + File.separator + name);
 
         this.mSampleRate = sampleRate;
@@ -61,10 +61,10 @@ public class WaveWriter {
     /**
      * Constructor; initializes WaveWriter with file name and path
      *
-     * @param file  output file handle
-     * @param sampleRate  output sample rate
-     * @param channels  number of channels
-     * @param sampleBits  number of bits per sample (S8LE, S16LE)
+     * @param file       output file handle
+     * @param sampleRate output sample rate
+     * @param channels   number of channels
+     * @param sampleBits number of bits per sample (S8LE, S16LE)
      */
     public WaveWriter(File file, int sampleRate, int channels, int sampleBits) {
         this.mOutFile = file;
@@ -80,7 +80,6 @@ public class WaveWriter {
      * Create output WAV file
      *
      * @return whether file creation succeeded
-     *
      * @throws IOException if file I/O error occurs allocating header
      */
     public boolean createWaveFile() throws IOException {
@@ -102,10 +101,9 @@ public class WaveWriter {
      * Write audio data to output file (mono). Does
      * nothing if output file is not mono channel.
      *
-     * @param src  mono audio data input buffer
+     * @param src    mono audio data input buffer
      * @param offset offset into src buffer
-     * @param length  buffer size in number of samples
-     *
+     * @param length buffer size in number of samples
      * @throws IOException if file I/O error occurs
      */
     public void write(short[] src, int offset, int length) throws IOException {
@@ -125,11 +123,10 @@ public class WaveWriter {
      * Write audio data to output file (stereo). Does
      * nothing if output file is not stereo channel.
      *
-     * @param left  left channel audio data buffer
+     * @param left   left channel audio data buffer
      * @param right  right channel audio data buffer
-     * @param offset  offset into left/right buffers
-     * @param length  buffer size in number of samples
-     *
+     * @param offset offset into left/right buffers
+     * @param length buffer size in number of samples
      * @throws IOException if file I/O error occurs
      */
     public void write(short[] left, short[] right, int offset, int length) throws IOException {
diff --git a/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java b/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
index 333d70f..5186f2b 100644
--- a/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
+++ b/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
@@ -27,9 +27,9 @@ public class InvalidWaveException extends IOException {
      * Generated serialVersionUID
      */
     private static final long serialVersionUID = -8229742633848759378L;
-    
+
     public InvalidWaveException() {
-        
+
     }
 
     public InvalidWaveException(String msg) {
diff --git a/app/src/main/java/org/openintents/intents/FileManagerIntents.java b/app/src/main/java/org/openintents/intents/FileManagerIntents.java
index 5963f5e..468288e 100644
--- a/app/src/main/java/org/openintents/intents/FileManagerIntents.java
+++ b/app/src/main/java/org/openintents/intents/FileManagerIntents.java
@@ -15,58 +15,58 @@
  */
 
 /**
- * Provides OpenIntents actions, extras, and categories used by providers. 
+ * Provides OpenIntents actions, extras, and categories used by providers.
  * <p>These specifiers extend the standard Android specifiers.</p>
  */
 
 package org.openintents.intents;
 
 public class FileManagerIntents {
-   /** Activity Action: Pick a file through the file manager, or let user
-    * specify a custom file name. Data is the current file name or file name
-    * suggestion. Returns a new file name as file URI in data.
-    * 
-    * <p>
-    * Constant Value: "org.openintents.action.PICK_FILE"
-    * </p>
-    */
-   public static final String ACTION_PICK_FILE = "org.openintents.action.PICK_FILE";
+    /** Activity Action: Pick a file through the file manager, or let user
+     * specify a custom file name. Data is the current file name or file name
+     * suggestion. Returns a new file name as file URI in data.
+     *
+     * <p>
+     * Constant Value: "org.openintents.action.PICK_FILE"
+     * </p>
+     */
+    public static final String ACTION_PICK_FILE = "org.openintents.action.PICK_FILE";
 
-   /**
-    * Activity Action: Pick a directory through the file manager, or let user
-    * specify a custom file name. Data is the current directory name or
-    * directory name suggestion. Returns a new directory name as file URI in
-    * data.
-    * 
-    * <p>
-    * Constant Value: "org.openintents.action.PICK_DIRECTORY"
-    * </p>
-    */
-   public static final String ACTION_PICK_DIRECTORY = "org.openintents.action.PICK_DIRECTORY";
+    /**
+     * Activity Action: Pick a directory through the file manager, or let user
+     * specify a custom file name. Data is the current directory name or
+     * directory name suggestion. Returns a new directory name as file URI in
+     * data.
+     *
+     * <p>
+     * Constant Value: "org.openintents.action.PICK_DIRECTORY"
+     * </p>
+     */
+    public static final String ACTION_PICK_DIRECTORY = "org.openintents.action.PICK_DIRECTORY";
 
-   /**
-    * The title to display.
-    * 
-    * <p>
-    * This is shown in the title bar of the file manager.
-    * </p>
-    * 
-    * <p>
-    * Constant Value: "org.openintents.extra.TITLE"
-    * </p>
-    */
-   public static final String EXTRA_TITLE = "org.openintents.extra.TITLE";
+    /**
+     * The title to display.
+     *
+     * <p>
+     * This is shown in the title bar of the file manager.
+     * </p>
+     *
+     * <p>
+     * Constant Value: "org.openintents.extra.TITLE"
+     * </p>
+     */
+    public static final String EXTRA_TITLE = "org.openintents.extra.TITLE";
 
-   /**
-    * The text on the button to display.
-    * 
-    * <p>
-    * Depending on the use, it makes sense to set this to "Open" or "Save".
-    * </p>
-    * 
-    * <p>
-    * Constant Value: "org.openintents.extra.BUTTON_TEXT"
-    * </p>
-    */
-   public static final String EXTRA_BUTTON_TEXT = "org.openintents.extra.BUTTON_TEXT";
+    /**
+     * The text on the button to display.
+     *
+     * <p>
+     * Depending on the use, it makes sense to set this to "Open" or "Save".
+     * </p>
+     *
+     * <p>
+     * Constant Value: "org.openintents.extra.BUTTON_TEXT"
+     * </p>
+     */
+    public static final String EXTRA_BUTTON_TEXT = "org.openintents.extra.BUTTON_TEXT";
 }
