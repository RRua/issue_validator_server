diff --git a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
index d96660e2..dc7ec46d 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
@@ -208,7 +208,7 @@ public class MainActivity extends AbsDispatcher {
         }
 
         public void setText() {
-            setText(AppDirectory.getDataDirectory(getContext(), directory).toString());
+            setText(AppDirectory.getDataDirectory(getContext(), directory).getPathName());
         }
 
         @Override
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
index 8854e607..4ea4f488 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
@@ -87,8 +87,8 @@ public class SrtmCoordinates extends Coordinates implements LatLongE6Interface {
     public Foc toFile(Foc base) {
         Foc old = toSRTMFile(base);
         if (old.exists()) return old;
-        
-        return base.child("/dem3/"+ toExtString() + ".hgt.zip");
+
+        return base.descendant("dem3/" + toExtString() + ".hgt.zip");
     }
 
     
@@ -97,10 +97,10 @@ public class SrtmCoordinates extends Coordinates implements LatLongE6Interface {
     }
 
     
-    
+
     // obsolete location
     private Foc toSRTMFile(Foc base) {
-        return base.child("/SRTM/" + toString() + ".SRTMGL3.hgt.zip");
+        return base.descendant("SRTM/" + toString() + ".SRTMGL3.hgt.zip");
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java b/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
index bc3375f1..0cec86e1 100644
--- a/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
+++ b/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
@@ -36,13 +36,13 @@ public class CustomFileSource extends ContentSource {
     
     @Override
     public void requestUpdate() {
-        ObjectHandle h =  scontext.getCacheService().getObject(fileID, new GpxObjectStatic.Factory());
+        ObjectHandle h = scontext.getCacheService().getObject(fileID, new GpxObjectStatic.Factory());
 
         handle.free();
         handle=h;
 
-        if (GpxObject.class.isInstance(h) && h.isReadyAndLoaded()) {
-            sendUpdate(InfoID.FILEVIEW, new GpxFileWrapper(h.toFile(scontext.getContext()), ((GpxObject)h).getGpxList()));
+        if (h instanceof GpxObject && h.isReadyAndLoaded()) {
+            sendUpdate(InfoID.FILEVIEW, new GpxFileWrapper(h.getFile(), ((GpxObject)h).getGpxList()));
         }
 
     }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
index d46dcead..a2f1574d 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
@@ -15,7 +15,7 @@ public class GpxListWriter implements  Closeable {
     private GpxWriter writer;
 
 
-    public GpxListWriter(GpxList track, Foc file) throws IOException  {
+    public GpxListWriter(GpxList track, Foc file) throws IOException, SecurityException  {
         writer = GpxWriter.factory(file, track.getDelta().getType());
         iterator = new GpxListIterator(track);
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
index 7a77e0e1..abb48d8f 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
@@ -14,11 +14,11 @@ public abstract class GpxWriter {
     private BufferedWriter output=null;
 
 
-    public GpxWriter(Foc file) throws IOException {
+    public GpxWriter(Foc file) throws IOException, SecurityException {
         output = new BufferedWriter(new OutputStreamWriter(file.openW()),8*1024);
 
     }
-    public static GpxWriter factory(Foc file, int type) throws IOException {
+    public static GpxWriter factory(Foc file, int type) throws IOException, SecurityException{
         if (type == GpxType.TRK) {
             return new TrackWriter(file);
         } else if (type == GpxType.RTE) {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
index 929923eb..90a449f3 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
@@ -8,12 +8,12 @@ import ch.bailu.simpleio.foc.Foc;
 
 public class TrackWriter extends GpxWriter {
 
-    public TrackWriter(Foc file) throws IOException {
+    public TrackWriter(Foc file) throws IOException, SecurityException{
         super(file);
     }
 
     @Override
-    public void writeHeader(long timestamp) throws IOException {
+    public void writeHeader(long timestamp) throws IOException, SecurityException {
         super.writeHeader(timestamp);
         writeBeginElement(GpxConstants.QNAME_TRACK);
     }
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
index 9f7b9ffa..e383c21a 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
@@ -150,7 +150,7 @@ public class MapsForgeViewBase extends MapView implements
 
     @Override
     public void frameBounding(BoundingBoxE6 boundingBox) {
-        if (boundingBox.hasBounding())
+        //if (boundingBox.hasBounding())
             frameBounding(boundingBox.toBoundingBox());
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
index da66bf53..a501fa6d 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
@@ -89,7 +89,7 @@ public abstract class SolidFile extends SolidString {
 
                 Uri uri = data.getData();
 
-                //requestPersistablePermission(c, uri);
+                requestPersistablePermission(c, uri);
 
                 Storage.global(c).writeString(browseDirKey, uri.toString());
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
index 49db84d7..b96b9b70 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
@@ -60,10 +60,7 @@ public class SolidPreset extends SolidIndexList {
     
     
     public String getDirectoryName() {
-    	return getDirectory().toString();
-    }
-    
-    public String getCacheDbName() {
-    	return AppDirectory.getTrackListCacheDb(getContext(),getIndex()).toString();
+    	return getDirectory().getPathName();
     }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
index 55bd251f..827bea73 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
@@ -14,7 +14,6 @@ import ch.bailu.simpleio.foc.Foc;
 
 public class SolidRenderTheme extends SolidFile {
 
-    private static final String ORUX_THEMES="../mapstyles";
 
     public SolidRenderTheme(Context c) {
         super(Storage.global(c), SolidRenderTheme.class.getSimpleName());
@@ -80,9 +79,7 @@ public class SolidRenderTheme extends SolidFile {
         list.add(InternalRenderTheme.OSMARENDER.toString());
 
         final Foc maps = new SolidMapsForgeDirectory(getContext()).getValueAsFile();
-        final Foc orux = maps.child(ORUX_THEMES);
         add_xmlInSubdirectories(list,maps);
-        add_xmlInSubdirectories(list,orux);
 
 
         return list;
diff --git a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
index 3c341e11..bec08b8f 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
@@ -9,6 +9,7 @@ import java.net.HttpURLConnection;
 import java.net.URL;
 
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.simpleio.foc.Foc;
 
@@ -30,16 +31,21 @@ public class DownloadHandle extends ProcessHandle {
     public DownloadHandle(String source, Foc target) {
         file = target;
         url = source;
+
     }
 
 
     @Override
     public long bgOnProcess() {
+        AppLog.d(this, url + " -> "  +file.getPathName());
         try {
+
             final long r = download(new URL(url), file);
             return r;
             
-        } catch (IOException e) {
+        } catch (Exception e) {
+            AppLog.d(this, "ERROR: " + e.toString());
+
             file.rm();
             return 0;
         }
@@ -70,12 +76,12 @@ public class DownloadHandle extends ProcessHandle {
 
 
         try {
-            connection = openConnection(url);
-            input = openInput(connection);
-
             downloadLock=true;
             output = file.openW();
 
+            connection = openConnection(url);
+            input = openInput(connection);
+
             while (( count = input.read(buffer)) != -1) {
                 total+=count;
                 output.write(buffer, 0, count);
diff --git a/app/src/main/java/ch/bailu/aat/services/background/FileHandle.java b/app/src/main/java/ch/bailu/aat/services/background/FileHandle.java
index b5b7361e..12048a73 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/FileHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/FileHandle.java
@@ -1,17 +1,23 @@
 package ch.bailu.aat.services.background;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public abstract class FileHandle extends ProcessHandle {
-    private final String file;
+    private final Foc file;
     
     
     
-    public FileHandle(String f) {
+    public FileHandle(Foc f) {
         file = f;
     }
     
 
     @Override 
     public String toString() {
+        return file.toString();
+    }
+
+    public Foc getFile() {
         return file;
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
index 9f09391a..bd02a1cf 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
@@ -6,8 +6,6 @@ import android.graphics.Bitmap;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
-import java.io.File;
-
 import ch.bailu.aat.map.tile.source.DownloadSource;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.DownloadHandle;
@@ -22,22 +20,23 @@ public class BitmapTileObject extends TileObject {
     private final DownloadSource source;
     private final Tile tile;
 
-
     private final String url;
-
+    private final Foc file;
 
     private final SyncTileBitmap bitmap=new SyncTileBitmap();
-
-
     private final DownloadHandle download;
 
 
+
     public BitmapTileObject(String id, final ServiceContext sc,  Tile t, DownloadSource s) {
         super(id);
         tile = t;
         source=s;
+
+        file = FocAndroid.factory(sc.getContext(),toString());
+
         url = source.getTileURLString(tile);
-        download = new FileDownloader(url, FocAndroid.factory(sc.getContext(),toString()), sc);
+        download = new FileDownloader(url, file, sc);
 
         sc.getCacheService().addToBroadcaster(this);
     }
@@ -54,7 +53,7 @@ public class BitmapTileObject extends TileObject {
 
     @Override
     public void onInsert(ServiceContext sc) {
-        if (isLoadable()) sc.getBackgroundService().load(new FileLoader(toString(), sc));
+        if (isLoadable()) sc.getBackgroundService().load(new FileLoader(file, sc));
         else if (isDownloadable())
             sc.getBackgroundService().download(download);
     }
@@ -69,7 +68,7 @@ public class BitmapTileObject extends TileObject {
     @Override
     public void reDownload(ServiceContext sc) {
         if (download.isLocked()==false) {
-            toFile(sc.getContext()).rm();
+            file.rm();
             if (isDownloadable()) sc.getBackgroundService().download(download);
         }
     }
@@ -81,15 +80,16 @@ public class BitmapTileObject extends TileObject {
     }
 
 
-    private boolean isLoadable() {
-        File file =  new File(toString());
 
+
+    private boolean isLoadable() {
+        file.update();
         return file.isFile() && file.canRead();
     }
 
     private boolean isDownloadable() {
         return (
-                !new File(toString()).exists() &&
+                !file.exists() &&
                         source.getMaximumZoomLevel() >= tile.zoomLevel &&
                         source.getMinimumZoomLevel() <= tile.zoomLevel);
     }
@@ -98,7 +98,7 @@ public class BitmapTileObject extends TileObject {
     @Override
     public void onDownloaded(String id, String u, ServiceContext sc) {
         if (u.equals(url) && isLoadable()) {
-            sc.getBackgroundService().load(new FileLoader(toString(), sc));
+            sc.getBackgroundService().load(new FileLoader(file, sc));
         }
 
     }
@@ -127,6 +127,10 @@ public class BitmapTileObject extends TileObject {
         return bitmap.getAndroidBitmap();
     }
 
+    @Override
+    public Foc getFile() {
+        return file;
+    }
 
 
     public static class Factory extends ObjectHandle.Factory {
@@ -150,7 +154,7 @@ public class BitmapTileObject extends TileObject {
     private static class FileLoader extends FileHandle {
         private final ServiceContext scontext;
 
-        public FileLoader(String f, ServiceContext sc) {
+        public FileLoader(Foc f, ServiceContext sc) {
             super(f);
             scontext = sc;
         }
@@ -159,13 +163,11 @@ public class BitmapTileObject extends TileObject {
         public long bgOnProcess() {
             long size = 0;
             if (scontext.lock()) {
-                File file = new File(toString());
-
                 ObjectHandle obj = scontext.getCacheService().getObject(toString());
 
                 if (obj instanceof BitmapTileObject) {
                     BitmapTileObject bmp = (BitmapTileObject) obj;
-                    bmp.bitmap.set(file, TILE_SIZE, bmp.source.isTransparent());
+                    bmp.bitmap.set(bmp.getFile(), TILE_SIZE, bmp.source.isTransparent());
                     size = bmp.getSize();
 
                 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
index f60a0bce..c3fa50ce 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
@@ -6,7 +6,6 @@ import android.graphics.Bitmap;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
-import java.io.IOException;
 import java.io.OutputStream;
 
 import ch.bailu.aat.map.tile.source.Source;
@@ -30,9 +29,11 @@ public class CachedTileObject extends TileObject {
 
     private final FileHandle save;
 
+    private final Foc cachedImageFile;
 
     public CachedTileObject(String id, final ServiceContext sc,  Tile t, Source source) {
         super(id);
+
         mapTile = t;
 
         sourceID = source.getID(t, sc.getContext());
@@ -43,40 +44,67 @@ public class CachedTileObject extends TileObject {
         cachedID = cached.getID(t, sc.getContext());
         cachedFactory = cached.getFactory(t);
 
-        save = new FileHandle(id) {
+        cachedImageFile = FocAndroid.factory(sc.getContext(), cachedID);
+
+        save = new FileHandle(cachedImageFile) {
 
             @Override
             public long bgOnProcess() {
-                long size = MIN_SIZE;
+                long size = 0;
 
-                if (!toFile(sc.getContext()).exists()) {
-                    OutputStream out = null;
-                    ObjectHandle handle = sc.getCacheService().getObject(sourceID);
+                if (sc.lock()) {
+                    size = save();
+                    sc.free();
+                }
+
+                return size;
+            }
 
-                    try {
-                        if (handle instanceof TileObject) {
-                            TileObject tileObject = (TileObject) handle;
 
-                            out = toFile(sc.getContext()).openW();
+            private long save() {
+                long size = 0;
+
+                ObjectHandle handle = sc.getCacheService().getObject(sourceID);
+
+                if (handle instanceof TileObject) {
+                    TileObject self = (TileObject) handle;
+
+                    size = save(self);
+                }
+
+                handle.free();
+                return size;
+            }
+
+
+            private long save(TileObject self) {
+                long size = 0;
+                OutputStream out = null;
+                Foc file = cachedImageFile;
+
+                if (file.exists() == false) {
+                    try {
+                        out = file.openW();
+                        Bitmap bitmap = self.getBitmap();
+                        if (bitmap != null && out != null) {
+                            bitmap.compress(Bitmap.CompressFormat.PNG, 0, out);
 
-                            Bitmap bitmap = tileObject.getBitmap();
-                            if (bitmap != null && out != null) {
-                                bitmap.compress(Bitmap.CompressFormat.PNG, 0, out);
-                            }
                         }
-                    } catch (IOException e) {
-                        AppLog.d(this, "Save bitmap error! Delete file here?");
 
+                        size = self.getSize();
+                    } catch (Exception e) {
+                        AppLog.d(this, "Save bitmap error! Delete cachedImageFile here?");
 
                     } finally {
-                        size = handle.getSize();
                         Foc.close(out);
-                        handle.free();
+
                     }
                 }
+
                 return size;
             }
 
+
             @Override
             public void broadcast(Context context) {
                 AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK,
@@ -96,13 +124,10 @@ public class CachedTileObject extends TileObject {
     }
 
     private boolean isLoadable(Context c) {
-        return toFile(c).exists();
+        return cachedImageFile.exists();
     }
 
-    @Override
-    public Foc toFile(Context c) {
-        return FocAndroid.factory(c, cachedID);
-    }
+
 
 
     @Override
@@ -116,7 +141,7 @@ public class CachedTileObject extends TileObject {
 
             if (
                     mapTile.zoomLevel <= MIN_SAVE_ZOOM_LEVEL &&
-                    id.equals(sourceID) &&
+                            id.equals(sourceID) &&
                             tile.isLoaded()) {
 
                 sc.getBackgroundService().process(save);
@@ -150,7 +175,7 @@ public class CachedTileObject extends TileObject {
 
     @Override
     public void reDownload(ServiceContext sc) {
-        toFile(sc.getContext()).rm();
+        cachedImageFile.rm();
 
         tile.free();
         tile = (TileObject) sc.getCacheService().getObject(sourceID, sourceFactory);
@@ -161,6 +186,7 @@ public class CachedTileObject extends TileObject {
         return (tile != null && tile.isLoaded());
     }
 
+
     @Override
     public long getSize() {
         if (tile != null) return tile.getSize();
@@ -176,6 +202,10 @@ public class CachedTileObject extends TileObject {
         makeOld();
     }
 
+    @Override
+    public Foc getFile() {
+        return cachedImageFile;
+    }
 
 
     public static class Factory extends ObjectHandle.Factory {
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
index 2c73fc94..1a6f0200 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
@@ -2,8 +2,6 @@ package ch.bailu.aat.services.cache;
 
 import android.content.Context;
 
-import java.io.IOException;
-
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxList;
@@ -15,36 +13,37 @@ import ch.bailu.aat.services.editor.EditorInterface;
 import ch.bailu.aat.services.editor.GpxEditor;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.AppDirectory;
-import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
-import ch.bailu.simpleio.foc.FocAbstractName;
 
 public class GpxObjectEditable extends  GpxObject {
 
     private GpxObject currentHandle=NULL;
-    private final Foc real;
-    private final String vid;
+    private final Foc file;
+    //private final String vid;
     
-    public final GpxListEditor editor;
+    private final GpxListEditor editor;
     
     
-    public GpxObjectEditable(String id, String p, ServiceContext sc, int iID) {
-        super(id);
-        real = FocAndroid.factory(sc.getContext(), p);
-        vid = id;
+    public GpxObjectEditable(String _id, Foc _file, ServiceContext sc) {
+        super(_id);
+        file = _file;
+        //vid = _id;
         
-        editor = new GpxListEditor(sc.getContext(), iID);
+        editor = new GpxListEditor(sc.getContext());
         sc.getCacheService().addToBroadcaster(this);        
     }
 
+    public GpxListEditor getEditor() {
+        return editor;
+    }
 
     @Override
     public void onInsert(ServiceContext sc) {
-        ObjectHandle handle = sc.getCacheService().getObject(real.getPath(), new GpxObjectStatic.Factory());
-        
-        if (GpxObject.class.isInstance(handle)) {
-        currentHandle = (GpxObject) handle;
+        ObjectHandle handle = sc.getCacheService().getObject(file.getPath(), new GpxObjectStatic.Factory());
+
+        if (handle instanceof GpxObject) {
+            currentHandle = (GpxObject) handle;
         } else {
             currentHandle = GpxObject.NULL;
         }
@@ -75,7 +74,7 @@ public class GpxObjectEditable extends  GpxObject {
 
     @Override
     public void onChanged(String id, ServiceContext sc) {
-        if (id.equals(real)) {
+        if (id.equals(file.getPath())) {
             editor.loadIntoEditor(currentHandle.getGpxList());
         }
     }
@@ -88,12 +87,10 @@ public class GpxObjectEditable extends  GpxObject {
         private GpxEditor editor = new GpxEditor(GpxList.NULL_ROUTE);
 
         private boolean modified = false;
-        private final int ID;
-        
+
         private final Context context;
 
-        public GpxListEditor(Context c, int iid) {
-            ID=iid;
+        public GpxListEditor(Context c) {
             context=c;
         }
         
@@ -121,7 +118,6 @@ public class GpxObjectEditable extends  GpxObject {
         @Override
         public void add(GpxPoint point) {
             editor.insertNode(point);
-            //AppBroadcaster.broadcast(context, AppBroadcaster.REQUEST_ELEVATION_UPDATE, vid);
             modified(true);
         }
 
@@ -162,7 +158,7 @@ public class GpxObjectEditable extends  GpxObject {
             setVisibleTrackPoint(editor.getSelectedPoint());
             setVisibleTrackSegment(editor.getList().getDelta());
 
-            AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE, vid);
+            AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE, getID());
         }
 
         @Override
@@ -182,13 +178,11 @@ public class GpxObjectEditable extends  GpxObject {
         @Override
         public void save() {
             try {
-                final Foc file = real;
-
                 new GpxListWriter(editor.getList(),file).close();
                 modified=false;
                 
-                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK, real.getPath(), vid);
-            } catch (IOException e) {
+                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK, file.getPath(), getID());
+            } catch (Exception e) {
                 AppLog.e(context, this, e);
             }    
         }
@@ -202,7 +196,7 @@ public class GpxObjectEditable extends  GpxObject {
         
         @Override
         public void saveAs() {
-            String prefix = AppDirectory.parsePrefix(real);
+            String prefix = AppDirectory.parsePrefix(file);
 
             try {
                 final Foc file =
@@ -213,8 +207,8 @@ public class GpxObjectEditable extends  GpxObject {
                 
                 new GpxListWriter(editor.getList(),file).close();
                 
-                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK, file.toString(), vid);
-            } catch (IOException e) {
+                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK, file.getPath(), getID());
+            } catch (Exception e) {
                 AppLog.e(context, this, e);
             }
         }
@@ -233,7 +227,7 @@ public class GpxObjectEditable extends  GpxObject {
 
         @Override
         public Foc getFile() {
-            return new FocVID();
+            return file;// new FocVID();
         }
 
         @Override
@@ -251,13 +245,11 @@ public class GpxObjectEditable extends  GpxObject {
 
 
     public static class Factory extends ObjectHandle.Factory {
-        private final int infoID;
-        private final String path;
+        private final Foc file;
         
 
-        public Factory(String p, int iID) {
-            path=p;
-            infoID=iID;
+        public Factory(Foc f) {
+            file=f;
         }
 
 
@@ -265,15 +257,15 @@ public class GpxObjectEditable extends  GpxObject {
 
         @Override
         public ObjectHandle factory(String id, ServiceContext sc) {
-            return new GpxObjectEditable(id,path, sc, infoID);
+            return new GpxObjectEditable(id, file, sc);
         }
 
 
 
     }
     
-    public static ObjectHandle loadEditor(ServiceContext c, String path, int iID) {
-        return c.getCacheService().getObject(getVirtualID(path), new Factory(path, iID));
+    public static ObjectHandle loadEditor(ServiceContext c, Foc file) {
+        return c.getCacheService().getObject(getVirtualID(file.getPath()), new Factory(file));
     }
 
     private static String getVirtualID(String cID) {
@@ -286,11 +278,11 @@ public class GpxObjectEditable extends  GpxObject {
         return editor.getGpxList();
     }
 
-
+/*
     private class FocVID extends FocAbstractName {
         @Override
         public String getName() {
-            return real.getName();
+            return file.getName();
         }
 
         @Override
@@ -300,7 +292,10 @@ public class GpxObjectEditable extends  GpxObject {
 
         @Override
         public String getPathName() {
-            return real.getPathName();
+            return file.getPathName();
         }
+
+
     }
+    */
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
index d85b0940..3f50e1c2 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
@@ -23,6 +23,7 @@ import ch.bailu.aat.services.dem.tile.ElevationProvider;
 import ch.bailu.aat.services.dem.updater.ElevationUpdaterClient;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient {
     
@@ -30,11 +31,15 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
     private GpxList gpxList=new GpxList(GpxType.TRK, new MaxSpeed.Samples());
 
     private boolean readyAndLoaded = false;
+
+    private final Foc file;
     
     
     public GpxObjectStatic(String id, ServiceContext sc) {
         super(id);
         sc.getCacheService().addToBroadcaster(this);
+
+        file = FocAndroid.factory(sc.getContext(), id);
     }
 
     
@@ -42,10 +47,15 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
     public void onInsert(ServiceContext sc) {
         reload(sc);
     }
-    
+
+
+    @Override
+    public Foc getFile() {
+        return file;
+    }
 
     private void reload(final ServiceContext sc) {
-        final FileHandle f = new FileHandle(toString()) {
+        final FileHandle f = new FileHandle(file) {
 
 
             @Override
@@ -54,15 +64,12 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
 
                 if (sc.lock()) {
                     ObjectHandle handle =
-                            sc.getCacheService().getObject(GpxObjectStatic.this.toString());
+                            sc.getCacheService().getObject(getID());
                     try {
                         if (handle instanceof GpxObjectStatic) {
 
-                            final Context c = sc.getContext();
-                            final String id = toString();
-
                             GpxListReader reader =
-                                    new GpxListReader(this, FocAndroid.factory(c, id));
+                                    new GpxListReader(file);
                             if (canContinue()) {
                                 gpxList = reader.getGpxList();
                                 readyAndLoaded = true;
@@ -82,8 +89,8 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
 
             @Override
             public void broadcast(Context context) {
-                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE, GpxObjectStatic.this.toString());
-                AppBroadcaster.broadcast(context, AppBroadcaster.REQUEST_ELEVATION_UPDATE, GpxObjectStatic.this.toString());
+                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE, getID());
+                AppBroadcaster.broadcast(context, AppBroadcaster.REQUEST_ELEVATION_UPDATE, getID());
             }
         };
         sc.getBackgroundService().load(f);
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ImageObject.java b/app/src/main/java/ch/bailu/aat/services/cache/ImageObject.java
index 6e78e907..9f890e61 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ImageObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ImageObject.java
@@ -5,11 +5,10 @@ import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 
-import java.io.File;
-
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.graphic.SyncBitmap;
 import ch.bailu.simpleio.foc.Foc;
 
@@ -18,14 +17,19 @@ public class ImageObject extends ImageObjectAbstract {
     
     private final SyncBitmap bitmap=new SyncBitmap();
 
+    private final Foc imageFile;
 
     private ImageObject() {
-        super("");
+        this(FocAndroid.NULL);
     }
     
-    public ImageObject(String id) {
-        super(id);
+    public ImageObject(Foc id) {
+        super(id.getPath());
+        imageFile = id;
     }
+
+
+
     
     @Override
     public void onInsert(ServiceContext sc){
@@ -43,7 +47,7 @@ public class ImageObject extends ImageObjectAbstract {
 
 
     private void load(final ServiceContext sc) {
-        FileHandle l=new FileHandle(toString()) {
+        FileHandle l=new FileHandle(imageFile) {
 
             @Override
             public long bgOnProcess() {
@@ -57,9 +61,7 @@ public class ImageObject extends ImageObjectAbstract {
                         if (handle instanceof ImageObject) {
                             ImageObject self = (ImageObject) handle;
 
-                            Foc file = self.toFile(sc.getContext());
-
-                            bitmap.set(file);
+                            bitmap.set(self.imageFile);
                             size =  bitmap.getSize();
                         }
                         handle.free();
@@ -106,7 +108,7 @@ public class ImageObject extends ImageObjectAbstract {
     public static class Factory extends ObjectHandle.Factory {
         @Override
         public ObjectHandle factory(String id, ServiceContext sc) {
-            return new ImageObject(id);
+            return new ImageObject(FocAndroid.factory(sc.getContext(),id));
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
index 96783401..71830ac7 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/LoadableBitmapTileObject.java
@@ -6,36 +6,39 @@ import android.graphics.Bitmap;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
-import java.io.File;
-
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
+import ch.bailu.simpleio.foc.Foc;
 
 public class LoadableBitmapTileObject extends TileObject {
 
     private final Tile tile;
-    private final FileHandle load;
 
 
     private final SyncTileBitmap bitmap = new SyncTileBitmap();
 
+    private final FileHandle load;
+    private final Foc file;
+
+
 
-    public LoadableBitmapTileObject(String id, ServiceContext cs, Tile t, final boolean transparent) {
+
+    public LoadableBitmapTileObject(String id, ServiceContext sc, Tile t, final boolean transparent) {
         super(id);
+
+        file = FocAndroid.factory(sc.getContext(), id);
         tile = t;
 
-        cs.getCacheService().addToBroadcaster(this);
+        sc.getCacheService().addToBroadcaster(this);
 
-        load = new FileHandle(id) {
+        load = new FileHandle(file) {
 
             @Override
             public long bgOnProcess() {
-
-                File file = new File(toString());
                 bitmap.set(file, TILE_SIZE, transparent);
-
                 return bitmap.getSize();
             }
 
@@ -80,8 +83,6 @@ public class LoadableBitmapTileObject extends TileObject {
 
 
     private boolean isLoadable() {
-        File file = new File(toString());
-
         return file.isFile() && file.canRead();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java b/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
index 8e0cc01a..c92d16bb 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
@@ -4,13 +4,15 @@ import android.content.Context;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 
 
 public abstract class ObjectHandle implements ObjectBroadcastReceiver{
     public static final int MIN_SIZE=10;
 
-    public static final ObjectHandle NULL = new ObjectHandle(FocAndroid.NULL){
+    public static final ObjectHandle NULL = new ObjectHandle(""){
 
         @Override
         public long getSize() {
@@ -24,24 +26,30 @@ public abstract class ObjectHandle implements ObjectBroadcastReceiver{
         public void onChanged(String id, ServiceContext cs) {}
     };
 
-    private final Foc ID;
+    private final String ID;
     
     private long accessTime=System.currentTimeMillis();
     private int lock=0;
 
     
-    public ObjectHandle(Context c, String id) {
-        this(FocAndroid.factory(c, id));
-    }
-    public ObjectHandle(Foc id) {
-        ID = id;
+    public ObjectHandle(String id) {
+        ID=id;
     }
 
     @Override
     public String toString() {
-        return ID.getPath();
+        return ID;
+    }
+
+
+    public String getID() {
+        return ID;
+    }
+
+    public Foc getFile() {
+        AppLog.d(this, "WARNING: default implementation of getFile() called!");
+        return new FocFile(ID);
     }
-    public Foc toFile(Context c) {return ID;}
     
     
     public boolean isLocked() {
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
index 06a5c847..b9dec7f3 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
@@ -6,6 +6,7 @@ import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public abstract class TileObject extends ObjectHandle {
     public static final int TILE_SIZE=256;
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java b/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
index 2d107b10..8dd06e7f 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
@@ -13,6 +13,7 @@ import ch.bailu.aat.services.dem.tile.Dem3Tile;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.Timer;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
 
 public class Dem3TileLoader implements Closeable {
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java b/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
index 4ad849b9..d99b2ed7 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
@@ -10,6 +10,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
+import java.util.zip.ZipInputStream;
 
 import ch.bailu.aat.coordinates.SrtmCoordinates;
 import ch.bailu.aat.services.ServiceContext;
@@ -20,19 +21,21 @@ import ch.bailu.aat.services.dem.tile.DemGeoToIndex;
 import ch.bailu.aat.services.dem.tile.DemProvider;
 import ch.bailu.aat.services.dem.tile.ElevationProvider;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class Dem3Tile implements ElevationProvider, DemProvider {
-    
-    /** 
+
+    /**
      * SRTM
-     * 
-     *  
+     *
+     *
      * The Shuttle Radar Topography Mission (SRTM) (Wikipedia article) is a NASA mission conducted in 2000 
      * to obtain elevation data for most of the world. It is the current dataset of choice for digital 
      * elevation model data (DEM) since it has a fairly high resolution (1 arc-second, or around 25 meters, 
      * for the United States, and 3 arc-second, or around 90 meters at the equator, for the rest of the world),
      * has near-global coverage (from 56°S to 60°N), and is in the public domain.
-     * 
+     *
      * Many OpenStreetMap-based projects use SRTM data to provide topography information, relief shading,
      * and elevation profiles for trails and routes. An example is the OpenCycleMap rendering which shows contours
      * and relief shading derived from SRTM data.  
@@ -40,26 +43,26 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
      *
      *
      * Format
-     * 
+     *
      * The official 3-arc-second and 1-arc-second data for versions 2.1 and 3.0 are divided into 1°×1° data tiles. 
      * The tiles are distributed as zip files containing HGT files labeled with the coordinate of the southwest cell. 
      * For example, the file N20E100.hgt contains data from 20°N to 21°N and from 100°E to 101°E inclusive.
-     * 
+     *
      * The HGT files have a very simple format. Each file is a series of 16-bit integers giving the height of each cell 
      * in meters arranged from west to east and then north to south. Each 3-arc-second data tile has 144201 integers 
      * representing a 1201×1201 grid, while each 1-arc-second data tile has 12967201 integers representing a 3601×3601 grid. 
      * The outermost rows and columns of each tile overlap with the corresponding rows and columns of adjacent tiles.
-     * 
+     *
      * Recent versions of GDAL support the HGT files natively (as long as you don't rename the files; the names they
      * come with are the source of their georeferencing), but the srtm_generate_hdr.sh script can also be used to create
      * a GeoTIFF from the HGT zip files. (Note that the script has SRTM3 values hardcoded; if you're using SRTM1, you'll
      * have to change the number of rows and columns to 3601, the number of row bytes to 7202, and the pixel dimensions 
      * to 0.000277777777778.)
-     * 
-     * 
+     *
+     *
      * Source: http://wiki.openstreetmap.org/wiki/SRTM
      */
-    
+
     public static final DemProvider NULL = new DemProvider() {
 
         @Override
@@ -86,84 +89,84 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
         public boolean inverseLongitude() {
             return false;
         }
-        
+
     };
-    
+
     private static final int DEM3_BUFFER_DIM=1201;
     private static final int DEM3_BUFFER_OFFSET=1;
     private static final DemDimension DIMENSION=
             new DemDimension(DEM3_BUFFER_DIM, DEM3_BUFFER_OFFSET);
-    
+
     private final byte data[]= new byte[DEM3_BUFFER_DIM*DEM3_BUFFER_DIM*2];
-    
+
     private ProcessHandle handle=FileHandle.NULL;
-    
+
     private int lock=0;
     private boolean loading=false;
-    
-    
+
+
     private long stamp=System.currentTimeMillis();
-    
+
     private final DemGeoToIndex toIndex = new DemGeoToIndex(DIMENSION);
-    
+
     private SrtmCoordinates coordinates = new SrtmCoordinates(0,0);
-    
+
     public long getTimeStamp() {
         return stamp;
     }
-    
-    
+
+
     public synchronized void lock() {
         lock++;
     }
-    
-    
+
+
     public synchronized void free() {
         lock--;
     }
-    
-    
+
+
     private boolean isLocked() {
         return lock != 0;
     }
-    
+
     public boolean isProcessed() {
 
         return (!loading && !isLocked());
     }
-    
-    
+
+
     public boolean isLoading() {
         return loading;
     }
     public boolean isLoaded() {
         return !loading;
     }
-    
+
     @Override
     public String toString() {
         return coordinates.toString();
     }
 
-    
+
     @Override
     public int hashCode() {
         return coordinates.hashCode();
     }
 
-    
-    
+
+
     public void load(ServiceContext cs, SrtmCoordinates c) {
         if (!isLocked()) {
             coordinates=c;
             reload(cs);
         }
     }
-    
+
 
     public void reload(ServiceContext cs) {
         handle.stopLoading();
-        handle = new SRTMGL3Loader(coordinates.toFile(cs.getContext()).toString());
+        handle = new SRTMGL3Loader(coordinates.toFile(cs.getContext()));
         loading=true;
         stamp=System.currentTimeMillis();
         cs.getBackgroundService().load(handle);
@@ -171,46 +174,39 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
 
     private class SRTMGL3Loader extends FileHandle {
 
-        public SRTMGL3Loader(String f) {
+        public SRTMGL3Loader(Foc f) {
             super(f);
         }
 
         @Override
         public long bgOnProcess() {
-            InputStream input=null;
-            
+            ZipInputStream zip=null;
+
             try {
-                ZipFile zip= new ZipFile(toString());
-                
-                if (zip.size()>0) {
-                    int total=0;
+                zip = new ZipInputStream(getFile().openR());
+
+
 
-                    final ZipEntry entry = zip.entries().nextElement();
-                    input = new BufferedInputStream(zip.getInputStream(entry));
-                    
-                    int count;
+                int total=0;
 
-                    do {
-                        count = input.read(data, total, data.length-total);
-                        total += count;
+                zip.getNextEntry();
 
-                    } while(count > 0 && total < data.length && canContinue()) ;
-                    
-                }
-                zip.close();
+                int count;
 
+                do {
+                    count = zip.read(data, total, data.length-total);
+                    total += count;
 
-            } catch (IOException e) {
+                } while(count > 0 && total < data.length && canContinue()) ;
+
+
+            } catch (Exception e) {
                 for (int i=0; i<data.length; i++) data[i]=0;
+                AppLog.d(getFile(), "ERROR: " + e.toString());
             } finally {
-                if (input!=null)
-                    try {
-                        input.close();
-                    } catch (IOException e) {
-                        e.printStackTrace();
-                    }
-                
+                Foc.close(zip);
             }
+
             return data.length;
         }
 
@@ -218,7 +214,7 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
         public void broadcast(Context context) {
             loading=false;
             AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE, toString());
-            
+
         }
     }
 
@@ -229,9 +225,9 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
     }
 
 
-    
-    
-    
+
+
+
     @Override
     public short getElevation(int laE6, int loE6) {
         return getElevation(toIndex.toPos(laE6, loE6));
@@ -240,15 +236,15 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
     @Override
     public short getElevation(int index) {
         index = index *2;
-        
+
         final short x = (short) ((data[index] << 8) | (data[index+1]&0xFF));
-        return x; 
+        return x;
     }
 
 
     private final static double REF_LO_1=7d;
     private final static double REF_LO_2=8d;
-    
+
     @Override
     public float getCellsize() {
 
@@ -256,14 +252,14 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
         final float fdistance = (float) LatLongUtils.sphericalDistance(
                 new LatLong(coordinates.getLatitudeE6()/1e6, REF_LO_1),
                 new LatLong(coordinates.getLatitudeE6()/1e6, REF_LO_2));
-        
+
         float idistance = fdistance / (DIMENSION.DIM-DIMENSION.OFFSET);
 
         if (idistance==0) idistance=50;
-        
+
         return idistance;
     }
-   
+
     @Override
     public boolean inverseLatitude() {
         return (coordinates.getLatitudeE6()>0);
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
index 9df43820..3600eb6c 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
@@ -87,14 +87,8 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
     public void deleteEntry(Foc file)  {
-        Foc dir = sdirectory.getValueAsFile();
-
-        if (dir.canWrite()) {
-            database.deleteEntry(file);
-            rescan(dir);
-        } else {
-            AFile.logErrorReadOnly(getContext(), dir);
-        }
+        database.deleteEntry(file);
+        rescan();
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java b/app/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java
index 6e926fe2..0aaeb93b 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java
@@ -17,7 +17,7 @@ public class SummaryConfig {
     public static Foc getWriteableSummaryDir(Context context, Foc dir) {
         Foc summaryDir;
 
-        if (dir.mkdirs() && dir.canWrite()) {
+        if (dir instanceof FocFile && dir.mkdirs() && dir.canWrite()) {
             summaryDir = dir.child(AppDirectory.DIR_CACHE);
 
         } else {
diff --git a/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java b/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
index b7d2b868..7402416f 100644
--- a/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
+++ b/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
@@ -35,7 +35,7 @@ public class EditorHelper {
 
 
     public void onResume() {
-        ObjectHandle new_handle = GpxObjectEditable.loadEditor(scontext, file.getPath(), IID);
+        ObjectHandle new_handle = GpxObjectEditable.loadEditor(scontext, file);
 
         handle.free();
         handle = new_handle;
@@ -55,8 +55,8 @@ public class EditorHelper {
     }
 
     public GpxInformation getInformation() {
-        if (GpxObjectEditable.class.isInstance(handle)) {
-            return ((GpxObjectEditable)handle).editor;
+        if (handle instanceof GpxObjectEditable) {
+            return ((GpxObjectEditable)handle).getEditor();
         }
         return GpxInformation.NULL;
     }
@@ -64,7 +64,7 @@ public class EditorHelper {
 
     public EditorInterface getEditor() {
         if (GpxObjectEditable.class.isInstance(handle)) {
-            return ((GpxObjectEditable)handle).editor;
+            return ((GpxObjectEditable)handle).getEditor();
         }
         return EditorInterface.NULL;
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
index 4810d72b..4b699b19 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
@@ -43,7 +43,7 @@ public class MockLocation extends LocationStackChainedItem implements Runnable{
             timer.kick();
             sendState(StateID.WAIT);
 
-        } catch (IOException e) {
+        } catch (Exception e) {
             AppLog.e(c, e);
             sendState(StateID.OFF);
         }
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
index 5a122828..41e9f42b 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
@@ -28,7 +28,7 @@ public class TrackLogger extends Logger {
     final private Context context;
 
 
-    public TrackLogger(Context c, int preset) throws IOException {
+    public TrackLogger(Context c, int preset) throws IOException, SecurityException {
         context=c;
         presetIndex=preset;
 
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackerInternals.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackerInternals.java
index 3235dad5..fac2a2e6 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackerInternals.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackerInternals.java
@@ -48,7 +48,7 @@ implements OnSharedPreferenceChangeListener, Closeable {
         try {
             logger = createLogger();
             logger.close();
-        } catch (IOException e) {}
+        } catch (Exception e) {}
         logger = Logger.createNullLogger();
 
         state = new OffState(this);
@@ -89,7 +89,7 @@ implements OnSharedPreferenceChangeListener, Closeable {
 
  
     
-    public  TrackLogger createLogger() throws IOException {
+    public  TrackLogger createLogger() throws IOException, SecurityException {
         return new TrackLogger(scontext.getContext(),new SolidPreset(scontext.getContext()).getIndex());
     }
     
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
index 601e7b22..f1307ec9 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
@@ -14,36 +14,36 @@ public class AppDirectory  {
 
     //////////////////////////////////////////////////////////////////////////////////////
     public static Foc getDataDirectory(Context c, String sub) {
-        return new SolidDataDirectory(c).getValueAsFile().child(sub);
+        return new SolidDataDirectory(c).getValueAsFile().descendant(sub);
     }
 
-    public static final String DIR_AAT_DATA = "aat_data/";
-    public static final String DIR_TILES = "tiles/";
-    public static final String DIR_TILES_OSMDROID = "osmdroid/tiles/";
+    public static final String DIR_AAT_DATA = "aat_data";
+    public static final String DIR_TILES = "tiles";
+    public static final String DIR_TILES_OSMDROID = "osmdroid/tiles";
 
     
-    public static final String DIR_LOG = "log/";
+    public static final String DIR_LOG = "log";
     public static final String FILE_LOG = "log.gpx";
     public static Foc getLogFile(Context context) {
         return getDataDirectory(context, DIR_LOG).child(FILE_LOG);
     }
     
     
-    public static final String DIR_OVERLAY = "overlay/";
-    public static final String DIR_IMPORT = "import/";
+    public static final String DIR_OVERLAY = "overlay";
+    public static final String DIR_IMPORT = "import";
     
-    public static final String DIR_NOMINATIM = "nominatim/";
+    public static final String DIR_NOMINATIM = "nominatim";
 
-    public static final String DIR_OVERPASS = "overpass/";
+    public static final String DIR_OVERPASS = "overpass";
 
     
-    public static final String DIR_TEST = "test/";
+    public static final String DIR_TEST = "test";
     
     
     
 
     
-    public static final String DIR_CACHE = "cache/";
+    public static final String DIR_CACHE = "cache";
     public static final String FILE_CACHE_DB="summary.db";
     
 
@@ -62,7 +62,7 @@ public class AppDirectory  {
     
     /////////////////////////////////////////////////////////////////////////////////////////////////
     public static Foc getTileFile(String tilePath, Context context) {
-        return getTileCacheDirectory(context).child(tilePath);
+        return getTileCacheDirectory(context).descendant(tilePath);
     }
 
 
@@ -82,14 +82,10 @@ public class AppDirectory  {
         return getDataDirectory(c,getPresetPrefix(i));
     }
     static private String getPresetPrefix(int i) {
-        return PRESET_PREFIX + i+ "/";
+        return PRESET_PREFIX + i;
     }
     
     
-    public static Foc getTrackListCacheDb(Context c, int i) {
-        return getDataDirectory(c, getPresetPrefix(i)+ DIR_CACHE).child(FILE_CACHE_DB);
-    }
-
 
 
     
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java b/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
index 9181f85a..ffe17698 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
@@ -20,24 +20,25 @@ import ch.bailu.simpleio.foc.Foc;
 public class FileAction   {
 
     public static void rescanDirectory(ServiceContext scontext, Foc file) {
-        if (isParentActiveAndWriteable(scontext.getContext(), file)) {
+        if (isParentActive(scontext.getContext(), file)) {
             scontext.getDirectoryService().rescan();
         }
     }
 
 
     public static void reloadPreview(ServiceContext scontext, Foc file) {
-        if (isParentActiveAndWriteable(scontext.getContext(), file)) {
+        if (isParentActive(scontext.getContext(), file)) {
             scontext.getDirectoryService().deleteEntry(file);
         }
     }
 
 
-    public static boolean isParentActiveAndWriteable(Context context, Foc file) {
+    public static boolean isParentActive(Context context, Foc file) {
         final Foc currentDir = new SolidDirectoryQuery(context).getValueAsFile();
         final Foc dir = file.parent();
 
-        return dir != null && dir.canWrite() && dir.equals(currentDir);
+
+        return dir != null && dir.equals(currentDir);
     }
 
 
@@ -54,7 +55,7 @@ public class FileAction   {
                 }
             }.displayYesNoDialog(activity,
                     scontext.getContext().getString(R.string.file_delete_ask),
-                    file.toString());
+                    file.getPathName());
         } else {
             AFile.logErrorReadOnly(scontext.getContext(), file);
         }
@@ -118,7 +119,7 @@ public class FileAction   {
             AFile.logErrorExists(context, dest);
         } else {
             src.cp(dest);
-            AppLog.i(context, dest.toString());
+            AppLog.i(context, dest.getPathName());
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
index ef92ecea..679d70df 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
@@ -1,12 +1,8 @@
 package ch.bailu.aat.util.fs.foc;
 
-import android.annotation.TargetApi;
 import android.database.Cursor;
-import android.os.Build;
 import android.provider.DocumentsContract.Document;
-import android.provider.OpenableColumns;
 
-import ch.bailu.aat.description.DateDescription;
 import ch.bailu.aat.util.ui.AppLog;
 
 
@@ -17,6 +13,11 @@ public class DocumentData  {
     final public int flags;
     final public long lastModified;
     final public long size;
+    final public boolean exists;
+
+    public final static String TREE= "tree";
+    public final static String DOCUMENT="document";
+    public final static String UNKNOWN="unknown";
 
     final String type;
 
@@ -28,7 +29,8 @@ public class DocumentData  {
         lastModified=System.currentTimeMillis();
         flags = 0;
         size = 0;
-        type = FocContent.UNKNOWN;
+        type = UNKNOWN;
+        exists=false;
     }
 
     public DocumentData(Cursor cursor) {
@@ -39,10 +41,10 @@ public class DocumentData  {
         flags = cursor.getInt(index(cursor, Document.COLUMN_FLAGS));
         size = cursor.getLong(index(cursor, Document.COLUMN_SIZE));
 
-        if (mimeType.equals(Document.MIME_TYPE_DIR)) type = FocContent.TREE;
-        else type = FocContent.DOCUMENT;
-
+        if (mimeType.equals(Document.MIME_TYPE_DIR)) type = TREE;
+        else type = DOCUMENT;
 
+        exists=true;
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java
index 2a9f4188..22fb66fc 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.util.fs.foc;
 
+import ch.bailu.aat.util.ui.AppLog;
+
 public class DocumentId {
     final private String documentId;
 
@@ -24,14 +26,21 @@ public class DocumentId {
 
 
     public DocumentId child(String child) {
-        if (child.length() == 0)
+
+        if (child.length() == 0) {
             return this;
+        }
 
-        if (child.charAt(0) == '/')
-            return new DocumentId(documentId + child);
+        if (child.charAt(child.length()-1) == '/') {
+            AppLog.d(this, "WARNING: " + child + " ends with \'/\'");
+            return child(child.substring(0,child.length()-1));
+        }
 
-        else
+        if (child.charAt(0) == '/') {
+            return new DocumentId(documentId + child);
+        } else {
             return new DocumentId(documentId + "/" + child);
+        }
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
index fd6293c9..2db22145 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
@@ -72,10 +72,10 @@ public class FocAndroid {
                 Uri permission = uri;
                 DocumentId documentId = new DocumentId(Uri.decode(segments.get(1)));
 
-                if (FocContent.TREE.equals(segments.get(0)))
-                    return new FocContent(r, permission, documentId, FocContent.TREE);
-                else if (FocContent.DOCUMENT.equals(segments.get(0)))
-                    return new FocContent(r, permission, documentId, FocContent.DOCUMENT);
+                if (DocumentData.TREE.equals(segments.get(0)))
+                    return new FocContent(r, permission, documentId);
+                else if (DocumentData.DOCUMENT.equals(segments.get(0)))
+                    return new FocContent(r, permission, documentId);
 
             } else if (segments.size() == 4) {
                 Uri permission =
@@ -89,7 +89,7 @@ public class FocAndroid {
                 DocumentId documentId = new DocumentId(Uri.decode(segments.get(3)));
 
 
-                Foc foc =  new FocContent(r, permission, documentId, FocContent.UNKNOWN);
+                Foc foc =  new FocContent(r, permission, documentId);
 
                 /*
                 AppLog.d(foc, foc.getName());
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
index 0ab5948a..8718f561 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
@@ -26,13 +26,8 @@ import ch.bailu.simpleio.foc.Foc;
  *
  */
 
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
+@TargetApi(21)
 public class FocContent extends Foc {
-    public final static String TREE= "tree";
-    public final static String DOCUMENT="document";
-    public final static String UNKNOWN="unknown";
-
-    private String type;
     private DocumentData data = null;
 
     private final ContentResolver resolver;
@@ -43,24 +38,21 @@ public class FocContent extends Foc {
 
     // called from parent
     private FocContent(ContentResolver r, LazyUris u, DocumentData d) {
-        this (r, u, d.type);
+        this (r, u);
         data = d;
     }
 
 
     // called from child
-    private FocContent(ContentResolver r, LazyUris u, String t) {
+    private FocContent(ContentResolver r, LazyUris u) {
         resolver = r;
         uris = u;
-        type = t;
     }
 
 
     // called from factory
-    public FocContent(ContentResolver r, Uri per, DocumentId id , String t) {
-        type = t;
+    public FocContent(ContentResolver r, Uri per, DocumentId id) {
         resolver = r;
-
         uris = new LazyUris(per, id);
     }
 
@@ -69,17 +61,12 @@ public class FocContent extends Foc {
 
     @Override
     public boolean move(Foc dest) throws IOException, SecurityException {
-        boolean ok = false;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&
-                dest instanceof FocContent) {
-            FocContent target = (FocContent) dest;
-
-            ok = target.uris.hasParent()
-                    && uris.hasParent()
-                    && (DocumentsContract.renameDocument(resolver, uris.getDocument(), target.getName()) != null)
-                    && (DocumentsContract.moveDocument(resolver, uris.getDocument(), uris.getParent(), target.uris.getParent()) != null);
 
+        boolean ok = false;
 
+        if (dest.parent().equals(parent())) {
+            ok = dest.getName().equals(getName());
+            ok = ok || (DocumentsContract.renameDocument(resolver, uris.getDocument(), dest.getName()) != null);
         }
         return ok || super.move(dest);
 
@@ -87,26 +74,33 @@ public class FocContent extends Foc {
 
     @Override
     public boolean remove() throws IOException, SecurityException {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            return DocumentsContract.deleteDocument(resolver, uris.getDocument());
-        }
-        return false;
+        return DocumentsContract.deleteDocument(resolver, uris.getDocument());
     }
 
     @Override
     public boolean mkdir() {
-        return touch(DocumentsContract.Document.MIME_TYPE_DIR);
+        return createPath(DocumentsContract.Document.MIME_TYPE_DIR) && isDir();
     }
 
 
-    private boolean touch(String mimeType) {
-        Foc parent = parent();
+    private boolean createPath(String mimeType) {
+        return  (exists() || (mkParents() && createDocument(mimeType)));
+    }
+
+
+    private boolean createDocument(String mimeType) {
+        if (exists()) {
+            return true;
+
+        } else {
+            update();
 
-        return (parent != null && parent.mkdirs() && DocumentsContract.createDocument(
-                        resolver,
-                        uris.getParent(),
-                        mimeType,
-                        getName()) != null);
+            return DocumentsContract.createDocument(
+                    resolver,
+                    uris.getParent(),
+                    mimeType,
+                    getName()) != null;
+        }
     }
 
 
@@ -118,14 +112,14 @@ public class FocContent extends Foc {
 
     @Override
     public Foc parent() {
-        if (uris.hasParent()) return new FocContent(resolver, uris.parent(), TREE);
+        if (uris.hasParent()) return new FocContent(resolver, uris.parent());
         return null;
     }
 
 
     @Override
     public Foc child(String name) {
-        return new FocContent(resolver, uris.child(uris.getDocumentId().child(name)), UNKNOWN);
+        return new FocContent(resolver, uris.child(uris.getDocumentId().child(name)));
     }
 
 
@@ -141,8 +135,6 @@ public class FocContent extends Foc {
         try {
             cursor = resolver.query(uris.getChild(),null, null, null, null);
             if (cursor != null && cursor.moveToFirst()) {
-                type = TREE;
-
                 do {
                     DocumentData data = new DocumentData(cursor);
                     exec.execute(new FocContent(resolver, uris.child(new DocumentId(data.documentId)), data));
@@ -180,32 +172,33 @@ public class FocContent extends Foc {
 
     @Override
     public boolean isDir() {
-        if (type == UNKNOWN) querySelf();
-        return type == TREE;
+        querySelf();
+        return data.type == DocumentData.TREE;
     }
 
     @Override
     public boolean isFile() {
-        if (type == UNKNOWN) querySelf();
-        return type == DOCUMENT;
+        querySelf();
+        return data.type == DocumentData.DOCUMENT;
     }
 
     @Override
     public boolean exists() {
         querySelf();
-        return type != UNKNOWN;
+        return data.exists;
     }
 
     @Override
     public boolean canRead() {
         querySelf();
-        return exists();
+        return data.exists;
     }
 
     @Override
     public boolean canWrite() {
         querySelf();
-        return (data.flags & DocumentsContract.Document.FLAG_SUPPORTS_WRITE) == data.flags;
+        return (data.flags & DocumentsContract.Document.FLAG_SUPPORTS_WRITE)
+                == DocumentsContract.Document.FLAG_SUPPORTS_WRITE;
     }
 
     @Override
@@ -237,18 +230,18 @@ public class FocContent extends Foc {
 
     @Override
     public OutputStream openW() throws IOException, SecurityException {
-        if (touch(MimeType.fromName(getName())))
-            return resolver.openOutputStream(uris.getDocument());
+        createPath(MimeType.fromName(getName()));
 
-        return null;
+        return resolver.openOutputStream(uris.getDocument());
     }
 
-
-    private void querySelf() {
+    public void update() {
+        data = null;
+    }
 
 
+    private void querySelf() {
         if (data != null) return;
-        AppLog.d(this, "querySelf() " + uris.getDocumentId());
 
         Cursor cursor = null;
         try {
@@ -256,7 +249,6 @@ public class FocContent extends Foc {
             if (cursor != null && cursor.moveToFirst()) {
                 data = new DocumentData(cursor);
 
-                type = data.type;
             } else {
                 if (cursor ==  null) AppLog.d(this, "null cursor");
                 AppLog.d(this, uris.getDocument().toString());
@@ -265,7 +257,7 @@ public class FocContent extends Foc {
             }
 
         } catch(Exception e) {
-            AppLog.d(this, e.toString());
+            //AppLog.d(this, e.toString());
             data = new DocumentData(uris.getDocumentId().toString());
         }
         Foc.close(cursor);
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java
index 42dd3ff2..7514a617 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java
@@ -5,6 +5,8 @@ import android.net.Uri;
 import android.os.Build;
 import android.provider.DocumentsContract;
 
+import ch.bailu.aat.util.ui.AppLog;
+
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LazyUris {
     private final Uri permission;
@@ -71,4 +73,14 @@ public class LazyUris {
     public boolean hasParent() {
         return (getParentId() != getDocumentId());
     }
+
+    public void log() {
+
+        AppLog.d(this, "Document: " + getDocument());
+        AppLog.d(this, "Parent: " + getParent());
+        AppLog.d(this, "Child: " + getChild());
+        AppLog.d(this, "ParentId: " + getParentId());
+        AppLog.d(this, "DocumentId: " + getDocumentId());
+
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/MimeType.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/MimeType.java
index d4c86238..17269520 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/MimeType.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/MimeType.java
@@ -1,7 +1,5 @@
 package ch.bailu.aat.util.fs.foc;
 
-import java.io.File;
-
 public class MimeType {
 
     public static String fromName(String name) {
@@ -9,10 +7,15 @@ public class MimeType {
 
         if ("gpx".equals(suffix)) {
             return "application/gpx+xml";
+
         } else if ("osm".equals(suffix)) {
             return "application/xml";
+
         } else if ("png".equals(suffix)) {
             return "image/png";
+
+        } else if ("zip".equals(suffix)) {
+            return "application/zip";
         }
         return "text/plain";
     }
diff --git a/app/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java b/app/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
index 92707056..4b34bcdb 100644
--- a/app/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
+++ b/app/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
@@ -12,16 +12,14 @@ import com.caverock.androidsvg.SVG;
 
 import org.mapsforge.core.graphics.CorruptedInputStreamException;
 import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.util.IOUtils;
 import org.mapsforge.map.android.graphics.AndroidGraphicFactory;
 
 import java.io.Closeable;
-import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
 import ch.bailu.aat.services.cache.ObjectHandle;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SyncTileBitmap implements Closeable {
     private TileBitmap bitmap = null;
@@ -61,23 +59,23 @@ public class SyncTileBitmap implements Closeable {
 
 
 
-    public static TileBitmap load(File file, int size, boolean transparent) {
+    public static TileBitmap load(Foc file, int size, boolean transparent) {
         TileBitmap bitmap;
         InputStream inputStream = null;
         try {
-            inputStream = new FileInputStream(file);
+            inputStream = file.openR();
             bitmap = AndroidGraphicFactory.INSTANCE.createTileBitmap(inputStream, size, transparent);
             bitmap.setTimestamp(file.lastModified());
 
         } catch (CorruptedInputStreamException | IOException e) {
             bitmap = null;
         } finally {
-            IOUtils.closeQuietly(inputStream);
+            Foc.close(inputStream);
         }
         return bitmap;
     }
 
-    public synchronized void set(File file, int size, boolean transparent) {
+    public synchronized void set(Foc file, int size, boolean transparent) {
         set(load(file, size, transparent));
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/TagEditor.java b/app/src/main/java/ch/bailu/aat/views/TagEditor.java
index a7ad820f..773a9a09 100644
--- a/app/src/main/java/ch/bailu/aat/views/TagEditor.java
+++ b/app/src/main/java/ch/bailu/aat/views/TagEditor.java
@@ -73,7 +73,7 @@ public class TagEditor extends EditText {
         try {
             text = TextBackup.read(backup);
             
-        } catch (IOException e) {
+        } catch (Exception e) {
             text = "";
         }
         setText(text);
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
index 24d4cb0c..f21b6286 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
@@ -46,11 +46,9 @@ public abstract class Foc {
 
 
     public abstract boolean mkdir();
-    public boolean mkdirs() {
-        if (exists()) return isDir();
 
-        Foc parent = parent();
-        return parent != null && parent.mkdirs() && mkdir();
+    public boolean mkdirs() {
+        return isDir() || (mkParents() && mkdir());
     }
 
     public boolean mkParents() {
@@ -126,7 +124,23 @@ public abstract class Foc {
         }
     }
 
+
+    public Foc descendant(String path) {
+        Foc descendant = this;
+
+        String[] descendants = path.split("/");
+
+        for (String child : descendants) {
+            descendant = descendant.child(child);
+        }
+
+        return descendant;
+    }
+
+
     public abstract Foc child(String name);
+
+
     public abstract String getName();
 
     public abstract String getPath();
@@ -156,6 +170,9 @@ public abstract class Foc {
     public abstract long length();
     public abstract long lastModified();
 
+    public void update() {};
+
+
     public InputStream openRb() throws IOException, SecurityException {
         InputStream in = openR();
 
@@ -192,6 +209,7 @@ public abstract class Foc {
 
     @Override
     public boolean equals(Object o)  {
+
         return o instanceof Foc && equals(getPath(), ((Foc) o).getPath());
 
     }
@@ -211,4 +229,5 @@ public abstract class Foc {
     public int hashCode() {
         return getPath().hashCode();
     }
+
 }
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
index d7186a2d..a16f379e 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
@@ -148,6 +148,9 @@ public class FocFile extends Foc {
         return file.lastModified();
     }
 
+    @Override
+    public void update() {}
+
 
     @Override
     public InputStream openR() throws IOException {
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java
index 2ef2f5a0..3848e05d 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java
@@ -24,5 +24,10 @@ public class FocName extends FocAbstractName {
         return name;
     }
 
+    @Override
+    public void update() {
+
+    }
+
 
 }
