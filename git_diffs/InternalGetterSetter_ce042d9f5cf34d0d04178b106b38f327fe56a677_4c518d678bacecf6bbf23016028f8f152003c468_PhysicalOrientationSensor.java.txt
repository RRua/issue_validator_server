diff --git a/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java b/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java
new file mode 100644
index 0000000..4e7f8a4
--- /dev/null
+++ b/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java
@@ -0,0 +1,167 @@
+package com.gabm.tapandturn;
+
+import android.app.ActionBar;
+import android.content.pm.ActivityInfo;
+import android.view.WindowManager;
+
+/**
+ * Created by gabm on 23/05/17.
+ */
+
+public class AbsoluteOrientation {
+    public enum Enum {
+        Portrait,
+        Reverse_Portrait,
+        Landscape,
+        Reverse_Landscape
+    }
+
+    public AbsoluteOrientation(Enum valEnum) {
+        _enum = valEnum;
+    }
+
+    public AbsoluteOrientation add(RelativeOrientation.Enum relativeOrientation) {
+        return new AbsoluteOrientation(add(_enum, relativeOrientation));
+    }
+
+    public RelativeOrientation diff(AbsoluteOrientation.Enum to) {
+        return new RelativeOrientation(diff(_enum, to));
+    }
+
+    public boolean equals(AbsoluteOrientation.Enum otherEnum) {
+        return _enum == otherEnum;
+    }
+
+    public boolean equals(AbsoluteOrientation other) {
+        return _enum == other._enum;
+    }
+
+    private static RelativeOrientation.Enum diff(AbsoluteOrientation.Enum from, AbsoluteOrientation.Enum to) {
+        if (from == to)
+            return RelativeOrientation.Enum.None0;
+
+        if (from == AbsoluteOrientation.Enum.Portrait) {
+            if (to == AbsoluteOrientation.Enum.Landscape)
+                return RelativeOrientation.Enum.Left90;
+
+            if (to == AbsoluteOrientation.Enum.Reverse_Landscape)
+                return RelativeOrientation.Enum.Right90;
+
+            if (to == AbsoluteOrientation.Enum.Reverse_Portrait)
+                return RelativeOrientation.Enum.Flip180;
+        }
+
+        if (from == AbsoluteOrientation.Enum.Reverse_Portrait) {
+            if (to == AbsoluteOrientation.Enum.Reverse_Landscape)
+                return RelativeOrientation.Enum.Left90;
+
+            if (to == AbsoluteOrientation.Enum.Landscape)
+                return RelativeOrientation.Enum.Right90;
+
+            if (to == AbsoluteOrientation.Enum.Portrait)
+                return RelativeOrientation.Enum.Flip180;
+        }
+
+        if (from == AbsoluteOrientation.Enum.Landscape) {
+            if (to == AbsoluteOrientation.Enum.Reverse_Portrait)
+                return RelativeOrientation.Enum.Left90;
+
+            if (to == AbsoluteOrientation.Enum.Portrait)
+                return RelativeOrientation.Enum.Right90;
+
+            if (to == AbsoluteOrientation.Enum.Reverse_Landscape)
+                return RelativeOrientation.Enum.Flip180;
+        }
+
+        if (from == AbsoluteOrientation.Enum.Reverse_Landscape) {
+            if (to == AbsoluteOrientation.Enum.Portrait)
+                return RelativeOrientation.Enum.Left90;
+
+            if (to == AbsoluteOrientation.Enum.Reverse_Portrait)
+                return RelativeOrientation.Enum.Right90;
+
+            if (to == AbsoluteOrientation.Enum.Landscape)
+                return RelativeOrientation.Enum.Flip180;
+        }
+
+        return RelativeOrientation.Enum.None0;
+    }
+
+    private static AbsoluteOrientation.Enum add(AbsoluteOrientation.Enum absoluteOrientation, RelativeOrientation.Enum relativeOrientation) {
+        if (relativeOrientation == RelativeOrientation.Enum.None0)
+            return absoluteOrientation;
+
+        if (absoluteOrientation == AbsoluteOrientation.Enum.Portrait) {
+            if (relativeOrientation == RelativeOrientation.Enum.Left90)
+                return AbsoluteOrientation.Enum.Landscape;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Right90)
+                return AbsoluteOrientation.Enum.Reverse_Landscape;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Flip180)
+                return AbsoluteOrientation.Enum.Reverse_Portrait;
+        }
+
+        if (absoluteOrientation == AbsoluteOrientation.Enum.Reverse_Portrait) {
+            if (relativeOrientation == RelativeOrientation.Enum.Left90)
+                return AbsoluteOrientation.Enum.Reverse_Landscape;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Right90)
+                return AbsoluteOrientation.Enum.Landscape;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Flip180)
+                return AbsoluteOrientation.Enum.Portrait;
+        }
+
+        if (absoluteOrientation == AbsoluteOrientation.Enum.Landscape) {
+            if (relativeOrientation == RelativeOrientation.Enum.Left90)
+                return AbsoluteOrientation.Enum.Reverse_Portrait;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Right90)
+                return AbsoluteOrientation.Enum.Portrait;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Flip180)
+                return AbsoluteOrientation.Enum.Reverse_Landscape;
+        }
+
+        if (absoluteOrientation == AbsoluteOrientation.Enum.Reverse_Landscape) {
+            if (relativeOrientation == RelativeOrientation.Enum.Left90)
+                return AbsoluteOrientation.Enum.Portrait;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Right90)
+                return AbsoluteOrientation.Enum.Reverse_Portrait;
+
+            if (relativeOrientation == RelativeOrientation.Enum.Flip180)
+                return AbsoluteOrientation.Enum.Landscape;
+        }
+
+        // this should never happen
+        return AbsoluteOrientation.Enum.Landscape;
+    }
+
+    public int toActivityInfoOrientation() {
+        if (_enum == Enum.Reverse_Landscape)
+            return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+
+        if (_enum == Enum.Landscape)
+            return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+
+        if (_enum == Enum.Reverse_Portrait)
+            return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+
+        return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+    }
+
+    public String toString() {
+        if (_enum == Enum.Portrait)
+            return "Portrait";
+        if (_enum == Enum.Reverse_Portrait)
+            return "Reverse_Portrait";
+        if (_enum == Enum.Landscape)
+            return "Landscape";
+
+        return "ReverseLandscape";
+    }
+
+    private Enum _enum;
+}
diff --git a/app/src/main/java/com/gabm/tapandturn/RelativeOrientation.java b/app/src/main/java/com/gabm/tapandturn/RelativeOrientation.java
new file mode 100644
index 0000000..0417e4e
--- /dev/null
+++ b/app/src/main/java/com/gabm/tapandturn/RelativeOrientation.java
@@ -0,0 +1,36 @@
+package com.gabm.tapandturn;
+
+/**
+ * Created by gabm on 23/05/17.
+ */
+
+public class RelativeOrientation {
+    public enum Enum {
+        None0,
+        Left90,
+        Right90,
+        Flip180
+    }
+
+    public RelativeOrientation(Enum valEnum) {
+        _enum = valEnum;
+    }
+
+    public String toString() {
+        if (_enum == Enum.Left90)
+            return "Left90";
+        if (_enum == Enum.Right90)
+            return "Right90";
+        if (_enum == Enum.Flip180)
+            return "Flip180";
+
+        return "None0";
+    }
+
+    public boolean equals(RelativeOrientation other) {
+        return _enum == other._enum;
+    }
+
+
+    private Enum _enum;
+}
diff --git a/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java b/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java
similarity index 50%
rename from app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java
rename to app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java
index 26a74d2..323c1a0 100644
--- a/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java
+++ b/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java
@@ -4,6 +4,7 @@ import android.content.Context;
 import android.content.pm.ActivityInfo;
 import android.view.OrientationEventListener;
 
+import com.gabm.tapandturn.AbsoluteOrientation;
 import com.gabm.tapandturn.TapAndTurnApplication;
 import com.gabm.tapandturn.settings.SettingsKeys;
 
@@ -12,21 +13,21 @@ import com.gabm.tapandturn.settings.SettingsKeys;
  */
 
 // borrowed from: http://stackoverflow.com/questions/9021890/get-phone-orientation-but-fix-screen-orientation-to-portrait
-public class PhysicalOrientationSensor extends OrientationEventListener {
+public class PhysicalOrientationSensorNG extends OrientationEventListener {
 
-    private int curScreenOrientation;
-    private OrientationListener listener;
+    private AbsoluteOrientation curScreenOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Portrait);
+    private OrientationListenerNG listener;
 
-    public PhysicalOrientationSensor(Context context, int rate, OrientationListener listener) {
+    public PhysicalOrientationSensorNG(Context context, int rate, OrientationListenerNG listener) {
         super(context, rate);
         setListener(listener);
     }
 
-    public PhysicalOrientationSensor(Context context, int rate) {
+    public PhysicalOrientationSensorNG(Context context, int rate) {
         super(context, rate);
     }
 
-    public PhysicalOrientationSensor(Context context) {
+    public PhysicalOrientationSensorNG(Context context) {
         super(context);
     }
 
@@ -36,21 +37,21 @@ public class PhysicalOrientationSensor extends OrientationEventListener {
             return;
         }
 
-        int newOrientation;
+        AbsoluteOrientation newOrientation;
         if (orientation >= 60 && orientation <= 140){
-            newOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+            newOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Reverse_Landscape);
         } else if (orientation >= 140 && orientation <= 220) {
-            newOrientation = ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+            newOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Reverse_Portrait);
         } else if (orientation >= 220 && orientation <= 300) {
-            newOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+            newOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Landscape);
         } else {
-            newOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+            newOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Portrait);
         }
 
-        if(newOrientation != curScreenOrientation) {
+        if(!newOrientation.equals(curScreenOrientation)) {
 
             // if the device is in reverse portrait mode
-            if (newOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT)
+            if (newOrientation.equals(AbsoluteOrientation.Enum.Reverse_Portrait))
                 // and reverse portrait mode got disabled
                 if (!TapAndTurnApplication.settings.getBoolean(SettingsKeys.USE_REVERSE_PORTRAIT, false))
                     // then ignore
@@ -58,20 +59,20 @@ public class PhysicalOrientationSensor extends OrientationEventListener {
 
             curScreenOrientation = newOrientation;
             if(listener != null){
-                listener.onOrientationChange(curScreenOrientation);
+                listener.onOrientationChangeNG(curScreenOrientation);
             }
         }
     }
 
-    public void setListener(OrientationListener listener){
+    public void setListener(OrientationListenerNG listener){
         this.listener = listener;
     }
 
-    public int getCurScreenOrientation(){
+    public AbsoluteOrientation getCurScreenOrientation(){
         return curScreenOrientation;
     }
 
-    public interface OrientationListener {
-        void onOrientationChange(int screenOrientation);
+    public interface OrientationListenerNG {
+        void onOrientationChangeNG(AbsoluteOrientation screenOrientation);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java b/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java
new file mode 100644
index 0000000..e3015dd
--- /dev/null
+++ b/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java
@@ -0,0 +1,35 @@
+package com.gabm.tapandturn.sensors;
+
+import android.view.Surface;
+import android.view.WindowManager;
+
+import com.gabm.tapandturn.AbsoluteOrientation;
+import com.gabm.tapandturn.RelativeOrientation;
+
+/**
+ * Created by gabm on 23/05/17.
+ */
+
+public class WindowManagerSensor {
+
+    private WindowManager _windowManager;
+
+    public WindowManagerSensor(WindowManager windowManager) {
+        _windowManager = windowManager;
+    }
+
+    public AbsoluteOrientation query() {
+        int rawResult = _windowManager.getDefaultDisplay().getRotation();
+
+        if (rawResult == Surface.ROTATION_90)
+            return new AbsoluteOrientation(AbsoluteOrientation.Enum.Landscape);
+
+        if (rawResult == Surface.ROTATION_180)
+            return new AbsoluteOrientation(AbsoluteOrientation.Enum.Reverse_Portrait);
+
+        if (rawResult == Surface.ROTATION_270)
+            return new AbsoluteOrientation(AbsoluteOrientation.Enum.Reverse_Landscape);
+
+        return new AbsoluteOrientation(AbsoluteOrientation.Enum.Portrait);
+    }
+}
diff --git a/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java b/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
index 5a7b795..26bb6d2 100644
--- a/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
+++ b/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
@@ -15,9 +15,11 @@ import android.view.View;
 import android.view.WindowManager;
 import android.widget.Toast;
 
+import com.gabm.tapandturn.AbsoluteOrientation;
+import com.gabm.tapandturn.sensors.PhysicalOrientationSensorNG;
+import com.gabm.tapandturn.sensors.WindowManagerSensor;
 import com.gabm.tapandturn.ui.MainActivity;
 import com.gabm.tapandturn.R;
-import com.gabm.tapandturn.sensors.PhysicalOrientationSensor;
 import com.gabm.tapandturn.ui.ScreenRotatorOverlay;
 import com.gabm.tapandturn.ui.OrientationButtonOverlay;
 
@@ -25,24 +27,25 @@ import com.gabm.tapandturn.ui.OrientationButtonOverlay;
  * Created by gabm on 30.10.16.
  */
 
-public class ServiceRotationControlService extends Service implements PhysicalOrientationSensor.OrientationListener, View.OnClickListener{
+public class ServiceRotationControlService extends Service implements PhysicalOrientationSensorNG.OrientationListenerNG, View.OnClickListener{
     private NotificationManager mNM;
     private Notification.Builder curNotificationBuilder = null;
 
-    private PhysicalOrientationSensor physicalOrientationSensor;
+    private WindowManagerSensor windowManagerSensor;
+    private PhysicalOrientationSensorNG physicalOrientationSensorNG;
     private ScreenRotatorOverlay screenRotatorOverlay;
     private OrientationButtonOverlay orientationButtonOverlay;
-    private boolean initialized = false;
 
 
     // Unique Identification Number for the Notification.
     // We use it on Notification start, and to cancel it.
     private int NOTIFICATION = R.string.orientation_service_started;
-    private int handlerScreenOrientation;
+    private AbsoluteOrientation handlerScreenOrientation;
 
+    /*
     @Override
     public void onOrientationChange(int newScreenOrientation) {
-        Log.i("Orientation", String.valueOf(newScreenOrientation));
+        Log.i("AbsoluteOrientation", String.valueOf(newScreenOrientation));
 
         if (!initialized) {
             initialize(newScreenOrientation);
@@ -58,12 +61,12 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         else {
             orientationButtonOverlay.hide();
         }
-    }
+    }*/
 
     @Override
     public void onClick(View view) {
         orientationButtonOverlay.hide();
-        if (handlerScreenOrientation == physicalOrientationSensor.getCurScreenOrientation()) {
+        if (handlerScreenOrientation.equals(physicalOrientationSensorNG.getCurScreenOrientation())) {
             screenRotatorOverlay.changeOrientation(handlerScreenOrientation);
 
             if (screenRotatorOverlay.isDefaultOrientation(handlerScreenOrientation))
@@ -73,28 +76,30 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
 
             mNM.notify(NOTIFICATION, curNotificationBuilder.build());
         }
-
     }
-    private void initialize(int defaultOrientation) {
+
+    private void initialize() {
 
         // Initialize layout params
         WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
 
-        screenRotatorOverlay = new ScreenRotatorOverlay(getApplicationContext(), windowManager, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT, defaultOrientation);
+        screenRotatorOverlay = new ScreenRotatorOverlay(getApplicationContext(), windowManager);
         orientationButtonOverlay = new OrientationButtonOverlay(getApplicationContext(), windowManager, this);
 
         // Display a notification about us starting.  We put an icon in the status bar.
         showNotification();
-
-        initialized = true;
     }
 
     @Override
     public void onCreate() {
         mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
 
-        physicalOrientationSensor = new PhysicalOrientationSensor(getApplicationContext(), SensorManager.SENSOR_DELAY_NORMAL, this);
-        physicalOrientationSensor.enable();
+        physicalOrientationSensorNG = new PhysicalOrientationSensorNG(getApplicationContext(), SensorManager.SENSOR_DELAY_NORMAL, this);
+        physicalOrientationSensorNG.enable();
+
+        windowManagerSensor = new WindowManagerSensor((WindowManager) getSystemService(WINDOW_SERVICE));
+
+        initialize();
     }
 
 
@@ -111,7 +116,7 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         screenRotatorOverlay.removeView();
         orientationButtonOverlay.hide();
 
-        physicalOrientationSensor.disable();
+        physicalOrientationSensorNG.disable();
 
         // Cancel the persistent notification.
         mNM.cancel(NOTIFICATION);
@@ -151,6 +156,17 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         mNM.notify(NOTIFICATION, curNotificationBuilder.build());
     }
 
+    @Override
+    public void onOrientationChangeNG(AbsoluteOrientation screenOrientation) {
+        Log.i("OrientationChangeNG", screenOrientation.toString());
+        Log.i("WindowManagerSensor", windowManagerSensor.query().toString());
+
+        if (!screenOrientation.equals(screenRotatorOverlay.getCurrentlySetScreenOrientation())) {
+            handlerScreenOrientation = screenOrientation;
+            orientationButtonOverlay.show(screenRotatorOverlay.getCurrentlySetScreenOrientation().toActivityInfoOrientation(), screenOrientation.toActivityInfoOrientation());
+        }
+    }
+
 
     public class ServiceRotationControlBinder extends Binder {
         ServiceRotationControlService getService() {
diff --git a/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java b/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
index 5399dc0..371f7b6 100644
--- a/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
+++ b/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
@@ -59,7 +59,7 @@ public class OrientationButtonOverlay {
                 WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,
                 PixelFormat.TRANSLUCENT);
 
-        layoutParams.screenOrientation = oldOrientation;
+        //layoutParams.screenOrientation = oldOrientation;
         layoutParams.gravity = getButtonAlignment(oldOrientation, newOrientation, TapAndTurnApplication.settings.getBoolean(SettingsKeys.LEFT_HANDED_MODE, false));
         curWindowManager.addView(imageButton, layoutParams);
 
diff --git a/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java b/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
index 3ad63b7..ed628c5 100644
--- a/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
+++ b/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
@@ -8,6 +8,9 @@ import android.util.Log;
 import android.view.WindowManager;
 import android.widget.LinearLayout;
 
+import com.gabm.tapandturn.AbsoluteOrientation;
+import com.gabm.tapandturn.sensors.WindowManagerSensor;
+
 /**
  * Created by gabm on 31.10.16.
  */
@@ -15,43 +18,40 @@ import android.widget.LinearLayout;
 public class ScreenRotatorOverlay {
     private LinearLayout dummyLayout;
     private WindowManager curWindowManager;
-    private int currentlySetScreenOrientation ;
-    private int defaultOrientation;
-
+    private AbsoluteOrientation currentlySetScreenOrientation ;
+    private WindowManagerSensor windowManagerSensor;
 
-    public ScreenRotatorOverlay(Context context, WindowManager windowManager, int orientation, int defaultOrientation) {
+    public ScreenRotatorOverlay(Context context, WindowManager windowManager) {
         dummyLayout = new LinearLayout(context);
         curWindowManager = windowManager;
-        this.defaultOrientation = defaultOrientation;
-
-        changeOrientation(orientation);
+        windowManagerSensor = new WindowManagerSensor(windowManager);
+        currentlySetScreenOrientation = windowManagerSensor.query();
     }
 
-    public int getCurrentlySetScreenOrientation() {
+    public boolean isDefaultOrientation(AbsoluteOrientation orientation) {
+        return windowManagerSensor.query().equals(orientation);
+    }
+    public AbsoluteOrientation getCurrentlySetScreenOrientation() {
         return currentlySetScreenOrientation;
     }
 
-    public boolean isDefaultOrientation(int orientation) {
-        return orientation == defaultOrientation;
-    }
-    public void changeOrientation(int orientation) {
+    public void changeOrientation(AbsoluteOrientation orientation) {
         removeView();
 
         // if requested orientation is different from the device configured orientation
         // then enforece the new rotation by adding an overlay
-        if (!isDefaultOrientation(orientation)) {
+       // if (!isDefaultOrientation(orientation)) {
 
-            Log.i("Overlay", "Adding for " + orientation);
-            Log.i("Overlay", "Configured orientation " + defaultOrientation);
+            Log.i("Overlay", "Adding for " + orientation.toString());
 
             WindowManager.LayoutParams dummyParams = new WindowManager.LayoutParams(WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, 0, PixelFormat.RGBA_8888);
-            dummyParams.screenOrientation = orientation;
+            dummyParams.screenOrientation = orientation.toActivityInfoOrientation();
 
             curWindowManager.addView(dummyLayout, dummyParams);
 
-        } else {
+        /*} else {
             Log.i("Overlay", "Not adding anything");
-        }
+        }*/
 
         currentlySetScreenOrientation = orientation;
     }
