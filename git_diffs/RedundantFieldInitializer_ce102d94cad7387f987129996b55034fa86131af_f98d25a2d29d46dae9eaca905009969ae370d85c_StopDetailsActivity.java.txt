diff --git a/app/src/androidTest/java/at/h4x/amsprung/ApplicationTest.java b/app/src/androidTest/java/at/h4x/amsprung/ApplicationTest.java
deleted file mode 100644
index 007c038..0000000
--- a/app/src/androidTest/java/at/h4x/amsprung/ApplicationTest.java
+++ /dev/null
@@ -1,16 +0,0 @@
-// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
-// SPDX-License-Identifier: GPL-3.0-or-later
-
-package at.h4x.amsprung;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
diff --git a/app/src/main/java/at/h4x/amsprung/FavouriteStopAdapter.java b/app/src/main/java/at/h4x/amsprung/FavouriteStationAdapter.java
similarity index 74%
rename from app/src/main/java/at/h4x/amsprung/FavouriteStopAdapter.java
rename to app/src/main/java/at/h4x/amsprung/FavouriteStationAdapter.java
index 07416ed..060945b 100644
--- a/app/src/main/java/at/h4x/amsprung/FavouriteStopAdapter.java
+++ b/app/src/main/java/at/h4x/amsprung/FavouriteStationAdapter.java
@@ -8,11 +8,11 @@ import android.os.AsyncTask;
 
 import at.h4x.amsprung.room.AppDatabase;
 
-public class FavouriteStopAdapter extends StopsAdapter{
+public class FavouriteStationAdapter extends StationsAdapter {
 
     private final AppDatabase db;
 
-    public FavouriteStopAdapter(Context context, ClickListener listener) {
+    public FavouriteStationAdapter(Context context, ClickListener listener) {
         super(listener);
         db = AppDatabase.via(context);
     }
@@ -21,7 +21,7 @@ public class FavouriteStopAdapter extends StopsAdapter{
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
-                updateStopsAdapter(db.favouriteStopDao().loadAllFavouritedStops());
+                updateStationsAdapter(db.favouriteStationDao().loadAllFavouritedStops());
                 return null;
             }
         }.execute();
diff --git a/app/src/main/java/at/h4x/amsprung/FavouriteStopFragment.java b/app/src/main/java/at/h4x/amsprung/FavouriteStationFragment.java
similarity index 73%
rename from app/src/main/java/at/h4x/amsprung/FavouriteStopFragment.java
rename to app/src/main/java/at/h4x/amsprung/FavouriteStationFragment.java
index 3c21399..ece6f9c 100644
--- a/app/src/main/java/at/h4x/amsprung/FavouriteStopFragment.java
+++ b/app/src/main/java/at/h4x/amsprung/FavouriteStationFragment.java
@@ -15,19 +15,19 @@ import android.view.ViewGroup;
 /**
  * A fragment representing a list of Items.
  */
-public class FavouriteStopFragment extends Fragment {
+public class FavouriteStationFragment extends Fragment {
 
-    private FavouriteStopAdapter adapter;
+    private FavouriteStationAdapter adapter;
 
     /**
      * Mandatory empty constructor for the fragment manager to instantiate the
      * fragment (e.g. upon screen orientation changes).
      */
-    public FavouriteStopFragment() {
+    public FavouriteStationFragment() {
     }
 
-    public static FavouriteStopFragment newInstance() {
-        FavouriteStopFragment fragment = new FavouriteStopFragment();
+    public static FavouriteStationFragment newInstance() {
+        FavouriteStationFragment fragment = new FavouriteStationFragment();
         return fragment;
     }
 
@@ -43,11 +43,11 @@ public class FavouriteStopFragment extends Fragment {
         final RecyclerView recyclerView = (RecyclerView) inflater.inflate(R.layout.fragment_favouritestop_list, container, false);
 
         recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
-        adapter = new FavouriteStopAdapter(getContext(), new StopsAdapter.ClickListener() {
+        adapter = new FavouriteStationAdapter(getContext(), new StationsAdapter.ClickListener() {
             @Override
             public void onClicked(int stopId) {
-                Intent i = new Intent(getActivity(), StopDetailsActivity.class);
-                i.putExtra(StopDetailsActivity.EXTRA_STOP_ID, stopId);
+                Intent i = new Intent(getActivity(), StationDetailsActivity.class);
+                i.putExtra(StationDetailsActivity.EXTRA_STATION_ID, stopId);
                 startActivity(i);
             }
         });
diff --git a/app/src/main/java/at/h4x/amsprung/HomeActivity.java b/app/src/main/java/at/h4x/amsprung/HomeActivity.java
index 68f0cd5..3b3dea1 100644
--- a/app/src/main/java/at/h4x/amsprung/HomeActivity.java
+++ b/app/src/main/java/at/h4x/amsprung/HomeActivity.java
@@ -7,7 +7,7 @@ import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
-import androidx.annotation.Nullable;
+
 import com.google.android.material.appbar.AppBarLayout;
 import com.google.android.material.appbar.CollapsingToolbarLayout;
 import com.google.android.material.floatingactionbutton.FloatingActionButton;
@@ -137,7 +137,7 @@ public class HomeActivity extends AppCompatActivity {
         public Fragment getItem(int position) {
             switch (position) {
                 case 0:
-                    return FavouriteStopFragment.newInstance();
+                    return FavouriteStationFragment.newInstance();
                 case 1:
                     return StopViewHistoryFragment.newInstance();
                 default:
diff --git a/app/src/main/java/at/h4x/amsprung/NearestStopsAdapter.java b/app/src/main/java/at/h4x/amsprung/NearestStopsAdapter.java
index da828c1..8df8fac 100644
--- a/app/src/main/java/at/h4x/amsprung/NearestStopsAdapter.java
+++ b/app/src/main/java/at/h4x/amsprung/NearestStopsAdapter.java
@@ -71,8 +71,8 @@ public class NearestStopsAdapter extends RecyclerView.Adapter<NearestStopsAdapte
             @Override
             public void onClick(View v) {
                 //Toast.makeText(v.getContext(), "clicky...", Toast.LENGTH_SHORT).show();
-                Intent i = new Intent(v.getContext(), StopDetailsActivity.class);
-                i.putExtra(StopDetailsActivity.EXTRA_STOP_ID, stop.getId());
+                Intent i = new Intent(v.getContext(), StationDetailsActivity.class);
+                i.putExtra(StationDetailsActivity.EXTRA_STATION_ID, stop.getId());
                 v.getContext().startActivity(i);
             }
         });
@@ -136,8 +136,8 @@ public class NearestStopsAdapter extends RecyclerView.Adapter<NearestStopsAdapte
         public NearestStopsAdapterViewHolder(View itemView) {
             super(itemView);
             clicky = itemView.findViewById(R.id.item);
-            stopName = (TextView) itemView.findViewById(R.id.stopName);
-            communeName = (TextView) itemView.findViewById(R.id.stopCommune);
+            stopName = (TextView) itemView.findViewById(R.id.stationName);
+            communeName = (TextView) itemView.findViewById(R.id.stationCommune);
             distance = (TextView) itemView.findViewById(R.id.distance);
             lines = (LinearLayout) itemView.findViewById(R.id.lines);
         }
diff --git a/app/src/main/java/at/h4x/amsprung/SearchActivity.java b/app/src/main/java/at/h4x/amsprung/SearchActivity.java
index 88d0c3d..eb3b8e4 100644
--- a/app/src/main/java/at/h4x/amsprung/SearchActivity.java
+++ b/app/src/main/java/at/h4x/amsprung/SearchActivity.java
@@ -13,7 +13,7 @@ import androidx.appcompat.widget.Toolbar;
 
 import at.h4x.amsprung.util.MinLog;
 
-public class SearchActivity extends AppCompatActivity implements StopsAdapter.ClickListener {
+public class SearchActivity extends AppCompatActivity implements StationsAdapter.ClickListener {
 
     private SearchResultAdapter searchResultAdapter;
 
@@ -51,20 +51,20 @@ public class SearchActivity extends AppCompatActivity implements StopsAdapter.Cl
             @Override
             public boolean onQueryTextChange(String newText) {
                 MinLog.i("### change %s", newText);
-                updateStops(newText);
+                updateStations(newText);
                 return false;
             }
         });
     }
 
-    private void updateStops(String newText) {
+    private void updateStations(String newText) {
         searchResultAdapter.updateQuery(newText);
     }
 
     @Override
-    public void onClicked(int stopId) {
-        Intent i = new Intent(this, StopDetailsActivity.class);
-        i.putExtra(StopDetailsActivity.EXTRA_STOP_ID, stopId);
+    public void onClicked(int stationId) {
+        Intent i = new Intent(this, StationDetailsActivity.class);
+        i.putExtra(StationDetailsActivity.EXTRA_STATION_ID, stationId);
         startActivity(i);
     }
 }
diff --git a/app/src/main/java/at/h4x/amsprung/SearchResultAdapter.java b/app/src/main/java/at/h4x/amsprung/SearchResultAdapter.java
index fb81cfd..e6a3bc0 100644
--- a/app/src/main/java/at/h4x/amsprung/SearchResultAdapter.java
+++ b/app/src/main/java/at/h4x/amsprung/SearchResultAdapter.java
@@ -10,9 +10,10 @@ import java.util.ArrayList;
 import java.util.List;
 
 import at.h4x.amsprung.room.AppDatabase;
-import at.h4x.amsprung.room.model.Stop;
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.util.MinLog;
 
-public class SearchResultAdapter extends StopsAdapter {
+public class SearchResultAdapter extends StationsAdapter {
 
     private final AppDatabase db;
 
@@ -22,19 +23,22 @@ public class SearchResultAdapter extends StopsAdapter {
     }
 
     public void updateQuery(final String query) {
+        MinLog.v("(trace)");
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
 
                 if (query == null) {
-                    updateStopsAdapter(new ArrayList<Stop>());
+                    MinLog.d("station search: 0 found (query null)");
+                    updateStationsAdapter(new ArrayList<Station>());
                     return null;
                 }
 
                 String[] queryTokens = query.split(" ");
 
                 if (queryTokens.length < 1){
-                    updateStopsAdapter(new ArrayList<Stop>());
+                    MinLog.d("station search: 0 found (no query tokens)");
+                    updateStationsAdapter(new ArrayList<Station>());
                     return null;
                 }
 
@@ -42,32 +46,37 @@ public class SearchResultAdapter extends StopsAdapter {
                     if (queryTokens.length == 1) {
                         // search query consists just of 1 token so just search for that one
                         // in database and return
-                        updateStopsAdapter(db.stopDao().findByName("%" + queryTokens[0] + "%"));
+                        List<Station> stations = db.stationDao().findByName("%" + queryTokens[0] + "%");
+                        MinLog.d("station search: %d found (single token)", stations.size());
+                        updateStationsAdapter(stations);
                     } else {
                         // search query consists for a couple of tokens so search database for the
                         // first one. Filter the initial search result by subsequent tokens
-                        List<Stop> stops = new ArrayList<>();
-                        for (Stop stop : db.stopDao().findByName("%" + queryTokens[0] + "%")){
+                        List<Station> stations = new ArrayList<>();
+                        for (Station station : db.stationDao().findByName("%" + queryTokens[0] + "%")){
                             boolean okay = true;
                             for (int i=1; i<queryTokens.length; i++) {
-                                if(!stop.getName().toLowerCase().contains(queryTokens[i].toLowerCase())) {
+                                if(!station.getName().toLowerCase().contains(queryTokens[i].toLowerCase())) {
                                     okay = false;
                                 }
                             }
                             if (okay) {
-                                stops.add(stop);
+                                stations.add(station);
                             }
                         }
-                        updateStopsAdapter(stops);
+                        MinLog.d("station search: %d found (multi token)", stations.size());
+                        updateStationsAdapter(stations);
                     }
                 } else {
-                    updateStopsAdapter(new ArrayList<Stop>());
+                    MinLog.d("station search: 0 found (token less than 3 chars)");
+                    updateStationsAdapter(new ArrayList<Station>());
                 }
                 return null;
             }
 
             @Override
             protected void onPostExecute(Void aVoid) {
+                MinLog.v("(trace)");
                 notifyDataSetChanged();
                 super.onPostExecute(aVoid);
             }
diff --git a/app/src/main/java/at/h4x/amsprung/StopDetailsActivity.java b/app/src/main/java/at/h4x/amsprung/StationDetailsActivity.java
similarity index 63%
rename from app/src/main/java/at/h4x/amsprung/StopDetailsActivity.java
rename to app/src/main/java/at/h4x/amsprung/StationDetailsActivity.java
index 6aa79a7..07eb679 100644
--- a/app/src/main/java/at/h4x/amsprung/StopDetailsActivity.java
+++ b/app/src/main/java/at/h4x/amsprung/StationDetailsActivity.java
@@ -23,20 +23,21 @@ import com.google.gson.Gson;
 import java.util.List;
 
 import at.h4x.amsprung.room.AppDatabase;
-import at.h4x.amsprung.room.model.FavouriteStop;
+import at.h4x.amsprung.room.model.FavouriteStation;
 import at.h4x.amsprung.room.model.Stair;
-import at.h4x.amsprung.room.model.Stop;
-import at.h4x.amsprung.room.model.StopViewHistory;
-import at.h4x.amsprung.room.model.StopViewHistoryDao;
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.room.model.StationViewHistoryDao;
+import at.h4x.amsprung.room.model.StationViewHistory;
 import at.h4x.amsprung.util.MinLog;
 import at.h4x.amsprung.util.OkHttpClientProvider;
 import at.h4x.amsprung.wienerlinienapi.LineBadgeHelper;
 import at.h4x.amsprung.wienerlinienapi.MonitorInfoAsyncTask;
 import at.h4x.amsprung.wienerlinienapi.MonitorInfosForStairsAsyncTask;
+import at.h4x.amsprung.wienerlinienapi.MonitorInfosForStationAsyncTask;
 
-public class StopDetailsActivity extends AppCompatActivity {
+public class StationDetailsActivity extends AppCompatActivity {
 
-    public static final String EXTRA_STOP_ID = "extra_stop_id";
+    public static final String EXTRA_STATION_ID = "extra_station_id";
     private static final long IGNORE_REFRESH_INTERVAL = 10 * 1000;
 
     private RecyclerView recycler;
@@ -44,14 +45,14 @@ public class StopDetailsActivity extends AppCompatActivity {
     private DeparturesAdapter adapter;
     private MenuItem menuActionFavOn;
     private MenuItem menuActionFavOff;
-    private int stopId = 0;
+    private int stationId = 0;
     private SwipeRefreshLayout swipeRefresh;
     private long lastLoad = 0;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_stop_details);
+        setContentView(R.layout.activity_station_details);
         Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
         // enable toolbar back-button
@@ -77,7 +78,7 @@ public class StopDetailsActivity extends AppCompatActivity {
         LinearLayoutManager layoutManager = new LinearLayoutManager(this);
         recycler.setLayoutManager(layoutManager);
 
-        stopId = getIntent().getIntExtra(EXTRA_STOP_ID, -1);
+        stationId = getIntent().getIntExtra(EXTRA_STATION_ID, -1);
 
         swipeRefresh = findViewById(R.id.swipe_refresh);
         swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
@@ -87,36 +88,35 @@ public class StopDetailsActivity extends AppCompatActivity {
                     swipeRefresh.setRefreshing(false);
                     MinLog.d("ignore refreshing, don't allow spamming the server");
                 } else {
-                    loadStairs(stopId);
+                    loadStation(stationId);
                 }
             }
         });
 
-        recordStopViewHistory(stopId);
+        recordStationViewHistory(stationId);
 
-        loadStop(stopId);
-        loadStairs(stopId);
+        loadStation(stationId);
         swipeRefresh.setRefreshing(true);
         displayLineBadges();
     }
 
-    private void recordStopViewHistory(final int stopId) {
+    private void recordStationViewHistory(final int stationId) {
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
-                StopViewHistoryDao stopViewHistoryDao = AppDatabase.via(StopDetailsActivity.this).stopViewHistoryDao();
-                StopViewHistory viewHist = stopViewHistoryDao.byId(stopId);
+                StationViewHistoryDao stationViewHistoryDao = AppDatabase.via(StationDetailsActivity.this).stationViewHistoryDao();
+                StationViewHistory viewHist = stationViewHistoryDao.byId(stationId);
                 if (viewHist == null) {
-                    viewHist = new StopViewHistory();
-                    viewHist.setId(stopId);
+                    viewHist = new StationViewHistory();
+                    viewHist.setId(stationId);
                     viewHist.setViewCount(1);
                     viewHist.setLastViewed(System.currentTimeMillis());
-                    stopViewHistoryDao.insert(viewHist);
+                    stationViewHistoryDao.insert(viewHist);
                 } else {
                     viewHist.setViewCount(viewHist.getViewCount() + 1);
                     viewHist.setLastViewed(System.currentTimeMillis());
-                    stopViewHistoryDao.update(viewHist);
-                    MinLog.d("update view count for stop[%d] to %d (%d)", stopId, viewHist.getViewCount(), viewHist.getLastViewed());
+                    stationViewHistoryDao.update(viewHist);
+                    MinLog.d("update view count for station[%d] to %d (%d)", stationId, viewHist.getViewCount(), viewHist.getLastViewed());
                 }
 
                 return null;
@@ -125,12 +125,12 @@ public class StopDetailsActivity extends AppCompatActivity {
     }
 
     private void displayLineBadges() {
-        LineBadgeHelper.lineBadgesForStop(stopId, (LinearLayout) findViewById(R.id.line_badges), 6, 4);
+        LineBadgeHelper.lineBadgesForStop(stationId, (LinearLayout) findViewById(R.id.line_badges), 6, 4);
     }
 
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
-        getMenuInflater().inflate(R.menu.menu_stop_details, menu);
+        getMenuInflater().inflate(R.menu.menu_station_details, menu);
         // make fav icons disappear
         menuActionFavOn = menu.findItem(R.id.action_fav_on);
         menuActionFavOn.setVisible(false);
@@ -162,10 +162,10 @@ public class StopDetailsActivity extends AppCompatActivity {
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
-                AppDatabase db = AppDatabase.via(StopDetailsActivity.this);
-                FavouriteStop favStop = new FavouriteStop();
-                favStop.setId(StopDetailsActivity.this.stopId);
-                db.favouriteStopDao().insert(favStop);
+                AppDatabase db = AppDatabase.via(StationDetailsActivity.this);
+                FavouriteStation favStation = new FavouriteStation();
+                favStation.setId(StationDetailsActivity.this.stationId);
+                db.favouriteStationDao().insert(favStation);
                 return null;
             }
 
@@ -181,8 +181,8 @@ public class StopDetailsActivity extends AppCompatActivity {
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
-                AppDatabase db = AppDatabase.via(StopDetailsActivity.this);
-                db.favouriteStopDao().deleteById(StopDetailsActivity.this.stopId);
+                AppDatabase db = AppDatabase.via(StationDetailsActivity.this);
+                db.favouriteStationDao().deleteById(StationDetailsActivity.this.stationId);
                 return null;
             }
 
@@ -194,41 +194,43 @@ public class StopDetailsActivity extends AppCompatActivity {
         }.execute();
     }
 
-    private void loadStop(final int stopId) {
-        new AsyncTask<Void, Void, Stop>() {
+    private void loadStation(final int stationId) {
+        new AsyncTask<Void, Void, Station>() {
             @Override
-            protected Stop doInBackground(Void... voids) {
-                AppDatabase db = AppDatabase.via(StopDetailsActivity.this);
-                Stop stop = db.stopDao().byId(stopId);
-                return stop;
+            protected Station doInBackground(Void... voids) {
+                AppDatabase db = AppDatabase.via(StationDetailsActivity.this);
+                Station station = db.stationDao().byId(stationId);
+                return station;
             }
 
             @Override
-            protected void onPostExecute(Stop stop) {
-                displayStop(stop);
+            protected void onPostExecute(Station station) {
+                displayStation(station);
+                loadAndDisplayMonitorsForStation(station);
             }
         }.execute();
     }
 
-    private void loadStairs(final int stopId) {
-        lastLoad = System.currentTimeMillis();
-        new AsyncTask<Void, Void, List<Stair>>() {
-
+    void loadAndDisplayMonitorsForStation(Station station) {
+        new MonitorInfosForStationAsyncTask(OkHttpClientProvider.get(StationDetailsActivity.this), new Gson()){
             @Override
-            protected List<Stair> doInBackground(Void... voids) {
-                AppDatabase db = AppDatabase.via(StopDetailsActivity.this);
-                return db.stairDao().getStairsForStopId(stopId);
-            }
+            protected void onPostExecute(List<MonitorInfoAsyncTask.MonitorInfo> monitorInfos) {
+                super.onPostExecute(monitorInfos);
 
-            @Override
-            protected void onPostExecute(List<Stair> stairs){
-                loadAndDisplayMonitorsForStairs(stairs);
+                if (adapter == null) {
+                    adapter = new DeparturesAdapter(monitorInfos);
+                    recycler.setAdapter(adapter);
+                } else {
+                    adapter = new DeparturesAdapter(monitorInfos);
+                    recycler.swapAdapter(adapter, true);
+                }
+                swipeRefresh.setRefreshing(false);
             }
-        }.execute();
+        }.execute(station);
     }
 
     void loadAndDisplayMonitorsForStairs(List<Stair> stairs) {
-        new MonitorInfosForStairsAsyncTask(OkHttpClientProvider.get(StopDetailsActivity.this), new Gson()){
+        new MonitorInfosForStairsAsyncTask(OkHttpClientProvider.get(StationDetailsActivity.this), new Gson()){
             @Override
             protected void onPostExecute(List<MonitorInfoAsyncTask.MonitorInfo> monitorInfos) {
                 super.onPostExecute(monitorInfos);
@@ -245,14 +247,14 @@ public class StopDetailsActivity extends AppCompatActivity {
         }.execute(stairs);
     }
 
-    void displayStop(final Stop stop) {
-        if (stop != null && stop.getName() != null) {
+    void displayStation(final Station station) {
+        if (station != null && station.getName() != null) {
 
-            getSupportActionBar().setTitle(stop.getName());
+            getSupportActionBar().setTitle(station.getName());
             // hack to make set title working :(
             getSupportActionBar().setDisplayShowTitleEnabled(true);
 
-            ((TextView) findViewById(R.id.stopCommune)).setText(stop.getCommuneName());
+            ((TextView) findViewById(R.id.stationCommune)).setText(station.getCommuneName());
         }
     }
 
@@ -260,16 +262,16 @@ public class StopDetailsActivity extends AppCompatActivity {
         new AsyncTask<Void, Void, Boolean>() {
             @Override
             protected Boolean doInBackground(Void... voids) {
-                AppDatabase db = AppDatabase.via(StopDetailsActivity.this);
-                FavouriteStop favStop = db.favouriteStopDao().byId(StopDetailsActivity.this.stopId);
-                return favStop == null;
+                AppDatabase db = AppDatabase.via(StationDetailsActivity.this);
+                FavouriteStation favStation = db.favouriteStationDao().byId(StationDetailsActivity.this.stationId);
+                return favStation == null;
             }
 
             @Override
-            protected void onPostExecute(Boolean isFavouriteStop) {
+            protected void onPostExecute(Boolean isFavouriteStation) {
                 if (menuActionFavOff != null && menuActionFavOn != null){
-                    menuActionFavOn.setVisible(!isFavouriteStop);
-                    menuActionFavOff.setVisible(isFavouriteStop);
+                    menuActionFavOn.setVisible(!isFavouriteStation);
+                    menuActionFavOff.setVisible(isFavouriteStation);
                 }
             }
         }.execute();
diff --git a/app/src/main/java/at/h4x/amsprung/StopsAdapter.java b/app/src/main/java/at/h4x/amsprung/StationsAdapter.java
similarity index 58%
rename from app/src/main/java/at/h4x/amsprung/StopsAdapter.java
rename to app/src/main/java/at/h4x/amsprung/StationsAdapter.java
index 23eed32..6e0b26d 100644
--- a/app/src/main/java/at/h4x/amsprung/StopsAdapter.java
+++ b/app/src/main/java/at/h4x/amsprung/StationsAdapter.java
@@ -17,23 +17,25 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
-import at.h4x.amsprung.room.model.Stop;
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.util.MinLog;
 import at.h4x.amsprung.wienerlinienapi.LineBadgeHelper;
 
-class StopsAdapter extends RecyclerView.Adapter<StopsAdapter.ViewHolder> {
+class StationsAdapter extends RecyclerView.Adapter<StationsAdapter.ViewHolder> {
 
     private final Handler mainHandler = new Handler(Looper.getMainLooper());
-    private volatile List<Stop> stops;
+    private volatile List<Station> stations;
     private final ClickListener listener;
 
-    public StopsAdapter(ClickListener listener) {
-        stops = Arrays.asList();
+    public StationsAdapter(ClickListener listener) {
+        stations = Arrays.asList();
         this.listener = listener;
     }
 
-    public void updateStopsAdapter(List<Stop> stops) {
-        synchronized (StopsAdapter.this) {
-            this.stops = Collections.unmodifiableList(stops);
+    public void updateStationsAdapter(List<Station> stations) {
+        MinLog.v("%d stations (trace)", stations.size());
+        synchronized (StationsAdapter.this) {
+            this.stations = Collections.unmodifiableList(stations);
         }
         mainHandler.post(new Runnable() {
             @Override
@@ -46,27 +48,31 @@ class StopsAdapter extends RecyclerView.Adapter<StopsAdapter.ViewHolder> {
     @NonNull
     @Override
     public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        MinLog.v("(trace)");
         View view = LayoutInflater.from(parent.getContext())
-                .inflate(R.layout.item_stop, parent, false);
+                .inflate(R.layout.item_station, parent, false);
         return new ViewHolder(view);
     }
 
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
-        synchronized (StopsAdapter.this) {
-            if (position < stops.size()) {
-                Stop stop = stops.get(position);
+        MinLog.v("position=%d (trace)", position);
+        synchronized (StationsAdapter.this) {
+            if (position < stations.size()) {
+                Station station = stations.get(position);
 
-                holder.stopName.setText(stop.getName());
-                holder.communeName.setText(stop.getCommuneName());
-                LineBadgeHelper.lineBadgesForStop(stop.getId(), holder.lines);
+                MinLog.i("### bind " + station.getId() + " " + station.getName());
 
-                final int stopId = stop.getId();
+                holder.stationName.setText(station.getName());
+                holder.communeName.setText(station.getCommuneName());
+                LineBadgeHelper.lineBadgesForStop(station.getId(), holder.lines);
+
+                final int stationId = station.getId();
                 holder.clicky.setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
                         if (listener != null) {
-                            listener.onClicked(stopId);
+                            listener.onClicked(stationId);
                         }
                     }
                 });
@@ -76,15 +82,16 @@ class StopsAdapter extends RecyclerView.Adapter<StopsAdapter.ViewHolder> {
 
     @Override
     public int getItemCount() {
-        synchronized (StopsAdapter.this) {
-            return stops.size();
+        synchronized (StationsAdapter.this) {
+            MinLog.v("-> %d (trace)", stations.size());
+            return stations.size();
         }
     }
 
     public static class ViewHolder extends RecyclerView.ViewHolder {
 
         View clicky;
-        TextView stopName;
+        TextView stationName;
         TextView communeName;
         TextView distance;
         LinearLayout lines;
@@ -92,14 +99,14 @@ class StopsAdapter extends RecyclerView.Adapter<StopsAdapter.ViewHolder> {
         public ViewHolder(View itemView) {
             super(itemView);
             clicky = itemView.findViewById(R.id.item);
-            stopName = (TextView) itemView.findViewById(R.id.stopName);
-            communeName = (TextView) itemView.findViewById(R.id.stopCommune);
+            stationName = (TextView) itemView.findViewById(R.id.stationName);
+            communeName = (TextView) itemView.findViewById(R.id.stationCommune);
             distance = (TextView) itemView.findViewById(R.id.distance);
             lines = (LinearLayout) itemView.findViewById(R.id.lines);
         }
     }
 
     interface ClickListener {
-        void onClicked(int stopId);
+        void onClicked(int stationId);
     }
 }
diff --git a/app/src/main/java/at/h4x/amsprung/StopViewHistoryAdapter.java b/app/src/main/java/at/h4x/amsprung/StopViewHistoryAdapter.java
index 628b85c..39de77a 100644
--- a/app/src/main/java/at/h4x/amsprung/StopViewHistoryAdapter.java
+++ b/app/src/main/java/at/h4x/amsprung/StopViewHistoryAdapter.java
@@ -8,7 +8,7 @@ import android.os.AsyncTask;
 
 import at.h4x.amsprung.room.AppDatabase;
 
-public class StopViewHistoryAdapter extends StopsAdapter{
+public class StopViewHistoryAdapter extends StationsAdapter {
 
     private final AppDatabase db;
 
@@ -21,7 +21,7 @@ public class StopViewHistoryAdapter extends StopsAdapter{
         new AsyncTask<Void, Void, Void>() {
             @Override
             protected Void doInBackground(Void... voids) {
-                updateStopsAdapter(db.stopViewHistoryDao().loadStopsHistory());
+                updateStationsAdapter(db.stationViewHistoryDao().loadStationsHistory());
                 return null;
             }
         }.execute();
diff --git a/app/src/main/java/at/h4x/amsprung/StopViewHistoryFragment.java b/app/src/main/java/at/h4x/amsprung/StopViewHistoryFragment.java
index 1566d95..e45f299 100644
--- a/app/src/main/java/at/h4x/amsprung/StopViewHistoryFragment.java
+++ b/app/src/main/java/at/h4x/amsprung/StopViewHistoryFragment.java
@@ -43,11 +43,11 @@ public class StopViewHistoryFragment extends Fragment {
         final RecyclerView recyclerView = (RecyclerView) inflater.inflate(R.layout.fragment_stopviewhistory_list, container, false);
 
         recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
-        adapter = new StopViewHistoryAdapter(getContext(), new StopsAdapter.ClickListener() {
+        adapter = new StopViewHistoryAdapter(getContext(), new StationsAdapter.ClickListener() {
             @Override
             public void onClicked(int stopId) {
-                Intent i = new Intent(getActivity(), StopDetailsActivity.class);
-                i.putExtra(StopDetailsActivity.EXTRA_STOP_ID, stopId);
+                Intent i = new Intent(getActivity(), StationDetailsActivity.class);
+                i.putExtra(StationDetailsActivity.EXTRA_STATION_ID, stopId);
                 startActivity(i);
             }
         });
diff --git a/app/src/main/java/at/h4x/amsprung/UpdateAppDatabaseService.java b/app/src/main/java/at/h4x/amsprung/UpdateAppDatabaseService.java
index 32432e5..c8a88ee 100644
--- a/app/src/main/java/at/h4x/amsprung/UpdateAppDatabaseService.java
+++ b/app/src/main/java/at/h4x/amsprung/UpdateAppDatabaseService.java
@@ -19,6 +19,9 @@ import com.opencsv.CSVReader;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
 
 import at.h4x.amsprung.room.AppDatabase;
 import at.h4x.amsprung.room.model.Line;
@@ -26,6 +29,8 @@ import at.h4x.amsprung.room.model.LineType;
 import at.h4x.amsprung.room.model.LineDao;
 import at.h4x.amsprung.room.model.Stair;
 import at.h4x.amsprung.room.model.StairDao;
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.room.model.StationDao;
 import at.h4x.amsprung.room.model.Stop;
 import at.h4x.amsprung.room.model.StopDao;
 import at.h4x.amsprung.util.MinLog;
@@ -41,16 +46,6 @@ public class UpdateAppDatabaseService extends Service {
     public static final char SEPARATOR = ';';
     public static final char QUOTE_CHAR = '"';
 
-    public static final int IDX_STOP_ID = 0;
-    public static final int IDX_STOP_TYPE = 1;
-    public static final int IDX_STOP_DIVA = 2;
-    public static final int IDX_STOP_NAME = 3;
-    public static final int IDX_STOP_COMMUNE = 4;
-    public static final int IDX_STOP_COMMUNE_ID = 5;
-    public static final int IDX_STOP_LAT = 6;
-    public static final int IDX_STOP_LNG = 7;
-    public static final int IDX_STOP_STATUS = 8;
-
     public static final int IDX_STAIR_ID = 0;
     public static final int IDX_STAIR_LINE_ID = 1;
     public static final int IDX_STAIR_STOP_ID = 2;
@@ -63,13 +58,6 @@ public class UpdateAppDatabaseService extends Service {
     public static final int IDX_STAIR_LON = 9;
     public static final int IDX_STAIR_STATUS = 10;
 
-    public static final int IDX_LINE_ID = 0;
-    public static final int IDX_LINE_NAME = 1;
-    public static final int IDX_LINE_ORDER = 2;
-    public static final int IDX_LINE_REALTIME_DATA = 3;
-    public static final int IDX_LINE_TYPE = 4;
-    public static final int IDX_LINE_STATUS = 5;
-
     private HandlerThread serviceThread;
     private Handler serviceHandler;
 
@@ -111,13 +99,13 @@ public class UpdateAppDatabaseService extends Service {
     public int onStartCommand(Intent intent, int flags, int startId) {
 
         if (ACTION_UPDATE_DATABASE.equals(intent.getAction())){
-            handleActionUpdateDatabse();
+            handleActionUpdateDatabase();
         }
 
         return START_NOT_STICKY;
     }
 
-    private void handleActionUpdateDatabse() {
+    private void handleActionUpdateDatabase() {
 
         serviceHandler.post(new Runnable() {
             @Override
@@ -137,9 +125,9 @@ public class UpdateAppDatabaseService extends Service {
 
                 // get ready for accessing database
                 AppDatabase db = AppDatabase.via(UpdateAppDatabaseService.this);
-                MinLog.i("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf");
                 importStops(db.stopDao());
-                importStairs(db.stairDao());
+                // importStairs(db.stairDao());
+                importStations(db.stationDao());
                 importLines(db.lineDao());
 
                 stopForeground(true);
@@ -152,30 +140,41 @@ public class UpdateAppDatabaseService extends Service {
         int insertCount = 0;
         int updateCount = 0;
         try {
-            CSVReader r = new CSVReader(new InputStreamReader(this.getResources().openRawResource(R.raw.wienerlinien_ogd_haltestellen)), SEPARATOR, QUOTE_CHAR);
-
-            // skip header
-            r.readNext();
-
             String[] line = null;
+            CSVReader r = new CSVReader(new InputStreamReader(this.getResources().openRawResource(R.raw.wienerlinien_ogd_haltepunkte)), SEPARATOR, QUOTE_CHAR);
+
+            // parse header
+            Map<String, Integer> header = new HashMap<String, Integer>();
+            line = r.readNext();
+            for(int i=0; i<line.length; i++) {
+                header.put(line[i].toLowerCase(Locale.ROOT), i);
+                MinLog.v("stop import header %s -> %d", line[i].toLowerCase(Locale.ROOT), i);
+            }
+
             while ((line = r.readNext()) != null) {
                 try {
                     Stop stop = new Stop();
-                    stop.setId(Integer.valueOf(line[IDX_STOP_ID]));
-                    stop.setName(line[IDX_STOP_NAME]);
-                    stop.setCommuneName(line[IDX_STOP_COMMUNE]);
-                    stop.setLat(Double.valueOf(line[IDX_STOP_LAT]));
-                    stop.setLng(Double.valueOf(line[IDX_STOP_LNG]));
-
-                    if (stopDao.byId(stop.getId()) == null){
+                    stop.setId(intOrNull(line[header.get("stopid")]));
+                    stop.setStationId(intOrNull(line[header.get("diva")]));
+                    stop.setName(line[header.get("stoptext")]);
+                    stop.setCommuneName(line[header.get("municipality")]);
+                    stop.setCommuneId(intOrNull(line[header.get("municipalityid")]));
+                    //stop.setLat(doubleOrNull(line[header.get("latitude")]));
+                    stop.setLat(null);
+                    //stop.setLng(doubleOrNull(line[header.get("longitude")]));
+                    stop.setLng(null);
+
+                    if (stopDao.byId(stop.getId()) == null) {
                         stopDao.insert(stop);
                         insertCount++;
                     } else {
                         stopDao.update(stop);
                         updateCount++;
                     }
-                } catch (NumberFormatException e){
-                    // skip line ... when numbers bad
+                } catch (NumberFormatException e) {
+                    MinLog.d(e, "failed to import line \"%s\"", join(", ", line));
+                } catch (NullPointerException e) {
+                    MinLog.d(e, "failed to import line \"%s\"", join(", ", line));
                 }
             }
             MinLog.i("done importing stops, (%d updated, %d inserted)", updateCount, insertCount);
@@ -191,12 +190,16 @@ public class UpdateAppDatabaseService extends Service {
             int updateCount = 0;
             int insertCount = 0;
 
+            String[] line = null;
             CSVReader r = new CSVReader(new InputStreamReader(this.getResources().openRawResource(R.raw.wienerlinien_ogd_steige)), SEPARATOR, QUOTE_CHAR);
 
-            // skip header
-            r.readNext();
+            // parse header
+            Map<String, Integer> header = new HashMap<String, Integer>();
+            line = r.readNext();
+            for(int i=0; i<line.length; i++) {
+                header.put(line[i].toLowerCase(Locale.ROOT), i);
+            }
 
-            String[] line = null;
             while ((line = r.readNext()) != null) {
                 Stair stair = new Stair();
                 stair.setId(Integer.valueOf(line[IDX_STAIR_ID]));
@@ -222,22 +225,63 @@ public class UpdateAppDatabaseService extends Service {
         }
     }
 
+    private void importStations(StationDao stationDao) {
+        int updateCount = 0;
+        int insertCount = 0;
+        try {
+            String[] line = null;
+            CSVReader r = new CSVReader(new InputStreamReader(this.getResources().openRawResource(R.raw.wienerlinien_ogd_haltestellen)), SEPARATOR, QUOTE_CHAR);
+
+            // parse header
+            Map<String, Integer> header = new HashMap<String, Integer>();
+            line = r.readNext();
+            for(int i=0; i<line.length; i++) {
+                header.put(line[i].toLowerCase(Locale.ROOT), i);
+            }
+
+            while ((line = r.readNext()) != null) {
+                Station station = new Station();
+                station.setId(Integer.valueOf(line[header.get("diva")]));
+                station.setName(line[header.get("platformtext")]);
+                station.setCommuneName(line[header.get("municipality")]);
+                station.setLatitude(Double.valueOf(line[header.get("latitude")]));
+                station.setLongitude(Double.valueOf(line[header.get("longitude")]));
+
+                if (stationDao.byId(station.getId()) != null) {
+                    stationDao.update(station);
+                    updateCount++;
+                } else {
+                    stationDao.insert(station);
+                    insertCount++;
+                }
+            }
+            MinLog.i("done importing lines, (%d updated, %d inserted)", updateCount, insertCount);
+
+        } catch (IOException e) {
+            MinLog.d(e, "could not read line-definitions");
+        }
+    }
+
     private void importLines(LineDao lineDao) {
         int updateCount = 0;
         int insertCount = 0;
         try {
+            String[] line = null;
             CSVReader r = new CSVReader(new InputStreamReader(this.getResources().openRawResource(R.raw.wienerlinien_ogd_linien)), SEPARATOR, QUOTE_CHAR);
 
-            // skip header
-            r.readNext();
+            // parse header
+            Map<String, Integer> header = new HashMap<String, Integer>();
+            line = r.readNext();
+            for(int i=0; i<line.length; i++) {
+                header.put(line[i].toLowerCase(Locale.ROOT), i);
+            }
 
-            String[] line = null;
             while ((line = r.readNext()) != null) {
                 Line l = new Line();
-                l.setId(Integer.valueOf(line[IDX_LINE_ID]));
-                l.setName(line[IDX_LINE_NAME]);
-                l.setRealTimeData("1".equals(line[IDX_LINE_REALTIME_DATA]));
-                l.setType(LineType.fromName(line[IDX_LINE_TYPE]));
+                l.setId(Integer.valueOf(line[header.get("lineid")]));
+                l.setName(line[header.get("linetext")]);
+                l.setRealTimeData("1".equals(line[header.get("realtime")]));
+                l.setType(LineType.fromName(line[header.get("meansoftransport")]));
 
                 if (lineDao.byId(l.getId()) != null) {
                     lineDao.update(l);
@@ -253,4 +297,32 @@ public class UpdateAppDatabaseService extends Service {
             MinLog.d(e, "could not read line-definitions");
         }
     }
+
+    static Integer intOrNull(String value) {
+        if (value == null || "".equals(value)) {
+            return null;
+        }
+        return Integer.valueOf(value);
+    }
+
+    static Double doubleOrNull(String value) {
+        if (value == null || "".equals(value)) {
+            return null;
+        }
+        return Double.parseDouble(value);
+    }
+
+    static String join(String delimiter, String[] values) {
+        StringBuilder sb = new StringBuilder();
+        boolean first = true;
+        for (String value : values) {
+            if (first) {
+                first = false;
+            } else {
+                sb.append(delimiter);
+            }
+            sb.append(value);
+        }
+        return sb.toString();
+    }
 }
diff --git a/app/src/main/java/at/h4x/amsprung/WienerLinienUtil.java b/app/src/main/java/at/h4x/amsprung/WienerLinienUtil.java
deleted file mode 100644
index 37ce374..0000000
--- a/app/src/main/java/at/h4x/amsprung/WienerLinienUtil.java
+++ /dev/null
@@ -1,22 +0,0 @@
-// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
-// SPDX-License-Identifier: GPL-3.0-or-later
-
-package at.h4x.amsprung;
-
-import java.util.List;
-import java.util.concurrent.ExecutionException;
-
-import at.h4x.amsprung.wienerlinienapi.MonitorInfoAsyncTask;
-
-/**
- * Created by uniq on 18.10.15.
- */
-public class WienerLinienUtil {
-
-
-    public static void main(String[] args) throws ExecutionException, InterruptedException {
-        MonitorInfoAsyncTask t = new MonitorInfoAsyncTask();
-        List<MonitorInfoAsyncTask.MonitorInfo> monitorInfos = t.execute(147).get();
-    }
-
-}
diff --git a/app/src/main/java/at/h4x/amsprung/room/AppDatabase.java b/app/src/main/java/at/h4x/amsprung/room/AppDatabase.java
index 1dcaca2..bced92e 100644
--- a/app/src/main/java/at/h4x/amsprung/room/AppDatabase.java
+++ b/app/src/main/java/at/h4x/amsprung/room/AppDatabase.java
@@ -4,40 +4,40 @@
 package at.h4x.amsprung.room;
 
 
-import androidx.sqlite.db.SupportSQLiteDatabase;
 import androidx.room.Database;
 import androidx.room.Room;
 import androidx.room.RoomDatabase;
-import androidx.room.migration.Migration;
+
 import android.content.Context;
-import androidx.annotation.NonNull;
 
-import at.h4x.amsprung.room.model.FavouriteStop;
-import at.h4x.amsprung.room.model.FavouriteStopDao;
+import at.h4x.amsprung.room.model.FavouriteStation;
+import at.h4x.amsprung.room.model.FavouriteStationDao;
 import at.h4x.amsprung.room.model.Line;
 import at.h4x.amsprung.room.model.LineDao;
 import at.h4x.amsprung.room.model.Stair;
-import at.h4x.amsprung.room.model.StairDao;
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.room.model.StationDao;
+import at.h4x.amsprung.room.model.StationViewHistory;
 import at.h4x.amsprung.room.model.Stop;
 import at.h4x.amsprung.room.model.StopDao;
-import at.h4x.amsprung.room.model.StopViewHistory;
-import at.h4x.amsprung.room.model.StopViewHistoryDao;
+import at.h4x.amsprung.room.model.StationViewHistoryDao;
 
 
 /**
  * Docs: https://developer.android.com/topic/libraries/architecture/room
  */
 // TODO: re-evaluate setting exportSchema to false (just false to silence lint atm.)
-@Database(entities = {Stop.class, Stair.class, Line.class, FavouriteStop.class, StopViewHistory.class}, version = 3, exportSchema = false)
+@Database(entities = {Stop.class, Station.class, Stair.class, Line.class, FavouriteStation.class, StationViewHistory.class}, version = 3, exportSchema = false)
 public abstract class AppDatabase extends RoomDatabase{
 
     private static volatile AppDatabase INSTANCE;
 
     public abstract StopDao stopDao();
-    public abstract StairDao stairDao();
+    // public abstract StairDao stairDao();
+    public abstract StationDao stationDao();
     public abstract LineDao lineDao();
-    public abstract FavouriteStopDao favouriteStopDao();
-    public abstract StopViewHistoryDao stopViewHistoryDao();
+    public abstract FavouriteStationDao favouriteStationDao();
+    public abstract StationViewHistoryDao stationViewHistoryDao();
 
     public static AppDatabase via(Context context) {
 
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStop.java b/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStation.java
similarity index 72%
rename from app/src/main/java/at/h4x/amsprung/room/model/FavouriteStop.java
rename to app/src/main/java/at/h4x/amsprung/room/model/FavouriteStation.java
index bc80c3b..5dcb259 100644
--- a/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStop.java
+++ b/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStation.java
@@ -12,10 +12,10 @@ import lombok.Setter;
 /**
  *
  */
-@Entity(tableName = FavouriteStop.TABLE_NAME)
-public class FavouriteStop {
+@Entity(tableName = FavouriteStation.TABLE_NAME)
+public class FavouriteStation {
 
-    public static final String TABLE_NAME = "fav_stop";
+    public static final String TABLE_NAME = "fav_station";
     public static final String C_ID = "id";
 
     @PrimaryKey
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStationDao.java b/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStationDao.java
new file mode 100644
index 0000000..bfc9e1c
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStationDao.java
@@ -0,0 +1,39 @@
+// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+package at.h4x.amsprung.room.model;
+
+import androidx.room.Dao;
+import androidx.room.Delete;
+import androidx.room.Insert;
+import androidx.room.Query;
+import androidx.room.Update;
+
+import java.util.List;
+
+@Dao
+public interface FavouriteStationDao {
+    @Query("select * from " + FavouriteStation.TABLE_NAME)
+    List<FavouriteStation> getAll();
+
+    @Query("select * from " + FavouriteStation.TABLE_NAME + " where " + FavouriteStation.C_ID + " = :id")
+    FavouriteStation byId(int id);
+
+    @Query("select * from " + FavouriteStation.TABLE_NAME + " where " + FavouriteStation.C_ID + " in (:ids)")
+    List<FavouriteStation> byIds(int... ids);
+
+    @Insert
+    void insert(FavouriteStation... favouriteStations);
+
+    @Update
+    void update(FavouriteStation... favouriteStations);
+
+    @Delete
+    void delete(FavouriteStation favouriteStation);
+
+    @Query("delete from " + FavouriteStation.TABLE_NAME + " where " + FavouriteStation.C_ID + " = :stopId")
+    void deleteById(int stopId);
+
+    @Query("select * from " + Station.TABLE_NAME + " where " + Stop.C_ID + " in (select * from " + FavouriteStation.TABLE_NAME + ")")
+    List<Station> loadAllFavouritedStops();
+}
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStopDao.java b/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStopDao.java
deleted file mode 100644
index a2e7a13..0000000
--- a/app/src/main/java/at/h4x/amsprung/room/model/FavouriteStopDao.java
+++ /dev/null
@@ -1,39 +0,0 @@
-// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
-// SPDX-License-Identifier: GPL-3.0-or-later
-
-package at.h4x.amsprung.room.model;
-
-import androidx.room.Dao;
-import androidx.room.Delete;
-import androidx.room.Insert;
-import androidx.room.Query;
-import androidx.room.Update;
-
-import java.util.List;
-
-@Dao
-public interface FavouriteStopDao {
-    @Query("select * from " + FavouriteStop.TABLE_NAME)
-    List<FavouriteStop> getAll();
-
-    @Query("select * from " + FavouriteStop.TABLE_NAME + " where " + FavouriteStop.C_ID + " = :id")
-    FavouriteStop byId(int id);
-
-    @Query("select * from " + FavouriteStop.TABLE_NAME + " where " + FavouriteStop.C_ID + " in (:ids)")
-    List<FavouriteStop> byIds(int... ids);
-
-    @Insert
-    void insert(FavouriteStop... favouriteStops);
-
-    @Update
-    void update(FavouriteStop... favouriteStops);
-
-    @Delete
-    void delete(FavouriteStop favouriteStop);
-
-    @Query("delete from " + FavouriteStop.TABLE_NAME + " where " + FavouriteStop.C_ID + " = :stopId")
-    void deleteById(int stopId);
-
-    @Query("select * from " + Stop.TABLE_NAME + " where " + Stop.C_ID + " in (select * from " + FavouriteStop.TABLE_NAME + ")")
-    List<Stop> loadAllFavouritedStops();
-}
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/Station.java b/app/src/main/java/at/h4x/amsprung/room/model/Station.java
new file mode 100644
index 0000000..5bc8073
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/room/model/Station.java
@@ -0,0 +1,33 @@
+package at.h4x.amsprung.room.model;
+
+import androidx.room.ColumnInfo;
+import androidx.room.Entity;
+import androidx.room.PrimaryKey;
+
+import lombok.Getter;
+import lombok.Setter;
+
+@Entity(tableName = Station.TABLE_NAME)
+public class Station {
+    public static final String TABLE_NAME = "station";
+    public static final String C_ID = "id";
+    public static final String C_NAME = "name";
+    public static final String C_COMMUNE_NAME = "commune_name";
+    public static final String C_LNG = "lng";
+    public static final String C_LAT = "lat";
+
+    @PrimaryKey()
+    @Getter @Setter Integer id;
+
+    @ColumnInfo(name = C_NAME)
+    @Getter @Setter String name;
+
+    @ColumnInfo(name = C_COMMUNE_NAME)
+    @Getter @Setter String communeName;
+
+    @ColumnInfo(name = C_LNG)
+    @Getter @Setter Double longitude;
+
+    @ColumnInfo(name = C_LAT)
+    @Getter @Setter Double latitude;
+}
\ No newline at end of file
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/StationDao.java b/app/src/main/java/at/h4x/amsprung/room/model/StationDao.java
new file mode 100644
index 0000000..e299366
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/room/model/StationDao.java
@@ -0,0 +1,37 @@
+// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+package at.h4x.amsprung.room.model;
+
+import androidx.room.Dao;
+import androidx.room.Delete;
+import androidx.room.Insert;
+import androidx.room.Query;
+import androidx.room.Update;
+
+import java.util.List;
+
+@Dao
+public interface StationDao {
+    @Query("select * from " + Station.TABLE_NAME)
+    List<Station> getAll();
+
+    @Query("select * from " + Station.TABLE_NAME + " where " + Station.C_ID + " = :id")
+    Station byId(int id);
+
+    @Query("select * from " + Station.TABLE_NAME + " where " + Station.C_ID + " = :ids")
+    List<Station> byIds(int... ids);
+
+    @Query("select * from " + Station.TABLE_NAME + " where " + Station.C_NAME + " like :name")
+    List<Station> findByName(String name);
+
+    @Insert
+    void insert(Station... stops);
+
+    @Update
+    void update(Station... stops);
+
+    @Delete
+    void delete(Station stop);
+
+}
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/StopViewHistory.java b/app/src/main/java/at/h4x/amsprung/room/model/StationViewHistory.java
similarity index 89%
rename from app/src/main/java/at/h4x/amsprung/room/model/StopViewHistory.java
rename to app/src/main/java/at/h4x/amsprung/room/model/StationViewHistory.java
index 2b04b99..33bc9ac 100644
--- a/app/src/main/java/at/h4x/amsprung/room/model/StopViewHistory.java
+++ b/app/src/main/java/at/h4x/amsprung/room/model/StationViewHistory.java
@@ -13,8 +13,8 @@ import lombok.Setter;
 /**
  *
  */
-@Entity(tableName = StopViewHistory.TABLE_NAME)
-public class StopViewHistory {
+@Entity(tableName = StationViewHistory.TABLE_NAME)
+public class StationViewHistory {
 
     public static final String TABLE_NAME = "stop_view_hist";
     public static final String C_ID = "id";
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/StationViewHistoryDao.java b/app/src/main/java/at/h4x/amsprung/room/model/StationViewHistoryDao.java
new file mode 100644
index 0000000..a35c664
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/room/model/StationViewHistoryDao.java
@@ -0,0 +1,36 @@
+// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+package at.h4x.amsprung.room.model;
+
+import androidx.room.Dao;
+import androidx.room.Delete;
+import androidx.room.Insert;
+import androidx.room.Query;
+import androidx.room.Update;
+
+import java.util.List;
+
+@Dao
+public interface StationViewHistoryDao {
+    @Query("select * from " + StationViewHistory.TABLE_NAME)
+    List<StationViewHistory> getAll();
+
+    @Query("select * from " + StationViewHistory.TABLE_NAME + " where " + StationViewHistory.C_ID + " = :id")
+    StationViewHistory byId(int id);
+
+    @Query("select * from " + StationViewHistory.TABLE_NAME + " where " + StationViewHistory.C_ID + " in (:ids)")
+    List<StationViewHistory> byIds(int... ids);
+
+    @Insert
+    void insert(StationViewHistory... favouriteStations);
+
+    @Update
+    void update(StationViewHistory... favouriteStations);
+
+    @Delete
+    void delete(StationViewHistory favouriteStations);
+
+    @Query("select " + Station.TABLE_NAME + ".* from " + Station.TABLE_NAME + " inner join " + StationViewHistory.TABLE_NAME+ " on " + Station.TABLE_NAME + "." + Station.C_ID + " = " + StationViewHistory.TABLE_NAME + "." + StationViewHistory.C_ID + " order by " + StationViewHistory.TABLE_NAME + "." + StationViewHistory.C_LAST_VIEWED + " desc")
+    List<Station> loadStationsHistory();
+}
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/Stop.java b/app/src/main/java/at/h4x/amsprung/room/model/Stop.java
index f182046..fae5079 100644
--- a/app/src/main/java/at/h4x/amsprung/room/model/Stop.java
+++ b/app/src/main/java/at/h4x/amsprung/room/model/Stop.java
@@ -3,6 +3,7 @@
 
 package at.h4x.amsprung.room.model;
 
+import androidx.annotation.Nullable;
 import androidx.room.ColumnInfo;
 import androidx.room.Entity;
 import androidx.room.PrimaryKey;
@@ -15,23 +16,31 @@ public class Stop {
 
     public static final String TABLE_NAME = "user";
     public static final String C_ID = "id";
+    public static final String C_STATION_ID = "station_id";
     public static final String C_NAME = "name";
     public static final String C_COMMUNE_NAME = "commune_name";
+    public static final String C_COMMUNE_ID = "commune_id";
     public static final String C_LNG = "lng";
     public static final String C_LAT = "lat";
 
     @PrimaryKey
     @Getter @Setter int id;
 
+    @ColumnInfo(name = C_STATION_ID)
+    @Getter @Setter Integer stationId;
+
     @ColumnInfo(name = C_NAME)
     @Getter @Setter String name;
 
     @ColumnInfo(name = C_COMMUNE_NAME)
     @Getter @Setter String communeName;
 
+    @ColumnInfo(name = C_COMMUNE_ID)
+    @Getter @Setter Integer communeId;
+
     @ColumnInfo(name = C_LNG)
-    @Getter @Setter double lng;
+    @Getter @Setter Double lng;
 
     @ColumnInfo(name = C_LAT)
-    @Getter @Setter double lat;
+    @Getter @Setter Double lat;
 }
diff --git a/app/src/main/java/at/h4x/amsprung/room/model/StopViewHistoryDao.java b/app/src/main/java/at/h4x/amsprung/room/model/StopViewHistoryDao.java
deleted file mode 100644
index e935284..0000000
--- a/app/src/main/java/at/h4x/amsprung/room/model/StopViewHistoryDao.java
+++ /dev/null
@@ -1,36 +0,0 @@
-// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
-// SPDX-License-Identifier: GPL-3.0-or-later
-
-package at.h4x.amsprung.room.model;
-
-import androidx.room.Dao;
-import androidx.room.Delete;
-import androidx.room.Insert;
-import androidx.room.Query;
-import androidx.room.Update;
-
-import java.util.List;
-
-@Dao
-public interface StopViewHistoryDao {
-    @Query("select * from " + StopViewHistory.TABLE_NAME)
-    List<StopViewHistory> getAll();
-
-    @Query("select * from " + StopViewHistory.TABLE_NAME + " where " + StopViewHistory.C_ID + " = :id")
-    StopViewHistory byId(int id);
-
-    @Query("select * from " + StopViewHistory.TABLE_NAME + " where " + StopViewHistory.C_ID + " in (:ids)")
-    List<StopViewHistory> byIds(int... ids);
-
-    @Insert
-    void insert(StopViewHistory... favouriteStops);
-
-    @Update
-    void update(StopViewHistory... favouriteStops);
-
-    @Delete
-    void delete(StopViewHistory favouriteStop);
-
-    @Query("select " + Stop.TABLE_NAME + ".* from " + Stop.TABLE_NAME + " inner join " + StopViewHistory.TABLE_NAME+ " on " + Stop.TABLE_NAME + "." + Stop.C_ID + " = " + StopViewHistory.TABLE_NAME + "." + StopViewHistory.C_ID + " order by " + StopViewHistory.TABLE_NAME + "." + StopViewHistory.C_LAST_VIEWED + " desc")
-    List<Stop> loadStopsHistory();
-}
diff --git a/app/src/main/java/at/h4x/amsprung/util/MinLog.java b/app/src/main/java/at/h4x/amsprung/util/MinLog.java
index 0331ab8..1a1ac77 100644
--- a/app/src/main/java/at/h4x/amsprung/util/MinLog.java
+++ b/app/src/main/java/at/h4x/amsprung/util/MinLog.java
@@ -11,7 +11,7 @@ import java.util.Locale;
 public class MinLog {
 
     private static String tag = "default";
-    private static boolean enabled = false;
+    private static boolean enabled = true;
 
     public static void on(String tag) {
         MinLog.enabled = true;
diff --git a/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStationAsyncTask.java b/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStationAsyncTask.java
new file mode 100644
index 0000000..a7a3c4d
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStationAsyncTask.java
@@ -0,0 +1,59 @@
+// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+package at.h4x.amsprung.wienerlinienapi;
+
+import com.google.gson.Gson;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import at.h4x.amsprung.room.model.Station;
+import at.h4x.amsprung.util.MinLog;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+
+/**
+ * Created by uniq on 26.04.17.
+ */
+
+public class MonitorInfosForStationAsyncTask extends WienerLinienApiAsyncTask<Station, Void, List<MonitorInfoAsyncTask.MonitorInfo>>{
+
+    private final OkHttpClient okHttpClient;
+    private final Gson gson;
+
+    public MonitorInfosForStationAsyncTask(OkHttpClient okHttpClient, Gson gson) {
+        this.okHttpClient = okHttpClient;
+        this.gson = gson;
+    }
+
+    @Override
+    protected List<MonitorInfoAsyncTask.MonitorInfo> doInBackground(Station... params) {
+        List<MonitorInfoAsyncTask.MonitorInfo> monitorInfos = new ArrayList<MonitorInfoAsyncTask.MonitorInfo>();
+        if (params != null && params.length == 1) {
+            Station station = params[0];
+            if (station != null && station.getId() != 0) {
+                final String url = API_BASE_URL + "?diva="
+                        + station.getId()
+                        + "&activateTrafficInfo=stoerungkurz&activateTrafficInfo=stoerunglang&activateTrafficInfo=aufzugsinfo";
+                MinLog.v("url: %s", url);
+
+                Request request = new Request.Builder().url(url).build();
+                try {
+                    Response response = okHttpClient.newCall(request).execute();
+                    String responseString = response.body().string();
+                    MinLog.v("response: %s", responseString);
+                    MonitorInfoAsyncTask.MonitorInfo i = gson.fromJson(responseString, MonitorInfoAsyncTask.MonitorInfo.class);
+                    if (i != null){
+                        monitorInfos.add(i);
+                    }
+                } catch (IOException e) {
+                    MinLog.e(e, "http request failed (url: '" + url + "')");
+                }
+            }
+        }
+        return monitorInfos;
+    }
+}
diff --git a/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStopAsyncTask.java b/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStopAsyncTask.java
new file mode 100644
index 0000000..27b22f2
--- /dev/null
+++ b/app/src/main/java/at/h4x/amsprung/wienerlinienapi/MonitorInfosForStopAsyncTask.java
@@ -0,0 +1,61 @@
+// SPDX-FileCopyrightText: 2021 Michael PÃ¶hn <michael.poehn@fsfe.org>
+// SPDX-License-Identifier: GPL-3.0-or-later
+
+package at.h4x.amsprung.wienerlinienapi;
+
+import android.util.Log;
+
+import com.google.gson.Gson;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import at.h4x.amsprung.room.model.Stop;
+import at.h4x.amsprung.util.MinLog;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+
+/**
+ * Created by uniq on 26.04.17.
+ */
+
+public class MonitorInfosForStopAsyncTask extends WienerLinienApiAsyncTask<Stop, Void, List<MonitorInfoAsyncTask.MonitorInfo>>{
+
+    private final OkHttpClient okHttpClient;
+    private final Gson gson;
+
+    public MonitorInfosForStopAsyncTask(OkHttpClient okHttpClient, Gson gson) {
+        this.okHttpClient = okHttpClient;
+        this.gson = gson;
+    }
+
+    @Override
+    protected List<MonitorInfoAsyncTask.MonitorInfo> doInBackground(Stop... params) {
+        List<MonitorInfoAsyncTask.MonitorInfo> monitorInfos = new ArrayList<MonitorInfoAsyncTask.MonitorInfo>();
+        if (params != null && params.length == 1) {
+            Stop stop = params[0];
+            if (stop != null && stop.getId() != 0) {
+                final String url = API_BASE_URL + "?diva="
+                        + stop.getId()
+                        + "&activateTrafficInfo=stoerungkurz&activateTrafficInfo=stoerunglang&activateTrafficInfo=aufzugsinfo";
+                MinLog.v("url: %s", url);
+
+                Request request = new Request.Builder().url(url).build();
+                try {
+                    Response response = okHttpClient.newCall(request).execute();
+                    String responseString = response.body().string();
+                    MinLog.v("response: %s", responseString);
+                    MonitorInfoAsyncTask.MonitorInfo i = gson.fromJson(responseString, MonitorInfoAsyncTask.MonitorInfo.class);
+                    if (i != null){
+                        monitorInfos.add(i);
+                    }
+                } catch (IOException e) {
+                    MinLog.e(e, "http request failed (url: '" + url + "')");
+                }
+            }
+        }
+        return monitorInfos;
+    }
+}
