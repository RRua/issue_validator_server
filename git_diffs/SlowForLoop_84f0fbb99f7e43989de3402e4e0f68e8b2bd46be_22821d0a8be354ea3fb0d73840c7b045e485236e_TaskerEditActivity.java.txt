diff --git a/app/src/main/java/com/termux/tasker/AbstractPluginActivity.java b/app/src/main/java/com/termux/tasker/AbstractPluginActivity.java
index 09cfc0a..d0dfe49 100644
--- a/app/src/main/java/com/termux/tasker/AbstractPluginActivity.java
+++ b/app/src/main/java/com/termux/tasker/AbstractPluginActivity.java
@@ -1,22 +1,14 @@
 package com.termux.tasker;
 
-import android.annotation.TargetApi;
-import android.app.ActionBar;
-import android.app.Activity;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.Log;
+import android.support.v7.app.AppCompatActivity;
 import android.view.Menu;
 import android.view.MenuItem;
 
-import com.twofortyfouram.locale.BreadCrumber;
-
 /**
  * Superclass for plug-in Activities. This class takes care of initializing aspects of the plug-in's UI to
  * look more integrated with the plug-in host.
  */
-public abstract class AbstractPluginActivity extends Activity {
+public abstract class AbstractPluginActivity extends AppCompatActivity {
 
     /**
      * Flag boolean that can only be set to true via the "Don't Save" menu item in
@@ -27,68 +19,26 @@ public abstract class AbstractPluginActivity extends Activity {
      */
     protected boolean mIsCancelled = false;
 
-    @Override
-    protected void onCreate(final Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        CharSequence callingApplicationLabel = null;
-        try {
-            callingApplicationLabel =
-                    getPackageManager().getApplicationLabel(getPackageManager().getApplicationInfo(getCallingPackage(),
-                            0));
-        } catch (final NameNotFoundException e) {
-            Log.e(Constants.LOG_TAG, "Calling package couldn't be found", e); //$NON-NLS-1$
-        }
-        if (null != callingApplicationLabel) {
-            setTitle(callingApplicationLabel);
-        }
-    }
-
     @Override
     public boolean onCreateOptionsMenu(final Menu menu) {
         super.onCreateOptionsMenu(menu);
-        // FIXME: getMenuInflater().inflate(R.menu.twofortyfouram_locale_help_save_dontsave, menu);
-        setupActionBar();
+        getMenuInflater().inflate(R.menu.twofortyfouram_locale_save_dontsave, menu);
         return true;
     }
 
-    private void setupActionBar() {
-        final CharSequence subtitle = BreadCrumber.generateBreadcrumb(getApplicationContext(), getIntent(),
-                getString(R.string.app_name));
-
-        final ActionBar actionBar = getActionBar();
-        actionBar.setSubtitle(subtitle);
-        actionBar.setDisplayHomeAsUpEnabled(true);
-
-        /*
-         * Note: There is a small TOCTOU error here, in that the host could be uninstalled right after
-         * launching the plug-in. That would cause getApplicationIcon() to return the default application
-         * icon. It won't fail, but it will return an incorrect icon.
-         *
-         * In practice, the chances that the host will be uninstalled while the plug-in UI is running are very
-         * slim.
-         */
-        try {
-            actionBar.setIcon(getPackageManager().getApplicationIcon(getCallingPackage()));
-        } catch (final NameNotFoundException e) {
-            Log.w(Constants.LOG_TAG, "An error occurred loading the host's icon", e);
-        }
-    }
-
     @Override
-    public boolean onMenuItemSelected(final int featureId, final MenuItem item) {
-        final int id = item.getItemId();
-
-        if (android.R.id.home == id) {
-            finish();
-            return true;
-        } else if (/*R.id.twofortyfouram_locale_menu_dontsave FIXME*/ -44445 == id) {
-            mIsCancelled = true;
-            finish();
-            return true;
-        } else if (/*R.id.twofortyfouram_locale_menu_save FIXME*/ -44445 == id) {
-            finish();
-            return true;
+    public boolean onOptionsItemSelected(final MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                finish();
+                return true;
+            case R.id.twofortyfouram_locale_menu_dontsave:
+                mIsCancelled = true;
+                finish();
+                return true;
+            case R.id.twofortyfouram_locale_menu_save:
+                finish();
+                return true;
         }
 
         return super.onOptionsItemSelected(item);
diff --git a/app/src/main/java/com/termux/tasker/TaskerEditActivity.java b/app/src/main/java/com/termux/tasker/EditConfigurationActivity.java
similarity index 64%
rename from app/src/main/java/com/termux/tasker/TaskerEditActivity.java
rename to app/src/main/java/com/termux/tasker/EditConfigurationActivity.java
index ab978f0..4699ae0 100644
--- a/app/src/main/java/com/termux/tasker/TaskerEditActivity.java
+++ b/app/src/main/java/com/termux/tasker/EditConfigurationActivity.java
@@ -4,9 +4,12 @@ import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.v7.app.ActionBar;
+import android.text.Editable;
+import android.text.TextWatcher;
 import android.widget.ArrayAdapter;
+import android.widget.AutoCompleteTextView;
 import android.widget.CheckBox;
-import android.widget.Spinner;
 
 import java.io.File;
 
@@ -20,22 +23,26 @@ import java.io.File;
  * a previously saved plug-in instance that the user is editing.</li>
  * </ul>
  */
-public final class TaskerEditActivity extends AbstractPluginActivity {
+public final class EditConfigurationActivity extends AbstractPluginActivity {
 
-    public static final File TASKER_DIR = new File("/data/data/com.termux/files/home/.tasker/");
+    public static final File TASKER_DIR = new File("/data/data/com.termux/files/home/.termux/tasker/");
 
-    private Spinner mExecutableSpinner;
+    private AutoCompleteTextView mExecutableText;
     private CheckBox mInTerminalCheckbox;
 
     @Override
     protected void onCreate(final Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        ActionBar actionBar = getSupportActionBar();
+        actionBar.setTitle(R.string.app_name);
+        actionBar.setDisplayHomeAsUpEnabled(true);
+
         if (!(TASKER_DIR.exists() && TASKER_DIR.isDirectory() && TASKER_DIR.listFiles().length > 0)) {
             mIsCancelled = true;
             new AlertDialog.Builder(this)
-                    .setTitle("No ~/.tasker directory")
-                    .setMessage("You need to create a ~/.tasker directory containing scripts to be executed.")
+                    .setTitle(R.string.no_tasker_folder_title)
+                    .setMessage(R.string.no_tasker_folder_message)
                     .setPositiveButton(android.R.string.ok, null)
                     .setOnDismissListener(new DialogInterface.OnDismissListener() {
                         @Override
@@ -49,31 +56,50 @@ public final class TaskerEditActivity extends AbstractPluginActivity {
 
         setContentView(R.layout.edit_activity);
 
+
         final Intent intent = getIntent();
         BundleScrubber.scrub(intent);
         final Bundle localeBundle = intent.getBundleExtra(com.twofortyfouram.locale.Intent.EXTRA_BUNDLE);
         BundleScrubber.scrub(localeBundle);
 
-        mExecutableSpinner = (Spinner) findViewById(R.id.executable_path);
+        mExecutableText = (AutoCompleteTextView) findViewById(R.id.executable_path);
         mInTerminalCheckbox = (CheckBox) findViewById(R.id.in_terminal);
 
-        File[] files = TASKER_DIR.listFiles();
-        String[] fileNames = new String[files.length];
+        final File[] files = TASKER_DIR.listFiles();
+        final String[] fileNames = new String[files.length];
         for (int i = 0; i < files.length; i++) fileNames[i] = files[i].getName();
 
-        ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, fileNames);
-        spinnerArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        mExecutableSpinner.setAdapter(spinnerArrayAdapter);
+        mExecutableText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+                final String currentValue = editable.toString();
+                for (String s : fileNames) {
+                    if (s.equals(currentValue)) {
+                        mExecutableText.setError(null);
+                        return;
+                    }
+                }
+                mExecutableText.setError("No such file");
+            }
+        });
+
+        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_dropdown_item_1line, fileNames);
+        mExecutableText.setAdapter(adapter);
 
         if (savedInstanceState == null) {
             if (PluginBundleManager.isBundleValid(localeBundle)) {
                 final String selectedExecutable = localeBundle.getString(PluginBundleManager.EXTRA_EXECUTABLE);
-                for (int i = 0; i < fileNames.length; i++) {
-                    if (fileNames[i].equals(selectedExecutable)) {
-                        mExecutableSpinner.setSelection(i);
-                        break;
-                    }
-                }
+                mExecutableText.setText(selectedExecutable);
                 final boolean inTerminal = localeBundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL);
                 mInTerminalCheckbox.setChecked(inTerminal);
             }
@@ -83,7 +109,7 @@ public final class TaskerEditActivity extends AbstractPluginActivity {
     @Override
     public void finish() {
         if (!isCanceled()) {
-            final String executable = mExecutableSpinner.getSelectedItem().toString();
+            final String executable = mExecutableText.getText().toString();
             final boolean inTerminal = mInTerminalCheckbox.isChecked();
 
             if (executable.length() > 0) {
@@ -100,7 +126,7 @@ public final class TaskerEditActivity extends AbstractPluginActivity {
                 final Bundle resultBundle = PluginBundleManager.generateBundle(getApplicationContext(), executable, inTerminal);
 
                 // The blurb is a concise status text to be displayed in the host's UI.
-                final String blurb = generateBlurb(executable);
+                final String blurb = generateBlurb(executable, inTerminal);
 
                 resultIntent.putExtra(com.twofortyfouram.locale.Intent.EXTRA_BUNDLE, resultBundle);
                 resultIntent.putExtra(com.twofortyfouram.locale.Intent.EXTRA_STRING_BLURB, blurb);
@@ -115,10 +141,10 @@ public final class TaskerEditActivity extends AbstractPluginActivity {
      * @param executable The toast message to be displayed by the plug-in. Cannot be null.
      * @return A blurb for the plug-in.
      */
-    static String generateBlurb(final String executable) {
-        // context.getResources().getInteger(R.integer.twofortyfouram_locale_maximum_blurb_length);
-        String message = "Execute ~/.tasker/" + executable;
-        final int maxBlurbLength = 60;
+    String generateBlurb(final String executable, boolean inTerminal) {
+        final int stringResource = inTerminal ? R.string.blurb_in_terminal : R.string.blurb_in_background;
+        final String message = getString(stringResource, executable);
+        final int maxBlurbLength = 60; // R.integer.twofortyfouram_locale_maximum_blurb_length.
         return (message.length() > maxBlurbLength) ? message.substring(0, maxBlurbLength) : message;
     }
 
diff --git a/app/src/main/java/com/termux/tasker/FireReceiver.java b/app/src/main/java/com/termux/tasker/FireReceiver.java
index 1c145b8..53bc7fa 100644
--- a/app/src/main/java/com/termux/tasker/FireReceiver.java
+++ b/app/src/main/java/com/termux/tasker/FireReceiver.java
@@ -33,7 +33,7 @@ public final class FireReceiver extends BroadcastReceiver {
         final String executable = bundle.getString(PluginBundleManager.EXTRA_EXECUTABLE);
         final boolean inTerminal = bundle.getBoolean(PluginBundleManager.EXTRA_TERMINAL);
 
-        File executableFile = new File(TaskerEditActivity.TASKER_DIR, executable);
+        File executableFile = new File(EditConfigurationActivity.TASKER_DIR, executable);
         if (!executableFile.isFile()) {
             String message = "Termux:Tasker - no such executable:\n" + executable;
             Toast.makeText(context, message, Toast.LENGTH_LONG).show();
diff --git a/app/src/main/java/com/termux/tasker/PluginBundleManager.java b/app/src/main/java/com/termux/tasker/PluginBundleManager.java
index 9d87bbc..4b4ab2b 100644
--- a/app/src/main/java/com/termux/tasker/PluginBundleManager.java
+++ b/app/src/main/java/com/termux/tasker/PluginBundleManager.java
@@ -8,7 +8,7 @@ import android.util.Log;
 /**
  * Class for managing the {@link com.twofortyfouram.locale.Intent#EXTRA_BUNDLE} for this plug-in.
  */
-public final class PluginBundleManager {
+final class PluginBundleManager {
 
     /**
      * Type: {@code String}.
diff --git a/app/src/main/java/com/termux/tasker/TaskerPlugin.java b/app/src/main/java/com/termux/tasker/TaskerPlugin.java
index c64803a..9a52d3b 100644
--- a/app/src/main/java/com/termux/tasker/TaskerPlugin.java
+++ b/app/src/main/java/com/termux/tasker/TaskerPlugin.java
@@ -45,7 +45,7 @@ import java.net.URISyntaxException;
 import java.security.SecureRandom;
 import java.util.regex.Pattern;
 
-public class TaskerPlugin {
+class TaskerPlugin {
 
     private final static String TAG = "TaskerPlugin";
 
diff --git a/app/src/main/java/com/twofortyfouram/locale/BreadCrumber.java b/app/src/main/java/com/twofortyfouram/locale/BreadCrumber.java
deleted file mode 100644
index 448dfb1..0000000
--- a/app/src/main/java/com/twofortyfouram/locale/BreadCrumber.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright 2013 two forty four a.m. LLC <http://www.twofortyfouram.com>
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- * <http://www.apache.org/licenses/LICENSE-2.0>
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and limitations under the License.
- */
-
-package com.twofortyfouram.locale;
-
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-
-import com.termux.tasker.R;
-
-/**
- * Utility class to generate a breadcrumb title string for {@code Activity} instances in Locale.
- * <p>
- * This class cannot be instantiated.
- */
-public final class BreadCrumber {
-    /**
-     * Static helper method to generate bread crumbs. Bread crumb strings will be properly formatted for the
-     * current language, including right-to-left languages, as long as the proper string
-     * resources have been created.
-     *
-     * @param context      {@code Context} for loading platform resources. Cannot be null.
-     * @param intent       {@code Intent} to extract the bread crumb from.
-     * @param currentCrumb The last element of the bread crumb path.
-     * @return {@code String} presentation of the bread crumb. If the intent parameter is null, then this
-     * method returns currentCrumb. If currentCrumb is null, then this method returns the empty string
-     * "". If intent contains a private Serializable instances as an extra, then this method returns
-     * the empty string "".
-     * @throws IllegalArgumentException if {@code context} is null.
-     */
-    public static CharSequence generateBreadcrumb(final Context context, final Intent intent,
-                                                  final String currentCrumb) {
-        if (null == context) {
-            throw new IllegalArgumentException("context cannot be null"); //$NON-NLS-1$
-        }
-
-        try {
-            if (null == currentCrumb) {
-                Log.w("termux-tasker", "currentCrumb cannot be null"); //$NON-NLS-1$
-                return ""; //$NON-NLS-1$
-            }
-            if (null == intent) {
-                Log.w(Constants.LOG_TAG, "intent cannot be null"); //$NON-NLS-1$
-                return currentCrumb;
-            }
-
-            /*
-             * Note: this is vulnerable to a private serializable attack, but the try-catch will solve that.
-             */
-            final String breadcrumbString = intent.getStringExtra(com.twofortyfouram.locale.Intent.EXTRA_STRING_BREADCRUMB);
-            if (null != breadcrumbString) {
-                return context.getString(R.string.twofortyfouram_locale_breadcrumb_format, breadcrumbString, context.getString(R.string.twofortyfouram_locale_breadcrumb_separator), currentCrumb);
-            }
-            return currentCrumb;
-        } catch (final Exception e) {
-            Log.e(Constants.LOG_TAG, "Encountered error generating breadcrumb", e); //$NON-NLS-1$
-            return ""; //$NON-NLS-1$
-        }
-    }
-
-    /**
-     * Private constructor prevents instantiation.
-     *
-     * @throws UnsupportedOperationException because this class cannot be instantiated.
-     */
-    private BreadCrumber() {
-        throw new UnsupportedOperationException("This class is non-instantiable"); //$NON-NLS-1$
-    }
-}
\ No newline at end of file
