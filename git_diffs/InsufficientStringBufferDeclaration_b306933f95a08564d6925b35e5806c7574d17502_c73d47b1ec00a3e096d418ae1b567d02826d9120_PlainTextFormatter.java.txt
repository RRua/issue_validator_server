diff --git a/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.java b/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.java
deleted file mode 100644
index 5e90e717..00000000
--- a/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the GNU Public License v3.0
- * which accompanies this distribution, and is available at
- * http://www.gnu.org/licenses/gpl.html
- */
-
-package at.bitfire.davdroid.log;
-
-import android.util.Log;
-
-import org.apache.commons.lang3.math.NumberUtils;
-
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.LogRecord;
-
-public class LogcatHandler extends Handler {
-    private static final int MAX_LINE_LENGTH = 3000;
-    public static final LogcatHandler INSTANCE = new LogcatHandler();
-
-    private LogcatHandler() {
-        super();
-        setFormatter(PlainTextFormatter.LOGCAT);
-        setLevel(Level.ALL);
-    }
-
-    @Override
-    public void publish(LogRecord r) {
-        String text = getFormatter().format(r);
-        int level = r.getLevel().intValue();
-
-        int end = text.length();
-        for (int pos = 0; pos < end; pos += MAX_LINE_LENGTH) {
-            String line = text.substring(pos, NumberUtils.min(pos + MAX_LINE_LENGTH, end));
-
-            if (level >= Level.SEVERE.intValue())
-                Log.e(r.getLoggerName(), line);
-            else if (level >= Level.WARNING.intValue())
-                Log.w(r.getLoggerName(), line);
-            else if (level >= Level.CONFIG.intValue())
-                Log.i(r.getLoggerName(), line);
-            else if (level >= Level.FINER.intValue())
-                Log.d(r.getLoggerName(), line);
-            else
-                Log.v(r.getLoggerName(), line);
-        }
-    }
-
-    @Override
-    public void flush() {
-    }
-
-    @Override
-    public void close() {
-    }
-
-}
diff --git a/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.kt b/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.kt
new file mode 100644
index 00000000..86fbea90
--- /dev/null
+++ b/app/src/main/java/at/bitfire/davdroid/log/LogcatHandler.kt
@@ -0,0 +1,50 @@
+/*
+ * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the GNU Public License v3.0
+ * which accompanies this distribution, and is available at
+ * http://www.gnu.org/licenses/gpl.html
+ */
+
+package at.bitfire.davdroid.log
+
+import android.util.Log
+
+import org.apache.commons.lang3.math.NumberUtils
+
+import java.util.logging.Handler
+import java.util.logging.Level
+import java.util.logging.LogRecord
+
+object LogcatHandler: Handler() {
+
+    private val MAX_LINE_LENGTH = 3000
+
+    init {
+        formatter = PlainTextFormatter.LOGCAT
+        level = Level.ALL
+    }
+
+    override fun publish(r: LogRecord) {
+        val text = formatter.format(r)
+        val level = r.level.intValue()
+
+        val end = text.length
+        var pos = 0
+        while (pos < end) {
+            val line = text.substring(pos, NumberUtils.min(pos + MAX_LINE_LENGTH, end))
+            when {
+                level >= Level.SEVERE.intValue()  -> Log.e(r.loggerName, line)
+                level >= Level.WARNING.intValue() -> Log.w(r.loggerName, line)
+                level >= Level.CONFIG.intValue()  -> Log.i(r.loggerName, line)
+                level >= Level.FINER.intValue()   -> Log.d(r.loggerName, line)
+                else                              -> Log.v(r.loggerName, line)
+            }
+            pos += MAX_LINE_LENGTH
+        }
+    }
+
+    override fun flush() {}
+    override fun close() {}
+
+}
diff --git a/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.java b/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.java
deleted file mode 100644
index 538302a0..00000000
--- a/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the GNU Public License v3.0
- * which accompanies this distribution, and is available at
- * http://www.gnu.org/licenses/gpl.html
- */
-
-package at.bitfire.davdroid.log;
-
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.exception.ExceptionUtils;
-import org.apache.commons.lang3.time.DateFormatUtils;
-
-import java.util.logging.Formatter;
-import java.util.logging.LogRecord;
-
-public class PlainTextFormatter extends Formatter {
-    public final static PlainTextFormatter
-            LOGCAT = new PlainTextFormatter(true),
-            DEFAULT = new PlainTextFormatter(false);
-
-    private final boolean logcat;
-
-    private PlainTextFormatter(boolean onLogcat) {
-        this.logcat = onLogcat;
-    }
-
-    @Override
-    @SuppressWarnings("ThrowableResultOfMethodCallIgnored")
-    public String format(LogRecord r) {
-        StringBuilder builder = new StringBuilder();
-
-        if (!logcat)
-            builder .append(DateFormatUtils.format(r.getMillis(), "yyyy-MM-dd HH:mm:ss"))
-                    .append(" ").append(r.getThreadID()).append(" ");
-
-        if (!r.getSourceClassName().replaceFirst("\\$.*", "").equals(r.getLoggerName())) {
-            String className = shortClassName(r.getSourceClassName());
-            if (!className.equals("ical4android.AndroidAppender"))
-                builder.append("[").append(className).append("] ");
-        }
-
-        builder.append(r.getMessage());
-
-        if (r.getThrown() != null)
-            builder .append("\nEXCEPTION ")
-                    .append(ExceptionUtils.getStackTrace(r.getThrown()));
-
-        if (r.getParameters() != null) {
-            int idx = 1;
-            for (Object param : r.getParameters())
-                builder.append("\n\tPARAMETER #").append(idx++).append(" = ").append(param);
-        }
-
-        if (!logcat)
-            builder.append("\n");
-
-        return builder.toString();
-    }
-
-    private String shortClassName(String className) {
-        String s = StringUtils.replace(className, "at.bitfire.davdroid.", "");
-        return StringUtils.replace(s, "at.bitfire.", "");
-    }
-
-}
diff --git a/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.kt b/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.kt
new file mode 100644
index 00000000..e4583824
--- /dev/null
+++ b/app/src/main/java/at/bitfire/davdroid/log/PlainTextFormatter.kt
@@ -0,0 +1,60 @@
+/*
+ * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the GNU Public License v3.0
+ * which accompanies this distribution, and is available at
+ * http://www.gnu.org/licenses/gpl.html
+ */
+
+package at.bitfire.davdroid.log
+
+import org.apache.commons.lang3.exception.ExceptionUtils
+import org.apache.commons.lang3.time.DateFormatUtils
+import java.util.logging.Formatter
+import java.util.logging.LogRecord
+
+class PlainTextFormatter private constructor(
+        val logcat: Boolean
+): Formatter() {
+
+    companion object {
+        @JvmField val LOGCAT = PlainTextFormatter(true)
+        @JvmField val DEFAULT = PlainTextFormatter(false)
+    }
+
+    override fun format(r: LogRecord): String {
+        val builder = StringBuilder()
+
+        if (!logcat)
+            builder .append(DateFormatUtils.format(r.millis, "yyyy-MM-dd HH:mm:ss"))
+                    .append(" ").append(r.threadID).append(" ")
+
+        if (r.sourceClassName.replaceFirst("\\$.*", "") != r.loggerName) {
+            val className = shortClassName(r.sourceClassName)
+            if (className != "ical4android.AndroidAppender")
+                builder.append("[").append(className).append("] ")
+        }
+
+        builder.append(r.message)
+
+        r.thrown?.let {
+            builder .append("\nEXCEPTION ")
+                    .append(ExceptionUtils.getStackTrace(it))
+        }
+
+        r.parameters?.let {
+            for ((idx, param) in it.withIndex())
+                builder.append("\n\tPARAMETER #").append(idx).append(" = ").append(param)
+        }
+
+        if (!logcat)
+            builder.append("\n")
+
+        return builder.toString()
+    }
+
+    private fun shortClassName(className: String) = className
+            .replace("at.bitfire.davdroid.", "")
+            .replace("at.bitfire.", "")
+
+}
diff --git a/app/src/main/java/at/bitfire/davdroid/log/StringHandler.java b/app/src/main/java/at/bitfire/davdroid/log/StringHandler.java
deleted file mode 100644
index 96095311..00000000
--- a/app/src/main/java/at/bitfire/davdroid/log/StringHandler.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the GNU Public License v3.0
- * which accompanies this distribution, and is available at
- * http://www.gnu.org/licenses/gpl.html
- */
-
-package at.bitfire.davdroid.log;
-
-import java.util.logging.Handler;
-import java.util.logging.LogRecord;
-
-public class StringHandler extends Handler {
-
-    StringBuilder builder = new StringBuilder();
-
-    public StringHandler() {
-        super();
-        setFormatter(PlainTextFormatter.DEFAULT);
-    }
-
-    @Override
-    public void publish(LogRecord record) {
-        builder.append(getFormatter().format(record));
-    }
-
-    @Override
-    public void flush() {
-    }
-
-    @Override
-    public void close() {
-    }
-
-    @Override
-    public String toString() {
-        return builder.toString();
-    }
-}
diff --git a/app/src/main/java/at/bitfire/davdroid/log/StringHandler.kt b/app/src/main/java/at/bitfire/davdroid/log/StringHandler.kt
new file mode 100644
index 00000000..5818fef2
--- /dev/null
+++ b/app/src/main/java/at/bitfire/davdroid/log/StringHandler.kt
@@ -0,0 +1,31 @@
+/*
+ * Copyright © 2013 – 2016 Ricki Hirner (bitfire web engineering).
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the GNU Public License v3.0
+ * which accompanies this distribution, and is available at
+ * http://www.gnu.org/licenses/gpl.html
+ */
+
+package at.bitfire.davdroid.log
+
+import java.util.logging.Handler;
+import java.util.logging.LogRecord;
+
+class StringHandler: Handler() {
+
+    val builder = StringBuilder()
+
+    init {
+        formatter = PlainTextFormatter.DEFAULT
+    }
+
+    override fun publish(record: LogRecord) {
+        builder.append(formatter.format(record))
+    }
+
+    override fun flush() {}
+    override fun close() {}
+
+    override fun toString() = builder.toString()
+
+}
