diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
index c93def156..14a707136 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/Database.java
@@ -33,7 +33,6 @@ import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.convertStrin
 import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.convertStringToStati;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.addNovel;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterIDFromChapterURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterURLFromChapterID;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getFormatterIDFromChapterID;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromChapterID;
 import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
@@ -1305,7 +1304,7 @@ public class Database {
                 throw new Exception("Dates implemented wrongly");
             Log.i("UL", "Getting dates between [" + new DateTime(date1) + "] and [" + new DateTime(date2) + "]");
             Cursor cursor = sqLiteDatabase.rawQuery(
-                    "SELECT " + Columns.PARENT_ID + "," + Columns.TIME + " from " + Tables.UPDATES +
+                    "SELECT " + Columns.ID + "," + Columns.PARENT_ID + "," + Columns.TIME + " from " + Tables.UPDATES +
                             " where " + Columns.TIME + "<" + date2 + " and " + Columns.TIME + ">=" + date1, null);
 
 
@@ -1315,13 +1314,11 @@ public class Database {
                 return new ArrayList<>();
             } else {
                 while (cursor.moveToNext()) {
-                    int id = cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString()));
-                    int parentID = getNovelIDFromChapterID(id);
-                    novelCards.add(new Update(
-                            getNovelURLfromNovelID(parentID),
-                            getChapterURLFromChapterID(id),
-                            cursor.getLong(cursor.getColumnIndex(Columns.TIME.toString())),
-                            id, parentID));
+                    novelCards.add(
+                            new Update(cursor.getInt(cursor.getColumnIndex(Columns.ID.toString())),
+                                    cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString())),
+                                    cursor.getLong(cursor.getColumnIndex(Columns.TIME.toString())))
+                    );
                 }
                 cursor.close();
                 return novelCards;
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java
index 738a5f66d..a62fa566e 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java
@@ -1,7 +1,5 @@
 package com.github.doomsdayrs.apps.shosetsu.backend.database.objects;
 
-import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base.BaseChapter;
-
 /*
  * This file is part of Shosetsu.
  *
@@ -23,11 +21,14 @@ import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base.BaseCha
  *
  * @author github.com/doomsdayrs
  */
-public class Update extends BaseChapter {
+public class Update {
     public final int chapterID;
+    public final int novelID;
+    public final long date;
 
-    public Update(String novel_url, String chapter_url, long time, int chapterID, int novelID) {
-        super(novel_url, chapter_url);
+    public Update(int chapterID, int novelID, long date) {
         this.chapterID = chapterID;
+        this.novelID = novelID;
+        this.date = date;
     }
 }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
index 6f572d8cc..091b1c6ea 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
@@ -54,6 +54,9 @@ import java.util.*
  * @author github.com/doomsdayrs
  */
 class NovelFragment : Fragment() {
+    // This is a never before loaded novel
+    var new: Boolean = true
+
     @JvmField
     var novelID = -2
     @JvmField
@@ -105,6 +108,7 @@ class NovelFragment : Fragment() {
         outState.putString("novelURL", novelURL)
         outState.putInt("formatter", formatter!!.formatterID)
         outState.putInt("status", status.a)
+        outState.putBoolean("new", new)
     }
 
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
@@ -131,6 +135,7 @@ class NovelFragment : Fragment() {
                     fragment_novel_tabLayout!!.post { NewNovelLoader(novelURL, novelID, formatter!!, this, true).execute() }
             } else {
                 novelPage = Database.DatabaseNovels.getNovelPage(novelID)
+                new = false
                 //   novelChapters = DatabaseChapter.getChapters(novelID)
                 status = Database.DatabaseNovels.getStatus(novelID)
                 if (activity != null && activity!!.actionBar != null) activity!!.actionBar!!.title = novelPage.title
@@ -142,6 +147,7 @@ class NovelFragment : Fragment() {
             formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))
             status = Status.getStatus(savedInstanceState.getInt("status"))
             novelPage = Database.DatabaseNovels.getNovelPage(novelID)
+            new = savedInstanceState.getBoolean("new")
             setViewPager()
         }
     }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
index e60b7eec0..82e7cd0f8 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
@@ -85,7 +85,11 @@ class NovelFragmentChapters : Fragment() {
                         if (Database.DatabaseChapter.isNotInChapters(novelChapter.link)) {
                             Log.i("ChapterLoader", "Adding ${novelChapter.link}")
                             Database.DatabaseChapter.addToChapters(novelFragment!!.novelID, novelChapter)
-                        } else updateChapter(novelChapter)
+                            if (!novelFragment!!.new)
+                                Database.DatabaseUpdates.addToUpdates(novelFragment!!.novelID, novelChapter.link, System.currentTimeMillis())
+                        } else {
+                            updateChapter(novelChapter)
+                        }
                     } else Log.e("ChapterLoader", "Invalid novelID")
                 }
             }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.java
deleted file mode 100644
index b0188002d..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update;
-import com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters.UpdatedChaptersAdapter;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.getTimeBetween;
-
-/**
- * shosetsu
- * 20 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class UpdateFragment extends Fragment {
-    public long date = -1;
-    private final ArrayList<String> novels = new ArrayList<>();
-
-    @NonNull
-    private ArrayList<Update> updates = new ArrayList<>();
-    private RecyclerView recyclerView;
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState) {
-        outState.putLong("date", date);
-    }
-
-    public void setDate(long date) {
-        this.date = date;
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.updates_list, container, false);
-        if (date == -1)
-            if (savedInstanceState != null)
-                date = savedInstanceState.getLong("date");
-
-        try {
-            updates = getTimeBetween(date, date + 86399999);
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        for (Update update : updates)
-            if (!novels.contains(update.NOVEL_URL))
-                novels.add(update.NOVEL_URL);
-
-        recyclerView = view.findViewById(R.id.recycler_update);
-        chapterSetUp();
-
-        Log.d("Updates on this day: ", "" + updates.size());
-        return view;
-    }
-
-    private void chapterSetUp() {
-        if (recyclerView != null) {
-            UpdatedChaptersAdapter updatersAdapter = new UpdatedChaptersAdapter(updates, getActivity());
-            recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
-            recyclerView.setAdapter(updatersAdapter);
-            recyclerView.post(updatersAdapter::notifyDataSetChanged);
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.kt
new file mode 100644
index 000000000..47d6bbef6
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdateFragment.kt
@@ -0,0 +1,78 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates
+
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.fragment.app.Fragment
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates
+import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters.UpdatedNovelsAdapter
+import java.util.*
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 20 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdateFragment : Fragment() {
+    @JvmField
+    var date: Long = -1
+    private val novels = ArrayList<Int>()
+    private var updates = ArrayList<Update>()
+    private var recyclerView: RecyclerView? = null
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        outState.putLong("date", date)
+    }
+
+    fun setDate(date: Long) {
+        this.date = date
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        val view = inflater.inflate(R.layout.updates_list, container, false)
+        if (date == -1L) if (savedInstanceState != null) date = savedInstanceState.getLong("date")
+        try {
+            updates = DatabaseUpdates.getTimeBetween(date, date + 86399999)
+        } catch (e: Exception) {
+            e.printStackTrace()
+        }
+        for (update in updates) if (!novels.contains(update.novelID)) novels.add(update.novelID)
+        recyclerView = view.findViewById(R.id.recycler_update)
+        chapterSetUp()
+        Log.d("Updates on this day: ", "" + updates.size)
+        return view
+    }
+
+    private fun chapterSetUp() {
+        if (recyclerView != null && activity != null) {
+            val updatedNovelsAdapter = UpdatedNovelsAdapter(novels, updates, activity!!)
+            //UpdatedChaptersAdapter updatersAdapter = new UpdatedChaptersAdapter(updates, getActivity());
+            recyclerView!!.layoutManager = LinearLayoutManager(context)
+            recyclerView!!.adapter = updatedNovelsAdapter
+            recyclerView!!.post { updatedNovelsAdapter.notifyDataSetChanged() }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.java
deleted file mode 100644
index 6197f8949..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.java
+++ /dev/null
@@ -1,149 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates;
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 15 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentPagerAdapter;
-import androidx.viewpager.widget.ViewPager;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Update_Manager;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters.UpdatedDaysPager;
-import com.google.android.material.tabs.TabLayout;
-
-import org.joda.time.DateTime;
-
-import java.util.ArrayList;
-import java.util.Collections;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setActivityTitle;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.getCountBetween;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.getStartingDay;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.getTotalDays;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.trimDate;
-
-public class UpdatesFragment extends Fragment {
-
-
-    private TabLayout tabLayout;
-    private ViewPager viewPager;
-
-
-    public UpdatesFragment() {
-        setHasOptionsMenu(true);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        if (item.getItemId() == R.id.updater_now) {
-            if (getContext() != null) {
-                Update_Manager.init(Database.DatabaseNovels.getIntLibrary(), getContext());
-                return true;
-            } else return false;
-        }
-        return false;
-    }
-
-    @Override
-    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.toolbar_updater, menu);
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment_update, container, false);
-        setActivityTitle(getActivity(), "Updates");
-        viewPager = view.findViewById(R.id.viewpager);
-        tabLayout = view.findViewById(R.id.tabLayout);
-
-        setViewPager();
-        return view;
-    }
-
-    private void setViewPager() {
-        ArrayList<UpdateFragment> updatesFragments = new ArrayList<>();
-        int days = getTotalDays();
-        Log.d("TotalDays", String.valueOf(days));
-        long startTime = getStartingDay();
-        Log.d("StartingDay", new DateTime(startTime).toString());
-
-        for (int x = 0; x < days; x++) {
-            UpdateFragment updateFragment = new UpdateFragment();
-            updateFragment.setDate(startTime);
-            startTime += 86400000;
-            updatesFragments.add(updateFragment);
-        }
-        // Removing empty days
-
-        for (int x = updatesFragments.size() - 1; x > 0; x--) {
-            UpdateFragment updateFragment = updatesFragments.get(x);
-            try {
-                int c = getCountBetween(updateFragment.date, updateFragment.date + 86399999);
-                if (c <= 0) {
-                    updatesFragments.remove(x);
-                }
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
-
-        // TODAY
-        UpdateFragment updateFragment = new UpdateFragment();
-        updateFragment.setDate(trimDate(new DateTime(System.currentTimeMillis())).getMillis());
-        updatesFragments.add(updateFragment);
-
-        Collections.reverse(updatesFragments);
-
-        UpdatedDaysPager pagerAdapter = new UpdatedDaysPager(getChildFragmentManager(), FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, updatesFragments);
-        viewPager.setAdapter(pagerAdapter);
-        viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(tabLayout));
-        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
-            @Override
-            public void onTabSelected(@NonNull TabLayout.Tab tab) {
-                viewPager.setCurrentItem(tab.getPosition());
-            }
-
-            @Override
-            public void onTabUnselected(TabLayout.Tab tab) {
-            }
-
-            @Override
-            public void onTabReselected(TabLayout.Tab tab) {
-
-            }
-        });
-        tabLayout.post(() -> tabLayout.setupWithViewPager(viewPager));
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.kt
new file mode 100644
index 000000000..01c7c5a3d
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/UpdatesFragment.kt
@@ -0,0 +1,114 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates
+
+import android.os.Bundle
+import android.util.Log
+import android.view.*
+import androidx.fragment.app.Fragment
+import androidx.fragment.app.FragmentPagerAdapter
+import androidx.viewpager.widget.ViewPager
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Update_Manager
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters.UpdatedDaysPager
+import com.google.android.material.tabs.TabLayout
+import com.google.android.material.tabs.TabLayout.OnTabSelectedListener
+import com.google.android.material.tabs.TabLayout.TabLayoutOnPageChangeListener
+import org.joda.time.DateTime
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+/**
+ * shosetsu
+ * 15 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdatesFragment : Fragment() {
+    private var tabLayout: TabLayout? = null
+    private var viewPager: ViewPager? = null
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        return if (item.itemId == R.id.updater_now) {
+            if (context != null) {
+                Update_Manager.init(Database.DatabaseNovels.getIntLibrary(), context!!)
+                true
+            } else false
+        } else false
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
+        inflater.inflate(R.menu.toolbar_updater, menu)
+    }
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        val view = inflater.inflate(R.layout.fragment_update, container, false)
+        Utilities.setActivityTitle(activity, "Updates")
+        viewPager = view.findViewById(R.id.viewpager)
+        tabLayout = view.findViewById(R.id.tabLayout)
+        setViewPager()
+        return view
+    }
+
+    private fun setViewPager() {
+        val updatesFragments = ArrayList<UpdateFragment>()
+        val days = DatabaseUpdates.getTotalDays()
+        Log.d("TotalDays", days.toString())
+        var startTime = DatabaseUpdates.getStartingDay()
+        Log.d("StartingDay", DateTime(startTime).toString())
+        for (x in 0 until days) {
+            val updateFragment = UpdateFragment()
+            updateFragment.setDate(startTime)
+            startTime += 86400000
+            updatesFragments.add(updateFragment)
+        }
+        // Removing empty days
+        for (x in updatesFragments.size - 1 downTo 1) {
+            val updateFragment = updatesFragments[x]
+            try {
+                val c = DatabaseUpdates.getCountBetween(updateFragment.date, updateFragment.date + 86399999)
+                if (c <= 0) {
+                    updatesFragments.removeAt(x)
+                }
+            } catch (e: Exception) {
+                e.printStackTrace()
+            }
+        }
+        // TODAY
+        val updateFragment = UpdateFragment()
+        updateFragment.setDate(DatabaseUpdates.trimDate(DateTime(System.currentTimeMillis())).millis)
+        updatesFragments.add(updateFragment)
+        updatesFragments.reverse()
+        val pagerAdapter = UpdatedDaysPager(childFragmentManager, FragmentPagerAdapter.BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT, updatesFragments)
+        viewPager!!.adapter = pagerAdapter
+        viewPager!!.addOnPageChangeListener(TabLayoutOnPageChangeListener(tabLayout))
+        tabLayout!!.addOnTabSelectedListener(object : OnTabSelectedListener {
+            override fun onTabSelected(tab: TabLayout.Tab) {
+                viewPager!!.currentItem = tab.position
+            }
+            override fun onTabUnselected(tab: TabLayout.Tab) {}
+            override fun onTabReselected(tab: TabLayout.Tab) {}
+        })
+        tabLayout!!.post { tabLayout!!.setupWithViewPager(viewPager) }
+    }
+
+    init {
+        setHasOptionsMenu(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.java
deleted file mode 100644
index d571d54d1..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.java
+++ /dev/null
@@ -1,164 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters;
-
-import android.app.Activity;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update;
-import com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder.UpdatedChapterHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
-import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openInBrowser;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openInWebview;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.toggleBookmarkChapter;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterIDFromChapterURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getFormatterIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class UpdatedChaptersAdapter extends RecyclerView.Adapter<UpdatedChapterHolder> {
-    private static int DefaultTextColor;
-    private static boolean set = false;
-
-    private final ArrayList<Update> updates;
-    private final Activity activity;
-
-    public UpdatedChaptersAdapter(ArrayList<Update> updates, Activity activity) {
-        this.updates = updates;
-        this.activity = activity;
-    }
-
-
-    @NonNull
-    @Override
-    public UpdatedChapterHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.update_card, viewGroup, false);
-        UpdatedChapterHolder updatedChapterHolder = new UpdatedChapterHolder(view);
-        if (!set) {
-            DefaultTextColor = updatedChapterHolder.title.getCurrentTextColor();
-            Log.i("TextDefaultColor", String.valueOf(DefaultTextColor));
-            set = !set;
-        }
-        return updatedChapterHolder;
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull UpdatedChapterHolder updatedChapterHolder, int i) {
-        if (updates.get(i).CHAPTER_URL != null)
-            Log.d("Binding", updates.get(i).CHAPTER_URL);
-        NovelChapter novelChapter = DatabaseChapter.getChapter(updates.get(i).chapterID);
-        if (novelChapter != null) {
-            updatedChapterHolder.setNovelChapter(novelChapter);
-            updatedChapterHolder.popupMenu.setOnMenuItemClickListener(menuItem -> {
-                NovelPage novelPage = new NovelPage();
-                String nURL = Database.DatabaseIdentification.getNovelURLFromChapterURL(updatedChapterHolder.novelChapter.getLink());
-
-                if (nURL != null)
-                    novelPage = Database.DatabaseNovels.getNovelPage(getNovelIDFromNovelURL(nURL));
-
-                if (novelPage == null) {
-                    Log.e("DatabaseError", "No such novel in DB");
-                    System.exit(-1);
-                }
-
-                Formatter formatter = DefaultScrapers.getByID(getFormatterIDFromNovelURL(nURL));
-
-                int chapterID = getChapterIDFromChapterURL(novelChapter.getLink());
-                if (novelPage != null)
-                    switch (menuItem.getItemId()) {
-                        case R.id.popup_chapter_menu_bookmark:
-                            if (toggleBookmarkChapter(chapterID))
-                                updatedChapterHolder.title.setTextColor(updatedChapterHolder.itemView.getResources().getColor(R.color.bookmarked));
-                            else {
-                                Log.i("SetDefault", String.valueOf(DefaultTextColor));
-                                updatedChapterHolder.title.setTextColor(DefaultTextColor);
-                            }
-                            notifyDataSetChanged();
-                            return true;
-                        case R.id.popup_chapter_menu_download: {
-                            if (!Database.DatabaseChapter.isSaved(chapterID)) {
-                                DownloadItem downloadItem = new DownloadItem(formatter, novelPage.getTitle(), updatedChapterHolder.novelChapter.getTitle(), chapterID);
-                                Download_Manager.addToDownload(activity, downloadItem);
-                            } else {
-                                if (Download_Manager.delete(updatedChapterHolder.itemView.getContext(), new DownloadItem(formatter, novelPage.getTitle(), updatedChapterHolder.novelChapter.getTitle(), chapterID))) {
-                                    updatedChapterHolder.downloadTag.setVisibility(View.INVISIBLE);
-                                }
-                            }
-                        }
-                        notifyDataSetChanged();
-                        return true;
-
-                        case R.id.popup_chapter_menu_mark_read:
-                            Database.DatabaseChapter.setChapterStatus(chapterID, Status.READ);
-                            notifyDataSetChanged();
-
-                            return true;
-                        case R.id.popup_chapter_menu_mark_unread:
-                            Database.DatabaseChapter.setChapterStatus(chapterID, Status.UNREAD);
-                            notifyDataSetChanged();
-
-                            return true;
-                        case R.id.popup_chapter_menu_mark_reading:
-                            Database.DatabaseChapter.setChapterStatus(chapterID, Status.READING);
-                            notifyDataSetChanged();
-
-                            return true;
-                        case R.id.browser:
-                            if (activity != null)
-                                openInBrowser(activity, updatedChapterHolder.novelChapter.getLink());
-                            return true;
-                        case R.id.webview:
-                            if (activity != null)
-                                openInWebview(activity, updatedChapterHolder.novelChapter.getLink());
-                            return true;
-                        default:
-                            return false;
-                    }
-                return false;
-            });
-            updatedChapterHolder.moreOptions.setOnClickListener(view -> updatedChapterHolder.popupMenu.show());
-        }
-    }
-
-    @Override
-    public int getItemCount() {
-        return updates.size();
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt
new file mode 100644
index 000000000..fca43a051
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt
@@ -0,0 +1,142 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+
+import android.app.Activity
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.MenuItem
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Download_Manager
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.isSaved
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.setChapterStatus
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.*
+import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder.UpdatedChapterHolder
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder.UpdatedNovelHolder
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
+import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem
+import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status
+import java.util.*
+
+/**
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdatedChaptersAdapter(private val updatedNovelHolder: UpdatedNovelHolder) : RecyclerView.Adapter<UpdatedChapterHolder>() {
+    var size: Int = if (updatedNovelHolder.updates.size > 20) 5 else updatedNovelHolder.updates.size
+
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): UpdatedChapterHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.update_card, viewGroup, false)
+        val updatedChapterHolder = UpdatedChapterHolder(view)
+        if (!set) {
+            DefaultTextColor = updatedChapterHolder.title.currentTextColor
+            Log.i("TextDefaultColor", DefaultTextColor.toString())
+            set = !set
+        }
+        return updatedChapterHolder
+    }
+
+    override fun onBindViewHolder(updatedChapterHolder: UpdatedChapterHolder, i: Int) {
+        Log.d("Binding", updatedNovelHolder.updates[i].chapterID.toString())
+        val novelChapter = DatabaseChapter.getChapter(updatedNovelHolder.updates[i].chapterID)
+        if (novelChapter != null) {
+            updatedChapterHolder.novelChapter = (novelChapter)
+            updatedChapterHolder.popupMenu.setOnMenuItemClickListener { menuItem: MenuItem ->
+                var novelPage = NovelPage()
+                val nURL = getNovelURLFromChapterURL(updatedChapterHolder.novelChapter?.link)
+                if (nURL != null) novelPage = Database.DatabaseNovels.getNovelPage(getNovelIDFromNovelURL(nURL))
+                val formatter = getByID(getFormatterIDFromNovelURL(nURL))
+                val chapterID = getChapterIDFromChapterURL(novelChapter.link)
+                when (menuItem.itemId) {
+                    R.id.popup_chapter_menu_bookmark -> {
+                        if (Utilities.toggleBookmarkChapter(chapterID)) updatedChapterHolder.title.setTextColor(updatedChapterHolder.itemView.resources.getColor(R.color.bookmarked)) else {
+                            Log.i("SetDefault", DefaultTextColor.toString())
+                            updatedChapterHolder.title.setTextColor(DefaultTextColor)
+                        }
+                        notifyDataSetChanged()
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.popup_chapter_menu_download -> {
+                        run {
+                            if (!isSaved(chapterID)) {
+                                val downloadItem = DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title, chapterID)
+                                Download_Manager.addToDownload(updatedNovelHolder.activity, downloadItem)
+                            } else {
+                                if (Download_Manager.delete(updatedChapterHolder.itemView.context, DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title, chapterID))) {
+                                    updatedChapterHolder.downloadTag.visibility = View.INVISIBLE
+                                }
+                            }
+                        }
+                        notifyDataSetChanged()
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.popup_chapter_menu_mark_read -> {
+                        setChapterStatus(chapterID, Status.READ)
+                        notifyDataSetChanged()
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.popup_chapter_menu_mark_unread -> {
+                        setChapterStatus(chapterID, Status.UNREAD)
+                        notifyDataSetChanged()
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.popup_chapter_menu_mark_reading -> {
+                        setChapterStatus(chapterID, Status.READING)
+                        notifyDataSetChanged()
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.browser -> {
+                        if (updatedChapterHolder.novelChapter?.link != null)
+                            Utilities.openInBrowser(updatedNovelHolder.activity, updatedChapterHolder.novelChapter!!.link)
+                        return@setOnMenuItemClickListener true
+                    }
+                    R.id.webview -> {
+                        if (updatedChapterHolder.novelChapter?.link != null)
+                            Utilities.openInWebview(updatedNovelHolder.activity, updatedChapterHolder.novelChapter!!.link)
+                        return@setOnMenuItemClickListener true
+                    }
+                    else -> return@setOnMenuItemClickListener false
+                }
+            }
+            updatedChapterHolder.moreOptions.setOnClickListener { updatedChapterHolder.popupMenu.show() }
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return size
+    }
+
+    companion object {
+        var DefaultTextColor = 0
+        private var set = false
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.java
deleted file mode 100644
index 1021959ac..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentManager;
-import androidx.fragment.app.FragmentPagerAdapter;
-
-import com.github.doomsdayrs.apps.shosetsu.ui.updates.UpdateFragment;
-
-import org.joda.time.DateTime;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates.trimDate;
-
-/**
- * shosetsu
- * 20 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class UpdatedDaysPager extends FragmentPagerAdapter {
-
-    private final ArrayList<UpdateFragment> fragments;
-
-    public UpdatedDaysPager(@NonNull FragmentManager fm, int behavior, ArrayList<UpdateFragment> fragments) {
-        super(fm, behavior);
-        this.fragments = fragments;
-    }
-
-    @NonNull
-    @Override
-    public Fragment getItem(int position) {
-        return fragments.get(position);
-    }
-
-    @Nullable
-    @Override
-    public CharSequence getPageTitle(int position) {
-        DateTime dateTime = new DateTime(fragments.get(position).date);
-        if (dateTime.equals(trimDate(new DateTime(System.currentTimeMillis())))) {
-            return "Today";
-        } else if (dateTime.equals(trimDate(new DateTime(System.currentTimeMillis())).minusDays(1))) {
-            return "Yesterday";
-        }
-        return dateTime.getDayOfMonth() + "/" + dateTime.getMonthOfYear() + "/" + dateTime.getYear();
-    }
-
-    @Override
-    public int getCount() {
-        return fragments.size();
-    }
-
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-//    public void addToFragments(UpdateFragment f) {
-//        fragments.add(0, f);
-//    }
-// --Commented out by Inspection STOP (12/22/19 11:10 AM)
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.kt
new file mode 100644
index 000000000..bb001b8b9
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedDaysPager.kt
@@ -0,0 +1,52 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters
+
+import androidx.fragment.app.Fragment
+import androidx.fragment.app.FragmentManager
+import androidx.fragment.app.FragmentPagerAdapter
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseUpdates
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.UpdateFragment
+import org.joda.time.DateTime
+import java.util.*
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 20 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdatedDaysPager(fm: FragmentManager, behavior: Int, private val fragments: ArrayList<UpdateFragment>) : FragmentPagerAdapter(fm, behavior) {
+    override fun getItem(position: Int): Fragment {
+        return fragments[position]
+    }
+
+    override fun getPageTitle(position: Int): CharSequence? {
+        val dateTime = DateTime(fragments[position].date)
+        if (dateTime == DatabaseUpdates.trimDate(DateTime(System.currentTimeMillis()))) {
+            return "Today"
+        } else if (dateTime == DatabaseUpdates.trimDate(DateTime(System.currentTimeMillis())).minusDays(1)) {
+            return "Yesterday"
+        }
+        return dateTime.dayOfMonth.toString() + "/" + dateTime.monthOfYear + "/" + dateTime.year
+    }
+
+    override fun getCount(): Int {
+        return fragments.size
+    } // --Commented out by Inspection START (12/22/19 11:10 AM):
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.java
deleted file mode 100644
index 698d1456c..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import java.util.ArrayList;
-
-/**
- * shosetsu
- * 03 / 09 / 2019
- *
- * @author github.com/doomsdayrs
- */
-class UpdatedNovelsAdapter extends RecyclerView.Adapter {
-    private ArrayList<String> novelURLs;
-
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-//    UpdatedNovelsAdapter(ArrayList<String> novelURLs) {
-//        this.novelURLs = novelURLs;
-//    }
-// --Commented out by Inspection STOP (12/22/19 11:10 AM)
-
-    @NonNull
-    @Override
-    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-        return null;
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {
-
-    }
-
-    @Override
-    public int getItemCount() {
-        return novelURLs.size();
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.kt
new file mode 100644
index 000000000..2d0934e57
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedNovelsAdapter.kt
@@ -0,0 +1,54 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters
+
+import android.app.Activity
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder.UpdatedNovelHolder
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 03 / 09 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+internal class UpdatedNovelsAdapter(private val novelIDs: ArrayList<Int>, val updates: ArrayList<Update>, val activity: Activity) : RecyclerView.Adapter<UpdatedNovelHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UpdatedNovelHolder {
+        val view = LayoutInflater.from(parent.context).inflate(R.layout.updated_novel_card, parent, false)
+        return UpdatedNovelHolder(view,activity)
+    }
+
+    override fun onBindViewHolder(holder: UpdatedNovelHolder, position: Int) {
+        val novelID = novelIDs[position]
+
+        val subUpdates: ArrayList<Update> = ArrayList()
+        for (update in updates)
+            if (update.novelID == novelID)
+                subUpdates.add(update)
+
+        holder.novelID = novelID
+        holder.updates = subUpdates
+    }
+
+    override fun getItemCount(): Int {
+        return novelIDs.size
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/async/ChapterUpdater.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/async/ChapterUpdater.java
deleted file mode 100644
index f52645b36..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/async/ChapterUpdater.java
+++ /dev/null
@@ -1,175 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.async;
-
-import android.app.Notification;
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
-import android.content.Context;
-import android.os.AsyncTask;
-import android.os.Build;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-
-import org.jetbrains.annotations.NotNull;
-import org.jsoup.nodes.Document;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.getNovel;
-import static com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 13 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class ChapterUpdater extends AsyncTask<Void, Void, Void> {
-    private static final int ID = 1917;
-    private static final String channel_ID = "shosetsu_updater";
-
-    @NonNull
-    private final ArrayList<Integer> novelCards;
-    private boolean continueProcesss = true;
-    @Nullable
-    private final NotificationManager notificationManager;
-    private Notification.Builder builder;
-    private final ArrayList<NovelCard> updatedNovels = new ArrayList<>();
-
-
-    public ChapterUpdater(@NotNull ArrayList<Integer> novelCards, @NonNull Context context) {
-        this.novelCards = novelCards;
-        notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            NotificationChannel notificationChannel = new NotificationChannel(channel_ID, "Shosetsu Update", NotificationManager.IMPORTANCE_HIGH);
-            if (notificationManager != null) {
-                notificationManager.createNotificationChannel(notificationChannel);
-            }
-
-            builder = new Notification.Builder(context, channel_ID);
-        } else builder = new Notification.Builder(context);
-    }
-
-
-    @Override
-    protected void onPreExecute() {
-        builder = builder
-                .setSmallIcon(R.drawable.ic_system_update_alt_black_24dp)
-                .setContentTitle("Update")
-                .setContentText("Update in progress")
-                .setProgress(novelCards.size(), 0, false)
-                .setOngoing(true)
-                .setOnlyAlertOnce(true);
-        if (notificationManager != null) {
-            notificationManager.notify(ID, builder.build());
-        }
-    }
-
-
-    @Nullable
-    @Override
-    protected Void doInBackground(Void... voids) {
-        for (int x = 0; x < novelCards.size(); x++) {
-            NovelCard novelCard = getNovel(novelCards.get(x));
-            int novelID = getNovelIDFromNovelURL(novelCard.novelURL);
-            builder.setContentText(novelCard.title);
-            builder.setProgress(novelCards.size(), x + 1, false);
-            if (notificationManager != null) {
-                notificationManager.notify(ID, builder.build());
-            }
-
-            Formatter formatter = DefaultScrapers.getByID(novelCard.formatterID);
-            if (formatter != null) {
-                int page = 1;
-                NovelPage tempPage;
-                if (formatter.isIncrementingChapterList()) {
-                    Document document = docFromURL(formatter.novelPageCombiner(novelCard.novelURL, page), formatter.getHasCloudFlare());
-                    if (document != null) {
-                        tempPage = formatter.parseNovel(document, page);
-                        int mangaCount = 0;
-                        while (page <= tempPage.getMaxChapterPage() && continueProcesss) {
-                            document = docFromURL(formatter.novelPageCombiner(novelCard.novelURL, page), formatter.getHasCloudFlare());
-                            if (document != null) {
-                                tempPage = formatter.parseNovel(document, page);
-                                for (NovelChapter novelChapter : tempPage.getNovelChapters())
-                                    add(mangaCount, novelID, novelChapter, novelCard);
-                                page++;
-                            }
-                            Utilities.wait(300);
-                        }
-                    }
-                } else {
-                    Document document = docFromURL(novelCard.novelURL, formatter.getHasCloudFlare());
-                    if (document != null) {
-                        tempPage = formatter.parseNovel(document, page);
-                        int mangaCount = 0;
-                        for (NovelChapter novelChapter : tempPage.getNovelChapters())
-                            add(mangaCount, novelID, novelChapter, novelCard);
-                    }
-                }
-            }
-            Utilities.wait(1000);
-        }
-        return null;
-    }
-
-    @Override
-    protected void onPostExecute(Void aVoid) {
-        StringBuilder stringBuilder = new StringBuilder();
-        if (updatedNovels.size() > 0) {
-            builder.setContentTitle("Completed Update");
-            for (NovelCard novelCard : updatedNovels)
-                stringBuilder.append(novelCard.title).append("\n");
-            builder.setStyle(new Notification.BigTextStyle());
-        } else stringBuilder.append("No updates found");
-
-        builder.setContentText(stringBuilder.toString());
-        builder.setProgress(0, 0, false);
-        builder.setOngoing(false);
-        if (notificationManager != null) {
-            notificationManager.notify(ID, builder.build());
-        }
-    }
-
-
-    private void add(int mangaCount, int novelID, @NonNull NovelChapter novelChapter, @NonNull NovelCard novelCard) {
-        if (continueProcesss && Database.DatabaseChapter.isNotInChapters(novelChapter.getLink())) {
-            mangaCount++;
-            System.out.println("Adding #" + mangaCount + ": " + novelChapter.getLink());
-            Database.DatabaseChapter.addToChapters(novelID, novelChapter);
-            Database.DatabaseUpdates.addToUpdates(novelID, novelChapter.getLink(), System.currentTimeMillis());
-
-            if (!updatedNovels.contains(novelCard))
-                updatedNovels.add(novelCard);
-        }
-    }
-
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.java
deleted file mode 100644
index b3f6b32be..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.app.Activity;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.PopupMenu;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-import com.squareup.picasso.Picasso;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openChapter;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterIDFromChapterURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getFormatterIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
-
-/**
- * shosetsu
- * 17 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class UpdatedChapterHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-    public final ImageView moreOptions;
-    public final TextView downloadTag;
-    public NovelChapter novelChapter;
-    public final TextView title;
-    private final ImageView image;
-    public PopupMenu popupMenu;
-
-    public UpdatedChapterHolder(@NonNull View itemView) {
-        super(itemView);
-        moreOptions = itemView.findViewById(R.id.more_options);
-        downloadTag = itemView.findViewById(R.id.recycler_novel_chapter_download);
-        title = itemView.findViewById(R.id.title);
-        image = itemView.findViewById(R.id.image);
-
-        if (popupMenu == null) {
-            popupMenu = new PopupMenu(moreOptions.getContext(), moreOptions);
-            popupMenu.inflate(R.menu.popup_chapter_menu);
-        }
-
-
-    }
-
-    public void setNovelChapter(@NonNull NovelChapter novelChapter) {
-        this.novelChapter = novelChapter;
-        title.setText(novelChapter.getTitle());
-        //TODO fix this disgust
-        NovelCard novelCard = Database.DatabaseNovels.getNovel(Database.DatabaseIdentification.getNovelIDFromChapterID(getChapterIDFromChapterURL(novelChapter.getLink())));
-        Picasso.get()
-                .load(
-                        novelCard.imageURL)
-                .into(image);
-        itemView.setOnClickListener(this);
-    }
-
-    @Override
-    public void onClick(View view) {
-        String nurl = Database.DatabaseIdentification.getNovelURLFromChapterURL(novelChapter.getLink());
-        Formatter formatter = DefaultScrapers.getByID(getFormatterIDFromNovelURL(nurl));
-        if (formatter != null)
-            openChapter((Activity) itemView.getContext(), novelChapter, getNovelIDFromNovelURL(nurl), formatter.getFormatterID());
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.kt
new file mode 100644
index 000000000..4c17893f6
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedChapterHolder.kt
@@ -0,0 +1,70 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder
+
+import android.app.Activity
+import android.view.View
+import android.widget.ImageView
+import android.widget.PopupMenu
+import android.widget.ProgressBar
+import android.widget.TextView
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
+import com.squareup.picasso.Picasso
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 17 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdatedChapterHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+    val moreOptions: ImageView = itemView.findViewById(R.id.more_options)
+    val downloadTag: TextView = itemView.findViewById(R.id.recycler_novel_chapter_download)
+    val title: TextView = itemView.findViewById(R.id.title)
+    private val image: ImageView = itemView.findViewById(R.id.image)
+
+    var novelChapter: NovelChapter? = null
+        set(value) {
+            field = value
+            if (value != null) {
+                title.text = novelChapter!!.title
+                //TODO fix this disgust
+                val novelCard = Database.DatabaseNovels.getNovel(DatabaseIdentification.getNovelIDFromChapterID(DatabaseIdentification.getChapterIDFromChapterURL(novelChapter!!.link)))
+                Picasso.get().load(novelCard.imageURL).into(image)
+                itemView.setOnClickListener(this)
+            }
+        }
+
+    val popupMenu: PopupMenu = PopupMenu(moreOptions.context, moreOptions)
+
+
+    override fun onClick(view: View) {
+        val novelURL = DatabaseIdentification.getNovelURLFromChapterURL(novelChapter!!.link)
+        val formatter = getByID(DatabaseIdentification.getFormatterIDFromNovelURL(novelURL))
+        if (formatter != null) Utilities.openChapter((itemView.context as Activity), novelChapter!!, DatabaseIdentification.getNovelIDFromNovelURL(novelURL), formatter.formatterID)
+    }
+
+    init {
+        popupMenu.inflate(R.menu.popup_chapter_menu)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.java
deleted file mode 100644
index 0b4af8f12..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-/////**
-//// * shosetsu
-//// * 03 / 09 / 2019
-//// *
-// --Commented out by Inspection STOP (12/22/19 11:10 AM)
-// * @author github.com/doomsdayrs
-// */
-//class UpdatedNovelHolder {
-//}
-// --Commented out by Inspection STOP (12/22/19 11:10 AM)
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.kt
new file mode 100644
index 000000000..488d6fd09
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/viewHolder/UpdatedNovelHolder.kt
@@ -0,0 +1,101 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder
+
+import android.app.Activity
+import android.view.View
+import android.widget.*
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.objects.Update
+import com.github.doomsdayrs.apps.shosetsu.ui.updates.adapters.UpdatedChaptersAdapter
+import com.google.android.material.chip.Chip
+import com.squareup.picasso.Picasso
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+
+
+/**
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class UpdatedNovelHolder(itemView: View, val activity: Activity) : RecyclerView.ViewHolder(itemView) {
+    private val imageView: ImageView = itemView.findViewById(R.id.imageView)
+    val title: TextView = itemView.findViewById(R.id.title)
+    val chip: Chip = itemView.findViewById(R.id.count)
+    val button: ImageButton = itemView.findViewById(R.id.button)
+    val recyclerView: RecyclerView = itemView.findViewById(R.id.recyclerView)
+    val expand: ImageButton = itemView.findViewById(R.id.loadMore)
+
+
+    private var expanded: Boolean = false
+    var novelID: Int = -1
+        set(value) {
+            val novelCard = Database.DatabaseNovels.getNovel(value)
+
+            if (novelCard.novelURL.isNotEmpty())
+                Picasso.get().load(novelCard.imageURL).into(imageView)
+
+            title.text = novelCard.title
+
+
+            field = value
+        }
+
+    var updates: ArrayList<Update> = ArrayList()
+        set(value) {
+            field = value
+            chip.text = value.size.toString()
+            updatersAdapter.size = if (updates.size > 20) 5 else updates.size
+            updatersAdapter.notifyDataSetChanged()
+        }
+
+    var updatersAdapter: UpdatedChaptersAdapter = UpdatedChaptersAdapter(this)
+
+    init {
+        button.setOnClickListener {
+            if (expanded) {
+                button.setImageResource(R.drawable.ic_baseline_expand_more_24)
+                recyclerView.visibility = View.GONE
+                expand.visibility = View.GONE
+            } else {
+                button.setImageResource(R.drawable.ic_baseline_expand_less_24)
+                recyclerView.visibility = View.VISIBLE
+
+                if (updatersAdapter.size < updates.size)
+                    expand.visibility = View.VISIBLE
+            }
+            expanded = !expanded
+        }
+        expand.setOnClickListener {
+            updatersAdapter.size =
+                    if (updatersAdapter.size + 5 >= updates.size) {
+                        expand.visibility = View.GONE
+                        updates.size
+                    } else updatersAdapter.size + 5
+            updatersAdapter.notifyDataSetChanged()
+        }
+
+        recyclerView.adapter = updatersAdapter
+        recyclerView.layoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java
index 4424ece12..06b73fe5d 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java
@@ -1,5 +1,7 @@
 package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects;
 
+import androidx.annotation.NonNull;
+
 /*
  * This file is part of Shosetsu.
  *
@@ -27,6 +29,7 @@ public class NovelCard extends RecycleCard {
     /**
      * NovelURL
      */
+    @NonNull
     public final String novelURL;
     /**
      * ImageURL
