M	reproducible-apk-tools
M	smswithoutborders_libsignal-doubleratchet
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ConversationsViewModel.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ConversationsViewModel.java
index d36c4f5e..5604131c 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ConversationsViewModel.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ConversationsViewModel.java
@@ -22,6 +22,7 @@ import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
 
@@ -31,9 +32,9 @@ import java.util.Arrays;
 import java.util.List;
 
 public class ConversationsViewModel extends ViewModel {
+    public Datastore datastore;
     public String threadId;
     public String address;
-    public ConversationDao conversationDao;
     public int pageSize = 10;
     int prefetchDistance = 3 * pageSize;
     boolean enablePlaceholder = false;
@@ -45,13 +46,12 @@ public class ConversationsViewModel extends ViewModel {
     int pointer = 0;
     Pager<Integer, Conversation> pager;
 
-    public LiveData<PagingData<Conversation>> getSearch(Context context, ConversationDao conversationDao,
-                                                        String threadId, List<Integer> positions) {
+    public LiveData<PagingData<Conversation>> getSearch(Context context, String threadId,
+                                                        List<Integer> positions) {
         int pageSize = 5;
         int prefetchDistance = 3 * pageSize;
         boolean enablePlaceholder = false;
         int initialLoadSize = 10;
-        this.conversationDao = conversationDao;
         this.threadId = threadId;
         this.positions = positions;
 
@@ -66,25 +66,16 @@ public class ConversationsViewModel extends ViewModel {
 
     PagingSource<Integer, Conversation> searchPagingSource;
     public PagingSource<Integer, Conversation> getNewConversationPagingSource(Context context) {
-        searchPagingSource = new ConversationPagingSource(context, this.conversationDao, threadId,
+        searchPagingSource = new ConversationPagingSource(context, datastore.conversationDao(),
+                threadId,
                 pointer >= this.positions.size()-1 ? null : this.positions.get(++pointer));
         return searchPagingSource;
     }
 
-    public LiveData<PagingData<Conversation>> get(Context context, ConversationDao conversationDao,
-                                                  String threadId)
+    public LiveData<PagingData<Conversation>> get(Context context, String threadId)
             throws InterruptedException {
-        this.conversationDao = conversationDao;
         this.threadId = threadId;
 
-//        Pager<Integer, Conversation> pager = new Pager<>(new PagingConfig(
-//                pageSize,
-//                prefetchDistance,
-//                enablePlaceholder,
-//                initialLoadSize
-//        ), ()-> this.conversationDao.get(threadId));
-//        return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
-
         pager = new Pager<>(new PagingConfig(
                 pageSize,
                 prefetchDistance,
@@ -95,17 +86,17 @@ public class ConversationsViewModel extends ViewModel {
     }
 
     public Conversation fetch(String messageId) throws InterruptedException {
-        return conversationDao.getMessage(messageId);
+        return datastore.conversationDao().getMessage(messageId);
     }
 
     public long insert(Conversation conversation) throws InterruptedException {
-        long id = conversationDao.insert(conversation);
+        long id = datastore.conversationDao().insert(conversation);
         searchPagingSource.invalidate();
         return id;
     }
 
     public void update(Conversation conversation) {
-        conversationDao.update(conversation);
+        datastore.conversationDao().update(conversation);
         searchPagingSource.invalidate();
     }
 
@@ -120,7 +111,7 @@ public class ConversationsViewModel extends ViewModel {
 
     public List<Integer> search(String input) throws InterruptedException {
         List<Integer> positions = new ArrayList<>();
-        List<Conversation> list = conversationDao.getAll(threadId);
+        List<Conversation> list = datastore.conversationDao().getAll(threadId);
 
         for(int i=0;i<list.size();++i) {
             if(list.get(i).getText() != null)
@@ -133,7 +124,7 @@ public class ConversationsViewModel extends ViewModel {
 
     public void updateToRead(Context context) {
         if(threadId != null && !threadId.isEmpty()) {
-            List<Conversation> conversations = conversationDao.getAll(threadId);
+            List<Conversation> conversations = datastore.conversationDao().getAll(threadId);
             List<Conversation> updateList = new ArrayList<>();
             for(Conversation conversation : conversations) {
                 if(!conversation.isRead()) {
@@ -141,15 +132,12 @@ public class ConversationsViewModel extends ViewModel {
                     updateList.add(conversation);
                 }
             }
-            conversationDao.update(updateList);
+            datastore.conversationDao().update(updateList);
         }
     }
 
     public void deleteItems(Context context, List<Conversation> conversations) {
-        Conversation conversation1 = new Conversation();
-        ConversationDao conversationDao = conversation1.getDaoInstance(context);
-
-        conversationDao.delete(conversations);
+        datastore.conversationDao().delete(conversations);
         String[] ids = new String[conversations.size()];
         for(int i=0;i<conversations.size(); ++i)
             ids[i] = conversations.get(i).getMessage_id();
@@ -158,12 +146,13 @@ public class ConversationsViewModel extends ViewModel {
     }
 
     public Conversation fetchDraft() throws InterruptedException {
-        return conversationDao.fetchTypedConversation(
+        return datastore.conversationDao().fetchTypedConversation(
                 Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT, threadId);
     }
 
     public void clearDraft(Context context) {
-        conversationDao.deleteAllType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT, threadId);
+        datastore.conversationDao()
+                .deleteAllType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT, threadId);
         SMSDatabaseWrapper.deleteDraft(context, threadId);
     }
 }
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/SearchViewModel.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/SearchViewModel.java
index b37657cd..a911b9e3 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/SearchViewModel.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/SearchViewModel.java
@@ -11,6 +11,8 @@ import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -19,21 +21,18 @@ public class SearchViewModel extends ViewModel {
 
     MutableLiveData<Pair<List<ThreadedConversations>, Integer>> liveData;
 
-    ThreadedConversationsDao threadedConversationsDao;
-
     String threadId;
 
-    public LiveData<Pair<List<ThreadedConversations>,Integer>> get(ThreadedConversationsDao threadedConversationsDao){
-        this.threadedConversationsDao = threadedConversationsDao;
+    public Datastore databaseConnector;
+
+    public LiveData<Pair<List<ThreadedConversations>,Integer>> get(){
         if(this.liveData == null) {
             liveData = new MutableLiveData<>();
         }
         return liveData;
     }
 
-    public LiveData<Pair<List<ThreadedConversations>,Integer>> getByThreadId(
-            ThreadedConversationsDao threadedConversationsDao, String threadId){
-        this.threadedConversationsDao = threadedConversationsDao;
+    public LiveData<Pair<List<ThreadedConversations>,Integer>> getByThreadId(String threadId){
         if(this.liveData == null) {
             liveData = new MutableLiveData<>();
             this.threadId = threadId;
@@ -42,17 +41,18 @@ public class SearchViewModel extends ViewModel {
     }
 
     public void search(Context context, String input) throws InterruptedException {
-        Thread thread = new Thread(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 List<Conversation> conversations = new ArrayList<>();
                 Integer index = null;
                 if(threadId == null || threadId.isEmpty())
-                    conversations = threadedConversationsDao.findAddresses(input);
+                    conversations = databaseConnector.threadedConversationsDao().findAddresses(input);
                 else {
-                    conversations = threadedConversationsDao.findByThread(input, threadId);
-                    ConversationDao conversationDao = new Conversation().getDaoInstance(context);
-                    List<Conversation> conversationList = conversationDao.getAll(threadId);
+                    conversations = databaseConnector.threadedConversationsDao()
+                            .findByThread(input, threadId);
+                    List<Conversation> conversationList = databaseConnector.conversationDao()
+                            .getAll(threadId);
                     if(!conversationList.isEmpty()) {
                         index = conversationList.indexOf(conversationList.get(0));
                     }
@@ -63,7 +63,6 @@ public class SearchViewModel extends ViewModel {
                 liveData.postValue(new Pair<>(threadedConversations, index));
             }
         });
-        thread.start();
     }
 
 }
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadedConversationsViewModel.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadedConversationsViewModel.java
index 239f0a9c..3a967906 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadedConversationsViewModel.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadedConversationsViewModel.java
@@ -25,6 +25,7 @@ import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.Database.SemaphoreManager;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
@@ -42,13 +43,14 @@ import java.util.Set;
 
 public class ThreadedConversationsViewModel extends ViewModel {
 
-    public ThreadedConversationsDao threadedConversationsDao;
     int pageSize = 20;
     int prefetchDistance = 3 * pageSize;
     boolean enablePlaceholder = false;
     int initialLoadSize = 2 * pageSize;
     int maxSize = PagingConfig.MAX_SIZE_UNBOUNDED;
 
+    public Datastore databaseConnector;
+
     public LiveData<PagingData<ThreadedConversations>> getArchived(){
         Pager<Integer, ThreadedConversations> pager = new Pager<>(new PagingConfig(
                 pageSize,
@@ -56,7 +58,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 enablePlaceholder,
                 initialLoadSize,
                 maxSize
-        ), ()-> this.threadedConversationsDao.getArchived());
+        ), ()-> databaseConnector.threadedConversationsDao().getArchived());
         return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
     }
     public LiveData<PagingData<ThreadedConversations>> getDrafts(){
@@ -66,7 +68,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 enablePlaceholder,
                 initialLoadSize,
                 maxSize
-        ), ()-> this.threadedConversationsDao.getThreadedDrafts(
+        ), ()-> databaseConnector.threadedConversationsDao().getThreadedDrafts(
                 Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT));
         return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
     }
@@ -78,7 +80,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 enablePlaceholder,
                 initialLoadSize,
                 maxSize
-        ), ()-> this.threadedConversationsDao.getBlocked());
+        ), ()-> databaseConnector.threadedConversationsDao().getBlocked());
         return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
     }
 
@@ -105,7 +107,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
             }
         }
 
-        mutedPagingSource = this.threadedConversationsDao.getByAddress(mutedNumber);
+        mutedPagingSource = databaseConnector.threadedConversationsDao().getByAddress(mutedNumber);
         return mutedPagingSource;
     }
 
@@ -116,36 +118,28 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 enablePlaceholder,
                 initialLoadSize,
                 maxSize
-        ), ()-> this.threadedConversationsDao.getAllUnreadWithoutArchived());
+        ), ()-> databaseConnector.threadedConversationsDao().getAllUnreadWithoutArchived());
         return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
     }
 
     public LiveData<PagingData<ThreadedConversations>> get(){
         try {
-            SemaphoreManager.acquireSemaphore();
             Pager<Integer, ThreadedConversations> pager = new Pager<>(new PagingConfig(
                     pageSize,
                     prefetchDistance,
                     enablePlaceholder,
                     initialLoadSize,
                     maxSize
-            ), ()-> this.threadedConversationsDao.getAllWithoutArchived());
+            ), ()-> databaseConnector.threadedConversationsDao().getAllWithoutArchived());
             return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
         } catch(Exception e) {
             e.printStackTrace();
-        } finally {
-            try {
-                SemaphoreManager.releaseSemaphore();
-            }catch(Exception e) {
-                e.printStackTrace();
-            }
         }
         return null;
     }
 
-    public String getAllExport(Context context) {
-        ConversationDao conversationDao = new Conversation().getDaoInstance(context);
-        List<Conversation> conversations = conversationDao.getComplete();
+    public String getAllExport() {
+        List<Conversation> conversations = databaseConnector.conversationDao().getComplete();
 
         GsonBuilder gsonBuilder = new GsonBuilder();
         gsonBuilder.setPrettyPrinting().serializeNulls();
@@ -183,42 +177,15 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 prefetchDistance,
                 enablePlaceholder,
                 initialLoadSize
-        ), ()-> this.threadedConversationsDao.getByAddress(address));
-        return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
-    }
-
-    public LiveData<PagingData<ThreadedConversations>> getNotEncrypted(Context context) throws InterruptedException {
-        List<String> address = new ArrayList<>();
-        ConversationsThreadsEncryption conversationsThreadsEncryption1 =
-                new ConversationsThreadsEncryption();
-        ConversationsThreadsEncryptionDao conversationsThreadsEncryptionDao =
-                conversationsThreadsEncryption1.getDaoInstance(context);
-        List<ConversationsThreadsEncryption> conversationsThreadsEncryptionList =
-                conversationsThreadsEncryptionDao.getAll();
-
-        for(ConversationsThreadsEncryption conversationsThreadsEncryption :
-                conversationsThreadsEncryptionList) {
-            String derivedAddress =
-                    E2EEHandler.getAddressFromKeystore(
-                            conversationsThreadsEncryption.getKeystoreAlias());
-            address.add(derivedAddress);
-        }
-        Pager<Integer, ThreadedConversations> pager = new Pager<>(new PagingConfig(
-                pageSize,
-                prefetchDistance,
-                enablePlaceholder,
-                initialLoadSize
-        ), ()-> this.threadedConversationsDao.getNotInAddress(address));
+        ), ()-> databaseConnector.threadedConversationsDao().getByAddress(address));
         return PagingLiveData.cachedIn(PagingLiveData.getLiveData(pager), this);
     }
 
-
     public void insert(ThreadedConversations threadedConversations) {
-        threadedConversationsDao.insert(threadedConversations);
+        databaseConnector.threadedConversationsDao().insert(threadedConversations);
     }
 
     public void reset(Context context) {
-        Conversation conversation = new Conversation();
         Cursor cursor = NativeSMSDB.fetchAll(context);
 
         List<Conversation> conversationList = new ArrayList<>();
@@ -229,31 +196,23 @@ public class ThreadedConversationsViewModel extends ViewModel {
             cursor.close();
         }
 
-        ConversationDao conversationDao = conversation.getDaoInstance(context);
-        conversationDao.insertAll(conversationList);
-
-        ThreadedConversations threadedConversations = new ThreadedConversations();
-        ThreadedConversationsDao threadedConversationsDao1 =
-                threadedConversations.getDaoInstance(context);
-        threadedConversationsDao1.deleteAll();
-        threadedConversations.close();
+        databaseConnector.conversationDao().insertAll(conversationList);
+        databaseConnector.threadedConversationsDao().deleteAll();
         refresh(context);
     }
 
     public void archive(List<Archive> archiveList) {
-        threadedConversationsDao.archive(archiveList);
+        databaseConnector.threadedConversationsDao().archive(archiveList);
     }
 
 
     public void delete(Context context, List<String> ids) {
-        Conversation conversation = new Conversation();
-        ConversationDao conversationDao = conversation.getDaoInstance(context);
-        conversationDao.deleteAll(ids);
-        threadedConversationsDao.delete(ids);
+        databaseConnector.conversationDao().deleteAll(ids);
+        databaseConnector.threadedConversationsDao().delete(ids);
         NativeSMSDB.deleteThreads(context, ids.toArray(new String[0]));
     }
 
-    public void refresh(Context context) {
+    private void refresh(Context context) {
         List<ThreadedConversations> newThreadedConversationsList = new ArrayList<>();
         Cursor cursor = context.getContentResolver().query(
                 Telephony.Threads.CONTENT_URI,
@@ -263,24 +222,11 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 "date DESC"
         );
 
-
         List<ThreadedConversations> threadedDraftsList =
-                threadedConversationsDao.getThreadedDraftsList(
+                databaseConnector.threadedConversationsDao().getThreadedDraftsList(
                         Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT);
 
-        List<String> archivedThreads = threadedConversationsDao.getArchivedList();
-//        List<String> blockedThreads = threadedConversationsDao.getBlockedList();
-//        List<String> blockedAddresses = new ArrayList<>();
-//        Cursor blockedCursor = Contacts.getBlocked(context);
-//        if(blockedCursor.moveToFirst()) {
-//            do {
-//                int addressIndex = blockedCursor.getColumnIndex(
-//                        BlockedNumberContract.BlockedNumbers.COLUMN_E164_NUMBER);
-//                String address = blockedCursor.getString(addressIndex);
-//                blockedAddresses.add(address);
-//            } while(blockedCursor.moveToNext());
-//        }
-
+        List<String> archivedThreads = databaseConnector.threadedConversationsDao().getArchivedList();
         List<String> threadsIdsInDrafts = new ArrayList<>();
         for(ThreadedConversations threadedConversations : threadedDraftsList)
             threadsIdsInDrafts.add(threadedConversations.getThread_id());
@@ -292,7 +238,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
                 m_cls, d_rpt, v, person, service_center, error_code, _id, m_type, status]
                  */
         List<ThreadedConversations> threadedConversationsList =
-                threadedConversationsDao.getAll();
+                databaseConnector.threadedConversationsDao().getAll();
         if(cursor != null && cursor.moveToFirst()) {
             do {
                 ThreadedConversations threadedConversations = new ThreadedConversations();
@@ -324,9 +270,6 @@ public class ThreadedConversationsViewModel extends ViewModel {
                     threadedConversations.setType(cursor.getInt(typeIndex));
                     threadedConversations.setDate(cursor.getString(dateIndex));
                 }
-//                if(blockedAddresses.contains(threadedConversations.getAddress())) {
-//                    threadedConversations.setIs_blocked(true);
-//                }
                 if(BlockedNumberContract.isBlocked(context, threadedConversations.getAddress()))
                     threadedConversations.setIs_blocked(true);
 
@@ -348,75 +291,59 @@ public class ThreadedConversationsViewModel extends ViewModel {
             } while(cursor.moveToNext());
             cursor.close();
         }
-        threadedConversationsDao.insertAll(newThreadedConversationsList);
-//        insertAll(threadedConversationsList);
+        databaseConnector.threadedConversationsDao().insertAll(newThreadedConversationsList);
         getCount(context);
     }
 
-    synchronized void insertAll(List<ThreadedConversations> threadedConversations) {
-        threadedConversationsDao.insertAll(threadedConversations);
-    }
-
     public void unarchive(List<Archive> archiveList) {
-        threadedConversationsDao.unarchive(archiveList);
+        databaseConnector.threadedConversationsDao().unarchive(archiveList);
     }
 
     public void unblock(Context context, List<String> threadIds) {
-        List<ThreadedConversations> threadedConversationsList = threadedConversationsDao
-                .getList(threadIds);
-//        ContentValues contentValues = new ContentValues();
+        List<ThreadedConversations> threadedConversationsList =
+                databaseConnector.threadedConversationsDao().getList(threadIds);
         for(ThreadedConversations threadedConversations : threadedConversationsList) {
-//            contentValues.put(BlockedNumberContract.BlockedNumbers.COLUMN_ORIGINAL_NUMBER,
-//                    threadedConversations.getAddress());
             BlockedNumberContract.unblock(context, threadedConversations.getAddress());
         }
-//        Uri uri = context.getContentResolver().insert(BlockedNumberContract.BlockedNumbers.CONTENT_URI,
-//                contentValues);
-//        context.getContentResolver().delete(uri, null, null);
         refresh(context);
     }
 
     public void clearDrafts(Context context) {
         SMSDatabaseWrapper.deleteAllDraft(context);
-        threadedConversationsDao.clearDrafts(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT);
+        databaseConnector.threadedConversationsDao()
+                .clearDrafts(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT);
         refresh(context);
     }
 
     public boolean hasUnread(List<String> ids) {
-        return threadedConversationsDao.getAllUnreadWithoutArchivedCount(ids) > 0;
+        return databaseConnector.threadedConversationsDao().getAllUnreadWithoutArchivedCount(ids) > 0;
     }
 
     public void markUnRead(Context context, List<String> threadIds) {
         NativeSMSDB.Incoming.update_all_read(context, 0, threadIds.toArray(new String[0]));
-        threadedConversationsDao.updateRead(0, threadIds);
+        databaseConnector.threadedConversationsDao().updateRead(0, threadIds);
         refresh(context);
     }
 
     public void markRead(Context context, List<String> threadIds) {
         NativeSMSDB.Incoming.update_all_read(context, 1, threadIds.toArray(new String[0]));
-        threadedConversationsDao.updateRead(1, threadIds);
-        refresh(context);
-    }
-
-    public void markAllUnRead(Context context) {
-        NativeSMSDB.Incoming.update_all_read(context, 0);
-        threadedConversationsDao.updateRead(0);
+        databaseConnector.threadedConversationsDao().updateRead(1, threadIds);
         refresh(context);
     }
 
     public void markAllRead(Context context) {
         NativeSMSDB.Incoming.update_all_read(context, 1);
-        threadedConversationsDao.updateRead(1);
+        databaseConnector.threadedConversationsDao().updateRead(1);
         refresh(context);
     }
 
     public MutableLiveData<List<Integer>> folderMetrics = new MutableLiveData<>();
     public void getCount(Context context) {
-        int draftsListCount = threadedConversationsDao
+        int draftsListCount = databaseConnector.threadedConversationsDao()
                 .getThreadedDraftsListCount( Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT);
-        int encryptedCount = threadedConversationsDao.getAllEncryptedCount();
-        int unreadCount = threadedConversationsDao.getAllUnreadWithoutArchivedCount();
-        int blockedCount = threadedConversationsDao.getAllBlocked();
+        int encryptedCount = databaseConnector.threadedConversationsDao().getAllEncryptedCount();
+        int unreadCount = databaseConnector.threadedConversationsDao().getAllUnreadWithoutArchivedCount();
+        int blockedCount = databaseConnector.threadedConversationsDao().getAllBlocked();
         int mutedCount = Contacts.getMuted(context).size();
         List<Integer> list = new ArrayList<>();
         list.add(draftsListCount);
@@ -429,7 +356,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
 
     public void unMute(Context context, List<String> threadIds) {
         List<ThreadedConversations> threadedConversationsList =
-                threadedConversationsDao.getList(threadIds);
+                databaseConnector.threadedConversationsDao().getList(threadIds);
         for(ThreadedConversations threadedConversations : threadedConversationsList) {
             Contacts.unmute(context, threadedConversations.getAddress());
         }
@@ -438,7 +365,7 @@ public class ThreadedConversationsViewModel extends ViewModel {
 
     public void mute(Context context, List<String> threadIds) {
         List<ThreadedConversations> threadedConversationsList =
-                threadedConversationsDao.getList(threadIds);
+                databaseConnector.threadedConversationsDao().getList(threadIds);
         for(ThreadedConversations threadedConversations : threadedConversationsList) {
             Contacts.mute(context, threadedConversations.getAddress());
         }
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadsPagingSource.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadsPagingSource.java
deleted file mode 100644
index 0d84339a..00000000
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/AdaptersViewModels/ThreadsPagingSource.java
+++ /dev/null
@@ -1,148 +0,0 @@
-package com.afkanerd.deku.DefaultSMS.AdaptersViewModels;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.provider.Telephony;
-import android.util.Log;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.paging.PagingSource;
-import androidx.paging.PagingState;
-import androidx.room.Room;
-import androidx.room.RoomDatabase;
-
-import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
-import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
-import com.afkanerd.deku.DefaultSMS.Models.Contacts;
-import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
-import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
-import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
-import com.afkanerd.deku.DefaultSMS.Models.Database.Migrations;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import kotlin.coroutines.Continuation;
-
-public class ThreadsPagingSource extends PagingSource<Integer, ThreadedConversations> {
-
-    Context context;
-    public ThreadsPagingSource(Context context) {
-        this.context = context;
-    }
-
-    @Nullable
-    @Override
-    public Integer getRefreshKey(@NonNull PagingState<Integer, ThreadedConversations> state) {
-        // Try to find the page key of the closest page to anchorPosition from
-        // either the prevKey or the nextKey; you need to handle nullability
-        // here.
-        //  * prevKey == null -> anchorPage is the first page.
-        //  * nextKey == null -> anchorPage is the last page.
-        //  * both prevKey and nextKey are null -> anchorPage is the
-        //    initial page, so return null.
-        Integer anchorPosition = state.getAnchorPosition();
-        if (anchorPosition == null) {
-            return null;
-        }
-
-        LoadResult.Page<Integer, ThreadedConversations> anchorPage = state.closestPageToPosition(anchorPosition);
-        if (anchorPage == null) {
-            return null;
-        }
-
-        Integer prevKey = anchorPage.getPrevKey();
-        if (prevKey != null) {
-            return prevKey + 1;
-        }
-
-        Integer nextKey = anchorPage.getNextKey();
-        if (nextKey != null) {
-            return nextKey - 1;
-        }
-
-        return null;
-    }
-
-    @Nullable
-    @Override
-    public Object load(@NonNull LoadParams<Integer> loadParams, @NonNull Continuation<? super LoadResult<Integer, ThreadedConversations>> continuation) {
-        Cursor cursor = context.getContentResolver().query(
-                Telephony.Threads.CONTENT_URI,
-                null,
-                null,
-                null,
-                "date DESC"
-        );
-
-
-        List<ThreadedConversations> threadedConversationsList = new ArrayList<>();
-
-        Thread thread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                ThreadedConversations tc = new ThreadedConversations();
-                ThreadedConversationsDao threadedConversationsDao = tc.getDaoInstance(context);
-                List<ThreadedConversations> threadedDraftsList =
-                        threadedConversationsDao.getThreadedDraftsList(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_DRAFT);
-                tc.close();
-                List<String> threadIds = new ArrayList<>();
-                for(ThreadedConversations threadedConversations : threadedDraftsList)
-                    threadIds.add(threadedConversations.getThread_id());
-                Log.d(getClass().getName(), "# drafts: " + threadedDraftsList.size());
-
-                if(cursor != null && cursor.moveToFirst()) {
-                    do {
-                        int recipientIdIndex = cursor.getColumnIndex("address");
-                        int snippetIndex = cursor.getColumnIndex("body");
-                        int dateIndex = cursor.getColumnIndex("date");
-                        int threadIdIndex = cursor.getColumnIndex("thread_id");
-                        int typeIndex = cursor.getColumnIndex("type");
-                        int readIndex = cursor.getColumnIndex("read");
-
-                        ThreadedConversations threadedConversations = new ThreadedConversations();
-                        threadedConversations.setAddress(cursor.getString(recipientIdIndex));
-                        if(threadedConversations.getAddress() == null || threadedConversations.getAddress().isEmpty())
-                            continue;
-                        threadedConversations.setThread_id(cursor.getString(threadIdIndex));
-                        if(threadIds.contains(threadedConversations.getThread_id())) {
-                            threadedConversations.setSnippet(threadedDraftsList.get(threadIds
-                                            .indexOf(threadedConversations.getThread_id()))
-                                    .getSnippet());
-                            threadedConversations.setType(threadedDraftsList.get(threadIds
-                                            .indexOf(threadedConversations.getThread_id()))
-                                    .getType());
-                        }
-                        else {
-                            threadedConversations.setSnippet(cursor.getString(snippetIndex));
-                            threadedConversations.setType(cursor.getInt(typeIndex));
-                        }
-                        String contactName = Contacts.retrieveContactName(context,
-                                threadedConversations.getAddress());
-                        threadedConversations.setContact_name(contactName);
-                        threadedConversations.setDate(cursor.getString(dateIndex));
-                        threadedConversations.setType(cursor.getInt(typeIndex));
-                        threadedConversations.setIs_read(cursor.getInt(readIndex) == 1);
-                        threadedConversationsList.add(threadedConversations);
-                    } while(cursor.moveToNext());
-                }
-            }
-        });
-        thread.start();
-        try {
-            thread.join();
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-        }
-        if(cursor != null)
-            cursor.close();
-
-        return new LoadResult.Page<>(threadedConversationsList,
-                null,
-                null,
-                LoadResult.Page.COUNT_UNDEFINED,
-                LoadResult.Page.COUNT_UNDEFINED);
-    }
-
-}
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingDataSMSBroadcastReceiver.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingDataSMSBroadcastReceiver.java
index fdecea41..f7cf278d 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingDataSMSBroadcastReceiver.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingDataSMSBroadcastReceiver.java
@@ -8,9 +8,12 @@ import android.provider.Telephony;
 import android.util.Base64;
 import android.util.Log;
 
+import androidx.room.Room;
+
 import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.BuildConfig;
 import com.afkanerd.deku.DefaultSMS.Models.NotificationsHandler;
@@ -43,12 +46,22 @@ public class IncomingDataSMSBroadcastReceiver extends BroadcastReceiver {
             BuildConfig.APPLICATION_ID + ".DATA_UPDATED_BROADCAST_INTENT";
 
     ExecutorService executorService = Executors.newFixedThreadPool(4);
+
+    Datastore databaseConnector;
     @Override
     public void onReceive(Context context, Intent intent) {
         /**
          * Important note: either image or dump it
          */
 
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen()) {
+            Datastore.datastore = Room.databaseBuilder(context.getApplicationContext(),
+                            Datastore.class, Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        }
+        databaseConnector = Datastore.datastore;
+
 
         if (intent.getAction().equals(Telephony.Sms.Intents.DATA_SMS_RECEIVED_ACTION)) {
             if (getResultCode() == Activity.RESULT_OK) {
@@ -77,11 +90,10 @@ public class IncomingDataSMSBroadcastReceiver extends BroadcastReceiver {
                     conversation.setDate(dateSent);
                     conversation.setDate(date);
 
-                    ConversationDao conversationDao = conversation.getDaoInstance(context);
                     executorService.execute(new Runnable() {
                         @Override
                         public void run() {
-                            conversationDao.insert(conversation);
+                            databaseConnector.conversationDao().insert(conversation);
 
                             if(isValidKey) {
                                 try {
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSBroadcastReceiver.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSBroadcastReceiver.java
index 153a95c0..8c2a3cac 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSBroadcastReceiver.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSBroadcastReceiver.java
@@ -20,10 +20,12 @@ import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ConversationHandler;
+import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.Database.SemaphoreManager;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.NotificationsHandler;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.E2EE.E2EEHandler;
 import com.afkanerd.deku.Router.GatewayServers.GatewayServerHandler;
 import com.afkanerd.deku.Router.Router.RouterItem;
@@ -36,8 +38,6 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
 public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
-    Context context;
-
     public static final String TAG_NAME = "RECEIVED_SMS_ROUTING";
     public static final String TAG_ROUTING_URL = "swob.work.route.url,";
 
@@ -64,9 +64,17 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
 
     ExecutorService executorService = Executors.newFixedThreadPool(4);
 
+    Datastore databaseConnector;
+
     @Override
     public void onReceive(Context context, Intent intent) {
-        this.context = context;
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen()) {
+            Datastore.datastore = Room.databaseBuilder(context.getApplicationContext(),
+                            Datastore.class, Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        }
+        databaseConnector = Datastore.datastore;
 
         if (intent.getAction().equals(Telephony.Sms.Intents.SMS_DELIVER_ACTION)) {
             if (getResultCode() == Activity.RESULT_OK) {
@@ -74,52 +82,18 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
                     final String[] regIncomingOutput = NativeSMSDB.Incoming.register_incoming_text(context, intent);
                     if(regIncomingOutput != null) {
                         final String messageId = regIncomingOutput[NativeSMSDB.MESSAGE_ID];
-                        final String incomingText = regIncomingOutput[NativeSMSDB.BODY];
+                        final String body = regIncomingOutput[NativeSMSDB.BODY];
                         final String threadId = regIncomingOutput[NativeSMSDB.THREAD_ID];
                         final String address = regIncomingOutput[NativeSMSDB.ADDRESS];
                         final String date = regIncomingOutput[NativeSMSDB.DATE];
                         final String dateSent = regIncomingOutput[NativeSMSDB.DATE_SENT];
-                        final int subscriptionId = Integer.parseInt(regIncomingOutput[NativeSMSDB.SUBSCRIPTION_ID]);
-
-                        executorService.execute(new Runnable() {
-                            @Override
-                            public void run() {
-                                String text = incomingText;
-                                try {
-                                    text = processEncryptedIncoming(context, address, incomingText);
-                                } catch (Throwable e) {
-                                    e.printStackTrace();
-                                }
-                                Conversation conversation = new Conversation();
-                                conversation.setMessage_id(messageId);
-                                conversation.setText(text);
-                                conversation.setThread_id(threadId);
-                                conversation.setType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_INBOX);
-                                conversation.setAddress(address);
-                                conversation.setSubscription_id(subscriptionId);
-                                conversation.setDate(date);
-                                conversation.setDate_sent(dateSent);
-
-                                try {
-                                    conversation.getDaoInstance(context).insert(conversation);
-                                }catch (Exception e) {
-                                    e.printStackTrace();
-                                }
-
-                                Intent broadcastIntent = new Intent(SMS_DELIVER_ACTION);
-                                broadcastIntent.putExtra(Conversation.ID, messageId);
-                                context.sendBroadcast(broadcastIntent);
-
-
-                                String defaultRegion = Helpers.getUserCountry(context);
-                                String e16Address = Helpers.getFormatCompleteNumber(address, defaultRegion);
-                                if(!Contacts.isMuted(context, e16Address) &&
-                                        !Contacts.isMuted(context, address))
-                                    NotificationsHandler.sendIncomingTextMessageNotification(context,
-                                            conversation);
-                                router_activities(messageId);
-                            }
-                        });
+                        final int subscriptionId =
+                                Integer.parseInt(regIncomingOutput[NativeSMSDB.SUBSCRIPTION_ID]);
+
+                        insertConversation(context, address, messageId, threadId, body,
+                                subscriptionId, date, dateSent);
+
+                        router_activities(context, messageId);
                     }
                 } catch (IOException e) {
                     e.printStackTrace();
@@ -166,6 +140,7 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
                 }
             });
         }
+
         else if(intent.getAction().equals(SMS_DELIVERED_BROADCAST_INTENT)) {
             executorService.execute(new Runnable() {
                 @Override
@@ -201,15 +176,12 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
             });
         }
 
-
         else if(intent.getAction().equals(DATA_SENT_BROADCAST_INTENT)) {
             executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     String id = intent.getStringExtra(NativeSMSDB.ID);
-                    Conversation conversation1 = new Conversation();
-                    ConversationDao conversationDao = conversation1.getDaoInstance(context);
-                    Conversation conversation = conversationDao.getMessage(id);
+                    Conversation conversation = databaseConnector.conversationDao().getMessage(id);
 
                     if (getResultCode() == Activity.RESULT_OK) {
                         conversation.setStatus(Telephony.TextBasedSmsColumns.STATUS_NONE);
@@ -219,7 +191,7 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
                         conversation.setError_code(getResultCode());
                         conversation.setType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_FAILED);
                     }
-                    conversationDao.update(conversation);
+                    databaseConnector.conversationDao().update(conversation);
 
                     Intent broadcastIntent = new Intent(DATA_UPDATED_BROADCAST_INTENT);
                     broadcastIntent.putExtra(Conversation.ID, conversation.getMessage_id());
@@ -229,14 +201,13 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
                 }
             });
         }
+
         else if(intent.getAction().equals(DATA_DELIVERED_BROADCAST_INTENT)) {
             executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     String id = intent.getStringExtra(NativeSMSDB.ID);
-                    Conversation conversation1 = new Conversation();
-                    ConversationDao conversationDao = conversation1.getDaoInstance(context);
-                    Conversation conversation = conversationDao.getMessage(id);
+                    Conversation conversation = databaseConnector.conversationDao().getMessage(id);
 
                     if (getResultCode() == Activity.RESULT_OK) {
                         conversation.setStatus(Telephony.TextBasedSmsColumns.STATUS_COMPLETE);
@@ -247,7 +218,7 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
                         conversation.setType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_FAILED);
                     }
 
-                    conversationDao.update(conversation);
+                    databaseConnector.conversationDao().update(conversation);
 
                     Intent broadcastIntent = new Intent(DATA_UPDATED_BROADCAST_INTENT);
                     broadcastIntent.putExtra(Conversation.ID, conversation.getMessage_id());
@@ -259,6 +230,56 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
         }
     }
 
+    public void insertThreads(Context context, Conversation conversation) {
+        ThreadedConversations threadedConversations =
+                ThreadedConversations.build(context, conversation);
+        String contactName = Contacts.retrieveContactName(context, conversation.getAddress());
+        threadedConversations.setContact_name(contactName);
+        databaseConnector.threadedConversationsDao().insert(threadedConversations);
+    }
+
+    public void insertConversation(Context context, String address, String messageId,
+                                   String threadId, String body, int subscriptionId, String date,
+                                   String dateSent) {
+
+        Conversation conversation = new Conversation();
+        conversation.setMessage_id(messageId);
+        conversation.setThread_id(threadId);
+        conversation.setType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_INBOX);
+        conversation.setAddress(address);
+        conversation.setSubscription_id(subscriptionId);
+        conversation.setDate(date);
+        conversation.setDate_sent(dateSent);
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
+            @Override
+            public void run() {
+                String text = body;
+                try {
+                    text = processEncryptedIncoming(context, address, body);
+                } catch (Throwable e) {
+                    e.printStackTrace();
+                }
+                conversation.setText(text);
+
+                try {
+                    databaseConnector.conversationDao().insert(conversation);
+                    insertThreads(context, conversation);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+
+                String defaultRegion = Helpers.getUserCountry(context);
+                String e16Address = Helpers.getFormatCompleteNumber(address, defaultRegion);
+                if(!Contacts.isMuted(context, e16Address) &&
+                        !Contacts.isMuted(context, address))
+                    NotificationsHandler.sendIncomingTextMessageNotification(context,
+                            conversation);
+
+            }
+        });
+    }
+
+
     public String processEncryptedIncoming(Context context, String address, String text) throws Throwable {
         if(E2EEHandler.isValidDefaultText(text)) {
             String keystoreAlias = E2EEHandler.deriveKeystoreAlias(address, 0);
@@ -268,7 +289,7 @@ public class IncomingTextSMSBroadcastReceiver extends BroadcastReceiver {
         return text;
     }
 
-    public void router_activities(String messageId) {
+    public void router_activities(Context context, String messageId) {
         try {
             Cursor cursor = NativeSMSDB.fetchByMessageId(context, messageId);
             if(cursor.moveToFirst()) {
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSReplyActionBroadcastReceiver.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSReplyActionBroadcastReceiver.java
index e4b06e6a..4d225e41 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSReplyActionBroadcastReceiver.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/BroadcastReceivers/IncomingTextSMSReplyActionBroadcastReceiver.java
@@ -19,15 +19,18 @@ import androidx.core.app.NotificationCompat;
 import androidx.core.app.NotificationManagerCompat;
 import androidx.core.app.Person;
 import androidx.core.app.RemoteInput;
+import androidx.room.Room;
 
 import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.BuildConfig;
 import com.afkanerd.deku.DefaultSMS.Models.NotificationsHandler;
 import com.afkanerd.deku.DefaultSMS.Models.SIMHandler;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.DefaultSMS.R;
 
 public class IncomingTextSMSReplyActionBroadcastReceiver extends BroadcastReceiver {
@@ -42,8 +45,19 @@ public class IncomingTextSMSReplyActionBroadcastReceiver extends BroadcastReceiv
     // Key for the string that's delivered in the action's intent.
     public static final String KEY_TEXT_REPLY = "KEY_TEXT_REPLY";
 
+    Datastore databaseConnector;
+
     @Override
     public void onReceive(Context context, Intent intent) {
+
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen()) {
+            Datastore.datastore = Room.databaseBuilder(context.getApplicationContext(),
+                            Datastore.class, Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        }
+        databaseConnector = Datastore.datastore;
+
         if (intent.getAction() != null && intent.getAction().equals(REPLY_BROADCAST_INTENT)) {
             Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
             if (remoteInput != null) {
@@ -67,43 +81,43 @@ public class IncomingTextSMSReplyActionBroadcastReceiver extends BroadcastReceiv
                 conversation.setDate(String.valueOf(System.currentTimeMillis()));
                 conversation.setType(Telephony.TextBasedSmsColumns.MESSAGE_TYPE_OUTBOX);
                 conversation.setStatus(Telephony.TextBasedSmsColumns.STATUS_PENDING);
-                ConversationDao conversationDao = conversation.getDaoInstance(context);
-                Thread thread = new Thread(new Runnable() {
+
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
-                        conversationDao.insert(conversation);
-                    }
-                });
-                thread.start();
+                        try {
+                            databaseConnector.conversationDao().insert(conversation);
+
+                            SMSDatabaseWrapper.send_text(context, conversation, null);
+                            Intent broadcastIntent = new Intent(SMS_UPDATED_BROADCAST_INTENT);
+                            broadcastIntent.putExtra(Conversation.ID, conversation.getMessage_id());
+                            broadcastIntent.putExtra(Conversation.THREAD_ID, conversation.getThread_id());
+                            if(intent.getExtras() != null)
+                                broadcastIntent.putExtras(intent.getExtras());
+
+                            context.sendBroadcast(broadcastIntent);
 
-                try {
-                    thread.join();
+                            NotificationCompat.MessagingStyle messagingStyle =
+                                    NotificationsHandler.getMessagingStyle(context, conversation, reply.toString());
 
-                    SMSDatabaseWrapper.send_text(context, conversation, null);
-                    Intent broadcastIntent = new Intent(SMS_UPDATED_BROADCAST_INTENT);
-                    broadcastIntent.putExtra(Conversation.ID, conversation.getMessage_id());
-                    broadcastIntent.putExtra(Conversation.THREAD_ID, conversation.getThread_id());
-                    if(intent.getExtras() != null)
-                        broadcastIntent.putExtras(intent.getExtras());
+                            Intent replyIntent = NotificationsHandler.getReplyIntent(context, conversation);
+                            PendingIntent pendingIntent = NotificationsHandler.getPendingIntent(context, conversation);
 
-                    context.sendBroadcast(broadcastIntent);
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
+                            NotificationCompat.Builder builder =
+                                    NotificationsHandler.getNotificationBuilder(context, replyIntent,
+                                            conversation, pendingIntent);
 
-                NotificationCompat.MessagingStyle messagingStyle =
-                        NotificationsHandler.getMessagingStyle(context, conversation, reply.toString());
+                            builder.setStyle(messagingStyle);
+                            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);
+                            notificationManagerCompat.notify(Integer.parseInt(threadId), builder.build());
 
-                Intent replyIntent = NotificationsHandler.getReplyIntent(context, conversation);
-                PendingIntent pendingIntent = NotificationsHandler.getPendingIntent(context, conversation);
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
+                    }
+                });
 
-                NotificationCompat.Builder builder =
-                        NotificationsHandler.getNotificationBuilder(context, replyIntent,
-                                conversation, pendingIntent);
 
-                builder.setStyle(messagingStyle);
-                NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);
-                notificationManagerCompat.notify(Integer.parseInt(threadId), builder.build());
             }
         }
 
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/ConversationActivity.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/ConversationActivity.java
index 0e7028b1..732a84ff 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/ConversationActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/ConversationActivity.java
@@ -48,8 +48,10 @@ import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversationsHandler;
 import com.afkanerd.deku.DefaultSMS.AdaptersViewModels.ConversationsViewModel;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ViewHolders.ConversationTemplateViewHandler;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.SIMHandler;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.E2EE.E2EECompactActivity;
 import com.afkanerd.deku.E2EE.E2EEHandler;
 import com.google.android.material.snackbar.Snackbar;
@@ -84,7 +86,6 @@ public class ConversationActivity extends E2EECompactActivity {
     LinearLayoutManager linearLayoutManager;
     RecyclerView singleMessagesThreadRecyclerView;
 
-
     MutableLiveData<List<Integer>> searchPositions = new MutableLiveData<>();
 
     ImageButton backSearchBtn;
@@ -110,7 +111,6 @@ public class ConversationActivity extends E2EECompactActivity {
             configureMessagesTextBox();
 
             configureLayoutForMessageType();
-            configureBroadcastListeners();
         } catch (Exception e) {
             e.printStackTrace();
         }
@@ -141,7 +141,7 @@ public class ConversationActivity extends E2EECompactActivity {
         if(threadedConversations.secured)
             layout.setPlaceholderText(getString(R.string.send_message_secured_text_box_hint));
 
-        executorService.execute(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 try {
@@ -246,8 +246,8 @@ public class ConversationActivity extends E2EECompactActivity {
         if(getIntent().hasExtra(Conversation.THREAD_ID)) {
             ThreadedConversations threadedConversations = new ThreadedConversations();
             threadedConversations.setThread_id(getIntent().getStringExtra(Conversation.THREAD_ID));
-            this.threadedConversations = ThreadedConversationsHandler.get(getApplicationContext(),
-                    threadedConversations);
+            this.threadedConversations = ThreadedConversationsHandler.get(
+                    databaseConnector.threadedConversationsDao(), threadedConversations);
         }
         else if(getIntent().hasExtra(Conversation.ADDRESS)) {
             ThreadedConversations threadedConversations = new ThreadedConversations();
@@ -309,6 +309,7 @@ public class ConversationActivity extends E2EECompactActivity {
 
         conversationsViewModel = new ViewModelProvider(this)
                 .get(ConversationsViewModel.class);
+        conversationsViewModel.datastore = Datastore.datastore;
 
         backSearchBtn.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -345,7 +346,6 @@ public class ConversationActivity extends E2EECompactActivity {
 
     }
 
-    ConversationDao conversationDao;
     boolean firstScrollInitiated = false;
 
     LifecycleOwner lifecycleOwner;
@@ -354,7 +354,6 @@ public class ConversationActivity extends E2EECompactActivity {
     private void configureRecyclerView() throws InterruptedException {
         singleMessagesThreadRecyclerView.setAdapter(conversationsRecyclerAdapter);
         singleMessagesThreadRecyclerView.setItemViewCacheSize(500);
-        conversationDao = conversation.getDaoInstance(getApplicationContext());
 
         lifecycleOwner = this;
 
@@ -382,11 +381,10 @@ public class ConversationActivity extends E2EECompactActivity {
 
         if(this.threadedConversations != null) {
             if(getIntent().hasExtra(SEARCH_STRING)) {
-                conversationsViewModel.conversationDao = conversationDao;
                 conversationsViewModel.threadId = threadedConversations.getThread_id();
                 findViewById(R.id.conversations_search_results_found).setVisibility(View.VISIBLE);
                 String searching = getIntent().getStringExtra(SEARCH_STRING);
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         searchForInput(searching);
@@ -396,7 +394,7 @@ public class ConversationActivity extends E2EECompactActivity {
                 searchPositions.setValue(new ArrayList<>(
                         Collections.singletonList(
                                 getIntent().getIntExtra(SEARCH_INDEX, 0))));
-                conversationsViewModel.getSearch(getApplicationContext(), conversationDao,
+                conversationsViewModel.getSearch(getApplicationContext(),
                                 threadedConversations.getThread_id(), searchPositions.getValue())
                         .observe(this, new Observer<PagingData<Conversation>>() {
                             @Override
@@ -408,7 +406,7 @@ public class ConversationActivity extends E2EECompactActivity {
             }
             else if(this.threadedConversations.getThread_id()!= null &&
                     !this.threadedConversations.getThread_id().isEmpty()) {
-                conversationsViewModel.get(getApplicationContext(), conversationDao,
+                conversationsViewModel.get(getApplicationContext(),
                                 this.threadedConversations.getThread_id())
                         .observe(this, new Observer<PagingData<Conversation>>() {
                             @Override
@@ -424,7 +422,7 @@ public class ConversationActivity extends E2EECompactActivity {
             public void onChanged(Conversation conversation) {
                 List<Conversation> list = new ArrayList<>();
                 list.add(conversation);
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         conversationsViewModel.deleteItems(getApplicationContext(), list);
@@ -443,7 +441,7 @@ public class ConversationActivity extends E2EECompactActivity {
             public void onChanged(Conversation conversation) {
                 List<Conversation> list = new ArrayList<>();
                 list.add(conversation);
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         conversationsViewModel.deleteItems(getApplicationContext(), list);
@@ -646,7 +644,7 @@ public class ConversationActivity extends E2EECompactActivity {
 
     private void checkDrafts() throws InterruptedException {
         if(smsTextView.getText() == null || smsTextView.getText().toString().isEmpty())
-            new Thread(new Runnable() {
+            ThreadingPoolExecutor.executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -666,7 +664,7 @@ public class ConversationActivity extends E2EECompactActivity {
                         emptyDraft();
                     }
                 }
-            }).start();
+            });
     }
 
     private void configureLayoutForMessageType() {
@@ -702,12 +700,11 @@ public class ConversationActivity extends E2EECompactActivity {
     }
 
     private void blockContact() {
-        executorService.execute(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 threadedConversations.setIs_blocked(true);
-                new ThreadedConversations().getDaoInstance(getApplicationContext())
-                        .update(threadedConversations);
+                databaseConnector.threadedConversationsDao().update(threadedConversations);
             }
         });
 
@@ -786,7 +783,7 @@ public class ConversationActivity extends E2EECompactActivity {
                 .setTitle(getString(R.string.conversation_menu_view_details_title))
                 .setMessage(detailsBuilder);
 
-        executorService.execute(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 try {
@@ -874,7 +871,7 @@ public class ConversationActivity extends E2EECompactActivity {
                     if(editable != null && editable.length() > 1) {
                         conversationsRecyclerAdapter.searchString = editable.toString();
                         conversationsRecyclerAdapter.resetSearchItems(searchPositions.getValue());
-                        executorService.execute(new Runnable() {
+                        ThreadingPoolExecutor.executorService.execute(new Runnable() {
                             @Override
                             public void run() {
                                 searchForInput(editable.toString());
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/CustomAppCompactActivity.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/CustomAppCompactActivity.java
index 09251c60..d3cf9a13 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/CustomAppCompactActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/CustomAppCompactActivity.java
@@ -11,6 +11,7 @@ import android.util.Log;
 
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationManagerCompat;
+import androidx.room.Room;
 
 import com.afkanerd.deku.DefaultSMS.AdaptersViewModels.ConversationsViewModel;
 import com.afkanerd.deku.DefaultSMS.AdaptersViewModels.ThreadedConversationsViewModel;
@@ -20,9 +21,11 @@ import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.SIMHandler;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.E2EE.E2EEHandler;
 import com.afkanerd.deku.QueueListener.GatewayClients.GatewayClientHandler;
 import com.google.i18n.phonenumbers.NumberParseException;
@@ -35,23 +38,14 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
 public class CustomAppCompactActivity extends DualSIMConversationActivity {
-    BroadcastReceiver generateUpdateEventsBroadcastReceiver;
-    BroadcastReceiver smsDeliverActionBroadcastReceiver;
-    BroadcastReceiver smsSentBroadcastIntent;
-    BroadcastReceiver smsDeliveredBroadcastIntent;
-    BroadcastReceiver dataSentBroadcastIntent;
-    BroadcastReceiver dataDeliveredBroadcastIntent;
-
-    protected static final String TAG_NAME = "NATIVE_CONVERSATION_TAG";
-    protected static final String UNIQUE_WORK_NAME = "NATIVE_CONVERSATION_TAG_UNIQUE_WORK_NAME";
-
     protected final static String DRAFT_PRESENT_BROADCAST = "DRAFT_PRESENT_BROADCAST";
 
     protected ConversationsViewModel conversationsViewModel;
 
     protected ThreadedConversationsViewModel threadedConversationsViewModel;
 
-    protected ExecutorService executorService = Executors.newFixedThreadPool(4);
+
+    public Datastore databaseConnector;
 
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
@@ -61,7 +55,15 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
             startActivity(new Intent(this, DefaultCheckActivity.class));
             finish();
         }
+
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen())
+            Datastore.datastore = Room.databaseBuilder(getApplicationContext(), Datastore.class,
+                            Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        databaseConnector = Datastore.datastore;
     }
+
     private boolean _checkIsDefaultApp() {
         final String myPackageName = getPackageName();
         final String defaultPackage = Telephony.Sms.getDefaultSmsPackage(this);
@@ -69,86 +71,6 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
         return myPackageName.equals(defaultPackage);
     }
 
-    protected void configureBroadcastListeners() {
-
-        generateUpdateEventsBroadcastReceiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                if(intent.getAction() != null && (
-                        intent.getAction().equals(IncomingTextSMSBroadcastReceiver.SMS_DELIVER_ACTION) ||
-                intent.getAction().equals(IncomingDataSMSBroadcastReceiver.DATA_DELIVER_ACTION))) {
-                    String messageId = intent.getStringExtra(Conversation.ID);
-                    if(conversationsViewModel != null) {
-                        executorService.execute(new Runnable() {
-                            @Override
-                            public void run() {
-                                Conversation conversation = conversationsViewModel
-                                        .conversationDao.getMessage(messageId);
-                                conversation.setRead(true);
-                                conversationsViewModel.update(conversation);
-                                try {
-                                    if(E2EEHandler.canCommunicateSecurely(getApplicationContext(),
-                                            E2EEHandler.deriveKeystoreAlias(
-                                                    conversation.getAddress(), 0))) {
-                                        informSecured(true);
-                                    }
-                                } catch (CertificateException | KeyStoreException | IOException |
-                                         NoSuchAlgorithmException | NumberParseException e) {
-                                    e.printStackTrace();
-                                }
-                            }
-                        });
-                    }
-                }  else {
-                    String messageId = intent.getStringExtra(Conversation.ID);
-                    if(conversationsViewModel != null && messageId != null) {
-                        executorService.execute(new Runnable() {
-                            @Override
-                            public void run() {
-                                Conversation conversation = conversationsViewModel
-                                        .conversationDao.getMessage(messageId);
-                                conversation.setRead(true);
-                                conversationsViewModel.update(conversation);
-                                try {
-                                    if(E2EEHandler.canCommunicateSecurely(getApplicationContext(),
-                                            E2EEHandler.deriveKeystoreAlias( conversation.getAddress(),
-                                                    0))) {
-                                        informSecured(true);
-                                    }
-                                } catch (CertificateException | KeyStoreException | IOException |
-                                         NoSuchAlgorithmException | NumberParseException e) {
-                                    e.printStackTrace();
-                                }
-                            }
-                        });
-                    }
-                }
-                if(threadedConversationsViewModel != null) {
-                    executorService.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            threadedConversationsViewModel.refresh(context);
-                        }
-                    });
-                }
-            }
-        };
-
-        IntentFilter intentFilter = new IntentFilter();
-
-        intentFilter.addAction(IncomingTextSMSBroadcastReceiver.SMS_DELIVER_ACTION);
-        intentFilter.addAction(IncomingDataSMSBroadcastReceiver.DATA_DELIVER_ACTION);
-
-        intentFilter.addAction(IncomingTextSMSBroadcastReceiver.SMS_UPDATED_BROADCAST_INTENT);
-        intentFilter.addAction(DRAFT_PRESENT_BROADCAST);
-        intentFilter.addAction(IncomingDataSMSBroadcastReceiver.DATA_UPDATED_BROADCAST_INTENT);
-
-        if(android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S)
-            registerReceiver(generateUpdateEventsBroadcastReceiver, intentFilter, Context.RECEIVER_EXPORTED);
-        else
-            registerReceiver(generateUpdateEventsBroadcastReceiver, intentFilter);
-    }
-
     protected void informSecured(boolean secured) { }
 
     private void cancelAllNotifications(int id) {
@@ -185,7 +107,7 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
                 conversation.set_mk(Base64.encodeToString(_mk, Base64.NO_WRAP));
 
             if(conversationsViewModel != null) {
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         try {
@@ -210,7 +132,7 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
     protected void saveDraft(final String messageId, final String text, ThreadedConversations threadedConversations) throws InterruptedException {
         if(text != null) {
             if(conversationsViewModel != null) {
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         Conversation conversation = new Conversation();
@@ -227,10 +149,7 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
 
                             ThreadedConversations tc =
                                     ThreadedConversations.build(getApplicationContext(), conversation);
-                            ThreadedConversationsDao threadedConversationsDao =
-                                    tc.getDaoInstance(getApplicationContext());
-                            threadedConversationsDao.insert(tc);
-                            tc.close();
+                            databaseConnector.threadedConversationsDao().insert(tc);
 
                             SMSDatabaseWrapper.saveDraft(getApplicationContext(), conversation);
                         } catch (Exception e) {
@@ -245,28 +164,6 @@ public class CustomAppCompactActivity extends DualSIMConversationActivity {
         }
     }
 
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        if(generateUpdateEventsBroadcastReceiver != null)
-            unregisterReceiver(generateUpdateEventsBroadcastReceiver);
-
-        if(smsDeliverActionBroadcastReceiver != null)
-            unregisterReceiver(smsDeliverActionBroadcastReceiver);
-
-        if(smsSentBroadcastIntent != null)
-            unregisterReceiver(smsSentBroadcastIntent);
-
-        if(smsDeliveredBroadcastIntent != null)
-            unregisterReceiver(smsDeliveredBroadcastIntent);
-
-        if(dataSentBroadcastIntent != null)
-            unregisterReceiver(dataSentBroadcastIntent);
-
-        if(dataDeliveredBroadcastIntent != null)
-            unregisterReceiver(dataDeliveredBroadcastIntent);
-    }
-
     protected void cancelNotifications(String threadId) {
         if (!threadId.isEmpty()) {
             NotificationManagerCompat notificationManager = NotificationManagerCompat.from(
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/DefaultCheckActivity.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/DefaultCheckActivity.java
index 587152a5..e47472e3 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/DefaultCheckActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/DefaultCheckActivity.java
@@ -24,6 +24,7 @@ import android.view.View;
 
 import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.Database.Migrations;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.QueueListener.GatewayClients.GatewayClientHandler;
 import com.google.android.material.button.MaterialButton;
 
@@ -117,13 +118,14 @@ public class DefaultCheckActivity extends AppCompatActivity {
 
 
     private void startUserActivities() {
-        new Thread(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
+                configureNotifications();
                 startMigrations();
                 startServices();
             }
-        }).start();
+        });
 
         Intent intent = new Intent(this, ThreadedConversationsActivity.class);
         intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -131,6 +133,76 @@ public class DefaultCheckActivity extends AppCompatActivity {
         finish();
     }
 
+    private void configureNotifications(){
+        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            createNotificationChannel();
+        }
+    }
+    ArrayList<String> notificationsChannelIds = new ArrayList<>();
+    ArrayList<String> notificationsChannelNames = new ArrayList<>();
+
+    private void createNotificationChannel() {
+        notificationsChannelIds.add(getString(R.string.incoming_messages_channel_id));
+        notificationsChannelNames.add(getString(R.string.incoming_messages_channel_name));
+
+        notificationsChannelIds.add(getString(R.string.running_gateway_clients_channel_id));
+        notificationsChannelNames.add(getString(R.string.running_gateway_clients_channel_name));
+
+        notificationsChannelIds.add(getString(R.string.foreground_service_failed_channel_id));
+        notificationsChannelNames.add(getString(R.string.foreground_service_failed_channel_name));
+
+        createNotificationChannelIncomingMessage();
+
+        createNotificationChannelRunningGatewayListeners();
+
+        createNotificationChannelReconnectGatewayListeners();
+    }
+
+    private void createNotificationChannelIncomingMessage() {
+        int importance = NotificationManager.IMPORTANCE_HIGH;
+
+        NotificationChannel channel = new NotificationChannel(
+                notificationsChannelIds.get(0), notificationsChannelNames.get(0), importance);
+        channel.setDescription(getString(R.string.incoming_messages_channel_description));
+        channel.enableLights(true);
+        channel.setLightColor(R.color.logo_primary);
+        channel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE);
+
+        // Register the channel with the system; you can't change the importance
+        // or other notification behaviors after this
+        NotificationManager notificationManager = getSystemService(NotificationManager.class);
+        notificationManager.createNotificationChannel(channel);
+    }
+
+    private void createNotificationChannelRunningGatewayListeners() {
+        int importance = NotificationManager.IMPORTANCE_DEFAULT;
+        NotificationChannel channel = new NotificationChannel(
+                notificationsChannelIds.get(1), notificationsChannelNames.get(1), importance);
+        channel.setDescription(getString(R.string.running_gateway_clients_channel_description));
+        channel.setLightColor(R.color.logo_primary);
+        channel.setLockscreenVisibility(Notification.DEFAULT_ALL);
+
+        // Register the channel with the system; you can't change the importance
+        // or other notification behaviors after this
+        NotificationManager notificationManager = getSystemService(NotificationManager.class);
+        notificationManager.createNotificationChannel(channel);
+    }
+
+    private void createNotificationChannelReconnectGatewayListeners() {
+        int importance = NotificationManager.IMPORTANCE_DEFAULT;
+        NotificationChannel channel = new NotificationChannel(
+                notificationsChannelIds.get(2), notificationsChannelNames.get(2), importance);
+        channel.setDescription(getString(R.string.running_gateway_clients_channel_description));
+        channel.setLightColor(R.color.logo_primary);
+        channel.setLockscreenVisibility(Notification.DEFAULT_ALL);
+
+        // Register the channel with the system; you can't change the importance
+        // or other notification behaviors after this
+        NotificationManager notificationManager = getSystemService(NotificationManager.class);
+        notificationManager.createNotificationChannel(channel);
+    }
+
+
     @Override
     public void onActivityResult(int reqCode, int resultCode, Intent data) {
         super.onActivityResult(reqCode, resultCode, data);
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Fragments/ThreadedConversationsFragment.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Fragments/ThreadedConversationsFragment.java
index 4a022b38..92710007 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Fragments/ThreadedConversationsFragment.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Fragments/ThreadedConversationsFragment.java
@@ -44,6 +44,7 @@ import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ViewHolders.ThreadedConversationsTemplateViewHolder;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.DefaultSMS.R;
 import com.afkanerd.deku.DefaultSMS.SearchMessagesThreadsActivity;
 import com.afkanerd.deku.DefaultSMS.SettingsActivity;
@@ -101,13 +102,10 @@ public class ThreadedConversationsFragment extends Fragment {
 
     public interface ViewModelsInterface {
         ThreadedConversationsViewModel getThreadedConversationsViewModel();
-        ExecutorService getExecutorService();
     }
 
     private ViewModelsInterface viewModelsInterface;
 
-    ExecutorService executorService;
-
     @Nullable
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
@@ -142,7 +140,7 @@ public class ThreadedConversationsFragment extends Fragment {
 
             if(menu.findItem(R.id.conversations_threads_main_menu_mark_all_read) != null &&
             menu.findItem(R.id.conversations_threads_main_menu_mark_all_unread) != null)
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         boolean hasUnread = threadedConversationsViewModel.hasUnread(threadsIds);
@@ -174,15 +172,11 @@ public class ThreadedConversationsFragment extends Fragment {
                 @Override
                 public void run() {
 
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
-                            ThreadedConversations threadedConversations = new ThreadedConversations();
-                            ThreadedConversationsDao threadedConversationsDao =
-                                    threadedConversations.getDaoInstance(getContext());
-                            List<String> foundList =
-                                    threadedConversationsDao.findAddresses(ids);
-                            threadedConversations.close();
+                            List<String> foundList = threadedConversationsViewModel.
+                                    databaseConnector.threadedConversationsDao().findAddresses(ids);
                             threadedConversationsViewModel.delete(getContext(), ids);
                             getActivity().runOnUiThread(new Runnable() {
                                 @Override
@@ -259,7 +253,7 @@ public class ThreadedConversationsFragment extends Fragment {
                             archive.is_archived = true;
                             archiveList.add(archive);
                         }
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
                             threadedConversationsViewModel.archive(archiveList);
@@ -280,7 +274,7 @@ public class ThreadedConversationsFragment extends Fragment {
                             archive.is_archived = false;
                             archiveList.add(archive);
                         }
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
                             threadedConversationsViewModel.unarchive(archiveList);
@@ -298,7 +292,7 @@ public class ThreadedConversationsFragment extends Fragment {
                                 threadedConversationRecyclerAdapter.selectedItems.getValue().values()) {
                             threadIds.add(viewHolder.id);
                         }
-                        executorService.execute(new Runnable() {
+                        ThreadingPoolExecutor.executorService.execute(new Runnable() {
                             @Override
                             public void run() {
                                 threadedConversationsViewModel.markUnRead(getContext(), threadIds);
@@ -317,7 +311,7 @@ public class ThreadedConversationsFragment extends Fragment {
                                 threadedConversationRecyclerAdapter.selectedItems.getValue().values()) {
                             threadIds.add(viewHolder.id);
                         }
-                        executorService.execute(new Runnable() {
+                        ThreadingPoolExecutor.executorService.execute(new Runnable() {
                             @Override
                             public void run() {
                                 threadedConversationsViewModel.markRead(getContext(), threadIds);
@@ -333,7 +327,7 @@ public class ThreadedConversationsFragment extends Fragment {
                             threadedConversationRecyclerAdapter.selectedItems.getValue().values()) {
                         threadIds.add(viewHolder.id);
                     }
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
                             threadedConversationsViewModel.unblock(getContext(), threadIds);
@@ -348,7 +342,7 @@ public class ThreadedConversationsFragment extends Fragment {
                             threadedConversationRecyclerAdapter.selectedItems.getValue().values()) {
                         threadIds.add(viewHolder.id);
                     }
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
                             threadedConversationsViewModel.mute(getContext(), threadIds);
@@ -370,7 +364,7 @@ public class ThreadedConversationsFragment extends Fragment {
                             threadedConversationRecyclerAdapter.selectedItems.getValue().values()) {
                         threadIds.add(viewHolder.id);
                     }
-                    executorService.execute(new Runnable() {
+                    ThreadingPoolExecutor.executorService.execute(new Runnable() {
                         @Override
                         public void run() {
                             threadedConversationsViewModel.unMute(getContext(), threadIds);
@@ -398,7 +392,7 @@ public class ThreadedConversationsFragment extends Fragment {
     public void onResume() {
         super.onResume();
 
-        executorService.execute(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 if(getContext() != null) {
@@ -409,19 +403,15 @@ public class ThreadedConversationsFragment extends Fragment {
                                 .apply();
                         threadedConversationsViewModel.reset(getContext());
                     }
-
-                    threadedConversationsViewModel.refresh(getContext());
                 }
             }
         });
     }
 
-    ThreadedConversationsDao threadedConversationsDao;
 
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         viewModelsInterface = (ViewModelsInterface) view.getContext();
-        executorService = viewModelsInterface.getExecutorService();
 
         setHasOptionsMenu(true);
         Bundle args = getArguments();
@@ -447,7 +437,7 @@ public class ThreadedConversationsFragment extends Fragment {
         threadedConversationsViewModel = viewModelsInterface.getThreadedConversationsViewModel();
 
         threadedConversationRecyclerAdapter = new ThreadedConversationRecyclerAdapter(
-                threadedConversationsDao);
+                threadedConversationsViewModel.databaseConnector.threadedConversationsDao());
         threadedConversationRecyclerAdapter.selectedItems.observe(getViewLifecycleOwner(),
                 new Observer<HashMap<Long, ThreadedConversationsTemplateViewHolder>>() {
             @Override
@@ -593,7 +583,7 @@ public class ThreadedConversationsFragment extends Fragment {
                 if(uri == null)
                     return;
 
-                executorService.execute(new Runnable() {
+                ThreadingPoolExecutor.executorService.execute(new Runnable() {
                     @Override
                     public void run() {
                         try {
@@ -601,8 +591,7 @@ public class ThreadedConversationsFragment extends Fragment {
                                     openFileDescriptor(uri, "w");
                             FileOutputStream fileOutputStream =
                                     new FileOutputStream(pfd.getFileDescriptor());
-                            fileOutputStream.write(threadedConversationsViewModel
-                                    .getAllExport(getContext())
+                            fileOutputStream.write(threadedConversationsViewModel.getAllExport()
                                     .getBytes());
                             // Let the document provider know you're done by closing the stream.
                             fileOutputStream.close();
@@ -657,7 +646,7 @@ public class ThreadedConversationsFragment extends Fragment {
             return true;
         }
         if(item.getItemId() == R.id.conversation_threads_main_menu_clear_drafts) {
-            executorService.execute(new Runnable() {
+            ThreadingPoolExecutor.executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/Conversation.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/Conversation.java
index 5680e023..4102db06 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/Conversation.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/Conversation.java
@@ -69,14 +69,6 @@ public class Conversation {
         this._mk = _mk;
     }
 
-    public synchronized ConversationDao getDaoInstance(Context context) {
-        Datastore databaseConnector = Room.databaseBuilder(context, Datastore.class,
-                        Datastore.databaseName)
-                .enableMultiInstanceInvalidation()
-                .build();
-        return databaseConnector.conversationDao();
-    }
-
     public int getError_code() {
         return error_code;
     }
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversations.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversations.java
index f7f78040..f9dae5dc 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversations.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversations.java
@@ -74,19 +74,6 @@ public class ThreadedConversations {
     @Ignore
      private boolean is_mute = false;
 
-     @Ignore
-    Datastore databaseConnector;
-    public ThreadedConversationsDao getDaoInstance(Context context) {
-        databaseConnector = Room.databaseBuilder(context, Datastore.class,
-                        Datastore.databaseName).build();
-        return databaseConnector.threadedConversationsDao();
-    }
-
-    public void close() {
-//        if(databaseConnector != null)
-//            databaseConnector.close();
-    }
-
     public static ThreadedConversations build(Context context, Conversation conversation) {
         ThreadedConversations threadedConversations = new ThreadedConversations();
         threadedConversations.setAddress(conversation.getAddress());
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversationsHandler.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversationsHandler.java
index 851da8a3..7aae872f 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversationsHandler.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Conversations/ThreadedConversationsHandler.java
@@ -17,16 +17,14 @@ public class ThreadedConversationsHandler {
         return threadedConversations;
     }
 
-    public static ThreadedConversations get(Context context, ThreadedConversations threadedConversations) throws InterruptedException {
+    public static ThreadedConversations get(ThreadedConversationsDao threadedConversationsDao,
+                                            ThreadedConversations threadedConversations) throws InterruptedException {
         final ThreadedConversations[] threadedConversations1 = {threadedConversations};
         Thread thread = new Thread(new Runnable() {
             @Override
             public void run() {
-                ThreadedConversationsDao threadedConversationsDao =
-                        threadedConversations.getDaoInstance(context);
                 threadedConversations1[0] = threadedConversationsDao
                         .get(threadedConversations.getThread_id());
-                threadedConversations.close();
             }
         });
         thread.start();
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Database/Datastore.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Database/Datastore.java
index c40efa09..f35ae837 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Database/Datastore.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/Database/Datastore.java
@@ -7,6 +7,7 @@ import androidx.room.AutoMigration;
 import androidx.room.Database;
 import androidx.room.DatabaseConfiguration;
 import androidx.room.InvalidationTracker;
+import androidx.room.Room;
 import androidx.room.RoomDatabase;
 import androidx.sqlite.db.SupportSQLiteOpenHelper;
 
@@ -61,6 +62,7 @@ public abstract class Datastore extends RoomDatabase {
 
     public abstract ConversationsThreadsEncryptionDao conversationsThreadsEncryptionDao();
 
+
     @Override
     public void clearAllTables() {
 
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/ThreadingPoolExecutor.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/ThreadingPoolExecutor.java
new file mode 100644
index 00000000..88f6a5b2
--- /dev/null
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/Models/ThreadingPoolExecutor.java
@@ -0,0 +1,8 @@
+package com.afkanerd.deku.DefaultSMS.Models;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class ThreadingPoolExecutor {
+    public static final ExecutorService executorService = Executors.newFixedThreadPool(4);
+}
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/SearchMessagesThreadsActivity.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/SearchMessagesThreadsActivity.java
index 20dc5ace..326bd8bb 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/SearchMessagesThreadsActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/SearchMessagesThreadsActivity.java
@@ -9,6 +9,7 @@ import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import androidx.room.Room;
 
 import android.content.Context;
 import android.content.Intent;
@@ -33,6 +34,7 @@ import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.DAO.ThreadedConversationsDao;
 import com.afkanerd.deku.DefaultSMS.Models.Contacts;
 import com.afkanerd.deku.DefaultSMS.AdaptersViewModels.SearchViewModel;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 
 import java.util.List;
 
@@ -43,12 +45,22 @@ public class SearchMessagesThreadsActivity extends AppCompatActivity {
 
     ThreadedConversations threadedConversations = new ThreadedConversations();
 
+    Datastore databaseConnector;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_search_messages_threads);
+
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen())
+            Datastore.datastore = Room.databaseBuilder(getApplicationContext(), Datastore.class,
+                            Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        databaseConnector = Datastore.datastore;
         searchViewModel = new ViewModelProvider(this).get(
                 SearchViewModel.class);
+        searchViewModel.databaseConnector = Datastore.datastore;
 
         Toolbar myToolbar = (Toolbar) findViewById(R.id.search_messages_toolbar);
         setSupportActionBar(myToolbar);
@@ -109,12 +121,8 @@ public class SearchMessagesThreadsActivity extends AppCompatActivity {
             }
         });
 
-        ThreadedConversationsDao threadedConversationsDao =
-                threadedConversations.getDaoInstance(getApplicationContext());
-
         if(getIntent().hasExtra(Conversation.THREAD_ID)) {
-            searchViewModel.getByThreadId(threadedConversationsDao,
-                            getIntent().getStringExtra(Conversation.THREAD_ID)).observe(this,
+            searchViewModel.getByThreadId(getIntent().getStringExtra(Conversation.THREAD_ID)).observe(this,
                     new Observer<Pair<List<ThreadedConversations>,Integer>>() {
                         @Override
                         public void onChanged(Pair<List<ThreadedConversations>,Integer> smsList) {
@@ -130,7 +138,7 @@ public class SearchMessagesThreadsActivity extends AppCompatActivity {
                     });
         }
         else {
-            searchViewModel.get(threadedConversationsDao).observe(this,
+            searchViewModel.get().observe(this,
                     new Observer<Pair<List<ThreadedConversations>,Integer>>() {
                         @Override
                         public void onChanged(Pair<List<ThreadedConversations>,Integer> smsList) {
@@ -146,12 +154,6 @@ public class SearchMessagesThreadsActivity extends AppCompatActivity {
         }
     }
 
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        threadedConversations.close();
-    }
-
     public static class CustomContactsCursorAdapter extends CursorAdapter {
 
         public CustomContactsCursorAdapter(Context context, Cursor c, int flags) {
diff --git a/app/src/main/java/com/afkanerd/deku/DefaultSMS/ThreadedConversationsActivity.java b/app/src/main/java/com/afkanerd/deku/DefaultSMS/ThreadedConversationsActivity.java
index 1839b1fe..9580f5eb 100644
--- a/app/src/main/java/com/afkanerd/deku/DefaultSMS/ThreadedConversationsActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/DefaultSMS/ThreadedConversationsActivity.java
@@ -49,18 +49,10 @@ public class ThreadedConversationsActivity extends CustomAppCompactActivity impl
 
     ActionBar ab;
 
-    HashMap<String, ThreadedConversationRecyclerAdapter> messagesThreadRecyclerAdapterHashMap = new HashMap<>();
-
-    String ITEM_TYPE = "";
-
-    ThreadedConversations threadedConversations = new ThreadedConversations();
-
     MaterialToolbar toolbar;
 
     NavigationView navigationView;
 
-    ThreadedConversationsDao threadedConversationsDao;
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -70,18 +62,13 @@ public class ThreadedConversationsActivity extends CustomAppCompactActivity impl
         setSupportActionBar(toolbar);
         ab = getSupportActionBar();
 
-        threadedConversationsDao = threadedConversations.getDaoInstance(getApplicationContext());
-
         threadedConversationsViewModel = new ViewModelProvider(this).get(
                 ThreadedConversationsViewModel.class);
-        threadedConversationsViewModel.threadedConversationsDao = threadedConversationsDao;
 
+        threadedConversationsViewModel.databaseConnector = databaseConnector;
 
         fragmentManagement();
-        configureBroadcastListeners();
         configureNavigationBar();
-
-        configureNotifications();
     }
 
     public void configureNavigationBar() {
@@ -245,90 +232,4 @@ public class ThreadedConversationsActivity extends CustomAppCompactActivity impl
     public ThreadedConversationsViewModel getThreadedConversationsViewModel() {
         return threadedConversationsViewModel;
     }
-
-    @Override
-    public ExecutorService getExecutorService() {
-        return executorService;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-//        threadedConversations.close();
-    }
-
-    ArrayList<String> notificationsChannelIds = new ArrayList<>();
-    ArrayList<String> notificationsChannelNames = new ArrayList<>();
-    private void createNotificationChannel() {
-        notificationsChannelIds.add(getString(R.string.incoming_messages_channel_id));
-        notificationsChannelNames.add(getString(R.string.incoming_messages_channel_name));
-
-        notificationsChannelIds.add(getString(R.string.running_gateway_clients_channel_id));
-        notificationsChannelNames.add(getString(R.string.running_gateway_clients_channel_name));
-
-        notificationsChannelIds.add(getString(R.string.foreground_service_failed_channel_id));
-        notificationsChannelNames.add(getString(R.string.foreground_service_failed_channel_name));
-
-        createNotificationChannelIncomingMessage();
-
-        createNotificationChannelRunningGatewayListeners();
-
-        createNotificationChannelReconnectGatewayListeners();
-    }
-
-    private void createNotificationChannelIncomingMessage() {
-        int importance = NotificationManager.IMPORTANCE_HIGH;
-
-        NotificationChannel channel = new NotificationChannel(
-                notificationsChannelIds.get(0), notificationsChannelNames.get(0), importance);
-        channel.setDescription(getString(R.string.incoming_messages_channel_description));
-        channel.enableLights(true);
-        channel.setLightColor(R.color.logo_primary);
-        channel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE);
-
-        // Register the channel with the system; you can't change the importance
-        // or other notification behaviors after this
-        NotificationManager notificationManager = getSystemService(NotificationManager.class);
-        notificationManager.createNotificationChannel(channel);
-    }
-
-    private void createNotificationChannelRunningGatewayListeners() {
-        int importance = NotificationManager.IMPORTANCE_DEFAULT;
-        NotificationChannel channel = new NotificationChannel(
-                notificationsChannelIds.get(1), notificationsChannelNames.get(1), importance);
-        channel.setDescription(getString(R.string.running_gateway_clients_channel_description));
-        channel.setLightColor(R.color.logo_primary);
-        channel.setLockscreenVisibility(Notification.DEFAULT_ALL);
-
-        // Register the channel with the system; you can't change the importance
-        // or other notification behaviors after this
-        NotificationManager notificationManager = getSystemService(NotificationManager.class);
-        notificationManager.createNotificationChannel(channel);
-    }
-
-    private void createNotificationChannelReconnectGatewayListeners() {
-        int importance = NotificationManager.IMPORTANCE_DEFAULT;
-        NotificationChannel channel = new NotificationChannel(
-                notificationsChannelIds.get(2), notificationsChannelNames.get(2), importance);
-        channel.setDescription(getString(R.string.running_gateway_clients_channel_description));
-        channel.setLightColor(R.color.logo_primary);
-        channel.setLockscreenVisibility(Notification.DEFAULT_ALL);
-
-        // Register the channel with the system; you can't change the importance
-        // or other notification behaviors after this
-        NotificationManager notificationManager = getSystemService(NotificationManager.class);
-        notificationManager.createNotificationChannel(channel);
-    }
-
-    private void configureNotifications(){
-        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            executorService.execute(new Runnable() {
-                @Override
-                public void run() {
-                    createNotificationChannel();
-                }
-            });
-        }
-    }
-
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/afkanerd/deku/E2EE/E2EECompactActivity.java b/app/src/main/java/com/afkanerd/deku/E2EE/E2EECompactActivity.java
index f0eea588..db21c8bb 100644
--- a/app/src/main/java/com/afkanerd/deku/E2EE/E2EECompactActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/E2EE/E2EECompactActivity.java
@@ -24,6 +24,7 @@ import com.afkanerd.deku.DefaultSMS.Models.Conversations.ThreadedConversations;
 import com.afkanerd.deku.DefaultSMS.Models.SIMHandler;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
 import com.afkanerd.deku.DefaultSMS.Models.SettingsHandler;
+import com.afkanerd.deku.DefaultSMS.Models.ThreadingPoolExecutor;
 import com.afkanerd.deku.DefaultSMS.R;
 import com.afkanerd.smswithoutborders.libsignal_doubleratchet.libsignal.Ratchets;
 import com.google.android.material.textfield.TextInputLayout;
@@ -62,7 +63,7 @@ public class E2EECompactActivity extends CustomAppCompactActivity {
                                 ThreadedConversations threadedConversations, String messageId,
                                 final byte[] _mk) throws NumberParseException, InterruptedException {
         if(threadedConversations.secured && !isEncrypted) {
-            executorService.execute(new Runnable() {
+            ThreadingPoolExecutor.executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
@@ -102,7 +103,7 @@ public class E2EECompactActivity extends CustomAppCompactActivity {
 
     protected void sendDataMessage(ThreadedConversations threadedConversations) {
         final int subscriptionId = SIMHandler.getDefaultSimSubscription(getApplicationContext());
-        executorService.execute(new Runnable() {
+        ThreadingPoolExecutor.executorService.execute(new Runnable() {
             @Override
             public void run() {
                 try {
@@ -207,7 +208,7 @@ public class E2EECompactActivity extends CustomAppCompactActivity {
     protected void onResume() {
         super.onResume();
         if(threadedConversations != null) {
-            executorService.execute(new Runnable() {
+            ThreadingPoolExecutor.executorService.execute(new Runnable() {
                 @Override
                 public void run() {
                     try {
diff --git a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectAddActivity.java b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectAddActivity.java
index c02337c2..ef733b6d 100644
--- a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectAddActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectAddActivity.java
@@ -54,8 +54,9 @@ public class GatewayClientProjectAddActivity extends AppCompatActivity {
         setSupportActionBar(toolbar);
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
 
-        databaseConnector = Room.databaseBuilder(getApplicationContext(),
-                Datastore.class, Datastore.databaseName).build();
+//        databaseConnector = Room.databaseBuilder(getApplicationContext(),
+//                Datastore.class, Datastore.databaseName).build();
+        databaseConnector = GatewayClientProjectListingActivity.databaseConnector;
 
         try {
             getGatewayClient();
@@ -218,9 +219,7 @@ public class GatewayClientProjectAddActivity extends AppCompatActivity {
             });
         }
 
-        Intent intent = new Intent(this, GatewayClientListingActivity.class);
-        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
-        startActivity(intent);
+        finish();
     }
 
 
diff --git a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingActivity.java b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingActivity.java
index ceec3703..c4111615 100644
--- a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingActivity.java
+++ b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingActivity.java
@@ -9,6 +9,7 @@ import androidx.lifecycle.Observer;
 import androidx.lifecycle.ViewModelProvider;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
+import androidx.room.Room;
 
 import android.content.Context;
 import android.content.Intent;
@@ -19,6 +20,7 @@ import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.R;
 
 import java.util.List;
@@ -28,6 +30,8 @@ public class GatewayClientProjectListingActivity extends AppCompatActivity {
     long id;
     SharedPreferences sharedPreferences;
 
+    public static Datastore databaseConnector;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -57,7 +61,12 @@ public class GatewayClientProjectListingActivity extends AppCompatActivity {
         GatewayClientProjectListingViewModel gatewayClientProjectListingViewModel =
                 new ViewModelProvider(this).get(GatewayClientProjectListingViewModel.class);
 
-        gatewayClientProjectListingViewModel.get(getApplicationContext(), id).observe(this,
+        databaseConnector = Room.databaseBuilder(getApplicationContext(), Datastore.class,
+                        Datastore.databaseName)
+                .enableMultiInstanceInvalidation()
+                .build();
+
+        gatewayClientProjectListingViewModel.get(databaseConnector, id).observe(this,
                 new Observer<List<GatewayClientProjects>>() {
             @Override
             public void onChanged(List<GatewayClientProjects> gatewayClients) {
diff --git a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingViewModel.java b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingViewModel.java
index 640b1567..493cdd9b 100644
--- a/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingViewModel.java
+++ b/app/src/main/java/com/afkanerd/deku/QueueListener/GatewayClients/GatewayClientProjectListingViewModel.java
@@ -17,13 +17,9 @@ import java.util.Set;
 
 public class GatewayClientProjectListingViewModel extends ViewModel {
 
-    Datastore databaseConnector;
-    public LiveData<List<GatewayClientProjects>> get(Context context, long id) {
-        Log.d(getClass().getName(), "Fetching Gateway Projects: " + id);
-        databaseConnector = Room.databaseBuilder(context, Datastore.class,
-                        Datastore.databaseName)
-                .enableMultiInstanceInvalidation()
-                .build();
+    long id;
+    public LiveData<List<GatewayClientProjects>> get(Datastore databaseConnector, long id) {
+        this.id = id;
         GatewayClientProjectDao gatewayClientProjectDao = databaseConnector.gatewayClientProjectDao();
         return gatewayClientProjectDao.fetchGatewayClientId(id);
     }
diff --git a/app/src/main/java/com/afkanerd/deku/QueueListener/RMQ/RMQConnectionService.java b/app/src/main/java/com/afkanerd/deku/QueueListener/RMQ/RMQConnectionService.java
index fbf33120..324b52b0 100644
--- a/app/src/main/java/com/afkanerd/deku/QueueListener/RMQ/RMQConnectionService.java
+++ b/app/src/main/java/com/afkanerd/deku/QueueListener/RMQ/RMQConnectionService.java
@@ -30,11 +30,13 @@ import android.util.Pair;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
+import androidx.room.Room;
 
 import com.afkanerd.deku.DefaultSMS.BroadcastReceivers.IncomingTextSMSBroadcastReceiver;
 import com.afkanerd.deku.DefaultSMS.DAO.ConversationDao;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.Conversation;
 import com.afkanerd.deku.DefaultSMS.Models.Conversations.ConversationHandler;
+import com.afkanerd.deku.DefaultSMS.Models.Database.Datastore;
 import com.afkanerd.deku.DefaultSMS.Models.Database.SemaphoreManager;
 import com.afkanerd.deku.DefaultSMS.Models.NativeSMSDB;
 import com.afkanerd.deku.DefaultSMS.Models.SMSDatabaseWrapper;
@@ -82,7 +84,7 @@ public class RMQConnectionService extends Service {
 
     private HashMap<Long, Connection> connectionList = new HashMap<>();
 
-    ExecutorService consumerExecutorService = Executors.newFixedThreadPool(50); // Create a pool of 5 worker threads
+    ExecutorService consumerExecutorService = Executors.newFixedThreadPool(10); // Create a pool of 5 worker threads
 
     private BroadcastReceiver messageStateChangedBroadcast;
 
@@ -90,9 +92,6 @@ public class RMQConnectionService extends Service {
 
     private SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener;
 
-    Conversation conversation;
-    ConversationDao conversationDao;
-
     public RMQConnectionService(Context context) {
         attachBaseContext(context);
     }
@@ -100,18 +99,22 @@ public class RMQConnectionService extends Service {
     // DO NOT DELETE
     public RMQConnectionService() { }
 
+    Datastore databaseConnector;
     @Override
     public void onCreate() {
         super.onCreate();
+        if(Datastore.datastore == null || !Datastore.datastore.isOpen())
+            Datastore.datastore = Room.databaseBuilder(getApplicationContext(), Datastore.class,
+                            Datastore.databaseName)
+                    .enableMultiInstanceInvalidation()
+                    .build();
+        databaseConnector = Datastore.datastore;
 
         handleBroadcast();
 
         sharedPreferences = getSharedPreferences(GATEWAY_CLIENT_LISTENERS, Context.MODE_PRIVATE);
 
         registerListeners();
-
-        conversation = new Conversation();
-        conversationDao = conversation.getDaoInstance(getApplicationContext());
     }
 
     public int[] getGatewayClientNumbers() {
@@ -254,7 +257,7 @@ public class RMQConnectionService extends Service {
                 conversation.setThread_id(String.valueOf(threadId));
                 conversation.setStatus(Telephony.Sms.STATUS_PENDING);
 
-                conversationDao.insert(conversation);
+                databaseConnector.conversationDao().insert(conversation);
                 Log.d(getClass().getName(), "Sending RMQ SMS: " + subscriptionId + ":"
                         + conversation.getAddress());
                 SMSDatabaseWrapper.send_text(getApplicationContext(), conversation, bundle);
@@ -344,6 +347,7 @@ public class RMQConnectionService extends Service {
         RMQConnection rmqConnection = new RMQConnection(connection);
         connectionList.put(gatewayClient.getId(), connection);
 
+        if(connection != null)
         connection.addShutdownListener(new ShutdownListener() {
             @Override
             public void shutdownCompleted(ShutdownSignalException cause) {
