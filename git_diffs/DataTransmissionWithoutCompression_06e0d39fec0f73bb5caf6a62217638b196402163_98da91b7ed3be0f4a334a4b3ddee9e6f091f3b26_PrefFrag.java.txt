diff --git a/app/src/main/java/com/amaze/filemanager/application/AppConfig.java b/app/src/main/java/com/amaze/filemanager/application/AppConfig.java
index 0579fe5a8..0218c9dd4 100644
--- a/app/src/main/java/com/amaze/filemanager/application/AppConfig.java
+++ b/app/src/main/java/com/amaze/filemanager/application/AppConfig.java
@@ -22,6 +22,17 @@ package com.amaze.filemanager.application;
 
 import java.lang.ref.WeakReference;
 
+import org.acra.ACRA;
+import org.acra.annotation.AcraCore;
+import org.acra.config.ACRAConfigurationException;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.CoreConfigurationBuilder;
+import org.acra.data.StringFormat;
+
+import com.amaze.filemanager.BuildConfig;
+import com.amaze.filemanager.R;
+import com.amaze.filemanager.crashreport.AcraReportSenderFactory;
+import com.amaze.filemanager.crashreport.ErrorActivity;
 import com.amaze.filemanager.database.ExplorerDatabase;
 import com.amaze.filemanager.database.UtilitiesDatabase;
 import com.amaze.filemanager.database.UtilsHandler;
@@ -49,6 +60,9 @@ import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.schedulers.Schedulers;
 import jcifs.Config;
 
+@AcraCore(
+    buildConfigClass = BuildConfig.class,
+    reportSenderFactoryClasses = AcraReportSenderFactory.class)
 public class AppConfig extends GlideApplication {
 
   public static final String TAG = AppConfig.class.getSimpleName();
@@ -92,6 +106,12 @@ public class AppConfig extends GlideApplication {
     StrictMode.setVmPolicy(builder.build());
   }
 
+  @Override
+  protected void attachBaseContext(Context base) {
+    super.attachBaseContext(base);
+    initACRA();
+  }
+
   @Override
   public void onTerminate() {
     super.onTerminate();
@@ -203,4 +223,36 @@ public class AppConfig extends GlideApplication {
   public UtilitiesDatabase getUtilitiesDatabase() {
     return utilitiesDatabase;
   }
+
+  /**
+   * Called in {@link #attachBaseContext(Context)} after calling the {@code super} method. Should be
+   * overridden if MultiDex is enabled, since it has to be initialized before ACRA.
+   */
+  protected void initACRA() {
+    if (ACRA.isACRASenderServiceProcess()) {
+      return;
+    }
+
+    try {
+      final CoreConfiguration acraConfig =
+          new CoreConfigurationBuilder(this)
+              .setBuildConfigClass(BuildConfig.class)
+              .setReportFormat(StringFormat.JSON)
+              .setSendReportsInDevMode(true)
+              .setEnabled(true)
+              .build();
+      ACRA.init(this, acraConfig);
+    } catch (final ACRAConfigurationException ace) {
+      ace.printStackTrace();
+      ErrorActivity.reportError(
+          this,
+          ace,
+          null,
+          null,
+          ErrorActivity.ErrorInfo.make(
+              ErrorActivity.ERROR_UNKNOWN,
+              "Could not initialize ACRA crash report",
+              R.string.app_ui_crash));
+    }
+  }
 }
diff --git a/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSender.kt b/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSender.kt
new file mode 100644
index 000000000..82992b8f9
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSender.kt
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2014-2020 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>,
+ * Emmanuel Messulam<emmanuelbendavid@gmail.com>, Raymond Lai <airwave209gt at gmail.com> and Contributors.
+ *
+ * This file is part of Amaze File Manager.
+ *
+ * Amaze File Manager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.amaze.filemanager.crashreport
+
+import android.content.Context
+import com.amaze.filemanager.R
+import org.acra.data.CrashReportData
+import org.acra.sender.ReportSender
+
+class AcraReportSender : ReportSender {
+
+    override fun send(context: Context, errorContent: CrashReportData) {
+        ErrorActivity.reportError(
+            context, errorContent,
+            ErrorActivity.ErrorInfo.make(
+                ErrorActivity.ERROR_UI_ERROR,
+                "Application crash", R.string.app_ui_crash
+            )
+        )
+    }
+
+    override fun requiresForeground(): Boolean {
+        return true
+    }
+}
diff --git a/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSenderFactory.kt b/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSenderFactory.kt
new file mode 100644
index 000000000..56927b50c
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/crashreport/AcraReportSenderFactory.kt
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2014-2020 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>,
+ * Emmanuel Messulam<emmanuelbendavid@gmail.com>, Raymond Lai <airwave209gt at gmail.com> and Contributors.
+ *
+ * This file is part of Amaze File Manager.
+ *
+ * Amaze File Manager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.amaze.filemanager.crashreport
+
+import android.content.Context
+import org.acra.config.CoreConfiguration
+import org.acra.sender.ReportSender
+import org.acra.sender.ReportSenderFactory
+
+class AcraReportSenderFactory : ReportSenderFactory {
+    override fun create(context: Context, config: CoreConfiguration): ReportSender {
+        return AcraReportSender()
+    }
+
+    override fun enabled(config: CoreConfiguration): Boolean {
+        return true
+    }
+}
diff --git a/app/src/main/java/com/amaze/filemanager/crashreport/ErrorActivity.java b/app/src/main/java/com/amaze/filemanager/crashreport/ErrorActivity.java
new file mode 100644
index 000000000..11c7d815a
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/crashreport/ErrorActivity.java
@@ -0,0 +1,508 @@
+/*
+ * Copyright (C) 2014-2020 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>,
+ * Emmanuel Messulam<emmanuelbendavid@gmail.com>, Raymond Lai <airwave209gt at gmail.com> and Contributors.
+ *
+ * This file is part of Amaze File Manager.
+ *
+ * Amaze File Manager is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package com.amaze.filemanager.crashreport;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.TimeZone;
+import java.util.Vector;
+
+import org.acra.ReportField;
+import org.acra.data.CrashReportData;
+import org.json.JSONObject;
+
+import com.amaze.filemanager.BuildConfig;
+import com.amaze.filemanager.R;
+import com.amaze.filemanager.filesystem.files.FileUtils;
+import com.amaze.filemanager.ui.activities.MainActivity;
+import com.amaze.filemanager.ui.activities.superclasses.ThemedActivity;
+import com.amaze.filemanager.ui.colors.ColorPreferenceHelper;
+import com.amaze.filemanager.utils.Utils;
+import com.google.android.material.snackbar.Snackbar;
+
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.annotation.ColorInt;
+import androidx.annotation.StringRes;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.widget.Toolbar;
+import androidx.core.app.NavUtils;
+
+/*
+ * Created by Christian Schabesberger on 24.10.15.
+ *
+ * Copyright (C) Christian Schabesberger 2016 <chris.schabesberger@mailbox.org>
+ * ErrorActivity.java is part of NewPipe.
+ *
+ * NewPipe is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * <
+ * NewPipe is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * <
+ * You should have received a copy of the GNU General Public License
+ * along with NewPipe.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+public class ErrorActivity extends ThemedActivity {
+  // LOG TAGS
+  public static final String TAG = ErrorActivity.class.toString();
+  // BUNDLE TAGS
+  public static final String ERROR_INFO = "error_info";
+  public static final String ERROR_LIST = "error_list";
+
+  // Error codes
+  public static final String ERROR_UI_ERROR = "UI Error";
+  public static final String ERROR_USER_REPORT = "User report";
+  public static final String ERROR_UNKNOWN = "Unknown";
+
+  public static final String ERROR_GITHUB_ISSUE_URL =
+      "https://github.com/TeamAmaze/AmazeFileManager/issues";
+
+  private String[] errorList;
+  private ErrorInfo errorInfo;
+  private Class returnActivity;
+  private String currentTimeStamp;
+  private EditText userCommentBox;
+
+  public static void reportError(
+      final Context context,
+      final List<Throwable> el,
+      final Class returnActivity,
+      final View rootView,
+      final ErrorInfo errorInfo) {
+    if (rootView != null) {
+      Snackbar.make(rootView, R.string.error_snackbar_message, 3 * 1000)
+          .setActionTextColor(Color.YELLOW)
+          .setAction(
+              context.getString(R.string.error_snackbar_action).toUpperCase(),
+              v -> startErrorActivity(returnActivity, context, errorInfo, el))
+          .show();
+    } else {
+      startErrorActivity(returnActivity, context, errorInfo, el);
+    }
+  }
+
+  private static void startErrorActivity(
+      final Class returnActivity,
+      final Context context,
+      final ErrorInfo errorInfo,
+      final List<Throwable> el) {
+    final Intent intent = new Intent(context, ErrorActivity.class);
+    intent.putExtra(ERROR_INFO, errorInfo);
+    intent.putExtra(ERROR_LIST, elToSl(el));
+    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+    context.startActivity(intent);
+  }
+
+  public static void reportError(
+      final Context context,
+      final Throwable e,
+      final Class returnActivity,
+      final View rootView,
+      final ErrorInfo errorInfo) {
+    List<Throwable> el = null;
+    if (e != null) {
+      el = new Vector<>();
+      el.add(e);
+    }
+    reportError(context, el, returnActivity, rootView, errorInfo);
+  }
+
+  public static void reportError(
+      final Context context, final CrashReportData report, final ErrorInfo errorInfo) {
+    System.out.println("ErrorActivity reportError");
+    final String[] el = new String[] {report.getString(ReportField.STACK_TRACE)};
+
+    final Intent intent = new Intent(context, ErrorActivity.class);
+    intent.putExtra(ERROR_INFO, errorInfo);
+    intent.putExtra(ERROR_LIST, el);
+    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+    context.startActivity(intent);
+  }
+
+  private static String getStackTrace(final Throwable throwable) {
+    final StringWriter sw = new StringWriter();
+    final PrintWriter pw = new PrintWriter(sw, true);
+    throwable.printStackTrace(pw);
+    return sw.getBuffer().toString();
+  }
+
+  // errorList to StringList
+  private static String[] elToSl(final List<Throwable> stackTraces) {
+    final String[] out = new String[stackTraces.size()];
+    for (int i = 0; i < stackTraces.size(); i++) {
+      out[i] = getStackTrace(stackTraces.get(i));
+    }
+    return out;
+  }
+
+  @Override
+  public void onCreate(final Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.activity_error);
+
+    final Intent intent = getIntent();
+
+    final Toolbar toolbar = findViewById(R.id.toolbar);
+    setSupportActionBar(toolbar);
+
+    @ColorInt
+    int primaryColor =
+        ColorPreferenceHelper.getPrimary(getCurrentColorPreference(), MainActivity.currentTab);
+
+    toolbar.setBackgroundColor(primaryColor);
+
+    final ActionBar actionBar = getSupportActionBar();
+    if (actionBar != null) {
+      actionBar.setDisplayHomeAsUpEnabled(true);
+      actionBar.setTitle(R.string.error_report_title);
+      actionBar.setDisplayShowTitleEnabled(true);
+    }
+
+    final Button reportEmailButton = findViewById(R.id.errorReportEmailButton);
+    final Button reportTelegramButton = findViewById(R.id.errorReportTelegramButton);
+    final Button copyButton = findViewById(R.id.errorReportCopyButton);
+    final Button reportGithubButton = findViewById(R.id.errorReportGitHubButton);
+
+    userCommentBox = findViewById(R.id.errorCommentBox);
+    final TextView errorView = findViewById(R.id.errorView);
+    final TextView infoView = findViewById(R.id.errorInfosView);
+    final TextView errorMessageView = findViewById(R.id.errorMessageView);
+
+    returnActivity = MainActivity.class;
+    errorInfo = intent.getParcelableExtra(ERROR_INFO);
+    errorList = intent.getStringArrayExtra(ERROR_LIST);
+
+    // important add guru meditation
+    addGuruMeditation();
+    currentTimeStamp = getCurrentTimeStamp();
+
+    reportEmailButton.setOnClickListener((View v) -> sendReportEmail());
+
+    reportTelegramButton.setOnClickListener(
+        (View v) -> {
+          FileUtils.copyToClipboard(this, buildMarkdown());
+          Toast.makeText(this, R.string.crash_report_copied, Toast.LENGTH_SHORT).show();
+          Utils.openTelegramURL(this);
+        });
+
+    copyButton.setOnClickListener(
+        (View v) -> {
+          FileUtils.copyToClipboard(this, buildMarkdown());
+          Toast.makeText(this, R.string.crash_report_copied, Toast.LENGTH_SHORT).show();
+        });
+
+    reportGithubButton.setOnClickListener(
+        (View v) -> {
+          FileUtils.copyToClipboard(this, buildMarkdown());
+          Toast.makeText(this, R.string.crash_report_copied, Toast.LENGTH_SHORT).show();
+          Utils.openURL(ERROR_GITHUB_ISSUE_URL, this);
+        });
+
+    // normal bugreport
+    buildInfo(errorInfo);
+    if (errorInfo.message != 0) {
+      errorMessageView.setText(errorInfo.message);
+    } else {
+      errorMessageView.setVisibility(View.GONE);
+      findViewById(R.id.messageWhatHappenedView).setVisibility(View.GONE);
+    }
+
+    errorView.setText(formErrorText(errorList));
+
+    // print stack trace once again for debugging:
+    for (final String e : errorList) {
+      Log.e(TAG, e);
+    }
+  }
+
+  @Override
+  public boolean onCreateOptionsMenu(final Menu menu) {
+    final MenuInflater inflater = getMenuInflater();
+    inflater.inflate(R.menu.error_menu, menu);
+    return true;
+  }
+
+  @Override
+  public boolean onOptionsItemSelected(final MenuItem item) {
+    final int id = item.getItemId();
+    switch (id) {
+      case android.R.id.home:
+        goToReturnActivity();
+        break;
+      case R.id.menu_item_share_error:
+        final Intent intent = new Intent();
+        intent.setAction(Intent.ACTION_SEND);
+        intent.putExtra(Intent.EXTRA_TEXT, buildJson());
+        intent.setType("text/plain");
+        startActivity(Intent.createChooser(intent, getString(R.string.share)));
+        break;
+    }
+    return false;
+  }
+
+  private void sendReportEmail() {
+    final Intent i = Utils.buildEmailIntent(buildJson());
+    if (i.resolveActivity(getPackageManager()) != null) {
+      startActivity(i);
+    }
+  }
+
+  private String formErrorText(final String[] el) {
+    final StringBuilder text = new StringBuilder();
+    if (el != null) {
+      for (final String e : el) {
+        text.append("-------------------------------------\n").append(e);
+      }
+    }
+    text.append("-------------------------------------");
+    return text.toString();
+  }
+
+  private void goToReturnActivity() {
+    final Intent intent = new Intent(this, returnActivity);
+    NavUtils.navigateUpTo(this, intent);
+    startActivity(intent);
+  }
+
+  private void buildInfo(final ErrorInfo info) {
+    final TextView infoLabelView = findViewById(R.id.errorInfoLabelsView);
+    final TextView infoView = findViewById(R.id.errorInfosView);
+    String text = "";
+
+    infoLabelView.setText(getString(R.string.info_labels).replace("\\n", "\n"));
+
+    text +=
+        errorInfo.userAction
+            + "\n"
+            + info.request
+            + "\n"
+            + currentTimeStamp
+            + "\n"
+            + getPackageName()
+            + "\n"
+            + BuildConfig.VERSION_NAME
+            + "\n"
+            + getOsString()
+            + "\n"
+            + Build.DEVICE
+            + "\n"
+            + Build.MODEL
+            + "\n"
+            + Build.PRODUCT;
+
+    infoView.setText(text);
+  }
+
+  private String buildJson() {
+    try {
+      Map<String, String> jsonMap = new HashMap<>();
+      jsonMap.put("user_action", errorInfo.userAction);
+      jsonMap.put("request", errorInfo.request);
+      jsonMap.put("package", getPackageName());
+      jsonMap.put("version", BuildConfig.VERSION_NAME);
+      jsonMap.put("os", getOsString());
+      jsonMap.put("device", Build.DEVICE);
+      jsonMap.put("model", Build.MODEL);
+      jsonMap.put("product", Build.PRODUCT);
+      jsonMap.put("time", currentTimeStamp);
+      jsonMap.put("exceptions", Arrays.asList(errorList).toString());
+      jsonMap.put("user_comment", userCommentBox.getText().toString());
+      return new JSONObject(jsonMap).toString();
+    } catch (final Throwable e) {
+      Log.e(TAG, "Could not build json");
+      e.printStackTrace();
+    }
+
+    return "";
+  }
+
+  private String buildMarkdown() {
+    try {
+      final StringBuilder htmlErrorReport = new StringBuilder();
+
+      final String userComment = userCommentBox.getText().toString();
+      if (!userComment.isEmpty()) {
+        htmlErrorReport.append(userComment).append("\n");
+      }
+
+      // basic error info
+      htmlErrorReport
+          .append("## Exception")
+          .append("\n* __User Action:__ ")
+          .append(errorInfo.userAction)
+          .append("\n* __Request:__ ")
+          .append(errorInfo.request)
+          .append("\n* __Version:__ ")
+          .append(BuildConfig.VERSION_NAME)
+          .append("\n* __OS:__ ")
+          .append(getOsString())
+          .append("\n* __Device:__ ")
+          .append(Build.DEVICE)
+          .append("\n* __Model:__ ")
+          .append(Build.MODEL)
+          .append("\n* __Product:__ ")
+          .append(Build.PRODUCT)
+          .append("\n");
+
+      // Collapse all logs to a single paragraph when there are more than one
+      // to keep the GitHub issue clean.
+      if (errorList.length > 1) {
+        htmlErrorReport
+            .append("<details><summary><b>Exceptions (")
+            .append(errorList.length)
+            .append(")</b></summary><p>\n");
+      }
+
+      // add the logs
+      for (int i = 0; i < errorList.length; i++) {
+        htmlErrorReport.append("<details><summary><b>Crash log ");
+        if (errorList.length > 1) {
+          htmlErrorReport.append(i + 1);
+        }
+        htmlErrorReport
+            .append("</b>")
+            .append("</summary><p>\n")
+            .append("\n```\n")
+            .append(errorList[i])
+            .append("\n```\n")
+            .append("</details>\n");
+      }
+
+      // make sure to close everything
+      if (errorList.length > 1) {
+        htmlErrorReport.append("</p></details>\n");
+      }
+      htmlErrorReport.append("<hr>\n");
+      return htmlErrorReport.toString();
+    } catch (final Throwable e) {
+      Log.e(TAG, "Error while erroring: Could not build markdown");
+      e.printStackTrace();
+      return "";
+    }
+  }
+
+  private String getOsString() {
+    final String osBase =
+        Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ? Build.VERSION.BASE_OS : "Android";
+    return System.getProperty("os.name")
+        + " "
+        + (osBase.isEmpty() ? "Android" : osBase)
+        + " "
+        + Build.VERSION.RELEASE
+        + " - "
+        + Build.VERSION.SDK_INT;
+  }
+
+  private void addGuruMeditation() {
+    // just an easter egg
+    final TextView sorryView = findViewById(R.id.errorSorryView);
+    String text = sorryView.getText().toString();
+    text += "\n" + getString(R.string.guru_meditation);
+    sorryView.setText(text);
+  }
+
+  @Override
+  public void onBackPressed() {
+    super.onBackPressed();
+    goToReturnActivity();
+  }
+
+  public String getCurrentTimeStamp() {
+    final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");
+    df.setTimeZone(TimeZone.getTimeZone("GMT"));
+    return df.format(new Date());
+  }
+
+  public static class ErrorInfo implements Parcelable {
+    public static final Parcelable.Creator<ErrorInfo> CREATOR =
+        new Parcelable.Creator<ErrorInfo>() {
+          @Override
+          public ErrorInfo createFromParcel(final Parcel source) {
+            return new ErrorInfo(source);
+          }
+
+          @Override
+          public ErrorInfo[] newArray(final int size) {
+            return new ErrorInfo[size];
+          }
+        };
+
+    final String userAction;
+    public final String request;
+    @StringRes public final int message;
+
+    private ErrorInfo(final String userAction, final String request, @StringRes final int message) {
+      this.userAction = userAction;
+      this.request = request;
+      this.message = message;
+    }
+
+    protected ErrorInfo(final Parcel in) {
+      this.userAction = in.readString();
+      this.request = in.readString();
+      this.message = in.readInt();
+    }
+
+    public static ErrorInfo make(
+        final String userAction, final String request, @StringRes final int message) {
+      return new ErrorInfo(userAction, request, message);
+    }
+
+    @Override
+    public int describeContents() {
+      return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+      dest.writeString(this.userAction);
+      dest.writeString(this.request);
+      dest.writeInt(this.message);
+    }
+  }
+}
diff --git a/app/src/main/java/com/amaze/filemanager/ui/fragments/preference_fragments/PrefFrag.java b/app/src/main/java/com/amaze/filemanager/ui/fragments/preference_fragments/PrefFrag.java
index 9d4f434a5..815abdfa0 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/fragments/preference_fragments/PrefFrag.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/fragments/preference_fragments/PrefFrag.java
@@ -22,6 +22,7 @@ package com.amaze.filemanager.ui.fragments.preference_fragments;
 
 import static com.amaze.filemanager.R.string.feedback;
 import static com.amaze.filemanager.ui.activities.PreferencesActivity.START_PREFERENCE;
+import static com.amaze.filemanager.utils.Utils.EMAIL_VISHAL;
 
 import java.io.IOException;
 import java.security.GeneralSecurityException;
@@ -38,6 +39,7 @@ import com.amaze.filemanager.ui.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.ui.provider.UtilitiesProvider;
 import com.amaze.filemanager.ui.theme.AppTheme;
 import com.amaze.filemanager.ui.views.preference.CheckBox;
+import com.amaze.filemanager.utils.Utils;
 
 import android.Manifest;
 import android.app.Activity;
@@ -79,9 +81,6 @@ public class PrefFrag extends PreferenceFragment implements Preference.OnPrefere
     PreferencesConstants.PREFERENCE_ZIP_CREATE_PATH,
     PreferencesConstants.PREFERENCE_ZIP_EXTRACT_PATH
   };
-  private static final String EMAIL_VISHAL = "vishalmeham2@gmail.com";
-  private static final String EMAIL_EMMANUEL = "emmanuelbendavid@gmail.com";
-  private static final String EMAIL_RAYMOND = "airwave209gt@gmail.com";
 
   private UtilitiesProvider utilsProvider;
   private SharedPreferences sharedPref;
@@ -225,7 +224,7 @@ public class PrefFrag extends PreferenceFragment implements Preference.OnPrefere
         builder.build().show();
         return true;
       case PreferencesConstants.FRAGMENT_FEEDBACK:
-        Intent emailIntent = buildEmailIntent();
+        Intent emailIntent = Utils.buildEmailIntent(null);
 
         PackageManager packageManager = getActivity().getPackageManager();
         List activities =
@@ -408,15 +407,4 @@ public class PrefFrag extends PreferenceFragment implements Preference.OnPrefere
       }
     }
   }
-
-  private Intent buildEmailIntent() {
-    Intent emailIntent = new Intent(Intent.ACTION_SEND);
-    String aEmailList[] = {EMAIL_VISHAL};
-    String aEmailCCList[] = {EMAIL_EMMANUEL, EMAIL_RAYMOND};
-    emailIntent.putExtra(Intent.EXTRA_EMAIL, aEmailList);
-    emailIntent.putExtra(Intent.EXTRA_CC, aEmailCCList);
-    emailIntent.putExtra(Intent.EXTRA_SUBJECT, "Feedback : Amaze File Manager");
-    emailIntent.setType("message/rfc822");
-    return emailIntent;
-  }
 }
diff --git a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
index 8db6baa93..a7462b180 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/views/drawer/Drawer.java
@@ -106,8 +106,6 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
     STORAGES_GROUP, SERVERS_GROUP, CLOUDS_GROUP, FOLDERS_GROUP, QUICKACCESSES_GROUP, LASTGROUP
   };
 
-  private static final String URL_TELEGRAM = "https://t.me/AmazeFileManager";
-
   private MainActivity mainActivity;
   private Resources resources;
   private DataUtils dataUtils;
@@ -150,7 +148,7 @@ public class Drawer implements NavigationView.OnNavigationItemSelectedListener {
       appVersion.setVisibility(View.VISIBLE);
     }
     donateImageView.setOnClickListener(v -> new Billing(mainActivity));
-    telegramImageView.setOnClickListener(v -> Utils.openURL(URL_TELEGRAM, mainActivity));
+    telegramImageView.setOnClickListener(v -> Utils.openTelegramURL(mainActivity));
     /*drawerHeaderView.setOnLongClickListener(
     v -> {
       Intent intent1;
diff --git a/app/src/main/java/com/amaze/filemanager/utils/Utils.java b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
index 90a2386e0..20aa4e770 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/Utils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.concurrent.TimeUnit;
 
+import com.amaze.filemanager.BuildConfig;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.ui.activities.MainActivity;
@@ -71,6 +72,11 @@ public class Utils {
   private static final String INPUT_INTENT_BLACKLIST_AMP = "&&";
   private static final String INPUT_INTENT_BLACKLIST_DOTS = "\\.\\.\\.";
   private static final String DATE_TIME_FORMAT = "%s | %s";
+  private static final String EMAIL_EMMANUEL = "emmanuelbendavid@gmail.com";
+  private static final String EMAIL_RAYMOND = "airwave209gt@gmail.com";
+  private static final String URL_TELEGRAM = "https://t.me/AmazeFileManager";
+
+  public static final String EMAIL_VISHAL = "vishalmeham2@gmail.com";
 
   // methods for fastscroller
   public static float clamp(float min, float max, float value) {
@@ -367,4 +373,30 @@ public class Utils {
     intent.setData(Uri.parse(url));
     context.startActivity(intent);
   }
+
+  /** Open telegram in browser */
+  public static void openTelegramURL(Context context) {
+    openURL(URL_TELEGRAM, context);
+  }
+
+  /**
+   * Builds a email intent for amaze feedback
+   *
+   * @param text email content
+   * @return intent
+   */
+  public static Intent buildEmailIntent(String text) {
+    Intent emailIntent = new Intent(Intent.ACTION_SEND);
+    String aEmailList[] = {EMAIL_VISHAL};
+    String aEmailCCList[] = {EMAIL_EMMANUEL, EMAIL_RAYMOND};
+    emailIntent.putExtra(Intent.EXTRA_EMAIL, aEmailList);
+    emailIntent.putExtra(Intent.EXTRA_CC, aEmailCCList);
+    emailIntent.putExtra(
+        Intent.EXTRA_SUBJECT, "Feedback : Amaze File Manager for " + BuildConfig.VERSION_NAME);
+    if (!Utils.isNullOrEmpty(text)) {
+      emailIntent.putExtra(Intent.EXTRA_TEXT, text);
+    }
+    emailIntent.setType("message/rfc822");
+    return emailIntent;
+  }
 }
