diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java b/AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java
index 7e8e5382b1..974245746a 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java
@@ -27,7 +27,7 @@ import android.content.res.Resources;
 import android.graphics.Typeface;
 import android.os.Bundle;
 import android.os.SystemClock;
-import android.support.v4.app.DialogFragment;
+import android.support.annotation.NonNull;
 import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.ActionBar;
 import android.support.v7.widget.SearchView;
@@ -50,6 +50,7 @@ import android.widget.ListView;
 import android.widget.Spinner;
 import android.widget.TextView;
 
+import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
 import com.ichi2.anim.ActivityTransitionAnimation;
 import com.ichi2.anki.dialogs.CardBrowserContextMenu;
@@ -89,9 +90,6 @@ public class CardBrowser extends NavigationDrawerActivity implements
     private HashMap<String, String> mDeckNames;
     private ArrayList<JSONObject> mDropDownDecks;
     private SearchView mSearchView;
-    private ListView mCardsListView;
-    private Spinner mCardsColumn1Spinner;
-    private Spinner mCardsColumn2Spinner;
     private MultiColumnListAdapter mCardsAdapter;
     private String mSearchTerms;
     private String mRestrictOnDeck;
@@ -101,7 +99,6 @@ public class CardBrowser extends NavigationDrawerActivity implements
     private MenuItem mMySearchesItem;
 
     public static Card sCardBrowserCard;
-    private static int sLastSelectedDeckIndex = -1;
 
     private int mPositionInCardsList;
 
@@ -110,8 +107,6 @@ public class CardBrowser extends NavigationDrawerActivity implements
     private int mColumn1Index;
     private int mColumn2Index;
 
-    private static final int DIALOG_TAGS = 3;
-
     private static final int BACKGROUND_NORMAL = 0;
     private static final int BACKGROUND_MARKED = 1;
     private static final int BACKGROUND_SUSPENDED = 2;
@@ -153,7 +148,6 @@ public class CardBrowser extends NavigationDrawerActivity implements
         "edited",
         "interval"};
     private long mLastRenderStart = 0;
-    private ActionBar mActionBar;
     private DeckDropDownAdapter mDropDownAdapter;
     private Spinner mActionBarSpinner;
     private boolean mReloadRequired = false;
@@ -199,13 +193,13 @@ public class CardBrowser extends NavigationDrawerActivity implements
                                     .get("sfld")))
                             .positiveText(res.getString(R.string.dialog_positive_delete))
                             .negativeText(res.getString(R.string.dialog_cancel))
-                            .callback(new MaterialDialog.ButtonCallback() {
+                            .onPositive(new MaterialDialog.SingleButtonCallback() {
                                 @Override
-                                public void onPositive(MaterialDialog dialog) {
+                                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                     Card card = getCol().getCard(Long.parseLong(getCards().get(mPositionInCardsList).get("id")));
                                     deleteNote(card);
                                     DeckTask.launchDeckTask(DeckTask.TASK_TYPE_DISMISS_NOTE, mDeleteNoteHandler,
-                                                            new DeckTask.TaskData(card, 3));
+                                            new DeckTask.TaskData(card, 3));
                                 }
                             })
                             .build().show();
@@ -351,10 +345,8 @@ public class CardBrowser extends NavigationDrawerActivity implements
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         Timber.d("onCreate()");
-        View mainView = getLayoutInflater().inflate(R.layout.card_browser, null);
-        setContentView(mainView);
-
-        initNavigationDrawer(mainView);
+        setContentView(R.layout.card_browser);
+        initNavigationDrawer(findViewById(android.R.id.content));
         startLoadingCollection();
     }
 
@@ -364,7 +356,7 @@ public class CardBrowser extends NavigationDrawerActivity implements
     protected void onCollectionLoaded(Collection col) {
         super.onCollectionLoaded(col);
         Timber.d("onCollectionLoaded()");
-        mDeckNames = new HashMap<String, String>();
+        mDeckNames = new HashMap<>();
         for (long did : getCol().getDecks().allIds()) {
             mDeckNames.put(String.valueOf(did), getCol().getDecks().name(did));
         }
@@ -375,8 +367,10 @@ public class CardBrowser extends NavigationDrawerActivity implements
         // Add drop-down menu to select deck to action bar.
         mDropDownDecks = getCol().getDecks().allSorted();
         mDropDownAdapter = new DeckDropDownAdapter(this, mDropDownDecks);
-        mActionBar = getSupportActionBar();
-        mActionBar.setDisplayShowTitleEnabled(false);
+        ActionBar mActionBar = getSupportActionBar();
+        if (mActionBar != null) {
+            mActionBar.setDisplayShowTitleEnabled(false);
+        }
         mActionBarSpinner = (Spinner) findViewById(R.id.toolbar_spinner);
         mActionBarSpinner.setAdapter(mDropDownAdapter);
         mActionBarSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {
@@ -412,17 +406,17 @@ public class CardBrowser extends NavigationDrawerActivity implements
         } catch (JSONException e) {
             throw new RuntimeException(e);
         }
-        
+
         mCards = new ArrayList<>();
-        mCardsListView = (ListView) findViewById(R.id.card_browser_list);
+        ListView cardsListView = (ListView) findViewById(R.id.card_browser_list);
         // Create a spinner for column1
-        mCardsColumn1Spinner = (Spinner) findViewById(R.id.browser_column1_spinner);
+        Spinner cardsColumn1Spinner = (Spinner) findViewById(R.id.browser_column1_spinner);
         ArrayAdapter<CharSequence> column1Adapter = ArrayAdapter.createFromResource(this,
                 R.array.browser_column1_headings, android.R.layout.simple_spinner_item);
         column1Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        mCardsColumn1Spinner.setAdapter(column1Adapter);
+        cardsColumn1Spinner.setAdapter(column1Adapter);
         mColumn1Index = AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt("cardBrowserColumn1", 0);
-        mCardsColumn1Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
+        cardsColumn1Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
                 // If a new column was selected then change the key used to map from mCards to the column TextView
@@ -444,13 +438,13 @@ public class CardBrowser extends NavigationDrawerActivity implements
         // Load default value for column2 selection
         mColumn2Index = AnkiDroidApp.getSharedPrefs(getBaseContext()).getInt("cardBrowserColumn2", 0);
         // Setup the column 2 heading as a spinner so that users can easily change the column type
-        mCardsColumn2Spinner = (Spinner) findViewById(R.id.browser_column2_spinner);
+        Spinner cardsColumn2Spinner = (Spinner) findViewById(R.id.browser_column2_spinner);
         ArrayAdapter<CharSequence> column2Adapter = ArrayAdapter.createFromResource(this,
                 R.array.browser_column2_headings, android.R.layout.simple_spinner_item);
         column2Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        mCardsColumn2Spinner.setAdapter(column2Adapter);
+        cardsColumn2Spinner.setAdapter(column2Adapter);
         // Create a new list adapter with updated column map any time the user changes the column
-        mCardsColumn2Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
+        cardsColumn2Spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
                 // If a new column was selected then change the key used to map from mCards to the column TextView
@@ -482,16 +476,16 @@ public class CardBrowser extends NavigationDrawerActivity implements
                 "flags",
                 sflRelativeFontSize,
                 sflCustomFont);
-        // link the adapter to the main mCardsListView
-        mCardsListView.setAdapter(mCardsAdapter);
+        // link the adapter to the main cardsListView
+        cardsListView.setAdapter(mCardsAdapter);
         // make the second column load dynamically when scrolling
-        mCardsListView.setOnScrollListener(new RenderOnScroll());
+        cardsListView.setOnScrollListener(new RenderOnScroll());
         // set the spinner index
-        mCardsColumn1Spinner.setSelection(mColumn1Index);
-        mCardsColumn2Spinner.setSelection(mColumn2Index);
+        cardsColumn1Spinner.setSelection(mColumn1Index);
+        cardsColumn2Spinner.setSelection(mColumn2Index);
 
 
-        mCardsListView.setOnItemClickListener(new OnItemClickListener() {
+        cardsListView.setOnItemClickListener(new OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                 // load up the card selected on the list
@@ -505,7 +499,7 @@ public class CardBrowser extends NavigationDrawerActivity implements
                 startActivityForResultWithAnimation(editCard, EDIT_CARD, ActivityTransitionAnimation.LEFT);
             }
         });
-        mCardsListView.setOnItemLongClickListener(new OnItemLongClickListener() {
+        cardsListView.setOnItemLongClickListener(new OnItemLongClickListener() {
             @Override
             public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) {
                 mPositionInCardsList = position;
@@ -526,29 +520,7 @@ public class CardBrowser extends NavigationDrawerActivity implements
         mSearchTerms = "";
 
         // set the currently selected deck
-        if (sLastSelectedDeckIndex == -1) {
-            String currentDeckName;
-            try {
-                currentDeckName = getCol().getDecks().current().getString("name");
-            } catch (JSONException e) {
-                throw new RuntimeException(e);
-            }
-            for (int dropDownDeckIdx = 0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {
-                JSONObject deck = mDropDownDecks.get(dropDownDeckIdx);
-                String deckName;
-                try {
-                    deckName = deck.getString("name");
-                } catch (JSONException e) {
-                    throw new RuntimeException();
-                }
-                if (deckName.equals(currentDeckName)) {
-                    selectDropDownItem(dropDownDeckIdx + 1);
-                    break;
-                }
-            }
-        } else if (sLastSelectedDeckIndex > 0 && sLastSelectedDeckIndex < mDropDownDecks.size()) {
-            selectDropDownItem(sLastSelectedDeckIndex);
-        }
+        selectDropDownItem(getDeckPositionFromDeckId(getIntent().getLongExtra("defaultDeckId", -1)));
     }
 
 
@@ -583,9 +555,6 @@ public class CardBrowser extends NavigationDrawerActivity implements
         } else {
             Timber.i("Back key pressed");
             Intent data = new Intent();
-            if (getIntent().hasExtra("selectedDeck")) {
-                data.putExtra("originalDeck", getIntent().getLongExtra("selectedDeck", 0L));
-            }
             if (mReloadRequired) {
                 // Add reload flag to result intent so that schedule reset when returning to note editor
                 data.putExtra("reloadRequired", true);
@@ -675,7 +644,7 @@ public class CardBrowser extends NavigationDrawerActivity implements
 
             case R.id.action_list_my_searches:
                 JSONObject savedFiltersObj = getCol().getConf().optJSONObject("savedFilters");
-                HashMap<String, String> savedFilters = new HashMap<String, String>();
+                HashMap<String, String> savedFilters = new HashMap<>();
                 if (savedFiltersObj != null) {
                     Iterator<String> it = savedFiltersObj.keys();
                     while (it.hasNext()) {
@@ -706,7 +675,7 @@ public class CardBrowser extends NavigationDrawerActivity implements
                 return true;
 
             case R.id.action_search_by_tag:
-                showDialogFragment(DIALOG_TAGS);
+                showTagsDialog();
                 return true;
 
             default:
@@ -755,73 +724,56 @@ public class CardBrowser extends NavigationDrawerActivity implements
                 && getCards().get(mPositionInCardsList) != null) {
             long reviewerCard = getIntent().getExtras().getLong("currentCard");
             long selectedCard = Long.parseLong(getCards().get(mPositionInCardsList).get("id"));
-            if (selectedCard == reviewerCard) {
-                return true;
-            } else {
-                return false;
-            }
+            return selectedCard == reviewerCard;
         }
         return false;
     }
 
-    private DialogFragment showDialogFragment(int id) {
-        DialogFragment dialogFragment = null;
-        String tag = null;
-        switch(id) {
-            case DIALOG_TAGS:
-                TagsDialog dialog = com.ichi2.anki.dialogs.TagsDialog.newInstance(
-                    TagsDialog.TYPE_FILTER_BY_TAG, new ArrayList<String>(), new ArrayList<String>(getCol().getTags().all()));
-                dialog.setTagsDialogListener(new TagsDialogListener() {                    
-                    @Override
-                    public void onPositive(List<String> selectedTags, int option) {
-                        mSearchView.setQuery("", false);
-                        String tags = selectedTags.toString();
-                        mSearchView.setQueryHint(getResources().getString(R.string.card_browser_tags_shown,
-                                tags.substring(1, tags.length() - 1)));
-                        StringBuilder sb = new StringBuilder();
-                        switch (option) {
-                            case 1:
-                                sb.append("is:new ");
-                                break;
-                            case 2:
-                                sb.append("is:due ");
-                                break;
-                            default:
-                                // Logging here might be appropriate : )
-                                break;
-                        }
-                        int i = 0;
-                        for (String tag : selectedTags) {
-                            if (i != 0) {
-                                sb.append("or ");
-                            } else {
-                                sb.append("("); // Only if we really have selected tags
-                            }
-                            sb.append("tag:").append(tag).append(" ");
-                            i++;
-                        }
-                        if (i > 0) {
-                            sb.append(")"); // Only if we added anything to the tag list
-                        }
-                        mSearchTerms = sb.toString();
-                        searchCards();
+    private void showTagsDialog() {
+        TagsDialog dialog = com.ichi2.anki.dialogs.TagsDialog.newInstance(
+            TagsDialog.TYPE_FILTER_BY_TAG, new ArrayList<String>(), new ArrayList<>(getCol().getTags().all()));
+        dialog.setTagsDialogListener(new TagsDialogListener() {
+            @Override
+            public void onPositive(List<String> selectedTags, int option) {
+                mSearchView.setQuery("", false);
+                String tags = selectedTags.toString();
+                mSearchView.setQueryHint(getResources().getString(R.string.card_browser_tags_shown,
+                        tags.substring(1, tags.length() - 1)));
+                StringBuilder sb = new StringBuilder();
+                switch (option) {
+                    case 1:
+                        sb.append("is:new ");
+                        break;
+                    case 2:
+                        sb.append("is:due ");
+                        break;
+                    default:
+                        // Logging here might be appropriate : )
+                        break;
+                }
+                int i = 0;
+                for (String tag : selectedTags) {
+                    if (i != 0) {
+                        sb.append("or ");
+                    } else {
+                        sb.append("("); // Only if we really have selected tags
                     }
-                });
-                dialogFragment = dialog;
-                break;
-            default:
-                break;
-        }
-        
-
-        dialogFragment.show(getSupportFragmentManager(), tag);
-        return dialogFragment;
+                    sb.append("tag:").append(tag).append(" ");
+                    i++;
+                }
+                if (i > 0) {
+                    sb.append(")"); // Only if we added anything to the tag list
+                }
+                mSearchTerms = sb.toString();
+                searchCards();
+            }
+        });
+        showDialogFragment(dialog);
     }
 
 
     public void selectDropDownItem(int position) {
         mActionBarSpinner.setSelection(position);
-        sLastSelectedDeckIndex = position;
         if (position == 0) {
             mRestrictOnDeck = "";
         } else {
@@ -888,6 +840,30 @@ public class CardBrowser extends NavigationDrawerActivity implements
     }
 
 
+    /**
+     * Get the index in the deck spinner for a given deck ID
+     * @param did the id of a deck
+     * @return the corresponding index in the deck spinner, or 0 if not found
+     */
+    private int getDeckPositionFromDeckId(long did) {
+        for (int dropDownDeckIdx = 0; dropDownDeckIdx < mDropDownDecks.size(); dropDownDeckIdx++) {
+            JSONObject deck = mDropDownDecks.get(dropDownDeckIdx);
+            long cdid;
+            try {
+                cdid = deck.getLong("id");
+            } catch (JSONException e) {
+                throw new RuntimeException();
+            }
+            if (cdid == did) {
+                // NOTE: mDropDownDecks.get(0) is the first deck, whereas index 0 in mActionBarSpinner is "All Decks"
+                return dropDownDeckIdx + 1;
+            }
+        }
+        // Fall back on "All Decks" if did wasn't found
+        return 0;
+    }
+
+
     private void updateCardInList(Card card, String updatedCardTags) {
         Note note = card.note();
         int pos;
@@ -1148,14 +1124,17 @@ public class CardBrowser extends NavigationDrawerActivity implements
     }
 
     private void closeCardBrowser(int result, Intent data) {
+        // Pass the originally selected deck back so that the calling Activity can switch back to it
+        if (getIntent().hasExtra("selectedDeck")) {
+            data.putExtra("originalDeck", getIntent().getLongExtra("selectedDeck", 0L));
+        }
+        // Pass a flag to say whether "All Decks" was selected so that the calling Activity can remember it
+        data.putExtra("allDecksSelected", mActionBarSpinner.getSelectedItemPosition() == 0);
+        // Set result and finish
         setResult(result, data);
         finishWithAnimation(ActivityTransitionAnimation.RIGHT);
     }
 
-    public static void clearSelectedDeck() {
-        sLastSelectedDeckIndex = -1;
-    }
-
     /**
      * Render the second column whenever the user stops scrolling
      */
@@ -1277,19 +1256,25 @@ public class CardBrowser extends NavigationDrawerActivity implements
             }
         }
 
-
+        /**
+         * Get the index that specifies the background color of items in the card list based on the String tag
+         * @param flag a string flag
+         * @return index into TypedArray specifying the background color
+         */
         private int getColor(String flag) {
-            int which = BACKGROUND_NORMAL;
             if (flag == null) {
-                // use BACKGROUND_NORMAL
-            } else if (flag.equals("1")) {
-                which = BACKGROUND_SUSPENDED;
-            } else if (flag.equals("2")) {
-                which = BACKGROUND_MARKED;
-            } else if (flag.equals("3")) {
-                which = BACKGROUND_MARKED_SUSPENDED;
+                return BACKGROUND_NORMAL;
+            }
+            switch (flag) {
+                case "1":
+                    return BACKGROUND_SUSPENDED;
+                case "2":
+                    return  BACKGROUND_MARKED;
+                case "3":
+                    return  BACKGROUND_MARKED_SUSPENDED;
+                default:
+                    return BACKGROUND_NORMAL;
             }
-            return which;
         }
 
 
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java b/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java
index 282d51ace8..8594b6bcb0 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java
@@ -476,7 +476,6 @@ public class DeckPicker extends NavigationDrawerActivity implements
                                 String deckName = mDialogEditText.getText().toString();
                                 Timber.i("DeckPicker:: Creating new deck...");
                                 getCol().getDecks().id(deckName, true);
-                                CardBrowser.clearSelectedDeck();
                                 updateDeckList();
                             }
                         })
@@ -650,7 +649,6 @@ public class DeckPicker extends NavigationDrawerActivity implements
             } else {
                 finishWithAnimation();
             }
-        } else if (requestCode == REPORT_FEEDBACK && resultCode == RESULT_OK) {
         } else if (requestCode == LOG_IN_FOR_SYNC && resultCode == RESULT_OK) {
             mSyncOnResume = true;
         } else if ((requestCode == REQUEST_REVIEW || requestCode == SHOW_STUDYOPTIONS)
@@ -662,6 +660,14 @@ public class DeckPicker extends NavigationDrawerActivity implements
             } else {
                 showSimpleSnackbar(R.string.studyoptions_no_cards_due, false);
             }
+        } else if (requestCode == REQUEST_BROWSE_CARDS) {
+            // Store the selected deck after opening browser
+            if (intent != null && intent.getBooleanExtra("allDecksSelected", false)) {
+                AnkiDroidApp.getSharedPrefs(this).edit().putLong("browserDeckIdFromDeckPicker", -1L).apply();
+            } else {
+                long selectedDeck = getCol().getDecks().selected();
+                AnkiDroidApp.getSharedPrefs(this).edit().putLong("browserDeckIdFromDeckPicker", selectedDeck).apply();
+            }
         } else if (requestCode == REQUEST_PATH_UPDATE) {
             // The collection path was inaccessible on startup so just close the activity and let user restart
             finishWithoutAnimation();
@@ -1679,10 +1685,17 @@ public class DeckPicker extends NavigationDrawerActivity implements
         }
     }
 
+    @Override
+    protected void openCardBrowser() {
+        Intent cardBrowser = new Intent(this, CardBrowser.class);
+        cardBrowser.putExtra("selectedDeck", getCol().getDecks().selected());
+        long lastDeckId = AnkiDroidApp.getSharedPrefs(this).getLong("browserDeckIdFromDeckPicker", -1L);
+        cardBrowser.putExtra("defaultDeckId", lastDeckId);
+        startActivityForResultWithAnimation(cardBrowser, REQUEST_BROWSE_CARDS, ActivityTransitionAnimation.LEFT);
+    }
+
 
     private void handleDeckSelection(long did, boolean dontSkipStudyOptions) {
-        // Forget what the last used deck was in the browser
-        CardBrowser.clearSelectedDeck();
         // Clear the undo history when selecting a new deck
         if (getCol().getDecks().selected() != did) {
             getCol().clearUndo();
@@ -1998,7 +2011,6 @@ public class DeckPicker extends NavigationDrawerActivity implements
                         Timber.e(e, "onPostExecute - Exception dismissing dialog");
                     }
                 }
-                CardBrowser.clearSelectedDeck();
                 // TODO: if we had "undo delete note" like desktop client then we won't need this.
                 getCol().clearUndo();
             }
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java b/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java
index cdb10974ed..8fd28d3ec2 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java
@@ -54,9 +54,6 @@ public class NavigationDrawerActivity extends AnkiActivity implements Navigation
     public static final int REQUEST_PREFERENCES_UPDATE = 100;
     public static final int REQUEST_BROWSE_CARDS = 101;
     public static final int REQUEST_STATISTICS = 102;
-
-    private long mCurrentCardId = -1L;
-
     // Navigation drawer initialisation
     protected void initNavigationDrawer(View mainView){
         // Create inherited navigation drawer layout here so that it can be used by parent class
@@ -119,11 +116,17 @@ public class NavigationDrawerActivity extends AnkiActivity implements Navigation
             return;
         }
         Menu menu = mNavigationView.getMenu();
-        MenuItem item = menu.findItem(itemId);
-        if (item != null) {
-            item.setChecked(true);
+        if (itemId == -1) {
+            for (int i = 0; i < menu.size(); i++) {
+                menu.getItem(i).setChecked(false);
+            }
         } else {
-            Timber.e("Could not find item %d", itemId);
+            MenuItem item = menu.findItem(itemId);
+            if (item != null) {
+                item.setChecked(true);
+            } else {
+                Timber.e("Could not find item %d", itemId);
+            }
         }
     }
 
@@ -224,10 +227,6 @@ public class NavigationDrawerActivity extends AnkiActivity implements Navigation
         }
     }
 
-    protected void setCurrentCardId(long id) {
-        mCurrentCardId = id;
-    }
-
     @Override
     public boolean onNavigationItemSelected(MenuItem item) {
         // Don't do anything if user selects already selected position
@@ -242,12 +241,7 @@ public class NavigationDrawerActivity extends AnkiActivity implements Navigation
                 startActivityWithAnimation(deckPicker, ActivityTransitionAnimation.RIGHT);
                 break;
             case R.id.nav_browser:
-                Intent cardBrowser = new Intent(this, CardBrowser.class);
-                cardBrowser.putExtra("selectedDeck", getCol().getDecks().selected());
-                if (mCurrentCardId >= 0) {
-                    cardBrowser.putExtra("currentCard", mCurrentCardId);
-                }                
-                startActivityForResultWithAnimation(cardBrowser, REQUEST_BROWSE_CARDS, ActivityTransitionAnimation.LEFT);
+                openCardBrowser();
                 break;
             case R.id.nav_stats:
                 Intent intent = new Intent(this, Statistics.class);
@@ -274,6 +268,15 @@ public class NavigationDrawerActivity extends AnkiActivity implements Navigation
         return true;
     }
 
+    /**
+     * Open the card browser. Override this method to pass it custom arguments
+     */
+    protected void openCardBrowser() {
+        Intent cardBrowser = new Intent(this, CardBrowser.class);
+        cardBrowser.putExtra("selectedDeck", getCol().getDecks().selected());
+        startActivityForResultWithAnimation(cardBrowser, REQUEST_BROWSE_CARDS, ActivityTransitionAnimation.LEFT);
+    }
+
     protected void showBackIcon() {
         if (mDrawerToggle != null) {
             mDrawerToggle.setDrawerIndicatorEnabled(false);
diff --git a/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java b/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java
index cc53727013..f2057160b0 100644
--- a/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java
+++ b/AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java
@@ -53,6 +53,7 @@ public class Reviewer extends AbstractFlashcardViewer {
     private boolean mShowWhiteboard = true;
     private boolean mBlackWhiteboard = true;
     private boolean mPrefFullscreenReview = false;
+    private Long mLastSelectedBrowserDid = null;
 
     @Override
     protected void setTitle() {
@@ -440,15 +441,21 @@ public class Reviewer extends AbstractFlashcardViewer {
         }
     }
 
+
     @Override
-    public boolean onNavigationItemSelected(MenuItem item) {
-        // Tell the browser the current card ID so that it can tell us when we need to reload
-        if (mCurrentCard != null) {
-            setCurrentCardId(mCurrentCard.getId());
+    protected void openCardBrowser() {
+        Intent cardBrowser = new Intent(this, CardBrowser.class);
+        cardBrowser.putExtra("selectedDeck", getCol().getDecks().selected());
+        if (mLastSelectedBrowserDid != null) {
+            cardBrowser.putExtra("defaultDeckId", mLastSelectedBrowserDid);
+        } else {
+            cardBrowser.putExtra("defaultDeckId", getCol().getDecks().selected());
         }
-        return super.onNavigationItemSelected(item);
+        cardBrowser.putExtra("currentCard", mCurrentCard.getId());
+        startActivityForResultWithAnimation(cardBrowser, REQUEST_BROWSE_CARDS, ActivityTransitionAnimation.LEFT);
     }
 
+
     @Override
     public void onWindowFocusChanged(boolean hasFocus) {
         super.onWindowFocusChanged(hasFocus);
@@ -463,8 +470,13 @@ public class Reviewer extends AbstractFlashcardViewer {
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (requestCode == REQUEST_STATISTICS || requestCode == REQUEST_BROWSE_CARDS) {
-            // select original deck if the statistics or card browser were opened,
-            // which can change the selected deck
+            // Store the selected deck
+            if (data != null && data.getBooleanExtra("allDecksSelected", false)) {
+                mLastSelectedBrowserDid = -1L;
+            } else {
+                mLastSelectedBrowserDid = getCol().getDecks().selected();
+            }
+            // select original deck if the statistics or card browser were opened, which can change the selected deck
             if (data != null && data.hasExtra("originalDeck")) {
                 getCol().getDecks().select(data.getLongExtra("originalDeck", 0L));
             }
diff --git a/AnkiDroid/src/main/java/com/ichi2/compat/CompatV10.java b/AnkiDroid/src/main/java/com/ichi2/compat/CompatV10.java
index ea93b1f918..a61259ed03 100644
--- a/AnkiDroid/src/main/java/com/ichi2/compat/CompatV10.java
+++ b/AnkiDroid/src/main/java/com/ichi2/compat/CompatV10.java
@@ -148,7 +148,6 @@ public class CompatV10 implements Compat {
                                                 Timber.i("DeckPicker:: Creating new deck...");
                                                 String deckName = mDialogEditText.getText().toString();
                                                 activity.getCol().getDecks().id(deckName, true);
-                                                CardBrowser.clearSelectedDeck();
                                                 activity.onRequireDeckListUpdate();
                                             }
                                         })
