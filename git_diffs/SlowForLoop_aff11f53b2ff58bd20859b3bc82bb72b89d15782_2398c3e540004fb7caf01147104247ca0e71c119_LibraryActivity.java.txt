diff --git a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java b/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
index 8dcebf5..81a0526 100644
--- a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
+++ b/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
@@ -29,12 +29,12 @@ public class AutotalentTask {
 
     public static final int AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR = 48105;
 
-    private final Context context;
-    private final DependentTask dependentTask;
+    private final Context mContext;
+    private final DependentTask mDependentTask;
 
     public AutotalentTask(Context context, DependentTask task) {
-        this.context = context;
-        this.dependentTask = task;
+        mContext = context;
+        mDependentTask = task;
     }
 
     public void runAutotalentTask(String file) {
@@ -48,33 +48,33 @@ public class AutotalentTask {
             switch (msg.what) {
                 case AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR:
                     // received error that the writer couldn't create the recording
-                    DialogHelper.showWarning(context,
+                    DialogHelper.showWarning(mContext,
                             R.string.recording_io_error_title,
                             R.string.recording_io_error_warning);
-                    dependentTask.handleError();
+                    mDependentTask.handleError();
                     break;
             }
         }
     };
 
     private class ProcessAutotalentTask extends AsyncTask<String, Void, Void> {
-        private ProgressDialog spinner;
-        private boolean isLiveMode;
+        private ProgressDialog mBusySpinner;
+        private boolean mIsLive;
 
         public ProcessAutotalentTask() {
-            spinner = new ProgressDialog(context);
-            spinner.setCancelable(false);
-            isLiveMode = PreferenceHelper.getLiveMode(context);
+            mBusySpinner = new ProgressDialog(mContext);
+            mBusySpinner.setCancelable(false);
+            mIsLive = PreferenceHelper.getLiveMode(mContext);
         }
 
         @Override
         protected void onPreExecute() {
-            if (isLiveMode) {
-                spinner.setMessage(context.getString(R.string.saving_recording_progress_msg));
+            if (mIsLive) {
+                mBusySpinner.setMessage(mContext.getString(R.string.saving_recording_progress_msg));
             } else {
-                spinner.setMessage(context.getString(R.string.autotalent_progress_msg));
+                mBusySpinner.setMessage(mContext.getString(R.string.autotalent_progress_msg));
             }
-            spinner.show();
+            mBusySpinner.show();
         }
 
         @Override
@@ -83,20 +83,22 @@ public class AutotalentTask {
             String fileName = params[0];
             Message msg = null;
 
-            if (isLiveMode) {
+            if (mIsLive) {
                 try {
                     // do a file copy since renameTo doesn't work
                     moveFile(fileName);
                 } catch (IOException e) {
                     e.printStackTrace();
-                    msg = autotalentTaskHandler.obtainMessage(AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
+                    msg = autotalentTaskHandler.obtainMessage(
+                            AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
                 }
             } else {
                 try {
                     processPitchCorrection(fileName);
                 } catch (IOException e) {
                     e.printStackTrace();
-                    msg = autotalentTaskHandler.obtainMessage(AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
+                    msg = autotalentTaskHandler.obtainMessage(
+                            AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
                 }
             }
             if (msg != null) {
@@ -110,13 +112,12 @@ public class AutotalentTask {
             WaveWriter writer = null;
             short[] buf = new short[AUTOTALENT_CHUNK_SIZE];
             try {
-                FileInputStream in = context.openFileInput("direct_recording.wav");
-                FileOutputStream out = context.openFileOutput(file, Context.MODE_WORLD_READABLE);
+                FileInputStream in = mContext.openFileInput(
+                        mContext.getString(R.string.default_recording_name));
+                FileOutputStream out = mContext.openFileOutput(file, Context.MODE_WORLD_READABLE);
                 reader = new WaveReader(in);
                 reader.openWave();
-                writer = new WaveWriter(out,
-                        reader.getSampleRate(),
-                        reader.getChannels(),
+                writer = new WaveWriter(out, reader.getSampleRate(), reader.getChannels(),
                         reader.getPcmFormat());
                 writer.createWaveFile();
                 while (true) {
@@ -135,12 +136,11 @@ public class AutotalentTask {
                     if (reader != null) {
                         reader.closeWaveFile();
                     }
-                    if (reader != null) {
+                    if (writer != null) {
                         writer.closeWaveFile();
-                        context.deleteFile("direct_recording.wav");
+                        mContext.deleteFile(mContext.getString(R.string.default_recording_name));
                     }
                 } catch (IOException e) {
-                    // I hate you sometimes java
                     e.printStackTrace();
                 }
             }
@@ -152,9 +152,9 @@ public class AutotalentTask {
             OutputStream out = null;
             byte[] buf = new byte[1024];
             File src = new File(
-                    context.getCacheDir().getAbsolutePath()
+                    mContext.getCacheDir().getAbsolutePath()
                             + File.separator
-                            + context.getString(R.string.default_recording_name));
+                            + mContext.getString(R.string.default_recording_name));
             File dst = new File(
                     ApplicationHelper.getLibraryDirectory()
                             + File.separator
@@ -176,7 +176,6 @@ public class AutotalentTask {
                         out.close();
                     }
                 } catch (IOException e) {
-                    // I hate you sometimes java
                     e.printStackTrace();
                 }
             }
@@ -184,9 +183,8 @@ public class AutotalentTask {
 
         @Override
         protected void onPostExecute(Void unused) {
-            spinner.dismiss();
-            dependentTask.doTask();
+            mBusySpinner.dismiss();
+            mDependentTask.doTask();
         }
     }
-
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/Constants.java b/app/src/main/java/com/intervigil/micdroid/Constants.java
index b495f45..9ab60db 100644
--- a/app/src/main/java/com/intervigil/micdroid/Constants.java
+++ b/app/src/main/java/com/intervigil/micdroid/Constants.java
@@ -28,9 +28,6 @@ public class Constants {
     public static final int DEFAULT_PCM_FORMAT = AudioFormat.ENCODING_PCM_16BIT;
     public static final int DEFAULT_BUFFER_LIMIT = 32;
 
-    // string parameters
-    public static final String EMPTY_STRING = "";
-
     // sample rates
     public static final int SAMPLE_RATE_44KHZ = 44100;
     public static final int SAMPLE_RATE_22KHZ = 22050;
diff --git a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java b/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
index e2a421b..a017a80 100644
--- a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
+++ b/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
@@ -37,17 +37,17 @@ import java.util.Date;
 
 public class FileNameEntry extends Activity {
 
-    private AlertDialog invalidNameAlert;
+    private AlertDialog mInvalidNameAlert;
 
     /**
      * Called when the activity is starting. This is where most initialization
      * should go: calling setContentView(int) to inflate the activity's UI, etc.
      *
-     * @param savedInstanceState Activity's saved state, if any.
+     * @param icicle Activity's saved state, if any.
      */
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
+    protected void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
         setContentView(R.layout.filename_entry);
         getWindow().setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,
                 WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
@@ -57,16 +57,16 @@ public class FileNameEntry extends Activity {
         ((EditText) findViewById(R.id.filename_entry_field))
                 .setText(defaultName);
 
-        invalidNameAlert = new AlertDialog.Builder(this).setTitle(
+        mInvalidNameAlert = new AlertDialog.Builder(this).setTitle(
                 getString(R.string.invalid_name_alert_title)).setMessage(
                 getString(R.string.invalid_name_alert_message))
                 .setNeutralButton("ok", new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int which) {
-                        invalidNameAlert.dismiss();
+                        mInvalidNameAlert.dismiss();
                     }
                 }).create();
 
-        ((Button) findViewById(R.id.filename_entry_btn_ok))
+        findViewById(R.id.filename_entry_btn_ok)
                 .setOnClickListener(mOkBtnListener);
     }
 
@@ -85,7 +85,7 @@ public class FileNameEntry extends Activity {
             }
 
             if (fileName == null || fileName.length() == 0) {
-                invalidNameAlert.show();
+                mInvalidNameAlert.show();
             } else {
                 setResult(Activity.RESULT_OK, result);
                 finish();
diff --git a/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java b/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
index 07f72ac..8bfbe00 100644
--- a/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
+++ b/app/src/main/java/com/intervigil/micdroid/LibraryActivity.java
@@ -55,6 +55,7 @@ import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 public class LibraryActivity extends Activity implements OnItemClickListener {
@@ -62,10 +63,10 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
     private static final String TAG = "Library";
     private static final String STATE_LOAD_IN_PROGRESS = "load_recordings_in_progress";
 
-    private RecordingAdapter libraryAdapter;
-    private ArrayList<Recording> recordings;
-    private LoadRecordingsTask loadRecordingsTask;
-    private ProgressDialog loadRecordingSpinner;
+    private RecordingAdapter mLibraryAdapter;
+    private ArrayList<Recording> mRecordings;
+    private LoadRecordingsTask mLoadTask;
+    private ProgressDialog mLoadSpinner;
 
     @SuppressWarnings("unchecked")
     @Override
@@ -84,13 +85,13 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
 
         Object savedRecordings = getLastNonConfigurationInstance();
         if (savedRecordings == null) {
-            recordings = new ArrayList<Recording>();
+            mRecordings = new ArrayList<>();
         } else {
-            recordings = (ArrayList<Recording>) savedRecordings;
+            mRecordings = (ArrayList<Recording>) savedRecordings;
         }
-        libraryAdapter = new RecordingAdapter(this, R.layout.recording_library_row, recordings);
-        library.setAdapter(libraryAdapter);
-        loadRecordingsTask = (LoadRecordingsTask) new LoadRecordingsTask().execute((Void) null);
+        mLibraryAdapter = new RecordingAdapter(this, R.layout.recording_library_row, mRecordings);
+        library.setAdapter(mLibraryAdapter);
+        mLoadTask = (LoadRecordingsTask) new LoadRecordingsTask().execute((Void) null);
     }
 
     @Override
@@ -116,7 +117,7 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
 
     @Override
     public Object onRetainNonConfigurationInstance() {
-        return recordings;
+        return mRecordings;
     }
 
     @Override
@@ -127,15 +128,15 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
             case Constants.INTENT_FILENAME_ENTRY:
                 if (resultCode == Activity.RESULT_OK) {
                     Recording r = data.getParcelableExtra(Constants.INTENT_EXTRA_RECORDING);
-                    recordings.remove(r);
+                    mRecordings.remove(r);
                     String destinationName = data.getStringExtra(
                             Constants.INTENT_EXTRA_FILE_NAME).trim()
                             + ".wav";
                     File destination = new File(ApplicationHelper.getLibraryDirectory()
                             + File.separator + destinationName);
                     // TODO: Allow file moves
-                    recordings.add(r);
-                    libraryAdapter.notifyDataSetChanged();
+                    mRecordings.add(r);
+                    mLibraryAdapter.notifyDataSetChanged();
                 }
                 break;
             default:
@@ -171,7 +172,7 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
     @Override
     public boolean onContextItemSelected(MenuItem item) {
         AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
-        final Recording r = (Recording) libraryAdapter.getItem(info.position);
+        final Recording r = mLibraryAdapter.getItem(info.position);
 
         switch (item.getItemId()) {
             case R.string.recording_options_play:
@@ -184,8 +185,8 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
                         switch (which) {
                             case DialogInterface.BUTTON_POSITIVE:
                                 getApplicationContext().deleteFile(r.getName());
-                                libraryAdapter.remove(r);
-                                libraryAdapter.notifyDataSetChanged();
+                                mLibraryAdapter.remove(r);
+                                mLibraryAdapter.notifyDataSetChanged();
                                 dialog.dismiss();
                                 break;
                             case DialogInterface.BUTTON_NEGATIVE:
@@ -267,15 +268,15 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
     }
 
     private void onCancelLoadRecordings() {
-        if (loadRecordingsTask != null
-                && loadRecordingsTask.getStatus() == AsyncTask.Status.RUNNING) {
-            loadRecordingsTask.cancel(true);
-            loadRecordingsTask = null;
+        if (mLoadTask != null
+                && mLoadTask.getStatus() == AsyncTask.Status.RUNNING) {
+            mLoadTask.cancel(true);
+            mLoadTask = null;
         }
     }
 
     private void saveLoadRecordingsTask(Bundle outState) {
-        final LoadRecordingsTask task = loadRecordingsTask;
+        final LoadRecordingsTask task = mLoadTask;
         if (task != null && task.getStatus() != AsyncTask.Status.FINISHED) {
             task.cancel(true);
             outState.putBoolean(STATE_LOAD_IN_PROGRESS, true);
@@ -284,7 +285,7 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
 
     private void restoreLoadRecordingsTask(Bundle savedInstanceState) {
         if (savedInstanceState.getBoolean(STATE_LOAD_IN_PROGRESS)) {
-            loadRecordingsTask = (LoadRecordingsTask) new LoadRecordingsTask()
+            mLoadTask = (LoadRecordingsTask) new LoadRecordingsTask()
                     .execute((Void) null);
         }
     }
@@ -292,31 +293,31 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
     private class LoadRecordingsTask extends AsyncTask<Void, Void, Void> {
         @Override
         protected void onPreExecute() {
-            libraryAdapter.clear();
-            loadRecordingSpinner = new ProgressDialog(LibraryActivity.this);
-            loadRecordingSpinner.setMessage("Loading recordings");
-            loadRecordingSpinner.show();
+            mLibraryAdapter.clear();
+            mLoadSpinner = new ProgressDialog(LibraryActivity.this);
+            mLoadSpinner.setMessage("Loading mRecordings");
+            mLoadSpinner.show();
         }
 
         @Override
         protected Void doInBackground(Void... params) {
             String[] wavFiles = getApplicationContext().fileList();
 
-            Log.i(TAG, "doInBackground: Found files: " + wavFiles);
+            Log.i(TAG, "doInBackground: Found files: " + Arrays.toString(wavFiles));
 
             if (wavFiles != null) {
-                for (int i = 0; i < wavFiles.length; i++) {
+                for (String fileName : wavFiles) {
                     Recording r;
                     try {
-                        r = new Recording(wavFiles[i], openFileInput(wavFiles[i]));
-                        recordings.add(r);
+                        r = new Recording(fileName, openFileInput(fileName));
+                        mRecordings.add(r);
                     } catch (FileNotFoundException e) {
-                        Log.w(TAG, wavFiles[i] + " not found in library directory!");
+                        Log.w(TAG, fileName + " not found in library directory!");
                     } catch (InvalidWaveException e) {
-                        Log.i(TAG, "Non-wav file " + wavFiles[i] + " found in library directory!");
+                        Log.i(TAG, "Non-wav file " + fileName + " found in library directory!");
                     } catch (IOException e) {
                         // can't recover
-                        Log.e(TAG, "Error opening file: " + wavFiles[i], e);
+                        Log.e(TAG, "Error opening file: " + fileName, e);
                     }
                 }
             }
@@ -326,8 +327,8 @@ public class LibraryActivity extends Activity implements OnItemClickListener {
 
         @Override
         protected void onPostExecute(Void result) {
-            libraryAdapter.notifyDataSetChanged();
-            loadRecordingSpinner.dismiss();
+            mLibraryAdapter.notifyDataSetChanged();
+            mLoadSpinner.dismiss();
         }
     }
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/MicActivity.java b/app/src/main/java/com/intervigil/micdroid/MicActivity.java
index 9a9c95d..b86f609 100644
--- a/app/src/main/java/com/intervigil/micdroid/MicActivity.java
+++ b/app/src/main/java/com/intervigil/micdroid/MicActivity.java
@@ -29,7 +29,6 @@ import android.os.Bundle;
 import android.os.Environment;
 import android.os.PowerManager;
 import android.os.PowerManager.WakeLock;
-import android.util.Log;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
@@ -67,11 +66,11 @@ public class MicActivity extends Activity implements OnClickListener {
     private static final float DEFAULT_LFO_SYM = 0.0f;
     private static final int DEFAULT_LFO_QUANT = 0;
 
-    private WakeLock wakeLock;
-    private Recorder recorder;
-    private Timer timer;
-    private ToggleButton recordingButton;
-    private AutotalentTask autotalentTask;
+    private WakeLock mWakelock;
+    private Recorder mRecorder;
+    private Timer mTimer;
+    private ToggleButton mRecordButton;
+    private AutotalentTask mAutotalentTask;
 
     /**
      * Called when the activity is first created.
@@ -83,23 +82,23 @@ public class MicActivity extends Activity implements OnClickListener {
 
         Typeface timerFont = Typeface.createFromAsset(getAssets(),
                 "fonts/Clockopia.ttf");
-        recordingButton = ((ToggleButton) findViewById(R.id.recording_button));
+        mRecordButton = ((ToggleButton) findViewById(R.id.recording_button));
         Button libraryButton = ((Button) findViewById(R.id.library_button));
         TextView timerDisplay = (TextView) findViewById(R.id.recording_timer);
 
-        recordingButton.setChecked(false);
-        recordingButton.setOnCheckedChangeListener(recordBtnListener);
+        mRecordButton.setChecked(false);
+        mRecordButton.setOnCheckedChangeListener(recordBtnListener);
         libraryButton.setOnClickListener(this);
 
         timerDisplay.setTypeface(timerFont);
 
-        timer = new Timer(timerDisplay);
+        mTimer = new Timer(timerDisplay);
 
-        autotalentTask = new AutotalentTask(MicActivity.this, postAutotalentTask);
+        mAutotalentTask = new AutotalentTask(MicActivity.this, postAutotalentTask);
 
         if (PreferenceHelper.getScreenLock(MicActivity.this)) {
             PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
-            wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK,
+            mWakelock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK,
                     "recordingWakeLock");
         }
 
@@ -114,7 +113,7 @@ public class MicActivity extends Activity implements OnClickListener {
     protected void onResume() {
         super.onResume();
         if (PreferenceHelper.getScreenLock(MicActivity.this)) {
-            wakeLock.acquire();
+            mWakelock.acquire();
         }
     }
 
@@ -122,18 +121,18 @@ public class MicActivity extends Activity implements OnClickListener {
     protected void onPause() {
         super.onPause();
         if (PreferenceHelper.getScreenLock(MicActivity.this)) {
-            wakeLock.release();
+            mWakelock.release();
         }
     }
 
     @Override
     protected void onDestroy() {
-        if (wakeLock != null && wakeLock.isHeld()) {
-            wakeLock.release();
+        if (mWakelock != null && mWakelock.isHeld()) {
+            mWakelock.release();
         }
 
-        if (recorder != null) {
-            recorder.cleanup();
+        if (mRecorder != null) {
+            mRecorder.cleanup();
         }
         Autotalent.destroyAutotalent();
 
@@ -142,12 +141,11 @@ public class MicActivity extends Activity implements OnClickListener {
 
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
-        Log.i(TAG, "onConfigurationChanged");
         super.onConfigurationChanged(newConfig);
 
         setContentView(R.layout.main);
 
-        boolean isRecording = recorder != null && recorder.isRunning();
+        boolean isRecording = mRecorder != null && mRecorder.isRunning();
 
         ((Button) findViewById(R.id.library_button)).setOnClickListener(this);
         ToggleButton micSwitch = (ToggleButton) findViewById(R.id.recording_button);
@@ -158,7 +156,7 @@ public class MicActivity extends Activity implements OnClickListener {
                 "fonts/Clockopia.ttf");
         TextView timerDisplay = (TextView) findViewById(R.id.recording_timer);
         timerDisplay.setTypeface(timerFont);
-        timer.registerDisplay(timerDisplay);
+        mTimer.registerDisplay(timerDisplay);
     }
 
     @Override
@@ -213,16 +211,16 @@ public class MicActivity extends Activity implements OnClickListener {
                             Constants.INTENT_EXTRA_FILE_NAME).trim()
                             + ".wav";
                     updateAutoTalentPreferences();
-                    autotalentTask.runAutotalentTask(fileName);
+                    mAutotalentTask.runAutotalentTask(fileName);
                 } else if (resultCode == Activity.RESULT_CANCELED) {
                     Toast.makeText(MicActivity.this, R.string.recording_save_canceled,
                             Toast.LENGTH_SHORT).show();
                 }
                 break;
             case Constants.INTENT_PREFERENCES:
-                if (recorder != null && !recorder.isRunning()) {
-                    recorder.cleanup();
-                    recorder = null;
+                if (mRecorder != null && !mRecorder.isRunning()) {
+                    mRecorder.cleanup();
+                    mRecorder = null;
                 }
                 break;
             default:
@@ -264,22 +262,22 @@ public class MicActivity extends Activity implements OnClickListener {
                                 R.string.no_headset_plugged_in_title,
                                 R.string.no_headset_plugged_in_warning);
                     } else {
-                        timer.reset();
+                        mTimer.reset();
                         if (isLiveMode) {
                             updateAutoTalentPreferences();
                         }
-                        if (recorder == null) {
-                            recorder = new SipdroidRecorder(MicActivity.this, postRecordTask, isLiveMode);
+                        if (mRecorder == null) {
+                            mRecorder = new SipdroidRecorder(MicActivity.this, postRecordTask, isLiveMode);
                         }
-                        recorder.start();
-                        timer.start();
+                        mRecorder.start();
+                        mTimer.start();
                     }
                 } else {
-                    if (recorder != null && recorder.isRunning()) {
+                    if (mRecorder != null && mRecorder.isRunning()) {
                         // only do this if it was running, otherwise an error
                         // message triggered the check state change
-                        recorder.stop();
-                        timer.stop();
+                        mRecorder.stop();
+                        mTimer.stop();
                     }
                 }
             }
@@ -319,9 +317,9 @@ public class MicActivity extends Activity implements OnClickListener {
             if (PreferenceHelper.getLiveMode(MicActivity.this)) {
                 Autotalent.destroyAutotalent();
             }
-            recordingButton.setOnCheckedChangeListener(null);
-            recordingButton.setChecked(false);
-            recordingButton.setOnCheckedChangeListener(recordBtnListener);
+            mRecordButton.setOnCheckedChangeListener(null);
+            mRecordButton.setChecked(false);
+            mRecordButton.setOnCheckedChangeListener(recordBtnListener);
         }
     };
 
diff --git a/app/src/main/java/com/intervigil/micdroid/SettingsActivity.java b/app/src/main/java/com/intervigil/micdroid/SettingsActivity.java
index c619dcf..ed00d9c 100644
--- a/app/src/main/java/com/intervigil/micdroid/SettingsActivity.java
+++ b/app/src/main/java/com/intervigil/micdroid/SettingsActivity.java
@@ -20,7 +20,6 @@
 package com.intervigil.micdroid;
 
 import android.app.Activity;
-import android.app.FragmentManager;
 import android.os.Bundle;
 import android.preference.Preference;
 import android.preference.PreferenceCategory;
diff --git a/app/src/main/java/com/intervigil/micdroid/StartupDialog.java b/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
index c3d3ed3..7221db1 100644
--- a/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
+++ b/app/src/main/java/com/intervigil/micdroid/StartupDialog.java
@@ -29,20 +29,18 @@ import android.widget.TextView;
 
 public class StartupDialog extends Dialog {
 
-    private Context context;
-    private TextView textView;
-    private LinearLayout buttonHolder;
-    private int titleId;
-    private int textId;
-    private int buttonLabelId;
+    private Context mContext;
+    private int mTitleId;
+    private int mTextId;
+    private int mButtonLabelId;
 
     public StartupDialog(Context context, int titleId, int textId,
                          int buttonLabelId) {
         super(context);
-        this.context = context;
-        this.titleId = titleId;
-        this.textId = textId;
-        this.buttonLabelId = buttonLabelId;
+        mContext = context;
+        mTitleId = titleId;
+        mTextId = textId;
+        mButtonLabelId = buttonLabelId;
 
         View dialog = createDialog();
         setContentView(dialog);
@@ -50,33 +48,33 @@ public class StartupDialog extends Dialog {
 
     private View createDialog() {
         // Set title text
-        setTitle(titleId);
+        setTitle(mTitleId);
 
         // Create the overall layout.
-        LinearLayout layout = new LinearLayout(context);
+        LinearLayout layout = new LinearLayout(mContext);
         layout.setOrientation(LinearLayout.VERTICAL);
         layout.setPadding(6, 6, 6, 6);
 
         // Create a ScrollView to put the text in. Shouldn't be necessary...
-        ScrollView tscroll = new ScrollView(context);
-        tscroll.setVerticalScrollBarEnabled(true);
-        tscroll.setLayoutParams(new LinearLayout.LayoutParams(
+        ScrollView tScroll = new ScrollView(mContext);
+        tScroll.setVerticalScrollBarEnabled(true);
+        tScroll.setLayoutParams(new LinearLayout.LayoutParams(
                 LinearLayout.LayoutParams.WRAP_CONTENT,
                 LinearLayout.LayoutParams.WRAP_CONTENT, 1));
-        layout.addView(tscroll);
+        layout.addView(tScroll);
 
         // Now create the text view and add it to the scroller.
-        textView = new TextView(context);
+        TextView textView = new TextView(mContext);
         textView.setTextSize(16);
         textView.setTextColor(0xffffffff);
-        textView.setText(textId);
+        textView.setText(mTextId);
         textView.setLayoutParams(new LinearLayout.LayoutParams(
                 LinearLayout.LayoutParams.FILL_PARENT,
                 LinearLayout.LayoutParams.FILL_PARENT));
-        tscroll.addView(textView);
+        tScroll.addView(textView);
 
         // Add a layout to hold the buttons.
-        buttonHolder = new LinearLayout(context);
+        LinearLayout buttonHolder = new LinearLayout(mContext);
         buttonHolder.setBackgroundColor(0xf08080);
         buttonHolder.setOrientation(LinearLayout.HORIZONTAL);
         buttonHolder.setPadding(6, 3, 3, 3);
@@ -85,8 +83,8 @@ public class StartupDialog extends Dialog {
                 LinearLayout.LayoutParams.WRAP_CONTENT));
 
         // Add the OK button.
-        Button btn = new Button(context);
-        btn.setText(buttonLabelId);
+        Button btn = new Button(mContext);
+        btn.setText(mButtonLabelId);
         btn.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 dismiss();
diff --git a/app/src/main/java/com/intervigil/micdroid/Timer.java b/app/src/main/java/com/intervigil/micdroid/Timer.java
index c10239e..16c6cbd 100644
--- a/app/src/main/java/com/intervigil/micdroid/Timer.java
+++ b/app/src/main/java/com/intervigil/micdroid/Timer.java
@@ -11,48 +11,48 @@ public class Timer {
     private static final int TIMER_RESET = 10;
     private static final int TIMER_COUNT_UP = 11;
 
-    private TimerHandler timerHandler;
-    private TextView display;
-    private int timer;
+    private TimerHandler mHandler;
+    private TextView mDisplay;
+    private int mTimeCounter;
 
     public Timer(TextView view) {
-        this.display = view;
-        this.timerHandler = new TimerHandler();
-        this.timer = 0;
+        mDisplay = view;
+        mHandler = new TimerHandler();
+        mTimeCounter = 0;
     }
 
     public void registerDisplay(TextView view) {
-        this.display = view;
+        mDisplay = view;
     }
 
     public void start() {
-        Message startMsg = timerHandler.obtainMessage(TIMER_START);
-        timerHandler.sendMessage(startMsg);
+        Message startMsg = mHandler.obtainMessage(TIMER_START);
+        mHandler.sendMessage(startMsg);
     }
 
     public void stop() {
-        Message stopMsg = timerHandler.obtainMessage(TIMER_STOP);
-        timerHandler.sendMessage(stopMsg);
+        Message stopMsg = mHandler.obtainMessage(TIMER_STOP);
+        mHandler.sendMessage(stopMsg);
     }
 
     public void reset() {
-        Message resetMsg = timerHandler.obtainMessage(TIMER_RESET);
-        timerHandler.sendMessage(resetMsg);
+        Message resetMsg = mHandler.obtainMessage(TIMER_RESET);
+        mHandler.sendMessage(resetMsg);
     }
 
     private String getTime() {
-        int minutes = timer / 60;
-        int seconds = timer % 60;
+        int minutes = mTimeCounter / 60;
+        int seconds = mTimeCounter % 60;
         return String.format("%02d:%02d", minutes, seconds);
     }
 
     private class TimerHandler extends Handler {
-        // handler processes updates to the timer
+        // handler processes updates to the mTimeCounter
         @Override
         public void handleMessage(Message msg) {
             switch (msg.what) {
                 case TIMER_START:
-                    display.setText(getTime());
+                    mDisplay.setText(getTime());
                     this.sleep(DEFAULT_TIMER_COUNT);
                     break;
                 case TIMER_STOP:
@@ -62,22 +62,20 @@ public class Timer {
                     this.removeMessages(TIMER_RESET);
                     break;
                 case TIMER_RESET:
-                    timer = 0;
-                    display.setText(getTime());
+                    mTimeCounter = 0;
+                    mDisplay.setText(getTime());
                     break;
                 case TIMER_COUNT_UP:
-                    display.setText(getTime());
-                    timer++;
-                    this.sleep(DEFAULT_TIMER_COUNT);
+                    mDisplay.setText(getTime());
+                    mTimeCounter++;
+                    sleep(DEFAULT_TIMER_COUNT);
                     break;
             }
         }
 
         public void sleep(long delayMillis) {
             this.removeMessages(TIMER_COUNT_UP);
-            sendMessageDelayed(this.obtainMessage(TIMER_COUNT_UP), delayMillis);
+            sendMessageDelayed(obtainMessage(TIMER_COUNT_UP), delayMillis);
         }
     }
-
-    ;
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java b/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
index d3e427c..232cfff 100644
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
+++ b/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
@@ -2,7 +2,7 @@ package com.intervigil.micdroid.interfaces;
 
 public interface DependentTask {
 
-    public void doTask();
+    void doTask();
 
-    public void handleError();
+    void handleError();
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java b/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
index 37f51f7..8a08117 100644
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
+++ b/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
@@ -1,13 +1,12 @@
 package com.intervigil.micdroid.interfaces;
 
-
 public interface Recorder {
 
-    public void start();
+    void start();
 
-    public void stop();
+    void stop();
 
-    public void cleanup();
+    void cleanup();
 
-    public boolean isRunning();
+    boolean isRunning();
 }
diff --git a/app/src/main/java/com/intervigil/micdroid/model/Recording.java b/app/src/main/java/com/intervigil/micdroid/model/Recording.java
index f216a5d..b749931 100644
--- a/app/src/main/java/com/intervigil/micdroid/model/Recording.java
+++ b/app/src/main/java/com/intervigil/micdroid/model/Recording.java
@@ -23,21 +23,15 @@ import android.os.Parcel;
 import android.os.Parcelable;
 
 import com.intervigil.wave.WaveReader;
-import com.intervigil.wave.exception.InvalidWaveException;
 
-import java.io.BufferedInputStream;
-import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 
 public class Recording implements Parcelable {
-    public static final int WAVE_HEADER_SIZE = 44;
-    public static final int MILLISECONDS_IN_SECOND = 1000;
 
-    private String recordingName;
-    private int recordingLength;
-    private int recordingSize;
+    private String mName;
+    private int mLength;
+    private int mSize;
 
     public static final Parcelable.Creator<Recording> CREATOR = new Parcelable.Creator<Recording>() {
         public Recording createFromParcel(Parcel in) {
@@ -55,22 +49,22 @@ public class Recording implements Parcelable {
     public Recording(String name, FileInputStream stream) throws IOException {
         WaveReader reader = new WaveReader(stream);
         reader.openWave();
-        this.recordingName = name;
-        this.recordingLength = reader.getLength();
-        this.recordingSize = reader.getDataSize() + WAVE_HEADER_SIZE;
+        mName = name;
+        mLength = reader.getLength();
+        mSize = reader.getSize();
         reader.closeWaveFile();
     }
 
     private Recording(Parcel in) {
-        this.recordingName = in.readString();
-        this.recordingLength = in.readInt();
-        this.recordingSize = in.readInt();
+        mName = in.readString();
+        mLength = in.readInt();
+        mSize = in.readInt();
     }
 
     public Recording(String name, int length, int size) {
-        this.recordingName = name;
-        this.recordingLength = length;
-        this.recordingSize = size;
+        mName = name;
+        mLength = length;
+        mSize = size;
     }
 
     public int describeContents() {
@@ -78,37 +72,36 @@ public class Recording implements Parcelable {
     }
 
     public void writeToParcel(Parcel out, int flags) {
-        out.writeString(recordingName);
-        out.writeInt(recordingLength);
-        out.writeInt(recordingSize);
+        out.writeString(mName);
+        out.writeInt(mLength);
+        out.writeInt(mSize);
     }
 
     public String getName() {
         // gets recording name, typically the file name
-        return recordingName;
+        return mName;
     }
 
     public int getLengthInMs() {
-        return recordingLength * 1000;
+        return mLength * 1000;
     }
 
     public String getLength() {
         // gets recording length in MM:SS format
-        int minutes = recordingLength / 60;
-        int seconds = recordingLength % 60;
+        int minutes = mLength / 60;
+        int seconds = mLength % 60;
         return String.format("%d:%02d", minutes, seconds);
     }
 
     public int getSize() {
-        return recordingSize;
+        return mSize;
     }
 
     public void setName(String name) {
-        // sets recording name, typically the file name
-        recordingName = name;
+        mName = name;
     }
 
     public void setSize(int size) {
-        recordingSize = size;
+        mSize = size;
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java b/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
index 7c08ffe..0428edd 100644
--- a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
+++ b/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
@@ -38,58 +38,57 @@ import com.intervigil.micdroid.helper.PreferenceHelper;
 import com.intervigil.micdroid.interfaces.DependentTask;
 import com.intervigil.micdroid.interfaces.Recorder;
 import com.intervigil.wave.WaveWriter;
-import com.intervigil.wave.exception.InvalidWaveException;
 
 import net.sourceforge.autotalent.Autotalent;
 
-import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 
 public class SipdroidRecorder implements Recorder {
 
-    private static final String CLASS_SIPDROID_RECORDER = "SipdroidRecorder";
+    private static final String TAG = "SipdroidRecorder";
 
     private static final int RECORDER_MESSAGE_IO_ERROR = 8675308;
     private static final int RECORDER_MESSAGE_RECORD_ERROR = 8675310;
     private static final int RECORDER_MESSAGE_FINISHED = 8675307;
 
-    private final Context context;
-    private MicWriter writerThread;
-    private final boolean isLiveMode;
-    private final int sampleRate;
-    private DependentTask postRecordTask;
+    private final Context mContext;
+    private RecordThread mWriterThread;
+    private final boolean mIsLive;
+    private final int mSampleRate;
+    private DependentTask mPostRecordTask;
 
-    public SipdroidRecorder(Context context, DependentTask postRecordTask, boolean isLiveMode) {
-        this.context = context;
-        this.sampleRate = PreferenceHelper.getSampleRate(context);
-        this.postRecordTask = postRecordTask;
-        this.isLiveMode = isLiveMode;
+    public SipdroidRecorder(Context context, DependentTask postRecordTask, boolean isLive) {
+        mContext = context;
+        mSampleRate = PreferenceHelper.getSampleRate(mContext);
+        mPostRecordTask = postRecordTask;
+        mIsLive = isLive;
     }
 
     public void start() {
         try {
-            writerThread = new MicWriter();
-            writerThread.start();
-            Toast.makeText(context,
+            mWriterThread = new RecordThread();
+            mWriterThread.start();
+            Toast.makeText(mContext,
                     R.string.recording_started_toast,
                     Toast.LENGTH_SHORT).show();
         } catch (IllegalArgumentException e) {
-            DialogHelper.showWarning(context,
+            DialogHelper.showWarning(mContext,
                     R.string.audio_record_exception_title,
                     R.string.audio_record_exception_warning);
-            postRecordTask.handleError();
+            mPostRecordTask.handleError();
         }
     }
 
     public void stop() {
         if (isRunning()) {
-            writerThread.close();
+            mWriterThread.close();
             try {
-                writerThread.join();
+                mWriterThread.join();
             } catch (InterruptedException e) {
+                // Do nothing
             }
-            writerThread = null;
+            mWriterThread = null;
         }
     }
 
@@ -98,8 +97,8 @@ public class SipdroidRecorder implements Recorder {
     }
 
     public boolean isRunning() {
-        return (writerThread != null
-                && writerThread.getState() != Thread.State.NEW && writerThread
+        return (mWriterThread != null
+                && mWriterThread.getState() != Thread.State.NEW && mWriterThread
                 .getState() != Thread.State.TERMINATED);
     }
 
@@ -108,52 +107,52 @@ public class SipdroidRecorder implements Recorder {
         public void handleMessage(Message msg) {
             switch (msg.what) {
                 case RECORDER_MESSAGE_RECORD_ERROR:
-                    DialogHelper.showWarning(context,
+                    DialogHelper.showWarning(mContext,
                             R.string.audio_record_exception_title,
                             R.string.audio_record_exception_warning);
-                    postRecordTask.handleError();
+                    mPostRecordTask.handleError();
                     break;
                 case RECORDER_MESSAGE_IO_ERROR:
-                    DialogHelper.showWarning(context,
+                    DialogHelper.showWarning(mContext,
                             R.string.recording_io_error_title,
                             R.string.recording_io_error_warning);
-                    postRecordTask.handleError();
+                    mPostRecordTask.handleError();
                     break;
                 case RECORDER_MESSAGE_FINISHED:
-                    postRecordTask.doTask();
+                    mPostRecordTask.doTask();
                     break;
             }
         }
     };
 
-    private class MicWriter extends Thread {
-        private final AudioRecord audioRecord;
-        private AudioTrack audioTrack;
-        private WaveWriter writer;
-        private final int frameSize;
-        private final int frameRate;
-        private final long framePeriod;
-        private final int bufSize;
-        private boolean running;
+    private class RecordThread extends Thread {
+        private final AudioRecord mAudioRecord;
+        private AudioTrack mAudioTrack;
+        private WaveWriter mWavWriter;
+        private final int mFrameSize;
+        private final int mFrameRate;
+        private final long mFramePeriod;
+        private final int mBufSize;
+        private boolean mRunning;
 
-        public MicWriter() {
-            this.frameSize = 160;
-            this.framePeriod = 1000 / (sampleRate / frameSize);
-            this.frameRate = (int) (sampleRate / frameSize * 1.5);
-            this.bufSize = frameSize * (frameRate + 1);
-            this.running = false;
-            this.audioRecord = AudioHelper.getRecorder(context);
+        public RecordThread() {
+            mFrameSize = 160;
+            mFramePeriod = 1000 / (mSampleRate / mFrameSize);
+            mFrameRate = (int) (mSampleRate / mFrameSize * 1.5);
+            mBufSize = mFrameSize * (mFrameRate + 1);
+            mRunning = false;
+            mAudioRecord = AudioHelper.getRecorder(mContext);
             try {
-                FileOutputStream out = context.openFileOutput("direct_recording.wav",
-                        Context.MODE_PRIVATE);
-                this.writer = new WaveWriter(out, sampleRate,
+                FileOutputStream out = mContext.openFileOutput(
+                        mContext.getString(R.string.default_recording_name), Context.MODE_PRIVATE);
+                mWavWriter = new WaveWriter(out, mSampleRate,
                         AudioHelper.getChannelConfig(Constants.DEFAULT_CHANNEL_CONFIG),
                         AudioHelper.getPcmEncoding(Constants.DEFAULT_PCM_FORMAT));
-                if (isLiveMode) {
-                    this.audioTrack = AudioHelper.getPlayer(context);
+                if (mIsLive) {
+                    mAudioTrack = AudioHelper.getPlayer(mContext);
                 }
             } catch (IOException e) {
-                Log.e(CLASS_SIPDROID_RECORDER, "Unable to write WAV file", e);
+                Log.e(TAG, "Unable to write WAV file", e);
             }
         }
 
@@ -169,35 +168,35 @@ public class SipdroidRecorder implements Recorder {
                 mp.stop();
                 mp.release();
             } catch (Exception e) {
-                Log.e(CLASS_SIPDROID_RECORDER, e.toString());
+                Log.e(TAG, e.toString());
             }
         }
 
         public synchronized void close() {
-            running = false;
+            mRunning = false;
         }
 
-        public void initialize() throws FileNotFoundException, InvalidWaveException, IOException {
-            writer.createWaveFile();
-            if (isLiveMode) {
-                AudioManager am = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+        public void initialize() throws IOException {
+            mWavWriter.createWaveFile();
+            if (mIsLive) {
+                AudioManager am = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
                 am.setMode(AudioManager.MODE_NORMAL);
             }
         }
 
         public void cleanup() {
             // stop things
-            if (audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) {
-                audioRecord.stop();
+            if (mAudioRecord.getRecordingState() == AudioRecord.RECORDSTATE_RECORDING) {
+                mAudioRecord.stop();
             }
-            audioRecord.release();
-            if (isLiveMode) {
-                audioTrack.stop();
-                audioTrack.release();
+            mAudioRecord.release();
+            if (mIsLive) {
+                mAudioTrack.stop();
+                mAudioTrack.release();
             }
             // close file
             try {
-                writer.closeWaveFile();
+                mWavWriter.closeWaveFile();
             } catch (IOException e) {
                 // no recovery possible here
                 e.printStackTrace();
@@ -208,34 +207,35 @@ public class SipdroidRecorder implements Recorder {
             Message msg;
             int num;
             long now, nextFrameDelay, lastFrameTime = 0;
-            short[] buf = new short[bufSize];
+            short[] buf = new short[mBufSize];
 
             try {
                 initialize();
-                running = true;
-                avoidClickHack(context);
-                audioRecord.startRecording();
-                if (isLiveMode) {
-                    audioTrack.play();
+                mRunning = true;
+                avoidClickHack(mContext);
+                mAudioRecord.startRecording();
+                if (mIsLive) {
+                    mAudioTrack.play();
                 }
-                while (running) {
+                while (mRunning) {
                     // delay reading if it's not time for the next frame
                     now = System.currentTimeMillis();
-                    nextFrameDelay = framePeriod - (now - lastFrameTime);
+                    nextFrameDelay = mFramePeriod - (now - lastFrameTime);
                     lastFrameTime = now;
                     if (nextFrameDelay > 0) {
                         try {
                             sleep(nextFrameDelay);
                         } catch (InterruptedException e) {
+                            // Do nothing
                         }
                         lastFrameTime = lastFrameTime + nextFrameDelay;
                     }
-                    num = audioRecord.read(buf, 0, frameSize);
-                    if (isLiveMode) {
+                    num = mAudioRecord.read(buf, 0, mFrameSize);
+                    if (mIsLive) {
                         processLiveAudio(buf, num);
-                        audioTrack.write(buf, 0, num);
+                        mAudioTrack.write(buf, 0, num);
                     }
-                    writer.write(buf, 0, num);
+                    mWavWriter.write(buf, 0, num);
                 }
                 msg = recorderHandler.obtainMessage(RECORDER_MESSAGE_FINISHED);
             } catch (IllegalStateException e) {
diff --git a/app/src/main/java/com/intervigil/wave/WaveReader.java b/app/src/main/java/com/intervigil/wave/WaveReader.java
index 2e76365..9a47eeb 100644
--- a/app/src/main/java/com/intervigil/wave/WaveReader.java
+++ b/app/src/main/java/com/intervigil/wave/WaveReader.java
@@ -30,6 +30,8 @@ public class WaveReader {
     private static final int WAV_FORMAT_CHUNK_ID = 0x666d7420; // "fmt "
     private static final int WAV_DATA_CHUNK_ID = 0x64617461; // "data"
 
+    private static final int WAV_HEADER_SIZE = 44;
+
     private InputStream mInputStream;
 
     private int mSampleRate;
@@ -101,7 +103,7 @@ public class WaveReader {
 
     /**
      * Get number of channels
-     *
+     *     * @return whether file creation succeeded
      * @return number of channels in input file
      */
     public int getChannels() {
@@ -118,22 +120,13 @@ public class WaveReader {
     }
 
     /**
-     * Get file size
-     *
-     * @return total input file size in bytes
-     */
-    public int getFileSize() {
-        return mFileSize + 8;
-    }
-
-    /**
-     * Get input file's audio data size
-     * Basically file size without headers included
+     * Get input file's size
+     * Basically data size with headers included
      *
      * @return audio data size in bytes
      */
-    public int getDataSize() {
-        return mDataSize;
+    public int getSize() {
+        return mDataSize + WAV_HEADER_SIZE;
     }
 
     /**
diff --git a/app/src/main/java/com/intervigil/wave/WaveWriter.java b/app/src/main/java/com/intervigil/wave/WaveWriter.java
index 042136e..76b6d8f 100644
--- a/app/src/main/java/com/intervigil/wave/WaveWriter.java
+++ b/app/src/main/java/com/intervigil/wave/WaveWriter.java
@@ -52,7 +52,6 @@ public class WaveWriter {
     /**
      * Create output WAV file
      *
-     * @return whether file creation succeeded
      * @throws IOException if file I/O error occurs allocating header
      */
     public void createWaveFile() throws IOException {
@@ -156,7 +155,7 @@ public class WaveWriter {
     private static void writeUnsignedShortLE(OutputStream stream, short sample)
             throws IOException {
         // write already writes the lower order byte of this short
-        stream.write(sample);
-        stream.write((sample >> 8));
+        stream.write(sample & 0x00ff);
+        stream.write((sample & 0xff00) >> 8);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java b/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
index 5186f2b..2c11c59 100644
--- a/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
+++ b/app/src/main/java/com/intervigil/wave/exception/InvalidWaveException.java
@@ -35,4 +35,4 @@ public class InvalidWaveException extends IOException {
     public InvalidWaveException(String msg) {
         super(msg);
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/org/openintents/intents/FileManagerIntents.java b/app/src/main/java/org/openintents/intents/FileManagerIntents.java
deleted file mode 100644
index 468288e..0000000
--- a/app/src/main/java/org/openintents/intents/FileManagerIntents.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/* 
- * Copyright (C) 2008 OpenIntents.org
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Provides OpenIntents actions, extras, and categories used by providers.
- * <p>These specifiers extend the standard Android specifiers.</p>
- */
-
-package org.openintents.intents;
-
-public class FileManagerIntents {
-    /** Activity Action: Pick a file through the file manager, or let user
-     * specify a custom file name. Data is the current file name or file name
-     * suggestion. Returns a new file name as file URI in data.
-     *
-     * <p>
-     * Constant Value: "org.openintents.action.PICK_FILE"
-     * </p>
-     */
-    public static final String ACTION_PICK_FILE = "org.openintents.action.PICK_FILE";
-
-    /**
-     * Activity Action: Pick a directory through the file manager, or let user
-     * specify a custom file name. Data is the current directory name or
-     * directory name suggestion. Returns a new directory name as file URI in
-     * data.
-     *
-     * <p>
-     * Constant Value: "org.openintents.action.PICK_DIRECTORY"
-     * </p>
-     */
-    public static final String ACTION_PICK_DIRECTORY = "org.openintents.action.PICK_DIRECTORY";
-
-    /**
-     * The title to display.
-     *
-     * <p>
-     * This is shown in the title bar of the file manager.
-     * </p>
-     *
-     * <p>
-     * Constant Value: "org.openintents.extra.TITLE"
-     * </p>
-     */
-    public static final String EXTRA_TITLE = "org.openintents.extra.TITLE";
-
-    /**
-     * The text on the button to display.
-     *
-     * <p>
-     * Depending on the use, it makes sense to set this to "Open" or "Save".
-     * </p>
-     *
-     * <p>
-     * Constant Value: "org.openintents.extra.BUTTON_TEXT"
-     * </p>
-     */
-    public static final String EXTRA_BUTTON_TEXT = "org.openintents.extra.BUTTON_TEXT";
-}
