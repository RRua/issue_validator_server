diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/DownloadManager.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/DownloadManager.kt
index fd2da9c39..15d066342 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/DownloadManager.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/DownloadManager.kt
@@ -89,7 +89,7 @@ object DownloadManager {
         val file = File(Utilities.shoDir + "/download/" + downloadItem.formatter.formatterID + "/" + downloadItem.novelName + "/" + downloadItem.chapterName + ".txt")
         Database.DatabaseChapter.removePath(downloadItem.chapterID)
         if (file.exists()) if (!file.delete()) if (context != null) {
-            Toast.makeText(context, "Failed to delete, next download will correct", Toast.LENGTH_LONG).show()
+            Toast.makeText(context, context.getString(R.string.download_fail_delete), Toast.LENGTH_LONG).show()
             return false
         }
         return true
@@ -160,9 +160,9 @@ object DownloadManager {
                 }
                 if (downloadItem != null) try {
                     run {
-                        Log.d("Dir", Utilities.shoDir + "download/")
+                        Log.d("DownloadManager", Utilities.shoDir + "download/")
                         val folder = File(Utilities.shoDir + "/download/" + downloadItem.formatter.formatterID + "/" + Utilities.cleanString(downloadItem.novelName))
-                        Log.d("Des", folder.toString())
+                        Log.d("DownloadManager", folder.toString())
                         if (!folder.exists()) if (!folder.mkdirs()) {
                             throw IOException("Failed to mkdirs")
                         }
@@ -179,7 +179,7 @@ object DownloadManager {
                             val recyclerView: RecyclerView? = activity.findViewById(R.id.fragment_novel_chapters_recycler)
                             recyclerView?.post { if (recyclerView.adapter != null) recyclerView.adapter!!.notifyDataSetChanged() }
                         }
-                        Log.d("Downloaded", "Downloaded:" + downloadItem.novelName + " " + formattedName)
+                        Log.d("DownloadManager", "Downloaded:" + downloadItem.novelName + " " + formattedName)
                     }
                     // Clean up
                     Database.DatabaseDownloads.removeDownload(downloadItem)
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/ErrorView.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/ErrorView.java
deleted file mode 100644
index 84ea968ad..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/ErrorView.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.backend;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.app.Activity;
-import android.widget.Button;
-import android.widget.TextView;
-
-import androidx.constraintlayout.widget.ConstraintLayout;
-
-/**
- * shosetsu
- * 12 / 11 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class ErrorView {
-    public final Activity activity;
-    public final ConstraintLayout errorView;
-    public final TextView errorMessage;
-    public final Button errorButton;
-
-    public ErrorView(Activity activity, ConstraintLayout errorView, TextView errorMessage, Button errorButton) {
-        this.activity = activity;
-        this.errorView = errorView;
-        this.errorMessage = errorMessage;
-        this.errorButton = errorButton;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/UpdateManager.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/UpdateManager.kt
index 886d27417..26e68ef08 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/UpdateManager.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/UpdateManager.kt
@@ -1,8 +1,7 @@
 package com.github.doomsdayrs.apps.shosetsu.backend
 
 import android.content.Context
-import android.os.AsyncTask
-import com.github.doomsdayrs.apps.shosetsu.backend.async.NewChapterUpdater
+import com.github.doomsdayrs.apps.shosetsu.backend.async.ChapterUpdater
 import needle.CancelableTask
 import needle.Needle
 import java.util.*
@@ -31,15 +30,15 @@ import java.util.*
  * @author github.com/doomsdayrs
  */
 object UpdateManager {
-    private var chapterUpdater: NewChapterUpdater? = null
+    private var chapterUpdater: ChapterUpdater? = null
     @JvmStatic
     fun init(novelCards: ArrayList<Int>, context: Context) {
         if (chapterUpdater == null) {
-            chapterUpdater = NewChapterUpdater(novelCards, context)
+            chapterUpdater = ChapterUpdater(novelCards, context)
             Needle.onBackgroundThread().execute(chapterUpdater as CancelableTask)
         } else {
             if (chapterUpdater!!.isCanceled) {
-                chapterUpdater = NewChapterUpdater(novelCards, context)
+                chapterUpdater = ChapterUpdater(novelCards, context)
                 Needle.onBackgroundThread().execute(chapterUpdater as CancelableTask)
             }
         }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.java
deleted file mode 100644
index 0dc120043..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.backend;
-
-import android.webkit.CookieManager;
-
-import androidx.annotation.NonNull;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import okhttp3.Cookie;
-import okhttp3.CookieJar;
-import okhttp3.HttpUrl;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 01 / 08 / 2019
- *
- */
-
-/**
- * Provides a synchronization point between the webview cookie store and okhttp3.OkHttpClient cookie store
- */
-public final class WebviewCookieHandler implements CookieJar {
-    private final CookieManager webviewCookieManager = CookieManager.getInstance();
-
-    @Override
-    public void saveFromResponse(@NonNull HttpUrl url, @NonNull List<Cookie> cookies) {
-        String urlString = url.toString();
-        for (Cookie cookie : cookies) {
-            webviewCookieManager.setCookie(urlString, cookie.toString());
-        }
-    }
-
-    @NonNull
-    @Override
-    public List<Cookie> loadForRequest(@NonNull HttpUrl url) {
-        String urlString = url.toString();
-        String cookiesString = webviewCookieManager.getCookie(urlString);
-
-        if (cookiesString != null && !cookiesString.isEmpty()) {
-            //We can split on the ';' char as the cookie manager only returns cookies
-            //that match the url and haven't expired, so the cookie attributes aren't included
-            String[] cookieHeaders = cookiesString.split(";");
-            List<Cookie> cookies = new ArrayList<>(cookieHeaders.length);
-
-            for (String header : cookieHeaders) {
-                Cookie c = Cookie.parse(url, header);
-                if (c != null) {
-                    cookies.add(c);
-                }
-            }
-            return cookies;
-        }
-
-        return Collections.emptyList();
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.kt
new file mode 100644
index 000000000..6c305c887
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/WebviewCookieHandler.kt
@@ -0,0 +1,59 @@
+package com.github.doomsdayrs.apps.shosetsu.backend
+
+import android.webkit.CookieManager
+import okhttp3.Cookie
+import okhttp3.CookieJar
+import okhttp3.HttpUrl
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 01 / 08 / 2019
+ *
+ */
+/**
+ * Provides a synchronization point between the webview cookie store and okhttp3.OkHttpClient cookie store
+ */
+class WebviewCookieHandler : CookieJar {
+    private val webviewCookieManager = CookieManager.getInstance()
+    override fun saveFromResponse(url: HttpUrl, cookies: List<Cookie>) {
+        val urlString = url.toString()
+        for (cookie in cookies) {
+            webviewCookieManager.setCookie(urlString, cookie.toString())
+        }
+    }
+
+    override fun loadForRequest(url: HttpUrl): List<Cookie> {
+        val urlString = url.toString()
+        val cookiesString = webviewCookieManager.getCookie(urlString)
+        if (cookiesString != null && cookiesString.isNotEmpty()) {
+            //We can split on the ';' char as the cookie manager only returns cookies
+            //that match the url and haven't expired, so the cookie attributes aren't included
+            val cookieHeaders = cookiesString.split(";".toRegex()).toTypedArray()
+            val cookies: MutableList<Cookie> = ArrayList(cookieHeaders.size)
+            for (header in cookieHeaders) {
+                val c = Cookie.parse(url, header)
+                if (c != null) {
+                    cookies.add(c)
+                }
+            }
+            return cookies
+        }
+        return emptyList()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/CatalogueLoader.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/CatalogueLoader.kt
index f5323dcb2..4c7461e97 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/CatalogueLoader.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/CatalogueLoader.kt
@@ -45,7 +45,7 @@ open class CatalogueLoader(val formatter: Formatter) {
      * @return if this was completed or not
      */
     fun execute(vararg integers: Int?): List<Novel>? {
-        Log.d("Loading", "Catalogue")
+        Log.d("CatalogueLoader", "Loading")
         if (formatter.hasCloudFlare) {
             Log.i("CatalogueLoader", "CLOUDFLARE DETECED")
             wait(5)
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterLoader.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterLoader.kt
similarity index 97%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterLoader.kt
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterLoader.kt
index df818ba5f..dcc8ae08b 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterLoader.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterLoader.kt
@@ -34,7 +34,7 @@ import org.jsoup.nodes.Document
  *
  * @author github.com/doomsdayrs
  */
-class NewChapterLoader(val action: ChapterLoaderAction, var formatter: Formatter, var novelURL: String) : AsyncTask<Void, Void, Boolean>() {
+class ChapterLoader(val action: ChapterLoaderAction, var formatter: Formatter, var novelURL: String) : AsyncTask<Void, Void, Boolean>() {
     interface ChapterLoaderAction {
         // What to do before task
         fun onPreExecute()
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterUpdater.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterUpdater.kt
similarity index 84%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterUpdater.kt
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterUpdater.kt
index 894a1aca2..7ad16d963 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/NewChapterUpdater.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/async/ChapterUpdater.kt
@@ -4,7 +4,6 @@ import android.app.Notification
 import android.app.NotificationChannel
 import android.app.NotificationManager
 import android.content.Context
-import android.os.AsyncTask
 import android.os.Build
 import android.util.Log
 import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter
@@ -16,7 +15,6 @@ import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNov
 import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
 import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard
 import needle.CancelableTask
-import needle.Needle
 
 /*
  * This file is part of Shosetsu.
@@ -43,12 +41,12 @@ import needle.Needle
  *
  * @author github.com/doomsdayrs
  */
-class NewChapterUpdater(val novelCards: ArrayList<Int>, context: Context) : CancelableTask() {
+class ChapterUpdater(val novelCards: ArrayList<Int>, val context: Context?) : CancelableTask() {
     private val ID = 1917
     private val channel_ID = "shosetsu_updater"
 
     private val continueProcesss = true
-    private var notificationManager: NotificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+    private var notificationManager: NotificationManager = context!!.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
     private var builder: Notification.Builder
     private val updatedNovels = ArrayList<NovelCard>()
 
@@ -62,11 +60,9 @@ class NewChapterUpdater(val novelCards: ArrayList<Int>, context: Context) : Canc
     }
 
 
-
-
     private fun add(mangaCount: Int, novelID: Int, novelChapter: NovelChapter, novelCard: NovelCard) {
         if (continueProcesss && Database.DatabaseChapter.isNotInChapters(novelChapter.link)) {
-            println("Adding #" + mangaCount + ": " + novelChapter.link)
+            Log.i("ChaperUpdater", "add #$mangaCount\t: ${novelChapter.link} ")
             Database.DatabaseChapter.addToChapters(novelID, novelChapter)
             Database.DatabaseUpdates.addToUpdates(novelID, novelChapter.link, System.currentTimeMillis())
             if (!updatedNovels.contains(novelCard)) updatedNovels.add(novelCard)
@@ -97,7 +93,7 @@ class NewChapterUpdater(val novelCards: ArrayList<Int>, context: Context) : Canc
             notificationManager.notify(ID, builder.build())
             // Runs process
             if (formatter != null)
-                NewChapterLoader(object : NewChapterLoader.ChapterLoaderAction {
+                ChapterLoader(object : ChapterLoader.ChapterLoaderAction {
                     override fun onPreExecute() {
                     }
 
@@ -121,11 +117,17 @@ class NewChapterUpdater(val novelCards: ArrayList<Int>, context: Context) : Canc
 
         // Completion
         val stringBuilder = StringBuilder()
-        if (updatedNovels.size > 0) {
-            builder.setContentTitle("Completed Update")
-            for (novelCard in updatedNovels) stringBuilder.append(novelCard.title).append("\n")
-            builder.style = Notification.BigTextStyle()
-        } else stringBuilder.append("No updates found")
+        when {
+            updatedNovels.size > 0 -> {
+                if (context != null)
+                    builder.setContentTitle(context.getString(R.string.update_complete))
+                else builder.setContentTitle("Completed Update")
+                for (novelCard in updatedNovels) stringBuilder.append(novelCard.title).append("\n")
+                builder.style = Notification.BigTextStyle()
+            }
+            context != null -> stringBuilder.append(context.getString(R.string.update_not_found))
+            else -> stringBuilder.append("No updates found")
+        }
         builder.setContentText(stringBuilder.toString())
         builder.setProgress(0, 0, false)
         builder.setOngoing(false)
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.kt
similarity index 69%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.kt
index 2a483883d..72acafd45 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.kt
@@ -1,8 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base;
-
-import androidx.annotation.NonNull;
-
-import java.io.Serializable;
+package com.github.doomsdayrs.apps.shosetsu.backend.database.objects
 
 /*
  * This file is part of Shosetsu.
@@ -24,18 +20,5 @@ import java.io.Serializable;
  * 27 / 07 / 2019
  *
  * @author github.com/doomsdayrs
- */public class Base implements Serializable {
-    public final String NOVEL_URL;
-
-    Base(String novel_url) {
-        NOVEL_URL = novel_url;
-    }
-
-    @NonNull
-    @Override
-    public String toString() {
-        return "Base{" +
-                "NOVEL_URL='" + NOVEL_URL + '\'' +
-                '}';
-    }
-}
+ */
+class Update(val chapterID: Int, val novelID: Int, val date: Long)
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.kt
similarity index 76%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.kt
index a62fa566e..c18dd57e6 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/Update.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/Base.kt
@@ -1,4 +1,6 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.database.objects;
+package com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base
+
+import java.io.Serializable
 
 /*
  * This file is part of Shosetsu.
@@ -21,14 +23,11 @@ package com.github.doomsdayrs.apps.shosetsu.backend.database.objects;
  *
  * @author github.com/doomsdayrs
  */
-public class Update {
-    public final int chapterID;
-    public final int novelID;
-    public final long date;
-
-    public Update(int chapterID, int novelID, long date) {
-        this.chapterID = chapterID;
-        this.novelID = novelID;
-        this.date = date;
+open class Base internal constructor(val NOVEL_URL: String) : Serializable {
+    override fun toString(): String {
+        return "Base{" +
+                "NOVEL_URL='" + NOVEL_URL + '\'' +
+                '}'
     }
-}
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.kt
similarity index 74%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.kt
index e8bee712a..b8d69f6e8 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/database/objects/base/BaseChapter.kt
@@ -1,6 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base;
-
-import androidx.annotation.NonNull;
+package com.github.doomsdayrs.apps.shosetsu.backend.database.objects.base
 
 /*
  * This file is part of Shosetsu.
@@ -22,20 +20,13 @@ import androidx.annotation.NonNull;
  * 27 / 07 / 2019
  *
  * @author github.com/doomsdayrs
- */public class BaseChapter extends Base {
-    public final String CHAPTER_URL;
-
-    protected BaseChapter(String novel_url, String chapter_url) {
-        super(novel_url);
-        CHAPTER_URL = chapter_url;
-    }
-
-    @NonNull
-    @Override
-    public String toString() {
+ */
+class BaseChapter protected constructor(novel_url: String, val CHAPTER_URL: String) : Base(novel_url) {
+    override fun toString(): String {
         return "BaseChapter{" +
                 "CHAPTER_URL='" + CHAPTER_URL + '\'' +
                 ", NOVEL_URL='" + NOVEL_URL + '\'' +
-                '}';
+                '}'
     }
-}
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.java
deleted file mode 100644
index 1d17f4b5d..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.scraper;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.os.AsyncTask;
-import android.util.Log;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.zhkrb.cloudflare_scrape_android.Cloudflare;
-
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-
-import java.io.IOException;
-import java.net.HttpCookie;
-import java.util.List;
-import java.util.concurrent.ExecutionException;
-
-
-/**
- * shosetsu
- * 09 / 11 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class WebViewScrapper {
-
-    private static String ua;
-    // --Commented out by Inspection (12/22/19 11:10 AM):String html;
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-//    // private final WebView webView;
-//    //private Activity activity;
-//    public boolean completed = false;
-// --Commented out by Inspection STOP (12/22/19 11:10 AM)
-
-    private WebViewScrapper() {
-    }
-
-    public static void setUa(String ua) {
-        WebViewScrapper.ua = ua;
-    }
-    //private boolean working = false;
-
-    /*
-     * Constructor
-     *
-     * @param webView  Webview to use
-     * @param activity How to handle Scraping
-     */
-            /*
-
-    @SuppressLint("SetJavaScriptEnabled")
-    public WebViewScrapper(WebView webView, Activity activity) {
-        this.webView = webView;
-        this.activity = activity;
-        webView.getSettings().setJavaScriptEnabled(true);
-        // webView.addJavascriptInterface(this, "HTMLOUT");
-        webView.setWebViewClient(new WebViewScrapperClient(this));
-    }
-
-    // @JavascriptInterface
-    // public void processHTML(String html) {
-    //     Log.i("ProcessingHTML", "of latestURL");
-    //     this.html = html;
-    // }
-*/
-
-    /**
-     * Put this in an async task, or you will have a bad time
-     *
-     * @param url URL to retrieve;
-     * @return Document of the URL
-     */
-    @Nullable
-    public static Document docFromURL(@Nullable String url, boolean cloudflare) {
-        if (url != null) {
-            Log.i("URL load", url);
-            try {
-                if (cloudflare) {
-                    Cloudflare cf = new Cloudflare(url);
-                    cf.setUser_agent(ua);
-                    return Jsoup.connect(url).cookies(Cloudflare.List2Map(new GetCookies().execute(cf).get())).get();
-                } else {
-                    return Jsoup.connect(url).get();
-                }
-            } catch (@NonNull IOException | InterruptedException | ExecutionException e) {
-                e.printStackTrace();
-            }
-        }
-        return null;
-    }
-
-    static class GetCookies extends AsyncTask<Cloudflare, Void, List<HttpCookie>> {
-        @Nullable
-        List<HttpCookie> cookies = null;
-        int status = 0;
-
-        @Nullable
-        @Override
-        protected List<HttpCookie> doInBackground(Cloudflare... cf) {
-            cf[0].getCookies(new Cloudflare.cfCallback() {
-
-                @Override
-                public void onSuccess(List<HttpCookie> cookieList, boolean hasNewUrl, String newUrl) {
-                    cookies = cookieList;
-                    status = 1;
-                }
-
-                @Override
-                public void onFail() {
-                    status = -1;
-                }
-            });
-            int a = 0;
-            while (status == 0) {
-                a++;
-            }
-            return cookies;
-        }
-    }
-/*
-    private void clear() {
-        activity.runOnUiThread(() -> webView.loadUrl("about:blank"));
-    }
-*/
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.kt
new file mode 100644
index 000000000..73257864d
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapper.kt
@@ -0,0 +1,118 @@
+package com.github.doomsdayrs.apps.shosetsu.backend.scraper
+
+import android.os.AsyncTask
+import android.util.Log
+import com.zhkrb.cloudflare_scrape_android.Cloudflare
+import com.zhkrb.cloudflare_scrape_android.Cloudflare.cfCallback
+import org.jsoup.Jsoup
+import org.jsoup.nodes.Document
+import java.io.IOException
+import java.net.HttpCookie
+import java.util.concurrent.ExecutionException
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 09 / 11 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+object WebViewScrapper {
+    private var ua: String? = null
+    fun setUa(ua: String?) {
+        WebViewScrapper.ua = ua
+    }
+    //private boolean working = false;
+/*
+     * Constructor
+     *
+     * @param webView  Webview to use
+     * @param activity How to handle Scraping
+     */
+/*
+
+    @SuppressLint("SetJavaScriptEnabled")
+    public WebViewScrapper(WebView webView, Activity activity) {
+        this.webView = webView;
+        this.activity = activity;
+        webView.getSettings().setJavaScriptEnabled(true);
+        // webView.addJavascriptInterface(this, "HTMLOUT");
+        webView.setWebViewClient(new WebViewScrapperClient(this));
+    }
+
+    // @JavascriptInterface
+    // public void processHTML(String html) {
+    //     Log.i("ProcessingHTML", "of latestURL");
+    //     this.html = html;
+    // }
+*/
+    /**
+     * Put this in an async task, or you will have a bad time
+     *
+     * @param url URL to retrieve;
+     * @return Document of the URL
+     */
+    @JvmStatic
+    fun docFromURL(url: String?, cloudflare: Boolean): Document? {
+        if (url != null) {
+            Log.i("URL load", url)
+            try {
+                return if (cloudflare) {
+                    val cf = Cloudflare(url)
+                    cf.user_agent = ua
+                    Jsoup.connect(url).cookies(Cloudflare.List2Map(GetCookies().execute(cf).get())).get()
+                } else {
+                    Jsoup.connect(url).get()
+                }
+            } catch (e: IOException) {
+                e.printStackTrace()
+            } catch (e: InterruptedException) {
+                e.printStackTrace()
+            } catch (e: ExecutionException) {
+                e.printStackTrace()
+            }
+        }
+        return null
+    }
+
+    internal class GetCookies : AsyncTask<Cloudflare?, Void?, List<HttpCookie>?>() {
+        var cookies: List<HttpCookie>? = null
+        var status = 0
+        override fun doInBackground(vararg cf: Cloudflare?): List<HttpCookie>? {
+            cf[0]?.getCookies(object : cfCallback {
+                override fun onSuccess(cookieList: List<HttpCookie>, hasNewUrl: Boolean, newUrl: String) {
+                    cookies = cookieList
+                    status = 1
+                }
+
+                override fun onFail() {
+                    status = -1
+                }
+            })
+            var a = 0
+            while (status == 0) {
+                a++
+            }
+            return cookies
+        }
+    } /*
+    private void clear() {
+        activity.runOnUiThread(() -> webView.loadUrl("about:blank"));
+    }
+*/
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.kt
similarity index 60%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.kt
index b2a721ca8..7606e6d84 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/scraper/WebViewScrapperClient.kt
@@ -1,4 +1,10 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.scraper;
+package com.github.doomsdayrs.apps.shosetsu.backend.scraper
+
+import android.util.Log
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import java.util.concurrent.TimeUnit
+
 /*
  * This file is part of shosetsu.
  *
@@ -15,53 +21,33 @@ package com.github.doomsdayrs.apps.shosetsu.backend.scraper;
  * You should have received a copy of the GNU General Public License
  * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
  * ====================================================================
- */
-
-import android.util.Log;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-import androidx.annotation.NonNull;
-
-import java.util.concurrent.TimeUnit;
-
-/**
+ */ /**
  * shosetsu
  * 10 / 11 / 2019
  *
  * @author github.com/doomsdayrs
  */
-class WebViewScrapperClient extends WebViewClient {
+internal class WebViewScrapperClient : WebViewClient() {
     //  private final WebViewScrapper webViewScrapper;
-
 // --Commented out by Inspection START (12/22/19 11:10 AM):
 //    WebViewScrapperClient(WebViewScrapper webViewScrapper) {
 //        this.webViewScrapper = webViewScrapper;
 //    }
 // --Commented out by Inspection STOP (12/22/19 11:10 AM)
-
-    @Override
-    public boolean shouldOverrideUrlLoading(@NonNull WebView view, String url) {
-        view.loadUrl(url);
-        return false;
+    override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
+        view.loadUrl(url)
+        return false
     }
 
-    public void onPageFinished(@NonNull WebView view, String url) {
+    override fun onPageFinished(view: WebView, url: String) {
         try {
-            TimeUnit.SECONDS.sleep(1);
-        } catch (InterruptedException e) {
-            e.printStackTrace();
+            TimeUnit.SECONDS.sleep(1)
+        } catch (e: InterruptedException) {
+            e.printStackTrace()
         }
-
-
         view.evaluateJavascript(
-                "(function() { return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>'); })();",
-                html -> {
-                    Log.d("HTML", html);
-                    //         webViewScrapper.html = html;
-                    //      webViewScrapper.completed = true;
-                });
+                "(function() { return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>'); })();"
+        ) { html: String? -> Log.d("HTML", html) }
         // view.loadUrl("javascript:window.HTMLOUT.processHTML('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');");
-
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.kt
similarity index 79%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.kt
index dd7f9c7cf..e2924418b 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Anilist.kt
@@ -1,4 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.tracking;
+package com.github.doomsdayrs.apps.shosetsu.backend.tracking
 
 /*
  * This file is part of Shosetsu.
@@ -22,12 +22,6 @@ package com.github.doomsdayrs.apps.shosetsu.backend.tracking;
  * @author github.com/doomsdayrs
  */
 //TODO add this shit
-
-@SuppressWarnings({"EmptyMethod", "unused"})
-class Anilist {
-
-    @SuppressWarnings("EmptyMethod")
-    void auth(String username, String password) {
-
-    }
-}
+internal class Anilist {
+    fun auth(username: String?, password: String?) {}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.kt
similarity index 53%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.kt
index 09eaeed9c..d4f4d0b80 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/backend/tracking/Trackers.kt
@@ -1,10 +1,7 @@
-package com.github.doomsdayrs.apps.shosetsu.backend.tracking;
+package com.github.doomsdayrs.apps.shosetsu.backend.tracking
 
-import android.content.res.Resources;
-
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
+import android.content.res.Resources
+import com.github.doomsdayrs.apps.shosetsu.R
 
 /*
  * This file is part of Shosetsu.
@@ -27,33 +24,21 @@ import com.github.doomsdayrs.apps.shosetsu.R;
  *
  * @author github.com/doomsdayrs
  */
-@SuppressWarnings("unused")
-public enum Trackers {
-    ANILIST(getString(R.string.anilist), 1),
-    MYANIMELIST(getString(R.string.myanimelist), 2);
-    private final String name;
-    private final int id;
+enum class Trackers(private val internalName: String, val id: Int) {
+    ANILIST(com.github.doomsdayrs.apps.shosetsu.backend.tracking.Trackers.Companion.getString(R.string.anilist), 1),
+    MYANIMELIST(com.github.doomsdayrs.apps.shosetsu.backend.tracking.Trackers.Companion.getString(R.string.myanimelist), 2);
 
-    Trackers(String name, int id) {
-        this.name = name;
-        this.id = id;
-    }
-
-    @NonNull
-    private static String getString(int id) {
-        return Resources.getSystem().getString(id);
+    override fun toString(): String {
+        return "Trackers{" +
+                "name='" + internalName + '\'' +
+                ", id=" + id +
+                '}'
     }
 
-    public int getId() {
-        return id;
+    companion object {
+        private fun getString(id: Int): String {
+            return Resources.getSystem().getString(id)
+        }
     }
 
-    @NonNull
-    @Override
-    public String toString() {
-        return "Trackers{" +
-                "name='" + name + '\'' +
-                ", id=" + id +
-                '}';
-    }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.java
deleted file mode 100644
index 720cd8795..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.java
+++ /dev/null
@@ -1,224 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.SearchView;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.GridLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.WebviewCookieHandler;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters.CatalogueAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueHitBottom;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueRefresh;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueSearchQuery;
-import com.github.doomsdayrs.apps.shosetsu.ui.webView.WebViewApp;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard;
-
-import java.util.ArrayList;
-import java.util.Objects;
-
-import okhttp3.OkHttpClient;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.calculateNoOfColumns;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setActivityTitle;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-//TODO fix issue with not loading
-public class CatalogueFragment extends Fragment {
-    @NonNull
-    public ArrayList<CatalogueNovelCard> catalogueNovelCards = new ArrayList<>();
-    @NonNull
-    public Formatter formatter;
-    public SwipeRefreshLayout swipeRefreshLayout;
-    public RecyclerView library_view;
-    public int currentMaxPage = 1;
-    public boolean isInSearch = false;
-    private Context context;
-
-    @Nullable
-    public CatalogueAdapter catalogueAdapter;
-    public ProgressBar bottomProgressBar;
-
-    private boolean dontRefresh = false;
-    public boolean isQuery = false;
-
-    public ConstraintLayout errorView;
-    public TextView empty;
-
-    /**
-     * Constructor
-     */
-    public CatalogueFragment() {
-        setHasOptionsMenu(true);
-    }
-
-
-    public void setFormatter(@org.jetbrains.annotations.Nullable Formatter formatter) {
-        this.formatter = formatter;
-    }
-
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState) {
-        super.onSaveInstanceState(outState);
-        outState.putSerializable("list", catalogueNovelCards);
-        if (formatter != null)
-            outState.putInt("formatter", formatter.getFormatterID());
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        Log.d("Resume", "HERE");
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        Log.d("Pause", "HERE");
-        dontRefresh = true;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        dontRefresh = false;
-    }
-
-    /**
-     * Creates view
-     *
-     * @param inflater           inflates layouts and shiz
-     * @param container          container of this fragment
-     * @param savedInstanceState save file
-     * @return View
-     */
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        Log.d("OnCreateView", "CatalogueFragment");
-        View view = inflater.inflate(R.layout.fragment_catalogue, container, false);
-        {
-            library_view = view.findViewById(R.id.fragment_catalogue_recycler);
-            swipeRefreshLayout = view.findViewById(R.id.fragment_catalogue_refresh);
-            bottomProgressBar = view.findViewById(R.id.fragment_catalogue_progress_bottom);
-            errorView = view.findViewById(R.id.network_error);
-            TextView errorMessage = view.findViewById(R.id.error_message);
-            Button errorButton = view.findViewById(R.id.error_button);
-            empty = view.findViewById(R.id.fragment_catalogue_empty);
-        }
-
-        if (savedInstanceState != null) {
-            catalogueNovelCards = (ArrayList<CatalogueNovelCard>) savedInstanceState.getSerializable("list");
-            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"));
-        }
-        setActivityTitle(getActivity(), formatter.getName());
-        swipeRefreshLayout.setOnRefreshListener(new CatalogueRefresh(this));
-        this.context = Objects.requireNonNull(container).getContext();
-
-
-        if (savedInstanceState == null && !dontRefresh) {
-            Log.d("Process", "Loading up latest");
-            setLibraryCards(catalogueNovelCards);
-            if (catalogueNovelCards.size() > 0 && catalogueAdapter != null) {
-                catalogueNovelCards = new ArrayList<>();
-                catalogueAdapter.notifyDataSetChanged();
-            }
-            if (!formatter.getHasCloudFlare())
-                new CataloguePageLoader(this).execute();
-            else webView();
-        } else
-            setLibraryCards(catalogueNovelCards);
-
-        return view;
-    }
-
-    private void webView() {
-        Intent intent = new Intent(getActivity(), WebViewApp.class);
-        intent.putExtra("url", formatter.getLatestURL(0));
-        intent.putExtra("action", 1);
-        startActivityForResult(intent, 42);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
-        if (requestCode == 42) {
-            //TODO, Pass cookies from webview to okhttp
-            OkHttpClient client = new OkHttpClient.Builder()
-                    .cookieJar(new WebviewCookieHandler())
-                    .build();
-            formatter.setClient(client);
-            new CataloguePageLoader(this).execute();
-        }
-    }
-
-    @Override
-    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        menu.clear();
-        inflater.inflate(R.menu.toolbar_library, menu);
-        SearchView searchView = (SearchView) menu.findItem(R.id.library_search).getActionView();
-        searchView.setOnQueryTextListener(new CatalogueSearchQuery(this));
-        searchView.setOnCloseListener(() -> {
-            isQuery = false;
-            isInSearch = false;
-            setLibraryCards(catalogueNovelCards);
-            return true;
-        });
-    }
-
-
-    public void setLibraryCards(ArrayList<CatalogueNovelCard> recycleCards) {
-        if (library_view != null) {
-            library_view.setHasFixedSize(false);
-            RecyclerView.LayoutManager library_layoutManager;
-
-            if (getContext() != null) {
-                library_layoutManager = new GridLayoutManager(context, calculateNoOfColumns(getContext(), 200), RecyclerView.VERTICAL, false);
-                catalogueAdapter = new CatalogueAdapter(recycleCards, this, formatter);
-                library_view.setLayoutManager(library_layoutManager);
-                library_view.addOnScrollListener(new CatalogueHitBottom(this));
-                library_view.setAdapter(catalogueAdapter);
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.kt
new file mode 100644
index 000000000..faa31380d
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CatalogueFragment.kt
@@ -0,0 +1,162 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue
+
+import android.content.Intent
+import android.os.Bundle
+import android.util.Log
+import android.view.*
+import android.widget.SearchView
+import android.widget.TextView
+import androidx.fragment.app.Fragment
+import androidx.recyclerview.widget.GridLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.WebviewCookieHandler
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters.CatalogueAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueHitBottom
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueRefresh
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueSearchQuery
+import com.github.doomsdayrs.apps.shosetsu.ui.webView.WebViewApp
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard
+import kotlinx.android.synthetic.main.fragment_catalogue.*
+import okhttp3.OkHttpClient
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+//TODO fix issue with not loading
+class CatalogueFragment : Fragment() {
+    var catalogueNovelCards = ArrayList<CatalogueNovelCard>()
+    lateinit var formatter: Formatter
+    lateinit var catalogueAdapter: CatalogueAdapter
+
+    var currentMaxPage = 1
+    var isInSearch = false
+    private var dontRefresh = false
+    var isQuery = false
+    var empty: TextView? = null
+
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        super.onSaveInstanceState(outState)
+        outState.putSerializable("list", catalogueNovelCards)
+        outState.putInt("formatter", formatter.formatterID)
+    }
+
+    override fun onResume() {
+        super.onResume()
+        Log.d("Resume", "HERE")
+    }
+
+    override fun onPause() {
+        super.onPause()
+        Log.d("Pause", "HERE")
+        dontRefresh = true
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        dontRefresh = false
+    }
+
+    /**
+     * Creates view
+     *
+     * @param inflater           inflates layouts and shiz
+     * @param container          container of this fragment
+     * @param savedInstanceState save file
+     * @return View
+     */
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        Log.d("OnCreateView", "CatalogueFragment")
+        return inflater.inflate(R.layout.fragment_catalogue, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        if (savedInstanceState != null) {
+            catalogueNovelCards = (savedInstanceState.getSerializable("list") as ArrayList<CatalogueNovelCard>)
+            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))!!
+        }
+        Utilities.setActivityTitle(activity, formatter.name)
+        swipeRefreshLayout!!.setOnRefreshListener(CatalogueRefresh(this))
+        if (savedInstanceState == null && !dontRefresh) {
+            Log.d("Process", "Loading up latest")
+            setLibraryCards(catalogueNovelCards)
+            if (catalogueNovelCards.size > 0) {
+                catalogueNovelCards = ArrayList()
+                catalogueAdapter.notifyDataSetChanged()
+            }
+            if (!formatter.hasCloudFlare) CataloguePageLoader(this).execute() else webView()
+        } else setLibraryCards(catalogueNovelCards)
+    }
+
+    private fun webView() {
+        val intent = Intent(activity, WebViewApp::class.java)
+        intent.putExtra("url", formatter.getLatestURL(0))
+        intent.putExtra("action", 1)
+        startActivityForResult(intent, 42)
+    }
+
+    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
+        if (requestCode == 42) { //TODO, Pass cookies from webview to okhttp
+            val client = OkHttpClient.Builder()
+                    .cookieJar(WebviewCookieHandler())
+                    .build()
+            formatter.client = client
+            CataloguePageLoader(this).execute()
+        }
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
+        menu.clear()
+        inflater.inflate(R.menu.toolbar_library, menu)
+        val searchView = menu.findItem(R.id.library_search).actionView as SearchView
+        searchView.setOnQueryTextListener(CatalogueSearchQuery(this))
+        searchView.setOnCloseListener {
+            isQuery = false
+            isInSearch = false
+            setLibraryCards(catalogueNovelCards)
+            true
+        }
+    }
+
+    fun setLibraryCards(recycleCards: ArrayList<CatalogueNovelCard>) {
+        recyclerView!!.setHasFixedSize(false)
+        val layoutManager: RecyclerView.LayoutManager
+        layoutManager = GridLayoutManager(context, Utilities.calculateNoOfColumns(context!!, 200f), RecyclerView.VERTICAL, false)
+        catalogueAdapter = CatalogueAdapter(recycleCards, this, formatter)
+        recyclerView!!.layoutManager = layoutManager
+        recyclerView!!.addOnScrollListener(CatalogueHitBottom(this))
+        recyclerView!!.adapter = catalogueAdapter
+    }
+
+    /**
+     * Constructor
+     */
+    init {
+        setHasOptionsMenu(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.java
deleted file mode 100644
index 7c0d66566..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue;
-
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.SearchView;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.fragment.app.FragmentManager;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters.CataloguesAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CataloguesSearchQuery;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.ArrayList;
-import java.util.Objects;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setActivityTitle;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-/**
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-//TODO Searching mechanics here
-public class CataloguesFragment extends Fragment {
-    @Nullable
-    private ArrayList<CatalogueCard> cards = null;
-
-    /**
-     * Constructor
-     */
-    public CataloguesFragment() {
-        setHasOptionsMenu(true);
-    }
-
-    @Override
-    public void onCreateOptionsMenu(@NotNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.toolbar_catalogues, menu);
-        SearchView searchView = (SearchView) menu.findItem(R.id.catalogues_search).getActionView();
-        searchView.setOnQueryTextListener(new CataloguesSearchQuery(getActivity()));
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.catalogues_search:
-            case R.id.configure_parsers:
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    /**
-     * Creates view
-     *
-     * @param inflater           inflates layouts and shiz
-     * @param container          container of this fragment
-     * @param savedInstanceState save file
-     * @return View
-     */
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        Log.d("OnCreateView", "CataloguesFragment");
-        setActivityTitle(getActivity(), "Catalogues");
-        //TODO Conditional for turning formatter on and off
-        // > Conditional for languages
-        // > Conditional for categories, maybe
-        if (cards == null) {
-            cards = DefaultScrapers.getAsCatalogue();
-        }
-        FragmentManager fragmentManager = getFragmentManager();
-
-        View view = inflater.inflate(R.layout.fragment_catalogues, container, false);
-        RecyclerView recyclerView = view.findViewById(R.id.catalogues_recycler);
-
-        if (recyclerView != null) {
-            recyclerView.setHasFixedSize(true);
-            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(Objects.requireNonNull(container).getContext());
-            CataloguesAdapter adapter = new CataloguesAdapter(cards, fragmentManager);
-            recyclerView.setLayoutManager(layoutManager);
-            recyclerView.setAdapter(adapter);
-        }
-        return view;
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.kt
new file mode 100644
index 000000000..1f368099f
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/CataloguesFragment.kt
@@ -0,0 +1,92 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue
+
+import android.os.Bundle
+import android.util.Log
+import android.view.*
+import android.widget.SearchView
+import androidx.fragment.app.Fragment
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters.CataloguesAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CataloguesSearchQuery
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.asCatalogue
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard
+import kotlinx.android.synthetic.main.fragment_catalogues.*
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+/**
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+//TODO Searching mechanics here
+class CataloguesFragment : Fragment() {
+    private lateinit var cards: ArrayList<CatalogueCard>
+
+    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
+        inflater.inflate(R.menu.toolbar_catalogues, menu)
+        val searchView = menu.findItem(R.id.catalogues_search).actionView as SearchView
+        searchView.setOnQueryTextListener(CataloguesSearchQuery(activity))
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        return when (item.itemId) {
+            R.id.catalogues_search, R.id.configure_parsers -> true
+            else -> false
+        }
+    }
+
+    /**
+     * Creates view
+     *
+     * @param inflater           inflates layouts and shiz
+     * @param container          container of this fragment
+     * @param savedInstanceState save file
+     * @return View
+     */
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        Log.d("OnCreateView", "CataloguesFragment")
+        Utilities.setActivityTitle(activity, "Catalogues")
+        return inflater.inflate(R.layout.fragment_catalogues, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        //TODO Conditional for turning formatter on and off
+        // > Conditional for languages
+        // > Conditional for categories, maybe
+        cards = asCatalogue
+        recyclerView.setHasFixedSize(true)
+        val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(context)
+        val adapter = CataloguesAdapter(cards, fragmentManager!!)
+        recyclerView.layoutManager = layoutManager
+        recyclerView.adapter = adapter
+    }
+
+    /**
+     * Constructor
+     */
+    init {
+        setHasOptionsMenu(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.java
deleted file mode 100644
index 9fafde06b..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters;
-
-import android.graphics.drawable.ColorDrawable;
-import android.os.Build;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.core.content.ContextCompat;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder.NovelCardViewHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard;
-import com.squareup.picasso.Picasso;
-
-import java.util.List;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CatalogueAdapter extends RecyclerView.Adapter<NovelCardViewHolder> {
-    private final List<CatalogueNovelCard> recycleCards;
-    private final CatalogueFragment catalogueFragment;
-    private final Formatter formatter;
-
-    public CatalogueAdapter(List<CatalogueNovelCard> recycleCards, CatalogueFragment catalogueFragment, Formatter formatter) {
-        this.recycleCards = recycleCards;
-        this.catalogueFragment = catalogueFragment;
-        this.formatter = formatter;
-    }
-
-    @NonNull
-    @Override
-    public NovelCardViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.recycler_novel_card, viewGroup, false);
-        NovelCardViewHolder novelCardsViewHolder = new NovelCardViewHolder(view);
-        novelCardsViewHolder.catalogueFragment = catalogueFragment;
-        novelCardsViewHolder.formatter = formatter;
-        return novelCardsViewHolder;
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull NovelCardViewHolder novelCardsViewHolder, int i) {
-        CatalogueNovelCard recycleCard = recycleCards.get(i);
-        if (recycleCard != null) {
-            novelCardsViewHolder.novelID = recycleCard.novelID;
-            novelCardsViewHolder.url = recycleCard.novelURL;
-            novelCardsViewHolder.library_card_title.setText(recycleCard.title);
-            if (!recycleCard.imageURL.isEmpty()) {
-                Picasso.get().load(recycleCard.imageURL).into(novelCardsViewHolder.library_card_image);
-            } else novelCardsViewHolder.library_card_image.setVisibility(View.GONE);
-
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                if (Database.DatabaseNovels.isBookmarked(recycleCard.novelID)) {
-                    if (catalogueFragment.getContext() != null)
-                        novelCardsViewHolder.constraintLayout.setForeground(new ColorDrawable(ContextCompat.getColor(catalogueFragment.getContext(), R.color.shade)));
-                } else novelCardsViewHolder.constraintLayout.setForeground(new ColorDrawable());
-            } else {
-                //TODO Tint for cards before 22
-            }
-
-            switch (Settings.themeMode) {
-                case 0:
-                    novelCardsViewHolder.library_card_title.setBackgroundResource(R.color.white_trans);
-                    break;
-                case 1:
-                case 2:
-                    novelCardsViewHolder.library_card_title.setBackgroundResource(R.color.black_trans);
-                    break;
-            }
-        }
-    }
-
-    @Override
-    public int getItemCount() {
-        return recycleCards.size();
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.kt
new file mode 100644
index 000000000..038d10bcb
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CatalogueAdapter.kt
@@ -0,0 +1,75 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters
+
+import android.graphics.drawable.ColorDrawable
+import android.os.Build
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.core.content.ContextCompat
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder.NovelCardViewHolder
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard
+import com.squareup.picasso.Picasso
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueAdapter(private val recycleCards: List<CatalogueNovelCard?>?, private val catalogueFragment: CatalogueFragment, private val formatter: Formatter) : RecyclerView.Adapter<NovelCardViewHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): NovelCardViewHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.recycler_novel_card, viewGroup, false)
+        val novelCardsViewHolder = NovelCardViewHolder(view)
+        novelCardsViewHolder.catalogueFragment = catalogueFragment
+        novelCardsViewHolder.formatter = formatter
+        return novelCardsViewHolder
+    }
+
+    override fun onBindViewHolder(novelCardsViewHolder: NovelCardViewHolder, i: Int) {
+        val recycleCard = recycleCards!![i]
+        if (recycleCard != null) {
+            novelCardsViewHolder.novelID = recycleCard.novelID
+            novelCardsViewHolder.url = recycleCard.novelURL
+            novelCardsViewHolder.title.text = recycleCard.title
+            if (!recycleCard.imageURL.isEmpty()) {
+                Picasso.get().load(recycleCard.imageURL).into(novelCardsViewHolder.imageView)
+            } else novelCardsViewHolder.imageView.visibility = View.GONE
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                if (Database.DatabaseNovels.isBookmarked(recycleCard.novelID)) {
+                    if (catalogueFragment.context != null) novelCardsViewHolder.constraintLayout.foreground = ColorDrawable(ContextCompat.getColor(catalogueFragment.context!!, R.color.shade))
+                } else novelCardsViewHolder.constraintLayout.foreground = ColorDrawable()
+            } else { //TODO Tint for cards before 22
+            }
+            when (Settings.themeMode) {
+                0 -> novelCardsViewHolder.title.setBackgroundResource(R.color.white_trans)
+                1, 2 -> novelCardsViewHolder.title.setBackgroundResource(R.color.black_trans)
+            }
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return recycleCards!!.size
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.java
deleted file mode 100644
index dffee68cc..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.FragmentManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder.CatalogueHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard;
-import com.squareup.picasso.Picasso;
-
-import java.util.ArrayList;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CataloguesAdapter extends RecyclerView.Adapter<CatalogueHolder> {
-    private final ArrayList<CatalogueCard> catalogues;
-    private final FragmentManager fragmentManager;
-
-    public CataloguesAdapter(ArrayList<CatalogueCard> catalogues, FragmentManager fragmentManager) {
-        this.catalogues = catalogues;
-        this.fragmentManager = fragmentManager;
-    }
-
-
-    @NonNull
-    @Override
-    public CatalogueHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.catalogue_item_card, viewGroup, false);
-        return new CatalogueHolder(view, fragmentManager);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull CatalogueHolder catalogueHolder, int i) {
-
-        CatalogueCard catalogueCard = catalogues.get(i);
-        catalogueHolder.setFormatter(catalogueCard.formatter);
-
-        catalogueCard.formatter.getImageURL();
-        if (!catalogueCard.formatter.getImageURL().isEmpty())
-            Picasso.get()
-                    .load(catalogueCard.formatter.getImageURL())
-                    .into(catalogueHolder.library_card_image);
-        else
-            catalogueHolder.library_card_image.setImageResource(catalogueCard.libraryImageResource);
-        catalogueHolder.library_card_title.setText(catalogueCard.title);
-    }
-
-    @Override
-    public int getItemCount() {
-        return catalogues.size();
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.kt
new file mode 100644
index 000000000..d389b4ea1
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/adapters/CataloguesAdapter.kt
@@ -0,0 +1,54 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.adapters
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.fragment.app.FragmentManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder.CatalogueHolder
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard
+import com.squareup.picasso.Picasso
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CataloguesAdapter(private val catalogues: ArrayList<CatalogueCard>, private val fragmentManager: FragmentManager) : RecyclerView.Adapter<CatalogueHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): CatalogueHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.catalogue_item_card, viewGroup, false)
+        return CatalogueHolder(view, fragmentManager)
+    }
+
+    override fun onBindViewHolder(catalogueHolder: CatalogueHolder, i: Int) {
+        val catalogueCard = catalogues[i]
+        catalogueHolder.formatter = (catalogueCard.formatter)
+        catalogueCard.formatter.imageURL
+        if (!catalogueCard.formatter.imageURL.isEmpty()) Picasso.get()
+                .load(catalogueCard.formatter.imageURL)
+                .into(catalogueHolder.imageView) else catalogueHolder.imageView.setImageResource(catalogueCard.libraryImageResource)
+        catalogueHolder.title.text = catalogueCard.title
+    }
+
+    override fun getItemCount(): Int {
+        return catalogues.size
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CataloguePageLoader.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CataloguePageLoader.kt
index b50dcb3c2..dac0a79bb 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CataloguePageLoader.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CataloguePageLoader.kt
@@ -10,6 +10,8 @@ import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
 import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
 import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners.CatalogueHitBottom
 import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard
+import kotlinx.android.synthetic.main.fragment_catalogue.*
+import kotlinx.android.synthetic.main.network_error.*
 
 /*
  * This file is part of Shosetsu.
@@ -70,17 +72,17 @@ class CataloguePageLoader : AsyncTask<Int, Void, Boolean> {
      */
     override fun doInBackground(vararg integers: Int?): Boolean {
         Log.d("Loading", "Catalogue")
-        catalogueFragment.library_view.post { catalogueFragment.errorView.visibility = View.GONE }
+        catalogueFragment.recyclerView?.post { catalogueFragment.network_error?.visibility = View.GONE }
         if (catalogueFragment.formatter.hasCloudFlare) {
             if (catalogueFragment.activity != null) catalogueFragment.activity!!.runOnUiThread { Toast.makeText(catalogueFragment.context, "CLOUDFLARE", Toast.LENGTH_SHORT).show() }
         }
         val novels: List<Novel> = if (integers.isNotEmpty()) check(CatalogueLoader(catalogueFragment.formatter).execute(integers[0])) else check(CatalogueLoader(catalogueFragment.formatter).execute())
         for (novel in novels) catalogueFragment.catalogueNovelCards.add(CatalogueNovelCard(novel.imageURL, novel.title, Database.DatabaseIdentification.getNovelIDFromNovelURL(novel.link), novel.link))
-        catalogueFragment.library_view.post { catalogueFragment.catalogueAdapter!!.notifyDataSetChanged() }
+        catalogueFragment.recyclerView?.post { catalogueFragment.catalogueAdapter!!.notifyDataSetChanged() }
         if (catalogueHitBottom != null) {
-            catalogueFragment.library_view.post {
+            catalogueFragment.recyclerView?.post {
                 catalogueFragment.catalogueAdapter!!.notifyDataSetChanged()
-                catalogueFragment.library_view.addOnScrollListener(catalogueHitBottom)
+                catalogueFragment.recyclerView!!.addOnScrollListener(catalogueHitBottom)
             }
             catalogueHitBottom.running = false
             Log.d("CatalogueFragmentLoad", "Completed")
@@ -88,7 +90,7 @@ class CataloguePageLoader : AsyncTask<Int, Void, Boolean> {
         Log.d("FragmentRefresh", "Complete")
         if (catalogueFragment.activity != null) catalogueFragment.activity!!.runOnUiThread {
             catalogueFragment.catalogueAdapter!!.notifyDataSetChanged()
-            catalogueFragment.swipeRefreshLayout.isRefreshing = false
+            catalogueFragment.swipeRefreshLayout?.isRefreshing = false
         }
         return true
     }
@@ -97,14 +99,14 @@ class CataloguePageLoader : AsyncTask<Int, Void, Boolean> {
      * Ends progress bar
      */
     override fun onCancelled() {
-        if (catalogueHitBottom != null) catalogueFragment.bottomProgressBar.visibility = View.INVISIBLE else catalogueFragment.swipeRefreshLayout.isRefreshing = false
+        if (catalogueHitBottom != null) catalogueFragment.fragment_catalogue_progress_bottom?.visibility = View.INVISIBLE else catalogueFragment.swipeRefreshLayout?.isRefreshing = false
     }
 
     /**
      * Starts the loading action
      */
     override fun onPreExecute() {
-        if (catalogueHitBottom != null) catalogueFragment.bottomProgressBar.visibility = View.VISIBLE else catalogueFragment.swipeRefreshLayout.isRefreshing = true
+        if (catalogueHitBottom != null) catalogueFragment.fragment_catalogue_progress_bottom?.visibility = View.VISIBLE else catalogueFragment.swipeRefreshLayout?.isRefreshing = true
     }
 
     /**
@@ -114,9 +116,9 @@ class CataloguePageLoader : AsyncTask<Int, Void, Boolean> {
      */
     override fun onPostExecute(aBoolean: Boolean) {
         if (catalogueHitBottom != null) {
-            catalogueFragment.bottomProgressBar.visibility = View.GONE
-            if (catalogueFragment.catalogueNovelCards.size > 0) catalogueFragment.empty.visibility = View.GONE
-        } else catalogueFragment.swipeRefreshLayout.isRefreshing = false
+            catalogueFragment.fragment_catalogue_progress_bottom?.visibility = View.GONE
+            if (catalogueFragment.catalogueNovelCards.size > 0) catalogueFragment.empty?.visibility = View.GONE
+        } else catalogueFragment.swipeRefreshLayout?.isRefreshing = false
     }
 
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.java
deleted file mode 100644
index 4f2930ac9..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async;
-
-import android.os.AsyncTask;
-
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 18 / 06 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CatalogueQuerySearch extends AsyncTask<String, Void, ArrayList<CatalogueNovelCard>> {
-    private final CatalogueFragment catalogueFragment;
-
-    public CatalogueQuerySearch(CatalogueFragment catalogueFragment) {
-        this.catalogueFragment = catalogueFragment;
-    }
-
-    /**
-     * Search catalogue
-     *
-     * @param strings ignored
-     * @return List of results
-     */
-    @NonNull
-    @Override
-    protected ArrayList<CatalogueNovelCard> doInBackground(String... strings) {
-        ArrayList<CatalogueNovelCard> result = new ArrayList<>();
-        List<Novel> novels = catalogueFragment.formatter.parseSearch(docFromURL(catalogueFragment.formatter.getSearchString(strings[0]), catalogueFragment.formatter.getHasCloudFlare()));
-        for (Novel novel : novels)
-            result.add(new CatalogueNovelCard(novel.getImageURL(), novel.getTitle(), Database.DatabaseIdentification.getNovelIDFromNovelURL(novel.getLink()), novel.getLink()));
-        return result;
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.kt
new file mode 100644
index 000000000..69f4f79eb
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/CatalogueQuerySearch.kt
@@ -0,0 +1,45 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async
+
+import android.os.AsyncTask
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 18 / 06 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueQuerySearch(private val catalogueFragment: CatalogueFragment) : AsyncTask<String?, Void?, ArrayList<CatalogueNovelCard>>() {
+    /**
+     * Search catalogue
+     *
+     * @param strings ignored
+     * @return List of results
+     */
+    override fun doInBackground(vararg strings: String?): ArrayList<CatalogueNovelCard> {
+        val result = ArrayList<CatalogueNovelCard>()
+        val novels = catalogueFragment.formatter.parseSearch(docFromURL(catalogueFragment.formatter.getSearchString(strings[0]!!), catalogueFragment.formatter.hasCloudFlare)!!)
+        for (novel in novels) result.add(CatalogueNovelCard(novel.imageURL, novel.title, Database.DatabaseIdentification.getNovelIDFromNovelURL(novel.link), novel.link))
+        return result
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/NovelBackgroundAdd.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/NovelBackgroundAdd.kt
index 333a5bf7d..36e200fa2 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/NovelBackgroundAdd.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/async/NovelBackgroundAdd.kt
@@ -7,7 +7,7 @@ import android.widget.Toast
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
 import com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper
 import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder.NovelCardViewHolder
-import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status
+import kotlinx.android.synthetic.main.fragment_catalogue.*
 
 /*
  * This file is part of Shosetsu.
@@ -36,29 +36,29 @@ class NovelBackgroundAdd(private val novelCardsViewHolder: NovelCardViewHolder?)
     override fun doInBackground(vararg views: View?): Void? {
         try {
             if (novelCardsViewHolder != null && Database.DatabaseNovels.isNotInNovels(novelCardsViewHolder.url)) {
-                Database.DatabaseNovels.addToLibrary(novelCardsViewHolder.formatter.formatterID, novelCardsViewHolder.formatter.parseNovel(WebViewScrapper.docFromURL(novelCardsViewHolder.url, novelCardsViewHolder.formatter.hasCloudFlare)!!), novelCardsViewHolder.url, com.github.doomsdayrs.apps.shosetsu.variables.enums.Status.UNREAD.a)
-                views[0]?.post { Toast.makeText(views[0]!!.context, "Added " + novelCardsViewHolder.library_card_title.text.toString(), Toast.LENGTH_SHORT).show() }
+                Database.DatabaseNovels.addToLibrary(novelCardsViewHolder.formatter?.formatterID!!, novelCardsViewHolder.formatter!!.parseNovel(WebViewScrapper.docFromURL(novelCardsViewHolder.url, novelCardsViewHolder.formatter!!.hasCloudFlare)!!), novelCardsViewHolder.url, com.github.doomsdayrs.apps.shosetsu.variables.enums.Status.UNREAD.a)
+                views[0]?.post { Toast.makeText(views[0]!!.context, "Added " + novelCardsViewHolder.title.text.toString(), Toast.LENGTH_SHORT).show() }
             }
             if (novelCardsViewHolder != null && Database.DatabaseNovels.isBookmarked(novelCardsViewHolder.novelID)) {
                 views[0]?.post { Toast.makeText(views[0]!!.context, "Already in the library", Toast.LENGTH_SHORT).show() }
             } else {
                 if (novelCardsViewHolder != null) {
                     Database.DatabaseNovels.bookMark(Database.DatabaseIdentification.getNovelIDFromNovelURL(novelCardsViewHolder.url))
-                    views[0]?.post { Toast.makeText(views[0]!!.context, "Added " + novelCardsViewHolder.library_card_title.text.toString(), Toast.LENGTH_SHORT).show() }
+                    views[0]?.post { Toast.makeText(views[0]!!.context, "Added " + novelCardsViewHolder.title.text.toString(), Toast.LENGTH_SHORT).show() }
                 }
             }
         } catch (e: Exception) {
             if (novelCardsViewHolder != null) {
-                views[0]?.post { Toast.makeText(views[0]!!.context, "Failed to add to library: " + novelCardsViewHolder.library_card_title.text.toString(), Toast.LENGTH_LONG).show() }
-                views[0]?.post { Log.e("NovelBackgroundAdd", novelCardsViewHolder.library_card_title.text.toString() + " : " + e.message) }
+                views[0]?.post { Toast.makeText(views[0]!!.context, "Failed to add to library: " + novelCardsViewHolder.title.text.toString(), Toast.LENGTH_LONG).show() }
+                views[0]?.post { Log.e("NovelBackgroundAdd", novelCardsViewHolder.title.text.toString() + " : " + e.message) }
             }
         }
         return null
     }
 
     override fun onPostExecute(aVoid: Void?) {
-        novelCardsViewHolder?.catalogueFragment?.library_view?.post {
-            novelCardsViewHolder.catalogueFragment.catalogueAdapter?.notifyDataSetChanged()
+        novelCardsViewHolder?.catalogueFragment?.recyclerView?.post {
+            novelCardsViewHolder.catalogueFragment?.catalogueAdapter?.notifyDataSetChanged()
         }
     }
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.kt
similarity index 53%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.kt
index b7e807760..c32e908a2 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueHitBottom.kt
@@ -1,12 +1,10 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners;
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners
 
-import android.util.Log;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader;
+import android.util.Log
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader
+import kotlinx.android.synthetic.main.fragment_catalogue.*
 
 /*
  * This file is part of Shosetsu.
@@ -29,23 +27,15 @@ import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoade
  *
  * @author github.com/doomsdayrs
  */
-public class CatalogueHitBottom extends RecyclerView.OnScrollListener {
-    private final CatalogueFragment catalogueFragment;
-    public boolean running = false;
-
-    public CatalogueHitBottom(CatalogueFragment catalogueFragment) {
-        this.catalogueFragment = catalogueFragment;
+class CatalogueHitBottom(private val catalogueFragment: CatalogueFragment) : RecyclerView.OnScrollListener() {
+    var running = false
+    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
+        if (!catalogueFragment.isQuery && !catalogueFragment.isInSearch) if (!running) if (!catalogueFragment.recyclerView!!.canScrollVertically(1)) {
+            Log.d("CatalogueFragmentLoad", "Getting next page")
+            running = true
+            catalogueFragment.currentMaxPage++
+            CataloguePageLoader(catalogueFragment, this).execute(catalogueFragment.currentMaxPage)
+        }
     }
 
-    @Override
-    public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
-        if (!catalogueFragment.isQuery && !catalogueFragment.isInSearch)
-            if (!running)
-                if (!catalogueFragment.library_view.canScrollVertically(1)) {
-                    Log.d("CatalogueFragmentLoad", "Getting next page");
-                    running = true;
-                    catalogueFragment.currentMaxPage++;
-                    new CataloguePageLoader(catalogueFragment, this).execute(catalogueFragment.currentMaxPage);
-                }
-    }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.kt
similarity index 57%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.kt
index 05c328431..e63172317 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueRefresh.kt
@@ -1,13 +1,11 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners;
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners
 
-import android.util.Log;
-
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader;
-
-import java.util.ArrayList;
+import android.util.Log
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CataloguePageLoader
+import kotlinx.android.synthetic.main.fragment_catalogue.*
+import java.util.*
 
 /*
  * This file is part of Shosetsu.
@@ -30,22 +28,13 @@ import java.util.ArrayList;
  *
  * @author github.com/doomsdayrs
  */
-public class CatalogueRefresh implements SwipeRefreshLayout.OnRefreshListener {
-    private final CatalogueFragment catalogueFragment;
-
-    public CatalogueRefresh(CatalogueFragment catalogueFragment) {
-        this.catalogueFragment = catalogueFragment;
+class CatalogueRefresh(private val catalogueFragment: CatalogueFragment) : OnRefreshListener {
+    override fun onRefresh() {
+        catalogueFragment.swipeRefreshLayout!!.isRefreshing = true
+        catalogueFragment.catalogueNovelCards = ArrayList()
+        catalogueFragment.currentMaxPage = 1
+        Log.d("FragmentRefresh", "Refreshing catalogue data")
+        CataloguePageLoader(catalogueFragment).execute()
     }
 
-    @Override
-    public void onRefresh() {
-        catalogueFragment.swipeRefreshLayout.setRefreshing(true);
-
-        catalogueFragment.catalogueNovelCards = new ArrayList<>();
-        catalogueFragment.currentMaxPage = 1;
-        Log.d("FragmentRefresh", "Refreshing catalogue data");
-        new CataloguePageLoader(catalogueFragment).execute();
-
-
-    }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.java
deleted file mode 100644
index b46560d6e..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners;
-
-import android.os.Build;
-import android.util.Log;
-import android.widget.SearchView;
-
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CatalogueQuerySearch;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard;
-
-import java.util.ArrayList;
-import java.util.concurrent.ExecutionException;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 18 / 06 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CatalogueSearchQuery implements SearchView.OnQueryTextListener {
-    private final CatalogueFragment catalogueFragment;
-
-    public CatalogueSearchQuery(CatalogueFragment catalogueFragment) {
-        this.catalogueFragment = catalogueFragment;
-    }
-
-    @Override
-    public boolean onQueryTextSubmit(String query) {
-        catalogueFragment.isQuery = false;
-        catalogueFragment.isInSearch = true;
-        try {
-            ArrayList<CatalogueNovelCard> searchResults = new CatalogueQuerySearch(catalogueFragment).execute(query).get();
-            catalogueFragment.setLibraryCards(searchResults);
-            return true;
-        } catch (@NonNull ExecutionException | InterruptedException e) {
-            e.printStackTrace();
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onQueryTextChange(@NonNull String newText) {
-        Log.d("Library search", newText);
-        catalogueFragment.isQuery = true;
-        ArrayList<CatalogueNovelCard> recycleCards = new ArrayList<>(catalogueFragment.catalogueNovelCards);
-
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            recycleCards.removeIf(recycleCard -> !recycleCard.title.toLowerCase().contains(newText.toLowerCase()));
-        } else {
-            for (int x = recycleCards.size() - 1; x >= 0; x--) {
-                if (!recycleCards.get(x).title.toLowerCase().contains(newText.toLowerCase())) {
-                    recycleCards.remove(x);
-                }
-            }
-        }
-        catalogueFragment.setLibraryCards(recycleCards);
-        return recycleCards.size() != 0;
-    }
-
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.kt
new file mode 100644
index 000000000..710ae70e2
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CatalogueSearchQuery.kt
@@ -0,0 +1,66 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners
+
+import android.os.Build
+import android.util.Log
+import android.widget.SearchView
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.CatalogueQuerySearch
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueNovelCard
+import java.util.*
+import java.util.concurrent.ExecutionException
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 18 / 06 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueSearchQuery(private val catalogueFragment: CatalogueFragment) : SearchView.OnQueryTextListener {
+    override fun onQueryTextSubmit(query: String): Boolean {
+        catalogueFragment.isQuery = false
+        catalogueFragment.isInSearch = true
+        try {
+            val searchResults = CatalogueQuerySearch(catalogueFragment).execute(query).get()
+            catalogueFragment.setLibraryCards(searchResults)
+            return true
+        } catch (e: ExecutionException) {
+            e.printStackTrace()
+        } catch (e: InterruptedException) {
+            e.printStackTrace()
+        }
+        return false
+    }
+
+    override fun onQueryTextChange(newText: String): Boolean {
+        Log.d("Library search", newText)
+        catalogueFragment.isQuery = true
+        val recycleCards = ArrayList(catalogueFragment.catalogueNovelCards)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            recycleCards.removeIf { recycleCard: CatalogueNovelCard? -> !recycleCard!!.title?.toLowerCase()?.contains(newText.toLowerCase())!! }
+        } else {
+            for (x in recycleCards.indices.reversed()) {
+                if (!recycleCards[x]!!.title?.toLowerCase()?.contains(newText.toLowerCase())!!) {
+                    recycleCards.removeAt(x)
+                }
+            }
+        }
+        catalogueFragment.setLibraryCards(recycleCards)
+        return recycleCards.size != 0
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.kt
similarity index 62%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.kt
index 63bb17914..75886422d 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/listeners/CataloguesSearchQuery.kt
@@ -1,9 +1,8 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners;
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.listeners
 
-import android.app.Activity;
-import android.widget.SearchView;
-
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
+import android.app.Activity
+import android.widget.SearchView
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
 
 /*
  * This file is part of Shosetsu.
@@ -22,29 +21,20 @@ import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
  * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
  * ====================================================================
  */
-
-
 /**
  * Shosetsu
  * 9 / June / 2019
  *
  * @author github.com/doomsdayrs
  */
-public class CataloguesSearchQuery implements SearchView.OnQueryTextListener {
-    private final Activity activity;
-
-    public CataloguesSearchQuery(Activity activity) {
-        this.activity = activity;
+class CataloguesSearchQuery(private val activity: Activity?) : SearchView.OnQueryTextListener {
+    override fun onQueryTextSubmit(s: String): Boolean {
+        Utilities.search(activity!!, s)
+        return true
     }
 
-    @Override
-    public boolean onQueryTextSubmit(String s) {
-        Utilities.search(activity, s);
-        return true;
+    override fun onQueryTextChange(s: String): Boolean {
+        return false
     }
 
-    @Override
-    public boolean onQueryTextChange(String s) {
-        return false;
-    }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.java
deleted file mode 100644
index f321a680c..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.util.Log;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.FragmentManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isOnline;
-
-/**
- * shosetsu
- * 18 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CatalogueHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-    public final ImageView library_card_image;
-    public final TextView library_card_title;
-    private final FragmentManager fragmentManager;
-    private Formatter formatter;
-
-    public CatalogueHolder(@NonNull View itemView, FragmentManager fragmentManager) {
-        super(itemView);
-        library_card_image = itemView.findViewById(R.id.catalogue_item_card_image);
-        library_card_title = itemView.findViewById(R.id.catalogue_item_card_text);
-        this.fragmentManager = fragmentManager;
-    }
-
-    public void setFormatter(@NonNull Formatter formatter) {
-        this.formatter = formatter;
-        Log.d("FormatterSet", formatter.getName());
-        itemView.setOnClickListener(this);
-    }
-
-    @Override
-    public void onClick(@NonNull View v) {
-        Log.d("FormatterSelection", formatter.getName());
-        if (isOnline()) {
-            CatalogueFragment catalogueFragment = new CatalogueFragment();
-            catalogueFragment.setFormatter(formatter);
-            setFormatter(formatter);
-            fragmentManager.beginTransaction()
-                    .addToBackStack("tag")
-                    .replace(R.id.fragment_container, catalogueFragment)
-                    .commit();
-        } else Toast.makeText(v.getContext(), "You are not online", Toast.LENGTH_SHORT).show();
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.kt
new file mode 100644
index 000000000..d9c75e3b1
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/CatalogueHolder.kt
@@ -0,0 +1,60 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder
+
+import android.util.Log
+import android.view.View
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.fragment.app.FragmentManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 18 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueHolder(itemView: View, private val fragmentManager: FragmentManager) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+    val imageView: ImageView = itemView.findViewById(R.id.imageView)
+    val title: TextView = itemView.findViewById(R.id.textView)
+
+    lateinit var formatter: Formatter
+
+    init {
+        itemView.setOnClickListener(this)
+    }
+
+
+    override fun onClick(v: View) {
+        Log.d("FormatterSelection", formatter.name)
+        if (Utilities.isOnline()) {
+            val catalogueFragment = CatalogueFragment()
+            catalogueFragment.formatter = (formatter)
+            fragmentManager.beginTransaction()
+                    .addToBackStack("tag")
+                    .replace(R.id.fragment_container, catalogueFragment)
+                    .commit()
+        } else Toast.makeText(v.context, "You are not online", Toast.LENGTH_SHORT).show()
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.java
deleted file mode 100644
index b93a9e16d..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder;
-
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.NovelBackgroundAdd;
-import com.github.doomsdayrs.apps.shosetsu.ui.main.MainActivity;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragment;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 06 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class NovelCardViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {
-    public final ConstraintLayout constraintLayout;
-    public final ImageView library_card_image;
-    public final TextView library_card_title;
-    public CatalogueFragment catalogueFragment;
-    public Formatter formatter;
-    public String url;
-    public int novelID;
-
-    public NovelCardViewHolder(@NonNull View itemView) {
-        super(itemView);
-        library_card_image = itemView.findViewById(R.id.image);
-        library_card_title = itemView.findViewById(R.id.title);
-        constraintLayout = itemView.findViewById(R.id.constraint);
-        itemView.setOnClickListener(this);
-        itemView.setOnLongClickListener(this);
-    }
-
-    @Override
-    public void onClick(View v) {
-        NovelFragment novelFragment = new NovelFragment();
-        novelFragment.novelURL = url;
-        novelFragment.formatter = formatter;
-        novelFragment.novelID = Database.DatabaseIdentification.getNovelIDFromNovelURL(url);
-        if (catalogueFragment.getActivity() != null)
-            ((MainActivity) catalogueFragment.getActivity()).transitionView(novelFragment);
-    }
-
-    @Override
-    public boolean onLongClick(View view) {
-        new NovelBackgroundAdd(this).execute(view);
-        return true;
-    }
-
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.kt
new file mode 100644
index 000000000..01df288e8
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/catalogue/viewHolder/NovelCardViewHolder.kt
@@ -0,0 +1,63 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.catalogue.viewHolder
+
+import android.view.View
+import android.view.View.OnLongClickListener
+import android.widget.ImageView
+import android.widget.TextView
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.CatalogueFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.catalogue.async.NovelBackgroundAdd
+import com.github.doomsdayrs.apps.shosetsu.ui.main.MainActivity
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragment
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 06 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class NovelCardViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnClickListener, OnLongClickListener {
+    val constraintLayout: ConstraintLayout = itemView.findViewById(R.id.constraint)
+    val imageView: ImageView = itemView.findViewById(R.id.image)
+    val title: TextView = itemView.findViewById(R.id.title)
+    var catalogueFragment: CatalogueFragment? = null
+  lateinit  var formatter: Formatter
+    var url: String? = null
+    var novelID = 0
+    override fun onClick(v: View) {
+        val novelFragment = NovelFragment()
+        novelFragment.novelURL = url!!
+        novelFragment.formatter = formatter
+        novelFragment.novelID = Database.DatabaseIdentification.getNovelIDFromNovelURL(url)
+        if (catalogueFragment!!.activity != null) (catalogueFragment!!.activity as MainActivity?)!!.transitionView(novelFragment)
+    }
+
+    override fun onLongClick(view: View): Boolean {
+        NovelBackgroundAdd(this).execute(view)
+        return true
+    }
+
+    init {
+        itemView.setOnClickListener(this)
+        itemView.setOnLongClickListener(this)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/DownloadsFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/DownloadsFragment.kt
index 7dc5e66ec..2e95f6193 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/DownloadsFragment.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/DownloadsFragment.kt
@@ -48,10 +48,6 @@ class DownloadsFragment : Fragment() {
         adapter.notifyDataSetChanged()
     }
 
-    override fun onDestroy() {
-        super.onDestroy()
-    }
-
     /**
      * Creates view
      *
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.java
deleted file mode 100644
index 7179dfd3b..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.downloads.adapters;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.downloads.DownloadsFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.downloads.viewHolders.DownloadItemView;
-import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class DownloadAdapter extends RecyclerView.Adapter<DownloadItemView> {
-
-    // This references a static variable
-
-    public final DownloadsFragment downloadsFragment;
-
-    public DownloadAdapter(DownloadsFragment downloadsFragmentA) {
-        downloadsFragment = downloadsFragmentA;
-    }
-
-    @NonNull
-    @Override
-    public DownloadItemView onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.recycler_download_card, viewGroup, false);
-        return new DownloadItemView(view);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull DownloadItemView downloadItemView, int i) {
-        DownloadItem downloadItem = downloadsFragment.getDownloadItems().get(i);
-        downloadItemView.title.setText(downloadItem.chapterURL);
-        downloadItemView.status.setText(downloadItem.getStatus());
-    }
-
-    @Override
-    public int getItemCount() {
-        return downloadsFragment.getDownloadItems().size();
-    }
-
-    @Override
-    public long getItemId(int position) {
-        return position;
-    }
-
-    @Override
-    public int getItemViewType(int position) {
-        return position;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.kt
new file mode 100644
index 000000000..4c85aa3a8
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/adapters/DownloadAdapter.kt
@@ -0,0 +1,56 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.downloads.adapters
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.ui.downloads.DownloadsFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.downloads.viewHolders.DownloadItemView
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class DownloadAdapter(val downloadsFragment: DownloadsFragment) : RecyclerView.Adapter<DownloadItemView>() {
+
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): DownloadItemView {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.recycler_download_card, viewGroup, false)
+        return DownloadItemView(view)
+    }
+
+    override fun onBindViewHolder(downloadItemView: DownloadItemView, i: Int) {
+        val downloadItem = downloadsFragment.downloadItems[i]
+        downloadItemView.title.text = downloadItem.chapterURL
+        downloadItemView.status.text = downloadItem.status
+    }
+
+    override fun getItemCount(): Int {
+        return downloadsFragment.downloadItems.size
+    }
+
+    override fun getItemId(position: Int): Long {
+        return position.toLong()
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return position
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.kt
new file mode 100644
index 000000000..a5ca83424
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.kt
@@ -0,0 +1,32 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.downloads.viewHolders
+
+import android.view.View
+import android.widget.TextView
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 16 / 06 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class DownloadItemView(itemView: View) : RecyclerView.ViewHolder(itemView) {
+    val title: TextView = itemView.findViewById(R.id.recycler_download_card_title)
+    val status: TextView = itemView.findViewById(R.id.recycler_download_card_status)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.java
deleted file mode 100644
index f7dbfc546..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.java
+++ /dev/null
@@ -1,270 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.library;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.SearchView;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.GridLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.UpdateManager;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.adapter.LibraryNovelAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.listener.LibrarySearchQuery;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Objects;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.calculateNoOfColumns;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.regret;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.serializeToString;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.setActivityTitle;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.getNovelTitle;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class LibraryFragment extends Fragment {
-    @NonNull
-    public ArrayList<Integer> libraryNovelCards = new ArrayList<>();
-    public ArrayList<Integer> selectedNovels = new ArrayList<>();
-    public static boolean changedData = false;
-
-
-    public boolean contains(int i) {
-        for (Integer I : selectedNovels)
-            if (I == i)
-                return true;
-        return false;
-    }
-
-
-    private Context context;
-    public RecyclerView recyclerView;
-    public LibraryNovelAdapter libraryNovelCardsAdapter;
-    public Menu menu;
-
-    /**
-     * Constructor
-     */
-    public LibraryFragment() {
-        setHasOptionsMenu(true);
-    }
-
-    private void readFromDB() {
-        libraryNovelCards = Database.DatabaseNovels.getIntLibrary();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            libraryNovelCards.sort((novel, t1) -> getNovelTitle(novel).compareTo(getNovelTitle(t1)));
-        } else {
-            bubbleSortA_Z();
-        }
-    }
-
-    private void bubbleSortA_Z() {
-        for (int i = libraryNovelCards.size() - 1; i > 1; i--) {
-            for (int j = 0; j < i; j++) {
-                if (getNovelTitle(libraryNovelCards.get(j)).compareTo(getNovelTitle(libraryNovelCards.get(j + 1))) > 0)
-                    swapValues(j, j + 1);
-            }
-        }
-    }
-
-    private void swapValues(int indexOne, int indexTwo) {
-        int i = libraryNovelCards.get(indexOne);
-        libraryNovelCards.set(indexOne, libraryNovelCards.get(indexTwo));
-        libraryNovelCards.set(indexTwo, i);
-    }
-
-    /**
-     * Sets the cards to display
-     */
-    public void setLibraryCards(ArrayList<Integer> novelCards) {
-        if (recyclerView != null) {
-            recyclerView.setHasFixedSize(false);
-            RecyclerView.LayoutManager library_layoutManager;
-            library_layoutManager = new GridLayoutManager(context, calculateNoOfColumns(getContext(), 200), RecyclerView.VERTICAL, false);
-
-            libraryNovelCardsAdapter = new LibraryNovelAdapter(novelCards, this);
-            recyclerView.setLayoutManager(library_layoutManager);
-            recyclerView.setAdapter(libraryNovelCardsAdapter);
-        }
-    }
-
-    @Nullable
-    public MenuInflater getInflater() {
-        return new MenuInflater(getContext());
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        Log.d("Library", "Paused");
-        selectedNovels = new ArrayList<>();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        selectedNovels = new ArrayList<>();
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        Log.d("Library", "Resumed");
-        if (LibraryFragment.changedData) {
-            Log.d("Library", "Updating data");
-            libraryNovelCards = Database.DatabaseNovels.getIntLibrary();
-            changedData = !changedData;
-        }
-        libraryNovelCardsAdapter.notifyDataSetChanged();
-    }
-
-    @Override
-    public void onSaveInstanceState(@NonNull Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putIntegerArrayList("selected", selectedNovels);
-        outState.putIntegerArrayList("lib", libraryNovelCards);
-    }
-
-    /**
-     * Creates view
-     *
-     * @param inflater           inflates layouts and shiz
-     * @param container          container of this fragment
-     * @param savedInstanceState save file
-     * @return View
-     */
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        setActivityTitle(getActivity(), "Library");
-        Log.d("Library", "creating");
-        if (savedInstanceState == null)
-            readFromDB();
-        else {
-            ArrayList<Integer> novelIDs = savedInstanceState.getIntegerArrayList("lib"), selectedIDs = savedInstanceState.getIntegerArrayList("selected");
-            if (novelIDs != null) {
-                libraryNovelCards = novelIDs;
-            }
-            selectedNovels = selectedIDs;
-
-        }
-        View view = inflater.inflate(R.layout.fragment_library, container, false);
-        recyclerView = view.findViewById(R.id.fragment_library_recycler);
-        this.context = Objects.requireNonNull(container).getContext();
-        setLibraryCards(libraryNovelCards);
-        return view;
-    }
-
-
-    /**
-     * Creates the option menu
-     *
-     * @param menu     menu to fill
-     * @param inflater inflater of layouts and shiz
-     */
-    @Override
-    public void onCreateOptionsMenu(@NotNull Menu menu, @NotNull MenuInflater inflater) {
-        this.menu = menu;
-        menu.clear();
-        if (selectedNovels.size() <= 0) {
-            inflater.inflate(R.menu.toolbar_library, menu);
-            SearchView searchView = (SearchView) menu.findItem(R.id.library_search).getActionView();
-            if (searchView != null) {
-                searchView.setOnQueryTextListener(new LibrarySearchQuery(this));
-                searchView.setOnCloseListener(() -> {
-                    setLibraryCards(libraryNovelCards);
-                    return false;
-                });
-            }
-        } else
-            inflater.inflate(R.menu.toolbar_library_selected, menu);
-
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.updater_now:
-                UpdateManager.init(libraryNovelCards, context);
-                return true;
-            case R.id.chapter_select_all:
-                for (int i : libraryNovelCards)
-                    if (!contains(i))
-                        selectedNovels.add(i);
-                recyclerView.post(() -> libraryNovelCardsAdapter.notifyDataSetChanged());
-                return true;
-
-            case R.id.chapter_deselect_all:
-                selectedNovels = new ArrayList<>();
-                recyclerView.post(() -> libraryNovelCardsAdapter.notifyDataSetChanged());
-                if (getInflater() != null)
-                    onCreateOptionsMenu(menu, getInflater());
-                return true;
-
-            case R.id.remove_from_library:
-                for (int i : selectedNovels) {
-                    Database.DatabaseNovels.unBookmark(i);
-                    for (int x = 0; x < libraryNovelCards.size(); x++)
-                        if (libraryNovelCards.get(x) == i)
-                            //noinspection SuspiciousListRemoveInLoop
-                            libraryNovelCards.remove(x);
-
-                }
-                selectedNovels = new ArrayList<>();
-                recyclerView.post(() -> libraryNovelCardsAdapter.notifyDataSetChanged());
-                return true;
-
-            case R.id.source_migrate:
-                Intent intent = new Intent(getActivity(), MigrationView.class);
-                try {
-                    intent.putExtra("selected", serializeToString(selectedNovels));
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-                intent.putExtra("target", 1);
-                //startActivity(intent);
-                regret(context);
-                return true;
-
-        }
-        return false;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.kt
new file mode 100644
index 000000000..a54070b6c
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/LibraryFragment.kt
@@ -0,0 +1,227 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.library
+
+import android.content.Intent
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import android.view.*
+import android.widget.SearchView
+import androidx.fragment.app.Fragment
+import androidx.recyclerview.widget.GridLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.UpdateManager.init
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels
+import com.github.doomsdayrs.apps.shosetsu.ui.library.adapter.LibraryNovelAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.library.listener.LibrarySearchQuery
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import kotlinx.android.synthetic.main.fragment_library.*
+import java.io.IOException
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class LibraryFragment : Fragment() {
+    var libraryNovelCards = ArrayList<Int>()
+    var selectedNovels: ArrayList<Int> = ArrayList()
+
+    operator fun contains(i: Int): Boolean {
+        for (I in selectedNovels) if (I == i) return true
+        return false
+    }
+
+    var libraryNovelCardsAdapter: LibraryNovelAdapter? = null
+    var menu: Menu? = null
+
+    private fun readFromDB() {
+        libraryNovelCards = DatabaseNovels.getIntLibrary()
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            libraryNovelCards.sortWith(Comparator { novel: Int?, t1: Int? -> DatabaseNovels.getNovelTitle(novel!!).compareTo(DatabaseNovels.getNovelTitle(t1!!)) })
+        } else {
+            bubbleSortAToZ()
+        }
+    }
+
+    private fun bubbleSortAToZ() {
+        for (i in libraryNovelCards.size - 1 downTo 2) {
+            for (j in 0 until i) {
+                if (DatabaseNovels.getNovelTitle(libraryNovelCards[j]) > DatabaseNovels.getNovelTitle(libraryNovelCards[j + 1])) swapValues(j, j + 1)
+            }
+        }
+    }
+
+    private fun swapValues(indexOne: Int, indexTwo: Int) {
+        val i = libraryNovelCards[indexOne]
+        libraryNovelCards[indexOne] = libraryNovelCards[indexTwo]
+        libraryNovelCards[indexTwo] = i
+    }
+
+    /**
+     * Sets the cards to display
+     */
+    fun setLibraryCards(novelCards: ArrayList<Int>?) {
+        recyclerView!!.setHasFixedSize(false)
+        val layoutManager: RecyclerView.LayoutManager
+        layoutManager = GridLayoutManager(context, Utilities.calculateNoOfColumns(context!!, 200f), RecyclerView.VERTICAL, false)
+        libraryNovelCardsAdapter = LibraryNovelAdapter(novelCards!!, this)
+        recyclerView!!.layoutManager = layoutManager
+        recyclerView!!.adapter = libraryNovelCardsAdapter
+    }
+
+    val inflater: MenuInflater?
+        get() = MenuInflater(context)
+
+    override fun onPause() {
+        super.onPause()
+        Log.d("Library", "Paused")
+        selectedNovels = ArrayList()
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        selectedNovels = ArrayList()
+    }
+
+    override fun onResume() {
+        super.onResume()
+        Log.d("Library", "Resumed")
+        if (changedData) {
+            Log.d("Library", "Updating data")
+            libraryNovelCards = DatabaseNovels.getIntLibrary()
+            changedData = !changedData
+        }
+        libraryNovelCardsAdapter!!.notifyDataSetChanged()
+    }
+
+    override fun onSaveInstanceState(outState: Bundle) {
+        super.onSaveInstanceState(outState)
+        outState.putIntegerArrayList("selected", selectedNovels)
+        outState.putIntegerArrayList("lib", libraryNovelCards)
+    }
+
+    /**
+     * Creates view
+     *
+     * @param inflater           inflates layouts and shiz
+     * @param container          container of this fragment
+     * @param savedInstanceState save file
+     * @return View
+     */
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
+        Utilities.setActivityTitle(activity, "Library")
+        Log.d("Library", "creating")
+        return inflater.inflate(R.layout.fragment_library, container, false)
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+        if (savedInstanceState == null) readFromDB() else {
+            val novelIDs = savedInstanceState.getIntegerArrayList("lib")
+            val selectedIDs = savedInstanceState.getIntegerArrayList("selected")!!
+            if (novelIDs != null) {
+                libraryNovelCards = novelIDs
+            }
+            selectedNovels = selectedIDs
+        }
+        setLibraryCards(libraryNovelCards)
+    }
+
+
+    /**
+     * Creates the option menu
+     *
+     * @param menu     menu to fill
+     * @param inflater inflater of layouts and shiz
+     */
+    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
+        this.menu = menu
+        menu.clear()
+        if (selectedNovels!!.size <= 0) {
+            inflater.inflate(R.menu.toolbar_library, menu)
+            val searchView = menu.findItem(R.id.library_search).actionView as SearchView
+            searchView.setOnQueryTextListener(LibrarySearchQuery(this))
+            searchView.setOnCloseListener {
+                setLibraryCards(libraryNovelCards)
+                false
+            }
+        } else inflater.inflate(R.menu.toolbar_library_selected, menu)
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        when (item.itemId) {
+            R.id.updater_now -> {
+                init(libraryNovelCards, context!!)
+                return true
+            }
+            R.id.chapter_select_all -> {
+                for (i in libraryNovelCards) if (!contains(i)) selectedNovels!!.add(i)
+                recyclerView!!.post { libraryNovelCardsAdapter!!.notifyDataSetChanged() }
+                return true
+            }
+            R.id.chapter_deselect_all -> {
+                selectedNovels = ArrayList()
+                recyclerView!!.post { libraryNovelCardsAdapter!!.notifyDataSetChanged() }
+                if (inflater != null) onCreateOptionsMenu(menu!!, inflater!!)
+                return true
+            }
+            R.id.remove_from_library -> {
+                for (i in selectedNovels!!) {
+                    DatabaseNovels.unBookmark(i)
+                    var x = 0
+                    while (x < libraryNovelCards.size) {
+                        if (libraryNovelCards[x] == i) libraryNovelCards.removeAt(x)
+                        x++
+                    }
+                }
+                selectedNovels = ArrayList()
+                recyclerView!!.post { libraryNovelCardsAdapter!!.notifyDataSetChanged() }
+                return true
+            }
+            R.id.source_migrate -> {
+                val intent = Intent(activity, MigrationView::class.java)
+                try {
+                    intent.putExtra("selected", Utilities.serializeToString(selectedNovels!!))
+                } catch (e: IOException) {
+                    e.printStackTrace()
+                }
+                intent.putExtra("target", 1)
+                //startActivity(intent);
+                Utilities.regret(context)
+                return true
+            }
+        }
+        return false
+    }
+
+    companion object {
+        @JvmField
+        var changedData = false
+    }
+
+    /**
+     * Constructor
+     */
+    init {
+        setHasOptionsMenu(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.java
deleted file mode 100644
index 5575ec20b..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.library.adapter;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.viewHolders.LibNovelViewHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.Settings;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-import com.squareup.picasso.Picasso;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.getNovel;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class LibraryNovelAdapter extends RecyclerView.Adapter<LibNovelViewHolder> {
-    private final LibraryFragment libraryFragment;
-    private final ArrayList<Integer> novelCards;
-
-    public LibraryNovelAdapter(ArrayList<Integer> novelCards, LibraryFragment libraryFragment) {
-        this.libraryFragment = libraryFragment;
-        this.novelCards = novelCards;
-    }
-
-    @NonNull
-    @Override
-    public LibNovelViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.recycler_novel_card, viewGroup, false);
-        return new LibNovelViewHolder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull LibNovelViewHolder libNovelViewHolder, int i) {
-        NovelCard novelCard = getNovel(novelCards.get(i));
-        //Sets values
-        {
-            if (!novelCard.imageURL.isEmpty())
-                Picasso.get().load(novelCard.imageURL).into(libNovelViewHolder.library_card_image);
-            libNovelViewHolder.libraryFragment = libraryFragment;
-            libNovelViewHolder.novelCard = novelCard;
-            libNovelViewHolder.formatter = DefaultScrapers.getByID(novelCard.formatterID);
-            libNovelViewHolder.library_card_title.setText(novelCard.title);
-
-            switch (Settings.themeMode) {
-                case 0:
-                    libNovelViewHolder.library_card_title.setBackgroundResource(R.color.white_trans);
-                    break;
-                case 1:
-                case 2:
-                    libNovelViewHolder.library_card_title.setBackgroundResource(R.color.black_trans);
-                    break;
-            }
-        }
-
-        int count = Database.DatabaseChapter.getCountOfChaptersUnread(novelCard.novelID);
-        if (count != 0) {
-            libNovelViewHolder.chip.setVisibility(View.VISIBLE);
-            libNovelViewHolder.chip.setText(String.valueOf(count));
-        } else libNovelViewHolder.chip.setVisibility(View.INVISIBLE);
-
-        if (libraryFragment.contains(novelCard.novelID)) {
-            libNovelViewHolder.materialCardView.setStrokeWidth(Utilities.SELECTED_STROKE_WIDTH);
-        } else {
-            libNovelViewHolder.materialCardView.setStrokeWidth(0);
-        }
-
-        if (libraryFragment.selectedNovels.size() > 0) {
-            libNovelViewHolder.itemView.setOnClickListener(view -> libNovelViewHolder.addToSelect());
-        } else {
-            libNovelViewHolder.itemView.setOnClickListener(libNovelViewHolder);
-        }
-    }
-
-    @Override
-    public int getItemCount() {
-        return novelCards.size();
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.kt
new file mode 100644
index 000000000..3e0820c70
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/adapter/LibraryNovelAdapter.kt
@@ -0,0 +1,80 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.library.adapter
+
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels
+import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.library.viewHolders.LibNovelViewHolder
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
+import com.github.doomsdayrs.apps.shosetsu.variables.Settings
+import com.squareup.picasso.Picasso
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class LibraryNovelAdapter(private val novelCards: ArrayList<Int>, private val libraryFragment: LibraryFragment) : RecyclerView.Adapter<LibNovelViewHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): LibNovelViewHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.recycler_novel_card, viewGroup, false)
+        return LibNovelViewHolder(view)
+    }
+
+    override fun onBindViewHolder(libNovelViewHolder: LibNovelViewHolder, i: Int) {
+        val novelCard = DatabaseNovels.getNovel(novelCards[i])
+        //Sets values
+        run {
+            if (novelCard.imageURL.isNotEmpty()) Picasso.get().load(novelCard.imageURL).into(libNovelViewHolder.imageView)
+            libNovelViewHolder.libraryFragment = libraryFragment
+            libNovelViewHolder.novelCard = novelCard
+            libNovelViewHolder.formatter = getByID(novelCard.formatterID)!!
+            libNovelViewHolder.title.text = novelCard.title
+            when (Settings.themeMode) {
+                0 -> libNovelViewHolder.title.setBackgroundResource(R.color.white_trans)
+                1, 2 -> libNovelViewHolder.title.setBackgroundResource(R.color.black_trans)
+            }
+        }
+        val count = Database.DatabaseChapter.getCountOfChaptersUnread(novelCard.novelID)
+        if (count != 0) {
+            libNovelViewHolder.chip.visibility = View.VISIBLE
+            libNovelViewHolder.chip.text = count.toString()
+        } else libNovelViewHolder.chip.visibility = View.INVISIBLE
+        if (libraryFragment.contains(novelCard.novelID)) {
+            libNovelViewHolder.materialCardView.strokeWidth = Utilities.SELECTED_STROKE_WIDTH
+        } else {
+            libNovelViewHolder.materialCardView.strokeWidth = 0
+        }
+        if (libraryFragment.selectedNovels?.size!! > 0) {
+            libNovelViewHolder.itemView.setOnClickListener { view: View? -> libNovelViewHolder.addToSelect() }
+        } else {
+            libNovelViewHolder.itemView.setOnClickListener(libNovelViewHolder)
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return novelCards.size
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.java
deleted file mode 100644
index 5b4a7054b..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.library.listener;
-
-import android.os.Build;
-import android.util.Log;
-import android.widget.SearchView;
-
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.getNovelTitle;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-/**
- * Shosetsu
- * 18 / 06 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class LibrarySearchQuery implements SearchView.OnQueryTextListener {
-    private final LibraryFragment libraryFragment;
-
-    public LibrarySearchQuery(LibraryFragment libraryFragment) {
-        this.libraryFragment = libraryFragment;
-    }
-
-    @Override
-    public boolean onQueryTextSubmit(String query) {
-        return false;
-    }
-
-    @Override
-    public boolean onQueryTextChange(@NonNull String newText) {
-        Log.d("Library search", newText);
-        ArrayList<Integer> novelIDs = new ArrayList<>(libraryFragment.libraryNovelCards);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            novelIDs.removeIf(novelID -> !getNovelTitle(novelID).toLowerCase().contains(newText.toLowerCase()));
-        } else {
-            for (int x = novelIDs.size() - 1; x >= 0; x--)
-                if (!getNovelTitle(novelIDs.get(x)).toLowerCase().contains(newText.toLowerCase()))
-                    novelIDs.remove(x);
-        }
-        libraryFragment.setLibraryCards(novelIDs);
-        return novelIDs.size() != 0;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.kt
new file mode 100644
index 000000000..ea0454864
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/listener/LibrarySearchQuery.kt
@@ -0,0 +1,50 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.library.listener
+
+import android.os.Build
+import android.util.Log
+import android.widget.SearchView
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels
+import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+/**
+ * Shosetsu
+ * 18 / 06 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class LibrarySearchQuery(private val libraryFragment: LibraryFragment) : SearchView.OnQueryTextListener {
+    override fun onQueryTextSubmit(query: String): Boolean {
+        return false
+    }
+
+    override fun onQueryTextChange(newText: String): Boolean {
+        Log.d("Library search", newText)
+        val novelIDs = ArrayList(libraryFragment.libraryNovelCards)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            novelIDs.removeIf { novelID: Int? -> !DatabaseNovels.getNovelTitle(novelID!!).toLowerCase(Locale.ROOT).contains(newText.toLowerCase(Locale.ROOT)) }
+        } else {
+            for (x in novelIDs.indices.reversed()) if (!DatabaseNovels.getNovelTitle(novelIDs[x]).toLowerCase(Locale.ROOT).contains(newText.toLowerCase(Locale.ROOT))) novelIDs.removeAt(x)
+        }
+        libraryFragment.setLibraryCards(novelIDs)
+        return novelIDs.size != 0
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.java
deleted file mode 100644
index f7fbc6a81..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.library.viewHolders;
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragment;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-import com.google.android.material.card.MaterialCardView;
-import com.google.android.material.chip.Chip;
-
-/**
- * Shosetsu
- * 13 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-
-public class LibNovelViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-    public final MaterialCardView materialCardView;
-    public final ImageView library_card_image;
-    public final TextView library_card_title;
-    public final Chip chip;
-
-    public LibraryFragment libraryFragment;
-    @Nullable
-    public Formatter formatter;
-    public NovelCard novelCard;
-
-    public LibNovelViewHolder(@NonNull View itemView) {
-        super(itemView);
-        materialCardView = itemView.findViewById(R.id.novel_item_card);
-        library_card_image = itemView.findViewById(R.id.image);
-        library_card_title = itemView.findViewById(R.id.title);
-
-        chip = itemView.findViewById(R.id.novel_item_left_to_read);
-        chip.setOnClickListener(view -> Toast.makeText(view.getContext(), libraryFragment.getResources().getString(R.string.chapters_unread_label) + chip.getText(), Toast.LENGTH_SHORT).show());
-        itemView.setOnLongClickListener(view -> {
-            addToSelect();
-            return true;
-        });
-    }
-
-    public void addToSelect() {
-        if (!libraryFragment.contains(novelCard.novelID))
-            libraryFragment.selectedNovels.add(novelCard.novelID);
-        else
-            removeFromSelect();
-
-        if (libraryFragment.selectedNovels.size() == 1 || libraryFragment.selectedNovels.size() <= 0)
-            libraryFragment.onCreateOptionsMenu(libraryFragment.menu, libraryFragment.getInflater());
-        libraryFragment.recyclerView.post(() -> libraryFragment.libraryNovelCardsAdapter.notifyDataSetChanged());
-    }
-
-    private void removeFromSelect() {
-        if (libraryFragment.contains(novelCard.novelID))
-            for (int x = 0; x < libraryFragment.selectedNovels.size(); x++)
-                if (libraryFragment.selectedNovels.get(x) == novelCard.novelID) {
-                    libraryFragment.selectedNovels.remove(x);
-                    return;
-                }
-    }
-
-    @Override
-    public void onClick(View v) {
-        NovelFragment novelFragment = new NovelFragment();
-        novelFragment.formatter = formatter;
-        novelFragment.novelURL = novelCard.novelURL;
-        novelFragment.novelID = novelCard.novelID;
-        assert libraryFragment.getFragmentManager() != null;
-        libraryFragment.getFragmentManager().beginTransaction()
-                .addToBackStack("tag")
-                .replace(R.id.fragment_container, novelFragment)
-                .commit();
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.kt
new file mode 100644
index 000000000..7acd2ed86
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/library/viewHolders/LibNovelViewHolder.kt
@@ -0,0 +1,79 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.library.viewHolders
+
+import android.view.View
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.main.MainActivity
+import com.github.doomsdayrs.apps.shosetsu.ui.novel.NovelFragment
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard
+import com.google.android.material.card.MaterialCardView
+import com.google.android.material.chip.Chip
+import kotlinx.android.synthetic.main.fragment_library.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * Shosetsu
+ * 13 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class LibNovelViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+    val materialCardView: MaterialCardView = itemView.findViewById(R.id.novel_item_card)
+    val imageView: ImageView = itemView.findViewById(R.id.image)
+    val title: TextView = itemView.findViewById(R.id.title)
+    val chip: Chip = itemView.findViewById(R.id.novel_item_left_to_read)
+
+    lateinit var libraryFragment: LibraryFragment
+    lateinit var formatter: Formatter
+    lateinit var novelCard: NovelCard
+
+    fun addToSelect() {
+        if (!libraryFragment.contains(novelCard.novelID)) libraryFragment.selectedNovels?.add(novelCard.novelID) else removeFromSelect()
+        if (libraryFragment.selectedNovels?.size == 1 || libraryFragment.selectedNovels?.size!! <= 0) libraryFragment.inflater?.let { libraryFragment.onCreateOptionsMenu(libraryFragment.menu!!, it) }
+        libraryFragment.recyclerView.post { libraryFragment.libraryNovelCardsAdapter?.notifyDataSetChanged() }
+    }
+
+    private fun removeFromSelect() {
+        if (libraryFragment.contains(novelCard.novelID)) for (x in libraryFragment.selectedNovels?.indices) if (libraryFragment.selectedNovels[x] == novelCard.novelID) {
+            libraryFragment.selectedNovels.removeAt(x)
+            return
+        }
+    }
+
+    override fun onClick(v: View) {
+        val novelFragment = NovelFragment()
+        novelFragment.formatter = formatter
+        novelFragment.novelURL = novelCard.novelURL
+        novelFragment.novelID = novelCard.novelID
+        assert(libraryFragment.fragmentManager != null)
+        (libraryFragment.activity as MainActivity).transitionView(novelFragment)
+    }
+
+    init {
+        chip.setOnClickListener { view: View -> Toast.makeText(view.context, libraryFragment.resources.getString(R.string.chapters_unread_label) + chip.text, Toast.LENGTH_SHORT).show() }
+        itemView.setOnLongClickListener {
+            addToSelect()
+            true
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/MainActivity.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/MainActivity.kt
index 1867d1f8b..bd8c7be8f 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/MainActivity.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/MainActivity.kt
@@ -78,6 +78,7 @@ class MainActivity : AppCompatActivity(), Supporter {
     fun getNavigationView(): NavigationView? {
         return nav_view
     }
+
     fun getDrawerLayout(): DrawerLayout? {
         return drawer_layout
     }
@@ -195,7 +196,7 @@ class MainActivity : AppCompatActivity(), Supporter {
         }
     }
 
-    override fun setTitle(name: String) {
+    override fun setTitle(name: String?) {
         if (supportActionBar != null) supportActionBar!!.title = name
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.java
deleted file mode 100644
index a5beaa272..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.main;
-
-public interface Supporter {
-    void setTitle(String name);
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.kt
new file mode 100644
index 000000000..935fca28f
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/main/Supporter.kt
@@ -0,0 +1,5 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.main
+
+interface Supporter {
+    fun setTitle(name: String?)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.java
deleted file mode 100644
index a2c24a9a1..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.java
+++ /dev/null
@@ -1,228 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration;
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 19 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.util.Log;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.constraintlayout.widget.ConstraintLayout;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigratingMapAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigratingNovelAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigrationViewCatalogueAdapter;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.async.MigrationViewLoad;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.async.Transfer;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.deserializeString;
-
-public class MigrationView extends AppCompatActivity {
-    public final ArrayList<ArrayList<Novel>> novelResults = new ArrayList<>();
-    @Nullable
-    private ArrayList<CatalogueCard> catalogues = null;
-
-
-    @Nullable
-    public ArrayList<NovelCard> novels = new ArrayList<>();
-    private final ArrayList<String[]> confirmedMappings = new ArrayList<>();
-    private Transfer t;
-
-    public int target = -1;
-    public int selection = 0;
-    public int secondSelection = -1;
-
-    public ProgressBar progressBar;
-    public TextView output;
-    public TextView pageCount;
-
-    public ConstraintLayout targetSelection;
-    public ConstraintLayout migration;
-    private RecyclerView selectedNovels;
-    public MigratingMapAdapter mappingNovelsAdapter;
-
-    public SwipeRefreshLayout swipeRefreshLayout;
-    public RecyclerView mappingNovels;
-    private MigratingNovelAdapter selectedNovelsAdapters;
-
-
-    @Nullable
-    private MigrationViewLoad load = null;
-
-    public MigrationView() {
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (t != null) {
-            t.setC(false);
-            t.cancel(true);
-        }
-        super.onDestroy();
-    }
-
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Intent intent = getIntent();
-        try {
-            novels = (ArrayList<NovelCard>) deserializeString(intent.getStringExtra("selected"));
-        } catch (@NonNull IOException | ClassNotFoundException e) {
-            e.printStackTrace();
-        }
-        setContentView(R.layout.migrate_source_view);
-
-        // Fills in dummy data
-        {
-            for (int x = 0; x < novels.size(); x++)
-                novelResults.add(new ArrayList<>());
-        }
-
-        // Sets selected novels
-        {
-            selectedNovels = findViewById(R.id.selection_view);
-            setUpSelectedNovels();
-        }
-
-        // Sets the novels to map
-        {
-            swipeRefreshLayout = findViewById(R.id.mapping_view_refresh);
-            mappingNovels = findViewById(R.id.mapping_view);
-            setUpMappingNovels();
-        }
-
-        // Sets cancel button
-        {
-            Button cancel = findViewById(R.id.cancel);
-            cancel.setOnClickListener(view -> {
-                secondSelection = -1;
-                refresh();
-            });
-            cancel.setOnLongClickListener(view -> {
-                load.cancel(true);
-                finish();
-                return true;
-            });
-        }
-
-        // Sets confirm button
-        {
-            Button confirm = findViewById(R.id.confirm);
-            confirm.setOnClickListener(view -> {
-                if (secondSelection != -1) {
-                    //Adds mapping targets
-                    {
-                        String[] map = new String[2];
-                        map[0] = novels.get(selection).novelURL;
-                        map[1] = novelResults.get(selection).get(secondSelection).getLink();
-                        confirmedMappings.add(map);
-                    }
-                    novelResults.remove(selection);
-                    novels.remove(selection);
-
-                    if (selection != novels.size()) {
-                        Log.d("Increment", "Increase");
-                    } else if (selection - 1 != -1) {
-                        Log.d("Increment", "Decrease");
-                        selection--;
-                    } else {
-                        t = new Transfer(confirmedMappings, target, this);
-                        t.execute();
-                    }
-                    secondSelection = -1;
-                    refresh();
-                } else
-                    Toast.makeText(getApplicationContext(), "You need to select something!", Toast.LENGTH_SHORT).show();
-
-            });
-            confirm.setOnLongClickListener(view -> {
-                load.cancel(true);
-                //TODO replace with close activity
-                return true;
-            });
-        }
-
-        progressBar = findViewById(R.id.progress);
-        output = findViewById(R.id.console_output);
-        pageCount = findViewById(R.id.page_count);
-
-        if (catalogues == null) {
-            catalogues = DefaultScrapers.getAsCatalogue();
-        }
-
-        targetSelection = findViewById(R.id.target_selection);
-        migration = findViewById(R.id.migrating);
-        RecyclerView recyclerView = findViewById(R.id.catalogues_recycler);
-        recyclerView.setHasFixedSize(true);
-        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getApplicationContext());
-        MigrationViewCatalogueAdapter adapter = new MigrationViewCatalogueAdapter(catalogues, this);
-        recyclerView.setLayoutManager(layoutManager);
-        recyclerView.setAdapter(adapter);
-
-        //fillData();
-    }
-
-    public void fillData() {
-        if (load == null)
-            load = new MigrationViewLoad(this);
-        if (load.isCancelled()) {
-            load = new MigrationViewLoad(this);
-        }
-        load.execute();
-    }
-
-
-    private void setUpSelectedNovels() {
-        selectedNovelsAdapters = new MigratingNovelAdapter(this);
-        selectedNovels.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
-        selectedNovels.setAdapter(selectedNovelsAdapters);
-    }
-
-
-    public void refresh() {
-        selectedNovels.post(selectedNovelsAdapters::notifyDataSetChanged);
-        mappingNovels.post(mappingNovelsAdapter::notifyDataSetChanged);
-    }
-
-    private void setUpMappingNovels() {
-        mappingNovelsAdapter = new MigratingMapAdapter(this);
-        mappingNovels.setLayoutManager(new LinearLayoutManager(getApplicationContext()));
-        mappingNovels.setAdapter(mappingNovelsAdapter);
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.kt
new file mode 100644
index 000000000..14e41b575
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/MigrationView.kt
@@ -0,0 +1,177 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration
+
+import android.os.Bundle
+import android.util.Log
+import android.view.View
+import android.widget.Button
+import android.widget.ProgressBar
+import android.widget.TextView
+import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigratingMapAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigratingNovelAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters.MigrationViewCatalogueAdapter
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.async.MigrationViewLoad
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.async.Transfer
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.asCatalogue
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard
+import kotlinx.android.synthetic.main.migrate_source_view.*
+import java.io.IOException
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 19 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */   class MigrationView : AppCompatActivity() {
+    val novelResults = ArrayList<ArrayList<Novel>>()
+    private var catalogues: ArrayList<CatalogueCard>? = null
+    var novels: ArrayList<NovelCard>? = ArrayList()
+    private val confirmedMappings = ArrayList<Array<String>>()
+    private var t: Transfer? = null
+    var target = -1
+    var selection = 0
+    var secondSelection = -1
+    var mappingNovelsAdapter: MigratingMapAdapter? = null
+    private var selectedNovelsAdapters: MigratingNovelAdapter? = null
+    private var load: MigrationViewLoad? = null
+
+
+    override fun onDestroy() {
+        if (t != null) {
+            t!!.C = false
+            t!!.cancel(true)
+        }
+        super.onDestroy()
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        val intent = intent
+        try {
+            novels = Utilities.deserializeString(intent.getStringExtra("selected")) as ArrayList<NovelCard>?
+        } catch (e: IOException) {
+            e.printStackTrace()
+        } catch (e: ClassNotFoundException) {
+            e.printStackTrace()
+        }
+        setContentView(R.layout.migrate_source_view)
+        // Fills in dummy data
+        run { for (x in novels!!.indices) novelResults.add(ArrayList()) }
+        // Sets selected novels
+        run {
+            setUpSelectedNovels()
+        }
+        // Sets the novels to map
+        run {
+            setUpMappingNovels()
+        }
+        // Sets cancel button
+        run {
+            val cancel = findViewById<Button>(R.id.cancel)
+            cancel.setOnClickListener {
+                secondSelection = -1
+                refresh()
+            }
+            cancel.setOnLongClickListener {
+                load!!.cancel(true)
+                finish()
+                true
+            }
+        }
+        // Sets confirm button
+        run {
+            val confirm = findViewById<Button>(R.id.confirm)
+            confirm.setOnClickListener {
+                if (secondSelection != -1) { //Adds mapping targets
+
+                    val map = arrayOfNulls<String>(2)
+                    map[0] = novels!![selection].novelURL
+                    map[1] = novelResults[selection][secondSelection].link
+                    confirmedMappings.add(map as Array<String>)
+
+                    novelResults.removeAt(selection)
+                    novels!!.removeAt(selection)
+                    when {
+                        selection != novels!!.size -> {
+                            Log.d("Increment", "Increase")
+                        }
+                        selection - 1 != -1 -> {
+                            Log.d("Increment", "Decrease")
+                            selection--
+                        }
+                        else -> {
+                            t = Transfer(confirmedMappings, target, this)
+                            t!!.execute()
+                        }
+                    }
+                    secondSelection = -1
+                    refresh()
+                } else Toast.makeText(applicationContext, "You need to select something!", Toast.LENGTH_SHORT).show()
+            }
+            confirm.setOnLongClickListener {
+                load!!.cancel(true)
+                true
+            }
+        }
+        if (catalogues == null) {
+            catalogues = asCatalogue
+        }
+        val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
+        recyclerView.setHasFixedSize(true)
+        val layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(applicationContext)
+        val adapter = MigrationViewCatalogueAdapter(catalogues!!, this)
+        recyclerView.layoutManager = layoutManager
+        recyclerView.adapter = adapter
+        //fillData();
+    }
+
+    fun fillData() {
+        if (load == null) load = MigrationViewLoad(this)
+        if (load!!.isCancelled) {
+            load = MigrationViewLoad(this)
+        }
+        load!!.execute()
+    }
+
+    private fun setUpSelectedNovels() {
+        selectedNovelsAdapters = MigratingNovelAdapter(this)
+        selection_view!!.layoutManager = LinearLayoutManager(applicationContext)
+        selection_view!!.adapter = selectedNovelsAdapters
+    }
+
+    fun refresh() {
+        selection_view!!.post { selectedNovelsAdapters!!.notifyDataSetChanged() }
+        mapping_view!!.post { mappingNovelsAdapter!!.notifyDataSetChanged() }
+    }
+
+    private fun setUpMappingNovels() {
+        mappingNovelsAdapter = MigratingMapAdapter(this)
+        mapping_view!!.layoutManager = LinearLayoutManager(applicationContext)
+        mapping_view!!.adapter = mappingNovelsAdapter
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.java
deleted file mode 100644
index 2787f8cfc..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters;
-
-import android.graphics.Color;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders.CompressedHolder;
-import com.google.android.material.card.MaterialCardView;
-import com.squareup.picasso.Picasso;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class MigratingMapAdapter extends RecyclerView.Adapter<CompressedHolder> {
-    private final MigrationView migrationView;
-
-    public MigratingMapAdapter(MigrationView migrationView) {
-        this.migrationView = migrationView;
-    }
-
-    @NonNull
-    @Override
-    public CompressedHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.catalogue_item_card, viewGroup, false);
-        return new CompressedHolder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull CompressedHolder holder, int position) {
-        Novel novel = migrationView.novelResults.get(migrationView.selection).get(position);
-        Picasso.get().load(novel.getImageURL()).into(holder.image);
-        holder.title.setText(novel.getTitle());
-        MaterialCardView materialCardView = holder.itemView.findViewById(R.id.materialCardView);
-
-        if (position == migrationView.secondSelection) {
-            materialCardView.setStrokeColor(Color.BLUE);
-            materialCardView.setStrokeWidth(Utilities.SELECTED_STROKE_WIDTH);
-        } else materialCardView.setStrokeWidth(0);
-
-        holder.itemView.setOnClickListener(view -> {
-            migrationView.secondSelection = position;
-            migrationView.refresh();
-        });
-    }
-
-
-    @Override
-    public int getItemCount() {
-        if (migrationView.novelResults.size() > 0)
-            return migrationView.novelResults.get(migrationView.selection).size();
-        else return 0;
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.kt
new file mode 100644
index 000000000..747f59469
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingMapAdapter.kt
@@ -0,0 +1,61 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters
+
+import android.graphics.Color
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders.CompressedHolder
+import com.google.android.material.card.MaterialCardView
+import com.squareup.picasso.Picasso
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class MigratingMapAdapter(private val migrationView: MigrationView) : RecyclerView.Adapter<CompressedHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): CompressedHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.catalogue_item_card, viewGroup, false)
+        return CompressedHolder(view)
+    }
+
+    override fun onBindViewHolder(holder: CompressedHolder, position: Int) {
+        val novel = migrationView.novelResults[migrationView.selection][position]
+        Picasso.get().load(novel.imageURL).into(holder.image)
+        holder.title.text = novel.title
+        val materialCardView: MaterialCardView = holder.itemView.findViewById(R.id.materialCardView)
+        if (position == migrationView.secondSelection) {
+            materialCardView.strokeColor = Color.BLUE
+            materialCardView.strokeWidth = Utilities.SELECTED_STROKE_WIDTH
+        } else materialCardView.strokeWidth = 0
+        holder.itemView.setOnClickListener { view: View? ->
+            migrationView.secondSelection = position
+            migrationView.refresh()
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return if (migrationView.novelResults.size > 0) migrationView.novelResults[migrationView.selection].size else 0
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.java
deleted file mode 100644
index 20e7eb1e1..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters;
-
-import android.graphics.Color;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.Utilities;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders.CompressedHolder;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.NovelCard;
-import com.google.android.material.card.MaterialCardView;
-import com.squareup.picasso.Picasso;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class MigratingNovelAdapter extends RecyclerView.Adapter<CompressedHolder> {
-
-    private final MigrationView migrationView;
-
-    public MigratingNovelAdapter(MigrationView migrationView) {
-        this.migrationView = migrationView;
-    }
-
-
-    @NonNull
-    @Override
-    public CompressedHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.catalogue_item_card, viewGroup, false);
-        return new CompressedHolder(view);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull CompressedHolder catalogueHolder, int i) {
-        NovelCard novel = migrationView.novels.get(i);
-        Log.d("BindingItem: ", novel.title);
-        MaterialCardView materialCardView = catalogueHolder.itemView.findViewById(R.id.materialCardView);
-
-        if (i == migrationView.selection) {
-            materialCardView.setStrokeColor(Color.BLUE);
-            materialCardView.setStrokeWidth(Utilities.SELECTED_STROKE_WIDTH);
-        } else materialCardView.setStrokeWidth(0);
-
-        Picasso.get().load(novel.imageURL).into(catalogueHolder.image);
-        catalogueHolder.title.setText(novel.title);
-        catalogueHolder.itemView.setOnClickListener(view -> {
-            migrationView.selection = i;
-            migrationView.secondSelection = -1;
-            Log.d("Current selection", String.valueOf(migrationView.selection));
-            migrationView.refresh();
-        });
-    }
-
-    @Override
-    public int getItemCount() {
-        System.out.println(migrationView.novels.size());
-        return migrationView.novels.size();
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.kt
new file mode 100644
index 000000000..04cbc4747
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigratingNovelAdapter.kt
@@ -0,0 +1,66 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters
+
+import android.graphics.Color
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders.CompressedHolder
+import com.google.android.material.card.MaterialCardView
+import com.squareup.picasso.Picasso
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class MigratingNovelAdapter(private val migrationView: MigrationView) : RecyclerView.Adapter<CompressedHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): CompressedHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.catalogue_item_card, viewGroup, false)
+        return CompressedHolder(view)
+    }
+
+    override fun onBindViewHolder(catalogueHolder: CompressedHolder, i: Int) {
+        val novel = migrationView.novels!![i]
+        Log.d("BindingItem: ", novel.title)
+        val materialCardView: MaterialCardView = catalogueHolder.itemView.findViewById(R.id.materialCardView)
+        if (i == migrationView.selection) {
+            materialCardView.strokeColor = Color.BLUE
+            materialCardView.strokeWidth = Utilities.SELECTED_STROKE_WIDTH
+        } else materialCardView.strokeWidth = 0
+        Picasso.get().load(novel.imageURL).into(catalogueHolder.image)
+        catalogueHolder.title.text = novel.title
+        catalogueHolder.itemView.setOnClickListener { view: View? ->
+            migrationView.selection = i
+            migrationView.secondSelection = -1
+            Log.d("Current selection", migrationView.selection.toString())
+            migrationView.refresh()
+        }
+    }
+
+    override fun getItemCount(): Int {
+        println(migrationView.novels!!.size)
+        return migrationView.novels!!.size
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.java
deleted file mode 100644
index 56fd94e55..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters;
-
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard;
-import com.squareup.picasso.Picasso;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.isOnline;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class MigrationViewCatalogueAdapter extends RecyclerView.Adapter<MigrationViewCatalogueAdapter.CatalogueHolder> {
-    private final ArrayList<CatalogueCard> catalogues;
-    private final MigrationView migrationView;
-
-    public MigrationViewCatalogueAdapter(ArrayList<CatalogueCard> catalogues, MigrationView migrationView) {
-        this.catalogues = catalogues;
-        this.migrationView = migrationView;
-    }
-
-
-    @NonNull
-    @Override
-    public CatalogueHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
-        View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.catalogue_item_card, viewGroup, false);
-        return new CatalogueHolder(view, migrationView);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull CatalogueHolder catalogueHolder, int i) {
-
-        CatalogueCard catalogueCard = catalogues.get(i);
-        catalogueCard.formatter.getImageURL();
-        if (!catalogueCard.formatter.getImageURL().isEmpty())
-            Picasso.get()
-                    .load(catalogueCard.formatter.getImageURL())
-                    .into(catalogueHolder.image);
-        else
-            catalogueHolder.image.setImageResource(catalogueCard.libraryImageResource);
-        catalogueHolder.title.setText(catalogueCard.title);
-
-        catalogueHolder.setFormatter(catalogueCard.formatter);
-    }
-
-    @Override
-    public int getItemCount() {
-        return catalogues.size();
-    }
-
-    static class CatalogueHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-        final ImageView image;
-        final TextView title;
-        Formatter formatter;
-        final MigrationView migrationView;
-
-
-        CatalogueHolder(@NonNull View itemView, MigrationView migrationView) {
-            super(itemView);
-            image = itemView.findViewById(R.id.catalogue_item_card_image);
-            title = itemView.findViewById(R.id.catalogue_item_card_text);
-            itemView.setOnClickListener(this);
-            this.migrationView = migrationView;
-        }
-
-        void setFormatter(Formatter formatter) {
-            this.formatter = formatter;
-        }
-
-        @Override
-        public void onClick(@NonNull View v) {
-            Log.d("FormatterSelection", formatter.getName());
-            if (isOnline()) {
-
-                Log.d("Target", String.valueOf(formatter.getFormatterID()));
-                migrationView.target = formatter.getFormatterID();
-                migrationView.targetSelection.setVisibility(View.GONE);
-                migrationView.migration.setVisibility(View.VISIBLE);
-
-                //TODO, popup window saying novels rejected because the formatter ID is the same.
-                for (int x = migrationView.novels.size() - 1; x >= 0; x--) {
-                    if (migrationView.novels.get(x).formatterID == formatter.getFormatterID()) {
-                        migrationView.novels.remove(x);
-                    }
-                }
-
-                migrationView.fillData();
-            } else Toast.makeText(v.getContext(), "You are not online", Toast.LENGTH_SHORT).show();
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.kt
new file mode 100644
index 000000000..b1df30add
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/adapters/MigrationViewCatalogueAdapter.kt
@@ -0,0 +1,62 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.adapters
+
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders.CatalogueHolder
+import com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects.CatalogueCard
+import com.squareup.picasso.Picasso
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class MigrationViewCatalogueAdapter(private val catalogues: ArrayList<CatalogueCard>, private val migrationView: MigrationView) : RecyclerView.Adapter<CatalogueHolder>() {
+    override fun onCreateViewHolder(viewGroup: ViewGroup, i: Int): CatalogueHolder {
+        val view = LayoutInflater.from(viewGroup.context).inflate(R.layout.catalogue_item_card, viewGroup, false)
+        return CatalogueHolder(view, migrationView)
+    }
+
+    override fun onBindViewHolder(catalogueHolder: CatalogueHolder, i: Int) {
+        val catalogueCard = catalogues[i]
+        catalogueCard.formatter.imageURL
+        if (!catalogueCard.formatter.imageURL.isEmpty()) Picasso.get()
+                .load(catalogueCard.formatter.imageURL)
+                .into(catalogueHolder.image) else catalogueHolder.image.setImageResource(catalogueCard.libraryImageResource)
+        catalogueHolder.title.text = catalogueCard.title
+        catalogueHolder.formatter = (catalogueCard.formatter)
+    }
+
+    override fun getItemCount(): Int {
+        return catalogues.size
+    }
+
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.java
deleted file mode 100644
index ed0c69aab..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.async;
-
-import android.annotation.SuppressLint;
-import android.os.AsyncTask;
-import android.util.Log;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-
-import java.util.ArrayList;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 22 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class MigrationViewLoad extends AsyncTask<Void, Void, Void> {
-
-    @NonNull
-    @SuppressLint("StaticFieldLeak")
-    private final MigrationView migrationView;
-    @NonNull
-    private final Formatter targetFormat;
-
-    public MigrationViewLoad(@NonNull MigrationView migrationView) {
-        this.migrationView = migrationView;
-        Formatter formatter = DefaultScrapers.getByID(migrationView.target);
-        if (formatter != null)
-            targetFormat = formatter;
-        else throw new NullPointerException("Target ID is completely invalid");
-    }
-
-    @Nullable
-    @Override
-    protected Void doInBackground(Void... voids) {
-        Log.d("Searching with", targetFormat.getName());
-        for (int x = 0; x < migrationView.novels.size(); x++) {
-            // Retrieves search results
-            ArrayList<Novel> N = (ArrayList<Novel>) targetFormat.parseSearch(docFromURL(targetFormat.getSearchString(migrationView.novels.get(x).title), targetFormat.getHasCloudFlare()));
-
-            // Sets the results
-            migrationView.novelResults.set(x, N);
-
-        }
-        return null;
-    }
-
-    @Override
-    protected void onPreExecute() {
-        migrationView.swipeRefreshLayout.setRefreshing(true);
-    }
-
-    @Override
-    protected void onPostExecute(Void aVoid) {
-        migrationView.swipeRefreshLayout.setRefreshing(false);
-        migrationView.mappingNovels.post(migrationView.mappingNovelsAdapter::notifyDataSetChanged);
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.kt
new file mode 100644
index 000000000..8e6ee41ff
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/MigrationViewLoad.kt
@@ -0,0 +1,58 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.async
+
+import android.annotation.SuppressLint
+import android.os.AsyncTask
+import android.util.Log
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.api.shosetsu.services.core.objects.Novel
+import com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
+import kotlinx.android.synthetic.main.fragment_catalogue.*
+import kotlinx.android.synthetic.main.migrate_source_view.*
+import java.util.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 22 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class MigrationViewLoad(private val migrationView: MigrationView) : AsyncTask<Void?, Void?, Void?>() {
+    private var targetFormat: Formatter = getByID(migrationView.target)!!
+
+    override fun doInBackground(vararg voids: Void?): Void? {
+        Log.d("Searching with", targetFormat.name)
+        for (x in migrationView.novels!!.indices) { // Retrieves search results
+            val N = targetFormat.parseSearch(docFromURL(targetFormat.getSearchString(migrationView.novels!![x].title), targetFormat.hasCloudFlare)!!) as ArrayList<Novel>
+            // Sets the results
+            migrationView.novelResults[x] = N
+        }
+        return null
+    }
+
+    override fun onPreExecute() {
+        migrationView.swipeRefreshLayout.isRefreshing = true
+    }
+
+    override fun onPostExecute(aVoid: Void?) {
+        migrationView.swipeRefreshLayout.isRefreshing = false
+        migrationView.mapping_view.post { migrationView.mappingNovelsAdapter?.notifyDataSetChanged() }
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.java
deleted file mode 100644
index 35372a580..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.async;
-
-import android.annotation.SuppressLint;
-import android.os.AsyncTask;
-import android.util.Log;
-import android.view.View;
-
-import androidx.annotation.Nullable;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter;
-import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage;
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment;
-import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView;
-import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers;
-
-import java.util.ArrayList;
-import java.util.concurrent.TimeUnit;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 05 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class Transfer extends AsyncTask<Void, Void, Void> {
-    private final ArrayList<String[]> strings;
-    @Nullable
-    private final Formatter formatter;
-    @SuppressLint("StaticFieldLeak")
-    private final MigrationView migrationView;
-    private boolean C = true;
-
-    public Transfer(ArrayList<String[]> strings, int target, MigrationView migrationView) {
-        this.strings = strings;
-        this.migrationView = migrationView;
-        formatter = DefaultScrapers.getByID(target);
-    }
-
-    public void setC(boolean c) {
-        C = c;
-    }
-
-    @Override
-    protected void onCancelled() {
-        C = false;
-        super.onCancelled();
-    }
-
-    @Override
-    protected void onPreExecute() {
-        migrationView.migration.setVisibility(View.GONE);
-        migrationView.progressBar.setVisibility(View.VISIBLE);
-        migrationView.output.post(() -> migrationView.output.setText(migrationView.getResources().getText(R.string.starting)));
-        if (formatter.isIncrementingChapterList())
-            migrationView.pageCount.setVisibility(View.VISIBLE);
-    }
-
-    @Nullable
-    @Override
-    protected Void doInBackground(Void... voids) {
-        for (String[] strings : strings)
-            if (C) {
-                String s = strings[0] + "--->" + strings[1];
-                System.out.println(s);
-                migrationView.output.post(() -> migrationView.output.setText(s));
-                NovelPage novelPage = formatter.parseNovel(docFromURL((strings[1]), formatter.getHasCloudFlare()));
-                if (formatter.isIncrementingChapterList()) {
-                    int mangaCount = 0;
-                    int page = 1;
-                    while (page <= novelPage.getMaxChapterPage() && C) {
-                        String p = "Page: " + page + "/" + novelPage.getMaxChapterPage();
-                        migrationView.pageCount.post(() -> migrationView.pageCount.setText(p));
-
-                        novelPage = formatter.parseNovel(docFromURL(strings[1], formatter.getHasCloudFlare()), page);
-                        int novelID = getNovelIDFromNovelURL(strings[1]);
-                        for (NovelChapter novelChapter : novelPage.getNovelChapters())
-                            if (C && !Database.DatabaseChapter.isNotInChapters(novelChapter.getLink())) {
-                                mangaCount++;
-                                System.out.println("Adding #" + mangaCount + ": " + novelChapter.getLink());
-
-                                Database.DatabaseChapter.addToChapters(novelID, novelChapter);
-                            }
-                        page++;
-
-                        try {
-                            TimeUnit.MILLISECONDS.sleep(300);
-                        } catch (InterruptedException e) {
-                            if (e.getMessage() != null)
-                                Log.e("Interrupt", e.getMessage());
-                        }
-                    }
-                } else {
-                    int mangaCount = 0;
-                    int novelID = getNovelIDFromNovelURL(strings[1]);
-                    for (NovelChapter novelChapter : novelPage.getNovelChapters())
-                        if (C && !Database.DatabaseChapter.isNotInChapters(novelChapter.getLink())) {
-                            mangaCount++;
-                            System.out.println("Adding #" + mangaCount + ": " + novelChapter.getLink());
-                            Database.DatabaseChapter.addToChapters(novelID, novelChapter);
-                        }
-                }
-                if (C) {
-                    migrationView.pageCount.post(() -> migrationView.pageCount.setText(""));
-                    int oldID = getNovelIDFromNovelURL(strings[0]);
-                    Database.DatabaseNovels.migrateNovel(oldID, strings[1], formatter.getFormatterID(), novelPage, Database.DatabaseNovels.getStatus(oldID).getA());
-                }
-            }
-        return null;
-    }
-
-    @Override
-    protected void onPostExecute(Void aVoid) {
-        LibraryFragment.changedData = true;
-        if (migrationView != null) {
-            migrationView.finish();
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.kt
new file mode 100644
index 000000000..f19f6bb27
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/async/Transfer.kt
@@ -0,0 +1,106 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.async
+
+import android.annotation.SuppressLint
+import android.os.AsyncTask
+import android.util.Log
+import android.view.View
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification
+import com.github.doomsdayrs.apps.shosetsu.backend.scraper.WebViewScrapper.docFromURL
+import com.github.doomsdayrs.apps.shosetsu.ui.library.LibraryFragment
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
+import kotlinx.android.synthetic.main.migrate_source_view.*
+import java.util.*
+import java.util.concurrent.TimeUnit
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 05 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class Transfer(private val strings: ArrayList<Array<String>>, target: Int, private val migrationView: MigrationView?) : AsyncTask<Void?, Void?, Void?>() {
+    private val formatter: Formatter? = getByID(target)
+    var C = true
+
+
+    override fun onCancelled() {
+        C = false
+        super.onCancelled()
+    }
+
+    override fun onPreExecute() {
+        migrationView!!.migrating.visibility = View.GONE
+        migrationView.progress.visibility = View.VISIBLE
+        migrationView.console_output.post { migrationView.console_output.text = migrationView.resources.getText(R.string.starting) }
+        if (formatter!!.isIncrementingChapterList) migrationView.page_count.visibility = View.VISIBLE
+    }
+
+    override fun doInBackground(vararg voids: Void?): Void? {
+        for (strings in strings) if (C) {
+            val s = strings[0] + "--->" + strings[1]
+            println(s)
+            migrationView!!.console_output.post { migrationView.console_output.text = s }
+            var novelPage = formatter!!.parseNovel(docFromURL(strings[1], formatter.hasCloudFlare)!!)
+            if (formatter.isIncrementingChapterList) {
+                var mangaCount = 0
+                var page = 1
+                while (page <= novelPage.maxChapterPage && C) {
+                    val p = "Page: " + page + "/" + novelPage.maxChapterPage
+                    migrationView.page_count.post { migrationView.page_count.text = p }
+                    novelPage = formatter.parseNovel(docFromURL(strings[1], formatter.hasCloudFlare)!!, page)
+                    val novelID = DatabaseIdentification.getNovelIDFromNovelURL(strings[1])
+                    for (novelChapter in novelPage.novelChapters) if (C && !Database.DatabaseChapter.isNotInChapters(novelChapter.link)) {
+                        mangaCount++
+                        println("Adding #" + mangaCount + ": " + novelChapter.link)
+                        Database.DatabaseChapter.addToChapters(novelID, novelChapter)
+                    }
+                    page++
+                    try {
+                        TimeUnit.MILLISECONDS.sleep(300)
+                    } catch (e: InterruptedException) {
+                        if (e.message != null) Log.e("Interrupt", e.message)
+                    }
+                }
+            } else {
+                var mangaCount = 0
+                val novelID = DatabaseIdentification.getNovelIDFromNovelURL(strings[1])
+                for (novelChapter in novelPage.novelChapters) if (C && !Database.DatabaseChapter.isNotInChapters(novelChapter.link)) {
+                    mangaCount++
+                    println("Adding #" + mangaCount + ": " + novelChapter.link)
+                    Database.DatabaseChapter.addToChapters(novelID, novelChapter)
+                }
+            }
+            if (C) {
+                migrationView.page_count.post { migrationView.page_count.text = "" }
+                val oldID = DatabaseIdentification.getNovelIDFromNovelURL(strings[0])
+                Database.DatabaseNovels.migrateNovel(oldID, strings[1], formatter.formatterID, novelPage, Database.DatabaseNovels.getStatus(oldID).a)
+            }
+        }
+        return null
+    }
+
+    override fun onPostExecute(aVoid: Void?) {
+        LibraryFragment.changedData = true
+        migrationView?.finish()
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CatalogueHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CatalogueHolder.kt
new file mode 100644
index 000000000..a96eb3200
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CatalogueHolder.kt
@@ -0,0 +1,66 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders
+
+import android.util.Log
+import android.view.View
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.ui.migration.MigrationView
+import kotlinx.android.synthetic.main.migrate_source_view.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+
+
+/**
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueHolder(itemView: View, private val migrationView: MigrationView) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+    val image: ImageView = itemView.findViewById(R.id.imageView)
+    val title: TextView = itemView.findViewById(R.id.textView)
+    lateinit var formatter: Formatter
+
+
+    override fun onClick(v: View) {
+        Log.d("FormatterSelection", formatter.name)
+        if (Utilities.isOnline()) {
+            Log.d("Target", formatter.formatterID.toString())
+            migrationView.target = formatter.formatterID
+            migrationView.target_selection.visibility = View.GONE
+            migrationView.migrating.visibility = View.VISIBLE
+            //TODO, popup window saying novels rejected because the formatter ID is the same.
+            for (x in migrationView.novels!!.indices.reversed()) {
+                if (migrationView.novels!![x].formatterID == formatter.formatterID) {
+                    migrationView.novels!!.removeAt(x)
+                }
+            }
+            migrationView.fillData()
+        } else Toast.makeText(v.context, v.context.getString(R.string.you_not_online), Toast.LENGTH_SHORT).show()
+    }
+
+    init {
+        itemView.setOnClickListener(this)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.java
deleted file mode 100644
index dec380e9a..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 19 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-
-public class CompressedHolder extends RecyclerView.ViewHolder {
-    public final ImageView image;
-    public final TextView title;
-
-    public CompressedHolder(@NonNull View itemView) {
-        super(itemView);
-        image = itemView.findViewById(R.id.catalogue_item_card_image);
-        title = itemView.findViewById(R.id.catalogue_item_card_text);
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.kt
new file mode 100644
index 000000000..4b772838f
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/migration/viewHolders/CompressedHolder.kt
@@ -0,0 +1,33 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.migration.viewHolders
+
+import android.view.View
+import android.widget.ImageView
+import android.widget.TextView
+import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.apps.shosetsu.R
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 19 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */   class CompressedHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+    val image: ImageView = itemView.findViewById(R.id.imageView)
+    val title: TextView = itemView.findViewById(R.id.textView)
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
index e909879ab..6a5d35483 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/NovelFragment.kt
@@ -57,17 +57,12 @@ class NovelFragment : Fragment() {
     // This is a never before loaded novel
     var new: Boolean = true
 
-    @JvmField
     var novelID = -2
-    @JvmField
     var novelURL: String = ""
-    @JvmField
     var novelPage: NovelPage = NovelPage()
-    @JvmField
-    var formatter: Formatter? = null
+    lateinit var formatter: Formatter
 
     var status = Status.UNREAD
-    @JvmField
     var novelChapters: List<NovelChapter> = ArrayList()
 
     /**
@@ -144,7 +139,7 @@ class NovelFragment : Fragment() {
         } else {
             novelID = savedInstanceState.getInt("novelID")
             novelURL = savedInstanceState.getString("novelURL", "")
-            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))
+            formatter = DefaultScrapers.getByID(savedInstanceState.getInt("formatter"))!!
             status = Status.getStatus(savedInstanceState.getInt("status"))
             novelPage = Database.DatabaseNovels.getNovelPage(novelID)
             new = savedInstanceState.getBoolean("new")
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NewNovelLoader.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NewNovelLoader.kt
index c8df2a322..d4ae66dee 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NewNovelLoader.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/async/NewNovelLoader.kt
@@ -5,7 +5,7 @@ import android.view.View
 import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
 import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter
 import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage
-import com.github.doomsdayrs.apps.shosetsu.backend.async.NewChapterLoader
+import com.github.doomsdayrs.apps.shosetsu.backend.async.ChapterLoader
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.*
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.*
@@ -69,7 +69,7 @@ class NewNovelLoader(val novelURL: String, var novelID: Int, val formatter: Form
                 // This is based on incrementation, If there is none it will just set chapters to those stored in novelFragment.novelPage, otherwise it will run a loader
                 if (formatter.isIncrementingChapterList && loadChapters) {
                     if (novelFragment.novelFragmentChapters != null) {
-                        NewChapterLoader(novelFragment.novelFragmentChapters!!.chaptersLoadedAction, formatter, novelURL).execute()
+                        ChapterLoader(novelFragment.novelFragmentChapters!!.chaptersLoadedAction, formatter, novelURL).execute()
                     }
                 } else {
                     novelFragment.novelChapters = novelFragment.novelPage.novelChapters
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
index 84cd978b5..567e1f3d3 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/novel/pages/NovelFragmentChapters.kt
@@ -13,8 +13,8 @@ import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelChapter
 import com.github.doomsdayrs.apps.shosetsu.R
 import com.github.doomsdayrs.apps.shosetsu.backend.DownloadManager
 import com.github.doomsdayrs.apps.shosetsu.backend.Utilities.openChapter
-import com.github.doomsdayrs.apps.shosetsu.backend.async.NewChapterLoader
-import com.github.doomsdayrs.apps.shosetsu.backend.async.NewChapterLoader.ChapterLoaderAction
+import com.github.doomsdayrs.apps.shosetsu.backend.async.ChapterLoader
+import com.github.doomsdayrs.apps.shosetsu.backend.async.ChapterLoader.ChapterLoaderAction
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.getChapters
 import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.updateChapter
@@ -181,7 +181,7 @@ class NovelFragmentChapters : Fragment() {
         if (novelFragment != null)
             fragment_novel_chapters_refresh.setOnRefreshListener {
                 if (novelFragment != null && novelFragment!!.formatter != null && novelFragment!!.novelURL.isNotEmpty())
-                    NewChapterLoader(chaptersLoadedAction, novelFragment!!.formatter!!, novelFragment!!.novelURL).execute()
+                    ChapterLoader(chaptersLoadedAction, novelFragment!!.formatter!!, novelFragment!!.novelURL).execute()
             }
         if (savedInstanceState != null) {
             currentMaxPage = savedInstanceState.getInt("maxPage")
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/search/adapters/SearchResultsAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/search/adapters/SearchResultsAdapter.kt
index f9eb52547..daa68e415 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/search/adapters/SearchResultsAdapter.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/search/adapters/SearchResultsAdapter.kt
@@ -64,7 +64,7 @@ class SearchResultsAdapter(private val searchViewHolder: SearchViewHolder) : Rec
         val title: String
         val url: String
         val imageURL: String
-        val formatter: Formatter?
+        val formatter: Formatter
         val id: Int
 
         if (isWebsiteSearch()) {
@@ -76,10 +76,10 @@ class SearchResultsAdapter(private val searchViewHolder: SearchViewHolder) : Rec
             id = Database.DatabaseIdentification.getNovelIDFromNovelURL(imageURL)
         } else {
             val novel: NovelCard = Database.DatabaseNovels.getNovel(intArray[position])
-            title = novel.title
+            title = novel.title.toString()
             url = novel.novelURL
             imageURL = novel.imageURL
-            formatter = DefaultScrapers.getByID(novel.formatterID)
+            formatter = DefaultScrapers.getByID(novel.formatterID)!!
             id = novel.novelID
         }
 
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.java
deleted file mode 100644
index 36acff1aa..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.java
+++ /dev/null
@@ -1,169 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.settings.subFragments.backup.async;
-/*
- * This file is part of shosetsu.
- *
- * shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-import android.database.Cursor;
-import android.os.AsyncTask;
-import android.util.Log;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.doomsdayrs.apps.shosetsu.backend.Serialize;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.Columns;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.Tables;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Date;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.intToBoolean;
-import static com.github.doomsdayrs.apps.shosetsu.backend.Utilities.shoDir;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterURLFromChapterID;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getFormatterIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelURLfromNovelID;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.sqLiteDatabase;
-
-/**
- * shosetsu
- * 16 / 08 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class BackupProcess extends AsyncTask<Void, Void, Void> {
-
-
-    @Override
-    protected void onPreExecute() {
-        Log.i("Progress", "Starting backup");
-    }
-
-    @Override
-    protected void onPostExecute(Void aVoid) {
-        Log.i("Progress", "Finished backup");
-    }
-
-    @Nullable
-    @Override
-    protected Void doInBackground(Void... voids) {
-        try {
-            final JSONObject BACKUP = new JSONObject();
-
-            Log.i("Progress", "Backing up novels");
-            {
-                final JSONArray NOVELS = new JSONArray();
-                Cursor cursor = sqLiteDatabase.rawQuery("select * from " + Tables.NOVELS + " where " + Columns.BOOKMARKED + "=1", null);
-                if (!(cursor.getCount() <= 0))
-                    while (cursor.moveToNext()) {
-
-
-                        // Gets if it is in library, if not then it skips
-                        boolean bookmarked = intToBoolean(cursor.getInt(cursor.getColumnIndex(Columns.BOOKMARKED.toString())));
-                        Log.i("NovelBack", "Valid?: " + bookmarked);
-                        if (bookmarked) {
-                            String novelURL = getNovelURLfromNovelID(cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString())));
-
-                            JSONObject novel = new JSONObject();
-                            novel.put(Columns.URL.toString(), novelURL);
-                            novel.put(Columns.FORMATTER_ID.toString(), getFormatterIDFromNovelURL(novelURL));
-
-                            novel.put(Columns.READING_STATUS.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READING_STATUS.toString())));
-                            novel.put(Columns.READER_TYPE.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READER_TYPE.toString())));
-
-                            novel.put(Columns.TITLE.toString(), cursor.getString(cursor.getColumnIndex(Columns.TITLE.toString())));
-
-                            novel.put(Columns.IMAGE_URL.toString(), cursor.getString(cursor.getColumnIndex(Columns.IMAGE_URL.toString())));
-
-                            novel.put(Columns.DESCRIPTION.toString(), cursor.getString(cursor.getColumnIndex(Columns.DESCRIPTION.toString())));
-
-                            novel.put(Columns.GENRES.toString(), cursor.getString(cursor.getColumnIndex(Columns.GENRES.toString())));
-
-                            novel.put(Columns.AUTHORS.toString(), cursor.getString(cursor.getColumnIndex(Columns.AUTHORS.toString())));
-
-                            novel.put(Columns.STATUS.toString(), cursor.getString(cursor.getColumnIndex(Columns.STATUS.toString())));
-
-                            novel.put(Columns.TAGS.toString(), cursor.getString(cursor.getColumnIndex(Columns.TAGS.toString())));
-
-                            novel.put(Columns.ARTISTS.toString(), cursor.getString(cursor.getColumnIndex(Columns.ARTISTS.toString())));
-
-                            novel.put(Columns.LANGUAGE.toString(), cursor.getString(cursor.getColumnIndex(Columns.LANGUAGE.toString())));
-
-                            novel.put(Columns.MAX_CHAPTER_PAGE.toString(), cursor.getInt(cursor.getColumnIndex(Columns.MAX_CHAPTER_PAGE.toString())));
-
-                            NOVELS.put(novel);
-                        }
-                    }
-                BACKUP.put("novels", NOVELS);
-                cursor.close();
-            }
-
-            Log.i("Progress", "Backing up Chapters");
-            {
-                final JSONArray CHAPTERS = new JSONArray();
-                Cursor cursor = sqLiteDatabase.rawQuery("select * from " + Tables.CHAPTERS, null);
-                if (!(cursor.getCount() <= 0))
-                    while (cursor.moveToNext()) {
-                        int novelID = cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString()));
-                        boolean b = DatabaseNovels.isBookmarked(novelID);
-
-                        if (b) {
-                            int id = cursor.getInt(cursor.getColumnIndex(Columns.ID.toString()));
-                            JSONObject chapter = new JSONObject();
-                            chapter.put("novelURL", getNovelURLfromNovelID(novelID));
-                            chapter.put(Columns.URL.toString(), getChapterURLFromChapterID(id));
-
-                            chapter.put(Columns.TITLE.toString(), cursor.getString(cursor.getColumnIndex(Columns.TITLE.toString())));
-                            chapter.put(Columns.RELEASE_DATE.toString(), cursor.getString(cursor.getColumnIndex(Columns.RELEASE_DATE.toString())));
-                            chapter.put(Columns.ORDER.toString(), cursor.getInt(cursor.getColumnIndex(Columns.ORDER.toString())));
-
-                            chapter.put(Columns.Y.toString(), cursor.getInt(cursor.getColumnIndex(Columns.Y.toString())));
-                            chapter.put(Columns.READ_CHAPTER.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READ_CHAPTER.toString())));
-                            chapter.put(Columns.BOOKMARKED.toString(), cursor.getInt(cursor.getColumnIndex(Columns.BOOKMARKED.toString())));
-                            CHAPTERS.put(chapter);
-                        }
-                    }
-                BACKUP.put("chapters", CHAPTERS);
-                cursor.close();
-            }
-
-            BACKUP.put("settings", Serialize.getSettingsInJSON());
-
-            Log.i("Progress", "Writing");
-            File folder = new File(shoDir + "/backup/");
-            if (!folder.exists())
-                if (!folder.mkdirs()) {
-                    throw new IOException("Failed to mkdirs");
-                }
-            FileOutputStream fileOutputStream = new FileOutputStream(
-                    (folder.getPath() + "/backup-" + (new Date().toString()) + ".shoback")
-            );
-            fileOutputStream.write(("JSON+-=" + BACKUP.toString()).getBytes());
-            fileOutputStream.close();
-        } catch (@NonNull IOException | JSONException e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.kt
new file mode 100644
index 000000000..c791afe26
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/BackupProcess.kt
@@ -0,0 +1,123 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.settings.subFragments.backup.async
+
+import android.os.AsyncTask
+import android.util.Log
+import com.github.doomsdayrs.apps.shosetsu.backend.Serialize
+import com.github.doomsdayrs.apps.shosetsu.backend.Utilities
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.*
+import org.json.JSONArray
+import org.json.JSONException
+import org.json.JSONObject
+import java.io.File
+import java.io.FileOutputStream
+import java.io.IOException
+import java.util.*
+
+/*
+ * This file is part of shosetsu.
+ *
+ * shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */ /**
+ * shosetsu
+ * 16 / 08 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class BackupProcess : AsyncTask<Void?, Void?, Void?>() {
+    override fun onPreExecute() {
+        Log.i("Progress", "Starting backup")
+    }
+
+    override fun onPostExecute(aVoid: Void?) {
+        Log.i("Progress", "Finished backup")
+    }
+
+    protected override fun doInBackground(vararg voids: Void?): Void? {
+        try {
+            val BACKUP = JSONObject()
+            Log.i("Progress", "Backing up novels")
+            run {
+                val NOVELS = JSONArray()
+                val cursor = sqLiteDatabase.rawQuery("select * from " + Tables.NOVELS + " where " + Columns.BOOKMARKED + "=1", null)
+                if (cursor.count > 0) while (cursor.moveToNext()) { // Gets if it is in library, if not then it skips
+                    val bookmarked = Utilities.intToBoolean(cursor.getInt(cursor.getColumnIndex(Columns.BOOKMARKED.toString())))
+                    Log.i("NovelBack", "Valid?: $bookmarked")
+                    if (bookmarked) {
+                        val novelURL = DatabaseIdentification.getNovelURLfromNovelID(cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString())))
+                        val novel = JSONObject()
+                        novel.put(Columns.URL.toString(), novelURL)
+                        novel.put(Columns.FORMATTER_ID.toString(), DatabaseIdentification.getFormatterIDFromNovelURL(novelURL))
+                        novel.put(Columns.READING_STATUS.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READING_STATUS.toString())))
+                        novel.put(Columns.READER_TYPE.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READER_TYPE.toString())))
+                        novel.put(Columns.TITLE.toString(), cursor.getString(cursor.getColumnIndex(Columns.TITLE.toString())))
+                        novel.put(Columns.IMAGE_URL.toString(), cursor.getString(cursor.getColumnIndex(Columns.IMAGE_URL.toString())))
+                        novel.put(Columns.DESCRIPTION.toString(), cursor.getString(cursor.getColumnIndex(Columns.DESCRIPTION.toString())))
+                        novel.put(Columns.GENRES.toString(), cursor.getString(cursor.getColumnIndex(Columns.GENRES.toString())))
+                        novel.put(Columns.AUTHORS.toString(), cursor.getString(cursor.getColumnIndex(Columns.AUTHORS.toString())))
+                        novel.put(Columns.STATUS.toString(), cursor.getString(cursor.getColumnIndex(Columns.STATUS.toString())))
+                        novel.put(Columns.TAGS.toString(), cursor.getString(cursor.getColumnIndex(Columns.TAGS.toString())))
+                        novel.put(Columns.ARTISTS.toString(), cursor.getString(cursor.getColumnIndex(Columns.ARTISTS.toString())))
+                        novel.put(Columns.LANGUAGE.toString(), cursor.getString(cursor.getColumnIndex(Columns.LANGUAGE.toString())))
+                        novel.put(Columns.MAX_CHAPTER_PAGE.toString(), cursor.getInt(cursor.getColumnIndex(Columns.MAX_CHAPTER_PAGE.toString())))
+                        NOVELS.put(novel)
+                    }
+                }
+                BACKUP.put("novels", NOVELS)
+                cursor.close()
+            }
+            Log.i("Progress", "Backing up Chapters")
+            run {
+                val CHAPTERS = JSONArray()
+                val cursor = sqLiteDatabase.rawQuery("select * from " + Tables.CHAPTERS, null)
+                if (cursor.count > 0) while (cursor.moveToNext()) {
+                    val novelID = cursor.getInt(cursor.getColumnIndex(Columns.PARENT_ID.toString()))
+                    val b = DatabaseNovels.isBookmarked(novelID)
+                    if (b) {
+                        val id = cursor.getInt(cursor.getColumnIndex(Columns.ID.toString()))
+                        val chapter = JSONObject()
+                        chapter.put("novelURL", DatabaseIdentification.getNovelURLfromNovelID(novelID))
+                        chapter.put(Columns.URL.toString(), DatabaseIdentification.getChapterURLFromChapterID(id))
+                        chapter.put(Columns.TITLE.toString(), cursor.getString(cursor.getColumnIndex(Columns.TITLE.toString())))
+                        chapter.put(Columns.RELEASE_DATE.toString(), cursor.getString(cursor.getColumnIndex(Columns.RELEASE_DATE.toString())))
+                        chapter.put(Columns.ORDER.toString(), cursor.getInt(cursor.getColumnIndex(Columns.ORDER.toString())))
+                        chapter.put(Columns.Y.toString(), cursor.getInt(cursor.getColumnIndex(Columns.Y.toString())))
+                        chapter.put(Columns.READ_CHAPTER.toString(), cursor.getInt(cursor.getColumnIndex(Columns.READ_CHAPTER.toString())))
+                        chapter.put(Columns.BOOKMARKED.toString(), cursor.getInt(cursor.getColumnIndex(Columns.BOOKMARKED.toString())))
+                        CHAPTERS.put(chapter)
+                    }
+                }
+                BACKUP.put("chapters", CHAPTERS)
+                cursor.close()
+            }
+            BACKUP.put("settings", Serialize.getSettingsInJSON())
+            Log.i("Progress", "Writing")
+            val folder = File(Utilities.shoDir + "/backup/")
+            if (!folder.exists()) if (!folder.mkdirs()) {
+                throw IOException("Failed to mkdirs")
+            }
+            val fileOutputStream = FileOutputStream(
+                    folder.path + "/backup-" + Date().toString() + ".shoback"
+            )
+            fileOutputStream.write("JSON+-=$BACKUP".toByteArray())
+            fileOutputStream.close()
+        } catch (e: IOException) {
+            e.printStackTrace()
+        } catch (e: JSONException) {
+            e.printStackTrace()
+        }
+        return null
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.kt
similarity index 50%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.kt
index 04667992b..8274cd63a 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/settings/subFragments/backup/async/RestoreProcess.kt
@@ -1,4 +1,25 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.settings.subFragments.backup.async;
+package com.github.doomsdayrs.apps.shosetsu.ui.settings.subFragments.backup.async
+
+import android.annotation.SuppressLint
+import android.app.Dialog
+import android.content.Context
+import android.os.AsyncTask
+import android.util.Log
+import android.view.View
+import android.widget.Button
+import android.widget.ProgressBar
+import android.widget.TextView
+import android.widget.Toast
+import com.github.doomsdayrs.apps.shosetsu.R
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.*
+import org.json.JSONException
+import org.json.JSONObject
+import java.io.BufferedReader
+import java.io.File
+import java.io.FileReader
+import java.io.IOException
+
 /*
  * This file is part of shosetsu.
  *
@@ -15,139 +36,66 @@ package com.github.doomsdayrs.apps.shosetsu.ui.settings.subFragments.backup.asyn
  * You should have received a copy of the GNU General Public License
  * along with shosetsu.  If not, see <https://www.gnu.org/licenses/>.
  * ====================================================================
- */
-
-import android.annotation.SuppressLint;
-import android.app.Dialog;
-import android.content.Context;
-import android.os.AsyncTask;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.Columns;
-import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.Tables;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseChapter.isNotInChapters;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.addNovel;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterIDFromChapterURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromNovelURL;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseNovels.isNotInNovels;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.sqLiteDatabase;
-
-/**
+ */ /**
  * shosetsu
  * 16 / 08 / 2019
  *
  * @author github.com/doomsdayrs
  */
-public class RestoreProcess extends AsyncTask<Void, Void, Boolean> {
-    private final String file_path;
-
-    @NonNull
-    @SuppressLint("StaticFieldLeak")
-    private final
-    Context context;
+class RestoreProcess(private val file_path: String, @field:SuppressLint("StaticFieldLeak") private val context: Context) : AsyncTask<Void?, Void?, Boolean>() {
     @SuppressLint("StaticFieldLeak")
-    private final
-    Button close;
+    private val close: Button
     @SuppressLint("StaticFieldLeak")
-    private final
-    ProgressBar progressBar;
+    private val progressBar: ProgressBar
     @SuppressLint("StaticFieldLeak")
-    private final
-    ProgressBar progressBar2;
+    private val progressBar2: ProgressBar
     @SuppressLint("StaticFieldLeak")
-    private final
-    TextView textView;
-
-    @NonNull
-    private final Dialog dialog;
-
-    public RestoreProcess(String file_path, @NonNull Context context) {
-        this.file_path = file_path;
-        this.context = context;
-
-        dialog = new Dialog(context);
-        dialog.setContentView(R.layout.backup_restore_view);
-        close = dialog.findViewById(R.id.button);
-        progressBar = dialog.findViewById(R.id.progress);
-        progressBar2 = dialog.findViewById(R.id.progressBar3);
-        textView = dialog.findViewById(R.id.text);
+    private val textView: TextView
+    private val dialog: Dialog
+    override fun onPreExecute() {
+        Log.i("Progress", "Started restore")
+        dialog.show()
     }
 
-    @Override
-    protected void onPreExecute() {
-        Log.i("Progress", "Started restore");
-        dialog.show();
-    }
-
-    @Override
-    protected void onPostExecute(Boolean b) {
+    override fun onPostExecute(b: Boolean) {
         if (b) {
-            Log.i("Progress", "Completed restore");
-            textView.post(() -> textView.setText(R.string.completed));
-            progressBar2.post(() -> progressBar2.setVisibility(View.GONE));
-            close.post(() -> close.setOnClickListener(view -> dialog.cancel()));
+            Log.i("Progress", "Completed restore")
+            textView.post { textView.setText(R.string.completed) }
+            progressBar2.post { progressBar2.visibility = View.GONE }
+            close.post { close.setOnClickListener { view: View? -> dialog.cancel() } }
         } else {
-            dialog.cancel();
-            Toast.makeText(context, "Failed to process", Toast.LENGTH_SHORT).show();
+            dialog.cancel()
+            Toast.makeText(context, "Failed to process", Toast.LENGTH_SHORT).show()
         }
     }
 
-    @NonNull
     @SuppressLint("SetTextI18n")
-    @Override
-    protected Boolean doInBackground(Void... voids) {
-        File file = new File("" + file_path);
-
+    protected override fun doInBackground(vararg voids: Void?): Boolean {
+        val file = File("" + file_path)
         if (file.exists()) {
             try {
-                BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
-
-                textView.post(() -> textView.setText(R.string.reading_file));
-
-                StringBuilder string = new StringBuilder();
-                {
-                    String line;
-                    while ((line = bufferedReader.readLine()) != null) {
-                        string.append(line);
+                val bufferedReader = BufferedReader(FileReader(file))
+                textView.post { textView.setText(R.string.reading_file) }
+                val string = StringBuilder()
+                run {
+                    var line: String?
+                    while (bufferedReader.readLine().also { line = it } != null) {
+                        string.append(line)
                     }
-                    bufferedReader.close();
+                    bufferedReader.close()
                 }
-                final JSONObject BACKUP = new JSONObject(string.substring(7));
-                JSONArray novels = BACKUP.getJSONArray("novels");
-                JSONArray chapters = BACKUP.getJSONArray("chapters");
-
-
-                progressBar.post(() -> progressBar.setMax(novels.length() + chapters.length() + 1));
-
-
-                Log.i("Progress", "Restoring novels");
-                for (int x = 0; x < novels.length(); x++) {
-                    JSONObject novel = novels.getJSONObject(x);
-                    String novelURL = novel.getString(Columns.URL.toString());
-                    textView.post(() -> textView.setText("Restoring: " + novelURL));
-
-                    if (Database.DatabaseNovels.isNotInNovels(novelURL)) {
-                        addNovel(novelURL, novel.getInt(Columns.FORMATTER_ID.toString()));
-                        int id = getNovelIDFromNovelURL(novelURL);
+                val BACKUP = JSONObject(string.substring(7))
+                val novels = BACKUP.getJSONArray("novels")
+                val chapters = BACKUP.getJSONArray("chapters")
+                progressBar.post { progressBar.max = novels.length() + chapters.length() + 1 }
+                Log.i("Progress", "Restoring novels")
+                for (x in 0 until novels.length()) {
+                    val novel = novels.getJSONObject(x)
+                    val novelURL = novel.getString(Columns.URL.toString())
+                    textView.post { textView.text = "Restoring: $novelURL" }
+                    if (DatabaseNovels.isNotInNovels(novelURL)) {
+                        DatabaseIdentification.addNovel(novelURL, novel.getInt(Columns.FORMATTER_ID.toString()))
+                        val id = DatabaseIdentification.getNovelIDFromNovelURL(novelURL)
                         try {
                             sqLiteDatabase.execSQL("insert into " + Tables.NOVELS + "(" +
                                     Columns.PARENT_ID + "," +
@@ -179,38 +127,31 @@ public class RestoreProcess extends AsyncTask<Void, Void, Boolean> {
                                     "'" + novel.getString(Columns.ARTISTS.toString()) + "'," +
                                     "'" + novel.getString(Columns.LANGUAGE.toString()) + "'," +
                                     novel.getInt(Columns.MAX_CHAPTER_PAGE.toString()) +
-                                    ")");
-
-                        } catch (Exception e) {
-                            e.printStackTrace();
+                                    ")")
+                        } catch (e: Exception) {
+                            e.printStackTrace()
                         }
                     } else {
                         sqLiteDatabase.execSQL("update " + Tables.NOVELS + " set " +
                                 Columns.BOOKMARKED + "=1," +
-                                Columns.READING_STATUS + "=" + novel.get(Columns.READING_STATUS.toString()) + "," +
-                                Columns.READER_TYPE + "=" + novel.get(Columns.READER_TYPE.toString()) +
-                                " where " + Columns.PARENT_ID + "=" + getNovelIDFromNovelURL(novelURL)
-                        );
+                                Columns.READING_STATUS + "=" + novel[Columns.READING_STATUS.toString()] + "," +
+                                Columns.READER_TYPE + "=" + novel[Columns.READER_TYPE.toString()] +
+                                " where " + Columns.PARENT_ID + "=" + DatabaseIdentification.getNovelIDFromNovelURL(novelURL)
+                        )
                     }
-
-
-                    progressBar.post(() -> progressBar.incrementProgressBy(1));
+                    progressBar.post { progressBar.incrementProgressBy(1) }
                 }
-
-                Log.i("Progress", "Restoring chapters");
-                for (int x = 0; x < chapters.length(); x++) {
-                    JSONObject chapter = chapters.getJSONObject(x);
-                    String chapterURL = chapter.getString(Columns.URL.toString());
-                    String novelURL = chapter.getString("novelURL");
-
-                    textView.post(() -> textView.setText("Restoring: " + novelURL + "|" + chapterURL));
-                    progressBar.post(() -> progressBar.incrementProgressBy(1));
-                    if (!isNotInChapters(chapterURL)) {
-                        int novelID = getNovelIDFromNovelURL(novelURL);
-
-                        Database.DatabaseIdentification.addChapter(novelID, chapterURL);
-                        int chapterID = getChapterIDFromChapterURL(chapterURL);
-
+                Log.i("Progress", "Restoring chapters")
+                for (x in 0 until chapters.length()) {
+                    val chapter = chapters.getJSONObject(x)
+                    val chapterURL = chapter.getString(Columns.URL.toString())
+                    val novelURL = chapter.getString("novelURL")
+                    textView.post { textView.text = "Restoring: $novelURL|$chapterURL" }
+                    progressBar.post { progressBar.incrementProgressBy(1) }
+                    if (!DatabaseChapter.isNotInChapters(chapterURL)) {
+                        val novelID = DatabaseIdentification.getNovelIDFromNovelURL(novelURL)
+                        DatabaseIdentification.addChapter(novelID, chapterURL)
+                        val chapterID = DatabaseIdentification.getChapterIDFromChapterURL(chapterURL)
                         sqLiteDatabase.execSQL("insert into " + Tables.CHAPTERS +
                                 "(" +
                                 Columns.ID + "," +
@@ -234,29 +175,35 @@ public class RestoreProcess extends AsyncTask<Void, Void, Boolean> {
                                 chapter.getInt(Columns.READ_CHAPTER.toString()) + "," +
                                 chapter.getInt(Columns.BOOKMARKED.toString()) + "," +
                                 0 + ")")
-                        ;
                     } else {
                         sqLiteDatabase.execSQL("update " + Tables.CHAPTERS + " set " +
                                 Columns.Y + "=" + chapter.getString(Columns.Y.toString()) + "," +
                                 Columns.READ_CHAPTER + "=" + chapter.getString(Columns.READ_CHAPTER.toString()) + "," +
                                 Columns.BOOKMARKED + "=" + chapter.getString(Columns.BOOKMARKED.toString()) +
-                                " where " + Columns.ID + "=" + getChapterIDFromChapterURL(chapter.getString(Columns.URL.toString()))
-                        );
+                                " where " + Columns.ID + "=" + DatabaseIdentification.getChapterIDFromChapterURL(chapter.getString(Columns.URL.toString()))
+                        )
                     }
-
                 }
-
-                textView.post(() -> textView.setText("Restoring settings"));
-                progressBar.post(() -> progressBar.incrementProgressBy(1));
-
+                textView.post { textView.text = "Restoring settings" }
+                progressBar.post { progressBar.incrementProgressBy(1) }
                 //TODO Settings
-                progressBar.post(() -> progressBar.incrementProgressBy(1));
-                return true;
-            } catch (@NonNull IOException | JSONException e) {
-                e.printStackTrace();
+                progressBar.post { progressBar.incrementProgressBy(1) }
+                return true
+            } catch (e: IOException) {
+                e.printStackTrace()
+            } catch (e: JSONException) {
+                e.printStackTrace()
             }
         }
+        return false
+    }
 
-        return false;
+    init {
+        dialog = Dialog(context)
+        dialog.setContentView(R.layout.backup_restore_view)
+        close = dialog.findViewById(R.id.button)
+        progressBar = dialog.findViewById(R.id.progress)
+        progressBar2 = dialog.findViewById(R.id.progressBar3)
+        textView = dialog.findViewById(R.id.text)
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt
index acfe129cd..843df1863 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/updates/adapters/UpdatedChaptersAdapter.kt
@@ -24,6 +24,7 @@ import android.view.MenuItem
 import android.view.View
 import android.view.ViewGroup
 import androidx.recyclerview.widget.RecyclerView
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
 import com.github.doomsdayrs.api.shosetsu.services.core.objects.NovelPage
 import com.github.doomsdayrs.apps.shosetsu.R
 import com.github.doomsdayrs.apps.shosetsu.backend.DownloadManager
@@ -38,6 +39,7 @@ import com.github.doomsdayrs.apps.shosetsu.ui.updates.viewHolder.UpdatedNovelHol
 import com.github.doomsdayrs.apps.shosetsu.variables.DefaultScrapers.Companion.getByID
 import com.github.doomsdayrs.apps.shosetsu.variables.DownloadItem
 import com.github.doomsdayrs.apps.shosetsu.variables.enums.Status
+import java.util.*
 
 /**
  * Shosetsu
@@ -68,7 +70,7 @@ class UpdatedChaptersAdapter(private val updatedNovelHolder: UpdatedNovelHolder)
                 var novelPage = NovelPage()
                 val nURL = getNovelURLFromChapterURL(updatedChapterHolder.novelChapter?.link)
                 if (nURL != null) novelPage = Database.DatabaseNovels.getNovelPage(getNovelIDFromNovelURL(nURL))
-                val formatter = getByID(getFormatterIDFromNovelURL(nURL))
+                val formatter: Formatter = getByID(getFormatterIDFromNovelURL(nURL))!!
                 val chapterID = getChapterIDFromChapterURL(novelChapter.link)
                 when (menuItem.itemId) {
                     R.id.popup_chapter_menu_bookmark -> {
@@ -82,10 +84,10 @@ class UpdatedChaptersAdapter(private val updatedNovelHolder: UpdatedNovelHolder)
                     R.id.popup_chapter_menu_download -> {
                         run {
                             if (!isSaved(chapterID)) {
-                                val downloadItem = DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title, chapterID)
+                                val downloadItem = DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title!!, chapterID)
                                 DownloadManager.addToDownload(updatedNovelHolder.activity, downloadItem)
                             } else {
-                                if (DownloadManager.delete(updatedChapterHolder.itemView.context, DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title, chapterID))) {
+                                if (DownloadManager.delete(updatedChapterHolder.itemView.context, DownloadItem(formatter, novelPage.title, updatedChapterHolder.novelChapter?.title!!, chapterID))) {
                                     updatedChapterHolder.downloadTag.visibility = View.INVISIBLE
                                 }
                             }
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.kt
similarity index 64%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.kt
index ea939524d..99a19ee3e 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/Actions.kt
@@ -1,6 +1,6 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.webView;
+package com.github.doomsdayrs.apps.shosetsu.ui.webView
 
-import java.util.ArrayList;
+import java.util.*
 
 /*
  * This file is part of Shosetsu.
@@ -23,23 +23,17 @@ import java.util.ArrayList;
  *
  * @author github.com/doomsdayrs
  */
-public enum Actions {
-    VIEW(0),
-    CLOUD_FLARE(1);
-    public static final ArrayList<Actions> actions = new ArrayList<>();
+enum class Actions(val action: Int) {
+    VIEW(0), CLOUD_FLARE(1);
 
-    static {
-        actions.add(Actions.VIEW);
-        actions.add(Actions.CLOUD_FLARE);
-    }
-
-    private final int action;
+    companion object {
+        @kotlin.jvm.JvmField
+        val actions = ArrayList<Actions>()
 
-    Actions(int action) {
-        this.action = action;
+        init {
+            actions.add(VIEW)
+            actions.add(CLOUD_FLARE)
+        }
     }
 
-    public int getAction() {
-        return action;
-    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.kt
similarity index 79%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.kt
index 4a97f01b8..6100ffa22 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/JSInterface.kt
@@ -1,6 +1,6 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.webView;
+package com.github.doomsdayrs.apps.shosetsu.ui.webView
 
-import android.content.Context;
+import android.content.Context
 
 /*
  * This file is part of Shosetsu.
@@ -23,18 +23,13 @@ import android.content.Context;
  *
  * @author github.com/doomsdayrs
  */
-class JSInterface {
-    private final Context ctx;
+internal class JSInterface // --Commented out by Inspection START (12/22/19 11:10 AM):
+(private val ctx: Context) {
 
-    JSInterface(Context ctx) {
-        this.ctx = ctx;
-    }
-
-// --Commented out by Inspection START (12/22/19 11:10 AM):
-//    @JavascriptInterface
+    //    @JavascriptInterface
 //    public void showHTML(String html) {
 //        new AlertDialog.Builder(ctx).setTitle("HTML").setMessage(html)
 //                .setPositiveButton(android.R.string.ok, null).setCancelable(false).create().show();
 //    }
 // --Commented out by Inspection STOP (12/22/19 11:10 AM)
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.java
deleted file mode 100644
index 21b8333e5..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.webView;
-
-import android.annotation.SuppressLint;
-import android.content.Intent;
-import android.os.Bundle;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * shosetsu
- * 31 / 07 / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class WebViewApp extends AppCompatActivity {
-
-
-    private WebView webView;
-
-    @SuppressLint("SetJavaScriptEnabled")
-    @Override
-    protected void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.webview);
-        webView = findViewById(R.id.webview);
-        Intent intent = getIntent();
-        Actions action = Actions.actions.get(intent.getIntExtra("action", 0));
-        webView.getSettings().setJavaScriptEnabled(true);
-
-        switch (action) {
-            case VIEW:
-                webView.setWebViewClient(new WebViewClient());
-                break;
-            case CLOUD_FLARE:
-                webView.addJavascriptInterface(new JSInterface(this), "HtmlViewer");
-                webView.setWebViewClient(new WebViewClient() {
-                    @Override
-                    public void onPageFinished(WebView view, String url) {
-                        webView.loadUrl("javascript:window.HtmlViewer.showHTML" +
-                                "('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');");
-                        finish();
-                    }
-                });
-
-                break;
-            default:
-                break;
-        }
-
-        webView.loadUrl(intent.getStringExtra("url"));
-    }
-
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.kt
new file mode 100644
index 000000000..0d2b7eb24
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/webView/WebViewApp.kt
@@ -0,0 +1,57 @@
+package com.github.doomsdayrs.apps.shosetsu.ui.webView
+
+import android.annotation.SuppressLint
+import android.os.Bundle
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import androidx.appcompat.app.AppCompatActivity
+import com.github.doomsdayrs.apps.shosetsu.R
+import kotlinx.android.synthetic.main.webview.*
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * shosetsu
+ * 31 / 07 / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class WebViewApp : AppCompatActivity() {
+    @SuppressLint("SetJavaScriptEnabled", "JavascriptInterface")
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.webview)
+        val intent = intent
+        val action = Actions.actions[intent.getIntExtra("action", 0)]
+        webview.settings.javaScriptEnabled = true
+        when (action) {
+            Actions.VIEW -> webview.webViewClient = WebViewClient()
+            Actions.CLOUD_FLARE -> {
+                webview.addJavascriptInterface(JSInterface(this), "HtmlViewer")
+                webview.webViewClient = object : WebViewClient() {
+                    override fun onPageFinished(view: WebView, url: String) {
+                        webview.loadUrl("javascript:window.HtmlViewer.showHTML" +
+                                "('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');")
+                        finish()
+                    }
+                }
+            }
+            else -> {
+            }
+        }
+        webview.loadUrl(intent.getStringExtra("url"))
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java
deleted file mode 100644
index 366966f25..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.variables;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
-
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getChapterURLFromChapterID;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelIDFromChapterID;
-import static com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification.getNovelURLfromNovelID;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- */
-
-/**
- * Shosetsu
- * 16 / 06 / 2019
- *
- * @author github.com/doomsdayrs
- * <p>
- * These items symbolize download items and their data
- */
-public class DownloadItem {
-
-    public final Formatter formatter;
-    @NonNull
-    public final String novelName;
-    @NonNull
-    public final String chapterName;
-    @Nullable
-    public final String chapterURL;
-    public final int chapterID;
-
-    //Variables only for download manager
-
-    private String status = "Pending";
-
-    /**
-     * Constructor
-     *
-     * @param formatter   formatter to work with
-     * @param novelName   name of the novel
-     * @param chapterName name of the chapter
-     * @param chapterID   ChapterID
-     */
-    public DownloadItem(Formatter formatter, String novelName, String chapterName, int chapterID) {
-        this.formatter = formatter;
-        this.novelName = cleanse(novelName);
-        this.chapterName = cleanse(chapterName);
-        int novelID = getNovelIDFromChapterID(chapterID);
-        String novelURL = getNovelURLfromNovelID(novelID);
-        this.chapterURL = getChapterURLFromChapterID(chapterID);
-        this.chapterID = chapterID;
-    }
-
-    /**
-     * Returns the status
-     *
-     * @return Status
-     */
-    public String getStatus() {
-        return status;
-    }
-
-    /**
-     * Sets the status of the download item
-     *
-     * @param status status to set
-     */
-    public void setStatus(String status) {
-        this.status = status;
-    }
-
-
-    /**
-     * Cleans up the names to be functional in file system and DB
-     *
-     * @param s string to clean
-     * @return cleaned string
-     */
-    public static String cleanse(String s) {
-        //Log.d("Cleaning", s);
-        s = s.replaceAll("'", "_").replaceAll("\"", "_");
-        // Log.d("Cleaned", s);
-        return s;
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.kt
new file mode 100644
index 000000000..bafffe59b
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/DownloadItem.kt
@@ -0,0 +1,85 @@
+package com.github.doomsdayrs.apps.shosetsu.variables
+
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
+import com.github.doomsdayrs.apps.shosetsu.backend.database.Database.DatabaseIdentification
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ */
+/**
+ * Shosetsu
+ * 16 / 06 / 2019
+ *
+ * @author github.com/doomsdayrs
+ *
+ *
+ * These items symbolize download items and their data
+ */
+class DownloadItem(val formatter: Formatter, novelName: String, chapterName: String, chapterID: Int) {
+    @JvmField
+    val novelName: String
+    @JvmField
+    val chapterName: String
+    @JvmField
+    val chapterURL: String?
+    val chapterID: Int
+    /**
+     * Returns the status
+     *
+     * @return Status
+     */
+    /**
+     * Sets the status of the download item
+     *
+     * @param status status to set
+     */
+    //Variables only for download manager
+    var status = "Pending"
+
+    companion object {
+        /**
+         * Cleans up the names to be functional in file system and DB
+         *
+         * @param s string to clean
+         * @return cleaned string
+         */
+        @JvmStatic
+        fun cleanse(s: String): String { //Log.d("Cleaning", s);
+            var s = s
+            s = s.replace("'".toRegex(), "_").replace("\"".toRegex(), "_")
+            // Log.d("Cleaned", s);
+            return s
+        }
+    }
+
+    /**
+     * Constructor
+     *
+     * @param formatter   formatter to work with
+     * @param novelName   name of the novel
+     * @param chapterName name of the chapter
+     * @param chapterID   ChapterID
+     */
+    init {
+        this.novelName = cleanse(novelName)
+        this.chapterName = cleanse(chapterName)
+        val novelID = DatabaseIdentification.getNovelIDFromChapterID(chapterID)
+        val novelURL = DatabaseIdentification.getNovelURLfromNovelID(novelID)
+        chapterURL = DatabaseIdentification.getChapterURLFromChapterID(chapterID)
+        this.chapterID = chapterID
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.java
deleted file mode 100644
index dd891dbbe..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.enums;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 20 / 06 / 2019
- *
- * @author github.com/doomsdayrs
- */
-
-import androidx.annotation.NonNull;
-
-/**
- * Status of novel/Chapter
- */
-public enum Status {
-    // Novels and chapters
-    UNREAD(0, "Unread"),
-    READING(1, "Reading"),
-    READ(2, "Read"),
-    // These two are for novels only
-    ONHOLD(3, "OnHold"),
-    DROPPED(4, "Dropped"),
-    UNKNOWN(-1, "Unknown");
-
-    private final int a;
-
-    private final String status;
-
-    Status(int a, String status) {
-        this.a = a;
-        this.status = status;
-    }
-
-    public int getA() {
-        return a;
-    }
-
-    public String getStatus() {
-        return status;
-    }
-
-    @NonNull
-    @Override
-    public String toString() {
-        return "" + a;
-    }
-
-    @NonNull
-    public static Status getStatus(int a) {
-        switch (a) {
-            case 0:
-                return UNREAD;
-            case 1:
-                return READING;
-            case 2:
-                return READ;
-            case 3:
-                return ONHOLD;
-            case 4:
-                return DROPPED;
-            default:
-                return UNKNOWN;
-        }
-    }
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.kt
similarity index 52%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.kt
index ca108769a..e81a762e2 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/ui/downloads/viewHolders/DownloadItemView.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Status.kt
@@ -1,12 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.ui.downloads.viewHolders;
-
-import android.view.View;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.github.doomsdayrs.apps.shosetsu.R;
+package com.github.doomsdayrs.apps.shosetsu.variables.enums
 
 /*
  * This file is part of Shosetsu.
@@ -25,18 +17,33 @@ import com.github.doomsdayrs.apps.shosetsu.R;
  * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
  * ====================================================================
  * Shosetsu
- * 16 / 06 / 2019
+ * 20 / 06 / 2019
  *
  * @author github.com/doomsdayrs
+ */ /**
+ * Status of novel/Chapter
  */
-public class DownloadItemView extends RecyclerView.ViewHolder {
+enum class Status(val a: Int, val status: String) {
+    // Novels and chapters
+    UNREAD(0, "Unread"),
+    READING(1, "Reading"), READ(2, "Read"),  // These two are for novels only
+    ONHOLD(3, "OnHold"), DROPPED(4, "Dropped"), UNKNOWN(-1, "Unknown");
 
-    public final TextView title;
-    public final TextView status;
+    override fun toString(): String {
+        return "" + a
+    }
 
-    public DownloadItemView(@NonNull View itemView) {
-        super(itemView);
-        title = itemView.findViewById(R.id.recycler_download_card_title);
-        status = itemView.findViewById(R.id.recycler_download_card_status);
+    companion object {
+        fun getStatus(a: Int): Status {
+            return when (a) {
+                0 -> UNREAD
+                1 -> READING
+                2 -> READ
+                3 -> ONHOLD
+                4 -> DROPPED
+                else -> UNKNOWN
+            }
+        }
     }
-}
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.kt
similarity index 64%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.kt
index b4a878cf2..81d4e16b7 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/enums/Types.kt
@@ -1,6 +1,4 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.enums;
-
-import org.jetbrains.annotations.NotNull;
+package com.github.doomsdayrs.apps.shosetsu.variables.enums
 
 /*
  * This file is part of Shosetsu.
@@ -27,35 +25,16 @@ import org.jetbrains.annotations.NotNull;
 /**
  * Used for setting fragments
  */
-public enum Types {
-    DOWNLOAD("Download"),
-    VIEW("Reader View"),
-    ADVANCED("Advanced"),
-    INFO("Info"),
-    BACKUP("Backup");
-
-    /**
-     * Type name
-     */
-    private final String name;
-
-    /**
-     * Constructor
-     *
-     * @param name name of type
-     */
-    Types(String name) {
-        this.name = name;
-    }
+enum class Types(private val internalNAme: String) {
+    DOWNLOAD("Download"), VIEW("Reader View"), ADVANCED("Advanced"), INFO("Info"), BACKUP("Backup");
 
     /**
      * toString overriding method
      *
      * @return name of type
      */
-    @NotNull
-    @Override
-    public String toString() {
-        return name;
+    override fun toString(): String {
+        return internalNAme
     }
+
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.kt
similarity index 70%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.kt
index c05e4ed6b..da97272fc 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueCard.kt
@@ -1,8 +1,6 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects;
+package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects
 
-import androidx.annotation.NonNull;
-
-import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
+import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter
 
 /*
  * This file is part of Shosetsu.
@@ -25,22 +23,13 @@ import com.github.doomsdayrs.api.shosetsu.services.core.dep.Formatter;
  *
  * @author github.com/doomsdayrs
  */
-public class CatalogueCard extends RecycleCard {
-    /**
-     * Formatter
-     */
-    @NonNull
-    public final Formatter formatter;
-
-    /**
-     * Constructor
-     *
-     * @param formatter the formatter
-     */
-    public CatalogueCard(@NonNull Formatter formatter) {
-        super(formatter.getName());
-        this.formatter = formatter;
-    }
-
-
-}
+class CatalogueCard
+/**
+ * Constructor
+ *
+ * @param formatter the formatter
+ */(
+        /**
+         * Formatter
+         */
+        val formatter: Formatter) : RecycleCard(formatter.name)
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.java
deleted file mode 100644
index ea4468a16..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects;
-
-import java.io.Serializable;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class CatalogueNovelCard extends RecycleCard implements Serializable {
-    /**
-     * Image novelURL
-     */
-    public final String imageURL;
-
-    public final int novelID;
-    /**
-     * link to the novel
-     */
-    public final String novelURL;
-
-    /**
-     * Constructor
-     *  @param imageURL image chapterURL
-     * @param title    title
-     * @param novelID id of novel
-     * @param novelURL novelURL
-     */
-    public CatalogueNovelCard(String imageURL, String title, int novelID, String novelURL) {
-        super(title);
-        this.imageURL = imageURL;
-        this.novelID = novelID;
-        this.novelURL = novelURL;
-    }
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.kt
new file mode 100644
index 000000000..7e2265263
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/CatalogueNovelCard.kt
@@ -0,0 +1,41 @@
+package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects
+
+import java.io.Serializable
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class CatalogueNovelCard
+/**
+ * Constructor
+ * @param imageURL image chapterURL
+ * @param title    title
+ * @param novelID id of novel
+ * @param novelURL novelURL
+ */(
+        /**
+         * Image novelURL
+         */
+        val imageURL: String, title: String, val novelID: Int,
+        /**
+         * link to the novel
+         */
+        val novelURL: String) : RecycleCard(title), Serializable
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java
deleted file mode 100644
index 06b73fe5d..000000000
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects;
-
-import androidx.annotation.NonNull;
-
-/*
- * This file is part of Shosetsu.
- *
- * Shosetsu is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * Shosetsu is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
- * ====================================================================
- * Shosetsu
- * 9 / June / 2019
- *
- * @author github.com/doomsdayrs
- */
-public class NovelCard extends RecycleCard {
-
-    public final int novelID;
-    /**
-     * NovelURL
-     */
-    @NonNull
-    public final String novelURL;
-    /**
-     * ImageURL
-     */
-    public final String imageURL;
-    /**
-     * ID of formatter
-     */
-    public final int formatterID;
-
-    /**
-     * Constructor
-     *
-     * @param title       title
-     * @param novelID   novel ID
-     * @param novelURL    novelURL
-     * @param imageURL    imageURL
-     * @param formatterID id of formatter
-     */
-    public NovelCard(String title, int novelID, String novelURL, String imageURL, int formatterID) {
-        super(title);
-        this.novelID = novelID;
-        this.novelURL = novelURL;
-        this.imageURL = imageURL;
-        this.formatterID = formatterID;
-    }
-
-
-}
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.kt b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.kt
new file mode 100644
index 000000000..53eccb612
--- /dev/null
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/NovelCard.kt
@@ -0,0 +1,45 @@
+package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects
+
+/*
+ * This file is part of Shosetsu.
+ *
+ * Shosetsu is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Shosetsu is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
+ * ====================================================================
+ * Shosetsu
+ * 9 / June / 2019
+ *
+ * @author github.com/doomsdayrs
+ */
+class NovelCard
+/**
+ * Constructor
+ *
+ * @param title       title
+ * @param novelID   novel ID
+ * @param novelURL    novelURL
+ * @param imageURL    imageURL
+ * @param formatterID id of formatter
+ */(title: String, val novelID: Int,
+    /**
+     * NovelURL
+     */
+    val novelURL: String,
+    /**
+     * ImageURL
+     */
+    val imageURL: String,
+    /**
+     * ID of formatter
+     */
+    val formatterID: Int) : RecycleCard(title)
\ No newline at end of file
diff --git a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.java b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.kt
similarity index 73%
rename from app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.java
rename to app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.kt
index 98adbdf20..371723192 100644
--- a/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.java
+++ b/app/src/main/java/com/github/doomsdayrs/apps/shosetsu/variables/recycleObjects/RecycleCard.kt
@@ -1,6 +1,6 @@
-package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects;
+package com.github.doomsdayrs.apps.shosetsu.variables.recycleObjects
 
-import com.github.doomsdayrs.apps.shosetsu.R;
+import com.github.doomsdayrs.apps.shosetsu.R
 
 /*
  * This file is part of Shosetsu.
@@ -19,35 +19,29 @@ import com.github.doomsdayrs.apps.shosetsu.R;
  * along with Shosetsu.  If not, see <https://www.gnu.org/licenses/>.
  * ====================================================================
  */
-
 /**
  * Shosetsu
- * <p>
+ *
+ *
  * 9 / June / 2019
  *
  * @author github.com/doomsdayrs
  *
  * This is a recycle card, it is used for the recyclers in the program.
  */
-public class RecycleCard {
+open class RecycleCard
+/**
+ * Constructor
+ *
+ * @param title text of card
+ */ internal constructor(
+        /**
+         * Text of the card
+         */
+        val title: String) {
     /**
      * If there isn't an image loaded in, this will be the image
      */
-    public final int libraryImageResource = R.drawable.ic_close_black_24dp;
-
-    /**
-     * Text of the card
-     */
-    public final String title;
-
-    /**
-     * Constructor
-     *
-     * @param title text of card
-     */
-    RecycleCard(String title) {
-        this.title = title;
-    }
-
+    val libraryImageResource = R.drawable.ic_close_black_24dp
 
-}
+}
\ No newline at end of file
