M	reproducible-apk-tools
diff --git a/app/src/main/java/com/example/swob_deku/Models/RMQ/RMQWorkManager.java b/app/src/main/java/com/example/swob_deku/Models/RMQ/RMQWorkManager.java
index f937f7c2..8fa570b0 100644
--- a/app/src/main/java/com/example/swob_deku/Models/RMQ/RMQWorkManager.java
+++ b/app/src/main/java/com/example/swob_deku/Models/RMQ/RMQWorkManager.java
@@ -9,6 +9,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Build;
+import android.util.Log;
 
 import androidx.annotation.NonNull;
 import androidx.core.app.NotificationCompat;
@@ -19,6 +20,7 @@ import androidx.work.WorkerParameters;
 import com.example.swob_deku.GatewayClientCustomizationActivity;
 import com.example.swob_deku.GatewayClientListingActivity;
 import com.example.swob_deku.MessagesThreadsActivity;
+import com.example.swob_deku.Models.Web.WebWebsocketsService;
 import com.example.swob_deku.R;
 
 public class RMQWorkManager extends Worker {
@@ -37,6 +39,7 @@ public class RMQWorkManager extends Worker {
     @Override
     public Result doWork() {
         Intent intent = new Intent(getApplicationContext(), RMQConnectionService.class);
+        _startWebsocketsServices();
         if(!sharedPreferences.getAll().isEmpty()) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                 try {
@@ -58,6 +61,16 @@ public class RMQWorkManager extends Worker {
         return null;
     }
 
+    private void _startWebsocketsServices(){
+        Intent intent = new Intent(getApplicationContext(), WebWebsocketsService.class);
+        Log.d(getClass().getName(), "+ Starting websockets...");
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            context.startForegroundService(intent);
+        } else {
+            context.startService(intent);
+        }
+    }
+
     private void notifyUserToReconnectSMSServices(){
         Intent notificationIntent = new Intent(getApplicationContext(), MessagesThreadsActivity.class);
         PendingIntent pendingIntent =
diff --git a/app/src/main/java/com/example/swob_deku/Models/SMS/SMS.java b/app/src/main/java/com/example/swob_deku/Models/SMS/SMS.java
index 693c0b1a..aa6c40a1 100644
--- a/app/src/main/java/com/example/swob_deku/Models/SMS/SMS.java
+++ b/app/src/main/java/com/example/swob_deku/Models/SMS/SMS.java
@@ -31,18 +31,26 @@ import java.security.KeyPair;
 import java.security.PublicKey;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public class SMS {
     // https://developer.android.com/reference/android/provider/Telephony.TextBasedSmsColumns#constants_1
 
-    String body = new String();
-    public String displayName = "";
-
-    public int displayColor = -1;
-
-    public boolean isContact = false;
+    public String body;
+    public String address;
+    public String threadId;
+    public String date;
+    int type;
+    public String errorCode;
+    public int statusCode;
+    public String id;
+    public int read;
+    public String routerStatus;
+    public int subscriptionId;
+    public String displayName;
+    public ArrayList<String> routingUrls = new ArrayList<>();
 
     public String getBody() {
         return body;
@@ -84,10 +92,6 @@ public class SMS {
         this.type = type;
     }
 
-    String address = new String();
-    String threadId = "-1";
-    String date = new String();
-    int type;
 
     public String getErrorCode() {
         return errorCode;
@@ -101,15 +105,11 @@ public class SMS {
         return statusCode;
     }
 
-    public int messageCount = -1;
 
     public void setStatusCode(int statusCode) {
         this.statusCode = statusCode;
     }
 
-    String errorCode;
-    int statusCode;
-
     public String getId() {
         return id;
     }
@@ -126,12 +126,6 @@ public class SMS {
         this.read = read;
     }
 
-    public String id = "";
-
-    public int read;
-
-    public String routerStatus = new String();
-
     public String getDisplayName() {
         return displayName;
     }
@@ -140,30 +134,6 @@ public class SMS {
         this.displayName = displayName;
     }
 
-    public int getDisplayColor() {
-        return displayColor;
-    }
-
-    public void setDisplayColor(int displayColor) {
-        this.displayColor = displayColor;
-    }
-
-    public boolean isContact() {
-        return isContact;
-    }
-
-    public void setContact(boolean contact) {
-        isContact = contact;
-    }
-
-    public int getMessageCount() {
-        return messageCount;
-    }
-
-    public void setMessageCount(int messageCount) {
-        this.messageCount = messageCount;
-    }
-
     public int getRead() {
         return read;
     }
@@ -176,26 +146,10 @@ public class SMS {
         this.subscriptionId = subscriptionId;
     }
 
-    public Boolean getDatesOnly() {
-        return datesOnly;
-    }
-
-    public void setDatesOnly(Boolean datesOnly) {
-        this.datesOnly = datesOnly;
-    }
-
     public ArrayList<String> getRoutingUrls() {
         return routingUrls;
     }
 
-    public int subscriptionId;
-
-    public Boolean datesOnly = false;
-
-    public Boolean isDatesOnly() {
-        return this.datesOnly;
-    }
-
     public String getRouterStatus() {
         return this.routerStatus;
     }
@@ -204,7 +158,6 @@ public class SMS {
         this.routerStatus = routerStatus;
     }
 
-    public ArrayList<String> routingUrls = new ArrayList<>();
 
     public void setRoutingUrls(ArrayList<String> routingUrls) {
         this.routingUrls = routingUrls;
@@ -214,12 +167,6 @@ public class SMS {
         this.routingUrls.add(routingUrl);
     }
 
-    public SMS(String dates) {
-        this.date = dates;
-        this.datesOnly = true;
-        this.type = 100;
-    }
-
     // https://developer.android.com/reference/android/provider/Telephony.TextBasedSmsColumns
     public SMS(Cursor cursor) {
         int bodyIndex = cursor.getColumnIndexOrThrow(Telephony.TextBasedSmsColumns.BODY);
@@ -604,4 +551,18 @@ public class SMS {
             return smsMessagesCursor;
         }
     }
+
+    public static class SMSJsonEntity {
+        public String type;
+        public List<SMS> smsList = new ArrayList<>();
+
+        public void setSmsList(Cursor cursor) {
+            if(cursor.moveToFirst()) {
+                do {
+                    SMS sms = new SMS(cursor);
+                    smsList.add(sms);
+                } while(cursor.moveToNext());
+            }
+        }
+    }
 }
diff --git a/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java b/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
index be1d781f..44d6e07e 100644
--- a/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
+++ b/app/src/main/java/com/example/swob_deku/Models/SMS/SMSHandler.java
@@ -99,6 +99,20 @@ public class SMSHandler {
         return smsMessagesCursor;
     }
 
+    public static Cursor fetchAllMessages(@NonNull Context context) {
+        Cursor smsMessagesCursor = context.getContentResolver().query(
+                SMS_CONTENT_URI,
+                new String[]{Telephony.Sms._ID, Telephony.TextBasedSmsColumns.THREAD_ID,
+                        Telephony.TextBasedSmsColumns.ADDRESS, Telephony.TextBasedSmsColumns.PERSON,
+                        Telephony.TextBasedSmsColumns.DATE, Telephony.TextBasedSmsColumns.BODY,
+                        Telephony.TextBasedSmsColumns.TYPE},
+                null,
+                null,
+                null);
+
+        return smsMessagesCursor;
+    }
+
     public static Cursor fetchSMSForThreading(Context context) {
         String[] projection = new String[]{
                 Telephony.Sms._ID,
@@ -540,5 +554,4 @@ public class SMSHandler {
         return new PendingIntent[]{sentPendingIntent, deliveredPendingIntent};
     }
 
-
 }
diff --git a/app/src/main/java/com/example/swob_deku/Models/Web/WebWebsocketsService.java b/app/src/main/java/com/example/swob_deku/Models/Web/WebWebsocketsService.java
new file mode 100644
index 00000000..cfed487c
--- /dev/null
+++ b/app/src/main/java/com/example/swob_deku/Models/Web/WebWebsocketsService.java
@@ -0,0 +1,135 @@
+package com.example.swob_deku.Models.Web;
+
+import android.app.Notification;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.content.Intent;
+import android.database.Cursor;
+import android.os.IBinder;
+import android.util.Log;
+
+import androidx.annotation.Nullable;
+import androidx.core.app.NotificationCompat;
+
+import com.example.swob_deku.MessagesThreadsActivity;
+import com.example.swob_deku.Models.SMS.SMS;
+import com.example.swob_deku.Models.SMS.SMSHandler;
+import com.example.swob_deku.R;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+import org.java_websocket.client.WebSocketClient;
+import org.java_websocket.handshake.ServerHandshake;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class WebWebsocketsService extends Service {
+    final int NOTIFICATION_ID = 1235;
+
+    final String MESSAGE_TYPE_THREADS = "MESSAGE_TYPE_THREADS";
+    final String MESSAGE_TYPE_SINGLE = "MESSAGE_TYPE_SINGLE";
+    private WebSocketClient webSocketClient;
+
+    @Nullable
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        try {
+            _configureWebsockets();
+        } catch (URISyntaxException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void _configureWebsockets() throws URISyntaxException {
+        URI uri = new URI("ws://staging.smswithoutborders.com:16000");
+        webSocketClient = new WebSocketClient(uri) {
+            @Override
+            public void onOpen(ServerHandshake handshakedata) {
+                Log.d(getClass().getName(), "+ New connection: " +
+                        handshakedata.getHttpStatusMessage());
+                createForegroundNotification();
+            }
+
+            @Override
+            public void onMessage(String message) {
+                Log.d(getClass().getName(), "+ New Message: " + message);
+            }
+
+            @Override
+            public void onClose(int code, String reason, boolean remote) {
+                Log.d(getClass().getName(), "- Connection closed: "
+                        + code + ", " + reason + ", " + remote);
+            }
+
+            @Override
+            public void onError(Exception ex) {
+                ex.printStackTrace();
+            }
+        };
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        if(!webSocketClient.isOpen()) {
+            webSocketClient.connect();
+
+            //        Cursor cursor = SMSHandler.fetchAllMessages(getApplicationContext());
+            Cursor cursor = SMSHandler.fetchSMSForThreading(getApplicationContext());
+
+            GsonBuilder gsonBuilder = new GsonBuilder();
+            gsonBuilder.setPrettyPrinting().serializeNulls();
+            Gson gson = gsonBuilder.create();
+
+            SMS.SMSJsonEntity smsJsonEntity = new SMS.SMSJsonEntity();
+            smsJsonEntity.setSmsList(cursor);
+            smsJsonEntity.type = MESSAGE_TYPE_THREADS;
+
+            Log.d(getClass().getName(), gson.toJson(smsJsonEntity));
+
+            cursor.close();
+        }
+
+        return START_STICKY;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+
+        if(webSocketClient.isOpen())
+            webSocketClient.close();
+    }
+
+    private void createForegroundNotification() {
+        Intent notificationIntent = new Intent(getApplicationContext(), MessagesThreadsActivity.class);
+        PendingIntent pendingIntent =
+                PendingIntent.getActivity(getApplicationContext(), 0, notificationIntent,
+                        PendingIntent.FLAG_IMMUTABLE);
+
+        // String description = runningGatewayClientCount + " " + getString(R.string.gateway_client_running_description);
+        String description = getString(R.string.deku_websocket_running_description);
+
+        Notification notification =
+                new NotificationCompat.Builder(getApplicationContext(), getString(R.string.running_gateway_clients_channel_id))
+                        .setContentTitle(getString(R.string.deku_websocket_running))
+                        .setSmallIcon(R.drawable.ic_stat_name)
+                        .setPriority(NotificationCompat.DEFAULT_ALL)
+                        .setSilent(true)
+                        .setOngoing(true)
+                        .setContentText(description)
+                        .setContentIntent(pendingIntent)
+                        .build();
+
+        startForeground(NOTIFICATION_ID, notification);
+    }
+}
