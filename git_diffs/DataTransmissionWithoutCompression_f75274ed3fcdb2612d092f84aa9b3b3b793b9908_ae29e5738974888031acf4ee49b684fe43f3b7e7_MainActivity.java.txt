diff --git a/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/FileHashGenerator.java b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/FileHashGenerator.java
new file mode 100644
index 0000000..6f1d050
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/FileHashGenerator.java
@@ -0,0 +1,76 @@
+package com.codedead.deadhash.domain.objects.hashgenerator;
+
+import android.content.ContentResolver;
+import android.net.Uri;
+
+import com.codedead.deadhash.domain.utils.HashUtil;
+
+import java.util.List;
+
+public final class FileHashGenerator extends HashGenerator {
+
+    private final Uri uri;
+    private final ContentResolver contentResolver;
+
+    /**
+     * Initialize a new HashGenerator
+     *
+     * @param uri            The Uri of the file that should be hashed
+     * @param hashAlgorithms The List of HashingAlgorithm enums that should be used to calculate hashes
+     * @param compare        The compare String for the calculated hashes
+     */
+    public FileHashGenerator(final Uri uri, final ContentResolver contentResolver, final List<HashAlgorithm> hashAlgorithms, final String compare) {
+        super(hashAlgorithms, compare);
+
+        if (uri == null)
+            throw new NullPointerException("File cannot be null!");
+        if (contentResolver == null)
+            throw new NullPointerException("ContentResolver cannot be null!");
+
+        this.uri = uri;
+        this.contentResolver = contentResolver;
+    }
+
+    /**
+     * Generate the List of HashData for the given input data
+     *
+     * @return The List of HashData for the given input data
+     */
+    @Override
+    public List<HashData> generateHashes() {
+        for (final HashAlgorithm algorithm : super.getHashAlgorithms()) {
+            switch (algorithm) {
+                case md5 -> {
+                    final String md5 = HashUtil.calculateHash(uri, contentResolver, "MD5");
+                    getHashData().add(new HashData("MD5", md5, getCompare()));
+                }
+                case sha1 -> {
+                    final String sha1 = HashUtil.calculateHash(uri, contentResolver, "SHA-1");
+                    getHashData().add(new HashData("SHA-1", sha1, getCompare()));
+                }
+                case sha224 -> {
+                    final String sha224 = HashUtil.calculateHash(uri, contentResolver, "SHA-224");
+                    getHashData().add(new HashData("SHA-224", sha224, getCompare()));
+                }
+                case sha256 -> {
+                    final String sha256 = HashUtil.calculateHash(uri, contentResolver, "SHA-256");
+                    getHashData().add(new HashData("SHA-256", sha256, getCompare()));
+                }
+                case sha384 -> {
+                    final String sha384 = HashUtil.calculateHash(uri, contentResolver, "SHA-384");
+                    getHashData().add(new HashData("SHA-384", sha384, getCompare()));
+                }
+                case sha512 -> {
+                    final String sha512 = HashUtil.calculateHash(uri, contentResolver, "SHA-512");
+                    getHashData().add(new HashData("SHA-512", sha512, getCompare()));
+                }
+                case crc32 -> {
+                    final String crc32 = HashUtil.calculateCRC32(uri, contentResolver);
+                    getHashData().add(new HashData("CRC32", crc32, getCompare()));
+                }
+            }
+        }
+
+        return getHashData();
+    }
+}
diff --git a/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/HashGenerator.java b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/HashGenerator.java
index 09a7fb1..b8fb5ad 100644
--- a/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/HashGenerator.java
+++ b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/HashGenerator.java
@@ -1,16 +1,9 @@
 package com.codedead.deadhash.domain.objects.hashgenerator;
 
-import com.codedead.deadhash.domain.utils.HashUtil;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-public final class HashGenerator {
-
-    private final byte[] data;
+public abstract class HashGenerator implements IHashGenerator {
     private final List<HashAlgorithm> hashAlgorithms;
     private final List<HashData> hashData;
     private final String compare;
@@ -18,100 +11,39 @@ public final class HashGenerator {
     /**
      * Initialize a new HashGenerator
      *
-     * @param data           The byte array that should be hashed
      * @param hashAlgorithms The List of HashingAlgorithm enums that should be used to calculate hashes
      * @param compare        The compare String for the calculated hashes
      */
-    public HashGenerator(final byte[] data, final List<HashAlgorithm> hashAlgorithms, final String compare) {
+    public HashGenerator(final List<HashAlgorithm> hashAlgorithms, final String compare) {
         hashData = new ArrayList<>();
-        this.data = data;
-
         this.hashAlgorithms = hashAlgorithms;
         this.compare = compare;
     }
 
     /**
-     * Initialize a new HashGenerator
+     * Get the List of HashData for the given input data
      *
-     * @param data           The byte array that should be hashed
-     * @param hashAlgorithms The List of HashingAlgorithm enums that should be used to calculate hashes
-     * @param compare        The compare String for the calculated hashes
-     * @throws IOException When the File could not be read
+     * @return The List of HashData for the given input data
      */
-    public HashGenerator(final File data, final List<HashAlgorithm> hashAlgorithms, final String compare) throws IOException {
-        hashData = new ArrayList<>();
-        this.data = readFileToBytes(data);
-        this.hashAlgorithms = hashAlgorithms;
-        this.compare = compare;
+    public List<HashAlgorithm> getHashAlgorithms() {
+        return hashAlgorithms;
     }
 
     /**
-     * Read a file and return a byte array that represents the given File
+     * Get the List of HashData for the given input data
      *
-     * @param file The File that should be read
-     * @return The byte array that represents the given File
-     * @throws IOException When the File could not be read
+     * @return The List of HashData for the given input data
      */
-    private byte[] readFileToBytes(final File file) throws IOException {
-        if (file == null)
-            throw new NullPointerException("File cannot be null!");
-
-        final int size = (int) file.length();
-        final byte[] bytes = new byte[size];
-        final byte[] tmpBuff = new byte[size];
-        try (final FileInputStream fis = new FileInputStream(file)) {
-            int read = fis.read(bytes, 0, size);
-            if (read < size) {
-                int remain = size - read;
-                while (remain > 0) {
-                    read = fis.read(tmpBuff, 0, remain);
-                    System.arraycopy(tmpBuff, 0, bytes, size - remain, read);
-                    remain -= read;
-                }
-            }
-        }
-
-        return bytes;
+    public List<HashData> getHashData() {
+        return hashData;
     }
 
     /**
-     * Generate the List of HashData for the given input data
-     * @return The List of HashData for the given input data
+     * Get the compare String for the calculated hashes
+     *
+     * @return The compare String for the calculated hashes
      */
-    public List<HashData> generateHashes() {
-        for (final HashAlgorithm algorithm : hashAlgorithms) {
-            switch (algorithm) {
-                case md5 -> {
-                    final String md5 = HashUtil.calculateHash(data, "MD5");
-                    hashData.add(new HashData("MD5", md5, compare));
-                }
-                case sha1 -> {
-                    final String sha1 = HashUtil.calculateHash(data, "SHA-1");
-                    hashData.add(new HashData("SHA-1", sha1, compare));
-                }
-                case sha224 -> {
-                    final String sha224 = HashUtil.calculateHash(data, "SHA-224");
-                    hashData.add(new HashData("SHA-224", sha224, compare));
-                }
-                case sha256 -> {
-                    final String sha256 = HashUtil.calculateHash(data, "SHA-256");
-                    hashData.add(new HashData("SHA-256", sha256, compare));
-                }
-                case sha384 -> {
-                    final String sha384 = HashUtil.calculateHash(data, "SHA-384");
-                    hashData.add(new HashData("SHA-384", sha384, compare));
-                }
-                case sha512 -> {
-                    final String sha512 = HashUtil.calculateHash(data, "SHA-512");
-                    hashData.add(new HashData("SHA-512", sha512, compare));
-                }
-                case crc32 -> {
-                    final String crc32 = HashUtil.calculateCRC32(data);
-                    hashData.add(new HashData("CRC32", crc32, compare));
-                }
-            }
-        }
-
-        return hashData;
+    public String getCompare() {
+        return compare;
     }
 }
diff --git a/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/IHashGenerator.java b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/IHashGenerator.java
new file mode 100644
index 0000000..b59e143
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/IHashGenerator.java
@@ -0,0 +1,7 @@
+package com.codedead.deadhash.domain.objects.hashgenerator;
+
+import java.util.List;
+
+public interface IHashGenerator {
+    List<HashData> generateHashes();
+}
diff --git a/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/TextHashGenerator.java b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/TextHashGenerator.java
new file mode 100644
index 0000000..851ea78
--- /dev/null
+++ b/app/src/main/java/com/codedead/deadhash/domain/objects/hashgenerator/TextHashGenerator.java
@@ -0,0 +1,71 @@
+package com.codedead.deadhash.domain.objects.hashgenerator;
+
+import com.codedead.deadhash.domain.utils.HashUtil;
+
+import java.util.List;
+
+public final class TextHashGenerator extends HashGenerator {
+
+    private final String data;
+
+    /**
+     * Initialize a new TextHashGenerator
+     *
+     * @param data           The String that should be hashed
+     * @param hashAlgorithms The List of HashingAlgorithm enums that should be used to calculate hashes
+     * @param compare        The compare String for the calculated hashes
+     */
+    public TextHashGenerator(final String data, List<HashAlgorithm> hashAlgorithms, String compare) {
+        super(hashAlgorithms, compare);
+
+        if (data == null)
+            throw new NullPointerException("Data cannot be null!");
+        if (data.isEmpty())
+            throw new IllegalArgumentException("Data cannot be empty!");
+
+        this.data = data;
+    }
+
+    /**
+     * Generate the List of HashData for the given input data
+     *
+     * @return The List of HashData for the given input data
+     */
+    @Override
+    public List<HashData> generateHashes() {
+        for (final HashAlgorithm algorithm : super.getHashAlgorithms()) {
+            switch (algorithm) {
+                case md5 -> {
+                    final String md5 = HashUtil.calculateHash(data.getBytes(), "MD5");
+                    getHashData().add(new HashData("MD5", md5, getCompare()));
+                }
+                case sha1 -> {
+                    final String sha1 = HashUtil.calculateHash(data.getBytes(), "SHA-1");
+                    getHashData().add(new HashData("SHA-1", sha1, getCompare()));
+                }
+                case sha224 -> {
+                    final String sha224 = HashUtil.calculateHash(data.getBytes(), "SHA-224");
+                    getHashData().add(new HashData("SHA-224", sha224, getCompare()));
+                }
+                case sha256 -> {
+                    final String sha256 = HashUtil.calculateHash(data.getBytes(), "SHA-256");
+                    getHashData().add(new HashData("SHA-256", sha256, getCompare()));
+                }
+                case sha384 -> {
+                    final String sha384 = HashUtil.calculateHash(data.getBytes(), "SHA-384");
+                    getHashData().add(new HashData("SHA-384", sha384, getCompare()));
+                }
+                case sha512 -> {
+                    final String sha512 = HashUtil.calculateHash(data.getBytes(), "SHA-512");
+                    getHashData().add(new HashData("SHA-512", sha512, getCompare()));
+                }
+                case crc32 -> {
+                    final String crc32 = HashUtil.calculateCRC32(data.getBytes());
+                    getHashData().add(new HashData("CRC32", crc32, getCompare()));
+                }
+            }
+        }
+
+        return getHashData();
+    }
+}
diff --git a/app/src/main/java/com/codedead/deadhash/domain/utils/HashUtil.java b/app/src/main/java/com/codedead/deadhash/domain/utils/HashUtil.java
index 7f906c1..0c20410 100644
--- a/app/src/main/java/com/codedead/deadhash/domain/utils/HashUtil.java
+++ b/app/src/main/java/com/codedead/deadhash/domain/utils/HashUtil.java
@@ -1,6 +1,12 @@
 package com.codedead.deadhash.domain.utils;
 
+import android.content.ContentResolver;
+import android.net.Uri;
+
+import java.io.IOException;
+import java.io.InputStream;
 import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.zip.CRC32;
 
 public final class HashUtil {
@@ -49,6 +55,36 @@ public final class HashUtil {
         }
     }
 
+    /**
+     * Calculate the hash of a specified file using the specified message digest
+     *
+     * @param uri             The Uri of the file that should be hashed
+     * @param contentResolver The ContentResolver that should be used to open the file
+     * @param kind            The message digest
+     * @return The String object that contains the hash of the file using the specified message digest
+     */
+    public static String calculateHash(final Uri uri, final ContentResolver contentResolver, final String kind) {
+        try {
+            final MessageDigest md = MessageDigest.getInstance(kind);
+            try (final InputStream fis = contentResolver.openInputStream(uri)) {
+                if (fis == null)
+                    return null;
+
+                final byte[] dataBytes = new byte[1024];
+
+                int nread;
+                while ((nread = fis.read(dataBytes)) != -1) {
+                    md.update(dataBytes, 0, nread);
+                }
+
+                final byte[] mdBytes = md.digest();
+                return convertToHex(mdBytes);
+            }
+        } catch (final NoSuchAlgorithmException | IOException ex) {
+            return null;
+        }
+    }
+
     /**
      * Calculate the CRC32 value of a specified byte array
      *
@@ -64,4 +100,32 @@ public final class HashUtil {
             return null;
         }
     }
+
+    /**
+     * Calculate the CRC32 value of a specified file
+     *
+     * @param uri             The Uri of the file that should be hashed
+     * @param contentResolver The ContentResolver that should be used to open the file
+     * @return The String object that represents the CRC32 value of the given file
+     */
+    public static String calculateCRC32(final Uri uri, final ContentResolver contentResolver) {
+        try {
+            final CRC32 crc = new CRC32();
+            try (final InputStream fis = contentResolver.openInputStream(uri)) {
+                if (fis == null)
+                    return null;
+
+                final byte[] dataBytes = new byte[1024];
+
+                int nread;
+                while ((nread = fis.read(dataBytes)) != -1) {
+                    crc.update(dataBytes, 0, nread);
+                }
+
+                return Long.toHexString(crc.getValue());
+            }
+        } catch (final IOException ex) {
+            return null;
+        }
+    }
 }
diff --git a/app/src/main/java/com/codedead/deadhash/gui/MainActivity.java b/app/src/main/java/com/codedead/deadhash/gui/MainActivity.java
index 5807333..3211c59 100644
--- a/app/src/main/java/com/codedead/deadhash/gui/MainActivity.java
+++ b/app/src/main/java/com/codedead/deadhash/gui/MainActivity.java
@@ -1,10 +1,12 @@
 package com.codedead.deadhash.gui;
 
 import android.Manifest;
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -21,10 +23,11 @@ import androidx.appcompat.app.AlertDialog;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.codedead.deadhash.domain.objects.hashgenerator.FileHashGenerator;
 import com.codedead.deadhash.domain.objects.hashgenerator.HashAlgorithm;
+import com.codedead.deadhash.domain.objects.hashgenerator.TextHashGenerator;
 import com.codedead.deadhash.domain.objects.settings.SettingsContainer;
 import com.codedead.deadhash.domain.utils.IntentUtils;
-import com.codedead.deadhash.domain.utils.StreamUtility;
 import com.google.android.material.navigation.NavigationView;
 
 import androidx.core.view.GravityCompat;
@@ -33,6 +36,7 @@ import androidx.appcompat.app.ActionBarDrawerToggle;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.Toolbar;
 
+import android.provider.OpenableColumns;
 import android.text.method.LinkMovementMethod;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -50,13 +54,8 @@ import android.widget.ViewFlipper;
 import com.codedead.deadhash.R;
 import com.codedead.deadhash.domain.utils.DataAdapter;
 import com.codedead.deadhash.domain.objects.hashgenerator.HashData;
-import com.codedead.deadhash.domain.objects.hashgenerator.HashGenerator;
 import com.codedead.deadhash.domain.utils.LocaleHelper;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
@@ -90,10 +89,8 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
     private boolean textLoading;
 
     private boolean paused;
-
-    private final String tmpFile = "tmpFile";
     private String lastLanguage;
-
+    private Uri fileUri;
     private ActivityResultLauncher<Intent> activityResultLauncher;
 
     @Override
@@ -134,18 +131,12 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
                     navigationView.setCheckedItem(menu.getItem(flipperPosition).getItemId());
                 }
             }
-
-            if (!savedInstanceState.getBoolean("KEEP_FILE")) {
-                deleteTempFile();
-            }
         } else {
             final SubMenu menu = navigationView.getMenu().getItem(0).getSubMenu();
 
             if (menu != null) {
                 navigationView.setCheckedItem(menu.getItem(0).getItemId());
             }
-
-            deleteTempFile();
         }
 
         loadFileHashContent(savedInstanceState);
@@ -159,24 +150,14 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
                 new ActivityResultContracts.StartActivityForResult(),
                 result -> {
                     if (result.getData() != null) {
-                        final Uri selectedFileUri = result.getData().getData();
-                        if (selectedFileUri != null) {
-                            try (final InputStream selectedFileStream = getContentResolver().openInputStream(selectedFileUri)) {
-                                final File outputFile = new File(getApplicationContext().getCacheDir(), tmpFile);
-
-                                try (final FileOutputStream outputStream = new FileOutputStream(outputFile, false)) {
-                                    if (selectedFileStream != null) {
-                                        StreamUtility.copyStream(selectedFileStream, outputStream);
-                                        edtFilePath.setText(selectedFileUri.getPath());
-                                    } else {
-                                        Toast.makeText(getApplicationContext(), R.string.error_open_file, Toast.LENGTH_SHORT).show();
-                                    }
-                                } catch (final IOException ex) {
-                                    Toast.makeText(getApplicationContext()
-                                            , R.string.error_copy_file, Toast.LENGTH_SHORT).show();
+                        fileUri = result.getData().getData();
+                        if (fileUri != null) {
+                            try (Cursor cursor = this.getContentResolver()
+                                    .query(fileUri, null, null, null, null, null)) {
+                                if (cursor != null && cursor.moveToFirst()) {
+                                    @SuppressLint("Range") String displayName = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
+                                    edtFilePath.setText(displayName);
                                 }
-                            } catch (final IOException ex) {
-                                Toast.makeText(getApplicationContext(), R.string.error_open_file, Toast.LENGTH_SHORT).show();
                             }
                         } else {
                             Toast.makeText(getApplicationContext(), R.string.error_open_file, Toast.LENGTH_SHORT).show();
@@ -213,17 +194,6 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         return super.onOptionsItemSelected(item);
     }
 
-    /**
-     * Delete the temporary file to save storage
-     */
-    private void deleteTempFile() {
-        final File f = new File(getApplicationContext().getCacheDir(), tmpFile);
-        if (f.exists()) {
-            //noinspection ResultOfMethodCallIgnored
-            f.delete();
-        }
-    }
-
     /**
      * Load the content and logic for AlertDialog objects
      */
@@ -347,8 +317,9 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
         edtFilePath.setOnClickListener(this::onClickSelectFile);
 
         btnGenerate.setOnClickListener(v -> {
-            if (fileLoading) return;
-            if (!new File(getBaseContext().getCacheDir(), tmpFile).exists()) {
+            if (fileLoading)
+                return;
+            if (fileUri == null) {
                 Toast.makeText(getApplicationContext(), R.string.error_no_file, Toast.LENGTH_LONG).show();
                 return;
             }
@@ -368,26 +339,21 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
                 compare = edtFileCompare.getText().toString();
             }
 
-            try {
-                final HashGenerator fileHashGenerator = new HashGenerator(new File(getApplicationContext().getCacheDir(), tmpFile), getHashAlgorithms(), compare);
-                fileLoading = true;
+            final FileHashGenerator fileHashGenerator = new FileHashGenerator(fileUri, getContentResolver(), getHashAlgorithms(), compare);
+            fileLoading = true;
 
-                CompletableFuture.supplyAsync(fileHashGenerator::generateHashes)
-                        .thenAccept(s -> runOnUiThread(() -> {
-                            fileLoading = false;
-                            pgbFile.setVisibility(View.GONE);
+            CompletableFuture.supplyAsync(fileHashGenerator::generateHashes)
+                    .thenAccept(s -> runOnUiThread(() -> {
+                        fileLoading = false;
+                        pgbFile.setVisibility(View.GONE);
 
-                            for (final HashData d : s) {
-                                fileDataArrayList.add(d);
-                                mAdapterFile.notifyItemInserted(fileDataArrayList.size());
-                            }
-                        }));
+                        for (final HashData d : s) {
+                            fileDataArrayList.add(d);
+                            mAdapterFile.notifyItemInserted(fileDataArrayList.size());
+                        }
+                    }));
 
-                pgbFile.setVisibility(View.VISIBLE);
-            } catch (final IOException e) {
-                Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_SHORT).show();
-                pgbFile.setVisibility(View.GONE);
-            }
+            pgbFile.setVisibility(View.VISIBLE);
         });
     }
 
@@ -449,7 +415,7 @@ public class MainActivity extends AppCompatActivity implements NavigationView.On
             }
 
 
-            final HashGenerator textHashGenerator = new HashGenerator(data.getBytes(), getHashAlgorithms(), compare);
+            final TextHashGenerator textHashGenerator = new TextHashGenerator(data, getHashAlgorithms(), compare);
             textLoading = true;
 
             CompletableFuture.supplyAsync(textHashGenerator::generateHashes)
