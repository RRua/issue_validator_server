diff --git a/app/src/main/java/org/devfleet/android/minerhelper/OreC.java b/app/src/main/java/org/devfleet/android/minerhelper/OreC.java
index f4d8f13..e1fa652 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/OreC.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/OreC.java
@@ -12,47 +12,46 @@ import android.view.View;
 import android.widget.Button;
 import android.widget.CheckBox;
 
-
 import static android.support.v4.view.ViewCompat.jumpDrawablesToCurrentState;
 
 public class OreC extends AppCompatActivity {
 
-        SharedPreferences sharedPref;
-
-        CheckBox Variants;
-        CheckBox Mercoxit;
-        CheckBox Arkonor;
-        CheckBox Bistot;
-        CheckBox Crokite;
-        CheckBox Dark_Ochre;
-        CheckBox Gneiss;
-        CheckBox Hedbergite;
-        CheckBox Hemorphite;
-        CheckBox Jaspet;
-        CheckBox Kernite;
-        CheckBox Omber;
-        CheckBox Plagioclase;
-        CheckBox Pyroxeres;
-        CheckBox Scordite;
-        CheckBox Spodumain;
-        CheckBox Veldspar;
-
-        View v;
-
-    Button Amarr;
-    Button Caldari;
-    Button Minmatar;
-    Button All;
-    Button Gallente;
-
-    CheckBox s10;
-    CheckBox s09;
-    CheckBox s07;
-    CheckBox s04;
-    CheckBox s02;
-    CheckBox s00;
-
-    AlertDialog dialog;
+    private SharedPreferences sharedPref;
+
+    private CheckBox Variants;
+    private CheckBox Mercoxit;
+    private CheckBox Arkonor;
+    private CheckBox Bistot;
+    private CheckBox Crokite;
+    private CheckBox Dark_Ochre;
+    private CheckBox Gneiss;
+    private CheckBox Hedbergite;
+    private CheckBox Hemorphite;
+    private CheckBox Jaspet;
+    private CheckBox Kernite;
+    private CheckBox Omber;
+    private CheckBox Plagioclase;
+    private CheckBox Pyroxeres;
+    private CheckBox Scordite;
+    private CheckBox Spodumain;
+    private CheckBox Veldspar;
+
+    private View v;
+
+    private Button Amarr;
+    private Button Caldari;
+    private Button Minmatar;
+    private Button All;
+    private Button Gallente;
+
+    private CheckBox s10;
+    private CheckBox s09;
+    private CheckBox s07;
+    private CheckBox s04;
+    private CheckBox s02;
+    private CheckBox s00;
+
+    private AlertDialog dialog;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -63,26 +62,27 @@ public class OreC extends AppCompatActivity {
         loadViews();
     }
 
-    public void getViews() {
-        Variants = (CheckBox) findViewById(R.id.Variants);
-        Mercoxit = (CheckBox) findViewById(R.id.Mercoxit);
-        Arkonor = (CheckBox) findViewById(R.id.Arkonor);
-        Bistot = (CheckBox) findViewById(R.id.Bistot);
-        Crokite = (CheckBox) findViewById(R.id.Crokite);
-        Dark_Ochre = (CheckBox) findViewById(R.id.Dark_Ochre);
-        Gneiss = (CheckBox) findViewById(R.id.Gneiss);
-        Hedbergite = (CheckBox) findViewById(R.id.Hedbergite);
-        Hemorphite = (CheckBox) findViewById(R.id.Hemorphite);
-        Jaspet = (CheckBox) findViewById(R.id.Jaspet);
-        Kernite = (CheckBox) findViewById(R.id.Kernite);
-        Omber = (CheckBox) findViewById(R.id.Omber);
-        Plagioclase = (CheckBox) findViewById(R.id.Plagioclase);
-        Pyroxeres = (CheckBox) findViewById(R.id.Pyroxeres);
-        Scordite = (CheckBox) findViewById(R.id.Scordite);
-        Spodumain = (CheckBox) findViewById(R.id.Spodumain);
-        Veldspar = (CheckBox) findViewById(R.id.Veldspar);
+    private void getViews() {
+        Variants = findViewById(R.id.Variants);
+        Mercoxit = findViewById(R.id.Mercoxit);
+        Arkonor = findViewById(R.id.Arkonor);
+        Bistot = findViewById(R.id.Bistot);
+        Crokite = findViewById(R.id.Crokite);
+        Dark_Ochre = findViewById(R.id.Dark_Ochre);
+        Gneiss = findViewById(R.id.Gneiss);
+        Hedbergite = findViewById(R.id.Hedbergite);
+        Hemorphite = findViewById(R.id.Hemorphite);
+        Jaspet = findViewById(R.id.Jaspet);
+        Kernite = findViewById(R.id.Kernite);
+        Omber = findViewById(R.id.Omber);
+        Plagioclase = findViewById(R.id.Plagioclase);
+        Pyroxeres = findViewById(R.id.Pyroxeres);
+        Scordite = findViewById(R.id.Scordite);
+        Spodumain = findViewById(R.id.Spodumain);
+        Veldspar = findViewById(R.id.Veldspar);
     }
-    public void loadViews() {
+
+    private void loadViews() {
         Variants.setChecked(sharedPref.getBoolean("Variants", false));
         Mercoxit.setChecked(sharedPref.getBoolean("Mercoxit", false));
         Arkonor.setChecked(sharedPref.getBoolean("Arkonor", true));
@@ -101,19 +101,20 @@ public class OreC extends AppCompatActivity {
         Spodumain.setChecked(sharedPref.getBoolean("Spodumain", true));
         Veldspar.setChecked(sharedPref.getBoolean("Veldspar", true));
     }
-    public void findButtons() {
-        Amarr = (Button) v.findViewById(R.id.toggleButtonA);
-        Caldari = (Button) v.findViewById(R.id.toggleButtonC);
-        Gallente = (Button) v.findViewById(R.id.toggleButtonG);
-        Minmatar = (Button) v.findViewById(R.id.toggleButtonM);
-        All = (Button) v.findViewById(R.id.toggleButtonAll);
-
-        s10 = (CheckBox) v.findViewById(R.id.s1_0);
-        s09 = (CheckBox) v.findViewById(R.id.s0_9);
-        s07 = (CheckBox) v.findViewById(R.id.s0_7);
-        s04 = (CheckBox) v.findViewById(R.id.s0_3);
-        s02 = (CheckBox) v.findViewById(R.id.s0_1);
-        s00 = (CheckBox) v.findViewById(R.id.s0_0);
+
+    private void findButtons() {
+        Amarr = v.findViewById(R.id.toggleButtonA);
+        Caldari = v.findViewById(R.id.toggleButtonC);
+        Gallente = v.findViewById(R.id.toggleButtonG);
+        Minmatar = v.findViewById(R.id.toggleButtonM);
+        All = v.findViewById(R.id.toggleButtonAll);
+
+        s10 = v.findViewById(R.id.s1_0);
+        s09 = v.findViewById(R.id.s0_9);
+        s07 = v.findViewById(R.id.s0_7);
+        s04 = v.findViewById(R.id.s0_3);
+        s02 = v.findViewById(R.id.s0_1);
+        s00 = v.findViewById(R.id.s0_0);
     }
 
     public void openSelection(View view) {
@@ -141,7 +142,7 @@ public class OreC extends AppCompatActivity {
         editor.commit();
     }
 
-    public String whatButton(View view) {
+    private String whatButton(View view) {
         if(view==Amarr) {return "A";}
         if(view==Caldari) {return "C";}
         if(view==Gallente) {return "G";}
@@ -149,7 +150,7 @@ public class OreC extends AppCompatActivity {
         return "All";
     }
 
-    public void paintOne() {
+    private void paintOne() {
         String View=sharedPref.getString("Button", "All");
         switch (View){
             case "A": ViewCompat.setBackgroundTintList(Amarr, ColorStateList.valueOf(0xaaaaaaaa)); break;
@@ -160,7 +161,7 @@ public class OreC extends AppCompatActivity {
         }
     }
 
-    public void checkCheckBox() {
+    private void checkCheckBox() {
         String box=sharedPref.getString("CB", "s00");
         switch (box) {
             case "s10": s10.setChecked(true); break;
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/OreCgas.java b/app/src/main/java/org/devfleet/android/minerhelper/OreCgas.java
index ad36d5c..4356855 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/OreCgas.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/OreCgas.java
@@ -12,41 +12,41 @@ import android.widget.CheckBox;
 
 public class OreCgas extends AppCompatActivity {
 
-    SharedPreferences sharedPref;
-
-    CheckBox C28;
-    CheckBox C32;
-    CheckBox C50;
-    CheckBox C60;
-    CheckBox C70;
-    CheckBox C72;
-    CheckBox C84;
-    CheckBox C320;
-    CheckBox C540;
-    CheckBox Amber_Cytoserocin;
-    CheckBox Amber_Mykoserocin;
-    CheckBox Azure_Cytoserocin;
-    CheckBox Azure_Mykoserocin;
-    CheckBox Celadon_Cytoserocin;
-    CheckBox Celadon_Mykoserocin;
-    CheckBox Golden_Cytoserocin;
-    CheckBox Golden_Mykoserocin;
-    CheckBox Lime_Cytoserocin;
-    CheckBox Lime_Mykoserocin;
-    CheckBox Malachite_Cytoserocin;
-    CheckBox Malachite_Mykoserocin;
-    CheckBox Vermillion_Cytoserocin;
-    CheckBox Vermillion_Mykoserocin;
-    CheckBox Viridian_Cytoserocin;
-    CheckBox Viridian_Mykoserocin;
-
-    View v;
-
-    CheckBox Wormhole;
-    CheckBox Cytoserocin;
-    CheckBox Mykoserocin;
-
-    AlertDialog dialog;
+    private SharedPreferences sharedPref;
+
+    private CheckBox C28;
+    private CheckBox C32;
+    private CheckBox C50;
+    private CheckBox C60;
+    private CheckBox C70;
+    private CheckBox C72;
+    private CheckBox C84;
+    private CheckBox C320;
+    private CheckBox C540;
+    private CheckBox Amber_Cytoserocin;
+    private CheckBox Amber_Mykoserocin;
+    private CheckBox Azure_Cytoserocin;
+    private CheckBox Azure_Mykoserocin;
+    private CheckBox Celadon_Cytoserocin;
+    private CheckBox Celadon_Mykoserocin;
+    private CheckBox Golden_Cytoserocin;
+    private CheckBox Golden_Mykoserocin;
+    private CheckBox Lime_Cytoserocin;
+    private CheckBox Lime_Mykoserocin;
+    private CheckBox Malachite_Cytoserocin;
+    private CheckBox Malachite_Mykoserocin;
+    private CheckBox Vermillion_Cytoserocin;
+    private CheckBox Vermillion_Mykoserocin;
+    private CheckBox Viridian_Cytoserocin;
+    private CheckBox Viridian_Mykoserocin;
+
+    private View v;
+
+    private CheckBox Wormhole;
+    private CheckBox Cytoserocin;
+    private CheckBox Mykoserocin;
+
+    private AlertDialog dialog;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -57,36 +57,37 @@ public class OreCgas extends AppCompatActivity {
         loadViews();
     }
 
-    public void getViews() {
-        C28 = (CheckBox) findViewById(R.id.C28);
-        C32 = (CheckBox) findViewById(R.id.C32);
-        C50 = (CheckBox) findViewById(R.id.C50);
-        C60 = (CheckBox) findViewById(R.id.C60);
-        C70 = (CheckBox) findViewById(R.id.C70);
-        C72 = (CheckBox) findViewById(R.id.C72);
-        C84 = (CheckBox) findViewById(R.id.C84);
-        C320 = (CheckBox) findViewById(R.id.C320);
-        C540 = (CheckBox) findViewById(R.id.C540);
-        
-        Amber_Cytoserocin = (CheckBox) findViewById(R.id.Amber_Cytoserocin);
-        Azure_Cytoserocin = (CheckBox) findViewById(R.id.Azure_Cytoserocin);
-        Celadon_Cytoserocin = (CheckBox) findViewById(R.id.Celadon_Cytoserocin);
-        Golden_Cytoserocin = (CheckBox) findViewById(R.id.Golden_Cytoserocin);
-        Lime_Cytoserocin = (CheckBox) findViewById(R.id.Lime_Cytoserocin);
-        Malachite_Cytoserocin = (CheckBox) findViewById(R.id.Malachite_Cytoserocin);
-        Vermillion_Cytoserocin = (CheckBox) findViewById(R.id.Vermillion_Cytoserocin);
-        Viridian_Cytoserocin = (CheckBox) findViewById(R.id.Viridian_Cytoserocin);
-        
-        Amber_Mykoserocin = (CheckBox) findViewById(R.id.Amber_Mykoserocin);
-        Azure_Mykoserocin = (CheckBox) findViewById(R.id.Azure_Mykoserocin);
-        Celadon_Mykoserocin = (CheckBox) findViewById(R.id.Celadon_Mykoserocin);
-        Golden_Mykoserocin = (CheckBox) findViewById(R.id.Golden_Mykoserocin);
-        Lime_Mykoserocin = (CheckBox) findViewById(R.id.Lime_Mykoserocin);
-        Malachite_Mykoserocin = (CheckBox) findViewById(R.id.Malachite_Mykoserocin);
-        Vermillion_Mykoserocin = (CheckBox) findViewById(R.id.Vermillion_Mykoserocin);
-        Viridian_Mykoserocin = (CheckBox) findViewById(R.id.Viridian_Mykoserocin);
-    }
-    public void loadViews() {
+    private void getViews() {
+        C28 = findViewById(R.id.C28);
+        C32 = findViewById(R.id.C32);
+        C50 = findViewById(R.id.C50);
+        C60 = findViewById(R.id.C60);
+        C70 = findViewById(R.id.C70);
+        C72 = findViewById(R.id.C72);
+        C84 = findViewById(R.id.C84);
+        C320 = findViewById(R.id.C320);
+        C540 = findViewById(R.id.C540);
+
+        Amber_Cytoserocin = findViewById(R.id.Amber_Cytoserocin);
+        Azure_Cytoserocin = findViewById(R.id.Azure_Cytoserocin);
+        Celadon_Cytoserocin = findViewById(R.id.Celadon_Cytoserocin);
+        Golden_Cytoserocin = findViewById(R.id.Golden_Cytoserocin);
+        Lime_Cytoserocin = findViewById(R.id.Lime_Cytoserocin);
+        Malachite_Cytoserocin = findViewById(R.id.Malachite_Cytoserocin);
+        Vermillion_Cytoserocin = findViewById(R.id.Vermillion_Cytoserocin);
+        Viridian_Cytoserocin = findViewById(R.id.Viridian_Cytoserocin);
+
+        Amber_Mykoserocin = findViewById(R.id.Amber_Mykoserocin);
+        Azure_Mykoserocin = findViewById(R.id.Azure_Mykoserocin);
+        Celadon_Mykoserocin = findViewById(R.id.Celadon_Mykoserocin);
+        Golden_Mykoserocin = findViewById(R.id.Golden_Mykoserocin);
+        Lime_Mykoserocin = findViewById(R.id.Lime_Mykoserocin);
+        Malachite_Mykoserocin = findViewById(R.id.Malachite_Mykoserocin);
+        Vermillion_Mykoserocin = findViewById(R.id.Vermillion_Mykoserocin);
+        Viridian_Mykoserocin = findViewById(R.id.Viridian_Mykoserocin);
+    }
+
+    private void loadViews() {
         C28.setChecked(sharedPref.getBoolean("C28", true));
         C32.setChecked(sharedPref.getBoolean("C32", true));
         C50.setChecked(sharedPref.getBoolean("C50", true));
@@ -127,13 +128,13 @@ public class OreCgas extends AppCompatActivity {
         checkCheckBox();
     }
 
-    public void findButtons() {
-        Mykoserocin = (CheckBox) v.findViewById(R.id.Mykoserocin);
-        Cytoserocin = (CheckBox) v.findViewById(R.id.Cytoserocin);
-        Wormhole = (CheckBox) v.findViewById(R.id.Wormhole);
+    private void findButtons() {
+        Mykoserocin = v.findViewById(R.id.Mykoserocin);
+        Cytoserocin = v.findViewById(R.id.Cytoserocin);
+        Wormhole = v.findViewById(R.id.Wormhole);
     }
 
-    public void checkCheckBox() {
+    private void checkCheckBox() {
         Wormhole.setChecked(sharedPref.getBoolean("CBGW",true));
         Mykoserocin.setChecked(sharedPref.getBoolean("CBGM",true));
         Cytoserocin.setChecked(sharedPref.getBoolean("CBGC",true));
@@ -141,7 +142,7 @@ public class OreCgas extends AppCompatActivity {
 
     public void checkButton(View view) {
 
-        SharedPreferences.Editor editor = sharedPref.edit(); //wrong cause muptiple possible
+        SharedPreferences.Editor editor = sharedPref.edit(); //wrong cause mulptiple possible
         if ((Wormhole==view)) {editor.putBoolean("CBGW",Wormhole.isChecked());}
         if ((Mykoserocin==view)) {editor.putBoolean("CBGM",Mykoserocin.isChecked());}
         if ((Cytoserocin==view)) {editor.putBoolean("CBGC",Cytoserocin.isChecked());}
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/OreCice.java b/app/src/main/java/org/devfleet/android/minerhelper/OreCice.java
index 869a475..aa3441b 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/OreCice.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/OreCice.java
@@ -12,40 +12,39 @@ import android.view.View;
 import android.widget.Button;
 import android.widget.CheckBox;
 
-
 import static android.support.v4.view.ViewCompat.jumpDrawablesToCurrentState;
 
 public class OreCice extends AppCompatActivity {
 
-        SharedPreferences sharedPref;
+    private SharedPreferences sharedPref;
 
-        CheckBox Clear_Icicle;
-        CheckBox White_Glaze;
-        CheckBox Blue_Ice;
-        CheckBox Glacial_Mass;
-        CheckBox Enriched_Clear_Icicle;
-        CheckBox Pristine_White_Glaze;
-        CheckBox Thick_Blue_Ice;
-        CheckBox Smooth_Glacial_Mass;
-        CheckBox Glare_Crust;
-        CheckBox Dark_Glitter;
-        CheckBox Gelidus;
-        CheckBox Krystallos;
+    private CheckBox Clear_Icicle;
+    private CheckBox White_Glaze;
+    private CheckBox Blue_Ice;
+    private CheckBox Glacial_Mass;
+    private CheckBox Enriched_Clear_Icicle;
+    private CheckBox Pristine_White_Glaze;
+    private CheckBox Thick_Blue_Ice;
+    private CheckBox Smooth_Glacial_Mass;
+    private CheckBox Glare_Crust;
+    private CheckBox Dark_Glitter;
+    private CheckBox Gelidus;
+    private CheckBox Krystallos;
 
-        View v;
+    private View v;
 
-    Button Amarr;
-    Button Caldari;
-    Button Minmatar;
-    Button All;
-    Button Gallente;
+    private Button Amarr;
+    private Button Caldari;
+    private Button Minmatar;
+    private Button All;
+    private Button Gallente;
 
-    CheckBox s10;
-    CheckBox s03;
-    CheckBox s01;
-    CheckBox s00;
+    private CheckBox s10;
+    private CheckBox s03;
+    private CheckBox s01;
+    private CheckBox s00;
 
-    AlertDialog dialog;
+    private AlertDialog dialog;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -56,21 +55,22 @@ public class OreCice extends AppCompatActivity {
         loadViews();
     }
 
-    public void getViews() {
-        Clear_Icicle = (CheckBox) findViewById(R.id.Clear_Icicle);
-        White_Glaze = (CheckBox) findViewById(R.id.White_Glaze);
-        Blue_Ice = (CheckBox) findViewById(R.id.Blue_Ice);
-        Glacial_Mass = (CheckBox) findViewById(R.id.Glacial_Mass);
-        Enriched_Clear_Icicle = (CheckBox) findViewById(R.id.Enriched_Clear_Icicle);
-        Pristine_White_Glaze = (CheckBox) findViewById(R.id.Pristine_White_Glaze);
-        Thick_Blue_Ice = (CheckBox) findViewById(R.id.Thick_Blue_Ice);
-        Smooth_Glacial_Mass = (CheckBox) findViewById(R.id.Smooth_Glacial_Mass);
-        Glare_Crust = (CheckBox) findViewById(R.id.Glare_Crust);
-        Dark_Glitter = (CheckBox) findViewById(R.id.Dark_Glitter);
-        Gelidus = (CheckBox) findViewById(R.id.Gelidus);
-        Krystallos = (CheckBox) findViewById(R.id.Krystallos);
+    private void getViews() {
+        Clear_Icicle = findViewById(R.id.Clear_Icicle);
+        White_Glaze = findViewById(R.id.White_Glaze);
+        Blue_Ice = findViewById(R.id.Blue_Ice);
+        Glacial_Mass = findViewById(R.id.Glacial_Mass);
+        Enriched_Clear_Icicle = findViewById(R.id.Enriched_Clear_Icicle);
+        Pristine_White_Glaze = findViewById(R.id.Pristine_White_Glaze);
+        Thick_Blue_Ice = findViewById(R.id.Thick_Blue_Ice);
+        Smooth_Glacial_Mass = findViewById(R.id.Smooth_Glacial_Mass);
+        Glare_Crust = findViewById(R.id.Glare_Crust);
+        Dark_Glitter = findViewById(R.id.Dark_Glitter);
+        Gelidus = findViewById(R.id.Gelidus);
+        Krystallos = findViewById(R.id.Krystallos);
     }
-    public void loadViews() {
+
+    private void loadViews() {
         Clear_Icicle.setChecked(sharedPref.getBoolean("Clear_Icicle", true));
         White_Glaze.setChecked(sharedPref.getBoolean("White_Glaze", true));
         Blue_Ice.setChecked(sharedPref.getBoolean("Blue_Ice", true));
@@ -84,17 +84,18 @@ public class OreCice extends AppCompatActivity {
         Gelidus.setChecked(sharedPref.getBoolean("Gelidus", true));
         Krystallos.setChecked(sharedPref.getBoolean("Krystallos", true));
     }
-    public void findButtons() {
-        Amarr = (Button) v.findViewById(R.id.toggleButtonA);
-        Caldari = (Button) v.findViewById(R.id.toggleButtonC);
-        Gallente = (Button) v.findViewById(R.id.toggleButtonG);
-        Minmatar = (Button) v.findViewById(R.id.toggleButtonM);
-        All = (Button) v.findViewById(R.id.toggleButtonAll);
-
-        s10 = (CheckBox) v.findViewById(R.id.s1_0);
-        s03 = (CheckBox) v.findViewById(R.id.s0_3);
-        s01 = (CheckBox) v.findViewById(R.id.s0_1);
-        s00 = (CheckBox) v.findViewById(R.id.s0_0);
+
+    private void findButtons() {
+        Amarr = v.findViewById(R.id.toggleButtonA);
+        Caldari = v.findViewById(R.id.toggleButtonC);
+        Gallente = v.findViewById(R.id.toggleButtonG);
+        Minmatar = v.findViewById(R.id.toggleButtonM);
+        All = v.findViewById(R.id.toggleButtonAll);
+
+        s10 = v.findViewById(R.id.s1_0);
+        s03 = v.findViewById(R.id.s0_3);
+        s01 = v.findViewById(R.id.s0_1);
+        s00 = v.findViewById(R.id.s0_0);
     }
 
     public void openSelection(View view) {
@@ -122,7 +123,7 @@ public class OreCice extends AppCompatActivity {
         editor.commit();
     }
 
-    public String whatButton(View view) {
+    private String whatButton(View view) {
         if(view==Amarr) {return "A";}
         if(view==Caldari) {return "C";}
         if(view==Gallente) {return "G";}
@@ -130,7 +131,7 @@ public class OreCice extends AppCompatActivity {
         return "All";
     }
 
-    public void paintOne() {
+    private void paintOne() {
         String View=sharedPref.getString("Button", "All");
         switch (View){
             case "A": ViewCompat.setBackgroundTintList(Amarr, ColorStateList.valueOf(0xaaaaaaaa)); break;
@@ -141,7 +142,7 @@ public class OreCice extends AppCompatActivity {
         }
     }
 
-    public void checkCheckBox() {
+    private void checkCheckBox() {
         String box=sharedPref.getString("CB", "s00");
         switch (box) {
             case "s10": s10.setChecked(true); break;
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/BasePrices.java b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/BasePrices.java
index 87eee27..95c86d5 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/BasePrices.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/BasePrices.java
@@ -1,6 +1,315 @@
 package org.devfleet.android.minerhelper.priceActivities;
 
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.res.TypedArray;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Handler;
+import android.preference.PreferenceManager;
 import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.RecyclerView;
+import android.view.MenuItem;
+import android.view.View;
 
-public class BasePrices extends AppCompatActivity {
+import org.devfleet.android.minerhelper.About;
+import org.devfleet.android.minerhelper.R;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Calendar;
+import java.util.Scanner;
+
+public abstract class BasePrices extends AppCompatActivity implements SharedPreferences.OnSharedPreferenceChangeListener {
+
+    private final Handler repeatedTVUpdater = new Handler();
+    private final Handler repeatedUpdater = new Handler();
+    String base;
+    private final Runnable repeatedUpdate = new Runnable() {
+        @Override
+        public void run() {
+            refresh();
+            repeatedTVUpdater.postDelayed(repeatedUpdate, 5 * 60000);
+        }
+    };
+    String Status;
+    long timeMS;
+    private final Runnable repeatedTVUpdate = new Runnable() {
+        @Override
+        public void run() {
+            updateTV();
+            repeatedTVUpdater.postDelayed(repeatedTVUpdate, 60000);
+        }
+    };
+    boolean setStatusError = false;
+
+    private static String getResponse(URL url) throws IOException {
+        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+        try {
+            InputStream in = urlConnection.getInputStream();
+            Scanner scanner = new Scanner(in);
+            scanner.useDelimiter("\\A");
+            boolean hasInput = scanner.hasNext();
+            if (hasInput) {
+                return scanner.next();
+            } else {
+                return null;
+            }
+        } finally {
+            urlConnection.disconnect();
+        }
+    }
+
+    @Override
+    protected void onStart() {
+        writeStringstofloats();
+        resort();
+        super.onStart();
+        repeatedTVUpdate.run();
+        repeatedUpdate.run();
+    }
+
+    @Override
+    protected void onStop() {
+        super.onStop();
+        repeatedTVUpdater.removeCallbacks(repeatedTVUpdate);
+        repeatedUpdater.removeCallbacks(repeatedUpdate);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        PreferenceManager.getDefaultSharedPreferences(this)
+                .unregisterOnSharedPreferenceChangeListener(this);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+
+            case R.id.action_settings:
+                launchSystemSettings();
+                return true;
+            case R.id.action_select:
+                launchSelectionSettings();
+                return true;
+
+            case R.id.action_ore:
+                launchOre();
+                return true;
+            case R.id.action_gas:
+                launchGas();
+                return true;
+            case R.id.action_ice:
+                launchIce();
+                return true;
+
+            case R.id.action_about:
+                launchAbout();
+                return true;
+            case R.id.action_refresh:
+                refresh();
+                return true;
+            case R.id.action_sort:
+                sortBy();
+                return true;
+
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    abstract void launchSelectionSettings();
+
+    abstract void launchSystemSettings();
+
+    abstract void sortBy();
+
+    private void launchOre() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+        editor.putBoolean("IcePrices", false);
+        editor.putBoolean("Gas", false);
+        editor.commit();
+
+        Intent changeIntent = new Intent(this, OrePrices.class);
+        finish();
+        startActivity(changeIntent);
+        this.overridePendingTransition(0, 0);
+    }
+
+    private void launchGas() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+        editor.putBoolean("IcePrices", false);
+        editor.putBoolean("Gas", true);
+        editor.commit();
+
+        Intent changeIntent = new Intent(this, GasPrices.class);
+        finish();
+        startActivity(changeIntent);
+        this.overridePendingTransition(0, 0);
+    }
+
+    private void launchIce() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+        editor.putBoolean("Gas", false);
+        editor.putBoolean("IcePrices", true);
+        editor.commit();
+
+        Intent changeIntent = new Intent(this, IcePrices.class);
+        finish();
+        startActivity(changeIntent);
+        this.overridePendingTransition(0, 0);
+    }
+
+    private void launchAbout() {
+        Intent launchAbout = new Intent(this, About.class);
+        startActivity(launchAbout);
+    }
+
+    abstract void writeStringstofloats();
+
+    abstract void resort();
+
+    void updateTV() {
+        Calendar c = Calendar.getInstance();
+        long time = c.getTimeInMillis();
+        long rightNow = time - timeMS;
+        rightNow = rightNow / 60000;
+        if (rightNow < 15 && rightNow >= 0) {
+            Status = "Up to date";
+        }
+        if (rightNow >= 15) {
+            Status = "Updated " + rightNow + " minutes ago";
+        }
+        if (rightNow < 0) {
+            Status = "Time travel error";
+        }
+        if (timeMS == 0) {
+            Status = "Updating...";
+        }
+    }
+
+    void refresh() {
+        Uri ApiUri = makeURI();
+        URL url = null;
+        try {
+            url = new URL(ApiUri.toString());
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+        new fetch().execute(url);
+    }
+
+    private Uri makeURI() {
+        String SystemNum;
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        String SystemNames = sharedPref.getString("SystemNames", "Jita");
+        switch (SystemNames) {
+            case "Jita":
+                SystemNum = "60003760";
+                break;
+            case "Amarr":
+                SystemNum = "60008494";
+                break;
+            case "Rens":
+                SystemNum = "60004588";
+                break;
+            case "Dodixie":
+                SystemNum = "60011866";
+                break;
+            case "Hek":
+                SystemNum = "60005686";
+                break;
+            default:
+                SystemNum = "0";
+                break;
+        }
+        return Uri.parse(base).buildUpon()
+                .appendQueryParameter("station", SystemNum)
+                .build();
+    }
+
+    abstract void getInfo(String s);
+
+    class fetch extends AsyncTask<URL, Void, String> {
+        @Override
+        protected String doInBackground(URL... urls) {
+            URL search = urls[0];
+            String results = null;
+            try {
+                results = getResponse(search);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            return results;
+        }
+
+        @Override
+        protected void onPostExecute(String s) {
+            if (s != null && !s.equals("")) {
+                setStatusError = false;
+
+                JSONObject obj = null;
+                try {
+                    obj = new JSONObject(s);
+                } catch (Throwable ignored) {
+                }
+
+                if (obj != null) {
+                    getInfo(s);
+                } else {
+                    setStatusError = true;
+                }
+            } else {
+                setStatusError = true;
+            }
+            resort();
+        }
+    }
+
+    class DividerItemDecoration extends RecyclerView.ItemDecoration {
+
+        private final int[] ATTRS = new int[]{android.R.attr.listDivider};
+
+        private final Drawable divider;
+
+        DividerItemDecoration(Context context) {
+            final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS);
+            divider = styledAttributes.getDrawable(0);
+            styledAttributes.recycle();
+        }
+
+
+        @Override
+        public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
+            int left = parent.getPaddingLeft();
+            int right = parent.getWidth() - parent.getPaddingRight();
+
+            int childCount = parent.getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                View child = parent.getChildAt(i);
+
+                RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
+
+                int top = child.getBottom() + params.bottomMargin;
+                int bottom = top + divider.getIntrinsicHeight();
+
+                divider.setBounds(left, top, right, bottom);
+                divider.draw(c);
+            }
+        }
+    }
 }
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/GasPrices.java b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/GasPrices.java
index 7f7b29e..f5c0367 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/GasPrices.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/GasPrices.java
@@ -4,58 +4,52 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Handler;
 import android.preference.PreferenceManager;
 import android.support.v7.app.AlertDialog;
-import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-
-import org.devfleet.android.minerhelper.About;
 import org.devfleet.android.minerhelper.OreCgas;
 import org.devfleet.android.minerhelper.R;
 import org.devfleet.android.minerhelper.SystemCgas;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.Calendar;
-import java.util.Scanner;
 
+public class GasPrices extends BasePrices {
+
+    private final int[] Sort = new int[26];
+    private GreenAdapter mAdapter;
+    private RecyclerView mNumbersList;
 
-public class GasPrices extends BasePrices implements SharedPreferences.OnSharedPreferenceChangeListener {
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.buttonsgas, menu);
 
-    GasPrices.GreenAdapter mAdapter;
-    RecyclerView mNumbersList;
+        return super.onCreateOptionsMenu(menu);
+    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
+        base = "https://market.fuzzwork.co.uk/aggregates/?types=30375,30376,30370,30371,30372,30373,30374,30377,30378,25268,25279,25275,25273,25277,25276,25278,25274,28694,28695,28696,28697,28698,28699,28700,28701";
+
         super.onCreate(savedInstanceState);
 
         setContentView(R.layout.activity_main);
-        mNumbersList = (RecyclerView) findViewById(R.id.RecV);
+        mNumbersList = findViewById(R.id.RecV);
         LinearLayoutManager layoutManager = new LinearLayoutManager(this);
         mNumbersList.setLayoutManager(layoutManager);
         mNumbersList.setHasFixedSize(true);
-        mAdapter = new GasPrices.GreenAdapter();
+        mAdapter = new GreenAdapter();
         mNumbersList.addItemDecoration(new GasPrices.DividerItemDecoration(this));
         mNumbersList.setAdapter(mAdapter);
 
@@ -63,122 +57,17 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         sharedPref.registerOnSharedPreferenceChangeListener(this);
     }
 
-    @Override
-    protected void onStart() {
-        writeStringstofloats();
-        resort();
-        super.onStart();
-        repeatedTVUpdate.run();
-        repeatedUpdate.run();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        repeatedTVUpdater.removeCallbacks(repeatedTVUpdate);
-        repeatedUpdater.removeCallbacks(repeatedUpdate);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        PreferenceManager.getDefaultSharedPreferences(this)
-                .unregisterOnSharedPreferenceChangeListener(this);
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.buttonsgas, menu);
-
-        return super.onCreateOptionsMenu(menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.action_settingsIce:
-                launchSystemC();
-                return true;
-            case R.id.action_refresh:
-                refresh();
-                return true;
-            case R.id.action_sort:
-                sortBy();
-                return true;
-            case R.id.action_iceChoice:
-                launchOreC();
-                return true;
-            case R.id.action_backtoOre:
-                launchGas();
-                return true;
-            case R.id.action_ice:
-                launchice();
-                return true;
-            case R.id.action_about:
-                launchAbout();
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-
-        }
-    }
-
-    public void launchGas() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(GasPrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("Gas",false);
-        editor.commit();
-
-        Intent iceintent = new Intent (this, OrePrices.class);
-        finish();
-        startActivity(iceintent);
-        this.overridePendingTransition(0, 0);
-    }
-
-    public void launchice() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(GasPrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("Gas",false);
-        editor.putBoolean("IcePrices",true);
-        editor.commit();
-
-        Intent iceintent = new Intent (this, OrePrices.class);
-        finish();
-        startActivity(iceintent);
-        this.overridePendingTransition(0, 0);
-    }
-
-    public void launchSystemC() {
+    void launchSystemSettings() {
         Intent launchSystemC = new Intent(this, SystemCgas.class);
         startActivity(launchSystemC);
     }
 
-    public void launchOreC() {
+    void launchSelectionSettings() {
         Intent launchOreC = new Intent(this, OreCgas.class);
         startActivity(launchOreC);
     }
 
-    public void launchAbout() {
-        Intent launchAbout = new Intent(this, About.class);
-        startActivity(launchAbout);
-    }
-
-    public void refresh() {
-        Uri ApiUri = makeURI();
-        URL url = null;
-        try {
-            url = new URL(ApiUri.toString());
-        } catch (MalformedURLException e) {
-            e.printStackTrace();
-        }
-        new GasPrices.fetch().execute(url);
-
-    }
-
-    public void sortBy() {
+    void sortBy() {
         AlertDialog.Builder builder = new AlertDialog.Builder(GasPrices.this);
         builder.setTitle(R.string.dialog_message);
         builder.setItems(R.array.sortOptions, new DialogInterface.OnClickListener() {
@@ -204,81 +93,6 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         dialog.show();
     }
 
-    public Uri makeURI() {
-        String SystemNum;
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        String SystemNames = sharedPref.getString("SystemNames","Jita");
-        switch (SystemNames) {
-            case "Jita": SystemNum="60003760"; break;
-            case "Amarr": SystemNum="60008494"; break;
-            case "Rens": SystemNum="60004588"; break;
-            case "Dodixie": SystemNum="60011866"; break;
-            case "Hek": SystemNum="60005686"; break;
-            default: SystemNum="0"; break;
-        }
-
-        String base = "https://market.fuzzwork.co.uk/aggregates/?types=30375,30376,30370,30371,30372,30373,30374,30377,30378,25268,25279,25275,25273,25277,25276,25278,25274,28694,28695,28696,28697,28698,28699,28700,28701";
-
-        Uri ApiUri = Uri.parse(base).buildUpon()
-
-                .appendQueryParameter("station", SystemNum)
-                .build();
-
-        return ApiUri;
-    }
-
-    public static String getResponse(URL url) throws IOException {
-        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-        try {
-            InputStream in = urlConnection.getInputStream();
-            Scanner scanner = new Scanner(in);
-            scanner.useDelimiter("\\A");
-            boolean hasInput = scanner.hasNext();
-            if (hasInput) {
-                return scanner.next();
-            } else {
-                return null;
-            }
-        } finally {
-            urlConnection.disconnect();
-        }
-
-    }
-
-    public class fetch extends AsyncTask<URL, Void, String> {
-        @Override
-        protected String doInBackground(URL... urls) {
-            URL search = urls[0];
-            String results = null;
-            try {
-                results = getResponse(search);
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            return results;
-        }
-
-        @Override
-        protected void onPostExecute(String s) {
-            if (s != null && !s.equals("")) {
-                setStatusError = false;
-
-                JSONObject obj = null;
-                try {
-                    obj = new JSONObject(s);
-                } catch (Throwable t) {                }
-
-                if(obj!=null) {
-                    getInfo(s); } else {
-                    setStatusError = true;
-                }
-            } else {
-                setStatusError = true;
-            }
-            resort();
-        }
-    }
-
     public void getInfo(String s) {
         JSONObject obj = null;
         try {
@@ -286,7 +100,7 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
             obj = new JSONObject(s);
 
 
-        } catch (Throwable t) {
+        } catch (Throwable ignored) {
 
         }
 
@@ -298,7 +112,7 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         for (int i = 1; i!=26; i++) {
             try {
                 editor.putFloat("Uncompressed SellG" + i, Float.parseFloat(String.valueOf(obj.getJSONObject(nums[i-1]).getJSONObject("sell").get("min"))));
-            } catch (JSONException e) {
+            } catch (JSONException ignored) {
             }
         }
         for (int i = 1; i!=26; i++) {
@@ -330,54 +144,252 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         Calendar c = Calendar.getInstance();
         timeMS = c.getTimeInMillis();
         updateTV();
+        mAdapter.notifyItemChanged(0);
     }
 
-    String Status;
-    public long timeMS;
-    boolean setStatusError = false;
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
 
-    Handler repeatedTVUpdater = new Handler();
-    Runnable repeatedTVUpdate = new Runnable() {
-        @Override
-        public void run() {
-            updateTV();
-            repeatedTVUpdater.postDelayed(repeatedTVUpdate, 60000);
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+
+        for (int i = 1; i != 26; i++) {
+            if (key.equals("CustomSG" + String.valueOf(i)) || key.equals("Perc") || key.equals("MPC") || key.equals("Time") || key.equals("Min")) {
+                {
+                    if (sharedPref.getString(key, "0.00").equals("")) {
+                        editor.remove(key);
+                        editor.commit();
+                    }
+                }
+            }
         }
-    };
 
-    Handler repeatedUpdater = new Handler();
-    Runnable repeatedUpdate = new Runnable() {
-        @Override
-        public void run() {
+        if (key.equals("SystemNames")) {
             refresh();
-            repeatedTVUpdater.postDelayed(repeatedUpdate, 5*60000);
         }
-    };
+    }
 
-    public void updateTV() {
-        Calendar c = Calendar.getInstance();
-        long time = c.getTimeInMillis();
-        long rightNow = time - timeMS;
-        rightNow = rightNow / 60000;
-        if (rightNow < 15 && rightNow >= 0) {
-            Status = "Up to date";
-        }
-        if (rightNow >= 15) {
-            Status = "Updated " + rightNow + " minutes ago";
+    void resort() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(GasPrices.this);
+        int i = 1;
+        for (int c = 1; !(c == 26); c++) {
+            switch (c) {
+                case 1:
+                    if (sharedPref.getBoolean("C28", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 2:
+                    if (sharedPref.getBoolean("C32", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 3:
+                    if (sharedPref.getBoolean("C50", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 4:
+                    if (sharedPref.getBoolean("C60", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 5:
+                    if (sharedPref.getBoolean("C70", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 6:
+                    if (sharedPref.getBoolean("C72", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 7:
+                    if (sharedPref.getBoolean("C84", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 8:
+                    if (sharedPref.getBoolean("C320", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 9:
+                    if (sharedPref.getBoolean("C540", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 10:
+                    if (sharedPref.getBoolean("Amber_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 11:
+                    if (sharedPref.getBoolean("Azure_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 12:
+                    if (sharedPref.getBoolean("Celadon_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 13:
+                    if (sharedPref.getBoolean("Golden_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 14:
+                    if (sharedPref.getBoolean("Lime_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 15:
+                    if (sharedPref.getBoolean("Malachite_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 16:
+                    if (sharedPref.getBoolean("Vermillion_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 17:
+                    if (sharedPref.getBoolean("Viridian_Cytoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 18:
+                    if (sharedPref.getBoolean("Amber_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 19:
+                    if (sharedPref.getBoolean("Azure_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 20:
+                    if (sharedPref.getBoolean("Celadon_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 21:
+                    if (sharedPref.getBoolean("Golden_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 22:
+                    if (sharedPref.getBoolean("Lime_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 23:
+                    if (sharedPref.getBoolean("Malachite_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 24:
+                    if (sharedPref.getBoolean("Vermillion_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 25:
+                    if (sharedPref.getBoolean("Viridian_Mykoserocin", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+
+            }
         }
-        if (rightNow < 0) {
-            Status = "Time travel error";
+
+        switch (sharedPref.getString("SortG", "PPV")) {
+            case "PPV":
+                String VolG[] = getResources().getStringArray(R.array.VolG);
+                boolean tT = true;
+                while (tT) {
+                    tT = false;
+                    for (int k = 1; k < i - 1; k++) {
+                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k]), (float) 0.00) / Float.parseFloat(VolG[Sort[k]]) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k + 1]), (float) 0.00) / Float.parseFloat(VolG[Sort[k + 1]])) {
+                            int r = Sort[k];
+                            Sort[k] = Sort[k + 1];
+                            Sort[k + 1] = r;
+                            tT = true;
+                        }
+                    }
+                }
+                int[] SortRR = new int[i];
+                for (int KKK = 1; KKK < i; KKK++) {
+                    SortRR[KKK] = Sort[i - KKK];
+                }
+                System.arraycopy(SortRR, 1, Sort, 1, i - 1);
+                break;
+            case "PPU":
+                boolean t = true;
+                while (t) {
+                    t = false;
+                    for (int k = 1; k < i - 1; k++) {
+                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k + 1]), (float) 0.00)) {
+                            int r = Sort[k];
+                            Sort[k] = Sort[k + 1];
+                            Sort[k + 1] = r;
+                            t = true;
+                        }
+                    }
+                }
+                int[] SortR = new int[i];
+                for (int KKK = 1; KKK < i; KKK++) {
+                    SortR[KKK] = Sort[i - KKK];
+                }
+                System.arraycopy(SortR, 1, Sort, 1, i - 1);
+                break;
+            default:
+                break;
         }
-        if (timeMS == 0) {
-            Status = "Updating...";
+
+
+        mAdapter.notifyDataSetChanged();
+    }
+
+    void writeStringstofloats() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+        for (int count = 1; count != 26; count++) {
+            editor.putFloat("CustomG" + count, Float.parseFloat(sharedPref.getString("CustomSG" + count, "0.00")));
         }
-        mAdapter.notifyItemChanged(0);
+        editor.commit();
     }
 
-    public class GreenAdapter extends RecyclerView.Adapter<GasPrices.GreenAdapter.NumberViewHolder> {
+    public class GreenAdapter extends RecyclerView.Adapter<GreenAdapter.NumberViewHolder> {
 
         private final String TAG = GasPrices.GreenAdapter.class.getSimpleName();
-        SharedPreferences sharedPref;
+        final SharedPreferences sharedPref;
 
         GreenAdapter() {
             sharedPref = PreferenceManager.getDefaultSharedPreferences(GasPrices.this);
@@ -420,7 +432,6 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         }
 
 
-
         @Override
         public int getItemCount() {
             int i = 0;
@@ -494,7 +505,7 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
                 i++;
             }
 
-            
+
             if (sharedPref.getBoolean("Amber_Mykoserocin", true)) {
                 i++;
             }
@@ -528,7 +539,6 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
             }
 
 
-
             i++;
 
             return i;
@@ -537,23 +547,21 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
         class NumberViewHolder extends RecyclerView.ViewHolder {
 
 
-            TextView listItemNumberView;
-            TextView PPI;
-            TextView PPV;
-            TextView PPH;
+            final TextView listItemNumberView;
+            final TextView PPI;
+            final TextView PPV;
+            final TextView PPH;
+            final String[] Name = getResources().getStringArray(R.array.NamesG);
 
-
-            public NumberViewHolder(View itemView) {
+            NumberViewHolder(View itemView) {
                 super(itemView);
 
-                listItemNumberView = (TextView) itemView.findViewById(R.id.TV1);
-                PPI = (TextView) itemView.findViewById(R.id.PPI);
-                PPV = (TextView) itemView.findViewById(R.id.PPV);
-                PPH = (TextView) itemView.findViewById(R.id.PPH);
+                listItemNumberView = itemView.findViewById(R.id.TV1);
+                PPI = itemView.findViewById(R.id.PPI);
+                PPV = itemView.findViewById(R.id.PPV);
+                PPH = itemView.findViewById(R.id.PPH);
             }
 
-            String Name[]=getResources().getStringArray(R.array.NamesG);
-
             void bind(int listIndex) {
                 switch (listIndex) {
                     case 0:
@@ -561,16 +569,16 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
                         if (setStatusError) {
                             listItemNumberView.append(" Can't connect");
                         }
-                        TextView listItemNumberView2 = (TextView) itemView.findViewById(R.id.TV2);
+                        TextView listItemNumberView2 = itemView.findViewById(R.id.TV2);
                         listItemNumberView2.setText(sharedPref.getString("SystemNames", "Jita") + " ");
 
                         String BSt = "Custom";
                         switch (sharedPref.getString("BS", "Compressed Sell")){
-                        case "Custom": BSt="Custom"; break;
-                        case "Compressed Buy": BSt="Buy"; break;
-                        case "Compressed Sell": BSt="Sell"; break;
-                        case "Uncompressed Sell": BSt="Sell"; break;
-                        case "Uncompressed Buy": BSt="Buy"; break;
+                            case "Custom": BSt="Custom"; break;
+                            case "Compressed Buy": BSt="Buy"; break;
+                            case "Compressed Sell": BSt="Sell"; break;
+                            case "Uncompressed Sell": BSt="Sell"; break;
+                            case "Uncompressed Buy": BSt="Buy"; break;
                         }
 
                         listItemNumberView2.append(BSt + " prices");
@@ -585,159 +593,4 @@ public class GasPrices extends BasePrices implements SharedPreferences.OnSharedP
             }
         }
     }
-
-
-    public class DividerItemDecoration extends RecyclerView.ItemDecoration {
-
-        private final int[] ATTRS = new int[]{android.R.attr.listDivider};
-
-        private Drawable divider;
-
-        public DividerItemDecoration(Context context) {
-            final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS);
-            divider = styledAttributes.getDrawable(0);
-            styledAttributes.recycle();
-        }
-
-
-        @Override
-        public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
-            int left = parent.getPaddingLeft();
-            int right = parent.getWidth() - parent.getPaddingRight();
-
-            int childCount = parent.getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = parent.getChildAt(i);
-
-                RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
-
-                int top = child.getBottom() + params.bottomMargin;
-                int bottom = top + divider.getIntrinsicHeight();
-
-                divider.setBounds(left, top, right, bottom);
-                divider.draw(c);
-            }
-        }
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-
-        for (int i=1;i!=26;i++) {
-            if(key.equals("CustomSG"+String.valueOf(i))||key.equals("Perc")||key.equals("MPC")||key.equals("Time")||key.equals("Min")){
-                {
-                    if (sharedPref.getString(key, "0.00").equals("")) {
-                        editor.remove(key);
-                        editor.commit();
-                    }
-                }
-            }
-        }
-
-        if (key.equals("SystemNames")) {
-            refresh();
-        }
-    }
-
-
-
-    int Sort[]= new int[26];
-
-    public void resort() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(GasPrices.this);
-        int i=1;
-        for(int c=1; !(c==26) ;c++) {
-            switch (c) {
-                case 1: if(sharedPref.getBoolean("C28", true)) {Sort[i]=c; i++;} break;
-                case 2: if(sharedPref.getBoolean("C32", true)) {Sort[i]=c; i++;} break;
-                case 3: if(sharedPref.getBoolean("C50", true)) {Sort[i]=c; i++;} break;
-                case 4: if(sharedPref.getBoolean("C60", true)) {Sort[i]=c; i++;} break;
-                case 5: if(sharedPref.getBoolean("C70", true)) {Sort[i]=c; i++;} break;
-                case 6: if(sharedPref.getBoolean("C72", true)) {Sort[i]=c; i++;} break;
-                case 7: if(sharedPref.getBoolean("C84", true)) {Sort[i]=c; i++;} break;
-                case 8: if(sharedPref.getBoolean("C320", true)) {Sort[i]=c; i++;} break;
-                case 9: if(sharedPref.getBoolean("C540", true)) {Sort[i]=c; i++;} break;
-                case 10: if(sharedPref.getBoolean("Amber_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 11: if(sharedPref.getBoolean("Azure_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 12: if(sharedPref.getBoolean("Celadon_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 13: if(sharedPref.getBoolean("Golden_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 14: if(sharedPref.getBoolean("Lime_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 15: if(sharedPref.getBoolean("Malachite_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 16: if(sharedPref.getBoolean("Vermillion_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 17: if(sharedPref.getBoolean("Viridian_Cytoserocin", true)) {Sort[i]=c; i++;} break;
-                case 18: if(sharedPref.getBoolean("Amber_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 19: if(sharedPref.getBoolean("Azure_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 20: if(sharedPref.getBoolean("Celadon_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 21: if(sharedPref.getBoolean("Golden_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 22: if(sharedPref.getBoolean("Lime_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 23: if(sharedPref.getBoolean("Malachite_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 24: if(sharedPref.getBoolean("Vermillion_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-                case 25: if(sharedPref.getBoolean("Viridian_Mykoserocin", true)) {Sort[i]=c; i++;} break;
-
-            }
-        }
-
-        switch (sharedPref.getString("SortG","PPV")) {
-            case "PPV":
-                String VolG[]=getResources().getStringArray(R.array.VolG);
-                boolean tT = true;
-                while (tT) {
-                    tT = false;
-                    for (int k = 1; k < i - 1; k++) {
-                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k]), (float) 0.00)/Float.parseFloat(VolG[Sort[k]])> sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k + 1]), (float) 0.00)/Float.parseFloat(VolG[Sort[k+1]])) {
-                            int r = Sort[k];
-                            Sort[k] = Sort[k + 1];
-                            Sort[k + 1] = r;
-                            tT = true;
-                        }
-                    }
-                }
-                int[] SortRR = new int[i];
-                for (int KKK = 1; KKK < i; KKK++) {
-                    SortRR[KKK] = Sort[i - KKK];
-                }
-                for (int KKK = 1; KKK < i; KKK++) {
-                    Sort[KKK] = SortRR[KKK];
-                }
-                break;
-            case "PPU":
-                boolean t = true;
-                while (t) {
-                    t = false;
-                    for (int k = 1; k < i - 1; k++) {
-                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "G" + String.valueOf(Sort[k + 1]), (float) 0.00)) {
-                            int r = Sort[k];
-                            Sort[k] = Sort[k + 1];
-                            Sort[k + 1] = r;
-                            t = true;
-                        }
-                    }
-                }
-                int[] SortR = new int[i];
-                for (int KKK = 1; KKK < i; KKK++) {
-                    SortR[KKK] = Sort[i - KKK];
-                }
-                for (int KKK = 1; KKK < i; KKK++) {
-                    Sort[KKK] = SortR[KKK];
-                }
-                break;
-            default: break;
-        }
-
-
-        mAdapter.notifyDataSetChanged();
-    }
-
-    public void writeStringstofloats() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-        for (int count=1;count!=26; count++) {
-            editor.putFloat("CustomG"+count, Float.parseFloat(sharedPref.getString("CustomSG"+count,"0.00")));
-        }
-        editor.commit();
-    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/IcePrices.java b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/IcePrices.java
index d252116..ea6b7b5 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/IcePrices.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/IcePrices.java
@@ -1,54 +1,49 @@
 package org.devfleet.android.minerhelper.priceActivities;
 
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Handler;
 import android.preference.PreferenceManager;
-import android.support.v7.app.AlertDialog;
-import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-import org.devfleet.android.minerhelper.About;
 import org.devfleet.android.minerhelper.OreCice;
 import org.devfleet.android.minerhelper.R;
 import org.devfleet.android.minerhelper.SystemCice;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.Calendar;
-import java.util.Scanner;
 
-public class IcePrices extends BasePrices implements SharedPreferences.OnSharedPreferenceChangeListener {
+public class IcePrices extends BasePrices {
+
+    private final int[] Sort = new int[13];
+    private GreenAdapter mAdapter;
+    private RecyclerView mNumbersList;
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.buttonsice, menu);
+
+        return super.onCreateOptionsMenu(menu);
+    }
 
-    GreenAdapter mAdapter;
-    RecyclerView mNumbersList;
     @Override
     protected void onCreate(Bundle savedInstanceState) {
+        base = "https://market.fuzzwork.co.uk/aggregates/?types=16262,16265,16264,16263,17978,17976,17975,17977,16266,16267,16268,16269,28434,28444,28433,28438,28436,28441,28443,28442,28439,28435,28437,28440";
+
         super.onCreate(savedInstanceState);
 
         setContentView(R.layout.activity_main);
-        mNumbersList = (RecyclerView) findViewById(R.id.RecV);
+        mNumbersList = findViewById(R.id.RecV);
         LinearLayoutManager layoutManager = new LinearLayoutManager(this);
         mNumbersList.setLayoutManager(layoutManager);
         mNumbersList.setHasFixedSize(true);
@@ -60,219 +55,17 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
         sharedPref.registerOnSharedPreferenceChangeListener(this);
     }
 
-    @Override
-    protected void onStart() {
-        writeStringstofloats();
-        resort();
-        super.onStart();
-        repeatedTVUpdate.run();
-        repeatedUpdate.run();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        repeatedTVUpdater.removeCallbacks(repeatedTVUpdate);
-        repeatedUpdater.removeCallbacks(repeatedUpdate);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        PreferenceManager.getDefaultSharedPreferences(this)
-                .unregisterOnSharedPreferenceChangeListener(this);
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.buttonsice, menu);
-
-        return super.onCreateOptionsMenu(menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.action_settingsIce:
-                launchSystemC();
-                return true;
-            case R.id.action_refresh:
-                refresh();
-                return true;
-            case R.id.action_iceChoice:
-                launchOreC();
-                return true;
-            case R.id.action_backtoOre:
-                launchice();
-                return true;
-            case R.id.action_gas:
-                launchgas();
-                return true;
-            case R.id.action_about:
-                launchAbout();
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-
-        }
-    }
-
-    public void launchice() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("IcePrices",false);
-        editor.commit();
-
-        Intent iceintent = new Intent (this, OrePrices.class);
-        finish();
-        startActivity(iceintent);
-        this.overridePendingTransition(0, 0);
-    }
-
-    public void launchgas() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("IcePrices",false);
-        editor.putBoolean("Gas",true);
-        editor.commit();
-
-        Intent iceintent = new Intent (this, OrePrices.class);
-        finish();
-        startActivity(iceintent);
-        this.overridePendingTransition(0, 0);
-    }
-
-    public void launchSystemC() {
+    void launchSystemSettings() {
         Intent launchSystemC = new Intent(this, SystemCice.class);
         startActivity(launchSystemC);
     }
 
-    public void launchOreC() {
+    void launchSelectionSettings() {
         Intent launchOreC = new Intent(this, OreCice.class);
         startActivity(launchOreC);
     }
 
-    public void launchAbout() {
-        Intent launchAbout = new Intent(this, About.class);
-        startActivity(launchAbout);
-    }
-
-    public void refresh() {
-        Uri ApiUri = makeURI();
-        URL url = null;
-        try {
-            url = new URL(ApiUri.toString());
-        } catch (MalformedURLException e) {
-            e.printStackTrace();
-        }
-        new fetch().execute(url);
-
-    }
-
-    public void sortBy() {
-        AlertDialog.Builder builder = new AlertDialog.Builder(IcePrices.this);
-        builder.setTitle(R.string.dialog_message);
-        builder.setItems(R.array.sortOptions, new DialogInterface.OnClickListener() {
-            public void onClick(DialogInterface dialog, int which) {
-                SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
-                SharedPreferences.Editor editor = sharedPref.edit();
-                switch (which) {
-                    case 0:
-                        editor.putString("Sort","PPV");
-                        break;
-                    case 1:
-                        editor.putString("Sort","PPU");
-                        break;
-                    case 2:
-                        editor.putString("Sort","PPN");
-                        break;
-                }
-                editor.commit();
-                resort();
-            }
-        });
-        AlertDialog dialog = builder.create();
-        dialog.show();
-    }
-
-    public Uri makeURI() {
-        String SystemNum;
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        String SystemNames = sharedPref.getString("SystemNames","Jita");
-        switch (SystemNames) {
-            case "Jita": SystemNum="60003760"; break;
-            case "Amarr": SystemNum="60008494"; break;
-            case "Rens": SystemNum="60004588"; break;
-            case "Dodixie": SystemNum="60011866"; break;
-            case "Hek": SystemNum="60005686"; break;
-            default: SystemNum="0"; break;
-        }
-
-        String base = "https://market.fuzzwork.co.uk/aggregates/?types=16262,16265,16264,16263,17978,17976,17975,17977,16266,16267,16268,16269,28434,28444,28433,28438,28436,28441,28443,28442,28439,28435,28437,28440";
-
-        Uri ApiUri = Uri.parse(base).buildUpon()
-
-                // .appendQueryParameter("types", "22,1223,1225,1232,1229,21,1231,1226,20,11396,1227,18,1224,1228,19,1230,17425,17428,17432,17436,17865,17440,17444,17448,17452,17869,17867,17455,17459,17463,17466,17470,17426,17429,17433,17437,17866,17441,17445,17449,17453,17870,17868,17456,17460,17464,17467,17471,28367,28388,28391,28394,28397,28401,28403,28406,28410,28413,28416,28422,28424,28429,28420,28432,28385,28389,28392,28395,28398,28400,28404,28407,28409,28412,28415,28421,28425,28427,28418,28430,28387,28390,28393,28396,28399,28402,28405,28408,28411,28414,28417,28423,28426,28428,28419,28431")
-
-                .appendQueryParameter("station", SystemNum)
-                .build();
-
-        return ApiUri;
-    }
-
-    public static String getResponse(URL url) throws IOException {
-        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-        try {
-            InputStream in = urlConnection.getInputStream();
-            Scanner scanner = new Scanner(in);
-            scanner.useDelimiter("\\A");
-            boolean hasInput = scanner.hasNext();
-            if (hasInput) {
-                return scanner.next();
-            } else {
-                return null;
-            }
-        } finally {
-            urlConnection.disconnect();
-        }
-
-    }
-
-    public class fetch extends AsyncTask<URL, Void, String> {
-        @Override
-        protected String doInBackground(URL... urls) {
-            URL search = urls[0];
-            String results = null;
-            try {
-                results = getResponse(search);
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            return results;
-        }
-
-        @Override
-        protected void onPostExecute(String s) {
-            if (s != null && !s.equals("")) {
-                setStatusError = false;
-
-                JSONObject obj = null;
-                try {
-                    obj = new JSONObject(s);
-                } catch (Throwable t) {                }
-
-                if(obj!=null) {
-                    getInfo(s); } else {
-                    setStatusError = true;
-                }
-            } else {
-                setStatusError = true;
-            }
-            resort();
-        }
+    void sortBy() {
     }
 
     public void getInfo(String s) {
@@ -282,7 +75,7 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
             obj = new JSONObject(s);
 
 
-        } catch (Throwable t) {
+        } catch (Throwable ignored) {
 
         }
 
@@ -294,7 +87,7 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
         for (int i = 1; i!=13; i++) {
             try {
                 editor.putFloat("Uncompressed SellI" + i, Float.parseFloat(String.valueOf(obj.getJSONObject(nums[i-1]).getJSONObject("sell").get("min"))));
-            } catch (JSONException e) {
+            } catch (JSONException ignored) {
             }
         }
         for (int i = 1; i!=13; i++) {
@@ -326,54 +119,146 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
         Calendar c = Calendar.getInstance();
         timeMS = c.getTimeInMillis();
         updateTV();
+        mAdapter.notifyItemChanged(0);
     }
 
-    String Status;
-    public long timeMS;
-    boolean setStatusError = false;
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
 
-    Handler repeatedTVUpdater = new Handler();
-    Runnable repeatedTVUpdate = new Runnable() {
-        @Override
-        public void run() {
-            updateTV();
-            repeatedTVUpdater.postDelayed(repeatedTVUpdate, 60000);
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+
+        for (int i = 1; i != 13; i++) {
+            if (key.equals("CustomSI" + String.valueOf(i)) || key.equals("Perc") || key.equals("MPC") || key.equals("Time") || key.equals("Min")) {
+                {
+                    if (sharedPref.getString(key, "0.00").equals("")) {
+                        editor.remove(key);
+                        editor.commit();
+                    }
+                }
+            }
         }
-    };
 
-    Handler repeatedUpdater = new Handler();
-    Runnable repeatedUpdate = new Runnable() {
-        @Override
-        public void run() {
+        if (key.equals("SystemNames")) {
             refresh();
-            repeatedTVUpdater.postDelayed(repeatedUpdate, 5*60000);
         }
-    };
+    }
 
-    public void updateTV() {
-        Calendar c = Calendar.getInstance();
-        long time = c.getTimeInMillis();
-        long rightNow = time - timeMS;
-        rightNow = rightNow / 60000;
-        if (rightNow < 15 && rightNow >= 0) {
-            Status = "Up to date";
+    void resort() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
+        int i = 1;
+        for (int c = 1; !(c == 13); c++) {
+            switch (c) {
+                case 1:
+                    if (sharedPref.getBoolean("Clear_Icicle", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 2:
+                    if (sharedPref.getBoolean("White_Glaze", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 3:
+                    if (sharedPref.getBoolean("Blue_Ice", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 4:
+                    if (sharedPref.getBoolean("Glacial_Mass", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 5:
+                    if (sharedPref.getBoolean("Enriched_Clear_Icicle", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 6:
+                    if (sharedPref.getBoolean("Pristine_White_Glaze", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 7:
+                    if (sharedPref.getBoolean("Thick_Blue_Ice", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 8:
+                    if (sharedPref.getBoolean("Smooth_Glacial_Mass", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 9:
+                    if (sharedPref.getBoolean("Glare_Crust", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 10:
+                    if (sharedPref.getBoolean("Dark_Glitter", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 11:
+                    if (sharedPref.getBoolean("Gelidus", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+                case 12:
+                    if (sharedPref.getBoolean("Krystallos", true)) {
+                        Sort[i] = c;
+                        i++;
+                    }
+                    break;
+            }
         }
-        if (rightNow >= 15) {
-            Status = "Updated " + rightNow + " minutes ago";
+
+        boolean t = true;
+        while (t) {
+            t = false;
+            for (int k = 1; k < i - 1; k++) {
+                if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "I" + String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + "I" + String.valueOf(Sort[k + 1]), (float) 0.00)) {
+                    int r = Sort[k];
+                    Sort[k] = Sort[k + 1];
+                    Sort[k + 1] = r;
+                    t = true;
+                }
+            }
         }
-        if (rightNow < 0) {
-            Status = "Time travel error";
+        int[] SortR = new int[i];
+        for (int KKK = 1; KKK < i; KKK++) {
+            SortR[KKK] = Sort[i - KKK];
         }
-        if (timeMS == 0) {
-            Status = "Updating...";
+        System.arraycopy(SortR, 1, Sort, 1, i - 1);
+
+        mAdapter.notifyDataSetChanged();
+    }
+
+    void writeStringstofloats() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+        for (int count = 1; count != 13; count++) {
+            editor.putFloat("CustomI" + count, Float.parseFloat(sharedPref.getString("CustomSI" + count, "0.00")));
         }
-        mAdapter.notifyItemChanged(0);
+        editor.commit();
     }
 
     public class GreenAdapter extends RecyclerView.Adapter<GreenAdapter.NumberViewHolder> {
 
         private final String TAG = GreenAdapter.class.getSimpleName();
-        SharedPreferences sharedPref;
+        final SharedPreferences sharedPref;
 
         GreenAdapter() {
             sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
@@ -467,23 +352,21 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
         class NumberViewHolder extends RecyclerView.ViewHolder {
 
 
-            TextView listItemNumberView;
-            TextView PPI;
-            TextView PPV;
-            TextView PPH;
-
+            final TextView listItemNumberView;
+            final TextView PPI;
+            final TextView PPV;
+            final TextView PPH;
+            final String[] Name = getResources().getStringArray(R.array.NamesI);
 
-            public NumberViewHolder(View itemView) {
+            NumberViewHolder(View itemView) {
                 super(itemView);
 
-                listItemNumberView = (TextView) itemView.findViewById(R.id.TV1);
-                PPI = (TextView) itemView.findViewById(R.id.PPI);
-                PPV = (TextView) itemView.findViewById(R.id.PPV);
-                PPH = (TextView) itemView.findViewById(R.id.PPH);
+                listItemNumberView = itemView.findViewById(R.id.TV1);
+                PPI = itemView.findViewById(R.id.PPI);
+                PPV = itemView.findViewById(R.id.PPV);
+                PPH = itemView.findViewById(R.id.PPH);
             }
 
-            String Name[]=getResources().getStringArray(R.array.NamesI);
-
             void bind(int listIndex) {
                 switch (listIndex) {
                     case 0:
@@ -491,7 +374,7 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
                         if (setStatusError) {
                             listItemNumberView.append(" Can't connect");
                         }
-                        TextView listItemNumberView2 = (TextView) itemView.findViewById(R.id.TV2);
+                        TextView listItemNumberView2 = itemView.findViewById(R.id.TV2);
                         listItemNumberView2.setText(sharedPref.getString("SystemNames", "Jita") + " ");
                         listItemNumberView2.append(sharedPref.getString("BS", "Compressed Sell") + " prices");
                         break;
@@ -504,122 +387,4 @@ public class IcePrices extends BasePrices implements SharedPreferences.OnSharedP
             }
         }
     }
-
-
-    public class DividerItemDecoration extends RecyclerView.ItemDecoration {
-
-        private final int[] ATTRS = new int[]{android.R.attr.listDivider};
-
-        private Drawable divider;
-
-        public DividerItemDecoration(Context context) {
-            final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS);
-            divider = styledAttributes.getDrawable(0);
-            styledAttributes.recycle();
-        }
-
-
-        @Override
-        public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
-            int left = parent.getPaddingLeft();
-            int right = parent.getWidth() - parent.getPaddingRight();
-
-            int childCount = parent.getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = parent.getChildAt(i);
-
-                RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
-
-                int top = child.getBottom() + params.bottomMargin;
-                int bottom = top + divider.getIntrinsicHeight();
-
-                divider.setBounds(left, top, right, bottom);
-                divider.draw(c);
-            }
-        }
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-
-        for (int i=1;i!=13;i++) {
-            if(key.equals("CustomSI"+String.valueOf(i))||key.equals("Perc")||key.equals("MPC")||key.equals("Time")||key.equals("Min")){
-                {
-                    if (sharedPref.getString(key, "0.00").equals("")) {
-                        editor.remove(key);
-                        editor.commit();
-                    }
-                }
-            }
-        }
-
-        if (key.equals("SystemNames")) {
-            refresh();
-        }
-    }
-
-
-
-    int Sort[]= new int[13];
-
-    public void resort() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(IcePrices.this);
-        int i=1;
-        for(int c=1; !(c==13) ;c++) {
-            switch (c) {
-                case 1: if(sharedPref.getBoolean("Clear_Icicle", true)) {Sort[i]=c; i++;} break;
-                case 2: if(sharedPref.getBoolean("White_Glaze", true)) {Sort[i]=c; i++;} break;
-                case 3: if(sharedPref.getBoolean("Blue_Ice", true)) {Sort[i]=c; i++;} break;
-                case 4: if(sharedPref.getBoolean("Glacial_Mass", true)) {Sort[i]=c; i++;} break;
-                case 5: if(sharedPref.getBoolean("Enriched_Clear_Icicle", true)) {Sort[i]=c; i++;} break;
-                case 6: if(sharedPref.getBoolean("Pristine_White_Glaze", true)) {Sort[i]=c; i++;} break;
-                case 7: if(sharedPref.getBoolean("Thick_Blue_Ice", true)) {Sort[i]=c; i++;} break;
-                case 8: if(sharedPref.getBoolean("Smooth_Glacial_Mass", true)) {Sort[i]=c; i++;} break;
-                case 9: if(sharedPref.getBoolean("Glare_Crust", true)) {Sort[i]=c; i++;} break;
-                case 10: if(sharedPref.getBoolean("Dark_Glitter", true)) {Sort[i]=c; i++;} break;
-                case 11: if(sharedPref.getBoolean("Gelidus", true)) {Sort[i]=c; i++;} break;
-                case 12: if(sharedPref.getBoolean("Krystallos", true)) {Sort[i]=c; i++;} break;
-            }
-        }
-
-
-                boolean t=true;
-                while (t) {
-                    t = false;
-                    for (int k = 1; k < i - 1; k++) {
-                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") +"I"+ String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") +"I"+ String.valueOf(Sort[k + 1]), (float) 0.00)) {
-                            int r = Sort[k];
-                            Sort[k] = Sort[k + 1];
-                            Sort[k + 1] = r;
-                            t = true;
-                        }
-                    }
-                }
-                int[] SortR=new int[i];
-                for (int KKK=1; KKK<i;KKK++) {
-                    SortR[KKK] = Sort[i-KKK];
-                }
-                for (int KKK=1; KKK<i;KKK++) {
-                    Sort[KKK]=SortR[KKK];
-                }
-
-
-
-
-        mAdapter.notifyDataSetChanged();
-    }
-
-    public void writeStringstofloats() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-        for (int count=1;count!=13; count++) {
-
-            editor.putFloat("CustomI"+count, Float.parseFloat(sharedPref.getString("CustomSI"+count,"0.00")));
-        }
-        editor.commit();
-    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/OrePrices.java b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/OrePrices.java
index ad2c9d5..e5e5801 100644
--- a/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/OrePrices.java
+++ b/app/src/main/java/org/devfleet/android/minerhelper/priceActivities/OrePrices.java
@@ -4,50 +4,44 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.content.res.TypedArray;
-import android.graphics.Canvas;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Handler;
 import android.preference.PreferenceManager;
 import android.support.v7.app.AlertDialog;
-import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
 
-
-import org.devfleet.android.minerhelper.About;
 import org.devfleet.android.minerhelper.OreC;
 import org.devfleet.android.minerhelper.R;
 import org.devfleet.android.minerhelper.SystemC;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
 import java.util.Calendar;
-import java.util.Scanner;
 
-public class OrePrices extends BasePrices implements SharedPreferences.OnSharedPreferenceChangeListener {
+public class OrePrices extends BasePrices {
+
+    private final int[] Sort = new int[49];
+    private GreenAdapter mAdapter;
+    private RecyclerView mNumbersList;
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.buttons, menu);
 
-    GreenAdapter mAdapter;
-    RecyclerView mNumbersList;
+        return super.onCreateOptionsMenu(menu);
+    }
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
+
+        base = "https://market.fuzzwork.co.uk/aggregates/?types=22,1223,1225,1232,1229,21,1231,1226,20,11396,1227,18,1224,1228,19,1230,17425,17428,17432,17436,17865,17440,17444,17448,17452,17869,17867,17455,17459,17463,17466,17470,17426,17429,17433,17437,17866,17441,17445,17449,17453,17870,17868,17456,17460,17464,17467,17471,28367,28388,28391,28394,28397,28401,28403,28406,28410,28413,28416,28422,28424,28429,28420,28432,28385,28389,28392,28395,28398,28400,28404,28407,28409,28412,28415,28421,28425,28427,28418,28430,28387,28390,28393,28396,28399,28402,28405,28408,28411,28414,28417,28423,28426,28428,28419,28431";
 
         if(PreferenceManager.getDefaultSharedPreferences(this).getBoolean("IcePrices",false)) {
             Intent iceintent = new Intent (this, IcePrices.class);
@@ -62,8 +56,10 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
             this.overridePendingTransition(0, 0);
         }
 
+        super.onCreate(savedInstanceState);
+
         setContentView(R.layout.activity_main);
-        mNumbersList = (RecyclerView) findViewById(R.id.RecV);
+        mNumbersList = findViewById(R.id.RecV);
         LinearLayoutManager layoutManager = new LinearLayoutManager(this);
         mNumbersList.setLayoutManager(layoutManager);
         mNumbersList.setHasFixedSize(true);
@@ -75,115 +71,17 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         sharedPref.registerOnSharedPreferenceChangeListener(this);
     }
 
-    @Override
-    protected void onStart() {
-        writeStringstofloats();
-        resort();
-        super.onStart();
-        repeatedTVUpdate.run();
-        repeatedUpdate.run();
-    }
-
-    @Override
-    protected void onStop() {
-        super.onStop();
-        repeatedTVUpdater.removeCallbacks(repeatedTVUpdate);
-        repeatedUpdater.removeCallbacks(repeatedUpdate);
-    }
-
-    @Override
-    protected void onDestroy() {
-        super.onDestroy();
-        PreferenceManager.getDefaultSharedPreferences(this)
-                .unregisterOnSharedPreferenceChangeListener(this);
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        MenuInflater inflater = getMenuInflater();
-        inflater.inflate(R.menu.buttons, menu);
-
-        return super.onCreateOptionsMenu(menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        switch (item.getItemId()) {
-            case R.id.action_settings:
-                launchSystemC();
-                return true;
-            case R.id.action_refresh:
-                refresh();
-                return true;
-            case R.id.action_sort:
-                sortBy();
-                return true;
-            case R.id.action_ore:
-                launchOreC();
-                return true;
-            case R.id.action_ice:
-                launchice();
-                return true;
-            case R.id.action_gas:
-                launchgas();
-                return true;
-            case R.id.action_about:
-                launchAbout();
-                return true;
-            default:
-                return super.onOptionsItemSelected(item);
-
-        }
-    }
-
-    public void launchice() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(OrePrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("IcePrices",true);
-        editor.commit();
-
-        recreate();
-    }
-
-    public void launchgas() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(OrePrices.this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-        editor.putBoolean("Gas",true);
-        editor.commit();
-
-        recreate();
-    }
-
-    public void launchSystemC() {
+    void launchSystemSettings() {
         Intent launchSystemC = new Intent(this, SystemC.class);
         startActivity(launchSystemC);
     }
 
-    public void launchOreC() {
+    void launchSelectionSettings() {
         Intent launchOreC = new Intent(this, OreC.class);
         startActivity(launchOreC);
     }
 
-    public void launchAbout() {
-        Intent launchAbout = new Intent(this, About.class);
-        startActivity(launchAbout);
-    }
-
-    public void refresh() {
-        Uri ApiUri = makeURI();
-        URL url = null;
-        try {
-            url = new URL(ApiUri.toString());
-        } catch (MalformedURLException e) {
-            e.printStackTrace();
-        }
-        new fetch().execute(url);
-
-    }
-
-    public void sortBy() {
+    void sortBy() {
         AlertDialog.Builder builder = new AlertDialog.Builder(OrePrices.this);
         builder.setTitle(R.string.dialog_message);
         builder.setItems(R.array.sortOptions, new DialogInterface.OnClickListener() {
@@ -209,91 +107,11 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         dialog.show();
     }
 
-    public Uri makeURI() {
-        String SystemNum;
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        String SystemNames = sharedPref.getString("SystemNames","Jita");
-        switch (SystemNames) {
-            case "Jita": SystemNum="60003760"; break;
-            case "Amarr": SystemNum="60008494"; break;
-            case "Rens": SystemNum="60004588"; break;
-            case "Dodixie": SystemNum="60011866"; break;
-            case "Hek": SystemNum="60005686"; break;
-            default: SystemNum="0"; break;
-        }
-
-        String base = "https://market.fuzzwork.co.uk/aggregates/?types=22,1223,1225,1232,1229,21,1231,1226,20,11396,1227,18,1224,1228,19,1230,17425,17428,17432,17436,17865,17440,17444,17448,17452,17869,17867,17455,17459,17463,17466,17470,17426,17429,17433,17437,17866,17441,17445,17449,17453,17870,17868,17456,17460,17464,17467,17471,28367,28388,28391,28394,28397,28401,28403,28406,28410,28413,28416,28422,28424,28429,28420,28432,28385,28389,28392,28395,28398,28400,28404,28407,28409,28412,28415,28421,28425,28427,28418,28430,28387,28390,28393,28396,28399,28402,28405,28408,28411,28414,28417,28423,28426,28428,28419,28431";        Uri ApiUri = Uri.parse(base).buildUpon()
-
-               // .appendQueryParameter("types", "22,1223,1225,1232,1229,21,1231,1226,20,11396,1227,18,1224,1228,19,1230,17425,17428,17432,17436,17865,17440,17444,17448,17452,17869,17867,17455,17459,17463,17466,17470,17426,17429,17433,17437,17866,17441,17445,17449,17453,17870,17868,17456,17460,17464,17467,17471,28367,28388,28391,28394,28397,28401,28403,28406,28410,28413,28416,28422,28424,28429,28420,28432,28385,28389,28392,28395,28398,28400,28404,28407,28409,28412,28415,28421,28425,28427,28418,28430,28387,28390,28393,28396,28399,28402,28405,28408,28411,28414,28417,28423,28426,28428,28419,28431")
-
-                .appendQueryParameter("station", SystemNum)
-                .build();
-
-        return ApiUri;
-    }
-
-    public static String getResponse(URL url) throws IOException {
-        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-        try {
-            InputStream in = urlConnection.getInputStream();
-            Scanner scanner = new Scanner(in);
-            scanner.useDelimiter("\\A");
-            boolean hasInput = scanner.hasNext();
-            if (hasInput) {
-                return scanner.next();
-            } else {
-                return null;
-            }
-        } finally {
-            urlConnection.disconnect();
-        }
-
-    }
-
-    public class fetch extends AsyncTask<URL, Void, String> {
-        @Override
-        protected String doInBackground(URL... urls) {
-            URL search = urls[0];
-            String results = null;
-            try {
-                results = getResponse(search);
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-            return results;
-        }
-
-        @Override
-        protected void onPostExecute(String s) {
-            if (s != null && !s.equals("")) {
-                setStatusError = false;
-
-                JSONObject obj = null;
-                try {
-                    obj = new JSONObject(s);
-                } catch (Throwable t) {                }
-
-                if(obj!=null) {
-                getInfo(s); } else {
-                    setStatusError = true;
-                }
-            } else {
-                setStatusError = true;
-            }
-            resort();
-        }
-    }
-
     public void getInfo(String s) {
         JSONObject obj = null;
         try {
-
             obj = new JSONObject(s);
-
-
-
-        } catch (Throwable t) {
-
+        } catch (Throwable ignored) {
         }
 
         String[] nums = getResources().getStringArray(R.array .nums);
@@ -304,7 +122,7 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         for (int i = 1; i!=49; i++) {
             try {
                 editor.putFloat("Uncompressed Sell" + i, Float.parseFloat(String.valueOf(obj.getJSONObject(nums[i-1]).getJSONObject("sell").get("min"))));
-            } catch (JSONException e) {
+            } catch (JSONException ignored) {
             }
         }
         for (int i = 1; i!=49; i++) {
@@ -336,54 +154,148 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         Calendar c = Calendar.getInstance();
         timeMS = c.getTimeInMillis();
         updateTV();
+        mAdapter.notifyItemChanged(0);
     }
 
-    String Status;
-    public long timeMS;
-    boolean setStatusError = false;
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
 
-    Handler repeatedTVUpdater = new Handler();
-    Runnable repeatedTVUpdate = new Runnable() {
-        @Override
-        public void run() {
-            updateTV();
-            repeatedTVUpdater.postDelayed(repeatedTVUpdate, 60000);
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+
+
+        for (int i=1;i!=49;i++) {
+            if (key.equals("CustomS" + String.valueOf(i)) || key.equals("Perc") || key.equals("MPC") || key.equals("Time") || key.equals("Min")) {
+                {
+                    if (sharedPref.getString(key, "0.00").equals("")) {
+                        editor.remove(key);
+                        editor.commit();
+                    }
+                }
+            }
         }
-    };
 
-    Handler repeatedUpdater = new Handler();
-    Runnable repeatedUpdate = new Runnable() {
-        @Override
-        public void run() {
+        if (key.equals("SystemNames")) {
             refresh();
-            repeatedTVUpdater.postDelayed(repeatedUpdate, 5*60000);
         }
-    };
+    }
 
-    public void updateTV() {
-        Calendar c = Calendar.getInstance();
-        long time = c.getTimeInMillis();
-        long rightNow = time - timeMS;
-        rightNow = rightNow / 60000;
-        if (rightNow < 15 && rightNow >= 0) {
-            Status = "Up to date";
-        }
-        if (rightNow >= 15) {
-            Status = "Updated " + rightNow + " minutes ago";
+    void resort() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(OrePrices.this);
+        int i=1;
+        for(int c=1; !(c==49) ;c++) {
+            switch (c) {
+                case 1: if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;} break;
+                case 2: if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;} break;
+                case 3: if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;} break;
+                case 4: if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;} break;
+                case 5: if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;} break;
+                case 6: if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;} break;
+                case 7: if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;} break;
+                case 8: if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;} break;
+                case 9: if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;} break;
+                case 10: if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;} break;
+                case 11: if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;} break;
+                case 12: if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;} break;
+                case 13: if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;} break;
+                case 14: if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;} break;
+                case 15: if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;} break;
+                case 16: if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;} break;
+                case 1+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;}} break;
+                case 2+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;}} break;
+                case 3+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;}} break;
+                case 4+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;}} break;
+                case 5+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;}} break;
+                case 6+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;}} break;
+                case 7+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;}} break;
+                case 8+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;}} break;
+                case 9+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;}} break;
+                case 10+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;}} break;
+                case 11+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;}} break;
+                case 12+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;}} break;
+                case 13+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;}} break;
+                case 14+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;}} break;
+                case 15+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;}} break;
+                case 16+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;}} break;
+                case 1+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;}} break;
+                case 2+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;}} break;
+                case 3+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;}} break;
+                case 4+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;}} break;
+                case 5+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;}} break;
+                case 6+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;}} break;
+                case 7+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;}} break;
+                case 8+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;}} break;
+                case 9+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;}} break;
+                case 10+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;}} break;
+                case 11+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;}} break;
+                case 12+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;}} break;
+                case 13+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;}} break;
+                case 14+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;}} break;
+                case 15+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;}} break;
+                case 16+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;}} break;
+            }
         }
-        if (rightNow < 0) {
-            Status = "Time travel error";
+
+        switch (sharedPref.getString("Sort","PPV")) {
+            case "PPV":
+                String Vol[]=getResources().getStringArray(R.array.Vol);
+                boolean tT=true;
+                while (tT) {
+                    tT = false;
+                    for (int k = 1; k < i - 1; k++) {
+                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k]), (float) 0.00)/Float.parseFloat(Vol[Sort[k]]) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k + 1]), (float) 0.00)/Float.parseFloat(Vol[Sort[k+1]])) {
+                            int r = Sort[k];
+                            Sort[k] = Sort[k + 1];
+                            Sort[k + 1] = r;
+                            tT = true;
+                        }
+                    }
+                }
+                int[] SortRR=new int[i];
+                for (int KKK=1; KKK<i;KKK++) {
+                    SortRR[KKK] = Sort[i-KKK];
+                }
+                System.arraycopy(SortRR, 1, Sort, 1, i - 1);
+                break;
+            case "PPU":
+                boolean t=true;
+                while (t) {
+                    t = false;
+                    for (int k = 1; k < i - 1; k++) {
+                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k + 1]), (float) 0.00)) {
+                            int r = Sort[k];
+                            Sort[k] = Sort[k + 1];
+                            Sort[k + 1] = r;
+                            t = true;
+                        }
+                    }
+                }
+                int[] SortR=new int[i];
+                for (int KKK=1; KKK<i;KKK++) {
+                    SortR[KKK] = Sort[i-KKK];
+                }
+                System.arraycopy(SortR, 1, Sort, 1, i - 1);
+                break;
+            default: break;
         }
-        if (timeMS == 0) {
-            Status = "Updating...";
+
+
+        mAdapter.notifyDataSetChanged();
+    }
+
+    void writeStringstofloats() {
+        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
+        SharedPreferences.Editor editor = sharedPref.edit();
+        for (int count=1;count!=49; count++) {
+            editor.putFloat("Custom"+count, Float.parseFloat(sharedPref.getString("CustomS"+count,"0.00")));
         }
-        mAdapter.notifyItemChanged(0);
+        editor.commit();
     }
 
     public class GreenAdapter extends RecyclerView.Adapter<GreenAdapter.NumberViewHolder> {
 
         private final String TAG = GreenAdapter.class.getSimpleName();
-        SharedPreferences sharedPref;
+        final SharedPreferences sharedPref;
 
         GreenAdapter() {
             sharedPref = PreferenceManager.getDefaultSharedPreferences(OrePrices.this);
@@ -426,7 +338,6 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         }
 
 
-
         @Override
         public int getItemCount() {
             int i = 0;
@@ -490,23 +401,21 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
         class NumberViewHolder extends RecyclerView.ViewHolder {
 
 
-            TextView listItemNumberView;
-            TextView PPI;
-            TextView PPV;
-            TextView PPH;
-
+            final TextView listItemNumberView;
+            final TextView PPI;
+            final TextView PPV;
+            final TextView PPH;
+            final String[] Name = getResources().getStringArray(R.array.Names);
 
-            public NumberViewHolder(View itemView) {
+            NumberViewHolder(View itemView) {
                 super(itemView);
 
-                listItemNumberView = (TextView) itemView.findViewById(R.id.TV1);
-                PPI = (TextView) itemView.findViewById(R.id.PPI);
-                PPV = (TextView) itemView.findViewById(R.id.PPV);
-                PPH = (TextView) itemView.findViewById(R.id.PPH);
+                listItemNumberView = itemView.findViewById(R.id.TV1);
+                PPI = itemView.findViewById(R.id.PPI);
+                PPV = itemView.findViewById(R.id.PPV);
+                PPH = itemView.findViewById(R.id.PPH);
             }
 
-            String Name[]=getResources().getStringArray(R.array.Names);
-
             void bind(int listIndex) {
                 switch (listIndex) {
                     case 0:
@@ -514,196 +423,18 @@ public class OrePrices extends BasePrices implements SharedPreferences.OnSharedP
                         if (setStatusError) {
                             listItemNumberView.append(" Can't connect");
                         }
-                        TextView listItemNumberView2 = (TextView) itemView.findViewById(R.id.TV2);
+                        TextView listItemNumberView2 = itemView.findViewById(R.id.TV2);
                         listItemNumberView2.setText(sharedPref.getString("SystemNames", "Jita") + " ");
                         listItemNumberView2.append(sharedPref.getString("BS", "Compressed Sell") + " prices");
                         break;
                     default:
                         listItemNumberView.setText(Name[Sort[listIndex]]);
-                        PPI.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100"))/100*sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell")+String.valueOf(Sort[listIndex]), (float) 0.00)));
-                        String Vol[]=getResources().getStringArray(R.array.Vol);
-                        PPV.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100"))/100*sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell")+String.valueOf(Sort[listIndex]), (float) 0.00)/Float.parseFloat(Vol[Sort[listIndex]])));
-                        PPH.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100"))/100*3600*Float.parseFloat(sharedPref.getString("MPC", "1500.00"))*Float.parseFloat(sharedPref.getString("Min", "1"))*sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell")+String.valueOf(Sort[listIndex]), (float) 0.00)/Float.parseFloat(Vol[Sort[listIndex]])/1000000/Float.parseFloat(sharedPref.getString("Time", "120")))+"M");
+                        PPI.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100")) / 100 * sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[listIndex]), (float) 0.00)));
+                        String Vol[] = getResources().getStringArray(R.array.Vol);
+                        PPV.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100")) / 100 * sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[listIndex]), (float) 0.00) / Float.parseFloat(Vol[Sort[listIndex]])));
+                        PPH.setText(String.format("%.2f", Float.parseFloat(sharedPref.getString("Perc", "100")) / 100 * 3600 * Float.parseFloat(sharedPref.getString("MPC", "1500.00")) * Float.parseFloat(sharedPref.getString("Min", "1")) * sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[listIndex]), (float) 0.00) / Float.parseFloat(Vol[Sort[listIndex]]) / 1000000 / Float.parseFloat(sharedPref.getString("Time", "120"))) + "M");
                 }
             }
         }
     }
-
-
-    public class DividerItemDecoration extends RecyclerView.ItemDecoration {
-
-        private final int[] ATTRS = new int[]{android.R.attr.listDivider};
-
-        private Drawable divider;
-
-        public DividerItemDecoration(Context context) {
-            final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS);
-            divider = styledAttributes.getDrawable(0);
-            styledAttributes.recycle();
-        }
-
-
-        @Override
-        public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
-            int left = parent.getPaddingLeft();
-            int right = parent.getWidth() - parent.getPaddingRight();
-
-            int childCount = parent.getChildCount();
-            for (int i = 0; i < childCount; i++) {
-                View child = parent.getChildAt(i);
-
-                RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
-
-                int top = child.getBottom() + params.bottomMargin;
-                int bottom = top + divider.getIntrinsicHeight();
-
-                divider.setBounds(left, top, right, bottom);
-                divider.draw(c);
-            }
-        }
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
-
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-
-
-        for (int i=1;i!=49;i++) {
-        if(key.equals("CustomS"+String.valueOf(i))||key.equals("Perc")||key.equals("MPC")||key.equals("Time")||key.equals("Min")){
-            {
-                if (sharedPref.getString(key, "0.00").equals("")) {
-                    editor.remove(key);
-                    editor.commit();
-                }
-            }
-        }
-        }
-
-        if (key.equals("SystemNames")) {
-            refresh();
-        }
-    }
-
-
-
-    int Sort[]= new int[49];
-
-    public void resort() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(OrePrices.this);
-        int i=1;
-        for(int c=1; !(c==49) ;c++) {
-            switch (c) {
-                case 1: if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;} break;
-                case 2: if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;} break;
-                case 3: if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;} break;
-                case 4: if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;} break;
-                case 5: if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;} break;
-                case 6: if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;} break;
-                case 7: if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;} break;
-                case 8: if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;} break;
-                case 9: if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;} break;
-                case 10: if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;} break;
-                case 11: if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;} break;
-                case 12: if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;} break;
-                case 13: if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;} break;
-                case 14: if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;} break;
-                case 15: if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;} break;
-                case 16: if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;} break;
-                case 1+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;}} break;
-                case 2+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;}} break;
-                case 3+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;}} break;
-                case 4+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;}} break;
-                case 5+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;}} break;
-                case 6+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;}} break;
-                case 7+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;}} break;
-                case 8+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;}} break;
-                case 9+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;}} break;
-                case 10+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;}} break;
-                case 11+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;}} break;
-                case 12+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;}} break;
-                case 13+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;}} break;
-                case 14+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;}} break;
-                case 15+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;}} break;
-                case 16+16: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;}} break;
-                case 1+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Arkonor", true)) {Sort[i]=c; i++;}} break;
-                case 2+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Bistot", true)) {Sort[i]=c; i++;}} break;
-                case 3+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Crokite", true)) {Sort[i]=c; i++;}} break;
-                case 4+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Dark_Ochre", true)) {Sort[i]=c; i++;}} break;
-                case 5+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Gneiss", true)) {Sort[i]=c; i++;}} break;
-                case 6+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hedbergite", true)) {Sort[i]=c; i++;}} break;
-                case 7+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Hemorphite", true)) {Sort[i]=c; i++;}} break;
-                case 8+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Jaspet", true)) {Sort[i]=c; i++;}} break;
-                case 9+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Kernite", true)) {Sort[i]=c; i++;}} break;
-                case 10+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Mercoxit", false)) {Sort[i]=c; i++;}} break;
-                case 11+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Omber", true)) {Sort[i]=c; i++;}} break;
-                case 12+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Plagioclase", true)) {Sort[i]=c; i++;}} break;
-                case 13+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Pyroxeres", true)) {Sort[i]=c; i++;}} break;
-                case 14+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Scordite", true)) {Sort[i]=c; i++;}} break;
-                case 15+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Spodumain", true)) {Sort[i]=c; i++;}} break;
-                case 16+32: if(sharedPref.getBoolean("Variants", false)) { if(sharedPref.getBoolean("Veldspar", true)) {Sort[i]=c; i++;}} break;
-            }
-        }
-
-        switch (sharedPref.getString("Sort","PPV")) {
-            case "PPV":
-                String Vol[]=getResources().getStringArray(R.array.Vol);
-                boolean tT=true;
-                while (tT) {
-                    tT = false;
-                    for (int k = 1; k < i - 1; k++) {
-                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k]), (float) 0.00)/Float.parseFloat(Vol[Sort[k]]) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k + 1]), (float) 0.00)/Float.parseFloat(Vol[Sort[k+1]])) {
-                            int r = Sort[k];
-                            Sort[k] = Sort[k + 1];
-                            Sort[k + 1] = r;
-                            tT = true;
-                        }
-                    }
-                }
-                int[] SortRR=new int[i];
-                for (int KKK=1; KKK<i;KKK++) {
-                    SortRR[KKK] = Sort[i-KKK];
-                }
-                for (int KKK=1; KKK<i;KKK++) {
-                    Sort[KKK]=SortRR[KKK];
-                }
-                break;
-            case "PPU":
-                boolean t=true;
-                while (t) {
-                    t = false;
-                    for (int k = 1; k < i - 1; k++) {
-                        if (sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k]), (float) 0.00) > sharedPref.getFloat(sharedPref.getString("BS", "Compressed Sell") + String.valueOf(Sort[k + 1]), (float) 0.00)) {
-                            int r = Sort[k];
-                            Sort[k] = Sort[k + 1];
-                            Sort[k + 1] = r;
-                            t = true;
-                        }
-                    }
-                }
-                int[] SortR=new int[i];
-                for (int KKK=1; KKK<i;KKK++) {
-                    SortR[KKK] = Sort[i-KKK];
-                }
-                for (int KKK=1; KKK<i;KKK++) {
-                    Sort[KKK]=SortR[KKK];
-                }
-                break;
-            default: break;
-        }
-
-
-        mAdapter.notifyDataSetChanged();
-    }
-
-    public void writeStringstofloats() {
-        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-        SharedPreferences.Editor editor = sharedPref.edit();
-        for (int count=1;count!=49; count++) {
-
-            editor.putFloat("Custom"+count, Float.parseFloat(sharedPref.getString("CustomS"+count,"0.00")));
-        }
-        editor.commit();
-    }
 }
\ No newline at end of file
