diff --git a/app/src/main/java/com/example/changedetection/Application.kt b/app/src/main/java/com/example/changedetection/Application.kt
deleted file mode 100755
index 9851d15..0000000
--- a/app/src/main/java/com/example/changedetection/Application.kt
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.example.changedetection
-
-import android.support.multidex.MultiDexApplication
-import com.facebook.drawee.backends.pipeline.Fresco
-import com.facebook.stetho.Stetho
-import com.jakewharton.threetenabp.AndroidThreeTen
-import com.orhanobut.logger.AndroidLogAdapter
-import com.orhanobut.logger.Logger
-import com.squareup.leakcanary.LeakCanary
-
-public class Application : MultiDexApplication() {
-    override fun onCreate() {
-        super.onCreate()
-        instance = this
-        Fresco.initialize(this)
-
-        DebugVisibleLogs.isDebug = BuildConfig.DEBUG
-        AndroidThreeTen.init(this)
-        Stetho.initializeWithDefaults(this);
-
-        Logger.addLogAdapter(object : AndroidLogAdapter() {
-            override fun isLoggable(priority: Int, tag: String?): Boolean {
-                return BuildConfig.DEBUG
-            }
-        })
-
-        if (LeakCanary.isInAnalyzerProcess(this)) {
-            // This process is dedicated to LeakCanary for heap analysis.
-            // You should not init your app in this process.
-            return
-        }
-        LeakCanary.install(this)
-    }
-
-    companion object {
-        var instance: Application? = null
-            private set
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/Consts.kt b/app/src/main/java/com/example/changedetection/Consts.kt
deleted file mode 100644
index 4169e45..0000000
--- a/app/src/main/java/com/example/changedetection/Consts.kt
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.example.changedetection
-
-object Consts {
-
-    const val groupId = "groupId"
-
-    const val presente = "presente"
-    const val ausente = "ausente"
-
-    const val keyStatusChamada = "attendance_status"
-    const val keyUserStatus = "user_status"
-    const val keyTimestamp = "timestamp"
-
-    const val keyAttendanceList = "attendance_list"
-    const val keyParticipant = "participant"
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/ElasticDragDismissFrameLayout.kt b/app/src/main/java/com/example/changedetection/ElasticDragDismissFrameLayout.kt
deleted file mode 100644
index d551796..0000000
--- a/app/src/main/java/com/example/changedetection/ElasticDragDismissFrameLayout.kt
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * Copyright 2015 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection
-
-import android.app.Activity
-import android.content.Context
-import android.os.Build
-import android.support.annotation.RequiresApi
-import android.support.v7.app.AppCompatActivity
-import android.util.AttributeSet
-import android.view.MotionEvent
-import android.view.View
-import android.widget.FrameLayout
-import java.util.*
-
-/**
- * A [FrameLayout] which responds to nested scrolls to create drag-dismissable layouts.
- * Applies an elasticity factor to reduce movement as you approach the given dismiss distance.
- * Optionally also scales down content during drag.
- */
-@RequiresApi(Build.VERSION_CODES.LOLLIPOP)
-class ElasticDragDismissFrameLayout @JvmOverloads constructor(
-    context: Context, attrs: AttributeSet? = null,
-    defStyleAttr: Int = 0, defStyleRes: Int = 0
-) : FrameLayout(context, attrs, defStyleAttr, defStyleRes) {
-
-    // configurable attribs
-    private var dragDismissDistance = java.lang.Float.MAX_VALUE
-    private var dragDismissFraction = -1f
-    private var dragDismissScale = 1f
-    private var shouldScale = false
-    private var dragElacticity = 1.5f
-
-    // state
-    private var totalDrag: Float = 0f
-    private var draggingDown = false
-    private var draggingUp = false
-    private var mLastActionEvent: Int = 0
-
-    private var callbacks: MutableList<ElasticDragDismissCallback>? = null
-
-    init {
-        val a = getContext().obtainStyledAttributes(
-            attrs, R.styleable.ElasticDragDismissFrameLayout, 0, 0
-        )
-
-        if (a.hasValue(R.styleable.ElasticDragDismissFrameLayout_dragDismissDistance)) {
-            dragDismissDistance = a.getDimensionPixelSize(
-                R.styleable
-                    .ElasticDragDismissFrameLayout_dragDismissDistance, 0
-            ).toFloat()
-        } else if (a.hasValue(R.styleable.ElasticDragDismissFrameLayout_dragDismissFraction)) {
-            dragDismissFraction = a.getFloat(
-                R.styleable
-                    .ElasticDragDismissFrameLayout_dragDismissFraction, dragDismissFraction
-            )
-        }
-        if (a.hasValue(R.styleable.ElasticDragDismissFrameLayout_dragDismissScale)) {
-            dragDismissScale = a.getFloat(
-                R.styleable
-                    .ElasticDragDismissFrameLayout_dragDismissScale, dragDismissScale
-            )
-//            shouldScale = dragDismissScale != 1f
-        }
-        if (a.hasValue(R.styleable.ElasticDragDismissFrameLayout_dragElasticity)) {
-            dragElacticity = a.getFloat(
-                R.styleable.ElasticDragDismissFrameLayout_dragElasticity,
-                dragElacticity
-            )
-        }
-        a.recycle()
-    }
-
-    override fun onStartNestedScroll(child: View, target: View, nestedScrollAxes: Int): Boolean {
-        return nestedScrollAxes and View.SCROLL_AXIS_VERTICAL != 0
-    }
-
-//    var newdrag = false
-
-    override fun onNestedPreScroll(target: View, dx: Int, dy: Int, consumed: IntArray) {
-        // if we're in a drag gesture and the user reverses up the we should take those events
-        if (draggingDown && dy > 0 || draggingUp && dy < 0) {
-//            newdrag = false
-            dragScale(dy)
-            consumed[1] = dy
-        }
-    }
-
-    override fun onNestedScroll(
-        target: View, dxConsumed: Int, dyConsumed: Int,
-        dxUnconsumed: Int, dyUnconsumed: Int
-    ) {
-//        newdrag = true
-        dragScale(dyUnconsumed)
-    }
-
-    override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {
-        mLastActionEvent = ev.action
-        return super.onInterceptTouchEvent(ev)
-    }
-
-    override fun onStopNestedScroll(child: View) {
-        if (Math.abs(totalDrag) >= dragDismissDistance) { //&& newdrag) {
-            dispatchDismissCallback()
-        } else { // settle back to natural position
-            if (mLastActionEvent == MotionEvent.ACTION_DOWN) {
-                // this is a 'defensive cleanup for new gestures',
-                // don't animate here
-                // see also https://github.com/nickbutcher/plaid/issues/185
-                translationY = 0f
-                scaleX = 1f
-                scaleY = 1f
-            } else {
-                animate()
-                    .translationY(0f)
-                    .scaleX(1f)
-                    .scaleY(1f)
-                    .setDuration(200L)
-                    .setInterpolator(AnimUtils.getFastOutSlowInInterpolator(context))
-                    .setListener(null)
-                    .start()
-            }
-            totalDrag = 0f
-            draggingUp = false
-            draggingDown = draggingUp
-            dispatchDragCallback(0f, 0f, 0f, 0f)
-        }
-    }
-
-    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
-        super.onSizeChanged(w, h, oldw, oldh)
-        if (dragDismissFraction > 0f) {
-            dragDismissDistance = h * dragDismissFraction
-        }
-    }
-
-    fun addListener(listener: ElasticDragDismissCallback) {
-        if (callbacks == null) {
-            callbacks = ArrayList()
-        }
-        callbacks!!.add(listener)
-    }
-
-    fun removeListener(listener: ElasticDragDismissCallback) {
-        if (callbacks != null && callbacks!!.size > 0) {
-            callbacks!!.remove(listener)
-        }
-    }
-
-    private fun dragScale(scroll: Int) {
-        if (scroll == 0) return
-
-        totalDrag += scroll.toFloat()
-
-        // track the direction & set the pivot point for scaling
-        // don't double track i.e. if start dragging down and then reverse, keep tracking as
-        // dragging down until they reach the 'natural' position
-        if (scroll < 0 && !draggingUp && !draggingDown) {
-            draggingDown = true
-            if (shouldScale) pivotY = height.toFloat()
-        } else if (scroll > 0 && !draggingDown && !draggingUp) {
-            draggingUp = true
-            if (shouldScale) pivotY = 0f
-        }
-        // how far have we dragged relative to the distance to perform a dismiss
-        // (0â€“1 where 1 = dismiss distance). Decreasing logarithmically as we approach the limit
-        var dragFraction =
-            Math.log10((1 + Math.abs(totalDrag) / dragDismissDistance).toDouble()).toFloat()
-
-        // calculate the desired translation given the drag fraction
-        var dragTo = dragFraction * dragDismissDistance * dragElacticity
-
-        if (draggingUp) {
-            // as we use the absolute magnitude when calculating the drag fraction, need to
-            // re-apply the drag direction
-            dragTo *= -1f
-        }
-        translationY = dragTo
-
-        if (shouldScale) {
-            val scale = 1 - (1 - dragDismissScale) * dragFraction
-            scaleX = scale
-            scaleY = scale
-        }
-
-        // if we've reversed direction and gone past the settle point then clear the flags to
-        // allow the list to get the scroll events & reset any transforms
-        if (draggingDown && totalDrag >= 0 || draggingUp && totalDrag <= 0) {
-            dragFraction = 0f
-            dragTo = dragFraction
-            totalDrag = dragTo
-            draggingUp = false
-            draggingDown = draggingUp
-            translationY = 0f
-            scaleX = 1f
-            scaleY = 1f
-        }
-        dispatchDragCallback(
-            dragFraction, dragTo,
-            Math.min(1f, Math.abs(totalDrag) / dragDismissDistance), totalDrag
-        )
-    }
-
-    private fun dispatchDragCallback(
-        elasticOffset: Float, elasticOffsetPixels: Float,
-        rawOffset: Float, rawOffsetPixels: Float
-    ) {
-        if (callbacks != null && !callbacks!!.isEmpty()) {
-            for (callback in callbacks!!) {
-                callback.onDrag(
-                    elasticOffset, elasticOffsetPixels,
-                    rawOffset, rawOffsetPixels
-                )
-            }
-        }
-    }
-
-    private fun dispatchDismissCallback() {
-        if (callbacks != null && !callbacks!!.isEmpty()) {
-            for (callback in callbacks!!) {
-                callback.onDragDismissed()
-            }
-        }
-    }
-
-    abstract class ElasticDragDismissCallback {
-
-        /**
-         * Called for each drag event.
-         *
-         * @param elasticOffset       Indicating the drag offset with elasticity applied i.e. may
-         * exceed 1.
-         * @param elasticOffsetPixels The elastically scaled drag distance in pixels.
-         * @param rawOffset           Value from [0, 1] indicating the raw drag offset i.e.
-         * without elasticity applied. A value of 1 indicates that the
-         * dismiss distance has been reached.
-         * @param rawOffsetPixels     The raw distance the user has dragged
-         */
-        internal fun onDrag(
-            elasticOffset: Float, elasticOffsetPixels: Float,
-            rawOffset: Float, rawOffsetPixels: Float
-        ) {
-        }
-
-        /**
-         * Called when dragging is released and has exceeded the threshold dismiss distance.
-         */
-        internal open fun onDragDismissed() {}
-
-    }
-
-    /**
-     * An [ElasticDragDismissCallback] which fades system chrome (i.e. status bar and
-     * navigation bar) whilst elastic drags are performed and
-     * [finishes][Activity.finishAfterTransition] the activity when drag dismissed.
-     */
-    class SystemChromeFader
-    //        private final int statusBarAlpha;
-    //        private final int navBarAlpha;
-    //        private final boolean fadeNavBar;
-
-        (private val activity: AppCompatActivity)//            statusBarAlpha = Color.alpha(activity.getWindow().getStatusBarColor());
-    //            navBarAlpha = Color.alpha(activity.getWindow().getNavigationBarColor());
-    //            fadeNavBar = ViewUtilsLaidOut.isNavBarOnBottom(activity);
-        : ElasticDragDismissCallback() {
-
-        //        @Override
-        //        public void onDrag(float elasticOffset, float elasticOffsetPixels,
-        //                           float rawOffset, float rawOffsetPixels) {
-        //            if (elasticOffsetPixels > 0) {
-        //                // dragging downward, fade the status bar in proportion
-        //                activity.getWindow().setStatusBarColor(ColorUtils.modifyAlpha(activity.getWindow()
-        //                        .getStatusBarColor(), (int) ((1f - rawOffset) * statusBarAlpha)));
-        //            } else if (elasticOffsetPixels == 0) {
-        //                // reset
-        //                activity.getWindow().setStatusBarColor(ColorUtils.modifyAlpha(
-        //                        activity.getWindow().getStatusBarColor(), statusBarAlpha));
-        //                activity.getWindow().setNavigationBarColor(ColorUtils.modifyAlpha(
-        //                        activity.getWindow().getNavigationBarColor(), navBarAlpha));
-        //            } else if (fadeNavBar) {
-        //                // dragging upward, fade the navigation bar in proportion
-        //                activity.getWindow().setNavigationBarColor(
-        //                        ColorUtils.modifyAlpha(activity.getWindow().getNavigationBarColor(),
-        //                                (int) ((1f - rawOffset) * navBarAlpha)));
-        //            }
-        //        }
-
-        public override fun onDragDismissed() {
-//            activity.supportFragmentManager.popBackStack()
-            //            activity.finishAfterTransition();
-        }
-    }
-
-}
diff --git a/app/src/main/java/com/example/changedetection/FakeTasksRemoteDataSource.kt b/app/src/main/java/com/example/changedetection/FakeTasksRemoteDataSource.kt
deleted file mode 100755
index fd2e632..0000000
--- a/app/src/main/java/com/example/changedetection/FakeTasksRemoteDataSource.kt
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection;
-
-import android.support.annotation.VisibleForTesting
-import com.example.changedetection.data.Site
-import com.example.changedetection.data.source.TasksDataSource
-import com.example.changedetection.data.source.local.SiteAndLastDiff
-import java.util.*
-
-/**
- * Implementation of a remote data source with static access to the data for easy testing.
- */
-class FakeTasksRemoteDataSource// Prevent direct instantiation.
-private constructor() : TasksDataSource {
-    override fun getTaskAndDiffs(callback: (MutableList<SiteAndLastDiff>) -> Unit) {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-    override fun getTasks(callback: TasksDataSource.LoadTasksCallback) {
-        callback.onTasksLoaded(TASKS_SERVICE_DATA.values.toMutableList())
-    }
-
-    override fun getTask(taskId: String, callback: TasksDataSource.GetTaskCallback) {
-        val task = TASKS_SERVICE_DATA[taskId]!!
-        callback.onTaskLoaded(task)
-    }
-
-    override fun saveTask(site: Site) {
-        TASKS_SERVICE_DATA[site.id] = site
-    }
-
-    override fun completeTask(site: Site) {
-        val completedTask = Site(site.title, site.url, site.timestamp, site.id, true, false)
-        TASKS_SERVICE_DATA[site.id] = completedTask
-    }
-
-    override fun completeTask(taskId: String) {
-        // Not required for the remote data source.
-    }
-
-    override fun activateTask(site: Site) {
-        val activeTask = Site(site.title, site.url, site.timestamp, site.id)
-        TASKS_SERVICE_DATA[site.id] = activeTask
-    }
-
-    override fun activateTask(taskId: String) {
-        // Not required for the remote data source.
-    }
-
-    override fun clearCompletedTasks() {
-        val it = TASKS_SERVICE_DATA.entries.iterator()
-        while (it.hasNext()) {
-            val entry = it.next()
-            if (entry.value.successful) {
-                it.remove()
-            }
-        }
-    }
-
-    override fun refreshTasks() {
-        // Not required because the {@link TasksRepository} handles the logic of refreshing the
-        // sites from all the available data sources.
-    }
-
-    override fun deleteSite(taskId: String) {
-        TASKS_SERVICE_DATA.remove(taskId)
-    }
-
-    override fun deleteAllTasks() {
-        TASKS_SERVICE_DATA.clear()
-    }
-
-    @VisibleForTesting
-    fun addTasks(vararg sites: Site) {
-        if (sites != null) {
-            for (task in sites) {
-                TASKS_SERVICE_DATA[task.id] = task
-            }
-        }
-    }
-
-    companion object {
-
-        private var INSTANCE: FakeTasksRemoteDataSource? = null
-
-        private val TASKS_SERVICE_DATA = LinkedHashMap<String, Site>()
-
-        val instance: FakeTasksRemoteDataSource
-            get() {
-                if (INSTANCE == null) {
-                    INSTANCE = FakeTasksRemoteDataSource()
-                }
-                return INSTANCE!!
-            }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/FragSettings.kt b/app/src/main/java/com/example/changedetection/FragSettings.kt
deleted file mode 100644
index b04d90c..0000000
--- a/app/src/main/java/com/example/changedetection/FragSettings.kt
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.example.changedetection
-
-import android.app.Activity
-import android.content.Context
-import android.content.res.Resources
-import android.graphics.Point
-import android.os.Bundle
-import android.support.v4.app.Fragment
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.GridLayoutManager
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.view.WindowManager
-import android.widget.Toast
-import androidx.core.os.bundleOf
-import androidx.navigation.Navigation
-import androidx.work.PeriodicWorkRequest
-import androidx.work.WorkManager
-import com.afollestad.materialdialogs.MaterialDialog
-import com.example.changedetection.data.Diff
-import com.example.changedetection.data.Site
-import com.example.changedetection.forms.*
-import com.example.changedetection.groupie.BottomSheetCardItem
-import com.example.changedetection.groupie.DialogItem
-import com.mikepenz.community_material_typeface_library.CommunityMaterial
-import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-import com.mikepenz.iconics.IconicsDrawable
-import com.orhanobut.logger.Logger
-import com.xwray.groupie.GroupAdapter
-import com.xwray.groupie.Section
-import com.xwray.groupie.ViewHolder
-import io.reactivex.Single
-import io.reactivex.android.schedulers.AndroidSchedulers
-import io.reactivex.schedulers.Schedulers
-import kotlinx.android.synthetic.main.empty_layout.view.*
-import kotlinx.android.synthetic.main.state_layout.view.*
-import kotlinx.android.synthetic.main.todos_encontros_activity.view.*
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.util.concurrent.TimeUnit
-
-class FragSettings : Fragment() {
-    private lateinit var mViewModel: TasksViewModel
-    private val groupAdapter = GroupAdapter<ViewHolder>()
-    private var theList = mutableListOf<BottomSheetCardItem>()
-    private var updatingCultos = Section(theList)
-
-    val color: Int by lazy { ContextCompat.getColor(requireActivity(), R.color.FontStrong) }
-
-    fun dp(value: Int, resources: Resources): Int {
-        return (resources.displayMetrics.density * value).toInt()
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        val view = inflater.inflate(R.layout.todos_encontros_activity, container, false)
-        mViewModel = MainActivity.obtainViewModel(requireActivity())
-
-        view.defaultRecycler.apply {
-
-            setEmptyView(view.stateLayout.apply {
-                this.empty_text.text = "Nothing found"
-                showEmptyState()
-            })
-
-            itemAnimator = null
-            adapter = groupAdapter.apply {
-                spanCount = calculateNoOfColumns(requireActivity())
-                if (this.itemCount == 0) {
-                    this.add(MarqueeItem("Change Detection"))
-//                    this.add(updatingCultos)
-                }
-            }
-
-            layoutManager = GridLayoutManager(context, groupAdapter.spanCount).apply {
-                spanSizeLookup = groupAdapter.spanSizeLookup
-            }
-        }
-
-        return view
-    }
-
-    companion object {
-        // Useful for landscape mode, tablets and extra extra large displays
-        fun calculateNoOfColumns(context: Context): Int {
-
-            val point = Point()
-            (context.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay.getSize(
-                point
-            )
-
-            val metrics = context.resources.displayMetrics
-            val ratio = metrics.heightPixels.toFloat() / metrics.widthPixels.toFloat()
-            val displayMetrics = context.resources.displayMetrics
-            val dpWidth = displayMetrics.widthPixels / displayMetrics.density
-
-            Logger.d("WIDHT $dpWidth")
-            Logger.d("ratio $ratio")
-            if (ratio < 1) {
-                return (dpWidth / 240).toInt()
-            }
-            return (dpWidth / 240).toInt()
-        }
-    }
-}
-
diff --git a/app/src/main/java/com/example/changedetection/GlobalAdapter.kt b/app/src/main/java/com/example/changedetection/GlobalAdapter.kt
deleted file mode 100644
index 919bccc..0000000
--- a/app/src/main/java/com/example/changedetection/GlobalAdapter.kt
+++ /dev/null
@@ -1,338 +0,0 @@
-package com.example.changedetection
-
-import android.net.Uri
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.AppCompatButton
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
-import android.util.TypedValue
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.widget.FrameLayout
-import android.widget.ImageView
-import android.widget.TextView
-import com.facebook.drawee.view.SimpleDraweeView
-import com.mikepenz.community_material_typeface_library.CommunityMaterial
-import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-import com.mikepenz.fastadapter.items.AbstractItem
-import com.mikepenz.google_material_typeface_library.GoogleMaterial
-import com.mikepenz.iconics.IconicsDrawable
-import com.mikepenz.iconics.typeface.IIcon
-
-class AdapterCarrosel(private val data: List<String>) :
-    RecyclerView.Adapter<AdapterCarrosel.ViewHolder>() {
-
-    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
-        val inflater = LayoutInflater.from(parent.context)
-        val v = inflater.inflate(R.layout.item_carrosel, parent, false)
-
-        val r = v.context.resources
-        val px = TypedValue.applyDimension(
-            TypedValue.COMPLEX_UNIT_DIP,
-            4.toFloat(),
-            r.displayMetrics
-        ).toInt()
-
-        val params =
-            FrameLayout.LayoutParams(v.layoutParams.width, (v.layoutParams.width / 1.8).toInt())
-        params.setMargins(px, px, px, px)
-        v.layoutParams = params
-
-        return ViewHolder(v)
-    }
-
-    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
-        val imagem: String = data[position]
-        val uri = Uri.parse(imagem)
-        holder.fbsimpledrawee.setImageURI(uri, holder.fbsimpledrawee.context)
-    }
-
-    override fun getItemCount(): Int = data.size
-
-    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
-        var fbsimpledrawee: SimpleDraweeView = itemView.findViewById(R.id.fbsimpledrawee)
-    }
-}
-
-// -- // -- // -- // -- // -- // -- // -- // -- // -- // -- // -- // -- //
-class NestedRecycler(var n: Int)
-
-class SeparadorNovo(var titulo: String)
-
-open class NucleosTitulo(var titulo: String, var day: Int) {
-    open var prio = 1
-}
-
-class NucleosInfo(
-    titulo: String,
-    day: Int,
-    var hora: Int,
-    var coordenadores: MutableMap<String, Any>,
-    var id: String,
-    var extra: Boolean = false
-) : NucleosTitulo(titulo, day) {
-    override var prio = 2
-}
-
-class VeryGenericAdapter(val stru: Any) :
-    AbstractItem<VeryGenericAdapter, VeryGenericAdapter.ViewHolder>() {
-    val fastAdapter: FastItemAdapter<VeryGenericAdapter> = FastItemAdapter()
-
-    override fun getType(): Int {
-        return when (stru) {
-            is Principal_Item -> 0
-            is Separador -> 1
-            is SeparadorBig -> 2
-            is DataProgramacao -> {
-                return if (stru.tipo == "") 3
-                else 4
-            }
-            is Ebd_item -> 5
-            is String -> when (stru) {
-                "Loading" -> 6
-                else -> 7
-            }
-            is escalas_item -> 8
-            is NestedRecycler -> 9
-            is SeparadorNovo -> 10
-            is NucleosInfo -> 11
-            is NucleosTitulo -> 12
-            is oneStringDiff_copy -> 13
-            is oneStringDiff_copy2 -> 14
-            else -> 14
-        }
-    }
-
-    override fun getViewHolder(v: View): ViewHolder = ViewHolder(v)
-    override fun getLayoutRes(): Int {
-        return when (stru) {
-            is NestedRecycler -> R.layout.nested
-            is Principal_Item -> R.layout.material_button_with_icon
-            is Separador -> R.layout.fa_separador
-            is SeparadorBig -> R.layout.big_appstore_today_title
-            is DataProgramacao -> R.layout.nuc_nuc_item
-            is Nucleos_item -> R.layout.nuc_nuc_item
-            is String -> when (stru) {
-                "Loading" -> R.layout.generic_loading
-                else -> R.layout.item_sticky_generic
-            }
-            is Ebd_item -> R.layout.ebd_item
-            is escalas_item -> R.layout.escalas_item
-            is SeparadorNovo -> R.layout.main_separador_programacao
-            is NucleosInfo -> R.layout.nuc_nuc_item
-            is NucleosTitulo -> R.layout.big_appstore_today_title
-            is oneStringDiff_copy -> R.layout.big_appstore_today_title
-            is oneStringDiff_copy2 -> R.layout.item_nucleo_more
-            else -> R.layout.fa_separador
-        }
-    }
-
-    fun setDraw(btn: AppCompatButton?, icon: IIcon) {
-        val cor = 0xff158c50.toInt()
-        btn?.setCompoundDrawables(
-            IconicsDrawable(
-                btn.context,
-                icon
-            ).color(cor).sizeDp(36).paddingDp(6), null, null, null
-        )
-    }
-
-    override fun bindView(holder: ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-
-        when (stru) {
-            is Principal_Item -> {
-
-                holder.btn?.text = stru.titulo
-                holder.title?.text = stru.titulo
-                val cor = 0xff03A9F4.toInt()
-                //holder.itemView.setBackgroundColor(ContextCompat.getColor(holder.itemView.context,R.color.windowBackgroundNucleosTop))
-//                val img:Drawable = IconicsDrawable(holder.btn!!.context, GoogleMaterial.Icon.gmd_3d_rotation)
-//                holder.btn.setCompoundDrawablesWithIntrinsicBounds(img, null, null, null)
-
-                when (stru.icone) {
-                    1 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_school)
-                    2 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_home)
-                    3 -> setDraw(holder.btn, CommunityMaterial.Icon.cmd_timer)
-                    4 -> setDraw(holder.btn, CommunityMaterial.Icon.cmd_calendar_text)
-                    5 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_grade)
-                    6 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_play_circle_filled)
-                    7 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_public)
-                    8 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_info)
-                    9 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_help)
-                    11 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_settings)
-                    12 -> setDraw(holder.btn, GoogleMaterial.Icon.gmd_play_circle_filled)
-                }
-
-                when (stru.icone) {
-                    1 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_school
-                        ).color(cor)
-                    )
-                    2 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_home
-                        ).color(cor)
-                    )
-                    3 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            CommunityMaterial.Icon.cmd_timer
-                        ).color(cor)
-                    )
-                    4 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            CommunityMaterial.Icon.cmd_calendar_text
-                        ).color(cor)
-                    )
-                    5 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_grade
-                        ).color(cor)
-                    )
-                    6 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_play_circle_filled
-                        ).color(cor)
-                    )
-                    7 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_public
-                        ).color(0xff9E9E9E.toInt())
-                    )
-                    8 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_info
-                        ).color(cor)
-                    )
-                    9 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_help
-                        ).color(cor)
-                    )
-                    11 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_settings
-                        ).color(0xfff44336.toInt())
-                    )
-                    12 -> holder.image?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.image.context,
-                            GoogleMaterial.Icon.gmd_play_circle_filled
-                        ).color(0xfff44336.toInt())
-                    )
-                }
-            }
-            is Separador -> {
-                holder.title?.text = stru.titulo
-            }
-
-            is SeparadorBig -> {
-                holder.title?.text = stru.titulo
-                holder.subtitle?.text = stru.subtitulo
-            }
-
-            is DataProgramacao -> {
-                holder.title?.text = stru.titulo
-                holder.subtitle?.text = stru.hora
-                if (stru.tipo.trim() != "") {
-                    holder.image?.setImageDrawable(
-                        IconicsDrawable(holder.image.context, GoogleMaterial.Icon.gmd_navigate_next)
-                            .color(ContextCompat.getColor(holder.image.context, R.color.ARROW))
-                    )
-                }
-            }
-
-            is Ebd_item -> {
-                holder.title?.text = stru.titulo
-                holder.subtitle?.text = stru.subtitulo
-            }
-            is Nucleos_item -> {
-                holder.title?.text = stru.nome
-                holder.subtitle?.text = stru.hora
-            }
-            is String -> when (stru) {
-                "Loading" -> holder.title?.text = "Carregando nÃºcleos..."
-                else -> holder.title?.text = stru
-            }
-            is escalas_item -> {
-                holder.title?.text = stru.titulo
-                holder.subtitle?.text = stru.subtitulo
-            }
-            is SeparadorNovo -> {
-                holder.title?.text = stru.titulo
-            }
-            is NucleosInfo -> {
-                holder.title?.text = stru.titulo
-                holder.subtitle?.text = holder.subtitle?.resources?.getString(
-                    R.string.hour_formatted,
-                    stru.hora / 100,
-                    String.format("%02d", stru.hora % 100)
-                )
-                if (stru.extra) {
-                    holder.image?.setImageDrawable(
-                        IconicsDrawable(holder.image.context, GoogleMaterial.Icon.gmd_navigate_next)
-                            .color(ContextCompat.getColor(holder.image.context, R.color.ARROW))
-                    )
-                }
-            }
-            is NucleosTitulo -> {
-                holder.subtitle?.visibility = View.GONE
-                holder.title?.text = stru.titulo
-            }
-            is oneStringDiff_copy -> {
-                holder.subtitle?.visibility = View.GONE
-                holder.title?.text = stru.titulo
-            }
-            is NestedRecycler -> {
-                holder.recycler?.adapter = fastAdapter
-
-                val gridLayoutManager = LinearLayoutManager(
-                    holder.recycler?.context,
-                    LinearLayoutManager.VERTICAL,
-                    false
-                )
-
-                holder.recycler?.layoutManager = gridLayoutManager
-                holder.recycler?.isNestedScrollingEnabled = false
-            }
-            is oneStringDiff_copy2 -> {
-                holder.title?.text = stru.titulo
-                holder.image?.setImageDrawable(
-                    IconicsDrawable(holder.image.context, GoogleMaterial.Icon.gmd_arrow_forward)
-                        .color(ContextCompat.getColor(holder.image.context, R.color.FontWeak))
-                )
-            }
-        }
-    }
-
-    override fun unbindView(holder: ViewHolder) {
-        super.unbindView(holder)
-        holder.title?.text = null
-        holder.subtitle?.text = null
-        holder.recycler?.adapter = null
-        holder.image?.setImageDrawable(null)
-    }
-
-    // Manually create the ViewHolder class
-    class ViewHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        val title: TextView? = v.findViewById(R.id.title)
-        val subtitle: TextView? = v.findViewById(R.id.subtitle)
-        val image: ImageView? = v.findViewById(R.id.imageView)
-        val btn: AppCompatButton? = v.findViewById(R.id.menubutton)
-        val recycler: RecyclerView? = v.findViewById(R.id.defaultRecycler)
-    }
-}
-
-// -- // -- // -- // -- // -- // -- // -- // -- // -- // -- // -- // -- //
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/GlobalClasses.kt b/app/src/main/java/com/example/changedetection/GlobalClasses.kt
deleted file mode 100644
index 65615dc..0000000
--- a/app/src/main/java/com/example/changedetection/GlobalClasses.kt
+++ /dev/null
@@ -1,190 +0,0 @@
-package com.example.changedetection
-
-import android.app.Activity
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.DividerItemDecoration
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
-import android.view.View
-import android.widget.Toast
-import es.dmoral.toasty.Toasty
-
-
-//val colortheme = 0xff4CAF50.toInt()
-val colortheme = 0xffffffff.toInt()
-
-class DataProgramacao(var titulo: String, var hora: String, var tipo: String)
-class Principal_Item(var titulo: String?, var icone: Int)
-class Separador(var titulo: String)
-class SeparadorBig(var titulo: String, var subtitulo: String)
-class Versiculos2(var temimagem: Boolean, var genre: String?, var year: CharSequence?)
-class Estudo_Item(var titulo: String?, var genre: String?, var year: CharSequence?)
-class Nucleos_item(
-    val hora: String,
-    val nome: String,
-    val index: String,
-    val coordenador: String,
-    val preletor: String,
-    val hospedeiro: String,
-    val zap: String
-)
-
-class Ebd_item(val titulo: String, val subtitulo: String, val link: String, val index: String)
-class escalas_item(var titulo: String, var subtitulo: String)
-class oneStringDiff_copy(var titulo: String)
-class oneStringDiff_copy2(var titulo: String)
-
-
-object OhCrap {
-    fun showSuccessToast(act: Activity, str: String) {
-        Toasty.success(act, str, Toast.LENGTH_LONG, true).show()
-    }
-
-    fun showErrorToast(act: Activity, str: String) {
-        Toasty.error(act, str, Toast.LENGTH_LONG, true).show()
-    }
-
-    fun showErrorToast(act: Activity) {
-        Toasty.error(act, "Erro. Verifique a conexÃ£o da internet.", Toast.LENGTH_LONG, true).show()
-    }
-
-    fun showErrorToast(act: View?) {
-        if (act != null) {
-            Toasty.error(
-                act.context,
-                "Erro. Verifique a conexÃ£o da internet.",
-                Toast.LENGTH_LONG,
-                true
-            ).show()
-        }
-    }
-}
-
-object DebugVisibleLogs {
-    var isDebug = false
-
-    fun showSuccessToast(act: Activity, str: String) {
-        if (isDebug) {
-            Toasty.success(act, str, Toast.LENGTH_LONG, true).show()
-        }
-    }
-
-    fun showErrorToast(act: Activity, str: String) {
-        if (isDebug) {
-            Toasty.error(act, str, Toast.LENGTH_LONG, true).show()
-        }
-    }
-}
-
-
-object ClassHelper {
-    fun createEbdRecycler(ctx: Activity): RecyclerView {
-        val recyclerView: RecyclerView = ctx.findViewById(R.id.defaultRecycler)
-        recyclerView.layoutManager = LinearLayoutManager(ctx)
-
-        val draw = ContextCompat.getDrawable(ctx, R.drawable.divider2)
-        if (draw != null) {
-            val div = DividerItemDecoration(ctx, DividerItemDecoration.VERTICAL)
-            div.setDrawable(draw)
-            recyclerView.addItemDecoration(div)
-        }
-
-        recyclerView.isNestedScrollingEnabled = false
-
-        return recyclerView
-    }
-}
-
-object BottomSheet {
-    fun showSheet(activity: Activity, name: String) {
-//        val bottomSheet = activity.findViewById<BottomSheetLayout>(R.id.bottomsheet)
-//        val lay = LayoutInflater.from(activity).inflate(R.layout.rowdrigo_picture, bottomSheet, false)
-//        val fast2: FastItemAdapter<Cadastrados_Sheet_FA> = FastItemAdapter()
-//
-//        val recyclerView: RecyclerView = lay.findViewById(R.id.recycler_rodrigo)
-//        recyclerView.layoutManager = LinearLayoutManager(activity)
-//        recyclerView.adapter = fast2
-//
-//        val decoration = DividerItemDecoration(recyclerView.context,
-//                DividerItemDecoration.VERTICAL)
-//        decoration.setDrawable(ContextCompat.getDrawable(activity, R.drawable.divider)!!)
-//        recyclerView.addItemDecoration(decoration)
-//
-//        fast2.add(Cadastrados_Sheet_FA(name, 0))
-//
-//        fast2.withEventHook(object : ClickEventHook<Cadastrados_Sheet_FA>() {
-//            override fun onBind(viewHolder: RecyclerView.ViewHolder): View? {
-//                return when (viewHolder) {
-//                    is Cadastrados_Sheet_FA.ViewHolder0 -> viewHolder.imageView3
-//                    else -> null
-//                }
-//            }
-//
-//            override fun onClick(v: View, position: Int, fastAdapter: FastAdapter<Cadastrados_Sheet_FA>, item: Cadastrados_Sheet_FA) {
-//                val openestudos = Intent(activity, EditarPessoaActivity::class.java)
-//                openestudos.putExtra("rua", item.rua)
-//                openestudos.putExtra("info", fast2.adapterItems as Serializable)
-//                bottomSheet.dismissSheet()
-//                activity.startActivity(openestudos)
-//            }
-//        })
-//
-//        fast2.withOnClickListener { v, adapter, item, position ->
-//            if (item.kind in 2..89) {
-//                val clipboard = activity.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
-//                val clip = ClipData.newPlainText(null, item.rua)
-//                clipboard.primaryClip = clip
-//
-//                Toast.makeText(activity, "Copiado", Toast.LENGTH_LONG).show()
-//            }
-//            true
-//        }
-//
-//        val database: FirebaseDatabase = FirebaseDatabase.getInstance()
-//        val myRef: DatabaseReference = database.getReference("v1/private/pessoas_info/" + name)
-//        myRef.addListenerForSingleValueEvent(object : ValueEventListener {
-//            override fun onDataChange(dataSnapshot: DataSnapshot) {
-//                var isEmpty = true
-//
-//                if (dataSnapshot.hasChild("Phone")) {
-//                    isEmpty = false
-//                    fast2.add(Cadastrados_Sheet_FA("Contato", 1))
-//                    dataSnapshot.child("Phone").children.forEach { fast2.add(Cadastrados_Sheet_FA(it.key.toString(), it.value.toString(), 2)) }
-//                }
-//                if (dataSnapshot.hasChild("Email")) {
-//                    isEmpty = false
-//                    fast2.add(Cadastrados_Sheet_FA("Email", "", 1))
-//                    dataSnapshot.child("Email").children.forEach { fast2.add(Cadastrados_Sheet_FA(it.key.toString().replace("__dot__", "."), it.value.toString(), 3)) }
-//                }
-//                if (dataSnapshot.hasChild("Endereco")) {
-//                    isEmpty = false
-//                    fast2.add(Cadastrados_Sheet_FA("EndereÃ§o", "", 1))
-//                    dataSnapshot.child("Endereco").children.forEach { fast2.add(Cadastrados_Sheet_FA(it.key.toString(), it.value.toString(), 4)) }
-//                }
-//                if (dataSnapshot.hasChild("Filhos")) {
-//                    isEmpty = false
-//                    fast2.add(Cadastrados_Sheet_FA("Filhos", "", 1))
-//                    dataSnapshot.child("Filhos").children.forEach { fast2.add(Cadastrados_Sheet_FA(it.key.toString(), it.value.toString(), 5)) }
-//                }
-//                if (dataSnapshot.hasChild("Igreja")) {
-//                    isEmpty = false
-//                    fast2.add(Cadastrados_Sheet_FA("Igreja", "", 1))
-//                    dataSnapshot.child("Igreja").children.forEach { fast2.add(Cadastrados_Sheet_FA(it.value.toString(), it.value.toString(), 6)) }
-//                }
-//
-//                if (isEmpty) {
-//                    fast2.add(Cadastrados_Sheet_FA("", "", 98))
-//                }
-//            }
-//
-//            override fun onCancelled(error: DatabaseError) {
-//                // Failed to read value
-//            }
-//        })
-//
-//        bottomSheet.showWithSheetView(lay)
-//        bottomSheet.expandSheet()
-    }
-}
-
-
diff --git a/app/src/main/java/com/example/changedetection/HostActivity.kt b/app/src/main/java/com/example/changedetection/HostActivity.kt
deleted file mode 100644
index 6612dd1..0000000
--- a/app/src/main/java/com/example/changedetection/HostActivity.kt
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.example.changedetection
-
-import android.os.Bundle
-import android.support.design.widget.BottomNavigationView
-import android.support.design.widget.Snackbar
-import android.support.v7.app.AppCompatActivity;
-import android.view.MenuItem
-import androidx.navigation.Navigation
-import androidx.navigation.Navigation.findNavController
-import androidx.navigation.fragment.NavHostFragment
-import androidx.navigation.ui.NavigationUI
-import com.orhanobut.logger.Logger
-
-class HostActivity : AppCompatActivity() {
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.nav_frag)
-
-        val navHostFragment = supportFragmentManager.findFragmentById(R.id.my_nav_host_fragment) as NavHostFragment
-            findViewById<BottomNavigationView>(R.id.bottom_nav_view).let { bottomNavView ->
-                bottomNavView.setOnNavigationItemSelectedListener {
-                    println("rawr!")
-                    true
-                }
-
-//            bottomNavView.setOnNavigationItemSelectedListener {
-//                println(it.itemId)
-//                NavigationUI.onNavDestinationSelected(
-//                    it,
-//                    Navigation.findNavController(this, R.id.my_nav_host_fragment)
-//                )
-//            }
-//
-            NavigationUI.setupWithNavController(bottomNavView, navHostFragment.navController)
-        }
-
-        Navigation.findNavController(navHostFragment.view!!).addOnNavigatedListener { controller, destination ->
-            println("addOnNavigateListener")
-
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/Injection.kt b/app/src/main/java/com/example/changedetection/Injection.kt
deleted file mode 100755
index b18e334..0000000
--- a/app/src/main/java/com/example/changedetection/Injection.kt
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.example.changedetection
-
-/*
- * Copyright (C) 2015 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import android.content.Context
-import com.example.changedetection.data.source.DiffsRepository
-import com.example.changedetection.data.source.TasksRepository
-import com.example.changedetection.data.source.local.DiffsLocalDataSource
-import com.example.changedetection.data.source.local.TasksLocalDataSource
-import com.example.changedetection.data.source.local.ToDoDatabase
-import com.example.changedetection.util.AppExecutors
-import kotlin.jvm.internal.Intrinsics.checkNotNull
-
-/**
- * Enables injection of mock implementations for
- * [TasksDataSource] at compile time. This is useful for testing, since it allows us to use
- * a fake instance of the class to isolate the dependencies and run a test hermetically.
- */
-object Injection {
-
-    fun provideDiffsRepository(context: Context): DiffsRepository {
-        checkNotNull(context)
-        val database = ToDoDatabase.getInstance(context)
-        return DiffsRepository.getInstance(
-//            FakeTasksRemoteDataSource.instance,
-            DiffsLocalDataSource.getInstance(
-                AppExecutors(),
-                database.diffsDao()
-            )
-        )
-    }
-
-    fun provideTasksRepository(context: Context): TasksRepository {
-        checkNotNull(context)
-        val database = ToDoDatabase.getInstance(context)
-        return TasksRepository.getInstance(
-            FakeTasksRemoteDataSource.instance,
-            TasksLocalDataSource.getInstance(
-                AppExecutors(),
-                database.taskDao()
-            )
-        )
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/MainActivity.kt b/app/src/main/java/com/example/changedetection/MainActivity.kt
deleted file mode 100644
index 4b47876..0000000
--- a/app/src/main/java/com/example/changedetection/MainActivity.kt
+++ /dev/null
@@ -1,339 +0,0 @@
-package com.example.changedetection
-
-import android.arch.lifecycle.ViewModelProviders
-import android.content.Context
-import android.graphics.Point
-import android.support.v4.app.FragmentActivity
-import android.support.v7.app.AppCompatActivity
-import android.view.WindowManager
-import com.orhanobut.logger.Logger
-
-class MainActivity : AppCompatActivity() {
-//    private lateinit var mViewModel: TasksViewModel
-//    private val groupAdapter = GroupAdapter<ViewHolder>()
-//    private var theList = mutableListOf<Item>()
-//    private var updatingCultos = Section(theList)
-//
-//    val color: Int by lazy { ContextCompat.getColor(this, R.color.FontStrong) }
-//
-//    fun dp(value: Int, resources: Resources): Int {
-//        return (resources.displayMetrics.density * value).toInt()
-//    }
-//
-//    override fun onCreate(savedInstanceState: Bundle?) {
-//        super.onCreate(savedInstanceState)
-//        setContentView(R.layout.todos_encontros_activity)
-//
-//        mViewModel = obtainViewModel(this)
-//
-//        val compressionWork = OneTimeWorkRequest.Builder(SyncWorker::class.java).build()
-//        WorkManager.getInstance().enqueue(compressionWork)
-//
-//        val div = DividerItemDecoration(this, DividerItemDecoration.VERTICAL)
-//        div.setDrawable(ContextCompat.getDrawable(this@MainActivity, R.drawable.divider2)!!)
-//
-//        fab.background = IconicsDrawable(this, CommunityMaterial.Icon.cmd_plus)
-//        fab.setOnClickListener {
-//            criarEditarDialog(false, this)
-//        }
-//
-//        stateLayout.empty_text.text = "Nothing found"
-//        stateLayout.showEmptyState()
-//
-//        groupAdapter.apply {
-//            spanCount = calculateNoOfColumns(this@MainActivity)
-//        }
-//
-//        defaultRecycler.apply {
-//            this.setEmptyView(stateLayout)
-//            addItemDecoration(div)
-//            adapter = groupAdapter
-//
-//            val linearLayoutManager = object : GridLayoutManager(context, groupAdapter.spanCount) {
-//                override fun onLayoutChildren(
-//                    recycler: RecyclerView.Recycler?,
-//                    state: RecyclerView.State
-//                ) {
-//                    super.onLayoutChildren(recycler, state)
-//                    initSpruce(this@apply)
-//                }
-//            }
-//
-//            layoutManager = linearLayoutManager.apply {
-//                spanSizeLookup = groupAdapter.spanSizeLookup
-//            }
-//        }
-//
-//        groupAdapter.add(MarqueeItem("Change Detection"))
-//        groupAdapter.add(updatingCultos)
-//        groupAdapter.setOnItemLongClickListener { item, view ->
-//            if (item is BottomSheetCardItem) {
-//
-//                val context = this
-//
-//                val materialdialog = MaterialDialog.Builder(this)
-//                    .customView(R.layout.default_recycler_grey_200, false)
-//                   .show()
-//
-//                val updating = mutableListOf<DialogItem>()
-//
-//                updating += DialogItem(
-//                    "Reload",
-//                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_reload).color(
-//                        ContextCompat.getColor(context, R.color.md_green_500)
-//                    ),
-//                    "reload"
-//                )
-//
-//                updating += DialogItem(
-//                    "Edit",
-//                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_pencil).color(
-//                        ContextCompat.getColor(context, R.color.md_blue_500)
-//                    ),
-//                    "edit"
-//                )
-//
-//                updating += DialogItem(
-//                    "Remove",
-//                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_close).color(
-//                        ContextCompat.getColor(context, R.color.md_red_500)
-//                    ),
-//                    "remove"
-//                )
-//
-//                materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)?.run {
-//                    adapter = GroupAdapter<ViewHolder>().apply {
-//                        add(Section(updating))
-//
-//                        setOnItemClickListener { dialogitem, view ->
-//                            if (dialogitem !is DialogItem) return@setOnItemClickListener
-//
-//                            when (dialogitem.kind){
-//                                "edit" -> criarEditarDialog(true, context, item as? BottomSheetCardItem)
-//                                "reload" -> reload(item)
-//                                "remove" -> removeMy(item)
-//                            }
-//                            materialdialog.dismiss()
-//                        }
-//                    }
-//                }
-////                criarEditarDialog(true, this, item as? BottomSheetCardItem)
-//                return@setOnItemLongClickListener true
-//            }
-//            return@setOnItemLongClickListener false
-//        }
-//
-//        groupAdapter.setOnItemClickListener { item, view ->
-//
-//            Logger.d("Getting inside site id: " + (item as? BottomSheetCardItem)?.tas?.id)
-//
-//            if (item is BottomSheetCardItem) {
-//
-//                supportFragmentManager.run {
-//                    beginTransaction()
-//                        .setCustomAnimations(
-//                            R.anim.slide_up2,
-//                            R.anim.design_bottom_sheet_slide_out,
-//                            R.anim.slide_up2,
-//                            R.anim.design_bottom_sheet_slide_out
-//                        )
-//                        .add(
-//                            R.id.framelayout,
-//                            OpenFragment.newInstance(item.tas.id, item.title, item.tas.url),
-//                            "elasticsheet"
-//                        )
-//                        .addToBackStack(null)
-//                        .commitAllowingStateLoss()
-//                }
-//            }
-//        }
-//
-//        mViewModel.loadTasks(false)
-//
-//        mViewModel.items2.observe(this, Observer {
-//            theList.clear()
-//            it?.forEach {
-//                theList.add(BottomSheetCardItem(it.site, it.diff))
-//            }
-//            updatingCultos.update(theList)
-//        })
-//    }
-//
-//    private var spruceAnimator: Animator? = null
-//
-//    private fun initSpruce(recyclerView: RecyclerView) {
-//        spruceAnimator = Spruce.SpruceBuilder(recyclerView)
-//            .sortWith(DefaultSort(100))
-//            .animateWith()
-//            .start()
-//    }
-//
-//    private fun reload(item: BottomSheetCardItem?) {
-//        if (item !is BottomSheetCardItem) {
-//            return
-//        }
-//
-//        item.status = 1
-//        item.notifyChanged()
-//
-//        val client = OkHttpClient()
-//
-//        Single.fromCallable {
-//            val request = Request.Builder()
-//                .url(item.tas.url)
-//                .build()
-//
-//            val response1 = client.newCall(request).execute()
-//
-//            val resp2 = response1.isSuccessful
-//
-//            Logger.d("isSuccessful -> $resp2")
-//            Logger.d(
-//                "header -> ${response1.headers()
-//                }"
-//            )
-//
-//            val str = response1.body()?.string()
-//            Logger.d("str -> $str")
-//
-//            return@fromCallable str
-//        }
-//            .subscribeOn(Schedulers.newThread())
-//            .observeOn(AndroidSchedulers.mainThread())
-//            .onErrorReturn {
-//                Logger.d("onErrorReturn")
-//                return@onErrorReturn ""
-//            }
-//            .subscribe { it ->
-//                Logger.d("count -> $it")
-//
-////                item.size = it?.count() ?: 0
-////                item.timestamp = currentTime()
-//
-//                if (it?.count() == 0 || it == null) {
-//                    item.status = 2
-//                    item.notifyChanged()
-//                } else {
-//                    item.status = 0
-//                    if (it.isNotBlank()) {
-//                        val diff = Diff(it, currentTime(), item.tas.id)
-//
-//                        mViewModel.saveWebsite(diff).observe(this, Observer {
-//                            if (it == true) {
-//                                item.notifyChanged(diff)
-//                            }
-//                        })
-//                    }
-//                }
-//
-//                item.notifyChanged()
-//            }
-//    }
-//
-//    private fun removeMy(item: BottomSheetCardItem?) {
-//        if (item != null) {
-//            mViewModel.completeTask(item.tas, true)
-//            mViewModel.clearCompletedTasks()
-//            theList.remove(item)
-//            updatingCultos.update(theList)
-//        }
-//    }
-//
-//    private fun currentTime(): Long = System.currentTimeMillis()
-//
-//    private fun criarEditarDialog(
-//        isInEditingMode: Boolean,
-//        activity: Activity,
-//        item: BottomSheetCardItem? = null
-//    ) {
-//
-//        val fastFA2 = FastItemAdapter<EmptyAdapter>()
-//
-//        val materialdialogpiece = MaterialDialog.Builder(activity)
-//            .customView(R.layout.default_recycler_grey_200, false)
-//            .negativeText(R.string.cancel)
-//            .onPositive { _, _ ->
-//                val map2 = FormSaveAndHook.saveData(fastFA2, mutableListOf())
-//                Logger.d(map2)
-//
-//                val urltmp = map2["url"] as? String ?: ""
-//                val title = map2["name"] as? String ?: ""
-//
-//                if (isInEditingMode && item != null) {
-//                    val updatedTask = Site(title, urltmp, currentTime(), item.tas.id)
-//                    mViewModel.updateTask(updatedTask)
-//                    theList.remove(item)
-//                    theList.add(BottomSheetCardItem(updatedTask, item.lastDiff))
-//                    updatingCultos.update(theList)
-//                } else {
-//                    val url = when {
-//                        !urltmp.startsWith("http://") && !urltmp.startsWith("https://") -> "http://$urltmp"
-//                        else -> urltmp
-//                    }
-//
-//                    val site = mViewModel.saveTask(title, url, currentTime())
-//                    // add and sort the card
-//                    theList.add(BottomSheetCardItem(site, null))
-//                    updatingCultos.update(theList)
-//                }
-//            }
-//
-//        when (isInEditingMode) {
-//            true ->
-//                materialdialogpiece
-//                    .title("Edit")
-//                    .positiveText("Save")
-//            false ->
-//                materialdialogpiece
-//                    .title("Add")
-//                    .positiveText("Save")
-//        }
-//
-//        val materialdialog = materialdialogpiece.build()
-//
-//        fastFA2.apply {
-//            add(FormDecSection("Url", FormConstants.url, true))
-//            add(FormDecSingleText(item?.tas?.url ?: "", FormConstants.url))
-//
-//            add(FormDecSection("Title (optional)", FormConstants.iname, true))
-//            add(FormDecSingleText(item?.tas?.title ?: "", FormConstants.iname))
-//        }
-//
-//        materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)?.run {
-//            layoutManager = LinearLayoutManager(this.context)
-//            adapter = fastFA2
-//        }
-//
-//        materialdialog.show()
-//    }
-
-    companion object {
-        // Useful for landscape mode, tablets and extra extra large displays
-        fun calculateNoOfColumns(context: Context): Int {
-
-            val point = Point()
-            (context.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay.getSize(
-                point
-            )
-
-            val metrics = context.resources.displayMetrics
-            val ratio = metrics.heightPixels.toFloat() / metrics.widthPixels.toFloat()
-            val displayMetrics = context.resources.displayMetrics
-            val dpWidth = displayMetrics.widthPixels / displayMetrics.density
-
-            Logger.d("WIDHT $dpWidth")
-            Logger.d("ratio $ratio")
-            if (ratio < 1) {
-                return (dpWidth / 240).toInt()
-            }
-            return (dpWidth / 240).toInt()
-        }
-
-        fun obtainViewModel(activity: FragmentActivity): TasksViewModel {
-            // Use a Factory to inject dependencies into the ViewModel
-            val factory = ViewModelFactory.getInstance(activity.application)
-            return ViewModelProviders.of(activity, factory).get(TasksViewModel::class.java)
-        }
-    }
-}
-
diff --git a/app/src/main/java/com/example/changedetection/MainFragment.kt b/app/src/main/java/com/example/changedetection/MainFragment.kt
deleted file mode 100644
index 4f6d434..0000000
--- a/app/src/main/java/com/example/changedetection/MainFragment.kt
+++ /dev/null
@@ -1,419 +0,0 @@
-package com.example.changedetection
-
-import android.app.Activity
-import android.arch.lifecycle.Observer
-import android.content.Context
-import android.content.res.Resources
-import android.graphics.Point
-import android.os.Bundle
-import android.support.v4.app.Fragment
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.GridLayoutManager
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import android.view.WindowManager
-import android.widget.Toast
-import androidx.core.os.bundleOf
-import androidx.navigation.Navigation
-import androidx.work.OneTimeWorkRequest
-import androidx.work.PeriodicWorkRequest
-import androidx.work.WorkManager
-import androidx.work.WorkStatus
-import com.afollestad.materialdialogs.MaterialDialog
-import com.example.changedetection.data.Diff
-import com.example.changedetection.data.Site
-import com.example.changedetection.forms.*
-import com.example.changedetection.groupie.BottomSheetCardItem
-import com.example.changedetection.groupie.DialogItem
-import com.mikepenz.community_material_typeface_library.CommunityMaterial
-import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-import com.mikepenz.iconics.IconicsDrawable
-import com.orhanobut.logger.Logger
-import com.xwray.groupie.GroupAdapter
-import com.xwray.groupie.Section
-import com.xwray.groupie.ViewHolder
-import io.reactivex.Single
-import io.reactivex.android.schedulers.AndroidSchedulers
-import io.reactivex.schedulers.Schedulers
-import kotlinx.android.synthetic.main.empty_layout.view.*
-import kotlinx.android.synthetic.main.state_layout.view.*
-import kotlinx.android.synthetic.main.todos_encontros_activity.view.*
-import okhttp3.OkHttpClient
-import okhttp3.Request
-import java.util.concurrent.TimeUnit
-
-class MainFragment : Fragment() {
-    private lateinit var mViewModel: TasksViewModel
-    private val groupAdapter = GroupAdapter<ViewHolder>()
-    private var theList = mutableListOf<BottomSheetCardItem>()
-    private var updatingCultos = Section(theList)
-
-    val color: Int by lazy { ContextCompat.getColor(requireActivity(), R.color.FontStrong) }
-
-    fun dp(value: Int, resources: Resources): Int {
-        return (resources.displayMetrics.density * value).toInt()
-    }
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-
-//        WorkManager.getInstance().cancelUniqueWork("sample")
-        
-        val photoWork = PeriodicWorkRequest.Builder(
-            SyncWorker::class.java,
-            15,
-            TimeUnit.SECONDS)
-            .addTag("sample")
-            .build()
-
-//        WorkManager.getInstance().enqueue(photoWork)
-    }
-
-    override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        // Inflate the layout for this fragment
-        val view = inflater.inflate(R.layout.todos_encontros_activity, container, false)
-//    }
-//
-//    override fun onActivityCreated(savedInstanceState: Bundle?) {
-//        super.onActivityCreated(savedInstanceState)
-
-        mViewModel = MainActivity.obtainViewModel(requireActivity())
-
-        view.fab.run {
-            background = IconicsDrawable(requireActivity(), CommunityMaterial.Icon.cmd_plus)
-            setOnClickListener {
-                criarEditarDialog(false, requireActivity())
-            }
-        }
-
-        view.defaultRecycler.apply {
-            if (view.stateLayout == null){
-                println("null!")
-            }
-
-            setEmptyView(view.stateLayout.apply {
-                this.empty_text.text = "Nothing found"
-                showEmptyState()
-            })
-
-            itemAnimator = null
-            adapter = groupAdapter.apply {
-                spanCount = calculateNoOfColumns(requireActivity())
-                if (this.itemCount == 0) {
-                    this.add(MarqueeItem("Change Detection"))
-                    this.add(updatingCultos)
-                }
-            }
-
-            layoutManager = GridLayoutManager(context, groupAdapter.spanCount).apply {
-                spanSizeLookup = groupAdapter.spanSizeLookup
-            }
-        }
-
-        groupAdapter.setOnItemLongClickListener { item, view ->
-            if (item is BottomSheetCardItem) {
-
-                val context = requireActivity()
-
-                val materialdialog = MaterialDialog.Builder(context)
-                    .customView(R.layout.default_recycler_grey_200, false)
-                    .show()
-
-                val updating = mutableListOf<DialogItem>()
-
-                updating += DialogItem(
-                    "Reload",
-                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_reload).color(
-                        ContextCompat.getColor(context, R.color.md_green_500)
-                    ),
-                    "reload"
-                )
-
-                updating += DialogItem(
-                    "Edit",
-                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_pencil).color(
-                        ContextCompat.getColor(context, R.color.md_blue_500)
-                    ),
-                    "edit"
-                )
-
-                updating += DialogItem(
-                    "Remove",
-                    IconicsDrawable(context, CommunityMaterial.Icon.cmd_close).color(
-                        ContextCompat.getColor(context, R.color.md_red_500)
-                    ),
-                    "remove"
-                )
-
-                materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)?.run {
-                    adapter = GroupAdapter<ViewHolder>().apply {
-                        add(Section(updating))
-
-                        setOnItemClickListener { dialogitem, view ->
-                            if (dialogitem !is DialogItem) return@setOnItemClickListener
-
-                            when (dialogitem.kind) {
-                                "edit" -> criarEditarDialog(
-                                    true,
-                                    context,
-                                    item as? BottomSheetCardItem
-                                )
-                                "reload" -> reload(item)
-                                "remove" -> removeMy(item)
-                            }
-                            materialdialog.dismiss()
-                        }
-                    }
-                }
-                return@setOnItemLongClickListener true
-            }
-            return@setOnItemLongClickListener false
-        }
-
-        groupAdapter.setOnItemClickListener { item, view ->
-
-            Logger.d("Getting inside site id: " + (item as? BottomSheetCardItem)?.tas?.id)
-
-            if (item is BottomSheetCardItem) {
-
-                val bundle =
-                    bundleOf("TASKID" to item.tas.id, "TITLE" to item.tas.title, "URL" to item.tas.url)
-                Navigation.findNavController(view).navigate(R.id.action_mainFragment_to_openFragment, bundle)
-            }
-        }
-
-        WorkManager.getInstance()
-            .getStatusesByTag("sample")
-            .observe(this, Observer {
-            val result = it ?: return@Observer
-
-            val sb = StringBuilder()
-            result.forEach { sb.append("${it.id}: ${it.state.name}\n") }
-            Toast.makeText(requireContext(), sb.toString(), Toast.LENGTH_LONG).show()
-
-                result.forEach {
-                    WorkManager.getInstance().cancelAllWorkByTag("sample")
-                }
-
-            theList.forEach { it.startSyncing() }
-            mViewModel.loadTasks(true)
-        })
-
-        mViewModel.loadTasks(false)
-
-        mViewModel.items2.observe(this, Observer { mutable ->
-
-            if (theList.isNotEmpty()){
-                //Verifies if list is not empty and add values that are not there. Basically, makes a diff.
-                mutable?.forEach { siteAndLastDiff ->
-                    theList.find { carditem -> carditem.tas.id == siteAndLastDiff.site.id }.also {
-                        if (it == null){
-                            theList.add(BottomSheetCardItem(siteAndLastDiff.site, siteAndLastDiff.diff, globalListener))
-                        } else {
-                            it.updateTaskDiff(siteAndLastDiff.site, siteAndLastDiff.diff)
-                        }
-                    }
-                }
-            } else {
-                mutable?.forEach {
-                    theList.add(BottomSheetCardItem(it.site, it.diff, globalListener))
-                }
-            }
-            updatingCultos.update(theList)
-        })
-
-        return view
-    }
-
-    interface bottom {
-        fun onClickListener(id: BottomSheetCardItem)
-        fun onLongClickListener()
-        fun onRefreshListener(id: BottomSheetCardItem)
-    }
-
-    private val globalListener = object : bottom {
-        override fun onClickListener(item: BottomSheetCardItem) {
-            if (view != null) {
-                val bundle =
-                    bundleOf("TASKID" to item.tas.id, "TITLE" to item.tas.title, "URL" to item.tas.url)
-
-                Navigation.findNavController(view!!).navigate(R.id.action_mainFragment_to_openFragment, bundle)
-            }
-        }
-
-        override fun onLongClickListener() {
-
-        }
-
-        override fun onRefreshListener(item: BottomSheetCardItem) {
-            reload(item)
-        }
-    }
-
-//    private var spruceAnimator: Animator? = null
-//
-//    private fun initSpruce(recyclerView: RecyclerView) {
-////        spruceAnimator = Spruce.SpruceBuilder(recyclerView)
-////            .sortWith(DefaultSort(150))
-////            .animateWith(
-////                DefaultAnimations.fadeInAnimator(recyclerView, 300),
-////                ObjectAnimator.ofFloat(recyclerView, "translationY", recyclerView.height.toFloat()/2, 0f).setDuration(350))
-////            .start()
-//    }
-
-    private fun reload(item: BottomSheetCardItem?) {
-        if (item !is BottomSheetCardItem) {
-            return
-        }
-
-        item.startSyncing()
-        val client = OkHttpClient()
-
-        Single.fromCallable {
-            val request = Request.Builder()
-                .url(item.tas.url)
-                .build()
-
-            val response1 = client.newCall(request).execute()
-
-            Logger.d("isSuccessful -> ${response1.isSuccessful}")
-            Logger.d("header -> ${response1.headers()}")
-
-            val str = response1.body()?.string() ?: ""
-//            Logger.d("str -> $str")
-            return@fromCallable str
-        }
-            .subscribeOn(Schedulers.newThread())
-            .observeOn(AndroidSchedulers.mainThread())
-            .onErrorReturn {
-                Logger.d("onErrorReturn")
-                return@onErrorReturn ""
-            }
-            .subscribe { it ->
-                Logger.d("count size -> ${it.count()}")
-
-                val newTask = item.tas.copy(timestamp = System.currentTimeMillis(), successful = !(it.count() == 0 || it.isNullOrBlank()))
-                mViewModel.updateTask(newTask)
-                item.updateTask(newTask)
-
-                val diff = Diff(it, currentTime(), item.tas.id)
-                mViewModel.saveWebsite(diff).observe(this, Observer {
-                    if (it == true) {
-                        Logger.d("Diff: " + diff.fileId)
-                        item.updateDiff(diff)
-                    }
-                })
-            }
-    }
-
-    private fun removeMy(item: BottomSheetCardItem?) {
-        if (item != null) {
-            theList.remove(item)
-            updatingCultos.update(theList)
-            mViewModel.removeTask(item.tas)
-        }
-    }
-
-    private fun currentTime(): Long = System.currentTimeMillis()
-
-    private fun criarEditarDialog(
-        isInEditingMode: Boolean,
-        activity: Activity,
-        item: BottomSheetCardItem? = null
-    ) {
-
-        val fastFA2 = FastItemAdapter<EmptyAdapter>()
-
-        val materialdialogpiece = MaterialDialog.Builder(activity)
-            .customView(R.layout.default_recycler_grey_200, false)
-            .negativeText(R.string.cancel)
-            .onPositive { _, _ ->
-                val map2 = FormSaveAndHook.saveData(fastFA2, mutableListOf())
-                Logger.d(map2)
-
-                val urltmp = map2["url"] as? String ?: ""
-                val title = map2["name"] as? String ?: ""
-
-                if (isInEditingMode && item != null) {
-                    val updatedTask = Site(title, urltmp, currentTime(), item.tas.id)
-                    mViewModel.updateTask(updatedTask)
-                    theList.firstOrNull { it.tas.id == item.tas.id }?.updateTask(item.tas)
-                    reload(item)
-//                    theList.remove(item)
-//                    theList.add(BottomSheetCardItem(updatedTask, item.lastDiff, globalListener))
-//                    updatingCultos.update(theList)
-                } else {
-                    val url = when {
-                        !urltmp.startsWith("http://") && !urltmp.startsWith("https://") -> "http://$urltmp"
-                        else -> urltmp
-                    }
-
-                    val task = mViewModel.saveTask(title, url, currentTime())
-                    // add and sort the card
-
-                    val newItem = BottomSheetCardItem(task, null, globalListener)
-                    theList.add(newItem)
-                    updatingCultos.update(theList)
-                    reload(newItem)
-                }
-            }
-
-        when (isInEditingMode) {
-            true ->
-                materialdialogpiece
-                    .title("Edit")
-                    .positiveText("Save")
-            false ->
-                materialdialogpiece
-                    .title("Add")
-                    .positiveText("Save")
-        }
-
-        val materialdialog = materialdialogpiece.build()
-
-        fastFA2.apply {
-            add(FormDecSection("Url", FormConstants.url, true))
-            add(FormDecSingleText(item?.tas?.url ?: "", FormConstants.url))
-
-            add(FormDecSection("Title (optional)", FormConstants.iname, true))
-            add(FormDecSingleText(item?.tas?.title ?: "", FormConstants.iname))
-        }
-
-        materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)?.run {
-            layoutManager = LinearLayoutManager(this.context)
-            adapter = fastFA2
-        }
-
-        materialdialog.show()
-    }
-
-    companion object {
-        // Useful for landscape mode, tablets and extra extra large displays
-        fun calculateNoOfColumns(context: Context): Int {
-
-            val point = Point()
-            (context.getSystemService(Context.WINDOW_SERVICE) as WindowManager).defaultDisplay.getSize(
-                point
-            )
-
-            val metrics = context.resources.displayMetrics
-            val ratio = metrics.heightPixels.toFloat() / metrics.widthPixels.toFloat()
-            val displayMetrics = context.resources.displayMetrics
-            val dpWidth = displayMetrics.widthPixels / displayMetrics.density
-
-            Logger.d("WIDHT $dpWidth")
-            Logger.d("ratio $ratio")
-            if (ratio < 1) {
-                return (dpWidth / 240).toInt()
-            }
-            return (dpWidth / 240).toInt()
-        }
-    }
-}
-
diff --git a/app/src/main/java/com/example/changedetection/PrimitiveAbstractItem.kt b/app/src/main/java/com/example/changedetection/PrimitiveAbstractItem.kt
deleted file mode 100644
index 3a13c57..0000000
--- a/app/src/main/java/com/example/changedetection/PrimitiveAbstractItem.kt
+++ /dev/null
@@ -1,625 +0,0 @@
-package com.example.changedetection
-
-import android.content.Context
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.AppCompatButton
-import android.support.v7.widget.LinearLayoutManager
-import android.support.v7.widget.RecyclerView
-import android.view.View
-import android.widget.ImageView
-import android.widget.TextView
-import com.example.changedetection.util.FAUIUtils
-import com.example.changedetection.util.TextDrawable
-import com.mikepenz.community_material_typeface_library.CommunityMaterial
-import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-import com.mikepenz.fastadapter.items.AbstractItem
-import com.mikepenz.google_material_typeface_library.GoogleMaterial
-import com.mikepenz.iconics.IconicsDrawable
-import com.orhanobut.logger.Logger
-
-
-enum class STATUS {
-    FULLACCESS, HEADER, DESCRIPTION, PRESENTE, AUSENTE, NONE, STARRED
-}
-
-class AcessoItem(name: String, id: String, status: STATUS) : primitiveClassType(name, id, status, 2)
-
-class AcessoHeader(name: String, status: STATUS) : primitiveClassType(name, "", status, 1)
-
-class ChamadaItem(name: String, status: STATUS, id: String = "") :
-    primitiveClassType(name, id, status, 2)
-
-class ChamadaHeader(name: String, status: STATUS) : primitiveClassType(name, status, 1)
-
-class LiturgiaItem(
-    name: String,
-    var subtitle: String,
-    var kind: String,
-    timestamp: Long,
-    var isVisible: Boolean = false
-) :
-    primitiveClassType(name, "", timestamp, 0)
-
-class AllLiturgiasItem(
-    timestamp: Long,
-    name: String,
-    var people_that_came: Int,
-    var preletor: String,
-    id: String
-) : primitiveClassType(name, id, timestamp, 2)
-
-
-class AllMeetingsHeader(name: String) : primitiveClassType(name, 1)
-
-class AllMeetingsItem(
-    timestamp: Long,
-    name: String,
-    var diffSize: Int,
-    var url: String
-) : primitiveClassType(name, url, timestamp, 2)
-
-class AllMeetingsItemNotBeingUsed(timestamp: Long, name: String, var trueid: String) :
-    primitiveClassType(name, trueid, timestamp, 2)
-
-class miniSeparator(name: String, prio: Int) : primitiveClassType(name, "", STATUS.NONE, prio)
-
-class EBDItemmm(
-    name: String,
-    var teacher: String,
-    var room: String,
-    id: String,
-    prio: Int = 3,
-    val isAdmin: Boolean = false
-) :
-    primitiveClassType(name, id, 1, prio)
-
-class Nested(prio: Int) : primitiveClassType("", "", 0, prio)
-
-class EbdItem(name: String, id: String, val subtitle: String = "") : NucleosItem(name, id, 5, 1)
-
-open class NucleosItem(name: String, id: String, weekday: Long, prio: Int) :
-    primitiveClassType(name, id, weekday, STATUS.NONE, prio)
-
-class NucleosHeader(name: String, weekday: Long, prio: Int) :
-    primitiveClassType(name, "", weekday, STATUS.NONE, prio)
-
-class NucleosMore(name: String, weekday: Long, prio: Int) :
-    primitiveClassType(name, "", weekday, STATUS.NONE, prio)
-
-class FastDescription(name: String, weekday: Long, prio: Int) :
-    primitiveClassType(name, "", weekday, prio)
-
-class FlatButton(name: String, weekday: Long, prio: Int) :
-    primitiveClassType(name, "", weekday, STATUS.NONE, prio)
-
-class ButtonBiblaLibras(name: String, id: String, prio: Int) :
-    primitiveClassType(name, id, -1, STATUS.PRESENTE, prio)
-
-class moreBasicItem2(
-    name: String,
-    id: String,
-    timestamp: Long,
-    val kind: Int = 0,
-    var hour: Int = 0,
-    prio: Int,
-    val isAdmin: Boolean = false
-) :
-    primitiveClassType(name, id, timestamp, STATUS.NONE, prio)
-
-class moreBasicHeader2(
-    name: String,
-    id: String,
-    timestamp: Long,
-    val kind: Int = 0,
-    val hour: Int = 0,
-    prio: Int
-) :
-    primitiveClassType(name, id, timestamp, STATUS.NONE, prio)
-
-class pesquisarHospedeiro(
-    name: String,
-    id: String,
-    val address: String
-) :
-    primitiveClassType(name, id, 0, STATUS.NONE, 0)
-
-class pesquisarPreletor(
-    name: String,
-    id: String,
-    val address: String
-) :
-    primitiveClassType(name, id, 0, STATUS.NONE, 0)
-
-
-open class primitiveClassType(
-    var name: String,
-    var id: String = "",
-    var timestamp: Long = 0,
-    var status: STATUS,
-    var prio: Int = 9
-) {
-    // TODOS ENCONTROS
-    constructor(name: String, id: String, timestamp: Long, prio: Int) : this(
-        name,
-        id,
-        timestamp,
-        STATUS.NONE,
-        prio
-    )
-
-    constructor(name: String, prio: Int) : this(name, "", 0, STATUS.NONE, prio)
-
-    // CHAMADA
-    constructor(name: String, id: String, status: STATUS, prio: Int) : this(
-        name,
-        id,
-        0,
-        status,
-        prio
-    )
-
-    constructor(name: String, status: STATUS, prio: Int) : this(name, "", 0, status, prio)
-}
-
-class NucleosAdapter(stru: primitiveClassType) : PrimitiveAbstractItem(stru) {
-
-    override fun getType(): Int = when (stru) {
-        is EbdItem -> 22
-        is NucleosItem -> 9
-        else -> 99
-    }
-
-    override fun getViewHolder(v: View): RecyclerView.ViewHolder =
-        PrimitiveAbstractItem.ViewHolder(v)
-
-    override fun getLayoutRes(): Int {
-        return when (stru) {
-            is EbdItem -> R.layout.ebd_item
-            is NucleosItem -> R.layout.nuc_nuc_item
-
-            else -> return R.layout.item_sticky_generic3
-        }
-    }
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-
-        if (holder is PrimitiveAbstractItem.ViewHolder) {
-            when (stru) {
-                is EbdItem -> {
-                    holder.nome.text = stru.name
-                    holder.subtitle?.text = holder.subtitle?.resources?.getString(
-                        R.string.hour_formatted,
-                        stru.prio / 100,
-                        String.format("%02d", stru.prio % 100)
-                    )
-                }
-                is NucleosItem -> {
-                    holder.nome.text = stru.name
-                    holder.subtitle?.text = holder.subtitle?.resources?.getString(
-                        R.string.hour_formatted,
-                        stru.prio / 100,
-                        String.format("%02d", stru.prio % 100)
-                    )
-                }
-            }
-        }
-    }
-}
-
-
-open class PrimitiveAbstractItem(val stru: primitiveClassType) :
-    AbstractItem<PrimitiveAbstractItem, RecyclerView.ViewHolder>() {
-    val fastAdapter: FastItemAdapter<PrimitiveAbstractItem> = FastItemAdapter()
-
-    override fun getType(): Int = when (stru) {
-        is AllMeetingsHeader -> 0
-        is AllMeetingsItem -> 1
-        is AllMeetingsItemNotBeingUsed -> 2
-        is ChamadaItem -> 3
-        is ChamadaHeader -> 4
-        is AcessoItem -> 5
-        is AcessoHeader -> 6
-        is miniSeparator -> 7
-        is Nested -> 8
-
-        is EbdItem -> 22
-        is NucleosItem -> 9
-
-        is NucleosHeader -> 10
-        is NucleosMore -> 11
-        is FastDescription -> 12
-
-        is EBDItemmm -> 13
-        is FlatButton -> 14
-
-        is LiturgiaItem -> 15
-        is AllLiturgiasItem -> 16
-        is ButtonBiblaLibras -> 17
-
-        is moreBasicItem2 -> 18
-        is moreBasicHeader2 -> 19
-
-        is pesquisarHospedeiro -> 20
-        is pesquisarPreletor -> 21
-
-        else -> 99
-    }
-
-    override fun getViewHolder(v: View): RecyclerView.ViewHolder {
-        return when (stru) {
-            is ChamadaItem -> ViewHolder1(v)
-//            is EBDItemmm -> ViewHolder3(v)
-            is moreBasicItem2, is EBDItemmm -> ViewHolder3(v)
-            is FlatButton -> ButtonHolder(v)
-            is Nested -> ViewHolder2(v)
-            is LiturgiaItem -> LiturgiaViewHolder(v)
-            is pesquisarHospedeiro -> pesquisarHospedeiroViewHolder(v)
-            is pesquisarPreletor -> pesquisarPreletorViewHolder(v)
-            else -> PrimitiveAbstractItem.ViewHolder(v)
-        }
-    }
-
-    override fun getLayoutRes(): Int {
-        return when (stru) {
-            is AllMeetingsHeader -> R.layout.big_title
-            is AllMeetingsItem -> R.layout.todos_encontros_item
-            is AllMeetingsItemNotBeingUsed -> R.layout.todos_encontros_item
-            is ChamadaItem -> R.layout.item_chamada
-            is ChamadaHeader -> R.layout.big_title
-            is AcessoItem -> R.layout.item_acesso
-            is AcessoHeader -> R.layout.item_simple_card
-            is miniSeparator -> R.layout.main_separador_programacao
-            is Nested -> R.layout.nested
-
-            is EbdItem -> R.layout.nuc_ebd_item
-
-            is NucleosItem -> R.layout.nuc_nuc_item
-            is NucleosHeader -> R.layout.big_title_without_margin
-            is NucleosMore -> R.layout.item_nucleo_more
-            is FastDescription -> R.layout.item_para_participar
-
-            is FlatButton -> R.layout.flat_button
-            is LiturgiaItem -> R.layout.liturgiaitem
-            is AllLiturgiasItem -> R.layout.todos_encontros_item
-
-            is ButtonBiblaLibras -> R.layout.item_principal_culto
-
-            is moreBasicItem2, is EBDItemmm -> R.layout.ebd_item
-            is moreBasicHeader2 -> R.layout.item_sticky_generic3
-
-            is pesquisarHospedeiro -> R.layout.hospedeiro_dialog_item
-            is pesquisarPreletor -> R.layout.preletor_dialog_item
-            else -> return R.layout.item_sticky_generic3
-        }
-    }
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-
-        if (stru is moreBasicHeader2) {
-//            holder.title?.text = stru.name
-//        } else if (stru is moreButton) {
-//            holder.btn?.text = stru.name
-//            if (stru.name == "Administradores") {
-//                holder.btn?.setTextColor(0xff000000.toInt())
-//            }
-//            setDraw(holder.btn, GoogleMaterial.Icon.gmd_exit_to_app)
-//            holder.btn.
-        }
-
-
-        if (holder is pesquisarHospedeiroViewHolder && stru is pesquisarHospedeiro) {
-            holder.title.text = stru.name
-            holder.subtitle.text = stru.address
-        }
-
-        if (holder is pesquisarPreletorViewHolder && stru is pesquisarPreletor) {
-            holder.title.text = stru.name
-        }
-
-        if (holder is PrimitiveAbstractItem.ViewHolder) {
-            when (stru) {
-                is AllMeetingsItem -> {
-                    holder.nome.text = stru.name
-                }
-                is AllMeetingsHeader -> {
-                    holder.nome.text = stru.name
-                }
-                is AllMeetingsItemNotBeingUsed -> {
-                    holder.nome.text = stru.name
-                }
-                is AcessoItem -> {
-                    holder.nome.text = stru.name
-                    if (stru.name.isEmpty()) {
-                        holder.nome.visibility = View.GONE
-                    }
-                    Logger.d("Nome: " + stru.name + " --- id: " + stru.id)
-                    holder.subtitle?.text = stru.id
-
-                }
-                is AcessoHeader -> {
-                    holder.nome.text = stru.name
-                }
-                is ChamadaHeader -> {
-                    holder.nome.text = stru.name
-                }
-                is miniSeparator -> {
-                    holder.nome.text = stru.name
-                }
-                is EbdItem -> {
-                    holder.nome.text = stru.name
-                    holder.subtitle?.text = stru.subtitle
-                }
-                is NucleosItem -> {
-                    holder.nome.text = stru.name
-                    holder.subtitle?.text = holder.subtitle?.resources?.getString(
-                        R.string.hour_formatted,
-                        stru.prio / 100,
-                        String.format("%02d", stru.prio % 100)
-                    )
-                }
-                is NucleosHeader -> {
-                    holder.nome.text = stru.name
-                }
-                is NucleosMore -> {
-                    holder.nome.text = stru.name
-                    holder.imgpos?.setImageDrawable(
-                        IconicsDrawable(
-                            holder.imgpos.context,
-                            GoogleMaterial.Icon.gmd_arrow_forward
-                        )
-                            .color(ContextCompat.getColor(holder.imgpos.context, R.color.FontWeak))
-                    )
-                }
-                is FastDescription -> {
-                    holder.nome.text = stru.name
-                }
-                is ButtonBiblaLibras -> {
-                    holder.nome.text = stru.name
-
-                    holder.imgpos?.setImageDrawable(getDrawableee(stru.id, holder.imgpos.context))
-                }
-            }
-        } else if (holder is ButtonHolder && stru is FlatButton) {
-            holder.btn?.text = stru.name
-            holder.btn?.stateListAnimator = null
-
-            if (stru.name == "Administradores") {
-                holder.btn?.setTextColor(0xff000000.toInt())
-            } else if (stru.name == "Cronograma") {
-                holder.btn?.setTextColor(0xff000000.toInt())
-            }
-        }
-
-        if (holder is LiturgiaViewHolder && stru is LiturgiaItem) {
-            holder.title.text = stru.name
-            holder.subtitle.text = stru.subtitle
-
-            val iconic = IconicsDrawable(holder.titleimg.context)
-            iconic.icon(CommunityMaterial.Icon.cmd_bible)
-
-            val test = arrayOf(
-                "Hino",
-                "CÃ¢ntico",
-                "OraÃ§Ã£o",
-                "Leitura",
-                "Palavra",
-                "Outro"
-            )
-
-            val icons = arrayOf(
-                CommunityMaterial.Icon.cmd_piano,
-                CommunityMaterial.Icon.cmd_music_note,
-                CommunityMaterial.Icon.cmd_cloud,
-                CommunityMaterial.Icon.cmd_bible,
-                CommunityMaterial.Icon.cmd_account,
-                CommunityMaterial.Icon.cmd_dots_horizontal
-            )
-
-            val index = test.indexOfFirst { stru.kind == it }
-            if (index > -1) {
-                iconic.icon(icons[index])
-            }
-            iconic.color(ContextCompat.getColor(holder.titleimg.context, R.color.FontStrong))
-            holder.titleimg.setImageDrawable(iconic)
-
-            if (!stru.isVisible) {
-                holder.up.visibility = View.GONE
-                holder.down.visibility = View.GONE
-            } else {
-                holder.up.visibility = View.VISIBLE
-                holder.down.visibility = View.VISIBLE
-            }
-
-            holder.up.setImageDrawable(
-                IconicsDrawable(holder.up.context).icon(CommunityMaterial.Icon.cmd_arrow_up).color(
-                    ContextCompat.getColor(holder.up.context, R.color.FontStrong)
-                )
-            )
-
-            holder.down.setImageDrawable(
-                IconicsDrawable(holder.down.context).icon(CommunityMaterial.Icon.cmd_arrow_down).color(
-                    ContextCompat.getColor(holder.down.context, R.color.FontStrong)
-                )
-            )
-        }
-
-        if (holder is PrimitiveAbstractItem.ViewHolder1 && stru is ChamadaItem) {
-            holder.nome.text = stru.name
-
-            if (stru.name != "") {
-                holder.colorfulimageview.setImageDrawable(
-                    TextDrawable.builder().round().build(
-                        stru.name[0].toString(),
-                        ContextCompat.getColor(holder.star.context, R.color.bolinhaNomeCurto)
-                    )
-                )
-            }
-
-            if (stru.status == STATUS.AUSENTE) {
-                holder.star.setImageDrawable(
-                    IconicsDrawable(holder.star.context).icon(
-                        GoogleMaterial.Icon.gmd_close
-                    ).color(0xfff44336.toInt())
-                )
-            } else {
-                holder.star.setImageDrawable(
-                    IconicsDrawable(holder.star.context).icon(
-                        GoogleMaterial.Icon.gmd_done
-                    ).color(0xff4CAF50.toInt())
-                )
-            }
-
-            holder.info.setImageDrawable(
-                IconicsDrawable(holder.info.context).icon(GoogleMaterial.Icon.gmd_info_outline).color(
-                    ContextCompat.getColor(holder.info.context, R.color.md_grey_600)
-                )
-            )
-
-            val stateListDrawable = FAUIUtils.getSelectableBackground(
-                holder.star.context,
-                ContextCompat.getColor(holder.star.context, R.color.highlight),
-                true
-            )
-            holder.view.background = stateListDrawable
-        } else if (holder is PrimitiveAbstractItem.ViewHolder3) {
-            var isAdmin = false
-
-            when (stru) {
-                is EBDItemmm -> {
-                    isAdmin = stru.isAdmin
-                    holder.nome.text = stru.name
-                    holder.subtitle.text = holder.subtitle.resources?.getString(
-                        R.string.ebdclass,
-                        stru.room,
-                        stru.teacher
-                    )
-                }
-                is moreBasicItem2 -> {
-                    isAdmin = stru.isAdmin
-                    holder.nome.text = stru.name
-//                holder.subtitle.text = holder.subtitle.resources?.getString(
-//                    R.string.day_and_hour_formatted,
-//                    ActivityNucleos.dayoftheweek(stru.timestamp.toInt()),
-//                    stru.hour / 100,
-//                    String.format("%02d", stru.hour % 100)
-//                )
-                }
-            }
-
-
-            if (isAdmin) {
-                holder.star.visibility = View.VISIBLE
-                holder.separator.visibility = View.VISIBLE
-
-                if (stru.status == STATUS.STARRED) {
-                    holder.star.setImageDrawable(
-                        IconicsDrawable(
-                            holder.star.context,
-                            GoogleMaterial.Icon.gmd_star
-                        ).color(0xffffc107.toInt())
-                    )
-                } else {
-                    holder.star.setImageDrawable(
-                        IconicsDrawable(
-                            holder.star.context,
-                            GoogleMaterial.Icon.gmd_star_border
-                        ).color(0xffffc107.toInt())
-                    )
-                }
-
-                holder.info.setImageDrawable(
-                    IconicsDrawable(holder.info.context).icon(GoogleMaterial.Icon.gmd_info_outline).color(
-                        ContextCompat.getColor(holder.info.context, R.color.md_grey_600)
-                    )
-                )
-            } else {
-                holder.star.visibility = View.GONE
-                holder.separator.visibility = View.GONE
-            }
-        }
-
-        if (holder is PrimitiveAbstractItem.ViewHolder2) {
-            holder.recycler?.adapter = fastAdapter
-            val gridLayoutManager =
-                LinearLayoutManager(holder.recycler?.context, LinearLayoutManager.VERTICAL, false)
-            holder.recycler?.layoutManager = gridLayoutManager
-            holder.recycler?.isNestedScrollingEnabled = false
-        }
-    }
-
-    fun getDrawableee(str: String, context: Context): IconicsDrawable {
-        return when (stru.id) {
-            "exit" -> {
-                IconicsDrawable(context, CommunityMaterial.Icon.cmd_set_none)
-                    .color(ContextCompat.getColor(context, R.color.white))
-            }
-            "crono" -> {
-                IconicsDrawable(context, GoogleMaterial.Icon.gmd_chrome_reader_mode)
-                    .color(ContextCompat.getColor(context, R.color.FontWeak))
-            }
-            "admin" -> {
-                IconicsDrawable(context, GoogleMaterial.Icon.gmd_supervisor_account)
-                    .color(ContextCompat.getColor(context, R.color.FontWeak))
-            }
-            else -> {
-                IconicsDrawable(context, GoogleMaterial.Icon.gmd_chrome_reader_mode)
-                    .color(ContextCompat.getColor(context, R.color.FontWeak))
-            }
-        }
-    }
-
-    // Manually create the ViewHolder class
-    class ViewHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val nome: TextView = v.findViewById(R.id.title)
-        internal val subtitle: TextView? = v.findViewById(R.id.subtitle)
-        internal val txtpos: TextView? = v.findViewById(R.id.textView3)
-        internal val imgpos: ImageView? = v.findViewById(R.id.imageView)
-    }
-
-    internal class ViewHolder1 constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val nome: TextView = v.findViewById(R.id.subtitle)
-        internal val colorfulimageview: ImageView = v.findViewById(R.id.colorfulimageview)
-        internal val star: ImageView = v.findViewById(R.id.star)
-        internal val info: ImageView = v.findViewById(R.id.info)
-        internal var view: View = v
-    }
-
-    internal class ViewHolder3 constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val nome: TextView = v.findViewById(R.id.title)
-        internal val subtitle: TextView = v.findViewById(R.id.subtitle)
-//        internal val colorfulimageview: ImageView = v.findViewById(R.id.colorfulimageview)
-
-        internal val separator: View = v.findViewById(R.id.separator)
-        internal val star: ImageView = v.findViewById(R.id.info)
-        internal val info: ImageView = v.findViewById(R.id.star)
-    }
-
-    internal class ViewHolder2 constructor(v: View) : RecyclerView.ViewHolder(v) {
-        val recycler: RecyclerView? = v.findViewById(R.id.defaultRecycler)
-    }
-
-    internal class ButtonHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val title: TextView? = v.findViewById(R.id.title)
-        internal val subtitle: TextView? = v.findViewById(R.id.subtitle)
-        val btn: AppCompatButton? = v.findViewById(R.id.menubutton)
-    }
-
-    internal class pesquisarHospedeiroViewHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val title: TextView = v.findViewById(R.id.title)
-        internal val subtitle: TextView = v.findViewById(R.id.subtitle)
-    }
-
-    internal class pesquisarPreletorViewHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val title: TextView = v.findViewById(R.id.title)
-    }
-
-    internal class LiturgiaViewHolder constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val title: TextView = v.findViewById(R.id.title)
-        internal val subtitle: TextView = v.findViewById(R.id.subtitle)
-        internal val titleimg: ImageView = v.findViewById(R.id.titleimg)
-        internal val up: ImageView = v.findViewById(R.id.up)
-        internal val down: ImageView = v.findViewById(R.id.down)
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/String Extensions.kt b/app/src/main/java/com/example/changedetection/String Extensions.kt
deleted file mode 100644
index cf60274..0000000
--- a/app/src/main/java/com/example/changedetection/String Extensions.kt	
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.example.changedetection
-
-fun String.cleanUpHtml(): String{
-    return this.replaceScriptTag().replaceLinkTag().replaceStyleTag()
-}
-
-// Avoid some pages from changing the script on every reload (like Google Analytics)
-// From https://stackoverflow.com/a/6660315/4418073
-fun String.replaceScriptTag(): String{
-    return this.replace("<script\\b[^<]*(?:(?!</script>)<[^<]*)*</script>".toRegex(), "")
-}
-
-// Avoid some pages from changing the link on every reload
-// From https://stackoverflow.com/a/7542023/4418073
-fun String.replaceLinkTag(): String{
-    return this.replace("</?link(?:(?= )[^>]*)?>".toRegex(), "")
-}
-
-// Avoid some pages from changing the style on every reload
-// From https://stackoverflow.com/a/29888314/4418073
-fun String.replaceStyleTag(): String{
-    return this.replace("<style([\\s\\S]+?)</style>".toRegex(), "");
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/SyncWorker.kt b/app/src/main/java/com/example/changedetection/SyncWorker.kt
deleted file mode 100644
index 3497283..0000000
--- a/app/src/main/java/com/example/changedetection/SyncWorker.kt
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.example.changedetection
-
-import androidx.work.Worker
-import com.orhanobut.logger.Logger
-import android.databinding.adapters.TimePickerBindingAdapter.getHour
-import org.threeten.bp.LocalTime
-
-
-class SyncWorker : Worker() {
-
-    override fun doWork(): Worker.WorkerResult {
-
-        // Do the work here--in this case, compress the stored images.
-        // In this example no parameters are passed; the site is
-        // assumed to be "compress the whole library."
-        val now = LocalTime.now()
-
-        Logger.d("Doing background work! " + now.hour + ":" + now.minute)
-
-        // Indicate success or failure with your return value:
-        return WorkerResult.SUCCESS
-
-        // (Returning RETRY tells WorkManager to try this site again
-        // later; FAILURE says not to try again.)
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/ViewModelFactory.kt b/app/src/main/java/com/example/changedetection/ViewModelFactory.kt
deleted file mode 100755
index c5c57a5..0000000
--- a/app/src/main/java/com/example/changedetection/ViewModelFactory.kt
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- *  Copyright 2017 Google Inc.
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.example.changedetection
-
-import android.annotation.SuppressLint
-import android.app.Application
-import android.arch.lifecycle.ViewModel
-import android.arch.lifecycle.ViewModelProvider
-import android.support.annotation.VisibleForTesting
-import com.example.changedetection.data.source.DiffsRepository
-import com.example.changedetection.data.source.TasksRepository
-
-//import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskViewModel;
-//import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepository;
-//import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsViewModel;
-//import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailViewModel;
-//import com.example.android.architecture.blueprints.todoapp.sites.TasksViewModel;
-
-/**
- * A creator is used to inject the product ID into the ViewModel
- *
- *
- * This creator is to showcase how to inject dependencies into ViewModels. It's not
- * actually necessary in this case, as the product ID can be passed in a public method.
- */
-class ViewModelFactory private constructor(
-    private val mApplication: Application,
-    private val mDiffsRepository: DiffsRepository,
-    private val mTasksRepository: TasksRepository
-) : ViewModelProvider.NewInstanceFactory() {
-
-    override fun <T : ViewModel> create(modelClass: Class<T>): T {
-        if (modelClass.isAssignableFrom(TasksViewModel::class.java)) {
-            return TasksViewModel(mApplication, mDiffsRepository, mTasksRepository) as T
-        }
-        //        } else if (modelClass.isAssignableFrom(TaskDetailViewModel.class)) {
-        //            //noinspection unchecked
-        //            return (T) new TaskDetailViewModel(mApplication, mTasksRepository);
-        //        } else if (modelClass.isAssignableFrom(AddEditTaskViewModel.class)) {
-        //            //noinspection unchecked
-        //            return (T) new AddEditTaskViewModel(mApplication, mTasksRepository);
-        //        } else if (modelClass.isAssignableFrom(TasksViewModel.class)) {
-        //            //noinspection unchecked
-        //            return (T) new TasksViewModel(mApplication, mTasksRepository);
-        //        }
-        throw IllegalArgumentException("Unknown ViewModel class: " + modelClass.name)
-    }
-
-    companion object {
-        @SuppressLint("StaticFieldLeak")
-        @Volatile
-        private var INSTANCE: ViewModelFactory? = null
-
-        fun getInstance(application: Application): ViewModelFactory {
-            if (INSTANCE == null) {
-                synchronized(ViewModelFactory::class.java) {
-                    if (INSTANCE == null) {
-                        INSTANCE = ViewModelFactory(
-                            application,
-                            Injection.provideDiffsRepository(application.applicationContext),
-                            Injection.provideTasksRepository(application.applicationContext)
-                        )
-                    }
-                }
-            }
-            return INSTANCE!!
-        }
-
-        @VisibleForTesting
-        fun destroyInstance() {
-            INSTANCE = null
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/ViewModelHolder.java b/app/src/main/java/com/example/changedetection/ViewModelHolder.java
deleted file mode 100755
index 1b580da..0000000
--- a/app/src/main/java/com/example/changedetection/ViewModelHolder.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright 2017, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection;
-
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
-
-
-/**
- * Non-UI Fragment used to retain ViewModels.
- */
-public class ViewModelHolder<VM> extends Fragment {
-
-    private VM mViewModel;
-
-    public ViewModelHolder() {
-    }
-
-    public static <M> ViewModelHolder createContainer(@NonNull M viewModel) {
-        ViewModelHolder<M> viewModelContainer = new ViewModelHolder<>();
-        viewModelContainer.setViewModel(viewModel);
-        return viewModelContainer;
-    }
-
-    @Override
-    public void onCreate(@Nullable Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setRetainInstance(true);
-    }
-
-    @Nullable
-    public VM getViewmodel() {
-        return mViewModel;
-    }
-
-    public void setViewModel(@NonNull VM viewModel) {
-        mViewModel = viewModel;
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/data/Diff.kt b/app/src/main/java/com/example/changedetection/data/Diff.kt
deleted file mode 100644
index 13d68d3..0000000
--- a/app/src/main/java/com/example/changedetection/data/Diff.kt
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.example.changedetection.data
-
-import android.arch.persistence.room.Entity
-import android.arch.persistence.room.ForeignKey
-import android.arch.persistence.room.ForeignKey.CASCADE
-import android.arch.persistence.room.Ignore
-import android.arch.persistence.room.PrimaryKey
-import java.util.*
-
-@Entity(
-    tableName = "diffs",
-    foreignKeys = [(
-            ForeignKey(
-                entity = Site::class,
-                parentColumns = arrayOf("siteId"),
-                childColumns = arrayOf("siteId")
-            )
-            )
-    ]
-)
-data class Diff(
-    @PrimaryKey
-    val fileId: String,
-    val value: String,
-    val timestamp: Long,
-    val siteId: String
-) {
-    /**
-     * Use this constructor to create a new active Site.
-     *
-     * @param title       title of the site
-     * @param url url of the site
-     */
-    @Ignore
-    constructor(value: String, timestamp: Long, siteId: String) : this(
-        UUID.randomUUID().toString(),
-        value,
-        timestamp,
-        siteId
-    )
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/data/source/DiffsDataSource.kt b/app/src/main/java/com/example/changedetection/data/source/DiffsDataSource.kt
deleted file mode 100755
index 105c740..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/DiffsDataSource.kt
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source
-
-import com.example.changedetection.data.Diff
-
-/**
- * Main entry point for accessing sites data.
- */
-interface DiffsDataSource {
-
-    interface LoadDiffsCallback {
-
-        fun onDiffsLoaded(diffs: List<Diff>)
-
-        fun onDataNotAvailable()
-    }
-
-    interface GetDiffCallback {
-
-        fun onDiffLoaded(diff: Diff)
-
-        fun onDataNotAvailable()
-    }
-
-    fun getDiffs(taskId: String, callback: LoadDiffsCallback)
-
-    fun getDiff(diffId: String, callback: GetDiffCallback)
-
-    fun saveDiff(diff: Diff, callback: GetDiffCallback)
-
-    fun refreshDiffs()
-
-    fun deleteAllDiffsForSite()
-
-    fun deleteAllDiffsForSite(siteId: String)
-
-    fun deleteDiff(diffId: String)
-}
diff --git a/app/src/main/java/com/example/changedetection/data/source/DiffsRepository.kt b/app/src/main/java/com/example/changedetection/data/source/DiffsRepository.kt
deleted file mode 100755
index 73f1859..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/DiffsRepository.kt
+++ /dev/null
@@ -1,204 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source
-
-import com.example.changedetection.data.Diff
-import java.util.*
-
-/**
- * Concrete implementation to load sites from the data sources into a cache.
- *
- *
- * For simplicity, this implements a dumb synchronisation between locally persisted data and data
- * obtained from the server, by using the remote data source only if the local database doesn't
- * exist or is empty.
- *
- * //TODO: Implement this class using LiveData.
- */
-class DiffsRepository // Prevent direct instantiation.
-private constructor(
-    tasksLocalDataSource: DiffsDataSource
-) : DiffsDataSource {
-
-    override fun deleteAllDiffsForSite(siteId: String) {
-        mTasksLocalDataSource.deleteAllDiffsForSite(siteId)
-    }
-
-    override fun getDiffs(taskId: String, callback: DiffsDataSource.LoadDiffsCallback) {
-        checkNotNull(callback)
-
-//        // Respond immediately with cache if available and not dirty
-//        if (mCachedTasks != null && !mCacheIsDirty) {
-//            callback.onDiffsLoaded(ArrayList(mCachedTasks!!.values))
-//            return
-//        }
-
-        // Query the local storage if available. If not, query the network.
-        mTasksLocalDataSource.getDiffs(taskId, object : DiffsDataSource.LoadDiffsCallback {
-            override fun onDiffsLoaded(diffs: List<Diff>) {
-//                refreshCache(diffs)
-                callback.onDiffsLoaded(diffs)
-            }
-
-            override fun onDataNotAvailable() {
-                callback.onDataNotAvailable()
-            }
-        })
-    }
-
-    override fun getDiff(diffId: String, callback: DiffsDataSource.GetDiffCallback) {
-        checkNotNull(diffId)
-        checkNotNull(callback)
-
-        val cachedTask = getDiffWithId(diffId)
-//
-//        // Respond immediately with cache if available
-//        if (cachedTask != null) {
-//            callback.onDiffLoaded(cachedTask)
-//            return
-//        }
-
-        // Is the site in the local data source? If not, query the network.
-        mTasksLocalDataSource.getDiff(diffId, object : DiffsDataSource.GetDiffCallback {
-
-            override fun onDiffLoaded(diff: Diff) {
-                // Do in memory cache update to keep the app UI up to date
-                if (mCachedTasks == null) {
-                    mCachedTasks = LinkedHashMap()
-                }
-                mCachedTasks!![diff.fileId] = diff
-
-                callback.onDiffLoaded(diff)
-            }
-
-            override fun onDataNotAvailable() {
-                callback.onDataNotAvailable()
-            }
-        })
-    }
-
-    override fun refreshDiffs() {
-        mCacheIsDirty = true
-    }
-
-    override fun deleteAllDiffsForSite() {
-        mTasksLocalDataSource.deleteAllDiffsForSite()
-
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!!.clear()
-    }
-
-    override fun deleteDiff(diffId: String) {
-        mTasksLocalDataSource.deleteDiff(checkNotNull(diffId))
-        mCachedTasks!!.remove(diffId)
-    }
-
-    private val mTasksLocalDataSource: DiffsDataSource = checkNotNull(tasksLocalDataSource)
-
-    /**
-     * This variable has package local visibility so it can be accessed from tests.
-     */
-    internal var mCachedTasks: MutableMap<String, Diff>? = null
-
-    /**
-     * Marks the cache as invalid, to force an update the next time data is requested. This variable
-     * has package local visibility so it can be accessed from tests.
-     */
-    private var mCacheIsDirty = false
-
-    override fun saveDiff(diff: Diff, callback: DiffsDataSource.GetDiffCallback) {
-        checkNotNull(diff)
-        mTasksLocalDataSource.saveDiff(diff, object : DiffsDataSource.GetDiffCallback {
-            override fun onDiffLoaded(diff: Diff) {
-                callback.onDiffLoaded(diff)
-            }
-
-            override fun onDataNotAvailable() {
-                callback.onDataNotAvailable()
-            }
-        })
-
-        // Do in memory cache update to keep the app UI up to date
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!![diff.fileId] = diff
-    }
-
-    private fun refreshCache(diffs: List<Diff>) {
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!!.clear()
-        for (diff in diffs) {
-            mCachedTasks!![diff.fileId] = diff
-        }
-        mCacheIsDirty = false
-    }
-
-//    private fun refreshLocalDataSource(diffs: List<Diff>) {
-//        mTasksLocalDataSource.deleteAllDiffsForSite()
-//        for (diff in diffs) {
-//            mTasksLocalDataSource.saveDiff(diff)
-//        }
-//    }
-
-    private fun getDiffWithId(id: String): Diff? {
-        checkNotNull(id)
-        return if (mCachedTasks == null || mCachedTasks!!.isEmpty()) {
-            null
-        } else {
-            mCachedTasks!![id]
-        }
-    }
-
-    companion object {
-
-        @Volatile
-        private var INSTANCE: DiffsRepository? = null
-
-        /**
-         * Returns the single instance of this class, creating it if necessary.
-         *
-         * @param tasksRemoteDataSource the backend data source
-         * @param tasksLocalDataSource  the device storage data source
-         * @return the [DiffsRepository] instance
-         */
-        fun getInstance(
-            diffsLocalDataSource: DiffsDataSource
-        ): DiffsRepository {
-            if (INSTANCE == null) {
-                synchronized(DiffsRepository::class.java) {
-                    if (INSTANCE == null) {
-                        INSTANCE = DiffsRepository(diffsLocalDataSource)
-                    }
-                }
-            }
-            return INSTANCE!!
-        }
-
-        /**
-         * Used to force [.getInstance] to create a new instance
-         * next time it's called.
-         */
-        fun destroyInstance() {
-            INSTANCE = null
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/data/source/TasksRepository.kt b/app/src/main/java/com/example/changedetection/data/source/TasksRepository.kt
deleted file mode 100755
index d8cacc0..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/TasksRepository.kt
+++ /dev/null
@@ -1,330 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source
-
-import com.example.changedetection.data.Site
-import com.example.changedetection.data.source.local.SiteAndLastDiff
-import java.util.*
-
-/**
- * Concrete implementation to load sites from the data sources into a cache.
- *
- *
- * For simplicity, this implements a dumb synchronisation between locally persisted data and data
- * obtained from the server, by using the remote data source only if the local database doesn't
- * exist or is empty.
- *
- * //TODO: Implement this class using LiveData.
- */
-class TasksRepository // Prevent direct instantiation.
-private constructor(
-    tasksRemoteDataSource: TasksDataSource,
-    tasksLocalDataSource: TasksDataSource
-) : TasksDataSource {
-
-    private val mTasksRemoteDataSource: TasksDataSource = checkNotNull(tasksRemoteDataSource)
-    private val mTasksLocalDataSource: TasksDataSource = checkNotNull(tasksLocalDataSource)
-
-    /**
-     * This variable has package local visibility so it can be accessed from tests.
-     */
-    internal var mCachedTasks: MutableMap<String, Site>? = null
-
-    /**
-     * Marks the cache as invalid, to force an update the next time data is requested. This variable
-     * has package local visibility so it can be accessed from tests.
-     */
-    private var mCacheIsDirty = false
-
-    override fun getTaskAndDiffs(callback: (MutableList<SiteAndLastDiff>) -> Unit) {
-        mTasksLocalDataSource.getTaskAndDiffs {
-            callback.invoke(it)
-        }
-    }
-
-    /**
-     * Gets sites from cache, local data source (SQLite) or remote data source, whichever is
-     * available first.
-     *
-     *
-     * Note: [LoadTasksCallback.onDataNotAvailable] is fired if all data sources fail to
-     * get the data.
-     */
-    override fun getTasks(callback: TasksDataSource.LoadTasksCallback) {
-        checkNotNull(callback)
-
-        // Respond immediately with cache if available and not dirty
-        if (mCachedTasks != null && !mCacheIsDirty) {
-            callback.onTasksLoaded(ArrayList(mCachedTasks!!.values))
-            return
-        }
-
-//        EspressoIdlingResource.increment() // App is busy until further notice
-
-        if (mCacheIsDirty) {
-            // If the cache is dirty we need to fetch new data from the network.
-            getTasksFromRemoteDataSource(callback)
-        } else {
-            // Query the local storage if available. If not, query the network.
-            mTasksLocalDataSource.getTasks(object : TasksDataSource.LoadTasksCallback {
-                override fun onTasksLoaded(sites: List<Site>) {
-                    refreshCache(sites)
-
-//                    EspressoIdlingResource.decrement() // Set app as idle.
-                    callback.onTasksLoaded(ArrayList(mCachedTasks!!.values))
-                }
-
-                override fun onDataNotAvailable() {
-                    getTasksFromRemoteDataSource(callback)
-                }
-            })
-        }
-    }
-
-    override fun saveTask(site: Site) {
-        checkNotNull(site)
-        mTasksRemoteDataSource.saveTask(site)
-        mTasksLocalDataSource.saveTask(site)
-
-        // Do in memory cache update to keep the app UI up to date
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!![site.id] = site
-    }
-
-    override fun completeTask(site: Site) {
-        checkNotNull(site)
-        mTasksRemoteDataSource.completeTask(site)
-        mTasksLocalDataSource.completeTask(site)
-
-        val completedTask = Site(site.title, site.url, site.timestamp, site.id, true, true)
-
-        // Do in memory cache update to keep the app UI up to date
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!![site.id] = completedTask
-    }
-
-    override fun completeTask(taskId: String) {
-        checkNotNull(taskId)
-        completeTask(getTaskWithId(taskId)!!)
-    }
-
-    override fun activateTask(site: Site) {
-        checkNotNull(site)
-        mTasksRemoteDataSource.activateTask(site)
-        mTasksLocalDataSource.activateTask(site)
-
-        val activeTask = Site(site.title, site.url, site.timestamp, site.id)
-
-        // Do in memory cache update to keep the app UI up to date
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!![site.id] = activeTask
-    }
-
-    override fun activateTask(taskId: String) {
-        checkNotNull(taskId)
-        activateTask(getTaskWithId(taskId)!!)
-    }
-
-    override fun clearCompletedTasks() {
-        mTasksRemoteDataSource.clearCompletedTasks()
-        mTasksLocalDataSource.clearCompletedTasks()
-
-        // Do in memory cache update to keep the app UI up to date
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        val it = mCachedTasks!!.entries.iterator()
-        while (it.hasNext()) {
-            val entry = it.next()
-            if (entry.value.successful) {
-                it.remove()
-            }
-        }
-    }
-
-    /**
-     * Gets sites from local data source (sqlite) unless the table is new or empty. In that case it
-     * uses the network data source. This is done to simplify the sample.
-     *
-     *
-     * Note: [GetTaskCallback.onDataNotAvailable] is fired if both data sources fail to
-     * get the data.
-     */
-    override fun getTask(taskId: String, callback: TasksDataSource.GetTaskCallback) {
-        checkNotNull(taskId)
-        checkNotNull(callback)
-
-        val cachedTask = getTaskWithId(taskId)
-
-        // Respond immediately with cache if available
-        if (cachedTask != null) {
-            callback.onTaskLoaded(cachedTask)
-            return
-        }
-
-//        EspressoIdlingResource.increment() // App is busy until further notice
-
-        // Load from server/persisted if needed.
-
-        // Is the site in the local data source? If not, query the network.
-        mTasksLocalDataSource.getTask(taskId, object : TasksDataSource.GetTaskCallback {
-            override fun onTaskLoaded(site: Site) {
-                // Do in memory cache update to keep the app UI up to date
-                if (mCachedTasks == null) {
-                    mCachedTasks = LinkedHashMap()
-                }
-                mCachedTasks!![site.id] = site
-
-//                EspressoIdlingResource.decrement() // Set app as idle.
-
-                callback.onTaskLoaded(site)
-            }
-
-            override fun onDataNotAvailable() {
-                mTasksRemoteDataSource.getTask(taskId, object : TasksDataSource.GetTaskCallback {
-                    override fun onTaskLoaded(site: Site) {
-                        if (site == null) {
-                            onDataNotAvailable()
-                            return
-                        }
-                        // Do in memory cache update to keep the app UI up to date
-                        if (mCachedTasks == null) {
-                            mCachedTasks = LinkedHashMap()
-                        }
-                        mCachedTasks!![site.id] = site
-//                        EspressoIdlingResource.decrement() // Set app as idle.
-
-                        callback.onTaskLoaded(site)
-                    }
-
-                    override fun onDataNotAvailable() {
-//                        EspressoIdlingResource.decrement() // Set app as idle.
-
-                        callback.onDataNotAvailable()
-                    }
-                })
-            }
-        })
-    }
-
-    override fun refreshTasks() {
-        mCacheIsDirty = true
-    }
-
-    override fun deleteAllTasks() {
-        mTasksRemoteDataSource.deleteAllTasks()
-        mTasksLocalDataSource.deleteAllTasks()
-
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!!.clear()
-    }
-
-    override fun deleteSite(taskId: String) {
-        mTasksRemoteDataSource.deleteSite(checkNotNull(taskId))
-        mTasksLocalDataSource.deleteSite(checkNotNull(taskId))
-
-        mCachedTasks!!.remove(taskId)
-    }
-
-    private fun getTasksFromRemoteDataSource(callback: TasksDataSource.LoadTasksCallback) {
-        mTasksRemoteDataSource.getTasks(object : TasksDataSource.LoadTasksCallback {
-            override fun onTasksLoaded(sites: List<Site>) {
-                refreshCache(sites)
-                refreshLocalDataSource(sites)
-
-//                EspressoIdlingResource.decrement() // Set app as idle.
-                callback.onTasksLoaded(ArrayList(mCachedTasks!!.values))
-            }
-
-            override fun onDataNotAvailable() {
-
-//                EspressoIdlingResource.decrement() // Set app as idle.
-                callback.onDataNotAvailable()
-            }
-        })
-    }
-
-    private fun refreshCache(sites: List<Site>) {
-        if (mCachedTasks == null) {
-            mCachedTasks = LinkedHashMap()
-        }
-        mCachedTasks!!.clear()
-        for (task in sites) {
-            mCachedTasks!![task.id] = task
-        }
-        mCacheIsDirty = false
-    }
-
-    private fun refreshLocalDataSource(sites: List<Site>) {
-        mTasksLocalDataSource.deleteAllTasks()
-        for (task in sites) {
-            mTasksLocalDataSource.saveTask(task)
-        }
-    }
-
-    private fun getTaskWithId(id: String): Site? {
-        checkNotNull(id)
-        return if (mCachedTasks == null || mCachedTasks!!.isEmpty()) {
-            null
-        } else {
-            mCachedTasks!![id]
-        }
-    }
-
-    companion object {
-
-        @Volatile
-        private var INSTANCE: TasksRepository? = null
-
-        /**
-         * Returns the single instance of this class, creating it if necessary.
-         *
-         * @param tasksRemoteDataSource the backend data source
-         * @param tasksLocalDataSource  the device storage data source
-         * @return the [TasksRepository] instance
-         */
-        fun getInstance(
-            tasksRemoteDataSource: TasksDataSource,
-            tasksLocalDataSource: TasksDataSource
-        ): TasksRepository {
-            if (INSTANCE == null) {
-                synchronized(TasksRepository::class.java) {
-                    if (INSTANCE == null) {
-                        INSTANCE = TasksRepository(tasksRemoteDataSource, tasksLocalDataSource)
-                    }
-                }
-            }
-            return INSTANCE!!
-        }
-
-        /**
-         * Used to force [.getInstance] to create a new instance
-         * next time it's called.
-         */
-        fun destroyInstance() {
-            INSTANCE = null
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/data/source/local/DiffsDao.kt b/app/src/main/java/com/example/changedetection/data/source/local/DiffsDao.kt
deleted file mode 100755
index 777c53a..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/local/DiffsDao.kt
+++ /dev/null
@@ -1,123 +0,0 @@
-/*
- * Copyright 2017, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source.local
-
-import android.arch.persistence.room.*
-import com.example.changedetection.data.Diff
-
-/**
- * Data Access Object for the sites table.
- */
-@Dao
-interface DiffsDao {
-
-    @Transaction
-    @Query("SELECT * FROM sites WHERE siteId = :id LIMIT 1")
-    fun getDiffsForUser(id: String): UserAndAllPets?
-
-    @Query("SELECT count(1) FROM diffs WHERE siteId = :id")
-    fun getDiffsCountForUser(id: String): Int
-
-    /**
-     * Select a site by id.
-     *
-     * @param taskId the site id.
-     * @return the site with taskId.
-     */
-    @Query("SELECT * FROM diffs WHERE siteId = :id ORDER BY timestamp DESC LIMIT 1")
-    fun getDiffBySiteId(id: String): Diff?
-
-    @Query("SELECT * FROM diffs")
-    fun getAllDiffs(): List<Diff>
-
-    @Query("DELETE FROM diffs WHERE siteId = :id")
-    fun deleteAllDiffsForSite(id: String)
-
-    /**
-     * Insert a diff in the database. If the diff already exists, replace it.
-     *
-     * @param site the site to be inserted.
-     */
-    @Insert(onConflict = OnConflictStrategy.FAIL)
-    fun insertDiff(diff: Diff)
-
-    /**
-     * Delete all diffs.
-     */
-    @Query("DELETE FROM diffs")
-    fun deleteTasks()
-
-//    /**
-//     * Select all sites from the sites table.
-//     *
-//     * @return all sites.
-//     */
-//    @get:Query("SELECT * FROM Tasks")
-//    val sites: List<Site>
-//
-//    /**
-//     * Select a site by id.
-//     *
-//     * @param taskId the site id.
-//     * @return the site with taskId.
-//     */
-//    @Query("SELECT * FROM Tasks WHERE entryid = :taskId")
-//    fun getTaskById(taskId: String): Site?
-//
-//    /**
-//     * Insert a site in the database. If the site already exists, replace it.
-//     *
-//     * @param site the site to be inserted.
-//     */
-//    @Insert(onConflict = OnConflictStrategy.REPLACE)
-//    fun insertTask(site: Site)
-//
-//    /**
-//     * Update a site.
-//     *
-//     * @param site site to be updated
-//     * @return the number of sites updated. This should always be 1.
-//     */
-//    @Update
-//    fun updateTask(site: Site): Int
-//
-//    /**
-//     * Update the complete status of a site
-//     *
-//     * @param taskId    id of the site
-//     * @param completed status to be updated
-//     */
-//    @Query("UPDATE sites SET completed = :completed WHERE entryid = :taskId")
-//    fun updateCompleted(taskId: String, completed: Boolean)
-//
-//    /**
-//     * Delete a site by id.
-//     *
-//     * @return the number of sites deleted. This should always be 1.
-//     */
-//    @Query("DELETE FROM Tasks WHERE entryid = :taskId")
-//    fun deleteTaskById(taskId: String): Int
-//
-//
-//    /**
-//     * Delete all completed sites from the table.
-//     *
-//     * @return the number of sites deleted.
-//     */
-//    @Query("DELETE FROM Tasks WHERE completed = 1")
-//    fun deleteCompletedTasks(): Int
-}
diff --git a/app/src/main/java/com/example/changedetection/data/source/local/DiffsLocalDataSource.kt b/app/src/main/java/com/example/changedetection/data/source/local/DiffsLocalDataSource.kt
deleted file mode 100755
index feb0c98..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/local/DiffsLocalDataSource.kt
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source.local
-
-import android.support.annotation.VisibleForTesting
-import com.example.changedetection.cleanUpHtml
-import com.example.changedetection.data.Diff
-
-import com.example.changedetection.data.source.DiffsDataSource
-import com.example.changedetection.util.AppExecutors
-import com.orhanobut.logger.Logger
-
-
-/**
- * Concrete implementation of a data source as a db.
- */
-class DiffsLocalDataSource// Prevent direct instantiation.
-private constructor(
-    private val mAppExecutors: AppExecutors,
-    private val mDiffsDao: DiffsDao
-) : DiffsDataSource {
-
-    override fun deleteAllDiffsForSite(siteId: String) {
-        val runnable = Runnable {
-            mDiffsDao.deleteAllDiffsForSite(siteId)
-        }
-
-        mAppExecutors.diskIO().execute(runnable)
-    }
-
-    /**
-     * Note: [LoadTasksCallback.onDataNotAvailable] is fired if the database doesn't exist
-     * or the table is empty.
-     */
-    override fun getDiffs(taskId: String, callback: DiffsDataSource.LoadDiffsCallback) {
-        val runnable = Runnable {
-            val diffs = mDiffsDao.getDiffsForUser(taskId)
-            mAppExecutors.mainThread().execute {
-                if (diffs == null) {
-                    // This will be called if the table is new or just empty.
-                    callback.onDataNotAvailable()
-                } else {
-                    Logger.d("ReturningTask ${diffs.site}")
-                    Logger.d("ReturningCount $diffs - ${diffs.diffs.size}")
-                    callback.onDiffsLoaded(diffs.diffs.sortedByDescending { it.timestamp })
-                }
-            }
-        }
-
-        mAppExecutors.diskIO().execute(runnable)
-    }
-
-    override fun getDiff(diffId: String, callback: DiffsDataSource.GetDiffCallback) {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-    override fun refreshDiffs() {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-    override fun deleteAllDiffsForSite() {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-    override fun deleteDiff(diffId: String) {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-    override fun saveDiff(diff: Diff, callback: DiffsDataSource.GetDiffCallback) {
-        val saveRunnable = Runnable {
-            val getDiffByid = mDiffsDao.getDiffBySiteId(diff.siteId)
-
-            val wasSuccessful =
-                if (getDiffByid?.value?.cleanUpHtml() != diff.value.cleanUpHtml()) {
-                    Logger.d("Difference detected! Id went from ${getDiffByid?.fileId} to ${diff.fileId}")
-                    Logger.d("Difference detected! Size went from ${getDiffByid?.value?.count()} to ${diff.value.count()}")
-                    mDiffsDao.insertDiff(diff.copy())
-
-                    Logger.d("getAllDiffs: ${mDiffsDao.getAllDiffs().count()}")
-
-                    mDiffsDao.getAllDiffs().forEach {
-                        Logger.d("fileId: ${it.fileId} - siteId: ${it.siteId}")
-                    }
-                    true
-                    // We don't want to show a change when there is only one diff. It won't be a change when user just puts the website.
-//                    getDiffByid != null
-                } else {
-                    Logger.d("Beep beep! No difference detected!")
-                    false
-                }
-
-            mAppExecutors.mainThread().execute {
-                if (wasSuccessful) {
-                    callback.onDiffLoaded(diff)
-                } else {
-                    callback.onDataNotAvailable()
-                }
-            }
-        }
-
-        mAppExecutors.diskIO().execute(saveRunnable)
-    }
-
-//
-//    /**
-//     * Note: [GetTaskCallback.onDataNotAvailable] is fired if the [Site] isn't
-//     * found.
-//     */
-//    override fun getSite(taskId: String, callback: TasksDataSource.GetTaskCallback) {
-//        val runnable = Runnable {
-//            val site = mDiffsDao.getTaskById(taskId)
-//
-//            mAppExecutors.mainThread().execute {
-//                if (site != null) {
-//                    callback.onTaskLoaded(site)
-//                } else {
-//                    callback.onDataNotAvailable()
-//                }
-//            }
-//        }
-//
-//        mAppExecutors.diskIO().execute(runnable)
-//    }
-//
-//    override fun saveTask(site: Site) {
-//        checkNotNull(site)
-//        val saveRunnable = Runnable { mDiffsDao.insertTask(site) }
-//        mAppExecutors.diskIO().execute(saveRunnable)
-//    }
-//
-//    override fun completeTask(site: Site) {
-//        val completeRunnable = Runnable { mDiffsDao.updateCompleted(site.id, true) }
-//
-//        mAppExecutors.diskIO().execute(completeRunnable)
-//    }
-//
-//    override fun completeTask(taskId: String) {
-//        // Not required for the local data source because the {@link TasksRepository} handles
-//        // converting from a {@code taskId} to a {@link site} using its cached data.
-//    }
-//
-//    override fun activateTask(site: Site) {
-//        val activateRunnable = Runnable { mDiffsDao.updateCompleted(site.id, false) }
-//        mAppExecutors.diskIO().execute(activateRunnable)
-//    }
-//
-//    override fun activateTask(taskId: String) {
-//        // Not required for the local data source because the {@link TasksRepository} handles
-//        // converting from a {@code taskId} to a {@link site} using its cached data.
-//    }
-//
-//    override fun clearCompletedTasks() {
-//        val clearTasksRunnable = Runnable { mDiffsDao.deleteCompletedTasks() }
-//
-//        mAppExecutors.diskIO().execute(clearTasksRunnable)
-//    }
-//
-//    override fun refreshTasks() {
-//        // Not required because the {@link TasksRepository} handles the logic of refreshing the
-//        // sites from all the available data sources.
-//    }
-//
-//    override fun deleteAllTasks() {
-//        val deleteRunnable = Runnable { mDiffsDao.deleteTasks() }
-//
-//        mAppExecutors.diskIO().execute(deleteRunnable)
-//    }
-//
-//    override fun deleteSite(taskId: String) {
-//        val deleteRunnable = Runnable { mDiffsDao.deleteTaskById(taskId) }
-//
-//        mAppExecutors.diskIO().execute(deleteRunnable)
-//    }
-
-    companion object {
-
-        @Volatile
-        private var INSTANCE: DiffsLocalDataSource? = null
-
-        fun getInstance(
-            appExecutors: AppExecutors,
-            diffsDao: DiffsDao
-        ): DiffsLocalDataSource {
-            if (INSTANCE == null) {
-                synchronized(DiffsLocalDataSource::class.java) {
-                    if (INSTANCE == null) {
-                        INSTANCE = DiffsLocalDataSource(appExecutors, diffsDao)
-                    }
-                }
-            }
-            return INSTANCE!!
-        }
-
-        @VisibleForTesting
-        internal fun clearInstance() {
-            INSTANCE = null
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/data/source/remote/TasksRemoteDataSource.kt b/app/src/main/java/com/example/changedetection/data/source/remote/TasksRemoteDataSource.kt
deleted file mode 100755
index 6708383..0000000
--- a/app/src/main/java/com/example/changedetection/data/source/remote/TasksRemoteDataSource.kt
+++ /dev/null
@@ -1,155 +0,0 @@
-/*
- * Copyright 2016, The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.data.source.remote
-
-import android.os.Handler
-import com.example.changedetection.data.Site
-import com.example.changedetection.data.source.TasksDataSource
-import com.example.changedetection.data.source.local.SiteAndLastDiff
-import java.util.*
-
-/**
- * Implementation of the data source that adds a latency simulating network.
- */
-class TasksRemoteDataSource// Prevent direct instantiation.
-private constructor() : TasksDataSource {
-    override fun getTaskAndDiffs(callback: (MutableList<SiteAndLastDiff>) -> Unit) {
-        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
-    }
-
-
-    /**
-     * Note: [LoadTasksCallback.onDataNotAvailable] is never fired. In a real remote data
-     * source implementation, this would be fired if the server can't be contacted or the server
-     * returns an error.
-     */
-    override fun getTasks(callback: TasksDataSource.LoadTasksCallback) {
-        // Simulate network by delaying the execution.
-        val handler = Handler()
-        handler.postDelayed(
-            { callback.onTasksLoaded(TASKS_SERVICE_DATA.values.toMutableList()) },
-            SERVICE_LATENCY_IN_MILLIS.toLong()
-        )
-    }
-
-    /**
-     * Note: [GetTaskCallback.onDataNotAvailable] is never fired. In a real remote data
-     * source implementation, this would be fired if the server can't be contacted or the server
-     * returns an error.
-     */
-    override fun getTask(taskId: String, callback: TasksDataSource.GetTaskCallback) {
-        val task = TASKS_SERVICE_DATA[taskId]!!
-
-        // Simulate network by delaying the execution.
-        val handler = Handler()
-        handler.postDelayed({ callback.onTaskLoaded(task) }, SERVICE_LATENCY_IN_MILLIS.toLong())
-    }
-
-    override fun saveTask(site: Site) {
-        TASKS_SERVICE_DATA[site.id] = site
-    }
-
-    override fun completeTask(site: Site) {
-        val completedTask = Site(site.title, site.url, site.timestamp, site.id, true, false)
-        TASKS_SERVICE_DATA[site.id] = completedTask
-    }
-
-    override fun completeTask(taskId: String) {
-        // Not required for the remote data source because the {@link TasksRepository} handles
-        // converting from a {@code taskId} to a {@link site} using its cached data.
-    }
-
-    override fun activateTask(site: Site) {
-        val activeTask = Site(site.title, site.url, site.timestamp, site.id)
-        TASKS_SERVICE_DATA[site.id] = activeTask
-    }
-
-    override fun activateTask(taskId: String) {
-        // Not required for the remote data source because the {@link TasksRepository} handles
-        // converting from a {@code taskId} to a {@link site} using its cached data.
-    }
-
-    override fun clearCompletedTasks() {
-        val it = TASKS_SERVICE_DATA.entries.iterator()
-        while (it.hasNext()) {
-            val entry = it.next()
-            if (entry.value.successful) {
-                it.remove()
-            }
-        }
-    }
-
-    override fun refreshTasks() {
-        // Not required because the {@link TasksRepository} handles the logic of refreshing the
-        // sites from all the available data sources.
-    }
-
-    override fun deleteAllTasks() {
-        TASKS_SERVICE_DATA.clear()
-    }
-
-    override fun deleteSite(taskId: String) {
-        TASKS_SERVICE_DATA.remove(taskId)
-    }
-
-    companion object {
-
-        private var INSTANCE: TasksRemoteDataSource? = null
-
-        private val SERVICE_LATENCY_IN_MILLIS = 2000
-
-        private val TASKS_SERVICE_DATA: MutableMap<String, Site>
-
-        init {
-            TASKS_SERVICE_DATA = LinkedHashMap(2)
-            addTask(
-                "Build tower in Pisa",
-                "Ground looks good, no foundation work required.",
-                0,
-                "0"
-            )
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 1, "1")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "2")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "3")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "4")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "5")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "6")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "7")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "8")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "12")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "13")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "14")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "15")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "16")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "17")
-            addTask("Finish bridge in Tacoma", "Found awesome girders at half the cost!", 0, "18")
-        }
-
-        val instance: TasksRemoteDataSource
-            get() {
-                if (INSTANCE == null) {
-                    INSTANCE = TasksRemoteDataSource()
-                }
-                return INSTANCE!!
-            }
-
-        private fun addTask(title: String, description: String, timestamp: Long, id: String) {
-            val newTask = Site(title, description, timestamp, id)
-            TASKS_SERVICE_DATA[newTask.id] = newTask
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/DiffUtils.kt b/app/src/main/java/com/example/changedetection/diffs/DiffUtils.kt
deleted file mode 100644
index 7292944..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/DiffUtils.kt
+++ /dev/null
@@ -1,160 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs
-
-import com.example.changedetection.diffs.algorithm.DiffAlgorithm
-import com.example.changedetection.diffs.algorithm.DiffException
-import com.example.changedetection.diffs.algorithm.myers.MyersDiff
-import com.example.changedetection.diffs.patch.Patch
-import com.example.changedetection.diffs.patch.PatchFailedException
-import java.util.*
-
-/**
- * Implements the difference and patching engine
- *
- * @author [Dmitry Naumenko](dm.naumenko@gmail.com)
- * @version 0.4.1
- */
-object DiffUtils {
-
-    /**
-     * Computes the difference between the original and revised list of elements with default diff algorithm
-     *
-     * @param original The original text. Must not be `null`.
-     * @param revised The revised text. Must not be `null`.
-     * @return The patch describing the difference between the original and revised sequences. Never `null`.
-     */
-    @Throws(DiffException::class)
-    fun <T> diff(original: List<T>, revised: List<T>): Patch<T> {
-        return DiffUtils.diff(original, revised, MyersDiff())
-    }
-
-    /**
-     * Computes the difference between the original and revised text.
-     */
-    @Throws(DiffException::class)
-    fun diff(originalText: String, revisedText: String): Patch<String> {
-        return DiffUtils.diff(
-            Arrays.asList(*originalText.split("\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()),
-            Arrays.asList(*revisedText.split("\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())
-        )
-    }
-
-    /**
-     * Computes the difference between the original and revised list of elements with default diff algorithm
-     *
-     * @param original The original text. Must not be `null`.
-     * @param revised The revised text. Must not be `null`.
-     *
-     * @param equalizer the equalizer object to replace the default compare algorithm (Object.equals). If `null`
-     * the default equalizer of the default algorithm is used..
-     * @return The patch describing the difference between the original and revised sequences. Never `null`.
-     */
-    @Throws(DiffException::class)
-    fun <T> diff(
-        original: List<T>, revised: List<T>,
-        equalizer: ((T, T) -> Boolean)?
-    ): Patch<T> {
-        return if (equalizer != null) {
-            DiffUtils.diff(
-                original, revised,
-                MyersDiff(equalizer)
-            )
-        } else DiffUtils.diff(original, revised, MyersDiff())
-    }
-
-    /**
-     * Computes the difference between the original and revised list of elements with default diff algorithm
-     *
-     * @param original The original text. Must not be `null`.
-     * @param revised The revised text. Must not be `null`.
-     * @param algorithm The diff algorithm. Must not be `null`.
-     * @return The patch describing the difference between the original and revised sequences. Never `null`.
-     */
-    @Throws(DiffException::class)
-    fun <T> diff(
-        original: List<T>, revised: List<T>,
-        algorithm: DiffAlgorithm<T>
-    ): Patch<T> {
-        Objects.requireNonNull(original, "original must not be null")
-        Objects.requireNonNull(revised, "revised must not be null")
-        Objects.requireNonNull(algorithm, "algorithm must not be null")
-
-        return Patch.generate(original, revised, algorithm.diff(original, revised))
-    }
-
-    /**
-     * Computes the difference between the given texts inline. This one uses the "trick" to make out of texts lists of
-     * characters, like DiffRowGenerator does and merges those changes at the end together again.
-     *
-     * @param original
-     * @param revised
-     * @return
-     */
-    @Throws(DiffException::class)
-    fun diffInline(original: String, revised: String): Patch<String> {
-        val origList = ArrayList<String>()
-        val revList = ArrayList<String>()
-        for (character in original.toCharArray()) {
-            origList.add(character.toString())
-        }
-        for (character in revised.toCharArray()) {
-            revList.add(character.toString())
-        }
-        val patch = DiffUtils.diff(origList, revList)
-        for (delta in patch.getDeltas()) {
-            delta.original.lines = compressLines(delta.original.lines, "")
-            delta.revised.lines = compressLines(delta.revised.lines, "")
-        }
-        return patch
-    }
-
-    private fun compressLines(lines: List<String>, delimiter: String): List<String> {
-        return if (lines.isEmpty()) {
-            emptyList()
-        } else {
-            listOf(lines.joinToString(delimiter))
-        }
-    }
-
-    /**
-     * Patch the original text with given patch
-     *
-     * @param original the original text
-     * @param patch the given patch
-     * @return the revised text
-     * @throws PatchFailedException if can't apply patch
-     */
-    @Throws(PatchFailedException::class)
-    fun <T> patch(original: List<T>, patch: Patch<T>): List<T> {
-        return patch.applyTo(original)
-    }
-
-    /**
-     * Unpatch the revised text for a given patch
-     *
-     * @param revised the revised text
-     * @param patch the given patch
-     * @return the original text
-     */
-    fun <T> unpatch(revised: List<T>, patch: Patch<T>): List<T> {
-        return patch.restore(revised)
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/UnifiedDiffUtils.java b/app/src/main/java/com/example/changedetection/diffs/UnifiedDiffUtils.java
deleted file mode 100755
index 9955149..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/UnifiedDiffUtils.java
+++ /dev/null
@@ -1,313 +0,0 @@
-/*
- * Copyright 2017 java-diff-utils.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.changedetection.diffs;
-
-import com.example.changedetection.diffs.patch.ChangeDelta;
-import com.example.changedetection.diffs.patch.Chunk;
-import com.example.changedetection.diffs.patch.Delta;
-import com.example.changedetection.diffs.patch.Patch;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-/**
- * @author toben
- */
-public final class UnifiedDiffUtils {
-
-    private static final Pattern UNIFIED_DIFF_CHUNK_REGEXP = Pattern
-            .compile("^@@\\s+-(?:(\\d+)(?:,(\\d+))?)\\s+\\+(?:(\\d+)(?:,(\\d+))?)\\s+@@$");
-
-    private UnifiedDiffUtils() {
-    }
-
-    /**
-     * Parse the given text in unified format and creates the list of deltas for it.
-     *
-     * @param diff the text in unified format
-     * @return the patch with deltas.
-     */
-    public static Patch<String> parseUnifiedDiff(List<String> diff) {
-        boolean inPrelude = true;
-        List<String[]> rawChunk = new ArrayList<>();
-        Patch<String> patch = new Patch<>();
-
-        int old_ln = 0;
-        int new_ln = 0;
-        String tag;
-        String rest;
-        for (String line : diff) {
-            // Skip leading lines until after we've seen one starting with '+++'
-            if (inPrelude) {
-                if (line.startsWith("+++")) {
-                    inPrelude = false;
-                }
-                continue;
-            }
-            Matcher m = UNIFIED_DIFF_CHUNK_REGEXP.matcher(line);
-            if (m.find()) {
-                // Process the lines in the previous chunk
-                if (!rawChunk.isEmpty()) {
-                    List<String> oldChunkLines = new ArrayList<>();
-                    List<String> newChunkLines = new ArrayList<>();
-
-                    for (String[] raw_line : rawChunk) {
-                        tag = raw_line[0];
-                        rest = raw_line[1];
-                        if (" ".equals(tag) || "-".equals(tag)) {
-                            oldChunkLines.add(rest);
-                        }
-                        if (" ".equals(tag) || "+".equals(tag)) {
-                            newChunkLines.add(rest);
-                        }
-                    }
-                    patch.addDelta(new ChangeDelta<>(new Chunk<>(
-                            old_ln - 1, oldChunkLines), new Chunk<>(
-                            new_ln - 1, newChunkLines)));
-                    rawChunk.clear();
-                }
-                // Parse the @@ header
-                old_ln = m.group(1) == null ? 1 : Integer.parseInt(m.group(1));
-                new_ln = m.group(3) == null ? 1 : Integer.parseInt(m.group(3));
-
-                if (old_ln == 0) {
-                    old_ln += 1;
-                }
-                if (new_ln == 0) {
-                    new_ln += 1;
-                }
-            } else {
-                if (line.length() > 0) {
-                    tag = line.substring(0, 1);
-                    rest = line.substring(1);
-                    if (" ".equals(tag) || "+".equals(tag) || "-".equals(tag)) {
-                        rawChunk.add(new String[]{tag, rest});
-                    }
-                } else {
-                    rawChunk.add(new String[]{" ", ""});
-                }
-            }
-        }
-
-        // Process the lines in the last chunk
-        if (!rawChunk.isEmpty()) {
-            List<String> oldChunkLines = new ArrayList<>();
-            List<String> newChunkLines = new ArrayList<>();
-
-            for (String[] raw_line : rawChunk) {
-                tag = raw_line[0];
-                rest = raw_line[1];
-                if (" ".equals(tag) || "-".equals(tag)) {
-                    oldChunkLines.add(rest);
-                }
-                if (" ".equals(tag) || "+".equals(tag)) {
-                    newChunkLines.add(rest);
-                }
-            }
-
-            patch.addDelta(new ChangeDelta<>(new Chunk<>(
-                    old_ln - 1, oldChunkLines), new Chunk<>(new_ln - 1,
-                    newChunkLines)));
-            rawChunk.clear();
-        }
-
-        return patch;
-    }
-
-    /**
-     * generateUnifiedDiff takes a Patch and some other arguments, returning the Unified Diff format text representing
-     * the Patch.
-     *
-     * @param originalFileName - Filename of the original (unrevised file)
-     * @param revisedFileName  - Filename of the revised file
-     * @param originalLines    - Lines of the original file
-     * @param patch            - Patch created by the diff() function
-     * @param contextSize      - number of lines of context output around each difference in the file.
-     * @return List of strings representing the Unified Diff representation of the Patch argument.
-     * @author Bill James (tankerbay@gmail.com)
-     */
-    public static List<String> generateUnifiedDiff(String originalFileName,
-                                                   String revisedFileName, List<String> originalLines, Patch<String> patch,
-                                                   int contextSize) {
-        if (!patch.getDeltas().isEmpty()) {
-            List<String> ret = new ArrayList<>();
-            ret.add("--- " + originalFileName);
-            ret.add("+++ " + revisedFileName);
-
-            List<Delta<String>> patchDeltas = new ArrayList<>(
-                    patch.getDeltas());
-
-            // code outside the if block also works for single-delta issues.
-            List<Delta<String>> deltas = new ArrayList<>(); // current
-            // list
-            // of
-            // Delta's to
-            // process
-            Delta<String> delta = patchDeltas.get(0);
-            deltas.add(delta); // add the first Delta to the current set
-            // if there's more than 1 Delta, we may need to output them together
-            if (patchDeltas.size() > 1) {
-                for (int i = 1; i < patchDeltas.size(); i++) {
-                    int position = delta.getOriginal().getPosition(); // store
-                    // the
-                    // current
-                    // position
-                    // of
-                    // the first Delta
-
-                    // Check if the next Delta is too close to the current
-                    // position.
-                    // And if it is, add it to the current set
-                    Delta<String> nextDelta = patchDeltas.get(i);
-                    if ((position + delta.getOriginal().size() + contextSize) >= (nextDelta
-                            .getOriginal().getPosition() - contextSize)) {
-                        deltas.add(nextDelta);
-                    } else {
-                        // if it isn't, output the current set,
-                        // then create a new set and add the current Delta to
-                        // it.
-                        List<String> curBlock = processDeltas(originalLines,
-                                deltas, contextSize);
-                        ret.addAll(curBlock);
-                        deltas.clear();
-                        deltas.add(nextDelta);
-                    }
-                    delta = nextDelta;
-                }
-
-            }
-            // don't forget to process the last set of Deltas
-            List<String> curBlock = processDeltas(originalLines, deltas,
-                    contextSize);
-            ret.addAll(curBlock);
-            return ret;
-        }
-        return new ArrayList<>();
-    }
-
-    /**
-     * processDeltas takes a list of Deltas and outputs them together in a single block of Unified-Diff-format text.
-     *
-     * @param origLines   - the lines of the original file
-     * @param deltas      - the Deltas to be output as a single block
-     * @param contextSize - the number of lines of context to place around block
-     * @return
-     * @author Bill James (tankerbay@gmail.com)
-     */
-    private static List<String> processDeltas(List<String> origLines,
-                                              List<Delta<String>> deltas, int contextSize) {
-        List<String> buffer = new ArrayList<>();
-        int origTotal = 0; // counter for total lines output from Original
-        int revTotal = 0; // counter for total lines output from Original
-        int line;
-
-        Delta<String> curDelta = deltas.get(0);
-
-        // NOTE: +1 to overcome the 0-offset Position
-        int origStart = curDelta.getOriginal().getPosition() + 1 - contextSize;
-        if (origStart < 1) {
-            origStart = 1;
-        }
-
-        int revStart = curDelta.getRevised().getPosition() + 1 - contextSize;
-        if (revStart < 1) {
-            revStart = 1;
-        }
-
-        // find the start of the wrapper context code
-        int contextStart = curDelta.getOriginal().getPosition() - contextSize;
-        if (contextStart < 0) {
-            contextStart = 0; // clamp to the start of the file
-        }
-
-        // output the context before the first Delta
-        for (line = contextStart; line < curDelta.getOriginal().getPosition(); line++) { //
-            buffer.add(" " + origLines.get(line));
-            origTotal++;
-            revTotal++;
-        }
-
-        // output the first Delta
-        buffer.addAll(getDeltaText(curDelta));
-        origTotal += curDelta.getOriginal().getLines().size();
-        revTotal += curDelta.getRevised().getLines().size();
-
-        int deltaIndex = 1;
-        while (deltaIndex < deltas.size()) { // for each of the other Deltas
-            Delta<String> nextDelta = deltas.get(deltaIndex);
-            int intermediateStart = curDelta.getOriginal().getPosition()
-                    + curDelta.getOriginal().getLines().size();
-            for (line = intermediateStart; line < nextDelta.getOriginal()
-                    .getPosition(); line++) {
-                // output the code between the last Delta and this one
-                buffer.add(" " + origLines.get(line));
-                origTotal++;
-                revTotal++;
-            }
-            buffer.addAll(getDeltaText(nextDelta)); // output the Delta
-            origTotal += nextDelta.getOriginal().getLines().size();
-            revTotal += nextDelta.getRevised().getLines().size();
-            curDelta = nextDelta;
-            deltaIndex++;
-        }
-
-        // Now output the post-Delta context code, clamping the end of the file
-        contextStart = curDelta.getOriginal().getPosition()
-                + curDelta.getOriginal().getLines().size();
-        for (line = contextStart; (line < (contextStart + contextSize))
-                && (line < origLines.size()); line++) {
-            buffer.add(" " + origLines.get(line));
-            origTotal++;
-            revTotal++;
-        }
-
-        // Create and insert the block header, conforming to the Unified Diff
-        // standard
-        StringBuffer header = new StringBuffer();
-        header.append("@@ -");
-        header.append(origStart);
-        header.append(",");
-        header.append(origTotal);
-        header.append(" +");
-        header.append(revStart);
-        header.append(",");
-        header.append(revTotal);
-        header.append(" @@");
-        buffer.add(0, header.toString());
-
-        return buffer;
-    }
-
-    /**
-     * getDeltaText returns the lines to be added to the Unified Diff text from the Delta parameter
-     *
-     * @param delta - the Delta to output
-     * @return list of String lines of code.
-     * @author Bill James (tankerbay@gmail.com)
-     */
-    private static List<String> getDeltaText(Delta<String> delta) {
-        List<String> buffer = new ArrayList<>();
-        for (String line : delta.getOriginal().getLines()) {
-            buffer.add("-" + line);
-        }
-        for (String line : delta.getRevised().getLines()) {
-            buffer.add("+" + line);
-        }
-        return buffer;
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/Change.java b/app/src/main/java/com/example/changedetection/diffs/algorithm/Change.java
deleted file mode 100755
index 1e5e4a5..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/Change.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright 2017 java-diff-utils.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.changedetection.diffs.algorithm;
-
-import com.example.changedetection.diffs.patch.DeltaType;
-
-/**
- * @author toben
- */
-public class Change {
-
-    public final DeltaType deltaType;
-    public final int startOriginal;
-    public final int endOriginal;
-    public final int startRevised;
-    public final int endRevised;
-
-    public Change(DeltaType deltaType, int startOriginal, int endOriginal, int startRevised, int endRevised) {
-        this.deltaType = deltaType;
-        this.startOriginal = startOriginal;
-        this.endOriginal = endOriginal;
-        this.startRevised = startRevised;
-        this.endRevised = endRevised;
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffAlgorithm.java b/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffAlgorithm.java
deleted file mode 100755
index acc9310..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffAlgorithm.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.algorithm;
-
-import com.example.changedetection.diffs.patch.Patch;
-
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * The general interface for computing diffs between two lists of elements of type T.
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public interface DiffAlgorithm<T> {
-
-    /**
-     * Computes the difference between the original sequence and the revised sequence and returns it as a {@link Patch}
-     * object.
-     *
-     * @param original The original sequence. Must not be {@code null}.
-     * @param revised  The revised sequence. Must not be {@code null}.
-     * @return The patch representing the diff of the given sequences. Never {@code null}.
-     */
-    public default List<Change> diff(T[] original, T[] revised) throws DiffException {
-        return diff(Arrays.asList(original), Arrays.asList(revised));
-    }
-
-    /**
-     * Computes the difference between the original sequence and the revised sequence and returns it as a {@link Patch}
-     * object.
-     *
-     * @param original The original sequence. Must not be {@code null}.
-     * @param revised  The revised sequence. Must not be {@code null}.
-     * @return The patch representing the diff of the given sequences. Never {@code null}.
-     */
-    public List<Change> diff(List<T> original, List<T> revised) throws DiffException;
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffException.java b/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffException.java
deleted file mode 100755
index a69f2f0..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/DiffException.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.algorithm;
-
-public class DiffException extends Exception {
-
-    private static final long serialVersionUID = 1L;
-
-    public DiffException() {
-    }
-
-    public DiffException(String msg) {
-        super(msg);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/DifferentiationFailedException.java b/app/src/main/java/com/example/changedetection/diffs/algorithm/DifferentiationFailedException.java
deleted file mode 100755
index bdda192..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/DifferentiationFailedException.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.algorithm;
-
-/**
- * Thrown whenever the differencing engine cannot produce the differences between two revisions of ta text.
- *
- * @see MyersDiff
- * @see difflib.DiffAlgorithm
- */
-public class DifferentiationFailedException extends DiffException {
-
-    private static final long serialVersionUID = 1L;
-
-    public DifferentiationFailedException() {
-    }
-
-    public DifferentiationFailedException(String msg) {
-        super(msg);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/MyersDiff.kt b/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/MyersDiff.kt
deleted file mode 100644
index 621da9e..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/MyersDiff.kt
+++ /dev/null
@@ -1,184 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.algorithm.myers
-
-import com.example.changedetection.diffs.algorithm.Change
-import com.example.changedetection.diffs.algorithm.DiffAlgorithm
-import com.example.changedetection.diffs.algorithm.DiffException
-import com.example.changedetection.diffs.algorithm.DifferentiationFailedException
-import com.example.changedetection.diffs.patch.DeltaType
-import com.example.changedetection.diffs.patch.Patch
-import java.util.*
-
-/**
- * A clean-room implementation of Eugene Myers greedy differencing algorithm.
- */
-class MyersDiff<T> : DiffAlgorithm<T> {
-
-    private val equalizer: (T, T) -> Boolean
-
-    constructor() {
-        equalizer = { obj1: T, obj2: T -> obj1 == obj2 }
-    }
-
-    constructor(equalizer: (T, T) -> Boolean) {
-        Objects.requireNonNull(equalizer, "equalizer must not be null")
-        this.equalizer = equalizer
-    }
-
-    /**
-     * {@inheritDoc}
-     *
-     * Return empty diff if get the error while procession the difference.
-     */
-    @Throws(DiffException::class)
-    override fun diff(original: List<T>, revised: List<T>): List<Change> {
-        Objects.requireNonNull(original, "original list must not be null")
-        Objects.requireNonNull(revised, "revised list must not be null")
-
-        val path = buildPath(original, revised)
-        return buildRevision(path, original, revised)
-    }
-
-    /**
-     * Computes the minimum diffpath that expresses de differences between the original and revised sequences, according
-     * to Gene Myers differencing algorithm.
-     *
-     * @param orig The original sequence.
-     * @param rev The revised sequence.
-     * @return A minimum [Path][PathNode] accross the differences graph.
-     * @throws DifferentiationFailedException if a diff path could not be found.
-     */
-    @Throws(DifferentiationFailedException::class)
-    private fun buildPath(orig: List<T>, rev: List<T>): PathNode {
-        Objects.requireNonNull(orig, "original sequence is null")
-        Objects.requireNonNull(rev, "revised sequence is null")
-
-        // these are local constants
-        val N = orig.size
-        val M = rev.size
-
-        val MAX = N + M + 1
-        val size = 1 + 2 * MAX
-        val middle = size / 2
-        val diagonal = arrayOfNulls<PathNode>(size)
-
-        diagonal[middle + 1] = PathNode(0, -1, true, true, null)
-        for (d in 0 until MAX) {
-            var k = -d
-            while (k <= d) {
-                val kmiddle = middle + k
-                val kplus = kmiddle + 1
-                val kminus = kmiddle - 1
-                val prev: PathNode
-                var i: Int
-
-                if (k == -d || k != d && diagonal[kminus]!!.i < diagonal[kplus]!!.i) {
-                    i = diagonal[kplus]!!.i
-                    prev = diagonal[kplus]!!
-                } else {
-                    i = diagonal[kminus]!!.i + 1
-                    prev = diagonal[kminus]!!
-                }
-
-                diagonal[kminus] = null // no longer used
-
-                var j = i - k
-
-                var node = PathNode(i, j, false, false, prev)
-
-                while (i < N && j < M && equalizer.invoke(orig[i], rev[j])) {
-                    i++
-                    j++
-                }
-
-                if (i != node.i) {
-                    node = PathNode(i, j, true, false, node)
-                }
-
-                diagonal[kmiddle] = node
-
-                if (i >= N && j >= M) {
-                    return diagonal[kmiddle]!!
-                }
-                k += 2
-            }
-            diagonal[middle + d - 1] = null
-        }
-        // According to Myers, this cannot happen
-        throw DifferentiationFailedException("could not find a diff path")
-    }
-
-    /**
-     * Constructs a [Patch] from a difference path.
-     *
-     * @param path The path.
-     * @param orig The original sequence.
-     * @param rev The revised sequence.
-     * @return A [Patch] script corresponding to the path.
-     * @throws DifferentiationFailedException if a [Patch] could not be built from the given path.
-     */
-    private fun buildRevision(actualPath: PathNode, orig: List<T>, rev: List<T>): List<Change> {
-        Objects.requireNonNull(actualPath, "path is null")
-        Objects.requireNonNull(orig, "original sequence is null")
-        Objects.requireNonNull(rev, "revised sequence is null")
-
-        var path: PathNode? = actualPath
-        val changes = ArrayList<Change>()
-        if (path!!.isSnake) {
-            path = path.prev
-        }
-        while (path != null && path.prev != null && path.prev.j >= 0) {
-            if (path.isSnake) {
-                throw IllegalStateException("bad diffpath: found snake when looking for diff")
-            }
-            val i = path.i
-            val j = path.j
-
-            path = path.prev
-            val ianchor = path!!.i
-            val janchor = path.j
-
-            if (ianchor == i && janchor != j) {
-                changes.add(Change(DeltaType.INSERT, ianchor, i, janchor, j))
-            } else if (ianchor != i && janchor == j) {
-                changes.add(Change(DeltaType.DELETE, ianchor, i, janchor, j))
-            } else {
-                changes.add(Change(DeltaType.CHANGE, ianchor, i, janchor, j))
-            }
-            //            Chunk<T> original = new Chunk<>(ianchor, copyOfRange(orig, ianchor, i));
-            //            Chunk<T> revised = new Chunk<>(janchor, copyOfRange(rev, janchor, j));
-            //            Delta<T> delta = null;
-            //            if (original.size() == 0 && revised.size() != 0) {
-            //                delta = new InsertDelta<>(original, revised);
-            //            } else if (original.size() > 0 && revised.size() == 0) {
-            //                delta = new DeleteDelta<>(original, revised);
-            //            } else {
-            //                delta = new ChangeDelta<>(original, revised);
-            //            }
-            //
-            //            patch.addDelta(delta);
-            if (path.isSnake) {
-                path = path.prev
-            }
-        }
-        return changes
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/PathNode.java b/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/PathNode.java
deleted file mode 100755
index cd2b9a8..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/algorithm/myers/PathNode.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.algorithm.myers;
-
-/**
- * A node in a diffpath.
- *
- * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
- * @see DiffNode
- * @see Snake
- */
-public final class PathNode {
-
-    /**
-     * Position in the original sequence.
-     */
-    public final int i;
-    /**
-     * Position in the revised sequence.
-     */
-    public final int j;
-    /**
-     * The previous node in the path.
-     */
-    public final PathNode prev;
-
-    public final boolean snake;
-
-    public final boolean bootstrap;
-
-    /**
-     * Concatenates a new path node with an existing diffpath.
-     *
-     * @param i    The position in the original sequence for the new node.
-     * @param j    The position in the revised sequence for the new node.
-     * @param prev The previous node in the path.
-     */
-    public PathNode(int i, int j, boolean snake, boolean bootstrap, PathNode prev) {
-        this.i = i;
-        this.j = j;
-        this.bootstrap = bootstrap;
-        if (snake) {
-            this.prev = prev;
-        } else {
-            this.prev = prev == null ? null : prev.previousSnake();
-        }
-        this.snake = snake;
-    }
-
-    public boolean isSnake() {
-        return snake;
-    }
-
-    /**
-     * Is this a bootstrap node?
-     * <p>
-     * In bottstrap nodes one of the two corrdinates is less than zero.
-     *
-     * @return tru if this is a bootstrap node.
-     */
-    public boolean isBootstrap() {
-        return bootstrap;
-    }
-
-    /**
-     * Skips sequences of {@link DiffNode DiffNodes} until a {@link Snake} or bootstrap node is found, or the end of the
-     * path is reached.
-     *
-     * @return The next first {@link Snake} or bootstrap node in the path, or <code>null</code> if none found.
-     */
-    public final PathNode previousSnake() {
-        if (isBootstrap()) {
-            return null;
-        }
-        if (!isSnake() && prev != null) {
-            return prev.previousSnake();
-        }
-        return this;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public String toString() {
-        StringBuilder buf = new StringBuilder("[");
-        PathNode node = this;
-        while (node != null) {
-            buf.append("(");
-            buf.append(Integer.toString(node.i));
-            buf.append(",");
-            buf.append(Integer.toString(node.j));
-            buf.append(")");
-            node = node.prev;
-        }
-        buf.append("]");
-        return buf.toString();
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/ChangeDelta.java b/app/src/main/java/com/example/changedetection/diffs/patch/ChangeDelta.java
deleted file mode 100755
index d35ecd5..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/ChangeDelta.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import java.util.List;
-
-/**
- * Describes the change-delta between original and revised texts.
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public final class ChangeDelta<T> extends Delta<T> {
-
-    /**
-     * Creates a change delta with the two given chunks.
-     *
-     * @param original The original chunk. Must not be {@code null}.
-     * @param revised  The original chunk. Must not be {@code null}.
-     */
-    public ChangeDelta(Chunk<T> original, Chunk<T> revised) {
-        super(DeltaType.CHANGE, original, revised);
-    }
-
-    @Override
-    public void applyTo(List<T> target) throws PatchFailedException {
-        verify(target);
-        int position = getOriginal().getPosition();
-        int size = getOriginal().size();
-        for (int i = 0; i < size; i++) {
-            target.remove(position);
-        }
-        int i = 0;
-        for (T line : getRevised().getLines()) {
-            target.add(position + i, line);
-            i++;
-        }
-    }
-
-    @Override
-    public void restore(List<T> target) {
-        int position = getRevised().getPosition();
-        int size = getRevised().size();
-        for (int i = 0; i < size; i++) {
-            target.remove(position);
-        }
-        int i = 0;
-        for (T line : getOriginal().getLines()) {
-            target.add(position + i, line);
-            i++;
-        }
-    }
-
-    @Override
-    public String toString() {
-        return "[ChangeDelta, position: " + getOriginal().getPosition() + ", lines: "
-                + getOriginal().getLines() + " to " + getRevised().getLines() + "]";
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/Chunk.java b/app/src/main/java/com/example/changedetection/diffs/patch/Chunk.java
deleted file mode 100755
index 56ca929..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/Chunk.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Holds the information about the part of text involved in the diff process
- *
- * <p>
- * Text is represented as <code>Object[]</code> because the diff engine is capable of handling more than plain ascci. In
- * fact, arrays or lists of any type that implements {@link java.lang.Object#hashCode hashCode()} and
- * {@link java.lang.Object#equals equals()} correctly can be subject to differencing using this library.
- * </p>
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com>Dmitry Naumenko</a>
- */
-public final class Chunk<T> {
-
-    private final int position;
-    private List<T> lines;
-
-    /**
-     * Creates a chunk and saves a copy of affected lines
-     *
-     * @param position the start position
-     * @param lines    the affected lines
-     */
-    public Chunk(int position, List<T> lines) {
-        this.position = position;
-        this.lines = lines;
-    }
-
-    /**
-     * Creates a chunk and saves a copy of affected lines
-     *
-     * @param position the start position
-     * @param lines    the affected lines
-     */
-    public Chunk(int position, T[] lines) {
-        this.position = position;
-        this.lines = Arrays.asList(lines);
-    }
-
-    /**
-     * Verifies that this chunk's saved text matches the corresponding text in the given sequence.
-     *
-     * @param target the sequence to verify against.
-     */
-    public void verify(List<T> target) throws PatchFailedException {
-        if (position > target.size() || last() > target.size()) {
-            throw new PatchFailedException("Incorrect Chunk: the position of chunk > target size");
-        }
-        for (int i = 0; i < size(); i++) {
-            if (!target.get(position + i).equals(lines.get(i))) {
-                throw new PatchFailedException(
-                        "Incorrect Chunk: the chunk content doesn't match the target");
-            }
-        }
-    }
-
-    /**
-     * @return the start position of chunk in the text
-     */
-    public int getPosition() {
-        return position;
-    }
-
-    /**
-     * @return the affected lines
-     */
-    public List<T> getLines() {
-        return lines;
-    }
-
-    public void setLines(List<T> lines) {
-        this.lines = lines;
-    }
-
-    public int size() {
-        return lines.size();
-    }
-
-    /**
-     * Returns the index of the last line of the chunk.
-     */
-    public int last() {
-        return getPosition() + size() - 1;
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((lines == null) ? 0 : lines.hashCode());
-        result = prime * result + position;
-        result = prime * result + size();
-        return result;
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        Chunk<T> other = (Chunk) obj;
-        if (lines == null) {
-            if (other.lines != null) {
-                return false;
-            }
-        } else if (!lines.equals(other.lines)) {
-            return false;
-        }
-        return position == other.position;
-    }
-
-    @Override
-    public String toString() {
-        return "[position: " + position + ", size: " + size() + ", lines: " + lines + "]";
-    }
-
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/DeleteDelta.java b/app/src/main/java/com/example/changedetection/diffs/patch/DeleteDelta.java
deleted file mode 100755
index 510e218..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/DeleteDelta.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import java.util.List;
-
-/**
- * Describes the delete-delta between original and revised texts.
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public final class DeleteDelta<T> extends Delta<T> {
-
-    /**
-     * Creates a change delta with the two given chunks.
-     *
-     * @param original The original chunk. Must not be {@code null}.
-     * @param revised  The original chunk. Must not be {@code null}.
-     */
-    public DeleteDelta(Chunk<T> original, Chunk<T> revised) {
-        super(DeltaType.DELETE, original, revised);
-    }
-
-    @Override
-    public void applyTo(List<T> target) throws PatchFailedException {
-        verify(target);
-        int position = getOriginal().getPosition();
-        int size = getOriginal().size();
-        for (int i = 0; i < size; i++) {
-            target.remove(position);
-        }
-    }
-
-    @Override
-    public void restore(List<T> target) {
-        int position = this.getRevised().getPosition();
-        List<T> lines = this.getOriginal().getLines();
-        for (int i = 0; i < lines.size(); i++) {
-            target.add(position + i, lines.get(i));
-        }
-    }
-
-    @Override
-    public String toString() {
-        return "[DeleteDelta, position: " + getOriginal().getPosition() + ", lines: "
-                + getOriginal().getLines() + "]";
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/Delta.java b/app/src/main/java/com/example/changedetection/diffs/patch/Delta.java
deleted file mode 100755
index 7911822..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/Delta.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import java.util.List;
-import java.util.Objects;
-
-/**
- * Describes the delta between original and revised texts.
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public abstract class Delta<T> {
-
-    private final DeltaType deltaType;
-    private final Chunk<T> original;
-    private final Chunk<T> revised;
-
-    /**
-     * Construct the delta for original and revised chunks
-     *
-     * @param original Chunk describing the original text. Must not be {@code null}.
-     * @param revised  Chunk describing the revised text. Must not be {@code null}.
-     */
-    public Delta(DeltaType deltaType, Chunk<T> original, Chunk<T> revised) {
-        Objects.requireNonNull(deltaType, "deltaType must not be null");
-        Objects.requireNonNull(original, "original must not be null");
-        Objects.requireNonNull(revised, "revised must not be null");
-
-        this.deltaType = deltaType;
-        this.original = original;
-        this.revised = revised;
-    }
-
-    /**
-     * Verifies that this delta can be used to patch the given text.
-     *
-     * @param target the text to patch.
-     * @throws PatchFailedException if the patch cannot be applied.
-     */
-    public void verify(List<T> target) throws PatchFailedException {
-        getOriginal().verify(target);
-    }
-
-    /**
-     * Applies this delta as the patch for a given target
-     *
-     * @param target the given target
-     * @throws PatchFailedException
-     */
-    public abstract void applyTo(List<T> target) throws PatchFailedException;
-
-    /**
-     * Cancel this delta for a given revised text. The action is opposite to patch.
-     *
-     * @param target the given revised text
-     */
-    public abstract void restore(List<T> target);
-
-    public final DeltaType getType() {
-        return deltaType;
-    }
-
-    /**
-     * @return The Chunk describing the original text.
-     */
-    public Chunk<T> getOriginal() {
-        return original;
-    }
-
-    /**
-     * @return The Chunk describing the revised text.
-     */
-    public Chunk<T> getRevised() {
-        return revised;
-    }
-
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((original == null) ? 0 : original.hashCode());
-        result = prime * result + ((revised == null) ? 0 : revised.hashCode());
-        return result;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        Delta<T> other = (Delta) obj;
-        if (original == null) {
-            if (other.original != null) {
-                return false;
-            }
-        } else if (!original.equals(other.original)) {
-            return false;
-        }
-        if (revised == null) {
-            return other.revised == null;
-        } else return revised.equals(other.revised);
-    }
-
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/DeltaType.java b/app/src/main/java/com/example/changedetection/diffs/patch/DeltaType.java
deleted file mode 100755
index ae1b6c0..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/DeltaType.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright 2017 java-diff-utils.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.example.changedetection.diffs.patch;
-
-/**
- * Specifies the type of the delta.
- */
-public enum DeltaType {
-    /**
-     * A change in the original.
-     */
-    CHANGE,
-    /**
-     * A delete from the original.
-     */
-    DELETE,
-    /**
-     * An insert into the original.
-     */
-    INSERT,
-    /**
-     * An do nothing.
-     */
-    EQUAL
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/DiffException.java b/app/src/main/java/com/example/changedetection/diffs/patch/DiffException.java
deleted file mode 100755
index ef2afa1..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/DiffException.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-/**
- * Base class for all exceptions emanating from this package.
- *
- * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
- */
-public class DiffException extends Exception {
-
-    private static final long serialVersionUID = 1L;
-
-    public DiffException() {
-    }
-
-    public DiffException(String msg) {
-        super(msg);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/InsertDelta.java b/app/src/main/java/com/example/changedetection/diffs/patch/InsertDelta.java
deleted file mode 100755
index 14b774f..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/InsertDelta.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import java.util.List;
-
-/**
- * Describes the add-delta between original and revised texts.
- *
- * @param T The type of the compared elements in the 'lines'.
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public final class InsertDelta<T> extends Delta<T> {
-
-    /**
-     * Creates an insert delta with the two given chunks.
-     *
-     * @param original The original chunk. Must not be {@code null}.
-     * @param revised  The original chunk. Must not be {@code null}.
-     */
-    public InsertDelta(Chunk<T> original, Chunk<T> revised) {
-        super(DeltaType.INSERT, original, revised);
-    }
-
-    @Override
-    public void applyTo(List<T> target) throws PatchFailedException {
-        verify(target);
-        int position = this.getOriginal().getPosition();
-        List<T> lines = this.getRevised().getLines();
-        for (int i = 0; i < lines.size(); i++) {
-            target.add(position + i, lines.get(i));
-        }
-    }
-
-    @Override
-    public void restore(List<T> target) {
-        int position = getRevised().getPosition();
-        int size = getRevised().size();
-        for (int i = 0; i < size; i++) {
-            target.remove(position);
-        }
-    }
-
-    @Override
-    public String toString() {
-        return "[InsertDelta, position: " + getOriginal().getPosition()
-                + ", lines: " + getRevised().getLines() + "]";
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/Patch.kt b/app/src/main/java/com/example/changedetection/diffs/patch/Patch.kt
deleted file mode 100644
index e14dc1b..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/Patch.kt
+++ /dev/null
@@ -1,114 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch
-
-import com.example.changedetection.diffs.algorithm.Change
-import com.example.changedetection.diffs.patch.DeltaType.DELETE
-import com.example.changedetection.diffs.patch.DeltaType.INSERT
-import java.util.*
-
-/**
- * Describes the patch holding all deltas between the original and revised texts.
- *
- * @author [Dmitry Naumenko](dm.naumenko@gmail.com)
- * @param T The type of the compared elements in the 'lines'.
- */
-class Patch<T> @JvmOverloads constructor(estimatedPatchSize: Int = 10) {
-
-    private val deltas_internal: MutableList<Delta<T>> = ArrayList(estimatedPatchSize)
-
-    /**
-     * Apply this patch to the given target
-     *
-     * @return the patched text
-     * @throws PatchFailedException if can't apply patch
-     */
-    @Throws(PatchFailedException::class)
-    fun applyTo(target: List<T>): List<T> {
-        val result = ArrayList(target)
-        val it = getDeltas().listIterator(deltas_internal.size)
-        while (it.hasPrevious()) {
-            val delta = it.previous()
-            delta.applyTo(result)
-        }
-        return result
-    }
-
-    /**
-     * Restore the text to original. Opposite to applyTo() method.
-     *
-     * @param target the given target
-     * @return the restored text
-     */
-    fun restore(target: List<T>): List<T> {
-        val result = ArrayList(target)
-        val it = getDeltas().listIterator(deltas_internal.size)
-        while (it.hasPrevious()) {
-            val delta = it.previous()
-            delta.restore(result)
-        }
-        return result
-    }
-
-    /**
-     * Add the given delta to this patch
-     *
-     * @param delta the given delta
-     */
-    fun addDelta(delta: Delta<T>) {
-        deltas_internal.add(delta)
-    }
-
-    /**
-     * Get the list of computed deltas
-     *
-     * @return the deltas
-     */
-    fun getDeltas(): List<Delta<T>> {
-        return deltas_internal.sortedBy { it.original.position }
-    }
-
-    override fun toString(): String {
-        return "Patch{" + "deltas=" + deltas_internal + '}'.toString()
-    }
-
-    companion object {
-
-        fun <T> generate(original: List<T>, revised: List<T>, changes: List<Change>): Patch<T> {
-            val patch = Patch<T>(changes.size)
-            for (change in changes) {
-                val orgChunk = Chunk(
-                    change.startOriginal,
-                    ArrayList(original.subList(change.startOriginal, change.endOriginal))
-                )
-                val revChunk = Chunk(
-                    change.startRevised,
-                    ArrayList(revised.subList(change.startRevised, change.endRevised))
-                )
-                when (change.deltaType) {
-                    DELETE -> patch.addDelta(DeleteDelta(orgChunk, revChunk))
-                    INSERT -> patch.addDelta(InsertDelta(orgChunk, revChunk))
-                    DeltaType.CHANGE -> patch.addDelta(ChangeDelta(orgChunk, revChunk))
-                }
-            }
-            return patch
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/patch/PatchFailedException.java b/app/src/main/java/com/example/changedetection/diffs/patch/PatchFailedException.java
deleted file mode 100755
index a313bf2..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/patch/PatchFailedException.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.patch;
-
-import com.example.changedetection.diffs.algorithm.DiffException;
-
-/**
- * Thrown whenever a delta cannot be applied as a patch to a given text.
- *
- * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
- */
-public class PatchFailedException extends DiffException {
-
-    private static final long serialVersionUID = 1L;
-
-    public PatchFailedException() {
-    }
-
-    public PatchFailedException(String msg) {
-        super(msg);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/text/DiffRow.java b/app/src/main/java/com/example/changedetection/diffs/text/DiffRow.java
deleted file mode 100755
index ebbd5a3..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/text/DiffRow.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.text;
-
-import java.io.Serializable;
-
-/**
- * Describes the diff row in form [tag, oldLine, newLine) for showing the difference between two texts
- *
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public final class DiffRow implements Serializable {
-
-    private final String oldLine;
-    private final String newLine;
-    private Tag tag;
-
-    public DiffRow(Tag tag, String oldLine, String newLine) {
-        this.tag = tag;
-        this.oldLine = oldLine;
-        this.newLine = newLine;
-    }
-
-    /**
-     * @return the tag
-     */
-    public Tag getTag() {
-        return tag;
-    }
-
-    /**
-     * @param tag the tag to set
-     */
-    public void setTag(Tag tag) {
-        this.tag = tag;
-    }
-
-    /**
-     * @return the oldLine
-     */
-    public String getOldLine() {
-        return oldLine;
-    }
-
-    /**
-     * @return the newLine
-     */
-    public String getNewLine() {
-        return newLine;
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((newLine == null) ? 0 : newLine.hashCode());
-        result = prime * result + ((oldLine == null) ? 0 : oldLine.hashCode());
-        result = prime * result + ((tag == null) ? 0 : tag.hashCode());
-        return result;
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj) {
-            return true;
-        }
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        DiffRow other = (DiffRow) obj;
-        if (newLine == null) {
-            if (other.newLine != null) {
-                return false;
-            }
-        } else if (!newLine.equals(other.newLine)) {
-            return false;
-        }
-        if (oldLine == null) {
-            if (other.oldLine != null) {
-                return false;
-            }
-        } else if (!oldLine.equals(other.oldLine)) {
-            return false;
-        }
-        if (tag == null) {
-            if (other.tag != null) {
-                return false;
-            }
-        } else if (!tag.equals(other.tag)) {
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    public String toString() {
-        return "[" + this.tag + "," + this.oldLine + "," + this.newLine + "]";
-    }
-
-    public enum Tag {
-        INSERT, DELETE, CHANGE, EQUAL
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/text/DiffRowGenerator.kt b/app/src/main/java/com/example/changedetection/diffs/text/DiffRowGenerator.kt
deleted file mode 100755
index 1de3a2c..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/text/DiffRowGenerator.kt
+++ /dev/null
@@ -1,473 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.text
-
-import com.example.changedetection.diffs.DiffUtils
-import com.example.changedetection.diffs.algorithm.DiffException
-import com.example.changedetection.diffs.patch.*
-import com.example.changedetection.diffs.text.DiffRow.Tag
-import java.util.*
-import java.util.regex.Pattern
-
-/**
- * This class for generating DiffRows for side-by-sidy view. You can customize the way of generating. For example, show
- * inline diffs on not, ignoring white spaces or/and blank lines and so on. All parameters for generating are optional.
- * If you do not specify them, the class will use the default values.
- *
- * These values are: showInlineDiffs = false; ignoreWhiteSpaces = true; ignoreBlankLines = true; ...
- *
- * For instantiating the DiffRowGenerator you should use the its builder. Like in example  `
- * DiffRowGenerator generator = new DiffRowGenerator.Builder().showInlineDiffs(true).
- * ignoreWhiteSpaces(true).columnWidth(100).build();
-` *
- */
-class DiffRowGenerator private constructor(builder: Builder) {
-
-    val showInlineDiffs: Boolean
-    val ignoreWhiteSpaces: Boolean
-    val oldTag: (Boolean) -> String
-    val newTag: (Boolean) -> String
-    val inlineDiffSplitter: (String) -> List<String>
-    val columnWidth: Int
-    val equalizer: (String, String) -> Boolean
-    val mergeOriginalRevised: Boolean
-    val reportLinesUnchanged: Boolean
-
-    /**
-     * This class used for building the DiffRowGenerator.
-     *
-     * @author dmitry
-     */
-    class Builder {
-
-        var showInlineDiffs = false
-        var ignoreWhiteSpaces = false
-        var oldTag = { f: Boolean -> if (f) "<span class=\"editOldInline\">" else "</span>" }
-        var newTag = { f: Boolean -> if (f) "<span class=\"editNewInline\">" else "</span>" }
-        var columnWidth = 0
-        var mergeOriginalRevised = false
-        var reportLinesUnchanged = false
-        var inlineDiffSplitter = SPLITTER_BY_CHARACTER
-
-        /**
-         * Show inline diffs in generating diff rows or not.
-         *
-         * @param val the value to set. Default: false.
-         * @return builder with configured showInlineDiff parameter
-         */
-        fun showInlineDiffs(`val`: Boolean): Builder {
-            showInlineDiffs = `val`
-            return this
-        }
-
-        /**
-         * Ignore white spaces in generating diff rows or not.
-         *
-         * @param val the value to set. Default: true.
-         * @return builder with configured ignoreWhiteSpaces parameter
-         */
-        fun ignoreWhiteSpaces(`val`: Boolean): Builder {
-            ignoreWhiteSpaces = `val`
-            return this
-        }
-
-        /**
-         * Give the originial old and new text lines to Diffrow without any additional processing.
-         *
-         * @param val the value to set. Default: false.
-         * @return builder with configured reportLinesUnWrapped parameter
-         */
-        fun reportLinesUnchanged(`val`: Boolean): Builder {
-            reportLinesUnchanged = `val`
-            return this
-        }
-
-        /**
-         * Generator for Old-Text-Tags.
-         *
-         * @param tag the tag to set. Without angle brackets. Default: span.
-         * @return builder with configured ignoreBlankLines parameter
-         */
-        fun oldTag(generator: (Boolean) -> String): Builder {
-            this.oldTag = generator
-            return this
-        }
-
-        /**
-         * Generator for New-Text-Tags.
-         *
-         * @param generator
-         * @return
-         */
-        fun newTag(generator: (Boolean) -> String): Builder {
-            this.newTag = generator
-            return this
-        }
-
-        /**
-         * Set the column with of generated lines of original and revised texts.
-         *
-         * @param width the width to set. Making it < 0 doesn't have any sense. Default 80. @return builder with config
-         * ured ignoreBlankLines parameter
-         */
-        fun columnWidth(width: Int): Builder {
-            if (width >= 0) {
-                columnWidth = width
-            }
-            return this
-        }
-
-        /**
-         * Build the DiffRowGenerator. If some parameters is not set, the default values are used.
-         *
-         * @return the customized DiffRowGenerator
-         */
-        fun build(): DiffRowGenerator {
-            return DiffRowGenerator(this)
-        }
-
-        /**
-         * Merge the complete result within the original text. This makes sense for one line display.
-         *
-         * @param mergeOriginalRevised
-         * @return
-         */
-        fun mergeOriginalRevised(mergeOriginalRevised: Boolean): Builder {
-            this.mergeOriginalRevised = mergeOriginalRevised
-            return this
-        }
-
-        /**
-         * Per default each character is separatly processed. This variant introduces processing by word, which should
-         * deliver no in word changes.
-         */
-        fun inlineDiffByWord(inlineDiffByWord: Boolean): Builder {
-            inlineDiffSplitter = if (inlineDiffByWord) SPLITTER_BY_WORD else SPLITTER_BY_CHARACTER
-            return this
-        }
-
-
-        fun inlineDiffBySplitter(inlineDiffSplitter: (String) -> List<String>): Builder {
-            this.inlineDiffSplitter = inlineDiffSplitter
-            return this
-        }
-    }
-
-    init {
-        showInlineDiffs = builder.showInlineDiffs
-        ignoreWhiteSpaces = builder.ignoreWhiteSpaces
-        oldTag = builder.oldTag
-        newTag = builder.newTag
-        columnWidth = builder.columnWidth
-        mergeOriginalRevised = builder.mergeOriginalRevised
-        inlineDiffSplitter = builder.inlineDiffSplitter
-        equalizer = if (ignoreWhiteSpaces) IGNORE_WHITESPACE_EQUALIZER else DEFAULT_EQUALIZER
-        reportLinesUnchanged = builder.reportLinesUnchanged
-
-        Objects.requireNonNull(inlineDiffSplitter)
-    }
-
-    /**
-     * Get the DiffRows describing the difference between original and revised texts using the given patch. Useful for
-     * displaying side-by-side diff.
-     *
-     * @param original the original text
-     * @param revised the revised text
-     * @return the DiffRows between original and revised texts
-     */
-    @Throws(DiffException::class)
-    fun generateDiffRows(original: List<String>, revised: List<String>): List<DiffRow> {
-        return generateDiffRows(original, DiffUtils.diff(original, revised, equalizer))
-    }
-
-    private fun preprocessLine(line: String): String {
-        return if (columnWidth == 0) {
-            StringUtils.normalize(line)
-        } else {
-            StringUtils.wrapText(StringUtils.normalize(line), columnWidth)
-        }
-    }
-
-    private fun buildDiffRow(type: Tag, orgline: String, newline: String): DiffRow {
-        if (reportLinesUnchanged) {
-            return DiffRow(type, orgline, newline)
-        } else {
-            var wrapOrg = preprocessLine(orgline)
-            if (Tag.DELETE == type) {
-                if (mergeOriginalRevised || showInlineDiffs) {
-                    wrapOrg = oldTag.invoke(true) + wrapOrg + oldTag.invoke(false)
-                }
-            }
-            var wrapNew = preprocessLine(newline)
-            if (Tag.INSERT == type) {
-                if (mergeOriginalRevised) {
-                    wrapOrg = newTag.invoke(true) + wrapNew + newTag.invoke(false)
-                } else if (showInlineDiffs) {
-                    wrapNew = newTag.invoke(true) + wrapNew + newTag.invoke(false)
-                }
-            }
-            return DiffRow(type, wrapOrg, wrapNew)
-        }
-    }
-
-    private fun buildDiffRowWithoutNormalizing(
-        type: Tag,
-        orgline: String,
-        newline: String
-    ): DiffRow {
-        return DiffRow(
-            type,
-            StringUtils.wrapText(orgline, columnWidth),
-            StringUtils.wrapText(newline, columnWidth)
-        )
-    }
-
-    /**
-     * Generates the DiffRows describing the difference between original and revised texts using the given patch. Useful
-     * for displaying side-by-side diff.
-     *
-     * @param original the original text
-     * @param revised the revised text
-     * @param patch the given patch
-     * @return the DiffRows between original and revised texts
-     */
-    @Throws(DiffException::class)
-    fun generateDiffRows(original: List<String>, patch: Patch<String>): List<DiffRow> {
-        val diffRows = mutableListOf<DiffRow>()
-        var endPos = 0
-        val deltaList = patch.getDeltas()
-        for (i in deltaList.indices) {
-            val delta = deltaList[i]
-            val orig = delta.original
-            val rev = delta.revised
-
-            original.subList(endPos, orig.position).forEach { line ->
-                diffRows.add(buildDiffRow(Tag.EQUAL, line, line))
-            }
-
-            // Inserted DiffRow
-            if (delta is InsertDelta<*>) {
-                endPos = orig.last() + 1
-                for (line in rev.lines as List<String>) {
-                    diffRows.add(buildDiffRow(Tag.INSERT, "", line))
-                }
-                continue
-            }
-
-            // Deleted DiffRow
-            if (delta is DeleteDelta<*>) {
-                endPos = orig.last() + 1
-                for (line in orig.lines as List<String>) {
-                    diffRows.add(buildDiffRow(Tag.DELETE, line, ""))
-                }
-                continue
-            }
-
-            if (showInlineDiffs) {
-                diffRows.addAll(generateInlineDiffs(delta))
-            } else {
-                for (j in 0 until Math.max(orig.size(), rev.size())) {
-                    diffRows.add(
-                        buildDiffRow(
-                            Tag.CHANGE,
-                            if (orig.lines.size > j) orig.lines[j] else "",
-                            if (rev.lines.size > j) rev.lines[j] else ""
-                        )
-                    )
-                }
-            }
-            endPos = orig.last() + 1
-        }
-
-        // Copy the final matching chunk if any.
-        for (line in original.subList(endPos, original.size)) {
-            diffRows.add(buildDiffRow(Tag.EQUAL, line, line))
-        }
-        return diffRows
-    }
-
-    /**
-     * Add the inline diffs for given delta
-     *
-     * @param delta the given delta
-     */
-    @Throws(DiffException::class)
-    private fun generateInlineDiffs(delta: Delta<String>): List<DiffRow> {
-        val orig = StringUtils.normalize(delta.original.lines)
-        val rev = StringUtils.normalize(delta.revised.lines)
-        val origList: MutableList<String>
-        val revList: MutableList<String>
-        val joinedOrig = orig.joinToString("\n")
-        val joinedRev = rev.joinToString("\n")
-
-        origList = inlineDiffSplitter.invoke(joinedOrig).toMutableList()
-        revList = inlineDiffSplitter.invoke(joinedRev).toMutableList()
-
-        val inlineDeltas = DiffUtils.diff(origList, revList).getDeltas().asReversed()
-
-        for (inlineDelta in inlineDeltas) {
-            val inlineOrig = inlineDelta.original
-            val inlineRev = inlineDelta.revised
-            if (inlineDelta is DeleteDelta<*>) {
-                wrapInTag(
-                    origList, inlineOrig.position, inlineOrig
-                        .position
-                            + inlineOrig.size() + 1, oldTag
-                )
-            } else if (inlineDelta is InsertDelta<*>) {
-                if (mergeOriginalRevised) {
-                    origList.addAll(
-                        inlineOrig.position,
-                        revList.subList(inlineRev.position, inlineRev.position + inlineRev.size())
-                    )
-                    wrapInTag(
-                        origList, inlineOrig.position, inlineOrig.position
-                                + inlineRev.size() + 1, newTag
-                    )
-                } else {
-                    wrapInTag(
-                        revList, inlineRev.position, inlineRev.position
-                                + inlineRev.size() + 1, newTag
-                    )
-                }
-            } else if (inlineDelta is ChangeDelta<*>) {
-                if (mergeOriginalRevised) {
-                    origList.addAll(
-                        inlineOrig.position + inlineOrig.size(),
-                        revList.subList(inlineRev.position, inlineRev.position + inlineRev.size())
-                    )
-                    wrapInTag(
-                        origList,
-                        inlineOrig.position + inlineOrig.size(),
-                        inlineOrig.position + inlineOrig.size()
-                                + inlineRev.size() + 1,
-                        newTag
-                    )
-                } else {
-                    wrapInTag(
-                        revList, inlineRev.position, inlineRev.position
-                                + inlineRev.size() + 1, newTag
-                    )
-                }
-                wrapInTag(
-                    origList, inlineOrig.position, inlineOrig
-                        .position
-                            + inlineOrig.size() + 1, oldTag
-                )
-            }
-        }
-        val origResult = StringBuilder()
-        val revResult = StringBuilder()
-        for (character in origList) {
-            origResult.append(character)
-        }
-        for (character in revList) {
-            revResult.append(character)
-        }
-
-        val original =
-            Arrays.asList(*origResult.toString().split("\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())
-        val revised =
-            Arrays.asList(*revResult.toString().split("\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())
-        val diffRows = ArrayList<DiffRow>()
-        for (j in 0 until Math.max(original.size, revised.size)) {
-            diffRows.add(
-                buildDiffRowWithoutNormalizing(
-                    Tag.CHANGE,
-                    if (original.size > j) original[j] else "",
-                    if (revised.size > j) revised[j] else ""
-                )
-            )
-        }
-        return diffRows
-    }
-
-    companion object {
-        val SPLIT_BY_WORD_PATTERN = Pattern.compile("\\s+|[,.\\[\\](){}/\\\\*+\\-#]")
-
-        val IGNORE_WHITESPACE_EQUALIZER = { original: String, revised: String ->
-            original.trim({ it <= ' ' }).replace(
-                "\\s+".toRegex(),
-                " "
-            ) == revised.trim({ it <= ' ' }).replace("\\s+".toRegex(), " ")
-        }
-
-        val DEFAULT_EQUALIZER = { obj1: String, obj2: String -> obj1 == obj2 }
-
-        /**
-         * Splitting lines by word to achieve word by word diff checking.
-         */
-        val SPLITTER_BY_WORD =
-            { line: String -> splitStringPreserveDelimiter(line, SPLIT_BY_WORD_PATTERN) }
-
-        /**
-         * Splitting lines by character to achieve char by char diff checking.
-         */
-        val SPLITTER_BY_CHARACTER = { line: String ->
-            val list = ArrayList<String>(line.length)
-            for (character in line.toCharArray()) {
-                list.add(character!!.toString())
-            }
-            list.toList()
-        }
-
-        fun create(): Builder {
-            return Builder()
-        }
-
-        /**
-         * Wrap the elements in the sequence with the given tag
-         *
-         * @param startPosition the position from which tag should start. The counting start from a zero.
-         * @param endPosition the position before which tag should should be closed.
-         * @param tag the tag name without angle brackets, just a word
-         * @param cssClass the optional css class
-         */
-        fun wrapInTag(
-            sequence: MutableList<String>, startPosition: Int,
-            endPosition: Int, generator: (Boolean) -> String
-        ) {
-            sequence.add(startPosition, generator.invoke(true))
-            sequence.add(endPosition, generator.invoke(false))
-        }
-
-        protected fun splitStringPreserveDelimiter(
-            str: String?,
-            SPLIT_PATTERN: Pattern
-        ): List<String> {
-            val list = ArrayList<String>()
-            if (str != null) {
-                val matcher = SPLIT_PATTERN.matcher(str)
-                var pos = 0
-                while (matcher.find()) {
-                    if (pos < matcher.start()) {
-                        list.add(str.substring(pos, matcher.start()))
-                    }
-                    list.add(matcher.group())
-                    pos = matcher.end()
-                }
-                if (pos < str.length) {
-                    list.add(str.substring(pos))
-                }
-            }
-            return list
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/diffs/text/StringUtils.kt b/app/src/main/java/com/example/changedetection/diffs/text/StringUtils.kt
deleted file mode 100644
index 236e1ac..0000000
--- a/app/src/main/java/com/example/changedetection/diffs/text/StringUtils.kt
+++ /dev/null
@@ -1,75 +0,0 @@
-/*-
- * #%L
- * java-diff-utils
- * %%
- * Copyright (C) 2009 - 2017 java-diff-utils
- * %%
- * Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-     http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
- * #L%
- */
-package com.example.changedetection.diffs.text
-
-internal object StringUtils {
-
-    /**
-     * Replaces all opening an closing tags with `<` or `>`.
-     *
-     * @param str
-     * @return
-     */
-    fun htmlEntites(str: String): String {
-        return str.replace("<", "&lt;").replace(">", "&gt;")
-    }
-
-    fun normalize(str: String): String {
-        return htmlEntites(str).replace("\t", "    ")
-    }
-
-    fun normalize(list: List<String>): List<String> {
-        return list.map { normalize(it) }
-    }
-
-    fun wrapText(list: List<String>, columnWidth: Int): List<String> {
-        return list.map { line -> wrapText(line, columnWidth) }
-    }
-
-    /**
-     * Wrap the text with the given column width
-     *
-     * @param line the text
-     * @param columnWidth the given column
-     * @return the wrapped text
-     */
-    fun wrapText(line: String, columnWidth: Int): String {
-        if (columnWidth < 0) {
-            throw IllegalArgumentException("columnWidth may not be less 0")
-        }
-        if (columnWidth == 0) {
-            return line
-        }
-        val length = line.length
-        val delimiter = "<br/>".length
-        var widthIndex = columnWidth
-
-        val b = StringBuilder(line)
-
-        var count = 0
-        while (length > widthIndex) {
-            b.insert(widthIndex + delimiter * count, "<br/>")
-            widthIndex += columnWidth
-            count++
-        }
-
-        return b.toString()
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/forms/EmptyAdapter.kt b/app/src/main/java/com/example/changedetection/forms/EmptyAdapter.kt
deleted file mode 100644
index 87cd5f4..0000000
--- a/app/src/main/java/com/example/changedetection/forms/EmptyAdapter.kt
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.example.changedetection.forms
-
-import android.support.v7.widget.RecyclerView
-import android.view.View
-import com.example.changedetection.R
-import com.mikepenz.fastadapter.items.AbstractItem
-
-internal open class EmptyAdapter : AbstractItem<EmptyAdapter, RecyclerView.ViewHolder>() {
-    open val kind = 0
-    open val isSection = false
-
-    override fun getType(): Int = kind
-
-    override fun getViewHolder(v: View): RecyclerView.ViewHolder = ViewHolderSeparator(v)
-
-    override fun getLayoutRes(): Int = R.layout.rowdrigo_section
-
-    internal class ViewHolderSeparator constructor(v: View) : RecyclerView.ViewHolder(v)
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDateAndBirthday.kt b/app/src/main/java/com/example/changedetection/forms/FormDateAndBirthday.kt
deleted file mode 100644
index b70116b..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDateAndBirthday.kt
+++ /dev/null
@@ -1,162 +0,0 @@
-package com.example.changedetection.forms
-
-import android.app.FragmentManager
-import android.support.v7.widget.AppCompatEditText
-import android.support.v7.widget.RecyclerView
-import android.text.InputType
-import android.view.View
-import android.widget.ImageView
-import android.widget.TextView
-import com.example.changedetection.R
-import com.wdullaer.materialdatetimepicker.date.DatePickerDialog
-import java.util.*
-
-internal class FormDateAndBirthday(
-    val nome: String,
-    override val kind: Int,
-    val additional: Any? = null,
-    val isEditing: Boolean = false
-) :
-    EmptyAdapter() {
-    var primarytext = ""
-    var visibleHolder: RecyclerView.ViewHolder? = null
-
-    override fun getType(): Int = kind
-
-    override fun getViewHolder(v: View) = ViewHolderNonExpanding(v)
-
-    override fun getLayoutRes(): Int = R.layout.eureka_single_edittext
-
-    var selectedcache = arrayOf<Int>()
-
-    override fun detachFromWindow(holder: RecyclerView.ViewHolder) {
-        if (holder is ViewHolderNonExpanding) {
-            primarytext = holder.nome.text.toString()
-        }
-        super.detachFromWindow(holder)
-    }
-
-    var datecache = GregorianCalendar.getInstance()
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-        val holder = holder as ViewHolderNonExpanding
-        visibleHolder = holder
-        extensions.setImage(holder.whatsappimage, kind)
-        holder.delete.visibility = View.GONE
-
-        when (kind) {
-            FormConstants.ibirthday, FormConstants.imeetingscheduledate -> {
-                holder.nome.apply {
-                    inputType = InputType.TYPE_CLASS_TEXT
-                    hint = if (kind == FormConstants.imeetingscheduledate) {
-                        "selecione"
-                    } else {
-                        "data de nascimento"
-                    }
-                    isFocusable = false
-                }
-
-                var now = GregorianCalendar.getInstance()
-
-                (additional as? Pair<FragmentManager, Calendar>)?.second?.let {
-                    now = it
-
-                    if (kind == FormConstants.imeetingscheduledate || isEditing) {
-                        val date: String =
-                            String.format(
-                                "%02d",
-                                now.get(Calendar.DAY_OF_MONTH)
-                            ) + "/" + String.format(
-                                "%02d",
-                                now.get(Calendar.MONTH) + 1
-                            ) + "/" + now.get(Calendar.YEAR)
-                        holder.nome.setText(date, TextView.BufferType.EDITABLE)
-                        datecache = now
-                    }
-                }
-
-                val dpd = DatePickerDialog.newInstance(
-                    { _, year, monthOfYear, dayOfMonth ->
-                        val date: String = String.format("%02d", dayOfMonth) + "/" + String.format(
-                            "%02d",
-                            monthOfYear + 1
-                        ) + "/" + year
-                        holder.nome.setText(date, TextView.BufferType.EDITABLE)
-//                        primarytext = date
-                        datecache.set(year, monthOfYear, dayOfMonth)
-                    },
-                    now.get(Calendar.YEAR),
-                    now.get(Calendar.MONTH),
-                    now.get(Calendar.DAY_OF_MONTH)
-                )
-
-                if (kind == FormConstants.ibirthday) {
-                    dpd.showYearPickerFirst(true)
-                }
-                dpd.vibrate(false)
-
-                holder.nome.setOnClickListener {
-                    (additional as? Pair<FragmentManager, Calendar>)?.first?.let {
-                        dpd.show(it, "Datepickerdialog")
-                    }
-                }
-            }
-            else -> {
-            }
-        }
-    }
-
-    internal fun retrieveText(): String? {
-        val txtfrombind = (visibleHolder as? ViewHolderNonExpanding)?.let {
-            val finalstring = it.nome.text.toString()
-                .replace(Regex("\\s+"), " ")
-                .trim()
-
-            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-                return@let finalstring
-            } else {
-                return@let null
-            }
-        }
-
-        if (txtfrombind == null) {
-            val finalstring = nome
-                .replace(Regex("\\s+"), " ")
-                .trim()
-
-            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-                return finalstring
-            } else {
-                if (isEditing && additional != null) {
-                    (additional as? Pair<FragmentManager, Calendar>)?.second?.let {
-                        val now = it
-                        return String.format(
-                            "%02d",
-                            now.get(Calendar.DAY_OF_MONTH)
-                        ) + "/" + String.format(
-                            "%02d",
-                            now.get(Calendar.MONTH) + 1
-                        ) + "/" + now.get(Calendar.YEAR)
-                    }
-                }
-            }
-            return null
-        }
-        return txtfrombind
-    }
-
-    internal fun retrieveDate(): Calendar? {
-        return datecache
-    }
-
-    internal fun retrieveSelected(): Array<Int> {
-        return selectedcache
-    }
-
-    internal class ViewHolderNonExpanding constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal val nome: AppCompatEditText = v.findViewById(R.id.nome)
-        internal var whatsappimage: ImageView = v.findViewById(R.id.imageView)
-        internal val delete: ImageView = v.findViewById(R.id.delete)
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDecAddress.kt b/app/src/main/java/com/example/changedetection/forms/FormDecAddress.kt
deleted file mode 100644
index a0069c5..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDecAddress.kt
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.example.changedetection.forms
-
-import android.support.v7.widget.RecyclerView
-import android.text.Editable
-import android.view.View
-import android.widget.EditText
-import android.widget.ImageView
-import com.example.changedetection.R
-
-internal class FormDecAddress(
-    val map2: MutableMap<String, Editable>,
-    override val kind: Int = FormConstants.iaddress
-) :
-    EmptyAdapter() {
-    var visibleHolder: RecyclerView.ViewHolder? = null
-    var cache = map2
-
-    override fun getType(): Int = kind
-
-    override fun getViewHolder(v: View): RecyclerView.ViewHolder = ViewHolderAddress(v)
-
-    override fun getLayoutRes(): Int = R.layout.eureka_endereco_completo
-
-    override fun detachFromWindow(holder: RecyclerView.ViewHolder) {
-        if (holder is ViewHolderAddress) {
-            mutableMapOf<String, Editable>().apply {
-                this["bairro"] = holder.bairro.text
-                this["rua"] = holder.rua.text
-                this["cep"] = holder.cep.text
-                this["cidade"] = holder.cidade.text
-                this["complemento"] = holder.complemento.text
-                this["numero"] = holder.numero.text
-                cache = this
-            }
-        }
-        super.detachFromWindow(holder)
-    }
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-
-        val holder = holder as ViewHolderAddress
-        cache.let {
-            holder.rua.text = it["rua"]
-            holder.bairro.text = it["bairro"]
-            holder.cep.text = it["cep"]
-            holder.cidade.text = it["cidade"]
-            holder.numero.text = it["numero"]
-            holder.complemento.text = it["complemento"]
-        }
-        visibleHolder = holder
-        extensions.setImage(holder.whatsappimage, kind)
-    }
-
-    internal class ViewHolderAddress constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal var whatsappimage: ImageView = v.findViewById(R.id.imageView)
-        internal val rua: EditText = v.findViewById(R.id.nome)
-        internal val cep: EditText = v.findViewById(R.id.cep)
-        internal val bairro: EditText = v.findViewById(R.id.bairro)
-        internal val cidade: EditText = v.findViewById(R.id.cidade)
-        internal val complemento: EditText = v.findViewById(R.id.complemento)
-        internal val numero: EditText = v.findViewById(R.id.numero)
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDecExpands.kt b/app/src/main/java/com/example/changedetection/forms/FormDecExpands.kt
deleted file mode 100644
index 16dddf2..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDecExpands.kt
+++ /dev/null
@@ -1,113 +0,0 @@
-package com.example.changedetection.forms
-
-import android.support.v7.widget.RecyclerView
-import android.text.Editable
-import android.text.InputType
-import android.view.View
-import android.widget.EditText
-import android.widget.ImageView
-import com.example.changedetection.R
-
-internal class FormDecExpands(
-    val nome: String,
-    override val kind: Int
-) :
-    EmptyAdapter() {
-    var primarytext = ""
-    var visibleHolder: RecyclerView.ViewHolder? = null
-
-    override fun getType(): Int = kind
-
-    override fun getViewHolder(v: View): RecyclerView.ViewHolder =
-        ViewHolderSimpleExpands(v)
-
-    override fun getLayoutRes(): Int = R.layout.eureka_single_edittext
-
-    override fun detachFromWindow(holder: RecyclerView.ViewHolder) {
-        if (holder is ViewHolderSimpleExpands) {
-            primarytext = holder.nome.text.toString()
-        }
-        super.detachFromWindow(holder)
-    }
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-        val holder = holder as ViewHolderSimpleExpands
-        visibleHolder = holder
-        extensions.setImage(holder.whatsappimage, kind)
-        extensions.setDelete(holder.delete)
-
-        when (kind) {
-            FormConstants.iphone -> { // Phone
-                holder.nome.apply {
-                    text = Editable.Factory.getInstance().newEditable(primarytext)
-                    inputType = InputType.TYPE_CLASS_PHONE
-                    hint = "telefone"
-                }
-            }
-            FormConstants.iemail -> { // Email
-                holder.nome.apply {
-                    text = Editable.Factory.getInstance().newEditable(primarytext)
-                    inputType = InputType.TYPE_CLASS_TEXT
-                    hint = "email"
-                }
-            }
-            FormConstants.isons -> { // Filhos
-                holder.nome.apply {
-                    text = Editable.Factory.getInstance().newEditable(primarytext)
-                    inputType = InputType.TYPE_CLASS_TEXT
-                    hint = "filhos"
-                }
-            }
-            else -> {
-            }
-        }
-    }
-//
-//    internal fun retrieveText(): String? {
-//        return (visibleHolder as? ViewHolderSimpleExpands)?.let {
-//            val finalstring = it.nome.text.toString()
-//                .replace(Regex("\\s+"), " ")
-//                .trim()
-//
-//            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-//                return@let finalstring
-//            } else {
-//                return@let null
-//            }
-//        }
-//    }
-
-    internal fun retrieveText(): String? {
-        val txtfrombind = (visibleHolder as? ViewHolderSimpleExpands)?.let {
-            val finalstring = it.nome.text.toString()
-                .replace(Regex("\\s+"), " ")
-                .trim()
-
-            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-                return@let finalstring
-            } else {
-                return@let null
-            }
-        }
-
-        if (txtfrombind == null) {
-            val finalstring = nome
-                .replace(Regex("\\s+"), " ")
-                .trim()
-
-            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-                return finalstring
-            } else {
-                return null
-            }
-        }
-        return txtfrombind
-    }
-
-    internal class ViewHolderSimpleExpands constructor(v: View) : RecyclerView.ViewHolder(v) {
-        internal var whatsappimage: ImageView = v.findViewById(R.id.imageView)
-        internal val nome: EditText = v.findViewById(R.id.nome)
-        internal val delete: ImageView = v.findViewById(R.id.delete)
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDecIsMember.kt b/app/src/main/java/com/example/changedetection/forms/FormDecIsMember.kt
deleted file mode 100644
index 868cb13..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDecIsMember.kt
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.example.changedetection.forms
-
-import android.arch.lifecycle.MutableLiveData
-import android.support.v7.widget.RecyclerView
-import android.view.View
-import com.example.changedetection.R
-import kotlinx.android.synthetic.main.eureka_single_yes_or_no.view.*
-
-internal class FormDecIsMember(
-    override val kind: Int,
-    val ismemberinit: Boolean,
-    val live: MutableLiveData<Boolean>
-) :
-    EmptyAdapter() {
-    var ismemberinternal = ismemberinit
-    var visibleHolder: RecyclerView.ViewHolder? = null
-
-    override fun getType(): Int = kind
-
-    override fun getViewHolder(v: View) = ViewHolderYesOrNo(v)
-
-    override fun getLayoutRes(): Int = R.layout.eureka_single_yes_or_no
-
-    override fun detachFromWindow(holder: RecyclerView.ViewHolder) {
-        if (holder is ViewHolderYesOrNo) {
-            ismemberinternal = holder.yes.isChecked
-        }
-        super.detachFromWindow(holder)
-    }
-
-    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-        super.bindView(holder, payloads)
-        val holder = holder as ViewHolderYesOrNo
-        visibleHolder = holder
-        extensions.setImage(holder.imageview, kind)
-        if (ismemberinternal) {
-            holder.yes.isChecked = true
-            holder.no.isChecked = false
-        } else {
-            holder.yes.isChecked = false
-            holder.no.isChecked = true
-        }
-
-        holder.radiogroup.setOnCheckedChangeListener { group, checkedId ->
-            live.value = holder.yes.isChecked
-        }
-
-//        extensions.setImage(holder.whatsappimage, kind)
-
-//        holder.delete.visibility = View.GONE
-//        holder.rua.apply {
-//            text = extensions.setTextFromCacheOrFunction(primarytext, rua)
-//            primarytext = this.text.toString()
-//            inputType = InputType.TYPE_CLASS_TEXT
-//            hint = "Nome completo"
-//        }
-    }
-
-    fun isYesSelected(): Boolean {
-        return (visibleHolder as? ViewHolderYesOrNo)?.let {
-            return@let it.yes.isChecked
-        } ?: false
-    }
-
-    internal class ViewHolderYesOrNo constructor(v: View) : RecyclerView.ViewHolder(v) {
-        //        internal val rua: AppCompatEditText = v.rua
-        internal val imageview = v.imageView
-        internal val radiogroup = v.radiogroup
-        internal val yes = v.radiogroup.yes
-        internal val no = v.radiogroup.no
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDialogHost.kt b/app/src/main/java/com/example/changedetection/forms/FormDialogHost.kt
deleted file mode 100644
index a699101..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDialogHost.kt
+++ /dev/null
@@ -1,199 +0,0 @@
-//package com.example.openattendance.forms
-//
-//import android.arch.lifecycle.MutableLiveData
-//import android.support.v7.widget.*
-//import android.text.InputType
-//import android.view.View
-//import android.widget.ImageView
-//import android.widget.TextView
-//import com.example.openattendance.R
-//import com.afollestad.materialdialogs.MaterialDialog
-//import com.example.openattendance.PrimitiveAbstractItem
-//import com.example.openattendance.pesquisarHospedeiro
-//import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-//import com.orhanobut.logger.Logger
-//
-//internal class FormDialogHost(
-//    val nome: String,
-//    val id: String,
-//    override val kind: Int,
-//    val viewModel: SharedEscato,
-//    val changedall: MutableLiveData<MutableMap<String, *>>
-//) :
-//    EmptyAdapter() {
-//    var visibleHolder: RecyclerView.ViewHolder? = null
-//    var currentId = id
-//    var primarytext = nome
-//
-//    override fun getType(): Int = kind
-//
-//    override fun getViewHolder(v: View) = ViewHolderNonExpanding(v)
-//
-//    override fun getLayoutRes(): Int = R.layout.eureka_single_edittext
-//
-//    var selectedcache = arrayOf<Int>()
-//
-//    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-//        super.bindView(holder, payloads)
-//        val holder = holder as ViewHolderNonExpanding
-//        visibleHolder = holder
-//        extensions.setImage(holder.whatsappimage, kind)
-//        holder.delete.visibility = View.GONE
-//
-//        when (kind) {
-////            FormConstants.iname, FormConstants.url, FormConstants.ipreletor, FormConstants.isinglephone -> { // FULL NAME
-////                holder.nome.apply {
-////                    text = extensions.setTextFromCacheOrFunction(primarytext, nome)
-////                    primarytext = this.text.toString()
-////                    inputType = InputType.TYPE_CLASS_TEXT
-////                    hint = FormConstants.hintNames[kind]
-////                }
-////            }
-//            FormConstants.url -> {
-//                holder.nome.apply {
-//                    text = extensions.setTextFromCacheOrFunction(primarytext, nome)
-//                    inputType = InputType.TYPE_CLASS_TEXT
-//                    hint = "selecione o hospedeiro"
-//                    isFocusable = false
-//                }
-//
-//                holder.nome.setOnClickListener {
-//
-//                    val materialdialogpiece = MaterialDialog.Builder(holder.nome.context)
-//                        .title("Selecionar hospedeiro")
-//                        .customView(R.layout.dialog_customview_search, false)
-//                        .negativeText("Cancelar")
-//                        .positiveText("Confirmar")
-//                        .onPositive { dialog, _ ->
-//
-//                            val text = dialog.customView?.findViewById<SearchView>(R.id.searchview)
-//                                ?.query.toString()
-//                            changedall.value = mutableMapOf<String, Any>().apply {
-//                                this["id"] = ""
-//                                this["name"] = text
-//                            }
-//                            currentId = ""
-//                            primarytext = text
-//                            holder.nome.setText(text, TextView.BufferType.EDITABLE)
-//                        }
-//
-//                    val materialdialog = materialdialogpiece.build()
-//
-//                    val fastFA2 = FastItemAdapter<PrimitiveAbstractItem>()
-//                    fastFA2.withOnClickListener { v, adapter, item, position ->
-//                        changedall.value =
-//                                (viewModel.repo.usersCache[item.stru.id]?.get("address") as? MutableMap<String, Any>
-//                                        ?: mutableMapOf<String, Any>()).apply {
-//                                    this["id"] = item.stru.id
-//                                    this["name"] = item.stru.name
-//                                }
-//                        currentId = item.stru.id
-//                        primarytext = item.stru.name
-//                        holder.nome.setText(item.stru.name, TextView.BufferType.EDITABLE)
-//                        materialdialog.dismiss()
-//                        true
-//                    }
-//
-//                    materialdialog.customView?.findViewById<ImageView>(R.id.savecontent)?.apply {
-//                        this.visibility = View.GONE
-//                    }
-//
-//                    val mSearchView =
-//                        materialdialog.customView?.findViewById<SearchView>(R.id.searchview)
-//                    mSearchView?.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
-//                        override fun onQueryTextSubmit(query: String?): Boolean {
-//                            return true
-//                        }
-//
-//                        override fun onQueryTextChange(newText: String?): Boolean {
-//                            val searchText = newText ?: ""
-//                            fastFA2.filter(searchText)
-//                            fastFA2.itemFilter.withFilterPredicate { item, constraint ->
-//                                if (item.stru is pesquisarHospedeiro) {
-//                                    return@withFilterPredicate item.stru.name.toLowerCase().contains(
-//                                        constraint.toString().toLowerCase()
-//                                    ) ||
-//                                            item.stru.address.toLowerCase().contains(constraint.toString().toLowerCase())
-//                                }
-//                                return@withFilterPredicate false
-//                            }
-//
-//                            return true
-//                        }
-//                    })
-//
-//                    val recycler =
-//                        materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)
-//                    recycler?.apply {
-//                        layoutManager = LinearLayoutManager(this.context)
-//                        adapter = fastFA2
-//                        itemAnimator = DefaultItemAnimator()
-//                    }
-//
-//                    fastFA2.apply {
-//                        this.clear()
-//                        viewModel.repo.usersCache.forEach {
-//                            Logger.d("pretty name: " + it.value["name"] as? String)
-//
-//                            val stringbuilder =
-//                                objectHelper.addressToString(it.value["address"] as? MutableMap<*, *>)
-//                            this.add(
-//                                PrimitiveAbstractItem(
-//                                    pesquisarHospedeiro(
-//                                        it.value["name"] as? String ?: "",
-//                                        it.key,
-//                                        stringbuilder
-//                                    )
-//                                )
-//                            )
-//                        }
-//                        sort(this)
-//                    }
-//
-//                    materialdialog.show()
-//                }
-//            }
-//            else -> {
-//
-//            }
-//        }
-//    }
-//
-//
-//    private fun sort(fastFA: FastItemAdapter<PrimitiveAbstractItem>) {
-//        // starred: true > false
-//        fastFA.adapterItems.sortWith(compareBy<PrimitiveAbstractItem> { it.stru.name })
-//    }
-//
-//    internal fun retrieveText(): String? {
-//        val txtfrombind = (visibleHolder as? ViewHolderNonExpanding)?.let {
-//            val finalstring = it.nome.text.toString()
-//                .replace(Regex("\\s+"), " ")
-//                .trim()
-//
-//            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-//                return@let finalstring
-//            } else {
-//                return@let null
-//            }
-//        }
-//
-//        if (txtfrombind == null) {
-//            val finalstring = nome
-//                .replace(Regex("\\s+"), " ")
-//                .trim()
-//            return null
-//        }
-//        return txtfrombind
-//    }
-//
-//    internal fun retrieveSelected(): Array<Int> {
-//        return selectedcache
-//    }
-//
-//    internal class ViewHolderNonExpanding constructor(v: View) : RecyclerView.ViewHolder(v) {
-//        internal val nome: AppCompatEditText = v.findViewById(R.id.nome)
-//        internal var whatsappimage: ImageView = v.findViewById(R.id.imageView)
-//        internal val delete: ImageView = v.findViewById(R.id.delete)
-//    }
-//}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormDialogPreletor.kt b/app/src/main/java/com/example/changedetection/forms/FormDialogPreletor.kt
deleted file mode 100644
index 533461a..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormDialogPreletor.kt
+++ /dev/null
@@ -1,187 +0,0 @@
-//package com.example.openattendance.forms
-//
-//import android.support.v7.widget.AppCompatEditText
-//import android.support.v7.widget.LinearLayoutManager
-//import android.support.v7.widget.RecyclerView
-//import android.support.v7.widget.SearchView
-//import android.text.InputType
-//import android.view.View
-//import android.widget.ImageView
-//import android.widget.TextView
-//import com.example.openattendance.R
-//import com.afollestad.materialdialogs.MaterialDialog
-//import com.example.openattendance.PrimitiveAbstractItem
-//import com.example.openattendance.pesquisarPreletor
-//import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-//import com.orhanobut.logger.Logger
-//
-//internal class FormDialogPreletor(
-//    val nome: String,
-//    val id: String,
-//    override val kind: Int,
-//    val viewModel: SharedEscato
-//) :
-//    EmptyAdapter() {
-//    var visibleHolder: RecyclerView.ViewHolder? = null
-//    var currentId = id
-//    var primarytext = nome
-//
-//    override fun getType(): Int = kind
-//
-//    override fun getViewHolder(v: View) = ViewHolderNonExpanding(v)
-//
-//    override fun getLayoutRes(): Int = R.layout.eureka_single_edittext
-//
-//    var selectedcache = arrayOf<Int>()
-//
-//    override fun bindView(holder: RecyclerView.ViewHolder, payloads: List<Any>) {
-//        super.bindView(holder, payloads)
-//        val holder = holder as ViewHolderNonExpanding
-//        visibleHolder = holder
-//        extensions.setImage(holder.whatsappimage, kind)
-//        holder.delete.visibility = View.GONE
-//
-//        when (kind) {
-////            FormConstants.iname, FormConstants.url, FormConstants.ipreletor, FormConstants.isinglephone -> { // FULL NAME
-////                holder.nome.apply {
-////                    text = extensions.setTextFromCacheOrFunction(primarytext, nome)
-////                    primarytext = this.text.toString()
-////                    inputType = InputType.TYPE_CLASS_TEXT
-////                    hint = FormConstants.hintNames[kind]
-////                }
-////            }
-//            FormConstants.ipreletor -> {
-//                holder.nome.apply {
-//                    text = extensions.setTextFromCacheOrFunction(primarytext, nome)
-//                    inputType = InputType.TYPE_CLASS_TEXT
-//                    hint = "selecione o preletor"
-//                    isFocusable = false
-//                }
-//
-//                holder.nome.setOnClickListener {
-//
-//                    val materialdialogpiece = MaterialDialog.Builder(holder.nome.context)
-//                        .title("Escolher preletor")
-//                        .customView(R.layout.dialog_customview_search, false)
-//                        .negativeText("Cancelar")
-//                        .positiveText("Confirmar")
-//                        .onPositive { dialog, _ ->
-//                            val text = dialog.customView?.findViewById<SearchView>(R.id.searchview)
-//                                ?.query.toString()
-//                            currentId = ""
-//                            primarytext = text
-//                            holder.nome.setText(text, TextView.BufferType.EDITABLE)
-//                        }
-//
-//                    val materialdialog = materialdialogpiece.build()
-//
-//                    val fastFA2 = FastItemAdapter<PrimitiveAbstractItem>()
-//                    fastFA2.withOnClickListener { v, adapter, item, position ->
-//                        currentId = item.stru.id
-//                        primarytext = item.stru.name
-//                        holder.nome.setText(item.stru.name, TextView.BufferType.EDITABLE)
-//                        materialdialog.dismiss()
-//                        true
-//                    }
-//
-//                    materialdialog.customView?.findViewById<ImageView>(R.id.savecontent)?.apply {
-//                        this.visibility = View.GONE
-//                    }
-//
-//                    val mSearchView =
-//                        materialdialog.customView?.findViewById<SearchView>(R.id.searchview)
-//                    mSearchView?.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
-//                        override fun onQueryTextSubmit(query: String?): Boolean {
-//                            return true
-//                        }
-//
-//                        override fun onQueryTextChange(newText: String?): Boolean {
-//                            val searchText = newText ?: ""
-//                            fastFA2.filter(searchText)
-//                            fastFA2.itemFilter.withFilterPredicate { item, constraint ->
-//                                if (item.stru is pesquisarPreletor) {
-//                                    return@withFilterPredicate item.stru.name.toLowerCase().contains(
-//                                        constraint.toString().toLowerCase()
-//                                    ) ||
-//                                            item.stru.address.toLowerCase().contains(constraint.toString().toLowerCase())
-//                                }
-//                                return@withFilterPredicate false
-//                            }
-//
-//                            return true
-//                        }
-//                    })
-//
-//                    val recycler =
-//                        materialdialog.customView?.findViewById<RecyclerView>(R.id.defaultRecycler)
-//                    recycler?.apply {
-//                        layoutManager = LinearLayoutManager(this.context)
-//                        adapter = fastFA2
-//                    }
-//
-//                    fastFA2.apply {
-//                        this.clear()
-//                        viewModel.repo.usersCache.forEach {
-//                            Logger.d("pretty name: " + it.value["name"] as? String)
-//                            val stringbuilder = objectHelper.addressToString(it.value)
-//
-//                            this.add(
-//                                PrimitiveAbstractItem(
-//                                    pesquisarPreletor(
-//                                        it.value["name"] as? String ?: "",
-//                                        it.key,
-//                                        stringbuilder
-//                                    )
-//                                )
-//                            )
-//                        }
-//                        sort(this)
-//                    }
-//
-//                    materialdialog.show()
-//                }
-//            }
-//            else -> {
-//
-//            }
-//        }
-//    }
-//
-//
-//    private fun sort(fastFA: FastItemAdapter<PrimitiveAbstractItem>) {
-//        // starred: true > false
-//        fastFA.adapterItems.sortWith(compareBy<PrimitiveAbstractItem> { it.stru.name })
-//    }
-//
-//    internal fun retrieveText(): String? {
-//        val txtfrombind = (visibleHolder as? ViewHolderNonExpanding)?.let {
-//            val finalstring = it.nome.text.toString()
-//                .replace(Regex("\\s+"), " ")
-//                .trim()
-//
-//            if (finalstring != "" && finalstring != "null" && finalstring != " ") {
-//                return@let finalstring
-//            } else {
-//                return@let null
-//            }
-//        }
-//
-//        if (txtfrombind == null) {
-//            val finalstring = nome
-//                .replace(Regex("\\s+"), " ")
-//                .trim()
-//            return null
-//        }
-//        return txtfrombind
-//    }
-//
-//    internal fun retrieveSelected(): Array<Int> {
-//        return selectedcache
-//    }
-//
-//    internal class ViewHolderNonExpanding constructor(v: View) : RecyclerView.ViewHolder(v) {
-//        internal val nome: AppCompatEditText = v.findViewById(R.id.nome)
-//        internal var whatsappimage: ImageView = v.findViewById(R.id.imageView)
-//        internal val delete: ImageView = v.findViewById(R.id.delete)
-//    }
-//}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/FormSaveAndHook.kt b/app/src/main/java/com/example/changedetection/forms/FormSaveAndHook.kt
deleted file mode 100644
index b545070..0000000
--- a/app/src/main/java/com/example/changedetection/forms/FormSaveAndHook.kt
+++ /dev/null
@@ -1,239 +0,0 @@
-package com.example.changedetection.forms
-
-import android.support.v7.widget.RecyclerView
-import android.text.Editable
-import android.text.TextWatcher
-import android.view.View
-import com.example.changedetection.Consts
-import com.mikepenz.fastadapter.FastAdapter
-import com.mikepenz.fastadapter.commons.adapters.FastItemAdapter
-import com.mikepenz.fastadapter.listeners.ClickEventHook
-import com.orhanobut.logger.Logger
-import org.threeten.bp.LocalDate
-import java.util.*
-
-object FormSaveAndHook {
-
-    internal fun areConditionsInvalid(
-        fastFA: FastItemAdapter<EmptyAdapter>,
-        ismember: Boolean
-    ): Boolean {
-        var map3isnull: Boolean? = null
-        for (i in 0 until fastFA.itemCount) {
-            val currentkind = fastFA.getAdapterItem(i).kind
-
-            if (fastFA.getAdapterItem(i) is FormDecSection) {
-                continue
-            }
-
-            when (currentkind) {
-                FormConstants.iname -> {
-                    if ((fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText() == null) {
-                        return true
-                    }
-                }
-                FormConstants.iaddress -> {
-                    val tmp =
-                        ((fastFA.getAdapterItem(i) as FormDecAddress).visibleHolder as FormDecAddress.ViewHolderAddress)
-                    if (ismember) {
-                        if (tmp.bairro.text == null || tmp.cidade.text == null || tmp.numero.text == null || tmp.rua.text == null) {
-                            return true
-                        }
-                    } else {
-                        if (tmp.bairro.text == null) {
-                            return true
-                        }
-                    }
-                }
-                FormConstants.ibirthday -> {
-                    if ((fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText() == null) {
-                        return true
-                    }
-                }
-                FormConstants.iphone -> {
-                    if (map3isnull == null) {
-                        map3isnull = (fastFA.getAdapterItem(i) as FormDecExpands).retrieveText() ==
-                                null
-                    }
-                }
-                else -> {
-                }
-            }
-        }
-        if (map3isnull == null || map3isnull == true) {
-            return true
-        }
-        return false
-    }
-
-    internal fun saveData(
-        fastFA: FastItemAdapter<EmptyAdapter>,
-        nucleosIdList: MutableList<String>
-    ): HashMap<String, Any> {
-
-        val map2 = HashMap<String, Any>()
-        var prevkind = 0
-        val lst = mutableListOf<String>()
-
-        for (i in 0 until fastFA.itemCount) {
-            val currentkind = fastFA.getAdapterItem(i).kind
-
-            //This need to happen on every single iteration, else some fields will not be added to the map
-            if (lst.isNotEmpty() && (prevkind != currentkind || i == fastFA.itemCount - 1)) {
-                FormConstants.serverNames[prevkind]?.let {
-                    map2[it] = lst.toList()
-                }
-                lst.clear()
-            }
-
-            val kindfromservernames: String = FormConstants.serverNames[currentkind] ?: ""
-
-            if (fastFA.getAdapterItem(i) is FormDecSection) {
-                continue
-            }
-
-            when (currentkind) {
-                FormConstants.iname, FormConstants.url -> {
-                    (fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText()?.let {
-                        map2[kindfromservernames] = it
-                    }
-                }
-                FormConstants.ispouse, FormConstants.ibirthday, FormConstants.isinglephone, FormConstants.ipreletor, FormConstants.imeetingscheduledate -> {
-                    (fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText()?.let {
-                        map2[kindfromservernames] = it
-                    }
-                }
-                FormConstants.iphone, FormConstants.iemail, FormConstants.isons -> {
-                    (fastFA.getAdapterItem(i) as FormDecExpands).retrieveText()?.let {
-                        lst.add(it)
-                    }
-                }
-                FormConstants.iselectnucleo -> {
-                    map2["participant"] = mutableMapOf<String, Any>().apply {
-                        val retrieved =
-                            (fastFA.getAdapterItem(i) as FormDecSingleText).retrieveSelected()
-                        if (retrieved.isEmpty()) {
-                            if ((fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText() == "NÃ£o, mas gostaria de participar.") {
-                                map2["not participating"] = mutableMapOf<String, Any>().apply {
-                                    this["would like"] = true
-                                    this[Consts.keyTimestamp] = LocalDate.now().toEpochDay()
-                                }
-                            } else if ((fastFA.getAdapterItem(i) as FormDecSingleText).retrieveText() == "NÃ£o, e nÃ£o gostaria de participar.") {
-                                this["not participating"] = mutableMapOf<String, Any>().apply {
-                                    this["would like"] = false
-                                    this[Consts.keyTimestamp] = LocalDate.now().toEpochDay()
-                                }
-                            }
-                        } else {
-                            retrieved.forEach {
-                                this[nucleosIdList[it]] = mutableMapOf<String, Any>().apply {
-                                    this["kind"] = "pending"
-                                    this[Consts.keyTimestamp] = LocalDate.now().toEpochDay()
-                                }
-                            }
-                        }
-                    }
-                }
-                FormConstants.imemberfromipc -> {
-                    (fastFA.getAdapterItem(i) as FormDecIsMember).isYesSelected().let {
-                        map2[kindfromservernames] = it
-                    }
-                }
-                else -> {
-
-                }
-            }
-            prevkind = currentkind
-        }
-        Logger.d("map2... $map2")
-        return map2
-    }
-
-
-    internal fun eventhook(fastFA: FastItemAdapter<EmptyAdapter>): ClickEventHook<EmptyAdapter> {
-        return object : ClickEventHook<EmptyAdapter>() {
-            override fun onClick(
-                v: View?,
-                position: Int,
-                fastAdapter: FastAdapter<EmptyAdapter>?,
-                item: EmptyAdapter?
-            ) {
-                fastFA.remove(position)
-            }
-
-            override fun onBind(viewHolder: RecyclerView.ViewHolder): View? {
-
-                if (viewHolder !is FormDecExpands.ViewHolderSimpleExpands) {
-                    return null
-                }
-
-                val a = (viewHolder).nome
-                val b = (viewHolder).delete
-                b.visibility = View.GONE
-
-                a.addTextChangedListener(object : TextWatcher {
-                    override fun afterTextChanged(p0: Editable?) {
-                        val adapterposition = fastFA.getHolderAdapterPosition(viewHolder)
-
-                        val adpt = (fastFA.getAdapterItem(adapterposition) as? FormDecExpands)
-                        if (adapterposition > 0 && adpt?.primarytext == p0.toString()) {
-                            b.visibility = View.VISIBLE
-                            if (fastFA.adapterItems.last {
-                                    it.kind == fastFA.getAdapterItem(
-                                        adapterposition
-                                    ).kind
-                                } == fastFA.getAdapterItem(adapterposition)) {
-                                b.visibility = View.GONE
-                            }
-                            return
-                        }
-
-                        (fastFA.getAdapterItem(fastFA.getHolderAdapterPosition(viewHolder)) as? FormDecExpands)?.primarytext =
-                                p0.toString()
-
-                        if (fastFA.adapterItems.last {
-                                it.kind == fastFA.getAdapterItem(
-                                    adapterposition
-                                ).kind
-                            } == fastFA.getAdapterItem(adapterposition)) {
-                            val pos = fastFA.getHolderAdapterPosition(viewHolder)
-
-                            fastFA.add(
-                                pos + 1,
-                                FormDecExpands("", fastFA.getAdapterItem(pos).kind)
-                            )
-
-                            b.visibility = View.VISIBLE
-                        }
-                    }
-
-                    override fun beforeTextChanged(
-                        p0: CharSequence?,
-                        p1: Int,
-                        p2: Int,
-                        p3: Int
-                    ) = Unit
-
-                    override fun onTextChanged(
-                        p0: CharSequence?,
-                        p1: Int,
-                        p2: Int,
-                        p3: Int
-                    ) = Unit
-                })
-
-                return b
-            }
-        }
-
-//            override fun onClick(
-//                v: View,
-//                position: Int,
-//                fastAdapter: FastAdapter<FormCreateAdapter>,
-//                item: FormCreateAdapter
-//            ) {
-//                fastFA.remove(position)
-//            }
-    }
-
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/forms/extensions.kt b/app/src/main/java/com/example/changedetection/forms/extensions.kt
deleted file mode 100644
index adcef46..0000000
--- a/app/src/main/java/com/example/changedetection/forms/extensions.kt
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.example.changedetection.forms
-
-import android.text.Editable
-import android.widget.ImageView
-import com.mikepenz.community_material_typeface_library.CommunityMaterial
-import com.mikepenz.iconics.IconicsDrawable
-import com.orhanobut.logger.Logger
-
-object extensions {
-    const val color = 0xFF9E9E9E.toInt()
-
-    fun setImage(image: ImageView, kind: Int) {
-        Logger.d("icon kind: $kind")
-        val icon = FormConstants.iconArr2[kind]
-        image.setImageDrawable(
-            IconicsDrawable(
-                image.context,
-                icon
-            ).color(color)
-        )
-    }
-
-    fun setDelete(image: ImageView) {
-        val icon = CommunityMaterial.Icon.cmd_close
-
-        image.setImageDrawable(
-            IconicsDrawable(
-                image.context,
-                icon
-            ).color(color)
-        )
-    }
-
-    fun setTextFromCacheOrFunction(primarytext: String, nome: String): Editable {
-        Editable.Factory.getInstance().run {
-            return if (primarytext != "") {
-                newEditable(primarytext)
-            } else {
-                newEditable(nome)
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/groupie/BibleCarouselRecyclerItem.kt b/app/src/main/java/com/example/changedetection/groupie/BibleCarouselRecyclerItem.kt
deleted file mode 100755
index ad00c50..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/BibleCarouselRecyclerItem.kt
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.example.changedetection.groupie
-
-//import com.biblialibras.android.main.SelectCoordenadoresFrag
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.LinearLayoutManager
-import android.view.View
-import com.example.changedetection.R
-import com.example.changedetection.data.Diff
-import com.mikepenz.google_material_typeface_library.GoogleMaterial
-import com.mikepenz.iconics.IconicsDrawable
-import com.orhanobut.logger.Logger
-import com.xwray.groupie.GroupAdapter
-import com.xwray.groupie.Section
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-import kotlinx.android.synthetic.main.bible_recycler_item.*
-
-/**
- * A horizontally scrolling RecyclerView, for use in a vertically scrolling RecyclerView.
- */
-class BibleCarouselRecyclerItem(
-    private val bookTitle: String,
-    private val subtitle: String,
-    private val shouldShowMore: Boolean,
-    private val diffList: List<Diff>,
-    private val callback: (Diff) -> Unit
-) :
-    Item() {
-
-    override fun getLayout(): Int {
-        return R.layout.bible_recycler_item
-    }
-
-    override fun unbind(holder: ViewHolder) {
-        holder.morecontainer.visibility = View.VISIBLE
-        super.unbind(holder)
-    }
-
-    override fun bind(viewHolder: ViewHolder, position: Int) {
-        viewHolder.title.text = bookTitle
-        viewHolder.subtitle.text = subtitle
-
-        if (!shouldShowMore) {
-            viewHolder.morecontainer.visibility = View.GONE
-        }
-
-        viewHolder.icon.setImageDrawable(
-            IconicsDrawable(
-                viewHolder.icon.context,
-                GoogleMaterial.Icon.gmd_keyboard_arrow_right
-            ).color(ContextCompat.getColor(viewHolder.icon.context, R.color.atlasianblue))
-        )
-
-        val carouselAdapter = GroupAdapter<com.xwray.groupie.ViewHolder>()
-
-        viewHolder.recyclerView.apply {
-            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)
-            adapter = carouselAdapter
-        }
-
-        val updating = mutableListOf<Item>()
-
-        Logger.d("DiffList: ${diffList}")
-
-        diffList.forEach {
-            Logger.d("Diff: ${it.timestamp}")
-            updating += DiffItem(it)
-        }
-
-        carouselAdapter.add(Section(updating))
-
-        carouselAdapter.setOnItemClickListener { item, view ->
-            if (item is DiffItem) {
-                callback(item.diff)
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/groupie/DialogItem.kt b/app/src/main/java/com/example/changedetection/groupie/DialogItem.kt
deleted file mode 100755
index ef0c475..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/DialogItem.kt
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.example.changedetection.groupie
-
-import android.graphics.drawable.Drawable
-import com.example.changedetection.R
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-import kotlinx.android.synthetic.main.dialog_item.*
-
-class DialogItem(
-    val title: String,
-    val drawable: Drawable,
-    val kind: String
-) : Item() {
-
-    override fun getLayout(): Int {
-        return R.layout.dialog_item
-    }
-
-    override fun bind(viewHolder: ViewHolder, position: Int) {
-        viewHolder.title.text = title
-        viewHolder.image.setImageDrawable(drawable)
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/groupie/DialogItemSwitch.kt b/app/src/main/java/com/example/changedetection/groupie/DialogItemSwitch.kt
deleted file mode 100755
index 302f137..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/DialogItemSwitch.kt
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.example.changedetection.groupie
-
-import android.graphics.drawable.Drawable
-import android.view.View
-import com.example.changedetection.R
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-import kotlinx.android.synthetic.main.dialog_item_switch.*
-
-class DialogItemSwitch(
-    val title: String,
-    val drawable: Drawable,
-    val kind: String,
-    val isSwitchVisible: Boolean = false,
-    val isSwitchOn: Boolean = false,
-    val listener: (DialogItemSwitch) -> (Unit)
-) : Item() {
-
-    override fun getLayout(): Int {
-        return R.layout.dialog_item_switch
-    }
-
-    override fun bind(viewHolder: ViewHolder, position: Int) {
-
-        viewHolder.containerView.setOnClickListener {
-            listener.invoke(this)
-
-            if (isSwitchVisible) {
-                viewHolder.item_switch.isChecked = !viewHolder.item_switch.isChecked
-            }
-        }
-
-        viewHolder.title.text = title
-        viewHolder.image.setImageDrawable(drawable)
-
-        if (isSwitchVisible) {
-            viewHolder.item_switch.visibility = View.VISIBLE
-            viewHolder.item_switch.isChecked = isSwitchOn
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/groupie/DiffItem.kt b/app/src/main/java/com/example/changedetection/groupie/DiffItem.kt
deleted file mode 100755
index 195b60f..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/DiffItem.kt
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.example.changedetection.groupie
-
-import android.graphics.drawable.Drawable
-import android.graphics.drawable.TransitionDrawable
-import android.support.v4.content.ContextCompat
-import android.support.v7.widget.CardView
-import androidx.core.graphics.drawable.toDrawable
-import com.example.changedetection.R
-import com.example.changedetection.data.Diff
-import com.github.marlonlom.utilities.timeago.TimeAgo
-import com.github.marlonlom.utilities.timeago.TimeAgoMessages
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-import kotlinx.android.synthetic.main.diff_item.*
-import java.text.DecimalFormat
-import java.util.*
-
-
-class DiffItem(
-    val diff: Diff
-) : Item() {
-    var colorSelected = 0
-
-    fun setColor(color: Int){
-        colorSelected = color
-        notifyChanged()
-    }
-
-    override fun getLayout() = R.layout.diff_item
-
-    override fun bind(holder: ViewHolder, position: Int, payloads: List<Any>) {
-        bind(holder, position)
-        colorSelected = (payloads.firstOrNull() as? Int) ?: colorSelected
-        bindColors(holder)
-    }
-
-    override fun bind(viewHolder: ViewHolder, position: Int) {
-        val messages = TimeAgoMessages.Builder().withLocale(Locale.getDefault()).build()
-        val text = TimeAgo.using(diff.timestamp, messages)
-        viewHolder.titleTextView.text = readableFileSize(diff.value.count())
-        viewHolder.subtitleTextView.text = text
-    }
-
-    private fun bindColors(holder: ViewHolder) {
-        val context = holder.containerView.context
-
-        when (colorSelected) {
-            1 -> setCardBackgroundAnimated(
-                holder.container,
-                ContextCompat.getColor(context, R.color.md_amber_200).toDrawable()
-            )
-            2 -> setCardBackgroundAnimated(
-                holder.container,
-                ContextCompat.getColor(context, R.color.md_orange_200).toDrawable()
-            )
-            else -> setCardBackgroundAnimated(
-                holder.container,
-                ContextCompat.getColor(context, R.color.grey_100).toDrawable()
-            )
-        }
-    }
-
-    private fun setCardBackgroundAnimated(cardView: CardView, color: Drawable) {
-        cardView.background = TransitionDrawable(arrayOf(cardView.background, color)).apply {
-            startTransition(100)
-        }
-    }
-
-    private fun readableFileSize(size: Int): String {
-        if (size <= 0) return "0"
-        val units = arrayOf("B", "kB", "MB", "GB", "TB")
-        val digitGroups = (Math.log10(size.toDouble()) / Math.log10(1024.0)).toInt()
-        return DecimalFormat("#,##0.#").format(
-            size / Math.pow(
-                1024.0,
-                digitGroups.toDouble()
-            )
-        ) + " " + units[digitGroups]
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/groupie/LoadingPlaidItem.kt b/app/src/main/java/com/example/changedetection/groupie/LoadingPlaidItem.kt
deleted file mode 100644
index e6b9613..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/LoadingPlaidItem.kt
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.example.changedetection.groupie
-
-import android.annotation.TargetApi
-import android.os.Build
-import com.example.changedetection.R
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
-class LoadingPlaidItem : Item() {
-    override fun getLayout() = R.layout.bottomsheet_loading_plaid
-    override fun bind(viewHolder: ViewHolder, position: Int) = Unit
-}
diff --git a/app/src/main/java/com/example/changedetection/groupie/TextRecycler.kt b/app/src/main/java/com/example/changedetection/groupie/TextRecycler.kt
deleted file mode 100755
index 72fead6..0000000
--- a/app/src/main/java/com/example/changedetection/groupie/TextRecycler.kt
+++ /dev/null
@@ -1,106 +0,0 @@
-package com.example.changedetection.groupie
-
-
-import android.graphics.Color
-import android.support.v4.content.ContextCompat
-import android.text.Spannable
-import android.text.SpannableString
-import android.text.SpannableStringBuilder
-import android.text.style.BackgroundColorSpan
-import android.view.Gravity
-import android.widget.TextView
-import com.example.changedetection.R
-import com.xwray.groupie.kotlinandroidextensions.Item
-import com.xwray.groupie.kotlinandroidextensions.ViewHolder
-import kotlinx.android.synthetic.main.text_recycler_item.*
-
-class TextRecycler(
-    val title: String,
-    val index: Int
-) : Item() {
-
-    override fun getLayout(): Int {
-        return R.layout.text_recycler_item
-    }
-
-    // This will make the spannable showing the diffs
-    private fun setSpannable(
-        token: List<String>,
-        color: Int,
-        textView: TextView
-    ) {
-        val spannableDiff2 = SpannableString(token.joinToString(""))
-
-        var previousIndex = 0
-        var currentIndex = 0
-
-        token.forEachIndexed { index, s ->
-            currentIndex += s.count()
-//            println("token $token -- current $s" )
-            if (previousIndex != currentIndex && index % 2 != 0) {
-//                println("span: $previousIndex -- $currentIndex")
-                spannableDiff2.setSpan(
-                    BackgroundColorSpan(color),
-                    previousIndex,
-                    currentIndex,
-                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
-                )
-            }
-
-            previousIndex += s.count()
-        }
-
-        textView.text = SpannableStringBuilder(spannableDiff2)
-    }
-
-    override fun bind(viewHolder: ViewHolder, position: Int) {
-        viewHolder.subtitle.text = index.toString()
-        viewHolder.title.text = title
-
-        val context = viewHolder.containerView.context
-
-        // Sample string: +TEXTADDED this text was added TEXTADDED
-        // [+, this text was added, ] -> highlight "this text was added"
-        val token = title.split("TEXTADDED|TEXTREMOVED".toRegex())
-        val firstChar = title.getOrNull(0) ?: ' '
-
-        val codeColorHighlight = when (firstChar) {
-            '+' -> ContextCompat.getColor(context, R.color.code_addition_diff)
-            '-' -> ContextCompat.getColor(context, R.color.code_deletion_diff)
-            else -> Color.TRANSPARENT
-        }
-
-        if (codeColorHighlight != Color.TRANSPARENT) {
-            setSpannable(
-                token,
-                codeColorHighlight,
-                viewHolder.title
-            )
-        }
-
-        val codeColor = when (firstChar) {
-            '+' -> ContextCompat.getColor(context, R.color.code_addition)
-            '-' -> ContextCompat.getColor(context, R.color.code_deletion)
-            else -> Color.TRANSPARENT
-        }
-
-        viewHolder.title.setBackgroundColor(codeColor)
-
-        viewHolder.subtitle.run {
-            when (firstChar) {
-                '+' -> {
-                    gravity = Gravity.CENTER or Gravity.RIGHT
-                    setBackgroundColor(ContextCompat.getColor(context, R.color.num_addition))
-                }
-                '-' -> {
-                    gravity = Gravity.CENTER or Gravity.LEFT
-                    setBackgroundColor(ContextCompat.getColor(context, R.color.num_deletion))
-                }
-                else -> {
-                    gravity = Gravity.CENTER
-                    setBackgroundColor(Color.TRANSPARENT)
-                }
-            }
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/ui/BottomPaddingDecoration.java b/app/src/main/java/com/example/changedetection/ui/BottomPaddingDecoration.java
deleted file mode 100644
index ec8703f..0000000
--- a/app/src/main/java/com/example/changedetection/ui/BottomPaddingDecoration.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.example.changedetection.ui;
-
-/**
- * Created by bernardoferrari on 09/11/17.
- * Inspired on FastHub implementation.
- */
-
-import android.content.Context;
-import android.graphics.Rect;
-import android.support.annotation.NonNull;
-import android.support.v7.widget.GridLayoutManager;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.support.v7.widget.StaggeredGridLayoutManager;
-import android.view.View;
-
-import com.example.changedetection.R;
-
-class BottomPaddingDecoration extends RecyclerView.ItemDecoration {
-    private final int bottomPadding;
-
-    private BottomPaddingDecoration(int bottomOffset) {
-        bottomPadding = bottomOffset;
-    }
-
-    private BottomPaddingDecoration(@NonNull Context context) {
-        this(ViewHelper.toPx(context, context.getResources().getDimensionPixelSize(R.dimen.fab_spacing)));
-    }
-
-    public static BottomPaddingDecoration with(int bottomPadding) {
-        return new BottomPaddingDecoration(bottomPadding);
-    }
-
-    public static BottomPaddingDecoration with(@NonNull Context context) {
-        return new BottomPaddingDecoration(context);
-    }
-
-    @Override
-    public void getItemOffsets(@NonNull Rect outRect, View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
-        super.getItemOffsets(outRect, view, parent, state);
-        int dataSize = state.getItemCount();
-        int position = parent.getChildAdapterPosition(view);
-        if (parent.getLayoutManager() instanceof LinearLayoutManager) {
-            if (dataSize > 0 && position == dataSize - 1) {
-                outRect.set(0, 0, 0, bottomPadding);
-            } else {
-                outRect.set(0, 0, 0, 0);
-            }
-        } else if (parent.getLayoutManager() instanceof StaggeredGridLayoutManager) {
-            StaggeredGridLayoutManager grid = (StaggeredGridLayoutManager) parent.getLayoutManager();
-            if ((dataSize - position) <= grid.getSpanCount()) {
-                outRect.set(0, 0, 0, bottomPadding);
-            } else {
-                outRect.set(0, 0, 0, 0);
-            }
-        } else if (parent.getLayoutManager() instanceof GridLayoutManager) {
-            GridLayoutManager grid = (GridLayoutManager) parent.getLayoutManager();
-            if ((dataSize - position) <= grid.getSpanCount()) {
-                outRect.set(0, 0, 0, bottomPadding);
-            } else {
-                outRect.set(0, 0, 0, 0);
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/example/changedetection/ui/DynamicRecyclerView.java b/app/src/main/java/com/example/changedetection/ui/DynamicRecyclerView.java
deleted file mode 100644
index 2ca2d74..0000000
--- a/app/src/main/java/com/example/changedetection/ui/DynamicRecyclerView.java
+++ /dev/null
@@ -1,171 +0,0 @@
-package com.example.changedetection.ui;
-
-/**
- * Created by bernardoferrari on 09/11/17.
- * Inspired on FastHub implementation.
- */
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v7.widget.GridLayoutManager;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.support.v7.widget.StaggeredGridLayoutManager;
-import android.util.AttributeSet;
-import android.view.View;
-
-
-/**
- * Created by Kosh on 9/24/2015. copyrights are reserved
- * <p>
- * recyclerview which will showParentOrSelf/showParentOrSelf itself base on adapter
- */
-public class DynamicRecyclerView extends RecyclerView {
-
-    private StateLayout emptyView;
-    @Nullable
-    private View parentView;
-    private BottomPaddingDecoration bottomPaddingDecoration;
-
-    @NonNull
-    private AdapterDataObserver observer = new AdapterDataObserver() {
-        @Override
-        public void onChanged() {
-            showEmptyView();
-        }
-
-        @Override
-        public void onItemRangeInserted(int positionStart, int itemCount) {
-            super.onItemRangeInserted(positionStart, itemCount);
-            showEmptyView();
-        }
-
-        @Override
-        public void onItemRangeRemoved(int positionStart, int itemCount) {
-            super.onItemRangeRemoved(positionStart, itemCount);
-            showEmptyView();
-        }
-    };
-
-    public DynamicRecyclerView(@NonNull Context context) {
-        this(context, null);
-    }
-
-    public DynamicRecyclerView(@NonNull Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public DynamicRecyclerView(@NonNull Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    @Override
-    public void setAdapter(@Nullable Adapter adapter) {
-        super.setAdapter(adapter);
-        if (isInEditMode()) return;
-        if (adapter != null) {
-            adapter.registerAdapterDataObserver(observer);
-            observer.onChanged();
-        }
-    }
-
-    public void removeBottomDecoration() {
-        if (bottomPaddingDecoration != null) {
-            removeItemDecoration(bottomPaddingDecoration);
-            bottomPaddingDecoration = null;
-        }
-    }
-
-    public void addDecoration() {
-        bottomPaddingDecoration = BottomPaddingDecoration.with(getContext());
-        addItemDecoration(bottomPaddingDecoration);
-    }
-
-    private void showEmptyView() {
-        Adapter<?> adapter = getAdapter();
-        if (adapter != null) {
-            if (emptyView != null) {
-//                Logger.d("state ItemCount: " + adapter.getItemCount());
-                if (adapter.getItemCount() == 0) {
-                    showParentOrSelf(false);
-                } else {
-                    showParentOrSelf(true);
-                }
-            }
-        } else {
-            if (emptyView != null) {
-//                Logger.d("state emptyView != null");
-                showParentOrSelf(false);
-            }
-        }
-    }
-
-    private void showParentOrSelf(boolean showRecyclerView) {
-//        Logger.d("state showParentOrSelf");
-
-        if (parentView != null)
-            parentView.setVisibility(VISIBLE);
-        setVisibility(VISIBLE);
-        emptyView.setVisibility(!showRecyclerView ? VISIBLE : GONE);
-    }
-
-    public void setEmptyView(@NonNull StateLayout emptyView, @Nullable View parentView) {
-        this.emptyView = emptyView;
-        this.parentView = parentView;
-        showEmptyView();
-    }
-
-    public void setEmptyView(@NonNull StateLayout emptyView) {
-        setEmptyView(emptyView, null);
-    }
-
-//    public void hideProgress(@NonNull StateLayout view) {
-//        view.hideProgress();
-//    }
-//
-//    public void showProgress(@NonNull StateLayout view) {
-//        view.showProgress();
-//    }
-
-//    public void addKeyLineDivider() {
-//        if (canAddDivider()) {
-//            Resources resources = getResources();
-//            addItemDecoration(new InsetDividerDecoration(resources.getDimensionPixelSize(R.dimen.divider_height),
-//                    resources.getDimensionPixelSize(R.dimen.keyline_2), ViewHelper.getListDivider(getContext())));
-//        }
-//    }
-
-//    public void addDivider() {
-//        if (canAddDivider()) {
-//            Resources resources = getResources();
-//            addItemDecoration(new InsetDividerDecoration(resources.getDimensionPixelSize(R.dimen.divider_height), 0,
-//                    ViewHelper.getListDivider(getContext())));
-//        }
-//    }
-
-//    public void addNormalSpacingDivider() {
-//        addDivider();
-//    }
-
-//    public void addDivider(@NonNull Class toDivide) {
-//        if (canAddDivider()) {
-//            Resources resources = getResources();
-//            addItemDecoration(new InsetDividerDecoration(resources.getDimensionPixelSize(R.dimen.divider_height), 0,
-//                    ViewHelper.getListDivider(getContext()), toDivide));
-//        }
-//    }
-
-    private boolean canAddDivider() {
-        if (getLayoutManager() != null) {
-            if (getLayoutManager() instanceof LinearLayoutManager) {
-                return true;
-            } else if (getLayoutManager() instanceof GridLayoutManager) {
-                return ((GridLayoutManager) getLayoutManager()).getSpanCount() == 1;
-            } else if (getLayoutManager() instanceof StaggeredGridLayoutManager) {
-                return ((StaggeredGridLayoutManager) getLayoutManager()).getSpanCount() == 1;
-            }
-        }
-        return false;
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/ui/StateLayout.java b/app/src/main/java/com/example/changedetection/ui/StateLayout.java
deleted file mode 100755
index 4ce9955..0000000
--- a/app/src/main/java/com/example/changedetection/ui/StateLayout.java
+++ /dev/null
@@ -1,188 +0,0 @@
-package com.example.changedetection.ui;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.StringRes;
-import android.support.v4.widget.NestedScrollView;
-import android.util.AttributeSet;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.example.changedetection.R;
-
-/**
- * Created by Kosh on 20 Nov 2016, 12:21 AM
- */
-public class StateLayout extends NestedScrollView {
-
-    private static final int SHOW_PROGRESS_STATE = 1;
-    private static final int HIDE_PROGRESS_STATE = 2;
-    private static final int HIDE_RELOAD_STATE = 3;
-    private static final int SHOW_RELOAD_STATE = 4;
-    private static final int SHOW_EMPTY_STATE = 7;
-    private static final int HIDDEN = 5;
-    private static final int SHOWN = 6;
-    TextView emptyText;
-    ProgressBar loading;
-    int layoutState = HIDDEN;
-    String emptyTextValue;
-//    boolean showReload = true;
-//    private OnClickListener onReloadListener;
-
-    public StateLayout(Context context) {
-        super(context);
-    }
-
-    public StateLayout(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public StateLayout(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
-    }
-
-    public void newLoading() {
-//        Logger.d("state: newLoading");
-        layoutState = SHOW_PROGRESS_STATE;
-        setVisibility(VISIBLE);
-        emptyText.setVisibility(GONE);
-        loading.setVisibility(VISIBLE);
-    }
-
-//    public void showProgress() {
-//        Logger.d("state: showProgress");
-//
-//        layoutState = SHOW_PROGRESS_STATE;
-//        setVisibility(VISIBLE);
-//        emptyText.setVisibility(GONE);
-//        loading.setVisibility(GONE);
-//    }
-//
-//    public void hideProgress() {
-////        Logger.d("state: hideProgress");
-//
-//        layoutState = HIDE_PROGRESS_STATE;
-//        emptyText.setVisibility(VISIBLE);
-//        loading.setVisibility(VISIBLE);
-//        setVisibility(GONE);
-//    }
-
-//    public void hideReload() {
-////        Logger.d("state: hideReload");
-//
-//        layoutState = HIDE_RELOAD_STATE;
-//        loading.setVisibility(GONE);
-//        emptyText.setVisibility(GONE);
-//        setVisibility(GONE);
-//    }
-
-//    public void showReload(int adapterCount) {
-//        showReload = adapterCount == 0;
-//        showReload();
-//    }
-
-//    protected void showReload() {
-////        Logger.d("state: showReload");
-//
-//        hideProgress();
-//        if (showReload) {
-//            layoutState = SHOW_RELOAD_STATE;
-//            loading.setVisibility(VISIBLE);
-//            emptyText.setVisibility(VISIBLE);
-//            setVisibility(VISIBLE);
-//        }
-//    }
-
-    public void setEmptyText(@StringRes int resId) {
-        setEmptyText(getResources().getString(resId));
-    }
-
-    public void setEmptyText(@NonNull String text) {
-//        this.emptyTextValue = text + "\n\nÂ¯\\_(ãƒ„)_/Â¯";
-        emptyText.setText(text);
-    }
-
-    public void showEmptyState() {
-//        Logger.d("state: showEmptyState");
-
-//        hideProgress();
-//        hideReload();
-
-//        loading.setVisibility(GONE);
-
-        setVisibility(VISIBLE);
-        emptyText.setVisibility(VISIBLE);
-        loading.setVisibility(GONE);
-
-        layoutState = SHOW_EMPTY_STATE;// last so it override visibility state.
-    }
-
-//    public void setOnReloadListener(OnClickListener onReloadListener) {
-//        this.onReloadListener = onReloadListener;
-//    }
-
-//    @Override
-//    public void setVisibility(int visibility) {
-//        super.setVisibility(visibility);
-//        if (visibility == GONE || visibility == INVISIBLE) {
-//            layoutState = HIDDEN;
-//        } else {
-//            layoutState = SHOWN;
-//        }
-//    }
-
-    @Override
-    protected void onFinishInflate() {
-        super.onFinishInflate();
-        inflate(getContext(), R.layout.empty_layout, this);
-
-        emptyText = findViewById(R.id.empty_text);
-        loading = findViewById(R.id.progress_bar);
-
-//        if (isInEditMode()) return;
-//        emptyText.setFreezesText(true);
-    }
-
-//    @Override
-//    protected void onDetachedFromWindow() {
-////        onReloadListener = null;
-//        super.onDetachedFromWindow();
-//    }
-
-//    @Override public Parcelable onSaveInstanceState() {
-//        return StateSaver.saveInstanceState(this, super.onSaveInstanceState());
-//    }
-//
-//    @Override public void onRestoreInstanceState(Parcelable state) {
-//        super.onRestoreInstanceState(StateSaver.restoreInstanceState(this, state));
-//        onHandleLayoutState();
-//    }
-
-//    private void onHandleLayoutState() {
-//        setEmptyText(emptyTextValue);
-//        switch (layoutState) {
-//            case SHOW_PROGRESS_STATE:
-////                showProgress();
-//                break;
-//            case HIDE_PROGRESS_STATE:
-////                hideProgress();
-//                break;
-//            case HIDE_RELOAD_STATE:
-////                hideReload();
-//                break;
-//            case SHOW_RELOAD_STATE:
-////                showReload();
-//                break;
-//            case HIDDEN:
-//                setVisibility(GONE);
-//                break;
-//            case SHOW_EMPTY_STATE:
-//                showEmptyState();
-//                break;
-//            case SHOWN:
-//                setVisibility(VISIBLE);
-////                showReload();
-//                break;
-//        }
-//    }
-}
diff --git a/app/src/main/java/com/example/changedetection/ui/ViewHelper.java b/app/src/main/java/com/example/changedetection/ui/ViewHelper.java
deleted file mode 100644
index 99cce55..0000000
--- a/app/src/main/java/com/example/changedetection/ui/ViewHelper.java
+++ /dev/null
@@ -1,217 +0,0 @@
-package com.example.changedetection.ui;
-
-/**
- * Created by bernardoferrari on 09/11/17.
- */
-
-import android.content.Context;
-import android.content.res.ColorStateList;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.content.res.TypedArray;
-import android.graphics.Color;
-import android.graphics.PorterDuff;
-import android.graphics.Rect;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.StateListDrawable;
-import android.graphics.drawable.shapes.RoundRectShape;
-import android.support.annotation.ColorInt;
-import android.support.annotation.NonNull;
-import android.support.design.widget.TabLayout;
-import android.util.TypedValue;
-import android.view.View;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.example.changedetection.R;
-
-import java.util.Arrays;
-
-
-/**
- * Created by kosh20111 on 10/7/2015 10:42 PM
- */
-public class ViewHelper {
-
-    @ColorInt
-    public static int getPrimaryDarkColor(@NonNull Context context) {
-        return getColorAttr(context, R.attr.colorPrimaryDark);
-    }
-
-    @ColorInt
-    public static int getPrimaryColor(@NonNull Context context) {
-        return getColorAttr(context, R.attr.colorPrimary);
-    }
-
-    @ColorInt
-    public static int getPrimaryTextColor(@NonNull Context context) {
-        return getColorAttr(context, android.R.attr.textColorPrimary);
-    }
-
-    @ColorInt
-    public static int getSecondaryTextColor(@NonNull Context context) {
-        return getColorAttr(context, android.R.attr.textColorSecondary);
-    }
-
-    @ColorInt
-    public static int getTertiaryTextColor(@NonNull Context context) {
-        return getColorAttr(context, android.R.attr.textColorTertiary);
-    }
-
-    @ColorInt
-    public static int getAccentColor(@NonNull Context context) {
-        return getColorAttr(context, R.attr.colorAccent);
-    }
-
-//    @ColorInt
-//    public static int getIconColor(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.icon_color);
-//    }
-
-    @ColorInt
-    public static int getWindowBackground(@NonNull Context context) {
-        return getColorAttr(context, android.R.attr.windowBackground);
-    }
-
-//    @ColorInt
-//    public static int getListDivider(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.dividerColor);
-//    }
-//
-//    @ColorInt
-//    public static int getCardBackground(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.card_background);
-//    }
-//
-//    @ColorInt
-//    public static int getPatchAdditionColor(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.patch_addition);
-//    }
-//
-//    @ColorInt
-//    public static int getPatchDeletionColor(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.patch_deletion);
-//    }
-//
-//    @ColorInt
-//    public static int getPatchRefColor(@NonNull Context context) {
-//        return getColorAttr(context, R.attr.patch_ref);
-//    }
-
-    @ColorInt
-    private static int getColorAttr(@NonNull Context context, int attr) {
-        Resources.Theme theme = context.getTheme();
-        TypedArray typedArray = theme.obtainStyledAttributes(new int[]{attr});
-        final int color = typedArray.getColor(0, Color.LTGRAY);
-        typedArray.recycle();
-        return color;
-    }
-
-    public static int toPx(@NonNull Context context, int dp) {
-        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX, dp, context.getResources().getDisplayMetrics());
-    }
-
-    public static int dpToPx(Context context, float dp) {
-        return (int) (dp * context.getResources().getDisplayMetrics().density + 0.5f);
-    }
-
-    public static void tintDrawable(@NonNull Drawable drawable, @ColorInt int color) {
-        drawable.mutate().setColorFilter(color, PorterDuff.Mode.SRC_IN);
-    }
-
-    @NonNull
-    private static Drawable getRippleMask(int color) {
-        float[] outerRadii = new float[8];
-        Arrays.fill(outerRadii, 3);
-        RoundRectShape r = new RoundRectShape(outerRadii, null, null);
-        ShapeDrawable shapeDrawable = new ShapeDrawable(r);
-        shapeDrawable.getPaint().setColor(color);
-        return shapeDrawable;
-    }
-
-    @NonNull
-    private static StateListDrawable getStateListDrawable(int normalColor, int pressedColor) {
-        StateListDrawable states = new StateListDrawable();
-        states.addState(new int[]{android.R.attr.state_pressed}, new ColorDrawable(pressedColor));
-        states.addState(new int[]{android.R.attr.state_focused}, new ColorDrawable(pressedColor));
-        states.addState(new int[]{android.R.attr.state_activated}, new ColorDrawable(pressedColor));
-        states.addState(new int[]{android.R.attr.state_selected}, new ColorDrawable(pressedColor));
-        states.addState(new int[]{}, new ColorDrawable(normalColor));
-        return states;
-    }
-
-    public static ColorStateList textSelector(int normalColor, int pressedColor) {
-        return new ColorStateList(
-                new int[][]{
-                        new int[]{android.R.attr.state_pressed},
-                        new int[]{android.R.attr.state_focused},
-                        new int[]{android.R.attr.state_activated},
-                        new int[]{android.R.attr.state_selected},
-                        new int[]{}
-                },
-                new int[]{
-                        pressedColor,
-                        pressedColor,
-                        pressedColor,
-                        pressedColor,
-                        normalColor
-                }
-        );
-    }
-
-    private static boolean isTablet(@NonNull Resources resources) {
-        return (resources.getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
-    }
-
-    @SuppressWarnings("ConstantConditions")
-    public static boolean isTablet(@NonNull Context context) {
-        return context != null && isTablet(context.getResources());
-    }
-
-    public static boolean isLandscape(@NonNull Resources resources) {
-        return resources.getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
-    }
-
-    @NonNull
-    @SuppressWarnings("WeakerAccess")
-    public static Rect getLayoutPosition(@NonNull View view) {
-        Rect myViewRect = new Rect();
-        view.getGlobalVisibleRect(myViewRect);
-        return myViewRect;
-    }
-
-
-    @SuppressWarnings("WeakerAccess")
-    public static void showKeyboard(@NonNull View v, @NonNull Context activity) {
-        InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);
-        imm.showSoftInput(v, 0);
-    }
-
-    public static void showKeyboard(@NonNull View v) {
-        showKeyboard(v, v.getContext());
-    }
-
-    public static void hideKeyboard(@NonNull View view) {
-        InputMethodManager inputManager = (InputMethodManager) view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);
-        inputManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
-    }
-
-    @ColorInt
-    public static int generateTextColor(int background) {
-        return getContrastColor(background);
-    }
-
-    @ColorInt
-    private static int getContrastColor(@ColorInt int color) {
-        double a = 1 - (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(color)) / 255;
-        return a < 0.5 ? Color.BLACK : Color.WHITE;
-    }
-
-    @NonNull
-    public static TextView getTabTextView(@NonNull TabLayout tabs, int tabIndex) {
-        return (TextView) (((LinearLayout) ((LinearLayout) tabs.getChildAt(0)).getChildAt(tabIndex)).getChildAt(1));
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/util/AppExecutors.java b/app/src/main/java/com/example/changedetection/util/AppExecutors.java
deleted file mode 100755
index c8875c5..0000000
--- a/app/src/main/java/com/example/changedetection/util/AppExecutors.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.example.changedetection.util;
-
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.NonNull;
-import android.support.annotation.VisibleForTesting;
-
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-
-/**
- * Global executor pools for the whole application.
- * <p>
- * Grouping sites like this avoids the effects of site starvation (e.g. disk reads don't wait behind
- * webservice requests).
- */
-public class AppExecutors {
-
-    private static final int THREAD_COUNT = 3;
-
-    private final Executor diskIO;
-
-    private final Executor networkIO;
-
-    private final Executor mainThread;
-
-    @VisibleForTesting
-    AppExecutors(Executor diskIO, Executor networkIO, Executor mainThread) {
-        this.diskIO = diskIO;
-        this.networkIO = networkIO;
-        this.mainThread = mainThread;
-    }
-
-    public AppExecutors() {
-        this(new DiskIOThreadExecutor(), Executors.newFixedThreadPool(THREAD_COUNT),
-                new MainThreadExecutor());
-    }
-
-    public Executor diskIO() {
-        return diskIO;
-    }
-
-    public Executor networkIO() {
-        return networkIO;
-    }
-
-    public Executor mainThread() {
-        return mainThread;
-    }
-
-    private static class MainThreadExecutor implements Executor {
-        private Handler mainThreadHandler = new Handler(Looper.getMainLooper());
-
-        @Override
-        public void execute(@NonNull Runnable command) {
-            mainThreadHandler.post(command);
-        }
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/util/DiskIOThreadExecutor.java b/app/src/main/java/com/example/changedetection/util/DiskIOThreadExecutor.java
deleted file mode 100755
index 46e8fa7..0000000
--- a/app/src/main/java/com/example/changedetection/util/DiskIOThreadExecutor.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.example.changedetection.util;
-
-import android.support.annotation.NonNull;
-
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-
-/**
- * Executor that runs a site on a new background thread.
- */
-public class DiskIOThreadExecutor implements Executor {
-
-    private final Executor mDiskIO;
-
-    public DiskIOThreadExecutor() {
-        mDiskIO = Executors.newSingleThreadExecutor();
-    }
-
-    @Override
-    public void execute(@NonNull Runnable command) {
-        mDiskIO.execute(command);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/util/FAUIUtils.java b/app/src/main/java/com/example/changedetection/util/FAUIUtils.java
deleted file mode 100644
index 77b1147..0000000
--- a/app/src/main/java/com/example/changedetection/util/FAUIUtils.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.example.changedetection.util;
-
-import android.content.Context;
-import android.content.res.ColorStateList;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.RippleDrawable;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.StateListDrawable;
-import android.graphics.drawable.shapes.RoundRectShape;
-import android.os.Build;
-import android.support.annotation.ColorInt;
-import android.support.v4.content.ContextCompat;
-import android.util.TypedValue;
-
-import com.example.changedetection.R;
-
-import java.util.Arrays;
-
-/**
- * Created by bernardoferrari on 26/08/17.
- */
-
-/**
- * Created by mikepenz on 28.12.15.
- */
-public class FAUIUtils {
-
-    /**
-     * helper to get the system default selectable background inclusive an active state
-     *
-     * @param ctx            the context
-     * @param selected_color the isSelected color
-     * @param animate        true if you want to fade over the states (only animates if API newer than Build.VERSION_CODES.HONEYCOMB)
-     * @return the StateListDrawable
-     */
-    public static StateListDrawable getSelectableBackground(Context ctx, @ColorInt int selected_color, boolean animate) {
-        StateListDrawable states = new StateListDrawable();
-
-        ColorDrawable clrActive = new ColorDrawable(selected_color);
-        states.addState(new int[]{android.R.attr.state_selected}, clrActive);
-
-        states.addState(new int[]{}, ContextCompat.getDrawable(ctx, R.drawable.bg_ripple_white));
-
-        //if possible we enable animating across states
-        if (animate) {
-            int duration = ctx.getResources().getInteger(android.R.integer.config_shortAnimTime);
-            states.setEnterFadeDuration(duration);
-            states.setExitFadeDuration(duration);
-        }
-
-        return states;
-    }
-
-    /**
-     * helper to get the system default selectable background inclusive an active and pressed state
-     *
-     * @param ctx            the context
-     * @param selected_color the isSelected color
-     * @param pressed_alpha  0-255
-     * @param animate        true if you want to fade over the states (only animates if API newer than Build.VERSION_CODES.HONEYCOMB)
-     * @return the StateListDrawable
-     */
-    public static StateListDrawable getSelectablePressedBackground(Context ctx, @ColorInt int selected_color, int pressed_alpha, boolean animate) {
-        StateListDrawable states = getSelectableBackground(ctx, selected_color, animate);
-        ColorDrawable clrPressed = new ColorDrawable(adjustAlpha(selected_color, pressed_alpha));
-        states.addState(new int[]{android.R.attr.state_pressed}, clrPressed);
-        return states;
-    }
-
-    /**
-     * adjusts the alpha of a color
-     *
-     * @param color the color
-     * @param alpha the alpha value we want to set 0-255
-     * @return the adjusted color
-     */
-    public static int adjustAlpha(@ColorInt int color, int alpha) {
-        return (alpha << 24) | (color & 0x00ffffff);
-    }
-
-    /**
-     * helper to get the system default selectable background
-     *
-     * @param ctx
-     * @return
-     */
-    public static int getSelectableBackground(Context ctx) {
-        // If we're running on Honeycomb or newer, then we can use the Theme's
-        // selectableItemBackground to ensure that the View has a pressed state
-        TypedValue outValue = new TypedValue();
-        //it is important here to not use the android.R because this wouldn't add the latest drawable
-        ctx.getTheme().resolveAttribute(com.mikepenz.fastadapter.R.attr.selectableItemBackground, outValue, true);
-        return outValue.resourceId;
-    }
-
-    /**
-     * helper to create an ripple drawable with the given normal and pressed color
-     *
-     * @param normalColor  the normal color
-     * @param pressedColor the pressed color
-     * @param radius       the button radius
-     * @return the ripple drawable
-     */
-    public static Drawable getRippleDrawable(@ColorInt int normalColor, @ColorInt int pressedColor, int radius) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            return new RippleDrawable(ColorStateList.valueOf(pressedColor),
-                    new ColorDrawable(normalColor), getRippleMask(normalColor, radius));
-        } else {
-            return getStateListDrawable(normalColor, pressedColor);
-        }
-    }
-
-    /**
-     * helper to create an ripple mask with the given color and radius
-     *
-     * @param color  the color
-     * @param radius the radius
-     * @return the mask drawable
-     */
-    private static Drawable getRippleMask(int color, int radius) {
-        float[] outerRadius = new float[8];
-        Arrays.fill(outerRadius, radius);
-        RoundRectShape r = new RoundRectShape(outerRadius, null, null);
-        ShapeDrawable shapeDrawable = new ShapeDrawable(r);
-        shapeDrawable.getPaint().setColor(color);
-        return shapeDrawable;
-    }
-
-    /**
-     * helper to create an StateListDrawable for the given normal and pressed color
-     *
-     * @param normalColor  the normal color
-     * @param pressedColor the pressed color
-     * @return the StateListDrawable
-     */
-    private static StateListDrawable getStateListDrawable(
-            int normalColor, int pressedColor) {
-        StateListDrawable states = new StateListDrawable();
-        states.addState(new int[]{android.R.attr.state_pressed},
-                new ColorDrawable(pressedColor));
-        states.addState(new int[]{android.R.attr.state_focused},
-                new ColorDrawable(pressedColor));
-        states.addState(new int[]{android.R.attr.state_activated},
-                new ColorDrawable(pressedColor));
-        states.addState(new int[]{},
-                new ColorDrawable(normalColor));
-        return states;
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/util/SingleLiveEvent.java b/app/src/main/java/com/example/changedetection/util/SingleLiveEvent.java
deleted file mode 100755
index 58275cf..0000000
--- a/app/src/main/java/com/example/changedetection/util/SingleLiveEvent.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- *  Copyright 2017 Google Inc.
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.example.changedetection.util;
-
-import android.arch.lifecycle.LifecycleOwner;
-import android.arch.lifecycle.MutableLiveData;
-import android.arch.lifecycle.Observer;
-import android.support.annotation.MainThread;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * A lifecycle-aware observable that sends only new updates after subscription, used for events like
- * navigation and Snackbar messages.
- * <p>
- * This avoids a common problem with events: on configuration change (like rotation) an update
- * can be emitted if the observer is active. This LiveData only calls the observable if there's an
- * explicit call to setValue() or call().
- * <p>
- * Note that only one observer is going to be notified of changes.
- */
-public class SingleLiveEvent<T> extends MutableLiveData<T> {
-
-    private static final String TAG = "SingleLiveEvent";
-
-    private final AtomicBoolean mPending = new AtomicBoolean(false);
-
-    @MainThread
-    public void observe(LifecycleOwner owner, final Observer<T> observer) {
-
-        if (hasActiveObservers()) {
-            Log.w(TAG, "Multiple observers registered but only one will be notified of changes.");
-        }
-
-        // Observe the internal MutableLiveData
-        super.observe(owner, new Observer<T>() {
-            @Override
-            public void onChanged(@Nullable T t) {
-                if (mPending.compareAndSet(true, false)) {
-                    observer.onChanged(t);
-                }
-            }
-        });
-    }
-
-    @MainThread
-    public void setValue(@Nullable T t) {
-        mPending.set(true);
-        super.setValue(t);
-    }
-
-    /**
-     * Used for cases where T is Void, to make calls cleaner.
-     */
-    @MainThread
-    public void call() {
-        setValue(null);
-    }
-}
diff --git a/app/src/main/java/com/example/changedetection/util/TextDrawable.java b/app/src/main/java/com/example/changedetection/util/TextDrawable.java
deleted file mode 100755
index 8020ee8..0000000
--- a/app/src/main/java/com/example/changedetection/util/TextDrawable.java
+++ /dev/null
@@ -1,310 +0,0 @@
-package com.example.changedetection.util;
-
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.ColorFilter;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.Rect;
-import android.graphics.RectF;
-import android.graphics.Typeface;
-import android.graphics.drawable.ShapeDrawable;
-import android.graphics.drawable.shapes.OvalShape;
-import android.graphics.drawable.shapes.RectShape;
-import android.graphics.drawable.shapes.RoundRectShape;
-
-/**
- * @author amulya
- * @datetime 14 Oct 2014, 3:53 PM
- */
-public class TextDrawable extends ShapeDrawable {
-
-    private static final float SHADE_FACTOR = 0.9f;
-    private final Paint textPaint;
-    private final Paint borderPaint;
-    private final String text;
-    private final int color;
-    private final RectShape shape;
-    private final int height;
-    private final int width;
-    private final int fontSize;
-    private final float radius;
-    private final int borderThickness;
-
-    private TextDrawable(Builder builder) {
-        super(builder.shape);
-
-        // shape properties
-        shape = builder.shape;
-        height = builder.height;
-        width = builder.width;
-        radius = builder.radius;
-
-        // text and color
-        text = builder.toUpperCase ? builder.text.toUpperCase() : builder.text;
-        color = builder.color;
-
-        // text paint settings
-        fontSize = builder.fontSize;
-        textPaint = new Paint();
-        textPaint.setColor(builder.textColor);
-        textPaint.setAntiAlias(true);
-        textPaint.setFakeBoldText(builder.isBold);
-        textPaint.setStyle(Paint.Style.FILL);
-        textPaint.setTypeface(builder.font);
-        textPaint.setTextAlign(Paint.Align.CENTER);
-        textPaint.setStrokeWidth(builder.borderThickness);
-
-        // border paint settings
-        borderThickness = builder.borderThickness;
-        borderPaint = new Paint();
-        borderPaint.setColor(getDarkerShade(color));
-        borderPaint.setStyle(Paint.Style.STROKE);
-        borderPaint.setStrokeWidth(borderThickness);
-
-        // drawable paint color
-        Paint paint = getPaint();
-        paint.setColor(color);
-
-    }
-
-    public static IShapeBuilder builder() {
-        return new Builder();
-    }
-
-    private int getDarkerShade(int color) {
-        return Color.rgb((int) (SHADE_FACTOR * Color.red(color)),
-                (int) (SHADE_FACTOR * Color.green(color)),
-                (int) (SHADE_FACTOR * Color.blue(color)));
-    }
-
-    @Override
-    public void draw(Canvas canvas) {
-        super.draw(canvas);
-        Rect r = getBounds();
-
-
-        // draw border
-        if (borderThickness > 0) {
-            drawBorder(canvas);
-        }
-
-        int count = canvas.save();
-        canvas.translate(r.left, r.top);
-
-        // draw text
-        int width = this.width < 0 ? r.width() : this.width;
-        int height = this.height < 0 ? r.height() : this.height;
-        int fontSize = this.fontSize < 0 ? (Math.min(width, height) / 2) : this.fontSize;
-        textPaint.setTextSize(fontSize);
-        canvas.drawText(text, width / 2, height / 2 - ((textPaint.descent() + textPaint.ascent()) / 2), textPaint);
-
-        canvas.restoreToCount(count);
-
-    }
-
-    private void drawBorder(Canvas canvas) {
-        RectF rect = new RectF(getBounds());
-        rect.inset(borderThickness / 2, borderThickness / 2);
-
-        if (shape instanceof OvalShape) {
-            canvas.drawOval(rect, borderPaint);
-        } else if (shape instanceof RoundRectShape) {
-            canvas.drawRoundRect(rect, radius, radius, borderPaint);
-        } else {
-            canvas.drawRect(rect, borderPaint);
-        }
-    }
-
-    @Override
-    public void setAlpha(int alpha) {
-        textPaint.setAlpha(alpha);
-    }
-
-    @Override
-    public void setColorFilter(ColorFilter cf) {
-        textPaint.setColorFilter(cf);
-    }
-
-    @Override
-    public int getOpacity() {
-        return PixelFormat.TRANSLUCENT;
-    }
-
-    @Override
-    public int getIntrinsicWidth() {
-        return width;
-    }
-
-    @Override
-    public int getIntrinsicHeight() {
-        return height;
-    }
-
-    public interface IConfigBuilder {
-        IConfigBuilder width(int width);
-
-        IConfigBuilder height(int height);
-
-        IConfigBuilder textColor(int color);
-
-        IConfigBuilder withBorder(int thickness);
-
-        IConfigBuilder useFont(Typeface font);
-
-        IConfigBuilder fontSize(int size);
-
-        IConfigBuilder bold();
-
-        IConfigBuilder toUpperCase();
-
-        IShapeBuilder endConfig();
-    }
-
-    public interface IBuilder {
-
-        TextDrawable build(String text, int color);
-    }
-
-    public interface IShapeBuilder {
-
-        IConfigBuilder beginConfig();
-
-        IBuilder rect();
-
-        IBuilder round();
-
-        IBuilder roundRect(int radius);
-
-        TextDrawable buildRect(String text, int color);
-
-        TextDrawable buildRoundRect(String text, int color, int radius);
-
-        TextDrawable buildRound(String text, int color);
-    }
-
-    public static class Builder implements IConfigBuilder, IShapeBuilder, IBuilder {
-
-        public int textColor;
-        public float radius;
-        private String text;
-        private int color;
-        private int borderThickness;
-        private int width;
-        private int height;
-        private Typeface font;
-        private RectShape shape;
-        private int fontSize;
-        private boolean isBold;
-        private boolean toUpperCase;
-
-        private Builder() {
-            text = "";
-            color = Color.GRAY;
-            textColor = Color.WHITE;
-            borderThickness = 0;
-            width = -1;
-            height = -1;
-            shape = new RectShape();
-            font = Typeface.create("sans-serif-light", Typeface.NORMAL);
-            fontSize = -1;
-            isBold = false;
-            toUpperCase = false;
-        }
-
-        public IConfigBuilder width(int width) {
-            this.width = width;
-            return this;
-        }
-
-        public IConfigBuilder height(int height) {
-            this.height = height;
-            return this;
-        }
-
-        public IConfigBuilder textColor(int color) {
-            this.textColor = color;
-            return this;
-        }
-
-        public IConfigBuilder withBorder(int thickness) {
-            this.borderThickness = thickness;
-            return this;
-        }
-
-        public IConfigBuilder useFont(Typeface font) {
-            this.font = font;
-            return this;
-        }
-
-        public IConfigBuilder fontSize(int size) {
-            this.fontSize = size;
-            return this;
-        }
-
-        public IConfigBuilder bold() {
-            this.isBold = true;
-            return this;
-        }
-
-        public IConfigBuilder toUpperCase() {
-            this.toUpperCase = true;
-            return this;
-        }
-
-        @Override
-        public IConfigBuilder beginConfig() {
-            return this;
-        }
-
-        @Override
-        public IShapeBuilder endConfig() {
-            return this;
-        }
-
-        @Override
-        public IBuilder rect() {
-            this.shape = new RectShape();
-            return this;
-        }
-
-        @Override
-        public IBuilder round() {
-            this.shape = new OvalShape();
-            return this;
-        }
-
-        @Override
-        public IBuilder roundRect(int radius) {
-            this.radius = radius;
-            float[] radii = {radius, radius, radius, radius, radius, radius, radius, radius};
-            this.shape = new RoundRectShape(radii, null, null);
-            return this;
-        }
-
-        @Override
-        public TextDrawable buildRect(String text, int color) {
-            rect();
-            return build(text, color);
-        }
-
-        @Override
-        public TextDrawable buildRoundRect(String text, int color, int radius) {
-            roundRect(radius);
-            return build(text, color);
-        }
-
-        @Override
-        public TextDrawable buildRound(String text, int color) {
-            round();
-            return build(text, color);
-        }
-
-        @Override
-        public TextDrawable build(String text, int color) {
-            this.color = color;
-            this.text = text;
-            return new TextDrawable(this);
-        }
-    }
-}
\ No newline at end of file
