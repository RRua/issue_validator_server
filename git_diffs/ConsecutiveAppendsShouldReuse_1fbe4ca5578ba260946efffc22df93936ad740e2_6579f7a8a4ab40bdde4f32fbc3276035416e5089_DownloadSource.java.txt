diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
index c917f201..9d075d5e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
@@ -19,13 +19,10 @@ import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapViewInterface;
 import ch.bailu.aat.menus.FileMenu;
 import ch.bailu.aat.services.editor.EditorHelper;
-import ch.bailu.aat.util.ui.AppLayout;
 import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat.views.BusyButton;
 import ch.bailu.aat.views.ContentView;
-import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.MainControlBar;
-import ch.bailu.aat.views.description.MultiView;
 
 public abstract class AbsFileContentActivity extends AbsDispatcher implements OnClickListener {
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index d3251e5e..348717d2 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -14,10 +14,7 @@ import java.io.File;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.description.ContentDescription;
-import ch.bailu.aat.description.DistanceDescription;
-import ch.bailu.aat.description.NameDescription;
 import ch.bailu.aat.description.PathDescription;
-import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.dispatcher.CurrentLocationSource;
 import ch.bailu.aat.dispatcher.IteratorSource;
 import ch.bailu.aat.dispatcher.OverlaySource;
@@ -31,7 +28,6 @@ import ch.bailu.aat.services.directory.Iterator;
 import ch.bailu.aat.services.directory.IteratorSimple;
 import ch.bailu.aat.util.ui.AppLayout;
 import ch.bailu.aat.views.ContentView;
-import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.DbSynchronizerBusyIndicator;
 import ch.bailu.aat.views.GpxListView;
 import ch.bailu.aat.views.MainControlBar;
diff --git a/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
index 1c79e983..e4ed1feb 100644
--- a/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/FileContentActivity.java
@@ -17,7 +17,6 @@ import ch.bailu.aat.description.TimeDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapFactory;
-import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.util.ui.AppLayout;
 import ch.bailu.aat.views.MainControlBar;
 import ch.bailu.aat.views.PercentageLayout;
diff --git a/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java b/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
index 3ff92a7c..ff9eb340 100644
--- a/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/GpxEditorActivity.java
@@ -16,7 +16,6 @@ import ch.bailu.aat.dispatcher.OnContentUpdatedInterface;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapFactory;
-import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.services.editor.EditorInterface;
 import ch.bailu.aat.util.ui.AppDialog;
 import ch.bailu.aat.util.ui.AppLayout;
diff --git a/app/src/main/java/ch/bailu/aat/activities/ImportListActivity.java b/app/src/main/java/ch/bailu/aat/activities/ImportListActivity.java
index c4fe4bba..a0385b3f 100644
--- a/app/src/main/java/ch/bailu/aat/activities/ImportListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/ImportListActivity.java
@@ -9,7 +9,6 @@ import ch.bailu.aat.description.ContentDescription;
 import ch.bailu.aat.description.DateDescription;
 import ch.bailu.aat.description.DistanceDescription;
 import ch.bailu.aat.description.NameDescription;
-import ch.bailu.aat.description.PathDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.util.fs.AppDirectory;
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
index 212c3ce1..6e37f01d 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
@@ -14,24 +14,17 @@ import ch.bailu.aat.views.MainControlBar;
 public class MapFeaturesActivity extends AbsDispatcher {
     
     private FeaturesList list;
-    
-//    private BusyButton download;
 
     
-    
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         
         ContentView contentView = new ContentView(this, ContentView.VERTICAL);
         
-//        download = new BusyButton(this,R.drawable.go_bottom_inverse);
-//        ToolTip.set(download, R.string.tt_overpass_download_features);
-//        download.setOnClickListener(this);
 
         final ControlBar bar = new MainControlBar(this, LinearLayout.HORIZONTAL, 6);
         
-//        bar.addView(download);
         bar.addIgnoreSize(AppTheme.getTitleTextView(this, R.string.query_features));
 
         list = new FeaturesList(this);
@@ -41,14 +34,11 @@ public class MapFeaturesActivity extends AbsDispatcher {
 
         setContentView(contentView);
 
-        //AppBroadcaster.register(this, onFileProcessed, AppBroadcaster.FILE_CHANGED_ONDISK);
-
     }
     
 
     @Override
     public void onDestroy() {
-        //unregisterReceiver(onFileProcessed);
         super.onDestroy();
     }
 
@@ -61,23 +51,6 @@ public class MapFeaturesActivity extends AbsDispatcher {
 
 
 
-//
-//    private final BroadcastReceiver onFileProcessed = new BroadcastReceiver() {
-//
-//        @Override
-//        public void onReceive(Context context, Intent intent) {
-//            try {
-//                if (AppIntent.hasFile(intent, AppDirectory.getMapFeatureIndex(context).toString())) {
-//                    download.stopWaiting();
-//                    loadList();                }
-//            } catch (Exception e) {
-//                loadList();
-//                download.stopWaiting();
-//                AppLog.e(MapFeaturesActivity.this, this,e);
-//            }
-//        }
-//    };
-
 
     private void loadList() {
         if (getServiceContext().lock()) {
diff --git a/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java b/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
index 7653e107..4b7ffa3b 100644
--- a/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
@@ -9,7 +9,6 @@ import ch.bailu.aat.description.ContentDescription;
 import ch.bailu.aat.description.DateDescription;
 import ch.bailu.aat.description.DistanceDescription;
 import ch.bailu.aat.description.NameDescription;
-import ch.bailu.aat.description.PathDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.util.fs.AppDirectory;
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
index 1fef176b..93b3e8d5 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
@@ -5,18 +5,6 @@ import android.os.Bundle;
 import android.view.View;
 import android.widget.LinearLayout;
 
-import org.mapsforge.core.model.LatLong;
-import org.mapsforge.map.android.graphics.AndroidGraphicFactory;
-import org.mapsforge.map.android.util.AndroidUtil;
-import org.mapsforge.map.android.view.MapView;
-import org.mapsforge.map.datastore.MapDataStore;
-import org.mapsforge.map.layer.cache.TileCache;
-import org.mapsforge.map.layer.renderer.TileRendererLayer;
-import org.mapsforge.map.reader.MapFile;
-import org.mapsforge.map.rendertheme.InternalRenderTheme;
-
-import java.io.File;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.description.AccelerationDescription;
 import ch.bailu.aat.description.AccuracyDescription;
@@ -54,7 +42,6 @@ import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
 import ch.bailu.aat.map.layer.gpx.GpxOverlayListLayer;
 import ch.bailu.aat.map.layer.gpx.GpxTestLayer;
 import ch.bailu.aat.map.layer.grid.GridDynLayer;
-import ch.bailu.aat.map.mapsforge.MapsForgeView;
 import ch.bailu.aat.test.PreferencesFromSdcard;
 import ch.bailu.aat.test.PreferencesToSdcard;
 import ch.bailu.aat.test.TestCoordinates;
diff --git a/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java b/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
index c8826930..18ff812e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
@@ -11,7 +11,6 @@ import ch.bailu.aat.description.DateDescription;
 import ch.bailu.aat.description.DistanceDescription;
 import ch.bailu.aat.description.MaximumSpeedDescription;
 import ch.bailu.aat.description.NameDescription;
-import ch.bailu.aat.description.PathDescription;
 import ch.bailu.aat.description.TimeDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.preferences.SolidPreset;
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
index d546156f..d13f15fd 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
@@ -42,12 +42,9 @@ public abstract class Coordinates {
 
 
     public static String geoPointToDescription(LatLong src) {
-        StringBuilder b = new StringBuilder();
-
-        b.append("Coordinates:\nLatitude:");
-        b.append(src.getLatitude());
-        b.append("Longitude:");
-        b.append(src.getLongitude());
-
-        return b.toString();    }
+        return "Coordinates:\nLatitude:" +
+                src.getLatitude() +
+                "Longitude:" +
+                src.getLongitude();
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java
index 37bdecd5..dd79a9a6 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxAttributesDbCursor.java
@@ -1,10 +1,7 @@
 package ch.bailu.aat.gpx;
 
 
-import android.database.Cursor;
-
-import ch.bailu.aat.services.directory.GpxDbConstants;
-
+/*
 public class GpxAttributesDbCursor extends GpxAttributes {
     private final Cursor cursor;
     private final int position;
@@ -17,7 +14,7 @@ public class GpxAttributesDbCursor extends GpxAttributes {
 
     @Override
     public int size() {
-        return GpxDbConstants.KEY_LIST.length;
+        return GpxDbConstants.KEY_LIST_NEW.length;
     }
 
     @Override
@@ -26,7 +23,7 @@ public class GpxAttributesDbCursor extends GpxAttributes {
 
     @Override
     public String getKey(int i) {
-        return GpxDbConstants.KEY_LIST[i];
+        return GpxDbConstants.KEY_LIST_NEW[i];
     }
 
     @Override
@@ -58,3 +55,4 @@ public class GpxAttributesDbCursor extends GpxAttributes {
         return cursor.getString(column);
     }
 }
+*/
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsm.java b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsm.java
index 8aae2897..fa37c762 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsm.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsm.java
@@ -42,7 +42,7 @@ public class StateOsm extends ParserState {
 
 
     // <gpx oder <osm
-    /**
+    /*
     <osm version="0.6" generator="Overpass API">
     <note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.</note>
     <meta osm_base="2012-11-29T14:56:02Z"/>
diff --git a/app/src/main/java/ch/bailu/aat/map/TwoNodes.java b/app/src/main/java/ch/bailu/aat/map/TwoNodes.java
index ee54f138..1bab85ee 100644
--- a/app/src/main/java/ch/bailu/aat/map/TwoNodes.java
+++ b/app/src/main/java/ch/bailu/aat/map/TwoNodes.java
@@ -13,7 +13,7 @@ public class TwoNodes {
 
 
     public class PixelNode {
-        public Pixel pixel = new Pixel();
+        public final Pixel pixel = new Pixel();
         public GpxPointInterface point = GpxPoint.NULL;
 
         public boolean isVisible() {
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/NodeSelectorLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/NodeSelectorLayer.java
index 286084f7..30fb8790 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/NodeSelectorLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/NodeSelectorLayer.java
@@ -31,7 +31,6 @@ public abstract class NodeSelectorLayer implements MapLayerInterface, OnContentU
             new SparseArray<>(5);
 
     private final Rect centerRect = new Rect();
-    private Pixel selectedPixel = new Pixel();
 
     private int foundID, foundIndex;
     private GpxPointNode foundNode;
@@ -83,12 +82,7 @@ public abstract class NodeSelectorLayer implements MapLayerInterface, OnContentU
 
     @Override
     public void drawInside(MapContext mcontext) {
-
-        //boundingBox.maxLatitude/2;
-
-        //Pixel center = mcontext.metrics.getCenterPixel();
         coordinates.drawInside(mcontext);
-
     }
 
 
@@ -134,7 +128,7 @@ public abstract class NodeSelectorLayer implements MapLayerInterface, OnContentU
         GpxPointNode node = getSelectedNode();
 
         if (node != null) {
-            selectedPixel = mcontext.getMetrics().toPixel(node);
+            Pixel selectedPixel = mcontext.getMetrics().toPixel(node);
             mcontext.draw().bitmap(mcontext.draw().getNodeBitmap(), selectedPixel, COLOR);
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/RouteLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/RouteLayer.java
index 4eb3a2a1..bee1d578 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/RouteLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/RouteLayer.java
@@ -8,7 +8,7 @@ import ch.bailu.aat.map.MapContext;
 import ch.bailu.aat.map.TwoNodes;
 import ch.bailu.aat.services.dem.ElevationProvider;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.aat.views.graph.ColorTable;
+import ch.bailu.aat.views.graph.AltitudeColorTable;
 
 public class RouteLayer extends GpxLayer {
 
@@ -79,7 +79,7 @@ public class RouteLayer extends GpxLayer {
             int altitude=node.point.getAltitude();
 
             if (altitude == ElevationProvider.NULL_ALTITUDE) c=getColor();
-            else c= ColorTable.altitude.getColor(altitude);
+            else c= AltitudeColorTable.INSTANCE.getColor(altitude);
 
             mcontext.draw().bitmap(mcontext.draw().getNodeBitmap(), node.pixel, c);
         }
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/TrackLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/TrackLayer.java
index 078a874d..674d8df9 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/TrackLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/TrackLayer.java
@@ -11,7 +11,7 @@ import org.mapsforge.map.android.graphics.AndroidGraphicFactory;
 
 import ch.bailu.aat.map.MapContext;
 import ch.bailu.aat.map.TwoNodes;
-import ch.bailu.aat.views.graph.ColorTable;
+import ch.bailu.aat.views.graph.AltitudeColorTable;
 
 public class TrackLayer  extends GpxLayer{
     private static final int STROKE_WIDTH=3;
@@ -76,7 +76,7 @@ public class TrackLayer  extends GpxLayer{
         @Override
         public void drawNode(TwoNodes.PixelNode node) {
             int altitude=node.point.getAltitude();
-            int color= ColorTable.altitude.getColor(altitude);
+            int color= AltitudeColorTable.INSTANCE.getColor(altitude);
             paint.setColor(color);
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/LegendWalker.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/LegendWalker.java
index e52ba337..b9c39880 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/LegendWalker.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/LegendWalker.java
@@ -16,10 +16,9 @@ public abstract class LegendWalker extends GpxListWalker {
 
     @Override
     public boolean doList(GpxList track) {
-        if (track.getPointList().size() > 0 && c.isVisible(track.getDelta().getBoundingBox())) {
-            return true;
-        }
-        return false;
+        return
+                track.getPointList().size() > 0 &&
+                        c.isVisible(track.getDelta().getBoundingBox());
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
index 27a49638..180a897d 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/FrameBufferHack.java
@@ -23,7 +23,6 @@ public class FrameBufferHack extends FrameBuffer {
     private Dimension dimension;
     private final DisplayModel displayModel;
     private final FrameBufferModel frameBufferModel;
-    private final GraphicFactory graphicFactory;
     private final Matrix matrix;
 
     private final Object dimLock = new Object();
@@ -32,7 +31,7 @@ public class FrameBufferHack extends FrameBuffer {
         super(model.frameBufferModel, model.displayModel, AndroidGraphicFactory.INSTANCE);
         this.frameBufferModel = model.frameBufferModel;
         this.displayModel = model.displayModel;
-        this.graphicFactory = AndroidGraphicFactory.INSTANCE;
+        GraphicFactory graphicFactory = AndroidGraphicFactory.INSTANCE;
         this.matrix = graphicFactory.createMatrix();
     }
 
@@ -58,9 +57,9 @@ public class FrameBufferHack extends FrameBuffer {
 
 
     private void swapBitmaps() {
-        /**
-         * Swap bitmaps only if the layerManager is currently not working and
-         * has drawn a new bitmap since the last swap
+        /*
+          Swap bitmaps only if the layerManager is currently not working and
+          has drawn a new bitmap since the last swap
          */
         if (FrameBufferBitmap.swap(odBitmap, lmBitmap)) {
             frameBufferModel.setMapPosition(lmMapPosition);
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
index 7bcbb1e3..59403e9f 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeViewBase.java
@@ -7,7 +7,6 @@ import android.view.GestureDetector.SimpleOnGestureListener;
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.mapsforge.core.graphics.GraphicContext;
 import org.mapsforge.core.model.BoundingBox;
 import org.mapsforge.core.model.Dimension;
 import org.mapsforge.core.model.MapPosition;
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java b/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
index a9e428cc..c8c72be6 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
@@ -6,27 +6,67 @@ import java.io.Closeable;
 
 import ch.bailu.aat.services.ServiceContext;
 
-public class TileCache<T> implements Closeable {
+public abstract class TileCache<T> implements Closeable {
 
-    public T get(String string) {
-        return null;
-    }
+    public abstract T get(String string);
 
 
-    public T get(Tile mt) {
-        return null;
-    }
+    public abstract T get(Tile mt);
 
 
-    public void put(T handle) {}
+    public abstract void put(T handle);
 
+    /*
     @Override
     public void close() {}
+*/
 
+    public abstract void reDownloadTiles(ServiceContext sc);
+    public abstract void reset();
+    public abstract void setCapacity(int capacity);
 
-    public void reDownloadTiles(ServiceContext sc) {}
-    public void reset() {}
-    public void setCapacity(int capacity) {}
+    public abstract int size();// {return 0;}
 
-    public int size() {return 0;}
+    //public final static TileCache
+
+    public final static TileCache NULL = new TileCache<Object>() {
+
+        @Override
+        public Object get(String string) {
+            return null;
+        }
+
+        @Override
+        public Object get(Tile mt) {
+            return null;
+        }
+
+        @Override
+        public void put(Object handle) {
+
+        }
+
+        @Override
+        public void reDownloadTiles(ServiceContext sc) {
+
+        }
+
+        @Override
+        public void reset() {
+
+        }
+
+        @Override
+        public void setCapacity(int capacity) {
+
+        }
+
+        @Override
+        public int size() {
+            return 0;
+        }
+
+        @Override
+        public void close() {}
+    };
 }
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java b/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
index aabe9239..4bb1502d 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
@@ -7,8 +7,8 @@ import ch.bailu.aat.services.cache.LockCache;
 import ch.bailu.aat.services.cache.TileObject;
 
 public class TileObjectCache extends TileCache<TileObject> {
-    public static final TileCache<TileObject> NULL
-            = new TileCache<TileObject>() {};
+//    public static final TileCache.NullCache<TileObject> NULL
+//            = new TileCache.NullCache<TileObject>() {};
 
 
     private final static int INITIAL_CAPACITY = 5;
@@ -68,5 +68,10 @@ public class TileObjectCache extends TileCache<TileObject> {
         tiles.ensureCapacity(capacity);
     }
 
+    @Override
+    public int size() {
+        return tiles.size();
+    }
+
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
index 3510a03e..f812623a 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
@@ -42,11 +42,11 @@ public class CachedSource extends Source {
     public int getPaintFlags() {
         return source.getPaintFlags();
     }
-
+/*
     public Source getSource() {
         return source;
     }
-
+*/
     @Override
     public ObjectHandle.Factory getFactory(Tile tile) {
         return new CachedTileObject.Factory(tile, source);
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
index afdfbedd..bcbb5c64 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
@@ -24,7 +24,7 @@ public class DownloadSource extends Source {
     private final String[] urls;
 
     private final int alpha;
-    private boolean transparent;
+    private final boolean transparent;
 
 
     public DownloadSource(String n, int a, final String... url) {
@@ -99,16 +99,15 @@ public class DownloadSource extends Source {
 
 
     private String getTileRelativeFilename(final Tile tile) {
-        final StringBuilder sb = new StringBuilder();
-        sb.append(name);
-        sb.append('/');
-        sb.append(tile.zoomLevel);
-        sb.append('/');
-        sb.append(tile.tileX);
-        sb.append('/');
-        sb.append(tile.tileY);
-        sb.append(EXT);
-        return sb.toString();
+        return  name +
+                '/' +
+                tile.zoomLevel +
+                '/' +
+                tile.tileX +
+                '/' +
+                tile.tileY +
+                EXT;
+
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java b/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
index 9c125ecf..664e2b9d 100644
--- a/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
@@ -6,8 +6,6 @@ import android.view.ContextMenu;
 import android.view.Menu;
 import android.view.MenuItem;
 
-import java.io.File;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.tileremover.SelectedTileDirectoryInfo;
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidEnableTileCache.java b/app/src/main/java/ch/bailu/aat/preferences/SolidEnableTileCache.java
index fb9d9356..113176f2 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidEnableTileCache.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidEnableTileCache.java
@@ -2,7 +2,6 @@ package ch.bailu.aat.preferences;
 
 import android.content.Context;
 
-import ch.bailu.aat.map.tile.source.CachedSource;
 import ch.bailu.aat.map.tile.source.MapsForgeSource;
 import ch.bailu.aat.map.tile.source.Source;
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
index 9aa71651..1da802a0 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
@@ -5,7 +5,6 @@ import android.content.Context;
 import org.mapsforge.map.rendertheme.ExternalRenderTheme;
 import org.mapsforge.map.rendertheme.InternalRenderTheme;
 import org.mapsforge.map.rendertheme.XmlRenderTheme;
-import org.mapsforge.map.rendertheme.rule.RenderTheme;
 
 import java.io.File;
 import java.io.FileFilter;
diff --git a/app/src/main/java/ch/bailu/aat/services/AbsService.java b/app/src/main/java/ch/bailu/aat/services/AbsService.java
index b1bda4f9..a385f14a 100644
--- a/app/src/main/java/ch/bailu/aat/services/AbsService.java
+++ b/app/src/main/java/ch/bailu/aat/services/AbsService.java
@@ -32,10 +32,6 @@ public abstract class AbsService  extends Service {
                 startService(new Intent(this,  OneService.class));
                 lazyOff.close();
             }
-
-
-//            AppLog.d(this, "locked " + lockWhenSwapped + " times.");
-
         }
         return up;
     }
@@ -48,9 +44,6 @@ public abstract class AbsService  extends Service {
             if (lock == 0) {
                 lazyOff.kick();
             }
-
-//            AppLog.d(this, "locked " + lockWhenSwapped + " times.");
-
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/background/ProcessThread.java b/app/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
index e293bbef..fac951e0 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
@@ -4,14 +4,33 @@ import java.io.Closeable;
 import java.util.concurrent.ArrayBlockingQueue;
 
 public abstract class ProcessThread extends Thread implements Closeable, ThreadControl {
-    
+
     private boolean continueThread=true;
     
     private final ArrayBlockingQueue<ProcessHandle> queue;
 
     private final int SIZE;
     
-    private ProcessHandle currentHandle=ProcessHandle.NULL;
+    private final BackgroundHandle background = new BackgroundHandle();
+    private class BackgroundHandle {
+        private ProcessHandle handle = ProcessHandle.NULL;
+
+        public void process(ProcessHandle h) {
+            if (h.canContinue()) {
+                synchronized(this) {
+                    handle = h;
+                }
+                bgOnHaveHandle(handle);
+            }
+        }
+
+
+        public void stop() {
+            synchronized(this) {
+                handle.stopLoading();
+            }
+        }
+    }
 
 
     public ProcessThread(int size) {
@@ -27,13 +46,7 @@ public abstract class ProcessThread extends Thread implements Closeable, ThreadC
 
             try {
                 ProcessHandle newHandle = queue.take();
-                // FIXME: Synchronization on a non-final field
-                if (newHandle.canContinue()) {
-                    synchronized(currentHandle) {
-                        currentHandle=newHandle;
-                    }
-                    bgOnHaveHandle(currentHandle);
-                }
+                background.process(newHandle);
 
             } catch (InterruptedException e) {
                 continueThread=false;
@@ -57,9 +70,7 @@ public abstract class ProcessThread extends Thread implements Closeable, ThreadC
 
         queue.clear();
 
-        synchronized(currentHandle) {
-            currentHandle.stopLoading();
-        }
+        background.stop();
 
         process(ProcessHandle.NULL);
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
index 3c05843c..a7f66780 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
@@ -4,7 +4,7 @@ import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.dem.DemProvider;
-import ch.bailu.aat.views.graph.ColorTable;
+import ch.bailu.aat.views.graph.AltitudeColorTable;
 
 public class ElevationColorTile extends ElevationTile {
 
@@ -38,7 +38,7 @@ public class ElevationColorTile extends ElevationTile {
                     if (new_offset != offset) {
                         offset=new_offset;
 
-                        color=ColorTable.altitude.getColor(dem.getElevation(line + offset));
+                        color= AltitudeColorTable.INSTANCE.getColor(dem.getElevation(line + offset));
                     }
 
                     buffer[c]=color;
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/FreeLater.java b/app/src/main/java/ch/bailu/aat/services/cache/FreeLater.java
index f6bcc190..4b89ed98 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/FreeLater.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/FreeLater.java
@@ -1,9 +1,6 @@
 package ch.bailu.aat.services.cache;
 
-import android.util.SparseArray;
-
-import java.io.Closeable;
-
+/*
 public class FreeLater implements Closeable {
     private final static int INITIAL_CAPACITY=20;
     private final SparseArray<ObjectHandle> table = new SparseArray<>(INITIAL_CAPACITY);
@@ -33,3 +30,4 @@ public class FreeLater implements Closeable {
         freeAll();
     }
 }
+*/
\ No newline at end of file
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/SVGAssetImageObject.java b/app/src/main/java/ch/bailu/aat/services/cache/SVGAssetImageObject.java
index ce561c94..5bd469a6 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/SVGAssetImageObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/SVGAssetImageObject.java
@@ -26,9 +26,7 @@ public class SVGAssetImageObject extends ImageObjectAbstract {
 
             bitmap.set(svg, size);
 
-        } catch (SVGParseException e) {
-            AppLog.e(sc.getContext(), e);
-        } catch (IOException e) {
+        } catch (SVGParseException | IOException e) {
             AppLog.e(sc.getContext(), e);
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
index e9e38e2a..5a63f4b1 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
@@ -119,7 +119,7 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
     }
     
     
-    public boolean isLocked() {
+    private boolean isLocked() {
         return lock != 0;
     }
     
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitter.java b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitter.java
index 2f83db3c..e8c00b24 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitter.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitter.java
@@ -57,16 +57,16 @@ public class DemSplitter implements DemProvider {
 
         
 
-        /**
-         * Kernel:
-         *  a b c
-         *  d E f
-         *  g h i
-         *   
-         *    
-         * Splitted E: 
-         *   A B 
-         *   C D
+        /*
+          Kernel:
+           a b c
+           d E f
+           g h i
+
+
+          Splitted E:
+            A B
+            C D
          */
 
         final int e = parent_index;
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterNW.java b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterNW.java
index a899c5bb..20cf00e2 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterNW.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterNW.java
@@ -22,13 +22,13 @@ public class DemSplitterNW extends DemSplitter {
         float sum;
         final float div=2;
 
-        /**
-         *  a b
-         *  C d
-         *  
-         *  [0,0] [0,1]
-         *  [1,0] [1,1]
-         *  
+        /*
+           a b
+           C d
+
+           [0,0] [0,1]
+           [1,0] [1,1]
+
          */
 
         final int D = parent.getElevation(parent_index);
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSE.java b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSE.java
index 769e40a0..95b91693 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSE.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSE.java
@@ -23,13 +23,13 @@ public class DemSplitterSE extends DemSplitter {
         float sum;
         final float div=2;
 
-        /**
-         *  a b
-         *  C d
-         *  
-         *  [0,0] [0,1]
-         *  [1,0] [1,1]
-         *  
+        /*
+           a b
+           C d
+
+           [0,0] [0,1]
+           [1,0] [1,1]
+
          */
         final int A = parent.getElevation(parent_index);
         if (row_mode+col_mode == 0) { // a
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSW.java b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSW.java
index 0b0b447a..41506e9a 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSW.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/DemSplitterSW.java
@@ -22,13 +22,13 @@ public class DemSplitterSW extends DemSplitter {
         float sum;
         final float div=2;
 
-        /**
-         *  a b
-         *  C d
-         *  
-         *  [0,0] [0,1]
-         *  [1,0] [1,1]
-         *  
+        /*
+           a b
+           C d
+
+           [0,0] [0,1]
+           [1,0] [1,1]
+
          */
 
         final int B = parent.getElevation(parent_index);
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/ElevationProvider.java b/app/src/main/java/ch/bailu/aat/services/dem/ElevationProvider.java
index c950c20d..38624732 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/ElevationProvider.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/ElevationProvider.java
@@ -5,15 +5,7 @@ package ch.bailu.aat.services.dem;
 public interface ElevationProvider {
     final static int NULL_ALTITUDE=0;
 
-/*    final static ElevationProvider NULL=new ElevationProvider() {
 
-        @Override
-        public short getElevation(int laE6, int loE6) {
-            return NULL_ALTITUDE;
-        }
-        
-    };*/
-    
     public short getElevation(int laE6, int loE6);
     
     
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/MultiCell4NW.java b/app/src/main/java/ch/bailu/aat/services/dem/MultiCell4NW.java
index 983c9358..1c3ddc52 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/MultiCell4NW.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/MultiCell4NW.java
@@ -1,7 +1,7 @@
 package ch.bailu.aat.services.dem;
 
 public class MultiCell4NW extends MultiCell {
-    /**
+    /*
      *      a  b
      *      c  D
      */
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
index 31420c95..83811ef8 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
@@ -287,7 +287,7 @@ public class DirectorySynchronizer  implements Closeable {
             BoundingBoxE6 box = summary.getBoundingBox();
 
             ContentValues content = new ContentValues();
-            content.put(GpxDbConstants.KEY_PATHNAME_OLD,   pathname);
+            //content.put(GpxDbConstants.KEY_PATHNAME_OLD,   pathname);
             content.put(GpxDbConstants.KEY_FILENAME,   filename);
             content.put(GpxDbConstants.KEY_AVG_SPEED,  summary.getSpeed());
             content.put(GpxDbConstants.KEY_MAX_SPEED,  summary.getMaximumSpeed());
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
index 08a9e534..ab1b4544 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
@@ -34,7 +34,7 @@ public class GpxDatabase extends AbsDatabase{
     public GpxDatabase (ServiceContext sc, File path)
             throws IOException, SQLiteCantOpenDatabaseException {
 
-        this(sc, path, GpxDbConstants.KEY_LIST);
+        this(sc, path, GpxDbConstants.KEY_LIST_NEW);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
index 71e1352e..aa5ba8fd 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
@@ -4,9 +4,10 @@ public class GpxDbConstants {
     public final static int DB_VERSION=8;
 
     public final static String DB_TABLE="summary";
-    
-    
-    public final static String KEY_PATHNAME_OLD="pathname";
+
+    // leave this filed for DB backward compability
+    private final static String KEY_PATHNAME_OLD="pathname";
+
     public final static String KEY_FILENAME="filename";
     public final static String KEY_DISTANCE="distance";
     public final static String KEY_MAX_SPEED="max_speed";
@@ -31,7 +32,7 @@ public class GpxDbConstants {
     public final static String TYPE_ID = "INTEGER PRIMARY KEY";
 
 
-    public static final String[] KEY_LIST = new String[] {
+    public static final String[] KEY_LIST_NEW = new String[] {
             KEY_ID,
             KEY_FILENAME,
             KEY_AVG_SPEED,
@@ -85,21 +86,4 @@ public class GpxDbConstants {
         TYPE_LONG,
         TYPE_LONG
     };
-
-    public static final String[] TYPE_LIST = new String[] {
-            TYPE_ID,
-            TYPE_STRING,
-            TYPE_FLOAT,
-            TYPE_FLOAT,
-            TYPE_FLOAT,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG,
-            TYPE_LONG
-    };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/location/AccuracyFilter.java b/app/src/main/java/ch/bailu/aat/services/location/AccuracyFilter.java
index 545b3544..af3fa265 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/AccuracyFilter.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/AccuracyFilter.java
@@ -3,7 +3,6 @@ package ch.bailu.aat.services.location;
 import android.content.Context;
 
 import ch.bailu.aat.preferences.SolidAccuracyFilter;
-import ch.bailu.aat.util.ui.AppLog;
 
 
 public class AccuracyFilter extends LocationStackChainedItem {
diff --git a/app/src/main/java/ch/bailu/aat/services/location/AutopauseTrigger.java b/app/src/main/java/ch/bailu/aat/services/location/AutopauseTrigger.java
index 6ae41fdf..21d22951 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/AutopauseTrigger.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/AutopauseTrigger.java
@@ -3,24 +3,32 @@ package ch.bailu.aat.services.location;
 import android.content.Context;
 
 import ch.bailu.aat.preferences.SolidAutopause;
+import ch.bailu.aat.util.ui.AppLog;
 
 
 public class AutopauseTrigger extends LocationStackChainedItem {
     private float triggerSpeed=0f;
     private Trigger trigger=new Trigger(10);
 
-    private final Context context;
+    private final Context logContext;
+
     public AutopauseTrigger(Context c, LocationStackItem n) {
         super(n);
-        context = c;
+
+        logContext = c;
     }
 
+    public AutopauseTrigger(LocationStackItem n) {
+        this(null, n);
+    }
+
+
     @Override
     public void close() {}
 
     @Override
     public void newLocation(LocationInformation location) {
-//        AppLog.d(this, "newLocation() -> send");
+
 
         float speed = location.getSpeed();
         if (speed < triggerSpeed) {
@@ -28,8 +36,11 @@ public class AutopauseTrigger extends LocationStackChainedItem {
         } else {
             trigger.up();
         }
-//        trigger.log(context);
-//        if (isAutopaused()) AppLog.d(this, "isAutopaused");
+
+        if (logContext != null) {
+            trigger.log(logContext);
+        }
+
         sendLocation(location);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/location/CleanLocation.java b/app/src/main/java/ch/bailu/aat/services/location/CleanLocation.java
index c63ef793..70aeaff3 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/CleanLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/CleanLocation.java
@@ -4,7 +4,6 @@ import android.content.Context;
 
 import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class CleanLocation extends LocationStackItem {
     private static final long LOCATION_LIFETIME_MILLIS=5*1000;
diff --git a/app/src/main/java/ch/bailu/aat/services/location/DirtyLocation.java b/app/src/main/java/ch/bailu/aat/services/location/DirtyLocation.java
index 1bbbbc5a..e1a8922c 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/DirtyLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/DirtyLocation.java
@@ -8,7 +8,6 @@ import ch.bailu.aat.gpx.StateID;
 import ch.bailu.aat.map.layer.MapPositionLayer;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class DirtyLocation extends LocationStackChainedItem {
     private final static String SOLID_KEY="DirtyLocation_";
diff --git a/app/src/main/java/ch/bailu/aat/services/location/DistanceFilter.java b/app/src/main/java/ch/bailu/aat/services/location/DistanceFilter.java
index ed76d722..bab0242e 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/DistanceFilter.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/DistanceFilter.java
@@ -4,7 +4,6 @@ import android.content.Context;
 
 import ch.bailu.aat.gpx.GpxDeltaHelper;
 import ch.bailu.aat.preferences.SolidDistanceFilter;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class DistanceFilter extends LocationStackChainedItem {
     private LocationInformation oldLocation=null;
diff --git a/app/src/main/java/ch/bailu/aat/services/location/InformationFilter.java b/app/src/main/java/ch/bailu/aat/services/location/InformationFilter.java
index 083f6c26..28ca0772 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/InformationFilter.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/InformationFilter.java
@@ -2,8 +2,6 @@ package ch.bailu.aat.services.location;
 
 import android.content.Context;
 
-import ch.bailu.aat.util.ui.AppLog;
-
 public class InformationFilter extends LocationStackChainedItem {
 
     public InformationFilter(LocationStackItem n) {
diff --git a/app/src/main/java/ch/bailu/aat/services/location/LocationService.java b/app/src/main/java/ch/bailu/aat/services/location/LocationService.java
index 9f0725f9..d7beebf7 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/LocationService.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/LocationService.java
@@ -56,7 +56,7 @@ public class LocationService extends VirtualService
 
         itemList.add(new DistanceFilter(lastItem()));
 
-        autopause=new AutopauseTrigger(getContext(),lastItem());
+        autopause=new AutopauseTrigger(lastItem());
         itemList.add(autopause);
 
         missing = new MissingTrigger(lastItem()); 
diff --git a/app/src/main/java/ch/bailu/aat/services/location/MissingTrigger.java b/app/src/main/java/ch/bailu/aat/services/location/MissingTrigger.java
index 3314a904..1ba566e0 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/MissingTrigger.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/MissingTrigger.java
@@ -3,7 +3,6 @@ package ch.bailu.aat.services.location;
 import android.content.Context;
 
 import ch.bailu.aat.preferences.SolidMissingTrigger;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class MissingTrigger extends LocationStackChainedItem {
     private int triggerMillis=15000;
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Caches.java b/app/src/main/java/ch/bailu/aat/services/render/Caches.java
index 7ad17e6b..68b6b33e 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Caches.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Caches.java
@@ -6,7 +6,7 @@ import ch.bailu.aat.services.cache.MapsForgeTileObject;
 import ch.bailu.aat.util.ui.AppLog;
 
 public class Caches {
-    private HashMap<String, Cache> caches = new HashMap<>(5);
+    private final HashMap<String, Cache> caches = new HashMap<>(5);
 
 
     public void lockToCache(MapsForgeTileObject o) {
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Configuration.java b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
index 22a23c02..27ef31fc 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
@@ -28,12 +28,11 @@ public class Configuration {
         return renderer != null;     }
 
 
-    public boolean configure(File mapDir, Caches caches, XmlRenderTheme theme, String tID) {
+    public void configure(File mapDir, Caches caches, XmlRenderTheme theme, String tID) {
         if (isConfigured() == false && configureMapList(mapDir)) {
             themeID = tID;
             renderer = new Renderer(theme, caches.get(themeID), mapFiles);
         }
-        return isConfigured();
     }
 
     public void destroy() {
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
index 9bcafe32..cd41eca5 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
@@ -7,7 +7,6 @@ import ch.bailu.aat.preferences.SolidTrimIndex;
 import ch.bailu.aat.preferences.SolidTrimMode;
 import ch.bailu.aat.preferences.SolidTrimSize;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.ui.AppLog;
 
 public class StateScanForRemoval implements State, Runnable {
     private final StateMachine state;
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
index 7c312e91..deb19b75 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
@@ -1,12 +1,8 @@
 package ch.bailu.aat.util.fs;
 
 import android.content.Context;
-import android.os.Build;
-import android.os.storage.StorageManager;
-import android.os.storage.StorageVolume;
 
 import java.io.File;
-import java.util.List;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.ui.AppLog;
@@ -27,7 +23,7 @@ public class AFile extends JFile {
 
 
     public static void logInfoAcess(Context c, File f) {
-        String msg = ": no acess.*";;
+        String msg = ": no acess.*";
         if (canWrite(f)) {
             msg = " is writeable.*";
         } else if (canRead(f)) {
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
index 0cf2994d..6eec814e 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
@@ -2,8 +2,6 @@ package ch.bailu.aat.util.fs;
 
 import android.content.Context;
 
-import org.mapsforge.core.model.Tile;
-
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.File;
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java b/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
index 65ad51b6..3aec9456 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
@@ -55,10 +55,10 @@ public class FileIntent {
 
     
    public static void send(Context context, Intent intent, File file) {
-        /**
-         * This is the correct implementation for sending one file as an e-mail attachment.
-         * It does, however, not work with private files.
-         * 
+        /*
+          This is the correct implementation for sending one file as an e-mail attachment.
+          It does, however, not work with private files.
+
          */
         //final Uri uri = Uri.fromFile(file);
         final Uri uri = toContentUri(file);
diff --git a/app/src/main/java/ch/bailu/aat/util/ui/AppTheme.java b/app/src/main/java/ch/bailu/aat/util/ui/AppTheme.java
index 4815f163..936a27a1 100644
--- a/app/src/main/java/ch/bailu/aat/util/ui/AppTheme.java
+++ b/app/src/main/java/ch/bailu/aat/util/ui/AppTheme.java
@@ -1,7 +1,6 @@
 package ch.bailu.aat.util.ui;
 
 import android.content.Context;
-import android.content.res.Configuration;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.widget.Button;
@@ -42,7 +41,7 @@ public class AppTheme {
         0x993fff7d,
         0x99fcff3f,
     }; 
-    
+    /*
     static public float getTextSize(Context context) {
         if ((context.getResources().getConfiguration().screenLayout &
                 Configuration.SCREENLAYOUT_SIZE_MASK) == Configuration.SCREENLAYOUT_SIZE_LARGE) {     
@@ -62,7 +61,7 @@ public class AppTheme {
             return 20f;
         }
     }
-    
+    */
     
     static public int getHighlightColor (){
         return COLOR_ORANGE;
diff --git a/app/src/main/java/ch/bailu/aat/views/ContentView.java b/app/src/main/java/ch/bailu/aat/views/ContentView.java
index 692309da..9ef5aef3 100644
--- a/app/src/main/java/ch/bailu/aat/views/ContentView.java
+++ b/app/src/main/java/ch/bailu/aat/views/ContentView.java
@@ -3,8 +3,6 @@ package ch.bailu.aat.views;
 import android.content.Context;
 import android.widget.LinearLayout;
 
-import ch.bailu.aat.util.ui.AppLayout;
-
 public class ContentView extends LinearLayout {
 
     public ContentView(Context context) {
diff --git a/app/src/main/java/ch/bailu/aat/views/graph/AltitudeColorTable.java b/app/src/main/java/ch/bailu/aat/views/graph/AltitudeColorTable.java
index 762ff46f..c633ef0c 100644
--- a/app/src/main/java/ch/bailu/aat/views/graph/AltitudeColorTable.java
+++ b/app/src/main/java/ch/bailu/aat/views/graph/AltitudeColorTable.java
@@ -7,7 +7,10 @@ public class AltitudeColorTable extends ColorTable{
     private final static int ALTITUDE_OFFSET=500;
     private final static int MAX_ALTITUDE=3000;
     private final static int GRADIENTS=12;
-    
+
+    public static final ColorTable INSTANCE = new AltitudeColorTable();
+
+
     public AltitudeColorTable() {
         super(MAX_ALTITUDE, GRADIENTS);
     }
diff --git a/app/src/main/java/ch/bailu/aat/views/graph/ColorTable.java b/app/src/main/java/ch/bailu/aat/views/graph/ColorTable.java
index 62fd9a3c..36781755 100644
--- a/app/src/main/java/ch/bailu/aat/views/graph/ColorTable.java
+++ b/app/src/main/java/ch/bailu/aat/views/graph/ColorTable.java
@@ -8,8 +8,7 @@ public class ColorTable {
     
     private final int[] color_table;
 
-    public static final ColorTable altitude = new AltitudeColorTable();
-    
+
     public ColorTable(int spectrum, int gradients) {
         Scaler scaler=new Scaler(gradients*GRADIENT_SIZE, spectrum);
         color_table = new int[spectrum];
diff --git a/app/src/main/java/ch/bailu/aat/views/graph/DistanceAltitudeGraphView.java b/app/src/main/java/ch/bailu/aat/views/graph/DistanceAltitudeGraphView.java
index 43831789..69c54b6b 100644
--- a/app/src/main/java/ch/bailu/aat/views/graph/DistanceAltitudeGraphView.java
+++ b/app/src/main/java/ch/bailu/aat/views/graph/DistanceAltitudeGraphView.java
@@ -139,7 +139,7 @@ public class DistanceAltitudeGraphView extends AbsGraphView {
                 distance+=summaryDistance;
                 summaryDistance=0;
                 
-                plotter.plotData(distance, altitude, ColorTable.altitude.getColor(altitude));
+                plotter.plotData(distance, altitude, AltitudeColorTable.INSTANCE.getColor(altitude));
             }
         }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java b/app/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
index 84b359c0..7cd77db0 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
@@ -4,7 +4,6 @@ import android.app.Activity;
 import android.content.Context;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.map.tile.source.CachedSource;
 import ch.bailu.aat.map.tile.source.MapsForgeSource;
 import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.preferences.SolidEnableTileCache;
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java b/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
index f090a92f..4d17b025 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
@@ -1,17 +1,5 @@
 package ch.bailu.aat.views.preferences;
 
-import android.app.Activity;
-import android.view.View;
-import android.widget.LinearLayout;
-
-import java.io.File;
-
-import ch.bailu.aat.R;
-import ch.bailu.aat.preferences.SolidEnableTileCache;
-import ch.bailu.aat.preferences.SolidTileCacheDirectory;
-import ch.bailu.aat.util.ui.AppDialog;
-import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.views.ImageButtonView;
 /*
 public class SolidEnableTileCacheView extends LinearLayout {
 
diff --git a/app/src/main/java/ch/bailu/aat/views/tileremover/ClearCacheView.java b/app/src/main/java/ch/bailu/aat/views/tileremover/ClearCacheView.java
index 719c2bcf..9932f39f 100644
--- a/app/src/main/java/ch/bailu/aat/views/tileremover/ClearCacheView.java
+++ b/app/src/main/java/ch/bailu/aat/views/tileremover/ClearCacheView.java
@@ -1,15 +1,5 @@
 package ch.bailu.aat.views.tileremover;
 
-import android.app.Activity;
-import android.view.View;
-
-import java.io.File;
-
-import ch.bailu.aat.R;
-import ch.bailu.aat.preferences.SolidTileCacheDirectory;
-import ch.bailu.aat.util.ui.AppDialog;
-import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.views.ImageButtonView;
 /*
 public class ClearCacheView  extends ImageButtonView {
 
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java b/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
index 5c60efb5..d408c500 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
@@ -283,8 +283,8 @@ public class MapFeaturesPreparser {
     }
 
     private void parseImage() throws IOException {
-        /**
-         *  <img alt="Node" src="/w/images/b/b5/Mf_node.png" width="20" height="20" />
+        /*
+           <img alt="Node" src="/w/images/b/b5/Mf_node.png" width="20" height="20" />
          */
 
         while(true) {
@@ -336,8 +336,8 @@ public class MapFeaturesPreparser {
 
 
     private void parseLink() throws IOException {
-        /**
-         *  <a href="/wiki/Elements#Node" title="Node">
+        /*
+           <a href="/wiki/Elements#Node" title="Node">
          */
 
         while(true) {
