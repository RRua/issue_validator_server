diff --git a/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
index f62c06fa..515ca22e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
@@ -2,10 +2,8 @@ package ch.bailu.aat.activities;
 
 import android.content.Intent;
 
-import java.io.File;
-
 import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.fs.FileAccess;
+import ch.bailu.aat.util.fs.AssetAccess;
 import ch.bailu.aat.views.FeaturesList;
 
 public class MapFeatureListActivity extends AbsDispatcher {
@@ -20,7 +18,7 @@ public class MapFeatureListActivity extends AbsDispatcher {
             final FeaturesList list = new FeaturesList(this);
 
             list.loadList(
-                    new FileAccess(new File(file)),
+                    new AssetAccess(this.getAssets(), file),
                     getServiceContext().getIconMapService() );
             setContentView(list);
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
index 6731d748..212c3ce1 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapFeaturesActivity.java
@@ -1,33 +1,21 @@
 package ch.bailu.aat.activities;
 
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
 import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
 import android.widget.LinearLayout;
 
 import ch.bailu.aat.R;
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.ui.AppDialog;
-import ch.bailu.aat.util.fs.AppDirectory;
-import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.aat.util.ui.ToolTip;
-import ch.bailu.aat.views.BusyButton;
 import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.FeaturesList;
 import ch.bailu.aat.views.MainControlBar;
 
 
-public class MapFeaturesActivity extends AbsDispatcher implements OnClickListener {
+public class MapFeaturesActivity extends AbsDispatcher {
     
     private FeaturesList list;
     
-    private BusyButton download;
+//    private BusyButton download;
 
     
     
@@ -37,13 +25,13 @@ public class MapFeaturesActivity extends AbsDispatcher implements OnClickListene
         
         ContentView contentView = new ContentView(this, ContentView.VERTICAL);
         
-        download = new BusyButton(this,R.drawable.go_bottom_inverse);
-        ToolTip.set(download, R.string.tt_overpass_download_features);
-        download.setOnClickListener(this);
+//        download = new BusyButton(this,R.drawable.go_bottom_inverse);
+//        ToolTip.set(download, R.string.tt_overpass_download_features);
+//        download.setOnClickListener(this);
 
         final ControlBar bar = new MainControlBar(this, LinearLayout.HORIZONTAL, 6);
         
-        bar.addView(download);
+//        bar.addView(download);
         bar.addIgnoreSize(AppTheme.getTitleTextView(this, R.string.query_features));
 
         list = new FeaturesList(this);
@@ -53,15 +41,14 @@ public class MapFeaturesActivity extends AbsDispatcher implements OnClickListene
 
         setContentView(contentView);
 
-        
-        AppBroadcaster.register(this, onFileProcessed, AppBroadcaster.FILE_CHANGED_ONDISK);
+        //AppBroadcaster.register(this, onFileProcessed, AppBroadcaster.FILE_CHANGED_ONDISK);
 
     }
     
 
     @Override
     public void onDestroy() {
-        unregisterReceiver(onFileProcessed);
+        //unregisterReceiver(onFileProcessed);
         super.onDestroy();
     }
 
@@ -73,48 +60,30 @@ public class MapFeaturesActivity extends AbsDispatcher implements OnClickListene
     }
 
 
-    @Override
-    public void onClick(View v) {
-        if (v==download) {
-            new AppDialog() {
-                
-                @Override
-                protected void onPositiveClick() {
-                    getServiceContext().getBackgroundService().downloadMapFeatures();
-                    download.startWaiting();        
-                }
-                
-            }.displayYesNoDialog(MapFeaturesActivity.this, 
-                    getString(R.string.query_features), 
-                    getString(R.string.query_download_features));
-
-            
-            
-        }
-    }
-
-
 
-    private final BroadcastReceiver onFileProcessed = new BroadcastReceiver() {
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            try {
-                if (AppIntent.hasFile(intent, AppDirectory.getMapFeatureIndex(context).toString())) {
-                    download.stopWaiting();
-                    loadList();                }
-            } catch (Exception e) {
-                loadList();
-                download.stopWaiting();
-                AppLog.e(MapFeaturesActivity.this, this,e);
-            }
-        }
-    };
+//
+//    private final BroadcastReceiver onFileProcessed = new BroadcastReceiver() {
+//
+//        @Override
+//        public void onReceive(Context context, Intent intent) {
+//            try {
+//                if (AppIntent.hasFile(intent, AppDirectory.getMapFeatureIndex(context).toString())) {
+//                    download.stopWaiting();
+//                    loadList();                }
+//            } catch (Exception e) {
+//                loadList();
+//                download.stopWaiting();
+//                AppLog.e(MapFeaturesActivity.this, this,e);
+//            }
+//        }
+//    };
 
 
     private void loadList() {
         if (getServiceContext().lock()) {
-            list.loadList(getServiceContext().getIconMapService());
+            list.loadList(
+                    getServiceContext().getContext().getAssets(),
+                    getServiceContext().getIconMapService());
             getServiceContext().free();
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
index 5657a7e1..dc37a044 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
@@ -154,39 +154,39 @@ public class TestActivity extends AbsDispatcher {
         final MultiView mv = new MultiView(this, SOLID_KEY);
 
 
-        ////////////////////////////////////////////////////////////
-        MapView mapView = new MapView(this);
-
-        mapView.setClickable(true);
-        mapView.getMapScaleBar().setVisible(true);
-        mapView.setBuiltInZoomControls(true);
-        mapView.setZoomLevelMin((byte) 10);
-        mapView.setZoomLevelMax((byte) 20);
-
-        // create a tile cache of suitable size
-        TileCache tileCache = AndroidUtil.createTileCache(this, "mapcache",
-                mapView.getModel().displayModel.getTileSize(), 1f,
-                mapView.getModel().frameBufferModel.getOverdrawFactor());
-
-        // tile renderer layer using internal render theme
-        MapDataStore mapDataStore = new MapFile(new File("/storage/C973-F26F/maps/berlin.map"));
-        TileRendererLayer tileRendererLayer = new TileRendererLayer(tileCache, mapDataStore,
-                mapView.getModel().mapViewPosition, AndroidGraphicFactory.INSTANCE);
-        tileRendererLayer.setXmlRenderTheme(InternalRenderTheme.DEFAULT);
-
-        // only once a layer is associated with a mapView the rendering starts
-        mapView.getLayerManager().getLayers().add(tileRendererLayer);
-
-        mapView.setCenter(new LatLong(52.517037, 13.38886));
-        mapView.setZoomLevel((byte) 12);
-
-        mv.add(mapView);
+//        ////////////////////////////////////////////////////////////
+//        MapView mapView = new MapView(this);
+//
+//        mapView.setClickable(true);
+//        mapView.getMapScaleBar().setVisible(true);
+//        mapView.setBuiltInZoomControls(true);
+//        mapView.setZoomLevelMin((byte) 10);
+//        mapView.setZoomLevelMax((byte) 20);
+//
+//        // create a tile cache of suitable size
+//        TileCache tileCache = AndroidUtil.createTileCache(this, "mapcache",
+//                mapView.getModel().displayModel.getTileSize(), 1f,
+//                mapView.getModel().frameBufferModel.getOverdrawFactor());
+//
+//        // tile renderer layer using internal render theme
+//        MapDataStore mapDataStore = new MapFile(new File("/storage/C973-F26F/maps/berlin.map"));
+//        TileRendererLayer tileRendererLayer = new TileRendererLayer(tileCache, mapDataStore,
+//                mapView.getModel().mapViewPosition, AndroidGraphicFactory.INSTANCE);
+//        tileRendererLayer.setXmlRenderTheme(InternalRenderTheme.DEFAULT);
+//
+//        // only once a layer is associated with a mapView the rendering starts
+//        mapView.getLayerManager().getLayers().add(tileRendererLayer);
+//
+//        mapView.setCenter(new LatLong(52.517037, 13.38886));
+//        mapView.setZoomLevel((byte) 12);
+
+//        mv.add(mapView);
         /////////////////////////////////////////////////////////////
-        final MapsForgeView mf = new MapsForgeView(getServiceContext(), this, SOLID_KEY);
+//        final MapsForgeView mf = new MapsForgeView(getServiceContext(), this, SOLID_KEY);
 
-        fillMap(mf);
+//        fillMap(mf);
 
-        mv.add(mf, "MapsForge");
+//        mv.add(mf, "MapsForge");
         mv.add(locationView, getString(R.string.gps));
 
         mv.add(trackerView, getString(R.string.tracker));
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java b/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
index d76e3083..d7efcb22 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
@@ -7,7 +7,7 @@ import java.io.IOException;
 import java.util.Locale;
 
 import ch.bailu.aat.gpx.parser.DoubleParser;
-import ch.bailu.aat.gpx.parser.SimpleStream;
+import ch.bailu.simpleparser.SimpleStream;
 
 public class BoundingBoxE6 {
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/DateScanner.java b/app/src/main/java/ch/bailu/aat/gpx/parser/DateScanner.java
index fd5f1bf9..71df6ca3 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/DateScanner.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/DateScanner.java
@@ -4,6 +4,8 @@ import java.io.IOException;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
 
+import ch.bailu.simpleparser.SimpleStream;
+
 
 public class DateScanner {
     private final IntegerScanner minute;
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/DoubleParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/DoubleParser.java
index 07e8c5c1..cdf8560e 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/DoubleParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/DoubleParser.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.gpx.parser;
 import java.io.IOException;
 
+import ch.bailu.simpleparser.SimpleStream;
 
 
 public class DoubleParser  {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
index 082c1ecd..9cf0c19c 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
@@ -6,8 +6,8 @@ import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
-import ch.bailu.aat.util.fs.AbsAccess;
 import ch.bailu.aat.services.background.ThreadControl;
+import ch.bailu.simpleparser.AbsAccess;
 
 public class GpxListReader {
     private final ThreadControl threadControl;
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/IntegerScanner.java b/app/src/main/java/ch/bailu/aat/gpx/parser/IntegerScanner.java
index 36bdcdee..908e0d48 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/IntegerScanner.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/IntegerScanner.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.gpx.parser;
 import java.io.IOException;
 
+import ch.bailu.simpleparser.SimpleStream;
 
 
 public class IntegerScanner {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleGpxListReader.java b/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleGpxListReader.java
index 7f34f0ee..4858cf46 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleGpxListReader.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleGpxListReader.java
@@ -2,8 +2,8 @@ package ch.bailu.aat.gpx.parser;
 
 import java.io.IOException;
 
-import ch.bailu.aat.util.fs.AbsAccess;
 import ch.bailu.aat.services.background.ThreadControl;
+import ch.bailu.simpleparser.AbsAccess;
 
 
 public class SimpleGpxListReader extends GpxListReader {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleStream.java b/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleStream.java
index 6ba9d32f..2b62917b 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleStream.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/SimpleStream.java
@@ -1,116 +1,116 @@
 package ch.bailu.aat.gpx.parser;
 
-import java.io.BufferedReader;
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringReader;
-
-import ch.bailu.aat.util.fs.AbsAccess;
-
-
-public class SimpleStream implements Closeable {
-    private final static String CHARSET="UTF-8";
-    private final static int BUFFER_BYTES=1024*10;
-    
-    
-    private final Reader reader;
-    private int c=0;
-
-    public SimpleStream(AbsAccess file) throws IOException {
-        
-        
-        InputStream istream = file.open_r();
-        Reader ireader = new InputStreamReader(istream, CHARSET);
-        reader = new BufferedReader(ireader, BUFFER_BYTES);            
-    }
-
-    
-    public SimpleStream(String string) {
-        reader = new StringReader(string);
-    }
-    
-    
-    public int get() {
-        return c;
-    }
-
-    public void skip(long n) throws IOException {
-        reader.skip(n);
-    }
-
-    public void read() throws IOException {
-        c=reader.read();
-    }
-
-    public void read(long n) throws IOException {
-        skip(n);
-        read();
-    }
-
-    public boolean haveA(int x) {
-        return c == x;
-    }
-
-
-    public boolean nextIs(int x) throws IOException {
-        read();
-        return haveA(x);
-    }
-
-
-    public boolean nextIs(String string) throws IOException {
-        for (int i =0; i<string.length(); i++) {
-            read();
-            if (!haveA(string.charAt(i))) {
-                return false;
-            }
-
-        }
-        return true;
-    }
-
-    public void skipWhitespace() throws IOException {
-        while (c== ' ' || c=='\n' || c=='\r' || c=='\t') read();
-    }
-
-    public boolean haveDigit() {
-        return (c>='0' && c<='9');
-    }
-
-    public boolean haveCharacter() {
-        return (c >= 'A' && c <= 'z');
-    }
-    
-    public int getDigit() {
-        return c-'0';
-    }    
-
-
-    
-    public boolean haveEOF() {
-        return c==-1;
-    }
-
-    public void to(int x) throws IOException {
-        while(true) {
-            read();
-            if (haveA(x) || haveEOF()) break;
-        }
-    }
-
-    @Override
-    public void close() throws IOException {
-        reader.close();
-    }
-
-    public boolean haveQuotation() {
-        return (c=='\'' || c=='"');
-    }
-    
-    public void toQuotation() throws IOException {
-        while (haveQuotation()==false && haveEOF()==false) read();
-    }
-}
+//import java.io.BufferedReader;
+//import java.io.Closeable;
+//import java.io.IOException;
+//import java.io.InputStream;
+//import java.io.InputStreamReader;
+//import java.io.Reader;
+//import java.io.StringReader;
+//
+//import ch.bailu.aat.util.fs.AbsAccess;
+
+
+//public class SimpleStream implements Closeable {
+//    private final static String CHARSET="UTF-8";
+//    private final static int BUFFER_BYTES=1024*10;
+//
+//
+//    private final Reader reader;
+//    private int c=0;
+//
+//    public SimpleStream(AbsAccess file) throws IOException {
+//
+//
+//        InputStream istream = file.open_r();
+//        Reader ireader = new InputStreamReader(istream, CHARSET);
+//        reader = new BufferedReader(ireader, BUFFER_BYTES);
+//    }
+//
+//
+//    public SimpleStream(String string) {
+//        reader = new StringReader(string);
+//    }
+//
+//
+//    public int get() {
+//        return c;
+//    }
+//
+//    public void skip(long n) throws IOException {
+//        reader.skip(n);
+//    }
+//
+//    public void read() throws IOException {
+//        c=reader.read();
+//    }
+//
+//    public void read(long n) throws IOException {
+//        skip(n);
+//        read();
+//    }
+//
+//    public boolean haveA(int x) {
+//        return c == x;
+//    }
+//
+//
+//    public boolean nextIs(int x) throws IOException {
+//        read();
+//        return haveA(x);
+//    }
+//
+//
+//    public boolean nextIs(String string) throws IOException {
+//        for (int i =0; i<string.length(); i++) {
+//            read();
+//            if (!haveA(string.charAt(i))) {
+//                return false;
+//            }
+//
+//        }
+//        return true;
+//    }
+//
+//    public void skipWhitespace() throws IOException {
+//        while (c== ' ' || c=='\n' || c=='\r' || c=='\t') read();
+//    }
+//
+//    public boolean haveDigit() {
+//        return (c>='0' && c<='9');
+//    }
+//
+//    public boolean haveCharacter() {
+//        return (c >= 'A' && c <= 'z');
+//    }
+//
+//    public int getDigit() {
+//        return c-'0';
+//    }
+//
+//
+//
+//    public boolean haveEOF() {
+//        return c==-1;
+//    }
+//
+//    public void to(int x) throws IOException {
+//        while(true) {
+//            read();
+//            if (haveA(x) || haveEOF()) break;
+//        }
+//    }
+//
+//    @Override
+//    public void close() throws IOException {
+//        reader.close();
+//    }
+//
+//    public boolean haveQuotation() {
+//        return (c=='\'' || c=='"');
+//    }
+//
+//    public void toQuotation() throws IOException {
+//        while (haveQuotation()==false && haveEOF()==false) read();
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
index 387adf40..0f65717f 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
@@ -11,7 +11,8 @@ import ch.bailu.aat.gpx.GpxAttributes;
 import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
-import ch.bailu.aat.util.fs.AbsAccess;
+import ch.bailu.simpleparser.AbsAccess;
+import ch.bailu.simpleparser.SimpleStream;
 
 public class XmlParser implements Closeable, GpxPointInterface {
 
diff --git a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
index abd4b714..c64f43ed 100644
--- a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
+++ b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
@@ -1,10 +1,15 @@
 package ch.bailu.aat.osm_features;
 
+import android.content.res.AssetManager;
+
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 
-import ch.bailu.aat.gpx.parser.SimpleStream;
-import ch.bailu.aat.util.fs.FileAccess;
+import ch.bailu.aat.util.fs.AssetAccess;
+import ch.bailu.simpleparser.AbsAccess;
+import ch.bailu.simpleparser.FileAccess;
+import ch.bailu.simpleparser.SimpleStream;
 
 public class MapFeaturesParser {
     
@@ -22,21 +27,21 @@ public class MapFeaturesParser {
     }
     
     
-    public MapFeaturesParser(OnHaveFeature hf, FileAccess file) throws IOException {
+    public MapFeaturesParser(OnHaveFeature hf, AbsAccess file) throws IOException {
         haveFeature = hf;
         
         parseFeatures(file);
     }
     
 
-    public MapFeaturesParser(OnHaveFeature hf, File[] files) throws IOException {
+    public MapFeaturesParser(AssetManager assets,
+                             OnHaveFeature hf,
+                             ArrayList<String> files) throws IOException {
         haveFeature = hf;
 
 
-        for (File file : files) {
-            if (file.exists() && file.canRead() && file.isFile()) {
-                parseSummary(new FileAccess(file));
-            }
+        for (String file : files) {
+            parseSummary(new AssetAccess(assets, file));
         }
     }
     
@@ -63,7 +68,7 @@ public class MapFeaturesParser {
     
 
     
-    private void parseSummary(FileAccess file) throws IOException {
+    private void parseSummary(AbsAccess file) throws IOException {
         SimpleStream in = new SimpleStream(file);
         
         parseSummary(in);
@@ -73,7 +78,7 @@ public class MapFeaturesParser {
     }
     
     
-    private void parseFeatures(FileAccess file) throws IOException {
+    private void parseFeatures(AbsAccess file) throws IOException {
         SimpleStream in = new SimpleStream(file); 
 
         parseSummary(in);
diff --git a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesPreparser.java b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesPreparser.java
index e411f790..969aa3a3 100644
--- a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesPreparser.java
+++ b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesPreparser.java
@@ -1,403 +1,402 @@
-package ch.bailu.aat.osm_features;
-
-import android.content.Context;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.Writer;
-import java.util.ArrayList;
-
-import ch.bailu.aat.gpx.parser.SimpleStream;
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AppDirectory;
-import ch.bailu.aat.util.fs.FileAccess;
-import ch.bailu.aat.services.background.DownloadHandle;
-
-
-public class MapFeaturesPreparser {
-    private static final int TARGET_LENGTH=30;
-    private static final String WIKI_URL = "http://wiki.openstreetmap.org/";
-
-    private final static boolean ENABLE_LINKS = false;
-
-    private boolean enableImages = false;
-
-    
-    private final ArrayList<DownloadHandle> images = new ArrayList<>();
-    
-    
-    private final StringBuilder builder = new StringBuilder();
-    private final StringBuilder targetBuilder = new StringBuilder();
-    
-    
-    private final SimpleStream  in;
-    private BufferedWriter out=null;
-    
-    private int tableDataCount=0;
-    
-    
-
-
-    
-    
-    public MapFeaturesPreparser(Context c) throws IOException {
-        in = new SimpleStream(new FileAccess(AppDirectory.getMapFeatureIndex(c)));
-        
-        parseMapFeatures(c);
-        AppBroadcaster.broadcast(c,
-                AppBroadcaster.FILE_CHANGED_ONDISK,
-                AppDirectory.getDataDirectory(c, AppDirectory.DIR_OSM_FEATURES_PREPARSED).toString(),
-                AppDirectory.getMapFeatureIndex(c).toString()
-                );
-
-        
-        closeOut();
-        in.close();
-    }
-    
-    
-    private void openOut(Context c, String name) throws SecurityException, IOException {
-        File file = new File(
-                AppDirectory.getDataDirectory(c, AppDirectory.DIR_OSM_FEATURES_PREPARSED), 
-                name
-                );
-        
-        closeOut();
-        
-        Writer ostream = new FileWriter(file);
-        out = new BufferedWriter(ostream);
-    }
-    
-    
-    private void closeOut() throws IOException {
-        if (out != null) {
-            out.close();
-            out=null;
-        }
-    }
-    
-    
-    private void parseMapFeatures(Context c) throws IOException {
-        
-        while (true) {
-            in.to('<');
-            
-            if (in.haveEOF()) {
-                break;
-                
-            } else if (in.nextIs("h3")) { // <h3>
-                parsePrimaryFeature(c);
-            }
-        }
-    }
-
-    
-    private void parsePrimaryFeature(Context c) throws IOException {
-        
-        while (true) {
-            in.to('<');
-            in.read();
-            
-            if (in.haveEOF()) {
-                break;
-            
-            
-            } else if (in.haveA('s') && in.nextIs("pan")) { // <spand class ...>
-                in.to('>');
-                parseName();
-                if (builder.length()>0) {
-                    startNewList(c);
-                }
-                
-                
-            } else  if (in.haveA('p') && in.nextIs('>') && out != null) { //<p>
-                //ENABLE_LINKS=true;
-                
-                out.append("\n<p>");
-                parseParagraph(c);
-                out.append("</p>\n");
-                
-                //ENABLE_LINKS=false;
-                
-            } else if (in.haveA('t') && in.nextIs("able")&& out != null) { // <table ...
-                parseTable(c);
-                break;
-            }
-        }
-    }
-
-    private void startNewList(Context c) throws SecurityException, IOException {
-        String name = builder.toString();
-
-        openOut(c, name);
-        out.append("<h1>");
-        out.append(name);
-        out.append("</h1>\n");
-        builder.setLength(0);
-    }
-
-
-    private void parseName() throws IOException {
-        builder.setLength(0);
-        
-        while(true) {
-            in.read();
-            
-            if (in.haveA('<') || in.haveA('>') || in.haveEOF()) {
-                break;
-                
-            } else if (in.haveCharacter()) {
-                builder.append((char)in.get());
-            }
-        }
-        
-    }
-
-
-
-
-    private void parseTable(Context c) throws IOException {
-        while (true) {
-            in.to('<');
-            in.read();
-            
-            if (in.haveEOF()) {
-                break;
-            } else if (in.haveA('t')) { // <tr>
-                if (in.nextIs('r')) {
-                    parseTableRow(c, in);
-                }
-            } else if (in.haveA('/')) { // </table>
-                if (in.nextIs("table")) {
-                    break;
-                }
-            }
-        }
-    }
-
-    private void parseTableRow(Context c, SimpleStream in) throws IOException {
-        while(true) {
-            in.to('<');
-            in.read();
-            
-            if (in.haveEOF()) {
-                break;
-            } else if (in.haveA('t') && in.nextIs("d>")) { // <td>
-                parseTableData(c); 
-                
-            } else if (in.haveA('/') && in.nextIs("tr>")) { //</tr>
-                break;
-            }
-        }
-        
-        if (tableDataCount>0) {
-            out.append("</p>\n");
-            tableDataCount=0;
-        }
-    }
-
-    
-    private void parseTableData(Context c) throws IOException {
-        if (tableDataCount==0) {
-            enableImages =true;
-            
-            out.append("\n<p>[<b>");
-            parseParagraph(c);
-            out.append("</b>");
-            
-        } else if (tableDataCount == 1) {
-            out.append("=<b>");
-            parseParagraph(c);
-            out.append("</b>]");
-        } else {
-            
-            if (tableDataCount == 4) {
-                enableImages =false;
-            }
-            parseParagraph(c);
-        }
-        
-        tableDataCount++;
-    }
-
-
-    /**
-     * <td> ... </td>
-     * 
-     */
-    private void parseParagraph(Context c) throws IOException {
-        
-        
-        boolean ignoreWS=true;
-        
-        in.read();
-        while (true) {
-
-            if (ignoreWS) {
-                in.skipWhitespace();
-            }
-            
-            
-            if (in.haveEOF()) {
-                break;
-                
-            } else if (in.haveA('<')) {
-                in.read();
-                if (in.haveA('a') && in.nextIs(' ')) { // <a href...
-                    parseLink();
-                    
-                } else if (in.haveA('i') && in.nextIs("mg ")) { // <img ...
-                    parseImage(c);
-                    
-                } else if (in.haveA('/')) {
-                    in.read();
-                    if (in.haveA('p') || in.haveA('t')) {
-                        in.read();
-                        if (in.haveA('>') || in.haveA('d')){
-                            break;
-                        }
-                    } else if (in.haveA('a')) {
-                        if (ENABLE_LINKS) out.append("</a>");
-                    }
-            
-                }
-                if (!in.haveA('>')) in.to('>');
-                
-                in.read();
-                 
-                
-            } else  {
-                
-                if (in.haveA('\n')==false)  {
-                    out.append((char) in.get());
-                    ignoreWS=false;
-                }
-                in.read();
-            }
-            
-        }
-    }
-
-    private void parseImage(Context c) throws IOException {
-        /**
-         *  <img alt="Node" src="/w/images/b/b5/Mf_node.png" width="20" height="20" />
-         */
-
-        while(true) {
-            in.to('s');
-            
-            if (in.nextIs("rc=")) {
-                
-                if (enableImages) {
-                    String source = parseQuotedUrl();
-                    String target = generateTargetName(c,source);
-
-                    out.append("<img src=\"");
-                    out.append(target);
-                    out.append("\"/>");
-                
-                    addImage(source, target);
-                }
-                break;
-                
-            } else if (in.haveEOF()) {
-                break;
-            }
-        }
-        
-    }
-
-
-
-
-    private String generateTargetName(Context context, String source) throws SecurityException, IOException {
-        int start=0;
-        if (source.length()>TARGET_LENGTH) {
-            start=source.length()-TARGET_LENGTH;
-        }
-
-        targetBuilder.setLength(0);
-        targetBuilder.append(AppDirectory.getDataDirectory(context, AppDirectory.DIR_OSM_FEATURES_IMAGES));
-        targetBuilder.append('/');
-        
-        for (int i=start; i<source.length(); i++) {
-            char c = source.charAt(i);
-            
-            if (  ! ((c >= 'A' && c<='z')|| c=='.') ) {
-                c = '_';
-            }
-            targetBuilder.append(c);
-        }
-        return targetBuilder.toString();
-    }
-
-
-    private void addImage(String source, String target) {
-        final File file = new File(target);
-
-        for (int i=0; i<images.size(); i++) {
-            if (images.get(i).toString().equals(source)) return;
-        }
-
-        DownloadHandle handle = new DownloadHandle(source, file);
-        images.add(handle);
-            
-        
-    }
-
-
-    private void parseLink() throws IOException {
-        /**
-         *  <a href="/wiki/Elements#Node" title="Node">
-         */
-        
-        while(true) {
-            in.to('h');
-            
-            if (in.nextIs("ref=")) {
-                if (ENABLE_LINKS) {
-                    String url = parseQuotedUrl();
-                    out.append("<a href=\"");
-                    out.append(url);
-                    out.append("\">");
-                }
-                break;
-                
-            } else if (in.haveEOF()) {
-                break;
-            }
-        }
-    }
-    
-    private String parseQuotedUrl() throws IOException {
-        builder.setLength(0);
-        
-        in.to('"');
-        while(true) {
-            in.read();
-            
-            if (in.haveEOF()) {
-                break;
-                
-            } else if (in.haveA('"')) {
-                break;
-                
-            } else if (in.haveA('/') && builder.length()==0) {
-                builder.append(WIKI_URL);
-                
-            } else if (!in.haveA('\t') && !in.haveA('\n')){
-                builder.append((char)in.get());
-            }
-        }
-        
-        return builder.toString();
-    }
-
-
-    public ArrayList<DownloadHandle> getImageList() {
-        return images;
-    }
-    
-}
+//package ch.bailu.aat.osm_features;
+//
+//import android.content.Context;
+//
+//import java.io.BufferedWriter;
+//import java.io.File;
+//import java.io.FileWriter;
+//import java.io.IOException;
+//import java.io.Writer;
+//import java.util.ArrayList;
+//
+//import ch.bailu.aat.util.AppBroadcaster;
+//import ch.bailu.aat.util.fs.AppDirectory;
+//import ch.bailu.aat.services.background.DownloadHandle;
+//import ch.bailu.simpleparser.SimpleStream;
+//
+//
+//public class MapFeaturesPreparser {
+//    private static final int TARGET_LENGTH=30;
+//    private static final String WIKI_URL = "http://wiki.openstreetmap.org/";
+//
+//    private final static boolean ENABLE_LINKS = false;
+//
+//    private boolean enableImages = false;
+//
+//
+//    private final ArrayList<DownloadHandle> images = new ArrayList<>();
+//
+//
+//    private final StringBuilder builder = new StringBuilder();
+//    private final StringBuilder targetBuilder = new StringBuilder();
+//
+//
+//    private final SimpleStream in;
+//    private BufferedWriter out=null;
+//
+//    private int tableDataCount=0;
+//
+//
+//
+//
+//
+//
+//    public MapFeaturesPreparser(Context c) throws IOException {
+//        in = new SimpleStream(new FileAccess(AppDirectory.getMapFeatureIndex(c)));
+//
+//        parseMapFeatures(c);
+//        AppBroadcaster.broadcast(c,
+//                AppBroadcaster.FILE_CHANGED_ONDISK,
+//                AppDirectory.getDataDirectory(c, AppDirectory.DIR_OSM_FEATURES_PREPARSED).toString(),
+//                AppDirectory.getMapFeatureIndex(c).toString()
+//                );
+//
+//
+//        closeOut();
+//        in.close();
+//    }
+//
+//
+//    private void openOut(Context c, String name) throws SecurityException, IOException {
+//        File file = new File(
+//                AppDirectory.getDataDirectory(c, AppDirectory.DIR_OSM_FEATURES_PREPARSED),
+//                name
+//                );
+//
+//        closeOut();
+//
+//        Writer ostream = new FileWriter(file);
+//        out = new BufferedWriter(ostream);
+//    }
+//
+//
+//    private void closeOut() throws IOException {
+//        if (out != null) {
+//            out.close();
+//            out=null;
+//        }
+//    }
+//
+//
+//    private void parseMapFeatures(Context c) throws IOException {
+//
+//        while (true) {
+//            in.to('<');
+//
+//            if (in.haveEOF()) {
+//                break;
+//
+//            } else if (in.nextIs("h3")) { // <h3>
+//                parsePrimaryFeature(c);
+//            }
+//        }
+//    }
+//
+//
+//    private void parsePrimaryFeature(Context c) throws IOException {
+//
+//        while (true) {
+//            in.to('<');
+//            in.read();
+//
+//            if (in.haveEOF()) {
+//                break;
+//
+//
+//            } else if (in.haveA('s') && in.nextIs("pan")) { // <spand class ...>
+//                in.to('>');
+//                parseName();
+//                if (builder.length()>0) {
+//                    startNewList(c);
+//                }
+//
+//
+//            } else  if (in.haveA('p') && in.nextIs('>') && out != null) { //<p>
+//                //ENABLE_LINKS=true;
+//
+//                out.append("\n<p>");
+//                parseParagraph(c);
+//                out.append("</p>\n");
+//
+//                //ENABLE_LINKS=false;
+//
+//            } else if (in.haveA('t') && in.nextIs("able")&& out != null) { // <table ...
+//                parseTable(c);
+//                break;
+//            }
+//        }
+//    }
+//
+//    private void startNewList(Context c) throws SecurityException, IOException {
+//        String name = builder.toString();
+//
+//        openOut(c, name);
+//        out.append("<h1>");
+//        out.append(name);
+//        out.append("</h1>\n");
+//        builder.setLength(0);
+//    }
+//
+//
+//    private void parseName() throws IOException {
+//        builder.setLength(0);
+//
+//        while(true) {
+//            in.read();
+//
+//            if (in.haveA('<') || in.haveA('>') || in.haveEOF()) {
+//                break;
+//
+//            } else if (in.haveCharacter()) {
+//                builder.append((char)in.get());
+//            }
+//        }
+//
+//    }
+//
+//
+//
+//
+//    private void parseTable(Context c) throws IOException {
+//        while (true) {
+//            in.to('<');
+//            in.read();
+//
+//            if (in.haveEOF()) {
+//                break;
+//            } else if (in.haveA('t')) { // <tr>
+//                if (in.nextIs('r')) {
+//                    parseTableRow(c, in);
+//                }
+//            } else if (in.haveA('/')) { // </table>
+//                if (in.nextIs("table")) {
+//                    break;
+//                }
+//            }
+//        }
+//    }
+//
+//    private void parseTableRow(Context c, SimpleStream in) throws IOException {
+//        while(true) {
+//            in.to('<');
+//            in.read();
+//
+//            if (in.haveEOF()) {
+//                break;
+//            } else if (in.haveA('t') && in.nextIs("d>")) { // <td>
+//                parseTableData(c);
+//
+//            } else if (in.haveA('/') && in.nextIs("tr>")) { //</tr>
+//                break;
+//            }
+//        }
+//
+//        if (tableDataCount>0) {
+//            out.append("</p>\n");
+//            tableDataCount=0;
+//        }
+//    }
+//
+//
+//    private void parseTableData(Context c) throws IOException {
+//        if (tableDataCount==0) {
+//            enableImages =true;
+//
+//            out.append("\n<p>[<b>");
+//            parseParagraph(c);
+//            out.append("</b>");
+//
+//        } else if (tableDataCount == 1) {
+//            out.append("=<b>");
+//            parseParagraph(c);
+//            out.append("</b>]");
+//        } else {
+//
+//            if (tableDataCount == 4) {
+//                enableImages =false;
+//            }
+//            parseParagraph(c);
+//        }
+//
+//        tableDataCount++;
+//    }
+//
+//
+//    /**
+//     * <td> ... </td>
+//     *
+//     */
+//    private void parseParagraph(Context c) throws IOException {
+//
+//
+//        boolean ignoreWS=true;
+//
+//        in.read();
+//        while (true) {
+//
+//            if (ignoreWS) {
+//                in.skipWhitespace();
+//            }
+//
+//
+//            if (in.haveEOF()) {
+//                break;
+//
+//            } else if (in.haveA('<')) {
+//                in.read();
+//                if (in.haveA('a') && in.nextIs(' ')) { // <a href...
+//                    parseLink();
+//
+//                } else if (in.haveA('i') && in.nextIs("mg ")) { // <img ...
+//                    parseImage(c);
+//
+//                } else if (in.haveA('/')) {
+//                    in.read();
+//                    if (in.haveA('p') || in.haveA('t')) {
+//                        in.read();
+//                        if (in.haveA('>') || in.haveA('d')){
+//                            break;
+//                        }
+//                    } else if (in.haveA('a')) {
+//                        if (ENABLE_LINKS) out.append("</a>");
+//                    }
+//
+//                }
+//                if (!in.haveA('>')) in.to('>');
+//
+//                in.read();
+//
+//
+//            } else  {
+//
+//                if (in.haveA('\n')==false)  {
+//                    out.append((char) in.get());
+//                    ignoreWS=false;
+//                }
+//                in.read();
+//            }
+//
+//        }
+//    }
+//
+//    private void parseImage(Context c) throws IOException {
+//        /**
+//         *  <img alt="Node" src="/w/images/b/b5/Mf_node.png" width="20" height="20" />
+//         */
+//
+//        while(true) {
+//            in.to('s');
+//
+//            if (in.nextIs("rc=")) {
+//
+//                if (enableImages) {
+//                    String source = parseQuotedUrl();
+//                    String target = generateTargetName(c,source);
+//
+//                    out.append("<img src=\"");
+//                    out.append(target);
+//                    out.append("\"/>");
+//
+//                    addImage(source, target);
+//                }
+//                break;
+//
+//            } else if (in.haveEOF()) {
+//                break;
+//            }
+//        }
+//
+//    }
+//
+//
+//
+//
+//    private String generateTargetName(Context context, String source) throws SecurityException, IOException {
+//        int start=0;
+//        if (source.length()>TARGET_LENGTH) {
+//            start=source.length()-TARGET_LENGTH;
+//        }
+//
+//        targetBuilder.setLength(0);
+//        targetBuilder.append(AppDirectory.getDataDirectory(context, AppDirectory.DIR_OSM_FEATURES_IMAGES));
+//        targetBuilder.append('/');
+//
+//        for (int i=start; i<source.length(); i++) {
+//            char c = source.charAt(i);
+//
+//            if (  ! ((c >= 'A' && c<='z')|| c=='.') ) {
+//                c = '_';
+//            }
+//            targetBuilder.append(c);
+//        }
+//        return targetBuilder.toString();
+//    }
+//
+//
+//    private void addImage(String source, String target) {
+//        final File file = new File(target);
+//
+//        for (int i=0; i<images.size(); i++) {
+//            if (images.get(i).toString().equals(source)) return;
+//        }
+//
+//        DownloadHandle handle = new DownloadHandle(source, file);
+//        images.add(handle);
+//
+//
+//    }
+//
+//
+//    private void parseLink() throws IOException {
+//        /**
+//         *  <a href="/wiki/Elements#Node" title="Node">
+//         */
+//
+//        while(true) {
+//            in.to('h');
+//
+//            if (in.nextIs("ref=")) {
+//                if (ENABLE_LINKS) {
+//                    String url = parseQuotedUrl();
+//                    out.append("<a href=\"");
+//                    out.append(url);
+//                    out.append("\">");
+//                }
+//                break;
+//
+//            } else if (in.haveEOF()) {
+//                break;
+//            }
+//        }
+//    }
+//
+//    private String parseQuotedUrl() throws IOException {
+//        builder.setLength(0);
+//
+//        in.to('"');
+//        while(true) {
+//            in.read();
+//
+//            if (in.haveEOF()) {
+//                break;
+//
+//            } else if (in.haveA('"')) {
+//                break;
+//
+//            } else if (in.haveA('/') && builder.length()==0) {
+//                builder.append(WIKI_URL);
+//
+//            } else if (!in.haveA('\t') && !in.haveA('\n')){
+//                builder.append((char)in.get());
+//            }
+//        }
+//
+//        return builder.toString();
+//    }
+//
+//
+//    public ArrayList<DownloadHandle> getImageList() {
+//        return images;
+//    }
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/preferences/Storage.java b/app/src/main/java/ch/bailu/aat/preferences/Storage.java
index 23d0fe11..809d7468 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/Storage.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/Storage.java
@@ -10,8 +10,8 @@ import java.io.File;
 import java.util.Map.Entry;
 
 import ch.bailu.aat.util.ContextWrapperInterface;
-import ch.bailu.aat.util.fs.FileAccess;
 import ch.bailu.aat.util.fs.UriAccess;
+import ch.bailu.simpleparser.FileAccess;
 
 public class Storage  implements ContextWrapperInterface {
     public final static String DEF_VALUE="0";
diff --git a/app/src/main/java/ch/bailu/aat/services/background/BackgroundService.java b/app/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
index 3153a6c7..ca2912c1 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
@@ -9,11 +9,11 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.VirtualService;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.VirtualService;
 
 public class BackgroundService extends VirtualService {
 
@@ -24,7 +24,7 @@ public class BackgroundService extends VirtualService {
     private ProcessThread process;
 
 
-    private final MapFeaturesDownloader mapFeaturesDownloader;
+//    private final MapFeaturesDownloader mapFeaturesDownloader;
 
     private final BroadcastReceiver onFileDownloaded = new BroadcastReceiver() {
         @Override
@@ -35,7 +35,7 @@ public class BackgroundService extends VirtualService {
 
     public BackgroundService(final ServiceContext sc) {
         super(sc);
-        mapFeaturesDownloader = new MapFeaturesDownloader(getSContext());
+//        mapFeaturesDownloader = new MapFeaturesDownloader(getSContext());
         AppBroadcaster.register(getContext(), onFileDownloaded, AppBroadcaster.FILE_CHANGED_ONDISK);
 
 
@@ -96,16 +96,16 @@ public class BackgroundService extends VirtualService {
     }
 
 
-    public void downloadMapFeatures() {
-        mapFeaturesDownloader.download();
-    }
+//    public void downloadMapFeatures() {
+//        mapFeaturesDownloader.download();
+//    }
 
 
     @Override
     public void close() {
         getContext().unregisterReceiver(onFileDownloaded);
 
-        mapFeaturesDownloader.close();
+//        mapFeaturesDownloader.close();
 
         for (int i=0; i<loaders.size(); i++)
             loaders.valueAt(i).close();
diff --git a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
index adf3606e..58ef525a 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
@@ -11,7 +11,7 @@ import java.net.URL;
 
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.aat.util.fs.FileAccess;
+import ch.bailu.simpleparser.FileAccess;
 
 public class DownloadHandle extends ProcessHandle {
 
diff --git a/app/src/main/java/ch/bailu/aat/services/background/MapFeaturesDownloader.java b/app/src/main/java/ch/bailu/aat/services/background/MapFeaturesDownloader.java
index 62a2b40d..ecc6e66c 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/MapFeaturesDownloader.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/MapFeaturesDownloader.java
@@ -1,154 +1,154 @@
-package ch.bailu.aat.services.background;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import java.io.Closeable;
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AppDirectory;
-import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.osm_features.MapFeaturesPreparser;
-import ch.bailu.aat.services.ServiceContext;
-
-public class MapFeaturesDownloader implements Closeable {
-    private final static String SOURCE_URL = "http://wiki.openstreetmap.org/wiki/Map_Features";
-
-    private final ServiceContext scontext;
-    
-
-    private ArrayList<DownloadHandle> pendingImages= new ArrayList<>();
-    
-    
-    public MapFeaturesDownloader(ServiceContext sc) {
-        scontext=sc;
-        AppBroadcaster.register(sc.getContext(), onFileDownloaded, AppBroadcaster.FILE_CHANGED_ONDISK);
-    }
-
-
-    
-    private State state = new StateIdle();
-
-    
-    public void download() {
-        setState(new StateDownloadIndex());
-    }
-
-
-    private final BroadcastReceiver  onFileDownloaded = new BroadcastReceiver () {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            state.ping(AppIntent.getUrl(intent));
-        }
-    };
-
-    
-    @Override
-    public void close() {
-        scontext.getContext().unregisterReceiver(onFileDownloaded);
-        terminate();
-    }
-
-
-    private void terminate() {
-        setState(new StateIdle());
-    }
-
-
-    private void setState(State s) {
-        state = s;
-        state.start();
-    }
-
-
-    /////////////////////////////////////////////////////////////////////
-    private abstract class State {
-        public abstract void start();
-        public abstract void ping(String file);
-    }
-    
-    
-    
-    //////////////////////////////////////////////
-    private class StateIdle extends State {
-
-        @Override
-        public void start() {}
-
-        @Override
-        public void ping(String f) {}
-    }
-    
-
-    //////////////////////////////////////////////////
-    private class StateDownloadIndex extends State {
-        private DownloadHandle request;
-        
-        @Override
-        public void start() {
-
-            try {
-                final File file = AppDirectory.getMapFeatureIndex(scontext.getContext());
-                request = new DownloadHandle(SOURCE_URL, file);
-                scontext.getBackgroundService().download(request);
-
-            } catch (Exception e) {
-                AppLog.e(scontext.getContext(), this, e);
-                terminate();
-            }
-
-        }
-
-        @Override
-        public void ping(String url) {
-            if (url.equals(request.toString())) {
-                try {
-                    pendingImages = new MapFeaturesPreparser(scontext.getContext()).getImageList();
-                    setState(new StateDownloadPendingImage());
-                } catch (IOException e) {
-                    AppLog.e(scontext.getContext(), this, e);
-                    terminate();
-                }
-
-            }
-        }
-        
-    }
-    
-    
-
-    //////////////////////////////////////////////////////////////
-    private class StateDownloadPendingImage extends State {
-
-        DownloadHandle request;
-        
-        @Override
-        public void start() {
-            if (pendingImages.size()==0) {
-                terminate();
-            } else { 
-                request = pendingImages.get(pendingImages.size()-1);
-                pendingImages.remove(pendingImages.size()-1);
-                
-                File target = request.getFile();
-                if (target.exists()==false) {
-                    scontext.getBackgroundService().download(request);
-                }
-            }
-        }
-
-        @Override
-        public void ping(String url) {
-            if (url.equals(request.toString())) {
-                setState(new StateDownloadPendingImage());
-            }
-            
-        }
-        
-    }
-}
+//package ch.bailu.aat.services.background;
+//
+//import android.content.BroadcastReceiver;
+//import android.content.Context;
+//import android.content.Intent;
+//
+//import java.io.Closeable;
+//import java.io.File;
+//import java.io.IOException;
+//import java.util.ArrayList;
+//
+//import ch.bailu.aat.util.AppBroadcaster;
+//import ch.bailu.aat.util.fs.AppDirectory;
+//import ch.bailu.aat.util.AppIntent;
+//import ch.bailu.aat.util.ui.AppLog;
+//import ch.bailu.aat.osm_features.MapFeaturesPreparser;
+//import ch.bailu.aat.services.ServiceContext;
+//
+//public class MapFeaturesDownloader implements Closeable {
+//    private final static String SOURCE_URL = "http://wiki.openstreetmap.org/wiki/Map_Features";
+//
+//    private final ServiceContext scontext;
+//
+//
+//    private ArrayList<DownloadHandle> pendingImages= new ArrayList<>();
+//
+//
+//    public MapFeaturesDownloader(ServiceContext sc) {
+//        scontext=sc;
+//        AppBroadcaster.register(sc.getContext(), onFileDownloaded, AppBroadcaster.FILE_CHANGED_ONDISK);
+//    }
+//
+//
+//
+//    private State state = new StateIdle();
+//
+//
+//    public void download() {
+//        setState(new StateDownloadIndex());
+//    }
+//
+//
+//    private final BroadcastReceiver  onFileDownloaded = new BroadcastReceiver () {
+//        @Override
+//        public void onReceive(Context context, Intent intent) {
+//            state.ping(AppIntent.getUrl(intent));
+//        }
+//    };
+//
+//
+//    @Override
+//    public void close() {
+//        scontext.getContext().unregisterReceiver(onFileDownloaded);
+//        terminate();
+//    }
+//
+//
+//    private void terminate() {
+//        setState(new StateIdle());
+//    }
+//
+//
+//    private void setState(State s) {
+//        state = s;
+//        state.start();
+//    }
+//
+//
+//    /////////////////////////////////////////////////////////////////////
+//    private abstract class State {
+//        public abstract void start();
+//        public abstract void ping(String file);
+//    }
+//
+//
+//
+//    //////////////////////////////////////////////
+//    private class StateIdle extends State {
+//
+//        @Override
+//        public void start() {}
+//
+//        @Override
+//        public void ping(String f) {}
+//    }
+//
+//
+//    //////////////////////////////////////////////////
+//    private class StateDownloadIndex extends State {
+//        private DownloadHandle request;
+//
+//        @Override
+//        public void start() {
+//
+//            try {
+//                final File file = AppDirectory.getMapFeatureIndex(scontext.getContext());
+//                request = new DownloadHandle(SOURCE_URL, file);
+//                scontext.getBackgroundService().download(request);
+//
+//            } catch (Exception e) {
+//                AppLog.e(scontext.getContext(), this, e);
+//                terminate();
+//            }
+//
+//        }
+//
+//        @Override
+//        public void ping(String url) {
+//            if (url.equals(request.toString())) {
+//                try {
+//                    pendingImages = new MapFeaturesPreparser(scontext.getContext()).getImageList();
+//                    setState(new StateDownloadPendingImage());
+//                } catch (IOException e) {
+//                    AppLog.e(scontext.getContext(), this, e);
+//                    terminate();
+//                }
+//
+//            }
+//        }
+//
+//    }
+//
+//
+//
+//    //////////////////////////////////////////////////////////////
+//    private class StateDownloadPendingImage extends State {
+//
+//        DownloadHandle request;
+//
+//        @Override
+//        public void start() {
+//            if (pendingImages.size()==0) {
+//                terminate();
+//            } else {
+//                request = pendingImages.get(pendingImages.size()-1);
+//                pendingImages.remove(pendingImages.size()-1);
+//
+//                File target = request.getFile();
+//                if (target.exists()==false) {
+//                    scontext.getBackgroundService().download(request);
+//                }
+//            }
+//        }
+//
+//        @Override
+//        public void ping(String url) {
+//            if (url.equals(request.toString())) {
+//                setState(new StateDownloadPendingImage());
+//            }
+//
+//        }
+//
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
index c4de5dbd..57494549 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
@@ -15,8 +15,8 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.AppDirectory;
-import ch.bailu.aat.util.fs.FileAccess;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleparser.FileAccess;
 
 public class CachedTileObject extends TileObject {
     private final static int MIN_SAVE_ZOOM_LEVEL = 16;
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
index bb19cdc8..753465a4 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
@@ -16,13 +16,13 @@ import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.linked_list.Node;
 import ch.bailu.aat.gpx.parser.GpxListReader;
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AbsAccess;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.services.dem.Dem3Tile;
 import ch.bailu.aat.services.dem.ElevationProvider;
 import ch.bailu.aat.services.dem.ElevationUpdaterClient;
+import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.fs.UriAccess;
 
 public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient {
     
@@ -61,7 +61,7 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
                         final String id = toString();
 
                         GpxListReader reader =
-                                new GpxListReader(this, AbsAccess.factory(c, id));
+                                new GpxListReader(this, UriAccess.factory(c, id));
                         if (canContinue()) {
                             gpxList = reader.getGpxList();
                             readyAndLoaded = true;
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
index 8bd3bed2..ad3e7b91 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
@@ -2,8 +2,9 @@ package ch.bailu.aat.services.icons;
 
 import java.io.IOException;
 
-import ch.bailu.aat.gpx.parser.SimpleStream;
-import ch.bailu.aat.util.fs.AbsAccess;
+import ch.bailu.simpleparser.AbsAccess;
+import ch.bailu.simpleparser.SimpleStream;
+
 
 public class IconMapParser {
     private final static int ICON=0, KEY=1, VALUE=2, END=3, MAX=4; 
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
index e31c3f14..b4136420 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
@@ -8,9 +8,9 @@ import ch.bailu.aat.gpx.GpxAttributes;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
-import ch.bailu.aat.util.fs.AbsAccess;
 import ch.bailu.aat.util.fs.AssetAccess;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleparser.AbsAccess;
 
 public class IconMapService extends VirtualService {
     private final static String NKEY_KEY = "class";
diff --git a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
index 85f6c550..04d185c9 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
@@ -14,8 +14,8 @@ import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.parser.SimpleGpxListReader;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.Timer;
-import ch.bailu.aat.util.fs.FileAccess;
 import ch.bailu.aat.preferences.SolidMockLocationFile;
+import ch.bailu.simpleparser.FileAccess;
 
 public class MockLocation extends LocationStackChainedItem implements Runnable{
 
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
index 0a608515..e6bcd7f1 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
@@ -11,8 +11,8 @@ import ch.bailu.aat.gpx.parser.SimpleGpxListReader;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.util.fs.AbsAccess;
-import ch.bailu.aat.util.fs.FileAccess;
+import ch.bailu.simpleparser.AbsAccess;
+import ch.bailu.simpleparser.FileAccess;
 
 
 public class TrackCrashRestorer{
diff --git a/app/src/main/java/ch/bailu/aat/test/TestGpx.java b/app/src/main/java/ch/bailu/aat/test/TestGpx.java
index 3b7d4d78..38d77628 100644
--- a/app/src/main/java/ch/bailu/aat/test/TestGpx.java
+++ b/app/src/main/java/ch/bailu/aat/test/TestGpx.java
@@ -8,9 +8,9 @@ import java.io.IOException;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.parser.SimpleGpxListReader;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
-import ch.bailu.aat.util.fs.FileAccess;
 import ch.bailu.aat.preferences.SolidMockLocationFile;
 import ch.bailu.aat.preferences.SolidString;
+import ch.bailu.simpleparser.FileAccess;
 
 public class TestGpx extends UnitTest {
 
diff --git a/app/src/main/java/ch/bailu/aat/util/TextBackup.java b/app/src/main/java/ch/bailu/aat/util/TextBackup.java
index e45acf69..2ae4a1ec 100644
--- a/app/src/main/java/ch/bailu/aat/util/TextBackup.java
+++ b/app/src/main/java/ch/bailu/aat/util/TextBackup.java
@@ -5,8 +5,9 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 
-import ch.bailu.aat.gpx.parser.SimpleStream;
-import ch.bailu.aat.util.fs.FileAccess;
+import ch.bailu.simpleparser.FileAccess;
+import ch.bailu.simpleparser.SimpleStream;
+
 
 public abstract class TextBackup {
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AbsAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/AbsAccess.java
index 18abfe30..8f7fca98 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AbsAccess.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AbsAccess.java
@@ -9,75 +9,75 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-
-public abstract class AbsAccess {
-    public abstract InputStream open_r() throws IOException;
-    public abstract OutputStream open_w() throws IOException;
-
-
-    public static AbsAccess factory(Context c, String id) {
-        if (id.length()>0 && id.charAt(0) == '/') {
-            return new FileAccess(new File(id));
-        } else {
-            return new UriAccess(c, Uri.parse(id));
-        }
-    }
-
-    public String contentToString() throws IOException {
-        BufferedInputStream in = new BufferedInputStream(open_r());
-        StringBuilder out = new StringBuilder();
-
-
-        try {
-            int c;
-            while ((c = in.read()) > -1) {
-                out.append((char)c);
-            }
-
-        } finally {
-            in.close();
-
-        }
-        return out.toString();
-    }
-
-
-
-
-    public void copy(File dest) throws Exception {
-        InputStream in = null;
-        OutputStream out = null;
-
-        try {
-
-            in = open_r();
-            out = new FileOutputStream(dest);
-            copy(in, out);
-            
-        } finally {
-            if (in != null) in.close();
-            if (out != null) out.close();
-        }
-    }
-
-    
-    private static void copy(InputStream in, OutputStream out) throws IOException {
-        byte[] buffer = new byte[4096];
-        int count;
-        while ((count = in.read(buffer)) > 0) {
-            out.write(buffer,0,count);
-        }
-    }
-
-
-   public abstract File toFile();
-    
-    
-    public long lastModified() {
-        File file = toFile();
-        if (file != null) {
-            return file.lastModified();
-        }
-        return System.currentTimeMillis();
-    }
-}
+//
+//public abstract class AbsAccess {
+//    public abstract InputStream open_r() throws IOException;
+//    public abstract OutputStream open_w() throws IOException;
+//
+//
+//    public static AbsAccess factory(Context c, String id) {
+//        if (id.length()>0 && id.charAt(0) == '/') {
+//            return new FileAccess(new File(id));
+//        } else {
+//            return new UriAccess(c, Uri.parse(id));
+//        }
+//    }
+//
+//    public String contentToString() throws IOException {
+//        BufferedInputStream in = new BufferedInputStream(open_r());
+//        StringBuilder out = new StringBuilder();
+//
+//
+//        try {
+//            int c;
+//            while ((c = in.read()) > -1) {
+//                out.append((char)c);
+//            }
+//
+//        } finally {
+//            in.close();
+//
+//        }
+//        return out.toString();
+//    }
+//
+//
+//
+//
+//    public void copy(File dest) throws Exception {
+//        InputStream in = null;
+//        OutputStream out = null;
+//
+//        try {
+//
+//            in = open_r();
+//            out = new FileOutputStream(dest);
+//            copy(in, out);
+//
+//        } finally {
+//            if (in != null) in.close();
+//            if (out != null) out.close();
+//        }
+//    }
+//
+//
+//    private static void copy(InputStream in, OutputStream out) throws IOException {
+//        byte[] buffer = new byte[4096];
+//        int count;
+//        while ((count = in.read(buffer)) > 0) {
+//            out.write(buffer,0,count);
+//        }
+//    }
+//
+//
+//   public abstract File toFile();
+//
+//
+//    public long lastModified() {
+//        File file = toFile();
+//        if (file != null) {
+//            return file.lastModified();
+//        }
+//        return System.currentTimeMillis();
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java
index 0e290eac..4e709ff7 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java
@@ -6,6 +6,9 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.util.ArrayList;
+
+import ch.bailu.simpleparser.AbsAccess;
 
 public class AssetAccess extends AbsAccess {
 
@@ -32,4 +35,21 @@ public class AssetAccess extends AbsAccess {
     public File toFile() {
         return new File(asset);
     }
+
+
+    public static ArrayList<String> listAssets(AssetManager am, String path) {
+        ArrayList<String> r = new ArrayList();
+
+        try {
+            String [] files = am.list(path);
+            for (String f: files) {
+                r.add(path+ "/" + f);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        return r;
+    }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/FileAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/FileAccess.java
index d3dcd41e..32068dd9 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/FileAccess.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/FileAccess.java
@@ -1,55 +1,55 @@
-package ch.bailu.aat.util.fs;
-
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-
-public class FileAccess extends AbsAccess {
-    private final File file;
-
-    
-    public FileAccess(File f) {
-        file = f;
-    }
-
-
-
-    @Override
-    public InputStream open_r() throws FileNotFoundException {
-        return new FileInputStream(file);
-
-    }
-
-    @Override
-    public OutputStream open_w() throws IOException {
-        return openOutput(file);
-    }
-
-    public File toFile() {
-        return file;
-    }
-
-    public static OutputStream openOutput(File file) throws IOException {
-        new File(file.getParent()).mkdirs();
-        return new FileOutputStream(file);
-    }
-
-
-    public static void close(Closeable c) {
-        if (c != null) {
-            try {
-                c.close();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-
-}
+//package ch.bailu.aat.util.fs;
+//
+//import java.io.Closeable;
+//import java.io.File;
+//import java.io.FileInputStream;
+//import java.io.FileNotFoundException;
+//import java.io.FileOutputStream;
+//import java.io.IOException;
+//import java.io.InputStream;
+//import java.io.OutputStream;
+//
+//
+//public class FileAccess extends AbsAccess {
+//    private final File file;
+//
+//
+//    public FileAccess(File f) {
+//        file = f;
+//    }
+//
+//
+//
+//    @Override
+//    public InputStream open_r() throws FileNotFoundException {
+//        return new FileInputStream(file);
+//
+//    }
+//
+//    @Override
+//    public OutputStream open_w() throws IOException {
+//        return openOutput(file);
+//    }
+//
+//    public File toFile() {
+//        return file;
+//    }
+//
+//    public static OutputStream openOutput(File file) throws IOException {
+//        new File(file.getParent()).mkdirs();
+//        return new FileOutputStream(file);
+//    }
+//
+//
+//    public static void close(Closeable c) {
+//        if (c != null) {
+//            try {
+//                c.close();
+//            } catch (IOException e) {
+//                e.printStackTrace();
+//            }
+//        }
+//    }
+//
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java
index e5eb0fd2..82d1d46f 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java
@@ -8,6 +8,9 @@ import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
+import ch.bailu.simpleparser.AbsAccess;
+import ch.bailu.simpleparser.FileAccess;
+
 public class UriAccess extends AbsAccess {
     private final Uri uri;
     private final Context context;
@@ -22,6 +25,16 @@ public class UriAccess extends AbsAccess {
         this (c, Uri.fromFile(f));
     }
 
+
+    public static AbsAccess factory(Context c, String id) {
+        if (id.length()>0 && id.charAt(0) == '/') {
+            return new FileAccess(new File(id));
+        } else {
+            return new UriAccess(c, Uri.parse(id));
+        }
+    }
+
+
     @Override
     public InputStream open_r() throws FileNotFoundException {
         return context.getContentResolver().openInputStream(uri);
diff --git a/app/src/main/java/ch/bailu/aat/views/FeaturesList.java b/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
index 3bb8f53d..87fd8b2b 100644
--- a/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
+++ b/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.views;
 
 import android.content.Context;
+import android.content.res.AssetManager;
 import android.database.DataSetObserver;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
@@ -16,29 +17,27 @@ import android.widget.TextView;
 import com.caverock.androidsvg.SVG;
 import com.caverock.androidsvg.SVGParseException;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
+import java.util.Collections;
 
 import ch.bailu.aat.activities.ActivitySwitcher;
-import ch.bailu.aat.activities.HtmlViewActivity;
 import ch.bailu.aat.activities.MapFeatureListActivity;
+import ch.bailu.aat.osm_features.MapFeaturesParser;
+import ch.bailu.aat.osm_features.MapFeaturesParser.OnHaveFeature;
+import ch.bailu.aat.services.icons.IconMapService;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.AppHtml;
+import ch.bailu.aat.util.fs.AssetAccess;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat.util.ui.AppDensity;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.aat.util.fs.FileAccess;
-import ch.bailu.aat.osm_features.MapFeaturesParser;
-import ch.bailu.aat.osm_features.MapFeaturesParser.OnHaveFeature;
-import ch.bailu.aat.services.icons.IconMapService;
+import ch.bailu.simpleparser.AbsAccess;
 
 public class FeaturesList extends ListView  {
 
+    private static final String MAP_FEATURES_ASSET = "map_features";
     private DataSetObserver observer=null;
 
     private final int icon_size;//, sicon_size;
@@ -70,7 +69,7 @@ public class FeaturesList extends ListView  {
 
         setAdapter(listAdapter);
         setOnItemClickListener(listAdapter);
-        setOnItemLongClickListener(listAdapter);
+        //setOnItemLongClickListener(listAdapter);
 
     }
 
@@ -86,21 +85,15 @@ public class FeaturesList extends ListView  {
         }
 
 
-        public void loadList() throws IOException {
-            File[] files = AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_OSM_FEATURES_PREPARSED).listFiles();
-
-            if (files != null) {
-                Arrays.sort(files, new Comparator<File>() {
-                    public int compare(File a, File b) {
-                        return a.getName().compareTo(b.getName());
-                    }
-                });
+        public void loadList(AssetManager assets) throws IOException {
+            ArrayList<String> files = AssetAccess.listAssets(assets, MAP_FEATURES_ASSET);
 
-                new MapFeaturesParser(this, files);
-            }
+            Collections.sort(files);
+            new MapFeaturesParser(assets, this, files);
         }
 
-        public void loadList(FileAccess file) throws IOException {
+
+        public void loadList(AbsAccess file) throws IOException {
             new MapFeaturesParser(this, file);
         }
 
@@ -162,9 +155,9 @@ public class FeaturesList extends ListView  {
         return null;
     }
 
-    public void loadList(IconMapService map) {
+    public void loadList(AssetManager assets, IconMapService map) {
         try {
-            new ListLoader(map).loadList();
+            new ListLoader(map).loadList(assets);
             if (observer != null) observer.onChanged();
         } catch (IOException e) {
             AppLog.e(getContext(), this, e);
@@ -173,7 +166,7 @@ public class FeaturesList extends ListView  {
 
 
 
-    public void loadList(FileAccess file, IconMapService map) {
+    public void loadList(AbsAccess file, IconMapService map) {
         try {
             new ListLoader(map).loadList(file);
             if (observer != null) observer.onChanged();
@@ -198,22 +191,12 @@ public class FeaturesList extends ListView  {
 
 
     private void startFeatureListActivity(CharSequence name) {
-        try {
-            File file = new File(AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_OSM_FEATURES_PREPARSED),name.toString());
-
-            if (file.exists()) {
-                ActivitySwitcher.start(getContext(), MapFeatureListActivity.class, file);
-            }
-
-        } catch (Exception e) {
-            AppLog.e(getContext(), this, e);
-        }
-
+            ActivitySwitcher.start(getContext(), MapFeatureListActivity.class, name.toString());
     }
 
 
-    private class Adapter implements ListAdapter, android.widget.AdapterView.OnItemClickListener,
-            android.widget.AdapterView.OnItemLongClickListener{
+    private class Adapter implements ListAdapter, android.widget.AdapterView.OnItemClickListener{
+//            android.widget.AdapterView.OnItemLongClickListener{
 
 
         @Override
@@ -244,33 +227,33 @@ public class FeaturesList extends ListView  {
 
 
 
-        @Override
-        public boolean onItemLongClick(AdapterView<?> v, View v1, int index,
-                                       long id) {
-            ListData d = data.get(index);
-
-            if (d.name.length()>1) {
-
-                File file;
-                try {
-                    file = new File(AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_OSM_FEATURES_PREPARSED), d.name);
-                    String content = new FileAccess(file).contentToString();
-                    ActivitySwitcher.start(getContext(), HtmlViewActivity.class, content);
-
-                } catch (Exception e) {
-                    AppLog.e(getContext(), this, e);
-                }
-            }
-
-            return false;
-        }
+//        @Override
+//        public boolean onItemLongClick(AdapterView<?> v, View v1, int index,
+//                                       long id) {
+//            ListData d = data.get(index);
+//
+//            if (d.name.length()>1) {
+//
+//                String file;
+//                try {
+//                    file = MAP_FEATURES_ASSET+ "/"+d.name;
+//                    String content = new AssetAccess(file).contentToString();
+//                    ActivitySwitcher.start(getContext(), HtmlViewActivity.class, content);
+//
+//                } catch (Exception e) {
+//                    AppLog.e(getContext(), this, e);
+//                }
+//            }
+//
+//            return false;
+//        }
 
         @Override
         public void onItemClick(AdapterView<?> arg0, View arg1, int index, long arg3) {
             ListData d = data.get(index);
 
             if (d.name.length()>1) {
-                startFeatureListActivity(d.name);
+                startFeatureListActivity(MAP_FEATURES_ASSET+ "/"+d.name);
 
             } else if (d.key.length()>1
                     && d.value.length()>1) {
diff --git a/simpleparser/src/main/java/ch/bailu/simpleparser/AbsAccess.java b/simpleparser/src/main/java/ch/bailu/simpleparser/AbsAccess.java
new file mode 100644
index 00000000..a5dfe540
--- /dev/null
+++ b/simpleparser/src/main/java/ch/bailu/simpleparser/AbsAccess.java
@@ -0,0 +1,71 @@
+package ch.bailu.simpleparser;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public abstract class AbsAccess {
+    public abstract InputStream open_r() throws IOException;
+    public abstract OutputStream open_w() throws IOException;
+
+    public String contentToString() throws IOException {
+        BufferedInputStream in = new BufferedInputStream(open_r());
+        StringBuilder out = new StringBuilder();
+
+
+        try {
+            int c;
+            while ((c = in.read()) > -1) {
+                out.append((char)c);
+            }
+
+        } finally {
+            in.close();
+
+        }
+        return out.toString();
+    }
+
+
+
+
+    public void copy(File dest) throws Exception {
+        InputStream in = null;
+        OutputStream out = null;
+
+        try {
+
+            in = open_r();
+            out = new FileOutputStream(dest);
+            copy(in, out);
+
+        } finally {
+            if (in != null) in.close();
+            if (out != null) out.close();
+        }
+    }
+
+
+    private static void copy(InputStream in, OutputStream out) throws IOException {
+        byte[] buffer = new byte[4096];
+        int count;
+        while ((count = in.read(buffer)) > 0) {
+            out.write(buffer,0,count);
+        }
+    }
+
+
+    public abstract File toFile();
+
+
+    public long lastModified() {
+        File file = toFile();
+        if (file != null) {
+            return file.lastModified();
+        }
+        return System.currentTimeMillis();
+    }
+}
diff --git a/simpleparser/src/main/java/ch/bailu/simpleparser/FileAccess.java b/simpleparser/src/main/java/ch/bailu/simpleparser/FileAccess.java
new file mode 100644
index 00000000..e37ed496
--- /dev/null
+++ b/simpleparser/src/main/java/ch/bailu/simpleparser/FileAccess.java
@@ -0,0 +1,52 @@
+package ch.bailu.simpleparser;
+
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public class FileAccess extends AbsAccess {
+    private final File file;
+
+
+    public FileAccess(File f) {
+        file = f;
+    }
+
+
+
+    @Override
+    public InputStream open_r() throws FileNotFoundException {
+        return new FileInputStream(file);
+
+    }
+
+    @Override
+    public OutputStream open_w() throws IOException {
+        return openOutput(file);
+    }
+
+    public File toFile() {
+        return file;
+    }
+
+    public static OutputStream openOutput(File file) throws IOException {
+        new File(file.getParent()).mkdirs();
+        return new FileOutputStream(file);
+    }
+
+
+    public static void close(Closeable c) {
+        if (c != null) {
+            try {
+                c.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/simpleparser/src/main/java/ch/bailu/simpleparser/MapFeaturesPreparser.java b/simpleparser/src/main/java/ch/bailu/simpleparser/MapFeaturesPreparser.java
new file mode 100644
index 00000000..2ff64cdf
--- /dev/null
+++ b/simpleparser/src/main/java/ch/bailu/simpleparser/MapFeaturesPreparser.java
@@ -0,0 +1,381 @@
+package ch.bailu.simpleparser;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+
+public class MapFeaturesPreparser {
+    private static final int TARGET_LENGTH=30;
+    private static final String WIKI_URL = "http://wiki.openstreetmap.org/";
+
+    private final static boolean ENABLE_LINKS = false;
+
+    private boolean enableImages = false;
+
+
+
+    private final StringBuilder builder = new StringBuilder();
+    private final StringBuilder targetBuilder = new StringBuilder();
+
+
+    private final SimpleStream  in;
+    private BufferedWriter out=null;
+
+    private int tableDataCount=0;
+
+
+
+    private final File outDir, imageDir;
+
+    public static void main(String [] args) {
+        if (args.length > 2) {
+
+            try {
+                new MapFeaturesPreparser(
+                        new File (args[0]),
+                        new File (args[1]),
+                        new File (args[2]));
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else {
+            System.out.print("Usage: MapFeaturesPreparser 'input_file' 'output_directory' 'image_directory'\n");
+        }
+
+    }
+
+    public MapFeaturesPreparser(File in, File outDir, File imageDir) throws IOException {
+        this.in = new SimpleStream(new FileAccess(in));
+        this.outDir = outDir;
+        this.imageDir = imageDir;
+        parseMapFeatures();
+
+        closeOut();
+        this.in.close();
+    }
+
+
+    private void openOut(String name) throws SecurityException, IOException {
+        File file = new File(
+                outDir,
+                name
+        );
+
+        closeOut();
+
+        Writer ostream = new FileWriter(file);
+        out = new BufferedWriter(ostream);
+    }
+
+
+    private void closeOut() throws IOException {
+        if (out != null) {
+            out.close();
+            out=null;
+        }
+    }
+
+
+    private void parseMapFeatures() throws IOException {
+
+        while (true) {
+            in.to('<');
+
+            if (in.haveEOF()) {
+                break;
+
+            } else if (in.nextIs("h3")) { // <h3>
+                parsePrimaryFeature();
+            }
+        }
+    }
+
+
+    private void parsePrimaryFeature() throws IOException {
+
+        while (true) {
+            in.to('<');
+            in.read();
+
+            if (in.haveEOF()) {
+                break;
+
+
+            } else if (in.haveA('s') && in.nextIs("pan")) { // <spand class ...>
+                in.to('>');
+                parseName();
+                if (builder.length()>0) {
+                    startNewList();
+                }
+
+
+            } else  if (in.haveA('p') && in.nextIs('>') && out != null) { //<p>
+                //ENABLE_LINKS=true;
+
+                out.append("\n<p>");
+                parseParagraph();
+                out.append("</p>\n");
+
+                //ENABLE_LINKS=false;
+
+            } else if (in.haveA('t') && in.nextIs("able")&& out != null) { // <table ...
+                parseTable();
+                break;
+            }
+        }
+    }
+
+    private void startNewList() throws SecurityException, IOException {
+        String name = builder.toString();
+
+        openOut(name);
+        out.append("<h1>");
+        out.append(name);
+        out.append("</h1>\n");
+        builder.setLength(0);
+    }
+
+
+    private void parseName() throws IOException {
+        builder.setLength(0);
+
+        while(true) {
+            in.read();
+
+            if (in.haveA('<') || in.haveA('>') || in.haveEOF()) {
+                break;
+
+            } else if (in.haveCharacter()) {
+                builder.append((char)in.get());
+            }
+        }
+
+    }
+
+
+
+
+    private void parseTable() throws IOException {
+        while (true) {
+            in.to('<');
+            in.read();
+
+            if (in.haveEOF()) {
+                break;
+            } else if (in.haveA('t')) { // <tr>
+                if (in.nextIs('r')) {
+                    parseTableRow(in);
+                }
+            } else if (in.haveA('/')) { // </table>
+                if (in.nextIs("table")) {
+                    break;
+                }
+            }
+        }
+    }
+
+    private void parseTableRow(SimpleStream in) throws IOException {
+        while(true) {
+            in.to('<');
+            in.read();
+
+            if (in.haveEOF()) {
+                break;
+            } else if (in.haveA('t') && in.nextIs("d>")) { // <td>
+                parseTableData();
+
+            } else if (in.haveA('/') && in.nextIs("tr>")) { //</tr>
+                break;
+            }
+        }
+
+        if (tableDataCount>0) {
+            out.append("</p>\n");
+            tableDataCount=0;
+        }
+    }
+
+
+    private void parseTableData() throws IOException {
+        if (tableDataCount==0) {
+            enableImages =true;
+
+            out.append("\n<p>[<b>");
+            parseParagraph();
+            out.append("</b>");
+
+        } else if (tableDataCount == 1) {
+            out.append("=<b>");
+            parseParagraph();
+            out.append("</b>]");
+        } else {
+
+            if (tableDataCount == 4) {
+                enableImages =false;
+            }
+            parseParagraph();
+        }
+
+        tableDataCount++;
+    }
+
+
+    /**
+     * <td> ... </td>
+     *
+     */
+    private void parseParagraph() throws IOException {
+
+
+        boolean ignoreWS=true;
+
+        in.read();
+        while (true) {
+
+            if (ignoreWS) {
+                in.skipWhitespace();
+            }
+
+
+            if (in.haveEOF()) {
+                break;
+
+            } else if (in.haveA('<')) {
+                in.read();
+                if (in.haveA('a') && in.nextIs(' ')) { // <a href...
+                    parseLink();
+
+                } else if (in.haveA('i') && in.nextIs("mg ")) { // <img ...
+                    parseImage();
+
+                } else if (in.haveA('/')) {
+                    in.read();
+                    if (in.haveA('p') || in.haveA('t')) {
+                        in.read();
+                        if (in.haveA('>') || in.haveA('d')){
+                            break;
+                        }
+                    } else if (in.haveA('a')) {
+                        if (ENABLE_LINKS) out.append("</a>");
+                    }
+
+                }
+                if (!in.haveA('>')) in.to('>');
+
+                in.read();
+
+
+            } else  {
+
+                if (in.haveA('\n')==false)  {
+                    out.append((char) in.get());
+                    ignoreWS=false;
+                }
+                in.read();
+            }
+
+        }
+    }
+
+    private void parseImage() throws IOException {
+        /**
+         *  <img alt="Node" src="/w/images/b/b5/Mf_node.png" width="20" height="20" />
+         */
+
+        while(true) {
+            in.to('s');
+
+            if (in.nextIs("rc=")) {
+
+                if (enableImages) {
+                    String source = parseQuotedUrl();
+                    String target = generateTargetName(source);
+
+                    out.append("<img src=\"");
+                    out.append(target);
+                    out.append("\"/>");
+                }
+                break;
+
+            } else if (in.haveEOF()) {
+                break;
+            }
+        }
+
+    }
+
+
+
+
+    private String generateTargetName(String source) throws SecurityException, IOException {
+        int start=0;
+        if (source.length()>TARGET_LENGTH) {
+            start=source.length()-TARGET_LENGTH;
+        }
+
+        targetBuilder.setLength(0);
+        targetBuilder.append(imageDir);
+        targetBuilder.append('/');
+
+        for (int i=start; i<source.length(); i++) {
+            char c = source.charAt(i);
+
+            if (  ! ((c >= 'A' && c<='z')|| c=='.') ) {
+                c = '_';
+            }
+            targetBuilder.append(c);
+        }
+        return targetBuilder.toString();
+    }
+
+
+
+    private void parseLink() throws IOException {
+        /**
+         *  <a href="/wiki/Elements#Node" title="Node">
+         */
+
+        while(true) {
+            in.to('h');
+
+            if (in.nextIs("ref=")) {
+                if (ENABLE_LINKS) {
+                    String url = parseQuotedUrl();
+                    out.append("<a href=\"");
+                    out.append(url);
+                    out.append("\">");
+                }
+                break;
+
+            } else if (in.haveEOF()) {
+                break;
+            }
+        }
+    }
+
+    private String parseQuotedUrl() throws IOException {
+        builder.setLength(0);
+
+        in.to('"');
+        while(true) {
+            in.read();
+
+            if (in.haveEOF()) {
+                break;
+
+            } else if (in.haveA('"')) {
+                break;
+
+            } else if (in.haveA('/') && builder.length()==0) {
+                builder.append(WIKI_URL);
+
+            } else if (!in.haveA('\t') && !in.haveA('\n')){
+                builder.append((char)in.get());
+            }
+        }
+
+        return builder.toString();
+    }
+}
diff --git a/simpleparser/src/main/java/ch/bailu/simpleparser/SimpleStream.java b/simpleparser/src/main/java/ch/bailu/simpleparser/SimpleStream.java
new file mode 100644
index 00000000..b043eef5
--- /dev/null
+++ b/simpleparser/src/main/java/ch/bailu/simpleparser/SimpleStream.java
@@ -0,0 +1,113 @@
+package ch.bailu.simpleparser;
+
+import java.io.BufferedReader;
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.StringReader;
+
+public class SimpleStream implements Closeable {
+    private final static String CHARSET="UTF-8";
+    private final static int BUFFER_BYTES=1024*10;
+
+
+    private final Reader reader;
+    private int c=0;
+
+    public SimpleStream(AbsAccess file) throws IOException {
+
+
+        InputStream istream = file.open_r();
+        Reader ireader = new InputStreamReader(istream, CHARSET);
+        reader = new BufferedReader(ireader, BUFFER_BYTES);
+    }
+
+
+    public SimpleStream(String string) {
+        reader = new StringReader(string);
+    }
+
+
+    public int get() {
+        return c;
+    }
+
+    public void skip(long n) throws IOException {
+        reader.skip(n);
+    }
+
+    public void read() throws IOException {
+        c=reader.read();
+    }
+
+    public void read(long n) throws IOException {
+        skip(n);
+        read();
+    }
+
+    public boolean haveA(int x) {
+        return c == x;
+    }
+
+
+    public boolean nextIs(int x) throws IOException {
+        read();
+        return haveA(x);
+    }
+
+
+    public boolean nextIs(String string) throws IOException {
+        for (int i =0; i<string.length(); i++) {
+            read();
+            if (!haveA(string.charAt(i))) {
+                return false;
+            }
+
+        }
+        return true;
+    }
+
+    public void skipWhitespace() throws IOException {
+        while (c== ' ' || c=='\n' || c=='\r' || c=='\t') read();
+    }
+
+    public boolean haveDigit() {
+        return (c>='0' && c<='9');
+    }
+
+    public boolean haveCharacter() {
+        return (c >= 'A' && c <= 'z');
+    }
+
+    public int getDigit() {
+        return c-'0';
+    }
+
+
+
+    public boolean haveEOF() {
+        return c==-1;
+    }
+
+    public void to(int x) throws IOException {
+        while(true) {
+            read();
+            if (haveA(x) || haveEOF()) break;
+        }
+    }
+
+    @Override
+    public void close() throws IOException {
+        reader.close();
+    }
+
+    public boolean haveQuotation() {
+        return (c=='\'' || c=='"');
+    }
+
+    public void toQuotation() throws IOException {
+        while (haveQuotation()==false && haveEOF()==false) read();
+    }
+}
