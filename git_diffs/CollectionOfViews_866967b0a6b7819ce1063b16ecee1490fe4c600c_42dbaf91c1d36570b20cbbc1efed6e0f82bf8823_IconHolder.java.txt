diff --git a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
index 7c976764b..90b634b54 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
@@ -3,10 +3,7 @@ package com.amaze.filemanager.adapters;
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.Color;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.GradientDrawable;
 import android.os.Build;
 import android.support.v7.widget.RecyclerView;
@@ -446,7 +443,7 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                 }
 
                 holder.txtTitle.setText(rowItem.getTitle());
-                GlideApp.with(mainFrag).load(rowItem.getImageId()).into(holder.genericIcon);
+                GlideApp.with(mainFrag).load(rowItem.getDrawableId()).into(holder.genericIcon);
                 holder.genericText.setText("");
 
                 if (holder.about != null) {
@@ -493,13 +490,11 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             if (mainFrag.CIRCULAR_IMAGES) {
                                 holder.apkIcon.setVisibility(View.GONE);
                                 holder.pictureIcon.setVisibility(View.VISIBLE);
-                                holder.pictureIcon.setImageDrawable(mainFrag.DARK_IMAGE);
                                 GlideApp.with(mainFrag).clear(holder.pictureIcon);
                                 GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.pictureIcon)
                                         .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             } else {
                                 holder.apkIcon.setVisibility(View.VISIBLE);
-                                holder.apkIcon.setImageDrawable(mainFrag.DARK_IMAGE);
                                 GlideApp.with(mainFrag).clear(holder.apkIcon);
                                 GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
                                         .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
@@ -511,7 +506,6 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             holder.genericIcon.setVisibility(View.GONE);
                             holder.pictureIcon.setVisibility(View.GONE);
                             holder.apkIcon.setVisibility(View.VISIBLE);
-                            holder.apkIcon.setImageDrawable(mainFrag.apk);
                             GlideApp.with(mainFrag).clear(holder.apkIcon);
                             GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
                                     .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
@@ -522,13 +516,11 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             holder.genericIcon.setVisibility(View.GONE);
                             if (mainFrag.CIRCULAR_IMAGES) {
                                 holder.pictureIcon.setVisibility(View.VISIBLE);
-                                holder.pictureIcon.setImageDrawable(mainFrag.DARK_VIDEO);
                                 GlideApp.with(mainFrag).clear(holder.pictureIcon);
                                 GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.pictureIcon)
                                         .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             } else {
                                 holder.apkIcon.setVisibility(View.VISIBLE);
-                                holder.apkIcon.setImageDrawable(mainFrag.DARK_VIDEO);
                                 GlideApp.with(mainFrag).clear(holder.apkIcon);
                                 GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
                                         .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
@@ -552,15 +544,11 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                         holder.apkIcon.setVisibility(View.GONE);
                         break;
                     case ENCRYPTED_FILETYPE:
-                        Bitmap lockBitmap = BitmapFactory.decodeResource(mainFrag.getResources(),
-                                R.drawable.ic_file_lock_white_36dp);
-                        BitmapDrawable lockBitmapDrawable = new BitmapDrawable(mainFrag.getResources(), lockBitmap);
-
                         if (mainFrag.SHOW_THUMBS) {
                             holder.genericIcon.setVisibility(View.VISIBLE);
                             holder.pictureIcon.setVisibility(View.GONE);
                             holder.apkIcon.setVisibility(View.GONE);
-                            holder.genericIcon.setImageDrawable(lockBitmapDrawable);
+                            GlideApp.with(mainFrag).load(R.drawable.ic_file_lock_white_36dp).into(holder.genericIcon);
                             //GlideApp.with(mainFrag).clear(holder.apkIcon);
                             //GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
                             //       .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
@@ -641,7 +629,7 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                 holder.imageView1.setVisibility(View.INVISIBLE);
                 holder.genericIcon.setVisibility(View.VISIBLE);
                 holder.checkImageViewGrid.setVisibility(View.INVISIBLE);
-                GlideApp.with(mainFrag).load(rowItem.getImageId()).into(holder.genericIcon);
+                GlideApp.with(mainFrag).load(rowItem.getDrawableId()).into(holder.genericIcon);
 
                 if (Icons.isPicture((rowItem.getDesc().toLowerCase())) || Icons.isVideo(rowItem.getDesc().toLowerCase())) {
                     holder.genericIcon.setColorFilter(null);
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/LoadFilesListTask.java b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/LoadFilesListTask.java
index 34c15e200..ddf217e4f 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/LoadFilesListTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/LoadFilesListTask.java
@@ -214,6 +214,9 @@ public class LoadFilesListTask extends AsyncTask<Void, Void, Pair<OpenMode, Arra
     @Override
     protected void onPostExecute(Pair<OpenMode, ArrayList<LayoutElementParcelable>> list) {
         super.onPostExecute(list);
+        //for (LayoutElementParcelable e : list.second) {
+         //   GlideHelper.preloadDrawable(c, GlideHelper.HEIGHT, GlideHelper.WIDTH, e.getDesc());
+        //}
         listener.onAsyncTaskFinished(list);
     }
 
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index 2a5f139a9..891a145e1 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -33,7 +33,6 @@ import android.content.pm.ResolveInfo;
 import android.content.res.Resources;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
 import android.media.MediaScannerConnection;
 import android.media.RingtoneManager;
 import android.net.Uri;
@@ -117,7 +116,6 @@ import jcifs.smb.SmbFile;
 public class MainFragment extends android.support.v4.app.Fragment implements BottomBarButtonPath {
 
     public ActionMode mActionMode;
-    public Drawable folder, apk, DARK_IMAGE, DARK_VIDEO;
     public int sortby, dsort, asc;
     public String home;
     public boolean selection, results = false, SHOW_HIDDEN, CIRCULAR_IMAGES, SHOW_PERMISSIONS,
@@ -255,7 +253,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
 
         SHOW_THUMBS = sharedPref.getBoolean("showThumbs", true);
         //String itemsstring = res.getString(R.string.items);// TODO: 23/5/2017 use or delete
-        apk = res.getDrawable(R.drawable.ic_doc_apk_grid);
         mToolbarContainer.setBackgroundColor(MainActivity.currentTab == 1 ? primaryTwoColor : primaryColor);
 
         //   listView.setPadding(listView.getPaddingLeft(), paddingTop, listView.getPaddingRight(), listView.getPaddingBottom());
@@ -271,10 +268,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         initNoFileLayout();
         SHOW_HIDDEN = sharedPref.getBoolean("showHidden", false);
         COLORISE_ICONS = sharedPref.getBoolean("coloriseIcons", true);
-        folder = res.getDrawable(R.drawable.ic_grid_folder_new);
         getSortModes();
-        DARK_IMAGE = res.getDrawable(R.drawable.ic_doc_image_dark);
-        DARK_VIDEO = res.getDrawable(R.drawable.ic_doc_video_dark);
         this.setRetainInstance(false);
         HybridFile f = new HybridFile(OpenMode.UNKNOWN, CURRENT_PATH);
         f.generateMode(getActivity());
diff --git a/app/src/main/java/com/amaze/filemanager/ui/LayoutElementParcelable.java b/app/src/main/java/com/amaze/filemanager/ui/LayoutElementParcelable.java
index c2de028bf..0da4d5d0d 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/LayoutElementParcelable.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/LayoutElementParcelable.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2014 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>
+ *                      Emmanuel Messulam <emmanuelbendavid@gmail.com>
  *
  * This file is part of Amaze File Manager.
  *
@@ -34,62 +35,23 @@ public class LayoutElementParcelable implements Parcelable {
 
     private static final String CURRENT_YEAR = String.valueOf(Calendar.getInstance().get(Calendar.YEAR));
 
-    public LayoutElementParcelable(Parcel im) {
-        title = im.readString();
-        desc = im.readString();
-        permissions = im.readString();
-        symlink = im.readString();
-        int j = im.readInt();
-        date = im.readLong();
-        int i = im.readInt();
-        header = i != 0;
-        isDirectory = j != 0;
-        // don't save bitmaps in parcel, it might exceed the allowed transaction threshold
-        //Bitmap bitmap = (Bitmap) im.readParcelable(getClass().getClassLoader());
-        // Convert Bitmap to Drawable:
-        //imageId = new BitmapDrawable(bitmap);
-        date1 = im.readString();
-        size = im.readString();
-        longSize=im.readLong();
-    }
-
-
-    public int describeContents() {
-        // TODO: Implement this method
-        return 0;
-    }
-
-    public void writeToParcel(Parcel p1, int p2) {
-        p1.writeString(title);
-        p1.writeString(desc);
-        p1.writeString(permissions);
-        p1.writeString(symlink);
-        p1.writeInt(isDirectory?1:0);
-        p1.writeLong(date);
-        p1.writeInt(header ? 1 : 0);
-        //p1.writeParcelable(imageId.getBitmap(), p2);
-        p1.writeString(date1);
-        p1.writeString(size);
-        p1.writeLong(longSize);
-        // TODO: Implement this method
-    }
-
-    private @DrawableRes int imageId;
+    private @DrawableRes int drawableId;
     private String title;
     private String desc;
     private String permissions;
     private String symlink;
     private String size;
     private boolean isDirectory;
-    private long date = 0,longSize=0;
-    private String date1 = "";
+    private long date;
+    private long longSize;
+    private String date1;
     private boolean header;
     //same as hfile.modes but different than openmode in Main.java
     private OpenMode mode = OpenMode.FILE;
 
-    public LayoutElementParcelable(@DrawableRes int imageId, String title, String desc, String permissions,
+    public LayoutElementParcelable(@DrawableRes int image, String title, String desc, String permissions,
                                    String symlink, String size, long longSize, boolean header, String date, boolean isDirectory) {
-        this.imageId = imageId;
+        drawableId = image;
         this.title = title;
         this.desc = desc;
         this.permissions = permissions.trim();
@@ -101,36 +63,33 @@ public class LayoutElementParcelable implements Parcelable {
         if (!date.trim().equals("")) {
             this.date = Long.parseLong(date);
             this.date1 = Utils.getDate(this.date, CURRENT_YEAR);
+        } else {
+            this.date = 0;
+            this.date1 = "";
         }
     }
 
-    public LayoutElementParcelable(@DrawableRes int drawable, String path, String permissions, String symlink,
+    public LayoutElementParcelable(@DrawableRes int image, String path, String permissions, String symlink,
                                    String size, long longSize, boolean isDirectory, boolean header,
                                    String date) {
-        this(drawable, new File(path).getName(), path, permissions, symlink, size, longSize, header, date, isDirectory);
+        this(image, new File(path).getName(), path, permissions, symlink, size, longSize, header, date, isDirectory);
     }
 
-    public static final Parcelable.Creator<LayoutElementParcelable> CREATOR =
-            new Parcelable.Creator<LayoutElementParcelable>() {
-                public LayoutElementParcelable createFromParcel(Parcel in) {
-                    return new LayoutElementParcelable(in);
-                }
-
-                public LayoutElementParcelable[] newArray(int size) {
-                    return new LayoutElementParcelable[size];
-                }
-            };
+    public HybridFileParcelable generateBaseFile() {
+        HybridFileParcelable baseFile=new HybridFileParcelable(getDesc(), getPermissions(), getDate1(), getlongSize(), isDirectory());
+        baseFile.setMode(mode);
+        baseFile.setName(title);
+        return baseFile;
+    }
 
-    public @DrawableRes int getImageId() {
-        return imageId;
+    public @DrawableRes int getDrawableId() {
+        return drawableId;
     }
 
-    public void setImageId(@DrawableRes int imageId){this.imageId=imageId;}
     public String getDesc() {
         return desc;
     }
 
-
     public String getTitle() {
         return title;
     }
@@ -147,13 +106,6 @@ public class LayoutElementParcelable implements Parcelable {
         return isDirectory;
     }
 
-    public HybridFileParcelable generateBaseFile() {
-        HybridFileParcelable baseFile=new HybridFileParcelable(getDesc(), getPermissions(), getDate1(), getlongSize(), isDirectory());
-        baseFile.setMode(mode);
-        baseFile.setName(title);
-        return baseFile;
-    }
-
     public String getSize() {
         return size;
     }
@@ -186,4 +138,53 @@ public class LayoutElementParcelable implements Parcelable {
     public String toString() {
         return title + "\n" + desc;
     }
+
+    public LayoutElementParcelable(Parcel im) {
+        drawableId = im.readInt();
+        title = im.readString();
+        desc = im.readString();
+        permissions = im.readString();
+        symlink = im.readString();
+        int j = im.readInt();
+        date = im.readLong();
+        int i = im.readInt();
+        header = i != 0;
+        isDirectory = j != 0;
+        date1 = im.readString();
+        size = im.readString();
+        longSize=im.readLong();
+    }
+
+    @Override
+    public int describeContents() {
+        // TODO: Implement this method
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel p1, int p2) {
+        p1.writeInt(drawableId);
+        p1.writeString(title);
+        p1.writeString(desc);
+        p1.writeString(permissions);
+        p1.writeString(symlink);
+        p1.writeInt(isDirectory?1:0);
+        p1.writeLong(date);
+        p1.writeInt(header ? 1 : 0);
+        p1.writeString(date1);
+        p1.writeString(size);
+        p1.writeLong(longSize);
+    }
+
+    public static final Parcelable.Creator<LayoutElementParcelable> CREATOR =
+            new Parcelable.Creator<LayoutElementParcelable>() {
+                public LayoutElementParcelable createFromParcel(Parcel in) {
+                    return new LayoutElementParcelable(in);
+                }
+
+                public LayoutElementParcelable[] newArray(int size) {
+                    return new LayoutElementParcelable[size];
+                }
+            };
+
 }
