diff --git a/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/ZipExplorerAdapter.java
similarity index 95%
rename from app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java
rename to app/src/main/java/com/amaze/filemanager/adapters/ZipExplorerAdapter.java
index 0e0a65cd3..357b8275f 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/RarAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/ZipExplorerAdapter.java
@@ -21,11 +21,9 @@ import android.widget.TextView;
 import android.widget.Toast;
 
 import com.amaze.filemanager.R;
+import com.amaze.filemanager.asynchronous.services.ExtractService;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.fragments.ZipExplorerFragment;
-import com.amaze.filemanager.asynchronous.services.ExtractService;
-import com.amaze.filemanager.asynchronous.asynctasks.RarHelperTask;
-import com.amaze.filemanager.asynchronous.asynctasks.ZipHelperTask;
 import com.amaze.filemanager.ui.ZipObjectParcelable;
 import com.amaze.filemanager.ui.icons.Icons;
 import com.amaze.filemanager.ui.views.CircleGradientDrawable;
@@ -43,7 +41,7 @@ import java.util.ArrayList;
 /**
  * Created by Arpit on 25-01-2015.
  */
-public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHolder> {
+public class ZipExplorerAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHolder> {
 
     private Context c;
     private UtilitiesProviderInterface utilsProvider;
@@ -55,7 +53,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
     private SparseBooleanArray myChecked = new SparseBooleanArray();
     private boolean zipMode = false;  // flag specify whether adapter is based on a Rar file or not
 
-    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<FileHeader> enter, ZipExplorerFragment zipExplorerFragment) {
+    public ZipExplorerAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<FileHeader> enter, ZipExplorerFragment zipExplorerFragment) {
         this.utilsProvider = utilsProvider;
         this.enter = enter;
         for (int i = 0; i < enter.size(); i++)
@@ -68,7 +66,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         this.zipExplorerFragment = zipExplorerFragment;
     }
 
-    public RarAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<ZipObjectParcelable> enter, ZipExplorerFragment zipExplorerFragment, boolean l) {
+    public ZipExplorerAdapter(Context c, UtilitiesProviderInterface utilsProvider, ArrayList<ZipObjectParcelable> enter, ZipExplorerFragment zipExplorerFragment, boolean l) {
         this.utilsProvider = utilsProvider;
         this.enter1 = enter;
         for (int i = 0; i < enter.size(); i++) {
@@ -207,7 +205,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
         return super.onFailedToRecycleView(holder);
     }
 
-    private void animate(RarAdapter.ViewHolder holder) {
+    private void animate(ZipExplorerAdapter.ViewHolder holder) {
         holder.rl.clearAnimation();
         localAnimation = AnimationUtils.loadAnimation(zipExplorerFragment.getActivity(), R.anim.fade_in_top);
         localAnimation.setStartOffset(this.offset);
@@ -236,7 +234,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
      * @param position1 the position of the view to bind
      */
     private void onBindView(RecyclerView.ViewHolder vholder, final int position1) {
-        final RarAdapter.ViewHolder holder = ((RarAdapter.ViewHolder) vholder);
+        final ZipExplorerAdapter.ViewHolder holder = ((ZipExplorerAdapter.ViewHolder) vholder);
         if (!this.stoppedAnimation) {
             animate(holder);
         }
@@ -328,7 +326,6 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
                     zipExplorerFragment.goBack();
                 else {
                     if (zipExplorerFragment.selection) {
-
                         toggleChecked(position1, holder.checkImageView);
                     } else {
                         final StringBuilder stringBuilder = new StringBuilder(rowItem.getName());
@@ -336,11 +333,8 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
                             stringBuilder.deleteCharAt(rowItem.getName().length() - 1);
 
                         if (rowItem.isDirectory()) {
-
-                            new ZipHelperTask(zipExplorerFragment, stringBuilder.toString()).execute(zipExplorerFragment.s);
-
+                            zipExplorerFragment.changeZipPath(stringBuilder.toString());
                         } else {
-
                             String fileName = zipExplorerFragment.f.getName().substring(0,
                                     zipExplorerFragment.f.getName().lastIndexOf("."));
                             String archiveCacheDirPath = zipExplorerFragment.getActivity().getExternalCacheDir().getPath() +
@@ -380,7 +374,7 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
             onBindView(vholder, position1);
             return;
         }
-        final RarAdapter.ViewHolder holder = ((RarAdapter.ViewHolder) vholder);
+        final ZipExplorerAdapter.ViewHolder holder = ((ZipExplorerAdapter.ViewHolder) vholder);
         if (!this.stoppedAnimation) {
             animate(holder);
         }
@@ -453,11 +447,8 @@ public class RarAdapter extends RecyclerArrayAdapter<String, RecyclerView.ViewHo
                 } else {
 
                     if (rowItem.isDirectory()) {
-
                         zipExplorerFragment.elementsRar.clear();
-                        new RarHelperTask(zipExplorerFragment, rowItem.getFileNameString()).execute
-                                (zipExplorerFragment.f);
-
+                        zipExplorerFragment.changeRarPath(rowItem.getFileNameString());
                     } else {
                         String fileName = zipExplorerFragment.f.getName().substring(0,
                                 zipExplorerFragment.f.getName().lastIndexOf("."));
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/RarHelperTask.java b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/RarHelperTask.java
index 55a508c71..6cc672d17 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/RarHelperTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/RarHelperTask.java
@@ -1,102 +1,86 @@
 package com.amaze.filemanager.asynchronous.asynctasks;
 
-/**
- * Created by Arpit on 25-01-2015.
- */
-
+import android.content.Context;
 import android.os.AsyncTask;
+import android.support.v4.util.Pair;
 
-import com.amaze.filemanager.fragments.ZipExplorerFragment;
+import com.amaze.filemanager.utils.OnAsyncTaskFinished;
 import com.github.junrar.Archive;
+import com.github.junrar.exception.RarException;
 import com.github.junrar.rarfile.FileHeader;
 
 import java.io.File;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 
 /**
- * Created by Vishal on 11/23/2014.
+ * Created by Arpit on 25-01-2015 edited by Emmanuel Messulam<emmanuelbendavid@gmail.com>
  */
-public class RarHelperTask extends AsyncTask<File, Void, ArrayList<FileHeader>> {
+public class RarHelperTask extends AsyncTask<Void, Void, Pair<Archive, ArrayList<FileHeader>>> {
 
-    ZipExplorerFragment zipExplorerFragment;
-    String dir;
+    private WeakReference<Context> context;
+    private String fileLocation;
+    private String relativeDirectory;
+    private OnAsyncTaskFinished<Pair<Archive, ArrayList<FileHeader>>> onFinish;
 
     /**
      * AsyncTask to load RAR file items.
-     * @param zipExplorerFragment the zipExplorerFragment fragment instance
-     * @param dir
+     * @param realFileDirectory the location of the zip file
+     * @param dir relativeDirectory to access inside the zip file
      */
-    public RarHelperTask(ZipExplorerFragment zipExplorerFragment, String dir) {
-        this.zipExplorerFragment = zipExplorerFragment;
-        this.dir = dir;
-    }
-
-    @Override
-    protected void onPreExecute() {
-        super.onPreExecute();
-
-        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
+    public RarHelperTask(Context c, String realFileDirectory, String dir, OnAsyncTaskFinished<Pair<Archive, ArrayList<FileHeader>>> l) {
+        context = new WeakReference<>(c);
+        fileLocation = realFileDirectory;
+        relativeDirectory = dir;
+        onFinish = l;
     }
 
     @Override
-    protected ArrayList<FileHeader> doInBackground(File... params) {
-        ArrayList<FileHeader> elements = new ArrayList<>();
+    protected Pair<Archive, ArrayList<FileHeader>> doInBackground(Void... params) {
         try {
-            Archive zipfile = new Archive(params[0]);
-            zipExplorerFragment.archive = zipfile;
-            if (zipExplorerFragment.wholelistRar.size() == 0) {
-
-                FileHeader fh = zipfile.nextFileHeader();
-                while (fh != null) {
-                    zipExplorerFragment.wholelistRar.add(fh);
-                    fh = zipfile.nextFileHeader();
-                }
+            ArrayList<FileHeader> wholelistRar = new ArrayList<>();
+            ArrayList<FileHeader> elements = new ArrayList<>();
+            Archive zipfile = new Archive(new File(fileLocation));
+            for (FileHeader fh = zipfile.nextFileHeader(); fh != null; fh = zipfile.nextFileHeader()) {
+                wholelistRar.add(fh);
             }
-            if (dir == null || dir.trim().length() == 0 || dir.equals("")) {
-
-                for (FileHeader header : zipExplorerFragment.wholelistRar) {
-                    String name = header.getFileNameString();
 
-                    if (!name.contains("\\")) {
-                        elements.add(header);
+            for (FileHeader header : wholelistRar) {
+                String name = header.getFileNameString();
+                boolean isInBaseDir = (relativeDirectory == null || relativeDirectory.equals("")) && !name.contains("\\");
+                boolean isInRelativeDir = relativeDirectory != null && name.contains("\\")
+                        && name.substring(0, name.lastIndexOf("\\")).equals(relativeDirectory);
 
-                    }
-                }
-            } else {
-                for (FileHeader header : zipExplorerFragment.wholelistRar) {
-                    String name = header.getFileNameString();
-                    if (name.substring(0, name.lastIndexOf("\\")).equals(dir)) {
-                        elements.add(header);
-                    }
+                if (isInBaseDir || isInRelativeDir) {
+                    elements.add(header);
                 }
             }
-        } catch (Exception e) {
-
+            Collections.sort(elements, new FileListSorter());
+            return new Pair<>(zipfile, elements);
+        } catch (RarException | IOException e) {
+            e.printStackTrace();
+            return null;
         }
-        Collections.sort(elements, new FileListSorter());
-        return elements;
     }
 
     @Override
-    protected void onPostExecute(ArrayList<FileHeader> zipEntries) {
-        super.onPostExecute(zipEntries);
-        zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
-        zipExplorerFragment.createRarViews(zipEntries, dir);
+    protected void onPostExecute(Pair<Archive, ArrayList<FileHeader>> ArchivePairZipEntries) {
+        super.onPostExecute(ArchivePairZipEntries);
+        onFinish.onAsyncTaskFinished(ArchivePairZipEntries);
     }
 
     private class FileListSorter implements Comparator<FileHeader> {
         @Override
         public int compare(FileHeader file1, FileHeader file2) {
-
             if (file1.isDirectory() && !file2.isDirectory()) {
                 return -1;
-
-
             } else if (file2.isDirectory() && !(file1).isDirectory()) {
                 return 1;
             }
+
             return file1.getFileNameString().compareToIgnoreCase(file2.getFileNameString());
         }
     }
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/ZipHelperTask.java b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/ZipHelperTask.java
index 864f57953..15df5ffdf 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/ZipHelperTask.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/asynctasks/ZipHelperTask.java
@@ -1,12 +1,15 @@
 package com.amaze.filemanager.asynchronous.asynctasks;
 
+import android.content.Context;
 import android.net.Uri;
 import android.os.AsyncTask;
 
-import com.amaze.filemanager.fragments.ZipExplorerFragment;
 import com.amaze.filemanager.ui.ZipObjectParcelable;
+import com.amaze.filemanager.utils.OnAsyncTaskFinished;
 
 import java.io.File;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -16,61 +19,52 @@ import java.util.zip.ZipFile;
 import java.util.zip.ZipInputStream;
 
 /**
- * Created by Vishal on 11/23/2014.
+ * Created by Vishal on 11/23/2014 edited by Emmanuel Messulam<emmanuelbendavid@gmail.com>
  */
-public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObjectParcelable>> {
+public class ZipHelperTask extends AsyncTask<Void, Void, ArrayList<ZipObjectParcelable>> {
 
-    ZipExplorerFragment zipExplorerFragment;
-    String dir;
+    private WeakReference<Context> context;
+    private Uri fileLocation;
+    private String relativeDirectory;
+    private OnAsyncTaskFinished<ArrayList<ZipObjectParcelable>> onFinish;
 
     /**
      * AsyncTask to load ZIP file items.
-     * @param zipExplorerFragment the zipExplorerFragment fragment instance
-     * @param dir
+     * @param realFileDirectory the location of the zip file
+     * @param dir relativeDirectory to access inside the zip file
      */
-    public ZipHelperTask(ZipExplorerFragment zipExplorerFragment, String dir) {
-        this.zipExplorerFragment = zipExplorerFragment;
-        this.dir = dir;
-        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
+    public ZipHelperTask(Context c, String realFileDirectory, String dir, OnAsyncTaskFinished<ArrayList<ZipObjectParcelable>> l) {
+        context = new WeakReference<>(c);
+        fileLocation = Uri.parse(realFileDirectory);
+        relativeDirectory = dir;
+        onFinish = l;
     }
 
     @Override
-    protected void onPreExecute() {
-        super.onPreExecute();
-        zipExplorerFragment.swipeRefreshLayout.setRefreshing(true);
-    }
-
-    @Override
-    protected ArrayList<ZipObjectParcelable> doInBackground(String... params) {
+    protected ArrayList<ZipObjectParcelable> doInBackground(Void... params) {
+        ArrayList<ZipObjectParcelable> wholelist = new ArrayList<>();
         ArrayList<ZipObjectParcelable> elements = new ArrayList<>();
         try {
-            if (zipExplorerFragment.wholelist.size() == 0) {
-                Uri uri = Uri.parse(params[0]);
-                if (new File(uri.getPath()).canRead()) {
-                    ZipFile zipfile = new ZipFile(uri.getPath());
-                    for (Enumeration e = zipfile.entries(); e.hasMoreElements(); ) {
-                        ZipEntry entry = (ZipEntry) e.nextElement();
-                        zipExplorerFragment.wholelist.add(new ZipObjectParcelable(entry, entry.getTime(), entry.getSize(), entry.isDirectory()));
-                    }
-                } else {
-                    ZipEntry entry1;
-                    if (zipExplorerFragment.wholelist.size() == 0) {
-                        ZipInputStream zipfile1 = new ZipInputStream(zipExplorerFragment.getActivity().getContentResolver().openInputStream(uri));
-                        while ((entry1 = zipfile1.getNextEntry()) != null) {
-                            zipExplorerFragment.wholelist.add(new ZipObjectParcelable(entry1, entry1.getTime(), entry1.getSize(), entry1.isDirectory()));
-                        }
-                    }
+            if (new File(fileLocation.getPath()).canRead()) {
+                ZipFile zipfile = new ZipFile(fileLocation.getPath());
+                for (Enumeration e = zipfile.entries(); e.hasMoreElements(); ) {
+                    ZipEntry entry = (ZipEntry) e.nextElement();
+                    wholelist.add(new ZipObjectParcelable(entry,
+                            entry.getTime(), entry.getSize(), entry.isDirectory()));
+                }
+            } else {
+                ZipEntry entry1;
+                ZipInputStream zipfile1 = new ZipInputStream(context.get().getContentResolver().openInputStream(fileLocation));
+                while ((entry1 = zipfile1.getNextEntry()) != null) {
+                    wholelist.add(new ZipObjectParcelable(entry1, entry1.getTime(), entry1.getSize(), entry1.isDirectory()));
                 }
             }
-            ArrayList<String> strings = new ArrayList<>();
-            //  int fileCount = zipfile.size();
 
-            for (ZipObjectParcelable entry : zipExplorerFragment.wholelist) {
+            ArrayList<String> strings = new ArrayList<>();
 
-                String s = entry.getName();
-                //  System.out.println(s);
+            for (ZipObjectParcelable entry : wholelist) {
                 File file = new File(entry.getName());
-                if (dir == null || dir.trim().length() == 0) {
+                if (relativeDirectory == null || relativeDirectory.trim().length() == 0) {
                     String y = entry.getName();
                     if (y.startsWith("/"))
                         y = y.substring(1, y.length());
@@ -86,28 +80,26 @@ public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObjectPa
                             strings.add(path);
                             elements.add(zipObj);
                         }
-
                     }
                 } else {
                     String y = entry.getName();
                     if (entry.getName().startsWith("/"))
                         y = y.substring(1, y.length());
 
-                    if (file.getParent() != null && (file.getParent().equals(dir) || file.getParent().equals("/" + dir))) {
+                    if (file.getParent() != null && (file.getParent().equals(relativeDirectory) || file.getParent().equals("/" + relativeDirectory))) {
                         if (!strings.contains(y)) {
                             elements.add(new ZipObjectParcelable(new ZipEntry(y), entry.getTime(), entry.getSize(), entry.isDirectory()));
                             strings.add(y);
                         }
                     } else {
-                        if (y.startsWith(dir + "/") && y.length() > dir.length() + 1) {
-                            String path1 = y.substring(dir.length() + 1, y.length());
+                        if (y.startsWith(relativeDirectory + "/") && y.length() > relativeDirectory.length() + 1) {
+                            String path1 = y.substring(relativeDirectory.length() + 1, y.length());
 
-                            int index = dir.length() + 1 + path1.indexOf("/");
+                            int index = relativeDirectory.length() + 1 + path1.indexOf("/");
                             String path = y.substring(0, index + 1);
                             if (!strings.contains(path)) {
                                 ZipObjectParcelable zipObj = new ZipObjectParcelable(new ZipEntry(y.substring(0, index + 1)), entry.getTime(), entry.getSize(), true);
                                 strings.add(path);
-                                //System.out.println(path);
                                 elements.add(zipObj);
                             }
                         }
@@ -115,22 +107,18 @@ public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObjectPa
 
                 }
             }
-        } catch (Exception e) {
+        } catch (IOException e) {
             e.printStackTrace();
         }
 
         Collections.sort(elements, new FileListSorter());
-        if (zipExplorerFragment.gobackitem && dir != null && dir.trim().length() != 0)
-            elements.add(0, new ZipObjectParcelable(null, 0, 0, true));
-        zipExplorerFragment.elements = elements;
         return elements;
     }
 
     @Override
     protected void onPostExecute(ArrayList<ZipObjectParcelable> zipEntries) {
         super.onPostExecute(zipEntries);
-        zipExplorerFragment.swipeRefreshLayout.setRefreshing(false);
-        zipExplorerFragment.createZipViews(zipEntries, dir);
+        onFinish.onAsyncTaskFinished(zipEntries);
     }
 
     private class FileListSorter implements Comparator<ZipObjectParcelable> {
@@ -138,8 +126,6 @@ public class ZipHelperTask extends AsyncTask<String, Void, ArrayList<ZipObjectPa
         public int compare(ZipObjectParcelable file1, ZipObjectParcelable file2) {
             if (file1.isDirectory() && !file2.isDirectory()) {
                 return -1;
-
-
             } else if (file2.isDirectory() && !(file1).isDirectory()) {
                 return 1;
             }
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
index 4b3337f2f..321a17db0 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/ZipExplorerFragment.java
@@ -1,5 +1,6 @@
 /*
- * Copyright (C) 2014 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>
+ * Copyright (C) 2014 Arpit Khurana <arpitkh96@gmail.com>, Vishal Nehra <vishalmeham2@gmail.com>,
+ *                      Emmanuel Messulam<emmanuelbendavid@gmail.com>
  *
  * This file is part of Amaze File Manager.
  *
@@ -33,6 +34,7 @@ import android.preference.PreferenceManager;
 import android.support.annotation.Nullable;
 import android.support.design.widget.AppBarLayout;
 import android.support.v4.app.Fragment;
+import android.support.v4.util.Pair;
 import android.support.v4.widget.SwipeRefreshLayout;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -50,7 +52,7 @@ import android.widget.Toast;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
-import com.amaze.filemanager.adapters.RarAdapter;
+import com.amaze.filemanager.adapters.ZipExplorerAdapter;
 import com.amaze.filemanager.asynchronous.asynctasks.DeleteTask;
 import com.amaze.filemanager.asynchronous.asynctasks.RarHelperTask;
 import com.amaze.filemanager.asynchronous.asynctasks.ZipHelperTask;
@@ -60,6 +62,7 @@ import com.amaze.filemanager.ui.ZipObjectParcelable;
 import com.amaze.filemanager.ui.views.DividerItemDecoration;
 import com.amaze.filemanager.ui.views.FastScroller;
 import com.amaze.filemanager.utils.BottomBarButtonPath;
+import com.amaze.filemanager.utils.OnAsyncTaskFinished;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.Utils;
@@ -87,7 +90,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     private static final String KEY_ELEMENTS = "elements";
     private static final String KEY_OPEN = "is_open";
 
-    public String s;
+    public String realZipFile;
     public File f;
 
     /**
@@ -97,16 +100,13 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
      */
     public ArrayList<HybridFileParcelable> files;
     public Boolean selection = false;
-    public String current;
+    public String relativeDirectory = "";//Normally this would be "/" but for pathing issues it isn't
     public String skin, accentColor, iconskin, year;
-    public RarAdapter rarAdapter;
+    public ZipExplorerAdapter zipExplorerAdapter;
     public ActionMode mActionMode;
     public boolean coloriseIcons, showSize, showLastModified, gobackitem;
-    ZipExplorerFragment zipExplorerFragment = this;
     public Archive archive;
-    public ArrayList<FileHeader> wholelistRar = new ArrayList<>();
     public ArrayList<FileHeader> elementsRar = new ArrayList<>();
-    public ArrayList<ZipObjectParcelable> wholelist = new ArrayList<>();
     public ArrayList<ZipObjectParcelable> elements = new ArrayList<>();
     public MainActivity mainActivity;
     public RecyclerView listView;
@@ -139,10 +139,10 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
         listView.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
-                if (stopAnims && !rarAdapter.stoppedAnimation) {
+                if (stopAnims && !zipExplorerAdapter.stoppedAnimation) {
                     stopAnim();
                 }
-                rarAdapter.stoppedAnimation = true;
+                zipExplorerAdapter.stoppedAnimation = true;
 
                 stopAnims = false;
                 return false;
@@ -170,18 +170,18 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     public void onActivityCreated(Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
-        s = getArguments().getString(KEY_PATH);
-        f = new File(Uri.parse(s).getPath());
+        realZipFile = getArguments().getString(KEY_PATH);
+        f = new File(Uri.parse(realZipFile).getPath());
 
         mToolbarContainer = mainActivity.getAppbar().getAppbarLayout();
         mToolbarContainer.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (stopAnims) {
-                    if ((!rarAdapter.stoppedAnimation)) {
+                    if ((!zipExplorerAdapter.stoppedAnimation)) {
                         stopAnim();
                     }
-                    rarAdapter.stoppedAnimation = true;
+                    zipExplorerAdapter.stoppedAnimation = true;
                 }
                 stopAnims = false;
                 return false;
@@ -221,7 +221,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
                 loadFileList(f.getPath());
             } else {
                 openmode = ZIP_FILE;
-                loadFileList(s);
+                loadFileList(realZipFile);
             }
         } else {
             onRestoreInstanceState(savedInstanceState);
@@ -234,22 +234,20 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
         super.onSaveInstanceState(outState);
 
         if (openmode == ZIP_FILE) {
-            outState.putParcelableArrayList(KEY_WHOLE_LIST, wholelist);
             outState.putParcelableArrayList(KEY_ELEMENTS, elements);
         }
 
         outState.putInt(KEY_OPEN_MODE, openmode);
-        outState.putString(KEY_PATH, current);
-        outState.putString(KEY_URI, s);
+        outState.putString(KEY_PATH, relativeDirectory);
+        outState.putString(KEY_URI, realZipFile);
         outState.putString(KEY_FILE, f.getPath());
         outState.putParcelableArrayList(KEY_CACHE_FILES, files);
         outState.putBoolean(KEY_OPEN, isOpen);
     }
 
     private void onRestoreInstanceState(Bundle savedInstanceState) {
-        f = new File(savedInstanceState.getString(KEY_FILE));
-        s = savedInstanceState.getString(KEY_URI);
-        f = new File(Uri.parse(s).getPath());
+        realZipFile = savedInstanceState.getString(KEY_URI);
+        f = new File(Uri.parse(realZipFile).getPath());
         files = savedInstanceState.getParcelableArrayList(KEY_CACHE_FILES);
         isOpen = savedInstanceState.getBoolean(KEY_OPEN);
         if (f.getPath().endsWith(".rar")) {
@@ -257,18 +255,17 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
             String path = savedInstanceState.getString(KEY_FILE);
             if (path != null && path.length() > 0) {
                 f = new File(path);
-                current = savedInstanceState.getString(KEY_PATH);
-                new RarHelperTask(this, current).execute(f);
+                relativeDirectory = savedInstanceState.getString(KEY_PATH, "");
+                changeRarPath(relativeDirectory);
             } else {
                 loadFileList(f.getPath());
             }
         } else {
             openmode = ZIP_FILE;
-            wholelist = savedInstanceState.getParcelableArrayList(KEY_WHOLE_LIST);
             elements = savedInstanceState.getParcelableArrayList(KEY_ELEMENTS);
-            current = savedInstanceState.getString(KEY_PATH);
+            relativeDirectory = savedInstanceState.getString(KEY_PATH, "");
             f = new File(savedInstanceState.getString(KEY_FILE));
-            createZipViews(elements, current);
+            createZipViews(elements, relativeDirectory);
         }
     }
 
@@ -322,7 +319,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
         // onCreateActionMode, but
         // may be called multiple times if the mode is invalidated.
         public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-            ArrayList<Integer> positions = rarAdapter.getCheckedItemPositions();
+            ArrayList<Integer> positions = zipExplorerAdapter.getCheckedItemPositions();
             ((TextView) v.findViewById(R.id.item_count)).setText(positions.size() + "");
 
             return false; // Return false if nothing is done
@@ -332,7 +329,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
         public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
             switch (item.getItemId()) {
                 case R.id.all:
-                    rarAdapter.toggleChecked(true, "");
+                    zipExplorerAdapter.toggleChecked(true, "");
                     mode.invalidate();
                     return true;
                 case R.id.ex:
@@ -340,7 +337,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
                     Toast.makeText(getActivity(), getResources().getString(R.string.extracting), Toast.LENGTH_SHORT).show();
                     Intent intent = new Intent(getActivity(), ExtractService.class);
                     ArrayList<String> a = new ArrayList<>();
-                    for (int i : rarAdapter.getCheckedItemPositions()) {
+                    for (int i : zipExplorerAdapter.getCheckedItemPositions()) {
                         a.add(openmode == ZIP_FILE ? elements.get(i).getName() : elementsRar.get(i).getFileNameString());
                     }
                     intent.putExtra(ExtractService.KEY_PATH_ZIP, f.getPath());
@@ -354,7 +351,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
 
         @Override
         public void onDestroyActionMode(ActionMode actionMode) {
-            if (rarAdapter != null) rarAdapter.toggleChecked(false, "");
+            if (zipExplorerAdapter != null) zipExplorerAdapter.toggleChecked(false, "");
             selection = false;
             mainActivity.updateViews(mainActivity.getColorPreference().getDrawable(ColorUsage.getPrimary(MainActivity.currentTab)));
             if (Build.VERSION.SDK_INT >= 21) {
@@ -417,55 +414,42 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     };
 
     private void loadFileList(String path) {
-        if(openmode == ZIP_FILE) {
-            new ZipHelperTask(this, "").execute(path);
-
-        } else {
-            File f = new File(path);
-            new RarHelperTask(this, "").execute(f);
-        }
+        changePath("");
     }
 
     public boolean canGoBack() {
-        if (openmode == RAR_FILE) return !(current == null || current.trim().length() == 0);
-        else return !(current == null || current.trim().length() == 0);
+        if (openmode == RAR_FILE) return !(relativeDirectory == null || relativeDirectory.trim().length() == 0);
+        else return !(relativeDirectory == null || relativeDirectory.trim().length() == 0);
     }
 
     public void goBack() {
         if (openmode == RAR_FILE) {
             String path;
             try {
-                path = current.substring(0, current.lastIndexOf("\\"));
+                path = relativeDirectory.substring(0, relativeDirectory.lastIndexOf("\\"));
             } catch (Exception e) {
                 path = "";
             }
-            new RarHelperTask(this, path).execute(f);
+            changeRarPath(path);
         } else {
-            new ZipHelperTask(this, new File(current).getParent()).execute(s);
+            changeZipPath(new File(relativeDirectory).getParent());
         }
     }
 
     private void refresh() {
-        switch (openmode) {
-            case ZIP_FILE:
-                new ZipHelperTask(this, current).execute(s);
-                break;
-            case RAR_FILE:
-                new RarHelperTask(this, current).execute(f);
-                break;
-        }
+        changePath(relativeDirectory);
     }
 
     private void updateBottomBar() {
-        String path = current != null && current.length() != 0? f.getName() + "/" + current:f.getName();
+        String path = relativeDirectory != null && relativeDirectory.length() != 0? f.getName() + "/" + relativeDirectory :f.getName();
         mainActivity.getAppbar().getBottomBar().updatePath(path, false, null, OpenMode.FILE, folder, file, this);
     }
 
     public void createZipViews(ArrayList<ZipObjectParcelable> zipEntries, String dir) {
-        if (rarAdapter == null) {
-            rarAdapter = new RarAdapter(getActivity(), utilsProvider, zipEntries, this, true);
-            listView.setAdapter(rarAdapter);
-        } else rarAdapter.generate(zipEntries, true);
+        if (zipExplorerAdapter == null) {
+            zipExplorerAdapter = new ZipExplorerAdapter(getActivity(), utilsProvider, zipEntries, this, true);
+            listView.setAdapter(zipExplorerAdapter);
+        } else zipExplorerAdapter.generate(zipEntries, true);
         folder = 0;
         file = 0;
         for (ZipObjectParcelable zipEntry : zipEntries)
@@ -476,11 +460,11 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     }
 
     public void createRarViews(ArrayList<FileHeader> zipEntries, String dir) {
-        if (rarAdapter == null) {
-            rarAdapter = new RarAdapter(getActivity(), utilsProvider, zipEntries, this);
-            listView.setAdapter(rarAdapter);
+        if (zipExplorerAdapter == null) {
+            zipExplorerAdapter = new ZipExplorerAdapter(getActivity(), utilsProvider, zipEntries, this);
+            listView.setAdapter(zipExplorerAdapter);
         } else
-            rarAdapter.generate(zipEntries);
+            zipExplorerAdapter.generate(zipEntries);
         folder = 0;
         file = 0;
         for (FileHeader zipEntry : zipEntries)
@@ -500,7 +484,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
         if (addheader) {
             dividerItemDecoration = new DividerItemDecoration(getActivity(), true, showDividers);
             listView.addItemDecoration(dividerItemDecoration);
-            //headersDecor = new StickyRecyclerHeadersDecoration(rarAdapter);
+            //headersDecor = new StickyRecyclerHeadersDecoration(zipExplorerAdapter);
             //listView.addItemDecoration(headersDecor);
             addheader = false;
         }
@@ -514,7 +498,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
             }
         });
         listView.stopScroll();
-        current = dir;
+        relativeDirectory = dir;
         updateBottomBar();
         swipeRefreshLayout.setRefreshing(false);
     }
@@ -523,10 +507,12 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     public void changePath(String path) {
         if(path.startsWith("/")) path = path.substring(1);
 
-        if (openmode == ZIP_FILE) {
-            new ZipHelperTask(this, path).execute(s);
+        swipeRefreshLayout.setRefreshing(true);
+
+        if (openmode == ZIP_FILE) {// TODO: 15/9/2017 put switch
+            changeZipPath(path);
         } else {
-            new RarHelperTask(this, path).execute(f);
+            changeRarPath(path);
         }
 
         updateBottomBar();
@@ -534,7 +520,7 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
 
     @Override
     public String getPath() {
-        if(current != null && current.length() != 0) return "/" + current;
+        if(relativeDirectory != null && relativeDirectory.length() != 0) return "/" + relativeDirectory;
         else return "";
     }
 
@@ -542,4 +528,34 @@ public class ZipExplorerFragment extends Fragment implements BottomBarButtonPath
     public int getRootDrawable() {
         return R.drawable.ic_compressed_white_24dp;
     }
+
+    public void changeZipPath(final String folder) {
+        new ZipHelperTask(getContext(), realZipFile, folder, new OnAsyncTaskFinished<ArrayList<ZipObjectParcelable>>() {
+            @Override
+            public void onAsyncTaskFinished(ArrayList<ZipObjectParcelable> data) {
+                if (gobackitem && relativeDirectory != null && relativeDirectory.trim().length() != 0)
+                    elements.add(0, new ZipObjectParcelable(null, 0, 0, true));
+                elements = data;
+                createZipViews(data, folder);
+
+                swipeRefreshLayout.setRefreshing(false);
+                updateBottomBar();
+            }
+        }).execute();
+    }
+
+    public void changeRarPath(final String folder) {
+        new RarHelperTask(getContext(), Uri.parse(realZipFile).getPath(), folder,
+                new OnAsyncTaskFinished<Pair<Archive, ArrayList<FileHeader>>>() {
+            @Override
+            public void onAsyncTaskFinished(Pair<Archive, ArrayList<FileHeader>> data) {
+                archive = data.first;
+                createRarViews(data.second, folder);
+
+                swipeRefreshLayout.setRefreshing(false);
+                updateBottomBar();
+            }
+        }).execute();
+    }
+
 }
diff --git a/app/src/main/java/com/amaze/filemanager/utils/OnAsyncTaskFinished.java b/app/src/main/java/com/amaze/filemanager/utils/OnAsyncTaskFinished.java
new file mode 100644
index 000000000..b47256b31
--- /dev/null
+++ b/app/src/main/java/com/amaze/filemanager/utils/OnAsyncTaskFinished.java
@@ -0,0 +1,10 @@
+package com.amaze.filemanager.utils;
+
+/**
+ * @author Emmanuel
+ *         on 14/9/2017, at 21:00.
+ */
+
+public interface OnAsyncTaskFinished<T> {
+    void onAsyncTaskFinished(T data);
+}
