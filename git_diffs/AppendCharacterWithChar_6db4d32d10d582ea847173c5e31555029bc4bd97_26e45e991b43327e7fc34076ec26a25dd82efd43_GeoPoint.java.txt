diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
index 7d7beaac..24b84186 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
@@ -11,24 +11,23 @@ import android.view.ViewGroup.LayoutParams;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.File;
 import java.io.IOException;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.dispatcher.CustomFileSource;
 import ch.bailu.aat.gpx.InfoID;
-import ch.bailu.aat.util.TextBackup;
+import ch.bailu.aat.services.background.BackgroundService;
+import ch.bailu.aat.services.background.DownloadHandle;
+import ch.bailu.aat.services.background.ProcessHandle;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.OsmApiHelper;
+import ch.bailu.aat.util.TextBackup;
+import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.ToolTip;
-import ch.bailu.aat.services.background.BackgroundService;
-import ch.bailu.aat.services.background.DownloadHandle;
-import ch.bailu.aat.services.background.ProcessHandle;
 import ch.bailu.aat.views.BusyButton;
 import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.ControlBar;
@@ -161,7 +160,7 @@ public abstract class AbsOsmApiActivity extends AbsDispatcher implements OnClick
     }
 
 
-    public abstract OsmApiHelper createUrlGenerator(BoundingBoxOsm boundingBox) throws SecurityException, IOException;
+    public abstract OsmApiHelper createUrlGenerator(BoundingBoxE6 boundingBox) throws SecurityException, IOException;
     public abstract void addButtons(ControlBar bar);
 
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/ActivitySwitcher.java b/app/src/main/java/ch/bailu/aat/activities/ActivitySwitcher.java
index a4b764d2..8aa1e724 100644
--- a/app/src/main/java/ch/bailu/aat/activities/ActivitySwitcher.java
+++ b/app/src/main/java/ch/bailu/aat/activities/ActivitySwitcher.java
@@ -5,12 +5,12 @@ import android.content.Context;
 import android.content.Intent;
 
 import org.mapsforge.core.model.BoundingBox;
-import org.osmdroid.util.BoundingBoxOsm;
 
 import java.io.File;
 
 import ch.bailu.aat.BuildConfig;
 import ch.bailu.aat.R;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.AppIntent;
 
 public class ActivitySwitcher {
@@ -95,7 +95,7 @@ public class ActivitySwitcher {
         }
     }
 
-    public static void start(Context context, Class<?> a, BoundingBoxOsm box) {
+    public static void start(Context context, Class<?> a, BoundingBoxE6 box) {
         Intent intent = new Intent();
         AppIntent.setBoundingBox(intent, box);
         start(context, a, intent);
diff --git a/app/src/main/java/ch/bailu/aat/activities/MapActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
index 1256d68a..23f7e9fb 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapActivity.java
@@ -9,12 +9,11 @@ import android.view.View.OnClickListener;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
+import org.mapsforge.core.model.LatLong;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.coordinates.Coordinates;
-import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.dispatcher.CurrentLocationSource;
 import ch.bailu.aat.dispatcher.EditorSource;
 import ch.bailu.aat.dispatcher.OverlaySource;
@@ -74,10 +73,13 @@ public class MapActivity extends AbsDispatcher implements OnClickListener{
     }
 
     private void setMapCenterFromUri(Uri uri) {
-        GeoPoint geo = new GeoPoint(0,0);
 
-        if (Coordinates.stringToGeoPoint(uri.toString(), geo)) {
-            map.setCenter(new LatLongE6(geo).toLatLong());
+        try {
+            LatLong c = Coordinates.stringToGeoPoint(uri.toString());
+            map.setCenter(c);
+
+        } catch (NumberFormatException e) {
+            AppLog.d(this, uri.toString());
         }
     }
 
@@ -87,7 +89,7 @@ public class MapActivity extends AbsDispatcher implements OnClickListener{
 
         if (query != null) {
             Intent intent = new Intent();
-            AppIntent.setBoundingBox(intent, new BoundingBoxOsm(0,0,0,0));
+            AppIntent.setBoundingBox(intent, new BoundingBoxE6(0,0,0,0));
             intent.setData(uri);
             ActivitySwitcher.start(this, NominatimActivity.class, intent);
         }
diff --git a/app/src/main/java/ch/bailu/aat/activities/NominatimActivity.java b/app/src/main/java/ch/bailu/aat/activities/NominatimActivity.java
index 72d9c37d..ce191810 100644
--- a/app/src/main/java/ch/bailu/aat/activities/NominatimActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/NominatimActivity.java
@@ -1,9 +1,8 @@
 package ch.bailu.aat.activities;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.IOException;
 
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.NominatimApi;
 import ch.bailu.aat.util.OsmApiHelper;
 import ch.bailu.aat.views.ControlBar;
@@ -11,7 +10,7 @@ import ch.bailu.aat.views.ControlBar;
 public class NominatimActivity extends AbsOsmApiActivity {
 
     @Override
-    public OsmApiHelper createUrlGenerator(BoundingBoxOsm boundingBox) throws SecurityException, IOException {
+    public OsmApiHelper createUrlGenerator(BoundingBoxE6 boundingBox) throws SecurityException, IOException {
         return new NominatimApi(this, boundingBox);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java b/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
index c9543abf..6ad5feae 100644
--- a/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/OverpassActivity.java
@@ -2,11 +2,10 @@ package ch.bailu.aat.activities;
 
 import android.view.View;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.IOException;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.OsmApiHelper;
 import ch.bailu.aat.util.OverpassApi;
 import ch.bailu.aat.util.ui.ToolTip;
@@ -33,7 +32,7 @@ public class OverpassActivity extends AbsOsmApiActivity  {
 
 
     @Override
-    public OsmApiHelper createUrlGenerator(BoundingBoxOsm boundingBox) throws SecurityException, IOException {
+    public OsmApiHelper createUrlGenerator(BoundingBoxE6 boundingBox) throws SecurityException, IOException {
         return new OverpassApi(this,boundingBox);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
index 3782a7bc..c29a3cd0 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
@@ -43,7 +43,6 @@ import ch.bailu.aat.map.layer.gpx.GpxOverlayListLayer;
 import ch.bailu.aat.map.layer.gpx.GpxTestLayer;
 import ch.bailu.aat.map.layer.grid.GridDynLayer;
 import ch.bailu.aat.map.mapsforge.MapsForgeView;
-import ch.bailu.aat.map.osmdroid.OsmViewInteractive;
 import ch.bailu.aat.test.PreferencesFromSdcard;
 import ch.bailu.aat.test.PreferencesToSdcard;
 import ch.bailu.aat.test.TestCoordinates;
@@ -143,14 +142,14 @@ public class TestActivity extends AbsDispatcher {
         final MultiView mv = new MultiView(this, SOLID_KEY);
 
 
-        final OsmViewInteractive osm = new OsmViewInteractive(getServiceContext(), this, SOLID_KEY);
+//        final OsmViewInteractive osm = new OsmViewInteractive(getServiceContext(), this, SOLID_KEY);
         final MapsForgeView mf = new MapsForgeView(getServiceContext(), this, SOLID_KEY);
 
         fillMap(mf);
-        fillMap(osm);
+//        fillMap(osm);
 
         mv.add(mf, "MapsForge");
-        mv.add(osm,getString(R.string.intro_map));
+//        mv.add(osm,getString(R.string.intro_map));
         mv.add(locationView, getString(R.string.gps));
 
         mv.add(trackerView, getString(R.string.tracker));
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java b/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
index d780157f..d76e3083 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/BoundingBoxE6.java
@@ -2,36 +2,33 @@ package ch.bailu.aat.coordinates;
 
 import org.mapsforge.core.model.BoundingBox;
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.BoundingBoxOsm;
 
 import java.io.IOException;
 import java.util.Locale;
 
-import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.gpx.parser.DoubleParser;
 import ch.bailu.aat.gpx.parser.SimpleStream;
 
 public class BoundingBoxE6 {
 
-    
+
     public final static BoundingBoxE6 NULL_BOX = new BoundingBoxE6(0,0);
 
-    
-    private int north = Integer.MIN_VALUE, 
-                east  = Integer.MIN_VALUE, 
-                south = Integer.MAX_VALUE, 
-                west  = Integer.MAX_VALUE;
-    
+
+    private int north = Integer.MIN_VALUE,
+            east  = Integer.MIN_VALUE,
+            south = Integer.MAX_VALUE,
+            west  = Integer.MAX_VALUE;
+
 
 
     public BoundingBoxE6() {}
-    
+
     public BoundingBoxE6(int n, int e, int s, int w) {
         add(n,e,s,w);
     }
 
-    
+
     public BoundingBoxE6(int la, int lo) {
         add(la, lo);
     }
@@ -43,22 +40,22 @@ public class BoundingBoxE6 {
         east = LatLongE6.toE6(b.maxLongitude);
 
     }
-    
-    
+
+
     public BoundingBoxE6(BoundingBoxE6 b) {
         add(b);
     }
 
-    public BoundingBoxE6(GpxPointInterface a, GpxPointInterface b) {
-        add(a.getLatitudeE6(), a.getLongitudeE6(), b.getLatitudeE6(), b.getLongitudeE6());
-    }
-
+//    public BoundingBoxE6(GpxPointInterface a, GpxPointInterface b) {
+//        add(a.getLatitudeE6(), a.getLongitudeE6(), b.getLatitudeE6(), b.getLongitudeE6());
+//    }
+//
+//
+//    public BoundingBoxE6(BoundingBoxOsm b) {
+//        add(b);
+//    }
 
-    public BoundingBoxE6(BoundingBoxOsm b) {
-        add(b);
-    }
 
-    
     public void add(String bounding) {
         final SimpleStream stream = new SimpleStream(bounding);
         final DoubleParser parser = new DoubleParser(stream,6);
@@ -67,89 +64,91 @@ public class BoundingBoxE6 {
             parser.scan();
             final int s=parser.getInt();
 
-            
+
             parser.scan();
             final int n=parser.getInt();
 
-            
+
             parser.scan();
             final int w=parser.getInt();
-            
+
             parser.scan();
             final int e=parser.getInt();
-            
+
             add(n,e,s,w);
         } catch (IOException e) {
             e.printStackTrace();
         }
     }
-    
+
 
     public void add(BoundingBoxE6 b) {
-        add(b.north, b.east, 
-            b.south, b.west);
+        add(b.north, b.east,
+                b.south, b.west);
     }
 
 
+
     public void add(LatLong latLong) {
         add(latLong.getLatitudeE6(), latLong.getLongitudeE6());
     }
-    public void add(IGeoPoint point) {
+
+    public void add(LatLongE6Interface point) {
         add(point.getLatitudeE6(), point.getLongitudeE6());
     }
-    
+
 
 
     public void add(int la, int lo) {
         add(la, lo, la, lo);
     }
-    
+
     public void add(int n, int e, int s, int w) {
-        
+
         north = Math.max(n,north);
         east  = Math.max(e,east);
         south = Math.min(s,south);
         west  = Math.min(w,west);
     }
 
-    public void add(BoundingBoxOsm b) {
-        add(b.getLatNorthE6(), b.getLonEastE6(), 
-            b.getLatSouthE6(), b.getLonWestE6());
-    }
+//    public void add(BoundingBoxOsm b) {
+//        add(b.getLatNorthE6(), b.getLonEastE6(),
+//            b.getLatSouthE6(), b.getLonWestE6());
+//    }
 
 
     public boolean contains(LatLong p) {
         return contains(p.getLatitudeE6(), p.getLongitudeE6());
     }
 
-    public boolean contains(IGeoPoint p) {
+    public boolean contains(LatLongE6Interface p) {
         return contains(p.getLatitudeE6(), p.getLongitudeE6());
     }
-    
-    
+
+
     public boolean contains(int la, int lo) {
         return la < north && la > south && lo < east && lo > west;
     }
 
     public static boolean doOverlap(BoundingBoxE6 b1, BoundingBoxE6 b2) {
         return
-        (b1.containsLatitude(b2) || b2.containsLatitude(b1)) &&
-        (b2.containsLongitude(b1) || b1.containsLongitude(b2));
+                (b1.containsLatitude(b2) || b2.containsLatitude(b1)) &&
+                        (b2.containsLongitude(b1) || b1.containsLongitude(b2));
     }
 
-    
+
     public boolean containsLongitude(BoundingBoxE6 b) {
         return containsLongitude(b.east) || containsLongitude(b.west);
     }
-    
+
     public boolean containsLongitude(int lo) {
         return lo > west && lo < east;
     }
-    
+
     public boolean containsLatitude(BoundingBoxE6 b) {
         return containsLatitude(b.north) || containsLatitude(b.south);
     }
-    
+
     public boolean containsLatitude(int la) {
         return la < north && la > south;
     }
@@ -162,11 +161,11 @@ public class BoundingBoxE6 {
                 LatLongE6.toD(Math.max(west, east)));
     }
 
-    public BoundingBoxOsm toBoundingBoxE6() {
-        return new BoundingBoxOsm(north, east, south, west);
-    }
+//    public BoundingBoxOsm toBoundingBoxE6() {
+//        return new BoundingBoxOsm(north, east, south, west);
+//    }
+
 
-    
     public int getLatNorthE6() {
         return north;
     }
@@ -197,5 +196,16 @@ public class BoundingBoxE6 {
     }
 
 
+    public int getLatitudeSpanE6() {
+        return Math.abs(north - south);
+    }
+
+    public int getLongitudeSpanE6() {
+        return Math.abs(west - east);
+    }
+
+    public LatLongE6 getCenter() {
+        return new LatLongE6(south + getLatitudeSpanE6(), west + getLongitudeSpanE6());
+    }
 }
 
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/CH1903Coordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/CH1903Coordinates.java
index 16d72336..d803ccfd 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/CH1903Coordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/CH1903Coordinates.java
@@ -1,8 +1,6 @@
 package ch.bailu.aat.coordinates;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.GeoPoint;
 
 import java.util.Locale;
 
@@ -51,7 +49,7 @@ public class CH1903Coordinates extends MeterCoordinates {
         this(p.getLatitude(), p.getLongitude());
     }
 
-    public CH1903Coordinates(IGeoPoint point) {
+    public CH1903Coordinates(LatLongE6Interface point) {
         toCH1903(((double)point.getLatitudeE6())/1e6d, 
         		((double)point.getLongitudeE6())/1e6d);
     }
@@ -105,11 +103,11 @@ public class CH1903Coordinates extends MeterCoordinates {
 
     @Override
     public LatLong toLatLong() {
-        GeoPoint p = toGeoPoint();
-        return new LatLong(p.getLatitudeE6()/1e6d, p.getLongitudeE6()/1e6d);
+        return toLatLongE6().toLatLong();
+
     }
 
-    public GeoPoint toGeoPoint() {
+    public LatLongE6 toLatLongE6() {
         double x = getRelativeX(northing);
         double y = getRelativeY(easting);
             
@@ -118,7 +116,7 @@ public class CH1903Coordinates extends MeterCoordinates {
         double x3=x2*x;
         double y2=y*y;
             
-        return new GeoPoint(
+        return new LatLongE6(
                 toDecimalDegree(
                   16.9023892d
                 +  3.238272d     *x
@@ -177,7 +175,7 @@ public class CH1903Coordinates extends MeterCoordinates {
     public static boolean inSwitzerland(LatLong point) {
         return SWISS_AREA.contains(point);
     }
-    public static boolean inSwitzerland(GeoPoint point) {
+    public static boolean inSwitzerland(LatLongE6Interface point) {
         return SWISS_AREA.contains(point);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
index 0306d0ad..679638bf 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/Coordinates.java
@@ -1,59 +1,50 @@
 package ch.bailu.aat.coordinates;
 
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.GeoPoint;
+import org.mapsforge.core.model.LatLong;
 
 public abstract class Coordinates {
     public abstract String toString();
 
 
-    public static boolean stringToGeoPoint(String src, GeoPoint dst) {
+    public static LatLong stringToGeoPoint(String src) throws NumberFormatException{
         String[] parts = src.split("[:,?#]");
 
         int hit=0;
 
         double la=0, lo;
         for (int x = 0; x < parts.length && hit < 2; x++) {
-            try {
-                final double d = Double.parseDouble(parts[x]);
-                hit++;
-
-                if (hit==1) {
-                    la = d;
-                } else if (hit==2) {
-                    lo = d;
-                    if (lo != 0d && la !=0d) {
-                        dst.setLatitudeE6((int)(la*1E6));
-                        dst.setLongitudeE6((int)(lo*1E6));
-                        return true;
-                    }
+            final double d = Double.parseDouble(parts[x]);
+            hit++;
+
+            if (hit==1) {
+                la = d;
+            } else if (hit==2) {
+                lo = d;
+                if (lo != 0d && la !=0d) {
+                    return new LatLong(la, lo);
                 }
-
-            } catch (NumberFormatException  e) {
-
             }
-
         }
-        return false;
+        throw new NumberFormatException();
     }
 
-    public static String geoPointToGeoUri(IGeoPoint src) {
+    public static String geoPointToGeoUri(LatLong src) {
         String b = "geo:" +
-                src.getLatitudeE6() / 1e6d +
+                src.getLatitude() +
                 ',' +
-                src.getLongitudeE6() / 1e6d;
+                src.getLongitude();
 
         return b;
     }
 
 
-    public static String geoPointToDescription(GeoPoint src) {
+    public static String geoPointToDescription(LatLong src) {
         StringBuilder b = new StringBuilder();
 
         b.append("Coordinates:\nLatitude:");
-        b.append(src.getLatitudeE6()/1e6d);
+        b.append(src.getLatitude());
         b.append("Longitude:");
-        b.append(src.getLongitudeE6()/1e6d);
+        b.append(src.getLongitude());
 
         return b.toString();    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6.java b/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6.java
index 1bc4beb5..20922c45 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6.java
@@ -2,15 +2,14 @@ package ch.bailu.aat.coordinates;
 
 import org.mapsforge.core.model.LatLong;
 import org.mapsforge.core.util.LatLongUtils;
-import org.osmdroid.api.IGeoPoint;
 
-public class LatLongE6 {
+public class LatLongE6 implements LatLongE6Interface {
     public final int la, lo;
 
 
-    public LatLongE6(IGeoPoint p) {
-        this(p.getLatitudeE6(), p.getLongitudeE6());
-    }
+//    public LatLongE6(IGeoPoint p) {
+//        this(p.getLatitudeE6(), p.getLongitudeE6());
+//    }
 
     public LatLongE6(int latitude, int longitude) {
         la = latitude;
@@ -41,4 +40,19 @@ public class LatLongE6 {
     public static int toE6(double in) {
         return LatLongUtils.degreesToMicrodegrees(in);
     }
+
+    @Override
+    public int getLatitudeE6() {
+        return la;
+    }
+
+    @Override
+    public int getLongitudeE6() {
+        return lo;
+    }
+
+    public static LatLong toLatLong(LatLongE6Interface tp) {
+        return new LatLong(toD(tp.getLatitudeE6()), toD(tp.getLongitudeE6()));
+
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6Interface.java b/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6Interface.java
new file mode 100644
index 00000000..405fe426
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/coordinates/LatLongE6Interface.java
@@ -0,0 +1,6 @@
+package ch.bailu.aat.coordinates;
+
+public interface LatLongE6Interface {
+    int getLatitudeE6();
+    int getLongitudeE6();
+}
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/MeterCoordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/MeterCoordinates.java
index 9e490ca1..b590440f 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/MeterCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/MeterCoordinates.java
@@ -1,12 +1,11 @@
 package ch.bailu.aat.coordinates;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.util.GeoPoint;
 
 public abstract class MeterCoordinates extends Coordinates {
     public abstract int getNorthing();
     public abstract int getEasting();
-    public abstract GeoPoint toGeoPoint();
+    //public abstract GeoPoint toLatLongE6();
     public abstract LatLong toLatLong();
     public abstract void round(int c);
     
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
index 94fb5f36..0b166951 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
@@ -3,14 +3,13 @@ package ch.bailu.aat.coordinates;
 import android.content.Context;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
 
 import java.io.File;
 import java.util.Locale;
 
 import ch.bailu.aat.preferences.SolidDataDirectory;
 
-public class SrtmCoordinates extends Coordinates implements IGeoPoint {
+public class SrtmCoordinates extends Coordinates implements LatLongE6Interface {
     /**
      * # Dem3:
      * Digital Elevation Models in 3 arc / second resolution. 
@@ -44,7 +43,7 @@ public class SrtmCoordinates extends Coordinates implements IGeoPoint {
 
     
     
-    public SrtmCoordinates(IGeoPoint p) {
+    public SrtmCoordinates(LatLongE6Interface p) {
         this(p.getLatitudeE6(), p.getLongitudeE6());
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/UTMCoordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/UTMCoordinates.java
index 50061a54..d19a09c1 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/UTMCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/UTMCoordinates.java
@@ -1,8 +1,6 @@
 package ch.bailu.aat.coordinates;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.GeoPoint;
 
 import java.util.Locale;
 
@@ -77,7 +75,7 @@ public class UTMCoordinates extends MeterCoordinates {
     }
     
     
-    public UTMCoordinates(IGeoPoint point) {
+    public UTMCoordinates(LatLongE6Interface point) {
         this(((double)point.getLatitudeE6())/1e6d, ((double)point.getLongitudeE6())/1e6d);
     }
 
@@ -114,14 +112,14 @@ public class UTMCoordinates extends MeterCoordinates {
     }
     
     
-    public GeoPoint toGeoPoint() {
-        return toGeoPoint(easting, northing, ezone, south);
+    public LatLongE6 toLatLongE6() {
+        return new LatLongE6(toLatLong());
     }
 
     @Override
     public LatLong toLatLong() {
-        GeoPoint point = toGeoPoint();
-        return new LatLong(point.getLatitudeE6()/1e6d, point.getLongitudeE6()/1e6d);
+        return toLatLongE6(easting, northing, ezone, south);
+
     }
 
 
@@ -350,7 +348,7 @@ public class UTMCoordinates extends MeterCoordinates {
     */
     
     
-    private static GeoPoint MapXYToLatLon (double e, double n, double lambda0)
+    private static LatLong MapXYToLatLon (double e, double n, double lambda0)
     {
         double phif, Nf, Nfpow, nuf2, ep2, tf, tf2, tf4, cf;
         double x1frac, x2frac, x3frac, x4frac, x5frac, x6frac, x7frac, x8frac;
@@ -418,7 +416,7 @@ public class UTMCoordinates extends MeterCoordinates {
         
         /* Calculate latitude */
         
-        return new GeoPoint( Math.toDegrees( phif + x2frac * x2poly * (e * e)
+        return new LatLong( Math.toDegrees( phif + x2frac * x2poly * (e * e)
         + x4frac * x4poly * Math.pow (e, 4.0)
         + x6frac * x6poly * Math.pow (e, 6.0)
         + x8frac * x8poly * Math.pow (e, 8.0) ),
@@ -475,7 +473,7 @@ public class UTMCoordinates extends MeterCoordinates {
     *
     */
     
-    private static GeoPoint toGeoPoint (double easting, double northing, int zone, boolean southhemi)
+    private static LatLong toLatLongE6(double easting, double northing, int zone, boolean southhemi)
     {
         double cmeridian;
         
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/WGS84Sexagesimal.java b/app/src/main/java/ch/bailu/aat/coordinates/WGS84Sexagesimal.java
index 1e323497..508ac7cb 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/WGS84Sexagesimal.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/WGS84Sexagesimal.java
@@ -1,7 +1,5 @@
 package ch.bailu.aat.coordinates;
 
-import org.osmdroid.api.IGeoPoint;
-
 import java.util.Locale;
 
 public class WGS84Sexagesimal extends Coordinates {
@@ -49,9 +47,9 @@ public class WGS84Sexagesimal extends Coordinates {
         longitude=new Sexagesimal(lo);
     }
     
-    public WGS84Sexagesimal(IGeoPoint p) {
-        this(((double)p.getLatitudeE6())/1e6d, ((double)p.getLongitudeE6())/1e6d);
-    }
+//    public WGS84Sexagesimal(IGeoPoint p) {
+//        this(((double)p.getLatitudeE6())/1e6d, ((double)p.getLongitudeE6())/1e6d);
+//    }
 
     public Sexagesimal getLongitude() {
         return longitude;
diff --git a/app/src/main/java/ch/bailu/aat/description/BearingDescription.java b/app/src/main/java/ch/bailu/aat/description/BearingDescription.java
index 11ffdaed..43bff861 100644
--- a/app/src/main/java/ch/bailu/aat/description/BearingDescription.java
+++ b/app/src/main/java/ch/bailu/aat/description/BearingDescription.java
@@ -30,7 +30,7 @@ public class BearingDescription extends DoubleDescription {
 
     @Override
     public void onContentUpdated(int iid, GpxInformation info) {
-        setCache(info.getBearing());
+//        setCache(info.getBearing());
     }
 
    
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java b/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
index 9f426d9a..6a0adeb3 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxBigDelta.java
@@ -148,10 +148,10 @@ public class GpxBigDelta implements GpxBigDeltaInterface {
         return endTime;
     }
 
-    @Override
-    public double getBearing() {
-        return 0;
-    }
+//    @Override
+//    public double getBearing() {
+//        return 0;
+//    }
 
 
     public void setType(int t) {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxDataWrapper.java b/app/src/main/java/ch/bailu/aat/gpx/GpxDataWrapper.java
index 7b83c64d..7b2afbb2 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxDataWrapper.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxDataWrapper.java
@@ -104,10 +104,10 @@ public class GpxDataWrapper implements GpxDeltaPointInterface, GpxBigDeltaInterf
         return summary.getEndTime();
     }
 
-    @Override
-    public double getBearing() {
-        return 0;
-    }
+//    @Override
+//    public double getBearing() {
+//        return 0;
+//    }
 
     @Override
     public int getType() {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxDeltaHelper.java b/app/src/main/java/ch/bailu/aat/gpx/GpxDeltaHelper.java
index 2119fef2..7edfc5b6 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxDeltaHelper.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxDeltaHelper.java
@@ -1,8 +1,8 @@
 package ch.bailu.aat.gpx;
 
-import org.osmdroid.util.GeoPoint;
+import org.mapsforge.core.model.LatLong;
+import org.mapsforge.core.util.LatLongUtils;
 
-import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.gpx.interfaces.GpxDeltaPointInterface;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 
@@ -13,17 +13,23 @@ public class GpxDeltaHelper  {
 
     public static float getDistance(GpxPointInterface a, GpxPointInterface b) {
     	
-        return GeoPoint.distanceBetween(a.getLatitude(), a.getLongitude(), 
-                b.getLatitude(), b.getLongitude());
+        return getDistance(
+                new LatLong(a.getLatitude(), a.getLongitude()),
+                new LatLong(b.getLatitude(), b.getLongitude()));
 
         
     }
-    
-    public static double getBearing(GpxPointInterface a, GpxPointInterface b) {
-        GeoPoint p = new GeoPoint(a);
-        return p.bearingTo(b);
+
+
+    public static float getDistance(LatLong a, LatLong b) {
+        return (float) LatLongUtils.sphericalDistance(a, b);
     }
 
+//    public static double getBearing(GpxPointInterface a, GpxPointInterface b) {
+//        GeoPoint p = new GeoPoint(a);
+//        return p.bearingTo(b);
+//    }
+
     
     public static float getAcceleration(GpxDeltaPointInterface a, GpxDeltaPointInterface b) {
         float deltaSpeed=b.getSpeed()-a.getSpeed();
@@ -54,8 +60,8 @@ public class GpxDeltaHelper  {
         return deltaT / 1000f;
     }
 
-    public static BoundingBoxE6 getBoundingBoxE6(GpxPointInterface a, GpxPointInterface b) {
-        return new BoundingBoxE6(a, b);
-    }
+//    public static BoundingBoxE6 getBoundingBoxE6(GpxPointInterface a, GpxPointInterface b) {
+//        return new BoundingBoxE6(a, b);
+//    }
     
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java b/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
index cb7d8af2..b1f81d78 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxPoint.java
@@ -3,8 +3,8 @@ package ch.bailu.aat.gpx;
 import android.location.Location;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
 
+import ch.bailu.aat.coordinates.LatLongE6Interface;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 
 
@@ -44,7 +44,7 @@ public class GpxPoint implements GpxPointInterface {
         timestamp=time;
     }
 
-    public GpxPoint(IGeoPoint gp, int a, long time) {
+    public GpxPoint(LatLongE6Interface gp, int a, long time) {
         latitude = gp.getLatitudeE6();
         longitude = gp.getLongitudeE6();
         altitude = (short)a;
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxPointFirstNode.java b/app/src/main/java/ch/bailu/aat/gpx/GpxPointFirstNode.java
index 91275725..4c8960b7 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxPointFirstNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxPointFirstNode.java
@@ -33,8 +33,8 @@ public class GpxPointFirstNode extends GpxPointNode {
     }
 
 
-    @Override
-    public double getBearing() {
-        return 0;
-    }
+//    @Override
+//    public double getBearing() {
+//        return 0;
+//    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxPointLinkedNode.java b/app/src/main/java/ch/bailu/aat/gpx/GpxPointLinkedNode.java
index 2873b003..4c18c7d7 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxPointLinkedNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxPointLinkedNode.java
@@ -44,8 +44,8 @@ public class GpxPointLinkedNode extends GpxPointNode {
     }
 
 
-    @Override
-    public double getBearing() {
-        return GpxDeltaHelper.getBearing((GpxPointNode)getPrevious(), this);
-    }
+//    @Override
+//    public double getBearing() {
+//        return GpxDeltaHelper.getBearing((GpxPointNode)getPrevious(), this);
+//    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java b/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
index e83c38b5..48e4ee4e 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxSegmentNode.java
@@ -77,10 +77,10 @@ public class GpxSegmentNode extends SegmentNode implements GpxBigDeltaInterface
     }
 
 
-    @Override
-    public double getBearing() {
-        return 0;
-    }
+//    @Override
+//    public double getBearing() {
+//        return 0;
+//    }
 
 
 	@Override
diff --git a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxDeltaInterface.java b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxDeltaInterface.java
index d492335a..a9d78507 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxDeltaInterface.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxDeltaInterface.java
@@ -3,7 +3,7 @@ package ch.bailu.aat.gpx.interfaces;
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 
 public interface GpxDeltaInterface {
-    double getBearing();
+//    double getBearing();
     float getDistance();
     float getSpeed();
     float getAcceleration();
diff --git a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
index 578c86c7..6c5ec609 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/interfaces/GpxPointInterface.java
@@ -1,10 +1,9 @@
 package ch.bailu.aat.gpx.interfaces;
 
-import org.osmdroid.api.IGeoPoint;
-
+import ch.bailu.aat.coordinates.LatLongE6Interface;
 import ch.bailu.aat.gpx.GpxAttributes;
 
-public interface GpxPointInterface extends IGeoPoint {
+public interface GpxPointInterface extends LatLongE6Interface {
     short getAltitude();
     double getLongitude();
     double getLatitude();
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmNode.java b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmNode.java
index 98d39322..7f3f95dd 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmNode.java
@@ -1,9 +1,8 @@
 package ch.bailu.aat.gpx.parser;
 
-import org.osmdroid.util.GeoPoint;
-
 import java.io.IOException;
 
+import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.gpx.parser.XmlParser.ParserIO;
 
 public class StateOsmNode extends StateOsmPoint {
@@ -64,7 +63,7 @@ public class StateOsmNode extends StateOsmPoint {
 
     private void rememberNode(ParserIO io) throws IOException {
         io.nodeMap.put(io.id.getInt(), 
-                new GeoPoint(io.latitude.getInt(), io.longitude.getInt()));
+                new LatLongE6(io.latitude.getInt(), io.longitude.getInt()));
     }
 
     
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmRelation.java b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmRelation.java
index c128990f..49f3c295 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmRelation.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/StateOsmRelation.java
@@ -1,11 +1,9 @@
 package ch.bailu.aat.gpx.parser;
 
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
-
 import java.io.IOException;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
+import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.gpx.parser.XmlParser.ParserIO;
 
 public class StateOsmRelation extends StateOsmPoint {
@@ -59,9 +57,9 @@ public class StateOsmRelation extends StateOsmPoint {
     }
 
     private void rememberRelation(ParserIO io) throws IOException {
-        BoundingBoxOsm b = bounding.toBoundingBoxE6();
+        BoundingBoxE6 b = bounding;
 
-        GeoPoint c = b.getCenter();
+        LatLongE6 c = b.getCenter();
 
         io.latitude.setInt(c.getLatitudeE6());
         io.longitude.setInt(c.getLongitudeE6());
@@ -76,7 +74,7 @@ public class StateOsmRelation extends StateOsmPoint {
         io.stream.to('=');
         io.stream.to('"');
         io.id.scan();
-        GeoPoint point = io.nodeMap.get(io.id.getInt());
+        LatLongE6 point = io.nodeMap.get(io.id.getInt());
 
         if (point != null) {
             bounding.add(point);
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
index 8a774928..387adf40 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
@@ -2,12 +2,11 @@ package ch.bailu.aat.gpx.parser;
 
 import android.util.SparseArray;
 
-import org.osmdroid.util.GeoPoint;
-
 import java.io.Closeable;
 import java.io.IOException;
 import java.util.ArrayList;
 
+import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.gpx.GpxAttributes;
 import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
@@ -34,7 +33,7 @@ public class XmlParser implements Closeable, GpxPointInterface {
         trackParsed	  = OnParsedInterface.NULL_ONPARSED, 
         parsed        = OnParsedInterface.NULL_ONPARSED;
 
-        public final SparseArray<GeoPoint> nodeMap = new SparseArray<>(50);
+        public final SparseArray<LatLongE6> nodeMap = new SparseArray<>(50);
         public final ArrayList<GpxAttributesStatic.Tag> tagList = new ArrayList<>();
         
         private ParserIO(AbsAccess file) throws IOException {
diff --git a/app/src/main/java/ch/bailu/aat/map/MapDistances.java b/app/src/main/java/ch/bailu/aat/map/MapDistances.java
index a6ba5e65..9fb27478 100644
--- a/app/src/main/java/ch/bailu/aat/map/MapDistances.java
+++ b/app/src/main/java/ch/bailu/aat/map/MapDistances.java
@@ -1,13 +1,9 @@
 package ch.bailu.aat.map;
 
-import android.graphics.Rect;
-
 import org.mapsforge.core.model.BoundingBox;
 import org.mapsforge.core.model.Dimension;
 import org.mapsforge.core.model.LatLong;
 import org.mapsforge.core.util.LatLongUtils;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
 
 public class MapDistances {
 
@@ -17,32 +13,32 @@ public class MapDistances {
     private float shortDistance;
 
 
-    private final GeoPoint
-            nw=new GeoPoint(0,0),
-            sw=new GeoPoint(0,0),
-            ne=new GeoPoint(0,0);
-
-    public void init(BoundingBoxOsm boundingBoxOsm, Rect screen) {
-        float meter, pixel;
-
-        nw.setCoordsE6(boundingBoxOsm.getLatNorthE6(), boundingBoxOsm.getLonWestE6());
-
-        if (screen.width() < screen.height()) {
-            ne.setCoordsE6(boundingBoxOsm.getLatNorthE6(), boundingBoxOsm.getLonEastE6());
-            meter = nw.distanceTo(ne);
-            pixel = screen.width();
-
-        } else {
-            sw.setCoordsE6(boundingBoxOsm.getLatSouthE6(), boundingBoxOsm.getLonWestE6());
-            meter = nw.distanceTo(sw);
-            pixel = screen.height();
-        }
-
-        meterPerOnePixel = meter / pixel;
-        pixelPerOneMeter = pixel / meter;
-
-        shortDistance = meter;
-    }
+//    private final GeoPoint
+//            nw=new GeoPoint(0,0),
+//            sw=new GeoPoint(0,0),
+//            ne=new GeoPoint(0,0);
+//
+//    public void init(BoundingBoxOsm boundingBoxOsm, Rect screen) {
+//        float meter, pixel;
+//
+//        nw.setCoordsE6(boundingBoxOsm.getLatNorthE6(), boundingBoxOsm.getLonWestE6());
+//
+//        if (screen.width() < screen.height()) {
+//            ne.setCoordsE6(boundingBoxOsm.getLatNorthE6(), boundingBoxOsm.getLonEastE6());
+//            meter = nw.distanceTo(ne);
+//            pixel = screen.width();
+//
+//        } else {
+//            sw.setCoordsE6(boundingBoxOsm.getLatSouthE6(), boundingBoxOsm.getLonWestE6());
+//            meter = nw.distanceTo(sw);
+//            pixel = screen.height();
+//        }
+//
+//        meterPerOnePixel = meter / pixel;
+//        pixelPerOneMeter = pixel / meter;
+//
+//        shortDistance = meter;
+//    }
 
     public void init(BoundingBox box, Dimension dim) {
         if (dim.height < dim.width) {
diff --git a/app/src/main/java/ch/bailu/aat/map/MapFactory.java b/app/src/main/java/ch/bailu/aat/map/MapFactory.java
index b113cf2a..6db8acfd 100644
--- a/app/src/main/java/ch/bailu/aat/map/MapFactory.java
+++ b/app/src/main/java/ch/bailu/aat/map/MapFactory.java
@@ -13,7 +13,6 @@ import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
 import ch.bailu.aat.map.layer.gpx.GpxOverlayListLayer;
 import ch.bailu.aat.map.layer.grid.GridDynLayer;
 import ch.bailu.aat.map.mapsforge.MapsForgeView;
-import ch.bailu.aat.map.osmdroid.OsmViewInteractive;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.views.ControlBar;
@@ -35,9 +34,9 @@ public class MapFactory {
         return new MapFactory(new MapsForgeView(sc, d, skey), d);
     }
 
-    public static MapFactory OSM(ServiceContext sc, AbsDispatcher d, String skey) {
-        return new MapFactory(new OsmViewInteractive(sc, d, skey), d);
-    }
+//    public static MapFactory OSM(ServiceContext sc, AbsDispatcher d, String skey) {
+//        return new MapFactory(new OsmViewInteractive(sc, d, skey), d);
+//    }
 
 
     public MapFactory(MapViewInterface map, final AbsDispatcher dispatcher) {
diff --git a/app/src/main/java/ch/bailu/aat/map/MapMetrics.java b/app/src/main/java/ch/bailu/aat/map/MapMetrics.java
index f9e7baaf..10d4ff10 100644
--- a/app/src/main/java/ch/bailu/aat/map/MapMetrics.java
+++ b/app/src/main/java/ch/bailu/aat/map/MapMetrics.java
@@ -4,9 +4,9 @@ import android.graphics.Rect;
 
 import org.mapsforge.core.model.BoundingBox;
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
+import ch.bailu.aat.coordinates.LatLongE6Interface;
 import ch.bailu.aat.util.graphic.Pixel;
 import ch.bailu.aat.util.ui.AppDensity;
 
@@ -28,9 +28,9 @@ public interface MapMetrics {
     Pixel getCenterPixel();
 
     boolean isVisible(BoundingBoxE6 box);
-    boolean isVisible(IGeoPoint point);
+    boolean isVisible(LatLongE6Interface point);
     Rect toMapPixels(BoundingBoxE6 box);
-    Pixel toPixel(IGeoPoint tp);
+    Pixel toPixel(LatLongE6Interface tp);
     Pixel toPixel(LatLong p);
     LatLong fromPixel(int x, int y);
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
index 9db9d4cd..284d00f6 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/CurrentLocationLayer.java
@@ -43,7 +43,7 @@ public class CurrentLocationLayer implements OnContentUpdatedInterface, MapLayer
 
     @Override
     public void onContentUpdated(int iid, GpxInformation info) {
-        center = new LatLongE6(info).toLatLong();
+        center = LatLongE6.toLatLong(info);
         accuracy=info.getAccuracy();
 
         if (mcontext.getMetrics().getBoundingBox().contains(center))
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
index 74ed7e8d..c50bec9b 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/MapPositionLayer.java
@@ -107,7 +107,7 @@ public class MapPositionLayer implements MapLayerInterface, OnContentUpdatedInte
 
     @Override
     public void onContentUpdated(int iid, GpxInformation info) {
-        gpsLocation = new LatLongE6(info).toLatLong();
+        gpsLocation = LatLongE6.toLatLong(info);
         refreshMap();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeMetrics.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeMetrics.java
index e61309e0..27877684 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeMetrics.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgeMetrics.java
@@ -10,13 +10,12 @@ import org.mapsforge.core.model.MapPosition;
 import org.mapsforge.core.util.MercatorProjection;
 import org.mapsforge.map.android.view.MapView;
 import org.mapsforge.map.util.MapPositionUtil;
-import org.osmdroid.api.IGeoPoint;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.coordinates.LatLongE6;
+import ch.bailu.aat.coordinates.LatLongE6Interface;
 import ch.bailu.aat.map.MapDistances;
 import ch.bailu.aat.map.MapMetrics;
-import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.graphic.Pixel;
 import ch.bailu.aat.util.ui.AppDensity;
 
@@ -106,7 +105,7 @@ public class MapsForgeMetrics implements MapMetrics {
         return BoundingBoxE6.doOverlap(box, new BoundingBoxE6(bounding));
     }
     @Override
-    public boolean isVisible(IGeoPoint point) {
+    public boolean isVisible(LatLongE6Interface point) {
         return bounding.contains(
                 LatLongE6.toD(point.getLatitudeE6()),
                 LatLongE6.toD(point.getLongitudeE6()));
@@ -125,8 +124,8 @@ public class MapsForgeMetrics implements MapMetrics {
         return rect;
     }
     @Override
-    public Pixel toPixel(IGeoPoint tp) {
-        return toPixel(new LatLongE6(tp).toLatLong());
+    public Pixel toPixel(LatLongE6Interface tp) {
+        return toPixel(LatLongE6.toLatLong(tp));
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmContext.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmContext.java
index 8a3cc3af..bae0b8fe 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmContext.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmContext.java
@@ -1,84 +1,84 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.content.Context;
-import android.graphics.Canvas;
-
-import org.osmdroid.views.MapView;
-import org.osmdroid.views.overlay.Overlay;
-
-import ch.bailu.aat.map.MapContext;
-import ch.bailu.aat.map.MapDraw;
-import ch.bailu.aat.map.MapMetrics;
-import ch.bailu.aat.map.MapViewInterface;
-import ch.bailu.aat.map.TwoNodes;
-import ch.bailu.aat.map.AndroidDraw;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.ui.AppDensity;
-
-public class OsmContext extends Overlay implements MapContext  {
-
-    private final OsmMetrics metrics;
-    private final TwoNodes nodes;
-    private final AndroidDraw draw;
-
-    private final ServiceContext scontext;
-
-    private final MapViewInterface mapView;
-    private final String skey;
-
-    public OsmContext(OsmViewAbstract v, ServiceContext sc, AppDensity res, String s) {
-        scontext = sc;
-        metrics =new OsmMetrics(res, v.map);
-        nodes=new TwoNodes(metrics);
-        draw =new AndroidDraw(res, sc.getContext().getResources());
-        mapView = v;
-        skey=s;
-    }
-
-    public void init(Canvas c, MapView map) {
-        metrics.init(map);
-        draw.init(c, metrics);
-    }
-
-    @Override
-    public MapMetrics getMetrics() {
-        return metrics;
-    }
-
-    @Override
-    public MapDraw draw() {
-        return draw;
-    }
-
-    @Override
-    public ServiceContext getSContext() {
-        return scontext;
-    }
-
-    @Override
-    public Context getContext() {
-        return scontext.getContext();
-    }
-
-    @Override
-    public String getSolidKey() {
-        return skey;
-    }
-
-    @Override
-    public TwoNodes getTwoNodes() {
-        return nodes;
-    }
-
-    @Override
-    public MapViewInterface getMapView() {
-        return mapView;
-    }
-
-
-
-    @Override
-    protected void draw(Canvas c, MapView osmv) {
-        init(c, osmv);
-    }
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.content.Context;
+//import android.graphics.Canvas;
+//
+//import org.osmdroid.views.MapView;
+//import org.osmdroid.views.overlay.Overlay;
+//
+//import ch.bailu.aat.map.MapContext;
+//import ch.bailu.aat.map.MapDraw;
+//import ch.bailu.aat.map.MapMetrics;
+//import ch.bailu.aat.map.MapViewInterface;
+//import ch.bailu.aat.map.TwoNodes;
+//import ch.bailu.aat.map.AndroidDraw;
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.util.ui.AppDensity;
+//
+//public class OsmContext extends Overlay implements MapContext  {
+//
+//    private final OsmMetrics metrics;
+//    private final TwoNodes nodes;
+//    private final AndroidDraw draw;
+//
+//    private final ServiceContext scontext;
+//
+//    private final MapViewInterface mapView;
+//    private final String skey;
+//
+//    public OsmContext(OsmViewAbstract v, ServiceContext sc, AppDensity res, String s) {
+//        scontext = sc;
+//        metrics =new OsmMetrics(res, v.map);
+//        nodes=new TwoNodes(metrics);
+//        draw =new AndroidDraw(res, sc.getContext().getResources());
+//        mapView = v;
+//        skey=s;
+//    }
+//
+//    public void init(Canvas c, MapView map) {
+//        metrics.init(map);
+//        draw.init(c, metrics);
+//    }
+//
+//    @Override
+//    public MapMetrics getMetrics() {
+//        return metrics;
+//    }
+//
+//    @Override
+//    public MapDraw draw() {
+//        return draw;
+//    }
+//
+//    @Override
+//    public ServiceContext getSContext() {
+//        return scontext;
+//    }
+//
+//    @Override
+//    public Context getContext() {
+//        return scontext.getContext();
+//    }
+//
+//    @Override
+//    public String getSolidKey() {
+//        return skey;
+//    }
+//
+//    @Override
+//    public TwoNodes getTwoNodes() {
+//        return nodes;
+//    }
+//
+//    @Override
+//    public MapViewInterface getMapView() {
+//        return mapView;
+//    }
+//
+//
+//
+//    @Override
+//    protected void draw(Canvas c, MapView osmv) {
+//        init(c, osmv);
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmMetrics.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmMetrics.java
index 33d4e5a4..65b1fef6 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmMetrics.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmMetrics.java
@@ -1,188 +1,188 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.graphics.Rect;
-
-import org.mapsforge.core.model.BoundingBox;
-import org.mapsforge.core.model.LatLong;
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
-import org.osmdroid.views.MapView;
-
-import ch.bailu.aat.coordinates.BoundingBoxE6;
-import ch.bailu.aat.coordinates.LatLongE6;
-import ch.bailu.aat.map.MapDistances;
-import ch.bailu.aat.map.MapMetrics;
-import ch.bailu.aat.util.graphic.Pixel;
-import ch.bailu.aat.util.ui.AppDensity;
-
-public class OsmMetrics implements MapMetrics {
-
-    private int zoom;
-    private final AppDensity density;
-    public final Rect screen = new Rect();
-    public final Pixel centerPixel = new Pixel();
-
-    private final Pixel cachedPixel = new Pixel();
-    private final Rect cachedRect=new Rect();
-    private final GeoPoint cachedPoint = new GeoPoint(0,0);
-
-    private MapView.Projection projection;
-    private BoundingBoxE6 boundingE6;
-    private BoundingBox bounding;
-
-    private final MapDistances distances = new MapDistances();
-
-
-
-    public OsmMetrics(AppDensity d, MapView map) {
-        density = d;
-        init(map);
-    }
-
-    public void init(MapView map) {
-        map.getScreenRect(screen);
-
-        zoom = map.getZoomLevel();
-        centerPixel.x=screen.centerX();
-        centerPixel.y=screen.centerY();
-
-        projection = map.getProjection();
-
-        final BoundingBoxOsm boundingBoxOsm = map.getBoundingBox();
-        boundingE6 = new BoundingBoxE6(boundingBoxOsm);
-        bounding = boundingE6.toBoundingBox();
-
-
-        distances.init(boundingBoxOsm, screen);
-
-    }
-
-
-
-    @Override
-    public AppDensity getDensity() {
-        return density;
-    }
-
-    @Override
-    public int getLeft() {
-        return screen.left;
-    }
-
-    @Override
-    public int getRight() {
-        return screen.right;
-    }
-
-    @Override
-    public int getTop() {
-        return screen.top;
-    }
-
-    @Override
-    public int getBottom() {
-        return screen.bottom;
-    }
-
-    @Override
-    public int getWidth() {
-        return screen.width();
-    }
-
-    @Override
-    public int getHeight() {
-        return screen.height();
-    }
-
-
-    @Override
-    public float pixelToDistance(int pixel) {
-        return distances.toDistance(pixel);
-    }
-
-
-    @Override
-    public int distanceToPixel(float meter) {
-        return (int)distances.toPixel(meter);
-    }
-
-
-    @Override
-    public int getShortDistance() {
-        return (int)distances.getShortDistance();
-    }
-
-
-    @Override
-    public Pixel getCenterPixel() {
-        return centerPixel;
-    }
-
-
-
-    @Override
-    public Pixel toPixel(IGeoPoint tp) {
-        projection.toMapPixels(tp, cachedPixel);
-        return cachedPixel;
-    }
-
-    @Override
-    public Pixel toPixel(LatLong p) {
-        return toPixel(new GeoPoint(p.getLatitudeE6(), p.getLongitudeE6()));
-
-    }
-
-    @Override
-    public LatLong fromPixel(int x, int y) {
-        return new LatLongE6(fromPixels(x,y)).toLatLong();
-    }
-
-
-    private IGeoPoint fromPixels(int x, int y) {
-        return projection.fromPixels(x, y);
-    }
-
-
-    @Override
-    public boolean isVisible(IGeoPoint point) {
-        return boundingE6.contains(point);
-    }
-
-
-    @Override
-    public boolean isVisible(BoundingBoxE6 b) {
-        return BoundingBoxE6.doOverlap(b, boundingE6);
-    }
-
-
-    @Override
-    public Rect toMapPixels(BoundingBoxE6 b) {
-        cachedPoint.setCoordsE6(b.getLatNorthE6(), b.getLonWestE6());
-
-        projection.toMapPixels(cachedPoint, cachedPixel);
-        cachedRect.left = cachedPixel.x;
-        cachedRect.top = cachedPixel.y;
-
-
-        cachedPoint.setCoordsE6(b.getLatSouthE6(), b.getLonEastE6());
-
-        projection.toMapPixels(cachedPoint, cachedPixel);
-        cachedRect.right = cachedPixel.x;
-        cachedRect.bottom = cachedPixel.y;
-
-        return cachedRect;
-    }
-
-
-    @Override
-    public BoundingBox getBoundingBox() {
-        return bounding;
-    }
-
-    @Override
-    public int getZoomLevel() {
-        return zoom;
-    }
-
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.graphics.Rect;
+//
+//import org.mapsforge.core.model.BoundingBox;
+//import org.mapsforge.core.model.LatLong;
+//import org.osmdroid.api.IGeoPoint;
+//import org.osmdroid.util.BoundingBoxOsm;
+//import org.osmdroid.util.GeoPoint;
+//import org.osmdroid.views.MapView;
+//
+//import ch.bailu.aat.coordinates.BoundingBoxE6;
+//import ch.bailu.aat.coordinates.LatLongE6;
+//import ch.bailu.aat.map.MapDistances;
+//import ch.bailu.aat.map.MapMetrics;
+//import ch.bailu.aat.util.graphic.Pixel;
+//import ch.bailu.aat.util.ui.AppDensity;
+//
+//public class OsmMetrics implements MapMetrics {
+//
+//    private int zoom;
+//    private final AppDensity density;
+//    public final Rect screen = new Rect();
+//    public final Pixel centerPixel = new Pixel();
+//
+//    private final Pixel cachedPixel = new Pixel();
+//    private final Rect cachedRect=new Rect();
+//    private final GeoPoint cachedPoint = new GeoPoint(0,0);
+//
+//    private MapView.Projection projection;
+//    private BoundingBoxE6 boundingE6;
+//    private BoundingBox bounding;
+//
+//    private final MapDistances distances = new MapDistances();
+//
+//
+//
+//    public OsmMetrics(AppDensity d, MapView map) {
+//        density = d;
+//        init(map);
+//    }
+//
+//    public void init(MapView map) {
+//        map.getScreenRect(screen);
+//
+//        zoom = map.getZoomLevel();
+//        centerPixel.x=screen.centerX();
+//        centerPixel.y=screen.centerY();
+//
+//        projection = map.getProjection();
+//
+//        final BoundingBoxOsm boundingBoxOsm = map.getBoundingBox();
+//        boundingE6 = new BoundingBoxE6(boundingBoxOsm);
+//        bounding = boundingE6.toBoundingBox();
+//
+//
+//        distances.init(boundingBoxOsm, screen);
+//
+//    }
+//
+//
+//
+//    @Override
+//    public AppDensity getDensity() {
+//        return density;
+//    }
+//
+//    @Override
+//    public int getLeft() {
+//        return screen.left;
+//    }
+//
+//    @Override
+//    public int getRight() {
+//        return screen.right;
+//    }
+//
+//    @Override
+//    public int getTop() {
+//        return screen.top;
+//    }
+//
+//    @Override
+//    public int getBottom() {
+//        return screen.bottom;
+//    }
+//
+//    @Override
+//    public int getWidth() {
+//        return screen.width();
+//    }
+//
+//    @Override
+//    public int getHeight() {
+//        return screen.height();
+//    }
+//
+//
+//    @Override
+//    public float pixelToDistance(int pixel) {
+//        return distances.toDistance(pixel);
+//    }
+//
+//
+//    @Override
+//    public int distanceToPixel(float meter) {
+//        return (int)distances.toPixel(meter);
+//    }
+//
+//
+//    @Override
+//    public int getShortDistance() {
+//        return (int)distances.getShortDistance();
+//    }
+//
+//
+//    @Override
+//    public Pixel getCenterPixel() {
+//        return centerPixel;
+//    }
+//
+//
+//
+//    @Override
+//    public Pixel toPixel(IGeoPoint tp) {
+//        projection.toMapPixels(tp, cachedPixel);
+//        return cachedPixel;
+//    }
+//
+//    @Override
+//    public Pixel toPixel(LatLong p) {
+//        return toPixel(new GeoPoint(p.getLatitudeE6(), p.getLongitudeE6()));
+//
+//    }
+//
+//    @Override
+//    public LatLong fromPixel(int x, int y) {
+//        return new LatLongE6(fromPixels(x,y)).toLatLong();
+//    }
+//
+//
+//    private IGeoPoint fromPixels(int x, int y) {
+//        return projection.fromPixels(x, y);
+//    }
+//
+//
+//    @Override
+//    public boolean isVisible(IGeoPoint point) {
+//        return boundingE6.contains(point);
+//    }
+//
+//
+//    @Override
+//    public boolean isVisible(BoundingBoxE6 b) {
+//        return BoundingBoxE6.doOverlap(b, boundingE6);
+//    }
+//
+//
+//    @Override
+//    public Rect toMapPixels(BoundingBoxE6 b) {
+//        cachedPoint.setCoordsE6(b.getLatNorthE6(), b.getLonWestE6());
+//
+//        projection.toMapPixels(cachedPoint, cachedPixel);
+//        cachedRect.left = cachedPixel.x;
+//        cachedRect.top = cachedPixel.y;
+//
+//
+//        cachedPoint.setCoordsE6(b.getLatSouthE6(), b.getLonEastE6());
+//
+//        projection.toMapPixels(cachedPoint, cachedPixel);
+//        cachedRect.right = cachedPixel.x;
+//        cachedRect.bottom = cachedPixel.y;
+//
+//        return cachedRect;
+//    }
+//
+//
+//    @Override
+//    public BoundingBox getBoundingBox() {
+//        return bounding;
+//    }
+//
+//    @Override
+//    public int getZoomLevel() {
+//        return zoom;
+//    }
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmPreviewGenerator.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmPreviewGenerator.java
index b2068c4a..839f232d 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmPreviewGenerator.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmPreviewGenerator.java
@@ -1,84 +1,84 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.graphics.Bitmap;
-
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileOutputStream;
-
-import ch.bailu.aat.gpx.GpxFileWrapper;
-import ch.bailu.aat.gpx.GpxList;
-import ch.bailu.aat.gpx.InfoID;
-import ch.bailu.aat.map.MapDensity;
-import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
-import ch.bailu.aat.map.tile.TileProviderPreview;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.ui.AppLog;
-
-public class OsmPreviewGenerator implements Closeable {
-    public static final int BITMAP_SIZE=128;
-
-
-    private final OsmViewStatic map;
-    private final ServiceContext serviceContext;
-    
-    private final TileProviderPreview tileProvider;
-    
-    private final File imageFile;
-
-    
-    public OsmPreviewGenerator(ServiceContext sc, GpxList gpxList, File o)  {
-        serviceContext=sc;
-        imageFile=o;
-        tileProvider = new TileProviderPreview(sc);
-
-
-
-        map = new OsmViewStatic(serviceContext, tileProvider, new MapDensity());
-        map.setDrawingCacheEnabled(true);
-        
-        GpxDynLayer overlay = new GpxDynLayer(map.getMContext(), InfoID.FILEVIEW);
-        map.add(overlay);
-
-        map.layout(0, 0, BITMAP_SIZE, BITMAP_SIZE);
-
-        overlay.onContentUpdated(InfoID.FILEVIEW, new GpxFileWrapper(o,gpxList));
-        map.frameBounding(gpxList.getDelta().getBoundingBox());
-        map.getDrawingCache(false);
-    }
-
-
-
-    public void generateBitmapFile() {
-        Bitmap bitmap=generateBitmap();
-        try {
-            final FileOutputStream outStream = new FileOutputStream(imageFile);
-            bitmap.compress(Bitmap.CompressFormat.PNG, 90, outStream);
-            outStream.close();
-            AppBroadcaster.broadcast(serviceContext.getContext(), 
-                    AppBroadcaster.FILE_CHANGED_ONDISK, 
-                    imageFile.getAbsolutePath(), 
-                    getClass().getName());
-            
-        } catch (Exception e) {
-            AppLog.e(serviceContext.getContext(), e);
-        }
-    }
-
-    
-    private Bitmap generateBitmap() {
-        map.invalidate();
-        return map.getDrawingCache(false);
-    }
-
-    public boolean isReady() {
-        return tileProvider.isReady();
-    }
-
-
-    @Override
-    public void close() {
-        tileProvider.close();
-    }
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.graphics.Bitmap;
+//
+//import java.io.Closeable;
+//import java.io.File;
+//import java.io.FileOutputStream;
+//
+//import ch.bailu.aat.gpx.GpxFileWrapper;
+//import ch.bailu.aat.gpx.GpxList;
+//import ch.bailu.aat.gpx.InfoID;
+//import ch.bailu.aat.map.MapDensity;
+//import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
+//import ch.bailu.aat.map.tile.TileProviderPreview;
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.util.AppBroadcaster;
+//import ch.bailu.aat.util.ui.AppLog;
+//
+//public class OsmPreviewGenerator implements Closeable {
+//    public static final int BITMAP_SIZE=128;
+//
+//
+//    private final OsmViewStatic map;
+//    private final ServiceContext serviceContext;
+//
+//    private final TileProviderPreview tileProvider;
+//
+//    private final File imageFile;
+//
+//
+//    public OsmPreviewGenerator(ServiceContext sc, GpxList gpxList, File o)  {
+//        serviceContext=sc;
+//        imageFile=o;
+//        tileProvider = new TileProviderPreview(sc);
+//
+//
+//
+//        map = new OsmViewStatic(serviceContext, tileProvider, new MapDensity());
+//        map.setDrawingCacheEnabled(true);
+//
+//        GpxDynLayer overlay = new GpxDynLayer(map.getMContext(), InfoID.FILEVIEW);
+//        map.add(overlay);
+//
+//        map.layout(0, 0, BITMAP_SIZE, BITMAP_SIZE);
+//
+//        overlay.onContentUpdated(InfoID.FILEVIEW, new GpxFileWrapper(o,gpxList));
+//        map.frameBounding(gpxList.getDelta().getBoundingBox());
+//        map.getDrawingCache(false);
+//    }
+//
+//
+//
+//    public void generateBitmapFile() {
+//        Bitmap bitmap=generateBitmap();
+//        try {
+//            final FileOutputStream outStream = new FileOutputStream(imageFile);
+//            bitmap.compress(Bitmap.CompressFormat.PNG, 90, outStream);
+//            outStream.close();
+//            AppBroadcaster.broadcast(serviceContext.getContext(),
+//                    AppBroadcaster.FILE_CHANGED_ONDISK,
+//                    imageFile.getAbsolutePath(),
+//                    getClass().getName());
+//
+//        } catch (Exception e) {
+//            AppLog.e(serviceContext.getContext(), e);
+//        }
+//    }
+//
+//
+//    private Bitmap generateBitmap() {
+//        map.invalidate();
+//        return map.getDrawingCache(false);
+//    }
+//
+//    public boolean isReady() {
+//        return tileProvider.isReady();
+//    }
+//
+//
+//    @Override
+//    public void close() {
+//        tileProvider.close();
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProvider.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProvider.java
index 37e7911f..d1a92dcf 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProvider.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProvider.java
@@ -1,81 +1,81 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.graphics.drawable.Drawable;
-import android.os.Handler;
-
-import org.mapsforge.core.model.Tile;
-import org.mapsforge.map.model.common.Observer;
-import org.osmdroid.tileprovider.MapTile;
-
-import ch.bailu.aat.map.tile.TileProviderInterface;
-
-public class OsmTileProvider extends OsmTileProviderAbstract implements Observer {
-
-    private final TileProviderInterface tileProvider;
-
-    private Handler handler = new Handler();
-
-    private final int tileSize;
-
-
-    public OsmTileProvider(TileProviderInterface p, int tSize) {
-        tileProvider = p;
-        tileSize = tSize;
-    }
-
-
-    @Override
-    public void reDownloadTiles() {
-        tileProvider.reDownloadTiles();
-    }
-
-    @Override
-    public int getMinimumZoomLevel() {
-        return tileProvider.getMinimumZoomLevel();
-    }
-
-    @Override
-    public int getMaximumZoomLevel() {
-        return tileProvider.getMaximumZoomLevel();
-    }
-
-    @Override
-    public Drawable getMapTile(MapTile pTile) {
-        return tileProvider.getDrawable(convert(pTile, tileSize));
-    }
-
-    @Override
-    public void setTileRequestCompleteHandler(Handler h) {
-        handler = h;
-    }
-
-    @Override
-    public void ensureCapacity(int numNeeded) {
-        tileProvider.setCapacity(numNeeded);
-    }
-
-    @Override
-    public void onAttached() {
-        tileProvider.onAttached();
-        tileProvider.addObserver(this);
-    }
-
-    @Override
-    public void onDetached() {
-        tileProvider.onDetached();
-        tileProvider.removeObserver(this);
-    }
-
-
-
-    @Override
-    public void onChange() {
-        handler.sendEmptyMessage(MapTile.MAPTILE_SUCCESS_ID);
-    }
-
-
-    public static Tile convert(MapTile t, int tileSize) {
-        return new Tile(t.getX(), t.getY(), (byte)t.getZoomLevel(), tileSize);
-    }
-
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.graphics.drawable.Drawable;
+//import android.os.Handler;
+//
+//import org.mapsforge.core.model.Tile;
+//import org.mapsforge.map.model.common.Observer;
+//import org.osmdroid.tileprovider.MapTile;
+//
+//import ch.bailu.aat.map.tile.TileProviderInterface;
+//
+//public class OsmTileProvider extends OsmTileProviderAbstract implements Observer {
+//
+//    private final TileProviderInterface tileProvider;
+//
+//    private Handler handler = new Handler();
+//
+//    private final int tileSize;
+//
+//
+//    public OsmTileProvider(TileProviderInterface p, int tSize) {
+//        tileProvider = p;
+//        tileSize = tSize;
+//    }
+//
+//
+//    @Override
+//    public void reDownloadTiles() {
+//        tileProvider.reDownloadTiles();
+//    }
+//
+//    @Override
+//    public int getMinimumZoomLevel() {
+//        return tileProvider.getMinimumZoomLevel();
+//    }
+//
+//    @Override
+//    public int getMaximumZoomLevel() {
+//        return tileProvider.getMaximumZoomLevel();
+//    }
+//
+//    @Override
+//    public Drawable getMapTile(MapTile pTile) {
+//        return tileProvider.getDrawable(convert(pTile, tileSize));
+//    }
+//
+//    @Override
+//    public void setTileRequestCompleteHandler(Handler h) {
+//        handler = h;
+//    }
+//
+//    @Override
+//    public void ensureCapacity(int numNeeded) {
+//        tileProvider.setCapacity(numNeeded);
+//    }
+//
+//    @Override
+//    public void onAttached() {
+//        tileProvider.onAttached();
+//        tileProvider.addObserver(this);
+//    }
+//
+//    @Override
+//    public void onDetached() {
+//        tileProvider.onDetached();
+//        tileProvider.removeObserver(this);
+//    }
+//
+//
+//
+//    @Override
+//    public void onChange() {
+//        handler.sendEmptyMessage(MapTile.MAPTILE_SUCCESS_ID);
+//    }
+//
+//
+//    public static Tile convert(MapTile t, int tileSize) {
+//        return new Tile(t.getX(), t.getY(), (byte)t.getZoomLevel(), tileSize);
+//    }
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProviderAbstract.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProviderAbstract.java
index 47244718..01234322 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProviderAbstract.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmTileProviderAbstract.java
@@ -1,53 +1,53 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.graphics.drawable.Drawable;
-import android.os.Handler;
-
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.constants.OpenStreetMapTileProviderConstants;
-import org.osmdroid.tileprovider.tilesource.ITileSource;
-
-import ch.bailu.aat.map.Attachable;
-
-
-public abstract class OsmTileProviderAbstract implements OpenStreetMapTileProviderConstants, Attachable {
-
-    /** Osmdroid compability **/
-    public ITileSource getTileSource() {
-        return null;
-    }
-
-    /** Osmdroid compability **/
-    public void setTileSource(ITileSource s) {}
-
-    public void attach() {
-        this.onAttached();
-    }
-
-    public void detach() {
-        this.onDetached();
-    }
-    
-    
-    public abstract void reDownloadTiles();
-    public abstract int  getMinimumZoomLevel();
-    public abstract int getMaximumZoomLevel();
-    public abstract Drawable getMapTile(MapTile pTile);
-    public abstract void  setTileRequestCompleteHandler(Handler handler);
-
-
-    private long time;
-
-    public void setStartTime() {
-        time = System.currentTimeMillis();
-    }
-
-    public long getStartTime() {
-        return time;
-    }
-
-
-    public abstract void ensureCapacity(int numNeeded);
-
-
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.graphics.drawable.Drawable;
+//import android.os.Handler;
+//
+//import org.osmdroid.tileprovider.MapTile;
+//import org.osmdroid.tileprovider.constants.OpenStreetMapTileProviderConstants;
+//import org.osmdroid.tileprovider.tilesource.ITileSource;
+//
+//import ch.bailu.aat.map.Attachable;
+//
+//
+//public abstract class OsmTileProviderAbstract implements OpenStreetMapTileProviderConstants, Attachable {
+//
+//    /** Osmdroid compability **/
+//    public ITileSource getTileSource() {
+//        return null;
+//    }
+//
+//    /** Osmdroid compability **/
+//    public void setTileSource(ITileSource s) {}
+//
+//    public void attach() {
+//        this.onAttached();
+//    }
+//
+//    public void detach() {
+//        this.onDetached();
+//    }
+//
+//
+//    public abstract void reDownloadTiles();
+//    public abstract int  getMinimumZoomLevel();
+//    public abstract int getMaximumZoomLevel();
+//    public abstract Drawable getMapTile(MapTile pTile);
+//    public abstract void  setTileRequestCompleteHandler(Handler handler);
+//
+//
+//    private long time;
+//
+//    public void setStartTime() {
+//        time = System.currentTimeMillis();
+//    }
+//
+//    public long getStartTime() {
+//        return time;
+//    }
+//
+//
+//    public abstract void ensureCapacity(int numNeeded);
+//
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewAbstract.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewAbstract.java
index c8136e6e..7fc38b8b 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewAbstract.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewAbstract.java
@@ -1,168 +1,168 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.content.SharedPreferences;
-import android.view.View;
-import android.view.ViewGroup;
-
-import org.mapsforge.core.model.LatLong;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
-import org.osmdroid.views.MapView;
-
-import java.util.ArrayList;
-
-import ch.bailu.aat.coordinates.BoundingBoxE6;
-import ch.bailu.aat.map.MapContext;
-import ch.bailu.aat.map.MapDensity;
-import ch.bailu.aat.map.MapViewInterface;
-import ch.bailu.aat.map.layer.MapLayerInterface;
-import ch.bailu.aat.services.ServiceContext;
-
-public class OsmViewAbstract extends ViewGroup implements MapViewInterface, SharedPreferences.OnSharedPreferenceChangeListener {
-
-    public final MapView map;
-    private final ArrayList<MapLayerInterface> overlays = new ArrayList(10);
-
-    private final OsmContext mcontext;
-    private final OsmTileProviderAbstract tileProvider;
-
-    private BoundingBoxE6 pendingFrameBounding=null;
-
-
-
-    public OsmViewAbstract(ServiceContext sc, OsmTileProviderAbstract provider, MapDensity r, String skey) {
-        super(sc.getContext());
-
-        tileProvider = provider;
-        map = new MapView(sc.getContext(), r.getTileSize(), tileProvider);
-        addView(map);
-
-        mcontext = new OsmContext(this, sc, r, skey);
-        map.getOverlayManager().add(mcontext);
-    }
-
-
-
-    @Override
-    public void zoomOut() {
-        map.getController().zoomOut();
-    }
-
-    @Override
-    public void zoomIn() {
-        map.getController().zoomIn();
-    }
-
-    @Override
-    public void requestRedraw() {
-        map.invalidate();
-    }
-
-    @Override
-    public void add(MapLayerInterface l) {
-        map.getOverlayManager().add(new OverlayWrapper(l, mcontext));
-        overlays.add(l);
-
-    }
-
-    @Override
-    public MapContext getMContext() {
-        return mcontext;
-    }
-
-    @Override
-    public void setZoomLevel(byte z) {
-        map.getController().setZoom(z);
-    }
-
-    @Override
-    public void setCenter(LatLong l) {
-        map.getController().setCenter(new GeoPoint(l.getLatitude(), l.getLongitude()));
-    }
-
-    @Override
-    public View toView() {
-        return this;
-    }
-
-    @Override
-    public void reDownloadTiles() {
-        tileProvider.reDownloadTiles();
-    }
-
-    @Override
-    public void close() {
-
-    }
-
-
-    @Override
-    public void frameBounding(BoundingBoxE6 boundingBox) {
-        if (this.getWidth()==0 || this.getHeight()==0) {
-            pendingFrameBounding=boundingBox;
-        } else {
-            BoundingBoxOsm bounding = boundingBox.toBoundingBoxE6();
-            frameBoundingE6(bounding);
-        }
-    }
-
-
-    private void frameBoundingE6(BoundingBoxOsm bounding) {
-        if (bounding.getDiagonalLengthInMeters()<5) {
-            map.getController().setZoom(14);
-        } else {
-            map.getController().zoomToSpan(bounding);
-        }
-        map.getController().setCenter(bounding.getCenter());
-        pendingFrameBounding=null;
-    }
-
-
-    @Override
-    protected void onMeasure(int wSpec, int hSpec) {
-        // As big as possible
-        wSpec  = View.MeasureSpec.makeMeasureSpec (View.MeasureSpec.getSize(wSpec),  View.MeasureSpec.EXACTLY);
-        hSpec  = View.MeasureSpec.makeMeasureSpec (View.MeasureSpec.getSize(hSpec),  View.MeasureSpec.EXACTLY);
-
-        map.measure(wSpec, hSpec);
-        setMeasuredDimension(map.getMeasuredWidth(), map.getMeasuredHeight());
-    }
-
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-
-        if (changed) {
-            map.layout(0, 0, r - l, b - t);
-            if (pendingFrameBounding != null)
-                frameBounding(pendingFrameBounding);
-        }
-
-        for (MapLayerInterface o: overlays) o.onLayout(changed, l, t, r, b);
-    }
-
-
-    @Override
-    public void onWindowFocusChanged(boolean hasWindowFocus) {
-        if (pendingFrameBounding != null)
-            frameBounding(pendingFrameBounding);
-    }
-
-
-
-    @Override
-    public void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        for (MapLayerInterface o: overlays) o.onAttached();
-    }
-
-    @Override
-    public void onDetachedFromWindow() {
-        for (MapLayerInterface o: overlays) o.onDetached();
-        super.onDetachedFromWindow();
-    }
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences p, String k) {
-        for (MapLayerInterface o: overlays) o.onSharedPreferenceChanged(p,k);
-    }
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.content.SharedPreferences;
+//import android.view.View;
+//import android.view.ViewGroup;
+//
+//import org.mapsforge.core.model.LatLong;
+//import org.osmdroid.util.BoundingBoxOsm;
+//import org.osmdroid.util.GeoPoint;
+//import org.osmdroid.views.MapView;
+//
+//import java.util.ArrayList;
+//
+//import ch.bailu.aat.coordinates.BoundingBoxE6;
+//import ch.bailu.aat.map.MapContext;
+//import ch.bailu.aat.map.MapDensity;
+//import ch.bailu.aat.map.MapViewInterface;
+//import ch.bailu.aat.map.layer.MapLayerInterface;
+//import ch.bailu.aat.services.ServiceContext;
+//
+//public class OsmViewAbstract extends ViewGroup implements MapViewInterface, SharedPreferences.OnSharedPreferenceChangeListener {
+//
+//    public final MapView map;
+//    private final ArrayList<MapLayerInterface> overlays = new ArrayList(10);
+//
+//    private final OsmContext mcontext;
+//    private final OsmTileProviderAbstract tileProvider;
+//
+//    private BoundingBoxE6 pendingFrameBounding=null;
+//
+//
+//
+//    public OsmViewAbstract(ServiceContext sc, OsmTileProviderAbstract provider, MapDensity r, String skey) {
+//        super(sc.getContext());
+//
+//        tileProvider = provider;
+//        map = new MapView(sc.getContext(), r.getTileSize(), tileProvider);
+//        addView(map);
+//
+//        mcontext = new OsmContext(this, sc, r, skey);
+//        map.getOverlayManager().add(mcontext);
+//    }
+//
+//
+//
+//    @Override
+//    public void zoomOut() {
+//        map.getController().zoomOut();
+//    }
+//
+//    @Override
+//    public void zoomIn() {
+//        map.getController().zoomIn();
+//    }
+//
+//    @Override
+//    public void requestRedraw() {
+//        map.invalidate();
+//    }
+//
+//    @Override
+//    public void add(MapLayerInterface l) {
+//        map.getOverlayManager().add(new OverlayWrapper(l, mcontext));
+//        overlays.add(l);
+//
+//    }
+//
+//    @Override
+//    public MapContext getMContext() {
+//        return mcontext;
+//    }
+//
+//    @Override
+//    public void setZoomLevel(byte z) {
+//        map.getController().setZoom(z);
+//    }
+//
+//    @Override
+//    public void setCenter(LatLong l) {
+//        map.getController().setCenter(new GeoPoint(l.getLatitude(), l.getLongitude()));
+//    }
+//
+//    @Override
+//    public View toView() {
+//        return this;
+//    }
+//
+//    @Override
+//    public void reDownloadTiles() {
+//        tileProvider.reDownloadTiles();
+//    }
+//
+//    @Override
+//    public void close() {
+//
+//    }
+//
+//
+//    @Override
+//    public void frameBounding(BoundingBoxE6 boundingBox) {
+//        if (this.getWidth()==0 || this.getHeight()==0) {
+//            pendingFrameBounding=boundingBox;
+//        } else {
+//            BoundingBoxOsm bounding = boundingBox.toBoundingBoxE6();
+//            frameBoundingE6(bounding);
+//        }
+//    }
+//
+//
+//    private void frameBoundingE6(BoundingBoxOsm bounding) {
+//        if (bounding.getDiagonalLengthInMeters()<5) {
+//            map.getController().setZoom(14);
+//        } else {
+//            map.getController().zoomToSpan(bounding);
+//        }
+//        map.getController().setCenter(bounding.getCenter());
+//        pendingFrameBounding=null;
+//    }
+//
+//
+//    @Override
+//    protected void onMeasure(int wSpec, int hSpec) {
+//        // As big as possible
+//        wSpec  = View.MeasureSpec.makeMeasureSpec (View.MeasureSpec.getSize(wSpec),  View.MeasureSpec.EXACTLY);
+//        hSpec  = View.MeasureSpec.makeMeasureSpec (View.MeasureSpec.getSize(hSpec),  View.MeasureSpec.EXACTLY);
+//
+//        map.measure(wSpec, hSpec);
+//        setMeasuredDimension(map.getMeasuredWidth(), map.getMeasuredHeight());
+//    }
+//
+//    @Override
+//    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+//
+//        if (changed) {
+//            map.layout(0, 0, r - l, b - t);
+//            if (pendingFrameBounding != null)
+//                frameBounding(pendingFrameBounding);
+//        }
+//
+//        for (MapLayerInterface o: overlays) o.onLayout(changed, l, t, r, b);
+//    }
+//
+//
+//    @Override
+//    public void onWindowFocusChanged(boolean hasWindowFocus) {
+//        if (pendingFrameBounding != null)
+//            frameBounding(pendingFrameBounding);
+//    }
+//
+//
+//
+//    @Override
+//    public void onAttachedToWindow() {
+//        super.onAttachedToWindow();
+//        for (MapLayerInterface o: overlays) o.onAttached();
+//    }
+//
+//    @Override
+//    public void onDetachedFromWindow() {
+//        for (MapLayerInterface o: overlays) o.onDetached();
+//        super.onDetachedFromWindow();
+//    }
+//
+//    @Override
+//    public void onSharedPreferenceChanged(SharedPreferences p, String k) {
+//        for (MapLayerInterface o: overlays) o.onSharedPreferenceChanged(p,k);
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewInteractive.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewInteractive.java
index c2387e46..99404e0e 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewInteractive.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewInteractive.java
@@ -1,88 +1,88 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.view.MotionEvent;
-import android.view.View;
-
-import org.osmdroid.events.MapListener;
-import org.osmdroid.events.ScrollEvent;
-import org.osmdroid.events.ZoomEvent;
-
-import ch.bailu.aat.dispatcher.DispatcherInterface;
-import ch.bailu.aat.map.MapDensity;
-import ch.bailu.aat.map.layer.MapPositionLayer;
-import ch.bailu.aat.map.tile.TileProviderDyn;
-import ch.bailu.aat.map.tile.TileProviderInterface;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat.services.ServiceContext;
-
-public class OsmViewInteractive extends OsmViewAbstract
-        implements MapListener, View.OnTouchListener {
-
-
-    private final Storage storage;
-    private final MapPositionLayer pos;
-
-
-    public OsmViewInteractive(ServiceContext sc, DispatcherInterface disp, String key) {
-        this(
-                sc,
-                disp,
-                key,
-                new TileProviderDyn(sc),
-                new MapDensity(sc.getContext()));
-    }
-
-
-    private OsmViewInteractive(ServiceContext sc,
-                               DispatcherInterface d,
-                               String key,
-                               TileProviderInterface p,
-                               MapDensity res) {
-        super(sc,
-                new OsmTileProvider(p, res.getTileSize()),
-                res, key);
-
-
-        storage = Storage.global(sc.getContext());
-
-        map.setMapListener(this);
-        map.setOnTouchListener(this);
-
-
-        pos = new MapPositionLayer(getMContext(), d);
-        add(pos);
-    }
-
-
-    @Override
-    public void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        storage.register(this);
-    }
-
-
-    @Override
-    public void onDetachedFromWindow() {
-        storage.unregister(this);
-        super.onDetachedFromWindow();
-    }
-
-
-    @Override
-    public boolean onScroll(ScrollEvent event) {
-        return false;
-    }
-
-    @Override
-    public boolean onZoom(ZoomEvent event) {
-        return false;
-    }
-
-
-    @Override
-    public boolean onTouch(View v, MotionEvent event) {
-        pos.onTouch(event);
-        return false;
-    }
-
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.view.MotionEvent;
+//import android.view.View;
+//
+//import org.osmdroid.events.MapListener;
+//import org.osmdroid.events.ScrollEvent;
+//import org.osmdroid.events.ZoomEvent;
+//
+//import ch.bailu.aat.dispatcher.DispatcherInterface;
+//import ch.bailu.aat.map.MapDensity;
+//import ch.bailu.aat.map.layer.MapPositionLayer;
+//import ch.bailu.aat.map.tile.TileProviderDyn;
+//import ch.bailu.aat.map.tile.TileProviderInterface;
+//import ch.bailu.aat.preferences.Storage;
+//import ch.bailu.aat.services.ServiceContext;
+//
+//public class OsmViewInteractive extends OsmViewAbstract
+//        implements MapListener, View.OnTouchListener {
+//
+//
+//    private final Storage storage;
+//    private final MapPositionLayer pos;
+//
+//
+//    public OsmViewInteractive(ServiceContext sc, DispatcherInterface disp, String key) {
+//        this(
+//                sc,
+//                disp,
+//                key,
+//                new TileProviderDyn(sc),
+//                new MapDensity(sc.getContext()));
+//    }
+//
+//
+//    private OsmViewInteractive(ServiceContext sc,
+//                               DispatcherInterface d,
+//                               String key,
+//                               TileProviderInterface p,
+//                               MapDensity res) {
+//        super(sc,
+//                new OsmTileProvider(p, res.getTileSize()),
+//                res, key);
+//
+//
+//        storage = Storage.global(sc.getContext());
+//
+//        map.setMapListener(this);
+//        map.setOnTouchListener(this);
+//
+//
+//        pos = new MapPositionLayer(getMContext(), d);
+//        add(pos);
+//    }
+//
+//
+//    @Override
+//    public void onAttachedToWindow() {
+//        super.onAttachedToWindow();
+//        storage.register(this);
+//    }
+//
+//
+//    @Override
+//    public void onDetachedFromWindow() {
+//        storage.unregister(this);
+//        super.onDetachedFromWindow();
+//    }
+//
+//
+//    @Override
+//    public boolean onScroll(ScrollEvent event) {
+//        return false;
+//    }
+//
+//    @Override
+//    public boolean onZoom(ZoomEvent event) {
+//        return false;
+//    }
+//
+//
+//    @Override
+//    public boolean onTouch(View v, MotionEvent event) {
+//        pos.onTouch(event);
+//        return false;
+//    }
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewStatic.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewStatic.java
index cefdcaeb..3dc0e534 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewStatic.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OsmViewStatic.java
@@ -1,31 +1,31 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.view.KeyEvent;
-import android.view.MotionEvent;
-
-import ch.bailu.aat.map.MapDensity;
-import ch.bailu.aat.map.tile.TileProviderInterface;
-import ch.bailu.aat.services.ServiceContext;
-
-public class OsmViewStatic extends OsmViewAbstract {
-    public OsmViewStatic(ServiceContext sc, TileProviderInterface provider, MapDensity r) {
-        super(sc, new OsmTileProvider(provider, r.getTileSize()), r, OsmViewStatic.class.getSimpleName());
-    }
-
-
-    @Override
-    public boolean onKeyDown(final int keyCode, final KeyEvent event) {
-        return false;
-
-    }
-
-    @Override
-    public boolean onTrackballEvent(final MotionEvent event) {
-        return false;
-    }
-
-    @Override
-    public boolean dispatchTouchEvent(final MotionEvent event) {
-        return false;
-    }
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.view.KeyEvent;
+//import android.view.MotionEvent;
+//
+//import ch.bailu.aat.map.MapDensity;
+//import ch.bailu.aat.map.tile.TileProviderInterface;
+//import ch.bailu.aat.services.ServiceContext;
+//
+//public class OsmViewStatic extends OsmViewAbstract {
+//    public OsmViewStatic(ServiceContext sc, TileProviderInterface provider, MapDensity r) {
+//        super(sc, new OsmTileProvider(provider, r.getTileSize()), r, OsmViewStatic.class.getSimpleName());
+//    }
+//
+//
+//    @Override
+//    public boolean onKeyDown(final int keyCode, final KeyEvent event) {
+//        return false;
+//
+//    }
+//
+//    @Override
+//    public boolean onTrackballEvent(final MotionEvent event) {
+//        return false;
+//    }
+//
+//    @Override
+//    public boolean dispatchTouchEvent(final MotionEvent event) {
+//        return false;
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/osmdroid/OverlayWrapper.java b/app/src/main/java/ch/bailu/aat/map/osmdroid/OverlayWrapper.java
index ba417547..e6cbf5ec 100644
--- a/app/src/main/java/ch/bailu/aat/map/osmdroid/OverlayWrapper.java
+++ b/app/src/main/java/ch/bailu/aat/map/osmdroid/OverlayWrapper.java
@@ -1,32 +1,32 @@
-package ch.bailu.aat.map.osmdroid;
-
-import android.graphics.Canvas;
-import android.view.MotionEvent;
-
-import org.mapsforge.core.model.Point;
-import org.osmdroid.views.MapView;
-import org.osmdroid.views.overlay.Overlay;
-
-import ch.bailu.aat.map.MapContext;
-import ch.bailu.aat.map.layer.MapLayerInterface;
-
-public class OverlayWrapper extends Overlay {
-    public final MapLayerInterface overlay;
-    public final MapContext mcontext;
-
-    public OverlayWrapper(MapLayerInterface o, MapContext m) {
-        overlay = o;
-        mcontext = m;
-    }
-
-    @Override
-    protected void draw(Canvas c, MapView osmv) {
-        overlay.drawInside(mcontext);
-    }
-
-    @Override
-    public boolean onSingleTapConfirmed(final MotionEvent e, final MapView mapView) {
-        return overlay.onTap(null, null, new Point(e.getX(), e.getY()));
-    }
-
-}
+//package ch.bailu.aat.map.osmdroid;
+//
+//import android.graphics.Canvas;
+//import android.view.MotionEvent;
+//
+//import org.mapsforge.core.model.Point;
+//import org.osmdroid.views.MapView;
+//import org.osmdroid.views.overlay.Overlay;
+//
+//import ch.bailu.aat.map.MapContext;
+//import ch.bailu.aat.map.layer.MapLayerInterface;
+//
+//public class OverlayWrapper extends Overlay {
+//    public final MapLayerInterface overlay;
+//    public final MapContext mcontext;
+//
+//    public OverlayWrapper(MapLayerInterface o, MapContext m) {
+//        overlay = o;
+//        mcontext = m;
+//    }
+//
+//    @Override
+//    protected void draw(Canvas c, MapView osmv) {
+//        overlay.drawInside(mcontext);
+//    }
+//
+//    @Override
+//    public boolean onSingleTapConfirmed(final MotionEvent e, final MapView mapView) {
+//        return overlay.onTap(null, null, new Point(e.getX(), e.getY()));
+//    }
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/LockTileCache.java b/app/src/main/java/ch/bailu/aat/map/tile/LockTileCache.java
index 63a0a973..0b76ed2c 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/LockTileCache.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/LockTileCache.java
@@ -1,71 +1,70 @@
-package ch.bailu.aat.map.tile;
-
-import org.mapsforge.core.model.Tile;
-import org.osmdroid.tileprovider.MapTile;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.LockCache;
-import ch.bailu.aat.services.cache.TileStackObject;
-
-public class LockTileCache extends TileCache<TileStackObject> {
-    private final static int INITIAL_CAPACITY = 5;
-
-    private final LockCache<TileStackObject> tiles = new LockCache(INITIAL_CAPACITY);
-
-
-    @Override
-    public TileStackObject get(String string) {
-        for (int i = 0; i<tiles.size(); i++) {
-            if (tiles.get(i).toString().equals(string)) {
-                return tiles.use(i);
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public TileStackObject get(Tile mt) {
-        for (int i = 0; i<tiles.size(); i++) {
-            if (compare(mt, tiles.get(i).getTile())) {
-                return tiles.use(i);
-            }
-        }
-        return null;
-    }
-
-    public static boolean compare(MapTile a, Tile b) {
-        return a.getX() == b.tileX && a.getY() == b.tileY && a.getZoomLevel() == b.zoomLevel;
-    }
-
-
-    public static boolean compare(Tile a, Tile b) {
-        return a.tileX == b.tileX && a.tileY == b.tileY && a.zoomLevel == b.zoomLevel;
-    }
-
-    @Override
-    public void put(TileStackObject handle) {
-        tiles.add(handle);
-    }
-
-    @Override
-    public void close() {
-        tiles.close();
-    }
-
-    @Override
-    public void reDownloadTiles(ServiceContext sc) {
-        for (int i = 0; i<tiles.size(); i++) {
-            tiles.get(i).reDownload(sc);
-        }
-    }
-
-    @Override
-    public void reset() {
-        tiles.reset();
-    }
-
-    @Override
-    public void setCapacity(int capacity) {
-        tiles.ensureCapacity(capacity);
-    }
-}
+//package ch.bailu.aat.map.tile;
+//
+//import org.mapsforge.core.model.Tile;
+//
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.services.cache.LockCache;
+//import ch.bailu.aat.services.cache.TileStackObject;
+//
+//public class LockTileCache extends TileCache<TileStackObject> {
+//    private final static int INITIAL_CAPACITY = 5;
+//
+//    private final LockCache<TileStackObject> tiles = new LockCache(INITIAL_CAPACITY);
+//
+//
+//    @Override
+//    public TileStackObject get(String string) {
+//        for (int i = 0; i<tiles.size(); i++) {
+//            if (tiles.get(i).toString().equals(string)) {
+//                return tiles.use(i);
+//            }
+//        }
+//        return null;
+//    }
+//
+//    @Override
+//    public TileStackObject get(Tile mt) {
+//        for (int i = 0; i<tiles.size(); i++) {
+//            if (compare(mt, tiles.get(i).getTile())) {
+//                return tiles.use(i);
+//            }
+//        }
+//        return null;
+//    }
+//
+////    public static boolean compare(MapTile a, Tile b) {
+////        return a.getX() == b.tileX && a.getY() == b.tileY && a.getZoomLevel() == b.zoomLevel;
+////    }
+//
+//
+//    public static boolean compare(Tile a, Tile b) {
+//        return a.tileX == b.tileX && a.tileY == b.tileY && a.zoomLevel == b.zoomLevel;
+//    }
+//
+//    @Override
+//    public void put(TileStackObject handle) {
+//        tiles.add(handle);
+//    }
+//
+//    @Override
+//    public void close() {
+//        tiles.close();
+//    }
+//
+//    @Override
+//    public void reDownloadTiles(ServiceContext sc) {
+//        for (int i = 0; i<tiles.size(); i++) {
+//            tiles.get(i).reDownload(sc);
+//        }
+//    }
+//
+//    @Override
+//    public void reset() {
+//        tiles.reset();
+//    }
+//
+//    @Override
+//    public void setCapacity(int capacity) {
+//        tiles.ensureCapacity(capacity);
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java b/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
index a555e224..2f08fea8 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileCache.java
@@ -5,12 +5,11 @@ import org.mapsforge.core.model.Tile;
 import java.io.Closeable;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.TileStackObject;
 
 public class TileCache<T> implements Closeable {
 
 
-    public static final TileCache NULL = new TileCache<TileStackObject>();
+    //public static final TileCache NULL = new TileCache<TileStackObject>();
 
 
     public T get(String string) {
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java b/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
index c353e646..7aa5c48e 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileObjectCache.java
@@ -1,7 +1,6 @@
 package ch.bailu.aat.map.tile;
 
 import org.mapsforge.core.model.Tile;
-import org.osmdroid.tileprovider.MapTile;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.LockCache;
@@ -36,9 +35,9 @@ public class TileObjectCache extends TileCache<TileObject> {
         return null;
     }
 
-    public static boolean compare(MapTile a, Tile b) {
-        return a.getX() == b.tileX && a.getY() == b.tileY && a.getZoomLevel() == b.zoomLevel;
-    }
+//    public static boolean compare(MapTile a, Tile b) {
+//        return a.getX() == b.tileX && a.getY() == b.tileY && a.getZoomLevel() == b.zoomLevel;
+//    }
 
 
     public static boolean compare(Tile a, Tile b) {
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderAbstract.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderAbstract.java
index 58c218fa..a55d6f32 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderAbstract.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderAbstract.java
@@ -1,88 +1,88 @@
-package ch.bailu.aat.map.tile;
-
-import org.mapsforge.core.model.Tile;
-import org.mapsforge.map.model.common.Observer;
-
-import java.util.ArrayList;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.BitmapTileObject;
-import ch.bailu.aat.services.cache.ObjectHandle;
-import ch.bailu.aat.services.cache.TileObject.Source;
-import ch.bailu.aat.services.cache.TileStackObject;
-
-public abstract class TileProviderAbstract implements TileProviderInterface {
-
-    private final ArrayList<Observer> observers = new ArrayList(2);
-    private final ServiceContext scontext;
-    private Source sources[] = new Source[]{BitmapTileObject.MAPNIK};
-    private final StringBuilder builder = new StringBuilder();
-
-    public TileProviderAbstract(ServiceContext sc) {
-        scontext = sc;
-    }
-
-    protected TileStackObject getTileHandle(Tile mapTile) {
-        if (scontext.isUp()) {
-            String id = generateTileID(mapTile);
-            ObjectHandle handle = scontext.getCacheService().getObject(
-                    id,
-                    new TileStackObject.Factory(scontext.getContext(), mapTile, sources)
-            );
-
-
-            if (TileStackObject.class.isInstance(handle)) {
-                return (TileStackObject) handle;
-            }
-        }
-
-        return TileStackObject.NULL;
-    }
-
-
-
-    private String generateTileID(Tile mapTile) {
-        builder.setLength(0);
-
-        builder.append(mapTile.zoomLevel);
-        builder.append('/');
-        builder.append(mapTile.tileX);
-        builder.append('/');
-        builder.append(mapTile.tileY);
-
-        for (Source source : sources) {
-            builder.append('/');
-            builder.append(source.getName());
-            builder.append(source.getBitmapFilter().toString());
-        }
-        return builder.toString();
-    }
-
-
-    public int getMinimumZoomLevel() {
-        return BitmapTileObject.MIN_ZOOM;
-    }
-    public int getMaximumZoomLevel() {
-        return BitmapTileObject.MAX_ZOOM;
-    }
-
-    public void setSubTileSource(Source[] s) {
-        sources=s;
-    }
-
-
-    protected void notifyChange() {
-        for (Observer o: observers) o.onChange();
-    }
-
-
-    @Override
-    public void addObserver(Observer observer) {
-        observers.add(observer);
-    }
-
-    @Override
-    public void removeObserver(Observer observer) {
-        observers.remove(observer);
-    }
-}
+//package ch.bailu.aat.map.tile;
+//
+//import org.mapsforge.core.model.Tile;
+//import org.mapsforge.map.model.common.Observer;
+//
+//import java.util.ArrayList;
+//
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.services.cache.BitmapTileObject;
+//import ch.bailu.aat.services.cache.ObjectHandle;
+//import ch.bailu.aat.services.cache.TileObject.Source;
+//import ch.bailu.aat.services.cache.TileStackObject;
+//
+//public abstract class TileProviderAbstract implements TileProviderInterface {
+//
+//    private final ArrayList<Observer> observers = new ArrayList(2);
+//    private final ServiceContext scontext;
+//    private Source sources[] = new Source[]{BitmapTileObject.MAPNIK};
+//    private final StringBuilder builder = new StringBuilder();
+//
+//    public TileProviderAbstract(ServiceContext sc) {
+//        scontext = sc;
+//    }
+//
+//    protected TileStackObject getTileHandle(Tile mapTile) {
+//        if (scontext.isUp()) {
+//            String id = generateTileID(mapTile);
+//            ObjectHandle handle = scontext.getCacheService().getObject(
+//                    id,
+//                    new TileStackObject.Factory(scontext.getContext(), mapTile, sources)
+//            );
+//
+//
+//            if (TileStackObject.class.isInstance(handle)) {
+//                return (TileStackObject) handle;
+//            }
+//        }
+//
+//        return TileStackObject.NULL;
+//    }
+//
+//
+//
+//    private String generateTileID(Tile mapTile) {
+//        builder.setLength(0);
+//
+//        builder.append(mapTile.zoomLevel);
+//        builder.append('/');
+//        builder.append(mapTile.tileX);
+//        builder.append('/');
+//        builder.append(mapTile.tileY);
+//
+//        for (Source source : sources) {
+//            builder.append('/');
+//            builder.append(source.getName());
+//            builder.append(source.getBitmapFilter().toString());
+//        }
+//        return builder.toString();
+//    }
+//
+//
+//    public int getMinimumZoomLevel() {
+//        return BitmapTileObject.MIN_ZOOM;
+//    }
+//    public int getMaximumZoomLevel() {
+//        return BitmapTileObject.MAX_ZOOM;
+//    }
+//
+//    public void setSubTileSource(Source[] s) {
+//        sources=s;
+//    }
+//
+//
+//    protected void notifyChange() {
+//        for (Observer o: observers) o.onChange();
+//    }
+//
+//
+//    @Override
+//    public void addObserver(Observer observer) {
+//        observers.add(observer);
+//    }
+//
+//    @Override
+//    public void removeObserver(Observer observer) {
+//        observers.remove(observer);
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderCached.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderCached.java
index 7816568e..3a24b368 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderCached.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderCached.java
@@ -1,122 +1,122 @@
-package ch.bailu.aat.map.tile;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.drawable.Drawable;
-
-import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.model.Tile;
-
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.TileObject;
-import ch.bailu.aat.services.cache.TileStackObject;
-
-public class TileProviderCached extends TileProviderAbstract {
-
-
-    private TileCache<TileStackObject> cache = TileCache.NULL;
-
-    private final Context context;
-    private final ServiceContext scontext;
-
-
-    private final BroadcastReceiver onFileChanged = new BroadcastReceiver() {
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String string = AppIntent.getFile(intent);
-            if (cache.get((string)) != null) {
-                notifyChange();
-            }
-        }
-
-    };
-
-
-
-    public TileProviderCached(ServiceContext sc)  {
-        super(sc);
-        context = sc.getContext();
-        scontext = sc;
-
-    }
-
-
-
-    @Override
-    public Drawable getDrawable(Tile tile) {
-        return getMapTileStack(tile).getDrawable(context.getResources());
-    }
-
-    @Override
-    public TileBitmap get(Tile tile) {
-        return getMapTileStack(tile).getTileBitmap();
-    }
-
-
-    private TileStackObject getMapTileStack(Tile tile) {
-        TileStackObject handle = cache.get(tile);
-
-
-        if (handle == null) {
-            handle = getTileHandle(tile);
-
-            cache.put(handle);
-        }
-
-        return handle;
-    }
-
-
-
-    @Override
-    public void onAttached() {
-        AppBroadcaster.register(context, onFileChanged, AppBroadcaster.FILE_CHANGED_INCACHE);
-        cache = new LockTileCache();
-    }
-
-
-    @Override
-    public void onDetached() {
-
-        context.unregisterReceiver(onFileChanged);
-        cache.close();
-        cache = TileCache.NULL;
-    }
-
-
-
-    @Override
-    public boolean contains(Tile tile) {
-        return cache.get(tile) != null;
-    }
-
-
-
-    @Override
-    public int getCapacity() {
-        return cache.size();
-    }
-
-    @Override
-    public void setCapacity(int capacity) {
-        cache.setCapacity(capacity);
-    }
-
-
-    @Override
-    public void setSubTileSource(TileObject.Source[] s) {
-        super.setSubTileSource(s);
-        cache.reset();
-    }
-
-
-    @Override
-    public void reDownloadTiles() {
-        cache.reDownloadTiles(scontext);
-    }
-}  
-
+//package ch.bailu.aat.map.tile;
+//
+//import android.content.BroadcastReceiver;
+//import android.content.Context;
+//import android.content.Intent;
+//import android.graphics.drawable.Drawable;
+//
+//import org.mapsforge.core.graphics.TileBitmap;
+//import org.mapsforge.core.model.Tile;
+//
+//import ch.bailu.aat.util.AppBroadcaster;
+//import ch.bailu.aat.util.AppIntent;
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.services.cache.TileObject;
+//import ch.bailu.aat.services.cache.TileStackObject;
+//
+//public class TileProviderCached extends TileProviderAbstract {
+//
+//
+//    private TileCache<TileStackObject> cache = TileCache.NULL;
+//
+//    private final Context context;
+//    private final ServiceContext scontext;
+//
+//
+//    private final BroadcastReceiver onFileChanged = new BroadcastReceiver() {
+//
+//        @Override
+//        public void onReceive(Context context, Intent intent) {
+//            String string = AppIntent.getFile(intent);
+//            if (cache.get((string)) != null) {
+//                notifyChange();
+//            }
+//        }
+//
+//    };
+//
+//
+//
+//    public TileProviderCached(ServiceContext sc)  {
+//        super(sc);
+//        context = sc.getContext();
+//        scontext = sc;
+//
+//    }
+//
+//
+//
+//    @Override
+//    public Drawable getDrawable(Tile tile) {
+//        return getMapTileStack(tile).getDrawable(context.getResources());
+//    }
+//
+//    @Override
+//    public TileBitmap get(Tile tile) {
+//        return getMapTileStack(tile).getTileBitmap();
+//    }
+//
+//
+//    private TileStackObject getMapTileStack(Tile tile) {
+//        TileStackObject handle = cache.get(tile);
+//
+//
+//        if (handle == null) {
+//            handle = getTileHandle(tile);
+//
+//            cache.put(handle);
+//        }
+//
+//        return handle;
+//    }
+//
+//
+//
+//    @Override
+//    public void onAttached() {
+//        AppBroadcaster.register(context, onFileChanged, AppBroadcaster.FILE_CHANGED_INCACHE);
+//        cache = new LockTileCache();
+//    }
+//
+//
+//    @Override
+//    public void onDetached() {
+//
+//        context.unregisterReceiver(onFileChanged);
+//        cache.close();
+//        cache = TileCache.NULL;
+//    }
+//
+//
+//
+//    @Override
+//    public boolean contains(Tile tile) {
+//        return cache.get(tile) != null;
+//    }
+//
+//
+//
+//    @Override
+//    public int getCapacity() {
+//        return cache.size();
+//    }
+//
+//    @Override
+//    public void setCapacity(int capacity) {
+//        cache.setCapacity(capacity);
+//    }
+//
+//
+//    @Override
+//    public void setSubTileSource(TileObject.Source[] s) {
+//        super.setSubTileSource(s);
+//        cache.reset();
+//    }
+//
+//
+//    @Override
+//    public void reDownloadTiles() {
+//        cache.reDownloadTiles(scontext);
+//    }
+//}
+//
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderDyn.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderDyn.java
index a471a9d7..003d1768 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderDyn.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderDyn.java
@@ -1,70 +1,70 @@
-package ch.bailu.aat.map.tile;
-
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-
-import ch.bailu.aat.preferences.SolidMapTileStack;
-import ch.bailu.aat.preferences.SolidPreset;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat.services.ServiceContext;
-
-
-public class TileProviderDyn extends TileProviderCached implements OnSharedPreferenceChangeListener {
-    private final Storage     storage;
-    private final SolidPreset spreset;
-
-    private SolidMapTileStack soverlay;
-
-
-
-    public TileProviderDyn(ServiceContext sc) {
-        super(sc);
-
-        storage = Storage.preset(sc.getContext());
-        spreset = new SolidPreset(sc.getContext());
-
-        createSolid(spreset);
-
-        storage.register(this);
-
-        setSubTileSource(soverlay.getSourceList());
-    }
-
-
-
-    private void createSolid(SolidPreset spreset) {
-        soverlay = new SolidMapTileStack(spreset.getContext(), spreset.getIndex());
-    }
-
-
-
-
-    @Override
-    public void onDetached() {
-        storage.unregister(this);
-        super.onDetached();
-
-    }
-
-
-
-    @Override
-    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
-            String key) {
-        if (soverlay.hasKey(key)) {
-            setSourceList();
-
-
-        } else if (spreset.hasKey(key)) {
-            createSolid(spreset);
-            setSourceList();
-        }
-    }
-
-
-
-    private void setSourceList() {
-        setSubTileSource(soverlay.getSourceList());
-        notifyChange();
-    }
-}
+//package ch.bailu.aat.map.tile;
+//
+//import android.content.SharedPreferences;
+//import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
+//
+//import ch.bailu.aat.preferences.SolidMapTileStack;
+//import ch.bailu.aat.preferences.SolidPreset;
+//import ch.bailu.aat.preferences.Storage;
+//import ch.bailu.aat.services.ServiceContext;
+//
+//
+//public class TileProviderDyn extends TileProviderCached implements OnSharedPreferenceChangeListener {
+//    private final Storage     storage;
+//    private final SolidPreset spreset;
+//
+//    private SolidMapTileStack soverlay;
+//
+//
+//
+//    public TileProviderDyn(ServiceContext sc) {
+//        super(sc);
+//
+//        storage = Storage.preset(sc.getContext());
+//        spreset = new SolidPreset(sc.getContext());
+//
+//        createSolid(spreset);
+//
+//        storage.register(this);
+//
+//        setSubTileSource(soverlay.getSourceList());
+//    }
+//
+//
+//
+//    private void createSolid(SolidPreset spreset) {
+//        soverlay = new SolidMapTileStack(spreset.getContext(), spreset.getIndex());
+//    }
+//
+//
+//
+//
+//    @Override
+//    public void onDetached() {
+//        storage.unregister(this);
+//        super.onDetached();
+//
+//    }
+//
+//
+//
+//    @Override
+//    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
+//            String key) {
+//        if (soverlay.hasKey(key)) {
+//            setSourceList();
+//
+//
+//        } else if (spreset.hasKey(key)) {
+//            createSolid(spreset);
+//            setSourceList();
+//        }
+//    }
+//
+//
+//
+//    private void setSourceList() {
+//        setSubTileSource(soverlay.getSourceList());
+//        notifyChange();
+//    }
+//}
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderPreview.java b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderPreview.java
index 03c8331a..8094b1eb 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/TileProviderPreview.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/TileProviderPreview.java
@@ -1,92 +1,92 @@
-package ch.bailu.aat.map.tile;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-
-import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.model.Tile;
-
-import java.io.Closeable;
-import java.util.ArrayList;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.TileStackObject;
-
-public class TileProviderPreview extends TileProviderAbstract implements Closeable  {
-
-    private final ArrayList<TileStackObject> tiles = new ArrayList<>(10);
-    
-    private final Context context;
-
-    public TileProviderPreview(ServiceContext sc) {
-        super(sc);
-        context = sc.getContext();
-    }
-
-    
-    @Override
-    public Drawable getDrawable(Tile tile) {
-        final TileStackObject handle = getTileHandle(tile);
-        
-        tiles.add(handle);
-       
-        return handle.getDrawable(context.getResources());
-    }
-
-
-    @Override
-    public TileBitmap get(Tile tile) {
-        final TileStackObject handle = getTileHandle(tile);
-
-        tiles.add(handle);
-
-        return handle.getTileBitmap();
-    }
-
-
-    @Override
-    public boolean contains(Tile tile) {
-        return isReady();
-    }
-
-    @Override
-    public int getCapacity() {
-        return tiles.size();
-    }
-
-    @Override
-    public void setCapacity(int numNeeded) {}
-
-    @Override
-    public void reDownloadTiles() {}
-
-
-    public boolean isReady() {
-        
-        for (int i=0; i<tiles.size(); i++) {
-            if (tiles.get(i).isReady()==false) return false;
-        }
-        return true;
-    }
-
-
-    @Override
-    public void close() {
-        for (int i=0; i<tiles.size(); i++) {
-            tiles.get(i).free();
-        }
-        tiles.clear();
-    }
-
-    @Override
-    public void onAttached() {
-
-    }
-
-    @Override
-    public void onDetached() {
-
-    }
-}
-
-
+//package ch.bailu.aat.map.tile;
+//
+//import android.content.Context;
+//import android.graphics.drawable.Drawable;
+//
+//import org.mapsforge.core.graphics.TileBitmap;
+//import org.mapsforge.core.model.Tile;
+//
+//import java.io.Closeable;
+//import java.util.ArrayList;
+//
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.services.cache.TileStackObject;
+//
+//public class TileProviderPreview extends TileProviderAbstract implements Closeable  {
+//
+//    private final ArrayList<TileStackObject> tiles = new ArrayList<>(10);
+//
+//    private final Context context;
+//
+//    public TileProviderPreview(ServiceContext sc) {
+//        super(sc);
+//        context = sc.getContext();
+//    }
+//
+//
+//    @Override
+//    public Drawable getDrawable(Tile tile) {
+//        final TileStackObject handle = getTileHandle(tile);
+//
+//        tiles.add(handle);
+//
+//        return handle.getDrawable(context.getResources());
+//    }
+//
+//
+//    @Override
+//    public TileBitmap get(Tile tile) {
+//        final TileStackObject handle = getTileHandle(tile);
+//
+//        tiles.add(handle);
+//
+//        return handle.getTileBitmap();
+//    }
+//
+//
+//    @Override
+//    public boolean contains(Tile tile) {
+//        return isReady();
+//    }
+//
+//    @Override
+//    public int getCapacity() {
+//        return tiles.size();
+//    }
+//
+//    @Override
+//    public void setCapacity(int numNeeded) {}
+//
+//    @Override
+//    public void reDownloadTiles() {}
+//
+//
+//    public boolean isReady() {
+//
+//        for (int i=0; i<tiles.size(); i++) {
+//            if (tiles.get(i).isReady()==false) return false;
+//        }
+//        return true;
+//    }
+//
+//
+//    @Override
+//    public void close() {
+//        for (int i=0; i<tiles.size(); i++) {
+//            tiles.get(i).free();
+//        }
+//        tiles.clear();
+//    }
+//
+//    @Override
+//    public void onAttached() {
+//
+//    }
+//
+//    @Override
+//    public void onDetached() {
+//
+//    }
+//}
+//
+//
diff --git a/app/src/main/java/ch/bailu/aat/menus/LocationMenu.java b/app/src/main/java/ch/bailu/aat/menus/LocationMenu.java
index fc4258d5..a986bec4 100644
--- a/app/src/main/java/ch/bailu/aat/menus/LocationMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/LocationMenu.java
@@ -8,14 +8,12 @@ import android.view.Menu;
 import android.view.MenuItem;
 
 import org.mapsforge.core.model.LatLong;
-import org.osmdroid.util.GeoPoint;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.coordinates.Coordinates;
-import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.map.MapViewInterface;
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.Clipboard;
+import ch.bailu.aat.util.ui.AppLog;
 
 public class LocationMenu extends AbsMenu{
 
@@ -75,12 +73,15 @@ public class LocationMenu extends AbsMenu{
     
 
     private void paste() {
-        GeoPoint geo = new GeoPoint(0,0);
-        final CharSequence s = clipboard.getText();
+        final String s = clipboard.getText().toString();
 
-        if (s != null  && Coordinates.stringToGeoPoint(s.toString(), geo)) {
-            map.setCenter(new LatLongE6(geo).toLatLong());
+        try {
+            LatLong p = Coordinates.stringToGeoPoint(s.toString());
+            map.setCenter(p);
+        } catch (NumberFormatException e) {
+            AppLog.d(this, s);
         }
+
     }
 
     private void copy() {
@@ -90,7 +91,7 @@ public class LocationMenu extends AbsMenu{
 
     private void view() {
         final Intent intent = new Intent(Intent.ACTION_VIEW);
-        final GeoPoint center = getCenter();
+        final LatLong center = getCenter();
         final Uri uri = Uri.parse(Coordinates.geoPointToGeoUri(center));
         AppLog.d(this, uri.toString());
 
@@ -101,7 +102,7 @@ public class LocationMenu extends AbsMenu{
 
     private void send() {
         final Intent intent = new Intent(Intent.ACTION_SEND);
-        final GeoPoint center = getCenter();
+        final LatLong center = getCenter();
 
 
         final String url = Coordinates.geoPointToGeoUri(center);
@@ -115,9 +116,8 @@ public class LocationMenu extends AbsMenu{
         context.startActivity(Intent.createChooser(intent, url));
     }
     
-    private GeoPoint getCenter() {
-        LatLong c = map.getMContext().getMetrics().getBoundingBox().getCenterPoint();
-        return new GeoPoint(c.getLatitudeE6(), c.getLongitudeE6());
+    private LatLong getCenter() {
+        return map.getMContext().getMetrics().getBoundingBox().getCenterPoint();
     }
     
 }
diff --git a/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java b/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
index 5ea4d948..7e326ca3 100644
--- a/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/OptionsMenu.java
@@ -6,12 +6,10 @@ import android.view.ContextMenu;
 import android.view.Menu;
 import android.view.MenuItem;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.activities.ActivitySwitcher;
 import ch.bailu.aat.activities.NominatimActivity;
-import ch.bailu.aat.util.AppIntent;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.preferences.SolidAutopause;
 import ch.bailu.aat.preferences.SolidBacklight;
 import ch.bailu.aat.preferences.SolidMapTileStack;
@@ -19,6 +17,7 @@ import ch.bailu.aat.preferences.SolidOverlayFileList;
 import ch.bailu.aat.preferences.SolidPreset;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.tracker.State;
+import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.views.preferences.SolidCheckListDialog;
 import ch.bailu.aat.views.preferences.SolidIndexListDialog;
 
@@ -96,7 +95,7 @@ public class OptionsMenu extends AbsMenu {
 
         } else if (item == nominatim) {
             Intent intent = new Intent();
-            AppIntent.setBoundingBox(intent, new BoundingBoxOsm(0,0,0,0));
+            AppIntent.setBoundingBox(intent, new BoundingBoxE6(0,0,0,0));
             ActivitySwitcher.start(c, NominatimActivity.class);
 
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
index 5e24d830..0401ef38 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
@@ -2,9 +2,6 @@ package ch.bailu.aat.preferences;
 
 import android.content.Context;
 
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.services.cache.BitmapTileObject;
 import ch.bailu.aat.services.cache.HillShadeCached;
@@ -47,12 +44,12 @@ public class SolidMapTileStack extends SolidCheckList {
         }
     }
 
-
-    public static boolean isZoomLevelSupported(OnlineTileSourceBase source ,MapTile tile) {
-        return
-                tile.getZoomLevel() <= source.getMaximumZoomLevel() &&
-                        tile.getZoomLevel() >= source.getMinimumZoomLevel();
-    }
+//
+//    public static boolean isZoomLevelSupported(OnlineTileSourceBase source ,MapTile tile) {
+//        return
+//                tile.getZoomLevel() <= source.getMaximumZoomLevel() &&
+//                        tile.getZoomLevel() >= source.getMinimumZoomLevel();
+//    }
 
     public int getCountOfEnabled() {
         int c = 0;
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
index 775db5fa..52852ca0 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
@@ -5,10 +5,9 @@ import android.graphics.Bitmap;
 
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.tilesource.XYTileSource;
 
 import java.io.File;
+import java.util.Random;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.DownloadHandle;
@@ -161,37 +160,44 @@ public class BitmapTileObject extends TileObject {
     }
     
     public static class Source extends TileObject.Source {
+        public final static String EXT = ".png";
 
-        private final XYTileSource osmdroidSource;
-        private final TileBitmapFilter filter;
+        private final Random random = new Random();
+        private final int minZoom, maxZoom;
 
+        private final String name;
+
+        private final String[] urls;
         
-        
-        public Source (String sourceName, TileBitmapFilter f, int minZ, int maxZ, final String... url) {
-            osmdroidSource = new XYTileSource(sourceName, minZ, maxZ, ".png", url);
-            filter = f;
+        public Source (String sourceName, int minZ, int maxZ, final String... url) {
+            name = sourceName;
+            minZoom = minZ;
+            maxZoom = maxZ;
+            urls = url;
+
         }
         
 
         @Override
         public String getName() {
-            return osmdroidSource.name();
+            return name;
         }
         
         
         @Override
-        public String getID(Tile mt, Context context) {
-            return AppDirectory.getTileFile(mt, osmdroidSource, context).getAbsolutePath();
+        public String getID(Tile tile, Context context) {
+            return AppDirectory.getTileFile(tile,
+                    getTileRelativeFilenameString(tile), context).getAbsolutePath();
         }
 
         @Override
         public int getMinimumZoomLevel() {
-            return osmdroidSource.getMinimumZoomLevel();
+            return minZoom;
         }
 
         @Override
         public int getMaximumZoomLevel() {
-            return osmdroidSource.getMaximumZoomLevel();
+            return maxZoom;
         }
 
         @Override
@@ -200,14 +206,28 @@ public class BitmapTileObject extends TileObject {
         }
 
         public String getTileURLString(Tile tile) {
-            return osmdroidSource.getTileURLString(new MapTile(tile.zoomLevel, tile.tileX, tile.tileY));
+            return getBaseUrl() + tile.zoomLevel + "/" + tile.tileX + "/" + tile.tileY + EXT;
         }
 
+        private String getBaseUrl() {
+            return urls[random.nextInt(urls.length)];
+        }
 
-        @Override
-        public TileBitmapFilter getBitmapFilter() {
-            return filter;
+
+
+        private String getTileRelativeFilenameString(final Tile tile) {
+            final StringBuilder sb = new StringBuilder();
+            sb.append(name);
+            sb.append('/');
+            sb.append(tile.zoomLevel);
+            sb.append('/');
+            sb.append(tile.tileX);
+            sb.append('/');
+            sb.append(tile.tileY);
+            sb.append(EXT);
+            return sb.toString();
         }
+
     }
 
 
@@ -215,16 +235,8 @@ public class BitmapTileObject extends TileObject {
     public static final int MAX_ZOOM=17; // 18 takes way too much space for the gain.
 
 
-    public final static BitmapTileObject.Source MAPNIK_GRAY =
-            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.GRAYSCALE_FILTER,
-                    MIN_ZOOM, MAX_ZOOM,
-                    "http://a.tile.openstreetmap.org/",
-                    "http://b.tile.openstreetmap.org/",
-                    "http://c.tile.openstreetmap.org/");
-
-
     public final static BitmapTileObject.Source MAPNIK =
-            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.OVERLAY_FILTER,
+            new BitmapTileObject.Source("Mapnik",
                     MIN_ZOOM, MAX_ZOOM,
                     "http://a.tile.openstreetmap.org/",
                     "http://b.tile.openstreetmap.org/",
@@ -232,32 +244,32 @@ public class BitmapTileObject extends TileObject {
 
 
     public final static TileObject.Source TRAIL_MTB =
-            new BitmapTileObject.Source("TrailMTB",  TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+            new BitmapTileObject.Source("TrailMTB", MIN_ZOOM, MAX_ZOOM,
                     "http://tile.waymarkedtrails.org/mtb/");
 
     public final static TileObject.Source TRAIL_SKATING =
-            new BitmapTileObject.Source("TrailSkating",TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+            new BitmapTileObject.Source("TrailSkating", MIN_ZOOM, MAX_ZOOM,
                     "http://tile.waymarkedtrails.org/skating/");
 
 
     public final static TileObject.Source TRAIL_HIKING =
-            new BitmapTileObject.Source("TrailHiking", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+            new BitmapTileObject.Source("TrailHiking",  MIN_ZOOM, MAX_ZOOM,
                     "http://tile.waymarkedtrails.org/hiking/");
 
 
     public final static TileObject.Source TRAIL_CYCLING =
-            new BitmapTileObject.Source("TrailCycling", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+            new BitmapTileObject.Source("TrailCycling",  MIN_ZOOM, MAX_ZOOM,
                     "http://tile.waymarkedtrails.org/cycling/");
 
 
 
     public final static TileObject.Source TRANSPORT_OVERLAY =
-            new BitmapTileObject.Source("OpenPtMap", TileBitmapFilter.OVERLAY_FILTER, 5, 16,
+            new BitmapTileObject.Source("OpenPtMap",  5, 16,
                     "http://openptmap.org/tiles/");
 
 
     public final static BitmapTileObject.Source HILLSHADE_CACHE =
-            new BitmapTileObject.Source("HillShade", TileBitmapFilter.COPY_FILTER,
+            new BitmapTileObject.Source("HillShade",
                     NewHillshade.ELEVATION_HILLSHADE8.getMinimumZoomLevel(),
                     NewHillshade.ELEVATION_HILLSHADE8.getMaximumZoomLevel(),
                     "http://bailu.ch/");
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
index 47ac4e1e..f924febc 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
@@ -117,10 +117,10 @@ public class ElevationColorTile extends ElevationTile {
                     return  new ElevationColorTile.Factory(mt);
                 }
 
-                @Override
-                public TileBitmapFilter getBitmapFilter() {
-                    return TileBitmapFilter.OVERLAY_FILTER;
-                }
+//                @Override
+//                public TileBitmapFilter getBitmapFilter() {
+//                    return TileBitmapFilter.OVERLAY_FILTER;
+//                }
             };
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
index 834cb42d..3b6c4e7f 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
@@ -8,8 +8,9 @@ import android.graphics.Rect;
 import android.util.SparseArray;
 
 import org.mapsforge.core.graphics.TileBitmap;
+import org.mapsforge.core.model.LatLong;
 import org.mapsforge.core.model.Tile;
-import org.osmdroid.util.GeoPoint;
+import org.mapsforge.core.util.MercatorProjection;
 
 import java.util.ArrayList;
 
@@ -24,7 +25,6 @@ import ch.bailu.aat.services.dem.DemSplitter;
 import ch.bailu.aat.services.dem.ElevationUpdaterClient;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
-import microsoft.mappoint.TileSystem;
 
 public abstract class ElevationTile extends TileObject implements ElevationUpdaterClient{
 
@@ -197,11 +197,11 @@ public abstract class ElevationTile extends TileObject implements ElevationUpdat
         private void initializeWGS84Raster() {
             final Rect tileR = getTileR();
 
-            final GeoPoint tl=pixelToGeo(
+            final LatLong tl=pixelToGeo(
                     tileR.left, 
                     tileR.top);
 
-            final GeoPoint br=pixelToGeo(
+            final LatLong br=pixelToGeo(
                     tileR.right, 
                     tileR.bottom);
 
@@ -239,13 +239,17 @@ public abstract class ElevationTile extends TileObject implements ElevationUpdat
         }
 
  
-        private GeoPoint pixelToGeo(int x, int y) {
-            return TileSystem.PixelXYToLatLong(
-                    x, 
-                    y,
-                    map_tile.zoomLevel,
-                    TileObject.TILE_SIZE, 
-                    null);
+        private LatLong pixelToGeo(int x, int y) {
+            final long mapSize = MercatorProjection.getMapSize(map_tile.zoomLevel, TileObject.TILE_SIZE);
+
+            return MercatorProjection.fromPixels(x, y, mapSize);
+
+//            return MercatorProjection.TileSystem.PixelXYToLatLong(
+//                    x,
+//                    y,
+//                    map_tile.zoomLevel,
+//                    TileObject.TILE_SIZE,
+//                    null);
         }        
         
         private void initializeIndexRaster() {
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
index 8c1485c0..e2ef48ef 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
@@ -213,9 +213,9 @@ public class HillShadeCached extends TileObject {
                     return  new HillShadeCached.Factory(mt);
                 }
 
-                @Override
-                public TileBitmapFilter getBitmapFilter() {
-                    return TileBitmapFilter.COPY_FILTER;
-                }
+//                @Override
+//                public TileBitmapFilter getBitmapFilter() {
+//                    return TileBitmapFilter.COPY_FILTER;
+//                }
             };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
index 4f68fb76..f9cfcb39 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/MapsForgeTileObject.java
@@ -137,9 +137,11 @@ public class MapsForgeTileObject extends TileObject implements Observer {
                     return  new Factory(mt);
                 }
 
+                /*
                 @Override
                 public TileBitmapFilter getBitmapFilter() {
                     return TileBitmapFilter.COPY_FILTER;
                 }
+                */
             };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
index 559ff73b..f0a072ea 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
@@ -166,9 +166,9 @@ public class NewHillshade extends ElevationTile {
                     return  new NewHillshade.Factory(mt);
                 }
 
-                @Override
-                public TileBitmapFilter getBitmapFilter() {
-                    return TileBitmapFilter.COPY_FILTER;
-                }
+//                @Override
+//                public TileBitmapFilter getBitmapFilter() {
+//                    return TileBitmapFilter.COPY_FILTER;
+//                }
             };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
index 642ce91d..a7e25555 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
@@ -25,7 +25,6 @@ public abstract class TileObject extends ObjectHandle {
     public abstract boolean isLoaded();
 
     public static abstract class  Source {
-        public abstract TileBitmapFilter getBitmapFilter();
         public abstract String getName();
         public abstract String getID(Tile aTile, Context context);
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/TileStackObject.java b/app/src/main/java/ch/bailu/aat/services/cache/TileStackObject.java
index 267ee56b..00267f9d 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/TileStackObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/TileStackObject.java
@@ -1,332 +1,332 @@
-package ch.bailu.aat.services.cache;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.drawable.Drawable;
-
-import org.mapsforge.core.graphics.TileBitmap;
-import org.mapsforge.core.model.Tile;
-import org.osmdroid.views.overlay.LoadingTile;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.ProcessHandle;
-import ch.bailu.aat.services.cache.TileObject.Source;
-import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.graphic.SyncTileBitmap;
-
-public class TileStackObject extends ObjectHandle {
-
-    public final static TileStackObject NULL=new TileStackObject();
-
-    private final TileContainer[] tiles;
-    private final SyncTileBitmap bitmap=new SyncTileBitmap();
-
-    private final static Paint paint = new Paint();
-
-    private ProcessHandle pendingUpdate=ProcessHandle.NULL;
-
-
-    private final Tile mapTile;
-
-
-    private boolean ready=false;
-
-    private TileStackObject() {
-        super(TileStackObject.class.getSimpleName());
-        tiles = new TileContainer[]{};
-        mapTile = new Tile(0,0,(byte)0,TileObject.TILE_SIZE);
-    }
-
-
-    public TileStackObject(String s,  TileContainer[] t, Tile m) {
-        super(s);
-        tiles = t;
-        mapTile=m;
-
-        paint.setColor(Color.WHITE);
-        paint.setStyle(Paint.Style.FILL);
-
-
-    }
-
-
-
-    @Override
-    public void onInsert(ServiceContext sc) {
-        sc.getCacheService().addToBroadcaster(this);
-        reupdate(sc);
-
-    }
-
-
-
-
-    @Override
-    public void onRemove(ServiceContext cs) {
-        bitmap.free();
-    }
-
-
-    @Override
-    public void lock(ServiceContext sc) {
-        super.lock(sc);
-        for (TileContainer tile: tiles) {
-            tile.lock(sc);
-        }
-    }
-
-
-    public void free() {
-        for (TileContainer tile: tiles) {
-            tile.free();
-        }
-        bitmap.free();
-        super.free();
-    }
-
-
-    private void reupdate(ServiceContext cs) {
-        ready=false;
-
-
-        if (areSubtilesReady()) {
-            pendingUpdate.stopLoading();
-            pendingUpdate = new ReUpdate();
-            cs.getBackgroundService().process(pendingUpdate);
-        }
-    }
-
-
-    @Override
-    public void onDownloaded(String id, String u, ServiceContext cs) {}
-
-
-    @Override
-    public void onChanged(String id, ServiceContext cs) {
-        if (haveID(id)) {
-            reupdate(cs);
-        }
-    }
-
-
-    private boolean haveID(String id) {
-        for (TileContainer tile: tiles) {
-            if (tile.id.equals(id)) return true;
-        }
-        return false;
-    }
-
-
-    /**
-     * Sub-tiles are either loaded _and_ painted or not yet downloaded 
-     */
-    @Override
-    public boolean isReady() {
-        return ready;
-    }
-
-
-    private boolean areSubtilesReady() {
-        for (TileContainer tile: tiles) {
-            if (tile.handle.isReady() == false) return false;
-        }
-
-        return true;
-    }
-
-    public Bitmap getBitmap() {
-        return bitmap.getAndroidBitmap();
-    }
-
-    public TileBitmap getTileBitmap() {
-        return bitmap.getTileBitmap();
-    }
-
-    public Drawable getDrawable(Resources res) {
-        return  bitmap.getDrawable(res);
-    }
-
-    private class ReUpdate extends ProcessHandle {
-        private final static int OVERLAY_ALPHA=150;
-        private final static int NULL_ALPHA=255;
-
-        public ReUpdate() {
-            super();
-        }
-
-        @Override
-        public long bgOnProcess() {
-            TileBitmap b = bgReupdate();
-            bitmap.set(b);
-            ready=true;
-            return bitmap.getSize();
-        }
-
-
-
-        private TileBitmap bgReupdate() {
-
-
-            SyncTileBitmap destination=new SyncTileBitmap();
-            Canvas canvas=null;
-            int alpha=NULL_ALPHA;
-
-            for (int i=0; i<tiles.length && canContinue(); i++) {
-                TileContainer tile=tiles[i];
-
-                Bitmap source=tile.getBitmap();
-
-                if (alpha == NULL_ALPHA && source == null) {
-                    source = LoadingTile.getBitmap();
-                }
-
-                if (source != null) {
-                    if (canvas == null) {
-                        destination.set(mapTile.tileSize, false);
-                        //destination.erase();
-                        canvas = destination.getAndroidCanvas();
-                    }
-                    tile.filter.applayFilter(canvas, source, alpha);
-                    alpha=OVERLAY_ALPHA;
-                }
-            }
-            return destination.getTileBitmap();
-        }
-
-        @Override
-        public String toString() {
-            return TileStackObject.this.toString();
-        }
-
-
-
-        @Override
-        public void broadcast(Context context) {
-            AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE,
-                    TileStackObject.this.toString());
-        }
-    }
-
-
-    @Override
-    public long getSize() {
-        return bitmap.getSize();
-    }
-
-
-    public void reDownload(ServiceContext sc) {
-        for (TileContainer tile : tiles) {
-            tile.reDownload(sc);
-        }
-    }
-
-    public Tile getTile() {
-        return mapTile;
-    }
-
-    public boolean isInStack(String id) {
-        for (TileContainer tile: tiles) {
-            if (tile.id.equals(id)) return true;
-        }
-        return false;
-    }
-
-
-
-
-    public static class TileContainer {
-        private final String id;
-        private final ObjectHandle.Factory factory;
-        private final TileBitmapFilter filter;
-
-
-        private ObjectHandle handle = ObjectHandle.NULL;
-
-        public TileContainer(String i, TileBitmapFilter fil, ObjectHandle.Factory f) {
-            id=i;
-            factory = f;
-            filter = fil;
-        }
-
-
-        public Bitmap getBitmap() {
-            if (TileObject.class.isInstance(handle)) {
-                return ((TileObject)handle).getBitmap();
-            }
-            return null;
-        }
-
-
-
-
-        public void lock(ServiceContext sc) {
-            handle = sc.getCacheService().getObject(id, factory);
-        }
-
-
-        public void free() {
-
-            handle.free();
-            handle = ObjectHandle.NULL;
-        }
-
-        public void reDownload(ServiceContext sc) {
-            if (TileObject.class.isInstance(handle)) {
-                ((TileObject)handle).reDownload(sc);
-            }
-        }
-    }
-
-
-
-    public static class Factory extends ObjectHandle.Factory {
-        private final TileContainer[] tiles;
-        private final Tile mapTile;
-
-
-
-        public Factory(Context context, Tile mt, Source s[]) {
-            mapTile = mt;
-            int count=0;
-
-
-            for (Source value1 : s) {
-                if (isZoomLevelSupported(value1)) {
-                    count++;
-                }
-            }
-
-            tiles = new TileContainer[count];
-
-            int x=0;
-            for (Source value : s) {
-                if (isZoomLevelSupported(value)) {
-                    tiles[x] = new TileContainer(
-                            value.getID(mapTile, context),
-                            value.getBitmapFilter(),
-                            value.getFactory(mapTile));
-                    x++;
-                }
-            }
-
-
-        }
-
-
-        boolean isZoomLevelSupported(Source s) {
-            final int z = mapTile.zoomLevel;
-            return (s.getMaximumZoomLevel()>=z && s.getMinimumZoomLevel()<=z);
-        }
-        @Override
-        public ObjectHandle factory(String id, ServiceContext cs) {
-            return new TileStackObject(id, tiles, mapTile);
-        }
-    }
-
-
-
-}
+//package ch.bailu.aat.services.cache;
+//
+//import android.content.Context;
+//import android.content.res.Resources;
+//import android.graphics.Bitmap;
+//import android.graphics.Canvas;
+//import android.graphics.Color;
+//import android.graphics.Paint;
+//import android.graphics.drawable.Drawable;
+//
+//import org.mapsforge.core.graphics.TileBitmap;
+//import org.mapsforge.core.model.Tile;
+//import org.osmdroid.views.overlay.LoadingTile;
+//
+//import ch.bailu.aat.services.ServiceContext;
+//import ch.bailu.aat.services.background.ProcessHandle;
+//import ch.bailu.aat.services.cache.TileObject.Source;
+//import ch.bailu.aat.util.AppBroadcaster;
+//import ch.bailu.aat.util.graphic.SyncTileBitmap;
+//
+//public class TileStackObject extends ObjectHandle {
+//
+//    public final static TileStackObject NULL=new TileStackObject();
+//
+//    private final TileContainer[] tiles;
+//    private final SyncTileBitmap bitmap=new SyncTileBitmap();
+//
+//    private final static Paint paint = new Paint();
+//
+//    private ProcessHandle pendingUpdate=ProcessHandle.NULL;
+//
+//
+//    private final Tile mapTile;
+//
+//
+//    private boolean ready=false;
+//
+//    private TileStackObject() {
+//        super(TileStackObject.class.getSimpleName());
+//        tiles = new TileContainer[]{};
+//        mapTile = new Tile(0,0,(byte)0,TileObject.TILE_SIZE);
+//    }
+//
+//
+//    public TileStackObject(String s,  TileContainer[] t, Tile m) {
+//        super(s);
+//        tiles = t;
+//        mapTile=m;
+//
+//        paint.setColor(Color.WHITE);
+//        paint.setStyle(Paint.Style.FILL);
+//
+//
+//    }
+//
+//
+//
+//    @Override
+//    public void onInsert(ServiceContext sc) {
+//        sc.getCacheService().addToBroadcaster(this);
+//        reupdate(sc);
+//
+//    }
+//
+//
+//
+//
+//    @Override
+//    public void onRemove(ServiceContext cs) {
+//        bitmap.free();
+//    }
+//
+//
+//    @Override
+//    public void lock(ServiceContext sc) {
+//        super.lock(sc);
+//        for (TileContainer tile: tiles) {
+//            tile.lock(sc);
+//        }
+//    }
+//
+//
+//    public void free() {
+//        for (TileContainer tile: tiles) {
+//            tile.free();
+//        }
+//        bitmap.free();
+//        super.free();
+//    }
+//
+//
+//    private void reupdate(ServiceContext cs) {
+//        ready=false;
+//
+//
+//        if (areSubtilesReady()) {
+//            pendingUpdate.stopLoading();
+//            pendingUpdate = new ReUpdate();
+//            cs.getBackgroundService().process(pendingUpdate);
+//        }
+//    }
+//
+//
+//    @Override
+//    public void onDownloaded(String id, String u, ServiceContext cs) {}
+//
+//
+//    @Override
+//    public void onChanged(String id, ServiceContext cs) {
+//        if (haveID(id)) {
+//            reupdate(cs);
+//        }
+//    }
+//
+//
+//    private boolean haveID(String id) {
+//        for (TileContainer tile: tiles) {
+//            if (tile.id.equals(id)) return true;
+//        }
+//        return false;
+//    }
+//
+//
+//    /**
+//     * Sub-tiles are either loaded _and_ painted or not yet downloaded
+//     */
+//    @Override
+//    public boolean isReady() {
+//        return ready;
+//    }
+//
+//
+//    private boolean areSubtilesReady() {
+//        for (TileContainer tile: tiles) {
+//            if (tile.handle.isReady() == false) return false;
+//        }
+//
+//        return true;
+//    }
+//
+//    public Bitmap getBitmap() {
+//        return bitmap.getAndroidBitmap();
+//    }
+//
+//    public TileBitmap getTileBitmap() {
+//        return bitmap.getTileBitmap();
+//    }
+//
+//    public Drawable getDrawable(Resources res) {
+//        return  bitmap.getDrawable(res);
+//    }
+//
+//    private class ReUpdate extends ProcessHandle {
+//        private final static int OVERLAY_ALPHA=150;
+//        private final static int NULL_ALPHA=255;
+//
+//        public ReUpdate() {
+//            super();
+//        }
+//
+//        @Override
+//        public long bgOnProcess() {
+//            TileBitmap b = bgReupdate();
+//            bitmap.set(b);
+//            ready=true;
+//            return bitmap.getSize();
+//        }
+//
+//
+//
+//        private TileBitmap bgReupdate() {
+//
+//
+//            SyncTileBitmap destination=new SyncTileBitmap();
+//            Canvas canvas=null;
+//            int alpha=NULL_ALPHA;
+//
+//            for (int i=0; i<tiles.length && canContinue(); i++) {
+//                TileContainer tile=tiles[i];
+//
+//                Bitmap source=tile.getBitmap();
+//
+//                if (alpha == NULL_ALPHA && source == null) {
+//                    source = LoadingTile.getBitmap();
+//                }
+//
+//                if (source != null) {
+//                    if (canvas == null) {
+//                        destination.set(mapTile.tileSize, false);
+//                        //destination.erase();
+//                        canvas = destination.getAndroidCanvas();
+//                    }
+//                    tile.filter.applayFilter(canvas, source, alpha);
+//                    alpha=OVERLAY_ALPHA;
+//                }
+//            }
+//            return destination.getTileBitmap();
+//        }
+//
+//        @Override
+//        public String toString() {
+//            return TileStackObject.this.toString();
+//        }
+//
+//
+//
+//        @Override
+//        public void broadcast(Context context) {
+//            AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_INCACHE,
+//                    TileStackObject.this.toString());
+//        }
+//    }
+//
+//
+//    @Override
+//    public long getSize() {
+//        return bitmap.getSize();
+//    }
+//
+//
+//    public void reDownload(ServiceContext sc) {
+//        for (TileContainer tile : tiles) {
+//            tile.reDownload(sc);
+//        }
+//    }
+//
+//    public Tile getTile() {
+//        return mapTile;
+//    }
+//
+//    public boolean isInStack(String id) {
+//        for (TileContainer tile: tiles) {
+//            if (tile.id.equals(id)) return true;
+//        }
+//        return false;
+//    }
+//
+//
+//
+//
+//    public static class TileContainer {
+//        private final String id;
+//        private final ObjectHandle.Factory factory;
+//        private final TileBitmapFilter filter;
+//
+//
+//        private ObjectHandle handle = ObjectHandle.NULL;
+//
+//        public TileContainer(String i, TileBitmapFilter fil, ObjectHandle.Factory f) {
+//            id=i;
+//            factory = f;
+//            filter = fil;
+//        }
+//
+//
+//        public Bitmap getBitmap() {
+//            if (TileObject.class.isInstance(handle)) {
+//                return ((TileObject)handle).getBitmap();
+//            }
+//            return null;
+//        }
+//
+//
+//
+//
+//        public void lock(ServiceContext sc) {
+//            handle = sc.getCacheService().getObject(id, factory);
+//        }
+//
+//
+//        public void free() {
+//
+//            handle.free();
+//            handle = ObjectHandle.NULL;
+//        }
+//
+//        public void reDownload(ServiceContext sc) {
+//            if (TileObject.class.isInstance(handle)) {
+//                ((TileObject)handle).reDownload(sc);
+//            }
+//        }
+//    }
+//
+//
+//
+//    public static class Factory extends ObjectHandle.Factory {
+//        private final TileContainer[] tiles;
+//        private final Tile mapTile;
+//
+//
+//
+//        public Factory(Context context, Tile mt, Source s[]) {
+//            mapTile = mt;
+//            int count=0;
+//
+//
+//            for (Source value1 : s) {
+//                if (isZoomLevelSupported(value1)) {
+//                    count++;
+//                }
+//            }
+//
+//            tiles = new TileContainer[count];
+//
+//            int x=0;
+//            for (Source value : s) {
+//                if (isZoomLevelSupported(value)) {
+//                    tiles[x] = new TileContainer(
+//                            value.getID(mapTile, context),
+//                            value.getBitmapFilter(),
+//                            value.getFactory(mapTile));
+//                    x++;
+//                }
+//            }
+//
+//
+//        }
+//
+//
+//        boolean isZoomLevelSupported(Source s) {
+//            final int z = mapTile.zoomLevel;
+//            return (s.getMaximumZoomLevel()>=z && s.getMinimumZoomLevel()<=z);
+//        }
+//        @Override
+//        public ObjectHandle factory(String id, ServiceContext cs) {
+//            return new TileStackObject(id, tiles, mapTile);
+//        }
+//    }
+//
+//
+//
+//}
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
index 6a377fda..e9e38e2a 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tile.java
@@ -2,7 +2,8 @@ package ch.bailu.aat.services.dem;
 
 import android.content.Context;
 
-import org.osmdroid.util.GeoPoint;
+import org.mapsforge.core.model.LatLong;
+import org.mapsforge.core.util.LatLongUtils;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
@@ -11,10 +12,10 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 import ch.bailu.aat.coordinates.SrtmCoordinates;
-import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.services.background.ProcessHandle;
+import ch.bailu.aat.util.AppBroadcaster;
 
 public class Dem3Tile implements ElevationProvider, DemProvider {
     
@@ -246,9 +247,11 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
     
     @Override
     public float getCellsize() {
-        final float fdistance = GeoPoint.distanceBetween(
-                coordinates.getLatitudeE6()/1e6, REF_LO_1, 
-                coordinates.getLatitudeE6()/1e6, REF_LO_2);
+
+
+        final float fdistance = (float) LatLongUtils.sphericalDistance(
+                new LatLong(coordinates.getLatitudeE6()/1e6, REF_LO_1),
+                new LatLong(coordinates.getLatitudeE6()/1e6, REF_LO_2));
         
         float idistance = fdistance / (DIMENSION.DIM-DIMENSION.OFFSET);
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
index 0127110e..320afa44 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
@@ -6,13 +6,12 @@ import android.content.Context;
 import android.content.Intent;
 import android.database.Cursor;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.interfaces.GpxBigDeltaInterface;
 import ch.bailu.aat.map.mapsforge.MapsForgePreview;
@@ -311,7 +310,7 @@ public class DirectorySynchronizer  implements Closeable {
         private ContentValues createContentValues(String pathname, String filename, 
                 GpxBigDeltaInterface summary) {
 
-            BoundingBoxOsm box = summary.getBoundingBox().toBoundingBoxE6();
+            BoundingBoxE6 box = summary.getBoundingBox();
 
             ContentValues content = new ContentValues();
             content.put(GpxDbConstants.KEY_PATHNAME_OLD,   pathname);
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
index 680a6eb4..79aaf8a3 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
@@ -36,7 +36,7 @@ public class GpxInformationDbSummary extends GpxInformation {
 
     private void addEntryToList(GpxInformation entry, Cursor cursor) {
         final GpxPoint point = new GpxPoint(
-                entry.getBoundingBox().toBoundingBoxE6().getCenter(),
+                entry.getBoundingBox().getCenter(),
                 0, entry.getTimeStamp());
 
         list.appendToCurrentSegment(point, GpxAttributesStatic.NULL_ATTRIBUTES);
diff --git a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
index 532108ff..85f6c550 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
@@ -163,10 +163,10 @@ public class MockLocation extends LocationStackChainedItem implements Runnable{
         public float getAccuracy() {
             return 5f;
         }
-        @Override
-        public double getBearing() {
-            return node.getBearing();
-        }
+//        @Override
+//        public double getBearing() {
+//            return node.getBearing();
+//        }
     }
     
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/location/RealLocation.java b/app/src/main/java/ch/bailu/aat/services/location/RealLocation.java
index 88de55a2..55ef4eff 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/RealLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/RealLocation.java
@@ -69,10 +69,10 @@ public class RealLocation extends LocationStackChainedItem
             return location.getLongitude();
         }
 
-        @Override
-        public double getBearing() {
-            return location.getBearing();
-        }
+//        @Override
+//        public double getBearing() {
+//            return location.getBearing();
+//        }
         @Override
         public long getTimeStamp() {
             return location.getTime();
diff --git a/app/src/main/java/ch/bailu/aat/test/TestCoordinates.java b/app/src/main/java/ch/bailu/aat/test/TestCoordinates.java
index 75f5f183..2a87c799 100644
--- a/app/src/main/java/ch/bailu/aat/test/TestCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/test/TestCoordinates.java
@@ -2,9 +2,8 @@ package ch.bailu.aat.test;
 
 import android.content.Context;
 
-import org.osmdroid.util.GeoPoint;
-
 import ch.bailu.aat.coordinates.CH1903Coordinates;
+import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.coordinates.UTMCoordinates;
 
 public class TestCoordinates extends UnitTest {
@@ -36,7 +35,7 @@ public class TestCoordinates extends UnitTest {
         assertEquals(e, utm.getEasting());
         assertEquals((la <0), utm.isInSouthernHemnisphere());
         
-        GeoPoint p=utm.toGeoPoint();
+        LatLongE6 p=utm.toLatLongE6();
         assertEquals((int)la*1000, (int)(p.getLatitudeE6()/1e6)*1000);
         assertEquals((int)lo*1000, (int)(p.getLongitudeE6()/1e6)*1000);
         
@@ -49,7 +48,7 @@ public class TestCoordinates extends UnitTest {
         int e=CH1903Coordinates.BERNE_SIY;
         
         CH1903Coordinates ch1 = new CH1903Coordinates(e,n);
-        CH1903Coordinates ch2 = new CH1903Coordinates(ch1.toGeoPoint());
+        CH1903Coordinates ch2 = new CH1903Coordinates(ch1.toLatLongE6());
 
         assertEquals(n, ch2.getNorthing());
         assertEquals(e, ch2.getEasting());
@@ -63,7 +62,7 @@ public class TestCoordinates extends UnitTest {
         assertEquals(100000, ch4.getNorthing());
         */
         
-        //GeoPoint p = ch4.toGeoPoint();
+        //GeoPoint p = ch4.toLatLongE6();
         //assertEquals((int)Math.round(Sexagesimal.toDecimalDegree(46, 2, 38.87f)*1e6d), p.getLatitudeE6());
         
     }
diff --git a/app/src/main/java/ch/bailu/aat/util/AppIntent.java b/app/src/main/java/ch/bailu/aat/util/AppIntent.java
index b41dd50b..b82727da 100644
--- a/app/src/main/java/ch/bailu/aat/util/AppIntent.java
+++ b/app/src/main/java/ch/bailu/aat/util/AppIntent.java
@@ -3,7 +3,8 @@ package ch.bailu.aat.util;
 import android.content.Intent;
 
 import org.mapsforge.core.model.BoundingBox;
-import org.osmdroid.util.BoundingBoxOsm;
+
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 
 public class AppIntent {
     private static final String EXTRA_FILE="file";
@@ -48,7 +49,7 @@ public class AppIntent {
 
 
 
-    public static void setBoundingBox(Intent intent, BoundingBoxOsm box) {
+    public static void setBoundingBox(Intent intent, BoundingBoxE6 box) {
         intent.putExtra("N", box.getLatNorthE6());
         intent.putExtra("E", box.getLonEastE6());
         intent.putExtra("S", box.getLatSouthE6());
@@ -56,8 +57,8 @@ public class AppIntent {
 
     }
 
-    public static BoundingBoxOsm getBoundingBox(Intent intent) {
-        return new BoundingBoxOsm(
+    public static BoundingBoxE6 getBoundingBox(Intent intent) {
+        return new BoundingBoxE6(
                 intent.getIntExtra("N",0),
                 intent.getIntExtra("E",0),
                 intent.getIntExtra("S",0),
diff --git a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
index 7f5c2d93..c5e81c24 100644
--- a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
@@ -2,12 +2,11 @@ package ch.bailu.aat.util;
 
 import android.content.Context;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.File;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.fs.AppDirectory;
 
 public class NominatimApi extends OsmApiHelper {
@@ -20,14 +19,14 @@ public class NominatimApi extends OsmApiHelper {
     private final File directory;
     private final String bounding;
     
-    public NominatimApi(Context context, BoundingBoxOsm boundingBox) {
+    public NominatimApi(Context context, BoundingBoxE6 boundingBox) {
         directory = AppDirectory.getDataDirectory(context, AppDirectory.DIR_NOMINATIM);
         bounding = toString(boundingBox);
     }
     
     
 
-    private static String toString(BoundingBoxOsm b) {
+    private static String toString(BoundingBoxE6 b) {
         if (b.getLatitudeSpanE6()>0 && b.getLongitudeSpanE6() > 0) {
             return 
                     "&bounded=1&viewbox=" + 
diff --git a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
index c3080f2b..efad8829 100644
--- a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
@@ -2,8 +2,6 @@ package ch.bailu.aat.util;
 
 import android.content.Context;
 
-import org.osmdroid.util.BoundingBoxOsm;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
@@ -11,6 +9,7 @@ import java.net.URLEncoder;
 import java.util.Locale;
 
 import ch.bailu.aat.R;
+import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.fs.AppDirectory;
 
 public class OverpassApi extends OsmApiHelper {
@@ -26,7 +25,7 @@ public class OverpassApi extends OsmApiHelper {
 
 
     
-    public OverpassApi(Context context, BoundingBoxOsm b) throws SecurityException, IOException {
+    public OverpassApi(Context context, BoundingBoxE6 b) throws SecurityException, IOException {
         NAME=context.getString(R.string.query_overpass);
         bounding = toString(b);
         directory = AppDirectory.getDataDirectory(context, AppDirectory.DIR_OVERPASS);
@@ -40,7 +39,7 @@ public class OverpassApi extends OsmApiHelper {
 
     
     
-    private static String toString(BoundingBoxOsm bounding) {
+    private static String toString(BoundingBoxE6 bounding) {
         final double lo1 = bounding.getLonWestE6()/1E6;
         final double la1 = bounding.getLatSouthE6()/1E6;
         final double lo2 = bounding.getLonEastE6()/1E6;
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
index fa986c10..b12e19f0 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
@@ -3,8 +3,6 @@ package ch.bailu.aat.util.fs;
 import android.content.Context;
 
 import org.mapsforge.core.model.Tile;
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -98,9 +96,8 @@ public class AppDirectory  {
 
     
     /////////////////////////////////////////////////////////////////////////////////////////////////
-    public static File getTileFile(Tile tile, OnlineTileSourceBase source, Context context) {
-        String tileName = source.getTileRelativeFilenameString(new MapTile(tile.zoomLevel, tile.tileX, tile.tileY));
-        return new File(getTileCacheDirectory(context), tileName);
+    public static File getTileFile(Tile tile, String tilePath, Context context) {
+        return new File(getTileCacheDirectory(context), tilePath);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
index 3d6fb926..6fa13ec1 100644
--- a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
+++ b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
@@ -10,9 +10,6 @@ import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.map.layer.gpx.GpxDynLayer;
 import ch.bailu.aat.map.mapsforge.MapsForgeViewStatic;
-import ch.bailu.aat.map.tile.TileProviderCached;
-import ch.bailu.aat.map.MapDensity;
-import ch.bailu.aat.map.osmdroid.OsmViewStatic;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppHtml;
 import ch.bailu.aat.util.HtmlBuilderGpx;
diff --git a/app/src/main/java/microsoft/mappoint/TileSystem.java b/app/src/main/java/microsoft/mappoint/TileSystem.java
deleted file mode 100644
index 9320d607..00000000
--- a/app/src/main/java/microsoft/mappoint/TileSystem.java
+++ /dev/null
@@ -1,282 +0,0 @@
-package microsoft.mappoint;
-
-/*
- * http://msdn.microsoft.com/en-us/library/bb259689.aspx
- *
- * Copyright (c) 2006-2009 Microsoft Corporation.  All rights reserved.
- *
- *
- */
-
-import android.graphics.Point;
-
-import org.osmdroid.util.GeoPoint;
-
-/**
- * This class provides methods to handle the Mercator projection that is used for the osmdroid tile
- * system.
- */
-public final class TileSystem {
-
-    private  int mTileSize = 256;
-    private static final double EarthRadius = 6378137;
-    private static final double MinLatitude = -85.05112878;
-    private static final double MaxLatitude = 85.05112878;
-    private static final double MinLongitude = -180;
-    private static final double MaxLongitude = 180;
-
-    public void setTileSize(final int tileSize) {
-        mTileSize = tileSize;
-    }
-
-    public int getTileSize() {
-        return mTileSize;
-    }
-
-    /**
-     * Clips a number to the specified minimum and maximum values.
-     * 
-     * @param n
-     *            The number to clip
-     * @param minValue
-     *            Minimum allowable value
-     * @param maxValue
-     *            Maximum allowable value
-     * @return The clipped value.
-     */
-    private static double Clip(final double n, final double minValue, final double maxValue) {
-        return Math.min(Math.max(n, minValue), maxValue);
-    }
-
-    /**
-     * Determines the map width and height (in pixels) at a specified level of detail.
-     * 
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @return The map width and height in pixels
-     */
-
-    public int MapSize(final int levelOfDetail) {
-        return mTileSize << levelOfDetail;
-    }
-
-    /**
-     * Determines the ground resolution (in meters per pixel) at a specified latitude and level of
-     * detail.
-     * 
-     * @param latitude
-     *            Latitude (in degrees) at which to measure the ground resolution
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @return The ground resolution, in meters per pixel
-     */
-    public double GroundResolution(double latitude, final int levelOfDetail) {
-        latitude = Clip(latitude, MinLatitude, MaxLatitude);
-        return Math.cos(latitude * Math.PI / 180) * 2 * Math.PI * EarthRadius
-                / MapSize(levelOfDetail);
-    }
-
-    /**
-     * Determines the map scale at a specified latitude, level of detail, and screen resolution.
-     * 
-     * @param latitude
-     *            Latitude (in degrees) at which to measure the map scale
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @param screenDpi
-     *            Resolution of the screen, in dots per inch
-     * @return The map scale, expressed as the denominator N of the ratio 1 : N
-     */
-    public double MapScale(final double latitude, final int levelOfDetail,
-            final int screenDpi) {
-        return GroundResolution(latitude, levelOfDetail) * screenDpi / 0.0254;
-    }
-
-    /**
-     * Converts a point from latitude/longitude WGS-84 coordinates (in degrees) into pixel XY
-     * coordinates at a specified level of detail.
-     * 
-     * @param latitude
-     *            Latitude of the point, in degrees
-     * @param longitude
-     *            Longitude of the point, in degrees
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @param reuse
-     *            An optional Point to be recycled, or null to create a new one automatically
-     * @return Output parameter receiving the X and Y coordinates in pixels
-     */
-    public Point LatLongToPixelXY(double latitude, double longitude,
-            final int levelOfDetail, final Point reuse) {
-        final Point out = (reuse == null ? new Point() : reuse);
-
-        latitude = Clip(latitude, MinLatitude, MaxLatitude);
-        longitude = Clip(longitude, MinLongitude, MaxLongitude);
-
-        final double x = (longitude + 180) / 360;
-        final double sinLatitude = Math.sin(latitude * Math.PI / 180);
-        final double y = 0.5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (4 * Math.PI);
-
-        final int mapSize = MapSize(levelOfDetail);
-        out.x = (int) Clip(x * mapSize + 0.5, 0, mapSize - 1);
-        out.y = (int) Clip(y * mapSize + 0.5, 0, mapSize - 1);
-        return out;
-    }
-
-    /**
-     * Converts a pixel from pixel XY coordinates at a specified level of detail into
-     * latitude/longitude WGS-84 coordinates (in degrees).
-     * 
-     * @param pixelX
-     *            X coordinate of the point, in pixels
-     * @param pixelY
-     *            Y coordinate of the point, in pixels
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @param reuse
-     *            An optional GeoPoint to be recycled, or null to create a new one automatically
-     * @return Output parameter receiving the latitude and longitude in degrees.
-     */
-    public GeoPoint PixelXYToLatLong(final int pixelX, final int pixelY,
-            final int levelOfDetail, final GeoPoint reuse) {
-        final GeoPoint out = (reuse == null ? new GeoPoint(0, 0) : reuse);
-
-        final double mapSize = MapSize(levelOfDetail);
-        final double x = (Clip(pixelX, 0, mapSize - 1) / mapSize) - 0.5;
-        final double y = 0.5 - (Clip(pixelY, 0, mapSize - 1) / mapSize);
-
-        final double latitude = 90 - 360 * Math.atan(Math.exp(-y * 2 * Math.PI)) / Math.PI;
-        final double longitude = 360 * x;
-
-        out.setLatitudeE6((int) (latitude * 1E6));
-        out.setLongitudeE6((int) (longitude * 1E6));
-        return out;
-    }
-
-    
-    public static GeoPoint PixelXYToLatLong(final int pixelX, final int pixelY,
-            final int levelOfDetail, final int tileSize,final GeoPoint reuse) {
-        final GeoPoint out = (reuse == null ? new GeoPoint(0, 0) : reuse);
-
-        final double mapSize = tileSize << levelOfDetail;
-        final double x = (Clip(pixelX, 0, mapSize - 1) / mapSize) - 0.5;
-        final double y = 0.5 - (Clip(pixelY, 0, mapSize - 1) / mapSize);
-
-        final double latitude = 90 - 360 * Math.atan(Math.exp(-y * 2 * Math.PI)) / Math.PI;
-        final double longitude = 360 * x;
-
-        out.setLatitudeE6((int) (latitude * 1E6));
-        out.setLongitudeE6((int) (longitude * 1E6));
-        return out;
-    }
-
-    /**
-     * Converts pixel XY coordinates into tile XY coordinates of the tile containing the specified
-     * pixel.
-     * 
-     * @param pixelX
-     *            Pixel X coordinate
-     * @param pixelY
-     *            Pixel Y coordinate
-     * @param reuse
-     *            An optional Point to be recycled, or null to create a new one automatically
-     * @return Output parameter receiving the tile X and Y coordinates
-     */
-    public Point PixelXYToTileXY(final int pixelX, final int pixelY, final Point reuse) {
-        final Point out = (reuse == null ? new Point() : reuse);
-
-        out.x = pixelX / mTileSize;
-        out.y = pixelY / mTileSize;
-        return out;
-    }
-
-    /**
-     * Converts tile XY coordinates into pixel XY coordinates of the upper-left pixel of the
-     * specified tile.
-     * 
-     * @param tileX
-     *            Tile X coordinate
-     * @param tileY
-     *            Tile X coordinate
-     * @param reuse
-     *            An optional Point to be recycled, or null to create a new one automatically
-     * @return Output parameter receiving the pixel X and Y coordinates
-     */
-    public Point TileXYToPixelXY(final int tileX, final int tileY, final Point reuse) {
-        final Point out = (reuse == null ? new Point() : reuse);
-
-        out.x = tileX * mTileSize;
-        out.y = tileY * mTileSize;
-        return out;
-    }
-
-    /**
-     * Converts tile XY coordinates into a QuadKey at a specified level of detail.
-     * 
-     * @param tileX
-     *            Tile X coordinate
-     * @param tileY
-     *            Tile Y coordinate
-     * @param levelOfDetail
-     *            Level of detail, from 1 (lowest detail) to 23 (highest detail)
-     * @return A string containing the QuadKey
-     */
-    public static String TileXYToQuadKey(final int tileX, final int tileY, final int levelOfDetail) {
-        final StringBuilder quadKey = new StringBuilder();
-        for (int i = levelOfDetail; i > 0; i--) {
-            char digit = '0';
-            final int mask = 1 << (i - 1);
-            if ((tileX & mask) != 0) {
-                digit++;
-            }
-            if ((tileY & mask) != 0) {
-                digit++;
-                digit++;
-            }
-            quadKey.append(digit);
-        }
-        return quadKey.toString();
-    }
-
-    /**
-     * Converts a QuadKey into tile XY coordinates.
-     * 
-     * @param quadKey
-     *            QuadKey of the tile
-     * @param reuse
-     *            An optional Point to be recycled, or null to create a new one automatically
-     * @return Output parameter receiving the tile X and y coordinates
-     */
-    public static Point QuadKeyToTileXY(final String quadKey, final Point reuse) {
-        final Point out = (reuse == null ? new Point() : reuse);
-        int tileX = 0;
-        int tileY = 0;
-
-        final int levelOfDetail = quadKey.length();
-        for (int i = levelOfDetail; i > 0; i--) {
-            final int mask = 1 << (i - 1);
-            switch (quadKey.charAt(levelOfDetail - i)) {
-            case '0':
-                break;
-
-            case '1':
-                tileX |= mask;
-                break;
-
-            case '2':
-                tileY |= mask;
-                break;
-
-            case '3':
-                tileX |= mask;
-                tileY |= mask;
-                break;
-
-            default:
-                throw new IllegalArgumentException("Invalid QuadKey digit sequence.");
-            }
-        }
-        out.set(tileX, tileY);
-        return out;
-    }
-}
diff --git a/app/src/main/java/org/osmdroid/api/IGeoPoint.java b/app/src/main/java/org/osmdroid/api/IGeoPoint.java
deleted file mode 100644
index e9a54dd3..00000000
--- a/app/src/main/java/org/osmdroid/api/IGeoPoint.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.osmdroid.api;
-
-import org.osmdroid.util.GeoPoint;
-
-/**
- * An interface that resembles the Google Maps API GeoPoint class
- * and is implemented by the osmdroid {@link GeoPoint} class.
- *
- * @author Neil Boyd
- *
- */
-public interface IGeoPoint {
-	int getLatitudeE6();
-	int getLongitudeE6();
-}
diff --git a/app/src/main/java/org/osmdroid/api/IMapController.java b/app/src/main/java/org/osmdroid/api/IMapController.java
deleted file mode 100644
index 65e7611a..00000000
--- a/app/src/main/java/org/osmdroid/api/IMapController.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.osmdroid.api;
-
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.views.MapController;
-
-/**
- * An interface that resembles the Google Maps API MapController class
- * and is implemented by the osmdroid {@link MapController} class.
- *
- * @author Neil Boyd
- *
- */
-public interface IMapController {
-
-	void setCenter(IGeoPoint point);
-	int setZoom(int zoomLevel);
-	boolean zoomIn();
-	boolean zoomOut();
-	void zoomToSpan(int latSpanE6, int lonSpanE6);
-	void zoomToSpan(BoundingBoxOsm bounding);
-}
diff --git a/app/src/main/java/org/osmdroid/api/IMapView.java b/app/src/main/java/org/osmdroid/api/IMapView.java
deleted file mode 100644
index 38a38071..00000000
--- a/app/src/main/java/org/osmdroid/api/IMapView.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package org.osmdroid.api;
-
-import org.osmdroid.views.MapView;
-
-/**
- * An interface that resembles the Google Maps API MapView class
- * and is implemented by the osmdroid {@link MapView} class.
- *
- * @author Neil Boyd
- *
- */
-public interface IMapView {
-
-	IMapController getController();
-	IProjection getProjection();
-	int getZoomLevel();
-	int getMaxZoomLevel();
-	int getLatitudeSpan();
-	int getLongitudeSpan();
-	IGeoPoint getMapCenter();
-
-	// some methods from View
-	// (well, just one for now)
-	void setBackgroundColor(int color);
-
-}
diff --git a/app/src/main/java/org/osmdroid/api/IProjection.java b/app/src/main/java/org/osmdroid/api/IProjection.java
deleted file mode 100644
index d9de7d7f..00000000
--- a/app/src/main/java/org/osmdroid/api/IProjection.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.osmdroid.api;
-
-import android.graphics.Point;
-
-
-/**
- * An interface that resembles the Google Maps API Projection interface and is implemented by the
- * osmdroid {@link Projection} class.
- *
- * @author Neil Boyd
- *
- */
-public interface IProjection {
-
-	/**
-	 * Converts the given GeoPoint to onscreen pixel coordinates, relative to the top-left of the
-	 * MapView that provided this Projection.
-	 *
-	 * @param in
-	 *            The latitude/longitude pair to convert.
-	 * @param out
-	 *            A pre-existing object to use for the output; if null, a new Point will be
-	 *            allocated and returned.
-	 * @return
-	 */
-	Point toPixels(IGeoPoint in, Point out);
-
-	/**
-	 * Create a new GeoPoint from pixel coordinates relative to the top-left of the MapView that
-	 * provided this PixelConverter.
-	 */
-	IGeoPoint fromPixels(int x, int y);
-
-	/**
-	 * Converts a distance in meters (along the equator) to one in (horizontal) pixels at the
-	 * current zoomlevel. In the default Mercator projection, the actual number of pixels for a
-	 * given distance will getDrawable higher as you move away from the equator.
-	 *
-	 * @param meters
-	 *            the distance in meters
-	 * @return The number of pixels corresponding to the distance, if measured along the equator, at
-	 *         the current zoom level. The return value may only be approximate.
-	 */
-	float metersToEquatorPixels(float meters);
-
-}
diff --git a/app/src/main/java/org/osmdroid/events/MapListener.java b/app/src/main/java/org/osmdroid/events/MapListener.java
deleted file mode 100644
index 800418c7..00000000
--- a/app/src/main/java/org/osmdroid/events/MapListener.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.osmdroid.events;
-
-/*
- * The listener interface for receiving map movement events. To process a map event, either implement
- * this interface or extend MapAdapter, then register with the MapView using
- * setMapListener.
- *
- * @author Theodore Hong
- */
-public interface MapListener {
-	/*
-	 * Called when a map is scrolled.
-	 */
-	public boolean onScroll(ScrollEvent event);
-
-	/*
-	 * Called when a map is zoomed.
-	 */
-	public boolean onZoom(ZoomEvent event);
-}
diff --git a/app/src/main/java/org/osmdroid/events/ScrollEvent.java b/app/src/main/java/org/osmdroid/events/ScrollEvent.java
deleted file mode 100644
index d0ddd481..00000000
--- a/app/src/main/java/org/osmdroid/events/ScrollEvent.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package org.osmdroid.events;
-
-import org.osmdroid.views.MapView;
-
-/*
- * The event generated when a map has finished scrolling to the coordinates (<code>x</code>,<code>y</code>).
- *
- * @author Theodore Hong
- */
-public class ScrollEvent {
-	protected MapView source;
-	protected int x;
-	protected int y;
-
-	public ScrollEvent(final MapView source, final int x, final int y) {
-		this.source = source;
-		this.x = x;
-		this.y = y;
-	}
-
-	/*
-	 * Return the map which generated this event.
-	 */
-	public MapView getSource() {
-		return source;
-	}
-
-	/*
-	 * Return the x-coordinate scrolled to.
-	 */
-	public int getX() {
-		return x;
-	}
-
-	/*
-	 * Return the y-coordinate scrolled to.
-	 */
-	public int getY() {
-		return y;
-	}
-
-	@Override
-	public String toString() {
-		return "ScrollEvent [source=" + source + ", x=" + x + ", y=" + y + "]";
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/events/ZoomEvent.java b/app/src/main/java/org/osmdroid/events/ZoomEvent.java
deleted file mode 100644
index 8a31df96..00000000
--- a/app/src/main/java/org/osmdroid/events/ZoomEvent.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package org.osmdroid.events;
-
-import org.osmdroid.views.MapView;
-
-/*
- * The event generated when a map has finished zooming to the level <code>zoomLevel</code>.
- *
- * @author Theodore Hong
- */
-public class ZoomEvent  {
-	protected MapView source;
-	protected int zoomLevel;
-
-	public ZoomEvent(final MapView source, final int zoomLevel) {
-		this.source = source;
-		this.zoomLevel = zoomLevel;
-	}
-
-	/*
-	 * Return the map which generated this event.
-	 */
-	public MapView getSource() {
-		return source;
-	}
-
-	/*
-	 * Return the zoom level zoomed to.
-	 */
-	public int getZoomLevel() {
-		return zoomLevel;
-	}
-
-	@Override
-	public String toString() {
-		return "ZoomEvent [source=" + source + ", zoomLevel=" + zoomLevel + "]";
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/IRegisterReceiver.java b/app/src/main/java/org/osmdroid/tileprovider/IRegisterReceiver.java
deleted file mode 100644
index 4c5cc4f6..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/IRegisterReceiver.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package org.osmdroid.tileprovider;
-
-import android.content.BroadcastReceiver;
-import android.content.Intent;
-import android.content.IntentFilter;
-
-public interface IRegisterReceiver {
-
-	Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
-
-	void unregisterReceiver(BroadcastReceiver receiver);
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/MapTile.java b/app/src/main/java/org/osmdroid/tileprovider/MapTile.java
deleted file mode 100644
index a6e5b53b..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/MapTile.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package org.osmdroid.tileprovider;
-
-import org.osmdroid.views.overlay.TilesOverlay;
-
-/**
- * A map tile is distributed using the observer pattern. The tile is delivered by a tile provider
- * (i.e. a descendant of {@link MapTileModuleProviderBase} or
- * {@link MapTileProviderBase} to a consumer of tiles (e.g. descendant of
- * {@link TilesOverlay}). Tiles are typically images (e.g. png or jpeg).
- */
-public class MapTile {
-
-	public static final int MAPTILE_SUCCESS_ID = 0;
-	public static final int MAPTILE_FAIL_ID = MAPTILE_SUCCESS_ID + 1;
-
-	// This class must be immutable because it's used as the key in the cache hash map
-	// (ie all the fields are final).
-	private final int x;
-	private final int y;
-	private final int zoomLevel;
-
-	public MapTile(final int zoomLevel, final int tileX, final int tileY) {
-		this.zoomLevel = zoomLevel;
-		this.x = tileX;
-		this.y = tileY;
-	}
-
-	public int getZoomLevel() {
-		return zoomLevel;
-	}
-
-	public int getX() {
-		return x;
-	}
-
-	public int getY() {
-		return y;
-	}
-
-	@Override
-	public String toString() {
-		return "/" + zoomLevel + "/" + x + "/" + y;
-	}
-
-	@Override
-	public boolean equals(final Object obj) {
-		if (obj == null)
-			return false;
-		if (obj == this)
-			return true;
-		if (!(obj instanceof MapTile))
-			return false;
-		final MapTile rhs = (MapTile) obj;
-		return zoomLevel == rhs.zoomLevel && x == rhs.x && y == rhs.y;
-	}
-
-	@Override
-	public int hashCode() {
-		int code = 17;
-		code *= 37 + zoomLevel;
-		code *= 37 + x;
-		code *= 37 + y;
-		return code;
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/constants/OpenStreetMapTileProviderConstants.java b/app/src/main/java/org/osmdroid/tileprovider/constants/OpenStreetMapTileProviderConstants.java
deleted file mode 100644
index d8f2f4db..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/constants/OpenStreetMapTileProviderConstants.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package org.osmdroid.tileprovider.constants;
-
-import android.os.Environment;
-
-import java.io.File;
-
-/**
- * 
- * This class contains constants used by the tile provider.
- * 
- * @author Neil Boyd
- * 
- */
-public interface OpenStreetMapTileProviderConstants {
-
-
-	/** Minimum Zoom Level */
-	public static final int MINIMUM_ZOOMLEVEL = 0;
-
-	/**
-	 * Maximum Zoom Level - we use Integers to store zoom levels so overflow happens at 2^32 - 1,
-	 * but we also have a tile size that is typically 2^8, so (32-1)-8-1 = 22
-	 */
-	public static final int MAXIMUM_ZOOMLEVEL = 22;
-
-	/** Base path for osmdroid files. Zip files are in this folder. */
-	public static final File OSMDROID_PATH = new File(Environment.getExternalStorageDirectory(),
-			"osmdroid");
-
-	/** Base path for tiles. */
-	public static final File TILE_PATH_BASE = new File(OSMDROID_PATH, "tiles");
-
-	/** setTarget an extension to files on sdcard so that gallery doesn't index them */
-	public static final String TILE_PATH_EXTENSION = ".tile";
-
-	/**
-	 * Initial tile cache size. The size will be increased as required by calling {@link
-	 * LRUMapTileCache.ensureCapacity(int)} The tile cache will always be at least 3x3.
-	 */
-	public static final int CACHE_MAPTILECOUNT_DEFAULT = 9;
-
-	/**
-	 * number of tile download threads, conforming to OSM policy:
-	 * http://wiki.openstreetmap.org/wiki/Tile_usage_policy
-	 */
-	public static final int NUMBER_OF_TILE_DOWNLOAD_THREADS = 2;
-
-	public static final int NUMBER_OF_TILE_FILESYSTEM_THREADS = 8;
-
-	public static final long ONE_SECOND = 1000;
-	public static final long ONE_MINUTE = ONE_SECOND * 60;
-	public static final long ONE_HOUR = ONE_MINUTE * 60;
-	public static final long ONE_DAY = ONE_HOUR * 24;
-	public static final long ONE_WEEK = ONE_DAY * 7;
-	public static final long ONE_YEAR = ONE_DAY * 365;
-	public static final long DEFAULT_MAXIMUM_CACHED_FILE_AGE = ONE_YEAR;
-
-	public static final int TILE_DOWNLOAD_MAXIMUM_QUEUE_SIZE = 40;
-	public static final int TILE_FILESYSTEM_MAXIMUM_QUEUE_SIZE = 40;
-
-/// ***	
-	//public static final long TILE_EXPIRY_TIME_MILLISECONDS = ONE_YEAR;
-
-        public static final long ONE_KB = 1024;
-        public static final long ONE_MB = ONE_KB * 1024;
-        public static final long ONE_GB = ONE_MB * 1024;
-	public static final long TILE_MAX_CACHE_SIZE_BYTES = 5 * ONE_GB;
-	public static final long TILE_TRIM_CACHE_SIZE_BYTES = 4 * ONE_GB;
-
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/tilesource/BitmapTileSourceBase.java b/app/src/main/java/org/osmdroid/tileprovider/tilesource/BitmapTileSourceBase.java
deleted file mode 100644
index 0f249e65..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/tilesource/BitmapTileSourceBase.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package org.osmdroid.tileprovider.tilesource;
-
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.constants.OpenStreetMapTileProviderConstants;
-
-import java.util.Random;
-
-public abstract class BitmapTileSourceBase implements ITileSource,
-		OpenStreetMapTileProviderConstants {
-
-
-	private final int mMinimumZoomLevel;
-	private final int mMaximumZoomLevel;
-
-	protected final String mName;
-	protected final String mImageFilenameEnding;
-	protected final Random random = new Random();
-
-
-
-	public BitmapTileSourceBase(final String aName,
-			final int aZoomMinLevel, final int aZoomMaxLevel,
-			final String aImageFilenameEnding) {
-		mName = aName;
-		mMinimumZoomLevel = aZoomMinLevel;
-		mMaximumZoomLevel = aZoomMaxLevel;
-		mImageFilenameEnding = aImageFilenameEnding;
-	}
-
-	@Override
-	public String name() {
-		return mName;
-	}
-
-	public String pathBase() {
-		return mName;
-	}
-
-	public String imageFilenameEnding() {
-		return mImageFilenameEnding;
-	}
-
-	@Override
-	public int getMinimumZoomLevel() {
-		return mMinimumZoomLevel;
-	}
-
-	@Override
-	public int getMaximumZoomLevel() {
-		return mMaximumZoomLevel;
-	}
-
-
-
-
-	@Override
-	public String getTileRelativeFilenameString(final MapTile tile) {
-		final StringBuilder sb = new StringBuilder();
-		sb.append(pathBase());
-		sb.append('/');
-		sb.append(tile.getZoomLevel());
-		sb.append('/');
-		sb.append(tile.getX());
-		sb.append('/');
-		sb.append(tile.getY());
-		sb.append(imageFilenameEnding());
-		return sb.toString();
-	}
-
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/tilesource/ITileSource.java b/app/src/main/java/org/osmdroid/tileprovider/tilesource/ITileSource.java
deleted file mode 100644
index 5732a1b6..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/tilesource/ITileSource.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package org.osmdroid.tileprovider.tilesource;
-
-import org.osmdroid.tileprovider.MapTile;
-
-public interface ITileSource {
-
-
-	/**
-	 * A human-friendly name for this tile source
-	 * 
-	 * @return the tile source name
-	 */
-	String name();
-
-
-	/**
-	 * Get a unique file path for the tile. This file path may be used to store the tile on a file
-	 * system and performance considerations should be taken into consideration. It can include
-	 * multiple paths. It should not begin with a leading path separator.
-	 * 
-	 * @param aTile
-	 *            the tile
-	 * @return the unique file path
-	 */
-	String getTileRelativeFilenameString(MapTile aTile);
-
-	/**
-	 * Get the minimum zoom level this tile source can provide.
-	 * 
-	 * @return the minimum zoom level
-	 */
-	public int getMinimumZoomLevel();
-
-	/**
-	 * Get the maximum zoom level this tile source can provide.
-	 * 
-	 * @return the maximum zoom level
-	 */
-	public int getMaximumZoomLevel();
-
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/tilesource/OnlineTileSourceBase.java b/app/src/main/java/org/osmdroid/tileprovider/tilesource/OnlineTileSourceBase.java
deleted file mode 100644
index 03eab9de..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/tilesource/OnlineTileSourceBase.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.osmdroid.tileprovider.tilesource;
-
-import org.osmdroid.tileprovider.MapTile;
-
-public abstract class OnlineTileSourceBase extends BitmapTileSourceBase {
-
-	private final String mBaseUrls[];
-
-	public OnlineTileSourceBase(final String aName,
-			final int aZoomMinLevel, final int aZoomMaxLevel,
-			final String aImageFilenameEnding, final String... aBaseUrl) {
-		super(aName, aZoomMinLevel, aZoomMaxLevel,
-				aImageFilenameEnding);
-		mBaseUrls = aBaseUrl;
-	}
-
-	public abstract String getTileURLString(MapTile aTile);
-
-	/**
-	 * Get the base url, which will be a random one if there are more than one.
-	 */
-	protected String getBaseUrl() {
-		return mBaseUrls[random.nextInt(mBaseUrls.length)];
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/tilesource/XYTileSource.java b/app/src/main/java/org/osmdroid/tileprovider/tilesource/XYTileSource.java
deleted file mode 100644
index 614a48fa..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/tilesource/XYTileSource.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.osmdroid.tileprovider.tilesource;
-
-import org.osmdroid.tileprovider.MapTile;
-
-public class XYTileSource extends OnlineTileSourceBase {
-
-	public XYTileSource(final String aName, final int aZoomMinLevel,
-			final int aZoomMaxLevel, final String aImageFilenameEnding,
-			final String... aBaseUrl) {
-		super(aName, aZoomMinLevel, aZoomMaxLevel,
-				aImageFilenameEnding, aBaseUrl);
-	}
-
-	@Override
-	public String getTileURLString(final MapTile aTile) {
-		return getBaseUrl() + aTile.getZoomLevel() + "/" + aTile.getX() + "/" + aTile.getY()
-				+ mImageFilenameEnding;
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/util/SimpleInvalidationHandler.java b/app/src/main/java/org/osmdroid/tileprovider/util/SimpleInvalidationHandler.java
deleted file mode 100644
index 13d196d3..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/util/SimpleInvalidationHandler.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.osmdroid.tileprovider.util;
-
-import android.os.Handler;
-import android.os.Message;
-import android.view.View;
-
-import org.osmdroid.tileprovider.MapTile;
-
-public class SimpleInvalidationHandler extends Handler {
-	private final View mView;
-
-	public SimpleInvalidationHandler(final View pView) {
-		super();
-		mView = pView;
-	}
-
-	@Override
-	public void handleMessage(final Message msg) {
-		switch (msg.what) {
-		case MapTile.MAPTILE_SUCCESS_ID:
-			mView.invalidate();
-			break;
-		}
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/util/SimpleRegisterReceiver.java b/app/src/main/java/org/osmdroid/tileprovider/util/SimpleRegisterReceiver.java
deleted file mode 100644
index 0c839ab5..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/util/SimpleRegisterReceiver.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.osmdroid.tileprovider.util;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-
-import org.osmdroid.tileprovider.IRegisterReceiver;
-
-public class SimpleRegisterReceiver implements IRegisterReceiver {
-
-	private final Context mContext;
-
-	public SimpleRegisterReceiver(final Context pContext) {
-		super();
-		mContext = pContext;
-	}
-
-	@Override
-	public Intent registerReceiver(final BroadcastReceiver aReceiver, final IntentFilter aFilter) {
-		return mContext.registerReceiver(aReceiver, aFilter);
-	}
-
-	@Override
-	public void unregisterReceiver(final BroadcastReceiver aReceiver) {
-		mContext.unregisterReceiver(aReceiver);
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/tileprovider/util/StreamUtils.java b/app/src/main/java/org/osmdroid/tileprovider/util/StreamUtils.java
deleted file mode 100644
index b2a75184..00000000
--- a/app/src/main/java/org/osmdroid/tileprovider/util/StreamUtils.java
+++ /dev/null
@@ -1,91 +0,0 @@
-// Created by plusminus on 19:14:08 - 20.10.2008
-package org.osmdroid.tileprovider.util;
-
-import java.io.Closeable;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-import ch.bailu.aat.util.ui.Logger;
-import ch.bailu.aat.util.ui.LoggerFactory;
-
-public class StreamUtils {
-
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	private static final Logger logger = LoggerFactory.getLogger(StreamUtils.class);
-
-	public static final int IO_BUFFER_SIZE = 8 * 1024;
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	/**
-	 * This is a utility class with only static members.
-	 */
-	private StreamUtils() {
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	/**
-	 * Copy the content of the input stream into the output stream, using a temporary byte array
-	 * buffer whose size is defined by {@link #IO_BUFFER_SIZE}.
-	 * 
-	 * @param in
-	 *            The input stream to copy from.
-	 * @param out
-	 *            The output stream to copy to.
-	 * @return the total length copied
-	 * 
-	 * @throws IOException
-	 *             If any error occurs during the copy.
-	 */
-	public static long copy(final InputStream in, final OutputStream out) throws IOException {
-		long length = 0;
-		final byte[] b = new byte[IO_BUFFER_SIZE];
-		int read;
-		while ((read = in.read(b)) != -1) {
-			out.write(b, 0, read);
-			length += read;
-		}
-		return length;
-	}
-
-	/**
-	 * Closes the specified stream.
-	 * 
-	 * @param stream
-	 *            The stream to close.
-	 */
-	public static void closeStream(final Closeable stream) {
-		if (stream != null) {
-			try {
-				stream.close();
-			} catch (final IOException e) {
-				logger.error("IO", "Could not close stream", e);
-			}
-		}
-	}
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/util/BoundingBoxOsm.java b/app/src/main/java/org/osmdroid/util/BoundingBoxOsm.java
deleted file mode 100644
index 8670e9c4..00000000
--- a/app/src/main/java/org/osmdroid/util/BoundingBoxOsm.java
+++ /dev/null
@@ -1,269 +0,0 @@
-// Created by plusminus on 19:06:38 - 25.09.2008
-package org.osmdroid.util;
-
-import android.graphics.PointF;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.osmdroid.views.util.constants.MapViewConstants;
-
-import java.io.Serializable;
-import java.util.ArrayList;
-
-import static org.osmdroid.util.MyMath.gudermann;
-import static org.osmdroid.util.MyMath.gudermannInverse;
-
-/**
- * 
- * @author Nicolas Gramlich
- * 
- */
-public class BoundingBoxOsm implements Parcelable, Serializable, MapViewConstants {
-
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	static final long serialVersionUID = 2L;
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	protected final int mLatNorthE6;
-	protected final int mLatSouthE6;
-	protected final int mLonEastE6;
-	protected final int mLonWestE6;
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	public BoundingBoxOsm(final int northE6, final int eastE6, final int southE6, final int westE6) {
-		this.mLatNorthE6 = northE6;
-		this.mLonEastE6 = eastE6;
-		this.mLatSouthE6 = southE6;
-		this.mLonWestE6 = westE6;
-	}
-
-	public BoundingBoxOsm(final double north, final double east, final double south,
-						  final double west) {
-		this.mLatNorthE6 = (int) (north * 1E6);
-		this.mLonEastE6 = (int) (east * 1E6);
-		this.mLatSouthE6 = (int) (south * 1E6);
-		this.mLonWestE6 = (int) (west * 1E6);
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	/**
-	 * @return GeoPoint center of this BoundingBoxOsm
-	 */
-	public GeoPoint getCenter() {
-		return new GeoPoint((this.mLatNorthE6 + this.mLatSouthE6) / 2,
-				(this.mLonEastE6 + this.mLonWestE6) / 2);
-	}
-
-	public int getDiagonalLengthInMeters() {
-		return new GeoPoint(this.mLatNorthE6, this.mLonWestE6).distanceTo(new GeoPoint(
-				this.mLatSouthE6, this.mLonEastE6));
-	}
-
-	public int getLatNorthE6() {
-		return this.mLatNorthE6;
-	}
-
-	public int getLatSouthE6() {
-		return this.mLatSouthE6;
-	}
-
-	public int getLonEastE6() {
-		return this.mLonEastE6;
-	}
-
-	public int getLonWestE6() {
-		return this.mLonWestE6;
-	}
-
-	public int getLatitudeSpanE6() {
-		return Math.abs(this.mLatNorthE6 - this.mLatSouthE6);
-	}
-
-	public int getLongitudeSpanE6() {
-		return Math.abs(this.mLonEastE6 - this.mLonWestE6);
-	}
-
-	/**
-	 * 
-	 * @param aLatitude
-	 * @param aLongitude
-	 * @param reuse
-	 * @return relative position determined from the upper left corner.<br />
-	 *         {0,0} would be the upper left corner. {1,1} would be the lower right corner. {1,0}
-	 *         would be the lower left corner. {0,1} would be the upper right corner.
-	 */
-	public PointF getRelativePositionOfGeoPointInBoundingBoxWithLinearInterpolation(
-			final int aLatitude, final int aLongitude, final PointF reuse) {
-		final PointF out = (reuse != null) ? reuse : new PointF();
-		final float y = ((float) (this.mLatNorthE6 - aLatitude) / getLatitudeSpanE6());
-		final float x = 1 - ((float) (this.mLonEastE6 - aLongitude) / getLongitudeSpanE6());
-		out.set(x, y);
-		return out;
-	}
-
-	public PointF getRelativePositionOfGeoPointInBoundingBoxWithExactGudermannInterpolation(
-			final int aLatitudeE6, final int aLongitudeE6, final PointF reuse) {
-		final PointF out = (reuse != null) ? reuse : new PointF();
-		final float y = (float) ((gudermannInverse(this.mLatNorthE6 / 1E6) - gudermannInverse(aLatitudeE6 / 1E6)) / (gudermannInverse(this.mLatNorthE6 / 1E6) - gudermannInverse(this.mLatSouthE6 / 1E6)));
-		final float x = 1 - ((float) (this.mLonEastE6 - aLongitudeE6) / getLongitudeSpanE6());
-		out.set(x, y);
-		return out;
-	}
-
-	public GeoPoint getGeoPointOfRelativePositionWithLinearInterpolation(final float relX,
-			final float relY) {
-
-		int lat = (int) (this.mLatNorthE6 - (this.getLatitudeSpanE6() * relY));
-
-		int lon = (int) (this.mLonWestE6 + (this.getLongitudeSpanE6() * relX));
-
-		/* Bring into bounds. */
-		while (lat > 90500000)
-			lat -= 90500000;
-		while (lat < -90500000)
-			lat += 90500000;
-
-		/* Bring into bounds. */
-		while (lon > 180000000)
-			lon -= 180000000;
-		while (lon < -180000000)
-			lon += 180000000;
-
-		return new GeoPoint(lat, lon);
-	}
-
-	public GeoPoint getGeoPointOfRelativePositionWithExactGudermannInterpolation(final float relX,
-			final float relY) {
-
-		final double gudNorth = gudermannInverse(this.mLatNorthE6 / 1E6);
-		final double gudSouth = gudermannInverse(this.mLatSouthE6 / 1E6);
-		final double latD = gudermann((gudSouth + (1 - relY) * (gudNorth - gudSouth)));
-		int lat = (int) (latD * 1E6);
-
-		int lon = (int) ((this.mLonWestE6 + (this.getLongitudeSpanE6() * relX)));
-
-		/* Bring into bounds. */
-		while (lat > 90500000)
-			lat -= 90500000;
-		while (lat < -90500000)
-			lat += 90500000;
-
-		/* Bring into bounds. */
-		while (lon > 180000000)
-			lon -= 180000000;
-		while (lon < -180000000)
-			lon += 180000000;
-
-		return new GeoPoint(lat, lon);
-	}
-
-	public BoundingBoxOsm increaseByScale(final float pBoundingboxPaddingRelativeScale) {
-		final GeoPoint pCenter = this.getCenter();
-		final int mLatSpanE6Padded_2 = (int) ((this.getLatitudeSpanE6() * pBoundingboxPaddingRelativeScale) / 2);
-		final int mLonSpanE6Padded_2 = (int) ((this.getLongitudeSpanE6() * pBoundingboxPaddingRelativeScale) / 2);
-
-		return new BoundingBoxOsm(pCenter.getLatitudeE6() + mLatSpanE6Padded_2,
-				pCenter.getLongitudeE6() + mLonSpanE6Padded_2, pCenter.getLatitudeE6()
-						- mLatSpanE6Padded_2, pCenter.getLongitudeE6() - mLonSpanE6Padded_2);
-	}
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	@Override
-	public String toString() {
-		return new StringBuffer().append("N:").append(this.mLatNorthE6).append("; E:")
-				.append(this.mLonEastE6).append("; S:").append(this.mLatSouthE6).append("; W:")
-				.append(this.mLonWestE6).toString();
-	}
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	public GeoPoint bringToBoundingBox(final int aLatitudeE6, final int aLongitudeE6) {
-		return new GeoPoint(Math.max(this.mLatSouthE6, Math.min(this.mLatNorthE6, aLatitudeE6)),
-				Math.max(this.mLonWestE6, Math.min(this.mLonEastE6, aLongitudeE6)));
-	}
-
-	public static BoundingBoxOsm fromGeoPoints(final ArrayList<? extends GeoPoint> partialPolyLine) {
-		int minLat = Integer.MAX_VALUE;
-		int minLon = Integer.MAX_VALUE;
-		int maxLat = Integer.MIN_VALUE;
-		int maxLon = Integer.MIN_VALUE;
-		for (final GeoPoint gp : partialPolyLine) {
-			final int latitudeE6 = gp.getLatitudeE6();
-			final int longitudeE6 = gp.getLongitudeE6();
-
-			minLat = Math.min(minLat, latitudeE6);
-			minLon = Math.min(minLon, longitudeE6);
-			maxLat = Math.max(maxLat, latitudeE6);
-			maxLon = Math.max(maxLon, longitudeE6);
-		}
-
-		return new BoundingBoxOsm(minLat, minLon, maxLat, maxLon);
-	}
-
-	public boolean contains(final GeoPoint pGeoPoint) {
-		return contains(pGeoPoint.getLatitudeE6(), pGeoPoint.getLongitudeE6());
-	}
-
-	public boolean contains(final int aLatitudeE6, final int aLongitudeE6) {
-		return ((aLatitudeE6 < this.mLatNorthE6) && (aLatitudeE6 > this.mLatSouthE6))
-				&& ((aLongitudeE6 < this.mLonEastE6) && (aLongitudeE6 > this.mLonWestE6));
-	}
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-
-	// ===========================================================
-	// Parcelable
-	// ===========================================================
-
-	public static final Parcelable.Creator<BoundingBoxOsm> CREATOR = new Parcelable.Creator<BoundingBoxOsm>() {
-		@Override
-		public BoundingBoxOsm createFromParcel(final Parcel in) {
-			return readFromParcel(in);
-		}
-
-		@Override
-		public BoundingBoxOsm[] newArray(final int size) {
-			return new BoundingBoxOsm[size];
-		}
-	};
-
-	@Override
-	public int describeContents() {
-		return 0;
-	}
-
-	@Override
-	public void writeToParcel(final Parcel out, final int arg1) {
-		out.writeInt(this.mLatNorthE6);
-		out.writeInt(this.mLonEastE6);
-		out.writeInt(this.mLatSouthE6);
-		out.writeInt(this.mLonWestE6);
-	}
-
-	private static BoundingBoxOsm readFromParcel(final Parcel in) {
-		final int latNorthE6 = in.readInt();
-		final int lonEastE6 = in.readInt();
-		final int latSouthE6 = in.readInt();
-		final int lonWestE6 = in.readInt();
-		return new BoundingBoxOsm(latNorthE6, lonEastE6, latSouthE6, lonWestE6);
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/util/GeoPoint.java b/app/src/main/java/org/osmdroid/util/GeoPoint.java
deleted file mode 100644
index 64b95948..00000000
--- a/app/src/main/java/org/osmdroid/util/GeoPoint.java
+++ /dev/null
@@ -1,358 +0,0 @@
-// Created by plusminus on 21:28:12 - 25.09.2008
-package org.osmdroid.util;
-
-import android.location.Location;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.constants.GeoConstants;
-import org.osmdroid.views.util.constants.MathConstants;
-
-import java.io.Serializable;
-
-/**
- *
- * @author Nicolas Gramlich
- * @author Theodore Hong
- *
- */
-public class GeoPoint implements IGeoPoint, MathConstants, GeoConstants, Parcelable, Serializable, Cloneable {
-
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	static final long serialVersionUID = 1L;
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	private int mLongitudeE6;
-	private int mLatitudeE6;
-	private int mAltitude;
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	public GeoPoint(final int aLatitudeE6, final int aLongitudeE6) {
-		this.mLatitudeE6 = aLatitudeE6;
-		this.mLongitudeE6 = aLongitudeE6;
-	}
-
-	public GeoPoint(final int aLatitudeE6, final int aLongitudeE6, final int aAltitude) {
-		this.mLatitudeE6 = aLatitudeE6;
-		this.mLongitudeE6 = aLongitudeE6;
-		this.mAltitude = aAltitude;
-	}
-
-	public GeoPoint(final double aLatitude, final double aLongitude) {
-		this.mLatitudeE6 = (int) (aLatitude * 1E6);
-		this.mLongitudeE6 = (int) (aLongitude * 1E6);
-	}
-
-	public GeoPoint(final double aLatitude, final double aLongitude, final double aAltitude) {
-		this.mLatitudeE6 = (int) (aLatitude * 1E6);
-		this.mLongitudeE6 = (int) (aLongitude * 1E6);
-		this.mAltitude = (int) aAltitude;
-	}
-
-	public GeoPoint(final Location aLocation) {
-		this(aLocation.getLatitude(), aLocation.getLongitude(), aLocation.getAltitude());
-	}
-
-    // FIXME patch this 
-    public GeoPoint(final IGeoPoint aGeopoint) {
-        this(aGeopoint.getLatitudeE6(),aGeopoint.getLongitudeE6());
-    }
-    
-    
-	public GeoPoint(final GeoPoint aGeopoint) {
-		this.mLatitudeE6 = aGeopoint.mLatitudeE6;
-		this.mLongitudeE6 = aGeopoint.mLongitudeE6;
-		this.mAltitude = aGeopoint.mAltitude;
-	}
-
-	public static GeoPoint fromDoubleString(final String s, final char spacer) {
-		final int spacerPos1 = s.indexOf(spacer);
-		final int spacerPos2 = s.indexOf(spacer, spacerPos1 + 1);
-
-		if (spacerPos2 == -1) {
-			return new GeoPoint(
-					(int) (Double.parseDouble(s.substring(0, spacerPos1)) * 1E6),
-					(int) (Double.parseDouble(s.substring(spacerPos1 + 1, s.length())) * 1E6));
-		} else {
-			return new GeoPoint(
-					(int) (Double.parseDouble(s.substring(0, spacerPos1)) * 1E6),
-					(int) (Double.parseDouble(s.substring(spacerPos1 + 1, spacerPos2)) * 1E6),
-					(int) Double.parseDouble(s.substring(spacerPos2 + 1, s.length())));
-		}
-	}
-
-	public static GeoPoint fromInvertedDoubleString(final String s, final char spacer) {
-		final int spacerPos1 = s.indexOf(spacer);
-		final int spacerPos2 = s.indexOf(spacer, spacerPos1 + 1);
-
-		if (spacerPos2 == -1) {
-			return new GeoPoint(
-					(int) (Double.parseDouble(s.substring(spacerPos1 + 1, s.length())) * 1E6),
-					(int) (Double.parseDouble(s.substring(0, spacerPos1)) * 1E6));
-		} else {
-			return new GeoPoint(
-					(int) (Double.parseDouble(s.substring(spacerPos1 + 1, spacerPos2)) * 1E6),
-					(int) (Double.parseDouble(s.substring(0, spacerPos1)) * 1E6),
-					(int) Double.parseDouble(s.substring(spacerPos2 + 1, s.length())));
-
-		}
-	}
-
-	public static GeoPoint fromIntString(final String s) {
-		final int commaPos1 = s.indexOf(',');
-		final int commaPos2 = s.indexOf(',', commaPos1 + 1);
-
-		if (commaPos2 == -1) {
-			return new GeoPoint(
-					Integer.parseInt(s.substring(0, commaPos1)),
-					Integer.parseInt(s.substring(commaPos1 + 1, s.length())));
-		} else {
-			return new GeoPoint(
-					Integer.parseInt(s.substring(0, commaPos1)),
-					Integer.parseInt(s.substring(commaPos1 + 1, commaPos2)),
-					Integer.parseInt(s.substring(commaPos2 + 1, s.length()))
-			);
-		}
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	@Override
-	public int getLongitudeE6() {
-		return this.mLongitudeE6;
-	}
-
-	@Override
-	public int getLatitudeE6() {
-		return this.mLatitudeE6;
-	}
-
-	public int getAltitude() {
-		return this.mAltitude;
-	}
-
-	public void setLongitudeE6(final int aLongitudeE6) {
-		this.mLongitudeE6 = aLongitudeE6;
-	}
-
-	public void setLatitudeE6(final int aLatitudeE6) {
-		this.mLatitudeE6 = aLatitudeE6;
-	}
-
-	public void setAltitude(final int aAltitude) {
-		this.mAltitude = aAltitude;
-	}
-
-	public void setCoordsE6(final int aLatitudeE6, final int aLongitudeE6) {
-		this.mLatitudeE6 = aLatitudeE6;
-		this.mLongitudeE6 = aLongitudeE6;
-	}
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	@Override
-	public Object clone() {
-		return new GeoPoint(this.mLatitudeE6, this.mLongitudeE6);
-	}
-
-	@Override
-	public String toString() {
-		return new StringBuilder().append(this.mLatitudeE6).append(",").append(this.mLongitudeE6).append(",").append(this.mAltitude)
-		.toString();
-	}
-
-	@Override
-	public boolean equals(final Object obj) {
-		if (obj == null) {
-			return false;
-		}
-		if (obj == this) {
-			return true;
-		}
-		if (obj.getClass() != getClass()) {
-			return false;
-		}
-		final GeoPoint rhs = (GeoPoint) obj;
-		return rhs.mLatitudeE6 == this.mLatitudeE6 && rhs.mLongitudeE6 == this.mLongitudeE6 && rhs.mAltitude == this.mAltitude;
-	}
-
-	@Override
-	public int hashCode() {
-		return 37 * (17 * mLatitudeE6 + mLongitudeE6) + mAltitude;
-	}
-
-	// ===========================================================
-	// Parcelable
-	// ===========================================================
-	private GeoPoint(final Parcel in) {
-		this.mLatitudeE6 = in.readInt();
-		this.mLongitudeE6 = in.readInt();
-		this.mAltitude = in.readInt();
-	}
-
-	@Override
-	public int describeContents() {
-		return 0;
-	}
-
-	@Override
-	public void writeToParcel(final Parcel out, final int flags) {
-		out.writeInt(mLatitudeE6);
-		out.writeInt(mLongitudeE6);
-		out.writeInt(mAltitude);
-	}
-
-	public static final Parcelable.Creator<GeoPoint> CREATOR = new Parcelable.Creator<GeoPoint>() {
-		@Override
-		public GeoPoint createFromParcel(final Parcel in) {
-			return new GeoPoint(in);
-		}
-
-		@Override
-		public GeoPoint[] newArray(final int size) {
-			return new GeoPoint[size];
-		}
-	};
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	/**
-	 * @see Source@ http://www.geocities.com/DrChengalva/GPSDistance.html
-	 * @return distance in meters
-	 */
-	public int distanceTo(final IGeoPoint other) {
-
-		final double a1 = DEG2RAD * this.mLatitudeE6 / 1E6;
-		final double a2 = DEG2RAD * this.mLongitudeE6 / 1E6;
-		final double b1 = DEG2RAD * other.getLatitudeE6() / 1E6;
-		final double b2 = DEG2RAD * other.getLongitudeE6() / 1E6;
-
-		final double cosa1 = Math.cos(a1);
-		final double cosb1 = Math.cos(b1);
-
-		final double t1 = cosa1 * Math.cos(a2) * cosb1 * Math.cos(b2);
-
-		final double t2 = cosa1 * Math.sin(a2) * cosb1 * Math.sin(b2);
-
-		final double t3 = Math.sin(a1) * Math.sin(b1);
-
-		final double tt = Math.acos(t1 + t2 + t3);
-
-		return (int) (RADIUS_EARTH_METERS * tt);
-	}
-	
-	public static float distanceBetween(double la, double lo,
-			double la2, double lo2) {
-		
-		double r = 0;
-		
-		final double a1 = DEG2RAD * la;
-		final double a2 = DEG2RAD * lo;
-		final double b1 = DEG2RAD * la2;
-		final double b2 = DEG2RAD * lo2;
-
-		final double cosa1 = Math.cos(a1);
-		final double cosb1 = Math.cos(b1);
-
-		final double t1 = cosa1 * Math.cos(a2) * cosb1 * Math.cos(b2);
-
-		final double t2 = cosa1 * Math.sin(a2) * cosb1 * Math.sin(b2);
-
-		final double t3 = Math.sin(a1) * Math.sin(b1);
-
-		final double tt = t1+t2+t3;
-		
-		if (tt <= 1 && tt >= -1) {
-			r = Math.acos(tt)*RADIUS_EARTH_METERS;
-		}
-		
-		return (float) (r);
-
-	}
-	
-
-	/**
-	 * @see Source@ http://groups.google.com/group/osmdroid/browse_thread/thread/d22c4efeb9188fe9/
-	 *      bc7f9b3111158dd
-	 * @return bearing in degrees
-	 */
-	public double bearingTo(final IGeoPoint other) {
-		final double lat1 = Math.toRadians(this.mLatitudeE6 / 1E6);
-		final double long1 = Math.toRadians(this.mLongitudeE6 / 1E6);
-		final double lat2 = Math.toRadians(other.getLatitudeE6() / 1E6);
-		final double long2 = Math.toRadians(other.getLongitudeE6() / 1E6);
-		final double delta_long = long2 - long1;
-		final double a = Math.sin(delta_long) * Math.cos(lat2);
-		final double b = Math.cos(lat1) * Math.sin(lat2) -
-						 Math.sin(lat1) * Math.cos(lat2) * Math.cos(delta_long);
-		final double bearing = Math.toDegrees(Math.atan2(a, b));
-		final double bearing_normalized = (bearing + 360) % 360;
-		return bearing_normalized;
-	}
-
-	/**
-	 * Calculate a point that is the specified distance and bearing away from this point.
-	 *
-	 * @see Source@ http://www.movable-type.co.uk/scripts/latlong.html
-	 * @see Source@ http://www.movable-type.co.uk/scripts/latlon.js
-	 */
-	public GeoPoint destinationPoint(final double aDistanceInMeters, final float aBearingInDegrees) {
-
-		// convert distance to angular distance
-		final double dist = aDistanceInMeters / RADIUS_EARTH_METERS;
-
-		// convert bearing to radians
-		final float brng = DEG2RAD * aBearingInDegrees;
-
-		// getDrawable current location in radians
-		final double lat1 = DEG2RAD * getLatitudeE6() / 1E6;
-		final double lon1 = DEG2RAD * getLongitudeE6() / 1E6;
-
-		final double lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1)
-				* Math.sin(dist) * Math.cos(brng));
-		final double lon2 = lon1
-		+ Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist)
-				- Math.sin(lat1) * Math.sin(lat2));
-
-		final double lat2deg = lat2 / DEG2RAD;
-		final double lon2deg = lon2 / DEG2RAD;
-
-		return new GeoPoint(lat2deg, lon2deg);
-	}
-
-	public static GeoPoint fromCenterBetween(final GeoPoint geoPointA, final GeoPoint geoPointB) {
-		return new GeoPoint((geoPointA.getLatitudeE6() + geoPointB.getLatitudeE6()) / 2,
-				(geoPointA.getLongitudeE6() + geoPointB.getLongitudeE6()) / 2);
-	}
-
-	public String toDoubleString() {
-		return new StringBuilder().append(this.mLatitudeE6 / 1E6).append(",")
-		.append(this.mLongitudeE6 / 1E6).append(",").append(this.mAltitude).toString();
-	}
-
-	public String toInvertedDoubleString() {
-		return new StringBuilder().append(this.mLongitudeE6 / 1E6).append(",")
-		.append(this.mLatitudeE6 / 1E6).append(",").append(this.mAltitude).toString();
-	}
-
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/util/MyMath.java b/app/src/main/java/org/osmdroid/util/MyMath.java
deleted file mode 100644
index deba51a8..00000000
--- a/app/src/main/java/org/osmdroid/util/MyMath.java
+++ /dev/null
@@ -1,63 +0,0 @@
-// Created by plusminus on 20:36:01 - 26.09.2008
-package org.osmdroid.util;
-
-import org.osmdroid.views.util.constants.MathConstants;
-
-/**
- * 
- * @author Nicolas Gramlich
- * 
- */
-public class MyMath implements MathConstants {
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	/**
-	 * This is a utility class with only static members.
-	 */
-	private MyMath() {
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	public static double gudermannInverse(final double aLatitude) {
-		return Math.log(Math.tan(PI_4 + (DEG2RAD * aLatitude / 2)));
-	}
-
-	public static double gudermann(final double y) {
-		return RAD2DEG * Math.atan(Math.sinh(y));
-	}
-
-	public static int mod(int number, final int modulus) {
-		if (number > 0)
-			return number % modulus;
-
-		while (number < 0)
-			number += modulus;
-
-		return number;
-	}
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/util/constants/GeoConstants.java b/app/src/main/java/org/osmdroid/util/constants/GeoConstants.java
deleted file mode 100644
index d1d4f285..00000000
--- a/app/src/main/java/org/osmdroid/util/constants/GeoConstants.java
+++ /dev/null
@@ -1,18 +0,0 @@
-// Created by plusminus on 17:41:55 - 16.10.2008
-package org.osmdroid.util.constants;
-
-public interface GeoConstants {
-	// ===========================================================
-	// Final Fields
-	// ===========================================================
-
-	public static final int RADIUS_EARTH_METERS = 6378137; // http://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius
-	public static final double METERS_PER_STATUTE_MILE = 1609.344; // http://en.wikipedia.org/wiki/Mile
-	public static final double METERS_PER_NAUTICAL_MILE = 1852; // http://en.wikipedia.org/wiki/Nautical_mile
-	public static final double FEET_PER_METER = 3.2808399; // http://en.wikipedia.org/wiki/Feet_%28unit_of_length%29
-	public static final int EQUATORCIRCUMFENCE = (int) (2 * Math.PI * RADIUS_EARTH_METERS);
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/util/constants/UtilConstants.java b/app/src/main/java/org/osmdroid/util/constants/UtilConstants.java
deleted file mode 100644
index 51cfb57e..00000000
--- a/app/src/main/java/org/osmdroid/util/constants/UtilConstants.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package org.osmdroid.util.constants;
-
-public interface UtilConstants {
-
-	/**
-	 * The time we wait after the last gps location before using a non-gps location.
-	 */
-	public static final long GPS_WAIT_TIME = 20000; // 20 seconds
-
-}
diff --git a/app/src/main/java/org/osmdroid/views/MapController.java b/app/src/main/java/org/osmdroid/views/MapController.java
deleted file mode 100644
index 2fd3d468..00000000
--- a/app/src/main/java/org/osmdroid/views/MapController.java
+++ /dev/null
@@ -1,132 +0,0 @@
-// Created by plusminus on 21:37:08 - 27.09.2008
-package org.osmdroid.views;
-
-import android.graphics.Point;
-
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.api.IMapController;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.views.util.MyMath;
-import org.osmdroid.views.util.constants.MapViewConstants;
-
-/**
- *
- * @author Nicolas Gramlich
- */
-public class MapController implements IMapController, MapViewConstants {
-
-    private final MapView mOsmv;
-    private AbstractAnimationRunner mCurrentAnimationRunner;
-
-
-    public MapController(final MapView osmv) {
-        this.mOsmv = osmv;
-    }
-
-
-    public void zoomToSpan(final BoundingBoxOsm bb) {
-        zoomToSpan(bb.getLatitudeSpanE6(), bb.getLongitudeSpanE6());
-    }
-
-    // TODO rework zoomToSpan
-    @Override
-    public void zoomToSpan(final int reqLatSpan, final int reqLonSpan) {
-        if (reqLatSpan <= 0 || reqLonSpan <= 0) {
-            return;
-        }
-
-        final BoundingBoxOsm bb = this.mOsmv.getBoundingBox();
-        final int curZoomLevel = this.mOsmv.getZoomLevel();
-
-        final int curLatSpan = bb.getLatitudeSpanE6();
-        final int curLonSpan = bb.getLongitudeSpanE6();
-
-        final float diffNeededLat = (float) reqLatSpan / curLatSpan; // i.e. 600/500 = 1,2
-        final float diffNeededLon = (float) reqLonSpan / curLonSpan; // i.e. 300/400 = 0,75
-
-        final float diffNeeded = Math.max(diffNeededLat, diffNeededLon); // i.e. 1,2
-
-        if (diffNeeded > 1) { // Zoom Out
-            this.mOsmv.setZoomLevel(curZoomLevel - MyMath.getNextSquareNumberAbove(diffNeeded));
-        } else if (diffNeeded < 0.5) { // Can Zoom in
-            this.mOsmv.setZoomLevel(curZoomLevel + MyMath.getNextSquareNumberAbove(1 / diffNeeded)
-                    - 1);
-        }
-    }
-
-
-
-    /**
-     * Set the map view to the given center. There will be no animation.
-     */
-    @Override
-    public void setCenter(final IGeoPoint point) {
-        final int zoom  = this.mOsmv.getCurrentZoomLevel();
-
-        final Point p = mOsmv.tileSystem.LatLongToPixelXY(point.getLatitudeE6() / 1E6,
-                point.getLongitudeE6() / 1E6, zoom, null);
-        final int worldSize_2 = mOsmv.tileSystem.MapSize(zoom) / 2;
-        this.mOsmv.scrollTo(p.x - worldSize_2, p.y - worldSize_2);
-    }
-
-
-    @Override
-    public int setZoom(final int zoomlevel) {
-        return mOsmv.setZoomLevel(zoomlevel);
-    }
-
-    @Override
-    public boolean zoomIn() {
-        return mOsmv.zoomIn();
-    }
-
-    @Override
-    public boolean zoomOut() {
-        return mOsmv.zoomOut();
-    }
-
-
-    private abstract class AbstractAnimationRunner extends Thread {
-
-        // ===========================================================
-        // Fields
-        // ===========================================================
-
-        protected final int mSmoothness;
-        protected final int mTargetLatitudeE6, mTargetLongitudeE6;
-        protected boolean mDone = false;
-
-        protected final int mStepDuration;
-
-        protected final int mPanTotalLatitudeE6, mPanTotalLongitudeE6;
-
-        // ===========================================================
-        // Constructors
-        // ===========================================================
-
-
-        public AbstractAnimationRunner(final int aTargetLatitudeE6, final int aTargetLongitudeE6,
-                                       final int aSmoothness, final int aDuration) {
-            this.mTargetLatitudeE6 = aTargetLatitudeE6;
-            this.mTargetLongitudeE6 = aTargetLongitudeE6;
-            this.mSmoothness = aSmoothness;
-            this.mStepDuration = aDuration / aSmoothness;
-
-			/* Get the current mapview-center. */
-            final MapView mapview = MapController.this.mOsmv;
-            final IGeoPoint mapCenter = mapview.getMapCenter();
-
-            this.mPanTotalLatitudeE6 = mapCenter.getLatitudeE6() - aTargetLatitudeE6;
-            this.mPanTotalLongitudeE6 = mapCenter.getLongitudeE6() - aTargetLongitudeE6;
-        }
-
-        @Override
-        public void run() {
-            onRunAnimation();
-            this.mDone = true;
-        }
-
-
-        public abstract void onRunAnimation();
-    }
-}
diff --git a/app/src/main/java/org/osmdroid/views/MapView.java b/app/src/main/java/org/osmdroid/views/MapView.java
deleted file mode 100644
index d80429a5..00000000
--- a/app/src/main/java/org/osmdroid/views/MapView.java
+++ /dev/null
@@ -1,817 +0,0 @@
-// Created by plusminus on 17:45:56 - 25.09.2008
-package org.osmdroid.views;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Matrix;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.os.Handler;
-import android.util.AttributeSet;
-import android.view.GestureDetector;
-import android.view.GestureDetector.OnGestureListener;
-import android.view.MotionEvent;
-import android.view.ViewGroup;
-import android.view.animation.Animation;
-import android.view.animation.ScaleAnimation;
-import android.widget.Scroller;
-
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.api.IMapView;
-import org.osmdroid.api.IProjection;
-import org.osmdroid.events.MapListener;
-import org.osmdroid.events.ScrollEvent;
-import org.osmdroid.events.ZoomEvent;
-import org.osmdroid.tileprovider.util.SimpleInvalidationHandler;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.constants.GeoConstants;
-import org.osmdroid.views.overlay.Overlay;
-import org.osmdroid.views.overlay.OverlayManager;
-import org.osmdroid.views.overlay.TilesOverlay;
-import org.osmdroid.views.util.constants.MapViewConstants;
-
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import ch.bailu.aat.map.osmdroid.OsmTileProviderAbstract;
-import microsoft.mappoint.TileSystem;
-
-public class MapView extends ViewGroup implements IMapView, MapViewConstants {
-
-    private int mZoomLevel = 0;
-
-    private final OverlayManager mOverlayManager;
-
-    private Projection mProjection;
-
-    private final TilesOverlay mMapOverlay;
-
-    private final GestureDetector mGestureDetector;
-
-    /** Handles map scrolling */
-    private final Scroller mScroller;
-    private final AtomicInteger mTargetZoomLevel = new AtomicInteger();
-    private final AtomicBoolean mIsAnimating = new AtomicBoolean(false);
-
-    private final ScaleAnimation mZoomInAnimation;
-    private final ScaleAnimation mZoomOutAnimation;
-
-    private final MapController mController;
-
-
-    private float mMultiTouchScale = 1.0f;
-
-    protected MapListener mListener;
-
-    // for speed (avoiding allocations)
-    private final Matrix mMatrix = new Matrix();
-    private final OsmTileProviderAbstract mTileProvider;
-
-    private final Handler mTileRequestCompleteHandler;
-
-    /* a point that will be reused to design added views */
-    private final Point mPoint = new Point();
-
-
-    public final TileSystem tileSystem = new TileSystem();
-
-
-    private MapView(final Context context, final int tileSizePixels,
-                    OsmTileProviderAbstract tileProvider,
-                    final Handler tileRequestCompleteHandler, final AttributeSet attrs) {
-        super(context, attrs);
-        this.mController = new MapController(this);
-        this.mScroller = new Scroller(context);
-        tileSystem.setTileSize(tileSizePixels);
-
-        mTileRequestCompleteHandler = tileRequestCompleteHandler == null ? new SimpleInvalidationHandler(
-                this) : tileRequestCompleteHandler;
-        mTileProvider = tileProvider;
-        mTileProvider.setTileRequestCompleteHandler(mTileRequestCompleteHandler);
-
-        this.mMapOverlay = new TilesOverlay(mTileProvider);
-        mOverlayManager = new OverlayManager(mMapOverlay);
-
-
-        mZoomInAnimation = new ScaleAnimation(1, 2, 1, 2, Animation.RELATIVE_TO_SELF, 0.5f,
-                Animation.RELATIVE_TO_SELF, 0.5f);
-        mZoomOutAnimation = new ScaleAnimation(1, 0.5f, 1, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f,
-                Animation.RELATIVE_TO_SELF, 0.5f);
-        mZoomInAnimation.setDuration(ANIMATION_DURATION_SHORT);
-        mZoomOutAnimation.setDuration(ANIMATION_DURATION_SHORT);
-
-        mGestureDetector = new GestureDetector(context, new MapViewGestureDetectorListener());
-        mGestureDetector.setOnDoubleTapListener(new MapViewDoubleClickListener());
-    }
-
-    /**
-     * Constructor used by XML layout resource (uses default tile source).
-     */
-    public MapView(final Context context, final AttributeSet attrs) {
-        this(context, 256, null, null, attrs);
-    }
-
-    /**
-     * Standard Constructor.
-     */
-
-
-    public MapView(final Context context, final int tileSizePixels,
-                   final OsmTileProviderAbstract aTileProvider) {
-        this(context, tileSizePixels, aTileProvider, null);
-    }
-
-    public MapView(final Context context, final int tileSizePixels,
-                   final OsmTileProviderAbstract aTileProvider,
-                   final Handler tileRequestCompleteHandler) {
-        this(context, tileSizePixels, aTileProvider, tileRequestCompleteHandler,
-                null);
-    }
-
-    // ===========================================================
-    // Getter & Setter
-    // ===========================================================
-
-    @Override
-    public MapController getController() {
-        return this.mController;
-    }
-
-    /**
-     * You can setTarget/remove/reorder your Overlays using the List of {@link Overlay}. The first (index
-     * 0) Overlay gets drawn first, the one with the highest as the last one.
-     */
-    public List<Overlay> getOverlays() {
-        return mOverlayManager;
-    }
-
-    public OverlayManager getOverlayManager() {
-        return mOverlayManager;
-    }
-
-    public OsmTileProviderAbstract getTileProvider() {
-        return mTileProvider;
-    }
-
-    public Scroller getScroller() {
-        return mScroller;
-    }
-
-    public Handler getTileRequestCompleteHandler() {
-        return mTileRequestCompleteHandler;
-    }
-
-    @Override
-    public int getLatitudeSpan() {
-        return this.getBoundingBox().getLatitudeSpanE6();
-    }
-
-    @Override
-    public int getLongitudeSpan() {
-        return this.getBoundingBox().getLongitudeSpanE6();
-    }
-
-    public BoundingBoxOsm getBoundingBox() {
-        return getBoundingBox(getWidth(), getHeight());
-    }
-
-    public BoundingBoxOsm getBoundingBox(final int pViewWidth, final int pViewHeight) {
-
-        final int world_2 = tileSystem.MapSize(mZoomLevel) / 2;
-        final Rect screenRect = getScreenRect(null);
-        screenRect.offset(world_2, world_2);
-
-        final IGeoPoint neGeoPoint = tileSystem.PixelXYToLatLong(screenRect.right, screenRect.top,
-                mZoomLevel, null);
-        final IGeoPoint swGeoPoint = tileSystem.PixelXYToLatLong(screenRect.left, screenRect.bottom,
-                mZoomLevel, null);
-
-        return new BoundingBoxOsm(neGeoPoint.getLatitudeE6(), neGeoPoint.getLongitudeE6(),
-                swGeoPoint.getLatitudeE6(), swGeoPoint.getLongitudeE6());
-    }
-
-    /**
-     * Gets the current bounds of the screen in <I>screen coordinates</I>.
-     */
-    public Rect getScreenRect(final Rect reuse) {
-        final Rect out = reuse == null ? new Rect() : reuse;
-
-        final int w = getWidth();
-        final int h = getHeight();
-
-        out.set(getScrollX() - w / 2, getScrollY() - h / 2, getScrollX()
-                + w / 2, getScrollY() + h / 2);
-        return out;
-    }
-
-    /**
-     * Get a projection for converting between screen-pixel coordinates and latitude/longitude
-     * coordinates. You should not hold on to this object for more than one drawInside, since the
-     * projection of the map could change.
-     *
-     * @return The Projection of the map in its current state. You should not hold on to this object
-     *         for more than one drawInside, since the projection of the map could change.
-     */
-    @Override
-    public Projection getProjection() {
-        if (mProjection == null) {
-            mProjection = new Projection();
-        }
-        return mProjection;
-    }
-
-    void setMapCenter(final IGeoPoint aCenter) {
-        this.setMapCenter(aCenter.getLatitudeE6(), aCenter.getLongitudeE6());
-    }
-
-    void setMapCenter(final int aLatitudeE6, final int aLongitudeE6) {
-        final Point coords = tileSystem.LatLongToPixelXY(aLatitudeE6 / 1E6, aLongitudeE6 / 1E6,
-                getZoomLevel(), null);
-        final int worldSize_2 = tileSystem.MapSize(mZoomLevel) / 2;
-        if (getAnimation() == null || getAnimation().hasEnded()) {
-            mScroller.startScroll(getScrollX(), getScrollY(),
-                    coords.x - worldSize_2 - getScrollX(), coords.y - worldSize_2 - getScrollY(),
-                    500);
-            postInvalidate();
-        }
-    }
-
-
-
-    /**
-     * @param aZoomLevel
-     *            the zoom level bound by the tile source
-     */
-    int setZoomLevel(final int aZoomLevel) {
-        final int minZoomLevel = getMinZoomLevel();
-        final int maxZoomLevel = getMaxZoomLevel();
-
-        final int newZoomLevel = Math.max(minZoomLevel, Math.min(maxZoomLevel, aZoomLevel));
-        final int curZoomLevel = this.mZoomLevel;
-
-        this.mZoomLevel = newZoomLevel;
-
-        if (newZoomLevel > curZoomLevel) {
-            // We are going from a lower-resolution plane to a higher-resolution plane, so we have
-            // to do it the hard way.
-            final int worldSize_current_2 = tileSystem.MapSize(curZoomLevel) / 2;
-            final int worldSize_new_2 = tileSystem.MapSize(newZoomLevel) / 2;
-            final IGeoPoint centerGeoPoint = tileSystem.PixelXYToLatLong(getScrollX()
-                    + worldSize_current_2, getScrollY() + worldSize_current_2, curZoomLevel, null);
-            final Point centerPoint = tileSystem.LatLongToPixelXY(centerGeoPoint.getLatitudeE6() / 1E6,
-                    centerGeoPoint.getLongitudeE6() / 1E6, newZoomLevel, null);
-            scrollTo(centerPoint.x - worldSize_new_2, centerPoint.y - worldSize_new_2);
-        } else if (newZoomLevel < curZoomLevel) {
-            // We are going from a higher-resolution plane to a lower-resolution plane, so we can do
-            // it the easy way.
-            scrollTo(getScrollX() >> curZoomLevel - newZoomLevel, getScrollY() >> curZoomLevel
-                    - newZoomLevel);
-        }
-
-        mProjection = new Projection();
-
-        // do callback on listener
-        if (newZoomLevel != curZoomLevel && mListener != null) {
-            final ZoomEvent event = new ZoomEvent(this, newZoomLevel);
-            mListener.onZoom(event);
-        }
-        return this.mZoomLevel;
-    }
-
-    /**
-     * Get the current ZoomLevel for the map tiles.
-     *
-     * @return the current ZoomLevel between 0 (equator) and 18/19(closest), depending on the tile
-     *         source chosen.
-     */
-    @Override
-    public int getZoomLevel() {
-        return getPendingZoomLevel();
-    }
-
-
-    public int getCurrentZoomLevel() {
-        return mZoomLevel;
-    }
-
-
-    public int getPendingZoomLevel() {
-        if (isAnimating()) {
-            return mTargetZoomLevel.get();
-        }
-        return getCurrentZoomLevel();
-    }
-
-
-
-    /**
-     * Returns the minimum zoom level for the point currently at the center.
-     *
-     * @return The minimum zoom level for the map's current center.
-     */
-    public int getMinZoomLevel() {
-        return mMapOverlay.getMinimumZoomLevel();
-    }
-
-    /**
-     * Returns the maximum zoom level for the point currently at the center.
-     *
-     * @return The maximum zoom level for the map's current center.
-     */
-    @Override
-    public int getMaxZoomLevel() {
-        return mMapOverlay.getMaximumZoomLevel();
-    }
-
-    public boolean canZoomIn() {
-        final int maxZoomLevel = getMaxZoomLevel();
-        if (mZoomLevel >= maxZoomLevel) {
-            return false;
-        }
-        if (isAnimating() & mTargetZoomLevel.get() >= maxZoomLevel) {
-            return false;
-        }
-        return true;
-    }
-
-    public boolean canZoomOut() {
-        final int minZoomLevel = getMinZoomLevel();
-        if (mZoomLevel <= minZoomLevel) {
-            return false;
-        }
-        if (isAnimating() && mTargetZoomLevel.get() <= minZoomLevel) {
-            return false;
-        }
-        return true;
-    }
-
-    /**
-     * Zoom in by one zoom level.
-     */
-    boolean zoomIn() {
-
-        if (canZoomIn()) {
-            if (isAnimating()) {
-                // TODO extend zoom (and return true)
-                return false;
-            } else {
-                mTargetZoomLevel.set(mZoomLevel + 1);
-                startAnimation(mZoomInAnimation);
-                return true;
-            }
-        } else {
-            return false;
-        }
-    }
-
-    boolean zoomInFixing(final IGeoPoint point) {
-        setMapCenter(point); // TODO should fix on point, not center on it
-        return zoomIn();
-    }
-
-    boolean zoomInFixing(final int xPixel, final int yPixel) {
-        setMapCenter(xPixel, yPixel); // TODO should fix on point, not center on it
-        return zoomIn();
-    }
-
-    /**
-     * Zoom out by one zoom level.
-     */
-    boolean zoomOut() {
-
-        if (canZoomOut()) {
-            if (isAnimating()) {
-                // TODO extend zoom (and return true)
-                return false;
-            } else {
-                mTargetZoomLevel.set(mZoomLevel - 1);
-                startAnimation(mZoomOutAnimation);
-                return true;
-            }
-        } else {
-            return false;
-        }
-    }
-
-
-    /**
-     * Returns the current center-point position of the map, as a GeoPoint (latitude and longitude).
-     *
-     * @return A GeoPoint of the map's center-point.
-     */
-    @Override
-    public IGeoPoint getMapCenter() {
-        final int world_2 = tileSystem.MapSize(mZoomLevel) / 2;
-        final Rect screenRect = getScreenRect(null);
-        screenRect.offset(world_2, world_2);
-        return tileSystem.PixelXYToLatLong(screenRect.centerX(), screenRect.centerY(), mZoomLevel,
-                null);
-    }
-
-
-    public void onAttach() {
-        mOverlayManager.onAttach(this);
-    }
-
-
-    public void onDetach() {
-        mOverlayManager.onDetach(this);
-    }
-
-
-    @Override
-    public boolean onTrackballEvent(final MotionEvent event) {
-
-        if (mOverlayManager.onTrackballEvent(event, this)) {
-            return true;
-        }
-
-        scrollBy((int) (event.getX() * 25), (int) (event.getY() * 25));
-
-        return super.onTrackballEvent(event);
-    }
-
-    @Override
-    public boolean dispatchTouchEvent(final MotionEvent event) {
-
-        if (mOverlayManager.onTouchEvent(event, this)) {
-            return true;
-        }
-
-        final boolean r = super.dispatchTouchEvent(event);
-
-        if (mGestureDetector.onTouchEvent(event)) {
-            return true;
-        }
-
-        return r;
-    }
-
-    @Override
-    public void computeScroll() {
-        if (mScroller.computeScrollOffset()) {
-            if (mScroller.isFinished()) {
-                // This will facilitate snapping-to any Snappable points.
-                setZoomLevel(mZoomLevel);
-            } else {
-                scrollTo(mScroller.getCurrX(), mScroller.getCurrY());
-            }
-            postInvalidate(); // Keep on drawing until the animation has
-            // finished.
-        }
-    }
-
-    @Override
-    public void scrollTo(int x, int y) {
-        final int worldSize_2 = tileSystem.MapSize(mZoomLevel) / 2;
-        while (x < -worldSize_2) {
-            x += (worldSize_2 * 2);
-        }
-        while (x > worldSize_2) {
-            x -= (worldSize_2 * 2);
-        }
-        while (y < -worldSize_2) {
-            y += (worldSize_2 * 2);
-        }
-        while (y > worldSize_2) {
-            y -= (worldSize_2 * 2);
-        }
-        super.scrollTo(x, y);
-
-        // do callback on listener
-        if (mListener != null) {
-            final ScrollEvent event = new ScrollEvent(this, x, y);
-            mListener.onScroll(event);
-        }
-    }
-
-
-    @SuppressLint("WrongCall")
-    @Override
-    protected void dispatchDraw(final Canvas c) {
-
-        mProjection = new Projection();
-
-        c.save();
-
-        if (mMultiTouchScale == 1.0f) {
-            c.translate(getWidth() / 2, getHeight() / 2);
-        } else {
-            c.getMatrix(mMatrix);
-            mMatrix.postTranslate(getWidth() / 2, getHeight() / 2);
-            mMatrix.preScale(mMultiTouchScale, mMultiTouchScale, getScrollX(), getScrollY());
-            c.setMatrix(mMatrix);
-        }
-
-
-      mOverlayManager.onDraw(c, this);
-
-        c.restore();
-
-        super.dispatchDraw(c);
-    }
-
-
-    @Override
-    protected void onDetachedFromWindow() {
-        //	this.mZoomController.setVisible(false);
-        this.onDetach();
-        super.onDetachedFromWindow();
-    }
-
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        this.onAttach();
-    }
-
-
-    @Override
-    protected void onLayout(boolean changed, int l, int t, int r, int b) {
-
-    }
-
-    // ===========================================================
-    // Animation
-    // ===========================================================
-
-    @Override
-    protected void onAnimationStart() {
-        mIsAnimating.set(true);
-        super.onAnimationStart();
-    }
-
-    @Override
-    protected void onAnimationEnd() {
-        mIsAnimating.set(false);
-        clearAnimation();
-        setZoomLevel(mTargetZoomLevel.get());
-        this.isAnimating();
-        super.onAnimationEnd();
-    }
-
-    /**
-     * Check mAnimationListener.isAnimating() to determine if view is animating. Useful for overlays
-     * to avoid recalculating during an animation sequence.
-     *
-     * @return boolean indicating whether view is animating.
-     */
-    public boolean isAnimating() {
-        return mIsAnimating.get();
-    }
-
-    /*
-     * Set the MapListener for this view
-     */
-    public void setMapListener(final MapListener ml) {
-        mListener = ml;
-    }
-
-
-
-
-
-    // ===========================================================
-    // Inner and Anonymous Classes
-    // ===========================================================
-
-    /**
-     * A Projection serves to translate between the coordinate system of x/y on-screen pixel
-     * coordinates and that of latitude/longitude points on the surface of the earth. You obtain a
-     * Projection from MapView.getProjection(). You should not hold on to this object for more than
-     * one drawInside, since the projection of the map could change. <br />
-     * <br />
-     * <I>Screen coordinates</I> are in the coordinate system of the screen's Canvas. The origin is
-     * in the center of the plane. <I>Screen coordinates</I> are appropriate for using to drawInside to
-     * the screen.<br />
-     * <br />
-     * <I>Map coordinates</I> are in the coordinate system of the standard Mercator projection. The
-     * origin is in the upper-left corner of the plane. <I>Map coordinates</I> are appropriate for
-     * use in the TileSystem class.<br />
-     * <br />
-     * <I>Intermediate coordinates</I> are used to cache the computationally heavy part of the
-     * projection. They aren't suitable for use until translated into <I>screen coordinates</I> or
-     * <I>map coordinates</I>.
-     *
-     * @author Nicolas Gramlich
-     * @author Manuel Stahl
-     */
-    public class Projection implements IProjection, GeoConstants {
-
-        private final int viewWidth_2 = getWidth() / 2;
-        private final int viewHeight_2 = getHeight() / 2;
-        private final int worldSize_2 = tileSystem.MapSize(mZoomLevel) / 2;
-        private final int offsetX = -worldSize_2;
-        private final int offsetY = -worldSize_2;
-
-        private final BoundingBoxOsm mBoundingBoxProjection;
-        private final int mZoomLevelProjection;
-        private final Rect mScreenRectProjection;
-
-        private Projection() {
-
-			/*
-			 * Do some calculations and drag attributes to local variables to save some performance.
-			 */
-            mZoomLevelProjection = MapView.this.mZoomLevel;
-            mBoundingBoxProjection = MapView.this.getBoundingBox();
-            mScreenRectProjection = MapView.this.getScreenRect(null);
-        }
-
-        public int getZoomLevel() {
-            return mZoomLevelProjection;
-        }
-
-        public BoundingBoxOsm getBoundingBox() {
-            return mBoundingBoxProjection;
-        }
-
-        public Rect getScreenRect() {
-            return mScreenRectProjection;
-        }
-
-        /**
-         * @deprecated Use TileSystem.getTileSize() instead.
-         */
-        @Deprecated
-        public int getTileSizePixels() {
-            return tileSystem.getTileSize();
-        }
-
-        /**
-         * @deprecated Use
-         *             <code>Point out = TileSystem.PixelXYToTileXY(screenRect.centerX(), screenRect.centerY(), null);</code>
-         *             instead.
-         */
-        @Deprecated
-        public Point getCenterMapTileCoords() {
-            final Rect rect = getScreenRect();
-            return tileSystem.PixelXYToTileXY(rect.centerX(), rect.centerY(), null);
-        }
-
-
-        /**
-         * Converts <I>screen coordinates</I> to the underlying GeoPoint.
-         *
-         * @param x
-         * @param y
-         * @return GeoPoint under x/y.
-         */
-        public IGeoPoint fromPixels(final float x, final float y) {
-            final Rect screenRect = getScreenRect();
-            return tileSystem.PixelXYToLatLong(screenRect.left + (int) x + worldSize_2,
-                    screenRect.top + (int) y + worldSize_2, mZoomLevelProjection, null);
-        }
-
-        public Point fromMapPixels(final int x, final int y, final Point reuse) {
-            final Point out = reuse != null ? reuse : new Point();
-            out.set(x - viewWidth_2, y - viewHeight_2);
-            out.offset(getScrollX(), getScrollY());
-            return out;
-        }
-
-        /**
-         * Converts a GeoPoint to its <I>screen coordinates</I>.
-         *
-         * @param in
-         *            the GeoPoint you want the <I>screen coordinates</I> of
-         * @param reuse
-         *            just pass null if you do not have a Point to be 'recycled'.
-         * @return the Point containing the <I>screen coordinates</I> of the GeoPoint passed.
-         */
-        public Point toMapPixels(final IGeoPoint in, final Point reuse) {
-            final Point out = reuse != null ? reuse : new Point();
-
-            final Point coords = tileSystem.LatLongToPixelXY(in.getLatitudeE6() / 1E6,
-                    in.getLongitudeE6() / 1E6, getZoomLevel(), null);
-            out.set(coords.x, coords.y);
-            out.offset(offsetX, offsetY);
-            return out;
-        }
-
-        /**
-         * Performs only the first computationally heavy part of the projection. Call
-         * toMapPixelsTranslated to getDrawable the final position.
-         *
-         * @param latituteE6
-         *            the latitute of the point
-         * @param longitudeE6
-         *            the longitude of the point
-         * @param reuse
-         *            just pass null if you do not have a Point to be 'recycled'.
-         * @return intermediate value to be stored and passed to toMapPixelsTranslated.
-         */
-        public Point toMapPixelsProjected(final int latituteE6, final int longitudeE6,
-                                          final Point reuse) {
-            final Point out = reuse != null ? reuse : new Point();
-
-            tileSystem
-                    .LatLongToPixelXY(latituteE6 / 1E6, longitudeE6 / 1E6, MAXIMUM_ZOOMLEVEL, out);
-            return out;
-        }
-
-
-        @Override
-        public float metersToEquatorPixels(final float meters) {
-            return meters / (float) tileSystem.GroundResolution(0, mZoomLevelProjection);
-        }
-
-        @Override
-        public Point toPixels(final IGeoPoint in, final Point out) {
-            return toMapPixels(in, out);
-        }
-
-        @Override
-        public IGeoPoint fromPixels(final int x, final int y) {
-            return fromPixels((float) x, (float) y);
-        }
-    }
-
-    private class MapViewGestureDetectorListener implements OnGestureListener {
-
-        @Override
-        public boolean onDown(final MotionEvent e) {
-            if (MapView.this.mOverlayManager.onDown(e, MapView.this)) {
-                return true;
-            }
-
-            //mZoomController.setVisible(mEnableZoomController);
-            return true;
-        }
-
-        @Override
-        public boolean onFling(final MotionEvent e1, final MotionEvent e2, final float velocityX,
-                               final float velocityY) {
-            if (MapView.this.mOverlayManager.onFling(e1, e2, velocityX, velocityY, MapView.this)) {
-                return true;
-            }
-            return false;
-        }
-
-        @Override
-        public void onLongPress(final MotionEvent e) {
-            MapView.this.mOverlayManager.onLongPress(e, MapView.this);
-        }
-
-        @Override
-        public boolean onScroll(final MotionEvent e1, final MotionEvent e2, final float distanceX,
-                                final float distanceY) {
-
-            if (MapView.this.mOverlayManager.onScroll(e1, e2, distanceX, distanceY, MapView.this)) {
-                return true;
-            }
-
-            scrollBy((int) distanceX, (int) distanceY);
-            return true;
-        }
-
-        @Override
-        public void onShowPress(final MotionEvent e) {
-            MapView.this.mOverlayManager.onShowPress(e, MapView.this);
-        }
-
-        @Override
-        public boolean onSingleTapUp(final MotionEvent e) {
-            if (MapView.this.mOverlayManager.onSingleTapUp(e, MapView.this)) {
-                return true;
-            }
-
-            return false;
-        }
-
-    }
-
-    private class MapViewDoubleClickListener implements GestureDetector.OnDoubleTapListener {
-        @Override
-        public boolean onDoubleTap(final MotionEvent e) {
-            if (mOverlayManager.onDoubleTap(e, MapView.this)) {
-                return true;
-            }
-            final IGeoPoint center = getProjection().fromPixels(e.getX(), e.getY());
-            return zoomInFixing(center);
-        }
-
-        @Override
-        public boolean onDoubleTapEvent(final MotionEvent e) {
-            if (mOverlayManager.onDoubleTapEvent(e, MapView.this)) {
-                return true;
-            }
-
-            return false;
-        }
-
-        @Override
-        public boolean onSingleTapConfirmed(final MotionEvent e) {
-            if (mOverlayManager.onSingleTapConfirmed(e, MapView.this)) {
-                return true;
-            }
-
-            return false;
-        }
-    }
-
-
-}
diff --git a/app/src/main/java/org/osmdroid/views/overlay/LoadingTile.java b/app/src/main/java/org/osmdroid/views/overlay/LoadingTile.java
deleted file mode 100644
index a1015d79..00000000
--- a/app/src/main/java/org/osmdroid/views/overlay/LoadingTile.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package org.osmdroid.views.overlay;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-
-import ch.bailu.aat.util.ui.AppLog;
-
-public class LoadingTile {
-    private static Drawable tile;
-    private static Bitmap bitmap;
-
-
-    private final static int BACKGROUND_COLOR = Color.rgb(216, 208, 208);
-    private final static int LINE_COLOR = Color.rgb(200, 192, 192);
-    private final static int SIZE = 256;
-
-    public synchronized static Bitmap getBitmap() {
-        if (bitmap == null) {
-            bitmap = Bitmap.createBitmap(SIZE, SIZE,
-                    Bitmap.Config.ARGB_8888);
-            final Canvas canvas = new Canvas(bitmap);
-            final Paint paint = new Paint();
-            canvas.drawColor(BACKGROUND_COLOR);
-            paint.setColor(LINE_COLOR);
-            paint.setStrokeWidth(0);
-            final int lineSize = SIZE / 16;
-            for (int a = 0; a < SIZE; a += lineSize) {
-                canvas.drawLine(0, a, SIZE, a, paint);
-                canvas.drawLine(a, 0, a, SIZE, paint);
-            }
-        }
-        return bitmap;
-    }
-
-
-    public synchronized static Drawable getDrawable(Context context) {
-        if (tile == null) {
-            try {
-                bitmap = getBitmap();
-                tile = new BitmapDrawable(context.getResources(), bitmap);
-            } catch (final OutOfMemoryError e) {
-                AppLog.e(context, e);
-                System.gc();
-            }
-        }
-        return tile;
-    }
-}
diff --git a/app/src/main/java/org/osmdroid/views/overlay/Overlay.java b/app/src/main/java/org/osmdroid/views/overlay/Overlay.java
deleted file mode 100644
index 4711e484..00000000
--- a/app/src/main/java/org/osmdroid/views/overlay/Overlay.java
+++ /dev/null
@@ -1,149 +0,0 @@
-// Created by plusminus on 20:32:01 - 27.09.2008
-package org.osmdroid.views.overlay;
-
-import android.graphics.Canvas;
-import android.view.GestureDetector;
-import android.view.MotionEvent;
-
-import org.osmdroid.views.MapView;
-import org.osmdroid.views.util.constants.OverlayConstants;
-
-/**
- * Base class representing an overlay which may be displayed on top of a {@link MapView}. To setTarget an
- * overlay, subclass this class, create an instance, and setTarget it to the list obtained from
- * getOverlays() of {@link MapView}.
- * 
- * This class implements a form of Gesture Handling similar to
- * {@link android.view.GestureDetector.SimpleOnGestureListener} and
- * {@link GestureDetector.OnGestureListener}. The difference is there is an additional argument for
- * the item.
- * 
- * @author Nicolas Gramlich
- */
-public abstract class Overlay implements OverlayConstants {
-
-
-	protected abstract void draw(final Canvas c, final MapView osmv);
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	public void onAttach(final MapView mapView) {}
-	public void onDetach(final MapView mapView) {}
-
-
-	/**
-	 * <b>You can prevent all(!) other Touch-related events from happening!</b><br />
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onTouchEvent(final MotionEvent event, final MapView mapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onTrackballEvent(final MotionEvent event, final MapView mapView) {
-		return false;
-	}
-
-	/** GestureDetector.OnDoubleTapListener **/
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onDoubleTap(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onDoubleTapEvent(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onSingleTapConfirmed(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-	/** OnGestureListener **/
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onDown(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onFling(final MotionEvent pEvent1, final MotionEvent pEvent2,
-			final float pVelocityX, final float pVelocityY, final MapView pMapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onLongPress(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onScroll(final MotionEvent pEvent1, final MotionEvent pEvent2,
-			final float pDistanceX, final float pDistanceY, final MapView pMapView) {
-		return false;
-	}
-
-	public void onShowPress(final MotionEvent pEvent, final MapView pMapView) {
-		return;
-	}
-
-	/**
-	 * By default does nothing (<code>return false</code>). If you handled the Event, return
-	 * <code>true</code>, otherwise return <code>false</code>. If you returned <code>true</code>
-	 * none of the following Overlays or the underlying {@link MapView} has the chance to handle
-	 * this event.
-	 */
-	public boolean onSingleTapUp(final MotionEvent e, final MapView mapView) {
-		return false;
-	}
-
-
-
-}
diff --git a/app/src/main/java/org/osmdroid/views/overlay/OverlayManager.java b/app/src/main/java/org/osmdroid/views/overlay/OverlayManager.java
deleted file mode 100644
index 0663f88d..00000000
--- a/app/src/main/java/org/osmdroid/views/overlay/OverlayManager.java
+++ /dev/null
@@ -1,229 +0,0 @@
-package org.osmdroid.views.overlay;
-
-import android.graphics.Canvas;
-import android.view.MotionEvent;
-
-import org.osmdroid.views.MapView;
-
-import java.util.AbstractList;
-import java.util.Iterator;
-import java.util.ListIterator;
-import java.util.concurrent.CopyOnWriteArrayList;
-
-public class OverlayManager extends AbstractList<Overlay> {
-
-    private TilesOverlay mTilesOverlay;
-
-    private final CopyOnWriteArrayList<Overlay> mOverlayList;
-
-    public OverlayManager(final TilesOverlay tilesOverlay) {
-        setTilesOverlay(tilesOverlay);
-        mOverlayList = new CopyOnWriteArrayList<>();
-    }
-
-    @Override
-    public Overlay get(final int pIndex) {
-        return mOverlayList.get(pIndex);
-    }
-
-    @Override
-    public int size() {
-        return mOverlayList.size();
-    }
-
-    @Override
-    public void add(final int pIndex, final Overlay pElement) {
-        mOverlayList.add(pIndex, pElement);
-    }
-
-    @Override
-    public Overlay remove(final int pIndex) {
-        return mOverlayList.remove(pIndex);
-    }
-
-    @Override
-    public Overlay set(final int pIndex, final Overlay pElement) {
-        return mOverlayList.set(pIndex, pElement);
-    }
-
-
-
-    public void setTilesOverlay(final TilesOverlay tilesOverlay) {
-        mTilesOverlay = tilesOverlay;
-    }
-
-
-    public Iterable<Overlay> overlaysReversed() {
-        return new Iterable<Overlay>() {
-            @Override
-            public Iterator<Overlay> iterator() {
-                final ListIterator<Overlay> i = mOverlayList.listIterator(mOverlayList.size());
-
-                return new Iterator<Overlay>() {
-                    @Override
-                    public boolean hasNext() {
-                        return i.hasPrevious();
-                    }
-
-                    @Override
-                    public Overlay next() {
-                        return i.previous();
-                    }
-
-                    @Override
-                    public void remove() {
-                        i.remove();
-                    }
-                };
-            }
-        };
-    }
-
-    public void onDraw(final Canvas c, final MapView pMapView) {
-        if ((mTilesOverlay != null)) {
-            mTilesOverlay.draw(c, pMapView);
-        }
-
-        for (final Overlay overlay : mOverlayList) {
-            overlay.draw(c, pMapView);
-        }
-    }
-
-
-
-    public void onDetach(final MapView pMapView) {
-        if (mTilesOverlay != null) {
-            mTilesOverlay.onDetach(pMapView);
-        }
-
-        for (final Overlay overlay : this.overlaysReversed()) {
-            overlay.onDetach(pMapView);
-        }
-    }
-
-
-    public void onAttach(final MapView pMapView) {
-        if (mTilesOverlay != null) {
-            mTilesOverlay.onAttach(pMapView);
-        }
-
-        for (final Overlay overlay : this.overlaysReversed()) {
-            overlay.onAttach(pMapView);
-        }
-    }
-
-
-    public boolean onTouchEvent(final MotionEvent event, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onTouchEvent(event, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onTrackballEvent(final MotionEvent event, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onTrackballEvent(event, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-
-    /** GestureDetector.OnDoubleTapListener **/
-
-    public boolean onDoubleTap(final MotionEvent e, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onDoubleTap(e, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onDoubleTapEvent(final MotionEvent e, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onDoubleTapEvent(e, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onSingleTapConfirmed(final MotionEvent e, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onSingleTapConfirmed(e, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /** OnGestureListener **/
-
-    public boolean onDown(final MotionEvent pEvent, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onDown(pEvent, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onFling(final MotionEvent pEvent1, final MotionEvent pEvent2,
-                           final float pVelocityX, final float pVelocityY, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onFling(pEvent1, pEvent2, pVelocityX, pVelocityY, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onLongPress(final MotionEvent pEvent, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onLongPress(pEvent, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public boolean onScroll(final MotionEvent pEvent1, final MotionEvent pEvent2,
-                            final float pDistanceX, final float pDistanceY, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onScroll(pEvent1, pEvent2, pDistanceX, pDistanceY, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    public void onShowPress(final MotionEvent pEvent, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            overlay.onShowPress(pEvent, pMapView);
-        }
-    }
-
-    public boolean onSingleTapUp(final MotionEvent pEvent, final MapView pMapView) {
-        for (final Overlay overlay : this.overlaysReversed()) {
-            if (overlay.onSingleTapUp(pEvent, pMapView)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-}
diff --git a/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java b/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java
deleted file mode 100644
index 4da0d849..00000000
--- a/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package org.osmdroid.views.overlay;
-
-import android.content.Context;
-import android.graphics.Canvas;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.graphics.drawable.Drawable;
-
-import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.util.MyMath;
-import org.osmdroid.views.MapView;
-
-import ch.bailu.aat.map.osmdroid.OsmTileProviderAbstract;
-import microsoft.mappoint.TileSystem;
-
-
-public class TilesOverlay extends Overlay  {
-
-
-	/** Current tile source */
-	private final OsmTileProviderAbstract mTileProvider;
-
-	/* to avoid allocations during drawInside */
-	private final Rect mTileRect = new Rect();
-	private final Rect mViewPort = new Rect();
-    private final Point mUpperLeft = new Point();
-    private final Point mLowerRight = new Point();
-
-	private int mWorldSize_2;
-
-	public TilesOverlay(final OsmTileProviderAbstract aTileProvider) {
-		mTileProvider = aTileProvider;
-	}
-
-	@Override
-	public void onDetach(final MapView pMapView) {
-		this.mTileProvider.detach();
-	}
-
-	@Override
-	public void onAttach(final MapView pMapView) {
-		this.mTileProvider.attach();
-	}
-
-	public int getMinimumZoomLevel() {
-		return mTileProvider.getMinimumZoomLevel();
-	}
-	public int getMaximumZoomLevel() {
-		return mTileProvider.getMaximumZoomLevel();
-	}
-
-
-	@Override
-	protected void draw(final Canvas c, final MapView osmv) {
-		
-		mTileProvider.setStartTime();
-		// Calculate the half-world size
-		final MapView.Projection projection = osmv.getProjection();
-		final int zoomLevel = projection.getZoomLevel();
-		mWorldSize_2 = osmv.tileSystem.MapSize(zoomLevel) / 2;
-
-		// Get the area we are drawing to
-		mViewPort.set(projection.getScreenRect());
-
-		// Translate the Canvas coordinates into Mercator coordinates
-		mViewPort.offset(mWorldSize_2, mWorldSize_2);
-
-		// MapDraw the tiles!
-		drawTiles(c, projection.getZoomLevel(), osmv.tileSystem, mViewPort, osmv.getContext());
-	}
-
-	/**
-	 * This is meant to be a "pure" tile drawing function that doesn't take into account
-	 * platform-specific characteristics (like Android's canvas's having 0,0 as the center rather
-	 * than the upper-left corner).
-	 */
-
-
-	public void drawTiles(final Canvas c, final int zoomLevel, final TileSystem tileSystem,
-			final Rect viewPort, final Context context) {
-
-	    final int tileSizePx = tileSystem.getTileSize();
-		
-	
-		// Calculate the amount of tiles needed for each side around the center one.
-		tileSystem.PixelXYToTileXY(viewPort.left, viewPort.top, mUpperLeft);
-		mUpperLeft.offset(-1, -1);
-		tileSystem.PixelXYToTileXY(viewPort.right, viewPort.bottom, mLowerRight);
-
-		final int mapTileUpperBound = 1 << zoomLevel;
-
-		// make sure the cache is big enough for all the tiles
-		final int capacity = (mLowerRight.y - mUpperLeft.y + 1) * (mLowerRight.x - mUpperLeft.x + 1);
-		mTileProvider.ensureCapacity(capacity);
-
-		/* MapDraw all the MapTiles (from the upper left to the lower right). */
-		for (int y = mUpperLeft.y; y <= mLowerRight.y; y++) {
-			for (int x = mUpperLeft.x; x <= mLowerRight.x; x++) {
-				// Construct a MapTile to Request from the tile provider.
-				final int tileY = MyMath.mod(y, mapTileUpperBound);
-				final int tileX = MyMath.mod(x, mapTileUpperBound);
-				final MapTile tile = new MapTile(zoomLevel, tileX, tileY);
-
-				Drawable currentMapTile = mTileProvider.getMapTile(tile);
-				if (currentMapTile == null) {
-					currentMapTile = LoadingTile.getDrawable(context);
-				}
-
-				if (currentMapTile != null) {
-					mTileRect.set(x * tileSizePx, y * tileSizePx, x * tileSizePx + tileSizePx, y
-							* tileSizePx + tileSizePx);
-					drawTile(c, currentMapTile, mTileRect);
-				}
-			}
-		}
-	}
-
-
-
-    private void drawTile(final Canvas c, final Drawable currentMapTile,
-                          final Rect tileRect) {
-		tileRect.offset(-mWorldSize_2, -mWorldSize_2);
-		currentMapTile.setBounds(tileRect);
-		currentMapTile.draw(c);
-	}
-}
diff --git a/app/src/main/java/org/osmdroid/views/util/Mercator.java b/app/src/main/java/org/osmdroid/views/util/Mercator.java
deleted file mode 100644
index 2b998bc9..00000000
--- a/app/src/main/java/org/osmdroid/views/util/Mercator.java
+++ /dev/null
@@ -1,159 +0,0 @@
-// Created by plusminus on 17:53:07 - 25.09.2008
-package org.osmdroid.views.util;
-
-import android.graphics.Point;
-
-import org.osmdroid.api.IGeoPoint;
-import org.osmdroid.util.BoundingBoxOsm;
-import org.osmdroid.util.GeoPoint;
-import org.osmdroid.views.util.constants.MapViewConstants;
-
-/**
- * http://wiki.openstreetmap.org/index.php/Mercator
- * http://developers.cloudmade.com/projects/tiles/examples/convert-coordinates-to-tile-numbers
- * 
- * @author Nicolas Gramlich
- * 
- * @deprecated Use TileSystem instead
- * 
- */
-public class Mercator implements MapViewConstants {
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	final static double DEG2RAD = Math.PI / 180;
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	/**
-	 * This is a utility class with only static members.
-	 */
-	private Mercator() {
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	/**
-	 * Mercator projection of GeoPoint at given zoom level
-	 * 
-	 * @param aLat
-	 *            latitude in degrees [-89000000 to 89000000]
-	 * @param aLon
-	 *            longitude in degrees [-180000000 to 180000000]
-	 * @param zoom
-	 *            zoom level
-	 * @param aUseAsReturnValue
-	 * @return Point with x,y in the range [-2^(zoom-1) to 2^(zoom-1)]
-	 */
-	public static Point projectGeoPoint(final int aLatE6, final int aLonE6, final int aZoom,
-			final Point reuse) {
-		return projectGeoPoint(aLatE6 * 1E-6, aLonE6 * 1E-6, aZoom, reuse);
-	}
-
-	/**
-	 * Mercator projection of GeoPoint at given zoom level
-	 * 
-	 * @param pGeoPoint
-	 * @param zoom
-	 *            zoom level
-	 * @param pUseAsReturnValue
-	 * @return Point with x,y in the range [-2^(zoom-1) to 2^(zoom-1)]
-	 */
-	public static Point projectGeoPoint(final IGeoPoint pGeoPoint, final int pZoom,
-			final Point pUseAsReturnValue) {
-		return projectGeoPoint(pGeoPoint.getLatitudeE6() * 1E-6, pGeoPoint.getLongitudeE6() * 1E-6,
-				pZoom, pUseAsReturnValue);
-	}
-
-	/**
-	 * Mercator projection of GeoPoint at given zoom level
-	 * 
-	 * @param aLat
-	 *            latitude in degrees [-89 to 89]
-	 * @param aLon
-	 *            longitude in degrees [-180 to 180]
-	 * @param zoom
-	 *            zoom level
-	 * @param aUseAsReturnValue
-	 * @return Point with x,y in the range [-2^(zoom-1) to 2^(zoom-1)]
-	 */
-	public static Point projectGeoPoint(final double aLat, final double aLon, final int aZoom,
-			final Point aUseAsReturnValue) {
-		final Point p = aUseAsReturnValue != null ? aUseAsReturnValue : new Point(0, 0);
-
-		p.x = ((int) Math.floor((aLon + 180) / 360 * (1 << aZoom)));
-		p.y = ((int) Math.floor((1 - Math.log(Math.tan(aLat * DEG2RAD) + 1
-				/ Math.cos(aLat * DEG2RAD))
-				/ Math.PI)
-				/ 2 * (1 << aZoom)));
-
-		return p;
-	}
-
-	/**
-	 * Get bounding box from reverse Mercator projection.
-	 * 
-	 * @param left
-	 * @param top
-	 * @param right
-	 * @param bottom
-	 * @param zoom
-	 * @return
-	 */
-	public static BoundingBoxOsm getBoundingBoxFromCoords(final int left, final int top,
-														  final int right, final int bottom, final int zoom) {
-		return new BoundingBoxOsm(tile2lat(top, zoom), tile2lon(right, zoom),
-				tile2lat(bottom, zoom), tile2lon(left, zoom));
-	}
-
-	/**
-	 * Get bounding box from reverse Mercator projection.
-	 * 
-	 * @param aMapTile
-	 * @param aZoom
-	 * @return
-	 */
-	public static BoundingBoxOsm getBoundingBoxFromPointInMapTile(final Point aMapTile,
-																  final int aZoom) {
-		return new BoundingBoxOsm(tile2lat(aMapTile.y, aZoom), tile2lon(aMapTile.x + 1, aZoom),
-				tile2lat(aMapTile.y + 1, aZoom), tile2lon(aMapTile.x, aZoom));
-	}
-
-	/**
-	 * Reverse Mercator projection of Point at given zoom level
-	 * 
-	 */
-	public static GeoPoint projectPoint(final int x, final int y, final int aZoom) {
-		return new GeoPoint((int) (tile2lat(y, aZoom) * 1E6), (int) (tile2lon(x, aZoom) * 1E6));
-	}
-
-	public static double tile2lon(final int x, final int aZoom) {
-		return (double) x / (1 << aZoom) * 360.0 - 180;
-	}
-
-	public static double tile2lat(final int y, final int aZoom) {
-		final double n = Math.PI - 2.0 * Math.PI * y / (1 << aZoom);
-		return 180.0 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));
-	}
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/views/util/MyMath.java b/app/src/main/java/org/osmdroid/views/util/MyMath.java
deleted file mode 100644
index c2e54a12..00000000
--- a/app/src/main/java/org/osmdroid/views/util/MyMath.java
+++ /dev/null
@@ -1,73 +0,0 @@
-// Created by plusminus on 20:36:01 - 26.09.2008
-package org.osmdroid.views.util;
-
-/**
- * 
- * @author Nicolas Gramlich
- * 
- */
-public class MyMath {
-	// ===========================================================
-	// Constants
-	// ===========================================================
-
-	// ===========================================================
-	// Fields
-	// ===========================================================
-
-	// ===========================================================
-	// Constructors
-	// ===========================================================
-
-	/**
-	 * This is a utility class with only static members.
-	 */
-	private MyMath() {
-	}
-
-	// ===========================================================
-	// Getter & Setter
-	// ===========================================================
-
-	// ===========================================================
-	// Methods from SuperClass/Interfaces
-	// ===========================================================
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-
-	/**
-	 * Calculates i.e. the increase of zoomlevel needed when the visible latitude needs to be bigger
-	 * by <code>factor</code>.
-	 * 
-	 * Assert.assertEquals(1, getNextSquareNumberAbove(1.1f)); Assert.assertEquals(2,
-	 * getNextSquareNumberAbove(2.1f)); Assert.assertEquals(2, getNextSquareNumberAbove(3.9f));
-	 * Assert.assertEquals(3, getNextSquareNumberAbove(4.1f)); Assert.assertEquals(3,
-	 * getNextSquareNumberAbove(7.9f)); Assert.assertEquals(4, getNextSquareNumberAbove(8.1f));
-	 * Assert.assertEquals(5, getNextSquareNumberAbove(16.1f));
-	 * 
-	 * Assert.assertEquals(-1, - getNextSquareNumberAbove(1 / 0.4f) + 1); Assert.assertEquals(-2, -
-	 * getNextSquareNumberAbove(1 / 0.24f) + 1);
-	 * 
-	 * @param factor
-	 * @return
-	 */
-	public static int getNextSquareNumberAbove(final float factor) {
-		int out = 0;
-		int cur = 1;
-		int i = 1;
-		while (true) {
-			if (cur > factor)
-				return out;
-
-			out = i;
-			cur *= 2;
-			i++;
-		}
-	}
-
-	// ===========================================================
-	// Inner and Anonymous Classes
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/views/util/constants/MapViewConstants.java b/app/src/main/java/org/osmdroid/views/util/constants/MapViewConstants.java
deleted file mode 100644
index 7d1f3dae..00000000
--- a/app/src/main/java/org/osmdroid/views/util/constants/MapViewConstants.java
+++ /dev/null
@@ -1,36 +0,0 @@
-// Created by plusminus on 18:00:24 - 25.09.2008
-package org.osmdroid.views.util.constants;
-
-/**
- * 
- * This class contains constants used by the map view.
- * 
- * @author Nicolas Gramlich
- * 
- */
-public interface MapViewConstants {
-	// ===========================================================
-	// Final Fields
-	// ===========================================================
-
-	public static final boolean DEBUGMODE = false;
-
-	public static final int NOT_SET = Integer.MIN_VALUE;
-
-	public static final int ANIMATION_SMOOTHNESS_LOW = 4;
-	public static final int ANIMATION_SMOOTHNESS_DEFAULT = 10;
-	public static final int ANIMATION_SMOOTHNESS_HIGH = 20;
-
-	public static final int ANIMATION_DURATION_SHORT = 500;
-	public static final int ANIMATION_DURATION_DEFAULT = 1000;
-	public static final int ANIMATION_DURATION_LONG = 2000;
-
-	/** Minimum Zoom Level */
-	public static final int MINIMUM_ZOOMLEVEL = 0;
-
-	/**
-	 * Maximum Zoom Level - we use Integers to store zoom levels so overflow happens at 2^32 - 1,
-	 * but we also have a tile size that is typically 2^8, so (32-1)-8-1 = 22
-	 */
-	public static final int MAXIMUM_ZOOMLEVEL = 22;
-}
diff --git a/app/src/main/java/org/osmdroid/views/util/constants/MathConstants.java b/app/src/main/java/org/osmdroid/views/util/constants/MathConstants.java
deleted file mode 100644
index 50eb3a16..00000000
--- a/app/src/main/java/org/osmdroid/views/util/constants/MathConstants.java
+++ /dev/null
@@ -1,24 +0,0 @@
-// Created by plusminus on 17:27:54 - 30.09.2008
-package org.osmdroid.views.util.constants;
-
-/**
- * 
- * @author Nicolas Gramlich
- * 
- */
-public interface MathConstants {
-	// ===========================================================
-	// Final Fields
-	// ===========================================================
-
-	public static final float DEG2RAD = (float) (Math.PI / 180.0);
-	public static final float RAD2DEG = (float) (180.0 / Math.PI);
-
-	public static final float PI = (float) Math.PI;
-	public static final float PI_2 = PI / 2.0f;
-	public static final float PI_4 = PI / 4.0f;
-
-	// ===========================================================
-	// Methods
-	// ===========================================================
-}
diff --git a/app/src/main/java/org/osmdroid/views/util/constants/OverlayConstants.java b/app/src/main/java/org/osmdroid/views/util/constants/OverlayConstants.java
deleted file mode 100644
index a4b5a28b..00000000
--- a/app/src/main/java/org/osmdroid/views/util/constants/OverlayConstants.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.osmdroid.views.util.constants;
-
-/**
- * This class contains constants used by the overlays.
- */
-public interface OverlayConstants {
-	// ===========================================================
-	// Final Fields
-	// ===========================================================
-
-	public static final boolean DEBUGMODE = false;
-
-	public static final int NOT_SET = Integer.MIN_VALUE;
-
-	public static final int DEFAULT_ZOOMLEVEL_MINIMAP_DIFFERENCE = 3;
-}
