diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/CommandBuilder.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/CommandBuilder.java
new file mode 100644
index 0000000..b2f286a
--- /dev/null
+++ b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/CommandBuilder.java
@@ -0,0 +1,103 @@
+package com.github.timnew.androidinfrared;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CommandBuilder {
+    public static final int DEFAULT_TOP_BIT = 0x80000000;
+    private final int frequency;
+    private final List<Integer> buffer;
+    private Boolean lastMark;
+
+    public static CommandBuilder commandBuilder(int frequency) {
+        return new CommandBuilder(frequency);
+    }
+
+    private CommandBuilder(int frequencyKHz) {
+        this.frequency = frequencyKHz;
+
+        buffer = new ArrayList<Integer>();
+        buffer.add(frequencyKHz);
+
+        lastMark = null;
+    }
+
+    private CommandBuilder appendMark(boolean mark, int interval) {
+        if (lastMark == mark) {
+            int lastIndex = buffer.size() - 1;
+            buffer.set(lastIndex, buffer.get(lastIndex) + interval);
+        } else {
+            buffer.add(interval);
+        }
+
+        return this;
+    }
+
+    public CommandBuilder mark(int interval) {
+        return appendMark(true, interval);
+    }
+
+    public CommandBuilder space(int interval) {
+        return appendMark(false, interval);
+    }
+
+    public CommandBuilder pair(int on, int off) {
+        return mark(on).space(off);
+    }
+
+    public CommandBuilder reversePair(int off, int on) {
+        return space(off).mark(on);
+    }
+
+    public CommandBuilder delay(int ms) {
+        return space(ms * frequency / 1000);
+    }
+
+    public CommandBuilder sequence(SequenceDefinition definition, int length, int data) {
+        return sequence(definition, DEFAULT_TOP_BIT, length, data);
+    }
+
+    public CommandBuilder sequence(SequenceDefinition definition, int topBit, int length, int data) {
+        for (int index = 0; index < length; index++) {
+            if ((data & topBit) == topBit) {
+                definition.one(this, index);
+            } else {
+                definition.zero(this, index);
+            }
+        }
+        return this;
+    }
+
+    public String build() {
+        StringBuilder result = new StringBuilder();
+
+        for (Integer num : buffer) {
+            result.append(num);
+            result.append(',');
+        }
+
+        return result.toString();
+    }
+
+    public static SequenceDefinition simpleSequence(final int oneMark, final int oneSpace, final int zeroMark, final int zeroSpace) {
+        return new SequenceDefinition() {
+            @Override
+            public void one(CommandBuilder builder, int index) {
+                builder.pair(oneMark, oneSpace);
+            }
+
+            @Override
+            public void zero(CommandBuilder builder, int index) {
+                builder.pair(zeroMark, zeroSpace);
+            }
+        };
+    }
+
+    public static abstract interface SequenceDefinition {
+
+        public abstract void one(CommandBuilder builder, int index);
+
+        public abstract void zero(CommandBuilder builder, int index);
+
+    }
+}
diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaManager.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaManager.java
index 8875419..672202f 100644
--- a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaManager.java
+++ b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaManager.java
@@ -36,10 +36,9 @@ public class IrdaManager {
         readIrSendMethod = irdaServiceClass.getMethod("read_irsend");
     }
 
-    public IrdaManager sendSequence(IrSequence sequence) {
-        String code = sequence.getCode();
-        Log.d("IRCode", code);
-        rawWrite(code);
+    public IrdaManager sendSequence(String sequence) {
+        Log.d("IRCode", sequence);
+        rawWrite(sequence);
         return this;
     }
 
diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaProtocols.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaProtocols.java
new file mode 100644
index 0000000..321c2aa
--- /dev/null
+++ b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/IrdaProtocols.java
@@ -0,0 +1,199 @@
+package com.github.timnew.androidinfrared;
+
+import static com.github.timnew.androidinfrared.CommandBuilder.SequenceDefinition;
+import static com.github.timnew.androidinfrared.CommandBuilder.commandBuilder;
+import static com.github.timnew.androidinfrared.CommandBuilder.simpleSequence;
+
+public class IrdaProtocols {
+    public static class NEC {
+
+        private static final int FREQUENCY = 38028;  // T = 26.296 us
+        private static final int HDR_MARK = 342;
+        private static final int HDR_SPACE = 171;
+        private static final int BIT_MARK = 21;
+        private static final int ONE_SPACE = 60;
+        private static final int ZERO_SPACE = 21;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = CommandBuilder.simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static String buildNEC(int bitCount, int data) {
+            return commandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data)
+                    .build();
+        }
+    }
+
+    public static class Sony {
+
+        private static final int FREQUENCY = 40000; // T = 25 us
+        private static final int HDR_MARK = 96;
+        private static final int HDR_SPACE = 24;
+        private static final int ONE_MARK = 48;
+        private static final int ZERO_MARK = 24;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = CommandBuilder.simpleSequence(ONE_MARK, HDR_SPACE, ZERO_MARK, HDR_SPACE);
+
+        public static String buildSony(int bitCount, int data) {
+            return commandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (32 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class RC5 {
+
+        private static final int FREQUENCY = 36000; // T = 27.78 us
+        private static final int T1 = 32;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = new SequenceDefinition() {
+            @Override
+            public void one(CommandBuilder builder, int index) {
+                builder.reversePair(T1, T1);
+            }
+
+            @Override
+            public void zero(CommandBuilder builder, int index) {
+                builder.pair(T1, T1);
+            }
+        };
+
+        // Note: first bit must be a one (start bit)
+        public static String buildRC5(int bitCount, int data) {
+            return commandBuilder(FREQUENCY)
+                    .mark(T1)
+                    .space(T1)
+                    .mark(T1)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (32 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class RC6 {
+
+        private static final int FREQUENCY = 36000; // T = 27.78 us
+        private static final int HDR_MARK = 96;
+        private static final int HDR_SPACE = 32;
+        private static final int T1 = 16;
+
+        public static final SequenceDefinition SEQUENCE_DEFINITION = new SequenceDefinition() {
+            private int getTime(int index) {
+                return index == 3 ? T1 + T1 : T1;
+            }
+
+            @Override
+            public void one(CommandBuilder builder, int index) {
+                int t = getTime(index);
+                builder.pair(t, t);
+            }
+
+            @Override
+            public void zero(CommandBuilder builder, int index) {
+                int t = getTime(index);
+                builder.reversePair(t, t);
+            }
+        };
+
+        // Caller needs to take care of flipping the toggle bit
+        public static String buildRC6(int bitCount, int data) {
+            return commandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .pair(T1, T1)
+                    .sequence(SEQUENCE_DEFINITION, bitCount, data << (32 - bitCount))
+                    .build();
+        }
+    }
+
+    public static class DISH {
+
+        private static final int FREQUENCY = 56000; // T = 17.857 us
+        private static final int HDR_MARK = 22;
+        private static final int HDR_SPACE = 342;
+        private static final int BIT_MARK = 22;
+        private static final int ONE_SPACE = 95;
+        private static final int ZERO_SPACE = 157;
+        private static final int TOP_BIT = 0x8000;
+        private static final SequenceDefinition SEQUENCE_DEFINITION = CommandBuilder.simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static String buildDISH(int bitCount, int data) {
+            return commandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
+                    .build();
+        }
+    }
+
+    public static class Sharp {
+
+        private static final int FREQUENCY = 38000; // T = 26.315 us
+        private static final int BIT_MARK = 9;
+        private static final int ONE_SPACE = 69;
+        private static final int ZERO_SPACE = 30;
+
+        private static final int TOGGLE_MASK = 0x3FF;
+        private static final int TOP_BIT = 0x4000;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public String buildSharp(int bitCount, int data) {
+
+            return commandBuilder(FREQUENCY)
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data)
+                    .pair(BIT_MARK, ZERO_SPACE)
+                    .delay(46)
+
+                    .sequence(SEQUENCE_DEFINITION, TOP_BIT, bitCount, data ^ TOGGLE_MASK)
+                    .pair(BIT_MARK, ZERO_SPACE)
+                    .delay(46)
+                    .build();
+        }
+    }
+
+    public static class Panasonic {
+        private static final int FREQUENCY = 35000; // T = 28.571 us
+        private static final int HDR_MARK = 123;
+        private static final int HDR_SPACE = 61;
+        private static final int BIT_MARK = 18;
+        private static final int ONE_SPACE = 44;
+        private static final int ZERO_SPACE = 14;
+
+        private static final int ADDRESS_TOP_BIT = 0x8000;
+        private static final int ADDRESS_LENGTH = 16;
+        private static final int DATA_LENGTH = 32;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static String buildPanasonic(int address, int data) {
+            return commandBuilder(FREQUENCY)
+                    .pair(HDR_MARK, HDR_SPACE)
+                    .sequence(SEQUENCE_DEFINITION, ADDRESS_TOP_BIT, ADDRESS_LENGTH, address)
+                    .sequence(SEQUENCE_DEFINITION, DATA_LENGTH, data)
+                    .mark(BIT_MARK)
+                    .build();
+        }
+    }
+
+    public static class JVC {
+
+        private static final int FREQUENCY = 38000; // T = 26.316 us
+        private static final int HDR_MARK = 304;
+        private static final int HDR_SPACE = 152;
+        private static final int BIT_MARK = 23;
+        private static final int ONE_SPACE = 61;
+        private static final int ZERO_SPACE = 21;
+
+        private static final SequenceDefinition SEQUENCE_DEFINITION = simpleSequence(BIT_MARK, ONE_SPACE, BIT_MARK, ZERO_SPACE);
+
+        public static String buildJVC(int bitCount, int data, boolean repeat) {
+            CommandBuilder builder = commandBuilder(FREQUENCY);
+
+            if (!repeat)
+                builder.pair(HDR_MARK, HDR_SPACE);
+
+            return builder.sequence(SEQUENCE_DEFINITION, bitCount, data << (32 - bitCount))
+                    .mark(BIT_MARK)
+                    .build();
+        }
+    }
+}
diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/NecIrSequence.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/NecIrSequence.java
deleted file mode 100644
index f9afed2..0000000
--- a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/NecIrSequence.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.github.timnew.androidinfrared;
-
-import static com.github.timnew.androidinfrared.SequenceData.sequenceData;
-
-public class NecIrSequence extends IrSequence {
-
-    public static final int NEC_FREQUENCY = 38028;  // T = 26.296 ms
-    public static final int NEC_HDR_MARK = 342;
-    public static final int NEC_HDR_SPACE = 171;
-    public static final int NEC_BIT_MARK = 21;
-    public static final int NEC_ONE_SPACE = 60;
-    public static final int NEC_ZERO_SPACE = 21;
-
-    private final int bitCount;
-    private final int data;
-
-    public NecIrSequence(int bitCount, int data) {
-        this.bitCount = bitCount;
-        this.data = data;
-    }
-
-    @Override
-    public String getName() {
-        return "NEC Sequence";
-    }
-
-    @Override
-    protected CharSequence generateCode() {
-        return sequenceData(NEC_FREQUENCY)
-                .writePair(NEC_HDR_MARK, NEC_HDR_SPACE)
-                .setPositivePair(NEC_BIT_MARK, NEC_ONE_SPACE)
-                .setNegtivePair(NEC_BIT_MARK, NEC_ZERO_SPACE)
-                .writeData(bitCount, data)
-                .writePair(NEC_BIT_MARK, 0);
-    }
-
-}
diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/SequenceData.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/SequenceData.java
deleted file mode 100644
index c2c4df7..0000000
--- a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/SequenceData.java
+++ /dev/null
@@ -1,84 +0,0 @@
-package com.github.timnew.androidinfrared;
-
-import static java.lang.String.format;
-
-public class SequenceData implements CharSequence {
-    public static final int TOP_BIT = 0x80000000;
-    private StringBuilder buffer;
-    private CharSequence positivePair;
-    private CharSequence negtivePair;
-
-    public static SequenceData sequenceData(int frequency) {
-        return new SequenceData(frequency);
-    }
-
-    SequenceData(int frequencyKHz) {
-        buffer = new StringBuilder();
-        buffer.append(frequencyKHz);
-    }
-
-    public SequenceData writePair(int on, int off) {
-        buffer.append(',');
-        buffer.append(on);
-        buffer.append(',');
-        buffer.append(off);
-
-        return this;
-    }
-
-    public SequenceData writePair(CharSequence pair) {
-        buffer.append(',');
-        buffer.append(pair);
-
-        return this;
-    }
-
-    @Override
-    public int length() {
-        return buffer.length();
-    }
-
-    @Override
-    public char charAt(int index) {
-        return buffer.charAt(index);
-    }
-
-    @Override
-    public CharSequence subSequence(int start, int end) {
-        return buffer.subSequence(start, end);
-    }
-
-    @Override
-    public String toString() {
-        return buffer.toString();
-    }
-
-    public static String makePair(int on, int off) {
-        return format("%d,%d", on, off);
-    }
-
-    public SequenceData setPositivePair(int on, int off) {
-        positivePair = makePair(on, off);
-
-        return this;
-    }
-
-    public SequenceData setNegtivePair(int on, int off) {
-        negtivePair = makePair(on, off);
-
-        return this;
-    }
-
-    public SequenceData writeData(int bitCount, int data) {
-        for (int index = 0; index < bitCount; index++) {
-            if ((data & TOP_BIT) == TOP_BIT)
-                writePair(positivePair);
-            else
-                writePair(negtivePair);
-
-            data <<= 1;
-        }
-
-        return this;
-    }
-}
diff --git a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/sample/TabCreateManagerFragment.java b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/sample/TabCreateManagerFragment.java
index 9edf3e7..e655f3d 100644
--- a/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/sample/TabCreateManagerFragment.java
+++ b/AndroidInfraredSample/src/main/java/com/github/timnew/androidinfrared/sample/TabCreateManagerFragment.java
@@ -5,18 +5,20 @@ import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import com.github.timnew.androidinfrared.IrdaManager;
-import com.github.timnew.androidinfrared.NecIrSequence;
+import com.github.timnew.androidinfrared.IrdaProtocols;
 import com.github.timnew.androidinfrared.R;
 import com.github.timnew.androidinfrared.RawIrSequence;
 import com.googlecode.androidannotations.annotations.Click;
 import com.googlecode.androidannotations.annotations.EFragment;
 
+import static com.github.timnew.androidinfrared.IrdaProtocols.NEC.buildNEC;
+
 @TargetApi(Build.VERSION_CODES.HONEYCOMB)
 @EFragment(R.layout.tab_create_manager)
 public class TabCreateManagerFragment extends Fragment {
 
-    public static final NecIrSequence ON_SEQENCE = new NecIrSequence(32, 0xFFE01F);
-    public static final NecIrSequence OFF_SEQENCE = new NecIrSequence(32, 0xFF609F);
+    public static final String ON_SEQENCE = buildNEC(32, 0xFFE01F);
+    public static final String OFF_SEQENCE = buildNEC(32, 0xFF609F);
 
     private IrdaManager irdaManager;
 
@@ -39,8 +41,8 @@ public class TabCreateManagerFragment extends Fragment {
     }
 
     @Click(R.id.parse_button)
-    public void sendRaw(){
-        irdaManager.sendSequence(RawIrSequence.parseProntoCode("0000 006d 0022 0002 0152 00aa 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 003f 0015 003f 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 0015 0015 0015 0015 0696 0152 0055 0015 0e23"));
+    public void sendRaw() {
+//        irdaManager.sendSequence(RawIrSequence.parseProntoCode("0000 006d 0022 0002 0152 00aa 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 003f 0015 003f 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 003f 0015 0015 0015 0015 0015 0696 0152 0055 0015 0e23"));
     }
 }
 
