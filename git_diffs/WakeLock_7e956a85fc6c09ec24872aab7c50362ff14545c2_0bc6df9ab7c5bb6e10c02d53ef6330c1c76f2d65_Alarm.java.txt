diff --git a/src/com/better/alarm/model/Alarm.java b/src/com/better/alarm/model/Alarm.java
index 2c96e3e8..9faa1633 100644
--- a/src/com/better/alarm/model/Alarm.java
+++ b/src/com/better/alarm/model/Alarm.java
@@ -1,155 +1,11 @@
-/*
- * Copyright (C) 2009 The Android Open Source Project
- * Copyright (C) 2012 Yuriy Kulikov yuriy.kulikov.87@gmail.com
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
 package com.better.alarm.model;
 
 import java.util.Calendar;
-import java.util.HashMap;
-import java.util.Map;
 
-import android.content.ContentUris;
-import android.content.ContentValues;
 import android.content.Context;
-import android.content.Intent;
-import android.database.Cursor;
-import android.media.RingtoneManager;
 import android.net.Uri;
-import android.preference.PreferenceManager;
-import android.util.Log;
-
-import com.better.alarm.R;
-import com.better.wakelock.WakeLockManager;
-
-public final class Alarm {
-    private static final String TAG = "Alarm";
-    private static final boolean DBG = true;
-
-    // This string is used to indicate a silent alarm in the db.
-    private static final String ALARM_ALERT_SILENT = "silent";
-
-    private IAlarmsScheduler mAlarmsScheduler;
-    private Context mContext;
-
-    private int id;
-    private boolean enabled;
-    private int hour;
-    private int minutes;
-    /**
-     * Time when Alarm would normally go next time. Used to disable expired
-     * alarms if devicee was off-line when they were supposed to fire
-     * 
-     */
-    private Calendar nextTime;
-    private DaysOfWeek daysOfWeek;
-    private boolean vibrate;
-    private String label;
-    private Uri alert;
-    private boolean silent;
-    private boolean prealarm;
-    private Calendar prealarmTime;
-    private boolean snoozed;
-    private Calendar snoozedTime;
-
-    Alarm(Cursor c, Context context, IAlarmsScheduler alarmsScheduler) {
-        mContext = context;
-        mAlarmsScheduler = alarmsScheduler;
-        id = c.getInt(Columns.ALARM_ID_INDEX);
-        enabled = c.getInt(Columns.ALARM_ENABLED_INDEX) == 1;
-        hour = c.getInt(Columns.ALARM_HOUR_INDEX);
-        minutes = c.getInt(Columns.ALARM_MINUTES_INDEX);
-        nextTime = Calendar.getInstance();
-        nextTime.setTimeInMillis(c.getLong(Columns.ALARM_TIME_INDEX));
-        daysOfWeek = new DaysOfWeek(c.getInt(Columns.ALARM_DAYS_OF_WEEK_INDEX));
-        vibrate = c.getInt(Columns.ALARM_VIBRATE_INDEX) == 1;
-        label = c.getString(Columns.ALARM_MESSAGE_INDEX);
-        String alertString = c.getString(Columns.ALARM_ALERT_INDEX);
-        prealarm = c.getInt(Columns.ALARM_PREALARM_INDEX) == 1;
-        prealarmTime = Calendar.getInstance();
-        prealarmTime.setTimeInMillis(c.getLong(Columns.ALARM_PREALARM_TIME_INDEX));
-        snoozed = c.getInt(Columns.ALARM_SNOOZED_INDEX) == 1;
-        snoozedTime = Calendar.getInstance();
-        snoozedTime.setTimeInMillis(c.getLong(Columns.ALARM_SNOOZE_TIME_INDEX));
-        if (ALARM_ALERT_SILENT.equals(alertString)) {
-            if (DBG) Log.d(TAG, "Alarm is marked as silent");
-            silent = true;
-        } else {
-            if (alertString != null && alertString.length() != 0) {
-                alert = Uri.parse(alertString);
-            }
-
-            // If the database alert is null or it failed to parse, use the
-            // default alert.
-            if (alert == null) {
-                alert = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
-            }
-        }
-
-        Calendar now = Calendar.getInstance();
-
-        boolean isExpired = getNextTime().before(now);
-        if (isExpired) {
-            if (DBG) Log.d(TAG, "Alarm expired: " + toString());
-            enabled = (isEnabled() && getDaysOfWeek().isRepeatSet());
-        }
-
-        calculateCalendars();
-
-        writeToDb();
-
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-
-    }
-
-    // Creates a default alarm at the current time.
-    Alarm(Context context, IAlarmsScheduler alarmsScheduler) {
-        mContext = context;
-        mAlarmsScheduler = alarmsScheduler;
-        id = -1;
-        Calendar c = Calendar.getInstance();
-        c.setTimeInMillis(System.currentTimeMillis());
-        hour = c.get(Calendar.HOUR_OF_DAY);
-        minutes = c.get(Calendar.MINUTE);
-        vibrate = true;
-        daysOfWeek = new DaysOfWeek(0);
-        nextTime = c;
-        alert = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
-        prealarm = false;
-        prealarmTime = c;
-        snoozed = false;
-        snoozedTime = c;
-
-        Uri uri = mContext.getContentResolver().insert(Columns.CONTENT_URI, createContentValues());
-        id = (int) ContentUris.parseId(uri);
-    }
-
-    void onAlarmFired(CalendarType calendarType) {
-        broadcastAlarmState(id, Intents.ALARM_ALERT_ACTION);
-
-        snoozed = false;
-
-        calculateCalendars();
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-        writeToDb();
-        // TODO notifyAlarmListChangedListeners();
-    }
 
-    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
-    // ++++++ for GUI +++++++++++++++++++++++++++++++++
-    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+public interface Alarm {
 
     /**
      * A convenience method to enable or disable an
@@ -159,241 +15,50 @@ public final class Alarm {
      * @param enabled
      *            corresponds to the ENABLED column
      */
-    public void enable(boolean enable) {
-        enabled = enable;
-        calculateCalendars();
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-        writeToDb();
-        // TODO notifyAlarmListChangedListeners();
-    }
+    public void enable(boolean enable);
 
-    public void snooze() {
-        int snoozeMinutes = Integer.parseInt(PreferenceManager.getDefaultSharedPreferences(mContext).getString(
-                "snooze_duration", "10"));
-        snoozed = true;
-        snoozedTime = Calendar.getInstance();
-        snoozedTime.add(Calendar.MINUTE, snoozeMinutes);
-        calculateCalendars();
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-        broadcastAlarmState(id, Intents.ALARM_SNOOZE_ACTION);
-        writeToDb();
-        // TODO notifyAlarmListChangedListeners();
-    }
+    public void snooze();
 
-    public void dismiss() {
-        broadcastAlarmState(id, Intents.ALARM_DISMISS_ACTION);
-        snoozed = false;
-        calculateCalendars();
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-        writeToDb();
-        // TODO notifyAlarmListChangedListeners();
-    }
+    public void dismiss();
 
-    public void delete() {
-        Uri uri = ContentUris.withAppendedId(Columns.CONTENT_URI, id);
-        mContext.getContentResolver().delete(uri, "", null);
-        mAlarmsScheduler.removeAlarm(id);
-        broadcastAlarmState(id, Intents.ALARM_DISMISS_ACTION);
-        // TODO notifyAlarmListChangedListeners();
-    }
+    public void delete();
 
     public void change(boolean enabled, int hour, int minute, DaysOfWeek daysOfWeek, boolean vibrate, String label,
-            Uri alert, boolean preAlarm) {
-        this.prealarm = preAlarm;
-        this.alert = alert;
-        this.label = label;
-        this.vibrate = vibrate;
-        this.daysOfWeek = daysOfWeek;
-        this.hour = hour;
-        this.minutes = minute;
-        this.enabled = enabled;
-
-        calculateCalendars();
-
-        writeToDb();
-        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
-        // TODO notifyAlarmListChangedListeners();
-    }
-
-    /**
-     * Given an alarm in hours and minutes, return a time suitable for setting
-     * in AlarmManager.
-     */
-    private void calculateCalendars() {
-        // start with now
-        Calendar c = Calendar.getInstance();
-        c.setTimeInMillis(System.currentTimeMillis());
-
-        int nowHour = c.get(Calendar.HOUR_OF_DAY);
-        int nowMinute = c.get(Calendar.MINUTE);
-
-        // if alarm is behind current time, advance one day
-        if (hour < nowHour || hour == nowHour && minutes <= nowMinute) {
-            c.add(Calendar.DAY_OF_YEAR, 1);
-        }
-        c.set(Calendar.HOUR_OF_DAY, hour);
-        c.set(Calendar.MINUTE, minutes);
-        c.set(Calendar.SECOND, 0);
-        c.set(Calendar.MILLISECOND, 0);
-
-        int addDays = daysOfWeek.getNextAlarm(c);
-        if (addDays > 0) c.add(Calendar.DAY_OF_WEEK, addDays);
-
-        nextTime = c;
-    }
-
-    private Map<CalendarType, Calendar> getActiveCalendars() {
-        HashMap<CalendarType, Calendar> calendars = new HashMap<CalendarType, Calendar>();
-
-        Calendar now = Calendar.getInstance();
-        if (enabled && nextTime.after(now)) calendars.put(CalendarType.NORMAL, nextTime);
-        if (snoozed && snoozedTime.after(now)) calendars.put(CalendarType.SNOOZE, snoozedTime);
-
-        return calendars;
-    }
-
-    private ContentValues createContentValues() {
-        ContentValues values = new ContentValues(12);
-
-        values.put(Columns.ENABLED, enabled ? 1 : 0);
-        values.put(Columns.HOUR, hour);
-        values.put(Columns.MINUTES, minutes);
-        values.put(Columns.ALARM_TIME, nextTime.getTimeInMillis());
-        values.put(Columns.DAYS_OF_WEEK, daysOfWeek.getCoded());
-        values.put(Columns.VIBRATE, vibrate);
-        values.put(Columns.MESSAGE, label);
-        values.put(Columns.PREALARM, prealarm);
-        values.put(Columns.PREALARM_TIME, prealarmTime.getTimeInMillis());
-        values.put(Columns.SNOOZED, snoozed);
-        values.put(Columns.SNOOZE_TIME, snoozedTime.getTimeInMillis());
-
-        // A null alert Uri indicates a silent
-        values.put(Columns.ALERT, alert == null ? ALARM_ALERT_SILENT : alert.toString());
-
-        return values;
-    }
-
-    private void writeToDb() {
-        ContentValues values = createContentValues();
-        Intent intent = new Intent(DataBaseService.SAVE_ALARM_ACTION);
-        intent.putExtra("extra_values", values);
-        intent.putExtra(Intents.EXTRA_ID, id);
-        WakeLockManager.getWakeLockManager().acquirePartialWakeLock(intent, "forDBService");
-        mContext.startService(intent);
-    }
-
-    private void broadcastAlarmState(int id, String action) {
-        Intent intent = new Intent(action);
-        intent.putExtra(Intents.EXTRA_ID, id);
-        mContext.sendBroadcast(intent);
-    }
-
-    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
-    // ++++++ getters for GUI +++++++++++++++++++++++++++++++
-    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+            Uri alert, boolean preAlarm);
 
     /**
      * TODO calendar should be immutable
      * 
      * @return
      */
-    public Calendar getNextTime() {
-        return nextTime;
-    }
-
-    public Calendar getSnoozedTime() {
-        return snoozedTime;
-    }
-
-    public Calendar getPrealarmTime() {
-        return prealarmTime;
-    }
+    public Calendar getNextTime();
 
-    public boolean isPrealarm() {
-        return prealarm;
-    }
+    public Calendar getSnoozedTime();
 
-    public boolean isSilent() {
-        return silent;
-    }
+    public Calendar getPrealarmTime();
 
-    public Uri getAlert() {
-        return alert;
-    }
+    public boolean isPrealarm();
 
-    public String getLabel() {
-        return label;
-    }
+    public boolean isSilent();
 
-    public boolean isVibrate() {
-        return vibrate;
-    }
+    public Uri getAlert();
 
-    public DaysOfWeek getDaysOfWeek() {
-        return daysOfWeek;
-    }
+    public String getLabel();
 
-    public int getMinutes() {
-        return minutes;
-    }
+    public boolean isVibrate();
 
-    public int getHour() {
-        return hour;
-    }
+    public DaysOfWeek getDaysOfWeek();
 
-    public boolean isEnabled() {
-        return enabled;
-    }
+    public int getMinutes();
 
-    public int getId() {
-        return id;
-    }
+    public int getHour();
 
-    public boolean isSnoozed() {
-        return snoozed;
-    }
+    public boolean isEnabled();
 
-    public String getLabelOrDefault(Context context) {
-        if (label == null || label.length() == 0) {
-            return context.getString(R.string.default_label);
-        }
-        return label;
-    }
+    public int getId();
 
-    @Override
-    public int hashCode() {
-        return id;
-    }
+    public boolean isSnoozed();
 
-    @Override
-    public boolean equals(Object o) {
-        if (!(o instanceof Alarm)) return false;
-        final Alarm other = (Alarm) o;
-        return id == other.id;
-    }
+    public String getLabelOrDefault(Context context);
 
-    @Override
-    public String toString() {
-        StringBuilder sb = new StringBuilder();
-        sb.append("Alarm ").append(id);
-        sb.append(", ");
-        if (enabled) {
-            sb.append("enabled at ").append(nextTime.getTime().toLocaleString());
-        } else {
-            sb.append("disabled");
-        }
-        sb.append(", ");
-        if (snoozed) {
-            sb.append("snoozed at ").append(snoozedTime.getTime().toLocaleString());
-        } else {
-            sb.append("no snooze");
-        }
-        sb.append(", ");
-        if (prealarm) {
-            sb.append("prealarm at ").append(prealarmTime.getTime().toLocaleString());
-        } else {
-            sb.append("no prealarm");
-        }
-        return sb.toString();
-    }
-}
+}
\ No newline at end of file
diff --git a/src/com/better/alarm/model/AlarmCore.java b/src/com/better/alarm/model/AlarmCore.java
new file mode 100644
index 00000000..ece5725f
--- /dev/null
+++ b/src/com/better/alarm/model/AlarmCore.java
@@ -0,0 +1,419 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ * Copyright (C) 2012 Yuriy Kulikov yuriy.kulikov.87@gmail.com
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.better.alarm.model;
+
+import java.util.Calendar;
+import java.util.HashMap;
+import java.util.Map;
+
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.better.alarm.R;
+import com.better.wakelock.WakeLockManager;
+
+public final class AlarmCore implements Alarm {
+    private static final String TAG = "AlarmCore";
+    private static final boolean DBG = true;
+
+    // This string is used to indicate a silent alarm in the db.
+    private static final String ALARM_ALERT_SILENT = "silent";
+
+    private IAlarmsScheduler mAlarmsScheduler;
+    private Context mContext;
+
+    private int id;
+    private boolean enabled;
+    private int hour;
+    private int minutes;
+    /**
+     * Time when AlarmCore would normally go next time. Used to disable expired
+     * alarms if devicee was off-line when they were supposed to fire
+     * 
+     */
+    private Calendar nextTime;
+    private DaysOfWeek daysOfWeek;
+    private boolean vibrate;
+    private String label;
+    private Uri alert;
+    private boolean silent;
+    private boolean prealarm;
+    private Calendar prealarmTime;
+    private boolean snoozed;
+    private Calendar snoozedTime;
+
+    AlarmCore(Cursor c, Context context, IAlarmsScheduler alarmsScheduler) {
+        mContext = context;
+        mAlarmsScheduler = alarmsScheduler;
+        id = c.getInt(Columns.ALARM_ID_INDEX);
+        enabled = c.getInt(Columns.ALARM_ENABLED_INDEX) == 1;
+        hour = c.getInt(Columns.ALARM_HOUR_INDEX);
+        minutes = c.getInt(Columns.ALARM_MINUTES_INDEX);
+        nextTime = Calendar.getInstance();
+        nextTime.setTimeInMillis(c.getLong(Columns.ALARM_TIME_INDEX));
+        daysOfWeek = new DaysOfWeek(c.getInt(Columns.ALARM_DAYS_OF_WEEK_INDEX));
+        vibrate = c.getInt(Columns.ALARM_VIBRATE_INDEX) == 1;
+        label = c.getString(Columns.ALARM_MESSAGE_INDEX);
+        String alertString = c.getString(Columns.ALARM_ALERT_INDEX);
+        prealarm = c.getInt(Columns.ALARM_PREALARM_INDEX) == 1;
+        prealarmTime = Calendar.getInstance();
+        prealarmTime.setTimeInMillis(c.getLong(Columns.ALARM_PREALARM_TIME_INDEX));
+        snoozed = c.getInt(Columns.ALARM_SNOOZED_INDEX) == 1;
+        snoozedTime = Calendar.getInstance();
+        snoozedTime.setTimeInMillis(c.getLong(Columns.ALARM_SNOOZE_TIME_INDEX));
+        if (ALARM_ALERT_SILENT.equals(alertString)) {
+            if (DBG) Log.d(TAG, "AlarmCore is marked as silent");
+            silent = true;
+        } else {
+            if (alertString != null && alertString.length() != 0) {
+                alert = Uri.parse(alertString);
+            }
+
+            // If the database alert is null or it failed to parse, use the
+            // default alert.
+            if (alert == null) {
+                alert = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
+            }
+        }
+
+        Calendar now = Calendar.getInstance();
+
+        boolean isExpired = getNextTime().before(now);
+        if (isExpired) {
+            if (DBG) Log.d(TAG, "AlarmCore expired: " + toString());
+            enabled = (isEnabled() && getDaysOfWeek().isRepeatSet());
+        }
+
+        calculateCalendars();
+
+        writeToDb();
+
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+
+    }
+
+    // Creates a default alarm at the current time.
+    AlarmCore(Context context, IAlarmsScheduler alarmsScheduler) {
+        mContext = context;
+        mAlarmsScheduler = alarmsScheduler;
+        id = -1;
+        Calendar c = Calendar.getInstance();
+        c.setTimeInMillis(System.currentTimeMillis());
+        hour = c.get(Calendar.HOUR_OF_DAY);
+        minutes = c.get(Calendar.MINUTE);
+        vibrate = true;
+        daysOfWeek = new DaysOfWeek(0);
+        nextTime = c;
+        alert = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
+        prealarm = false;
+        prealarmTime = c;
+        snoozed = false;
+        snoozedTime = c;
+
+        Uri uri = mContext.getContentResolver().insert(Columns.CONTENT_URI, createContentValues());
+        id = (int) ContentUris.parseId(uri);
+    }
+
+    void onAlarmFired(CalendarType calendarType) {
+        broadcastAlarmState(id, Intents.ALARM_ALERT_ACTION);
+
+        snoozed = false;
+
+        calculateCalendars();
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+        writeToDb();
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    // ++++++ for GUI +++++++++++++++++++++++++++++++++
+    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+    /**
+     * A convenience method to enable or disable an
+     * 
+     * @param id
+     *            corresponds to the _id column
+     * @param enabled
+     *            corresponds to the ENABLED column
+     */
+    @Override
+    public void enable(boolean enable) {
+        enabled = enable;
+        calculateCalendars();
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+        writeToDb();
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    @Override
+    public void snooze() {
+        int snoozeMinutes = Integer.parseInt(PreferenceManager.getDefaultSharedPreferences(mContext).getString(
+                "snooze_duration", "10"));
+        snoozed = true;
+        snoozedTime = Calendar.getInstance();
+        snoozedTime.add(Calendar.MINUTE, snoozeMinutes);
+        calculateCalendars();
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+        broadcastAlarmState(id, Intents.ALARM_SNOOZE_ACTION);
+        writeToDb();
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    @Override
+    public void dismiss() {
+        broadcastAlarmState(id, Intents.ALARM_DISMISS_ACTION);
+        snoozed = false;
+        calculateCalendars();
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+        writeToDb();
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    @Override
+    public void delete() {
+        Uri uri = ContentUris.withAppendedId(Columns.CONTENT_URI, id);
+        mContext.getContentResolver().delete(uri, "", null);
+        mAlarmsScheduler.removeAlarm(id);
+        broadcastAlarmState(id, Intents.ALARM_DISMISS_ACTION);
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    @Override
+    public void change(boolean enabled, int hour, int minute, DaysOfWeek daysOfWeek, boolean vibrate, String label,
+            Uri alert, boolean preAlarm) {
+        this.prealarm = preAlarm;
+        this.alert = alert;
+        this.label = label;
+        this.vibrate = vibrate;
+        this.daysOfWeek = daysOfWeek;
+        this.hour = hour;
+        this.minutes = minute;
+        this.enabled = enabled;
+
+        calculateCalendars();
+
+        writeToDb();
+        mAlarmsScheduler.setAlarm(id, getActiveCalendars());
+        // TODO notifyAlarmListChangedListeners();
+    }
+
+    /**
+     * Given an alarm in hours and minutes, return a time suitable for setting
+     * in AlarmManager.
+     */
+    private void calculateCalendars() {
+        // start with now
+        Calendar c = Calendar.getInstance();
+        c.setTimeInMillis(System.currentTimeMillis());
+
+        int nowHour = c.get(Calendar.HOUR_OF_DAY);
+        int nowMinute = c.get(Calendar.MINUTE);
+
+        // if alarm is behind current time, advance one day
+        if (hour < nowHour || hour == nowHour && minutes <= nowMinute) {
+            c.add(Calendar.DAY_OF_YEAR, 1);
+        }
+        c.set(Calendar.HOUR_OF_DAY, hour);
+        c.set(Calendar.MINUTE, minutes);
+        c.set(Calendar.SECOND, 0);
+        c.set(Calendar.MILLISECOND, 0);
+
+        int addDays = daysOfWeek.getNextAlarm(c);
+        if (addDays > 0) c.add(Calendar.DAY_OF_WEEK, addDays);
+
+        nextTime = c;
+    }
+
+    private Map<CalendarType, Calendar> getActiveCalendars() {
+        HashMap<CalendarType, Calendar> calendars = new HashMap<CalendarType, Calendar>();
+
+        Calendar now = Calendar.getInstance();
+        if (enabled && nextTime.after(now)) calendars.put(CalendarType.NORMAL, nextTime);
+        if (snoozed && snoozedTime.after(now)) calendars.put(CalendarType.SNOOZE, snoozedTime);
+
+        return calendars;
+    }
+
+    private ContentValues createContentValues() {
+        ContentValues values = new ContentValues(12);
+
+        values.put(Columns.ENABLED, enabled ? 1 : 0);
+        values.put(Columns.HOUR, hour);
+        values.put(Columns.MINUTES, minutes);
+        values.put(Columns.ALARM_TIME, nextTime.getTimeInMillis());
+        values.put(Columns.DAYS_OF_WEEK, daysOfWeek.getCoded());
+        values.put(Columns.VIBRATE, vibrate);
+        values.put(Columns.MESSAGE, label);
+        values.put(Columns.PREALARM, prealarm);
+        values.put(Columns.PREALARM_TIME, prealarmTime.getTimeInMillis());
+        values.put(Columns.SNOOZED, snoozed);
+        values.put(Columns.SNOOZE_TIME, snoozedTime.getTimeInMillis());
+
+        // A null alert Uri indicates a silent
+        values.put(Columns.ALERT, alert == null ? ALARM_ALERT_SILENT : alert.toString());
+
+        return values;
+    }
+
+    private void writeToDb() {
+        ContentValues values = createContentValues();
+        Intent intent = new Intent(DataBaseService.SAVE_ALARM_ACTION);
+        intent.putExtra("extra_values", values);
+        intent.putExtra(Intents.EXTRA_ID, id);
+        WakeLockManager.getWakeLockManager().acquirePartialWakeLock(intent, "forDBService");
+        mContext.startService(intent);
+    }
+
+    private void broadcastAlarmState(int id, String action) {
+        Intent intent = new Intent(action);
+        intent.putExtra(Intents.EXTRA_ID, id);
+        mContext.sendBroadcast(intent);
+    }
+
+    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+    // ++++++ getters for GUI +++++++++++++++++++++++++++++++
+    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++
+
+    /**
+     * TODO calendar should be immutable
+     * 
+     * @return
+     */
+    @Override
+    public Calendar getNextTime() {
+        return nextTime;
+    }
+
+    @Override
+    public Calendar getSnoozedTime() {
+        return snoozedTime;
+    }
+
+    @Override
+    public Calendar getPrealarmTime() {
+        return prealarmTime;
+    }
+
+    @Override
+    public boolean isPrealarm() {
+        return prealarm;
+    }
+
+    @Override
+    public boolean isSilent() {
+        return silent;
+    }
+
+    @Override
+    public Uri getAlert() {
+        return alert;
+    }
+
+    @Override
+    public String getLabel() {
+        return label;
+    }
+
+    @Override
+    public boolean isVibrate() {
+        return vibrate;
+    }
+
+    @Override
+    public DaysOfWeek getDaysOfWeek() {
+        return daysOfWeek;
+    }
+
+    @Override
+    public int getMinutes() {
+        return minutes;
+    }
+
+    @Override
+    public int getHour() {
+        return hour;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    @Override
+    public int getId() {
+        return id;
+    }
+
+    @Override
+    public boolean isSnoozed() {
+        return snoozed;
+    }
+
+    @Override
+    public String getLabelOrDefault(Context context) {
+        if (label == null || label.length() == 0) {
+            return context.getString(R.string.default_label);
+        }
+        return label;
+    }
+
+    @Override
+    public int hashCode() {
+        return id;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (!(o instanceof AlarmCore)) return false;
+        final AlarmCore other = (AlarmCore) o;
+        return id == other.id;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("AlarmCore ").append(id);
+        sb.append(", ");
+        if (enabled) {
+            sb.append("enabled at ").append(nextTime.getTime().toLocaleString());
+        } else {
+            sb.append("disabled");
+        }
+        sb.append(", ");
+        if (snoozed) {
+            sb.append("snoozed at ").append(snoozedTime.getTime().toLocaleString());
+        } else {
+            sb.append("no snooze");
+        }
+        sb.append(", ");
+        if (prealarm) {
+            sb.append("prealarm at ").append(prealarmTime.getTime().toLocaleString());
+        } else {
+            sb.append("no prealarm");
+        }
+        return sb.toString();
+    }
+}
diff --git a/src/com/better/alarm/model/Alarms.java b/src/com/better/alarm/model/Alarms.java
index 04cff9a0..532bcdc3 100644
--- a/src/com/better/alarm/model/Alarms.java
+++ b/src/com/better/alarm/model/Alarms.java
@@ -43,7 +43,7 @@ public class Alarms implements IAlarmsManager {
     private Set<IAlarmsManager.OnAlarmListChangedListener> mAlarmListChangedListeners;
 
     private ContentResolver mContentResolver;
-    private Map<Integer, Alarm> alarms;
+    private Map<Integer, AlarmCore> alarms;
 
     Alarms(Context context, IAlarmsScheduler alarmsScheduler) {
         mContext = context;
@@ -51,14 +51,14 @@ public class Alarms implements IAlarmsManager {
 
         mAlarmListChangedListeners = new HashSet<IAlarmsManager.OnAlarmListChangedListener>();
         mContentResolver = mContext.getContentResolver();
-        alarms = new HashMap<Integer, Alarm>();
+        alarms = new HashMap<Integer, AlarmCore>();
 
         final Cursor cursor = mContentResolver.query(Columns.CONTENT_URI, Columns.ALARM_QUERY_COLUMNS, null, null,
                 Columns.DEFAULT_SORT_ORDER);
         try {
             if (cursor.moveToFirst()) {
                 do {
-                    final Alarm a = new Alarm(cursor, context, alarmsScheduler);
+                    final AlarmCore a = new AlarmCore(cursor, context, alarmsScheduler);
                     alarms.put(a.getId(), a);
                 } while (cursor.moveToNext());
             }
@@ -74,13 +74,13 @@ public class Alarms implements IAlarmsManager {
     }
 
     @Override
-    public Alarm getAlarm(int alarmId) {
+    public AlarmCore getAlarm(int alarmId) {
         return alarms.get(alarmId);
     }
 
     @Override
     public int createNewAlarm() {
-        Alarm alarm = new Alarm(mContext, mAlarmsScheduler);
+        AlarmCore alarm = new AlarmCore(mContext, mAlarmsScheduler);
         alarms.put(alarm.getId(), alarm);
         notifyAlarmListChangedListeners();
         return alarm.getId();
@@ -111,7 +111,7 @@ public class Alarms implements IAlarmsManager {
     }
 
     void onAlarmFired(int id, CalendarType calendarType) {
-        Alarm alarm = getAlarm(id);
+        AlarmCore alarm = getAlarm(id);
         alarm.onAlarmFired(calendarType);
         notifyAlarmListChangedListeners();
     }
diff --git a/src/com/better/alarm/model/AlarmsManager.java b/src/com/better/alarm/model/AlarmsManager.java
index 229c24fb..c740eafc 100644
--- a/src/com/better/alarm/model/AlarmsManager.java
+++ b/src/com/better/alarm/model/AlarmsManager.java
@@ -20,7 +20,7 @@ package com.better.alarm.model;
 import android.content.Context;
 
 /**
- * The AlarmsManager provider supplies info about Alarm Clock settings
+ * The AlarmsManager provider supplies info about AlarmCore Clock settings
  */
 public class AlarmsManager {
     private static final String TAG = "AlarmsManager";
diff --git a/src/com/better/alarm/model/AlarmsService.java b/src/com/better/alarm/model/AlarmsService.java
index 5bb20e74..950a8293 100644
--- a/src/com/better/alarm/model/AlarmsService.java
+++ b/src/com/better/alarm/model/AlarmsService.java
@@ -39,7 +39,7 @@ public class AlarmsService extends Service {
         String action = intent.getAction();
         if (action.equals(AlarmsScheduler.ACTION_FIRED)) {
             int id = intent.getIntExtra(AlarmsScheduler.EXTRA_ID, -1);
-            if (DBG) Log.d(TAG, "Alarm fired " + id);
+            if (DBG) Log.d(TAG, "AlarmCore fired " + id);
             alarms.onAlarmFired(id, CalendarType.valueOf(intent.getExtras().getString(AlarmsScheduler.EXTRA_TYPE)));
         }
 
diff --git a/src/com/better/alarm/model/Columns.java b/src/com/better/alarm/model/Columns.java
index d55d51e6..1c19cda4 100644
--- a/src/com/better/alarm/model/Columns.java
+++ b/src/com/better/alarm/model/Columns.java
@@ -37,7 +37,7 @@ class Columns implements BaseColumns {
     public static final String DAYS_OF_WEEK = "daysofweek";
 
     /**
-     * Alarm time in UTC milliseconds from the epoch.
+     * AlarmCore time in UTC milliseconds from the epoch.
      * <P>
      * Type: INTEGER
      * </P>
@@ -85,7 +85,7 @@ class Columns implements BaseColumns {
     public static final String PREALARM = "prealarm";
 
     /**
-     * Alarm time in UTC milliseconds from the epoch.
+     * AlarmCore time in UTC milliseconds from the epoch.
      * <P>
      * Type: INTEGER
      * </P>
@@ -101,7 +101,7 @@ class Columns implements BaseColumns {
     public static final String SNOOZED = "snoozed";
 
     /**
-     * Alarm time in UTC milliseconds from the epoch.
+     * AlarmCore time in UTC milliseconds from the epoch.
      * <P>
      * Type: INTEGER
      * </P>
diff --git a/src/com/better/alarm/model/IAlarmsManager.java b/src/com/better/alarm/model/IAlarmsManager.java
index 1a252b18..a1f6c0d2 100644
--- a/src/com/better/alarm/model/IAlarmsManager.java
+++ b/src/com/better/alarm/model/IAlarmsManager.java
@@ -24,7 +24,7 @@ import android.net.Uri;
  * An interface for Presenter-Model interaction. Presenters can invoke
  * {@link #dismiss(Alarm)}, {@link #snooze(Alarm)} as a result of user
  * interaction. Model broadcasts intents representing lifecycle of the
- * {@link Alarm}. Each intent contains an {@link Alarm} as a parceable extra
+ * {@link AlarmCore}. Each intent contains an {@link Alarm} as a parceable extra
  * with the key {@link #EXTRA_ID}
  * 
  * @author Yuriy
@@ -52,7 +52,7 @@ public interface IAlarmsManager {
     public void dismiss(Alarm alarm);
 
     /**
-     * Delete an Alarm with the given id from the database
+     * Delete an AlarmCore with the given id from the database
      * 
      * @param id
      */
@@ -67,7 +67,7 @@ public interface IAlarmsManager {
     public void enable(int id, boolean enable);
 
     /**
-     * Return an Alarm object representing the alarm id in the database. Returns
+     * Return an AlarmCore object representing the alarm id in the database. Returns
      * null if no alarm exists.
      */
     public Alarm getAlarm(int alarmId);
@@ -95,9 +95,9 @@ public interface IAlarmsManager {
     public void unRegisterOnAlarmListChangedListener(OnAlarmListChangedListener listener);
 
     /**
-     * Create new Alarm with default settings
+     * Create new AlarmCore with default settings
      * 
-     * @return id of newly created Alarm
+     * @return id of newly created AlarmCore
      */
     int createNewAlarm();
 
@@ -105,7 +105,7 @@ public interface IAlarmsManager {
      * A convenience method to change an existing alarm
      * 
      * @param id
-     *            - Alarm which has to be changed
+     *            - AlarmCore which has to be changed
      * @param enabled
      * @param hour
      * @param minute
diff --git a/src/com/better/alarm/model/IAlarmsScheduler.java b/src/com/better/alarm/model/IAlarmsScheduler.java
index 341345b8..84b9a294 100644
--- a/src/com/better/alarm/model/IAlarmsScheduler.java
+++ b/src/com/better/alarm/model/IAlarmsScheduler.java
@@ -19,7 +19,7 @@ import java.util.Calendar;
 import java.util.Map;
 
 interface IAlarmsScheduler {
-    /** remove all Calendars of the Alarm with given id */
+    /** remove all Calendars of the AlarmCore with given id */
     public void removeAlarm(int id);
 
     /**
diff --git a/src/com/better/alarm/model/Intents.java b/src/com/better/alarm/model/Intents.java
index f42d4319..78d1702e 100644
--- a/src/com/better/alarm/model/Intents.java
+++ b/src/com/better/alarm/model/Intents.java
@@ -42,7 +42,7 @@ public class Intents {
     public static final String ACTION_ALARMS_UNSCHEDULED = "com.better.alarm.model.Intents.ACTION_ALARMS_UNSCHEDULED";
 
     /**
-     * Key of the Alarm attached as a parceble extra
+     * Key of the AlarmCore attached as a parceble extra
      */
     public static final String EXTRA_ID = "intent.extra.alarm";
 }
