diff --git a/app/src/main/java/com/leafdigital/kanji/android/IconService.java b/app/src/main/java/com/leafdigital/kanji/android/IconService.java
new file mode 100644
index 0000000..97576f3
--- /dev/null
+++ b/app/src/main/java/com/leafdigital/kanji/android/IconService.java
@@ -0,0 +1,79 @@
+/*
+This file is part of leafdigital kanjirecog.
+
+kanjirecog is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+kanjirecog is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
+
+Copyright 2011 Samuel Marshall.
+*/
+package com.leafdigital.kanji.android;
+
+import android.app.*;
+import android.content.Intent;
+import android.os.*;
+import android.util.Log;
+
+import androidx.core.app.NotificationCompat;
+
+/**
+ * Service that just displays the notification icon.
+ *
+ * TODO This should be a keyboard instead.
+ */
+public class IconService extends Service {
+    private static final String CHANNEL_ID = "IconNotification";
+    public static final int NOTIFICATION_ID = 1;
+    private IBinder binder = new Binder();
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return binder;
+    }
+
+    @Override
+    public void onCreate() {
+        NotificationManager notifications = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+        if (notifications != null) {
+            // Create the NotificationChannel, but only on API 26+ because
+            // the NotificationChannel class is new and not in the support library
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                NotificationChannel channel = new NotificationChannel(CHANNEL_ID, getString(R.string.notificationchannel), NotificationManager.IMPORTANCE_DEFAULT);
+                notifications.createNotificationChannel(channel);
+            }
+            Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
+                .setSmallIcon(R.drawable.statusicon)
+                .setTicker(getString(R.string.notificationtitle))
+                .setWhen(0L)
+                .setOngoing(true)
+                .setContentTitle(getString(R.string.notificationtitle))
+                .setContentText(getString(R.string.notificationtext))
+                .setContentIntent(PendingIntent.getActivity(this, 0, new Intent(this, MainActivity.class), 0))
+                .build();
+            notifications.notify(NOTIFICATION_ID, notification);
+        } else {
+            Log.e("Kanji draw", "Notification manager is null");
+        }
+    }
+
+    public void onDestroy() {
+        NotificationManager notifications = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+        if (notifications != null) {
+            notifications.cancel(NOTIFICATION_ID);
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                notifications.deleteNotificationChannel(CHANNEL_ID);
+            }
+        } else {
+            Log.e("Kanji draw", "Notification manager is null");
+        }
+    }
+}
diff --git a/src/com/leafdigital/kanji/android/KanjiActivity.java b/app/src/main/java/com/leafdigital/kanji/android/KanjiActivity.java
similarity index 100%
rename from src/com/leafdigital/kanji/android/KanjiActivity.java
rename to app/src/main/java/com/leafdigital/kanji/android/KanjiActivity.java
diff --git a/src/com/leafdigital/kanji/android/KanjiDrawing.java b/app/src/main/java/com/leafdigital/kanji/android/KanjiDrawing.java
similarity index 100%
rename from src/com/leafdigital/kanji/android/KanjiDrawing.java
rename to app/src/main/java/com/leafdigital/kanji/android/KanjiDrawing.java
diff --git a/src/com/leafdigital/kanji/android/KanjiPreferenceActivity.java b/app/src/main/java/com/leafdigital/kanji/android/KanjiPreferenceActivity.java
similarity index 100%
rename from src/com/leafdigital/kanji/android/KanjiPreferenceActivity.java
rename to app/src/main/java/com/leafdigital/kanji/android/KanjiPreferenceActivity.java
diff --git a/src/com/leafdigital/kanji/android/MainActivity.java b/app/src/main/java/com/leafdigital/kanji/android/MainActivity.java
similarity index 96%
rename from src/com/leafdigital/kanji/android/MainActivity.java
rename to app/src/main/java/com/leafdigital/kanji/android/MainActivity.java
index 62421c7..48c1051 100644
--- a/src/com/leafdigital/kanji/android/MainActivity.java
+++ b/app/src/main/java/com/leafdigital/kanji/android/MainActivity.java
@@ -77,10 +77,11 @@ public class MainActivity extends KanjiActivity
 		prefs.registerOnSharedPreferenceChangeListener(this);
 		onSharedPreferenceChanged(prefs, PREF_SHOWNAVIGATION);
 
-		// If there's no pref for stats-reporting, set it on
+		// If there's no pref for stats-reporting, set it off
+		// to be GDPR compliant.
 		if(!prefs.contains(PREF_REPORTSTATS))
 		{
-			prefs.edit().putBoolean(PREF_REPORTSTATS, true).commit();
+			prefs.edit().putBoolean(PREF_REPORTSTATS, false).commit();
 		}
 	}
 
diff --git a/src/com/leafdigital/kanji/android/PickKanjiActivity.java b/app/src/main/java/com/leafdigital/kanji/android/PickKanjiActivity.java
similarity index 98%
rename from src/com/leafdigital/kanji/android/PickKanjiActivity.java
rename to app/src/main/java/com/leafdigital/kanji/android/PickKanjiActivity.java
index 88a5815..d02e362 100644
--- a/src/com/leafdigital/kanji/android/PickKanjiActivity.java
+++ b/app/src/main/java/com/leafdigital/kanji/android/PickKanjiActivity.java
@@ -38,6 +38,7 @@ import static com.leafdigital.kanji.android.TopResultsActivity.*;
 
 public class PickKanjiActivity extends KanjiActivity
 {
+	private static final String STROKES_FILE = "strokes.xml";
 	private KanjiDrawing drawing;
 
 	/**
@@ -271,8 +272,7 @@ public class PickKanjiActivity extends KanjiActivity
 				long start = System.currentTimeMillis();
 				Log.d(PickKanjiActivity.class.getName(),
 					"Kanji drawing dictionary loading");
-				InputStream input = new MultiAssetInputStream(getAssets(),
-					new String[] { "strokes-20100823.xml.1", "strokes-20100823.xml.2" });
+				InputStream input = getApplicationContext().getAssets().open(STROKES_FILE);
 				KanjiList loaded = new KanjiList(input);
 				synchronized(listSynch)
 				{
diff --git a/src/com/leafdigital/kanji/android/StartupReceiver.java b/app/src/main/java/com/leafdigital/kanji/android/StartupReceiver.java
similarity index 100%
rename from src/com/leafdigital/kanji/android/StartupReceiver.java
rename to app/src/main/java/com/leafdigital/kanji/android/StartupReceiver.java
diff --git a/src/com/leafdigital/kanji/android/TopResultsActivity.java b/app/src/main/java/com/leafdigital/kanji/android/TopResultsActivity.java
similarity index 100%
rename from src/com/leafdigital/kanji/android/TopResultsActivity.java
rename to app/src/main/java/com/leafdigital/kanji/android/TopResultsActivity.java
diff --git a/converter/src/main/java/com/leafdigital/convert/KanjiVGConverter.java b/converter/src/main/java/com/leafdigital/convert/KanjiVGConverter.java
new file mode 100644
index 0000000..45e0485
--- /dev/null
+++ b/converter/src/main/java/com/leafdigital/convert/KanjiVGConverter.java
@@ -0,0 +1,111 @@
+package com.leafdigital.convert;
+
+import com.leafdigital.kanji.KanjiInfo;
+import com.leafdigital.kanji.KanjiList;
+import com.leafdigital.kanji.KanjiVgLoader;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+public class KanjiVGConverter {
+
+    /**
+     * Convert KanjiVG file into new info file.
+     * @param args Filename to convert and output filename
+     */
+    public static void main(String[] args)
+    {
+        if(args.length < 2 || args.length > 3
+            || (args.length==3 && !args[2].matches("[0-9]{1,5}")))
+        {
+            System.err.println("Incorrect command line arguments. Syntax:\n"
+                + "KanjiVgLoader <kanjivgfile> <output file> [max size in kb]\n"
+                + "Max size is used to optionally split the file into multiple\n"
+                + "parts.");
+            return;
+        }
+
+        File in = new File(args[0]);
+        if(!in.canRead())
+        {
+            System.err.println("Unable to read input file: " + args[0]);
+            return;
+        }
+
+        File out;
+        int maxBytes = -1;
+        String fileName = args[1];
+        if(args.length == 3)
+        {
+            maxBytes = Integer.parseInt(args[2]) * 1024;
+
+            out = new File(fileName + ".1");
+            if(out.exists())
+            {
+                System.err.println("Output file already exists: " + fileName + ".1");
+                return;
+            }
+        }
+        else
+        {
+            out = new File(fileName);
+            if(out.exists())
+            {
+                System.err.println("Output file already exists: " + fileName);
+                return;
+            }
+        }
+
+        try
+        {
+            // Load everything
+            KanjiVgLoader loader = new KanjiVgLoader(new BufferedInputStream(
+                new FileInputStream(in)));
+            System.out.println("Loading input file: " + in.getName());
+            KanjiInfo[] allKanji = loader.loadKanji();
+            System.out.println("Loaded " + allKanji.length + " kanji.");
+            System.out.println();
+            if(loader.getWarnings().length > 0)
+            {
+                System.out.println("Warnings:");
+                for(String warning : loader.getWarnings())
+                {
+                    System.out.println("  " + warning);
+                }
+                System.out.println();
+            }
+
+            KanjiList list = new KanjiList();
+            for(KanjiInfo kanji : allKanji)
+            {
+                list.add(kanji);
+            }
+
+            OutputStream stream;
+            if(maxBytes == -1)
+            {
+                System.out.println("Writing output file: " + out.getName());
+                stream = new FileOutputStream(out);
+            }
+            else
+            {
+                System.out.println("Writing output files: " + fileName + ".*");
+                stream = new SplitOutputStream(fileName, maxBytes);
+            }
+            list.save(stream, in.getName());
+            stream.close();
+        }
+        catch(IOException e)
+        {
+            System.err.println("Error processing file: " + e.getMessage());
+            System.err.println();
+            System.err.println("FULL STACK TRACE:");
+            System.err.println();
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/converter/src/main/java/com/leafdigital/convert/SplitOutputStream.java b/converter/src/main/java/com/leafdigital/convert/SplitOutputStream.java
new file mode 100644
index 0000000..2be294b
--- /dev/null
+++ b/converter/src/main/java/com/leafdigital/convert/SplitOutputStream.java
@@ -0,0 +1,92 @@
+package com.leafdigital.convert;
+
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+/**
+ * Output stream capable of writing multiple files; the first has .1, the
+ * second .2, etc.
+ */
+public class SplitOutputStream extends OutputStream
+{
+    private String basePath;
+    private int maxBytes;
+
+    private OutputStream out;
+    private int bytesLeft;
+    private int index;
+
+    public SplitOutputStream(String basePath, int maxBytes) throws IOException
+    {
+        this.basePath = basePath;
+        this.maxBytes = maxBytes;
+        index = 0;
+    }
+
+    @Override
+    public void close() throws IOException
+    {
+        if(out != null)
+        {
+            out.close();
+            out = null;
+        }
+    }
+
+    private void checkOutput() throws IOException
+    {
+        if(out == null)
+        {
+            index++;
+            File file = new File(basePath + "." + index);
+            if(file.exists())
+            {
+                throw new IOException("File already exists: " + file.getPath());
+            }
+            out = new FileOutputStream(file);
+            bytesLeft = maxBytes;
+        }
+    }
+
+    private void wroteBytes(int wrote) throws IOException
+    {
+        bytesLeft -= wrote;
+        if(bytesLeft <= 0)
+        {
+            out.close();
+            out = null;
+        }
+    }
+
+    @Override
+    public void write(int oneByte) throws IOException
+    {
+        checkOutput();
+        out.write(oneByte);
+        wroteBytes(1);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int count) throws IOException
+    {
+        checkOutput();
+        if(count > bytesLeft)
+        {
+            int wasLeft = bytesLeft;
+            write(buffer, offset, bytesLeft);
+            write(buffer, offset + wasLeft, count - wasLeft);
+            return;
+        }
+        out.write(buffer, offset, count);
+        wroteBytes(count);
+    }
+
+    @Override
+    public void write(byte[] buffer) throws IOException
+    {
+        write(buffer, 0, buffer.length);
+    }
+}
diff --git a/src/com/leafdigital/kanji/FuzzyComparer.java b/lib/src/main/java/com/leafdigital/kanji/FuzzyComparer.java
similarity index 100%
rename from src/com/leafdigital/kanji/FuzzyComparer.java
rename to lib/src/main/java/com/leafdigital/kanji/FuzzyComparer.java
diff --git a/src/com/leafdigital/kanji/InputStroke.java b/lib/src/main/java/com/leafdigital/kanji/InputStroke.java
similarity index 100%
rename from src/com/leafdigital/kanji/InputStroke.java
rename to lib/src/main/java/com/leafdigital/kanji/InputStroke.java
diff --git a/src/com/leafdigital/kanji/KanjiComparer.java b/lib/src/main/java/com/leafdigital/kanji/KanjiComparer.java
similarity index 100%
rename from src/com/leafdigital/kanji/KanjiComparer.java
rename to lib/src/main/java/com/leafdigital/kanji/KanjiComparer.java
diff --git a/src/com/leafdigital/kanji/KanjiInfo.java b/lib/src/main/java/com/leafdigital/kanji/KanjiInfo.java
similarity index 98%
rename from src/com/leafdigital/kanji/KanjiInfo.java
rename to lib/src/main/java/com/leafdigital/kanji/KanjiInfo.java
index f3b2ba1..99b9436 100644
--- a/src/com/leafdigital/kanji/KanjiInfo.java
+++ b/lib/src/main/java/com/leafdigital/kanji/KanjiInfo.java
@@ -18,10 +18,13 @@ Copyright 2011 Samuel Marshall.
 */
 package com.leafdigital.kanji;
 
-import java.io.*;
-import java.util.*;
+import com.leafdigital.kanji.Stroke.Direction;
+import com.leafdigital.kanji.Stroke.Location;
 
-import com.leafdigital.kanji.Stroke.*;
+import java.io.IOException;
+import java.io.Writer;
+import java.util.HashMap;
+import java.util.LinkedList;
 
 /**
  * Holds stroke info about a single kanji.
diff --git a/src/com/leafdigital/kanji/KanjiList.java b/lib/src/main/java/com/leafdigital/kanji/KanjiList.java
similarity index 92%
rename from src/com/leafdigital/kanji/KanjiList.java
rename to lib/src/main/java/com/leafdigital/kanji/KanjiList.java
index 159a209..8d2f743 100644
--- a/src/com/leafdigital/kanji/KanjiList.java
+++ b/lib/src/main/java/com/leafdigital/kanji/KanjiList.java
@@ -18,13 +18,24 @@ Copyright 2011 Samuel Marshall.
 */
 package com.leafdigital.kanji;
 
-import java.io.*;
-import java.util.*;
+import org.xml.sax.Attributes;
+import org.xml.sax.SAXException;
+import org.xml.sax.helpers.DefaultHandler;
 
-import javax.xml.parsers.*;
+import java.io.BufferedWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.SortedMap;
+import java.util.TreeMap;
+import java.util.TreeSet;
 
-import org.xml.sax.*;
-import org.xml.sax.helpers.DefaultHandler;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
 
 /**
  * Stores list of all {@link KanjiInfo} objects loaded, organised by
@@ -120,15 +131,11 @@ public class KanjiList
 		}
 		catch(ParserConfigurationException e)
 		{
-			IOException x = new IOException("Failed to initialise SAX parser");
-			x.initCause(e);
-			throw x;
+			throw new IOException("Failed to initialise SAX parser", e);
 		}
 		catch(SAXException e)
 		{
-			IOException x = new IOException("Failed to parse strokes file");
-			x.initCause(e);
-			throw x;
+			throw new IOException("Failed to parse strokes file", e);
 		}
 	}
 
diff --git a/src/com/leafdigital/kanji/KanjiMatch.java b/lib/src/main/java/com/leafdigital/kanji/KanjiMatch.java
similarity index 100%
rename from src/com/leafdigital/kanji/KanjiMatch.java
rename to lib/src/main/java/com/leafdigital/kanji/KanjiMatch.java
diff --git a/src/com/leafdigital/kanji/KanjiVgLoader.java b/lib/src/main/java/com/leafdigital/kanji/KanjiVgLoader.java
similarity index 54%
rename from src/com/leafdigital/kanji/KanjiVgLoader.java
rename to lib/src/main/java/com/leafdigital/kanji/KanjiVgLoader.java
index d17cc7e..90d798b 100644
--- a/src/com/leafdigital/kanji/KanjiVgLoader.java
+++ b/lib/src/main/java/com/leafdigital/kanji/KanjiVgLoader.java
@@ -18,13 +18,23 @@ Copyright 2011 Samuel Marshall.
 */
 package com.leafdigital.kanji;
 
-import java.io.*;
-import java.util.*;
+import org.xml.sax.Attributes;
+import org.xml.sax.SAXException;
+import org.xml.sax.helpers.DefaultHandler;
 
-import javax.xml.parsers.*;
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.HashSet;
+import java.util.LinkedList;
 
-import org.xml.sax.*;
-import org.xml.sax.helpers.DefaultHandler;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
 
 /**
  * Reads kanji stroke order data from a file in KanjiVG format and simplifies
@@ -198,185 +208,4 @@ public class KanjiVgLoader
     {
         return warnings.toArray(new String[warnings.size()]);
     }
-
-    /**
-     * Convert KanjiVG file into new info file.
-     * @param args Filename to convert and output filename
-     */
-    public static void main(String[] args)
-    {
-        if(args.length < 2 || args.length > 3
-            || (args.length==3 && !args[2].matches("[0-9]{1,5}")))
-        {
-            System.err.println("Incorrect command line arguments. Syntax:\n"
-                + "KanjiVgLoader <kanjivgfile> <output file> [max size in kb]\n"
-                + "Max size is used to optionally split the file into multiple\n"
-                + "parts.");
-            return;
-        }
-
-        File in = new File(args[0]);
-        if(!in.canRead())
-        {
-            System.err.println("Unable to read input file: " + args[0]);
-            return;
-        }
-
-        File out;
-        int maxBytes = -1;
-        String fileName = args[1];
-        if(args.length == 3)
-        {
-            maxBytes = Integer.parseInt(args[2]) * 1024;
-
-            out = new File(fileName + ".1");
-            if(out.exists())
-            {
-                System.err.println("Output file already exists: " + fileName + ".1");
-                return;
-            }
-        }
-        else
-        {
-            out = new File(fileName);
-            if(out.exists())
-            {
-                System.err.println("Output file already exists: " + fileName);
-                return;
-            }
-        }
-
-        try
-        {
-            // Load everything
-            KanjiVgLoader loader = new KanjiVgLoader(new BufferedInputStream(
-                new FileInputStream(in)));
-            System.out.println("Loading input file: " + in.getName());
-            KanjiInfo[] allKanji = loader.loadKanji();
-            System.out.println("Loaded " + allKanji.length + " kanji.");
-            System.out.println();
-            if(loader.getWarnings().length > 0)
-            {
-                System.out.println("Warnings:");
-                for(String warning : loader.getWarnings())
-                {
-                    System.out.println("  " + warning);
-                }
-                System.out.println();
-            }
-
-            KanjiList list = new KanjiList();
-            for(KanjiInfo kanji : allKanji)
-            {
-                list.add(kanji);
-            }
-
-            OutputStream stream;
-            if(maxBytes == -1)
-            {
-                System.out.println("Writing output file: " + out.getName());
-                stream = new FileOutputStream(out);
-            }
-            else
-            {
-                System.out.println("Writing output files: " + fileName + ".*");
-                stream = new SplitOutputStream(fileName, maxBytes);
-            }
-            list.save(stream, in.getName());
-            stream.close();
-        }
-        catch(IOException e)
-        {
-            System.err.println("Error processing file: " + e.getMessage());
-            System.err.println();
-            System.err.println("FULL STACK TRACE:");
-            System.err.println();
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * Output stream capable of writing multiple files; the first has .1, the
-     * second .2, etc.
-     */
-    private static class SplitOutputStream extends OutputStream
-    {
-        private String basePath;
-        private int maxBytes;
-
-        private OutputStream out;
-        private int bytesLeft;
-        private int index;
-
-        private SplitOutputStream(String basePath, int maxBytes) throws IOException
-        {
-            this.basePath = basePath;
-            this.maxBytes = maxBytes;
-            index = 0;
-        }
-
-        @Override
-        public void close() throws IOException
-        {
-            if(out != null)
-            {
-                out.close();
-                out = null;
-            }
-        }
-
-        private void checkOutput() throws IOException
-        {
-            if(out == null)
-            {
-                index++;
-                File file = new File(basePath + "." + index);
-                if(file.exists())
-                {
-                    throw new IOException("File already exists: " + file.getPath());
-                }
-                out = new FileOutputStream(file);
-                bytesLeft = maxBytes;
-            }
-        }
-
-        private void wroteBytes(int wrote) throws IOException
-        {
-            bytesLeft -= wrote;
-            if(bytesLeft <= 0)
-            {
-                out.close();
-                out = null;
-            }
-        }
-
-        @Override
-        public void write(int oneByte) throws IOException
-        {
-            checkOutput();
-            out.write(oneByte);
-            wroteBytes(1);
-        }
-
-        @Override
-        public void write(byte[] buffer, int offset, int count) throws IOException
-        {
-            checkOutput();
-            if(count > bytesLeft)
-            {
-                int wasLeft = bytesLeft;
-                write(buffer, offset, bytesLeft);
-                write(buffer, offset + wasLeft, count - wasLeft);
-                return;
-            }
-            out.write(buffer, offset, count);
-            wroteBytes(count);
-        }
-
-        @Override
-        public void write(byte[] buffer) throws IOException
-        {
-            write(buffer, 0, buffer.length);
-        }
-    }
 }
diff --git a/src/com/leafdigital/kanji/SpansComparer.java b/lib/src/main/java/com/leafdigital/kanji/SpansComparer.java
similarity index 99%
rename from src/com/leafdigital/kanji/SpansComparer.java
rename to lib/src/main/java/com/leafdigital/kanji/SpansComparer.java
index bf7c248..1a2ec30 100644
--- a/src/com/leafdigital/kanji/SpansComparer.java
+++ b/lib/src/main/java/com/leafdigital/kanji/SpansComparer.java
@@ -18,7 +18,8 @@ Copyright 2011 Samuel Marshall.
 */
 package com.leafdigital.kanji;
 
-import java.util.*;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 /**
  * TODO Describe this
diff --git a/src/com/leafdigital/kanji/StatsReporter.java b/lib/src/main/java/com/leafdigital/kanji/StatsReporter.java
similarity index 93%
rename from src/com/leafdigital/kanji/StatsReporter.java
rename to lib/src/main/java/com/leafdigital/kanji/StatsReporter.java
index eaa7e54..b8b0e20 100644
--- a/src/com/leafdigital/kanji/StatsReporter.java
+++ b/lib/src/main/java/com/leafdigital/kanji/StatsReporter.java
@@ -18,11 +18,18 @@ Copyright 2011 Samuel Marshall.
 */
 package com.leafdigital.kanji;
 
-import java.io.*;
-import java.net.*;
-
 import com.leafdigital.kanji.KanjiInfo.MatchAlgorithm;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+
 /**
  * Used for reporting information about how the kanji was drawn to the
  * leafdigital server so that we can use it for statistical information
diff --git a/src/com/leafdigital/kanji/StrictComparer.java b/lib/src/main/java/com/leafdigital/kanji/StrictComparer.java
similarity index 100%
rename from src/com/leafdigital/kanji/StrictComparer.java
rename to lib/src/main/java/com/leafdigital/kanji/StrictComparer.java
diff --git a/src/com/leafdigital/kanji/Stroke.java b/lib/src/main/java/com/leafdigital/kanji/Stroke.java
similarity index 100%
rename from src/com/leafdigital/kanji/Stroke.java
rename to lib/src/main/java/com/leafdigital/kanji/Stroke.java
diff --git a/src/com/leafdigital/kanji/package-info.java b/lib/src/main/java/com/leafdigital/kanji/package-info.java
similarity index 100%
rename from src/com/leafdigital/kanji/package-info.java
rename to lib/src/main/java/com/leafdigital/kanji/package-info.java
diff --git a/test/com/leafdigital/kanji/AnalyseRecognition.java b/lib/src/test/java/com/leafdigital/kanji/AnalyseRecognition.java
similarity index 91%
rename from test/com/leafdigital/kanji/AnalyseRecognition.java
rename to lib/src/test/java/com/leafdigital/kanji/AnalyseRecognition.java
index f31fbcf..f9055a4 100644
--- a/test/com/leafdigital/kanji/AnalyseRecognition.java
+++ b/lib/src/test/java/com/leafdigital/kanji/AnalyseRecognition.java
@@ -23,8 +23,6 @@ import java.sql.*;
 import java.util.*;
 import java.util.concurrent.*;
 
-import com.leafdigital.kanji.KanjiInfo.MatchAlgorithm;
-
 /**
  * Analyses current performance based on the data stored in the database from
  * real users. This is a command-line tool. Run with the database password.
@@ -86,10 +84,10 @@ public class AnalyseRecognition
 			}
 		}
 
-		MatchAlgorithm algo = null;
+		KanjiInfo.MatchAlgorithm algo = null;
 		if(args.length > 2)
 		{
-			algo = MatchAlgorithm.valueOf(args[2]);
+			algo = KanjiInfo.MatchAlgorithm.valueOf(args[2]);
 		}
 
 		new AnalyseRecognition().run(args[0], where, algo);
@@ -101,7 +99,7 @@ public class AnalyseRecognition
 	 * @param soloAlgo Match algorithm or null for all
 	 * @throws Exception Any error
 	 */
-	private void run(String password, String where, MatchAlgorithm soloAlgo)
+	private void run(String password, String where, KanjiInfo.MatchAlgorithm soloAlgo)
 		throws Exception
 	{
 		// Get database connection
@@ -164,7 +162,7 @@ public class AnalyseRecognition
 
 	private ExecutorService threadPool;
 
-	private Map<MatchAlgorithm, AlgoResults> results;
+	private Map<KanjiInfo.MatchAlgorithm, AlgoResults> results;
 
 	private long startTime;
 
@@ -173,13 +171,13 @@ public class AnalyseRecognition
 	 */
 	private class AlgoResults
 	{
-		private MatchAlgorithm algo;
+		private KanjiInfo.MatchAlgorithm algo;
 		private Map<Integer, Integer> rankings = new TreeMap<Integer, Integer>();
 		private int failures = 0;
 		private int total = 0;
 		private double cumulative = 0;
 
-		private AlgoResults(MatchAlgorithm algo)
+		private AlgoResults(KanjiInfo.MatchAlgorithm algo)
 		{
 			this.algo = algo;
 		}
@@ -220,7 +218,7 @@ public class AnalyseRecognition
 			// Work out the max ranking that is actually displayed by the Android
 			// app. Anything higher counts as a failure.
 			int max = 24;
-			if(algo == MatchAlgorithm.STRICT)
+			if(algo == KanjiInfo.MatchAlgorithm.STRICT)
 			{
 				max = 7;
 			}
@@ -287,7 +285,7 @@ public class AnalyseRecognition
 		processed = 0;
 		added = 0;
 		list = new KanjiList(new FileInputStream("data/strokes-20100823.xml"));
-		results = new TreeMap<MatchAlgorithm, AlgoResults>();
+		results = new TreeMap<KanjiInfo.MatchAlgorithm, AlgoResults>();
 
 		startTime = System.currentTimeMillis();
 
@@ -304,7 +302,7 @@ public class AnalyseRecognition
 	 * @throws InterruptedException Probably shouldn't really happen
 	 */
 	private synchronized void process(final String drawing, final String kanji,
-		final MatchAlgorithm soloAlgo)
+		final KanjiInfo.MatchAlgorithm soloAlgo)
 		throws InterruptedException
 	{
 		while(added > processed + MAX_QUEUE_SIZE)
@@ -324,8 +322,8 @@ public class AnalyseRecognition
 				int actualStrokes = list.find(kanji).getStrokeCount();
 
 				// Decide which algorithms to use based on stroke count
-				List<MatchAlgorithm> algorithms = new LinkedList<MatchAlgorithm>();
-				for(MatchAlgorithm algo : MatchAlgorithm.values())
+				List<KanjiInfo.MatchAlgorithm> algorithms = new LinkedList<KanjiInfo.MatchAlgorithm>();
+				for(KanjiInfo.MatchAlgorithm algo : KanjiInfo.MatchAlgorithm.values())
 				{
 					if(algo.getOut() == Math.abs(actualStrokes - drawingInfo.getStrokeCount()))
 					{
@@ -334,7 +332,7 @@ public class AnalyseRecognition
 				}
 
 				// Process for each algorithm
-				for(MatchAlgorithm algo : algorithms)
+				for(KanjiInfo.MatchAlgorithm algo : algorithms)
 				{
 					if(soloAlgo == null || soloAlgo == algo)
 					{
@@ -358,7 +356,7 @@ public class AnalyseRecognition
 	 * @param drawingInfo Drawing
 	 * @param algo Algorithm to use
 	 */
-	private void process(KanjiInfo drawingInfo, MatchAlgorithm algo)
+	private void process(KanjiInfo drawingInfo, KanjiInfo.MatchAlgorithm algo)
 	{
 		KanjiMatch[] matches = list.getTopMatches(drawingInfo, algo, null);
 
@@ -394,7 +392,7 @@ public class AnalyseRecognition
 		threadPool.awaitTermination(1, TimeUnit.DAYS);
 		long endTime = System.currentTimeMillis();
 		System.err.println();
-		for(Map.Entry<MatchAlgorithm,AlgoResults> entry : results.entrySet())
+		for(Map.Entry<KanjiInfo.MatchAlgorithm,AlgoResults> entry : results.entrySet())
 		{
 			// Blank line before algorithm name and underline, then blank line
 			String algoName = entry.getKey().toString();
diff --git a/test/com/leafdigital/kanji/FuzzyComparerTest.java b/lib/src/test/java/com/leafdigital/kanji/FuzzyComparerTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/FuzzyComparerTest.java
rename to lib/src/test/java/com/leafdigital/kanji/FuzzyComparerTest.java
diff --git a/test/com/leafdigital/kanji/InputStrokeTest.java b/lib/src/test/java/com/leafdigital/kanji/InputStrokeTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/InputStrokeTest.java
rename to lib/src/test/java/com/leafdigital/kanji/InputStrokeTest.java
diff --git a/test/com/leafdigital/kanji/KanjiInfoTest.java b/lib/src/test/java/com/leafdigital/kanji/KanjiInfoTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/KanjiInfoTest.java
rename to lib/src/test/java/com/leafdigital/kanji/KanjiInfoTest.java
diff --git a/test/com/leafdigital/kanji/KanjiListTest.java b/lib/src/test/java/com/leafdigital/kanji/KanjiListTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/KanjiListTest.java
rename to lib/src/test/java/com/leafdigital/kanji/KanjiListTest.java
diff --git a/test/com/leafdigital/kanji/KanjiVgLoaderTest.java b/lib/src/test/java/com/leafdigital/kanji/KanjiVgLoaderTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/KanjiVgLoaderTest.java
rename to lib/src/test/java/com/leafdigital/kanji/KanjiVgLoaderTest.java
diff --git a/test/com/leafdigital/kanji/SpansComparerTest.java b/lib/src/test/java/com/leafdigital/kanji/SpansComparerTest.java
similarity index 100%
rename from test/com/leafdigital/kanji/SpansComparerTest.java
rename to lib/src/test/java/com/leafdigital/kanji/SpansComparerTest.java
diff --git a/test/com/leafdigital/kanji/StrokeTest.java b/lib/src/test/java/com/leafdigital/kanji/StrokeTest.java
similarity index 98%
rename from test/com/leafdigital/kanji/StrokeTest.java
rename to lib/src/test/java/com/leafdigital/kanji/StrokeTest.java
index 36de06b..4136479 100644
--- a/test/com/leafdigital/kanji/StrokeTest.java
+++ b/lib/src/test/java/com/leafdigital/kanji/StrokeTest.java
@@ -22,9 +22,6 @@ import static org.junit.Assert.*;
 
 import org.junit.Test;
 
-import com.leafdigital.kanji.Stroke;
-import com.leafdigital.kanji.Stroke.Location;
-
 /** Test stroke features. */
 public class StrokeTest
 {
diff --git a/src/com/leafdigital/kanji/android/IconService.java b/src/com/leafdigital/kanji/android/IconService.java
deleted file mode 100644
index 1e28993..0000000
--- a/src/com/leafdigital/kanji/android/IconService.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.android;
-
-import android.app.*;
-import android.content.Intent;
-import android.os.*;
-
-/**
- * Service that just displays the notification icon.
- */
-public class IconService extends Service
-{
-	private IBinder binder = new Binder();
-	private NotificationManager notifications;
-
-	@Override
-	public IBinder onBind(Intent intent)
-	{
-		return binder;
-	}
-
-	@Override
-	public void onCreate()
-	{
-		notifications = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
-
-		Notification notification = new Notification(R.drawable.statusicon,
-			getString(R.string.notificationtitle), 0L);
-		notification.flags |=
-			Notification.FLAG_ONGOING_EVENT | Notification.FLAG_NO_CLEAR;
-		PendingIntent launchIntent = PendingIntent.getActivity(this, 0,
-      new Intent(this, MainActivity.class), 0);
-		notification.setLatestEventInfo(this, getString(R.string.notificationtitle),
-			getString(R.string.notificationtext), launchIntent);
-
-		notifications.notify(1, notification);
-	}
-
-	public void onDestroy()
-	{
-		notifications.cancel(1);
-	}
-}
diff --git a/src/com/leafdigital/kanji/android/MultiAssetInputStream.java b/src/com/leafdigital/kanji/android/MultiAssetInputStream.java
deleted file mode 100644
index 560ff9b..0000000
--- a/src/com/leafdigital/kanji/android/MultiAssetInputStream.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
-This file is part of leafdigital kanjirecog.
-
-kanjirecog is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-kanjirecog is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with kanjirecog.  If not, see <http://www.gnu.org/licenses/>.
-
-Copyright 2011 Samuel Marshall.
-*/
-package com.leafdigital.kanji.android;
-
-import java.io.*;
-import java.util.*;
-
-import android.content.res.AssetManager;
-
-/**
- * Input stream that reads from multiple assets, joining them together. This
- * allows assets to exceed the 1MB length limit.
- */
-public class MultiAssetInputStream extends InputStream
-{
-	private AssetManager assets;
-	private LinkedList<String> remainingFileNames;
-
-	private InputStream current;
-
-	public MultiAssetInputStream(AssetManager assets, String[] fileNames)
-	{
-		this.assets = assets;
-		this.remainingFileNames = new LinkedList<String>(Arrays.asList(fileNames));
-	}
-
-	private void checkLoaded() throws IOException
-	{
-		if(current == null && !remainingFileNames.isEmpty())
-		{
-			String name = remainingFileNames.removeFirst();
-			current = assets.open(name, AssetManager.ACCESS_STREAMING);
-		}
-	}
-
-	protected void finalize() throws Throwable
-	{
-		close();
-	}
-
-	@Override
-	public void close() throws IOException
-	{
-		if(current != null)
-		{
-			current.close();
-		}
-	}
-
-	@Override
-	public int read() throws IOException
-	{
-		checkLoaded();
-		if(current == null)
-		{
-			return -1;
-		}
-		int value = current.read();
-		if(value == -1)
-		{
-			// EOF, recurse with next stream
-			current.close();
-			current = null;
-			return read();
-		}
-		else
-		{
-			return value;
-		}
-	}
-
-	@Override
-	public int read(byte[] b) throws IOException
-	{
-		return read(b, 0, b.length);
-	}
-
-	@Override
-	public int read(byte[] b, int offset, int length) throws IOException
-	{
-		checkLoaded();
-		if(current == null)
-		{
-			return -1;
-		}
-		int read = current.read(b, offset, length);
-		if(read == -1)
-		{
-			// EOF, recurse with next stream
-			current.close();
-			current = null;
-			return read(b, offset, length);
-		}
-		else
-		{
-			return read;
-		}
-	}
-}
