diff --git a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
index c70c2c4..fefd7ae 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
@@ -1,9 +1,10 @@
 package com.bytesforge.linkasanote;
 
-import android.app.Application;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.support.annotation.VisibleForTesting;
+import android.support.multidex.MultiDexApplication;
+import android.support.v7.app.AppCompatDelegate;
 
 import com.bytesforge.linkasanote.data.source.ProviderModule;
 import com.bytesforge.linkasanote.data.source.RepositoryModule;
@@ -13,7 +14,11 @@ import com.bytesforge.linkasanote.utils.schedulers.SchedulerProviderModule;
 
 import java.lang.ref.WeakReference;
 
-public class LaanoApplication extends Application {
+public class LaanoApplication extends MultiDexApplication { // Application {
+
+    static {
+        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
+    }
 
     private ApplicationComponent applicationComponent;
     private static WeakReference<Context> context;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/about/AboutContract.java b/app/src/main/java/com/bytesforge/linkasanote/about/AboutContract.java
index 8533e51..977e52e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/about/AboutContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/about/AboutContract.java
@@ -15,9 +15,8 @@ public interface AboutContract {
         boolean isActive();
 
         void showGooglePlay();
-        void showGplV3TermsAlertDialog();
-        void showApacheV2TermsAlertDialog();
-        void showMitTermsAlertDialog();
+        void showLicenseTermsAlertDialog(@NonNull String licenseText);
+        String getLicenseText(@NonNull String assetName);
     }
 
     interface ViewModel extends BaseView<Presenter> {
@@ -26,6 +25,9 @@ public interface AboutContract {
         void saveInstanceState(Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
         Bundle getDefaultInstanceState();
+        void showProgressOverlay();
+        void hideProgressOverlay();
+        void showLaunchGooglePlayErrorSnackbar();
     }
 
     interface Presenter extends BasePresenter {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/about/AboutFragment.java b/app/src/main/java/com/bytesforge/linkasanote/about/AboutFragment.java
index 6eb565e..f43cfdf 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/about/AboutFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/about/AboutFragment.java
@@ -7,18 +7,19 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.res.Resources;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.text.Html;
+import android.text.Spanned;
 import android.text.method.LinkMovementMethod;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import com.bytesforge.linkasanote.BuildConfig;
 import com.bytesforge.linkasanote.R;
@@ -34,6 +35,8 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 public class AboutFragment extends Fragment implements AboutContract.View {
 
+    private static final String TAG = AboutFragment.class.getSimpleName();
+
     private Context context;
     private AboutContract.Presenter presenter;
     private AboutContract.ViewModel viewModel;
@@ -93,40 +96,50 @@ public class AboutFragment extends Fragment implements AboutContract.View {
         try {
             startActivity(intent);
         } catch (ActivityNotFoundException e) {
-            Toast.makeText(context,
-                    R.string.about_launch_google_play_error, Toast.LENGTH_LONG).show();
+            viewModel.showLaunchGooglePlayErrorSnackbar();
         }
     }
 
     @Override
-    public void showGplV3TermsAlertDialog() {
-        LicenseTermsDialog dialog = LicenseTermsDialog.newInstance("gpl-3.0.en.html");
-        dialog.show(getFragmentManager(), LicenseTermsDialog.DIALOG_TAG);
-    }
-
-    @Override
-    public void showApacheV2TermsAlertDialog() {
-        LicenseTermsDialog dialog = LicenseTermsDialog.newInstance("LICENSE-2.0.html");
+    public void showLicenseTermsAlertDialog(@NonNull String licenseText) {
+        checkNotNull(licenseText);
+        LicenseTermsDialog dialog = LicenseTermsDialog.newInstance(licenseText);
         dialog.show(getFragmentManager(), LicenseTermsDialog.DIALOG_TAG);
     }
 
     @Override
-    public void showMitTermsAlertDialog() {
-        LicenseTermsDialog dialog = LicenseTermsDialog.newInstance("MIT.html");
-        dialog.show(getFragmentManager(), LicenseTermsDialog.DIALOG_TAG);
+    public String getLicenseText(@NonNull String assetName) {
+        checkNotNull(assetName);
+        Resources resources = context.getResources();
+        String licenseText;
+        try {
+            String line;
+            StringBuilder builder = new StringBuilder();
+            InputStream stream = resources.getAssets().open(assetName);
+            BufferedReader in = new BufferedReader(new InputStreamReader(stream, Charsets.UTF_8));
+            while ((line = in.readLine()) != null) {
+                builder.append(line);
+                builder.append('\n');
+            }
+            in.close();
+            licenseText = builder.toString();
+        } catch (IOException e) {
+            licenseText = resources.getString(R.string.about_fragment_error_license, assetName);
+        }
+        return licenseText;
     }
 
     public static class LicenseTermsDialog extends DialogFragment {
 
-        private static final String ARGUMENT_LICENSE_NAME = "LICENSE_NAME";
+        private static final String ARGUMENT_LICENSE_TEXT = "LICENSE_TEXT";
 
         public static final String DIALOG_TAG = "LICENSE_TERMS";
 
-        private String licenseName;
+        private String licenseText;
 
-        public static LicenseTermsDialog newInstance(String licenseName) {
+        public static LicenseTermsDialog newInstance(String licenseText) {
             Bundle args = new Bundle();
-            args.putString(ARGUMENT_LICENSE_NAME, licenseName);
+            args.putString(ARGUMENT_LICENSE_TEXT, licenseText);
             LicenseTermsDialog dialog = new LicenseTermsDialog();
             dialog.setArguments(args);
             return dialog;
@@ -142,31 +155,21 @@ public class AboutFragment extends Fragment implements AboutContract.View {
         @Override
         public void onCreate(@Nullable Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
-            licenseName = getArguments().getString(ARGUMENT_LICENSE_NAME);
+            licenseText = getArguments().getString(ARGUMENT_LICENSE_TEXT);
         }
 
         @NonNull
         @Override
         public Dialog onCreateDialog(Bundle savedInstanceState) {
-            String licenseText;
             Resources resources = getContext().getResources();
-            try {
-                String line;
-                StringBuilder builder = new StringBuilder();
-                InputStream stream = getContext().getResources().getAssets().open(licenseName);
-                BufferedReader in = new BufferedReader(new InputStreamReader(stream, Charsets.UTF_8));
-                while ((line = in.readLine()) != null) {
-                    builder.append(line);
-                    builder.append('\n');
-                }
-                in.close();
-                licenseText = builder.toString();
-            } catch (IOException e) {
-                licenseText = resources.getString(
-                        R.string.about_fragment_error_license, licenseName);
+            Spanned licenseSpanned;
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                licenseSpanned = Html.fromHtml(licenseText, Html.FROM_HTML_MODE_LEGACY);
+            } else {
+                licenseSpanned = Html.fromHtml(licenseText);
             }
             return new AlertDialog.Builder(getContext())
-                    .setMessage(Html.fromHtml(licenseText, Html.FROM_HTML_MODE_LEGACY))
+                    .setMessage(licenseSpanned)
                     .setPositiveButton(resources.getString(R.string.dialog_button_ok), null)
                     .create();
         }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/about/AboutPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/about/AboutPresenter.java
index 718b724..e4486fe 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/about/AboutPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/about/AboutPresenter.java
@@ -1,16 +1,31 @@
 package com.bytesforge.linkasanote.about;
 
+import android.support.annotation.NonNull;
+
+import com.bytesforge.linkasanote.utils.CommonUtils;
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
+
 import javax.inject.Inject;
 
+import io.reactivex.Single;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+
 public final class AboutPresenter implements AboutContract.Presenter {
 
+    private static final String TAG = AboutPresenter.class.getSimpleName();
+
     private final AboutContract.View view;
     private final AboutContract.ViewModel viewModel;
+    private final BaseSchedulerProvider schedulerProvider;
 
     @Inject
-    public AboutPresenter(AboutContract.View view, AboutContract.ViewModel viewModel) {
+    public AboutPresenter(
+            AboutContract.View view, AboutContract.ViewModel viewModel,
+            BaseSchedulerProvider schedulerProvider) {
         this.view = view;
         this.viewModel = viewModel;
+        this.schedulerProvider = schedulerProvider;
     }
 
     @Inject
@@ -35,16 +50,28 @@ public final class AboutPresenter implements AboutContract.Presenter {
 
     @Override
     public void onLicenseTermsGplV3Click() {
-        view.showGplV3TermsAlertDialog();
+        showLicenseTerms("gpl-3.0.en.html");
     }
 
     @Override
     public void onLicenseTermsApacheV2Click() {
-        view.showApacheV2TermsAlertDialog();
+        showLicenseTerms("LICENSE-2.0.html");
     }
 
     @Override
     public void onLicenseTermsMitClick() {
-        view.showMitTermsAlertDialog();
+        showLicenseTerms("MIT.html");
+    }
+
+    private void showLicenseTerms(@NonNull String assetName) {
+        checkNotNull(assetName);
+        viewModel.showProgressOverlay();
+        Single.fromCallable(() -> view.getLicenseText(assetName))
+                .subscribeOn(schedulerProvider.computation())
+                .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
+                .subscribe(
+                        view::showLicenseTermsAlertDialog,
+                        throwable -> CommonUtils.logStackTrace(TAG, throwable));
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/about/AboutViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/about/AboutViewModel.java
index 2f61621..57b7742 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/about/AboutViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/about/AboutViewModel.java
@@ -3,12 +3,17 @@ package com.bytesforge.linkasanote.about;
 import android.content.Context;
 import android.content.res.Resources;
 import android.databinding.BaseObservable;
+import android.databinding.Bindable;
+import android.databinding.BindingAdapter;
 import android.databinding.ObservableField;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.design.widget.Snackbar;
 import android.text.format.DateFormat;
+import android.widget.FrameLayout;
 
+import com.bytesforge.linkasanote.BR;
 import com.bytesforge.linkasanote.BuildConfig;
 import com.bytesforge.linkasanote.R;
 
@@ -18,23 +23,41 @@ public class AboutViewModel extends BaseObservable implements AboutContract.View
 
     public static final String STATE_APP_VERSION_TEXT = "APP_VERSION_TEXT";
     public static final String STATE_APP_COPYRIGHT_TEXT = "APP_COPYRIGHT_TEXT";
+    private static final String STATE_PROGRESS_OVERLAY = "PROGRESS_OVERLAY";
 
     public final ObservableField<String> appVersionText = new ObservableField<>();
     public final ObservableField<String> appCopyrightText = new ObservableField<>();
 
-    private Context context;
     private Resources resources;
-    private AboutContract.Presenter presenter;
 
+    public enum SnackbarId {
+        ABOUT_LAUNCH_GOOGLE_PLAY_ERROR}
 
     public AboutViewModel(@NonNull Context context) {
-        this.context = checkNotNull(context);
         resources = context.getResources();
     }
 
+    @Bindable
+    public boolean progressOverlay;
+
+    @Bindable
+    public SnackbarId snackbarId;
+
+    @BindingAdapter({"snackbarId"})
+    public static void showSnackbar(FrameLayout view, SnackbarId snackbarId) {
+        if (snackbarId == null) return;
+
+        switch (snackbarId) {
+            case ABOUT_LAUNCH_GOOGLE_PLAY_ERROR:
+                Snackbar.make(view,
+                        R.string.about_launch_google_play_error,
+                        Snackbar.LENGTH_LONG).show();
+                break;
+        }
+    }
+
     @Override
     public void setPresenter(@NonNull AboutContract.Presenter presenter) {
-        this.presenter = checkNotNull(presenter);
     }
 
     @Override
@@ -49,17 +72,17 @@ public class AboutViewModel extends BaseObservable implements AboutContract.View
     @Override
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putString(STATE_APP_VERSION_TEXT, appVersionText.get());
         outState.putString(STATE_APP_COPYRIGHT_TEXT, appCopyrightText.get());
+        outState.putBoolean(STATE_PROGRESS_OVERLAY, progressOverlay);
     }
 
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         appVersionText.set(state.getString(STATE_APP_VERSION_TEXT));
         appCopyrightText.set(state.getString(STATE_APP_COPYRIGHT_TEXT));
+        progressOverlay = state.getBoolean(STATE_PROGRESS_OVERLAY);
     }
 
     @Override
@@ -71,7 +94,34 @@ public class AboutViewModel extends BaseObservable implements AboutContract.View
                 resources.getString(R.string.about_app_version, BuildConfig.VERSION_NAME));
         defaultState.putString(STATE_APP_COPYRIGHT_TEXT, resources.getString(
                 R.string.about_app_copyright, buildYear, resources.getString(R.string.app_author)));
+        defaultState.putBoolean(STATE_PROGRESS_OVERLAY, false);
 
         return defaultState;
     }
+
+    // Progress
+
+    @Override
+    public void showProgressOverlay() {
+        if (!progressOverlay) {
+            progressOverlay = true;
+            notifyPropertyChanged(BR.progressOverlay);
+        }
+    }
+
+    @Override
+    public void hideProgressOverlay() {
+        if (progressOverlay) {
+            progressOverlay = false;
+            notifyPropertyChanged(BR.progressOverlay);
+        }
+    }
+
+    // Snackbar
+
+    @Override
+    public void showLaunchGooglePlayErrorSnackbar() {
+        snackbarId = SnackbarId.ABOUT_LAUNCH_GOOGLE_PLAY_ERROR;
+        notifyPropertyChanged(BR.snackbarId);
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
index d09382e..a35aa74 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/AddEditAccountActivity.java
@@ -7,9 +7,11 @@ import android.accounts.AccountManager;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.databinding.DataBindingUtil;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.annotation.RequiresApi;
 import android.support.design.widget.Snackbar;
 import android.support.v4.app.ActivityCompat;
 import android.support.v7.app.AppCompatActivity;
@@ -28,6 +30,8 @@ import javax.inject.Inject;
 public class AddEditAccountActivity extends AppCompatActivity implements
         ActivityCompat.OnRequestPermissionsResultCallback {
 
+    private static final String TAG = AddEditAccountActivity.class.getSimpleName();
+
     private static final int REQUEST_PERMISSION_GET_ACCOUNTS = 0;
     private static final String PERMISSION_GET_ACCOUNTS = Manifest.permission.GET_ACCOUNTS;
     private static String[] PERMISSIONS_GET_ACCOUNTS = {PERMISSION_GET_ACCOUNTS};
@@ -40,8 +44,6 @@ public class AddEditAccountActivity extends AppCompatActivity implements
     public static final String HTTPS_PROTOCOL = "https://";
     public static final String DEFAULT_PROTOCOL = HTTPS_PROTOCOL;
 
-    private static final String TAG = AddEditAccountActivity.class.getSimpleName();
-
     private AccountAuthenticatorResponse accountAuthenticatorResponse = null;
     private ActivityAddEditAccountBinding binding;
     private Bundle currentViewModelSate;
@@ -101,13 +103,19 @@ public class AddEditAccountActivity extends AppCompatActivity implements
     public void checkGetAccountsPermission() {
         if (ActivityCompat.checkSelfPermission(this, PERMISSION_GET_ACCOUNTS)
                 != PackageManager.PERMISSION_GRANTED) {
-            requestGetAccountsPermission();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                requestGetAccountsPermission();
+            } else {
+                disableActivity();
+                exitWithNotEnoughPermissionsError();
+            }
         } else if (!accountCanBeProcessed()) {
             disableActivity();
             exitWithUnsupportedMultipleAccountsError();
         }
     }
 
+    @RequiresApi(api = Build.VERSION_CODES.M)
     private void requestGetAccountsPermission() {
         disableActivity();
         if (ActivityCompat.shouldShowRequestPermissionRationale(this, PERMISSION_GET_ACCOUNTS)) {
@@ -140,7 +148,6 @@ public class AddEditAccountActivity extends AppCompatActivity implements
 
     private boolean accountCanBeProcessed() {
         Account[] accounts = CloudUtils.getAccountsWithPermissionCheck(this, accountManager);
-
         return !presenter.isNewAccount()
                 || getResources().getBoolean(R.bool.multiaccount_support)
                 || (accounts != null && accounts.length <= 0);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
index 1450cbe..b72a362 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
@@ -48,7 +48,8 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
     private final Context context;
     private NextcloudContract.Presenter presenter;
 
-    public enum SnackbarId {NORMALIZED_URL, SOMETHING_WRONG};
+    public enum SnackbarId {
+        NORMALIZED_URL, SOMETHING_WRONG}
 
     @Bindable
     public int serverStatusIcon = 0;
@@ -80,7 +81,6 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
     @Override
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putBoolean(STATE_SERVER_URL, serverUrl.get());
         outState.putString(STATE_SERVER_URL_TEXT, serverUrlText.get());
         outState.putBoolean(STATE_ACCOUNT_USERNAME, accountUsername.get());
@@ -97,7 +97,6 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         serverUrl.set(state.getBoolean(STATE_SERVER_URL));
         serverUrlText.set(state.getString(STATE_SERVER_URL_TEXT));
         accountUsername.set(state.getBoolean(STATE_ACCOUNT_USERNAME));
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
index e503e6a..76adcaa 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
@@ -316,13 +316,13 @@ public final class Favorite implements Comparable<Favorite>, Item {
         return name.compareTo(objName);
     }
 
-    public static ItemFactory<Favorite> getFactory() {
-        return new ItemFactory<Favorite>() {
+    @Override
+    public String toString() {
+        return getId();
+    }
 
-            @Override
-            public Favorite build(Favorite item, List<Tag> tags, List<Note> notes) {
-                throw new RuntimeException("Favorite factory has no implementation of this method");
-            }
+    public static FavoriteFactory<Favorite> getFactory() {
+        return new FavoriteFactory<Favorite>() {
 
             @Override
             public Favorite build(Favorite item, List<Tag> tags) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/FavoriteFactory.java b/app/src/main/java/com/bytesforge/linkasanote/data/FavoriteFactory.java
new file mode 100644
index 0000000..3a8ea42
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/FavoriteFactory.java
@@ -0,0 +1,13 @@
+package com.bytesforge.linkasanote.data;
+
+import android.support.annotation.NonNull;
+
+import com.bytesforge.linkasanote.sync.SyncState;
+
+import java.util.List;
+
+public interface FavoriteFactory<T> extends ItemFactory<T> {
+
+    T build(T item, List<Tag> tags);
+    T build(T item, @NonNull SyncState state);
+}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/ItemFactory.java b/app/src/main/java/com/bytesforge/linkasanote/data/ItemFactory.java
index 341f3fa..ed234dc 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/ItemFactory.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/ItemFactory.java
@@ -1,17 +1,11 @@
 package com.bytesforge.linkasanote.data;
 
 import android.database.Cursor;
-import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.sync.SyncState;
 
-import java.util.List;
-
 public interface ItemFactory<T> {
 
-    T build(T item, List<Tag> tags, List<Note> notes);
-    T build(T item, List<Tag> tags);
-    T build(T item, @NonNull SyncState state);
     T from(Cursor cursor);
     T from(String jsonFavoriteString, SyncState state);
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/Link.java b/app/src/main/java/com/bytesforge/linkasanote/data/Link.java
index 03799f2..86eef4d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/Link.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/Link.java
@@ -372,22 +372,17 @@ public final class Link implements Comparable<Link>, Item {
 
     @Override
     public String toString() {
-        return getId() + "->" + getLink();
+        return getId();
     }
 
-    public static ItemFactory<Link> getFactory() {
-        return new ItemFactory<Link>() {
+    public static LinkFactory<Link> getFactory() {
+        return new LinkFactory<Link>() {
 
             @Override
             public Link build(Link item, List<Tag> tags, List<Note> notes) {
                 return new Link(item, tags, notes);
             }
 
-            @Override
-            public Link build(Link item, List<Tag> tags) {
-                throw new RuntimeException("Link factory has no implementation of this method");
-            }
-
             @Override
             public Link build(Link item, @NonNull SyncState state) {
                 return new Link(item, state);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/LinkFactory.java b/app/src/main/java/com/bytesforge/linkasanote/data/LinkFactory.java
new file mode 100644
index 0000000..4ec1c64
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/LinkFactory.java
@@ -0,0 +1,13 @@
+package com.bytesforge.linkasanote.data;
+
+import android.support.annotation.NonNull;
+
+import com.bytesforge.linkasanote.sync.SyncState;
+
+import java.util.List;
+
+public interface LinkFactory<T> extends ItemFactory<T> {
+
+    T build(T item, List<Tag> tags, List<Note> notes);
+    T build(T item, @NonNull SyncState state);
+}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/Note.java b/app/src/main/java/com/bytesforge/linkasanote/data/Note.java
index 5bbbe9b..b61e83a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/Note.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/Note.java
@@ -326,22 +326,25 @@ public final class Note implements Comparable<Note>, Item {
         return note.compareTo(objNote);
     }
 
-    public static ItemFactory<Note> getFactory() {
-        return new ItemFactory<Note>() {
+    @Override
+    public String toString() {
+        return getId();
+    }
 
-            @Override
-            public Note build(Note item, List<Tag> tags, List<Note> notes) {
-                throw new RuntimeException("Note factory has no implementation of this method");
-            }
+    public static NoteFactory<Note> getFactory() {
+        return new NoteFactory<Note>() {
 
             @Override
-            public Note build(Note item, List<Tag> tags) {
-                return new Note(item, tags);
+            public Note build(Note note, List<Tag> tags) {
+                return new Note(note, tags);
             }
 
             @Override
-            public Note build(Note item, @NonNull SyncState state) {
-                return new Note(item, state);
+            public Note buildOrphaned(Note note) {
+                SyncState state = new SyncState(SyncState.State.CONFLICTED_UPDATE);
+                return new Note(
+                        note.getId(), note.getCreated(), note.getUpdated(),
+                        note.getNote(), null, note.getTags(), state);
             }
 
             @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/NoteFactory.java b/app/src/main/java/com/bytesforge/linkasanote/data/NoteFactory.java
new file mode 100644
index 0000000..99ff1e8
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/NoteFactory.java
@@ -0,0 +1,9 @@
+package com.bytesforge.linkasanote.data;
+
+import java.util.List;
+
+public interface NoteFactory<T> extends ItemFactory<T> {
+
+    T build(T item, List<Tag> tags);
+    T buildOrphaned(T item);
+}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
index 98bbbfa..a7a2438 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
@@ -21,7 +21,7 @@ public interface DataSource {
         ERROR_LOCAL, // DB error
         ERROR_CLOUD, // Sync error
         ERROR_EXTRA // Any kind of error with additional cleanup operation (Link's Notes)
-    };
+    }
 
     interface Callback {
 
@@ -39,7 +39,9 @@ public interface DataSource {
     Single<Boolean> isConflictedLinks();
     Single<Boolean> isUnsyncedLinks();
     Single<Boolean> autoResolveLinkConflict(@NonNull String linkId);
+    void refreshLinks();
     void refreshLink(@NonNull String linkId);
+    void removeCachedLink(@NonNull String linkId);
 
     void addFavoritesCallback(@NonNull DataSource.Callback callback);
     void removeFavoritesCallback(@NonNull DataSource.Callback callback);
@@ -51,7 +53,9 @@ public interface DataSource {
     Single<Boolean> isConflictedFavorites();
     Single<Boolean> isUnsyncedFavorites();
     Single<Boolean> autoResolveFavoriteConflict(@NonNull String favoriteId);
+    void refreshFavorites();
     void refreshFavorite(@NonNull String favoriteId);
+    void removeCachedFavorite(@NonNull String favoriteId);
 
     void addNotesCallback(@NonNull DataSource.Callback callback);
     void removeNotesCallback(@NonNull DataSource.Callback callback);
@@ -62,7 +66,9 @@ public interface DataSource {
     Observable<ItemState> deleteNote(@NonNull String noteId, boolean syncable);
     Single<Boolean> isConflictedNotes();
     Single<Boolean> isUnsyncedNotes();
+    void refreshNotes();
     void refreshNote(@NonNull String noteId);
+    void removeCachedNote(@NonNull String noteId);
 
     Observable<Tag> getTags();
     Single<Tag> getTag(@NonNull String tagId);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
index 7f5210e..ea0751d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
@@ -4,6 +4,7 @@ import android.database.sqlite.SQLiteConstraintException;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
+import android.util.Log;
 
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Link;
@@ -12,6 +13,7 @@ import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.cloud.CloudDataSource;
 import com.bytesforge.linkasanote.data.source.local.LocalDataSource;
 import com.bytesforge.linkasanote.sync.SyncAdapter;
+import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.CommonUtils;
 
 import java.security.InvalidParameterException;
@@ -128,10 +130,16 @@ public class Repository implements DataSource {
 
     @Override
     public Observable<Link> getLinks() {
-        if (!linkCacheIsDirty && cachedLinks != null) {
+        Log.d(TAG, "getLinks() [" + linkCacheIsDirty + "; cached=" + cachedLinks +  "; dirty=" + dirtyLinks + "]");
+        boolean needRefresh = dirtyLinks != null && !dirtyLinks.isEmpty();
+        if (!linkCacheIsDirty && cachedLinks != null && !needRefresh) {
             return Observable.fromIterable(cachedLinks.values());
         }
-        return getAndCacheLocalLinks();
+        if (needRefresh && !linkCacheIsDirty) {
+            return refreshDirtyAndGetCachedLinks();
+        } else {
+            return getAndCacheLocalLinks();
+        }
     }
 
     private Observable<Link> getAndCacheLocalLinks() {
@@ -139,13 +147,40 @@ public class Repository implements DataSource {
             cachedLinks = new LinkedHashMap<>();
         }
         cachedLinks.clear();
-        return localDataSource.getLinks()
+        if (dirtyLinks == null) {
+            dirtyLinks = new HashSet<>();
+        }
+        dirtyLinks.clear();
+        return localDataSource.getLinks((String[]) null)
                 .doOnComplete(() -> linkCacheIsDirty = false)
                 .doOnNext(link -> {
-                    cachedLinks.put(link.getId(), link);
+                    String linkId = link.getId();
+                    Log.d(TAG, "getAndCacheLocalLinks() -> doOnNext() [" + linkId + "]");
+                    cachedLinks.put(linkId, link);
                 });
     }
 
+    private Observable<Link> refreshDirtyAndGetCachedLinks() {
+        if (cachedLinks == null) {
+            cachedLinks = new LinkedHashMap<>();
+        }
+        if (dirtyLinks == null) {
+            dirtyLinks = new HashSet<>();
+        }
+        final String[] linkIds = dirtyLinks.toArray(new String[dirtyLinks.size()]);
+        Observable<Link> refreshDirtyLinksObservable = localDataSource.getLinks(linkIds)
+                .doOnNext(link -> {
+                    String linkId = link.getId();
+                    Log.d(TAG, "refreshDirtyAndGetCachedLinks() -> doOnNext() [" + linkId + "]");
+                    cachedLinks.put(linkId, link);
+                    dirtyLinks.remove(linkId);
+                })
+                .ignoreElements()
+                .toObservable();
+        return Observable.concat(
+                refreshDirtyLinksObservable, Observable.fromIterable(cachedLinks.values()));
+    }
+
     @Override
     public Single<Link> getLink(@NonNull String linkId) {
         checkNotNull(linkId);
@@ -163,19 +198,28 @@ public class Repository implements DataSource {
         if (cachedLinks == null) {
             cachedLinks = new LinkedHashMap<>();
         }
+        if (dirtyLinks == null) {
+            dirtyLinks = new HashSet<>();
+        }
         return localDataSource.getLink(linkId)
                 .doOnSuccess(link -> {
-                    // NOTE: single item request do not check cacheIsDirty flag
-                    cachedLinks.put(linkId, link);
-                    // NOTE: because the order of the Links is messed up
-                    linkCacheIsDirty = true;
+                    Log.d(TAG, "getAndCacheLocalLink() -> doOnSuccess() [" + linkId + "]");
+                    boolean replaced = cachedLinks.put(linkId, link) != null;
+                    if (replaced) { // if was dirty
+                        dirtyLinks.remove(linkId);
+                    } else {
+                        // NOTE: cache must be reloaded to place new Link to the right place
+                        refreshLinks();
+                    }
                 });
     }
 
     @Nullable
     private Link getCachedLink(@NonNull String linkId) {
         checkNotNull(linkId);
-        if (cachedLinks != null && !cachedLinks.isEmpty()) {
+        if (cachedLinks != null
+                && (dirtyLinks == null || !dirtyLinks.contains(linkId))) {
+            Log.d(TAG, "getCachedLink() [" + linkId + "]");
             return cachedLinks.get(linkId);
         }
         return null;
@@ -194,7 +238,7 @@ public class Repository implements DataSource {
                                 cachedLinks = new LinkedHashMap<>();
                             }
                             // NOTE: new Link has no rowId to bind to RecyclerView and it position is unknown
-                            linkCacheIsDirty = true;
+                            refreshLinks();
                             // Tags
                             if (cachedTags == null) {
                                 cachedTags = new LinkedHashMap<>();
@@ -244,11 +288,11 @@ public class Repository implements DataSource {
         return cloudDataSource.saveLink(linkId)
                 .doOnSuccess(itemState -> {
                     switch (itemState) {
-                        case SAVED: // visibility is not changed
+                        case SAVED:
+                            refreshLink(linkId);
                             break;
                         case CONFLICTED:
-                            // OPTIMIZATION: invalidate only one item
-                            linkCacheIsDirty = true;
+                            refreshLink(linkId);
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud saveLink()");
@@ -280,36 +324,56 @@ public class Repository implements DataSource {
         cachedLinks.clear();
     }
 
-    @Override
-    public Observable<ItemState> deleteLink(
-            @NonNull final String linkId, final boolean syncable, final boolean deleteNotes) {
-        checkNotNull(linkId);
-        // NOTE: it is unnecessary to maintain integrity from this point
+    private Observable<ItemState> getDeleteLinkNotesObservable(
+            @NonNull final String linkId, @NonNull List<Note> notes,
+            final boolean syncable, final boolean deleteNotes) {
         Observable<ItemState> deleteNotesObservable;
         if (deleteNotes) {
-            deleteNotesObservable = localDataSource.getNotes(linkId)
-                    .flatMap(note -> deleteNote(note.getId(), syncable))
-                    .filter(itemState -> itemState == ItemState.ERROR_LOCAL
-                            || itemState == ItemState.ERROR_CLOUD)
-                    .toList()
-                    .toObservable()
-                    .flatMap(itemStates -> {
-                        if (itemStates.size() > 0) {
-                            ItemState itemState = ItemState.ERROR_EXTRA;
-                            notifyLinksDeleteCallbacks(linkId, itemState);
-                            return Observable.just(itemState);
+            // Delete
+            deleteNotesObservable = Observable.fromIterable(notes)
+                    .flatMap(note -> deleteNote(note.getId(), syncable));
+        } else {
+            // Sync
+            deleteNotesObservable = Observable.fromIterable(notes)
+                    .flatMap(note -> {
+                        String noteId = note.getId();
+                        if (note.isDeleted()) {
+                            return deleteNote(noteId, syncable);
+                        } else {
+                            SyncState state = new SyncState(note.getState(), SyncState.State.UNSYNCED);
+                            Note unboundNote = new Note(
+                                    note.getId(), note.getCreated(), note.getUpdated(),
+                                    note.getNote(), null, note.getTags(), state);
+                            return saveNote(unboundNote, syncable);
                         }
-                        return Observable.empty();
-                    })
-                    .onErrorReturn(throwable -> {
-                        CommonUtils.logStackTrace(TAG, throwable);
-                        ItemState itemState = ItemState.ERROR_EXTRA;
-                        notifyLinksDeleteCallbacks(linkId, itemState);
-                        return itemState;
                     });
-        } else {
-            deleteNotesObservable = Observable.empty();
         }
+        return deleteNotesObservable
+                .filter(itemState -> itemState == ItemState.ERROR_LOCAL
+                        || itemState == ItemState.ERROR_CLOUD)
+                .toList()
+                .toObservable()
+                .flatMap(itemStates -> {
+                    if (itemStates.size() > 0) {
+                        ItemState itemState = ItemState.ERROR_EXTRA;
+                        notifyLinksDeleteCallbacks(linkId, itemState);
+                        return Observable.just(itemState);
+                    }
+                    return Observable.empty();
+                })
+                .onErrorReturn(throwable -> {
+                    CommonUtils.logStackTrace(TAG, throwable);
+                    ItemState itemState = ItemState.ERROR_EXTRA;
+                    notifyLinksDeleteCallbacks(linkId, itemState);
+                    return itemState;
+                });
+    }
+
+    @Override
+    public Observable<ItemState> deleteLink(
+            @NonNull final String linkId, final boolean syncable, final boolean deleteNotes) {
+        checkNotNull(linkId);
+        // NOTE: it is unnecessary to maintain integrity from this point
         Observable<ItemState> localDeletionObservable = localDataSource.deleteLink(linkId)
                 .doOnSuccess(itemState -> {
                     switch (itemState) {
@@ -318,10 +382,10 @@ public class Repository implements DataSource {
                             if (cachedLinks == null) {
                                 cachedLinks = new LinkedHashMap<>();
                             }
-                            cachedLinks.remove(linkId);
+                            removeCachedLink(linkId);
                             // NOTE: the Note state can be implicitly changed to unbound
                             // OPTIMIZATION: retrieve the Link's Notes and invalidate it (if !deleteNotes)
-                            noteCacheIsDirty = true;
+                            refreshNotes();
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Local deleteLink()");
@@ -341,8 +405,12 @@ public class Repository implements DataSource {
         } else {
             cloudDeletionObservable = Observable.empty();
         }
-        return Observable.mergeDelayError(deleteNotesObservable, Observable.concat(
-                localDeletionObservable, cloudDeletionObservable));
+        return localDataSource.getNotes(linkId)
+                .toList()
+                .toObservable()
+                .flatMap(notes -> Observable.mergeDelayError(
+                        Observable.concat(localDeletionObservable, cloudDeletionObservable),
+                        getDeleteLinkNotesObservable(linkId, notes, syncable, deleteNotes)));
     }
 
     private Single<ItemState> getCloudDeleteLinkSingle(@NonNull final String linkId) {
@@ -353,7 +421,7 @@ public class Repository implements DataSource {
                         case DELETED: // visibility was not changed
                             break;
                         case CONFLICTED:
-                            linkCacheIsDirty = true; // need to be shown again
+                            refreshLinks(); // need to be shown again
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud deleteLink()");
@@ -385,25 +453,30 @@ public class Repository implements DataSource {
         checkNotNull(linkId);
         return localDataSource.autoResolveLinkConflict(linkId)
                 .doOnSuccess(success -> {
-                    if (success) linkCacheIsDirty = true; // OPTIMIZATION: reload the only one item
+                    if (success) refreshLink(linkId);
                 });
     }
 
+    @Override
     public void refreshLinks() {
+        Log.d(TAG, "refreshLinks()");
         linkCacheIsDirty = true;
     }
 
     @Override
     public void refreshLink(@NonNull String linkId) {
         checkNotNull(linkId);
+        Log.d(TAG, "refreshLink() [" + linkId + "]");
         if (dirtyLinks == null) {
             dirtyLinks = new HashSet<>();
         }
         dirtyLinks.add(linkId);
     }
 
-    public void deleteCachedLink(@NonNull String linkId) {
+    @Override
+    public void removeCachedLink(@NonNull String linkId) {
         checkNotNull(linkId);
+        Log.d(TAG, "removeCachedLink() [" + linkId + "]");
         if (cachedLinks == null) {
             cachedLinks = new LinkedHashMap<>();
         }
@@ -453,10 +526,16 @@ public class Repository implements DataSource {
 
     @Override
     public Observable<Favorite> getFavorites() {
-        if (!favoriteCacheIsDirty && cachedFavorites != null) {
+        Log.d(TAG, "getFavorites() [" + favoriteCacheIsDirty + "; cached=" + cachedFavorites +  "; dirty=" + dirtyFavorites + "]");
+        boolean needRefresh = dirtyFavorites != null && !dirtyFavorites.isEmpty();
+        if (!favoriteCacheIsDirty && cachedFavorites != null && !needRefresh) {
             return Observable.fromIterable(cachedFavorites.values());
         }
-        return getAndCacheLocalFavorites();
+        if (needRefresh && !favoriteCacheIsDirty) {
+            return refreshDirtyAndGetCachedFavorites();
+        } else {
+            return getAndCacheLocalFavorites();
+        }
     }
 
     private Observable<Favorite> getAndCacheLocalFavorites() {
@@ -464,13 +543,40 @@ public class Repository implements DataSource {
             cachedFavorites = new LinkedHashMap<>();
         }
         cachedFavorites.clear();
-        return localDataSource.getFavorites()
+        if (dirtyFavorites == null) {
+            dirtyFavorites = new HashSet<>();
+        }
+        dirtyFavorites.clear();
+        return localDataSource.getFavorites((String[]) null)
                 .doOnComplete(() -> favoriteCacheIsDirty = false)
                 .doOnNext(favorite -> {
-                    cachedFavorites.put(favorite.getId(), favorite);
+                    String favoriteId = favorite.getId();
+                    Log.d(TAG, "getAndCacheLocalFavorites() -> doOnNext() [" + favoriteId + "]");
+                    cachedFavorites.put(favoriteId, favorite);
                 });
     }
 
+    private Observable<Favorite> refreshDirtyAndGetCachedFavorites() {
+        if (cachedFavorites == null) {
+            cachedFavorites = new LinkedHashMap<>();
+        }
+        if (dirtyFavorites == null) {
+            dirtyFavorites = new HashSet<>();
+        }
+        final String[] favoriteIds = dirtyFavorites.toArray(new String[dirtyFavorites.size()]);
+        Observable<Favorite> refreshDirtyFavoritesObservable = localDataSource.getFavorites(favoriteIds)
+                .doOnNext(favorite -> {
+                    String favoriteId = favorite.getId();
+                    Log.d(TAG, "refreshDirtyAndGetCachedFavorites() -> doOnNext() [" + favoriteId + "]");
+                    cachedFavorites.put(favoriteId, favorite);
+                    dirtyFavorites.remove(favoriteId);
+                })
+                .ignoreElements()
+                .toObservable();
+        return Observable.concat(
+                refreshDirtyFavoritesObservable, Observable.fromIterable(cachedFavorites.values()));
+    }
+
     @Override
     public Single<Favorite> getFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
@@ -488,19 +594,29 @@ public class Repository implements DataSource {
         if (cachedFavorites == null) {
             cachedFavorites = new LinkedHashMap<>();
         }
+        if (dirtyFavorites == null) {
+            dirtyFavorites = new HashSet<>();
+        }
         return localDataSource.getFavorite(favoriteId)
                 .doOnSuccess(favorite -> {
-                    cachedFavorites.put(favoriteId, favorite);
-                    // NOTE: because order of Favorites is messed up
-                    favoriteCacheIsDirty = true;
+                    Log.d(TAG, "getAndCacheLocalFavorite() -> doOnSuccess() [" + favoriteId + "]");
+                    boolean replaced = cachedFavorites.put(favoriteId, favorite) != null;
+                    if (replaced) { // if was dirty
+                        dirtyFavorites.remove(favoriteId);
+                    } else {
+                        // NOTE: cache must be reloaded to place new Favorite to the right place
+                        refreshFavorites();
+                    }
                 });
     }
 
     @Nullable
-    private Favorite getCachedFavorite(@NonNull String id) {
-        checkNotNull(id);
-        if (cachedFavorites != null && !cachedFavorites.isEmpty()) {
-            return cachedFavorites.get(id);
+    private Favorite getCachedFavorite(@NonNull String favoriteId) {
+        checkNotNull(favoriteId);
+        if (cachedFavorites != null
+                && (dirtyFavorites == null || !dirtyFavorites.contains(favoriteId))) {
+            Log.d(TAG, "getCachedFavorite() [" + favoriteId + "]");
+            return cachedFavorites.get(favoriteId);
         }
         return null;
     }
@@ -518,7 +634,7 @@ public class Repository implements DataSource {
                                 cachedFavorites = new LinkedHashMap<>();
                             }
                             // NOTE: new Favorite has no rowId to bind to RecyclerView and it position is unknown
-                            favoriteCacheIsDirty = true;
+                            refreshFavorites();
                             // Tags
                             if (cachedTags == null) {
                                 cachedTags = new LinkedHashMap<>();
@@ -566,11 +682,11 @@ public class Repository implements DataSource {
         return cloudDataSource.saveFavorite(favoriteId)
                 .doOnSuccess(itemState -> {
                     switch (itemState) {
-                        case SAVED: // visibility is not changed
+                        case SAVED:
+                            refreshFavorite(favoriteId);
                             break;
                         case CONFLICTED:
-                            // OPTIMIZATION: invalidate only one item
-                            favoriteCacheIsDirty = true;
+                            refreshFavorite(favoriteId);
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud saveFavorite()");
@@ -614,7 +730,7 @@ public class Repository implements DataSource {
                             if (cachedFavorites == null) {
                                 cachedFavorites = new LinkedHashMap<>();
                             }
-                            cachedFavorites.remove(favoriteId);
+                            removeCachedFavorite(favoriteId);
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Local deleteFavorite()");
@@ -645,7 +761,7 @@ public class Repository implements DataSource {
                         case DELETED: // visibility was not changed
                             break;
                         case CONFLICTED:
-                            favoriteCacheIsDirty = true; // need to be shown again
+                            refreshFavorites(); // need to be shown again
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud deleteFavorite()");
@@ -677,27 +793,30 @@ public class Repository implements DataSource {
         checkNotNull(favoriteId);
         return localDataSource.autoResolveFavoriteConflict(favoriteId)
                 .doOnSuccess(success -> {
-                    if (success) favoriteCacheIsDirty = true; // OPTIMIZATION: reload the only one item
+                    if (success) refreshFavorite(favoriteId);
                 });
     }
 
-    // TODO: implement cache invalidation for one specific item
+    @Override
     public void refreshFavorites() {
+        Log.d(TAG, "refreshFavorites()");
         favoriteCacheIsDirty = true;
     }
 
     @Override
     public void refreshFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
+        Log.d(TAG, "refreshFavorite() [" + favoriteId + "]");
         if (dirtyFavorites == null) {
             dirtyFavorites = new HashSet<>();
         }
         dirtyFavorites.add(favoriteId);
     }
 
-    // TODO: replace with refreshFavorite
-    public void deleteCachedFavorite(@NonNull String favoriteId) {
+    @Override
+    public void removeCachedFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
+        Log.d(TAG, "removeCachedFavorite() [" + favoriteId + "]");
         if (cachedFavorites == null) {
             cachedFavorites = new LinkedHashMap<>();
         }
@@ -747,10 +866,16 @@ public class Repository implements DataSource {
 
     @Override
     public Observable<Note> getNotes() {
-        if (!noteCacheIsDirty && cachedNotes != null) {
+        Log.d(TAG, "getNotes() [" + noteCacheIsDirty + "; cached=" + cachedNotes +  "; dirty=" + dirtyNotes + "]");
+        boolean needRefresh = dirtyNotes != null && !dirtyNotes.isEmpty();
+        if (!noteCacheIsDirty && cachedNotes != null && !needRefresh) {
             return Observable.fromIterable(cachedNotes.values());
         }
-        return getAndCacheLocalNotes();
+        if (needRefresh && !noteCacheIsDirty) {
+            return refreshDirtyAndGetCachedNotes();
+        } else {
+            return getAndCacheLocalNotes();
+        }
     }
 
     private Observable<Note> getAndCacheLocalNotes() {
@@ -758,13 +883,40 @@ public class Repository implements DataSource {
             cachedNotes = new LinkedHashMap<>();
         }
         cachedNotes.clear();
-        return localDataSource.getNotes()
+        if (dirtyNotes == null) {
+            dirtyNotes = new HashSet<>();
+        }
+        dirtyNotes.clear();
+        return localDataSource.getNotes((String[]) null)
                 .doOnComplete(() -> noteCacheIsDirty = false)
                 .doOnNext(note -> {
-                    cachedNotes.put(note.getId(), note);
+                    String noteId = note.getId();
+                    Log.d(TAG, "getAndCacheLocalNotes() -> doOnNext() [" + noteId + "]");
+                    cachedNotes.put(noteId, note);
                 });
     }
 
+    private Observable<Note> refreshDirtyAndGetCachedNotes() {
+        if (cachedNotes == null) {
+            cachedNotes = new LinkedHashMap<>();
+        }
+        if (dirtyNotes == null) {
+            dirtyNotes = new HashSet<>();
+        }
+        final String[] noteIds = dirtyNotes.toArray(new String[dirtyNotes.size()]);
+        Observable<Note> refreshDirtyNotesObservable = localDataSource.getNotes(noteIds)
+                .doOnNext(note -> {
+                    String noteId = note.getId();
+                    Log.d(TAG, "refreshDirtyAndGetCachedNotes() -> doOnNext() [" + noteId + "]");
+                    cachedNotes.put(noteId, note);
+                    dirtyNotes.remove(noteId);
+                })
+                .ignoreElements()
+                .toObservable();
+        return Observable.concat(
+                refreshDirtyNotesObservable, Observable.fromIterable(cachedNotes.values()));
+    }
+
     @Override
     public Single<Note> getNote(@NonNull String noteId) {
         checkNotNull(noteId);
@@ -782,19 +934,29 @@ public class Repository implements DataSource {
         if (cachedNotes == null) {
             cachedNotes = new LinkedHashMap<>();
         }
+        if (dirtyNotes == null) {
+            dirtyNotes = new HashSet<>();
+        }
         return localDataSource.getNote(noteId)
                 .doOnSuccess(note -> {
-                    cachedNotes.put(noteId, note);
-                    // NOTE: because order of Notes is messed up
-                    noteCacheIsDirty = true;
+                    Log.d(TAG, "getAndCacheLocalNote() -> doOnSuccess() [" + noteId + "]");
+                    boolean replaced = cachedNotes.put(noteId, note) != null;
+                    if (replaced) { // if was dirty
+                        dirtyNotes.remove(noteId);
+                    } else {
+                        // NOTE: cache must be reloaded to place new Note to the right place
+                        refreshNotes();
+                    }
                 });
     }
 
     @Nullable
-    private Note getCachedNote(@NonNull String id) {
-        checkNotNull(id);
-        if (cachedNotes != null && !cachedNotes.isEmpty()) {
-            return cachedNotes.get(id);
+    private Note getCachedNote(@NonNull String noteId) {
+        checkNotNull(noteId);
+        if (cachedNotes != null
+                && (dirtyNotes == null || !dirtyNotes.contains(noteId))) {
+            Log.d(TAG, "getCachedNote() [" + noteId + "]");
+            return cachedNotes.get(noteId);
         }
         return null;
     }
@@ -812,7 +974,7 @@ public class Repository implements DataSource {
                                 cachedNotes = new LinkedHashMap<>();
                             }
                             // NOTE: new Note has no rowId to bind to RecyclerView and it position is unknown
-                            noteCacheIsDirty = true;
+                            refreshNotes();
                             // Tags
                             if (cachedTags == null) {
                                 cachedTags = new LinkedHashMap<>();
@@ -850,11 +1012,13 @@ public class Repository implements DataSource {
         return cloudDataSource.saveNote(noteId)
                 .doOnSuccess(itemState -> {
                     switch (itemState) {
-                        case SAVED: // visibility is not changed
+                        case SAVED:
+                            refreshNote(noteId);
+                            // NOTE: let the presenter to update related state
                             break;
                         case CONFLICTED:
-                            // OPTIMIZATION: invalidate only one item
-                            noteCacheIsDirty = true;
+                            refreshNote(noteId);
+                            // NOTE: let the presenter to update related state
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud saveNote()");
@@ -896,9 +1060,9 @@ public class Repository implements DataSource {
                             if (cachedNotes == null) {
                                 cachedNotes = new LinkedHashMap<>();
                             }
-                            cachedNotes.remove(noteId);
+                            removeCachedNote(noteId);
                             // OPTIMIZATION: retrieve the Link the Note was bound and invalidate it
-                            linkCacheIsDirty = true;
+                            refreshLinks();
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Local deleteNote()");
@@ -929,7 +1093,7 @@ public class Repository implements DataSource {
                         case DELETED: // visibility was not changed
                             break;
                         case CONFLICTED:
-                            noteCacheIsDirty = true; // need to be shown again
+                            refreshNotes(); // need to be shown again
                             break;
                         default:
                             throw new IllegalStateException("Unexpected state came from Cloud deleteNote()");
@@ -956,21 +1120,26 @@ public class Repository implements DataSource {
         return localDataSource.isUnsyncedNotes();
     }
 
+    @Override
     public void refreshNotes() {
+        Log.d(TAG, "refreshNotes()");
         noteCacheIsDirty = true;
     }
 
     @Override
     public void refreshNote(@NonNull String noteId) {
         checkNotNull(noteId);
+        Log.d(TAG, "refreshNote() [" + noteId + "]");
         if (dirtyNotes == null) {
             dirtyNotes = new HashSet<>();
         }
         dirtyNotes.add(noteId);
     }
 
-    public void deleteCachedNote(@NonNull String noteId) {
+    @Override
+    public void removeCachedNote(@NonNull String noteId) {
         checkNotNull(noteId);
+        Log.d(TAG, "removeCachedNote() [" + noteId + "]");
         if (cachedNotes == null) {
             cachedNotes = new LinkedHashMap<>();
         }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
index af2fe2f..25d205b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
@@ -5,9 +5,11 @@ import android.content.ContentResolver;
 import android.content.Context;
 
 import com.bytesforge.linkasanote.data.Favorite;
-import com.bytesforge.linkasanote.data.ItemFactory;
+import com.bytesforge.linkasanote.data.FavoriteFactory;
 import com.bytesforge.linkasanote.data.Link;
+import com.bytesforge.linkasanote.data.LinkFactory;
 import com.bytesforge.linkasanote.data.Note;
+import com.bytesforge.linkasanote.data.NoteFactory;
 import com.bytesforge.linkasanote.data.source.cloud.CloudDataSource;
 import com.bytesforge.linkasanote.data.source.cloud.CloudItem;
 import com.bytesforge.linkasanote.data.source.local.LocalDataSource;
@@ -38,7 +40,7 @@ public class RepositoryModule {
     public LocalLinks<Link> provideLocalLinks(
             Context context, ContentResolver contentResolver,
             LocalTags localTags, LocalNotes<Note> localNotes) {
-        ItemFactory<Link> linkFactory = Link.getFactory();
+        LinkFactory<Link> linkFactory = Link.getFactory();
         return new LocalLinks<>(context, contentResolver, localTags, localNotes, linkFactory);
     }
 
@@ -46,7 +48,7 @@ public class RepositoryModule {
     @Singleton
     public CloudItem<Link> provideCloudLinks(
             Context context, AccountManager accountManager, Settings settings) {
-        ItemFactory<Link> linkFactory = Link.getFactory();
+        LinkFactory<Link> linkFactory = Link.getFactory();
         return new CloudItem<>(context, accountManager, settings,
                 Link.CLOUD_DIRECTORY_NAME, Link.SETTING_LAST_SYNCED_ETAG, linkFactory);
     }
@@ -55,7 +57,7 @@ public class RepositoryModule {
     @Singleton
     public LocalFavorites<Favorite> provideLocalFavorites(
             Context context, ContentResolver contentResolver, LocalTags localTags) {
-        ItemFactory<Favorite> favoriteFactory = Favorite.getFactory();
+        FavoriteFactory<Favorite> favoriteFactory = Favorite.getFactory();
         return new LocalFavorites<>(context, contentResolver, localTags, favoriteFactory);
     }
 
@@ -63,7 +65,7 @@ public class RepositoryModule {
     @Singleton
     public CloudItem<Favorite> provideCloudFavorites(
             Context context, AccountManager accountManager, Settings settings) {
-        ItemFactory<Favorite> favoriteFactory = Favorite.getFactory();
+        FavoriteFactory<Favorite> favoriteFactory = Favorite.getFactory();
         return new CloudItem<>(context, accountManager, settings,
                 Favorite.CLOUD_DIRECTORY_NAME, Favorite.SETTING_LAST_SYNCED_ETAG, favoriteFactory);
     }
@@ -72,15 +74,15 @@ public class RepositoryModule {
     @Singleton
     public LocalNotes<Note> provideLocalNotes(
             Context context, ContentResolver contentResolver, LocalTags localTags) {
-        ItemFactory<Note> noteFactory = Note.getFactory();
-        return new LocalNotes<>(context, contentResolver, localTags, noteFactory);
+        NoteFactory<Note> noteFactory = Note.getFactory();
+        return new LocalNotes<>(contentResolver, localTags, noteFactory);
     }
 
     @Provides
     @Singleton
     public CloudItem<Note> provideCloudNotes(
             Context context, AccountManager accountManager, Settings settings) {
-        ItemFactory<Note> noteFactory = Note.getFactory();
+        NoteFactory<Note> noteFactory = Note.getFactory();
         return new CloudItem<>(context, accountManager, settings,
                 Note.CLOUD_DIRECTORY_NAME, Note.SETTING_LAST_SYNCED_ETAG, noteFactory);
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudItem.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudItem.java
index bbae9f7..f6b7eff 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudItem.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudItem.java
@@ -27,10 +27,8 @@ import org.json.JSONObject;
 
 import java.io.File;
 import java.io.IOException;
-import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
-import java.util.stream.Collectors;
 
 import io.reactivex.Single;
 
@@ -59,6 +57,11 @@ public class CloudItem<T extends Item> {
         this.factory = factory;
     }
 
+    private boolean isOnline() {
+        // NOTE: settings.isOnline is set by receiver, this class must not depend on it
+        return CloudUtils.isApplicationConnected(context);
+    }
+
     public Single<RemoteOperationResult> upload(@NonNull final T item) {
         return upload(item, null);
     }
@@ -68,7 +71,7 @@ public class CloudItem<T extends Item> {
         checkNotNull(item);
 
         return Single.fromCallable(() -> {
-            if (!CloudUtils.isApplicationConnected(context)) return null;
+            if (!isOnline()) return null;
 
             OwnCloudClient currentOcClient = ocClient;
             if (currentOcClient == null) {
@@ -109,7 +112,7 @@ public class CloudItem<T extends Item> {
             @NonNull final String itemId, final OwnCloudClient ocClient) {
         checkNotNull(itemId);
         return Single.fromCallable(() -> {
-            if (!CloudUtils.isApplicationConnected(context)) return null;
+            if (!isOnline()) return null;
 
             OwnCloudClient currentOcClient = ocClient;
             if (currentOcClient == null) {
@@ -126,19 +129,17 @@ public class CloudItem<T extends Item> {
             RemoteOperationResult result = operation.execute(currentOcClient);
             if (result.isSuccess()) {
                 File localFile = new File(localPath);
-                List<String> jsonStringList = null;
+                String jsonString = null;
                 try {
-                    jsonStringList = Files.readLines(localFile, Charsets.UTF_8);
+                    jsonString = Files.toString(localFile, Charsets.UTF_8);
                 } catch (IOException e) {
                     Log.e(TAG, "Cannot read the file downloaded [" + localPath + "]");
                 }
                 if (!localFile.delete()) {
                     Log.e(TAG, "Item file was not deleted [" + localFile.getName() + "]");
                 }
-                if (jsonStringList == null) return null;
+                if (jsonString == null) return null;
 
-                String jsonString = jsonStringList.stream().map(Object::toString)
-                        .collect(Collectors.joining());
                 SyncState state = new SyncState(operation.getEtag(), SyncState.State.SYNCED);
                 T item = factory.from(jsonString, state);
                 if (item == null || item.isEmpty() || !itemId.equals(item.getId())) {
@@ -161,7 +162,7 @@ public class CloudItem<T extends Item> {
             @NonNull final String itemId, final OwnCloudClient ocClient) {
         checkNotNull(itemId);
         return Single.fromCallable(() -> {
-            if (!CloudUtils.isApplicationConnected(context)) return null;
+            if (!isOnline()) return null;
 
             OwnCloudClient currentOcClient = ocClient;
             if (currentOcClient == null) {
@@ -189,7 +190,7 @@ public class CloudItem<T extends Item> {
             @NonNull final String itemId, final OwnCloudClient ocClient) {
         checkNotNull(itemId);
         return Single.fromCallable(() -> {
-            if (!CloudUtils.isApplicationConnected(context)) return null;
+            if (!isOnline()) return null;
 
             OwnCloudClient currentOcClient = ocClient;
             if (currentOcClient == null) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
index fd7fc29..f9ccfda 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
@@ -49,6 +49,10 @@ public class LocalDataSource {
         return localLinks.getActive();
     }
 
+    public Observable<Link> getLinks(String[] linkIds) {
+        return localLinks.getActive(linkIds);
+    }
+
     public Single<Link> getLink(@NonNull final String linkId) {
         checkNotNull(linkId);
         return localLinks.get(linkId);
@@ -102,6 +106,10 @@ public class LocalDataSource {
         return localFavorites.getActive();
     }
 
+    public Observable<Favorite> getFavorites(String[] favoriteIds) {
+        return localFavorites.getActive(favoriteIds);
+    }
+
     public Single<Favorite> getFavorite(@NonNull final String favoriteId) {
         checkNotNull(favoriteId);
         return localFavorites.get(favoriteId);
@@ -155,6 +163,10 @@ public class LocalDataSource {
         return localNotes.getActive();
     }
 
+    public Observable<Note> getNotes(String[] noteIds) {
+        return localNotes.getActive(noteIds);
+    }
+
     public Observable<Note> getNotes(@NonNull final String linkId) {
         Uri linkNoteUri = LocalContract.LinkEntry.buildNotesDirUriWith(linkId);
         return localNotes.get(linkNoteUri);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalFavorites.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalFavorites.java
index d53b192..f5174f3 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalFavorites.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalFavorites.java
@@ -7,12 +7,13 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 
+import com.bytesforge.linkasanote.data.FavoriteFactory;
 import com.bytesforge.linkasanote.data.Item;
-import com.bytesforge.linkasanote.data.ItemFactory;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.Provider;
 import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.CommonUtils;
+import com.google.common.collect.ObjectArrays;
 
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -31,11 +32,11 @@ public class LocalFavorites<T extends Item> implements LocalItem<T> {
     private final Context context;
     private final ContentResolver contentResolver;
     private final LocalTags localTags;
-    private final ItemFactory<T> factory;
+    private final FavoriteFactory<T> factory;
 
     public LocalFavorites(
             @NonNull Context context, @NonNull ContentResolver contentResolver,
-            @NonNull LocalTags localTags, @NonNull ItemFactory<T> factory) {
+            @NonNull LocalTags localTags, @NonNull FavoriteFactory<T> factory) {
         this.context = checkNotNull(context);
         this.contentResolver = checkNotNull(contentResolver);
         this.localTags = checkNotNull(localTags);
@@ -58,11 +59,22 @@ public class LocalFavorites<T extends Item> implements LocalItem<T> {
 
     @Override
     public Observable<T> getActive() {
-        final String selection = LocalContract.FavoriteEntry.COLUMN_NAME_DELETED + " = ?" +
+        return getActive(null);
+    }
+
+    @Override
+    public Observable<T> getActive(final String[] favoriteIds) {
+        String selection = LocalContract.FavoriteEntry.COLUMN_NAME_DELETED + " = ?" +
                 " OR " + LocalContract.FavoriteEntry.COLUMN_NAME_CONFLICTED + " = ?";
-        final String[] selectionArgs = {"0", "1"};
+        String[] selectionArgs = {"0", "1"};
         final String sortOrder = LocalContract.FavoriteEntry.COLUMN_NAME_NAME + " ASC";
 
+        int size = favoriteIds == null ? 0 : favoriteIds.length;
+        if (size > 0) {
+            selection = " (" + selection + ") AND " + LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID +
+                    " IN (" + CommonUtils.strRepeat("?", size, ", ") + ")";
+            selectionArgs = ObjectArrays.concat(selectionArgs, favoriteIds, String.class);
+        }
         return get(FAVORITE_URI, selection, selectionArgs, sortOrder);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalItem.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalItem.java
index 64466c6..72b0f82 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalItem.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalItem.java
@@ -11,6 +11,7 @@ public interface LocalItem<T> {
 
     Observable<T> getAll();
     Observable<T> getActive();
+    Observable<T> getActive(String[] linkIds);
     Observable<T> getUnsynced();
     Observable<T> get(final Uri uri);
     Observable<T> get(
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalLinks.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalLinks.java
index bc5aee4..8f00ecd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalLinks.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalLinks.java
@@ -8,12 +8,13 @@ import android.net.Uri;
 import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.data.Item;
-import com.bytesforge.linkasanote.data.ItemFactory;
+import com.bytesforge.linkasanote.data.LinkFactory;
 import com.bytesforge.linkasanote.data.Note;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.Provider;
 import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.CommonUtils;
+import com.google.common.collect.ObjectArrays;
 
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -33,12 +34,12 @@ public class LocalLinks<T extends Item> implements LocalItem<T> {
     private final ContentResolver contentResolver;
     private final LocalTags localTags;
     private final LocalNotes<Note> localNotes;
-    private final ItemFactory<T> factory;
+    private final LinkFactory<T> factory;
 
     public LocalLinks(
             @NonNull Context context, @NonNull ContentResolver contentResolver,
             @NonNull LocalTags localTags, @NonNull LocalNotes<Note> localNotes,
-            @NonNull ItemFactory<T> factory) {
+            @NonNull LinkFactory<T> factory) {
         this.context = checkNotNull(context);
         this.contentResolver = checkNotNull(contentResolver);
         this.localTags = checkNotNull(localTags);
@@ -66,11 +67,22 @@ public class LocalLinks<T extends Item> implements LocalItem<T> {
 
     @Override
     public Observable<T> getActive() {
-        final String selection = LocalContract.LinkEntry.COLUMN_NAME_DELETED + " = ?" +
+        return getActive(null);
+    }
+
+    @Override
+    public Observable<T> getActive(final String[] linkIds) {
+        String selection = LocalContract.LinkEntry.COLUMN_NAME_DELETED + " = ?" +
                 " OR " + LocalContract.LinkEntry.COLUMN_NAME_CONFLICTED + " = ?";
-        final String[] selectionArgs = {"0", "1"};
+        String[] selectionArgs = {"0", "1"};
         final String sortOrder = LocalContract.LinkEntry.COLUMN_NAME_CREATED + " DESC";
 
+        int size = linkIds == null ? 0 : linkIds.length;
+        if (size > 0) {
+            selection = " (" + selection + ") AND " + LocalContract.LinkEntry.COLUMN_NAME_ENTRY_ID +
+                    " IN (" + CommonUtils.strRepeat("?", size, ", ") + ")";
+            selectionArgs = ObjectArrays.concat(selectionArgs, linkIds, String.class);
+        }
         return get(LINK_URI, selection, selectionArgs, sortOrder);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalNotes.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalNotes.java
index 74c3224..879c28e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalNotes.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalNotes.java
@@ -2,17 +2,16 @@ package com.bytesforge.linkasanote.data.source.local;
 
 import android.content.ContentResolver;
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.net.Uri;
 import android.support.annotation.NonNull;
-import android.util.Log;
 
 import com.bytesforge.linkasanote.data.Item;
-import com.bytesforge.linkasanote.data.ItemFactory;
+import com.bytesforge.linkasanote.data.NoteFactory;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.CommonUtils;
+import com.google.common.collect.ObjectArrays;
 
 import java.util.List;
 import java.util.NoSuchElementException;
@@ -28,15 +27,13 @@ public class LocalNotes<T extends Item> implements LocalItem<T> {
 
     private static final Uri NOTE_URI = LocalContract.NoteEntry.buildUri();
 
-    private final Context context;
     private final ContentResolver contentResolver;
     private final LocalTags localTags;
-    private final ItemFactory<T> factory;
+    private final NoteFactory<T> factory;
 
     public LocalNotes(
-            @NonNull Context context, @NonNull ContentResolver contentResolver,
-            @NonNull LocalTags localTags, @NonNull ItemFactory<T> factory) {
-        this.context = checkNotNull(context);
+            @NonNull ContentResolver contentResolver,
+            @NonNull LocalTags localTags, @NonNull NoteFactory<T> factory) {
         this.contentResolver = checkNotNull(contentResolver);
         this.localTags = checkNotNull(localTags);
         this.factory = checkNotNull(factory);
@@ -58,11 +55,22 @@ public class LocalNotes<T extends Item> implements LocalItem<T> {
 
     @Override
     public Observable<T> getActive() {
-        final String selection = LocalContract.NoteEntry.COLUMN_NAME_DELETED + " = ?" +
+        return getActive(null);
+    }
+
+    @Override
+    public Observable<T> getActive(final String[] noteIds) {
+        String selection = LocalContract.NoteEntry.COLUMN_NAME_DELETED + " = ?" +
                 " OR " + LocalContract.NoteEntry.COLUMN_NAME_CONFLICTED + " = ?";
-        final String[] selectionArgs = {"0", "1"};
+        String[] selectionArgs = {"0", "1"};
         final String sortOrder = LocalContract.NoteEntry.COLUMN_NAME_CREATED + " DESC";
 
+        int size = noteIds == null ? 0 : noteIds.length;
+        if (size > 0) {
+            selection = " (" + selection + ") AND " + LocalContract.NoteEntry.COLUMN_NAME_ENTRY_ID +
+                    " IN (" + CommonUtils.strRepeat("?", size, ", ") + ")";
+            selectionArgs = ObjectArrays.concat(selectionArgs, noteIds, String.class);
+        }
         return get(NOTE_URI, selection, selectionArgs, sortOrder);
     }
 
@@ -153,9 +161,9 @@ public class LocalNotes<T extends Item> implements LocalItem<T> {
 
     @Override
     public Single<Boolean> saveDuplicated(final T note) {
-        Log.e(TAG, "saveDuplicated() was called, but it must not be happened");
-        CommonUtils.logStackTrace(TAG, new Throwable());
-        return Single.just(false); // NOTE: just report it is a broken Note
+        // NOTE: foreign key constraint is violated (orphaned Note)
+        return Single.fromCallable(() -> factory.buildOrphaned(note))
+                .flatMap(this::save);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/ClipboardService.java b/app/src/main/java/com/bytesforge/linkasanote/laano/ClipboardService.java
index d13f9c6..6e4705e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/ClipboardService.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/ClipboardService.java
@@ -6,7 +6,6 @@ import android.content.ClipDescription;
 import android.content.ClipboardManager;
 import android.content.Context;
 import android.content.Intent;
-import android.content.res.Resources;
 import android.net.Uri;
 import android.os.Binder;
 import android.os.Handler;
@@ -59,7 +58,6 @@ public class ClipboardService extends Service {
     @Inject
     BaseSchedulerProvider schedulerProvider;
 
-    private Resources resources;
     private ClipboardService.Callback callback;
     private CompositeDisposable compositeDisposable;
     private ClipboardManager clipboardManager;
@@ -107,7 +105,6 @@ public class ClipboardService extends Service {
 
         LaanoApplication application = (LaanoApplication) getApplication();
         application.getApplicationComponent().inject(this);
-        resources = getResources();
         compositeDisposable = new CompositeDisposable();
         clipboardManager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
         clipboardManager.addPrimaryClipChangedListener(primaryClipChangedListener);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
index 2558ece..8eecf17 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
@@ -13,9 +13,12 @@ import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.PackageManager;
 import android.databinding.DataBindingUtil;
+import android.net.ConnectivityManager;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.support.annotation.NonNull;
+import android.support.annotation.RequiresApi;
 import android.support.annotation.StringRes;
 import android.support.annotation.VisibleForTesting;
 import android.support.design.widget.AppBarLayout;
@@ -23,7 +26,6 @@ import android.support.design.widget.FloatingActionButton;
 import android.support.design.widget.NavigationView;
 import android.support.design.widget.Snackbar;
 import android.support.design.widget.TabLayout;
-import android.support.test.espresso.IdlingResource;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.view.GravityCompat;
 import android.support.v4.view.ViewPager;
@@ -54,7 +56,6 @@ import com.bytesforge.linkasanote.settings.SettingsActivity;
 import com.bytesforge.linkasanote.sync.SyncNotifications;
 import com.bytesforge.linkasanote.utils.AppBarLayoutOnStateChangeListener;
 import com.bytesforge.linkasanote.utils.CloudUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 
 import java.io.IOException;
 
@@ -96,13 +97,16 @@ public class LaanoActivity extends AppCompatActivity implements
 
     private boolean doubleBackPressed = false;
     private int activeTab;
+    private IntentFilter connectivityIntentFilter;
+    private ConnectivityBroadcastReceiver connectivityBroadcastReceiver;
+    private IntentFilter syncIntentFilter;
     private SyncBroadcastReceiver syncBroadcastReceiver;
     private ActivityLaanoBinding binding;
     private LaanoViewModel viewModel;
 
     @Override
     protected void onStart() {
-        Log.i(TAG, "onStart()");
+
         if (Settings.GLOBAL_CLIPBOARD_MONITOR_ON_START) {
             // NOTE: application context
             startClipboardService();
@@ -112,34 +116,23 @@ public class LaanoActivity extends AppCompatActivity implements
 
     @Override
     protected void onResume() {
-        Log.i(TAG, "onResume()");
         super.onResume();
 
         notifyTabSelected(activeTab);
         laanoUiManager.updateTitle(activeTab);
-
-        IntentFilter syncIntentFilter = new IntentFilter();
-        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC);
-        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_LINKS);
-        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_FAVORITES);
-        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_NOTES);
-        syncBroadcastReceiver = new SyncBroadcastReceiver();
+        registerReceiver(connectivityBroadcastReceiver, connectivityIntentFilter);
         registerReceiver(syncBroadcastReceiver, syncIntentFilter);
     }
 
     @Override
     protected void onPause() {
-        Log.i(TAG, "onPause()");
-        if (syncBroadcastReceiver != null) {
-            unregisterReceiver(syncBroadcastReceiver);
-            syncBroadcastReceiver = null;
-        }
+        unregisterReceiver(syncBroadcastReceiver);
+        unregisterReceiver(connectivityBroadcastReceiver);
         super.onPause();
     }
 
     @Override
     protected void onDestroy() {
-        Log.i(TAG, "onDestroy()");
         if (!isChangingConfigurations()) {
             stopClipboardService();
         }
@@ -148,7 +141,6 @@ public class LaanoActivity extends AppCompatActivity implements
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        Log.i(TAG, "onCreate()");
         super.onCreate(savedInstanceState);
         if (savedInstanceState == null) {
             applyInstanceState(getDefaultInstanceState());
@@ -199,6 +191,17 @@ public class LaanoActivity extends AppCompatActivity implements
         favoritesPresenter.updateTabNormalState();
         notesPresenter.updateTabNormalState();
         updateDefaultAccount();
+        // Connectivity receiver
+        connectivityIntentFilter = new IntentFilter();
+        connectivityIntentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
+        connectivityBroadcastReceiver = new ConnectivityBroadcastReceiver();
+        // Sync receiver
+        syncIntentFilter = new IntentFilter();
+        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC);
+        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_LINKS);
+        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_FAVORITES);
+        syncIntentFilter.addAction(SyncNotifications.ACTION_SYNC_NOTES);
+        syncBroadcastReceiver = new SyncBroadcastReceiver();
     }
 
     private void startClipboardService() {
@@ -298,12 +301,17 @@ public class LaanoActivity extends AppCompatActivity implements
     public void checkGetAccountsPermissionAndLaunchActivity() {
         if (ActivityCompat.checkSelfPermission(this, PERMISSION_GET_ACCOUNTS)
                 != PackageManager.PERMISSION_GRANTED) {
-            requestGetAccountsPermission();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                requestGetAccountsPermission();
+            } else {
+                showPermissionDeniedSnackbar();
+            }
         } else {
             startManageAccountsActivity();
         }
     }
 
+    @RequiresApi(api = Build.VERSION_CODES.M)
     private void requestGetAccountsPermission() {
         if (ActivityCompat.shouldShowRequestPermissionRationale(this, PERMISSION_GET_ACCOUNTS)) {
             Snackbar.make(binding.laanoViewPager,
@@ -363,7 +371,15 @@ public class LaanoActivity extends AppCompatActivity implements
         }
     }
 
-    // Broadcast Receiver
+    // Broadcast Receivers
+
+    private class ConnectivityBroadcastReceiver extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            settings.setOnline(CloudUtils.isApplicationConnected(context));
+        }
+    }
 
     private class SyncBroadcastReceiver extends BroadcastReceiver {
 
@@ -371,7 +387,7 @@ public class LaanoActivity extends AppCompatActivity implements
         public void onReceive(Context context, Intent intent) {
             String action = intent.getAction();
             int status = intent.getIntExtra(SyncNotifications.EXTRA_STATUS, -1);
-            String id = intent.getStringExtra(SyncNotifications.EXTRA_ID);
+            //String id = intent.getStringExtra(SyncNotifications.EXTRA_ID);
 
             if (action.equals(SyncNotifications.ACTION_SYNC)) {
                 switch (status) {
@@ -533,7 +549,7 @@ public class LaanoActivity extends AppCompatActivity implements
                             checkGetAccountsPermissionAndLaunchActivity();
                             break;
                         case R.id.sync_menu_item:
-                            if (!CloudUtils.isApplicationConnected(this)) {
+                            if (!settings.isOnline()) {
                                 showApplicationOfflineSnackbar();
                             } else {
                                 triggerSync();
@@ -640,9 +656,4 @@ public class LaanoActivity extends AppCompatActivity implements
 
         return adapter.getFragment(position);
     }
-
-    @VisibleForTesting
-    public IdlingResource getCountingIdlingResource() {
-        return EspressoIdlingResource.getIdlingResource();
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoBindingAdapters.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoBindingAdapters.java
index 3a4fefd..268ee6c 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoBindingAdapters.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoBindingAdapters.java
@@ -4,10 +4,12 @@ import android.databinding.BindingAdapter;
 import android.databinding.BindingConversion;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.v4.graphics.drawable.DrawableCompat;
 import android.text.method.ScrollingMovementMethod;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageButton;
+import android.widget.ImageView;
 import android.widget.TextView;
 
 import com.bytesforge.linkasanote.settings.Settings;
@@ -46,7 +48,7 @@ public class LaanoBindingAdapters {
         else view.setAlpha(Settings.GLOBAL_ICON_ALPHA_DISABLED);
     }
 
-    @BindingAdapter({"app:srcCompat"})
+    @BindingAdapter({"srcCompat"})
     public static void setSrcCompat(ImageButton view, Drawable drawable) {
         view.setImageDrawable(drawable);
     }
@@ -56,4 +58,36 @@ public class LaanoBindingAdapters {
         view.setText(text);
         view.setMovementMethod(new ScrollingMovementMethod());
     }
+
+    // NOTE: for compatibility with the KitKat
+    @BindingAdapter({"drawableStartCompat"})
+    public static void setDrawableStartCompat(TextView view, Drawable drawable) {
+        Drawable[] drawables = view.getCompoundDrawables();
+        view.setCompoundDrawablesWithIntrinsicBounds(drawable, drawables[1], drawables[2], drawables[3]);
+    }
+
+    @BindingAdapter({"drawableTopCompat"})
+    public static void setDrawableTopCompat(TextView view, Drawable drawable) {
+        Drawable[] drawables = view.getCompoundDrawables();
+        view.setCompoundDrawablesWithIntrinsicBounds(drawables[0], drawable, drawables[2], drawables[3]);
+    }
+
+    @BindingAdapter({"drawableEndCompat"})
+    public static void setDrawableEndCompat(TextView view, Drawable drawable) {
+        Drawable[] drawables = view.getCompoundDrawables();
+        view.setCompoundDrawablesWithIntrinsicBounds(drawables[0], drawables[2], drawable, drawables[3]);
+    }
+
+    @BindingAdapter({"drawableBottomCompat"})
+    public static void setDrawableBottomCompat(TextView view, Drawable drawable) {
+        Drawable[] drawables = view.getCompoundDrawables();
+        view.setCompoundDrawablesWithIntrinsicBounds(drawables[0], drawables[2], drawables[3], drawable);
+    }
+
+    @BindingAdapter({"tintCompat"})
+    public static void setTintCompat(ImageView view, int color) {
+        Drawable drawable = view.getDrawable();
+        Drawable wrap = DrawableCompat.wrap(drawable);
+        DrawableCompat.setTint(wrap, color);
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoDrawerHeaderViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoDrawerHeaderViewModel.java
index 66d0036..7cf281c 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoDrawerHeaderViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoDrawerHeaderViewModel.java
@@ -6,10 +6,10 @@ import android.databinding.Bindable;
 import android.databinding.ObservableBoolean;
 import android.databinding.ObservableField;
 import android.os.Bundle;
-import android.support.annotation.ColorRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.StringRes;
+import android.support.v4.content.ContextCompat;
 import android.text.format.DateFormat;
 
 import com.bytesforge.linkasanote.BR;
@@ -44,7 +44,7 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
     private final Context context;
 
     @Bindable
-    public int statusIconTint = 0;
+    public int statusIconTint;
 
     public LaanoDrawerHeaderViewModel(Context context) {
         this.context = checkNotNull(context);
@@ -60,7 +60,6 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
 
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putInt(STATE_STATUS_ICON_TINT, statusIconTint);
         outState.putString(STATE_LAST_SYNCED_TEXT, lastSyncedText.get());
         outState.putString(STATE_STATUS_TEXT, statusText.get());
@@ -73,7 +72,6 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
 
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         statusIconTint = state.getInt(STATE_STATUS_ICON_TINT);
         lastSyncedText.set(state.getString(STATE_LAST_SYNCED_TEXT));
         statusText.set(state.getString(STATE_STATUS_TEXT));
@@ -89,7 +87,8 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
     public Bundle getDefaultInstanceState() {
         Bundle defaultState = new Bundle();
 
-        defaultState.putInt(STATE_STATUS_ICON_TINT, getColor(R.color.sync_state_neutral));
+        defaultState.putInt(STATE_STATUS_ICON_TINT,
+                ContextCompat.getColor(context, R.color.sync_state_neutral));
         defaultState.putString(STATE_LAST_SYNCED_TEXT, null);
         defaultState.putString(STATE_STATUS_TEXT, null);
         defaultState.putString(STATE_USERNAME_TEXT, null);
@@ -101,10 +100,6 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
         return defaultState;
     }
 
-    private int getColor(@ColorRes int color) {
-        return context.getResources().getColor(color, context.getTheme());
-    }
-
     private String getString(@StringRes int string) {
         return context.getResources().getString(string);
     }
@@ -122,7 +117,6 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
 
     public void showAccount(@NonNull AccountItem accountItem) {
         checkNotNull(accountItem);
-
         usernameText.set(accountItem.getDisplayName());
         accountNameText.set(accountItem.getAccountName());
         appName.set(false);
@@ -134,7 +128,7 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
     public void showSyncStatus(long lastSyncTime, int syncStatus) {
         if (lastSyncTime == 0) {
             lastSyncedText.set(getString(R.string.drawer_header_last_synced_never));
-            statusIconTint = getColor(R.color.sync_state_neutral);
+            statusIconTint = ContextCompat.getColor(context, R.color.sync_state_neutral);
             notifyPropertyChanged(BR.statusIconTint);
             return;
         }
@@ -150,23 +144,23 @@ public class LaanoDrawerHeaderViewModel extends BaseObservable {
         switch (syncStatus) {
             case SyncAdapter.SYNC_STATUS_SYNCED:
                 statusText.set(getString(R.string.drawer_header_status_synced));
-                statusIconTint = getColor(R.color.sync_state_success);
+                statusIconTint = ContextCompat.getColor(context, R.color.sync_state_success);
                 break;
             case SyncAdapter.SYNC_STATUS_UNSYNCED:
                 statusText.set(getString(R.string.drawer_header_status_unsynced));
-                statusIconTint = getColor(R.color.sync_state_neutral);
+                statusIconTint = ContextCompat.getColor(context, R.color.sync_state_neutral);
                 break;
             case SyncAdapter.SYNC_STATUS_ERROR:
                 statusText.set(getString(R.string.drawer_header_status_error));
-                statusIconTint = getColor(R.color.sync_state_error);
+                statusIconTint = ContextCompat.getColor(context, R.color.sync_state_error);
                 break;
             case SyncAdapter.SYNC_STATUS_CONFLICT:
                 statusText.set(getString(R.string.drawer_header_status_conflict));
-                statusIconTint = getColor(R.color.sync_state_conflict);
+                statusIconTint = ContextCompat.getColor(context, R.color.sync_state_conflict);
                 break;
             default:
                 statusText.set(getString(R.string.drawer_header_status_unknown));
-                statusIconTint = getColor(R.color.sync_state_neutral);
+                statusIconTint = ContextCompat.getColor(context, R.color.sync_state_neutral);
         }
         notifyPropertyChanged(BR.statusIconTint);
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
index 8617ed2..66a25dd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoFragmentPagerAdapter.java
@@ -1,13 +1,19 @@
 package com.bytesforge.linkasanote.laano;
 
 import android.content.Context;
+import android.content.res.ColorStateList;
 import android.content.res.Resources;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.design.widget.TabLayout;
+import android.support.graphics.drawable.VectorDrawableCompat;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentPagerAdapter;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.graphics.drawable.DrawableCompat;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
 import android.view.LayoutInflater;
@@ -35,6 +41,7 @@ public class LaanoFragmentPagerAdapter extends FragmentPagerAdapter {
     public static final int STATE_PROBLEM = 2;
 
     private final Context context;
+    private final Resources resources;
     private final LayoutInflater inflater;
     private SparseArray<BaseItemFragment> tabFragments = new SparseArray<>();
     private SparseIntArray tabStates = new SparseIntArray();
@@ -43,6 +50,7 @@ public class LaanoFragmentPagerAdapter extends FragmentPagerAdapter {
         super(fm);
         this.context = checkNotNull(context);
         inflater = LayoutInflater.from(context);
+        resources = context.getResources();
     }
 
     @Override
@@ -86,7 +94,6 @@ public class LaanoFragmentPagerAdapter extends FragmentPagerAdapter {
 
     @Override
     public CharSequence getPageTitle(int position) {
-        Resources resources = context.getResources();
         switch (position) {
             case LINKS_TAB:
                 return resources.getString(R.string.laano_tab_links_title);
@@ -123,15 +130,30 @@ public class LaanoFragmentPagerAdapter extends FragmentPagerAdapter {
     }
 
     public synchronized void updateTab(@NonNull TabLayout.Tab tab, int position, int state) {
+        checkNotNull(tab);
         View tabView = tab.getCustomView();
         if (tabStates.get(position) == state && tabView != null) return;
 
+        TextView tabTitle;
         if (tabView == null) {
             tabView = inflater.inflate(R.layout.tab_laano, (ViewGroup) null);
             tab.setCustomView(tabView);
         }
-        TextView tabTitle = (TextView) tabView.findViewById(android.R.id.text1);
-        tabTitle.setCompoundDrawablesWithIntrinsicBounds(getPageIcon(position, state), 0, 0, 0);
+        tabTitle = (TextView) tabView.findViewById(android.R.id.text1);
+        @DrawableRes int pageIconId = getPageIcon(position, state);
+        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            tabTitle.setCompoundDrawablesWithIntrinsicBounds(pageIconId, 0, 0, 0);
+        } else {
+            ColorStateList colors = ContextCompat.getColorStateList(
+                    context, R.color.tab_icon_tint);
+            Drawable drawable = VectorDrawableCompat.create(
+                    resources, pageIconId, context.getTheme());
+            if (drawable != null) {
+                Drawable drawableCompat = DrawableCompat.wrap(drawable);
+                DrawableCompat.setTintList(drawableCompat, colors);
+                tabTitle.setCompoundDrawablesWithIntrinsicBounds(drawable, null, null, null);
+            }
+        }
         tabStates.put(position, state);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoViewModel.java
index d434368..1a570bd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoViewModel.java
@@ -55,7 +55,6 @@ public class LaanoViewModel extends BaseObservable {
     }
 
     public Bundle getDefaultInstanceState() {
-        Bundle defaultState = new Bundle();
-        return defaultState;
+        return new Bundle();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
index 2f156ec..4fdea7e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
@@ -63,6 +63,6 @@ public interface FavoritesContract {
         int getPosition(String favoriteId);
         void setFilterType(@NonNull FilterType filtering);
         void syncSavedFavorite(@NonNull final String favoriteId);
-        void deleteFavorites(ArrayList<String> selectedIds);
+        void deleteFavorites(@NonNull ArrayList<String> selectedIds);
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
index d1a7e30..4537d92 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
@@ -197,28 +197,27 @@ public class FavoritesFragment extends BaseItemFragment implements FavoritesCont
         switch (requestCode) {
             case REQUEST_ADD_FAVORITE:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadFavorites(false);
                     //viewModel.showSaveSuccessSnackbar();
                     String favoriteId = data.getStringExtra(AddEditFavoriteFragment.ARGUMENT_FAVORITE_ID);
                     presenter.syncSavedFavorite(favoriteId);
-                    adapter.notifyDataSetChanged();
                 }
                 break;
             case REQUEST_EDIT_FAVORITE:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadFavorites(false);
                     //viewModel.showSaveSuccessSnackbar();
                     String favoriteId = data.getStringExtra(AddEditFavoriteFragment.ARGUMENT_FAVORITE_ID);
                     presenter.syncSavedFavorite(favoriteId);
-                    adapter.notifyDataSetChanged();
                 }
                 break;
             case REQUEST_FAVORITE_CONFLICT_RESOLUTION:
-                adapter.notifyDataSetChanged();
                 presenter.updateTabNormalState();
                 // NOTE: force reload because of conflict resolution is a dialog
                 presenter.loadFavorites(false);
                 if (resultCode == FavoritesConflictResolutionDialog.RESULT_OK) {
                     presenter.updateSyncStatus();
-                    viewModel.showConflictResolutionSuccessfulSnackbar();
+                    //viewModel.showConflictResolutionSuccessfulSnackbar();
                 } else if (resultCode == FavoritesConflictResolutionDialog.RESULT_FAILED){
                     viewModel.showConflictResolutionErrorSnackbar();
                 }
@@ -354,7 +353,7 @@ public class FavoritesFragment extends BaseItemFragment implements FavoritesCont
     @Override
     public void removeFavorite(@NonNull String favoriteId) {
         viewModel.removeSelection(favoriteId);
-        int position = adapter.removeItem(favoriteId);
+        adapter.removeItem(favoriteId);
         selectionChanged(favoriteId);
         viewModel.setListSize(adapter.getItemCount());
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
index cd6b12f..ffb5f43 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
@@ -17,7 +17,6 @@ import com.bytesforge.linkasanote.laano.notes.NotesPresenter;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.sync.SyncAdapter;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.google.common.base.Strings;
 
@@ -105,7 +104,6 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
     }
 
     private void loadFavorites(boolean forceUpdate, final boolean showLoading) {
-        EspressoIdlingResource.increment();
         compositeDisposable.clear();
         if (forceUpdate) {
             repository.refreshFavorites();
@@ -137,9 +135,6 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
                 .toList()
                 .observeOn(schedulerProvider.ui())
                 .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
                     if (showLoading) {
                         viewModel.hideProgressOverlay();
                     }
@@ -267,6 +262,14 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
 
     @Override
     public void syncSavedFavorite(@NonNull final String favoriteId) {
+        boolean sync = settings.isSyncable() && settings.isOnline();
+        if (!sync) {
+            if (settings.isSyncable()) {
+                settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                laanoUiManager.updateSyncStatus();
+            }
+            return;
+        }
         repository.syncSavedFavorite(favoriteId)
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
@@ -275,6 +278,8 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
                     Log.d(TAG, "syncSavedFavorite() -> subscribe(): [" + itemState.name() + "]");
                     switch (itemState) {
                         case CONFLICTED:
+                            updateTabNormalState();
+                            loadFavorites(false);
                             laanoUiManager.showLongToast(R.string.toast_sync_conflict);
                             break;
                         case ERROR_CLOUD:
@@ -282,6 +287,8 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
                             laanoUiManager.showLongToast(R.string.toast_sync_error);
                             break;
                         case SAVED:
+                            updateTabNormalState();
+                            loadFavorites(false);
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                             break;
                     }
@@ -289,11 +296,13 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
     }
 
     @Override
-    public void deleteFavorites(ArrayList<String> selectedIds) {
+    public void deleteFavorites(@NonNull ArrayList<String> selectedIds) {
+        checkNotNull(selectedIds);
+        boolean sync = settings.isSyncable() && settings.isOnline();
         Observable.fromIterable(selectedIds)
                 .flatMap(favoriteId -> {
                     Log.d(TAG, "deleteFavorites(): [" + favoriteId + "]");
-                    return repository.deleteFavorite(favoriteId, settings.isSyncable())
+                    return repository.deleteFavorite(favoriteId, sync)
                             .subscribeOn(schedulerProvider.io())
                             .observeOn(schedulerProvider.ui())
                             .doOnNext(itemState -> {
@@ -310,13 +319,20 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
                         || itemState == DataSource.ItemState.ERROR_LOCAL
                         || itemState == DataSource.ItemState.ERROR_CLOUD)
                 .toList()
-                .doFinally(this::updateSyncStatus)
+                .doFinally(() -> {
+                    if (sync) {
+                        this.updateSyncStatus();
+                    } else if (settings.isSyncable()) {
+                        settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                        laanoUiManager.updateSyncStatus();
+                    }
+                })
                 .subscribe(itemStates -> {
                     Log.d(TAG, "deleteFavorites(): Completed [" + itemStates.toString() + "]");
                     if (itemStates.isEmpty()) {
                         // DELETED or DEFERRED if sync is disabled
                         //viewModel.showDeleteSuccessSnackbar();
-                        if (settings.isSyncable()) {
+                        if (sync) {
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                         }
                     } else if (itemStates.contains(DataSource.ItemState.CONFLICTED)) {
@@ -334,8 +350,11 @@ public final class FavoritesPresenter extends BaseItemPresenter implements
 
     @Override
     public void updateSyncStatus() {
-        if (settings.getSyncStatus() == SyncAdapter.SYNC_STATUS_ERROR) {
-            // NOTE: only SyncAdapter can reset this status
+        int status = settings.getSyncStatus();
+        if (status == SyncAdapter.SYNC_STATUS_ERROR
+                || status == SyncAdapter.SYNC_STATUS_UNSYNCED) {
+            // NOTE: only SyncAdapter can reset these statuses
+            laanoUiManager.updateSyncStatus();
             return;
         }
         repository.getSyncStatus()
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
index 5338f4a..2689aef 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
@@ -1,12 +1,11 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
 import android.content.Context;
-import android.content.res.Resources;
 import android.databinding.Bindable;
 import android.databinding.BindingAdapter;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
-import android.util.SparseBooleanArray;
+import android.support.v4.content.ContextCompat;
 import android.widget.FrameLayout;
 
 import com.bytesforge.linkasanote.BR;
@@ -23,22 +22,17 @@ public class FavoritesViewModel extends BaseItemViewModel implements FavoritesCo
     public static final String FILTER_PREFIX = "@";
 
     private Context context;
-    private Resources resources;
-
-    private SparseBooleanArray selectedIds;
-    private String searchText;
 
     public enum SnackbarId {
         DATABASE_ERROR,
         CONFLICT_RESOLUTION_SUCCESSFUL, CONFLICT_RESOLUTION_ERROR,
-        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_SUCCESS};
+        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_SUCCESS}
 
     @Bindable
     public SnackbarId snackbarId;
 
     public FavoritesViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
-        resources = context.getResources();
     }
 
     @BindingAdapter({"snackbarId"})
@@ -98,12 +92,12 @@ public class FavoritesViewModel extends BaseItemViewModel implements FavoritesCo
 
     public int getFavoriteBackground(String favoriteId, boolean conflicted, boolean changed) {
         if (conflicted) {
-            return resources.getColor(R.color.item_conflicted, context.getTheme());
+            return ContextCompat.getColor(context, R.color.item_conflicted);
         }
         if (isSelected(favoriteId) && !isActionMode()) {
-            return resources.getColor(R.color.item_favorite_selected, context.getTheme());
+            return ContextCompat.getColor(context, R.color.item_favorite_selected);
         }
-        return resources.getColor(android.R.color.transparent, context.getTheme());
+        return ContextCompat.getColor(context, android.R.color.transparent);
     }
 
     // Snackbar
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteActivity.java
index 75a67e5..918098f 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteActivity.java
@@ -3,8 +3,6 @@ package com.bytesforge.linkasanote.laano.favorites.addeditfavorite;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.support.test.espresso.IdlingResource;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 
@@ -12,7 +10,6 @@ import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.ActivityAddEditFavoriteBinding;
 import com.bytesforge.linkasanote.utils.ActivityUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 
 import javax.inject.Inject;
 
@@ -63,9 +60,4 @@ public class AddEditFavoriteActivity extends AppCompatActivity {
         onBackPressed();
         return true;
     }
-
-    @VisibleForTesting
-    public IdlingResource getCountingIdlingResource() {
-        return EspressoIdlingResource.getIdlingResource();
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteFragment.java
index 5df86d3..f020ee6 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteFragment.java
@@ -6,7 +6,6 @@ import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.ServiceConnection;
-import android.content.res.Resources;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.os.IBinder;
@@ -51,7 +50,6 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
     public static final String ARGUMENT_FAVORITE_ID = "FAVORITE_ID";
 
     private Context context;
-    private Resources resources;
     private AddEditFavoriteContract.Presenter presenter;
     private AddEditFavoriteContract.ViewModel viewModel;
     private FragmentAddEditFavoriteBinding binding;
@@ -129,7 +127,6 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         context = getActivity();
-        resources = context.getResources();
         setHasOptionsMenu(true);
     }
 
@@ -280,8 +277,8 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
                 StringBuilder filteredStringBuilder = new StringBuilder();
                 for (int i = start; i < end; i++) {
                     char currentChar = source.charAt(i);
-                    boolean isSpaceChar = Character.isSpaceChar(currentChar);
-                    if (Character.isLetterOrDigit(currentChar) || isSpaceChar) {
+                    boolean spaceChar = Character.isSpaceChar(currentChar);
+                    if (Character.isLetterOrDigit(currentChar) || spaceChar) {
                         filteredStringBuilder.append(currentChar);
                         binding.favoriteTagsLayout.setError(null);
                     } else {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoritePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoritePresenter.java
index febe7b8..7947e34 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoritePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoritePresenter.java
@@ -11,7 +11,6 @@ import com.bytesforge.linkasanote.laano.ClipboardService;
 import com.bytesforge.linkasanote.laano.favorites.FavoriteId;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.tokenautocomplete.TokenCompleteTextView;
 
@@ -80,7 +79,6 @@ public final class AddEditFavoritePresenter implements
 
     @Override
     public void loadTags() {
-        EspressoIdlingResource.increment();
         tagsDisposable.clear(); // stop previous requests
 
         Disposable disposable = repository.getTags()
@@ -88,11 +86,6 @@ public final class AddEditFavoritePresenter implements
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
                 .doOnError(throwable -> view.swapTagsCompletionViewItems(new ArrayList<>()))
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe((tags, throwable) -> {
                     if (tags != null) view.swapTagsCompletionViewItems(tags);
                 });
@@ -109,17 +102,11 @@ public final class AddEditFavoritePresenter implements
         if (favoriteId == null) {
             throw new RuntimeException("populateFavorite() was called but favoriteId is null");
         }
-        EspressoIdlingResource.increment();
         favoriteDisposable.clear();
 
         Disposable disposable = repository.getFavorite(favoriteId)
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe(viewModel::populateFavorite, throwable -> {
                     favoriteId = null;
                     viewModel.showFavoriteNotFoundSnackbar();
@@ -161,6 +148,7 @@ public final class AddEditFavoritePresenter implements
                 .subscribe(itemState -> {
                     switch (itemState) {
                         case DEFERRED:
+                            repository.refreshFavorites();
                             view.finishActivity(favoriteId);
                             break;
                     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteViewModel.java
index 412274f..3afbdae 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/addeditfavorite/AddEditFavoriteViewModel.java
@@ -40,7 +40,8 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     private Context context;
     private AddEditFavoriteContract.Presenter presenter;
 
-    public enum SnackbarId {DATABASE_ERROR, FAVORITE_EMPTY, FAVORITE_NOT_FOUND};
+    public enum SnackbarId {
+        DATABASE_ERROR, FAVORITE_EMPTY, FAVORITE_NOT_FOUND}
 
     @Bindable
     public SnackbarId snackbarId;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionDialog.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionDialog.java
index 8f1c904..855a7a5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionDialog.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionDialog.java
@@ -74,7 +74,6 @@ public class FavoritesConflictResolutionDialog extends DialogFragment implements
 
     public static FavoritesConflictResolutionDialog newInstance(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
-
         Bundle args = new Bundle();
         args.putString(ARGUMENT_FAVORITE_ID, favoriteId);
         FavoritesConflictResolutionDialog dialog = new FavoritesConflictResolutionDialog();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionPresenter.java
index 0c4edcc..2be44c5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionPresenter.java
@@ -163,11 +163,12 @@ public final class FavoritesConflictResolutionPresenter implements
     @Override
     public void onLocalDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         if (viewModel.isStateDuplicated()) {
+            viewModel.showProgressOverlay();
             localFavorites.getMain(viewModel.getLocalName())
                     .subscribeOn(schedulerProvider.computation()) // local
                     .observeOn(schedulerProvider.ui())
+                    .doFinally(viewModel::hideProgressOverlay)
                     .subscribe(
                             favorite -> replaceFavorite(favorite.getId(), favoriteId),
                             throwable -> view.cancelActivity());
@@ -202,9 +203,11 @@ public final class FavoritesConflictResolutionPresenter implements
 
     private void deleteFavorite(@NonNull final String favoriteId) {
         checkNotNull(favoriteId);
+        viewModel.showProgressOverlay();
         deleteFavoriteSingle(favoriteId)
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         view.finishActivity();
@@ -228,7 +231,7 @@ public final class FavoritesConflictResolutionPresenter implements
                 })
                 .doOnSuccess(success -> {
                     if (success) {
-                        repository.deleteCachedFavorite(favoriteId);
+                        repository.removeCachedFavorite(favoriteId);
                         settings.resetFavoriteFilter(favoriteId);
                     }
                 });
@@ -237,7 +240,6 @@ public final class FavoritesConflictResolutionPresenter implements
     @Override
     public void onCloudDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         deleteFavorite(favoriteId);
     }
 
@@ -264,6 +266,7 @@ public final class FavoritesConflictResolutionPresenter implements
                     return success;
                 })
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshFavorites();
@@ -282,6 +285,7 @@ public final class FavoritesConflictResolutionPresenter implements
                 .subscribeOn(schedulerProvider.io())
                 .map(favorite -> localFavorites.save(favorite).blockingGet())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshFavorites();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionViewModel.java
index d8bbbcc..e680728 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/conflictresolution/FavoritesConflictResolutionViewModel.java
@@ -56,7 +56,6 @@ public class FavoritesConflictResolutionViewModel extends BaseObservable impleme
     public final ObservableBoolean buttonsActive = new ObservableBoolean();
 
     private final Resources resources;
-    private FavoritesConflictResolutionContract.Presenter presenter;
 
     public FavoritesConflictResolutionViewModel(Context context) {
         resources = context.getResources();
@@ -83,7 +82,6 @@ public class FavoritesConflictResolutionViewModel extends BaseObservable impleme
     @Override
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putString(STATE_LOCAL_STATE, localState.get());
         outState.putString(STATE_LOCAL_STATUS, localStatus.get());
         outState.putString(STATE_LOCAL_NAME, localName.get());
@@ -106,7 +104,6 @@ public class FavoritesConflictResolutionViewModel extends BaseObservable impleme
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         localState.set(state.getString(STATE_LOCAL_STATE));
         localStatus.set(state.getString(STATE_LOCAL_STATUS));
         localName.set(state.getString(STATE_LOCAL_NAME));
@@ -154,7 +151,6 @@ public class FavoritesConflictResolutionViewModel extends BaseObservable impleme
 
     @Override
     public void setPresenter(@NonNull FavoritesConflictResolutionContract.Presenter presenter) {
-        this.presenter = checkNotNull(presenter);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
index 8af6dd6..32f73f5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
@@ -79,6 +79,7 @@ public interface LinksContract {
         int getPosition(String linkId);
         void setFilterType(@NonNull FilterType filtering);
         void syncSavedLink(@NonNull final String linkId);
+        void syncSavedNote(@NonNull final String linkId, @NonNull final String noteId);
         void deleteLinks(@NonNull ArrayList<String> selectedIds, boolean deleteNotes);
         boolean isFavoriteFilter();
         boolean isNoteFilter();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksFragment.java
index 1c69cdf..19d652b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksFragment.java
@@ -239,24 +239,21 @@ public class LinksFragment extends BaseItemFragment implements LinksContract.Vie
         switch (requestCode) {
             case REQUEST_ADD_LINK:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadLinks(false);
                     //viewModel.showSaveSuccessSnackbar();
                     String linkId = data.getStringExtra(AddEditLinkFragment.ARGUMENT_LINK_ID);
                     presenter.syncSavedLink(linkId);
-                    adapter.notifyDataSetChanged();
                 }
                 break;
             case REQUEST_EDIT_LINK:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadLinks(false);
                     //viewModel.showSaveSuccessSnackbar();
                     String linkId = data.getStringExtra(AddEditLinkFragment.ARGUMENT_LINK_ID);
                     presenter.syncSavedLink(linkId);
-                    // NOTE: the item position will not be changed, but one can be filtered in or out
-                    // OPTIMIZATION: replace the only invalidated items in the cache
-                    adapter.notifyDataSetChanged();
                 }
                 break;
             case REQUEST_LINK_CONFLICT_RESOLUTION:
-                adapter.notifyDataSetChanged();
                 presenter.updateTabNormalState();
                 // NOTE: force reload because of conflict resolution is a dialog
                 presenter.loadLinks(false);
@@ -269,9 +266,10 @@ public class LinksFragment extends BaseItemFragment implements LinksContract.Vie
                 break;
             case REQUEST_ADD_NOTE:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadLinks(false);
                     String linkId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_RELATED_LINK_ID);
-                    adapter.notifyItemChanged(linkId);
-                    presenter.loadLinks(true);
+                    String noteId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_NOTE_ID);
+                    presenter.syncSavedNote(linkId, noteId);
                 }
                 break;
             default:
@@ -423,7 +421,7 @@ public class LinksFragment extends BaseItemFragment implements LinksContract.Vie
     @Override
     public void removeLink(@NonNull String linkId) {
         viewModel.removeSelection(linkId);
-        int position = adapter.removeItem(linkId);
+        adapter.removeItem(linkId);
         selectionChanged(linkId);
         viewModel.setListSize(adapter.getItemCount());
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
index 42f51c9..c77ba43 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
@@ -20,7 +20,6 @@ import com.bytesforge.linkasanote.laano.notes.NotesPresenter;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.sync.SyncAdapter;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.google.common.base.Strings;
 
@@ -114,7 +113,6 @@ public final class LinksPresenter extends BaseItemPresenter implements
     }
 
     private void loadLinks(boolean forceUpdate, final boolean showLoading) {
-        EspressoIdlingResource.increment();
         compositeDisposable.clear();
         if (forceUpdate) {
             repository.refreshLinks();
@@ -135,15 +133,20 @@ public final class LinksPresenter extends BaseItemPresenter implements
                         laanoUiManager.setFilterType(TAB, filterType, favorite.getName());
                         return repository.getLinks();
                     }).doOnError(throwable -> {
-                        CommonUtils.logStackTrace(TAG, throwable);
                         if (throwable instanceof NoSuchElementException) {
                             setDefaultLinksFilterType();
                             favoriteFilter = null;
                             settings.setFavoriteFilter(null);
                         } else {
-                            viewModel.showDatabaseErrorSnackbar();
+                            CommonUtils.logStackTrace(TAG, throwable);
+                        }
+                    }).onErrorResumeNext(throwable -> {
+                        if (throwable instanceof NoSuchElementException) {
+                            return repository.getLinks();
+                        } else {
+                            return Observable.empty();
                         }
-                    }).onErrorResumeNext(repository.getLinks());
+                    });
         } else if (extendedFilter == FilterType.NOTE) {
             loadLinks = repository.getNote(noteFilter)
                     .toObservable()
@@ -153,15 +156,20 @@ public final class LinksPresenter extends BaseItemPresenter implements
                         laanoUiManager.setFilterType(TAB, filterType, note.getNote());
                         return repository.getLinks();
                     }).doOnError(throwable -> {
-                        CommonUtils.logStackTrace(TAG, throwable);
                         if (throwable instanceof NoSuchElementException) {
                             setDefaultLinksFilterType();
                             noteFilter = null;
                             settings.setNoteFilter(null);
                         } else {
-                            viewModel.showDatabaseErrorSnackbar();
+                            CommonUtils.logStackTrace(TAG, throwable);
                         }
-                    }).onErrorResumeNext(repository.getLinks());
+                    }).onErrorResumeNext(throwable -> {
+                        if (throwable instanceof NoSuchElementException) {
+                            return repository.getLinks();
+                        } else {
+                            return Observable.empty();
+                        }
+                    });
         }
         if (loadLinks == null) {
             loadLinks = repository.getLinks();
@@ -212,9 +220,6 @@ public final class LinksPresenter extends BaseItemPresenter implements
                 .toList()
                 .observeOn(schedulerProvider.ui())
                 .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
                     if (showLoading) {
                         viewModel.hideProgressOverlay();
                     }
@@ -363,6 +368,15 @@ public final class LinksPresenter extends BaseItemPresenter implements
 
     @Override
     public void syncSavedLink(@NonNull final String linkId) {
+        checkNotNull(linkId);
+        boolean sync = settings.isSyncable() && settings.isOnline();
+        if (!sync) {
+            if (settings.isSyncable()) {
+                settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                laanoUiManager.updateSyncStatus();
+            }
+            return;
+        }
         repository.syncSavedLink(linkId)
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
@@ -371,6 +385,49 @@ public final class LinksPresenter extends BaseItemPresenter implements
                     Log.d(TAG, "syncSavedLink() -> subscribe(): [" + itemState.name() + "]");
                     switch (itemState) {
                         case CONFLICTED:
+                            updateTabNormalState();
+                            loadLinks(false);
+                            laanoUiManager.showLongToast(R.string.toast_sync_conflict);
+                            break;
+                        case ERROR_CLOUD:
+                            settings.setSyncStatus(SyncAdapter.SYNC_STATUS_ERROR);
+                            laanoUiManager.showLongToast(R.string.toast_sync_error);
+                            break;
+                        case SAVED:
+                            updateTabNormalState();
+                            loadLinks(false);
+                            laanoUiManager.showShortToast(R.string.toast_sync_success);
+                            break;
+                    }
+                }, throwable -> CommonUtils.logStackTrace(TAG, throwable));
+    }
+
+    @Override
+    public void syncSavedNote(@NonNull final String linkId, @NonNull final String noteId) {
+        checkNotNull(linkId);
+        checkNotNull(noteId);
+        // NOTE: repository do not control other Item's cache
+        repository.refreshLink(linkId); // saved
+        boolean sync = settings.isSyncable() && settings.isOnline();
+        if (!sync) {
+            if (settings.isSyncable()) {
+                settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                laanoUiManager.updateSyncStatus();
+            }
+            return;
+        }
+        repository.syncSavedNote(noteId)
+                .subscribeOn(schedulerProvider.io())
+                .observeOn(schedulerProvider.ui())
+                .doFinally(this::updateSyncStatus)
+                .subscribe(itemState -> {
+                    Log.d(TAG, "syncSavedNote() -> subscribe(): [" + itemState.name() + "]");
+                    switch (itemState) {
+                        case CONFLICTED:
+                            updateNotesTabNormalState();
+                            repository.refreshLink(linkId); // synced
+                            // NOTE: it is needless to force loadNotes, because conflicted state is practically impossible (UUID constraint)
+                            loadLinks(false);
                             laanoUiManager.showLongToast(R.string.toast_sync_conflict);
                             break;
                         case ERROR_CLOUD:
@@ -378,6 +435,9 @@ public final class LinksPresenter extends BaseItemPresenter implements
                             laanoUiManager.showLongToast(R.string.toast_sync_error);
                             break;
                         case SAVED:
+                            updateNotesTabNormalState();
+                            repository.refreshLink(linkId); // synced
+                            loadLinks(false);
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                             break;
                     }
@@ -388,10 +448,11 @@ public final class LinksPresenter extends BaseItemPresenter implements
     public void deleteLinks(
             @NonNull final ArrayList<String> selectedIds, final boolean deleteNotes) {
         checkNotNull(selectedIds);
+        boolean sync = settings.isSyncable() && settings.isOnline();
         Observable.fromIterable(selectedIds)
                 .flatMap(linkId -> {
                     Log.d(TAG, "deleteLinks(): [" + linkId + "]");
-                    return repository.deleteLink(linkId, settings.isSyncable(), deleteNotes)
+                    return repository.deleteLink(linkId, sync, deleteNotes)
                             .subscribeOn(schedulerProvider.io())
                             .observeOn(schedulerProvider.ui())
                             .doOnNext(itemState -> {
@@ -409,13 +470,20 @@ public final class LinksPresenter extends BaseItemPresenter implements
                         || itemState == DataSource.ItemState.ERROR_CLOUD
                         || itemState == DataSource.ItemState.ERROR_EXTRA)
                 .toList()
-                .doFinally(this::updateSyncStatus)
+                .doFinally(() -> {
+                    if (sync) {
+                        this.updateSyncStatus();
+                    } else if (settings.isSyncable()) {
+                        settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                        laanoUiManager.updateSyncStatus();
+                    }
+                })
                 .subscribe(itemStates -> {
                     Log.d(TAG, "deleteLinks(): Completed [" + itemStates.toString() + "]");
                     if (itemStates.isEmpty()) {
                         // DELETED or DEFERRED if sync is disabled
                         //viewModel.showDeleteSuccessSnackbar();
-                        if (settings.isSyncable()) {
+                        if (sync) {
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                         }
                     } else if (itemStates.contains(DataSource.ItemState.CONFLICTED)) {
@@ -436,8 +504,11 @@ public final class LinksPresenter extends BaseItemPresenter implements
 
     @Override
     public void updateSyncStatus() {
-        if (settings.getSyncStatus() == SyncAdapter.SYNC_STATUS_ERROR) {
-            // NOTE: only SyncAdapter can reset this status
+        int status = settings.getSyncStatus();
+        if (status == SyncAdapter.SYNC_STATUS_ERROR
+                || status == SyncAdapter.SYNC_STATUS_UNSYNCED) {
+            // NOTE: only SyncAdapter can reset these statuses
+            laanoUiManager.updateSyncStatus();
             return;
         }
         repository.getSyncStatus()
@@ -474,25 +545,8 @@ public final class LinksPresenter extends BaseItemPresenter implements
         FilterType filterType = settings.getFilterType(SETTING_LINKS_FILTER_TYPE);
         String prevFavoriteFilter = this.favoriteFilter;
         this.favoriteFilter = settings.getFavoriteFilter();
-        // NOTE: there may be some concurrency who actually will reset the filter, but it OK
-        if (this.favoriteFilter != null) {
-            repository.getFavorite(this.favoriteFilter)
-                    .subscribeOn(schedulerProvider.computation())
-                    .subscribe(favorite -> { /* OK */ }, throwable -> {
-                        this.favoriteFilter = null;
-                        settings.setFavoriteFilter(null);
-                    });
-        }
         String prevNoteFilter = this.noteFilter;
         this.noteFilter = settings.getNoteFilter();
-        if (this.noteFilter != null) {
-            repository.getNote(this.noteFilter)
-                    .subscribeOn(schedulerProvider.computation())
-                    .subscribe(favorite -> { /* OK */ }, throwable -> {
-                        this.noteFilter = null;
-                        settings.setNoteFilter(null);
-                    });
-        }
         switch (filterType) {
             case ALL:
             case CONFLICTED:
@@ -565,6 +619,19 @@ public final class LinksPresenter extends BaseItemPresenter implements
                         });
     }
 
+    private void updateNotesTabNormalState() {
+        repository.isConflictedNotes()
+                .subscribeOn(schedulerProvider.io())
+                .observeOn(schedulerProvider.ui())
+                .subscribe(
+                        conflicted -> laanoUiManager.setTabNormalState(
+                                LaanoFragmentPagerAdapter.NOTES_TAB, conflicted),
+                        throwable -> {
+                            CommonUtils.logStackTrace(TAG, throwable);
+                            viewModel.showDatabaseErrorSnackbar();
+                        });
+    }
+
     @Override
     public void setShowConflictResolutionWarning(boolean show) {
         settings.setShowConflictResolutionWarning(show);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksViewModel.java
index 7741835..3cadd93 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksViewModel.java
@@ -7,6 +7,7 @@ import android.databinding.BindingAdapter;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
+import android.support.v4.content.ContextCompat;
 import android.widget.FrameLayout;
 
 import com.bytesforge.linkasanote.BR;
@@ -42,7 +43,7 @@ public class LinksViewModel extends BaseItemViewModel implements LinksContract.V
         DATABASE_ERROR,
         CONFLICT_RESOLUTION_SUCCESSFUL, CONFLICT_RESOLUTION_ERROR,
         OPEN_LINK_ERROR,
-        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_EXTRA_ERROR, DELETE_SUCCESS};
+        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_EXTRA_ERROR, DELETE_SUCCESS}
 
     public LinksViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
@@ -137,14 +138,22 @@ public class LinksViewModel extends BaseItemViewModel implements LinksContract.V
         return "(" + counter + ")";
     }
 
+    public String getToggleDescription(String linkId, boolean changed) {
+        if (isVisible(linkId)) {
+            return resources.getString(R.string.card_button_collapse_notes_description);
+        } else {
+            return resources.getString(R.string.card_button_expand_notes_description);
+        }
+    }
+
     public int getLinkBackground(String linkId, boolean conflicted, boolean changed) {
         if (conflicted) {
-            return resources.getColor(R.color.item_conflicted, context.getTheme());
+            return ContextCompat.getColor(context, R.color.item_conflicted);
         }
         if (isSelected(linkId) && !isActionMode()) {
-            return resources.getColor(R.color.item_link_selected, context.getTheme());
+            return ContextCompat.getColor(context, R.color.item_link_selected);
         }
-        return resources.getColor(android.R.color.transparent, context.getTheme());
+        return ContextCompat.getColor(context, android.R.color.transparent);
     }
 
     // Link Visibility
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkActivity.java
index f8e55be..9d88db9 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkActivity.java
@@ -3,8 +3,6 @@ package com.bytesforge.linkasanote.laano.links.addeditlink;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.support.test.espresso.IdlingResource;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 
@@ -12,7 +10,6 @@ import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.ActivityAddEditLinkBinding;
 import com.bytesforge.linkasanote.utils.ActivityUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 
 import javax.inject.Inject;
 
@@ -62,9 +59,4 @@ public class AddEditLinkActivity extends AppCompatActivity {
         onBackPressed();
         return true;
     }
-
-    @VisibleForTesting
-    public IdlingResource getCountingIdlingResource() {
-        return EspressoIdlingResource.getIdlingResource();
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkFragment.java
index abdf5c4..8233374 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkFragment.java
@@ -283,8 +283,8 @@ public class AddEditLinkFragment extends Fragment implements AddEditLinkContract
                 StringBuilder filteredStringBuilder = new StringBuilder();
                 for (int i = start; i < end; i++) {
                     char currentChar = source.charAt(i);
-                    boolean isSpaceChar = Character.isSpaceChar(currentChar);
-                    if (Character.isLetterOrDigit(currentChar) || isSpaceChar) {
+                    boolean spaceChar = Character.isSpaceChar(currentChar);
+                    if (Character.isLetterOrDigit(currentChar) || spaceChar) {
                         filteredStringBuilder.append(currentChar);
                         binding.linkTagsLayout.setError(null);
                     } else {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkPresenter.java
index be9bba3..bdeb862 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkPresenter.java
@@ -11,7 +11,6 @@ import com.bytesforge.linkasanote.laano.ClipboardService;
 import com.bytesforge.linkasanote.laano.links.LinkId;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
 import java.util.ArrayList;
@@ -77,7 +76,6 @@ public final class AddEditLinkPresenter implements AddEditLinkContract.Presenter
 
     @Override
     public void loadTags() {
-        EspressoIdlingResource.increment();
         tagsDisposable.clear(); // stop previous requests
 
         Disposable disposable = repository.getTags()
@@ -85,11 +83,6 @@ public final class AddEditLinkPresenter implements AddEditLinkContract.Presenter
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
                 .doOnError(throwable -> view.swapTagsCompletionViewItems(new ArrayList<>()))
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe((tags, throwable) -> {
                     if (tags != null) view.swapTagsCompletionViewItems(tags);
                 });
@@ -106,17 +99,11 @@ public final class AddEditLinkPresenter implements AddEditLinkContract.Presenter
         if (linkId == null) {
             throw new RuntimeException("populateLink() was called but linkId is null");
         }
-        EspressoIdlingResource.increment();
         linkDisposable.clear();
 
         Disposable disposable = repository.getLink(linkId)
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe(viewModel::populateLink, throwable -> {
                     linkId = null;
                     viewModel.showLinkNotFoundSnackbar();
@@ -161,6 +148,7 @@ public final class AddEditLinkPresenter implements AddEditLinkContract.Presenter
                 .subscribe(itemState -> {
                     switch (itemState) {
                         case DEFERRED:
+                            repository.refreshLinks();
                             view.finishActivity(linkId);
                             break;
                     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkViewModel.java
index 1c8e138..34927fd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/addeditlink/AddEditLinkViewModel.java
@@ -44,7 +44,8 @@ public class AddEditLinkViewModel extends BaseObservable implements
     private Context context;
     private AddEditLinkContract.Presenter presenter;
 
-    public enum SnackbarId {DATABASE_ERROR, LINK_EMPTY, LINK_NOT_FOUND};
+    public enum SnackbarId {
+        DATABASE_ERROR, LINK_EMPTY, LINK_NOT_FOUND}
 
     @Bindable
     public SnackbarId snackbarId;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionPresenter.java
index 7ac0cf8..da2b74c 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionPresenter.java
@@ -110,8 +110,9 @@ public final class LinksConflictResolutionPresenter implements
                     }
                 }, throwable -> {
                     if (throwable instanceof NoSuchElementException) {
-                        repository.refreshLinks(); // NOTE: maybe there is a problem with cache
-                        view.finishActivity(); // NOTE: no item, no problem
+                        // NOTE: maybe there is a problem with cache
+                        repository.refreshLinks();
+                        view.finishActivity(); // no item, no problem
                     } else {
                         viewModel.showDatabaseError();
                         loadCloudLink();
@@ -171,11 +172,12 @@ public final class LinksConflictResolutionPresenter implements
     @Override
     public void onLocalDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         if (viewModel.isStateDuplicated()) {
+            viewModel.showProgressOverlay();
             localLinks.getMain(viewModel.getLocalLink())
                     .subscribeOn(schedulerProvider.computation()) // local
                     .observeOn(schedulerProvider.ui())
+                    .doFinally(viewModel::hideProgressOverlay)
                     .subscribe(
                             link -> replaceLink(link.getId(), linkId),
                             throwable -> view.cancelActivity());
@@ -209,9 +211,12 @@ public final class LinksConflictResolutionPresenter implements
     }
 
     private void deleteLink(@NonNull final String linkId) {
+        checkNotNull(linkId);
+        viewModel.showProgressOverlay();
         deleteLinkSingle(checkNotNull(linkId))
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         view.finishActivity();
@@ -250,7 +255,7 @@ public final class LinksConflictResolutionPresenter implements
                 })
                 .doOnSuccess(success -> {
                     if (success) {
-                        repository.deleteCachedLink(linkId);
+                        repository.removeCachedLink(linkId);
                         settings.resetLinkFilter(linkId);
                     }
                 });
@@ -271,7 +276,7 @@ public final class LinksConflictResolutionPresenter implements
                 })
                 .doOnSuccess(success -> {
                     if (success) {
-                        repository.deleteCachedNote(noteId);
+                        repository.removeCachedNote(noteId);
                         settings.resetNoteFilter(noteId);
                     }
                 });
@@ -280,7 +285,6 @@ public final class LinksConflictResolutionPresenter implements
     @Override
     public void onCloudDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         deleteLink(linkId);
     }
 
@@ -307,6 +311,7 @@ public final class LinksConflictResolutionPresenter implements
                     return success;
                 })
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshLinks();
@@ -325,6 +330,7 @@ public final class LinksConflictResolutionPresenter implements
                 .subscribeOn(schedulerProvider.io())
                 .map(link -> localLinks.save(link).blockingGet())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshLinks();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionViewModel.java
index 8d4f3ff..002198e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/conflictresolution/LinksConflictResolutionViewModel.java
@@ -64,7 +64,6 @@ public class LinksConflictResolutionViewModel extends BaseObservable implements
     public final ObservableBoolean buttonsActive = new ObservableBoolean();
 
     private final Resources resources;
-    private LinksConflictResolutionContract.Presenter presenter;
 
     public LinksConflictResolutionViewModel(Context context) {
         resources = context.getResources();
@@ -91,7 +90,6 @@ public class LinksConflictResolutionViewModel extends BaseObservable implements
     @Override
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putString(STATE_LOCAL_STATE, localState.get());
         outState.putString(STATE_LOCAL_STATUS, localStatus.get());
         outState.putString(STATE_LOCAL_INFO, localInfo.get());
@@ -118,7 +116,6 @@ public class LinksConflictResolutionViewModel extends BaseObservable implements
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         localState.set(state.getString(STATE_LOCAL_STATE));
         localStatus.set(state.getString(STATE_LOCAL_STATUS));
         localInfo.set(state.getString(STATE_LOCAL_INFO));
@@ -174,7 +171,6 @@ public class LinksConflictResolutionViewModel extends BaseObservable implements
 
     @Override
     public void setPresenter(@NonNull LinksConflictResolutionContract.Presenter presenter) {
-        this.presenter = checkNotNull(presenter);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
index 3697018..53d221b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
@@ -67,7 +67,7 @@ public interface NotesContract {
         void onSelectAllClick();
         int getPosition(String noteId);
         void setFilterType(@NonNull FilterType filtering);
-        void syncSavedNote(@NonNull final String noteId);
+        void syncSavedNote(final String linkId, @NonNull final String noteId);
         void deleteNotes(ArrayList<String> selectedIds);
         boolean isFavoriteFilter();
         boolean isLinkFilter();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesFragment.java
index c44b4ad..1c6b288 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesFragment.java
@@ -253,32 +253,29 @@ public class NotesFragment extends BaseItemFragment implements NotesContract.Vie
         switch (requestCode) {
             case REQUEST_ADD_NOTE:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadNotes(false);
                     //viewModel.showSaveSuccessSnackbar();
+                    String linkId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_RELATED_LINK_ID);
                     String noteId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_NOTE_ID);
-                    presenter.syncSavedNote(noteId);
-                    adapter.notifyDataSetChanged();
-                    // TODO: invalidate the cached link
-                    //String linkId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_RELATED_LINK_ID);
+                    presenter.syncSavedNote(linkId, noteId);
                 }
                 break;
             case REQUEST_EDIT_NOTE:
                 if (resultCode == Activity.RESULT_OK) {
+                    presenter.loadNotes(false);
                     //viewModel.showSaveSuccessSnackbar();
+                    String linkId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_RELATED_LINK_ID);
                     String noteId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_NOTE_ID);
-                    presenter.syncSavedNote(noteId);
-                    adapter.notifyDataSetChanged();
-                    // TODO: invalidate the cached link
-                    //String linkId = data.getStringExtra(AddEditNoteFragment.ARGUMENT_RELATED_LINK_ID);
+                    presenter.syncSavedNote(linkId, noteId);
                 }
                 break;
             case REQUEST_NOTE_CONFLICT_RESOLUTION:
-                adapter.notifyDataSetChanged();
                 presenter.updateTabNormalState();
                 // NOTE: force reload because of conflict resolution is a dialog
                 presenter.loadNotes(false);
                 if (resultCode == NotesConflictResolutionDialog.RESULT_OK) {
                     presenter.updateSyncStatus();
-                    viewModel.showConflictResolutionSuccessfulSnackbar();
+                    //viewModel.showConflictResolutionSuccessfulSnackbar();
                 } else if (resultCode == NotesConflictResolutionDialog.RESULT_FAILED){
                     viewModel.showConflictResolutionErrorSnackbar();
                 }
@@ -459,7 +456,7 @@ public class NotesFragment extends BaseItemFragment implements NotesContract.Vie
     @Override
     public void removeNote(@NonNull String noteId) {
         viewModel.removeSelection(noteId);
-        int position = adapter.removeItem(noteId);
+        adapter.removeItem(noteId);
         selectionChanged(noteId);
         viewModel.setListSize(adapter.getItemCount());
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
index a5c1916..d88b1e5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
@@ -17,7 +17,6 @@ import com.bytesforge.linkasanote.laano.links.LinksPresenter;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.sync.SyncAdapter;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.google.common.base.Strings;
 
@@ -111,7 +110,6 @@ public final class NotesPresenter extends BaseItemPresenter implements
     }
 
     private void loadNotes(boolean forceUpdate, final boolean showLoading) {
-        EspressoIdlingResource.increment();
         compositeDisposable.clear();
         if (forceUpdate) {
             repository.refreshNotes();
@@ -132,15 +130,20 @@ public final class NotesPresenter extends BaseItemPresenter implements
                         laanoUiManager.setFilterType(TAB, filterType, favorite.getName());
                         return repository.getNotes();
                     }).doOnError(throwable -> {
-                        CommonUtils.logStackTrace(TAG, throwable);
                         if (throwable instanceof NoSuchElementException) {
                             setDefaultNotesFilterType();
                             favoriteFilter = null;
                             settings.setFavoriteFilter(null);
                         } else {
-                            viewModel.showDatabaseErrorSnackbar();
+                            CommonUtils.logStackTrace(TAG, throwable);
                         }
-                    }).onErrorResumeNext(repository.getNotes());
+                    }).onErrorResumeNext(throwable -> {
+                        if (throwable instanceof NoSuchElementException) {
+                            return repository.getNotes();
+                        } else {
+                            return Observable.empty();
+                        }
+                    });
         } else if (extendedFilter == FilterType.LINK) {
             loadNotes = repository.getLink(linkFilter)
                     .toObservable()
@@ -151,15 +154,20 @@ public final class NotesPresenter extends BaseItemPresenter implements
                         laanoUiManager.setFilterType(TAB, filterType, linkName);
                         return repository.getNotes();
                     }).doOnError(throwable -> {
-                        CommonUtils.logStackTrace(TAG, throwable);
                         if (throwable instanceof NoSuchElementException) {
                             setDefaultNotesFilterType();
                             linkFilter = null;
                             settings.setLinkFilter(null);
                         } else {
-                            viewModel.showDatabaseErrorSnackbar();
+                            CommonUtils.logStackTrace(TAG, throwable);
+                        }
+                    }).onErrorResumeNext(throwable -> {
+                        if (throwable instanceof NoSuchElementException) {
+                            return repository.getNotes();
+                        } else {
+                            return Observable.empty();
                         }
-                    }).onErrorResumeNext(repository.getNotes());
+                    });
         }
         if (loadNotes == null) {
             loadNotes = repository.getNotes();
@@ -201,9 +209,6 @@ public final class NotesPresenter extends BaseItemPresenter implements
                 .toList()
                 .observeOn(schedulerProvider.ui())
                 .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
                     if (showLoading) {
                         viewModel.hideProgressOverlay();
                     }
@@ -225,7 +230,7 @@ public final class NotesPresenter extends BaseItemPresenter implements
         if (viewModel.isActionMode()) {
             onNoteSelected(noteId);
         } else if (isConflicted) {
-            // NOTE: Note doesn't have auto conflict resolution option
+            // NOTE: Note doesn't have AUTO conflict resolution option
             view.showConflictResolution(noteId);
         } else if (Settings.GLOBAL_ITEM_CLICK_SELECT_FILTER) {
             boolean selected = viewModel.toggleSingleSelection(noteId);
@@ -311,7 +316,20 @@ public final class NotesPresenter extends BaseItemPresenter implements
     }
 
     @Override
-    public void syncSavedNote(@NonNull final String noteId) {
+    public void syncSavedNote(final String linkId, @NonNull final String noteId) {
+        checkNotNull(noteId);
+        if (linkId != null) {
+            // NOTE: repository do not control other Item's cache
+            repository.refreshLink(linkId); // saved
+        }
+        boolean sync = settings.isSyncable() && settings.isOnline();
+        if (!sync) {
+            if (settings.isSyncable()) {
+                settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                laanoUiManager.updateSyncStatus();
+            }
+            return;
+        }
         repository.syncSavedNote(noteId)
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
@@ -320,6 +338,11 @@ public final class NotesPresenter extends BaseItemPresenter implements
                     Log.d(TAG, "syncSavedNote() -> subscribe(): [" + itemState.name() + "]");
                     switch (itemState) {
                         case CONFLICTED:
+                            updateTabNormalState();
+                            if (linkId != null) {
+                                repository.refreshLink(linkId); // synced
+                            }
+                            loadNotes(false);
                             laanoUiManager.showLongToast(R.string.toast_sync_conflict);
                             break;
                         case ERROR_CLOUD:
@@ -327,6 +350,11 @@ public final class NotesPresenter extends BaseItemPresenter implements
                             laanoUiManager.showLongToast(R.string.toast_sync_error);
                             break;
                         case SAVED:
+                            updateTabNormalState();
+                            if (linkId != null) {
+                                repository.refreshLink(linkId); // synced
+                            }
+                            loadNotes(false);
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                             break;
                     }
@@ -335,10 +363,11 @@ public final class NotesPresenter extends BaseItemPresenter implements
 
     @Override
     public void deleteNotes(ArrayList<String> selectedIds) {
+        boolean sync = settings.isSyncable() && settings.isOnline();
         Observable.fromIterable(selectedIds)
                 .flatMap(noteId -> {
                     Log.d(TAG, "deleteNotes(): [" + noteId + "]");
-                    return repository.deleteNote(noteId, settings.isSyncable())
+                    return repository.deleteNote(noteId, sync)
                             .subscribeOn(schedulerProvider.io())
                             .observeOn(schedulerProvider.ui())
                             .doOnNext(itemState -> {
@@ -355,13 +384,20 @@ public final class NotesPresenter extends BaseItemPresenter implements
                         || itemState == DataSource.ItemState.ERROR_LOCAL
                         || itemState == DataSource.ItemState.ERROR_CLOUD)
                 .toList()
-                .doFinally(this::updateSyncStatus)
+                .doFinally(() -> {
+                    if (sync) {
+                        this.updateSyncStatus();
+                    } else if (settings.isSyncable()) {
+                        settings.setSyncStatus(SyncAdapter.SYNC_STATUS_UNSYNCED);
+                        laanoUiManager.updateSyncStatus();
+                    }
+                })
                 .subscribe(itemStates -> {
                     Log.d(TAG, "deleteNotes(): Completed [" + itemStates.toString() + "]");
                     if (itemStates.isEmpty()) {
                         // DELETED or DEFERRED if sync is disabled
                         //viewModel.showDeleteSuccessSnackbar();
-                        if (settings.isSyncable()) {
+                        if (sync) {
                             laanoUiManager.showShortToast(R.string.toast_sync_success);
                         }
                     } else if (itemStates.contains(DataSource.ItemState.CONFLICTED)) {
@@ -379,8 +415,11 @@ public final class NotesPresenter extends BaseItemPresenter implements
 
     @Override
     public void updateSyncStatus() {
-        if (settings.getSyncStatus() == SyncAdapter.SYNC_STATUS_ERROR) {
-            // NOTE: only SyncAdapter can reset this status
+        int status = settings.getSyncStatus();
+        if (status == SyncAdapter.SYNC_STATUS_ERROR
+                || status == SyncAdapter.SYNC_STATUS_UNSYNCED) {
+            // NOTE: only SyncAdapter can reset these statuses
+            laanoUiManager.updateSyncStatus();
             return;
         }
         repository.getSyncStatus()
@@ -415,25 +454,8 @@ public final class NotesPresenter extends BaseItemPresenter implements
         String prevLinkFilter = this.linkFilter;
         this.linkFilter = settings.getLinkFilter();
         // NOTE: there may be some concurrency who actually will reset the filter, but it OK
-        // TODO: ensure if the filter is reset in proper places and remove this check
-        if (this.linkFilter != null) {
-            repository.getLink(this.linkFilter)
-                    .subscribeOn(schedulerProvider.computation())
-                    .subscribe(favorite -> { /* OK */ }, throwable -> {
-                        this.linkFilter = null;
-                        settings.setLinkFilter(null);
-                    });
-        }
         String prevFavoriteFilter = this.favoriteFilter;
         this.favoriteFilter = settings.getFavoriteFilter();
-        if (this.favoriteFilter != null) {
-            repository.getFavorite(this.favoriteFilter)
-                    .subscribeOn(schedulerProvider.computation())
-                    .subscribe(favorite -> { /* OK */ }, throwable -> {
-                        this.favoriteFilter = null;
-                        settings.setFavoriteFilter(null);
-                    });
-        }
         switch (filterType) {
             case ALL:
             case CONFLICTED:
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesViewModel.java
index eb67bf9..dd21708 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesViewModel.java
@@ -7,6 +7,7 @@ import android.databinding.BindingAdapter;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.design.widget.Snackbar;
+import android.support.v4.content.ContextCompat;
 import android.widget.FrameLayout;
 
 import com.bytesforge.linkasanote.BR;
@@ -41,7 +42,7 @@ public class NotesViewModel extends BaseItemViewModel implements NotesContract.V
     public enum SnackbarId {
         DATABASE_ERROR,
         CONFLICT_RESOLUTION_SUCCESSFUL, CONFLICT_RESOLUTION_ERROR,
-        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_SUCCESS};
+        CONFLICTED_ERROR, CLOUD_ERROR, SAVE_SUCCESS, DELETE_SUCCESS}
 
     public NotesViewModel(@NonNull Context context) {
         this.context = checkNotNull(context);
@@ -122,24 +123,32 @@ public class NotesViewModel extends BaseItemViewModel implements NotesContract.V
         return FILTER_PREFIX;
     }
 
+    public String getToggleDescription(String noteId, boolean changed) {
+        if (isVisible(noteId)) {
+            return resources.getString(R.string.card_button_collapse_note_description);
+        } else {
+            return resources.getString(R.string.card_button_expand_note_description);
+        }
+    }
+
     public int getNoteBackground(
             String noteId, boolean conflicted, boolean readingMode, boolean changed) {
         if (conflicted) {
-            return resources.getColor(R.color.item_conflicted, context.getTheme());
+            return ContextCompat.getColor(context, R.color.item_conflicted);
         }
         if (isSelected(noteId) && !isActionMode()) {
-            return resources.getColor(readingMode
+            return ContextCompat.getColor(context, readingMode
                     ? R.color.item_note_reading_mode_selected
-                    : R.color.item_note_normal_mode_selected, context.getTheme());
+                    : R.color.item_note_normal_mode_selected);
         }
-        return resources.getColor(android.R.color.transparent, context.getTheme());
+        return ContextCompat.getColor(context, android.R.color.transparent);
     }
 
     public int getNoteNoteBackground(boolean conflicted, boolean changed) {
         if (conflicted) {
-            return resources.getColor(R.color.note_conflicted_background, context.getTheme());
+            return ContextCompat.getColor(context, R.color.note_conflicted_background);
         }
-        return resources.getColor(R.color.note_background, context.getTheme());
+        return ContextCompat.getColor(context, R.color.note_background);
     }
 
     // Visibility
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteActivity.java
index da1211e..1f7faf1 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteActivity.java
@@ -4,8 +4,6 @@ import android.content.Intent;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.support.test.espresso.IdlingResource;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 
@@ -13,7 +11,6 @@ import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.ActivityAddEditNoteBinding;
 import com.bytesforge.linkasanote.utils.ActivityUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 
 import javax.inject.Inject;
 
@@ -63,9 +60,4 @@ public class AddEditNoteActivity extends AppCompatActivity {
         onBackPressed();
         return true;
     }
-
-    @VisibleForTesting
-    public IdlingResource getCountingIdlingResource() {
-        return EspressoIdlingResource.getIdlingResource();
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteFragment.java
index 650dba1..1412ddf 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteFragment.java
@@ -284,8 +284,8 @@ public class AddEditNoteFragment extends Fragment implements AddEditNoteContract
                 StringBuilder filteredStringBuilder = new StringBuilder();
                 for (int i = start; i < end; i++) {
                     char currentChar = source.charAt(i);
-                    boolean isSpaceChar = Character.isSpaceChar(currentChar);
-                    if (Character.isLetterOrDigit(currentChar) || isSpaceChar) {
+                    boolean spaceChar = Character.isSpaceChar(currentChar);
+                    if (Character.isLetterOrDigit(currentChar) || spaceChar) {
                         filteredStringBuilder.append(currentChar);
                         binding.noteTagsLayout.setError(null);
                     } else {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNotePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNotePresenter.java
index a155495..1f1f880 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNotePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNotePresenter.java
@@ -11,7 +11,6 @@ import com.bytesforge.linkasanote.laano.links.LinkId;
 import com.bytesforge.linkasanote.laano.notes.NoteId;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.utils.CommonUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
 import java.util.ArrayList;
@@ -86,8 +85,6 @@ public final class AddEditNotePresenter implements AddEditNoteContract.Presenter
 
     @Override
     public void loadTags() {
-        // TODO: get rid of EspressoIdlingResource in favor of schedulerProvider mock
-        EspressoIdlingResource.increment();
         tagsDisposable.clear(); // stop previous requests
 
         Disposable disposable = repository.getTags()
@@ -95,11 +92,6 @@ public final class AddEditNotePresenter implements AddEditNoteContract.Presenter
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
                 .doOnError(throwable -> view.swapTagsCompletionViewItems(new ArrayList<>()))
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe((tags, throwable) -> {
                     if (tags != null) view.swapTagsCompletionViewItems(tags);
                 });
@@ -116,17 +108,11 @@ public final class AddEditNotePresenter implements AddEditNoteContract.Presenter
         if (noteId == null) {
             throw new RuntimeException("populateNote() was called but noteId is null");
         }
-        EspressoIdlingResource.increment();
         noteDisposable.clear();
 
         Disposable disposable = repository.getNote(noteId)
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe(note -> {
                     viewModel.populateNote(note);
                     linkId = note.getLinkId();
@@ -144,17 +130,10 @@ public final class AddEditNotePresenter implements AddEditNoteContract.Presenter
             return;
         }
         viewModel.showLinkStatusLoading();
-        EspressoIdlingResource.increment();
         linkDisposable.clear();
-
         Disposable disposable = repository.getLink(linkId)
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe(link -> {
                     view.setBoundTitle(isNewNote());
                     viewModel.populateLink(link);
@@ -204,6 +183,10 @@ public final class AddEditNotePresenter implements AddEditNoteContract.Presenter
                 .subscribe(itemState -> {
                     switch (itemState) {
                         case DEFERRED:
+                            repository.refreshNotes();
+                            if (linkId != null) {
+                                repository.refreshLink(linkId);
+                            }
                             view.finishActivity(noteId, linkId);
                             break;
                     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteViewModel.java
index 4aeca79..a8d87d5 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/addeditnote/AddEditNoteViewModel.java
@@ -47,7 +47,8 @@ public class AddEditNoteViewModel extends BaseObservable implements
     private Resources resources;
     private AddEditNoteContract.Presenter presenter;
 
-    public enum SnackbarId {DATABASE_ERROR, NOTE_EMPTY, NOTE_NOT_FOUND};
+    public enum SnackbarId {
+        DATABASE_ERROR, NOTE_EMPTY, NOTE_NOT_FOUND}
 
     @Bindable
     public SnackbarId snackbarId;
@@ -88,6 +89,8 @@ public class AddEditNoteViewModel extends BaseObservable implements
         linkStatus.set(null);
         linkName.set(null);
         linkLink.set(null);
+
+        notifyChange();
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionContract.java
index ffee754..0b9cbe7 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionContract.java
@@ -26,7 +26,7 @@ public interface NotesConflictResolutionContract {
 
         void populateLocalNote(@NonNull Note note);
         boolean isLocalPopulated();
-        void populateCloudNote(@NonNull Note note);
+        void populateCloudNote(@NonNull Note note, boolean orphaned);
         boolean isCloudPopulated();
         void showCloudNotFound();
         void showCloudDownloadError();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionDialog.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionDialog.java
index 5a06dc7..4e6c417 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionDialog.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionDialog.java
@@ -74,7 +74,6 @@ public class NotesConflictResolutionDialog extends DialogFragment implements
 
     public static NotesConflictResolutionDialog newInstance(@NonNull String noteId) {
         checkNotNull(noteId);
-
         Bundle args = new Bundle();
         args.putString(ARGUMENT_NOTE_ID, noteId);
         NotesConflictResolutionDialog dialog = new NotesConflictResolutionDialog();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionPresenter.java
index 6ba9699..4cd5bb7 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionPresenter.java
@@ -2,15 +2,19 @@ package com.bytesforge.linkasanote.laano.notes.conflictresolution;
 
 import android.support.annotation.NonNull;
 import android.util.Log;
+import android.util.Pair;
 
+import com.bytesforge.linkasanote.data.Link;
 import com.bytesforge.linkasanote.data.Note;
 import com.bytesforge.linkasanote.data.source.Repository;
 import com.bytesforge.linkasanote.data.source.cloud.CloudItem;
+import com.bytesforge.linkasanote.data.source.local.LocalLinks;
 import com.bytesforge.linkasanote.data.source.local.LocalNotes;
 import com.bytesforge.linkasanote.laano.notes.NoteId;
 import com.bytesforge.linkasanote.settings.Settings;
 import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.sync.files.JsonFile;
+import com.bytesforge.linkasanote.utils.CommonUtils;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
 import java.util.NoSuchElementException;
@@ -32,6 +36,7 @@ public final class NotesConflictResolutionPresenter implements
     private final Settings settings;
     private final LocalNotes<Note> localNotes;
     private final CloudItem<Note> cloudNotes;
+    private final LocalLinks<Link> localLinks;
     private final NotesConflictResolutionContract.View view;
     private final NotesConflictResolutionContract.ViewModel viewModel;
     private final BaseSchedulerProvider schedulerProvider;
@@ -48,13 +53,14 @@ public final class NotesConflictResolutionPresenter implements
     NotesConflictResolutionPresenter(
             Repository repository, Settings settings,
             LocalNotes<Note> localNotes, CloudItem<Note> cloudNotes,
-            NotesConflictResolutionContract.View view,
+            LocalLinks<Link> localLinks, NotesConflictResolutionContract.View view,
             NotesConflictResolutionContract.ViewModel viewModel,
             BaseSchedulerProvider schedulerProvider, @NoteId String noteId) {
         this.repository = repository;
         this.settings = settings;
         this.localNotes = localNotes;
         this.cloudNotes = cloudNotes;
+        this.localLinks = localLinks;
         this.view = view;
         this.viewModel = viewModel;
         this.schedulerProvider = schedulerProvider;
@@ -124,8 +130,30 @@ public final class NotesConflictResolutionPresenter implements
         cloudDisposable.clear();
         Disposable disposable = cloudNotes.download(noteId)
                 .subscribeOn(schedulerProvider.io())
+                .flatMap(note -> {
+                    String linkId = note.getLinkId();
+                    Single<Boolean> orphanedNoteSingle;
+                    if (linkId != null) {
+                        orphanedNoteSingle = localLinks.getSyncState(linkId)
+                                .flatMap(syncState -> Single.just(false))
+                                .onErrorReturn(throwable -> {
+                                    if (throwable instanceof NoSuchElementException) {
+                                        return true;
+                                    } else {
+                                        CommonUtils.logStackTrace(TAG, throwable);
+                                        // NOTE: treat it as normal if it is sill possible
+                                        return false;
+                                    }
+                                });
+                    } else {
+                        orphanedNoteSingle = Single.just(false);
+                    }
+                    return Single.zip(Single.just(note), orphanedNoteSingle, Pair::new);
+                })
                 .observeOn(schedulerProvider.ui())
-                .subscribe(viewModel::populateCloudNote, throwable -> {
+                .subscribe(pair -> {
+                    viewModel.populateCloudNote(pair.first, pair.second);
+                }, throwable -> {
                     if (throwable instanceof NoSuchElementException) {
                         viewModel.showCloudNotFound();
                     } else {
@@ -138,39 +166,16 @@ public final class NotesConflictResolutionPresenter implements
     @Override
     public void onLocalDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         deleteNote(noteId);
     }
 
-    private void replaceNote(
-            @NonNull final String mainNoteId, @NonNull final String noteId) {
-        checkNotNull(mainNoteId);
-        checkNotNull(noteId);
-        deleteNoteSingle(mainNoteId)
-                .subscribeOn(schedulerProvider.io())
-                .map(success -> {
-                    if (success) {
-                        SyncState state = new SyncState(SyncState.State.SYNCED);
-                        success = localNotes.update(noteId, state).blockingGet();
-                    }
-                    return success;
-                })
-                .observeOn(schedulerProvider.ui())
-                .subscribe(success -> {
-                    if (success) {
-                        repository.refreshNotes(); // OPTIMIZATION: reload one item
-                        view.finishActivity();
-                    } else {
-                        view.cancelActivity();
-                    }
-                }, throwable -> view.cancelActivity());
-    }
-
     private void deleteNote(@NonNull final String noteId) {
         checkNotNull(noteId);
+        viewModel.showProgressOverlay();
         deleteNoteSingle(noteId)
                 .subscribeOn(schedulerProvider.io())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         view.finishActivity();
@@ -194,7 +199,7 @@ public final class NotesConflictResolutionPresenter implements
                 })
                 .doOnSuccess(success -> {
                     if (success) {
-                        repository.deleteCachedNote(noteId);
+                        repository.removeCachedNote(noteId);
                         settings.resetNoteFilter(noteId);
                     }
                 });
@@ -203,7 +208,6 @@ public final class NotesConflictResolutionPresenter implements
     @Override
     public void onCloudDeleteClick() {
         viewModel.deactivateButtons();
-        viewModel.showProgressOverlay();
         deleteNote(noteId);
     }
 
@@ -230,6 +234,7 @@ public final class NotesConflictResolutionPresenter implements
                     return success;
                 })
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshNotes();
@@ -248,6 +253,7 @@ public final class NotesConflictResolutionPresenter implements
                 .subscribeOn(schedulerProvider.io())
                 .map(note -> localNotes.save(note).blockingGet())
                 .observeOn(schedulerProvider.ui())
+                .doFinally(viewModel::hideProgressOverlay)
                 .subscribe(success -> {
                     if (success) {
                         repository.refreshNotes();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionViewModel.java
index b953c2a..78dc062 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/conflictresolution/NotesConflictResolutionViewModel.java
@@ -24,6 +24,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
     private static final String STATE_LOCAL_STATE = "LOCAL_STATE";
     private static final String STATE_LOCAL_STATUS = "LOCAL_STATUS";
+    private static final String STATE_LOCAL_INFO = "LOCAL_INFO";
     private static final String STATE_LOCAL_NOTE = "LOCAL_NOTE";
     private static final String STATE_LOCAL_TAGS = "LOCAL_TAGS";
     private static final String STATE_LOCAL_DELETE_BUTTON = "LOCAL_DELETE_BUTTON";
@@ -31,6 +32,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
     private static final String STATE_CLOUD_STATE = "CLOUD_STATE";
     private static final String STATE_CLOUD_STATUS = "CLOUD_STATUS";
+    private static final String STATE_CLOUD_INFO = "CLOUD_INFO";
     private static final String STATE_CLOUD_NOTE = "CLOUD_NOTE";
     private static final String STATE_CLOUD_TAGS = "CLOUD_TAGS";
     private static final String STATE_CLOUD_DELETE_BUTTON = "CLOUD_DELETE_BUTTON";
@@ -42,12 +44,14 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
     public final ObservableField<String> localState = new ObservableField<>();
     public final ObservableField<String> localStatus = new ObservableField<>();
+    public final ObservableField<String> localInfo = new ObservableField<>();
     public final ObservableField<String> localNote = new ObservableField<>();
     public final ObservableBoolean localDeleteButton = new ObservableBoolean();
     public final ObservableBoolean localUploadButton = new ObservableBoolean();
 
     public final ObservableField<String> cloudState = new ObservableField<>();
     public final ObservableField<String> cloudStatus = new ObservableField<>();
+    public final ObservableField<String> cloudInfo = new ObservableField<>();
     public final ObservableField<String> cloudNote = new ObservableField<>();
     public final ObservableBoolean cloudDeleteButton = new ObservableBoolean();
     public final ObservableBoolean cloudDownloadButton = new ObservableBoolean();
@@ -56,7 +60,6 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
     public final ObservableBoolean buttonsActive = new ObservableBoolean();
 
     private final Resources resources;
-    private NotesConflictResolutionContract.Presenter presenter;
 
     public NotesConflictResolutionViewModel(Context context) {
         resources = context.getResources();
@@ -83,9 +86,9 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
     @Override
     public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
-
         outState.putString(STATE_LOCAL_STATE, localState.get());
         outState.putString(STATE_LOCAL_STATUS, localStatus.get());
+        outState.putString(STATE_LOCAL_INFO, localInfo.get());
         outState.putString(STATE_LOCAL_NOTE, localNote.get());
         outState.putParcelableArrayList(STATE_LOCAL_TAGS, localTags);
         outState.putBoolean(STATE_LOCAL_DELETE_BUTTON, localDeleteButton.get());
@@ -93,6 +96,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
         outState.putString(STATE_CLOUD_STATE, cloudState.get());
         outState.putString(STATE_CLOUD_STATUS, cloudStatus.get());
+        outState.putString(STATE_CLOUD_INFO, cloudInfo.get());
         outState.putString(STATE_CLOUD_NOTE, cloudNote.get());
         outState.putParcelableArrayList(STATE_CLOUD_TAGS, cloudTags);
         outState.putBoolean(STATE_CLOUD_DELETE_BUTTON, cloudDeleteButton.get());
@@ -106,9 +110,9 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
     @Override
     public void applyInstanceState(@NonNull Bundle state) {
         checkNotNull(state);
-
         localState.set(state.getString(STATE_LOCAL_STATE));
         localStatus.set(state.getString(STATE_LOCAL_STATUS));
+        localInfo.set(state.getString(STATE_LOCAL_INFO));
         localNote.set(state.getString(STATE_LOCAL_NOTE));
         localTags = state.getParcelableArrayList(STATE_LOCAL_TAGS);
         localDeleteButton.set(state.getBoolean(STATE_LOCAL_DELETE_BUTTON));
@@ -116,6 +120,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
         cloudState.set(state.getString(STATE_CLOUD_STATE));
         cloudStatus.set(state.getString(STATE_CLOUD_STATUS));
+        cloudInfo.set(state.getString(STATE_CLOUD_INFO));
         cloudNote.set(state.getString(STATE_CLOUD_NOTE));
         cloudTags = state.getParcelableArrayList(STATE_CLOUD_TAGS);
         cloudDeleteButton.set(state.getBoolean(STATE_CLOUD_DELETE_BUTTON));
@@ -133,6 +138,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
         defaultState.putString(STATE_LOCAL_STATE, null);
         defaultState.putString(STATE_LOCAL_STATUS, resources.getString(R.string.status_loading));
+        defaultState.putString(STATE_LOCAL_INFO, null);
         defaultState.putString(STATE_LOCAL_NOTE, null);
         defaultState.putParcelableArrayList(STATE_LOCAL_TAGS, null);
         defaultState.putBoolean(STATE_LOCAL_DELETE_BUTTON, false);
@@ -140,6 +146,7 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
         defaultState.putString(STATE_CLOUD_STATE, null);
         defaultState.putString(STATE_CLOUD_STATUS, resources.getString(R.string.status_loading));
+        defaultState.putString(STATE_CLOUD_INFO, null);
         defaultState.putString(STATE_CLOUD_NOTE, null);
         defaultState.putParcelableArrayList(STATE_CLOUD_TAGS, null);
         defaultState.putBoolean(STATE_CLOUD_DELETE_BUTTON, false);
@@ -154,7 +161,6 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
 
     @Override
     public void setPresenter(@NonNull NotesConflictResolutionContract.Presenter presenter) {
-        this.presenter = checkNotNull(presenter);
     }
 
     @Override
@@ -176,6 +182,12 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
             localState.set(resources.getString(R.string.dialog_note_conflict_state_no_conflict));
             localDeleteButton.set(true);
         }
+        String linkId = note.getLinkId();
+        if (linkId == null) {
+            localInfo.set(resources.getString(R.string.dialog_note_conflict_info_unbound));
+        } else {
+            localInfo.set(resources.getString(R.string.dialog_note_conflict_info_bound, linkId));
+        }
         localNote.set(note.getNote());
         localTags = (ArrayList<Tag>) note.getTags();
         localStatus.set(null);
@@ -188,15 +200,27 @@ public class NotesConflictResolutionViewModel extends BaseObservable implements
     }
 
     @Override
-    public void populateCloudNote(@NonNull Note note) {
+    public void populateCloudNote(@NonNull Note note, boolean orphaned) {
         checkNotNull(note);
         cloudRetryButton.set(false);
         cloudDeleteButton.set(false);
         cloudDownloadButton.set(false);
         activateButtons();
 
-        cloudState.set(resources.getString(R.string.dialog_note_conflict_state_updated));
-        cloudDownloadButton.set(true);
+        String linkId = note.getLinkId();
+        if (orphaned) {
+            cloudState.set(resources.getString(R.string.dialog_note_conflict_state_orphaned));
+            cloudInfo.set(resources.getString(R.string.dialog_note_conflict_info_orphaned, linkId));
+            cloudDeleteButton.set(true);
+        } else {
+            cloudState.set(resources.getString(R.string.dialog_note_conflict_state_updated));
+            if (linkId == null) {
+                cloudInfo.set(resources.getString(R.string.dialog_note_conflict_info_unbound));
+            } else {
+                cloudInfo.set(resources.getString(R.string.dialog_note_conflict_info_bound, linkId));
+            }
+            cloudDownloadButton.set(true);
+        }
         cloudNote.set(note.getNote());
         cloudTags = (ArrayList<Tag>) note.getTags();
         cloudStatus.set(null);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
index 85dc269..98bcecf 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
@@ -5,8 +5,6 @@ import android.content.Intent;
 import android.databinding.DataBindingUtil;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
-import android.support.test.espresso.IdlingResource;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.AppCompatActivity;
 
@@ -14,7 +12,6 @@ import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.databinding.ActivityManageAccountsBinding;
 import com.bytesforge.linkasanote.utils.ActivityUtils;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 
 import java.util.Arrays;
 
@@ -116,9 +113,4 @@ public class ManageAccountsActivity extends AppCompatActivity {
         }
         return accountNames;
     }
-
-    @VisibleForTesting
-    public IdlingResource getCountingIdlingResource() {
-        return EspressoIdlingResource.getIdlingResource();
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
index 5670df5..87e4425 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
@@ -8,6 +8,7 @@ import android.accounts.OperationCanceledException;
 import android.app.Activity;
 import android.app.Dialog;
 import android.content.Intent;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.support.annotation.NonNull;
@@ -183,7 +184,11 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
     }
 
     public void removeAccount(Account account) {
-        accountManager.removeAccount(account, getActivity(), removeAccountCallback, handler);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
+            accountManager.removeAccount(account, getActivity(), removeAccountCallback, handler);
+        } else {
+            accountManager.removeAccount(account, removeAccountCallbackCompat, handler);
+        }
     }
 
     public static class AccountRemovalConfirmationDialog extends DialogFragment {
@@ -233,6 +238,13 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
         }
     };
 
+    private AccountManagerCallback<Boolean> removeAccountCallbackCompat = future -> {
+        if (future != null && future.isDone()) {
+            // TODO: disable sync with removed account
+            presenter.loadAccountItems(true);
+        }
+    };
+
     private AccountManagerCallback<Bundle> addAccountCallback = future -> {
         if (future == null) return;
         try {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
index 6077e56..c90e28b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
@@ -6,7 +6,6 @@ import android.app.Activity;
 import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity;
-import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
 import javax.inject.Inject;
@@ -49,17 +48,11 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
     @Override
     public void loadAccountItems(final boolean showLoading) {
         // TODO: implement showLoading
-        EspressoIdlingResource.increment();
         disposable.clear();
 
         Disposable disposable = view.loadAccountItems()
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doFinally(() -> {
-                    if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
-                        EspressoIdlingResource.decrement();
-                    }
-                })
                 .subscribe(
                         view::swapItems,
                         // NullPointerException
diff --git a/app/src/main/java/com/bytesforge/linkasanote/settings/Settings.java b/app/src/main/java/com/bytesforge/linkasanote/settings/Settings.java
index 170950b..647ef66 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/settings/Settings.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/settings/Settings.java
@@ -25,6 +25,8 @@ import static java.lang.System.currentTimeMillis;
 
 public class Settings {
 
+    private static final String TAG = Settings.class.getSimpleName();
+
     public static final float GLOBAL_ICON_ALPHA_DISABLED = 0.4f;
     public static final float GLOBAL_PROGRESS_OVERLAY_ALPHA = 0.4f;
     public static final long GLOBAL_PROGRESS_OVERLAY_DURATION = 200; // ms
@@ -78,6 +80,7 @@ public class Settings {
     // Runtime settings
 
     private boolean syncable;
+    private boolean online;
 
     public void setSyncable(boolean syncable) {
         this.syncable = syncable;
@@ -87,6 +90,14 @@ public class Settings {
         return syncable;
     }
 
+    public void setOnline(boolean online) {
+        this.online = online;
+    }
+
+    public boolean isOnline() {
+        return online;
+    }
+
     // Normal settings
 
     public Settings(Context context, SharedPreferences sharedPreferences) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/sync/SyncNotifications.java b/app/src/main/java/com/bytesforge/linkasanote/sync/SyncNotifications.java
index 5e714bc..8c5fda1 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/sync/SyncNotifications.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/sync/SyncNotifications.java
@@ -9,6 +9,7 @@ import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
+import android.support.v4.content.ContextCompat;
 
 import com.bytesforge.linkasanote.BuildConfig;
 import com.bytesforge.linkasanote.R;
@@ -54,7 +55,6 @@ public class SyncNotifications {
 
     public void sendSyncBroadcast(String action, int status, String id) {
         checkNotNull(accountName);
-
         Intent intent = new Intent(action);
         intent.putExtra(EXTRA_ACCOUNT_NAME, accountName);
         if (status >= 0) intent.putExtra(EXTRA_STATUS, status);
@@ -70,15 +70,15 @@ public class SyncNotifications {
 
     public void notifyFailedSynchronization(String title, @NonNull String text) {
         checkNotNull(text);
-
         //notificationManager.cancel(NOTIFICATION_SYNC);
         String defaultTitle = context.getString(R.string.sync_adapter_title_failed_default);
         String notificationTitle = title == null ? defaultTitle : defaultTitle + ": " + title;
 
+        int color = ContextCompat.getColor(context, R.color.color_primary);
         Notification notification = new NotificationCompat.Builder(context)
                 .setSmallIcon(R.drawable.ic_error_white)
                 .setLargeIcon(getLauncherBitmap())
-                .setColor(context.getResources().getColor(R.color.color_primary, context.getTheme()))
+                .setColor(color)
                 .setTicker(notificationTitle)
                 .setContentTitle(notificationTitle)
                 .setContentText(text)
@@ -87,7 +87,7 @@ public class SyncNotifications {
     }
 
     private Bitmap getLauncherBitmap() {
-        Drawable logo = context.getDrawable(R.mipmap.ic_launcher);
+        Drawable logo = ContextCompat.getDrawable(context, R.mipmap.ic_launcher);
         if (logo instanceof BitmapDrawable) {
             return ((BitmapDrawable) logo).getBitmap();
         }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
index 89333b6..e87ec80 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/ActivityUtils.java
@@ -13,6 +13,8 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 public class ActivityUtils {
 
+    private static final String TAG = ActivityUtils.class.getSimpleName();
+
     public static void addFragmentToActivity(
             @NonNull FragmentManager fragmentManager,
             @NonNull Fragment fragment,
@@ -79,7 +81,6 @@ public class ActivityUtils {
             @NonNull final View view, final int toVisibility,
             final float toAlpha, final long duration, final long delay) {
         checkNotNull(view);
-
         boolean show = (toVisibility == View.VISIBLE);
         if (show) {
             view.setAlpha(0);
@@ -90,6 +91,7 @@ public class ActivityUtils {
                 .setStartDelay(delay)
                 .alpha(show ? toAlpha : 0)
                 .setListener(new AnimatorListenerAdapter() {
+
                     @Override
                     public void onAnimationEnd(Animator animation) {
                         view.setVisibility(toVisibility);
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/CloudUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/CloudUtils.java
index d9cbbf1..20dc424 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/CloudUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/CloudUtils.java
@@ -111,7 +111,7 @@ public final class CloudUtils {
         ConnectivityManager connectivityManager =
                 (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
         NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
-        return networkInfo != null && networkInfo.isConnected();
+        return networkInfo != null && networkInfo.isConnectedOrConnecting();
     }
 
     @Nullable
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
index 05fed0b..3fdee04 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/CommonUtils.java
@@ -5,6 +5,8 @@ import android.content.res.Resources;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
+import com.google.common.base.Strings;
+
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.net.IDN;
@@ -35,7 +37,7 @@ public class CommonUtils {
 
     public static <T> T[] arrayAdd(@NonNull final T[] array, final T element) {
         checkNotNull(array);
-        final T[] newArray = (T[]) Arrays.copyOf(array, array.length + 1);
+        final T[] newArray = Arrays.copyOf(array, array.length + 1);
         newArray[newArray.length - 1] = element;
 
         return newArray;
@@ -50,6 +52,16 @@ public class CommonUtils {
         return new String(buffer);
     }
 
+    public static String strRepeat(final String str, final int repeat, final String delimiter) {
+        if (repeat <= 0 || Strings.isNullOrEmpty(str)) return "";
+
+        if (Strings.isNullOrEmpty(delimiter)) {
+            return new String(new char[repeat]).replace("\0", str);
+        } else {
+            return new String(new char[repeat - 1]).replace("\0", str + delimiter) + str;
+        }
+    }
+
     public static String getTempDir(@NonNull Context context) {
         return checkNotNull(context).getCacheDir().getAbsolutePath();
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/EspressoIdlingResource.java b/app/src/main/java/com/bytesforge/linkasanote/utils/EspressoIdlingResource.java
deleted file mode 100644
index 94669e5..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/EspressoIdlingResource.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.bytesforge.linkasanote.utils;
-
-import android.support.test.espresso.IdlingResource;
-
-public class EspressoIdlingResource {
-    private static final String RESOURCE = "GLOBAL";
-
-    private static SimpleCountingIdlingResource countingIdlingResource =
-            new SimpleCountingIdlingResource(RESOURCE);
-
-    public static void increment() {
-        countingIdlingResource.increment();
-    }
-
-    public static void decrement() {
-        countingIdlingResource.decrement();
-    }
-
-    public static IdlingResource getIdlingResource() {
-        return countingIdlingResource;
-    }
-}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/SimpleCountingIdlingResource.java b/app/src/main/java/com/bytesforge/linkasanote/utils/SimpleCountingIdlingResource.java
deleted file mode 100644
index fe7f11a..0000000
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/SimpleCountingIdlingResource.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.bytesforge.linkasanote.utils;
-
-import android.support.test.espresso.IdlingResource;
-
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-
-public final class SimpleCountingIdlingResource implements IdlingResource {
-
-    private final String resourceName;
-    private final AtomicInteger counter = new AtomicInteger(0);
-    private volatile ResourceCallback resourceCallback;
-
-    public SimpleCountingIdlingResource(String resourceName) {
-        this.resourceName = checkNotNull(resourceName);
-    }
-
-    @Override
-    public String getName() {
-        return resourceName;
-    }
-
-    @Override
-    public boolean isIdleNow() {
-        return counter.get() == 0;
-    }
-
-    @Override
-    public void registerIdleTransitionCallback(ResourceCallback resourceCallback) {
-        this.resourceCallback = resourceCallback;
-    }
-
-    public void increment() {
-        counter.getAndIncrement();
-    }
-
-    public void decrement() {
-        int counterVal = counter.decrementAndGet();
-
-        if (counterVal == 0 && null != resourceCallback) {
-            resourceCallback.onTransitionToIdle();
-        }
-
-        if (counterVal < 0) {
-            throw new IllegalArgumentException("Counter has been corrupted!");
-        }
-    }
-}
diff --git a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/CharacterTokenizer.java b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/CharacterTokenizer.java
index 8aee1e8..8e8558f 100644
--- a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/CharacterTokenizer.java
+++ b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/CharacterTokenizer.java
@@ -28,9 +28,12 @@ public class CharacterTokenizer implements MultiAutoCompleteTextView.Tokenizer {
         while (i > 0 && !splitChar.contains(text.charAt(i - 1))) {
             i--;
         }
-        while (i < cursor && text.charAt(i) == ' ') {
+        if (i > 0 && text.charAt(i) == ' ') {
             i++;
         }
+        /*while (i < cursor && text.charAt(i) == ' ') {
+            i++;
+        }*/
 
         return i;
     }
diff --git a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
index 307ee80..d33b176 100644
--- a/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
+++ b/third_party/tokenautocomplete/src/main/java/com/tokenautocomplete/TokenCompleteTextView.java
@@ -513,7 +513,7 @@ public abstract class TokenCompleteTextView<T> extends MultiAutoCompleteTextView
         int start = getCorrectedTokenBeginning(end);
 
         //Some keyboards add extra spaces when doing corrections, so
-        return TextUtils.substring(editable, start, end);
+        return TextUtils.substring(editable, start, end).trim();
     }
 
     protected float maxTextWidth() {
