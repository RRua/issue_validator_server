diff --git a/app/src/fdroid/java/com/google/android/stardroid/activities/DynamicStarMapModule.java b/app/src/fdroid/java/com/google/android/stardroid/activities/DynamicStarMapModule.java
index 3e36844..d956155 100644
--- a/app/src/fdroid/java/com/google/android/stardroid/activities/DynamicStarMapModule.java
+++ b/app/src/fdroid/java/com/google/android/stardroid/activities/DynamicStarMapModule.java
@@ -1,9 +1,6 @@
 package com.google.android.stardroid.activities;
 
-import com.google.android.stardroid.inject.PerActivity;
-
 import dagger.Module;
-import dagger.Provides;
 
 /**
  * Dagger module
diff --git a/app/src/gms/java/com/google/android/stardroid/util/Analytics.java b/app/src/gms/java/com/google/android/stardroid/util/Analytics.java
index 4f782a6..6a4e645 100644
--- a/app/src/gms/java/com/google/android/stardroid/util/Analytics.java
+++ b/app/src/gms/java/com/google/android/stardroid/util/Analytics.java
@@ -14,19 +14,11 @@
 
 package com.google.android.stardroid.util;
 
-import android.content.Context;
 import android.os.Bundle;
 import android.util.Log;
 
-import androidx.annotation.NonNull;
-
-import com.google.android.gms.analytics.GoogleAnalytics;
 import com.google.android.gms.analytics.HitBuilders;
-import com.google.android.gms.analytics.Tracker;
-import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.Task;
-import com.google.android.stardroid.BuildConfig;
-import com.google.android.stardroid.R;
 import com.google.android.stardroid.StardroidApplication;
 import com.google.firebase.analytics.FirebaseAnalytics;
 
diff --git a/app/src/main/java/com/google/android/stardroid/ApplicationComponent.java b/app/src/main/java/com/google/android/stardroid/ApplicationComponent.java
index fcea663..e0e7bb4 100644
--- a/app/src/main/java/com/google/android/stardroid/ApplicationComponent.java
+++ b/app/src/main/java/com/google/android/stardroid/ApplicationComponent.java
@@ -25,7 +25,7 @@ import dagger.Component;
  * Created by johntaylor on 3/26/16.
  */
 @Singleton
-@Component(modules={ApplicationModule.class})
+@Component(modules = ApplicationModule.class)
 public interface ApplicationComponent {
   // What we expose to dependent components
   StardroidApplication provideStardroidApplication();
diff --git a/app/src/main/java/com/google/android/stardroid/activities/AbstractDynamicStarMapModule.java b/app/src/main/java/com/google/android/stardroid/activities/AbstractDynamicStarMapModule.java
index 79c32f2..2c84aef 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/AbstractDynamicStarMapModule.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/AbstractDynamicStarMapModule.java
@@ -60,8 +60,7 @@ public class AbstractDynamicStarMapModule {
   @Provides
   @PerActivity
   EulaDialogFragment provideEulaDialogFragment() {
-    EulaDialogFragment fragment = new EulaDialogFragment();
-    return fragment;
+    return new EulaDialogFragment();
   }
 
   @Provides
diff --git a/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationActivity.java b/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationActivity.java
index a299392..8ccb089 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationActivity.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationActivity.java
@@ -10,7 +10,6 @@ import android.view.View;
 import android.webkit.WebView;
 import android.widget.CheckBox;
 import android.widget.TextView;
-import android.widget.Toast;
 
 import com.google.android.stardroid.R;
 import com.google.android.stardroid.activities.util.SensorAccuracyDecoder;
diff --git a/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationComponent.java b/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationComponent.java
index bfd86c4..8628a49 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationComponent.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/CompassCalibrationComponent.java
@@ -9,7 +9,7 @@ import dagger.Component;
  * Created by johntaylor on 4/24/16.
  */
 @PerActivity
-@Component(modules={CompassCalibrationModule.class}, dependencies = {ApplicationComponent.class})
+@Component(modules = CompassCalibrationModule.class, dependencies = ApplicationComponent.class)
 public interface CompassCalibrationComponent {
   void inject(CompassCalibrationActivity activity);
 }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivity.java b/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivity.java
index 1e421ef..66f8e7d 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivity.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivity.java
@@ -238,9 +238,7 @@ public class DiagnosticActivity extends InjectableActivity implements SensorEven
             valuesViewId = R.id.diagnose_rotation_matrix_row3_txt;
         }
         float[] rowValues = new float[3];
-        for (int col = 0; col < 3; ++col) {
-          rowValues[col] = matrix[row * 3 + col];
-        }
+        System.arraycopy(matrix, row * 3, rowValues, 0, 3);
         setArrayValuesInUi(valuesViewId, rowValues);
       }
     }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivityComponent.java b/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivityComponent.java
index d999b83..f898f39 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivityComponent.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/DiagnosticActivityComponent.java
@@ -9,7 +9,7 @@ import dagger.Component;
  * Created by johntaylor on 4/15/16.
  */
 @PerActivity
-@Component(modules={DiagnosticActivityModule.class}, dependencies={ApplicationComponent.class})
+@Component(modules = DiagnosticActivityModule.class, dependencies = ApplicationComponent.class)
 public interface DiagnosticActivityComponent {
   void inject(DiagnosticActivity activity);
 }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapActivity.java b/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapActivity.java
index 14bfe02..a423ce1 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapActivity.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapActivity.java
@@ -77,7 +77,6 @@ import com.google.android.stardroid.util.MathUtil;
 import com.google.android.stardroid.util.MiscUtil;
 import com.google.android.stardroid.util.SensorAccuracyMonitor;
 import com.google.android.stardroid.views.ButtonLayerView;
-import com.google.firebase.analytics.FirebaseAnalytics;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -605,7 +604,7 @@ public class DynamicStarMapActivity extends InjectableActivity
     b.putString(Analytics.SEARCH_TERM, queryString);
     b.putBoolean(Analytics.SEARCH_SUCCESS, results.size() > 0);
     analytics.trackEvent(Analytics.SEARCH_EVENT, b);
-    if (results.size() == 0) {
+    if (results.isEmpty()) {
       Log.d(TAG, "No results returned");
       noSearchResultsDialogFragment.show(fragmentManager, "No Search Results");
     } else if (results.size() > 1) {
diff --git a/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapComponent.java b/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapComponent.java
index fb30981..51b4aca 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapComponent.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/DynamicStarMapComponent.java
@@ -15,7 +15,7 @@ import dagger.Component;
  * Created by johntaylor on 3/29/16.
  */
 @PerActivity
-@Component(modules={DynamicStarMapModule.class}, dependencies={ApplicationComponent.class})
+@Component(modules = DynamicStarMapModule.class, dependencies = ApplicationComponent.class)
 public interface DynamicStarMapComponent extends EulaDialogFragment.ActivityComponent,
     TimeTravelDialogFragment.ActivityComponent, HelpDialogFragment.ActivityComponent,
     NoSearchResultsDialogFragment.ActivityComponent,
diff --git a/app/src/main/java/com/google/android/stardroid/activities/EditSettingsActivity.java b/app/src/main/java/com/google/android/stardroid/activities/EditSettingsActivity.java
index 770144a..e71b8ba 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/EditSettingsActivity.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/EditSettingsActivity.java
@@ -166,7 +166,7 @@ public class EditSettingsActivity extends PreferenceActivity {
       Toast.makeText(this, getString(R.string.location_unable_to_geocode), Toast.LENGTH_SHORT).show();
       return false;
     }
-    if (addresses.size() == 0) {
+    if (addresses.isEmpty()) {
       showNotFoundDialog(place);
       return false;
     }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/ImageDisplayActivity.java b/app/src/main/java/com/google/android/stardroid/activities/ImageDisplayActivity.java
index bca3610..59b72c2 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/ImageDisplayActivity.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/ImageDisplayActivity.java
@@ -14,7 +14,6 @@
 
 package com.google.android.stardroid.activities;
 
-import android.app.Activity;
 import android.app.SearchManager;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -22,7 +21,6 @@ import android.content.SharedPreferences.Editor;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -30,7 +28,6 @@ import android.widget.TextView;
 import androidx.preference.PreferenceManager;
 
 import com.google.android.stardroid.R;
-import com.google.android.stardroid.StardroidApplication;
 import com.google.android.stardroid.activities.util.ActivityLightLevelChanger;
 import com.google.android.stardroid.activities.util.ActivityLightLevelManager;
 import com.google.android.stardroid.gallery.GalleryFactory;
@@ -79,19 +76,9 @@ public class ImageDisplayActivity extends InjectableActivity {
     TextView label = (TextView) findViewById(R.id.gallery_image_title);
     label.setText(selectedImage.name);
     Button backButton = (Button) findViewById(R.id.gallery_image_back_btn);
-    backButton.setOnClickListener(new OnClickListener() {
-      @Override
-      public void onClick(View view) {
-        goBack(view);
-      }
-    });
+    backButton.setOnClickListener(this::goBack);
     Button searchButton = (Button) findViewById(R.id.gallery_image_search_btn);
-    searchButton.setOnClickListener(new OnClickListener() {
-      @Override
-      public void onClick(View view) {
-        doSearch(view);
-      }
-    });
+    searchButton.setOnClickListener(this::doSearch);
 
   }
 
diff --git a/app/src/main/java/com/google/android/stardroid/activities/SplashScreenComponent.java b/app/src/main/java/com/google/android/stardroid/activities/SplashScreenComponent.java
index 9772b90..a242bcc 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/SplashScreenComponent.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/SplashScreenComponent.java
@@ -11,7 +11,7 @@ import dagger.Component;
  * Created by johntaylor on 4/2/16.
  */
 @PerActivity
-@Component(modules={SplashScreenModule.class}, dependencies = {ApplicationComponent.class})
+@Component(modules = SplashScreenModule.class, dependencies = ApplicationComponent.class)
 public interface SplashScreenComponent extends EulaDialogFragment.ActivityComponent,
     WhatsNewDialogFragment.ActivityComponent {
   void inject(SplashScreenActivity activity);
diff --git a/app/src/main/java/com/google/android/stardroid/activities/dialogs/MultipleSearchResultsDialogFragment.java b/app/src/main/java/com/google/android/stardroid/activities/dialogs/MultipleSearchResultsDialogFragment.java
index 3085bb5..d2b5e94 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/dialogs/MultipleSearchResultsDialogFragment.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/dialogs/MultipleSearchResultsDialogFragment.java
@@ -46,21 +46,19 @@ public class MultipleSearchResultsDialogFragment extends DialogFragment {
       public void onClick(DialogInterface dialog, int whichButton) {
         if (whichButton == Dialog.BUTTON_NEGATIVE) {
           Log.d(TAG, "Many search results Dialog closed with cancel");
-          dialog.dismiss();
         } else {
           final SearchResult item = multipleSearchResultsAdaptor.getItem(whichButton);
           parentActivity.activateSearchTarget(item.coords, item.capitalizedName);
-          dialog.dismiss();
         }
+        dialog.dismiss();
       }
     };
 
-    AlertDialog dialog = new AlertDialog.Builder(parentActivity)
+    return new AlertDialog.Builder(parentActivity)
         .setTitle(R.string.many_search_results_title)
         .setNegativeButton(android.R.string.cancel, onClickListener)
         .setAdapter(multipleSearchResultsAdaptor, onClickListener)
         .create();
-    return dialog;
   }
 
   public void clearResults() {
diff --git a/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSearchResultsDialogFragment.java b/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSearchResultsDialogFragment.java
index 2e0de0d..f8fbc18 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSearchResultsDialogFragment.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSearchResultsDialogFragment.java
@@ -31,14 +31,13 @@ public class NoSearchResultsDialogFragment extends DialogFragment {
     // Activities using this dialog MUST implement this interface.  Obviously.
     ((HasComponent<ActivityComponent>) getActivity()).getComponent().inject(this);
 
-    AlertDialog dialog = new AlertDialog.Builder(parentActivity)
+    return new AlertDialog.Builder(parentActivity)
         .setTitle(R.string.no_search_title).setMessage(R.string.no_search_results_text)
         .setNegativeButton(android.R.string.ok, new DialogInterface.OnClickListener() {
-          public void onClick(DialogInterface dialog, int whichButton) {
+          public void onClick(DialogInterface dialog1, int whichButton) {
             Log.d(TAG, "No search results Dialog closed");
-            dialog.dismiss();
+            dialog1.dismiss();
           }
         }).create();
-    return dialog;
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSensorsDialogFragment.java b/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSensorsDialogFragment.java
index 7142401..2fce34a 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSensorsDialogFragment.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/dialogs/NoSensorsDialogFragment.java
@@ -39,7 +39,7 @@ public class NoSensorsDialogFragment extends DialogFragment {
 
     LayoutInflater inflater = parentActivity.getLayoutInflater();
     final View view = inflater.inflate(R.layout.no_sensor_warning, null);
-    AlertDialog alertDialog = new AlertDialog.Builder(parentActivity)
+    return new AlertDialog.Builder(parentActivity)
         .setTitle(R.string.warning_dialog_title)
         .setView(view).setNegativeButton(android.R.string.ok,
             new DialogInterface.OnClickListener() {
@@ -51,6 +51,5 @@ public class NoSensorsDialogFragment extends DialogFragment {
                 dialog.dismiss();
               }
             }).create();
-    return alertDialog;
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialog.java b/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialog.java
index 255e35a..fdce4aa 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialog.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialog.java
@@ -192,8 +192,8 @@ public class TimeTravelDialog extends Dialog {
 
   private void updateDisplay() {
     Date date = calendar.getTime();
-    dateTimeReadout.setText(String.format(parentActivity.getString(R.string.now_visiting,
-                                                                   dateFormat.format(date))));
+    dateTimeReadout.setText(parentActivity.getString(R.string.now_visiting,
+                                                                   dateFormat.format(date)));
   }
 
   private void setToNextSunRiseOrSet(Planet.RiseSetIndicator indicator) {
diff --git a/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialogFragment.java b/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialogFragment.java
index 0b393d1..5a30702 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialogFragment.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/dialogs/TimeTravelDialogFragment.java
@@ -28,8 +28,7 @@ public class TimeTravelDialogFragment extends android.app.DialogFragment {
     // Activities using this dialog MUST implement this interface.  Obviously.
     ((HasComponent<ActivityComponent>) getActivity()).getComponent().inject(this);
 
-    TimeTravelDialog timeTravelDialog = new TimeTravelDialog(parentActivity,
+    return new TimeTravelDialog(parentActivity,
         parentActivity.getModel());
-    return timeTravelDialog;
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/activities/util/ActivityLightLevelChanger.java b/app/src/main/java/com/google/android/stardroid/activities/util/ActivityLightLevelChanger.java
index 9bf1f1b..be56c85 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/util/ActivityLightLevelChanger.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/util/ActivityLightLevelChanger.java
@@ -32,8 +32,8 @@ public class ActivityLightLevelChanger {
    * @author John Taylor
    *
    */
-  public static interface NightModeable {
-    public void setNightMode(boolean nightMode);
+  public interface NightModeable {
+    void setNightMode(boolean nightMode);
   }
 
   // This value is based on inspecting the Android source code for the
diff --git a/app/src/main/java/com/google/android/stardroid/activities/util/FullscreenControlsManager.java b/app/src/main/java/com/google/android/stardroid/activities/util/FullscreenControlsManager.java
index fbf76fb..b607c51 100644
--- a/app/src/main/java/com/google/android/stardroid/activities/util/FullscreenControlsManager.java
+++ b/app/src/main/java/com/google/android/stardroid/activities/util/FullscreenControlsManager.java
@@ -164,12 +164,7 @@ public class FullscreenControlsManager {
 
   private final Handler mHideHandler = new Handler();
 
-  private final Runnable mHideRunnable = new Runnable() {
-    @Override
-    public void run() {
-      hide();
-    }
-  };
+  private final Runnable mHideRunnable = this::hide;
 
   /**
    * Schedules a call to hide() in [delay] milliseconds, canceling any
diff --git a/app/src/main/java/com/google/android/stardroid/base/Filter.java b/app/src/main/java/com/google/android/stardroid/base/Filter.java
index 6a59f90..36794e9 100644
--- a/app/src/main/java/com/google/android/stardroid/base/Filter.java
+++ b/app/src/main/java/com/google/android/stardroid/base/Filter.java
@@ -23,5 +23,5 @@ public interface Filter<E> {
 
   /** Returns true if the given object should be included in the collection.
    */
-  public boolean accept(E object);
+  boolean accept(E object);
 }
diff --git a/app/src/main/java/com/google/android/stardroid/base/Transform.java b/app/src/main/java/com/google/android/stardroid/base/Transform.java
index 453203a..5b26416 100644
--- a/app/src/main/java/com/google/android/stardroid/base/Transform.java
+++ b/app/src/main/java/com/google/android/stardroid/base/Transform.java
@@ -21,5 +21,5 @@ package com.google.android.stardroid.base;
  */
 public interface Transform <E, F> {
   
-  public F transform(E e);
+  F transform(E e);
 }
diff --git a/app/src/main/java/com/google/android/stardroid/control/AstronomerModel.java b/app/src/main/java/com/google/android/stardroid/control/AstronomerModel.java
index 16368e8..3b2d252 100644
--- a/app/src/main/java/com/google/android/stardroid/control/AstronomerModel.java
+++ b/app/src/main/java/com/google/android/stardroid/control/AstronomerModel.java
@@ -33,7 +33,7 @@ public interface AstronomerModel {
    *
    * @author John Taylor
    */
-  public static class Pointing {
+  class Pointing {
     private final GeocentricCoordinates lineOfSight;
     private final GeocentricCoordinates perpendicular;
 
diff --git a/app/src/main/java/com/google/android/stardroid/control/AstronomerModelImpl.java b/app/src/main/java/com/google/android/stardroid/control/AstronomerModelImpl.java
index a1d4564..3f242fe 100644
--- a/app/src/main/java/com/google/android/stardroid/control/AstronomerModelImpl.java
+++ b/app/src/main/java/com/google/android/stardroid/control/AstronomerModelImpl.java
@@ -104,7 +104,7 @@ public class AstronomerModelImpl implements AstronomerModel {
 
   private boolean useRotationVector = false;
 
-  private float[] rotationVector = new float[]{1, 0, 0, 0};
+  private float[] rotationVector = {1, 0, 0, 0};
 
   /** North along the ground in celestial coordinates. */
   private Vector3 trueNorthCelestial = new Vector3(1, 0, 0);
diff --git a/app/src/main/java/com/google/android/stardroid/control/LocationController.java b/app/src/main/java/com/google/android/stardroid/control/LocationController.java
index 8b492a9..a6998a4 100644
--- a/app/src/main/java/com/google/android/stardroid/control/LocationController.java
+++ b/app/src/main/java/com/google/android/stardroid/control/LocationController.java
@@ -265,7 +265,7 @@ public class LocationController extends AbstractController implements LocationLi
       Log.e(TAG, "Unable to reverse geocode location " + location);
     }
 
-    if (addresses == null || addresses.size() == 0) {
+    if (addresses == null || addresses.isEmpty()) {
       Log.d(TAG, "No addresses returned");
       place = String.format(context.getString(R.string.location_long_lat), location.getLongitude(),
               location.getLatitude());
@@ -286,8 +286,7 @@ public class LocationController extends AbstractController implements LocationLi
     if (address == null) {
       return longLat;
     }
-    String place = null;
-    place = address.getLocality();
+    String place = address.getLocality();
     if (place == null) {
       place = address.getSubAdminArea();
     }
diff --git a/app/src/main/java/com/google/android/stardroid/control/SensorOrientationController.java b/app/src/main/java/com/google/android/stardroid/control/SensorOrientationController.java
index 7dc56fc..55b1f1e 100644
--- a/app/src/main/java/com/google/android/stardroid/control/SensorOrientationController.java
+++ b/app/src/main/java/com/google/android/stardroid/control/SensorOrientationController.java
@@ -53,13 +53,13 @@ public class SensorOrientationController extends AbstractController
    * Parameters that control the smoothing of the accelerometer and
    * magnetic sensors.
    */
-  private static final SensorDampingSettings[] ACC_DAMPING_SETTINGS = new SensorDampingSettings[] {
+  private static final SensorDampingSettings[] ACC_DAMPING_SETTINGS = {
         new SensorDampingSettings(0.7f, 3),
         new SensorDampingSettings(0.7f, 3),
         new SensorDampingSettings(0.1f, 3),
         new SensorDampingSettings(0.1f, 3),
   };
-  private static final SensorDampingSettings[] MAG_DAMPING_SETTINGS = new SensorDampingSettings[] {
+  private static final SensorDampingSettings[] MAG_DAMPING_SETTINGS = {
       new SensorDampingSettings(0.05f, 3),  // Derived for the Nexus One
       new SensorDampingSettings(0.001f, 4),  // Derived for the unpatched MyTouch Slide
       new SensorDampingSettings(0.0001f, 5),  // Just guessed for Nexus 6
diff --git a/app/src/main/java/com/google/android/stardroid/control/TransitioningCompositeClock.java b/app/src/main/java/com/google/android/stardroid/control/TransitioningCompositeClock.java
index 10ee362..25860b6 100644
--- a/app/src/main/java/com/google/android/stardroid/control/TransitioningCompositeClock.java
+++ b/app/src/main/java/com/google/android/stardroid/control/TransitioningCompositeClock.java
@@ -33,7 +33,7 @@ public class TransitioningCompositeClock implements Clock {
   private static final String TAG = MiscUtil.getTag(TransitioningCompositeClock.class);
   private Clock realClock;
   private TimeTravelClock timeTravelClock;
-  private enum Mode {REAL_TIME, TRANSITION, TIME_TRAVEL};
+  private enum Mode {REAL_TIME, TRANSITION, TIME_TRAVEL}
   private Mode mode = Mode.REAL_TIME;
   private long startTime;
   private long endTime;
diff --git a/app/src/main/java/com/google/android/stardroid/layers/AbstractLayer.java b/app/src/main/java/com/google/android/stardroid/layers/AbstractLayer.java
index 0d813cc..537280e 100644
--- a/app/src/main/java/com/google/android/stardroid/layers/AbstractLayer.java
+++ b/app/src/main/java/com/google/android/stardroid/layers/AbstractLayer.java
@@ -179,16 +179,16 @@ public abstract class AbstractLayer implements Layer {
 
   @SuppressWarnings("unchecked")
   <E> RenderManager<E> createRenderManager(Class<E> clazz, RendererControllerBase controller) {
-    if (clazz.equals(ImageSource.class)) {
+    if (clazz == ImageSource.class) {
       return (RenderManager<E>) controller.createImageManager(getLayerDepthOrder());
 
-    } else if (clazz.equals(TextSource.class)) {
+    } else if (clazz == TextSource.class) {
       return (RenderManager<E>) controller.createLabelManager(getLayerDepthOrder());
 
-    } else if (clazz.equals(LineSource.class)) {
+    } else if (clazz == LineSource.class) {
       return (RenderManager<E>) controller.createLineManager(getLayerDepthOrder());
 
-    } else if (clazz.equals(PointSource.class)) {
+    } else if (clazz == PointSource.class) {
       return (RenderManager<E>) controller.createPointManager(getLayerDepthOrder());
     }
     throw new IllegalStateException("Unknown source type: " + clazz);
diff --git a/app/src/main/java/com/google/android/stardroid/layers/IssLayer.java b/app/src/main/java/com/google/android/stardroid/layers/IssLayer.java
index 695036f..9d69bc6 100644
--- a/app/src/main/java/com/google/android/stardroid/layers/IssLayer.java
+++ b/app/src/main/java/com/google/android/stardroid/layers/IssLayer.java
@@ -118,8 +118,8 @@ public class IssLayer extends AbstractSourceLayer {
       if (i == params.length) {  // we read all the data.
         // TODO(serafini): Add magic here to create orbital elements or whatever.
         StringBuilder sb = new StringBuilder();
-        for (int pi = 0; pi < params.length; pi++) {
-          sb.append(" " + params[pi]);
+        for (float param : params) {
+          sb.append(" ").append(param);
         }
         //Blog.d(this, "Params: " + sb);
       }
diff --git a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/OrbitalElements.java b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/OrbitalElements.java
index 2593867..ce1c77a 100644
--- a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/OrbitalElements.java
+++ b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/OrbitalElements.java
@@ -93,14 +93,11 @@ public class OrbitalElements {
 
   @Override
   public String toString() {
-    StringBuffer sb = new StringBuffer();
-    sb.append("Mean Distance: " + distance + " (AU)\n");
-    sb.append("Eccentricity: " + eccentricity + "\n");
-    sb.append("Inclination: " + inclination + " (AngleUtils.RADIANS)\n");
-    sb.append("Ascending Node: " + ascendingNode + " (AngleUtils.RADIANS)\n");
-    sb.append("Perihelion: " + perihelion + " (AngleUtils.RADIANS)\n");
-    sb.append("Mean Longitude: " + meanLongitude + " (AngleUtils.RADIANS)\n");
-
-    return sb.toString();
+    return "Mean Distance: " + distance + " (AU)\n" +
+            "Eccentricity: " + eccentricity + "\n" +
+            "Inclination: " + inclination + " (AngleUtils.RADIANS)\n" +
+            "Ascending Node: " + ascendingNode + " (AngleUtils.RADIANS)\n" +
+            "Perihelion: " + perihelion + " (AngleUtils.RADIANS)\n" +
+            "Mean Longitude: " + meanLongitude + " (AngleUtils.RADIANS)\n";
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/Planet.java b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/Planet.java
index fcb4ba4..992cecf 100644
--- a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/Planet.java
+++ b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/Planet.java
@@ -321,12 +321,10 @@ public enum Planet {
     float earthDistance = planetCoords.DistanceFrom(earthCoords);
 
     // Finally, calculate the phase of the body.
-    float phase = MathUtil.acos((earthDistance * earthDistance +
+    return MathUtil.acos((earthDistance * earthDistance +
         planetCoords.radius * planetCoords.radius -
         earthCoords.radius * earthCoords.radius) /
         (2.0f * earthDistance * planetCoords.radius)) * Geometry.RADIANS_TO_DEGREES;
-
-    return phase;
   }
 
   /**
@@ -351,10 +349,9 @@ public enum Planet {
     float phase = Moon.calculatePhaseAngle(now);
 
     // Next, figure out if the moon is waxing or waning.
-    boolean isWaxing = false;
     Date later = new Date(now.getTime() + 1 * 3600 * 1000);
     float phase2 = Moon.calculatePhaseAngle(later);
-    isWaxing = phase2 > phase;
+    boolean isWaxing = phase2 > phase;
 
     // If moon is waxing, next full moon is (180.0 - phase)/360.0 * 29.53.
     // If moon is waning, next full moon is (360.0 - phase)/360.0 * 29.53.
diff --git a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/SolarPositionCalculator.java b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/SolarPositionCalculator.java
index 93c4243..408cd54 100644
--- a/app/src/main/java/com/google/android/stardroid/provider/ephemeris/SolarPositionCalculator.java
+++ b/app/src/main/java/com/google/android/stardroid/provider/ephemeris/SolarPositionCalculator.java
@@ -30,7 +30,6 @@ import java.util.Date;
 public class SolarPositionCalculator {
   public static RaDec getSolarPosition(Date time) {
     HeliocentricCoordinates sunCoordinates = HeliocentricCoordinates.getInstance(Planet.Sun, time);
-    RaDec raDec = RaDec.getInstance(Planet.Sun, time, sunCoordinates);
-    return raDec;
+    return RaDec.getInstance(Planet.Sun, time, sunCoordinates);
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/LabelObjectManager.java b/app/src/main/java/com/google/android/stardroid/renderer/LabelObjectManager.java
index 9b11c15..2c886e9 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/LabelObjectManager.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/LabelObjectManager.java
@@ -89,10 +89,7 @@ public class LabelObjectManager extends RendererObjectManager {
     mQuadBuffer.position(0);
     
     // We want to initialize the labels of a sky region to an empty list.
-    mSkyRegions.setRegionDataFactory(
-        new SkyRegionMap.RegionDataFactory<ArrayList<Label>>() {
-          public ArrayList<Label> construct() { return new ArrayList<Label>(); }
-        });
+    mSkyRegions.setRegionDataFactory(ArrayList::new);
   }
   
   @Override
@@ -257,7 +254,7 @@ public class LabelObjectManager extends RendererObjectManager {
   private static class Label extends LabelMaker.LabelData {
     public Label(TextSource ts) {
       super(ts.getText(), 0xffffffff, ts.getFontSize());
-      if (ts.getText() == null || ts.getText().equals("")) {
+      if (ts.getText() == null || ts.getText().isEmpty()) {
         throw new RuntimeException("Bad Label: " + ts.getClass());
       }
       
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/OverlayManager.java b/app/src/main/java/com/google/android/stardroid/renderer/OverlayManager.java
index 15e820b..5e9b18c 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/OverlayManager.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/OverlayManager.java
@@ -18,8 +18,6 @@ import android.content.res.Resources;
 import android.opengl.GLU;
 import android.util.Log;
 
-import com.google.android.stardroid.R;
-import com.google.android.stardroid.renderer.LabelOverlayManager.Label;
 import com.google.android.stardroid.renderer.util.ColoredQuad;
 import com.google.android.stardroid.renderer.util.SearchHelper;
 import com.google.android.stardroid.renderer.util.TextureManager;
@@ -146,8 +144,8 @@ public class OverlayManager extends RendererObjectManager {
 
     gl.glMatrixMode(GL10.GL_MODELVIEW);
     gl.glPushMatrix();
-    float left = mWidth / 2;
-    float bottom = mHeight / 2;
+    float left = mWidth / 2.0f;
+    float bottom = mHeight / 2.0f;
     gl.glLoadIdentity();
     GLU.gluOrtho2D(gl, left, -left, bottom, -bottom);
   }
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/PointObjectManager.java b/app/src/main/java/com/google/android/stardroid/renderer/PointObjectManager.java
index 556b2f0..277bdeb 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/PointObjectManager.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/PointObjectManager.java
@@ -63,10 +63,7 @@ public class PointObjectManager extends RendererObjectManager {
   public PointObjectManager(int layer, TextureManager textureManager) {
     super(layer, textureManager);
     // We want to initialize the labels of a sky region to an empty set of data.
-    mSkyRegions.setRegionDataFactory(
-        new SkyRegionMap.RegionDataFactory<RegionData>() {
-          public RegionData construct() { return new RegionData(); }
-        });
+    mSkyRegions.setRegionDataFactory(RegionData::new);
   }
 
   public void updateObjects(List<PointSource> points, EnumSet<UpdateType> updateType) {
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/RendererController.java b/app/src/main/java/com/google/android/stardroid/renderer/RendererController.java
index 1877886..f2bd07a 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/RendererController.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/RendererController.java
@@ -73,11 +73,7 @@ public class RendererController extends RendererControllerBase {
 
   public RendererController(SkyRenderer renderer, final GLSurfaceView view) {
     super(renderer);
-    mQueuer = new EventQueuer() {
-      public void queueEvent(Runnable r) {
-        view.queueEvent(r);
-      }
-    };
+    mQueuer = view::queueEvent;
   }
 
   @Override
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/RendererControllerBase.java b/app/src/main/java/com/google/android/stardroid/renderer/RendererControllerBase.java
index c436c75..85ad7e1 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/RendererControllerBase.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/RendererControllerBase.java
@@ -136,7 +136,7 @@ public abstract class RendererControllerBase {
     }
   }
 
-  protected static interface EventQueuer {
+  protected interface EventQueuer {
     void queueEvent(Runnable r);
   }
 
@@ -230,9 +230,7 @@ public abstract class RendererControllerBase {
 
   public void queueDisableSkyGradient() {
     final String msg = "Disabling sky gradient";
-    queueRunnable(msg, CommandType.Data, new Runnable() { public void run() {
-      mRenderer.disableSkyGradient();
-    }});
+    queueRunnable(msg, CommandType.Data, mRenderer::disableSkyGradient);
   }
 
   public void queueEnableSearchOverlay(final GeocentricCoordinates target,
@@ -245,9 +243,7 @@ public abstract class RendererControllerBase {
 
   public void queueDisableSearchOverlay() {
     final String msg = "Disabling search overlay";
-    queueRunnable(msg, CommandType.Data, new Runnable() { public void run() {
-      mRenderer.disableSearchOverlay();
-    }});
+    queueRunnable(msg, CommandType.Data, mRenderer::disableSearchOverlay);
   }
 
   public void addUpdateClosure(final UpdateClosure runnable) {
@@ -284,9 +280,7 @@ public abstract class RendererControllerBase {
   public void waitUntilFinished() {
     final ConditionVariable cv = new ConditionVariable();
     String msg = "Waiting until operations have finished";
-    queueRunnable(msg, CommandType.Synchronization, new Runnable() { public void run() {
-      cv.open();
-    }});
+    queueRunnable(msg, CommandType.Synchronization, cv::open);
     cv.block();
   }
 
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/RendererObjectManager.java b/app/src/main/java/com/google/android/stardroid/renderer/RendererObjectManager.java
index 1867602..dd452bf 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/RendererObjectManager.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/RendererObjectManager.java
@@ -51,13 +51,7 @@ public abstract class RendererObjectManager implements Comparable<RendererObject
     if (getClass() != rom.getClass()) {
       return getClass().getName().compareTo(rom.getClass().getName());
     }
-    if (mIndex < rom.mIndex) {
-      return -1;
-    } else if (mIndex == rom.mIndex) {
-      return 0;
-    } else {
-      return 1;
-    }
+    return Integer.compare(mIndex, rom.mIndex);
   }
 
   final int getLayer() {
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/SkyRenderer.java b/app/src/main/java/com/google/android/stardroid/renderer/SkyRenderer.java
index c8e8af1..b6da9d3 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/SkyRenderer.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/SkyRenderer.java
@@ -122,8 +122,7 @@ public class SkyRenderer implements GLSurfaceView.Renderer {
 
     gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
 
-    for (int layer : mLayersToManagersMap.keySet()) {
-      Set<RendererObjectManager> managers = mLayersToManagersMap.get(layer);
+    for (Set<RendererObjectManager> managers : mLayersToManagersMap.values()) {
       for (RendererObjectManager rom : managers) {
         rom.draw(gl);
       }
@@ -182,6 +181,7 @@ public class SkyRenderer implements GLSurfaceView.Renderer {
     for (String model : badModels) {
       if (android.os.Build.MODEL.contains(model)) {
         canUseVBO = false;
+        break;
       }
     }
     Log.i("SkyRenderer", "Model: " + android.os.Build.MODEL);
@@ -423,20 +423,20 @@ public class SkyRenderer implements GLSurfaceView.Renderer {
 }
 
 interface RenderStateInterface {
-  public GeocentricCoordinates getCameraPos();
-  public GeocentricCoordinates getLookDir();
-  public GeocentricCoordinates getUpDir();
-  public float getRadiusOfView();
-  public float getUpAngle();
-  public float getCosUpAngle();
-  public float getSinUpAngle();
-  public int getScreenWidth();
-  public int getScreenHeight();
-  public Matrix4x4 getTransformToDeviceMatrix();
-  public Matrix4x4 getTransformToScreenMatrix();
-  public Resources getResources();
-  public boolean getNightVisionMode();
-  public SkyRegionMap.ActiveRegionData getActiveSkyRegions();
+  GeocentricCoordinates getCameraPos();
+  GeocentricCoordinates getLookDir();
+  GeocentricCoordinates getUpDir();
+  float getRadiusOfView();
+  float getUpAngle();
+  float getCosUpAngle();
+  float getSinUpAngle();
+  int getScreenWidth();
+  int getScreenHeight();
+  Matrix4x4 getTransformToDeviceMatrix();
+  Matrix4x4 getTransformToScreenMatrix();
+  Resources getResources();
+  boolean getNightVisionMode();
+  SkyRegionMap.ActiveRegionData getActiveSkyRegions();
 }
 
 // TODO(jpowell): RenderState is a bad name.  This class is a grab-bag of
diff --git a/app/src/main/java/com/google/android/stardroid/renderer/util/SkyRegionMap.java b/app/src/main/java/com/google/android/stardroid/renderer/util/SkyRegionMap.java
index 765267b..a03b8f9 100644
--- a/app/src/main/java/com/google/android/stardroid/renderer/util/SkyRegionMap.java
+++ b/app/src/main/java/com/google/android/stardroid/renderer/util/SkyRegionMap.java
@@ -69,7 +69,7 @@ public class SkyRegionMap<RegionRenderingData> {
    * Interface for a factory that constructs a rendering data.
    */
   public interface RegionDataFactory<RegionRenderingData> {
-    public RegionRenderingData construct();
+    RegionRenderingData construct();
   }
 
   /**
@@ -434,7 +434,6 @@ public class SkyRegionMap<RegionRenderingData> {
           data.add(regionData);
         }
       }
-      return data;
     } else {
       for (int i = 0; i < REGION_CENTERS.length; i++) {
         // Need to specially compute the visible regions.
@@ -445,8 +444,8 @@ public class SkyRegionMap<RegionRenderingData> {
           }
         }
       }
-      return data;
     }
+    return data;
   }
 
   public Collection<RegionRenderingData> getDataForAllRegions() {
diff --git a/app/src/main/java/com/google/android/stardroid/search/PrefixStore.java b/app/src/main/java/com/google/android/stardroid/search/PrefixStore.java
index b33f6d4..3f5b479 100644
--- a/app/src/main/java/com/google/android/stardroid/search/PrefixStore.java
+++ b/app/src/main/java/com/google/android/stardroid/search/PrefixStore.java
@@ -63,8 +63,8 @@ public class PrefixStore {
 
   private void collect(TrieNode n, Collection<String> coll) {
     coll.addAll(n.results);
-    for (Character ch : n.children.keySet()) {
-      collect(n.children.get(ch), coll);
+    for (TrieNode trieNode : n.children.values()) {
+      collect(trieNode, coll);
     }
   }
 
diff --git a/app/src/main/java/com/google/android/stardroid/search/SearchTermsProvider.java b/app/src/main/java/com/google/android/stardroid/search/SearchTermsProvider.java
index 06dbf84..7ab627f 100644
--- a/app/src/main/java/com/google/android/stardroid/search/SearchTermsProvider.java
+++ b/app/src/main/java/com/google/android/stardroid/search/SearchTermsProvider.java
@@ -107,7 +107,7 @@ public class SearchTermsProvider extends ContentProvider {
     Log.d(TAG, "Got query for " + uri);
     if (!maybeInjectMe()) {
       return null;
-    };
+    }
     if (!TextUtils.isEmpty(selection)) {
       throw new IllegalArgumentException("selection not allowed for " + uri);
     }
@@ -117,17 +117,15 @@ public class SearchTermsProvider extends ContentProvider {
     if (!TextUtils.isEmpty(sortOrder)) {
       throw new IllegalArgumentException("sortOrder not allowed for " + uri);
     }
-    switch (uriMatcher.match(uri)) {
-      case SEARCH_SUGGEST:
-        String query = null;
-        if (uri.getPathSegments().size() > 1) {
-          query = uri.getLastPathSegment();
-        }
-        Log.d(TAG, "Got suggestions query for " + query);
-        return getSuggestions(query);
-      default:
-        throw new IllegalArgumentException("Unknown URL " + uri);
+    if (uriMatcher.match(uri) == SEARCH_SUGGEST) {
+      String query = null;
+      if (uri.getPathSegments().size() > 1) {
+        query = uri.getLastPathSegment();
+      }
+      Log.d(TAG, "Got suggestions query for " + query);
+      return getSuggestions(query);
     }
+    throw new IllegalArgumentException("Unknown URL " + uri);
   }
 
   private Cursor getSuggestions(String query) {
@@ -158,12 +156,10 @@ public class SearchTermsProvider extends ContentProvider {
    */
   @Override
   public String getType(Uri uri) {
-    switch (uriMatcher.match(uri)) {
-      case SEARCH_SUGGEST:
-        return SearchManager.SUGGEST_MIME_TYPE;
-      default:
-        throw new IllegalArgumentException("Unknown URL " + uri);
+    if (uriMatcher.match(uri) == SEARCH_SUGGEST) {
+      return SearchManager.SUGGEST_MIME_TYPE;
     }
+    throw new IllegalArgumentException("Unknown URL " + uri);
   }
 
   @Override
diff --git a/app/src/main/java/com/google/android/stardroid/source/Colorable.java b/app/src/main/java/com/google/android/stardroid/source/Colorable.java
index d820cb4..f61b3a3 100644
--- a/app/src/main/java/com/google/android/stardroid/source/Colorable.java
+++ b/app/src/main/java/com/google/android/stardroid/source/Colorable.java
@@ -25,5 +25,5 @@ public interface Colorable {
    * Returns the color (as an Android Color int) associated with the given
    * object.
    */
-  public int getColor();
+  int getColor();
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/ImageSource.java b/app/src/main/java/com/google/android/stardroid/source/ImageSource.java
index 6c9c638..72558d7 100644
--- a/app/src/main/java/com/google/android/stardroid/source/ImageSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/ImageSource.java
@@ -27,13 +27,13 @@ public interface ImageSource extends PositionSource {
   /**
    * Returns the image to be displayed at the specified point.
    */
-  public Bitmap getImage();
+  Bitmap getImage();
 
   // TODO(brent): talk to James to determine what's really needed here.
   
-  public float[] getVerticalCorner();
+  float[] getVerticalCorner();
   
-  public float[] getHorizontalCorner();
+  float[] getHorizontalCorner();
   
-  public boolean requiresBlending();
+  boolean requiresBlending();
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/LineSource.java b/app/src/main/java/com/google/android/stardroid/source/LineSource.java
index a1ce87f..27e2bcc 100644
--- a/app/src/main/java/com/google/android/stardroid/source/LineSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/LineSource.java
@@ -30,7 +30,7 @@ public interface LineSource extends Colorable {
   /**
    * Returns the width of the line to be drawn.
    */
-  public float getLineWidth();
+  float getLineWidth();
 
   // TODO(brent): Discuss with James to add solid, dashed, dotted, etc.
   
@@ -38,5 +38,5 @@ public interface LineSource extends Colorable {
    * Returns an ordered list of the vertices which should be used to draw a
    * polyline in the renderer.
    */
-  public List<GeocentricCoordinates> getVertices();
+  List<GeocentricCoordinates> getVertices();
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/PointSource.java b/app/src/main/java/com/google/android/stardroid/source/PointSource.java
index beaaac5..53a46b0 100644
--- a/app/src/main/java/com/google/android/stardroid/source/PointSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/PointSource.java
@@ -21,7 +21,7 @@ package com.google.android.stardroid.source;
  * @author Brent Bryan
  */
 public interface PointSource extends Colorable, PositionSource {
-  public enum Shape {
+  enum Shape {
     CIRCLE(0),
     STAR(1),
     ELLIPTICAL_GALAXY(2),
@@ -35,7 +35,7 @@ public interface PointSource extends Colorable, PositionSource {
 
     private final int imageIndex;
 
-    private Shape(int imageIndex) {
+    Shape(int imageIndex) {
       this.imageIndex = imageIndex;
     }
 
@@ -49,10 +49,10 @@ public interface PointSource extends Colorable, PositionSource {
    * Returns the size of the dot which should be drawn to represent this point
    * in the renderer.
    */
-  public int getSize();
+  int getSize();
 
   /**
    * Returns the Shape of the image used to render the point in the texture file.
    */
-  public Shape getPointShape();
+  Shape getPointShape();
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/PositionSource.java b/app/src/main/java/com/google/android/stardroid/source/PositionSource.java
index 5c62c3b..71e3a33 100644
--- a/app/src/main/java/com/google/android/stardroid/source/PositionSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/PositionSource.java
@@ -27,5 +27,5 @@ public interface PositionSource {
   /**
    * Returns the location of the source in Geocentric Euclidean coordinates.
    */
-  public GeocentricCoordinates getLocation();
+  GeocentricCoordinates getLocation();
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/RendererSource.java b/app/src/main/java/com/google/android/stardroid/source/RendererSource.java
index b61c4e6..3ef2b25 100644
--- a/app/src/main/java/com/google/android/stardroid/source/RendererSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/RendererSource.java
@@ -21,6 +21,6 @@ package com.google.android.stardroid.source;
  * @author Brent Bryan
  */
 public interface RendererSource {
-  public enum SourceType {POINT, LINE, TEXT, IMAGE}
+  enum SourceType {POINT, LINE, TEXT, IMAGE}
 
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/TextSource.java b/app/src/main/java/com/google/android/stardroid/source/TextSource.java
index a443202..7f2bfda 100644
--- a/app/src/main/java/com/google/android/stardroid/source/TextSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/TextSource.java
@@ -25,19 +25,19 @@ public interface TextSource extends Colorable, PositionSource {
   /**
    * Returns the text to be displayed at the specified location in the renderer.
    */
-  public String getText();
+  String getText();
 
   /**
    * Changes the text in this {@link TextSource}.
    */
-  public void setText(String newText);
+  void setText(String newText);
   
   /**
    * Returns the size of the font in points (e.g. 10, 12).
    */
-  public int getFontSize();
+  int getFontSize();
   
-  public float getOffset();
+  float getOffset();
   // TODO(brent): talk to James: can we add font, style info?
   // TODO(brent): can we specify label orientation?
 }
diff --git a/app/src/main/java/com/google/android/stardroid/source/impl/AbstractSource.java b/app/src/main/java/com/google/android/stardroid/source/impl/AbstractSource.java
index 8b2af9b..d4bcf98 100644
--- a/app/src/main/java/com/google/android/stardroid/source/impl/AbstractSource.java
+++ b/app/src/main/java/com/google/android/stardroid/source/impl/AbstractSource.java
@@ -34,7 +34,7 @@ public abstract class AbstractSource implements Colorable, PositionSource {
    *  defines how often it's provider expects its value to change.
    */
   public enum UpdateGranularity {
-    Second, Minute, Hour, Day, Year;
+    Second, Minute, Hour, Day, Year
   }
 
   public UpdateGranularity granularity;
diff --git a/app/src/main/java/com/google/android/stardroid/source/impl/TextSourceImpl.java b/app/src/main/java/com/google/android/stardroid/source/impl/TextSourceImpl.java
index 6c08a58..4e27635 100644
--- a/app/src/main/java/com/google/android/stardroid/source/impl/TextSourceImpl.java
+++ b/app/src/main/java/com/google/android/stardroid/source/impl/TextSourceImpl.java
@@ -43,7 +43,7 @@ public class TextSourceImpl extends AbstractSource implements TextSource {
 
     super(coords, color);
     this.label = Preconditions.checkNotNull(label);
-    Preconditions.checkArgument(!"".equals(label.trim()));
+    Preconditions.checkArgument(!label.trim().isEmpty());
 
     this.offset = offset;
     this.fontSize = fontSize;
diff --git a/app/src/main/java/com/google/android/stardroid/touch/DragRotateZoomGestureDetector.java b/app/src/main/java/com/google/android/stardroid/touch/DragRotateZoomGestureDetector.java
index 1f5d7bc..6326a82 100644
--- a/app/src/main/java/com/google/android/stardroid/touch/DragRotateZoomGestureDetector.java
+++ b/app/src/main/java/com/google/android/stardroid/touch/DragRotateZoomGestureDetector.java
@@ -41,9 +41,9 @@ public class DragRotateZoomGestureDetector {
 
   private static final String TAG = MiscUtil.getTag(DragRotateZoomGestureDetector.class);
 
-  private DragRotateZoomGestureDetectorListener listener;;
+  private DragRotateZoomGestureDetectorListener listener;
 
-  public DragRotateZoomGestureDetector(DragRotateZoomGestureDetectorListener listener) {
+    public DragRotateZoomGestureDetector(DragRotateZoomGestureDetectorListener listener) {
     this.listener = listener;
   }
 
diff --git a/app/src/main/java/com/google/android/stardroid/units/LatLong.java b/app/src/main/java/com/google/android/stardroid/units/LatLong.java
index f3f96f2..27b6aa2 100644
--- a/app/src/main/java/com/google/android/stardroid/units/LatLong.java
+++ b/app/src/main/java/com/google/android/stardroid/units/LatLong.java
@@ -54,10 +54,10 @@ public class LatLong {
    */
   public float distanceFrom(LatLong other) {
     // Some misuse of the astronomy math classes
-    GeocentricCoordinates otherPnt = GeocentricCoordinates.getInstance(other.getLongitude(),
-            other.getLatitude());
-    GeocentricCoordinates thisPnt = GeocentricCoordinates.getInstance(this.getLongitude(),
-            this.getLatitude());
+    GeocentricCoordinates otherPnt = GeocentricCoordinates.getInstance(other.longitude,
+            other.latitude);
+    GeocentricCoordinates thisPnt = GeocentricCoordinates.getInstance(this.longitude,
+            this.latitude);
     float cosTheta = Geometry.cosineSimilarity(thisPnt, otherPnt);
     return MathUtil.acos(cosTheta) * 180f / MathUtil.PI;
   }
@@ -74,6 +74,6 @@ public class LatLong {
    * Returns the 'floored' mod assuming n>0.
    */
   private static float flooredMod(float a, float n){
-    return a<0 ? (a%n + n)%n : a%n;
+    return (a < 0 ? a % n + n : a) %n;
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/units/RaDec.java b/app/src/main/java/com/google/android/stardroid/units/RaDec.java
index 9d108a4..50d4962 100644
--- a/app/src/main/java/com/google/android/stardroid/units/RaDec.java
+++ b/app/src/main/java/com/google/android/stardroid/units/RaDec.java
@@ -30,10 +30,8 @@ public class RaDec {
   }
 
   @Override public String toString() {
-    StringBuffer sb = new StringBuffer();
-    sb.append("RA: " + ra + " degrees\n");
-    sb.append("Dec: " + dec + " degrees\n");
-    return sb.toString();
+    return "RA: " + ra + " degrees\n" +
+            "Dec: " + dec + " degrees\n";
   }
 
   public static RaDec calculateRaDecDist(HeliocentricCoordinates coords) {
diff --git a/app/src/main/java/com/google/android/stardroid/util/AnalyticsInterface.java b/app/src/main/java/com/google/android/stardroid/util/AnalyticsInterface.java
index c55a460..9ff6064 100644
--- a/app/src/main/java/com/google/android/stardroid/util/AnalyticsInterface.java
+++ b/app/src/main/java/com/google/android/stardroid/util/AnalyticsInterface.java
@@ -16,11 +16,8 @@ package com.google.android.stardroid.util;
 
 import android.os.Bundle;
 
-import com.google.android.stardroid.StardroidApplication;
 import com.google.firebase.analytics.FirebaseAnalytics;
 
-import javax.inject.Inject;
-
 /**
  * Encapsulates interactions with Firebase Analytics, allowing it to be
  * disabled etc.
@@ -28,46 +25,46 @@ import javax.inject.Inject;
  * @author John Taylor
  */
 public interface AnalyticsInterface {
-  static final String PREF_KEY = "enable_analytics";
+  String PREF_KEY = "enable_analytics";
 
   // User properties
-  static final String NEW_USER = "new_user_prop";  // Might be the same as the build-in prop - let's check
-  static final String DEVICE_SENSORS = "device_sensors_prop"; // Alphabetically ordered list of relevant sensors
-  static final String DEVICE_SENSORS_NONE = "none";
-  static final String DEVICE_SENSORS_ACCELEROMETER = "accel";
-  static final String DEVICE_SENSORS_GYRO = "gyro";
-  static final String DEVICE_SENSORS_MAGNETIC = "mag";
-  static final String DEVICE_SENSORS_ROTATION = "rot";
+  String NEW_USER = "new_user_prop";  // Might be the same as the build-in prop - let's check
+  String DEVICE_SENSORS = "device_sensors_prop"; // Alphabetically ordered list of relevant sensors
+  String DEVICE_SENSORS_NONE = "none";
+  String DEVICE_SENSORS_ACCELEROMETER = "accel";
+  String DEVICE_SENSORS_GYRO = "gyro";
+  String DEVICE_SENSORS_MAGNETIC = "mag";
+  String DEVICE_SENSORS_ROTATION = "rot";
   // Phone claims to have a sensor, but then doesn't allow registration of a listener.
-  static final String SENSOR_LIAR = "sensor_liar_prop";
+  String SENSOR_LIAR = "sensor_liar_prop";
 
   // Events & Categories
-  static final String TOS_ACCEPTED_EVENT = "TOS_accepted_ev";
-  static final String TOS_REJECTED_EVENT = "TOS_rejected_ev";
-  static final String PREFERENCE_BUTTON_TOGGLE_EVENT = "preference_button_toggled_ev";
-  static final String PREFERENCE_BUTTON_TOGGLE_VALUE = "preference_toggle_value";
-  static final String PREFERENCE_CHANGE_EVENT = "preference_change_ev";
-  static final String PREFERENCE_CHANGE_EVENT_VALUE = "value";
-  static final String TOGGLED_MANUAL_MODE_LABEL = "toggled_manual_mode_ev";
-  static final String MENU_ITEM_EVENT = "menu_item_pressed_ev";
-  static final String MENU_ITEM_EVENT_VALUE = "menu_item";
-  static final String TOGGLED_NIGHT_MODE_LABEL = "night_mode";
-  static final String SEARCH_REQUESTED_LABEL = "search_requested";
-  static final String SETTINGS_OPENED_LABEL = "settings_opened";
-  static final String HELP_OPENED_LABEL = "help_opened";
-  static final String CALIBRATION_OPENED_LABEL = "calibration_opened";
-  static final String TIME_TRAVEL_OPENED_LABEL = "time_travel_opened";
-  static final String GALLERY_OPENED_LABEL = "gallery_opened";
-  static final String TOS_OPENED_LABEL = "TOS_opened";
-  static final String DIAGNOSTICS_OPENED_LABEL = "diagnostics_opened";
-  static final String SEARCH_EVENT = FirebaseAnalytics.Event.SEARCH;
-  static final String SEARCH_TERM = FirebaseAnalytics.Param.SEARCH_TERM;
-  static final String SEARCH_SUCCESS = "search_success";
-  static final String START_EVENT = "start_up_event_ev";
-  static final String START_EVENT_HOUR = "hour";
+  String TOS_ACCEPTED_EVENT = "TOS_accepted_ev";
+  String TOS_REJECTED_EVENT = "TOS_rejected_ev";
+  String PREFERENCE_BUTTON_TOGGLE_EVENT = "preference_button_toggled_ev";
+  String PREFERENCE_BUTTON_TOGGLE_VALUE = "preference_toggle_value";
+  String PREFERENCE_CHANGE_EVENT = "preference_change_ev";
+  String PREFERENCE_CHANGE_EVENT_VALUE = "value";
+  String TOGGLED_MANUAL_MODE_LABEL = "toggled_manual_mode_ev";
+  String MENU_ITEM_EVENT = "menu_item_pressed_ev";
+  String MENU_ITEM_EVENT_VALUE = "menu_item";
+  String TOGGLED_NIGHT_MODE_LABEL = "night_mode";
+  String SEARCH_REQUESTED_LABEL = "search_requested";
+  String SETTINGS_OPENED_LABEL = "settings_opened";
+  String HELP_OPENED_LABEL = "help_opened";
+  String CALIBRATION_OPENED_LABEL = "calibration_opened";
+  String TIME_TRAVEL_OPENED_LABEL = "time_travel_opened";
+  String GALLERY_OPENED_LABEL = "gallery_opened";
+  String TOS_OPENED_LABEL = "TOS_opened";
+  String DIAGNOSTICS_OPENED_LABEL = "diagnostics_opened";
+  String SEARCH_EVENT = FirebaseAnalytics.Event.SEARCH;
+  String SEARCH_TERM = FirebaseAnalytics.Param.SEARCH_TERM;
+  String SEARCH_SUCCESS = "search_success";
+  String START_EVENT = "start_up_event_ev";
+  String START_EVENT_HOUR = "hour";
 
-  static final String SESSION_LENGTH_EVENT = "session_length_ev";
-  static final String SESSION_LENGTH_TIME_VALUE = "session_length";
+  String SESSION_LENGTH_EVENT = "session_length_ev";
+  String SESSION_LENGTH_TIME_VALUE = "session_length";
 
   void setEnabled(boolean enabled);
 
diff --git a/app/src/main/java/com/google/android/stardroid/util/Geometry.java b/app/src/main/java/com/google/android/stardroid/util/Geometry.java
index 864415a..c25fe5a 100644
--- a/app/src/main/java/com/google/android/stardroid/util/Geometry.java
+++ b/app/src/main/java/com/google/android/stardroid/util/Geometry.java
@@ -106,11 +106,10 @@ public class Geometry {
   public static GeocentricCoordinates getXYZ(RaDec raDec) {
     float raRadians = raDec.ra * DEGREES_TO_RADIANS;
     float decRadians = raDec.dec * DEGREES_TO_RADIANS;
-    GeocentricCoordinates result = new GeocentricCoordinates(
+    return new GeocentricCoordinates(
         MathUtil.cos(raRadians) * MathUtil.cos(decRadians),
         MathUtil.sin(raRadians) * MathUtil.cos(decRadians),
         MathUtil.sin(decRadians));
-    return result;
   }
 
   /**
@@ -175,9 +174,8 @@ public class Geometry {
     float yzm = y * zm;
     float zxm = z * xm;
 
-    Matrix33 rotationMatrix = new Matrix33(x * xm + cosD, xym + zs, zxm - ys,
+    return new Matrix33(x * xm + cosD, xym + zs, zxm - ys,
                                            xym - zs, y * ym + cosD, yzm + xs,
                                            zxm + ys, yzm - xs, z * zm + cosD);
-    return rotationMatrix;
   }
 }
diff --git a/app/src/main/java/com/google/android/stardroid/util/Matrix4x4.java b/app/src/main/java/com/google/android/stardroid/util/Matrix4x4.java
index 1cc0257..bc8e271 100644
--- a/app/src/main/java/com/google/android/stardroid/util/Matrix4x4.java
+++ b/app/src/main/java/com/google/android/stardroid/util/Matrix4x4.java
@@ -22,9 +22,7 @@ public class Matrix4x4 {
 
   public Matrix4x4(float[] contents) {
     assert(contents.length == 16);
-    for (int i = 0; i < 16; ++i) {
-      mValues[i] = contents[i];
-    }
+    System.arraycopy(contents, 0, mValues, 0, 16);
   }
 
   public static Matrix4x4 createIdentity() {
diff --git a/app/src/main/java/com/google/android/stardroid/util/TimeUtil.java b/app/src/main/java/com/google/android/stardroid/util/TimeUtil.java
index 7f4d808..c70c4e4 100644
--- a/app/src/main/java/com/google/android/stardroid/util/TimeUtil.java
+++ b/app/src/main/java/com/google/android/stardroid/util/TimeUtil.java
@@ -55,11 +55,10 @@ public class TimeUtil {
     int month = cal.get(Calendar.MONTH) + 1;
     int day = cal.get(Calendar.DAY_OF_MONTH);
 
-    double jd = 367.0 * year - Math.floor(7.0 * (year
+    return 367.0 * year - Math.floor(7.0 * (year
                     + Math.floor((month + 9.0) / 12.0)) / 4.0)
                 + Math.floor(275.0 * month / 9.0) + day
                 + 1721013.5 + hour/24.0;
-    return jd;
   }
   
   /**
diff --git a/app/src/main/java/com/google/android/stardroid/views/source/ViewSourceListener.java b/app/src/main/java/com/google/android/stardroid/views/source/ViewSourceListener.java
index 0f67403..ab302fb 100644
--- a/app/src/main/java/com/google/android/stardroid/views/source/ViewSourceListener.java
+++ b/app/src/main/java/com/google/android/stardroid/views/source/ViewSourceListener.java
@@ -39,7 +39,7 @@ public interface ViewSourceListener {
    * @param id a unique identify integer for this set of point sources.
    * @param s a list of PointSources which should be used.
    */
-  public void setPointSources(int id, List<PointSource> s);
+  void setPointSources(int id, List<PointSource> s);
 
   /**
    * Sets all of the TextSources for a specific id in response to one or more
@@ -50,7 +50,7 @@ public interface ViewSourceListener {
    * @param id a unique identify integer for this set of point sources.
    * @param s a list of TextSources which should be used.
    */
-  public void setTextSources(int id, List<TextSource> s);
+  void setTextSources(int id, List<TextSource> s);
 
   /**
    * Sets all of the ImageSources for a specific id in response to one or more
@@ -61,7 +61,7 @@ public interface ViewSourceListener {
    * @param id a unique identify integer for this set of point sources.
    * @param s a list of ImageSources which should be used.
    */
-  public void setImageSources(int id, List<ImageSource> s);
+  void setImageSources(int id, List<ImageSource> s);
 
   /**
    * Sets all of the PolyLineSources for a specific id in response to one or more
@@ -72,5 +72,5 @@ public interface ViewSourceListener {
    * @param id a unique identify integer for this set of point sources.
    * @param s a list of PolyLineSources which should be used.
    */
-  public void setPolyLineSources(int id, List<LineSource> s);
+  void setPolyLineSources(int id, List<LineSource> s);
 }
diff --git a/tools/src/main/java/com/google/android/stardroid/data/AbstractAsciiProtoWriter.java b/tools/src/main/java/com/google/android/stardroid/data/AbstractAsciiProtoWriter.java
index 2e6e57d..8e9f540 100644
--- a/tools/src/main/java/com/google/android/stardroid/data/AbstractAsciiProtoWriter.java
+++ b/tools/src/main/java/com/google/android/stardroid/data/AbstractAsciiProtoWriter.java
@@ -68,7 +68,7 @@ public abstract class AbstractAsciiProtoWriter {
     String line;
     while ((line = in.readLine()) != null) {
       line = line.trim();
-      if (line.equals("")) {
+      if (line.isEmpty()) {
         continue;
       }
 
diff --git a/tools/src/main/java/com/google/android/stardroid/data/Main.java b/tools/src/main/java/com/google/android/stardroid/data/Main.java
index 4f9a4f6..79fe57e 100644
--- a/tools/src/main/java/com/google/android/stardroid/data/Main.java
+++ b/tools/src/main/java/com/google/android/stardroid/data/Main.java
@@ -23,9 +23,7 @@ public class Main {
     }
     Command command = Command.valueOf(in[0]);
     String[] args = new String[in.length - 1];
-    for (int cnt = 1; cnt < in.length; cnt++) {
-      args[cnt - 1] = in[cnt];
-    }
+    System.arraycopy(in, 1, args, 0, in.length - 1);
     switch (command) {
       case GenStars:
         StellarAsciiProtoWriter.main(args);
diff --git a/tools/src/main/java/com/google/android/stardroid/util/StarAttributeCalculator.java b/tools/src/main/java/com/google/android/stardroid/util/StarAttributeCalculator.java
index f46e151..4fff619 100644
--- a/tools/src/main/java/com/google/android/stardroid/util/StarAttributeCalculator.java
+++ b/tools/src/main/java/com/google/android/stardroid/util/StarAttributeCalculator.java
@@ -31,7 +31,7 @@ public class StarAttributeCalculator {
 
     private final int offset;
 
-    private Channel(int offset) {
+    Channel(int offset) {
       this.offset = offset;
     }
 
