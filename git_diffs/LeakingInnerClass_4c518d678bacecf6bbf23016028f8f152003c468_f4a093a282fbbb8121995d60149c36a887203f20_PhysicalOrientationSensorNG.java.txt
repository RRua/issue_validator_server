diff --git a/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java b/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java
index 4e7f8a4..aa7cfa0 100644
--- a/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java
+++ b/app/src/main/java/com/gabm/tapandturn/AbsoluteOrientation.java
@@ -28,6 +28,22 @@ public class AbsoluteOrientation {
         return new RelativeOrientation(diff(_enum, to));
     }
 
+    public boolean isPortrait() {
+        return this.equals(Enum.Portrait);
+    }
+
+    public boolean isReversePortrait() {
+        return this.equals(Enum.Reverse_Portrait);
+    }
+
+    public boolean isLandscape() {
+        return this.equals(Enum.Landscape);
+    }
+
+    public boolean isReverseLandscape() {
+        return this.equals(Enum.Reverse_Landscape);
+    }
+
     public boolean equals(AbsoluteOrientation.Enum otherEnum) {
         return _enum == otherEnum;
     }
diff --git a/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java b/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java
similarity index 82%
rename from app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java
rename to app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java
index 323c1a0..727bc19 100644
--- a/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensorNG.java
+++ b/app/src/main/java/com/gabm/tapandturn/sensors/PhysicalOrientationSensor.java
@@ -1,7 +1,6 @@
 package com.gabm.tapandturn.sensors;
 
 import android.content.Context;
-import android.content.pm.ActivityInfo;
 import android.view.OrientationEventListener;
 
 import com.gabm.tapandturn.AbsoluteOrientation;
@@ -13,21 +12,21 @@ import com.gabm.tapandturn.settings.SettingsKeys;
  */
 
 // borrowed from: http://stackoverflow.com/questions/9021890/get-phone-orientation-but-fix-screen-orientation-to-portrait
-public class PhysicalOrientationSensorNG extends OrientationEventListener {
+public class PhysicalOrientationSensor extends OrientationEventListener {
 
     private AbsoluteOrientation curScreenOrientation = new AbsoluteOrientation(AbsoluteOrientation.Enum.Portrait);
     private OrientationListenerNG listener;
 
-    public PhysicalOrientationSensorNG(Context context, int rate, OrientationListenerNG listener) {
+    public PhysicalOrientationSensor(Context context, int rate, OrientationListenerNG listener) {
         super(context, rate);
         setListener(listener);
     }
 
-    public PhysicalOrientationSensorNG(Context context, int rate) {
+    public PhysicalOrientationSensor(Context context, int rate) {
         super(context, rate);
     }
 
-    public PhysicalOrientationSensorNG(Context context) {
+    public PhysicalOrientationSensor(Context context) {
         super(context);
     }
 
@@ -59,7 +58,7 @@ public class PhysicalOrientationSensorNG extends OrientationEventListener {
 
             curScreenOrientation = newOrientation;
             if(listener != null){
-                listener.onOrientationChangeNG(curScreenOrientation);
+                listener.onOrientationChange(curScreenOrientation);
             }
         }
     }
@@ -73,6 +72,6 @@ public class PhysicalOrientationSensorNG extends OrientationEventListener {
     }
 
     public interface OrientationListenerNG {
-        void onOrientationChangeNG(AbsoluteOrientation screenOrientation);
+        void onOrientationChange(AbsoluteOrientation screenOrientation);
     }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java b/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java
index e3015dd..704f6ed 100644
--- a/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java
+++ b/app/src/main/java/com/gabm/tapandturn/sensors/WindowManagerSensor.java
@@ -12,14 +12,8 @@ import com.gabm.tapandturn.RelativeOrientation;
 
 public class WindowManagerSensor {
 
-    private WindowManager _windowManager;
-
-    public WindowManagerSensor(WindowManager windowManager) {
-        _windowManager = windowManager;
-    }
-
-    public AbsoluteOrientation query() {
-        int rawResult = _windowManager.getDefaultDisplay().getRotation();
+    public static AbsoluteOrientation query(WindowManager windowManager) {
+        int rawResult = windowManager.getDefaultDisplay().getRotation();
 
         if (rawResult == Surface.ROTATION_90)
             return new AbsoluteOrientation(AbsoluteOrientation.Enum.Landscape);
diff --git a/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java b/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
index 26bb6d2..bd800eb 100644
--- a/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
+++ b/app/src/main/java/com/gabm/tapandturn/services/ServiceRotationControlService.java
@@ -6,7 +6,6 @@ import android.app.PendingIntent;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.ActivityInfo;
 import android.hardware.SensorManager;
 import android.os.Binder;
 import android.os.IBinder;
@@ -16,8 +15,7 @@ import android.view.WindowManager;
 import android.widget.Toast;
 
 import com.gabm.tapandturn.AbsoluteOrientation;
-import com.gabm.tapandturn.sensors.PhysicalOrientationSensorNG;
-import com.gabm.tapandturn.sensors.WindowManagerSensor;
+import com.gabm.tapandturn.sensors.PhysicalOrientationSensor;
 import com.gabm.tapandturn.ui.MainActivity;
 import com.gabm.tapandturn.R;
 import com.gabm.tapandturn.ui.ScreenRotatorOverlay;
@@ -27,12 +25,11 @@ import com.gabm.tapandturn.ui.OrientationButtonOverlay;
  * Created by gabm on 30.10.16.
  */
 
-public class ServiceRotationControlService extends Service implements PhysicalOrientationSensorNG.OrientationListenerNG, View.OnClickListener{
+public class ServiceRotationControlService extends Service implements PhysicalOrientationSensor.OrientationListenerNG, View.OnClickListener{
     private NotificationManager mNM;
     private Notification.Builder curNotificationBuilder = null;
 
-    private WindowManagerSensor windowManagerSensor;
-    private PhysicalOrientationSensorNG physicalOrientationSensorNG;
+    private PhysicalOrientationSensor physicalOrientationSensor;
     private ScreenRotatorOverlay screenRotatorOverlay;
     private OrientationButtonOverlay orientationButtonOverlay;
 
@@ -42,43 +39,25 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
     private int NOTIFICATION = R.string.orientation_service_started;
     private AbsoluteOrientation handlerScreenOrientation;
 
-    /*
-    @Override
-    public void onOrientationChange(int newScreenOrientation) {
-        Log.i("AbsoluteOrientation", String.valueOf(newScreenOrientation));
-
-        if (!initialized) {
-            initialize(newScreenOrientation);
-            return;
-        }
-
-        int oldScreenOrientation = screenRotatorOverlay.getCurrentlySetScreenOrientation();
-        if (newScreenOrientation != oldScreenOrientation) {
-
-            orientationButtonOverlay.show(oldScreenOrientation, newScreenOrientation);
-            handlerScreenOrientation = newScreenOrientation;
-        }
-        else {
-            orientationButtonOverlay.hide();
-        }
-    }*/
 
     @Override
     public void onClick(View view) {
         orientationButtonOverlay.hide();
-        if (handlerScreenOrientation.equals(physicalOrientationSensorNG.getCurScreenOrientation())) {
-            screenRotatorOverlay.changeOrientation(handlerScreenOrientation);
+        if (handlerScreenOrientation.equals(physicalOrientationSensor.getCurScreenOrientation())) {
+            screenRotatorOverlay.forceOrientation(handlerScreenOrientation);
 
-            if (screenRotatorOverlay.isDefaultOrientation(handlerScreenOrientation))
-                curNotificationBuilder.setContentText(getText(R.string.orientation_service_started) + ": "  + getText(R.string.no_screen_overlay));
-            else
-                curNotificationBuilder.setContentText(getText(R.string.orientation_service_started) + ": "  + getText(R.string.screen_overlay));
+            curNotificationBuilder.setContentText(getText(R.string.orientation_service_started) + ": "  + getText(R.string.screen_overlay));
 
             mNM.notify(NOTIFICATION, curNotificationBuilder.build());
         }
     }
 
-    private void initialize() {
+    @Override
+    public void onCreate() {
+        mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
+
+        physicalOrientationSensor = new PhysicalOrientationSensor(getApplicationContext(), SensorManager.SENSOR_DELAY_NORMAL, this);
+        physicalOrientationSensor.enable();
 
         // Initialize layout params
         WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
@@ -90,18 +69,6 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         showNotification();
     }
 
-    @Override
-    public void onCreate() {
-        mNM = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
-
-        physicalOrientationSensorNG = new PhysicalOrientationSensorNG(getApplicationContext(), SensorManager.SENSOR_DELAY_NORMAL, this);
-        physicalOrientationSensorNG.enable();
-
-        windowManagerSensor = new WindowManagerSensor((WindowManager) getSystemService(WINDOW_SERVICE));
-
-        initialize();
-    }
-
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
@@ -116,7 +83,7 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         screenRotatorOverlay.removeView();
         orientationButtonOverlay.hide();
 
-        physicalOrientationSensorNG.disable();
+        physicalOrientationSensor.disable();
 
         // Cancel the persistent notification.
         mNM.cancel(NOTIFICATION);
@@ -145,7 +112,7 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
         curNotificationBuilder.setSmallIcon(R.mipmap.ic_screen_rotation_black_48dp)  // the status icon
                 .setTicker(text)  // the status text
                 .setWhen(System.currentTimeMillis())  // the time stamp
-                .setContentTitle(getText(R.string.orientation_service_label))  // the label of the entry
+                .setContentTitle(getText(R.string.screen_overlay))  // the label of the entry
                 .setContentText(text)  // the contents of the entry
                 .setContentIntent(contentIntent)  // The intent to send when the entry is clicked
                 .setPriority(Notification.PRIORITY_MIN)
@@ -157,13 +124,12 @@ public class ServiceRotationControlService extends Service implements PhysicalOr
     }
 
     @Override
-    public void onOrientationChangeNG(AbsoluteOrientation screenOrientation) {
-        Log.i("OrientationChangeNG", screenOrientation.toString());
-        Log.i("WindowManagerSensor", windowManagerSensor.query().toString());
+    public void onOrientationChange(AbsoluteOrientation newOrientation) {
+        Log.i("OrientationChangeNG", newOrientation.toString());
 
-        if (!screenOrientation.equals(screenRotatorOverlay.getCurrentlySetScreenOrientation())) {
-            handlerScreenOrientation = screenOrientation;
-            orientationButtonOverlay.show(screenRotatorOverlay.getCurrentlySetScreenOrientation().toActivityInfoOrientation(), screenOrientation.toActivityInfoOrientation());
+        if (!newOrientation.equals(screenRotatorOverlay.getCurrentlySetScreenOrientation())) {
+            handlerScreenOrientation = newOrientation;
+            orientationButtonOverlay.show(screenRotatorOverlay.getCurrentlySetScreenOrientation(), newOrientation);
         }
     }
 
diff --git a/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java b/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
index 371f7b6..b194799 100644
--- a/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
+++ b/app/src/main/java/com/gabm/tapandturn/ui/OrientationButtonOverlay.java
@@ -11,6 +11,7 @@ import android.view.View;
 import android.view.WindowManager;
 import android.widget.ImageButton;
 
+import com.gabm.tapandturn.AbsoluteOrientation;
 import com.gabm.tapandturn.R;
 import com.gabm.tapandturn.TapAndTurnApplication;
 import com.gabm.tapandturn.settings.SettingsKeys;
@@ -45,7 +46,7 @@ public class OrientationButtonOverlay {
         timeoutHandler = new Handler();
     }
 
-    public void show(int oldOrientation, int newOrientation) {
+    public void show(AbsoluteOrientation oldOrientation, AbsoluteOrientation newOrientation) {
         if (imageButton.getParent() != null)
             curWindowManager.removeView(imageButton);
 
@@ -67,79 +68,79 @@ public class OrientationButtonOverlay {
         timeoutHandler.postDelayed(hideButtonRunnable, TapAndTurnApplication.settings.getInt(SettingsKeys.ICONTIMEOUT, 4000));
     }
 
-    private int getButtonAlignment(int oldScreenOrientation, int newScreenOrientation, boolean leftHanded) {
+    private int getButtonAlignment(AbsoluteOrientation oldScreenOrientation, AbsoluteOrientation newScreenOrientation, boolean leftHanded) {
         if (leftHanded)
             return getButtonAlignmentLeftHanded(oldScreenOrientation, newScreenOrientation);
         else
             return getButtonAlignmentRightHanded(oldScreenOrientation, newScreenOrientation);
     }
 
-    private int getButtonAlignmentLeftHanded(int oldScreenOrientation, int newScreenOrientation) {
+    private int getButtonAlignmentLeftHanded(AbsoluteOrientation oldScreenOrientation, AbsoluteOrientation newScreenOrientation) {
         Log.i("OrientationChange:", "right handed, old: " + oldScreenOrientation + " new: " + newScreenOrientation);
 
 
         // coming from portrait
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
+        if (oldScreenOrientation.isPortrait()) {
+            if (newScreenOrientation.isLandscape()) {
                 return Gravity.TOP | Gravity.RIGHT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE) {
+            if (newScreenOrientation.isReverseLandscape()) {
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT){
+            if (newScreenOrientation.isReversePortrait()){
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
         }
 
         // coming from landscape
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT){
+        if (oldScreenOrientation.isLandscape()) {
+            if (newScreenOrientation.isPortrait()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT) {
+            if (newScreenOrientation.isReversePortrait()) {
                 return Gravity.TOP | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE){
+            if (newScreenOrientation.isReverseLandscape()){
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
         }
 
         // coming from reverse landscape
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT){
+        if (oldScreenOrientation.isReverseLandscape()) {
+            if (newScreenOrientation.isPortrait()){
                 return Gravity.TOP | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT){
+            if (newScreenOrientation.isReversePortrait()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE){
+            if (newScreenOrientation.isLandscape()){
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
         }
 
         // coming from reverse portrait
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE){
+        if (oldScreenOrientation.isReversePortrait()) {
+            if (newScreenOrientation.isReverseLandscape()){
                 return Gravity.TOP | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE){
+            if (newScreenOrientation.isLandscape()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
+            if (newScreenOrientation.isPortrait()) {
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
         }
@@ -147,72 +148,72 @@ public class OrientationButtonOverlay {
         return Gravity.CENTER;
     }
 
-    private int getButtonAlignmentRightHanded(int oldScreenOrientation, int newScreenOrientation) {
+    private int getButtonAlignmentRightHanded(AbsoluteOrientation oldScreenOrientation, AbsoluteOrientation newScreenOrientation) {
         Log.i("OrientationChange:", "left handed, old: " + oldScreenOrientation + " new: " + newScreenOrientation);
 
 
         // coming from portrait
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
+        if (oldScreenOrientation.isPortrait()) {
+            if (newScreenOrientation.isLandscape()) {
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE) {
+            if (newScreenOrientation.isReverseLandscape()) {
                 return Gravity.TOP | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT){
+            if (newScreenOrientation.isReversePortrait()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
         }
 
         // coming from landscape
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT){
+        if (oldScreenOrientation.isLandscape()) {
+            if (newScreenOrientation.isPortrait()){
                 return Gravity.TOP | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT) {
+            if (newScreenOrientation.isReversePortrait()) {
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE){
+            if (newScreenOrientation.isReverseLandscape()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
         }
 
         // coming from reverse landscape
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT){
+        if (oldScreenOrientation.isReverseLandscape()) {
+            if (newScreenOrientation.isPortrait()){
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT){
+            if (newScreenOrientation.isReverseLandscape()){
                 return Gravity.TOP | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE){
+            if (newScreenOrientation.isLandscape()){
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
 
         }
 
         // coming from reverse portrait
-        if (oldScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT) {
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE){
+        if (oldScreenOrientation.isReversePortrait()) {
+            if (newScreenOrientation.isReverseLandscape()){
                 return Gravity.BOTTOM | Gravity.RIGHT;
             }
 
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE){
+            if (newScreenOrientation.isLandscape()){
                 return Gravity.TOP | Gravity.LEFT;
             }
 
-            if (newScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {
+            if (newScreenOrientation.isPortrait()) {
                 return Gravity.BOTTOM | Gravity.LEFT;
             }
         }
diff --git a/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java b/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
index ed628c5..5ba82e6 100644
--- a/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
+++ b/app/src/main/java/com/gabm/tapandturn/ui/ScreenRotatorOverlay.java
@@ -1,8 +1,6 @@
 package com.gabm.tapandturn.ui;
 
 import android.content.Context;
-import android.content.pm.ActivityInfo;
-import android.content.res.Configuration;
 import android.graphics.PixelFormat;
 import android.util.Log;
 import android.view.WindowManager;
@@ -19,39 +17,29 @@ public class ScreenRotatorOverlay {
     private LinearLayout dummyLayout;
     private WindowManager curWindowManager;
     private AbsoluteOrientation currentlySetScreenOrientation ;
-    private WindowManagerSensor windowManagerSensor;
 
     public ScreenRotatorOverlay(Context context, WindowManager windowManager) {
         dummyLayout = new LinearLayout(context);
         curWindowManager = windowManager;
-        windowManagerSensor = new WindowManagerSensor(windowManager);
-        currentlySetScreenOrientation = windowManagerSensor.query();
-    }
+        currentlySetScreenOrientation = WindowManagerSensor.query(windowManager);
 
-    public boolean isDefaultOrientation(AbsoluteOrientation orientation) {
-        return windowManagerSensor.query().equals(orientation);
+        forceOrientation(currentlySetScreenOrientation);
     }
+
     public AbsoluteOrientation getCurrentlySetScreenOrientation() {
         return currentlySetScreenOrientation;
     }
 
-    public void changeOrientation(AbsoluteOrientation orientation) {
+    public void forceOrientation(AbsoluteOrientation orientation) {
         removeView();
 
-        // if requested orientation is different from the device configured orientation
-        // then enforece the new rotation by adding an overlay
-       // if (!isDefaultOrientation(orientation)) {
-
-            Log.i("Overlay", "Adding for " + orientation.toString());
+        Log.i("Overlay", "Adding for " + orientation.toString());
 
-            WindowManager.LayoutParams dummyParams = new WindowManager.LayoutParams(WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, 0, PixelFormat.RGBA_8888);
-            dummyParams.screenOrientation = orientation.toActivityInfoOrientation();
+        WindowManager.LayoutParams dummyParams = new WindowManager.LayoutParams(WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, 0, PixelFormat.RGBA_8888);
+        dummyParams.screenOrientation = orientation.toActivityInfoOrientation();
 
-            curWindowManager.addView(dummyLayout, dummyParams);
+        curWindowManager.addView(dummyLayout, dummyParams);
 
-        /*} else {
-            Log.i("Overlay", "Not adding anything");
-        }*/
 
         currentlySetScreenOrientation = orientation;
     }
