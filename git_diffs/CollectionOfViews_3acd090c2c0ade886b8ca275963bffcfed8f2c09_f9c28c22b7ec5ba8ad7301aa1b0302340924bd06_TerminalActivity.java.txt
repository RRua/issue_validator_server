diff --git a/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java b/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java
index c80c4c8a..d61b9ea3 100644
--- a/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java
+++ b/app/src/main/java/com/gianlu/aria2app/Main/MainCardAdapter.java
@@ -230,7 +230,7 @@ public class MainCardAdapter extends RecyclerView.Adapter<CardViewHolder> {
         holder.expand.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                Utils.animateCollapsingArrowBellows((ImageButton) view, isExpanded(holder.details));
+                CommonUtils.animateCollapsingArrowBellows((ImageButton) view, isExpanded(holder.details));
 
                 if (isExpanded(holder.details)) {
                     collapse(holder.details);
diff --git a/app/src/main/java/com/gianlu/aria2app/MainActivity.java b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
index e3e7287c..7ba8e9fa 100644
--- a/app/src/main/java/com/gianlu/aria2app/MainActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/MainActivity.java
@@ -197,7 +197,6 @@ public class MainActivity extends AppCompatActivity {
                                         } else {
                                             //noinspection deprecation
                                             box.addView(CommonUtils.fastTextView(MainActivity.this, Html.fromHtml(getString(R.string.features, extendedList))));
-
                                         }
 
                                         jta2.getSessionInfo(new ISession() {
diff --git a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/FilesFragment/FilesAdapter.java b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/FilesFragment/FilesAdapter.java
index b70a0f99..01afaa27 100644
--- a/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/FilesFragment/FilesAdapter.java
+++ b/app/src/main/java/com/gianlu/aria2app/MoreAboutDownload/FilesFragment/FilesAdapter.java
@@ -266,7 +266,7 @@ public class FilesAdapter {
             subDir.viewHolder.toggle.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
-                    Utils.animateCollapsingArrowList((ImageButton) v, isExpanded(subView));
+                    CommonUtils.animateCollapsingArrowList((ImageButton) v, isExpanded(subView));
 
                     if (isExpanded(subView)) {
                         collapse(subView);
diff --git a/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java b/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
index 2c81bbc0..3e68a248 100644
--- a/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
+++ b/app/src/main/java/com/gianlu/aria2app/NetIO/WebSocketing.java
@@ -1,6 +1,7 @@
 package com.gianlu.aria2app.NetIO;
 
 import android.app.Activity;
+import android.content.Context;
 import android.util.ArrayMap;
 import android.util.Pair;
 
@@ -30,7 +31,7 @@ public class WebSocketing extends WebSocketAdapter {
     private WebSocket socket;
     private boolean errorShown;
 
-    private WebSocketing(Activity context) throws IOException, NoSuchAlgorithmException {
+    private WebSocketing(Context context) throws IOException, NoSuchAlgorithmException {
         socket = Utils.readyWebSocket(context)
                 .addListener(this)
                 .connectAsynchronously();
diff --git a/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalAdapter.java b/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalAdapter.java
new file mode 100644
index 00000000..a230b4fc
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalAdapter.java
@@ -0,0 +1,215 @@
+package com.gianlu.aria2app.Terminal;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.support.v7.widget.CardView;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.Animation;
+import android.view.animation.Transformation;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.gianlu.aria2app.R;
+import com.gianlu.commonutils.CommonUtils;
+import com.neovisionaries.ws.client.WebSocket;
+import com.neovisionaries.ws.client.WebSocketAdapter;
+import com.neovisionaries.ws.client.WebSocketException;
+
+import java.io.IOException;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+public class TerminalAdapter extends RecyclerView.Adapter<TerminalAdapter.ViewHolder> {
+    private Context context;
+    private IAdapter handler;
+    private List<TerminalItem> objs;
+
+    public TerminalAdapter(Context context, IAdapter handler) {
+        this.context = context;
+        this.handler = handler;
+        this.objs = new ArrayList<>();
+
+        try {
+            WebSocketRequester.getInstance(context, new WebSocketHandler());
+        } catch (IOException | NoSuchAlgorithmException ex) {
+            add(TerminalItem.createInfoItem(ex));
+        }
+    }
+
+    private static boolean isFromServer(int type) {
+        return (type & TerminalItem.FROM_SERVER) == TerminalItem.FROM_SERVER;
+    }
+
+    private static boolean isExpanded(View v) {
+        return v.getVisibility() == View.VISIBLE;
+    }
+
+    private static void expand(final View v) {
+        v.measure(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
+        final int targetHeight = v.getMeasuredHeight();
+
+        v.getLayoutParams().height = 0;
+        v.setVisibility(View.VISIBLE);
+        Animation a = new Animation() {
+            @Override
+            protected void applyTransformation(float interpolatedTime, Transformation t) {
+                v.getLayoutParams().height = interpolatedTime == 1
+                        ? RelativeLayout.LayoutParams.WRAP_CONTENT
+                        : (int) (targetHeight * interpolatedTime);
+                v.requestLayout();
+            }
+
+            @Override
+            public boolean willChangeBounds() {
+                return true;
+            }
+        };
+
+        a.setDuration((int) (targetHeight / v.getContext().getResources().getDisplayMetrics().density));
+        v.startAnimation(a);
+    }
+
+    private static void collapse(final View v) {
+        final int initialHeight = v.getMeasuredHeight();
+
+        Animation a = new Animation() {
+            @Override
+            protected void applyTransformation(float interpolatedTime, Transformation t) {
+                if (interpolatedTime == 1) {
+                    v.setVisibility(View.GONE);
+                } else {
+                    v.getLayoutParams().height = initialHeight - (int) (initialHeight * interpolatedTime);
+                    v.requestLayout();
+                }
+            }
+
+            @Override
+            public boolean willChangeBounds() {
+                return true;
+            }
+        };
+
+        a.setDuration((int) (initialHeight / v.getContext().getResources().getDisplayMetrics().density));
+        v.startAnimation(a);
+    }
+
+    public void add(TerminalItem item) {
+        objs.add(item);
+        notifyDataSetChanged();
+    }
+
+    @Override
+    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        if (viewType == 0)
+            return null;
+
+        ViewHolder holder = new ViewHolder(LayoutInflater.from(context).inflate(R.layout.terminal_cardview, parent, false));
+
+        if ((viewType & TerminalItem.TYPE_CONVERSATION) == TerminalItem.TYPE_CONVERSATION) {
+            holder.getRootView().addView(CommonUtils.fastHorizontalLinearLayoutWeightDummy(context, 1), isFromServer(viewType) ? 1 : 0);
+        } else {
+            holder.getRootView().addView(CommonUtils.fastHorizontalLinearLayoutWeightDummy(context, 1), 0);
+            holder.getRootView().addView(CommonUtils.fastHorizontalLinearLayoutWeightDummy(context, 1), 2);
+            holder.cardView.setAlpha(.5f);
+        }
+
+        return holder;
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        TerminalItem item = getItem(position);
+
+        if (item.type == TerminalItem.TYPE_INFO) {
+            return TerminalItem.TYPE_INFO;
+        } else {
+            return TerminalItem.TYPE_CONVERSATION | (item.fromServer ? TerminalItem.FROM_SERVER : TerminalItem.FROM_CLIENT);
+        }
+    }
+
+    public void clear() {
+        objs.clear();
+        notifyDataSetChanged();
+    }
+
+    public TerminalItem getItem(int position) {
+        return objs.get(position);
+    }
+
+    @Override
+    public void onBindViewHolder(final ViewHolder holder, int position) {
+        if (holder == null)
+            return;
+
+        TerminalItem item = getItem(position);
+        holder.text.setText(item.text);
+
+        if (item.type == TerminalItem.TYPE_INFO) {
+            if (item.isException())
+                holder.text.setTextColor(Color.RED);
+        } else {
+
+        }
+
+        holder.expand.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                CommonUtils.animateCollapsingArrowBellows(holder.expand, isExpanded(holder.more));
+
+                if (isExpanded(holder.more))
+                    collapse(holder.more);
+                else
+                    expand(holder.more);
+            }
+        });
+    }
+
+    @Override
+    public int getItemCount() {
+        handler.onItemCountUpdated(objs.size());
+        return objs.size();
+    }
+
+    public interface IAdapter {
+        void onItemCountUpdated(int count);
+    }
+
+    private class WebSocketHandler extends WebSocketAdapter {
+        @Override
+        public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
+            add(TerminalItem.createInfoItem(context.getString(R.string.connected)));
+        }
+
+        @Override
+        public void onConnectError(WebSocket websocket, WebSocketException exception) throws Exception {
+            add(TerminalItem.createInfoItem(exception));
+        }
+    }
+
+    public class ViewHolder extends RecyclerView.ViewHolder {
+        public CardView cardView;
+        public ImageButton expand;
+        public LinearLayout more;
+        public TextView text;
+
+        public ViewHolder(View itemView) {
+            super(itemView);
+
+            cardView = (CardView) itemView.findViewById(R.id.terminalItem_card);
+            expand = (ImageButton) itemView.findViewById(R.id.terminalItem_expand);
+            more = (LinearLayout) itemView.findViewById(R.id.terminalItem_more);
+            text = (TextView) itemView.findViewById(R.id.terminalItem_text);
+        }
+
+        public LinearLayout getRootView() {
+            return (LinearLayout) itemView;
+        }
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalItem.java b/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalItem.java
new file mode 100644
index 00000000..63f503fd
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Terminal/TerminalItem.java
@@ -0,0 +1,35 @@
+package com.gianlu.aria2app.Terminal;
+
+public class TerminalItem {
+    public static final int FROM_SERVER = 1;
+    public static final int FROM_CLIENT = 2;
+    public static final int TYPE_CONVERSATION = 4;
+    public static final int TYPE_INFO = 8;
+
+    public Exception exception;
+    public String text;
+    public int type;
+    public boolean fromServer;
+
+    private TerminalItem() {
+    }
+
+    public static TerminalItem createInfoItem(String text) {
+        TerminalItem item = new TerminalItem();
+        item.type = TYPE_INFO;
+        item.text = text;
+        return item;
+    }
+
+    public static TerminalItem createInfoItem(Exception ex) {
+        TerminalItem item = new TerminalItem();
+        item.type = TYPE_INFO;
+        item.exception = ex;
+        item.text = ex.getMessage();
+        return item;
+    }
+
+    public boolean isException() {
+        return exception != null;
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/Terminal/WebSocketRequester.java b/app/src/main/java/com/gianlu/aria2app/Terminal/WebSocketRequester.java
new file mode 100644
index 00000000..19a83927
--- /dev/null
+++ b/app/src/main/java/com/gianlu/aria2app/Terminal/WebSocketRequester.java
@@ -0,0 +1,61 @@
+package com.gianlu.aria2app.Terminal;
+
+import android.content.Context;
+
+import com.gianlu.aria2app.Utils;
+import com.neovisionaries.ws.client.WebSocket;
+import com.neovisionaries.ws.client.WebSocketAdapter;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.security.NoSuchAlgorithmException;
+
+public class WebSocketRequester {
+    public static WebSocketRequester instance;
+    public WebSocket socket;
+
+    private WebSocketRequester(Context context, WebSocketAdapter adapter) throws IOException, NoSuchAlgorithmException {
+        socket = Utils.readyWebSocket(context)
+                .addListener(adapter)
+                .connectAsynchronously();
+    }
+
+    public static WebSocketRequester getInstance(Context context, WebSocketAdapter adapter) throws IOException, NoSuchAlgorithmException {
+        if (instance == null)
+            instance = new WebSocketRequester(context, adapter);
+        return instance;
+    }
+
+    public static WebSocketRequester getInstance(Context context) throws IOException, NoSuchAlgorithmException {
+        return getInstance(context, null);
+    }
+
+    public static void destroy() {
+        if (instance == null)
+            return;
+
+        instance.socket.disconnect();
+        instance = null;
+    }
+
+    public void request(JSONObject obj) {
+        socket.sendText(obj.toString());
+    }
+
+    public void sendPing() {
+        socket.sendPing(String.valueOf(System.currentTimeMillis()));
+    }
+
+    public void request(String id, String jsonrpc, String method, String params) throws JSONException {
+        JSONObject obj = new JSONObject();
+        obj.put("id", id)
+                .put("jsonrpc", jsonrpc)
+                .put("method", method)
+                .put("params", new JSONArray("[" + params + "]"));
+
+        request(obj);
+    }
+}
diff --git a/app/src/main/java/com/gianlu/aria2app/TerminalActivity.java b/app/src/main/java/com/gianlu/aria2app/TerminalActivity.java
index 5d94d4ed..c1a831f0 100644
--- a/app/src/main/java/com/gianlu/aria2app/TerminalActivity.java
+++ b/app/src/main/java/com/gianlu/aria2app/TerminalActivity.java
@@ -1,175 +1,63 @@
 package com.gianlu.aria2app;
 
-import android.annotation.SuppressLint;
-import android.app.ProgressDialog;
-import android.content.ClipData;
-import android.content.ClipboardManager;
-import android.content.Intent;
-import android.graphics.Typeface;
+import android.content.DialogInterface;
 import android.os.Bundle;
+import android.support.v7.app.AlertDialog;
 import android.support.v7.app.AppCompatActivity;
-import android.text.Editable;
-import android.text.TextWatcher;
-import android.util.ArrayMap;
+import android.support.v7.widget.RecyclerView;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.ArrayAdapter;
-import android.widget.AutoCompleteTextView;
-import android.widget.BaseAdapter;
-import android.widget.Button;
 import android.widget.EditText;
-import android.widget.ListView;
-import android.widget.RelativeLayout;
+import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import com.gianlu.aria2app.Google.Analytics;
-import com.gianlu.aria2app.NetIO.JTA2.IMethod;
-import com.gianlu.aria2app.NetIO.JTA2.JTA2;
+import com.gianlu.aria2app.Terminal.TerminalAdapter;
+import com.gianlu.aria2app.Terminal.WebSocketRequester;
 import com.gianlu.commonutils.CommonUtils;
-import com.google.android.gms.analytics.HitBuilders;
-import com.neovisionaries.ws.client.WebSocket;
-import com.neovisionaries.ws.client.WebSocketAdapter;
-import com.neovisionaries.ws.client.WebSocketException;
 
 import org.json.JSONException;
-import org.json.JSONObject;
 
 import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Random;
 
-// TODO: That's pretty horrid
 public class TerminalActivity extends AppCompatActivity {
-    private final List<TerminalLine> lines = new ArrayList<>();
-    private final Map<String, Long> latencyIDs = new ArrayMap<>();
-    private ListView history;
-    private Menu menu;
-
-    private RelativeLayout container;
-    private RelativeLayout advancedContainer;
+    private TerminalAdapter adapter;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_terminal);
-        setTitle(R.string.title_activity_terminal);
-
-        container = (RelativeLayout) findViewById(R.id.terminal_container);
-        assert container != null;
-        advancedContainer = (RelativeLayout) findViewById(R.id.terminal_advancedContainer);
-        assert advancedContainer != null;
-        history = (ListView) findViewById(R.id.terminal_history);
-        assert history != null;
-        final AutoCompleteTextView method = (AutoCompleteTextView) findViewById(R.id.terminal_method);
-        assert method != null;
-        final EditText id = (EditText) findViewById(R.id.terminal_id);
-        assert id != null;
-        EditText jsonrpc = (EditText) findViewById(R.id.terminal_jsonrpc);
-        assert jsonrpc != null;
-        EditText params = (EditText) findViewById(R.id.terminal_params);
-        assert params != null;
-        final EditText advJson = (EditText) findViewById(R.id.terminal_advJSON);
-        assert advJson != null;
-        final TextView json = (TextView) findViewById(R.id.terminal_json);
-        assert json != null;
-        Button send = (Button) findViewById(R.id.terminal_send);
-        assert send != null;
-        OnTextChanged listener = new OnTextChanged(json, method, id, jsonrpc, params);
 
-        final WebSocket conn;
-        try {
-            conn = Utils.readyWebSocket(this);
-            conn.addListener(new WSHandler())
-                    .connectAsynchronously();
-        } catch (IOException | NoSuchAlgorithmException ex) {
-            ex.printStackTrace();
-            return;
-        }
+        RecyclerView list = (RecyclerView) findViewById(R.id.terminal_recyclerView);
+        final TextView noItems = (TextView) findViewById(R.id.terminal_noItems);
 
-        history.setTag(true);
-        history.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+        adapter = new TerminalAdapter(this, new TerminalAdapter.IAdapter() {
             @Override
-            public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
-                ClipData data = ClipData.newPlainText("json", ((TerminalLine) adapterView.getItemAtPosition(i)).getMessage());
-                ((ClipboardManager) getSystemService(CLIPBOARD_SERVICE)).setPrimaryClip(data);
-                CommonUtils.UIToast(TerminalActivity.this, getString(R.string.copiedClipboard));
-                return true;
+            public void onItemCountUpdated(final int count) {
+                TerminalActivity.this.runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (count > 0)
+                            noItems.setVisibility(View.GONE);
+                        else
+                            noItems.setVisibility(View.VISIBLE);
+                    }
+                });
             }
         });
+        list.setAdapter(adapter);
 
         try {
-            JTA2 jta2 = JTA2.newInstance(this);
-
-            final ProgressDialog pd = CommonUtils.fastIndeterminateProgressDialog(this, R.string.gathering_information);
-            CommonUtils.showDialog(this, pd);
-            jta2.listMethods(new IMethod() {
-                @Override
-                public void onMethods(final List<String> methods) {
-                    pd.dismiss();
-
-                    TerminalActivity.this.runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            method.setThreshold(1);
-                            method.setAdapter(new ArrayAdapter<>(TerminalActivity.this, android.R.layout.simple_dropdown_item_1line, methods));
-                        }
-                    });
-                }
-
-                @Override
-                public void onException(Exception ex) {
-                    pd.dismiss();
-                    CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.FAILED_LOADING_AUTOCOMPLETION, ex);
-                }
-            });
+            WebSocketRequester.getInstance(this).sendPing();
         } catch (IOException | NoSuchAlgorithmException ex) {
-            CommonUtils.UIToast(this, Utils.ToastMessages.WS_EXCEPTION, ex);
+            CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.WS_EXCEPTION, ex);
         }
-
-        method.addTextChangedListener(listener);
-        jsonrpc.addTextChangedListener(listener);
-        id.addTextChangedListener(listener);
-        params.addTextChangedListener(listener);
-
-        send.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                HitBuilders.EventBuilder event = new HitBuilders.EventBuilder().setCategory(Analytics.CATEGORY_USER_INPUT);
-
-                if (((boolean) history.getTag())) {
-                    conn.sendText(json.getText().toString());
-                    latencyIDs.put(id.getText().toString(), System.currentTimeMillis());
-
-                    lines.add(new TerminalLine(json.getText().toString()));
-                    history.setAdapter(new TerminalAdapter(lines));
-
-                    event.setAction(Analytics.ACTION_TERMINAL_BASIC);
-                } else {
-                    conn.sendText(advJson.getText().toString());
-
-                    lines.add(new TerminalLine(advJson.getText().toString()));
-                    history.setAdapter(new TerminalAdapter(lines));
-
-                    event.setAction(Analytics.ACTION_TERMINAL_ADV);
-                }
-
-                if (Analytics.isTrackingAllowed(TerminalActivity.this))
-                    Analytics.getDefaultTracker(TerminalActivity.this.getApplication()).send(event.build());
-            }
-        });
     }
 
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.terminal, menu);
-        this.menu = menu;
         return super.onCreateOptionsMenu(menu);
     }
 
@@ -177,25 +65,10 @@ public class TerminalActivity extends AppCompatActivity {
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.terminalMenu_clearList:
-                lines.clear();
-                latencyIDs.clear();
-                history.setAdapter(null);
-                break;
-            case R.id.terminalMenu_advanced:
-                container.setVisibility(View.INVISIBLE);
-                container.invalidate();
-                advancedContainer.setVisibility(View.VISIBLE);
-                item.setVisible(false);
-                menu.getItem(2).setVisible(true);
-                history.setTag(false);
+                adapter.clear();
                 break;
-            case R.id.terminalMenu_basic:
-                container.setVisibility(View.VISIBLE);
-                advancedContainer.setVisibility(View.INVISIBLE);
-                advancedContainer.invalidate();
-                item.setVisible(false);
-                menu.getItem(1).setVisible(true);
-                history.setTag(true);
+            case R.id.terminalMenu_newRequest:
+                CommonUtils.showDialog(this, createNewRequestDialog());
                 break;
             case android.R.id.home:
                 onBackPressed();
@@ -204,139 +77,45 @@ public class TerminalActivity extends AppCompatActivity {
         return super.onOptionsItemSelected(item);
     }
 
+    public AlertDialog.Builder createNewRequestDialog() {
+        if (adapter == null)
+            return null;
+
+        LinearLayout view = (LinearLayout) getLayoutInflater().inflate(R.layout.new_request_dialog, null, false);
+        final EditText id = (EditText) view.findViewById(R.id.createRequestDialog_id);
+        final EditText jsonrpc = (EditText) view.findViewById(R.id.createRequestDialog_jsonrpc);
+        final EditText method = (EditText) view.findViewById(R.id.createRequestDialog_method);
+        final EditText params = (EditText) view.findViewById(R.id.createRequestDialog_params);
+
+        return new AlertDialog.Builder(this)
+                .setTitle(R.string.create_request)
+                .setView(view)
+                .setPositiveButton(R.string.create, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        try {
+                            WebSocketRequester.getInstance(TerminalActivity.this)
+                                    .request(id.getText().toString(),
+                                            jsonrpc.getText().toString(),
+                                            method.getText().toString(),
+                                            params.getText().toString());
+                        } catch (IOException | NoSuchAlgorithmException ex) {
+                            CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.WS_EXCEPTION, ex);
+                        } catch (JSONException ex) {
+                            CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.INVALID_REQUEST, ex);
+                        }
+                    }
+                })
+                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                    }
+                });
+    }
+
     @Override
     public void onBackPressed() {
         super.onBackPressed();
-        startActivity(new Intent(this, MainActivity.class));
-    }
-
-    private class WSHandler extends WebSocketAdapter {
-        @Override
-        public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
-            CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.WS_OPENED);
-        }
-
-        @Override
-        public void onError(WebSocket websocket, WebSocketException cause) throws Exception {
-            CommonUtils.UIToast(TerminalActivity.this, Utils.ToastMessages.WS_CLOSED, cause);
-        }
-
-        @Override
-        public void onTextMessage(WebSocket websocket, String payload) throws Exception {
-            try {
-                String id = new JSONObject(payload).getString("id");
-                if (latencyIDs.containsKey(id)) {
-                    lines.add(new TerminalLine(payload, System.currentTimeMillis() - latencyIDs.remove(id)));
-                } else {
-                    lines.add(new TerminalLine(payload, -1));
-                }
-            } catch (JSONException ex) {
-                lines.add(new TerminalLine(payload, -1));
-            } finally {
-                history.setAdapter(new TerminalAdapter(lines));
-            }
-        }
-    }
-
-    private class OnTextChanged implements TextWatcher {
-        private final TextView json;
-        private final AutoCompleteTextView method;
-        private final EditText id;
-        private final EditText jsonrpc;
-        private final EditText params;
-
-        OnTextChanged(TextView json, AutoCompleteTextView method, EditText id, EditText jsonrpc, EditText params) {
-            this.json = json;
-            this.method = method;
-            this.id = id;
-            this.jsonrpc = jsonrpc;
-            this.params = params;
-        }
-
-        @Override
-        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
-
-        }
-
-        @Override
-        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
-
-        }
-
-        @Override
-        public void afterTextChanged(Editable editable) {
-            if (id.getText().toString().isEmpty()) {
-                id.setText(String.valueOf(new Random().nextInt(1000)));
-            }
-            json.setText(String.format("{\"id\": \"%s\", \"jsonrpc\": \"%s\", \"method\": \"%s\", \"params\": [%s]}", id.getText().toString(), jsonrpc.getText().toString(), method.getText().toString(), params.getText().toString()));
-        }
-    }
-
-    private class TerminalLine {
-        private final boolean fromServer;
-        private final String message;
-        private final long latency;
-
-        TerminalLine(String message) {
-            this.fromServer = false;
-            this.message = message;
-            this.latency = -1;
-        }
-
-        TerminalLine(String message, long latency) {
-            this.fromServer = true;
-            this.message = message;
-            this.latency = latency;
-        }
-
-        boolean isFromServer() {
-            return fromServer;
-        }
-
-        String getMessage() {
-            return message;
-        }
-
-        long getLatency() {
-            return latency;
-        }
-    }
-
-    private class TerminalAdapter extends BaseAdapter {
-        private final List<TerminalLine> objs;
-
-        TerminalAdapter(List<TerminalLine> objs) {
-            this.objs = objs;
-        }
-
-        @Override
-        public int getCount() {
-            return objs.size();
-        }
-
-        @Override
-        public TerminalLine getItem(int i) {
-            return objs.get(i);
-        }
-
-        @Override
-        public long getItemId(int i) {
-            return i;
-        }
-
-        @SuppressLint({"ViewHolder", "InflateParams"})
-        @Override
-        public View getView(int i, View view, ViewGroup viewGroup) {
-            TerminalLine item = getItem(i);
-            view = getLayoutInflater().inflate(R.layout.terminal_custom_item, null);
-
-            TextView response = (TextView) view.findViewById(R.id.terminalItem_response);
-            response.setTextAlignment(item.isFromServer() ? View.TEXT_ALIGNMENT_VIEW_END : View.TEXT_ALIGNMENT_VIEW_START);
-            response.setTypeface(null, item.isFromServer() ? Typeface.BOLD : Typeface.NORMAL);
-            response.setText(item.getMessage());
-            ((TextView) view.findViewById(R.id.terminalItem_latency)).setText(item.getLatency() == -1 ? "" : String.format(Locale.getDefault(), "%d ms", item.getLatency()));
-
-            return view;
-        }
+        WebSocketRequester.destroy();
     }
 }
diff --git a/app/src/main/java/com/gianlu/aria2app/Utils.java b/app/src/main/java/com/gianlu/aria2app/Utils.java
index af613014..a9bad8c2 100644
--- a/app/src/main/java/com/gianlu/aria2app/Utils.java
+++ b/app/src/main/java/com/gianlu/aria2app/Utils.java
@@ -7,7 +7,6 @@ import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 import android.support.v4.content.ContextCompat;
 import android.util.Base64;
-import android.widget.ImageButton;
 
 import com.gianlu.commonutils.CommonUtils;
 import com.github.mikephil.charting.charts.LineChart;
@@ -38,32 +37,6 @@ public class Utils {
     public static final int CHART_DOWNLOAD_SET = 1;
     public static final int CHART_UPLOAD_SET = 0;
 
-    public static void animateCollapsingArrowList(ImageButton view, boolean expanded) {
-        if (expanded)
-            view.animate()
-                    .rotation(0)
-                    .setDuration(200)
-                    .start();
-        else
-            view.animate()
-                    .rotation(90)
-                    .setDuration(200)
-                    .start();
-    }
-
-    public static void animateCollapsingArrowBellows(ImageButton view, boolean expanded) {
-        if (expanded)
-            view.animate()
-                    .rotation(0)
-                    .setDuration(200)
-                    .start();
-        else
-            view.animate()
-                    .rotation(180)
-                    .setDuration(200)
-                    .start();
-    }
-
     @SuppressWarnings("ResultOfMethodCallIgnored")
     static void renameOldProfiles(Context context) {
         if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean("oldProfiles", true))
@@ -320,6 +293,7 @@ public class Utils {
         public static final CommonUtils.ToastMessage FAILED_CHANGE_FILE_SELECTION = new CommonUtils.ToastMessage("Failed selecting/deselecting file!", true);
         public static final CommonUtils.ToastMessage FAILED_CHECKING_VERSION = new CommonUtils.ToastMessage("Failed checking aria2 version!", true);
         public static final CommonUtils.ToastMessage LOGS_DELETED = new CommonUtils.ToastMessage("Logs deleted!", false);
+        public static final CommonUtils.ToastMessage INVALID_REQUEST = new CommonUtils.ToastMessage("Invalid request format! Please review your JSON.", false);
         public static final CommonUtils.ToastMessage INVALID_PROFILE_NAME = new CommonUtils.ToastMessage("Invalid profile name!", false);
         public static final CommonUtils.ToastMessage INVALID_SERVER_IP = new CommonUtils.ToastMessage("Invalid server address!", false);
         public static final CommonUtils.ToastMessage INVALID_SERVER_PORT = new CommonUtils.ToastMessage("Invalid server port, must be > 0 and < 65536!", false);
