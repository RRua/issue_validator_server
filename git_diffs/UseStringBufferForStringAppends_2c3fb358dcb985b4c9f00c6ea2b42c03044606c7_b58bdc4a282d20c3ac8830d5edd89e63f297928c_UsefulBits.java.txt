diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessCompany.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessCompany.java
index 03f9035..6b271ee 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessCompany.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessCompany.java
@@ -20,19 +20,17 @@ import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
 import android.util.Log;
-import android.view.Gravity;
-import android.widget.Toast;
 
 import java.io.File;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
+import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
+import aws.apps.usbDeviceEnumerator.util.NotifyUser;
 
 public class DbAccessCompany {
     public final static String UNKNOWN_RESULT = "???";
     private final String TAG = this.getClass().getName();
     private Context context;
-    private UsefulBits uB;
 
     private String localDbLocation = "";
     private String localDbFullPath = "";
@@ -41,23 +39,25 @@ public class DbAccessCompany {
 
     public DbAccessCompany(Context context) {
         this.context = context;
-        uB = new UsefulBits(context);
         doDbPathStuff();
     }
 
     public boolean doDBChecks() {
         if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
             Log.d(TAG, "^ SD card not available.");
-            uB.ShowAlert(context.getString(R.string.sd_error),
-                    context.getString(R.string.sd_not_available),
-                    context.getString(android.R.string.ok));
+            DialogFactory.createOkDialog(context,
+                    R.string.sd_error,
+                    R.string.sd_not_available)
+                    .show();
+
             return false;
         }
 
         if (!new File(localDbFullPath).exists()) {
-            uB.ShowAlert(context.getString(R.string.alert_db_not_found_title),
-                    context.getString(R.string.alert_db_not_found_instructions),
-                    context.getString(android.R.string.ok));
+            DialogFactory.createOkDialog(context,
+                    R.string.alert_db_not_found_title,
+                    R.string.alert_db_not_found_instructions)
+                    .show();
             Log.e(TAG, "^ Database not found: " + localDbFullPath);
             return false;
         }
@@ -77,8 +77,7 @@ public class DbAccessCompany {
 
             if (!db.isOpen()) {
                 Log.e(TAG, "^ DB was not opened!");
-                uB.showToast(context.getString(R.string.error_could_not_open_db),
-                        Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
+                NotifyUser.notify(context, context.getString(R.string.error_could_not_open_db));
                 return null;
             }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessUsb.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessUsb.java
index 601938d..d036add 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessUsb.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/data/DbAccessUsb.java
@@ -20,19 +20,17 @@ import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Environment;
 import android.util.Log;
-import android.view.Gravity;
-import android.widget.Toast;
 
 import java.io.File;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
+import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
+import aws.apps.usbDeviceEnumerator.util.NotifyUser;
 
 public class DbAccessUsb {
     public final static String UNKNOWN_RESULT = "not in database";
     private final String TAG = this.getClass().getName();
     private Context context;
-    private UsefulBits uB;
 
     private String localDbLocation = "";
     private String localDbFullPath = "";
@@ -41,23 +39,24 @@ public class DbAccessUsb {
 
     public DbAccessUsb(Context context) {
         this.context = context;
-        uB = new UsefulBits(context);
         doDbPathStuff();
     }
 
     public boolean doDBChecks() {
         if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
             Log.d(TAG, "^ SD card not available.");
-            uB.ShowAlert(context.getString(R.string.sd_error),
-                    context.getString(R.string.sd_not_available),
-                    context.getString(android.R.string.ok));
+            DialogFactory.createOkDialog(context,
+                    R.string.sd_error,
+                    R.string.sd_not_available)
+                    .show();
             return false;
         }
 
         if (!new File(localDbFullPath).exists()) {
-            uB.ShowAlert(context.getString(R.string.alert_db_not_found_title),
-                    context.getString(R.string.alert_db_not_found_instructions),
-                    context.getString(android.R.string.ok));
+            DialogFactory.createOkDialog(context,
+                    R.string.alert_db_not_found_title,
+                    R.string.alert_db_not_found_instructions)
+                    .show();
             Log.e(TAG, "^ Database not found: " + localDbFullPath);
             return false;
         }
@@ -77,8 +76,7 @@ public class DbAccessUsb {
 
             if (!db.isOpen()) {
                 Log.e(TAG, "^ DB was not opened!");
-                uB.showToast(context.getString(R.string.error_could_not_open_db),
-                        Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
+                NotifyUser.notify(context, context.getString(R.string.error_could_not_open_db));
                 return null;
             }
 
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/MyAlertBox.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/MyAlertBox.java
deleted file mode 100644
index cb93716..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/MyAlertBox.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.ui;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.text.SpannableString;
-import android.text.method.LinkMovementMethod;
-import android.text.util.Linkify;
-import android.widget.ScrollView;
-import android.widget.TextView;
-
-public class MyAlertBox {
-
-    public static AlertDialog create(Context context, String text, String title, String button) {
-        return new AlertDialog.Builder(context)
-                .setTitle(title)
-                .setCancelable(true)
-                .setIcon(android.R.drawable.ic_dialog_info)
-                .setPositiveButton(button, null)
-                .setView(LinkifyText(context, text))
-                .create();
-    }
-
-    public static ScrollView LinkifyText(Context context, String message) {
-        ScrollView svMessage = new ScrollView(context);
-        TextView tvMessage = new TextView(context);
-
-        SpannableString spanText = new SpannableString(message);
-
-        Linkify.addLinks(spanText, Linkify.ALL);
-        tvMessage.setText(spanText);
-        tvMessage.setMovementMethod(LinkMovementMethod.getInstance());
-
-        svMessage.setPadding(14, 2, 10, 12);
-        svMessage.addView(tvMessage);
-
-        return svMessage;
-    }
-}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java
new file mode 100644
index 0000000..4b1c3c6
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/common/DialogFactory.java
@@ -0,0 +1,28 @@
+package aws.apps.usbDeviceEnumerator.ui.common;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.support.v7.app.AlertDialog;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+
+public class DialogFactory {
+
+    public static Dialog createOkDialog(final Context context, final int title, final int message) {
+        final View view = LayoutInflater.from(context).inflate(R.layout.dialog_textview, null);
+        final TextView textView = (TextView) view.findViewById(R.id.text);
+
+        textView.setText(message);
+
+        return new AlertDialog.Builder(context)
+                .setTitle(message)
+                .setCancelable(false)
+                .setPositiveButton(android.R.string.ok, null)
+                .setView(view)
+                .create();
+    }
+
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
new file mode 100644
index 0000000..8766c96
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/DatabaseUpdater.java
@@ -0,0 +1,108 @@
+package aws.apps.usbDeviceEnumerator.ui.dbupdate;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Environment;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.data.DbAccessCompany;
+import aws.apps.usbDeviceEnumerator.data.DbAccessUsb;
+import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
+import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
+import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
+import aws.apps.usbDeviceEnumerator.util.FileUtils;
+import aws.apps.usbDeviceEnumerator.util.NetworkUtils;
+import aws.apps.usbDeviceEnumerator.util.NotifyUser;
+
+public class DatabaseUpdater {
+    private static final String TAG = DatabaseUpdater.class.getSimpleName();
+
+    private final ProgressDialogControl progressDialogControl;
+    private final DbAccessCompany dbAccessCompany;
+    private final DbAccessUsb dbAccessUsb;
+    private final ZipAccessCompany zipAccessCompany;
+
+    public DatabaseUpdater(final ProgressDialogControl progressDialogControl,
+                           final DbAccessCompany dbAccessCompany,
+                           final DbAccessUsb dbAccessUsb,
+                           final ZipAccessCompany zipAccessCompany) {
+
+        this.progressDialogControl = progressDialogControl;
+        this.dbAccessCompany = dbAccessCompany;
+        this.dbAccessUsb = dbAccessUsb;
+        this.zipAccessCompany = zipAccessCompany;
+    }
+
+    public void start(final Context context) {
+
+        if (validate(context)) {
+            final AlertDialog.Builder builder = new AlertDialog.Builder(context);
+            final List<FileDownloadTask.Downloadable> downloadables
+                    = createDownloadables(context);
+
+            builder.setMessage(R.string.alert_update_db)
+                    .setNegativeButton(android.R.string.no, null)
+                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                        @SuppressWarnings("unchecked")
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            final FileDownloadTask.Downloadable[] array
+                                    = downloadables.toArray(new FileDownloadTask.Downloadable[downloadables.size()]);
+                            new FileDownloadTask(context, progressDialogControl).execute(array);
+                        }
+                    });
+
+            builder.create().show();
+        }
+    }
+
+    private boolean validate(final Context context) {
+        final boolean valid;
+
+        if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
+            Log.d(TAG, "^ SD card not available.");
+            NotifyUser.notify(context, R.string.sd_not_available);
+            valid = false;
+        } else if (!FileUtils.createDirectories(dbAccessUsb.getLocalDbLocation())) {
+            valid = false;
+        } else if (!FileUtils.createDirectories(dbAccessCompany.getLocalDbLocation())) {
+            valid = false;
+        } else if (!FileUtils.createDirectories(zipAccessCompany.getLocalZipLocation())) {
+            valid = false;
+        } else if (!NetworkUtils.isOnline(context)) {  // If we are not online, cancel everything
+            DialogFactory.createOkDialog(
+                    context,
+                    R.string.text_device_offline,
+                    R.string.text_device_offline_instructions)
+                    .show();
+            valid = false;
+        } else {
+            valid = true;
+        }
+
+        return valid;
+    }
+
+    private List<FileDownloadTask.Downloadable> createDownloadables(final Context context) {
+        final List<FileDownloadTask.Downloadable> downloads = new ArrayList<FileDownloadTask.Downloadable>();
+
+        downloads.add(new FileDownloadTask.Downloadable(
+                context.getString(R.string.url_usb_db),
+                dbAccessUsb.getLocalDbFullPath()));
+
+        downloads.add(new FileDownloadTask.Downloadable(
+                context.getString(R.string.url_company_db),
+                dbAccessCompany.getLocalDbFullPath()));
+
+        downloads.add(new FileDownloadTask.Downloadable(
+                context.getString(R.string.url_company_logo_zip),
+                zipAccessCompany.getLocalZipFullPath()));
+
+        return downloads;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java
new file mode 100644
index 0000000..f852d53
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/dbupdate/FileDownloadTask.java
@@ -0,0 +1,130 @@
+package aws.apps.usbDeviceEnumerator.ui.dbupdate;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.util.Log;
+
+import java.io.BufferedInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URL;
+import java.net.URLConnection;
+import java.text.MessageFormat;
+
+import aws.apps.usbDeviceEnumerator.R;
+import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
+import aws.apps.usbDeviceEnumerator.util.NotifyUser;
+
+/*package*/ class FileDownloadTask extends AsyncTask<FileDownloadTask.Downloadable, Integer, Boolean> {
+    private static final String TAG = FileDownloadTask.class.getSimpleName();
+    private final MessageFormat form = new MessageFormat("Downloading file: {0} of {1}...");
+    private final ProgressDialogControl progressDialogControl;
+    private final Context context;
+
+    public FileDownloadTask(final Context context,
+                            final ProgressDialogControl progressDialogControl) {
+        this.progressDialogControl = progressDialogControl;
+        this.context = context.getApplicationContext();
+    }
+
+    @Override
+    protected Boolean doInBackground(Downloadable... downloadables) {
+        int count;
+
+        URL url;
+        String filePath;
+        URLConnection connection;
+        InputStream is;
+        OutputStream os;
+        Boolean bOK = true;
+
+
+        int downloadCounter = 0;
+
+        for (Downloadable download : downloadables) {
+            try {
+                url = new URL(download.getFrom());
+                filePath = download.getTo();
+
+                Log.d(TAG, "^ Downloading: " + url);
+                Log.d(TAG, "^ To         : " + filePath);
+
+                connection = url.openConnection();
+                connection.connect();
+                int lenghtOfFile = connection.getContentLength();
+
+                // download the file
+                is = new BufferedInputStream(url.openStream());
+                os = new FileOutputStream(filePath);
+
+                byte data[] = new byte[1024];
+
+                long total = 0;
+
+                while ((count = is.read(data)) != -1) {
+                    total += count;
+                    // The first number is the current file
+                    // The second is the total number of files to download
+                    // The third is the current progress
+                    publishProgress(downloadCounter + 1, downloadables.length, (int) (total * 100 / lenghtOfFile));
+                    os.write(data, 0, count);
+                }
+
+                os.flush();
+                os.close();
+                is.close();
+
+            } catch (Exception e) {
+                Log.e(TAG, "^ Error while downloading.", e);
+                bOK = false;
+                e.printStackTrace();
+            }
+
+            downloadCounter += 1;
+        }
+
+        return bOK;
+    }
+
+    @Override
+    protected void onPostExecute(Boolean result) {
+
+        if (result) { // The download is ok.
+            NotifyUser.notify(context, R.string.download_ok);
+        } else {     // There was an error.
+            NotifyUser.notify(context, R.string.download_error);
+        }
+
+        progressDialogControl.dismiss();
+    }
+
+    @Override
+    protected void onPreExecute() {
+        progressDialogControl.show();
+    }
+
+    @Override
+    public void onProgressUpdate(Integer... args) {
+        Object[] testArgs = {args[0], args[1]};
+        progressDialogControl.updateProgress(form.format(testArgs), args[2]);
+    }
+
+    public static class Downloadable {
+        private final String from;
+        private final String to;
+
+        public Downloadable(String from, String to) {
+            this.from = from;
+            this.to = to;
+        }
+
+        public String getFrom() {
+            return from;
+        }
+
+        public String getTo() {
+            return to;
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java
new file mode 100644
index 0000000..974c546
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/AboutDialogFactory.java
@@ -0,0 +1,65 @@
+package aws.apps.usbDeviceEnumerator.ui.main;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.support.v7.app.AlertDialog;
+import android.text.SpannableString;
+import android.text.method.LinkMovementMethod;
+import android.text.util.Linkify;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.BuildConfig;
+import aws.apps.usbDeviceEnumerator.R;
+
+
+/*package*/ final class AboutDialogFactory {
+
+    private AboutDialogFactory() {
+        // NOOP
+    }
+
+    private static String constructAboutText(final Context context) {
+        String title = context.getString(R.string.app_name) + " v" + BuildConfig.VERSION_NAME;
+
+        final StringBuilder sb = new StringBuilder();
+
+        sb.append(context.getString(R.string.app_changelog));
+        sb.append("\n\n");
+        sb.append(context.getString(R.string.app_notes));
+        sb.append("\n\n");
+        sb.append(context.getString(R.string.app_acknowledgements));
+        sb.append("\n\n");
+        sb.append(context.getString(R.string.app_copyright));
+
+        return sb.toString();
+    }
+
+    public static Dialog createAboutDialog(final Context context) {
+        final View view = LayoutInflater.from(context).inflate(R.layout.dialog_textview, null);
+        final TextView textView = (TextView) view.findViewById(R.id.text);
+
+        final SpannableString text = new SpannableString(constructAboutText(context));
+
+        textView.setText(text);
+        textView.setAutoLinkMask(Activity.RESULT_OK);
+        textView.setMovementMethod(LinkMovementMethod.getInstance());
+
+        Linkify.addLinks(text, Linkify.ALL);
+
+        final DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
+            public void onClick(final DialogInterface dialog, final int id) {
+            }
+        };
+
+        return new AlertDialog.Builder(context)
+                .setTitle(R.string.label_menu_about)
+                .setCancelable(false)
+                .setPositiveButton(android.R.string.ok, listener)
+                .setView(view)
+                .create();
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/activities/MainActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
similarity index 54%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/activities/MainActivity.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
index ca5c73e..8b1d4e3 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/activities/MainActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/main/MainActivity.java
@@ -13,23 +13,17 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.activities;
+package aws.apps.usbDeviceEnumerator.ui.main;
 
-import android.app.AlertDialog;
 import android.content.Context;
-import android.content.DialogInterface;
 import android.content.Intent;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbManager;
-import android.os.AsyncTask;
 import android.os.Bundle;
-import android.os.Environment;
-import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v7.app.AppCompatActivity;
 import android.util.Log;
-import android.util.Pair;
 import android.view.Gravity;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -46,17 +40,8 @@ import android.widget.TabHost.OnTabChangeListener;
 import android.widget.TabHost.TabSpec;
 import android.widget.TabWidget;
 import android.widget.TextView;
-import android.widget.Toast;
 
-import java.io.BufferedInputStream;
 import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.URL;
-import java.net.URLConnection;
-import java.text.MessageFormat;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 
@@ -64,20 +49,20 @@ import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DbAccessCompany;
 import aws.apps.usbDeviceEnumerator.data.DbAccessUsb;
 import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
-import aws.apps.usbDeviceEnumerator.fragments.AbstractUsbDeviceInfoFragment;
-import aws.apps.usbDeviceEnumerator.fragments.ProgressDialogFragment;
-import aws.apps.usbDeviceEnumerator.fragments.UsbDeviceInfoAndroidFragment;
-import aws.apps.usbDeviceEnumerator.fragments.UsbDeviceInfoLinuxFragment;
+import aws.apps.usbDeviceEnumerator.ui.common.DialogFactory;
+import aws.apps.usbDeviceEnumerator.ui.dbupdate.DatabaseUpdater;
+import aws.apps.usbDeviceEnumerator.ui.progress.ProgressDialogControl;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.AndroidUsbInfoFragment;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.BaseInfoFragment;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.LinuxUsbInfoFragment;
+import aws.apps.usbDeviceEnumerator.ui.usbinfo.UsbInfoActivity;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbManager;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
 public class MainActivity extends AppCompatActivity implements OnTabChangeListener {
     private final static String TAB_ANDROID_INFO = "Android";
     private final static String TAB_LINUX_INFO = "Linux";
     final String TAG = this.getClass().getName();
-    private final String DIALOG_FRAGMENT_TAG = "progress_dialog";
-    private UsefulBits mUsefulBits;
 
     private ListView mListUsbAndroid;
     private TextView mTvDeviceCountAndroid;
@@ -98,53 +83,12 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     private HashMap<String, SysBusUsbDevice> mLinuxUsbDeviceList;
 
     private boolean mIsSmallScreen = true;
-
-    private void dialogFragmentDismiss(String tag) {
-        Log.d(TAG, "^ Dimissing Fragment : " + tag);
-
-        DialogFragment dialog = (DialogFragment) getSupportFragmentManager().findFragmentByTag(tag);
-        if (dialog != null) {
-            if (DIALOG_FRAGMENT_TAG.equals(tag)) {
-                Log.d(TAG, "^ Dimissing Fragment!");
-                dialog.dismissAllowingStateLoss();
-            } else {
-                dialog.dismiss();
-            }
-        }
-    }
-
-    private void dialogFragmentShow(String tag) {
-        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
-        Fragment prev = getSupportFragmentManager().findFragmentByTag(tag);
-        if (prev != null) {
-            ft.remove(prev);
-        }
-        ft.addToBackStack(null);
-
-        DialogFragment newFragment = null;
-        if (DIALOG_FRAGMENT_TAG.equals(tag)) {
-            newFragment = ProgressDialogFragment.newInstance(getString(R.string.text_downloading_files), null);
-        }
-        ft.add(newFragment, tag);
-        ft.commitAllowingStateLoss();
-    }
-
-    private void dialogFragmentUpdate(String tag, String title, Integer progress) {
-        DialogFragment dialogFragment = (DialogFragment) getSupportFragmentManager().findFragmentByTag(tag);
-        if (dialogFragment != null) {
-            if (title != null) {
-                ((ProgressDialogFragment) dialogFragment).setTitle(title);
-            }
-            if (progress != null) {
-                ((ProgressDialogFragment) dialogFragment).setProgress(progress);
-            }
-        }
-    }
+    private ProgressDialogControl progressDialogControl;
 
     private void displayAndroidUsbDeviceInfo(String device) {
         if (mIsSmallScreen) {
             Intent i = new Intent(getApplicationContext(), UsbInfoActivity.class);
-            i.putExtra(UsbInfoActivity.EXTRA_TYPE, AbstractUsbDeviceInfoFragment.TYPE_ANDROID_INFO);
+            i.putExtra(UsbInfoActivity.EXTRA_TYPE, BaseInfoFragment.TYPE_ANDROID_INFO);
             i.putExtra(UsbInfoActivity.EXTRA_DATA_ANDROID, device);
             startActivity(i);
         } else {
@@ -155,7 +99,7 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     private void displayLinuxUsbDeviceInfo(SysBusUsbDevice device) {
         if (mIsSmallScreen) {
             Intent i = new Intent(getApplicationContext(), UsbInfoActivity.class);
-            i.putExtra(UsbInfoActivity.EXTRA_TYPE, AbstractUsbDeviceInfoFragment.TYPE_LINUX_INFO);
+            i.putExtra(UsbInfoActivity.EXTRA_TYPE, BaseInfoFragment.TYPE_LINUX_INFO);
             i.putExtra(UsbInfoActivity.EXTRA_DATA_LINUX, device);
             startActivity(i);
         } else {
@@ -175,9 +119,10 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     private void initialiseDbComponents() {
         // Prompt user to DL db if it is missing.
         if (!new File(mDbUsb.getLocalDbFullPath()).exists()) {
-            mUsefulBits.ShowAlert(getString(R.string.alert_db_not_found_title),
-                    getString(R.string.alert_db_not_found_instructions),
-                    getString(android.R.string.ok));
+            DialogFactory.createOkDialog(this,
+                    R.string.alert_db_not_found_title,
+                    R.string.alert_db_not_found_instructions)
+                    .show();
             Log.w(TAG, "^ Database not found: " + mDbUsb.getLocalDbFullPath());
             return;
         }
@@ -201,13 +146,14 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
         return tabSpec;
     }
 
-    /** Called when the activity is first created. */
+    /**
+     * Called when the activity is first created.
+     */
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.act_main);
         mIsSmallScreen = isSmallScreen();
-        mUsefulBits = new UsefulBits(this);
 
         mUsbManAndroid = (UsbManager) getSystemService(Context.USB_SERVICE);
         mUsbManagerLinux = new SysBusUsbManager();
@@ -255,69 +201,28 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
         refreshUsbDevices();
     }
 
-    /** Creates the menu items */
+    /**
+     * Creates the menu items
+     */
     public boolean onCreateOptionsMenu(Menu menu) {
         MenuInflater inflater = getMenuInflater();
         inflater.inflate(R.menu.main_menu, menu);
         return super.onCreateOptionsMenu(menu);
     }
 
-    /** Handles item selections */
+    /**
+     * Handles item selections
+     */
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.menu_about:
-                mUsefulBits.showAboutDialogue();
+                AboutDialogFactory.createAboutDialog(this).show();
                 return true;
             case R.id.menu_update_db:
-                if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-                    Log.d(TAG, "^ SD card not available.");
-                    mUsefulBits.showToast(getString(R.string.sd_not_available), Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-                    return true;
-                }
-
-                if (!mUsefulBits.createDirectories(mDbUsb.getLocalDbLocation())) {
-                    return true;
-                }
-                if (!mUsefulBits.createDirectories(mDbComp.getLocalDbLocation())) {
-                    return true;
-                }
-                if (!mUsefulBits.createDirectories(mZipComp.getLocalZipLocation())) {
-                    return true;
-                }
-
-                if (!mUsefulBits.isOnline()) {  // If we are not online, cancel everything
-                    mUsefulBits.ShowAlert(
-                            getString(R.string.text_device_offline),
-                            getString(R.string.text_device_offline_instructions),
-                            getString(android.R.string.ok));
-                    return true;
-                }
-
-                AlertDialog.Builder builder = new AlertDialog.Builder(this);
-                builder.setMessage(getString(R.string.alert_update_db))
-                        .setPositiveButton(getString(android.R.string.yes), new DialogInterface.OnClickListener() {
-                            @SuppressWarnings("unchecked")
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                ArrayList<Pair<String, String>> downloads = new ArrayList<Pair<String, String>>();
-
-                                downloads.add(new Pair<String, String>(
-                                        getString(R.string.url_usb_db),
-                                        mDbUsb.getLocalDbFullPath()));
-
-                                downloads.add(new Pair<String, String>(
-                                        getString(R.string.url_company_db),
-                                        mDbComp.getLocalDbFullPath()));
-
-                                downloads.add(new Pair<String, String>(
-                                        getString(R.string.url_company_logo_zip),
-                                        mZipComp.getLocalZipFullPath()));
-
-                                new DownloadFile().execute(downloads);
-                            }
-
-                        })
-                        .setNegativeButton(getString(android.R.string.no), null).show();
+                final ProgressDialogControl control = new ProgressDialogControl(getSupportFragmentManager());
+                final DatabaseUpdater databaseUpdater = new DatabaseUpdater(control, mDbComp, mDbUsb, mZipComp);
+
+                databaseUpdater.start(this);
                 return true;
             case R.id.menu_refresh:
                 refreshUsbDevices();
@@ -399,7 +304,7 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     }
 
     private void stackAFragment(String usbKey) {
-        Fragment f = new UsbDeviceInfoAndroidFragment(usbKey);
+        Fragment f = new AndroidUsbInfoFragment(usbKey);
 
         FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
         ft.replace(R.id.fragment_container, f);
@@ -409,7 +314,7 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
     }
 
     private void stackAFragment(SysBusUsbDevice usbDevice) {
-        Fragment f = new UsbDeviceInfoLinuxFragment(usbDevice);
+        Fragment f = new LinuxUsbInfoFragment(usbDevice);
 
         FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
         ft.replace(R.id.fragment_container, f);
@@ -418,97 +323,4 @@ public class MainActivity extends AppCompatActivity implements OnTabChangeListen
         ft.commit();
     }
 
-    private class DownloadFile extends AsyncTask<ArrayList<Pair<String, String>>, Integer, Boolean> {
-        // This is the message which will be shown on the progress bar
-        MessageFormat form = new MessageFormat("Downloading file: {0} of {1}...");
-
-        @Override
-        protected Boolean doInBackground(ArrayList<Pair<String, String>>... downloadLists) {
-            int count;
-
-            URL url;
-            String filePath = "";
-            URLConnection conection;
-            InputStream is;
-            OutputStream os;
-            Boolean bOK = true;
-
-
-            ArrayList<Pair<String, String>> downloads = downloadLists[0];
-
-            int downloadCounter = 0;
-
-            for (Pair<String, String> download : downloads) {
-                try {
-                    url = new URL(download.first);
-                    filePath = download.second;
-
-                    Log.d(TAG, "^ Downloading: " + url);
-                    Log.d(TAG, "^ To         : " + filePath);
-
-                    conection = url.openConnection();
-                    conection.connect();
-                    int lenghtOfFile = conection.getContentLength();
-
-                    // download the file
-                    is = new BufferedInputStream(url.openStream());
-                    os = new FileOutputStream(filePath);
-
-                    byte data[] = new byte[1024];
-
-                    long total = 0;
-
-                    while ((count = is.read(data)) != -1) {
-                        total += count;
-                        // The first number is the current file
-                        // The second is the total number of files to download
-                        // The third is the current progress
-                        publishProgress(downloadCounter + 1, downloads.size(), (int) (total * 100 / lenghtOfFile));
-                        os.write(data, 0, count);
-                    }
-
-                    os.flush();
-                    os.close();
-                    is.close();
-
-                } catch (Exception e) {
-                    Log.e(TAG, "^ Error while downloading.", e);
-                    bOK = false;
-                    e.printStackTrace();
-                }
-
-                downloadCounter += 1;
-            }
-
-
-//			String[][] pair = list[0];
-//			for(int i = 0; i < list[0].length; i++){
-//				
-//			}
-            return bOK;
-        }
-
-        @Override
-        protected void onPostExecute(Boolean result) {
-
-            if (result) { // The download is ok.
-                Toast.makeText(MainActivity.this, getString(R.string.download_ok), Toast.LENGTH_SHORT).show();
-            } else {     // There was an error.
-                Toast.makeText(MainActivity.this, getString(R.string.download_error), Toast.LENGTH_SHORT).show();
-            }
-
-            dialogFragmentDismiss(DIALOG_FRAGMENT_TAG);
-        }
-
-        @Override
-        protected void onPreExecute() {
-            dialogFragmentShow(DIALOG_FRAGMENT_TAG);
-        }
-
-        @Override
-        public void onProgressUpdate(Integer... args) {
-            Object[] testArgs = {args[0], args[1]};
-            dialogFragmentUpdate(DIALOG_FRAGMENT_TAG, form.format(testArgs), args[2]);
-        }
-    }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java
new file mode 100644
index 0000000..d9c7e80
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogControl.java
@@ -0,0 +1,61 @@
+package aws.apps.usbDeviceEnumerator.ui.progress;
+
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.util.Log;
+
+import aws.apps.usbDeviceEnumerator.R;
+
+public class ProgressDialogControl {
+    private static final String TAG = ProgressDialogControl.class.getSimpleName();
+    private static final String DIALOG_FRAGMENT_TAG = "progress_dialog";
+
+    private final FragmentManager fragmentManager;
+
+    public ProgressDialogControl(final FragmentManager fragmentManager) {
+        this.fragmentManager = fragmentManager;
+    }
+
+    public void dismiss() {
+        Log.d(TAG, "^ Dimissing Fragment : " + DIALOG_FRAGMENT_TAG);
+
+        DialogFragment dialog = (DialogFragment) fragmentManager.findFragmentByTag(DIALOG_FRAGMENT_TAG);
+        if (dialog != null) {
+            Log.d(TAG, "^ Dismissing Fragment!");
+            dialog.dismissAllowingStateLoss();
+        }
+    }
+
+    public void updateProgress(final String title,
+                               final Integer progress) {
+
+        DialogFragment dialogFragment = (DialogFragment) fragmentManager.findFragmentByTag(DIALOG_FRAGMENT_TAG);
+        if (dialogFragment != null) {
+            if (title != null) {
+                ((ProgressDialogFragment) dialogFragment).setTitle(title);
+            }
+            if (progress != null) {
+                ((ProgressDialogFragment) dialogFragment).setProgress(progress);
+            }
+        }
+    }
+
+    public void show() {
+        final FragmentTransaction ft = fragmentManager.beginTransaction();
+        final Fragment prev = fragmentManager.findFragmentByTag(DIALOG_FRAGMENT_TAG);
+
+        if (prev != null) {
+            ft.remove(prev);
+        }
+
+        ft.addToBackStack(null);
+
+        final DialogFragment newFragment
+                = ProgressDialogFragment.newInstance(R.string.text_downloading_files, null);
+
+        ft.add(newFragment, DIALOG_FRAGMENT_TAG);
+        ft.commitAllowingStateLoss();
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/ProgressDialogFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
similarity index 85%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/ProgressDialogFragment.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
index 34809c4..54aef7c 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/ProgressDialogFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/progress/ProgressDialogFragment.java
@@ -1,4 +1,4 @@
-package aws.apps.usbDeviceEnumerator.fragments;
+package aws.apps.usbDeviceEnumerator.ui.progress;
 
 import android.app.Dialog;
 import android.app.ProgressDialog;
@@ -7,17 +7,15 @@ import android.support.v4.app.DialogFragment;
 
 public class ProgressDialogFragment extends DialogFragment {
 
-    public static ProgressDialogFragment newInstance(String title, String message) {
+    protected static ProgressDialogFragment newInstance(int title, String message) {
         ProgressDialogFragment frag = new ProgressDialogFragment();
         Bundle args = new Bundle();
-        args.putString("title", title);
+        args.putInt("title", title);
         args.putString("message", message);
         frag.setArguments(args);
         return frag;
     }
 
-    ;
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -26,7 +24,7 @@ public class ProgressDialogFragment extends DialogFragment {
 
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
-        String title = getArguments().getString("title");
+        int title = getArguments().getInt("title");
         String message = getArguments().getString("message");
 
         ProgressDialog dialog = new ProgressDialog(getActivity());
@@ -47,7 +45,7 @@ public class ProgressDialogFragment extends DialogFragment {
     }
 
     public void setTitle(String message) {
-        ((ProgressDialog) this.getDialog()).setTitle(message);
+        (this.getDialog()).setTitle(message);
     }
 
     public void setProgress(int progress) {
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoAndroidFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
similarity index 93%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoAndroidFragment.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
index 015433a..7a7c6b6 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoAndroidFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.fragments;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -39,9 +39,8 @@ import aws.apps.usbDeviceEnumerator.data.DbAccessCompany;
 import aws.apps.usbDeviceEnumerator.data.DbAccessUsb;
 import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
 import aws.apps.usbDeviceEnumerator.usb.UsbConstants;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
-public class UsbDeviceInfoAndroidFragment extends AbstractUsbDeviceInfoFragment {
+public class AndroidUsbInfoFragment extends BaseInfoFragment {
     public final static int TYPE_ANDROID_INFO = 0;
     public final static int TYPE_LINUX_INFO = 1;
     public final static String DEFAULT_STRING = "???";
@@ -65,11 +64,11 @@ public class UsbDeviceInfoAndroidFragment extends AbstractUsbDeviceInfoFragment
 
     private Context context;
 
-    public UsbDeviceInfoAndroidFragment() {
+    public AndroidUsbInfoFragment() {
 
     }
 
-    public UsbDeviceInfoAndroidFragment(String usbKey) {
+    public AndroidUsbInfoFragment(String usbKey) {
         this.usbKey = usbKey;
     }
 
@@ -213,13 +212,12 @@ public class UsbDeviceInfoAndroidFragment extends AbstractUsbDeviceInfoFragment
     }
 
     @Override
-    public String toString() {
-        StringBuilder sb = new StringBuilder();
-        UsefulBits uB = new UsefulBits(getActivity());
-        sb.append(uB.tableToString(tblUsbInfoHeader));
-        sb.append(uB.tableToString(tblUsbInfoTop));
-        sb.append("\n");
-        sb.append(uB.tableToString(tblUsbInfoBottom));
+    public String getSharePayload() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(ShareUtils.tableToString(tblUsbInfoHeader));
+        sb.append(ShareUtils.tableToString(tblUsbInfoTop));
+        sb.append('\n');
+        sb.append(ShareUtils.tableToString(tblUsbInfoBottom));
         return sb.toString();
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/AbstractUsbDeviceInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
similarity index 85%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/AbstractUsbDeviceInfoFragment.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
index 2bb7938..bbd2002 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/AbstractUsbDeviceInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/BaseInfoFragment.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.fragments;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -22,9 +22,8 @@ import android.view.MenuInflater;
 import android.view.MenuItem;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
-public abstract class AbstractUsbDeviceInfoFragment extends Fragment {
+public abstract class BaseInfoFragment extends Fragment {
     public final static int TYPE_ANDROID_INFO = 0;
     public final static int TYPE_LINUX_INFO = 1;
 
@@ -46,11 +45,11 @@ public abstract class AbstractUsbDeviceInfoFragment extends Fragment {
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.menu_export:
-                UsefulBits.share(getActivity(), "USB Info", this.toString());
+                ShareUtils.share(getActivity(), "USB Info", getSharePayload());
                 return true;
         }
         return super.onOptionsItemSelected(item);
     }
 
-    public abstract String toString();
+    public abstract String getSharePayload();
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoLinuxFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
similarity index 92%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoLinuxFragment.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
index 9f0dbbf..1f4ece0 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/fragments/UsbDeviceInfoLinuxFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.fragments;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -36,9 +36,8 @@ import aws.apps.usbDeviceEnumerator.data.DbAccessUsb;
 import aws.apps.usbDeviceEnumerator.data.ZipAccessCompany;
 import aws.apps.usbDeviceEnumerator.usb.UsbConstants;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
-import aws.apps.usbDeviceEnumerator.util.UsefulBits;
 
-public class UsbDeviceInfoLinuxFragment extends AbstractUsbDeviceInfoFragment {
+public class LinuxUsbInfoFragment extends BaseInfoFragment {
     public final static int TYPE_ANDROID_INFO = 0;
     public final static int TYPE_LINUX_INFO = 1;
     public final static String DEFAULT_STRING = "???";
@@ -64,11 +63,11 @@ public class UsbDeviceInfoLinuxFragment extends AbstractUsbDeviceInfoFragment {
 
     private Context context;
 
-    public UsbDeviceInfoLinuxFragment() {
+    public LinuxUsbInfoFragment() {
     }
 
 
-    public UsbDeviceInfoLinuxFragment(SysBusUsbDevice myUsbDevice) {
+    public LinuxUsbInfoFragment(SysBusUsbDevice myUsbDevice) {
         this.myUsbDevice = myUsbDevice;
     }
 
@@ -199,13 +198,12 @@ public class UsbDeviceInfoLinuxFragment extends AbstractUsbDeviceInfoFragment {
     }
 
     @Override
-    public String toString() {
-        StringBuilder sb = new StringBuilder();
-        UsefulBits uB = new UsefulBits(getActivity());
-        sb.append(uB.tableToString(tblUsbInfoHeader));
-        sb.append(uB.tableToString(tblUsbInfoTop));
-        sb.append("\n");
-        sb.append(uB.tableToString(tblUsbInfoBottom));
+    public String getSharePayload() {
+        final StringBuilder sb = new StringBuilder();
+        sb.append(ShareUtils.tableToString(tblUsbInfoHeader));
+        sb.append(ShareUtils.tableToString(tblUsbInfoTop));
+        sb.append('\n');
+        sb.append(ShareUtils.tableToString(tblUsbInfoBottom));
         return sb.toString();
     }
 }
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java
new file mode 100644
index 0000000..2d0e7ef
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/ShareUtils.java
@@ -0,0 +1,63 @@
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
+
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.TableLayout;
+import android.widget.TableRow;
+import android.widget.TextView;
+
+import aws.apps.usbDeviceEnumerator.R;
+
+/*package*/ class ShareUtils {
+    private static final String TAG = ShareUtils.class.getSimpleName();
+
+    public static void share(Context context, String subject, String text) {
+        Intent intent = new Intent(Intent.ACTION_SEND);
+
+        intent.setType("text/plain");
+        intent.putExtra(Intent.EXTRA_TEXT, text);
+        intent.putExtra(Intent.EXTRA_SUBJECT, subject);
+        intent.addCategory(Intent.CATEGORY_DEFAULT);
+        Intent share = Intent.createChooser(intent, context.getString(R.string.share_result_via));
+        context.startActivity(share);
+    }
+
+    public static String tableToString(TableLayout t) {
+        String res = "";
+        if (t == null) {
+            return res;
+        }
+
+        for (int i = 0; i <= t.getChildCount() - 1; i++) {
+            TableRow row = (TableRow) t.getChildAt(i);
+
+            for (int j = 0; j <= row.getChildCount() - 1; j++) {
+                View v = row.getChildAt(j);
+
+                try {
+                    if (v.getClass() == Class.forName("android.widget.TextView")) {
+                        TextView tmp = (TextView) v;
+                        res += tmp.getText();
+
+                        if (j == 0) {
+                            res += " ";
+                        }
+                    } else if (v.getClass() == Class.forName("android.widget.EditText")) {
+                        EditText tmp = (EditText) v;
+                        res += tmp.getText().toString();
+                    } else {
+                        //do nothing
+                    }
+                } catch (Exception e) {
+                    res = e.toString();
+                    Log.e(TAG, "^ ERROR: tableToString: " + res);
+                }
+            }
+            res += "\n";
+        }
+        return res;
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/activities/UsbInfoActivity.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
similarity index 78%
rename from app/src/main/java/aws/apps/usbDeviceEnumerator/activities/UsbInfoActivity.java
rename to app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
index 3f491ef..6698163 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/activities/UsbInfoActivity.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/UsbInfoActivity.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.activities;
+package aws.apps.usbDeviceEnumerator.ui.usbinfo;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -21,9 +21,6 @@ import android.support.v4.app.FragmentTransaction;
 import android.support.v7.app.AppCompatActivity;
 
 import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.fragments.AbstractUsbDeviceInfoFragment;
-import aws.apps.usbDeviceEnumerator.fragments.UsbDeviceInfoAndroidFragment;
-import aws.apps.usbDeviceEnumerator.fragments.UsbDeviceInfoLinuxFragment;
 import aws.apps.usbDeviceEnumerator.usb.sysbususb.SysBusUsbDevice;
 
 public class UsbInfoActivity extends AppCompatActivity {
@@ -31,7 +28,9 @@ public class UsbInfoActivity extends AppCompatActivity {
     public static final String EXTRA_DATA_ANDROID = "data_android";
     public static final String EXTRA_DATA_LINUX = "data_linux";
 
-    /** Called when the activity is first created. */
+    /**
+     * Called when the activity is first created.
+     */
 
     private int mType;
     private String mAndroidKey;
@@ -48,16 +47,16 @@ public class UsbInfoActivity extends AppCompatActivity {
             mAndroidKey = b.getString(EXTRA_DATA_ANDROID);
             mLinuxDevice = b.getParcelable(EXTRA_DATA_LINUX);
 
-            if (mType == AbstractUsbDeviceInfoFragment.TYPE_ANDROID_INFO) {
-                Fragment f = new UsbDeviceInfoAndroidFragment(mAndroidKey);
+            if (mType == BaseInfoFragment.TYPE_ANDROID_INFO) {
+                Fragment f = new AndroidUsbInfoFragment(mAndroidKey);
 
                 FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
                 ft.replace(R.id.fragment_container, f);
                 ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
 
                 ft.commit();
-            } else if (mType == AbstractUsbDeviceInfoFragment.TYPE_LINUX_INFO) {
-                Fragment f = new UsbDeviceInfoLinuxFragment(mLinuxDevice);
+            } else if (mType == BaseInfoFragment.TYPE_LINUX_INFO) {
+                Fragment f = new LinuxUsbInfoFragment(mLinuxDevice);
 
                 FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
                 ft.replace(R.id.fragment_container, f);
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/FileUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/FileUtils.java
new file mode 100644
index 0000000..59e5664
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/FileUtils.java
@@ -0,0 +1,34 @@
+package aws.apps.usbDeviceEnumerator.util;
+
+import android.util.Log;
+
+import java.io.File;
+
+public final class FileUtils {
+    private static final String TAG = FileUtils.class.getSimpleName();
+
+    public static boolean createDirectories(String dirs) {
+        Log.d(TAG, "^ createDirectories - Attempting to create: " + dirs);
+        try {
+
+            if (new File(dirs).exists()) {
+                Log.d(TAG, "^ createDirectories - Directory already exist:" + dirs);
+                return true;
+            }
+
+            // create a File object for the parent directory
+            File newDirectories = new File(dirs);
+            // have the object build the directory structure, if needed.
+            if (newDirectories.mkdirs()) {
+                return true;
+            } else {
+                return false;
+            }
+
+        } catch (Exception e) {//Catch exception if any
+            return false;
+        }
+    }
+
+
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NetworkUtils.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NetworkUtils.java
new file mode 100644
index 0000000..eab25fd
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NetworkUtils.java
@@ -0,0 +1,27 @@
+package aws.apps.usbDeviceEnumerator.util;
+
+import android.content.Context;
+import android.net.ConnectivityManager;
+import android.util.Log;
+
+public final class NetworkUtils {
+    private static final String TAG = NetworkUtils.class.getSimpleName();
+
+    public static boolean isOnline(final Context context) {
+        try {
+            ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+
+            if (cm != null) {
+                Log.d(TAG, "^ isOnline()=true");
+                return cm.getActiveNetworkInfo().isConnected();
+            } else {
+                Log.d(TAG, "^ isOnline()=false");
+                return false;
+            }
+
+        } catch (Exception e) {
+            Log.e(TAG, "^ isOnline()=false", e);
+            return false;
+        }
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NotifyUser.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NotifyUser.java
new file mode 100644
index 0000000..85cea7f
--- /dev/null
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/NotifyUser.java
@@ -0,0 +1,15 @@
+package aws.apps.usbDeviceEnumerator.util;
+
+import android.content.Context;
+import android.widget.Toast;
+
+public class NotifyUser {
+
+    public static void notify(final Context context, final CharSequence text) {
+        Toast.makeText(context, text, Toast.LENGTH_SHORT).show();
+    }
+
+    public static void notify(final Context context, final int text) {
+        Toast.makeText(context, text, Toast.LENGTH_SHORT).show();
+    }
+}
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/UsefulBits.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/util/UsefulBits.java
deleted file mode 100644
index b508086..0000000
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/util/UsefulBits.java
+++ /dev/null
@@ -1,237 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-package aws.apps.usbDeviceEnumerator.util;
-
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.net.ConnectivityManager;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.EditText;
-import android.widget.TableLayout;
-import android.widget.TableRow;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.text.Format;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Date;
-
-import aws.apps.usbDeviceEnumerator.R;
-import aws.apps.usbDeviceEnumerator.ui.MyAlertBox;
-
-public class UsefulBits {
-
-    final String TAG = this.getClass().getName();
-    private Context c;
-
-    public UsefulBits(Context cntx) {
-        c = cntx;
-    }
-
-    public static void share(Context context, String subject, String text) {
-        Intent intent = new Intent(Intent.ACTION_SEND);
-
-        intent.setType("text/plain");
-        intent.putExtra(Intent.EXTRA_TEXT, text);
-        intent.putExtra(Intent.EXTRA_SUBJECT, subject);
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        Intent share = Intent.createChooser(intent, context.getString(R.string.share_result_via));
-        context.startActivity(share);
-    }
-
-    public Calendar convertMillisToDate(long millis) {
-        Calendar calendar = Calendar.getInstance();
-        calendar.setTimeInMillis(millis);
-        return calendar;
-    }
-
-    public boolean createDirectories(String dirs) {
-        Log.d(TAG, "^ createDirectories - Attempting to create: " + dirs);
-        try {
-
-            if (new File(dirs).exists()) {
-                Log.d(TAG, "^ createDirectories - Directory already exist:" + dirs);
-                return true;
-            }
-
-            // create a File object for the parent directory
-            File newDirectories = new File(dirs);
-            // have the object build the directory structure, if needed.
-            if (newDirectories.mkdirs()) {
-                showToast("Directories created: " + dirs,
-                        Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-                Log.d(TAG, "^ createDirectories - Directory created:" + dirs);
-                return true;
-            } else {
-                showToast("Could not create: " + dirs,
-                        Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-                Log.e(TAG, "^ createDirectories - Could not create:" + dirs);
-                return false;
-            }
-
-        } catch (Exception e) {//Catch exception if any
-            showToast("Could not create: " + dirs,
-                    Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-            Log.e(TAG, "^ createDirectories - something went wrong (" + dirs + ") " + e.getMessage());
-            return false;
-        }
-    }
-
-    public String formatDateTime(String formatString, Date d) {
-        Format formatter = new SimpleDateFormat(formatString);
-        return formatter.format(d);
-    }
-
-    public String getAppVersion() {
-        PackageInfo pi;
-        try {
-            pi = c.getPackageManager().getPackageInfo(c.getPackageName(), 0);
-            return pi.versionName;
-        } catch (NameNotFoundException e) {
-            return "";
-        }
-    }
-
-    public boolean isOnline() {
-        try {
-            ConnectivityManager cm = (ConnectivityManager) c.getSystemService(Context.CONNECTIVITY_SERVICE);
-
-            if (cm != null) {
-                Log.d(TAG, "^ isOnline()=true");
-                return cm.getActiveNetworkInfo().isConnected();
-            } else {
-                Log.d(TAG, "^ isOnline()=false");
-                return false;
-            }
-
-        } catch (Exception e) {
-            Log.e(TAG, "^ isOnline()=false", e);
-            return false;
-        }
-    }
-
-    public void saveToFile(String fileName, File directory, String contents) {
-
-        if (android.os.Environment.getExternalStorageState().equals(
-                android.os.Environment.MEDIA_MOUNTED)) {
-            try {
-
-                if (directory.canWrite()) {
-                    File gpxfile = new File(directory, fileName);
-                    FileWriter gpxwriter = new FileWriter(gpxfile);
-                    BufferedWriter out = new BufferedWriter(gpxwriter);
-                    out.write(contents);
-                    out.close();
-                    showToast("Saved to SD as '" + directory.getAbsolutePath() + "/" + fileName + "'",
-                            Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-                }
-
-            } catch (Exception e) {
-                showToast("Could not write file:\n+ e.getMessage()",
-                        Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-                Log.e(TAG, "^ Could not write file " + e.getMessage());
-            }
-
-        } else {
-            showToast("No SD card is mounted...", Toast.LENGTH_SHORT, Gravity.TOP, 0, 0);
-            Log.e(TAG, "^ No SD card is mounted.");
-        }
-    }
-
-    public void showAboutDialogue() {
-        String title = c.getString(R.string.app_name) + " v" + getAppVersion();
-
-        StringBuffer sb = new StringBuffer();
-
-        sb.append(c.getString(R.string.app_changelog));
-        sb.append("\n\n");
-        sb.append(c.getString(R.string.app_notes));
-        sb.append("\n\n");
-        sb.append(c.getString(R.string.app_acknowledgements));
-        sb.append("\n\n");
-        sb.append(c.getString(R.string.app_copyright));
-
-        MyAlertBox.create(c, sb.toString(), title, c.getString(android.R.string.ok)).show();
-    }
-
-    public void ShowAlert(String title, String text, String button) {
-        if (button.equals("")) {
-            button = c.getString(android.R.string.ok);
-        }
-
-        try {
-            AlertDialog.Builder ad = new AlertDialog.Builder(c);
-            ad.setTitle(title);
-            ad.setMessage(text);
-
-            ad.setPositiveButton(button, null);
-            ad.show();
-        } catch (Exception e) {
-            Log.e(TAG, "^ ShowAlert()", e);
-        }
-    }
-
-    public void showToast(String message, int duration, int location, int x_offset, int y_offset) {
-        Toast toast = Toast.makeText(c.getApplicationContext(), message, duration);
-        toast.setGravity(location, x_offset, y_offset);
-        toast.show();
-    }
-
-    public String tableToString(TableLayout t) {
-        String res = "";
-        if (t == null) {
-            return res;
-        }
-
-        for (int i = 0; i <= t.getChildCount() - 1; i++) {
-            TableRow row = (TableRow) t.getChildAt(i);
-
-            for (int j = 0; j <= row.getChildCount() - 1; j++) {
-                View v = row.getChildAt(j);
-
-                try {
-                    if (v.getClass() == Class.forName("android.widget.TextView")) {
-                        TextView tmp = (TextView) v;
-                        res += tmp.getText();
-
-                        if (j == 0) {
-                            res += " ";
-                        }
-                    } else if (v.getClass() == Class.forName("android.widget.EditText")) {
-                        EditText tmp = (EditText) v;
-                        res += tmp.getText().toString();
-                    } else {
-                        //do nothing
-                    }
-                } catch (Exception e) {
-                    res = e.toString();
-                    Log.e(TAG, "^ ERROR: tableToString: " + res);
-                }
-            }
-            res += "\n";
-        }
-        return res;
-    }
-}
