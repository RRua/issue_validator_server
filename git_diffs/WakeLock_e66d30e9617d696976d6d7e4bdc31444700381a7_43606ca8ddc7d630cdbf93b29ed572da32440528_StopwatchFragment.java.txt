diff --git a/src/com/android/deskclock/settings/CrescendoLengthDialogFragment.java b/src/com/android/deskclock/settings/CrescendoLengthDialogFragment.java
index a245b3ed8..f94273f4f 100644
--- a/src/com/android/deskclock/settings/CrescendoLengthDialogFragment.java
+++ b/src/com/android/deskclock/settings/CrescendoLengthDialogFragment.java
@@ -25,6 +25,7 @@ import android.widget.TextView;
 
 import com.android.deskclock.NumberPickerCompat;
 import com.android.deskclock.R;
+import com.android.deskclock.uidata.UiDataModel;
 
 public class CrescendoLengthDialogFragment extends PreferenceDialogFragment {
 
@@ -55,7 +56,8 @@ public class CrescendoLengthDialogFragment extends PreferenceDialogFragment {
         final String[] displayedValues = new String[13];
         displayedValues[0] = getString(R.string.no_crescendo_duration);
         for (int i = 1; i < displayedValues.length; i++) {
-            displayedValues[i] = String.valueOf(i * CRESCENDO_TIME_STEP);
+            final int length = i * CRESCENDO_TIME_STEP;
+            displayedValues[i] = UiDataModel.getUiDataModel().getFormattedNumber(length);
         }
 
         mNumberPickerView = (NumberPickerCompat) view.findViewById(R.id.seconds_picker);
diff --git a/src/com/android/deskclock/settings/CrescendoLengthDialogPreference.java b/src/com/android/deskclock/settings/CrescendoLengthDialogPreference.java
index 6fc6d38a3..191a4e1c1 100644
--- a/src/com/android/deskclock/settings/CrescendoLengthDialogPreference.java
+++ b/src/com/android/deskclock/settings/CrescendoLengthDialogPreference.java
@@ -21,6 +21,7 @@ import android.support.v7.preference.DialogPreference;
 import android.util.AttributeSet;
 
 import com.android.deskclock.R;
+import com.android.deskclock.uidata.UiDataModel;
 
 public class CrescendoLengthDialogPreference extends DialogPreference {
 
@@ -43,7 +44,8 @@ public class CrescendoLengthDialogPreference extends DialogPreference {
         if (crescendoSeconds == 0) {
             setSummary(getContext().getString(R.string.no_crescendo_duration));
         } else {
-            setSummary(getContext().getString(R.string.crescendo_duration, crescendoSeconds));
+            final String length = UiDataModel.getUiDataModel().getFormattedNumber(crescendoSeconds);
+            setSummary(getContext().getString(R.string.crescendo_duration, length));
         }
     }
 }
diff --git a/src/com/android/deskclock/uidata/UiDataModel.java b/src/com/android/deskclock/uidata/UiDataModel.java
index f0ed313cc..0f36232a7 100644
--- a/src/com/android/deskclock/uidata/UiDataModel.java
+++ b/src/com/android/deskclock/uidata/UiDataModel.java
@@ -115,6 +115,20 @@ public final class UiDataModel {
     // Number Formatting
     //
 
+    /**
+     * This method is intended to be used when formatting numbers occurs in a hotspot such as the
+     * update loop of a timer or stopwatch. It returns cached results when possible in order to
+     * provide speed and limit garbage to be collected by the virtual machine.
+     *
+     * @param value a positive integer to format as a String
+     * @return the {@code value} formatted as a String in the current locale
+     * @throws IllegalArgumentException if {@code value} is negative
+     */
+    public String getFormattedNumber(int value) {
+        final int length = (int) Math.log10(value);
+        return getFormattedNumber(false, value, length == 0 ? 1 : length);
+    }
+
     /**
      * This method is intended to be used when formatting numbers occurs in a hotspot such as the
      * update loop of a timer or stopwatch. It returns cached results when possible in order to
