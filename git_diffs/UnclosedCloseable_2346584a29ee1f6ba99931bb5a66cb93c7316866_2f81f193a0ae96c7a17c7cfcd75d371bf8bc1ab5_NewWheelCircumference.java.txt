diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
index ed79252e..e864f92a 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/CscService.java
@@ -37,7 +37,7 @@ public class CscService extends CscServiceID implements Closeable {
     private final Revolution cadence = new Revolution();
     private final Revolution speed = new Revolution();
     private final Averager averageCadence = new Averager(5);
-    private final NewWheelCircumference wheelCircumference;
+    private final WheelCircumference wheelCircumference;
 
 
     private GpxInformation information = GpxInformation.NULL;
@@ -48,7 +48,7 @@ public class CscService extends CscServiceID implements Closeable {
 
     public CscService(ServiceContext c) {
         context = c.getContext();
-        wheelCircumference = new NewWheelCircumference(c, speed);
+        wheelCircumference = new WheelCircumference(c, speed);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/NewWheelCircumference.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/NewWheelCircumference.java
deleted file mode 100644
index 1215e89b..00000000
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/NewWheelCircumference.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package ch.bailu.aat.services.sensor.bluetooth_le;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import java.io.Closeable;
-
-import ch.bailu.aat.gpx.GpxDeltaHelper;
-import ch.bailu.aat.gpx.GpxInformation;
-import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.AppBroadcaster;
-
-public class NewWheelCircumference implements Closeable {
-
-    private static final float MIN_SAMPLE_DISTANCE = 0.5f;
-    private static final float MAX_SAMPLE_DISTANCE = 100f;
-    private static final float MIN_ACCURACY = 10f;
-    private static final int MIN_REVOLUTIONS = 10;
-    private static final int MIN_SAMPLES = 10;
-
-    private final ServiceContext scontext;
-    private final Revolution revolution;
-
-    private long revolutionsStart = 0;
-    private long revolutionsDelta = 0;
-
-    private GpxPointInterface previousLocation = null;
-
-    private float distance = 0f;
-    private int samples = 0;
-
-
-
-    private final BroadcastReceiver onLocationChanged = new BroadcastReceiver() {
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-
-            GpxInformation currentLocation = scontext.getLocationService().getLocationInformation();
-
-            if (previousLocation != null && currentLocation.getAccuracy() <= MIN_ACCURACY) {
-
-                final float dist = GpxDeltaHelper.getDistance(previousLocation, currentLocation);
-
-                if (dist > MIN_SAMPLE_DISTANCE && dist < MAX_SAMPLE_DISTANCE) {
-                    addSample(currentLocation, dist);
-
-                } else {
-                    reset(currentLocation);
-
-                }
-
-            } else {
-                reset(currentLocation);
-            }
-        }
-    };
-
-
-    public NewWheelCircumference (ServiceContext sc, Revolution r) {
-        scontext = sc;
-        revolution = r;
-
-        AppBroadcaster.register(sc.getContext(), onLocationChanged, AppBroadcaster.LOCATION_CHANGED);
-    }
-
-
-    private void addSample(GpxPointInterface location, float dist) {
-        distance += dist;
-        samples ++;
-        revolutionsDelta = revolution.getTotalRevolutions() - revolutionsStart;
-        previousLocation = location;
-    }
-
-
-    private void reset(GpxPointInterface location) {
-        previousLocation = location;
-        distance = 0f;
-        samples = 0;
-        revolutionsDelta = 0;
-        revolutionsStart = revolution.getTotalRevolutions();
-
-    }
-
-
-
-    public float getCircumferenceSI() {
-        if (samples >= MIN_SAMPLES  && revolutionsDelta >= MIN_REVOLUTIONS)
-            return distance / revolutionsDelta;
-
-        return 0f;
-    }
-
-
-
-    @Override
-    public void close() {
-        scontext.getContext().unregisterReceiver(onLocationChanged);
-    }
-}
diff --git a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
index 4524833f..d266185d 100644
--- a/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
+++ b/app/src/main/java/ch/bailu/aat/services/sensor/bluetooth_le/WheelCircumference.java
@@ -13,124 +13,103 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppBroadcaster;
 
 public class WheelCircumference implements Closeable {
+
     private static final float MIN_SAMPLE_DISTANCE = 0.5f;
     private static final float MAX_SAMPLE_DISTANCE = 100f;
-    private static final float MIN_ACCURACY = 5f;
+    private static final float MIN_ACCURACY = 10f;
     private static final int MIN_REVOLUTIONS = 10;
-    private static final int SAMPLE_COUNT = 10;
+    private static final int MIN_SAMPLES = 5;
 
     private final ServiceContext scontext;
     private final Revolution revolution;
-    private final Sample samples[] = new Sample[SAMPLE_COUNT];
 
-    private float distance;
-    private int revolutions;
+    private long revolutionsStart = 0;
+    private long revolutionsDelta = 0;
+
+    private GpxPointInterface previousLocation = null;
+
+    private float distance = 0f;
+    private int samples = 0;
+
+    private int minSamples = MIN_SAMPLES;
+    private float circumference = 0f;
 
-    private int next = 0;
 
-    private boolean registered = true;
 
     private final BroadcastReceiver onLocationChanged = new BroadcastReceiver() {
 
         @Override
         public void onReceive(Context context, Intent intent) {
-            GpxInformation location = scontext.getLocationService().getLocationInformation();
 
-            if (location.getAccuracy() <= MIN_ACCURACY) {
-                samples[next] = new Sample(location, revolution.getTotalRevolutions());
-                next = (next + 1) % SAMPLE_COUNT;
-            }
+            GpxInformation currentLocation = scontext.getLocationService().getLocationInformation();
+
+            if (currentLocation.getAccuracy() <= MIN_ACCURACY) {
+                if (previousLocation == null) {
+                    reset(currentLocation);
+
+                } else {
+                    final float dist = GpxDeltaHelper.getDistance(previousLocation, currentLocation);
+
+                    if (dist > MIN_SAMPLE_DISTANCE && dist < MAX_SAMPLE_DISTANCE) {
+                        addSample(currentLocation, dist);
+
+                    } else {
+                        reset();
 
+                    }
+                }
+            } else {
+                reset();
+            }
         }
     };
 
-    public WheelCircumference (ServiceContext sc, Revolution r) {
+
+
+    public WheelCircumference(ServiceContext sc, Revolution r) {
         scontext = sc;
         revolution = r;
+
         AppBroadcaster.register(sc.getContext(), onLocationChanged, AppBroadcaster.LOCATION_CHANGED);
     }
 
 
-    public float getCircumference() {
-        if (haveAllSamples() && haveMinRevolutions() && haveUsableDistances()) {
-            return distance / revolutions;
-        }
+    private void addSample(GpxPointInterface location, float dist) {
+        distance += dist;
+        samples ++;
+        revolutionsDelta = revolution.getTotalRevolutions() - revolutionsStart;
+        previousLocation = location;
 
-        return 0f;
-    }
-
-
-    private boolean haveAllSamples() {
-        for (Sample s : samples) {
-            if (s == null)
-                return false;
+        if (samples > minSamples  && revolutionsDelta > MIN_REVOLUTIONS) {
+            minSamples = samples;
+            circumference = distance / revolutionsDelta;
         }
-
-        return true;
     }
 
+    private void reset() {
+        reset(null);
+    }
 
-    private boolean haveUsableDistances() {
-        int a = next;
-        int b = a++;
 
+    private void reset(GpxPointInterface location) {
+        previousLocation = location;
         distance = 0f;
-
-        for (int i = 0; i < SAMPLE_COUNT - 1; i++) {
-            a = a % SAMPLE_COUNT;
-            b = b % SAMPLE_COUNT;
-
-
-            float d = GpxDeltaHelper.getDistance(samples[a].location, samples[b].location);
-
-            if (d < MIN_SAMPLE_DISTANCE || d > MAX_SAMPLE_DISTANCE)
-                return false;
-
-            distance += d;
-            a++;
-            b++;
-        }
-
-        return true;
+        samples = 0;
+        revolutionsDelta = 0;
+        revolutionsStart = revolution.getTotalRevolutions();
     }
 
 
-    private boolean haveMinRevolutions() {
-        revolutions = getRevolutions();
 
-        return revolutions >= MIN_REVOLUTIONS;
 
+    public float getCircumferenceSI() {
+        return circumference;
     }
 
 
-    private int getRevolutions() {
-        int a = next;
-        int z = next-1;
-
-        if (z < 0) z = SAMPLE_COUNT-1;
-
-        long first = samples[a].revolutions;
-        long last = samples[z].revolutions;
-
-        return (int) (last - first);
-    }
 
     @Override
     public void close() {
-        if (registered) {
-            scontext.getContext().unregisterReceiver(onLocationChanged);
-            registered = false;
-        }
-    }
-
-
-    private static class Sample {
-        public final GpxPointInterface location;
-        public final long revolutions;
-
-        public Sample(GpxPointInterface l, long r) {
-            revolutions = r;
-            location = l;
-        }
+        scontext.getContext().unregisterReceiver(onLocationChanged);
     }
 }
