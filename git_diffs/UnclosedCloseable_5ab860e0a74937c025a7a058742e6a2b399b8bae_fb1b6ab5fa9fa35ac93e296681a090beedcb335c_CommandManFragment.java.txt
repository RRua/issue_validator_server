diff --git a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
index ece5cc1..a6ff7a0 100644
--- a/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
+++ b/app/src/androidTest/java/com.inspiredandroid.linuxcommandbibliotheca.test/MyAndroidTest.java
@@ -60,127 +60,11 @@ public class MyAndroidTest extends AndroidTestCase {
         helper.close();
     }
 
-
-    public void testRemoveUnnecessaryHtmlTags()
-    {
-        CommandsDbHelper helper = new CommandsDbHelper(mContext);
-
-        Cursor c = helper.getAllCommandPages();
-
-        while (c.moveToNext()) {
-
-            String title = c.getString(c.getColumnIndex("title"));
-            String page = c.getString(c.getColumnIndex("page"));
-            String id = c.getString(c.getColumnIndex("id"));
-
-            page = page.replaceAll("(?i)<font[^>]*>", "");
-            page = page.replaceAll("(?i)</font[^>]*>", "");
-            page = page.replaceAll("(?i)<table[^>]*>", "");
-            page = page.replaceAll("(?i)</table[^>]*>", "");
-            page = page.replaceAll("(?i)<tr[^>]*>", "");
-            page = page.replaceAll("(?i)</tr[^>]*>", "");
-            page = page.replaceAll("(?i)<td[^>]*>", "");
-            page = page.replaceAll("(?i)</td[^>]*>", "");
-            page = page.replaceAll("(?i)<body[^>]*>", "");
-            page = page.replaceAll("(?i)</body[^>]*>", "");
-            page = page.replaceAll("(?i)<html[^>]*>", "");
-            page = page.replaceAll("(?i)</html[^>]*>", "");
-            page = page.replaceAll("(?i)<hr[^>]*>", "");
-
-            // remove style='..'
-            page = page.replaceAll("(?i) style='[^>]*'", "");
-
-            // remove 2 or more spaces
-            page = page.replaceAll(" +", " ");
-
-
-            page = page.trim();
-            title = title.trim();
-
-
-            ContentValues newValues = new ContentValues();
-            newValues.put("page", page);
-            newValues.put("title", title);
-
-            helper.getWritableDatabase().update("commandpages", newValues, "id=" + id, null);
-        }
-
-
-        exportDB();
-    }
-
-    /**
-     * Loop thought all man pages and split by "<h2>" html tag. The tag is standard used as an
-     * optical divider in man pages
-     */
-    public void deactivatedtestSplitManPagesIntoSubpages() {
-        CommandsDbHelper helper = new CommandsDbHelper(mContext);
-
-        Cursor c = helper.getAllCommands();
-
-        String missingOnes = "";
-
-        while(c.moveToNext()) {
-            String manpage = c.getString(c.getColumnIndex(CommandsDBTableModel.COL_MANPAGE));
-            String name = c.getString(c.getColumnIndex(CommandsDBTableModel.COL_NAME));
-            String id = c.getString(c.getColumnIndex(CommandsDBTableModel.COL_ID));
-
-            String d = "<h2>";
-            String[] subpages = manpage.split(d);
-
-            if(subpages.length > 1) {
-                // first method seam to work
-                for (int i = 1; i < subpages.length; i++) {
-                    String subsubpage = subpages[i];
-
-                    String d2 = "</h2>";
-                    String[] phrases = subsubpage.split(d2);
-                    if (phrases.length > 0) {
-                        String title = phrases[0].split("<a")[0];
-                        String man = phrases[1];
-
-                        String sql = "INSERT INTO commandpages (commandid, title, page) VALUES (\""+id+"\",\""+title+"\",\""+man+"\")";
-                        helper.getWritableDatabase().execSQL(sql);
-
-                        ContentValues newValues = new ContentValues();
-                        newValues.put("manpage", "");
-
-                        helper.getWritableDatabase().update("commands", newValues, "_id=" + id, null);
-                    }
-                }
-            }
-        }
-
-        assertTrue("not enought sub pages for " + missingOnes, missingOnes.isEmpty());
-    }
-
-    private void exportDB(){
-        String SAMPLE_DB_NAME = "commands.db";
-        File sd = Environment.getExternalStorageDirectory();
-        File data = Environment.getDataDirectory();
-        FileChannel source;
-        FileChannel destination;
-        String currentDBPath = "/data/"+ "com.inspiredandroid.linuxcommandbibliotheca" +"/databases/"+SAMPLE_DB_NAME;
-
-        File currentDB = new File(data, currentDBPath);
-        File backupDB = new File(sd, SAMPLE_DB_NAME);
-
-        try {
-            source = new FileInputStream(currentDB).getChannel();
-            destination = new FileOutputStream(backupDB).getChannel();
-            destination.transferFrom(source, 0, source.size());
-            source.close();
-            destination.close();
-        } catch(IOException e) {
-            e.printStackTrace();
-        }
-    }
-
     /**
      * Go thought all the man pages links of the scripts fragment
      * @throws Exception
      */
-    public void t2estScriptManPageLinks() throws Exception
+    public void testScriptManPageLinks() throws Exception
     {
         InputStream inputStream = getContext().getResources().openRawResource(R.raw.commands);
 
@@ -203,7 +87,7 @@ public class MyAndroidTest extends AndroidTestCase {
      * Go thought all the man pages links of the tips fragment
      * @throws Exception
      */
-    public void t2estTipsManPageLinks() throws Exception
+    public void testTipsManPageLinks() throws Exception
     {
         final int[] IDS = new int[] {
                 R.array.fragment_tips_background_code_array,
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java
index d0a4232..2aa4cca 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/CommandsAdapter.java
@@ -2,6 +2,8 @@ package com.inspiredandroid.linuxcommandbibliotheca.adapter;
 
 import android.content.Context;
 import android.database.Cursor;
+import android.graphics.Color;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.widget.ResourceCursorAdapter;
 import android.view.View;
 import android.widget.ImageView;
@@ -10,6 +12,7 @@ import android.widget.TextView;
 import com.inspiredandroid.linuxcommandbibliotheca.R;
 import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
 import com.inspiredandroid.linuxcommandbibliotheca.models.CommandsDBTableModel;
+import com.inspiredandroid.linuxcommandbibliotheca.sql.BookmarkManager;
 
 /**
  * Created by Simon Schubert
@@ -37,6 +40,14 @@ public class CommandsAdapter extends ResourceCursorAdapter {
         int section = cursor.getInt(cursor.getColumnIndex(CommandsDBTableModel.COL_CATEGORY));
         ImageView ivIcon = (ImageView) view.findViewById(R.id.row_command_child_iv_icon);
         ivIcon.setImageResource(getSectionImageResource(section));
+
+        // mark bookmark
+        long id = cursor.getLong(cursor.getColumnIndex(CommandsDBTableModel.COL_ID));
+        if(BookmarkManager.hasBookmark(mContext, id)) {
+            ivIcon.setColorFilter(ContextCompat.getColor(context, R.color.ab_primary));
+        } else {
+            ivIcon.clearColorFilter();
+        }
     }
 
     /**
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
index 327a8c7..6b560a0 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/adapter/ManExpandableListAdapter.java
@@ -1,7 +1,10 @@
 package com.inspiredandroid.linuxcommandbibliotheca.adapter;
 
 import android.app.Activity;
+import android.database.Cursor;
 import android.text.Html;
+import android.text.SpannableStringBuilder;
+import android.text.Spanned;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -13,8 +16,12 @@ import android.widget.TextView;
 import com.inspiredandroid.linuxcommandbibliotheca.R;
 import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
 import com.inspiredandroid.linuxcommandbibliotheca.models.CommandGroupModel;
+import com.inspiredandroid.linuxcommandbibliotheca.sql.CommandsDbHelper;
+import com.inspiredandroid.linuxcommandbibliotheca.view.CodeTextView;
 
 import java.util.ArrayList;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /**
  * Created by Simon Schubert
@@ -22,19 +29,19 @@ import java.util.ArrayList;
 public class ManExpandableListAdapter extends BaseExpandableListAdapter {
 
     private Activity mContext;
-    private ArrayList<String> mChild;
+    public ArrayList<ArrayList<CharSequence>> mChild;
     private ArrayList<String> mGroup;
 
-    public ManExpandableListAdapter(Activity context, ArrayList<String> group, ArrayList<String> child)
+    public ManExpandableListAdapter(Activity context, ArrayList<String> group, ArrayList<ArrayList<CharSequence>> child)
     {
         this.mContext = context;
         this.mChild = child;
         this.mGroup = group;
     }
 
-    public String getChild(int groupPosition, int childPosition)
+    public CharSequence getChild(int groupPosition, int childPosition)
     {
-        return mChild.get(groupPosition);
+        return mChild.get(groupPosition).get(childPosition);
     }
 
     @Override
@@ -47,7 +54,7 @@ public class ManExpandableListAdapter extends BaseExpandableListAdapter {
     public View getChildView(final int groupPosition, final int childPosition,
                              boolean isLastChild, View convertView, ViewGroup parent)
     {
-        String description = getChild(groupPosition, childPosition);
+        CharSequence description = getChild(groupPosition, childPosition);
         CommandViewHolder holder;
 
         if (convertView == null) {
@@ -55,14 +62,18 @@ public class ManExpandableListAdapter extends BaseExpandableListAdapter {
             convertView = inflater.inflate(R.layout.row_man_child, parent, false);
 
             holder = new CommandViewHolder();
-            holder.desc = (TextView) convertView.findViewById(R.id.row_man_child_tv_description);
+            holder.desc = (CodeTextView) convertView.findViewById(R.id.row_man_child_tv_description);
 
             convertView.setTag(holder);
         } else {
             holder = (CommandViewHolder) convertView.getTag();
         }
 
-        holder.desc.setText(Html.fromHtml(description));
+        holder.desc.setText(description);
+
+        if(getGroup(groupPosition).toString().toUpperCase().equals("SEE ALSO")) {
+            holder.desc.setCommands(extractCommandsFromDescription(description.toString()));
+        }
 
         return convertView;
     }
@@ -70,7 +81,7 @@ public class ManExpandableListAdapter extends BaseExpandableListAdapter {
     @Override
     public int getChildrenCount(int groupPosition)
     {
-        return 1;
+        return mChild.get(groupPosition).size();
     }
 
     @Override
@@ -127,8 +138,49 @@ public class ManExpandableListAdapter extends BaseExpandableListAdapter {
         return true;
     }
 
+    @Override
+    public boolean areAllItemsEnabled()
+    {
+        return false;
+    }
+
+    /**
+     * Search for commands and return list of commands which exist in database
+     * @param description
+     * @return
+     */
+    private String[] extractCommandsFromDescription(String description) {
+        CommandsDbHelper helper = new CommandsDbHelper(mContext);
+
+        // match "command(category)" e.g: gzip(1)
+        Pattern p = Pattern.compile("[[:word:]]+\\s?\\(\\w\\)");
+        Matcher m = p.matcher(description);
+
+        // loop results and add if command exists in db
+        ArrayList<String> tmp = new ArrayList<>();
+        while(m.find()) {
+            String extractedCommand = m.group(0).substring(0, m.group(0).length()-3).trim();
+            Cursor c = helper.getCommandFromName(extractedCommand);
+            if(c.getCount()>0) {
+                tmp.add(extractedCommand);
+            }
+            c.close();
+        }
+
+        // convert String[] to ArrayList
+        String[] commands = new String[tmp.size()];
+        for(int i = 0; i < tmp.size(); i++) {
+            String cmd = tmp.get(i);
+            commands[i] = cmd;
+        }
+
+        helper.close();
+
+        return commands;
+    }
+
     public class CommandViewHolder {
-        public TextView desc;
+        public CodeTextView desc;
     }
 
     public class CommandGroupViewHolder {
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/GrepManAsHtmlAsyncTask.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/GrepManAsHtmlAsyncTask.java
deleted file mode 100644
index 35c5037..0000000
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/GrepManAsHtmlAsyncTask.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.inspiredandroid.linuxcommandbibliotheca.asnytasks;
-
-import android.content.Context;
-import android.database.Cursor;
-import android.os.AsyncTask;
-import android.text.Html;
-import android.text.Spanned;
-
-import com.inspiredandroid.linuxcommandbibliotheca.interfaces.ConvertManFromHtmlToSpannableInterface;
-import com.inspiredandroid.linuxcommandbibliotheca.models.CommandsDBTableModel;
-import com.inspiredandroid.linuxcommandbibliotheca.sql.CommandsDbHelper;
-
-/**
- * Created by Simon Schubert
- */
-public class GrepManAsHtmlAsyncTask extends AsyncTask<String, Spanned, Spanned> {
-
-    ConvertManFromHtmlToSpannableInterface callback;
-    Context context;
-    long id;
-
-    public GrepManAsHtmlAsyncTask(Context context, long id, ConvertManFromHtmlToSpannableInterface callback)
-    {
-        this.context = context;
-        this.id = id;
-        this.callback = callback;
-    }
-
-    @Override
-    protected Spanned doInBackground(String... params)
-    {
-        // Init cursor
-        CommandsDbHelper mDbHelper = new CommandsDbHelper(context);
-        Cursor c = mDbHelper.getCommandFromId(id);
-
-        // Get description
-        c.moveToFirst();
-        String description = c.getString(c.getColumnIndex(CommandsDBTableModel.COL_MANPAGE));
-
-        c.close();
-
-        mDbHelper.close();
-
-        return Html.fromHtml(description);
-    }
-
-    @Override
-    protected void onPostExecute(Spanned spanned)
-    {
-        super.onPostExecute(spanned);
-
-        callback.onConvertedHtmlToSpannable(spanned);
-    }
-
-}
-
-
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/SearchManAsyncTask.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/SearchManAsyncTask.java
new file mode 100644
index 0000000..a21a28a
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/asnytasks/SearchManAsyncTask.java
@@ -0,0 +1,75 @@
+package com.inspiredandroid.linuxcommandbibliotheca.asnytasks;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.os.AsyncTask;
+import android.text.Html;
+import android.text.Spanned;
+
+import com.inspiredandroid.linuxcommandbibliotheca.interfaces.ConvertManFromHtmlToSpannableInterface;
+import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
+import com.inspiredandroid.linuxcommandbibliotheca.models.CommandsDBTableModel;
+import com.inspiredandroid.linuxcommandbibliotheca.sql.CommandsDbHelper;
+
+import java.text.Normalizer;
+import java.util.ArrayList;
+
+/**
+ * Created by Simon Schubert
+ */
+public class SearchManAsyncTask extends AsyncTask<String, ArrayList<ArrayList<CharSequence>>, ArrayList<ArrayList<CharSequence>>> {
+
+    ConvertManFromHtmlToSpannableInterface callback;
+    Context context;
+    ArrayList<ArrayList<CharSequence>> mChildren;
+    String query;
+
+    public SearchManAsyncTask(Context context, String query, ArrayList<ArrayList<CharSequence>> children, ConvertManFromHtmlToSpannableInterface callback)
+    {
+        this.context = context;
+        this.mChildren = children;
+        this.callback = callback;
+        this.query = query;
+    }
+
+    @Override
+    protected ArrayList<ArrayList<CharSequence>> doInBackground(String... params)
+    {
+        for(ArrayList<CharSequence> children : mChildren) {
+            for(int i = 0; i < children.size(); i++) {
+                CharSequence chld = children.get(i);
+
+                // String normalizedText = Normalizer.normalize(chld, Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
+
+                // (re)init global variables
+                //indexes.clear();
+                //indexesPosition = 0;
+                //query = q;
+                // int indexStart = 0;
+
+                // find all indexes
+                // while (normalizedText.indexOf(query, indexStart) != -1) {
+
+                //    indexStart = normalizedText.indexOf(query, indexStart);
+                    //indexes.add(indexStart);
+                //    indexStart++;
+                //}
+
+                children.set(i, Utils.highlightQueryInsideText(context, query, chld.toString()));
+            }
+        }
+
+        return mChildren;
+    }
+
+    @Override
+    protected void onPostExecute(ArrayList<ArrayList<CharSequence>> children)
+    {
+        super.onPostExecute(children);
+
+        callback.onConvertedHtmlToSpannable(children);
+    }
+
+}
+
+
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
index 0a4657b..2666ddd 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandManFragment.java
@@ -8,8 +8,7 @@ import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.view.MenuItemCompat;
 import android.support.v7.widget.SearchView;
-import android.text.Spanned;
-import android.util.Log;
+import android.text.Html;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -18,19 +17,16 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ExpandableListView;
 import android.widget.ImageButton;
-import android.widget.ScrollView;
-import android.widget.TextView;
 
 import com.google.android.gms.appindexing.Action;
 import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity;
 import com.inspiredandroid.linuxcommandbibliotheca.R;
 import com.inspiredandroid.linuxcommandbibliotheca.adapter.ManExpandableListAdapter;
-import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.GrepManAsHtmlAsyncTask;
+import com.inspiredandroid.linuxcommandbibliotheca.asnytasks.SearchManAsyncTask;
 import com.inspiredandroid.linuxcommandbibliotheca.interfaces.ConvertManFromHtmlToSpannableInterface;
-import com.inspiredandroid.linuxcommandbibliotheca.misc.Utils;
+import com.inspiredandroid.linuxcommandbibliotheca.sql.BookmarkManager;
 import com.inspiredandroid.linuxcommandbibliotheca.sql.CommandsDbHelper;
 
-import java.text.Normalizer;
 import java.util.ArrayList;
 
 /**
@@ -39,6 +35,7 @@ import java.util.ArrayList;
 public class CommandManFragment extends AppIndexFragment implements ConvertManFromHtmlToSpannableInterface, View.OnClickListener {
 
     ExpandableListView lv;
+    ManExpandableListAdapter adapter;
     String name;
     long id;
     int category;
@@ -75,6 +72,8 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
         id = b.getLong(CommandManActivity.EXTRA_COMMAND_ID);
         name = b.getString(CommandManActivity.EXTRA_COMMAND_NAME);
         category = b.getInt(CommandManActivity.EXTRA_COMMAND_CATEGORY);
+
+        adapter = createAdapter();
     }
 
     @Override
@@ -83,21 +82,6 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
         View view = inflater.inflate(R.layout.fragment_command_man, container, false);
 
         lv = (ExpandableListView) view.findViewById(R.id.fraggment_commandman_elv);
-
-        CommandsDbHelper helper = new CommandsDbHelper(getContext());
-
-        Cursor c = helper.getCommandPagesFromId(id);
-
-        ArrayList<String> groups = new ArrayList<>();
-        ArrayList<String> child = new ArrayList<>();
-        while(c.moveToNext()) {
-            String title = c.getString(c.getColumnIndex("title"));
-            String page = c.getString(c.getColumnIndex("page"));
-            groups.add(title);
-            child.add(page);
-        }
-
-        ManExpandableListAdapter adapter = new ManExpandableListAdapter(getActivity(), groups, child);
         lv.setAdapter(adapter);
 
         btnUp = (ImageButton) view.findViewById(R.id.fragment_command_man_btn_up);
@@ -155,6 +139,84 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
                 }
             });
         }
+
+        MenuItem bookmarkItem = menu.findItem(R.id.bookmark);
+        bookmarkItem.setIcon(BookmarkManager.hasBookmark(getContext(), id) ? android.R.drawable.ic_menu_revert : android.R.drawable.ic_menu_save);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item)
+    {
+        if (item.getItemId() == R.id.bookmark) {
+            toogleBookmarkState();
+            getActivity().supportInvalidateOptionsMenu();
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Split String every partitionSize character
+     * @param string
+     * @param partitionSize
+     * @return
+     */
+    private static ArrayList<String> getParts(String string, int partitionSize) {
+        ArrayList<String> parts = new ArrayList<>();
+        int len = string.length();
+        for (int i=0; i<len; i+=partitionSize)
+        {
+            parts.add(string.substring(i, Math.min(len, i + partitionSize)));
+        }
+        return parts;
+    }
+
+    /**
+     * Split long page text into child list views
+     * @return
+     */
+    private ManExpandableListAdapter createAdapter() {
+        CommandsDbHelper helper = new CommandsDbHelper(getContext());
+
+        Cursor c = helper.getCommandPagesFromId(id);
+
+        ArrayList<String> groups = new ArrayList<>();
+        ArrayList<ArrayList<CharSequence>>  child = new ArrayList<>();
+        while(c.moveToNext()) {
+            String title = c.getString(c.getColumnIndex("title"));
+            String page = c.getString(c.getColumnIndex("page"));
+            groups.add(title);
+
+            CharSequence chars = Html.fromHtml(page);
+
+            ArrayList<CharSequence> pageSplit = new ArrayList<>();
+            String[] tmp = chars.toString().split("\\r?\\n");
+            for(String tmpSplit : tmp) {
+                if(tmpSplit.length()<600) {
+                    if(!tmpSplit.isEmpty()) {
+                        pageSplit.add(tmpSplit);
+                    }
+                } else {
+                    pageSplit.addAll(getParts(tmpSplit, 600));
+                }
+            }
+            child.add(pageSplit);
+        }
+
+        c.close();
+
+        helper.close();
+
+        return new ManExpandableListAdapter(getActivity(), groups, child);
+    }
+
+    private void toogleBookmarkState()
+    {
+        if(BookmarkManager.hasBookmark(getContext(), id)) {
+            BookmarkManager.removeBookmark(getContext(), id);
+        } else {
+            BookmarkManager.addBookmark(getContext(), id);
+        }
     }
 
     /**
@@ -162,8 +224,9 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
      */
     private void resetSearchResults()
     {
-        // String text = tvDescription.getText().toString();
-        // tvDescription.setText(text);
+        SearchManAsyncTask async = new SearchManAsyncTask(getContext(), "", adapter.mChild, this);
+        asyncTasks.add(async);
+        async.execute();
 
         hideButton();
     }
@@ -175,23 +238,10 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
      */
     private void search(String q)
     {
+        SearchManAsyncTask async = new SearchManAsyncTask(getContext(), q, adapter.mChild, this);
+        asyncTasks.add(async);
+        async.execute();
         /*
-        String normalizedText = Normalizer.normalize(tvDescription.getText().toString(), Normalizer.Form.NFD).replaceAll("\\p{InCombiningDiacriticalMarks}+", "").toLowerCase();
-
-        // (re)init global variables
-        indexes.clear();
-        indexesPosition = 0;
-        query = q;
-        int indexStart = 0;
-
-        // find all indexes
-        while (normalizedText.indexOf(q, indexStart) != -1) {
-
-            indexStart = normalizedText.indexOf(q, indexStart);
-            indexes.add(indexStart);
-            indexStart++;
-        }
-
         // jump to first occur
         if (indexes.size() > 0) {
             showButton();
@@ -201,7 +251,7 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
         }
 
         // highlight occurs
-        // tvDescription.setText(Utils.highlightQueryInsideText(getContext(), query, tvDescription.getText().toString()));
+        tvDescription.setText(Utils.highlightQueryInsideText(getContext(), query, tvDescription.getText().toString()));
         */
     }
 
@@ -263,9 +313,10 @@ public class CommandManFragment extends AppIndexFragment implements ConvertManFr
     }
 
     @Override
-    public void onConvertedHtmlToSpannable(Spanned spannable)
+    public void onConvertedHtmlToSpannable(ArrayList<ArrayList<CharSequence>> spannable)
     {
-
+        adapter.mChild = spannable;
+        adapter.notifyDataSetChanged();
     }
 
     @Override
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
index 1645c6c..1eb692b 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/CommandsFragment.java
@@ -25,6 +25,7 @@ import com.inspiredandroid.linuxcommandbibliotheca.AboutActivity;
 import com.inspiredandroid.linuxcommandbibliotheca.CommandManActivity;
 import com.inspiredandroid.linuxcommandbibliotheca.R;
 import com.inspiredandroid.linuxcommandbibliotheca.adapter.CommandsAdapter;
+import com.inspiredandroid.linuxcommandbibliotheca.sql.BookmarkManager;
 import com.inspiredandroid.linuxcommandbibliotheca.sql.CommandsDbHelper;
 
 import java.text.Normalizer;
@@ -141,6 +142,16 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
         mDbHelper.close();
     }
 
+    @Override
+    public void onResume()
+    {
+        super.onResume();
+
+        if(BookmarkManager.hasBookmarkChanged(getContext())) {
+            resetSearchResults();
+        }
+    }
+
     private void startCommandManActivity(long id)
     {
         Intent intent = new Intent(getContext(), CommandManActivity.class);
@@ -158,7 +169,7 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
 
     private void createAdapter()
     {
-        adapter = new CommandsAdapter(getActivity(), R.layout.row_command_child, mDbHelper.getAllCommands(), true);
+        adapter = new CommandsAdapter(getActivity(), R.layout.row_command_child, mDbHelper.getAllCommands(BookmarkManager.getBookmarkIdsChain(getContext())), true);
     }
 
     /**
@@ -167,7 +178,7 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
     private void resetSearchResults()
     {
         // Update adapter
-        adapter.updateCursor(mDbHelper.getAllCommands(), "");
+        adapter.updateCursor(mDbHelper.getAllCommands(BookmarkManager.getBookmarkIdsChain(getContext())), "");
     }
 
     /**
@@ -189,7 +200,7 @@ public class CommandsFragment extends Fragment implements AdapterView.OnItemClic
             @Override
             public Cursor loadInBackground()
             {
-                return mDbHelper.getAllCommands();
+                return mDbHelper.getAllCommands(BookmarkManager.getBookmarkIdsChain(getContext()));
             }
         };
     }
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipFragment.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipFragment.java
index b3175da..37df2d0 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipFragment.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/fragments/TipFragment.java
@@ -60,8 +60,8 @@ public class TipFragment extends AppIndexFragment implements View.OnClickListene
 
         view.findViewById(R.id.fragment_tips_btn_quiz).setOnClickListener(this);
         tvRedirection = (TextView) view.findViewById(R.id.fragment_tips_tv_redirection);
+
         ClickableTextView tvLinkToRedirection = (ClickableTextView) view.findViewById(R.id.fragment_tips_tv_link_to_redirection);
-        tvLinkToRedirection.setClickableWord("below");
         tvLinkToRedirection.setClickInterface(new ClickInterface() {
             @Override
             public void onClick()
@@ -69,6 +69,7 @@ public class TipFragment extends AppIndexFragment implements View.OnClickListene
                 scrollToRedirectionView();
             }
         });
+        tvLinkToRedirection.setClickableWord("below");
 
         return view;
     }
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/ConvertManFromHtmlToSpannableInterface.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/ConvertManFromHtmlToSpannableInterface.java
index afb7200..fbc07ab 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/ConvertManFromHtmlToSpannableInterface.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/interfaces/ConvertManFromHtmlToSpannableInterface.java
@@ -2,6 +2,8 @@ package com.inspiredandroid.linuxcommandbibliotheca.interfaces;
 
 import android.text.Spanned;
 
+import java.util.ArrayList;
+
 /**
  * Created by Simon Schubert
  */
@@ -10,5 +12,5 @@ public interface ConvertManFromHtmlToSpannableInterface {
     /**
      * @param spannable
      */
-    void onConvertedHtmlToSpannable(Spanned spannable);
+    void onConvertedHtmlToSpannable(ArrayList<ArrayList<CharSequence>> spannable);
 }
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/BookmarkManager.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/BookmarkManager.java
new file mode 100644
index 0000000..8d8c56f
--- /dev/null
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/BookmarkManager.java
@@ -0,0 +1,114 @@
+package com.inspiredandroid.linuxcommandbibliotheca.sql;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import java.util.ArrayList;
+
+/**
+ * Created by simon on 29.11.15.
+ */
+public class BookmarkManager {
+
+    private static final String KEY_BOOKMARKS = "KEY_BOOKMARKS";
+    private static final String KEY_BOOKMARKCHANGED = "KEY_BOOKMARKCHANGED";
+
+    /**
+     * get arraylist of ids
+     * @param context
+     * @return
+     */
+    public static ArrayList<Long> getBookmarkIds(Context context) {
+        String[] bookmarkIds = getBookmarkIdsChain(context).split(",");
+        ArrayList<Long> ids = new ArrayList<>();
+        for(String id : bookmarkIds) {
+            if(!id.isEmpty()) {
+                ids.add(Long.valueOf(id));
+            }
+        }
+        return ids;
+    }
+
+    /**
+     * get list of ids divided by commas
+     * @param context
+     * @return
+     */
+    public static String getBookmarkIdsChain(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String bookmarksChain = prefs.getString(KEY_BOOKMARKS, "");
+        if(!bookmarksChain.isEmpty()) {
+            bookmarksChain = bookmarksChain.substring(1);
+        }
+        return bookmarksChain;
+    }
+
+    /**
+     * add id to bookmark list
+     * @param context
+     * @param id
+     */
+    public static void addBookmark(Context context, long id)
+    {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String bookmarksChain = prefs.getString(KEY_BOOKMARKS, "");
+        bookmarksChain += "," + id;
+        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply();
+        bookmarkHasChanged(context);
+    }
+
+    /**
+     * is id bookmarked
+     * @param context
+     * @param id
+     * @return
+     */
+    public static boolean hasBookmark(Context context, long id)
+    {
+        return getBookmarkIds(context).contains(id);
+    }
+
+    /**
+     * remove id from list
+     * @param context
+     * @param id
+     */
+    public static void removeBookmark(Context context, long id)
+    {
+        ArrayList<Long> bookmarksIds = getBookmarkIds(context);
+
+        bookmarksIds.remove(id);
+
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String bookmarksChain = "";
+        for(Long bookmark : bookmarksIds) {
+            bookmarksChain += "," + bookmark;
+        }
+        prefs.edit().putString(KEY_BOOKMARKS, bookmarksChain).apply();
+
+        bookmarkHasChanged(context);
+    }
+
+    /**
+     * Set a flag for the list view that the content has changed
+     * @param context
+     */
+    private static void bookmarkHasChanged(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, true).apply();
+    }
+
+    /**
+     * Reads the flag if bookmark has changed, automatically resets flag
+     * @param context
+     * @return
+     */
+    public static boolean hasBookmarkChanged(Context context)
+    {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        boolean changed = prefs.getBoolean(KEY_BOOKMARKCHANGED, false);
+        prefs.edit().putBoolean(KEY_BOOKMARKCHANGED, false).apply();
+        return changed;
+    }
+}
diff --git a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/CommandsDbHelper.java b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/CommandsDbHelper.java
index fce6a89..a4ab16e 100644
--- a/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/CommandsDbHelper.java
+++ b/app/src/main/java/com/inspiredandroid/linuxcommandbibliotheca/sql/CommandsDbHelper.java
@@ -44,9 +44,10 @@ public class CommandsDbHelper extends SQLiteAssetHelper {
      *
      * @return
      */
-    public Cursor getAllCommands()
+    public Cursor getAllCommands(String bookmarks)
     {
-        return getReadableDatabase().rawQuery("SELECT * FROM " + CommandsDBTableModel.TABLE_COMMANDS + " ORDER BY " + CommandsDBTableModel.COL_NAME + " COLLATE NOCASE ASC", null);
+        return getReadableDatabase().rawQuery("SELECT * FROM " + CommandsDBTableModel.TABLE_COMMANDS + " ORDER BY case when " + CommandsDBTableModel.COL_ID + " in (" + bookmarks + ") then -1 else " + CommandsDBTableModel.COL_NAME + " COLLATE NOCASE end", null);
+        // return getReadableDatabase().rawQuery("SELECT * FROM " + CommandsDBTableModel.TABLE_COMMANDS + " ORDER BY " + CommandsDBTableModel.COL_NAME + " COLLATE NOCASE ASC", null);
     }
 
     /**
