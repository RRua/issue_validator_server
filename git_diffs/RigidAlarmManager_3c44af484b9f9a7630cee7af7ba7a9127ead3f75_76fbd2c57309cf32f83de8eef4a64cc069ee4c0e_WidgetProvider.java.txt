diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/Reddinator.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/Reddinator.java
index e0a8a65..fa2b81b 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/Reddinator.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/Reddinator.java
@@ -76,6 +76,15 @@ public class Reddinator extends Application {
     public final static String COLOR_VOTE = "#A5A5A5";
     public final static String COLOR_UPVOTE_ACTIVE = "#FF8B60";
     public final static String COLOR_DOWNVOTE_ACTIVE = "#9494FF";
+
+    public static final String ITEM_FEED_POSITION = "ITEM_FEED_POSITION";
+    public static final String ITEM_URL = "ITEM_URL";
+    public static final String ITEM_PERMALINK = "ITEM_PERMALINK";
+    public static final String ITEM_ID = "ITEM_ID";
+    public static final String ITEM_DOMAIN = "ITEM_DOMAIN";
+    public static final String ITEM_SUBREDDIT = "ITEM_SUBREDDIT";
+    public static final String ITEM_USERLIKES = "ITEM_USERLIKES";
+
     private int loadtype = 0; // tells the service what to do when notifyAppDataChanged is fired
     private boolean bypassCache = false; // tells the factory to bypass the cache when creating a new remoteviewsfacotry
     public RedditData mRedditData;
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/FeedItemDialogActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/FeedItemDialogActivity.java
index e6253a3..1ec55d1 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/FeedItemDialogActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/FeedItemDialogActivity.java
@@ -40,13 +40,11 @@ import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.ThemeManager;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.HidePostTask;
 import au.com.wallaceit.reddinator.tasks.SavePostTask;
 import au.com.wallaceit.reddinator.tasks.WidgetVoteTask;
 
-import static android.content.Intent.ACTION_VIEW;
-
 public class FeedItemDialogActivity extends Activity {
     public static final String EXTRA_CURRENT_FEED_PATH = "feedPath";
 
@@ -82,8 +80,8 @@ public class FeedItemDialogActivity extends Activity {
                 String redditId;
                 switch (key){
                     case "hide_post":
-                        redditId = getIntent().getStringExtra(WidgetProvider.ITEM_ID);
-                        int feedPos = getIntent().getIntExtra(WidgetProvider.ITEM_FEED_POSITION, 0);
+                        redditId = getIntent().getStringExtra(Reddinator.ITEM_ID);
+                        int feedPos = getIntent().getIntExtra(Reddinator.ITEM_FEED_POSITION, 0);
                         if (global.mRedditData.isLoggedIn()){
                             new HidePostTask(FeedItemDialogActivity.this, false, null).execute(redditId);
                         } else {
@@ -91,21 +89,21 @@ public class FeedItemDialogActivity extends Activity {
                         }
                         global.removePostFromFeed(widgetId, feedPos, redditId);
                         if (widgetId>0) {
-                            WidgetProvider.hideLoaderAndRefreshViews(FeedItemDialogActivity.this, widgetId, false);
+                            WidgetCommon.hideLoaderAndRefreshViews(FeedItemDialogActivity.this, widgetId, false);
                         } else {
                             close(5); // tell main activity to refresh views
                             return;
                         }
                         break;
                     case "save_post":
-                        redditId = getIntent().getStringExtra(WidgetProvider.ITEM_ID);
+                        redditId = getIntent().getStringExtra(Reddinator.ITEM_ID);
                         (new SavePostTask(FeedItemDialogActivity.this, widgetId>0, null)).execute("link", redditId);
                         break;
                     case "share_post":
                         Utilities.showPostShareDialog(
                                 FeedItemDialogActivity.this,
-                                getIntent().getStringExtra(WidgetProvider.ITEM_URL),
-                                getIntent().getStringExtra(WidgetProvider.ITEM_PERMALINK))
+                                getIntent().getStringExtra(Reddinator.ITEM_URL),
+                                getIntent().getStringExtra(Reddinator.ITEM_PERMALINK))
                                 .setOnDismissListener(new DialogInterface.OnDismissListener() {
                                     @Override
                                     public void onDismiss(DialogInterface dialog) {
@@ -116,15 +114,15 @@ public class FeedItemDialogActivity extends Activity {
                         return;
                     case "open_post":
                         // open link in browser
-                        Utilities.intentActionView(FeedItemDialogActivity.this, getIntent().getStringExtra(WidgetProvider.ITEM_URL));
+                        Utilities.intentActionView(FeedItemDialogActivity.this, getIntent().getStringExtra(Reddinator.ITEM_URL));
                         break;
                     case "open_comments":
                         // open reddit comments page in browser
-                        Utilities.intentActionView(FeedItemDialogActivity.this, "https://www.reddit.com" + getIntent().getStringExtra(WidgetProvider.ITEM_PERMALINK));
+                        Utilities.intentActionView(FeedItemDialogActivity.this, "https://www.reddit.com" + getIntent().getStringExtra(Reddinator.ITEM_PERMALINK));
                         break;
                     case "view_subreddit":
                         // view subreddit of this item
-                        String subreddit = getIntent().getStringExtra(WidgetProvider.ITEM_SUBREDDIT);
+                        String subreddit = getIntent().getStringExtra(Reddinator.ITEM_SUBREDDIT);
                         if (widgetId < 0) {
                             String feedPath = "/r/" + subreddit;
                             if (widgetId == -2) {
@@ -141,7 +139,7 @@ public class FeedItemDialogActivity extends Activity {
                         } else {
                             global.getSubredditManager().setFeedSubreddit(widgetId, subreddit, null);
                             if (widgetId > 0) {
-                                WidgetProvider.showLoaderAndUpdate(FeedItemDialogActivity.this, widgetId, false);
+                                WidgetCommon.showLoaderAndUpdate(FeedItemDialogActivity.this, widgetId, false);
                             } else {
                                 close(2); // tell main activity to update
                                 return;
@@ -150,7 +148,7 @@ public class FeedItemDialogActivity extends Activity {
                         break;
                     case "view_domain":
                         // view listings for the domain of this item
-                        String domain = getIntent().getStringExtra(WidgetProvider.ITEM_DOMAIN);
+                        String domain = getIntent().getStringExtra(Reddinator.ITEM_DOMAIN);
                         if (widgetId < 0) {
                             String feedPath = "/domain/" + domain;
                             if (widgetId == -2) {
@@ -165,7 +163,7 @@ public class FeedItemDialogActivity extends Activity {
                         } else {
                             global.getSubredditManager().setFeedDomain(widgetId, domain);
                             if (widgetId > 0) {
-                                WidgetProvider.showLoaderAndUpdate(FeedItemDialogActivity.this, widgetId, false);
+                                WidgetCommon.showLoaderAndUpdate(FeedItemDialogActivity.this, widgetId, false);
                             } else {
                                 close(2);
                                 return;
@@ -177,7 +175,7 @@ public class FeedItemDialogActivity extends Activity {
             }
         });
         // setup voting buttons
-        String userLikes = getIntent().getStringExtra(WidgetProvider.ITEM_USERLIKES);
+        String userLikes = getIntent().getStringExtra(Reddinator.ITEM_USERLIKES);
         IconTextView upvote = (IconTextView) dialog.findViewById(R.id.opt_upvote);
         IconTextView downvote = (IconTextView) dialog.findViewById(R.id.opt_downvote);
         if (!userLikes.equals("null")) {
@@ -195,8 +193,8 @@ public class FeedItemDialogActivity extends Activity {
                             FeedItemDialogActivity.this,
                             getIntent().getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, 0),
                             1,
-                            getIntent().getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1),
-                            getIntent().getStringExtra(WidgetProvider.ITEM_ID)
+                            getIntent().getIntExtra(Reddinator.ITEM_FEED_POSITION, -1),
+                            getIntent().getStringExtra(Reddinator.ITEM_ID)
                     ).execute();
                 }
                 close(3);
@@ -210,8 +208,8 @@ public class FeedItemDialogActivity extends Activity {
                             FeedItemDialogActivity.this,
                             getIntent().getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, 0),
                             -1,
-                            getIntent().getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1),
-                            getIntent().getStringExtra(WidgetProvider.ITEM_ID)
+                            getIntent().getIntExtra(Reddinator.ITEM_FEED_POSITION, -1),
+                            getIntent().getStringExtra(Reddinator.ITEM_ID)
                     ).execute();
                 }
                 close(4);
@@ -241,7 +239,7 @@ public class FeedItemDialogActivity extends Activity {
 
             boolean canViewSubreddit = true;
             boolean canViewDomain = true;
-            String domain = getIntent().getStringExtra(WidgetProvider.ITEM_DOMAIN);
+            String domain = getIntent().getStringExtra(Reddinator.ITEM_DOMAIN);
             // determine whether subreddit and domain options are shown
             // (ie. subreddit domain option shouldn't be shown if the user is currently viewing the feed)
             if (widgetId<0){
@@ -260,7 +258,7 @@ public class FeedItemDialogActivity extends Activity {
             }
 
             if (canViewSubreddit)
-                options.add(new String[]{"view_subreddit", getString(R.string.item_option_view_subreddit, getIntent().getStringExtra(WidgetProvider.ITEM_SUBREDDIT))});
+                options.add(new String[]{"view_subreddit", getString(R.string.item_option_view_subreddit, getIntent().getStringExtra(Reddinator.ITEM_SUBREDDIT))});
 
             if (canViewDomain)
                 options.add(new String[]{"view_domain", getString(R.string.item_option_view_domain, domain)});
@@ -310,7 +308,7 @@ public class FeedItemDialogActivity extends Activity {
     private void close(int result, Intent sintent){
         if (result==3 || result==4 || (widgetId<0 && result==5)) {
             Intent intent = new Intent(this, MainActivity.class);
-            intent.putExtra(WidgetProvider.ITEM_FEED_POSITION, getIntent().getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1));
+            intent.putExtra(Reddinator.ITEM_FEED_POSITION, getIntent().getIntExtra(Reddinator.ITEM_FEED_POSITION, -1));
             setResult(result, intent);
         } else {
             if (sintent!=null) {
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/MainActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/MainActivity.java
index 4357d4c..7716d54 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/MainActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/MainActivity.java
@@ -59,7 +59,7 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.RedditData;
 import au.com.wallaceit.reddinator.core.ThemeManager;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.LoadSubredditInfoTask;
 import au.com.wallaceit.reddinator.ui.HtmlDialog;
 import au.com.wallaceit.reddinator.ui.SubredditFeedAdapter;
@@ -77,7 +77,6 @@ public class MainActivity extends Activity implements LoadSubredditInfoTask.Call
     private MenuItem sortItem;
     private MenuItem sidebarIcon;
     private ProgressBar loader;
-    private LinearLayout srbutton;
     private TextView srtext;
     private IconTextView errorIcon;
     private IconTextView refreshbutton;
@@ -111,7 +110,7 @@ public class MainActivity extends Activity implements LoadSubredditInfoTask.Call
         loader = (ProgressBar) findViewById(R.id.appsrloader);
         errorIcon = (IconTextView) findViewById(R.id.apperroricon);
         refreshbutton = (IconTextView) findViewById(R.id.apprefreshbutton);
-        srbutton = (LinearLayout) findViewById(R.id.sub_container);
+        LinearLayout srbutton = (LinearLayout) findViewById(R.id.sub_container);
         srtext = (TextView) findViewById(R.id.appsubreddittxt);
 
         // set theme colors
@@ -202,10 +201,10 @@ public class MainActivity extends Activity implements LoadSubredditInfoTask.Call
                     Toast.makeText(MainActivity.this, R.string.data_error, Toast.LENGTH_LONG).show();
                     return;
                 }
-                String subreddit = extras.getString(WidgetProvider.ITEM_SUBREDDIT);
+                String subreddit = extras.getString(Reddinator.ITEM_SUBREDDIT);
                 if (Reddinator.SUBREDDIT_MULTIHUB.equals(subreddit)){
                     // Extract name from multi path
-                    String url = extras.getString(WidgetProvider.ITEM_URL);
+                    String url = extras.getString(Reddinator.ITEM_URL);
                     if (url!=null) {
                         Pattern pattern = Pattern.compile(".*reddit.com(/user/.*/m/([^/]*))");
                         Matcher matcher = pattern.matcher(url);
@@ -244,7 +243,7 @@ public class MainActivity extends Activity implements LoadSubredditInfoTask.Call
                                         public void onClick(DialogInterface dialog, int which) {
                                             if (global.mThemeManager.setPreviewTheme(themeJson)){
                                                 refreshTheme();
-                                                WidgetProvider.refreshAllWidgetViews(global);
+                                                WidgetCommon.refreshAllWidgetViews(global);
                                                 new AlertDialog.Builder(MainActivity.this)
                                                         .setTitle(R.string.theme_preview)
                                                         .setMessage(R.string.theme_preview_applied_message)
@@ -593,7 +592,7 @@ public class MainActivity extends Activity implements LoadSubredditInfoTask.Call
             case 3:
             case 4:
                 if (data!=null) {
-                    int position = data.getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1);
+                    int position = data.getIntExtra(Reddinator.ITEM_FEED_POSITION, -1);
                     listAdapter.initialiseVote(position, (resultcode == 3 ? 1 : -1));
                 }
                 break;
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/PrefsFragment.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/PrefsFragment.java
index d619f7b..8b8d54d 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/PrefsFragment.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/PrefsFragment.java
@@ -22,7 +22,7 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.ThemeManager;
 import au.com.wallaceit.reddinator.core.Utilities;
 import au.com.wallaceit.reddinator.service.MailCheckReceiver;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 
 public class PrefsFragment extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener {
     public int mAppWidgetId;
@@ -251,7 +251,7 @@ public class PrefsFragment extends PreferenceFragment implements SharedPreferenc
         // check if refresh rate has changed and update if needed
         if (!mRefreshrate.equals(mSharedPreferences.getString(getString(R.string.refresh_rate_pref), "43200000"))) {
             //System.out.println("Refresh preference changed, updating alarm");
-            WidgetProvider.setUpdateSchedule(getActivity(), false);
+            WidgetCommon.setUpdateSchedule(getActivity(), false);
         }
         // check if background mail check interval has changed
         if (!mMailRefresh.equals(mSharedPreferences.getString(getString(R.string.background_mail_pref), "43200000"))) {
@@ -267,7 +267,7 @@ public class PrefsFragment extends PreferenceFragment implements SharedPreferenc
             if (getActivity().getIntent().getIntExtra("requestCode", 0)!=ThemesActivity.REQUEST_CODE_NO_WIDGET_UPDATES) {
                 Reddinator global = ((Reddinator) getActivity().getApplicationContext());
                 if (global != null) {
-                    WidgetProvider.refreshAllWidgetViews(global);
+                    WidgetCommon.refreshAllWidgetViews(global);
                 }
             }
         }
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SearchActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SearchActivity.java
index ea28228..9464c65 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SearchActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SearchActivity.java
@@ -56,7 +56,6 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.RedditData;
 import au.com.wallaceit.reddinator.core.ThemeManager;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
 import au.com.wallaceit.reddinator.ui.SubAutoCompleteAdapter;
 import au.com.wallaceit.reddinator.ui.SubredditFeedAdapter;
 
@@ -340,12 +339,12 @@ public class SearchActivity extends Activity implements SubredditFeedAdapter.Act
             // initiate vote
             case 3:
             case 4:
-                int position = data.getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1);
+                int position = data.getIntExtra(Reddinator.ITEM_FEED_POSITION, -1);
                 listAdapter.initialiseVote(position, (resultcode==3?1:-1));
                 break;
             // reload feed data from cache
             case 5:
-                listAdapter.removePostAtPosition(data.getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1));
+                listAdapter.removePostAtPosition(data.getIntExtra(Reddinator.ITEM_FEED_POSITION, -1));
                 //listView.invalidateViews();
                 break;
         }
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubmitActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubmitActivity.java
index 3340fe5..df345ca 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubmitActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubmitActivity.java
@@ -43,7 +43,6 @@ import au.com.wallaceit.reddinator.ui.SimpleTabsAdapter;
 import au.com.wallaceit.reddinator.ui.SimpleTabsWidget;
 import au.com.wallaceit.reddinator.ui.SubAutoCompleteAdapter;
 import au.com.wallaceit.reddinator.core.ThemeManager;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
 
 
 public class SubmitActivity extends Activity implements SubmitTask.Callback {
@@ -181,9 +180,9 @@ public class SubmitActivity extends Activity implements SubmitTask.Callback {
                     permalink = permalink.substring(permalink.indexOf("/r/")); // trim domain to get real permalink
 
                 Intent intent = new Intent(SubmitActivity.this, ViewRedditActivity.class);
-                intent.putExtra(WidgetProvider.ITEM_ID, id);
-                intent.putExtra(WidgetProvider.ITEM_PERMALINK, permalink);
-                intent.putExtra(WidgetProvider.ITEM_URL, url);
+                intent.putExtra(Reddinator.ITEM_ID, id);
+                intent.putExtra(Reddinator.ITEM_PERMALINK, permalink);
+                intent.putExtra(Reddinator.ITEM_URL, url);
                 intent.putExtra("submitted", true); // tells the view reddit activity that this is liked & that no stored feed update is needed.
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(intent);
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubredditSelectActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubredditSelectActivity.java
index 915cf77..496cf46 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubredditSelectActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/SubredditSelectActivity.java
@@ -79,6 +79,7 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.core.RedditData;
 import au.com.wallaceit.reddinator.core.Utilities;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.LoadRandomTask;
 import au.com.wallaceit.reddinator.tasks.SubscriptionEditTask;
 import au.com.wallaceit.reddinator.ui.ActionbarActivity;
@@ -337,7 +338,7 @@ public class SubredditSelectActivity extends ActionbarActivity implements Subscr
             return;
         }
         if (mAppWidgetId != 0) {
-            WidgetProvider.showLoaderAndUpdate(this, mAppWidgetId, false);
+            WidgetCommon.showLoaderAndUpdate(this, mAppWidgetId, false);
         } else {
             Intent intent = new Intent();
             intent.putExtra("themeupdate", needsThemeUpdate);
@@ -389,7 +390,7 @@ public class SubredditSelectActivity extends ActionbarActivity implements Subscr
                     setResult(1, intent); // tells main activity to update feed prefs
                 }
                 if (needsThemeUpdate){
-                    WidgetProvider.refreshAllWidgetViews(global);
+                    WidgetCommon.refreshAllWidgetViews(global);
                 }
             }
         } else {
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemeEditorActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemeEditorActivity.java
index 75ce516..e879316 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemeEditorActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemeEditorActivity.java
@@ -33,7 +33,7 @@ import java.util.UUID;
 import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.core.ThemeManager;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 
 
 public class ThemeEditorActivity extends ListActivity {
@@ -87,7 +87,7 @@ public class ThemeEditorActivity extends ListActivity {
         if (themeChanged) {
             global.mThemeManager.saveCustomTheme(themeId, theme);
             if (getIntent().getExtras().getInt("requestCode")!=ThemesActivity.REQUEST_CODE_NO_WIDGET_UPDATES) // update widgets straight away if the requesting activity does not process the result
-                WidgetProvider.refreshAllWidgetViews(global);
+                WidgetCommon.refreshAllWidgetViews(global);
 
             setResult(ThemesActivity.RESULT_CODE_THEME_UPDATED);
         }
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemesActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemesActivity.java
index 9f3bfc7..b384680 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemesActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ThemesActivity.java
@@ -35,7 +35,7 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.core.RedditData;
 import au.com.wallaceit.reddinator.core.ThemeManager;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.SubmitTask;
 import au.com.wallaceit.reddinator.ui.ActionbarActivity;
 
@@ -85,7 +85,7 @@ public class ThemesActivity extends ActionbarActivity implements SubmitTask.Call
                     public void onClick(DialogInterface dialog, int which) {
                         global.mThemeManager.clearPreviewTheme();
                         setResult(6); // indicate theme edit
-                        WidgetProvider.refreshAllWidgetViews(global);
+                        WidgetCommon.refreshAllWidgetViews(global);
                     }
                 })
                 .setPositiveButton(R.string.install, new DialogInterface.OnClickListener() {
@@ -94,7 +94,7 @@ public class ThemesActivity extends ActionbarActivity implements SubmitTask.Call
                         global.mThemeManager.savePreviewTheme();
                         refreshList();
                         setResult(6); // indicate theme edit
-                        WidgetProvider.refreshAllWidgetViews(global);
+                        WidgetCommon.refreshAllWidgetViews(global);
                     }
                 });
             builder.show().setCanceledOnTouchOutside(true);
@@ -119,7 +119,7 @@ public class ThemesActivity extends ActionbarActivity implements SubmitTask.Call
     public void onBackPressed(){
         if (themesEdited && (getIntent().hasExtra("requestCode") && getIntent().getExtras().getInt("requestCode")!=REQUEST_CODE_NO_WIDGET_UPDATES)){
             // update widgets straight away if the requesting activity does not process the result
-            WidgetProvider.refreshAllWidgetViews(global);
+            WidgetCommon.refreshAllWidgetViews(global);
         }
         super.onBackPressed();
     }
@@ -209,9 +209,9 @@ public class ThemesActivity extends ActionbarActivity implements SubmitTask.Call
                     permalink = permalink.substring(permalink.indexOf("/r/")); // trim domain to get real permalink
 
                 Intent intent = new Intent(ThemesActivity.this, ViewRedditActivity.class);
-                intent.putExtra(WidgetProvider.ITEM_ID, id);
-                intent.putExtra(WidgetProvider.ITEM_PERMALINK, permalink);
-                intent.putExtra(WidgetProvider.ITEM_URL, url);
+                intent.putExtra(Reddinator.ITEM_ID, id);
+                intent.putExtra(Reddinator.ITEM_PERMALINK, permalink);
+                intent.putExtra(Reddinator.ITEM_URL, url);
                 intent.putExtra("submitted", true); // tells the view reddit activity that this is liked & that no stored feed update is needed.
                 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(intent);
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewImageDialogActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewImageDialogActivity.java
index 7523ac3..6a74cd3 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewImageDialogActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewImageDialogActivity.java
@@ -34,7 +34,6 @@ import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.ThemeManager;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
 
 public class ViewImageDialogActivity extends Activity {
 
@@ -46,7 +45,7 @@ public class ViewImageDialogActivity extends Activity {
         Reddinator global = (Reddinator) getApplicationContext();
         setContentView(R.layout.activity_view_image_dialog);
         // get content url (which will be an image)
-        String imageUrl = getIntent().getStringExtra(WidgetProvider.ITEM_URL);
+        String imageUrl = getIntent().getStringExtra(Reddinator.ITEM_URL);
         // fix imgur links so it's not redirected to full webpage
         if (Utilities.isImgurUrl(imageUrl)) {
             imageUrl = imageUrl.replace("//imgur.com/", "//i.imgur.com/");
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewRedditActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewRedditActivity.java
index f63d88c..69ba065 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewRedditActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/ViewRedditActivity.java
@@ -72,6 +72,7 @@ import au.com.wallaceit.reddinator.core.Utilities;
 import au.com.wallaceit.reddinator.service.MailCheckService;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.core.RedditData;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.LoadPostTask;
 import au.com.wallaceit.reddinator.tasks.SavePostTask;
 import au.com.wallaceit.reddinator.tasks.VoteTask;
@@ -82,7 +83,6 @@ import au.com.wallaceit.reddinator.ui.SimpleTabsWidget;
 import au.com.wallaceit.reddinator.ui.TabCommentsFragment;
 import au.com.wallaceit.reddinator.ui.TabWebFragment;
 import au.com.wallaceit.reddinator.core.ThemeManager;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
 
 public class ViewRedditActivity extends ActionbarFragmentActivity implements LoadPostTask.Callback, VoteTask.Callback {
 
@@ -163,12 +163,12 @@ public class ViewRedditActivity extends ActionbarFragmentActivity implements Loa
         } else {
             // from widget, app or account feed post click
             widgetId = getIntent().getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);
-            feedposition = getIntent().getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1);
+            feedposition = getIntent().getIntExtra(Reddinator.ITEM_FEED_POSITION, -1);
 
-            redditItemId = getIntent().getStringExtra(WidgetProvider.ITEM_ID);
-            postUrl = getIntent().getStringExtra(WidgetProvider.ITEM_URL);
-            postPermalink = getIntent().getStringExtra(WidgetProvider.ITEM_PERMALINK);
-            userLikes = getIntent().getStringExtra(WidgetProvider.ITEM_USERLIKES);
+            redditItemId = getIntent().getStringExtra(Reddinator.ITEM_ID);
+            postUrl = getIntent().getStringExtra(Reddinator.ITEM_URL);
+            postPermalink = getIntent().getStringExtra(Reddinator.ITEM_PERMALINK);
+            userLikes = getIntent().getStringExtra(Reddinator.ITEM_USERLIKES);
             // Get selected item from feed and user vote preference
             if (getIntent().getBooleanExtra("submitted", false)){
                 userLikes = "true";
@@ -325,7 +325,7 @@ public class ViewRedditActivity extends ActionbarFragmentActivity implements Loa
         // update widget voting icons if a vote has been placed
         if (widgetId>0){
             if (global.getItemUpdate()!=null){
-                WidgetProvider.hideLoaderAndRefreshViews(this, widgetId, false);
+                WidgetCommon.hideLoaderAndRefreshViews(this, widgetId, false);
             }
         }
         if (loadPostTask!=null)
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/WidgetMenuDialogActivity.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/WidgetMenuDialogActivity.java
index b434a7d..5451b85 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/WidgetMenuDialogActivity.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/activity/WidgetMenuDialogActivity.java
@@ -50,7 +50,7 @@ import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.RedditData;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 import au.com.wallaceit.reddinator.tasks.LoadSubredditInfoTask;
 import au.com.wallaceit.reddinator.ui.HtmlDialog;
 
@@ -250,7 +250,7 @@ public class WidgetMenuDialogActivity extends Activity implements PopupMenu.OnMe
                 prefsedit.putString("sort-" + widgetId, sort);
                 prefsedit.apply();
                 // set new text in button
-                WidgetProvider.showLoaderAndUpdate(WidgetMenuDialogActivity.this, widgetId, false);
+                WidgetCommon.showLoaderAndUpdate(WidgetMenuDialogActivity.this, widgetId, false);
                 dialog.dismiss();
                 WidgetMenuDialogActivity.this.finish();
             }
@@ -299,7 +299,7 @@ public class WidgetMenuDialogActivity extends Activity implements PopupMenu.OnMe
             public void onClick(DialogInterface dialog, int id) {
                 dialog.cancel();
                 if (needsUpdate)
-                    WidgetProvider.showLoaderAndUpdate(WidgetMenuDialogActivity.this, widgetId, false);
+                    WidgetCommon.showLoaderAndUpdate(WidgetMenuDialogActivity.this, widgetId, false);
                 WidgetMenuDialogActivity.this.finish();
             }
         });
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/BootReceiver.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/BootReceiver.java
index 8a2e6b5..c22b431 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/BootReceiver.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/BootReceiver.java
@@ -18,9 +18,7 @@
 
 package au.com.wallaceit.reddinator.service;
 
-import android.appwidget.AppWidgetManager;
 import android.content.BroadcastReceiver;
-import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 
@@ -28,13 +26,13 @@ public class BootReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (!WidgetProvider.APPWIDGET_AUTO_UPDATE.equals(intent.getAction()))
+        if (!Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction()) &&
+            !Intent.ACTION_PACKAGE_FIRST_LAUNCH.equals(intent.getAction()) &&
+            !Intent.ACTION_MY_PACKAGE_REPLACED.equals(intent.getAction()))
             return;
         // set mail check alarm
         MailCheckReceiver.setAlarm(context);
         // set widget update alarm if widgets enabled
-        int ids[] = AppWidgetManager.getInstance(context).getAppWidgetIds(new ComponentName(context, WidgetProvider.class));
-        if (ids.length>0)
-            WidgetProvider.setUpdateSchedule(context, false);
+        WidgetCommon.setUpdateSchedule(context, false);
     }
 }
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/StackWidgetProvider.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/StackWidgetProvider.java
new file mode 100644
index 0000000..2f61b7a
--- /dev/null
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/StackWidgetProvider.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright 2013 Michael Boyde Wallace (http://wallaceit.com.au)
+ * This file is part of Reddinator.
+ *
+ * Reddinator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Reddinator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Reddinator (COPYING). If not, see <http://www.gnu.org/licenses/>.
+ */
+package au.com.wallaceit.reddinator.service;
+
+import android.annotation.TargetApi;
+import android.app.PendingIntent;
+import android.appwidget.AppWidgetManager;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.widget.RemoteViews;
+
+import com.joanzapata.android.iconify.Iconify;
+
+import java.util.HashMap;
+
+import au.com.wallaceit.reddinator.Reddinator;
+import au.com.wallaceit.reddinator.R;
+import au.com.wallaceit.reddinator.activity.MainActivity;
+import au.com.wallaceit.reddinator.activity.SubredditSelectActivity;
+import au.com.wallaceit.reddinator.activity.WidgetMenuDialogActivity;
+import au.com.wallaceit.reddinator.core.Utilities;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class StackWidgetProvider extends WidgetProviderBase {
+
+    @Override
+    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
+        updateAppWidgets(context, appWidgetManager, appWidgetIds);
+        // System.out.println("onUpdate();");
+        super.onUpdate(context, appWidgetManager, appWidgetIds);
+    }
+
+    public static void updateAppWidgets(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
+        Reddinator global = (Reddinator) context.getApplicationContext();
+        // Perform this loop procedure for each App Widget that belongs to this provider
+        for (int appWidgetId : appWidgetIds) {
+            // CONFIG BUTTON
+            Intent intent = new Intent(context, WidgetMenuDialogActivity.class);
+            intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);  // Identifies the particular widget...
+            intent.putExtra("firsttimeconfig", 0); // not first time config
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
+            intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+            intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
+            PendingIntent pendIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            // PICK Subreddit BUTTON
+            Intent subredditIntent = new Intent(context, SubredditSelectActivity.class);
+            subredditIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);  // Identifies the particular widget...
+            subredditIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            subredditIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
+            subredditIntent.setData(Uri.parse(subredditIntent.toUri(Intent.URI_INTENT_SCHEME)));
+            PendingIntent subredditPendingIntent = PendingIntent.getActivity(context, 0, subredditIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            // REMOTE DATA
+            Intent serviceIntent = new Intent(context, WidgetService.class);
+            serviceIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId); // Add the app widget ID to the intent extras.
+            serviceIntent.setData(Uri.parse(serviceIntent.toUri(Intent.URI_INTENT_SCHEME)));
+
+            // REFRESH BUTTON
+            Intent refreshIntent = new Intent(context, StackWidgetProvider.class);
+            refreshIntent.setAction(WidgetCommon.APPWIDGET_UPDATE_FEED);
+            refreshIntent.setPackage(context.getPackageName());
+            refreshIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
+            refreshIntent.setData(Uri.parse(refreshIntent.toUri(Intent.URI_INTENT_SCHEME)));
+            PendingIntent refreshPendingIntent = PendingIntent.getBroadcast(context, 0, refreshIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            // ITEM CLICK
+            Intent clickIntent = new Intent(context, StackWidgetProvider.class);
+            clickIntent.setAction(WidgetCommon.ITEM_CLICK);
+            clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
+            clickIntent.setData(Uri.parse(clickIntent.toUri(Intent.URI_INTENT_SCHEME)));
+            PendingIntent clickPendingIntent = PendingIntent.getBroadcast(context, 0, clickIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+            // ADD ALL TO REMOTE VIEWS
+            RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_stack);
+            views.setPendingIntentTemplate(R.id.adapterview, clickPendingIntent);
+            views.setOnClickPendingIntent(R.id.sub_container, subredditPendingIntent);
+            views.setOnClickPendingIntent(R.id.refreshbutton, refreshPendingIntent);
+            views.setOnClickPendingIntent(R.id.prefsbutton, pendIntent);
+            views.setEmptyView(R.id.adapterview, R.id.empty_list_view);
+
+            // setup app open intent
+            if (global.mSharedPreferences.getBoolean("logoopenpref", true)){
+                Intent appIntent = new Intent(context, MainActivity.class);
+                appIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                appIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
+                appIntent.setData(Uri.parse(subredditIntent.toUri(Intent.URI_INTENT_SCHEME)));
+                PendingIntent appPendingIntent = PendingIntent.getActivity(context, 0, appIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                views.setOnClickPendingIntent(R.id.widget_logo, appPendingIntent);
+            } else {
+                views.setOnClickPendingIntent(R.id.widget_logo, subredditPendingIntent);
+            }
+
+            // setup theme
+            HashMap<String, Integer> themeColors = global.mThemeManager.getActiveTheme("widgettheme-"+appWidgetId).getIntColors();
+            views.setInt(R.id.widgetheader, "setBackgroundColor", themeColors.get("widget_header_color"));
+            views.setInt(R.id.adapterview, "setBackgroundColor", themeColors.get("widget_background_color"));
+
+            int iconColor = themeColors.get("default_icon");
+            int[] shadow = new int[]{3, 3, 3, themeColors.get("icon_shadow")};
+            views.setImageViewBitmap(R.id.prefsbutton, Utilities.getFontBitmap(context, String.valueOf(Iconify.IconValue.fa_bars.character()), iconColor, 28, shadow));
+            views.setImageViewBitmap(R.id.refreshbutton, Utilities.getFontBitmap(context, String.valueOf(Iconify.IconValue.fa_refresh.character()), iconColor, 28, shadow));
+            views.setImageViewBitmap(R.id.srcaret, Utilities.getFontBitmap(context, String.valueOf(Iconify.IconValue.fa_caret_down.character()), iconColor, 16, shadow));
+            views.setImageViewBitmap(R.id.erroricon, Utilities.getFontBitmap(context, String.valueOf(Iconify.IconValue.fa_exclamation_triangle.character()), Color.parseColor("#E06B6C"), 28, shadow));
+
+            // set current feed title
+            String curFeed = global.getSubredditManager().getCurrentFeedName(appWidgetId);
+            views.setTextViewText(R.id.subreddittxt, curFeed);
+            views.setTextColor(R.id.subreddittxt, themeColors.get("header_text"));
+
+            // Set remote adapter for widget.
+            if (Build.VERSION.SDK_INT >= 14) {
+                views.setRemoteAdapter(R.id.adapterview, serviceIntent); // API 14 and above
+            } else {
+                //noinspection deprecation
+                views.setRemoteAdapter(appWidgetId, R.id.adapterview, serviceIntent); // older version compatibility
+            }
+            // Tell the AppWidgetManager to perform an update on the current app widget
+            appWidgetManager.updateAppWidget(appWidgetId, views);
+        }
+    }
+
+    @Override
+    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+        String action = intent.getAction();
+
+        if (action.equals(WidgetCommon.APPWIDGET_UPDATE_FEED)) {
+            // get widget id
+            int widgetId = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID);
+            // show loader and update data
+            WidgetCommon.showLoaderAndUpdate(context, widgetId, false);
+        }
+
+        if (action.equals(WidgetCommon.APPWIDGET_AUTO_UPDATE)) {
+            AppWidgetManager mgr = AppWidgetManager.getInstance(context);
+            int[] appWidgetIds = mgr.getAppWidgetIds(new ComponentName(context, StackWidgetProvider.class));
+            // perform full update, just to refresh views
+            onUpdate(context, mgr, appWidgetIds);
+            // show loader and update data
+            WidgetCommon.updateAllWidgets(context, appWidgetIds);
+        }
+
+        if (action.equals(Intent.ACTION_MY_PACKAGE_REPLACED)) {
+            AppWidgetManager mgr2 = AppWidgetManager.getInstance(context);
+            int[] appWidgetIds = mgr2.getAppWidgetIds(new ComponentName(context, StackWidgetProvider.class));
+            // perform full widget update
+            onUpdate(context, mgr2, appWidgetIds);
+        }
+        //System.out.println("broadcast received: " + action);
+        super.onReceive(context, intent);
+    }
+
+}
\ No newline at end of file
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetCommon.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetCommon.java
new file mode 100644
index 0000000..e266500
--- /dev/null
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetCommon.java
@@ -0,0 +1,166 @@
+package au.com.wallaceit.reddinator.service;
+
+/*
+ * Copyright 2016 Michael Boyde Wallace (http://wallaceit.com.au)
+ * This file is part of reddinator.
+ *
+ * reddinator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * reddinator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with reddinator (COPYING). If not, see <http://www.gnu.org/licenses/>.
+ *
+ * Created by michael on 9/10/16.
+ */
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.appwidget.AppWidgetManager;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.preference.PreferenceManager;
+import android.view.View;
+import android.widget.RemoteViews;
+
+import au.com.wallaceit.reddinator.R;
+import au.com.wallaceit.reddinator.Reddinator;
+
+public class WidgetCommon {
+
+    static final String ITEM_CLICK = "ITEM_CLICK";
+    static final String ITEM_CLICK_MODE = "ITEM_CLICK_MODE";
+    static final int ITEM_CLICK_OPEN = 0;
+    static final int ITEM_CLICK_UPVOTE = 1;
+    static final int ITEM_CLICK_DOWNVOTE = 2;
+    static final int ITEM_CLICK_OPTIONS = 3;
+    static final int ITEM_CLICK_IMAGE = 4;
+    static final String APPWIDGET_UPDATE_FEED = "APPWIDGET_UPDATE_FEED";
+    static final String APPWIDGET_AUTO_UPDATE = "APPWIDGET_AUTO_UPDATE_FEED";
+
+    static final Class WIDGET_CLASS_LIST = WidgetProvider.class;
+    static final Class WIDGET_CLASS_STACK = StackWidgetProvider.class;
+
+    static Class getWidgetProviderClass(Context context, int appWidgetId){
+        String className = AppWidgetManager.getInstance(context).getAppWidgetInfo(appWidgetId).provider.getShortClassName();
+        className = className.substring(className.lastIndexOf(".")+1);
+        if (className.equals(WIDGET_CLASS_LIST.getSimpleName())) {
+            return WIDGET_CLASS_LIST;
+        } else if (className.equals(WIDGET_CLASS_STACK.getSimpleName())) {
+            return WIDGET_CLASS_STACK;
+        }
+        return null;
+    }
+
+    static int getWidgetLayoutId(Class providerClass){
+        if (providerClass.getSimpleName().equals(WIDGET_CLASS_STACK.getSimpleName()))
+            return R.layout.widget_stack;
+
+        return R.layout.widget;
+    }
+
+    static void updateAllWidgets(Context context, int[] widgetIds) {
+        for (int widgetId : widgetIds) {
+            WidgetCommon.showLoaderAndUpdate(context, widgetId, false);
+        }
+    }
+
+    public static void showLoaderAndUpdate(Context context, int widgetId, boolean loadmore) {
+        Reddinator global = ((Reddinator) context.getApplicationContext());
+        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
+        Class providerClass = getWidgetProviderClass(context, widgetId);
+        // show loader
+        RemoteViews views = new RemoteViews(context.getPackageName(), getWidgetLayoutId(providerClass));
+        views.setViewVisibility(R.id.srloader, View.VISIBLE);
+        views.setViewVisibility(R.id.erroricon, View.INVISIBLE); // make sure we hide the error icon
+        views.setTextViewText(R.id.subreddittxt, global.getSubredditManager().getCurrentFeedName(widgetId));
+        // load more text
+        if (loadmore) {
+            views.setTextViewText(R.id.loadmoretxt, context.getResources().getString(R.string.loading));
+            // set loadmore indicator so the notifydatasetchanged function knows what to do
+            global.setLoadMore();
+        }
+        // set cache bypass incase widget needs new view factory
+        global.setBypassCache(true);
+        // update view
+        mgr.partiallyUpdateAppWidget(widgetId, views);
+        // request update of listview data
+        mgr.notifyAppWidgetViewDataChanged(widgetId, R.id.adapterview);
+    }
+
+    public static void refreshAllWidgetViews(Reddinator global){
+        global.setRefreshView();
+        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(global);
+        // update stack widgets
+        int[] stackWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(global.getApplicationContext(), StackWidgetProvider.class));
+        StackWidgetProvider.updateAppWidgets(global, appWidgetManager, stackWidgetIds);
+        appWidgetManager.notifyAppWidgetViewDataChanged(stackWidgetIds, R.id.adapterview);
+
+        int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(global, WidgetProvider.class));
+        WidgetProvider.updateAppWidgets(global, appWidgetManager, widgetIds);
+        appWidgetManager.notifyAppWidgetViewDataChanged(widgetIds, R.id.adapterview);
+    }
+
+    public static void showLoaderAndRefreshViews(Context context, int widgetId){
+        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
+        Class providerClass = getWidgetProviderClass(context, widgetId);
+        // show loader
+        RemoteViews views = new RemoteViews(context.getPackageName(), getWidgetLayoutId(providerClass));
+        views.setViewVisibility(R.id.srloader, View.VISIBLE);
+        views.setViewVisibility(R.id.erroricon, View.INVISIBLE); // make sure we hide the error icon
+        // update view
+        mgr.partiallyUpdateAppWidget(widgetId, views);
+    }
+
+    public static void hideLoaderAndRefreshViews(Context context, int widgetId, boolean showerror){
+        Reddinator global = ((Reddinator) context.getApplicationContext());
+        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
+        Class providerClass = getWidgetProviderClass(context, widgetId);
+        // show loader
+        RemoteViews views = new RemoteViews(context.getPackageName(), getWidgetLayoutId(providerClass));
+        views.setViewVisibility(R.id.srloader, View.GONE);
+        views.setViewVisibility(R.id.erroricon, (showerror ? View.VISIBLE : View.GONE)); // make sure we hide the error icon
+        // update view
+        global.setRefreshView();
+        mgr.notifyAppWidgetViewDataChanged(widgetId, R.id.adapterview);
+        mgr.partiallyUpdateAppWidget(widgetId, views);
+    }
+
+    public static void setUpdateSchedule(Context context, boolean widgetsDisabled){
+        WidgetCommon.setUpdateSchedule(context, WidgetProvider.class, widgetsDisabled);
+        WidgetCommon.setUpdateSchedule(context, StackWidgetProvider.class, widgetsDisabled);
+    }
+
+    static void setUpdateSchedule(Context context, Class providerClass, boolean widgetsDisabled){
+
+        Intent intent = new Intent(context.getApplicationContext(), providerClass);
+        intent.setAction(WidgetCommon.APPWIDGET_AUTO_UPDATE);
+        intent.setPackage(context.getPackageName());
+        intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
+        PendingIntent updateIntent = PendingIntent.getBroadcast(context.getApplicationContext(), 0, intent, 0);
+        final AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
+
+        // If there are no widgets for the provider class, disable the alarm
+        int ids[] = AppWidgetManager.getInstance(context).getAppWidgetIds(new ComponentName(context, providerClass));
+        if (ids.length==0) {
+
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+            int refreshRate = Integer.valueOf(prefs.getString(context.getString(R.string.refresh_rate_pref), "43200000"));
+            if (!widgetsDisabled && refreshRate > 0) {
+                alarmManager.setRepeating(AlarmManager.RTC, System.currentTimeMillis() + refreshRate, refreshRate, updateIntent);
+                return;
+            }
+        }
+        alarmManager.cancel(updateIntent); // auto update disabled or all widgets removed
+    }
+
+}
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProvider.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProvider.java
index 63673de..d45c862 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProvider.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProvider.java
@@ -18,21 +18,15 @@
 package au.com.wallaceit.reddinator.service;
 
 import android.annotation.TargetApi;
-import android.app.AlarmManager;
 import android.app.PendingIntent;
 import android.appwidget.AppWidgetManager;
-import android.appwidget.AppWidgetProvider;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Color;
 import android.net.Uri;
 import android.os.Build;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
-import android.view.View;
 import android.widget.RemoteViews;
 
 import com.joanzapata.android.iconify.Iconify;
@@ -43,34 +37,11 @@ import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.activity.MainActivity;
 import au.com.wallaceit.reddinator.activity.SubredditSelectActivity;
-import au.com.wallaceit.reddinator.activity.ViewImageDialogActivity;
-import au.com.wallaceit.reddinator.activity.ViewRedditActivity;
-import au.com.wallaceit.reddinator.activity.FeedItemDialogActivity;
 import au.com.wallaceit.reddinator.activity.WidgetMenuDialogActivity;
 import au.com.wallaceit.reddinator.core.Utilities;
-import au.com.wallaceit.reddinator.tasks.WidgetVoteTask;
 
 @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-public class WidgetProvider extends AppWidgetProvider {
-    public static final String ITEM_URL = "ITEM_URL";
-    public static final String ITEM_PERMALINK = "ITEM_PERMALINK";
-    public static final String ITEM_ID = "ITEM_ID";
-    public static final String ITEM_DOMAIN = "ITEM_DOMAIN";
-    public static final String ITEM_SUBREDDIT = "ITEM_SUBREDDIT";
-    public static final String ITEM_USERLIKES = "ITEM_USERLIKES";
-    public static final String ITEM_CLICK = "ITEM_CLICK";
-    public static final String ITEM_CLICK_MODE = "ITEM_CLICK_MODE";
-    public static final int ITEM_CLICK_OPEN = 0;
-    public static final int ITEM_CLICK_UPVOTE = 1;
-    public static final int ITEM_CLICK_DOWNVOTE = 2;
-    public static final int ITEM_CLICK_OPTIONS = 3;
-    public static final int ITEM_CLICK_IMAGE = 4;
-    public static final String ITEM_FEED_POSITION = "ITEM_FEED_POSITION";
-    public static final String APPWIDGET_UPDATE_FEED = "APPWIDGET_UPDATE_FEED";
-    public static final String APPWIDGET_AUTO_UPDATE = "APPWIDGET_AUTO_UPDATE_FEED";
-
-    public WidgetProvider() {
-    }
+public class WidgetProvider extends WidgetProviderBase {
 
     @Override
     public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
@@ -79,7 +50,6 @@ public class WidgetProvider extends AppWidgetProvider {
         super.onUpdate(context, appWidgetManager, appWidgetIds);
     }
 
-    @SuppressWarnings("deprecation")
     public static void updateAppWidgets(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
         Reddinator global = (Reddinator) context.getApplicationContext();
         // Perform this loop procedure for each App Widget that belongs to this provider
@@ -109,7 +79,7 @@ public class WidgetProvider extends AppWidgetProvider {
 
             // REFRESH BUTTON
             Intent refreshIntent = new Intent(context, WidgetProvider.class);
-            refreshIntent.setAction(APPWIDGET_UPDATE_FEED);
+            refreshIntent.setAction(WidgetCommon.APPWIDGET_UPDATE_FEED);
             refreshIntent.setPackage(context.getPackageName());
             refreshIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
             refreshIntent.setData(Uri.parse(refreshIntent.toUri(Intent.URI_INTENT_SCHEME)));
@@ -117,18 +87,18 @@ public class WidgetProvider extends AppWidgetProvider {
 
             // ITEM CLICK
             Intent clickIntent = new Intent(context, WidgetProvider.class);
-            clickIntent.setAction(ITEM_CLICK);
+            clickIntent.setAction(WidgetCommon.ITEM_CLICK);
             clickIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
             clickIntent.setData(Uri.parse(clickIntent.toUri(Intent.URI_INTENT_SCHEME)));
             PendingIntent clickPendingIntent = PendingIntent.getBroadcast(context, 0, clickIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
             // ADD ALL TO REMOTE VIEWS
             RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget);
-            views.setPendingIntentTemplate(R.id.listview, clickPendingIntent);
+            views.setPendingIntentTemplate(R.id.adapterview, clickPendingIntent);
             views.setOnClickPendingIntent(R.id.sub_container, subredditPendingIntent);
             views.setOnClickPendingIntent(R.id.refreshbutton, refreshPendingIntent);
             views.setOnClickPendingIntent(R.id.prefsbutton, pendIntent);
-            views.setEmptyView(R.id.listview, R.id.empty_list_view);
+            views.setEmptyView(R.id.adapterview, R.id.empty_list_view);
 
             // setup app open intent
             if (global.mSharedPreferences.getBoolean("logoopenpref", true)){
@@ -145,7 +115,7 @@ public class WidgetProvider extends AppWidgetProvider {
             // setup theme
             HashMap<String, Integer> themeColors = global.mThemeManager.getActiveTheme("widgettheme-"+appWidgetId).getIntColors();
             views.setInt(R.id.widgetheader, "setBackgroundColor", themeColors.get("widget_header_color"));
-            views.setInt(R.id.listview, "setBackgroundColor", themeColors.get("widget_background_color"));
+            views.setInt(R.id.adapterview, "setBackgroundColor", themeColors.get("widget_background_color"));
 
             int iconColor = themeColors.get("default_icon");
             int[] shadow = new int[]{3, 3, 3, themeColors.get("icon_shadow")};
@@ -161,162 +131,33 @@ public class WidgetProvider extends AppWidgetProvider {
 
             // Set remote adapter for widget.
             if (Build.VERSION.SDK_INT >= 14) {
-                views.setRemoteAdapter(R.id.listview, serviceIntent); // API 14 and above
+                views.setRemoteAdapter(R.id.adapterview, serviceIntent); // API 14 and above
             } else {
-                views.setRemoteAdapter(appWidgetId, R.id.listview, serviceIntent); // older version compatibility
+                //noinspection deprecation
+                views.setRemoteAdapter(appWidgetId, R.id.adapterview, serviceIntent); // older version compatibility
             }
             // Tell the AppWidgetManager to perform an update on the current app widget
             appWidgetManager.updateAppWidget(appWidgetId, views);
         }
     }
 
-    @Override
-    public void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {
-        this.onUpdate(context, appWidgetManager, new int[]{appWidgetId}); // fix for the widget not loading the second time round (adding to the homescreen)
-        super.onAppWidgetOptionsChanged(context, appWidgetManager, appWidgetId, newOptions);
-    }
-
-    @Override
-    public void onDeleted(Context context, int[] appWidgetIds) {
-        // Cleaup widget data
-        Reddinator global = (Reddinator) context.getApplicationContext();
-        for (int widgetId : appWidgetIds){
-            global.clearFeedDataAndPreferences(widgetId);
-        }
-        super.onDeleted(context, appWidgetIds);
-    }
-
-    public static void setUpdateSchedule(Context context, boolean widgetsDisabled){
-        Intent intent = new Intent(context.getApplicationContext(), WidgetProvider.class);
-        intent.setAction(APPWIDGET_AUTO_UPDATE);
-        intent.setPackage(context.getPackageName());
-        intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
-        PendingIntent updateIntent = PendingIntent.getBroadcast(context.getApplicationContext(), 0, intent, 0);
-
-        final AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        int refreshRate = Integer.valueOf(prefs.getString(context.getString(R.string.refresh_rate_pref), "43200000"));
-
-        if (refreshRate==0 || widgetsDisabled) {
-            alarmManager.cancel(updateIntent); // auto update disabled or all widgets removed
-        } else {
-            alarmManager.setRepeating(AlarmManager.RTC, System.currentTimeMillis() + refreshRate, refreshRate, updateIntent);
-        }
-    }
-
-    @Override
-    public void onDisabled(Context context) {
-        // cancel the alarm for automatic updates
-        setUpdateSchedule(context, true);
-        //System.out.println("onDisabled();");
-        super.onDisabled(context);
-    }
-
-    @Override
-    public void onEnabled(Context context) {
-        // set the pending intent for automatic update
-        setUpdateSchedule(context, false);
-        // System.out.println("onEnabled();");
-        super.onEnabled(context);
-    }
-
     @Override
     public void onReceive(@NonNull Context context, @NonNull Intent intent) {
         String action = intent.getAction();
-        if (action.equals(ITEM_CLICK)) {
-            // check if its the load more button being clicked
-            String redditId = intent.getExtras().getString(WidgetProvider.ITEM_ID);
-            if (redditId!=null && redditId.equals("0")) {
-                // LOAD MORE FEED ITEM CLICKED
-                //System.out.println("loading more feed items...");
-                int widgetid = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID);
-                // show loader
-                showLoaderAndUpdate(context, widgetid, true);
-            } else {
-                int clickMode = intent.getExtras().getInt(WidgetProvider.ITEM_CLICK_MODE);
-                switch (clickMode) {
-                    // NORMAL FEED ITEM CLICK
-                    case WidgetProvider.ITEM_CLICK_OPEN:
-                        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-                        String clickPrefString = prefs.getString(context.getString(R.string.on_click_pref), "1");
-                        int clickPref = Integer.valueOf(clickPrefString);
-                        switch (clickPref) {
-                            case 1:
-                                // open in the reddinator view
-                                Intent clickIntent1 = new Intent(context, ViewRedditActivity.class);
-                                clickIntent1.putExtras(intent.getExtras());
-                                clickIntent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                clickIntent1.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
-                                context.startActivity(clickIntent1);
-                                break;
-                            case 2:
-                                // open link in browser
-                                String url = intent.getStringExtra(ITEM_URL);
-                                Intent clickIntent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-                                clickIntent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                context.startActivity(clickIntent2);
-                                break;
-                            case 3:
-                                // open reddit comments page in browser
-                                String permalink = intent.getStringExtra(ITEM_PERMALINK);
-                                Intent clickIntent3 = new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.reddit.com" + permalink));
-                                clickIntent3.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                                context.startActivity(clickIntent3);
-                                break;
-                        }
-                        break;
-                    // upvote
-                    case WidgetProvider.ITEM_CLICK_UPVOTE:
-                        new WidgetVoteTask(
-                                context,
-                                intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1),
-                                1,
-                                intent.getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1),
-                                intent.getStringExtra(WidgetProvider.ITEM_ID)
-                        ).execute();
-                        break;
-                    // downvote
-                    case WidgetProvider.ITEM_CLICK_DOWNVOTE:
-                        new WidgetVoteTask(
-                                context,
-                                intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1),
-                                -1,
-                                intent.getIntExtra(WidgetProvider.ITEM_FEED_POSITION, -1),
-                                intent.getStringExtra(WidgetProvider.ITEM_ID)
-                        ).execute();
-                        break;
-                    // post options
-                    case WidgetProvider.ITEM_CLICK_OPTIONS:
-                        Intent ointent = new Intent(context, FeedItemDialogActivity.class);
-                        ointent.putExtras(intent.getExtras());
-                        ointent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
-                        context.startActivity(ointent);
-                        break;
-                    // open image view
-                    case WidgetProvider.ITEM_CLICK_IMAGE:
-                        Intent imageintent = new Intent(context, ViewImageDialogActivity.class);
-                        imageintent.putExtras(intent.getExtras());
-                        imageintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
-                        context.startActivity(imageintent);
-                        break;
-                }
-            }
-        }
 
-        if (action.equals(APPWIDGET_UPDATE_FEED)) {
-            // get widget id
-            int widgetId = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID);
+        if (action.equals(WidgetCommon.APPWIDGET_UPDATE_FEED)) {
             // show loader and update data
-            showLoaderAndUpdate(context, widgetId, false);
+            int widgetid = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);
+            WidgetCommon.showLoaderAndUpdate(context, widgetid, false);
         }
 
-        if (action.equals(APPWIDGET_AUTO_UPDATE)) {
+        if (action.equals(WidgetCommon.APPWIDGET_AUTO_UPDATE)) {
             AppWidgetManager mgr = AppWidgetManager.getInstance(context);
             int[] appWidgetIds = mgr.getAppWidgetIds(new ComponentName(context, WidgetProvider.class));
             // perform full update, just to refresh views
             onUpdate(context, mgr, appWidgetIds);
             // show loader and update data
-            updateAllWidgets(context, appWidgetIds);
+            WidgetCommon.updateAllWidgets(context, appWidgetIds);
         }
 
         if (action.equals(Intent.ACTION_MY_PACKAGE_REPLACED)) {
@@ -329,63 +170,4 @@ public class WidgetProvider extends AppWidgetProvider {
         super.onReceive(context, intent);
     }
 
-    private static void updateAllWidgets(Context context, int[] widgetIds) {
-        for (int widgetId : widgetIds) {
-            showLoaderAndUpdate(context, widgetId, false);
-        }
-    }
-
-    public static void showLoaderAndUpdate(Context context, int widgetId, boolean loadmore) {
-        Reddinator global = ((Reddinator) context.getApplicationContext());
-        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
-        // show loader
-        RemoteViews views = new RemoteViews((new Intent(context, WidgetProvider.class)).getPackage(), R.layout.widget);
-        views.setViewVisibility(R.id.srloader, View.VISIBLE);
-        views.setViewVisibility(R.id.erroricon, View.INVISIBLE); // make sure we hide the error icon
-        views.setTextViewText(R.id.subreddittxt, global.getSubredditManager().getCurrentFeedName(widgetId));
-        // load more text
-        if (loadmore) {
-            views.setTextViewText(R.id.loadmoretxt, context.getResources().getString(R.string.loading));
-            // set loadmore indicator so the notifydatasetchanged function knows what to do
-            global.setLoadMore();
-        }
-        // set cache bypass incase widget needs new view factory
-        global.setBypassCache(true);
-        // update view
-        mgr.partiallyUpdateAppWidget(widgetId, views);
-        // request update of listview data
-        mgr.notifyAppWidgetViewDataChanged(widgetId, R.id.listview);
-    }
-
-    public static void refreshAllWidgetViews(Reddinator global){
-        global.setRefreshView();
-        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(global);
-        int[] widgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(global, WidgetProvider.class));
-        WidgetProvider.updateAppWidgets(global, appWidgetManager, widgetIds);
-        appWidgetManager.notifyAppWidgetViewDataChanged(widgetIds, R.id.listview);
-    }
-
-    public static void showLoaderAndRefreshViews(Context context, int widgetId){
-        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
-        // show loader
-        RemoteViews views = new RemoteViews((new Intent(context, WidgetProvider.class)).getPackage(), R.layout.widget);
-        views.setViewVisibility(R.id.srloader, View.VISIBLE);
-        views.setViewVisibility(R.id.erroricon, View.INVISIBLE); // make sure we hide the error icon
-        // update view
-        mgr.partiallyUpdateAppWidget(widgetId, views);
-    }
-
-    public static void hideLoaderAndRefreshViews(Context context, int widgetId, boolean showerror){
-        Reddinator global = ((Reddinator) context.getApplicationContext());
-        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
-        // show loader
-        RemoteViews views = new RemoteViews((new Intent(context, WidgetProvider.class)).getPackage(), R.layout.widget);
-        views.setViewVisibility(R.id.srloader, View.GONE);
-        views.setViewVisibility(R.id.erroricon, (showerror ? View.VISIBLE : View.GONE)); // make sure we hide the error icon
-        // update view
-        global.setRefreshView();
-        mgr.notifyAppWidgetViewDataChanged(widgetId, R.id.listview);
-        mgr.partiallyUpdateAppWidget(widgetId, views);
-    }
-
 }
\ No newline at end of file
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProviderBase.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProviderBase.java
new file mode 100644
index 0000000..c934b3a
--- /dev/null
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetProviderBase.java
@@ -0,0 +1,165 @@
+/*
+ * Copyright 2013 Michael Boyde Wallace (http://wallaceit.com.au)
+ * This file is part of Reddinator.
+ *
+ * Reddinator is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * Reddinator is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with Reddinator (COPYING). If not, see <http://www.gnu.org/licenses/>.
+ */
+package au.com.wallaceit.reddinator.service;
+
+import android.annotation.TargetApi;
+import android.appwidget.AppWidgetManager;
+import android.appwidget.AppWidgetProvider;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+
+import au.com.wallaceit.reddinator.R;
+import au.com.wallaceit.reddinator.Reddinator;
+import au.com.wallaceit.reddinator.activity.FeedItemDialogActivity;
+import au.com.wallaceit.reddinator.activity.ViewImageDialogActivity;
+import au.com.wallaceit.reddinator.activity.ViewRedditActivity;
+import au.com.wallaceit.reddinator.tasks.WidgetVoteTask;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class WidgetProviderBase extends AppWidgetProvider {
+
+    @Override
+    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
+        super.onUpdate(context, appWidgetManager, appWidgetIds);
+    }
+
+    @Override
+    public void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {
+        this.onUpdate(context, appWidgetManager, new int[]{appWidgetId}); // fix for the widget not loading the second time round (adding to the homescreen)
+        super.onAppWidgetOptionsChanged(context, appWidgetManager, appWidgetId, newOptions);
+    }
+
+    @Override
+    public void onDeleted(Context context, int[] appWidgetIds) {
+        // Cleaup widget data
+        Reddinator global = (Reddinator) context.getApplicationContext();
+        for (int widgetId : appWidgetIds){
+            global.clearFeedDataAndPreferences(widgetId);
+        }
+        super.onDeleted(context, appWidgetIds);
+    }
+
+    @Override
+    public void onDisabled(Context context) {
+        // cancel the alarm for automatic updates
+        WidgetCommon.setUpdateSchedule(context, WidgetProviderBase.class, true);
+        //System.out.println("onDisabled();");
+        super.onDisabled(context);
+    }
+
+    @Override
+    public void onEnabled(Context context) {
+        // set the pending intent for automatic update
+        WidgetCommon.setUpdateSchedule(context, WidgetProviderBase.class, false);
+        // System.out.println("onEnabled();");
+        super.onEnabled(context);
+    }
+
+    @Override
+    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+        String action = intent.getAction();
+        int widgetid = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID);
+        if (action.equals(WidgetCommon.ITEM_CLICK)) {
+            // check if its the load more button being clicked
+            String redditId = intent.getExtras().getString(Reddinator.ITEM_ID);
+            if (redditId!=null && redditId.equals("0")) {
+                // LOAD MORE FEED ITEM CLICKED
+                //System.out.println("loading more feed items...");
+                WidgetCommon.showLoaderAndUpdate(context, widgetid, true);
+            } else {
+                int clickMode = intent.getExtras().getInt(WidgetCommon.ITEM_CLICK_MODE);
+                switch (clickMode) {
+                    // NORMAL FEED ITEM CLICK
+                    case WidgetCommon.ITEM_CLICK_OPEN:
+                        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+                        String clickPrefString = prefs.getString(context.getString(R.string.on_click_pref), "1");
+                        int clickPref = Integer.valueOf(clickPrefString);
+                        switch (clickPref) {
+                            case 1:
+                                // open in the reddinator view
+                                Intent clickIntent1 = new Intent(context, ViewRedditActivity.class);
+                                clickIntent1.putExtras(intent.getExtras());
+                                clickIntent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                clickIntent1.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
+                                context.startActivity(clickIntent1);
+                                break;
+                            case 2:
+                                // open link in browser
+                                String url = intent.getStringExtra(Reddinator.ITEM_URL);
+                                Intent clickIntent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                                clickIntent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                context.startActivity(clickIntent2);
+                                break;
+                            case 3:
+                                // open reddit comments page in browser
+                                String permalink = intent.getStringExtra(Reddinator.ITEM_PERMALINK);
+                                Intent clickIntent3 = new Intent(Intent.ACTION_VIEW, Uri.parse(Reddinator.REDDIT_BASE_URL + permalink));
+                                clickIntent3.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                context.startActivity(clickIntent3);
+                                break;
+                        }
+                        break;
+                    // upvote
+                    case WidgetCommon.ITEM_CLICK_UPVOTE:
+                        new WidgetVoteTask(
+                                context,
+                                widgetid,
+                                1,
+                                intent.getIntExtra(Reddinator.ITEM_FEED_POSITION, -1),
+                                intent.getStringExtra(Reddinator.ITEM_ID)
+                        ).execute();
+                        break;
+                    // downvote
+                    case WidgetCommon.ITEM_CLICK_DOWNVOTE:
+                        new WidgetVoteTask(
+                                context,
+                                widgetid,
+                                -1,
+                                intent.getIntExtra(Reddinator.ITEM_FEED_POSITION, -1),
+                                intent.getStringExtra(Reddinator.ITEM_ID)
+                        ).execute();
+                        break;
+                    // post options
+                    case WidgetCommon.ITEM_CLICK_OPTIONS:
+                        Intent ointent = new Intent(context, FeedItemDialogActivity.class);
+                        ointent.putExtras(intent.getExtras());
+                        ointent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+                        context.startActivity(ointent);
+                        break;
+                    // open image view
+                    case WidgetCommon.ITEM_CLICK_IMAGE:
+                        Intent imageintent = new Intent(context, ViewImageDialogActivity.class);
+                        imageintent.putExtras(intent.getExtras());
+                        imageintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+                        context.startActivity(imageintent);
+                        break;
+                }
+            }
+        }
+
+        //System.out.println("broadcast received: " + action);
+        super.onReceive(context, intent);
+    }
+
+}
\ No newline at end of file
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetService.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetService.java
index c71beef..153f604 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetService.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/service/WidgetService.java
@@ -63,6 +63,7 @@ public class WidgetService extends RemoteViewsService {
 class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
     private Context mContext = null;
     private int appWidgetId;
+    private Class providerClass;
     private JSONArray data;
     private Reddinator global;
     private SharedPreferences mSharedPreferences;
@@ -79,6 +80,7 @@ class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
     ListRemoteViewsFactory(Context context, Intent intent) {
         this.mContext = context;
         appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);
+        providerClass = WidgetCommon.getWidgetProviderClass(mContext, appWidgetId);
         global = ((Reddinator) context.getApplicationContext());
         mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
         //System.out.println("New view factory created for widget ID:"+appWidgetId);
@@ -172,15 +174,22 @@ class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
                 loadmorerow.setTextViewText(R.id.loadmoretxt, mContext.getResources().getString(R.string.load_more));
             }
             loadmorerow.setTextColor(R.id.loadmoretxt, themeColors.get("load_text"));
+            if (providerClass==WidgetCommon.WIDGET_CLASS_STACK)
+                loadmorerow.setInt(R.id.load_row, "setBackgroundColor", themeColors.get("background_color"));
             Intent i = new Intent();
             Bundle extras = new Bundle();
-            extras.putString(WidgetProvider.ITEM_ID, "0"); // zero will be an indicator in the onreceive function of widget provider if its not present it forces a reload
+            extras.putString(Reddinator.ITEM_ID, "0"); // zero will be an indicator in the onreceive function of widget provider if its not present it forces a reload
             i.putExtras(extras);
-            loadmorerow.setOnClickFillInIntent(R.id.listrowloadmore, i);
+            loadmorerow.setOnClickFillInIntent(R.id.load_row, i);
             return loadmorerow;
         } else {
             // create remote view from specified layout
-            row = new RemoteViews(mContext.getPackageName(), R.layout.listrow);
+            if (providerClass==WidgetCommon.WIDGET_CLASS_LIST){
+                row = new RemoteViews(mContext.getPackageName(), R.layout.widget_list_row);
+            } else {
+                row = new RemoteViews(mContext.getPackageName(), R.layout.widget_stack_row);
+                row.setInt(R.id.item_row, "setBackgroundColor", themeColors.get("background_color"));
+            }
             // build normal item
             String title, url, permalink, thumbnail, domain, id, subreddit, userLikes, previewUrl = null;
             int score;
@@ -254,32 +263,32 @@ class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
             // add extras and set click intent
             Intent i = new Intent();
             Bundle extras = new Bundle();
-            extras.putString(WidgetProvider.ITEM_ID, id);
-            extras.putInt(WidgetProvider.ITEM_FEED_POSITION, position);
-            extras.putString(WidgetProvider.ITEM_URL, StringEscapeUtils.unescapeHtml4(url)); // decode html entities in url; fixes reddituploads.com urls
-            extras.putString(WidgetProvider.ITEM_PERMALINK, permalink);
-            extras.putString(WidgetProvider.ITEM_DOMAIN, domain);
-            extras.putString(WidgetProvider.ITEM_SUBREDDIT, subreddit);
-            extras.putString(WidgetProvider.ITEM_USERLIKES, userLikes);
-            extras.putInt(WidgetProvider.ITEM_CLICK_MODE, WidgetProvider.ITEM_CLICK_OPEN);
+            extras.putString(Reddinator.ITEM_ID, id);
+            extras.putInt(Reddinator.ITEM_FEED_POSITION, position);
+            extras.putString(Reddinator.ITEM_URL, StringEscapeUtils.unescapeHtml4(url)); // decode html entities in url; fixes reddituploads.com urls
+            extras.putString(Reddinator.ITEM_PERMALINK, permalink);
+            extras.putString(Reddinator.ITEM_DOMAIN, domain);
+            extras.putString(Reddinator.ITEM_SUBREDDIT, subreddit);
+            extras.putString(Reddinator.ITEM_USERLIKES, userLikes);
+            extras.putInt(WidgetCommon.ITEM_CLICK_MODE, WidgetCommon.ITEM_CLICK_OPEN);
             i.putExtras(extras);
-            row.setOnClickFillInIntent(R.id.listrow, i);
+            row.setOnClickFillInIntent(R.id.item_row, i);
             // add intent for upvote
             Intent uvintent =  new Intent();
             Bundle uvextras = (Bundle) extras.clone();
-            uvextras.putInt(WidgetProvider.ITEM_CLICK_MODE, WidgetProvider.ITEM_CLICK_UPVOTE);
+            uvextras.putInt(WidgetCommon.ITEM_CLICK_MODE, WidgetCommon.ITEM_CLICK_UPVOTE);
             uvintent.putExtras(uvextras);
             row.setOnClickFillInIntent(R.id.widget_upvote, uvintent);
             // add intent for downvote
             Intent dvintent =  new Intent();
             Bundle dvextras = (Bundle) extras.clone();
-            dvextras.putInt(WidgetProvider.ITEM_CLICK_MODE, WidgetProvider.ITEM_CLICK_DOWNVOTE);
+            dvextras.putInt(WidgetCommon.ITEM_CLICK_MODE, WidgetCommon.ITEM_CLICK_DOWNVOTE);
             dvintent.putExtras(dvextras);
             row.setOnClickFillInIntent(R.id.widget_downvote, dvintent);
             // add intent for post options
             Intent ointent =  new Intent();
             Bundle oextras = (Bundle) extras.clone();
-            oextras.putInt(WidgetProvider.ITEM_CLICK_MODE, WidgetProvider.ITEM_CLICK_OPTIONS);
+            oextras.putInt(WidgetCommon.ITEM_CLICK_MODE, WidgetCommon.ITEM_CLICK_OPTIONS);
             ointent.putExtras(oextras);
             row.setOnClickFillInIntent(R.id.widget_item_options, ointent);
 
@@ -363,7 +372,7 @@ class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
                 if ((imageLoadFlag==3 || bitmap!=null) && Utilities.isImageUrl(url)){
                     Intent imageintent =  new Intent();
                     Bundle imageextras = (Bundle) extras.clone();
-                    imageextras.putInt(WidgetProvider.ITEM_CLICK_MODE, WidgetProvider.ITEM_CLICK_IMAGE);
+                    imageextras.putInt(WidgetCommon.ITEM_CLICK_MODE, WidgetCommon.ITEM_CLICK_IMAGE);
                     imageintent.putExtras(imageextras);
                     row.setOnClickFillInIntent(imageView, imageintent);
                     row.setImageViewBitmap(R.id.thumbnail_expand, images[7]);
@@ -544,11 +553,11 @@ class ListRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
     private void hideWidgetLoader(boolean goToTopOfList, boolean showError, final String errorTxt) {
         AppWidgetManager mgr = AppWidgetManager.getInstance(mContext);
         // hide loader
-        RemoteViews views = new RemoteViews(mContext.getPackageName(), R.layout.widget);
+        RemoteViews views = new RemoteViews(mContext.getPackageName(), WidgetCommon.getWidgetLayoutId(providerClass));
         views.setViewVisibility(R.id.srloader, View.INVISIBLE);
         // go to the top of the list view
-        if (goToTopOfList) {
-            views.setScrollPosition(R.id.listview, 0);
+        if (providerClass==WidgetCommon.WIDGET_CLASS_LIST && goToTopOfList) {
+            views.setScrollPosition(R.id.adapterview, 0);
         }
         if (showError) {
             views.setViewVisibility(R.id.erroricon, View.VISIBLE);
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/tasks/WidgetVoteTask.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/tasks/WidgetVoteTask.java
index ef003c9..2b52f37 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/tasks/WidgetVoteTask.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/tasks/WidgetVoteTask.java
@@ -29,7 +29,7 @@ import org.json.JSONObject;
 import au.com.wallaceit.reddinator.R;
 import au.com.wallaceit.reddinator.Reddinator;
 import au.com.wallaceit.reddinator.core.RedditData;
-import au.com.wallaceit.reddinator.service.WidgetProvider;
+import au.com.wallaceit.reddinator.service.WidgetCommon;
 
 public class WidgetVoteTask extends AsyncTask<String, Integer, Boolean> {
     private Context context;
@@ -62,7 +62,9 @@ public class WidgetVoteTask extends AsyncTask<String, Integer, Boolean> {
             redditid = "null";
             curVote = "null";
         }
-        WidgetProvider.showLoaderAndRefreshViews(context, widgetId);
+        //AppWidgetManager mgr = AppWidgetManager.getInstance(context).get.getAppWidgetInfo(widgetId).provider;
+
+        WidgetCommon.showLoaderAndRefreshViews(context, widgetId);
     }
 
     @Override
@@ -123,6 +125,6 @@ public class WidgetVoteTask extends AsyncTask<String, Integer, Boolean> {
             // show error
             Toast.makeText(context, exception.getMessage(), Toast.LENGTH_LONG).show();
         }
-        WidgetProvider.hideLoaderAndRefreshViews(context, widgetId, (!result && !exception.isAuthError()));
+        WidgetCommon.hideLoaderAndRefreshViews(context, widgetId, (!result && !exception.isAuthError()));
     }
 }
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/AccountFeedFragment.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/AccountFeedFragment.java
index 3d34d4a..6e49969 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/AccountFeedFragment.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/AccountFeedFragment.java
@@ -344,10 +344,10 @@ public class AccountFeedFragment extends Fragment implements VoteTask.Callback,
         @JavascriptInterface
         public void openRedditPost(String redditId, String postUrl, String permaLink, String userLikes) {
             Intent intent = new Intent(mContext, ViewRedditActivity.class);
-            intent.putExtra(WidgetProvider.ITEM_ID, redditId);
-            intent.putExtra(WidgetProvider.ITEM_URL, postUrl);
-            intent.putExtra(WidgetProvider.ITEM_PERMALINK, permaLink);
-            intent.putExtra(WidgetProvider.ITEM_USERLIKES, userLikes);
+            intent.putExtra(Reddinator.ITEM_ID, redditId);
+            intent.putExtra(Reddinator.ITEM_URL, postUrl);
+            intent.putExtra(Reddinator.ITEM_PERMALINK, permaLink);
+            intent.putExtra(Reddinator.ITEM_USERLIKES, userLikes);
             startActivity(intent);
         }
 
diff --git a/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/SubredditFeedAdapter.java b/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/SubredditFeedAdapter.java
index 36bfcb0..133e70d 100644
--- a/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/SubredditFeedAdapter.java
+++ b/reddinator/src/main/java/au/com/wallaceit/reddinator/ui/SubredditFeedAdapter.java
@@ -175,13 +175,13 @@ public class SubredditFeedAdapter extends BaseAdapter implements VoteTask.Callba
         }
         try {
             extras.putInt(AppWidgetManager.EXTRA_APPWIDGET_ID, feedId);
-            extras.putString(WidgetProvider.ITEM_ID, item.getString("name"));
-            extras.putInt(WidgetProvider.ITEM_FEED_POSITION, position);
-            extras.putString(WidgetProvider.ITEM_URL, StringEscapeUtils.unescapeHtml4(item.getString("url")));
-            extras.putString(WidgetProvider.ITEM_PERMALINK, item.getString("permalink"));
-            extras.putString(WidgetProvider.ITEM_DOMAIN, item.getString("domain"));
-            extras.putString(WidgetProvider.ITEM_SUBREDDIT, item.getString("subreddit"));
-            extras.putString(WidgetProvider.ITEM_USERLIKES, item.getString("likes"));
+            extras.putString(Reddinator.ITEM_ID, item.getString("name"));
+            extras.putInt(Reddinator.ITEM_FEED_POSITION, position);
+            extras.putString(Reddinator.ITEM_URL, StringEscapeUtils.unescapeHtml4(item.getString("url")));
+            extras.putString(Reddinator.ITEM_PERMALINK, item.getString("permalink"));
+            extras.putString(Reddinator.ITEM_DOMAIN, item.getString("domain"));
+            extras.putString(Reddinator.ITEM_SUBREDDIT, item.getString("subreddit"));
+            extras.putString(Reddinator.ITEM_USERLIKES, item.getString("likes"));
         } catch (JSONException e) {
             e.printStackTrace();
         }
