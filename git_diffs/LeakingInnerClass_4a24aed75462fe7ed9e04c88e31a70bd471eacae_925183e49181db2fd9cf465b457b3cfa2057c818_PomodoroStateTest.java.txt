diff --git a/app/src/main/java/com/github/ympavlov/minidoro/PomodoroActivity.java b/app/src/main/java/com/github/ympavlov/minidoro/PomodoroActivity.java
index 25d61ef..9fbb82b 100644
--- a/app/src/main/java/com/github/ympavlov/minidoro/PomodoroActivity.java
+++ b/app/src/main/java/com/github/ympavlov/minidoro/PomodoroActivity.java
@@ -16,6 +16,7 @@ import android.text.SpannableString;
 import android.text.style.ForegroundColorSpan;
 import android.util.DisplayMetrics;
 //import android.util.Log;
+import android.util.Log;
 import android.util.TypedValue;
 import android.view.*;
 import android.widget.Button;
@@ -339,6 +340,9 @@ public class PomodoroActivity extends Activity
 	private void startWorkBreak(Stage next)
 	{
 		pomodoroState.start(next, System.currentTimeMillis(), prefs.getDuration(next), prefs.getLongBreakVariance());
+		if (pomodoroState.getWorksSinceLastLongBreak() == 0) {
+			Log.i("Minidoro", "This break was treated as a long one");
+		}
 
 		// [4a] End up notification that has overridden silent mode
 		pomodoroContext.ringerModeManager.returnUserMode();
diff --git a/app/src/main/java/com/github/ympavlov/minidoro/PomodoroState.java b/app/src/main/java/com/github/ympavlov/minidoro/PomodoroState.java
index 9f61de7..3428f9a 100644
--- a/app/src/main/java/com/github/ympavlov/minidoro/PomodoroState.java
+++ b/app/src/main/java/com/github/ympavlov/minidoro/PomodoroState.java
@@ -3,6 +3,9 @@ package com.github.ympavlov.minidoro;
 import java.io.Serializable;
 import java.util.Observable;
 
+import static com.github.ympavlov.minidoro.Stage.*;
+import static com.github.ympavlov.minidoro.TimeTicker.MINUTE;
+
 /*
  * This class encapsulates all the pomodoro logic state
  * Other app classes' states can be recreated from this state
@@ -20,7 +23,7 @@ public class PomodoroState extends Observable implements Serializable
 	private long untilMillis;
 	private int lastLongBreak; // work number last long break happened after
 
-	public PomodoroState() { this.stage = Stage.BREAK; }
+	public PomodoroState() { this.stage = BREAK; }
 
 	public boolean noCurrQuotes() { return quotes <= 0; }
 	public boolean noCurrDashes() { return dashes <= 0; }
@@ -58,11 +61,11 @@ public class PomodoroState extends Observable implements Serializable
 	@SuppressWarnings("IntegerMultiplicationImplicitCastToLong")
 	public void start(Stage next, long startTime, int duration, int longBreakVariance)
 	{
-		if (next == Stage.WORK && (startTime - untilMillis >= TimeTicker.MINUTE * longBreakVariance)) {
+		if (stage == LONG_BREAK || stage == BREAK && (startTime - untilMillis >= MINUTE * longBreakVariance))
 			lastLongBreak = works;
-		}
+
 		stage = next;
-		untilMillis = startTime + duration * TimeTicker.MINUTE;
+		untilMillis = startTime + duration * MINUTE;
 		isTimerOn = true;
 	}
 
@@ -74,7 +77,7 @@ public class PomodoroState extends Observable implements Serializable
 	public void stopWork()
 	{
 		if (stage.isWork) {
-			stage = Stage.BREAK; // break ended, no matter long or short
+			stage = BREAK; // break ended, no matter long or short
 			isTimerOn = false;
 
 			quotes = 0;
diff --git a/app/src/test/java/com/github/ympavlov/minidoro/PomodoroStateTest.java b/app/src/test/java/com/github/ympavlov/minidoro/PomodoroStateTest.java
index a710fed..047bb2b 100644
--- a/app/src/test/java/com/github/ympavlov/minidoro/PomodoroStateTest.java
+++ b/app/src/test/java/com/github/ympavlov/minidoro/PomodoroStateTest.java
@@ -5,16 +5,18 @@ import org.junit.Test;
 import java.util.Observable;
 import java.util.Observer;
 
+import static com.github.ympavlov.minidoro.Stage.*;
+import static com.github.ympavlov.minidoro.TimeTicker.*;
 import static org.junit.Assert.*;
 
 public class PomodoroStateTest
 {
+	private final long START_TIME = 100000000L;
 	private boolean observerWasNotified;
 
 	@Test
-	public void startFirstWork()
+	public void startFinishWork()
 	{
-		final long startTime = System.currentTimeMillis();
 		final int workDuration = 1;
 
 		PomodoroState s = new PomodoroState();
@@ -28,21 +30,25 @@ public class PomodoroStateTest
 		assertEquals(s.works, 0);
 		assertEquals(s.getWorksSinceLastLongBreak(), 0);
 
-		s.addObserver(new PomodoroStateTestObserver());
+		s.addObserver(new Observer()
+		{
+			@Override
+			public void update(Observable observable, Object o) { observerWasNotified = true; }
+		});
 
-		s.start(Stage.WORK, startTime, workDuration, 0);
+		s.start(WORK, START_TIME, workDuration, 0);
 
 		assertTrue(s.isTimerOn());
 		assertFalse(observerWasNotified);
 		assertEquals(s.works, 0);
 
-		s.tick(startTime + workDuration * TimeTicker.SECOND);
+		s.tick(START_TIME + SECOND);
 
 		assertTrue(s.isTimerOn());
 		assertFalse(observerWasNotified);
 		assertEquals(s.works, 0);
 
-		s.tick(startTime + TimeTicker.MINUTE);
+		s.tick(START_TIME + workDuration * MINUTE + SECOND);
 
 		assertFalse(s.isTimerOn());
 		assertTrue(observerWasNotified);
@@ -50,9 +56,43 @@ public class PomodoroStateTest
 		assertEquals(s.getWorksSinceLastLongBreak(), 1);
 	}
 
-	private class PomodoroStateTestObserver implements Observer
+	private PomodoroState doWorkBreakWork(Stage breakType, int breakActually)
 	{
-		@Override
-		public void update(Observable observable, Object o) { observerWasNotified = true; }
+		//Using default period values
+		final int longBreakVariance = LONG_BREAK.defaultDuration - BREAK.defaultDuration;
+
+		long currTime = START_TIME;
+		PomodoroState s = new PomodoroState();
+
+		s.start(WORK, currTime, WORK.defaultDuration, longBreakVariance);
+		s.tick(currTime += (long) WORK.defaultDuration * MINUTE + 1);
+
+		s.start(breakType, currTime, breakType.defaultDuration, longBreakVariance);
+		s.tick(currTime += (long) breakActually * MINUTE + 1);
+
+		s.start(WORK, currTime, WORK.defaultDuration, longBreakVariance);
+
+		return s;
+	}
+	@Test
+	public void worksSinceLastLongBreak_usual()
+	{
+		PomodoroState s = doWorkBreakWork(BREAK, BREAK.defaultDuration);
+
+		assertEquals(s.getWorksSinceLastLongBreak(), 2);
+	}
+	@Test
+	public void worksSinceLastLongBreak_long()
+	{
+		PomodoroState s = doWorkBreakWork(LONG_BREAK, LONG_BREAK.defaultDuration);
+
+		assertEquals(s.getWorksSinceLastLongBreak(), 1);
+	}
+	@Test
+	public void worksSinceLastLongBreak_shortWasActuallyLong()
+	{
+		PomodoroState s = doWorkBreakWork(BREAK, LONG_BREAK.defaultDuration);
+
+		assertEquals(s.getWorksSinceLastLongBreak(), 1);
 	}
 }
