diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/BaseActivity.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/BaseActivity.java
index 1820ba6b..f9ec755c 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/BaseActivity.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/BaseActivity.java
@@ -53,7 +53,7 @@ public abstract class BaseActivity extends AppCompatActivity {
             Window window = getWindow();
             window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
             window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
-            window.setStatusBarColor(getResources().getColor(R.color.dark_blue));
+            window.setStatusBarColor(getResources().getColor(R.color.primary_dark));
         }
     }
 
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
index 646faa2e..f9b882b6 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/EditorActivity.java
@@ -49,6 +49,7 @@ import java.util.List;
 
 import butterknife.Bind;
 import ch.rmy.android.http_shortcuts.http.HttpRequester;
+import ch.rmy.android.http_shortcuts.listeners.OnIconSelectedListener;
 import ch.rmy.android.http_shortcuts.shortcuts.Header;
 import ch.rmy.android.http_shortcuts.shortcuts.HeaderAdapter;
 import ch.rmy.android.http_shortcuts.shortcuts.PostParameter;
@@ -131,13 +132,6 @@ public class EditorActivity extends BaseActivity implements OnClickListener, OnI
             shortcut = shortcutStorage.getShortcutByID(shortcutID);
         }
 
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-            Window window = getWindow();
-            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
-            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
-            window.setStatusBarColor(getResources().getColor(R.color.dark_blue));
-        }
-
         nameView.setText(shortcut.getName());
         descriptionView.setText(shortcut.getDescription());
         urlView.setText(shortcut.getProtocol() + "://" + shortcut.getURL());
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/IconSelector.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/IconSelector.java
index bdaa2f56..518541cd 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/IconSelector.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/IconSelector.java
@@ -2,6 +2,7 @@ package ch.rmy.android.http_shortcuts;
 
 import android.app.Dialog;
 import android.content.Context;
+import android.graphics.Color;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
@@ -10,6 +11,8 @@ import android.widget.BaseAdapter;
 import android.widget.GridView;
 import android.widget.ImageView;
 
+import ch.rmy.android.http_shortcuts.listeners.OnIconSelectedListener;
+
 /**
  * A dialog window that lists all built-in icons, from which the user can select one.
  *
@@ -179,7 +182,7 @@ public class IconSelector extends Dialog {
             i.setPadding(5, 5, 5, 5);
 
             if (getContext().getResources().getResourceEntryName(ICONS[position]).startsWith("white")) {
-                i.setBackgroundColor(0xFF000000);
+                i.setBackgroundColor(Color.BLACK);
             }
 
             return i;
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ListActivity.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ListActivity.java
index 3b5572e0..f8320ee3 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ListActivity.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ListActivity.java
@@ -10,23 +10,24 @@ import android.net.Uri;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.provider.MediaStore.Images.Media;
-import android.view.ContextMenu;
-import android.view.ContextMenu.ContextMenuInfo;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.ListView;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.afollestad.materialdialogs.MaterialDialog;
+
 import java.util.ArrayList;
 import java.util.List;
 
 import butterknife.Bind;
 import ch.rmy.android.http_shortcuts.http.HttpRequester;
+import ch.rmy.android.http_shortcuts.listeners.OnShortcutClickedListener;
 import ch.rmy.android.http_shortcuts.shortcuts.Header;
 import ch.rmy.android.http_shortcuts.shortcuts.PostParameter;
 import ch.rmy.android.http_shortcuts.shortcuts.Shortcut;
@@ -38,14 +39,16 @@ import ch.rmy.android.http_shortcuts.shortcuts.ShortcutStorage;
  *
  * @author Roland Meyer
  */
-public class ListActivity extends BaseActivity implements OnItemClickListener {
+public class ListActivity extends BaseActivity implements OnShortcutClickedListener {
 
     private static final String ACTION_INSTALL_SHORTCUT = "com.android.launcher.action.INSTALL_SHORTCUT";
 
     @Bind(R.id.no_shortcuts)
     TextView emptyListText;
     @Bind(R.id.shortcut_list)
-    ListView shortcutList;
+    RecyclerView shortcutList;
+    @Bind(R.id.button_create_shortcut)
+    FloatingActionButton createButton;
 
     private ShortcutStorage shortcutStorage;
     private ShortcutAdapter shortcutAdapter;
@@ -62,7 +65,10 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
         shortcutStorage = new ShortcutStorage(this);
         shortcutAdapter = new ShortcutAdapter(this);
 
-        shortcutList.setOnItemClickListener(this);
+        shortcutAdapter.setOnShortcutClickListener(this);
+        LinearLayoutManager manager = new LinearLayoutManager(this);
+        shortcutList.setLayoutManager(manager);
+        shortcutList.addItemDecoration(new ShortcutListDecorator(this, R.drawable.list_divider));
         shortcutList.setAdapter(shortcutAdapter);
         registerForContextMenu(shortcutList);
 
@@ -72,6 +78,13 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
         if (!changeLog.isPermanentlyHidden() && !changeLog.wasAlreadyShown()) {
             changeLog.show();
         }
+
+        createButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                openEditorForCreation();
+            }
+        });
     }
 
     @Override
@@ -98,9 +111,6 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
-            case R.id.action_create_shortcut:
-                openEditorForCreation();
-                return true;
             case R.id.action_settings:
                 Intent intent = new Intent(this, SettingsActivity.class);
                 startActivity(intent);
@@ -116,9 +126,7 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
     }
 
     @Override
-    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-        Shortcut shortcut = shortcutStorage.getShortcuts().get(position);
-
+    public void onShortcutClicked(Shortcut shortcut, View view) {
         if (shortcutPlacementMode) {
             Intent intent = getShortcutPlacementIntent(shortcut);
             setResult(RESULT_OK, intent);
@@ -134,57 +142,52 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
                     editShortcut(shortcut);
                     break;
                 case "menu":
-                    view.showContextMenu();
+                    showContextMenu(shortcut);
                     break;
             }
         }
     }
 
     @Override
-    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
-        super.onCreateContextMenu(menu, v, menuInfo);
-
-        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;
-        Shortcut shortcut = shortcutStorage.getShortcuts().get(info.position);
-
-        menu.setHeaderTitle(shortcut.getName());
-
-        menu.add(0, 0, 0, R.string.action_place);
-        menu.add(0, 1, 0, R.string.action_run);
-        menu.add(0, 2, 0, R.string.action_edit);
-        menu.add(0, 3, 0, R.string.action_move_up);
-        menu.add(0, 4, 0, R.string.action_move_down);
-        menu.add(0, 5, 0, R.string.action_duplicate);
-        menu.add(0, 6, 0, R.string.action_delete);
+    public void onShortcutLongClicked(Shortcut shortcut, View view) {
+        showContextMenu(shortcut);
     }
 
-    @Override
-    public boolean onContextItemSelected(MenuItem item) {
-        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
-
-        final Shortcut shortcut = shortcutStorage.getShortcuts().get(info.position);
+    private void showContextMenu(final Shortcut shortcut) {
+        (new MaterialDialog.Builder(this))
+                .title(shortcut.getName())
+                .items(R.array.context_menu_items)
+                .itemsCallback(new MaterialDialog.ListCallback() {
+                    @Override
+                    public void onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {
+                        performContextMenuAction(which, shortcut);
+                    }
+                })
+                .show();
+    }
 
-        switch (item.getItemId()) {
+    private void performContextMenuAction(int action, final Shortcut shortcut) {
+        switch (action) {
             case 0: // place shortcut
                 Intent shortcutPlacementIntent = getShortcutPlacementIntent(shortcut);
                 sendBroadcast(shortcutPlacementIntent);
-                return true;
+                return;
             case 1: // run
                 HttpRequester.executeShortcut(this, shortcut, shortcutStorage);
-                return true;
+                return;
             case 2: // edit
                 editShortcut(shortcut);
-                return true;
+                return;
             case 3: // move up
                 shortcut.setPosition(shortcut.getPosition() - 1);
                 shortcutStorage.storeShortcut(shortcut);
                 updateShortcutList();
-                return true;
+                return;
             case 4: // move down
                 shortcut.setPosition(shortcut.getPosition() + 1);
                 shortcutStorage.storeShortcut(shortcut);
                 updateShortcutList();
-                return true;
+                return;
             case 5: // duplicate
                 String newName = String.format(getText(R.string.copy).toString(), shortcut.getName());
                 Shortcut newShortcut = shortcut.duplicate(newName);
@@ -208,7 +211,7 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
 
                 Toast.makeText(this, String.format(getText(R.string.shortcut_duplicated).toString(), shortcut.getName()), Toast.LENGTH_SHORT).show();
 
-                return true;
+                return;
             case 6: // delete
                 new AlertDialog.Builder(this).setTitle(R.string.confirm_delete_title).setMessage(R.string.confirm_delete_message)
                         .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
@@ -220,10 +223,10 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
                             }
 
                         }).setNegativeButton(android.R.string.no, null).show();
-                return true;
+                return;
         }
 
-        return false;
+        return;
     }
 
     private Intent getShortcutPlacementIntent(Shortcut shortcut) {
@@ -271,8 +274,7 @@ public class ListActivity extends BaseActivity implements OnItemClickListener {
 
     private void updateShortcutList() {
         List<Shortcut> shortcuts = shortcutStorage.getShortcuts();
-        shortcutAdapter.clear();
-        shortcutAdapter.addAll(shortcuts);
+        shortcutAdapter.updateShortcuts(shortcuts);
 
         if (shortcuts.isEmpty()) {
 
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ShortcutListDecorator.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ShortcutListDecorator.java
new file mode 100644
index 00000000..22f78490
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/ShortcutListDecorator.java
@@ -0,0 +1,32 @@
+package ch.rmy.android.http_shortcuts;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+
+public class ShortcutListDecorator extends RecyclerView.ItemDecoration {
+
+    private Drawable divider;
+
+    public ShortcutListDecorator(Context context, int resId) {
+        divider = ContextCompat.getDrawable(context, resId);
+    }
+
+    @Override
+    public void onDraw(Canvas canvas, RecyclerView parent, RecyclerView.State state) {
+        int paddingLeft = parent.getPaddingLeft();
+        int paddingRight = parent.getWidth() - parent.getPaddingRight();
+
+        for (int i = 0; i < parent.getChildCount(); i++) {
+            View child = parent.getChildAt(i);
+            RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();
+            int paddingTop = child.getBottom() + params.bottomMargin;
+            int paddingBottom = paddingTop + divider.getIntrinsicHeight();
+            divider.setBounds(paddingLeft, paddingTop, paddingRight, paddingBottom);
+            divider.draw(canvas);
+        }
+    }
+}
\ No newline at end of file
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/OnIconSelectedListener.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnIconSelectedListener.java
similarity index 82%
rename from HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/OnIconSelectedListener.java
rename to HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnIconSelectedListener.java
index 0a25694a..b6bc89e3 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/OnIconSelectedListener.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnIconSelectedListener.java
@@ -1,4 +1,4 @@
-package ch.rmy.android.http_shortcuts;
+package ch.rmy.android.http_shortcuts.listeners;
 
 public interface OnIconSelectedListener {
 
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnShortcutClickedListener.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnShortcutClickedListener.java
new file mode 100644
index 00000000..d1f38f63
--- /dev/null
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/listeners/OnShortcutClickedListener.java
@@ -0,0 +1,13 @@
+package ch.rmy.android.http_shortcuts.listeners;
+
+import android.view.View;
+
+import ch.rmy.android.http_shortcuts.shortcuts.Shortcut;
+
+public interface OnShortcutClickedListener {
+
+    void onShortcutClicked(Shortcut shortcut, View view);
+
+    void onShortcutLongClicked(Shortcut shortcut, View view);
+
+}
diff --git a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/ShortcutAdapter.java b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/ShortcutAdapter.java
index b90a05ae..a97af62e 100644
--- a/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/ShortcutAdapter.java
+++ b/HTTPShortcuts/app/src/main/java/ch/rmy/android/http_shortcuts/shortcuts/ShortcutAdapter.java
@@ -1,48 +1,112 @@
 package ch.rmy.android.http_shortcuts.shortcuts;
 
 import android.content.Context;
+import android.graphics.Color;
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import butterknife.Bind;
+import butterknife.ButterKnife;
 import ch.rmy.android.http_shortcuts.R;
+import ch.rmy.android.http_shortcuts.listeners.OnShortcutClickedListener;
+
+public class ShortcutAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
 
-public class ShortcutAdapter extends ArrayAdapter<Shortcut> {
+    private final Context context;
+    private final List<Shortcut> shortcuts = new ArrayList<>();
+    private OnShortcutClickedListener clickListener;
 
     public ShortcutAdapter(Context context) {
-        super(context, R.layout.list_item);
+        this.context = context;
+        setHasStableIds(true);
     }
 
     @Override
-    public View getView(int position, View rowView, ViewGroup parent) {
+    public long getItemId(int position) {
+        return shortcuts.get(position).getID();
+    }
 
-        Shortcut shortcut = getItem(position);
+    public void updateShortcuts(List<Shortcut> shortcuts) {
+        this.shortcuts.clear();
+        this.shortcuts.addAll(shortcuts);
+    }
 
-        if (rowView == null) {
-            LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-            rowView = inflater.inflate(R.layout.list_item, parent, false);
-        }
+    public void setOnShortcutClickListener(OnShortcutClickedListener clickListener) {
+        this.clickListener = clickListener;
+    }
 
-        TextView nameView = (TextView) rowView.findViewById(R.id.name);
-        nameView.setText(shortcut.getName());
+    @Override
+    public int getItemCount() {
+        return shortcuts.size();
+    }
 
-        TextView descriptionView = (TextView) rowView.findViewById(R.id.description);
-        descriptionView.setText(shortcut.getDescription());
-        descriptionView.setVisibility((shortcut.getDescription() == null || shortcut.getDescription().isEmpty()) ? View.GONE : View.VISIBLE);
+    @Override
+    public ShortcutViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        return new ShortcutViewHolder(parent);
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        ((ShortcutViewHolder) holder).setShortcut(shortcuts.get(position));
+    }
 
-        ImageView iconView = (ImageView) rowView.findViewById(R.id.icon);
-        iconView.setImageURI(shortcut.getIconURI(getContext()));
+    public class ShortcutViewHolder extends RecyclerView.ViewHolder {
 
-        if (shortcut.getIconName() != null && shortcut.getIconName().startsWith("white_")) {
-            iconView.setBackgroundColor(0xFF000000);
-        } else {
-            iconView.setBackgroundColor(0);
+        @Bind(R.id.name)
+        TextView name;
+        @Bind(R.id.description)
+        TextView description;
+        @Bind(R.id.icon)
+        ImageView icon;
+        private Shortcut shortcut;
+
+        public ShortcutViewHolder(ViewGroup parent) {
+            super(LayoutInflater.from(context).inflate(R.layout.list_item, parent, false));
+            ButterKnife.bind(this, itemView);
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (clickListener != null) {
+                        clickListener.onShortcutClicked(shortcut, v);
+                    }
+                }
+            });
+            itemView.setOnLongClickListener(new View.OnLongClickListener() {
+                @Override
+                public boolean onLongClick(View v) {
+                    if (clickListener != null) {
+                        clickListener.onShortcutLongClicked(shortcut, itemView);
+                        return true;
+                    }
+                    return false;
+                }
+            });
+        }
+
+        public void setShortcut(Shortcut shortcut) {
+            this.shortcut = shortcut;
+            name.setText(shortcut.getName());
+            description.setText(shortcut.getDescription());
+            description.setVisibility(TextUtils.isEmpty(shortcut.getDescription()) ? View.GONE : View.VISIBLE);
+            icon.setImageURI(shortcut.getIconURI(context));
+            icon.setBackgroundColor(getAppropriateBackgroundColor(shortcut.getIconName()));
         }
 
-        return rowView;
+        private int getAppropriateBackgroundColor(String iconName) {
+            if (iconName != null && iconName.startsWith("white_")) {
+                return Color.BLACK;
+            } else {
+                return Color.TRANSPARENT;
+            }
+        }
     }
 
 }
