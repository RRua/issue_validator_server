diff --git a/app/src/main/java/ch/bailu/aat/description/PathDescription.java b/app/src/main/java/ch/bailu/aat/description/PathDescription.java
index a386e5f5..e34f46f3 100644
--- a/app/src/main/java/ch/bailu/aat/description/PathDescription.java
+++ b/app/src/main/java/ch/bailu/aat/description/PathDescription.java
@@ -4,6 +4,7 @@ import android.content.Context;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 
 public class PathDescription extends NameDescription {
     
@@ -13,7 +14,7 @@ public class PathDescription extends NameDescription {
 
     @Override
     public void onContentUpdated(int iid, GpxInformation info) {
-        updateName(info.getPath());
+        updateName(FocAndroid.factory(getBaseContext(), info.getPath()).getPathName());
     }
     
     
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
index 539a1789..8b117512 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
@@ -25,7 +25,7 @@ public class GpxListReader {
     }
 
 
-    public GpxListReader (ThreadControl c, Foc in) throws IOException {
+    public GpxListReader (ThreadControl c, Foc in) throws IOException, SecurityException {
         threadControl=c;
 
         parser = new XmlParser(in);
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
index 360208a5..f3cd85dd 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
@@ -21,11 +21,11 @@ public class XmlParser implements Closeable, GpxPointInterface {
 
 
 
-    public XmlParser(Foc file) throws IOException {
+    public XmlParser(Foc file) throws IOException, SecurityException{
         scanner = new Scanner(file);
     }
 
-    public void parse() throws IOException {
+    public void parse() throws IOException, SecurityException {
         state.parse(scanner);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java b/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
index 7a951951..e3bb3b7d 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
@@ -30,7 +30,7 @@ public class Scanner {
     public final SparseArray<LatLongE6> nodeMap = new SparseArray<>(50);
     public final ArrayList<GpxAttributesStatic.Tag> tagList = new ArrayList<>();
 
-    public Scanner(Foc in) throws IOException {
+    public Scanner(Foc in) throws IOException, SecurityException {
         stream = new Stream(in);
 
         latitude = new DoubleScanner(stream,6);
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
index 7a0b93bb..894c04b9 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
@@ -43,7 +43,7 @@ public class MapsForgePreview extends MapsForgeViewBase {
     private final BoundingBox bounding;
     private final Point tlPoint;
 
-    public MapsForgePreview(ServiceContext scontext, GpxInformation info, Foc out) {
+    public MapsForgePreview(ServiceContext scontext, GpxInformation info, Foc out) throws IllegalArgumentException {
         super(scontext, MapsForgePreview.class.getSimpleName(), new MapDensity());
 
         layout(0, 0, BITMAP_SIZE, BITMAP_SIZE);
@@ -63,12 +63,12 @@ public class MapsForgePreview extends MapsForgeViewBase {
         gpxLayer.onContentUpdated(InfoID.FILEVIEW, info);
         frameBounding(info.getGpxList().getDelta().getBoundingBox());
 
-        mapPosition  = getModel().mapViewPosition.getMapPosition();
-        int tileSize = getModel().displayModel.getTileSize();
-        bounding     = MapPositionUtil.getBoundingBox(mapPosition, DIM, tileSize);
-        tlPoint      = MapPositionUtil.getTopLeftPoint(mapPosition, DIM, tileSize);
+         mapPosition = getModel().mapViewPosition.getMapPosition();
+         int tileSize = getModel().displayModel.getTileSize();
+         bounding = MapPositionUtil.getBoundingBox(mapPosition, DIM, tileSize);
+         tlPoint = MapPositionUtil.getTopLeftPoint(mapPosition, DIM, tileSize);
 
-        tileLayer.preLoadTiles(bounding, mapPosition.zoomLevel, tlPoint);
+         tileLayer.preLoadTiles(bounding, mapPosition.zoomLevel, tlPoint);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java b/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
index 268b9641..9ce51655 100644
--- a/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
@@ -5,16 +5,15 @@ import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
-import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.provider.DocumentsContract;
-import android.provider.OpenableColumns;
 import android.view.ContextMenu;
 import android.view.Menu;
 import android.view.MenuItem;
 
 import java.io.Closeable;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 
 import ch.bailu.aat.R;
@@ -45,14 +44,18 @@ public class DirectoryMenu extends AbsMenu {
 
     @Override
     public void inflate(Menu menu) {
-        if (Build.VERSION.SDK_INT >= 21) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             browse = menu.add("Pick directory...*");
         }
 
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            permission = menu.add("Permission");
+        }
+
         view = menu.add(R.string.file_view);
         get = menu.add(R.string.file_view);
         clipboard = menu.add(R.string.clipboard_copy);
-        permission = menu.add("permission");
+
     }
 
     @Override
@@ -72,13 +75,13 @@ public class DirectoryMenu extends AbsMenu {
         Context c = sdirectory.getContext();
 
         if (item == browse) {
-
+/*
             Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
 
             intent.addCategory(Intent.CATEGORY_OPENABLE);
             intent.setType("image/*");
-
-//            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
+*/
+            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
 
             browseDirKey = sdirectory.getKey();
             acontext.startActivityForResult(intent, BROWSE_DIR);
@@ -115,37 +118,97 @@ public class DirectoryMenu extends AbsMenu {
         }
     }
 
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     private static void test(Activity acontext, Uri uri) {
-        Foc file = FocAndroid.factory(acontext, uri);
+/*
+        String file = DocumentsContract.getTreeDocumentId(uri) + "/Arbeit.gpx";
+        Uri doc = DocumentsContract.buildDocumentUriUsingTree(uri, file);
 
-        Closeable c=null;
+        AppLog.d(acontext, file);
+        AppLog.d(acontext, doc.toString());
         try {
-            c = file.openR();
-        } catch (IOException e) {
+            Closeable close = acontext.getContentResolver().openInputStream(doc);
+
+            if (close != null) {
+                AppLog.d(acontext, "success!!!");
+                close.close();
+            }
+        } catch (FileNotFoundException e) {
             e.printStackTrace();
-        }
-        if (c!= null) try {
-            c.close();
         } catch (IOException e) {
             e.printStackTrace();
         }
+*/
 
-        //log(file);
+        Foc file = FocAndroid.factory(acontext, uri);
 
+        rlog(file);
     }
 
-    private static void log(Foc file) {
-        AppLog.d(file, file.toString());
+    private static boolean write(Foc file) {
+        Closeable c=null;
+        try {
+            c = file.openR();
+            return true;
+        } catch (Exception e) {
+            return false;
+        } finally {
+            Foc.close(c);
+        }
+    }
 
+    private static boolean read(Foc file) {
+        Closeable c=null;
+        try {
+            c = file.openW();
+            return true;
+        } catch (Exception e) {
+            return false;
+        } finally {
+            Foc.close(c);
+        }
+    }
+
+    private static void rlog(Foc file) {
+        log(file);
         file.foreach(new Foc.Execute() {
             @Override
             public void execute(Foc child) {
-                log(child);
+                rlog(child);
             }
         });
 
     }
 
+    private static void log(Foc file) {
+        AppLog.d(file, "====log()==================");
+        AppLog.d(file, file.toString());
+        AppLog.d(file, file.getName());
+        AppLog.d(file, "Size: " + file.length());
+
+        if (file.isDir())
+            AppLog.d(file, "isDirectory");
+
+        if (file.isFile())
+            AppLog.d(file, "isFile");
+
+        if (file.canWrite())
+            AppLog.d(file, "canWrite");
+        if (file.canRead())
+            AppLog.d(file, "canRead");
+
+        if (file.exists())
+            AppLog.d(file, "exists");
+
+        if (read(file))
+            AppLog.d(file, "opensForReading");
+
+        if (write(file)){
+            AppLog.d(file, "opensForWriting");
+        }
+        AppLog.d(file, "===========================");
+    }
+
 
 }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
index 7a462773..22dcadb6 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
@@ -4,6 +4,7 @@ import java.util.ArrayList;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.aat.util.fs.foc.FocContent;
 import ch.bailu.simpleio.foc.Foc;
 
 
@@ -15,8 +16,15 @@ public abstract class SolidFile extends SolidString {
 
 
     public Foc getValueAsFile() {
-        return FocAndroid.factory(getContext(), getValueAsString());
+        return FocAndroid.factory(getContext(), super.getValueAsString());
     }
+
+    @Override
+    public String getValueAsString() {
+        return getValueAsFile().getPathName();
+    }
+
+
     public int getIconResource() {return R.drawable.folder_inverse;}
 
     public abstract ArrayList<String> buildSelection(ArrayList<String> list);
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
index 33925d6e..55bd251f 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
@@ -38,7 +38,7 @@ public class SolidRenderTheme extends SolidFile {
     }
 
 
-    public static String toThemeID(String name) {
+    private static String toThemeID(String name) {
         if (name.equals(InternalRenderTheme.DEFAULT.toString())) {
             return name;
         } else if (name.equals(InternalRenderTheme.OSMARENDER.toString())) {
@@ -97,6 +97,7 @@ public class SolidRenderTheme extends SolidFile {
         });
         return list;
     }
+
     public static ArrayList<String> add_xml(final ArrayList<String> list, Foc directory) {
         directory.foreachFile(new Foc.Execute() {
             @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
index 9929d1b6..bc1d80f2 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
@@ -68,7 +68,7 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
                         }
                         size = getSize();
                     }
-                } catch (IOException e) {
+                } catch (Exception e) {
                     e.printStackTrace();
                 } finally {
                     handle.free();
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/AbsIterator.java b/app/src/main/java/ch/bailu/aat/services/directory/AbsIterator.java
deleted file mode 100644
index 0db5bf07..00000000
--- a/app/src/main/java/ch/bailu/aat/services/directory/AbsIterator.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package ch.bailu.aat.services.directory;
-
-import android.database.Cursor;
-
-import java.io.Closeable;
-
-import ch.bailu.aat.gpx.GpxInformation;
-
-public abstract class AbsIterator extends GpxInformation implements Closeable{
-
-    public abstract void setCursor(Cursor c);
-
-    public abstract void setPosition(int index);
-    public abstract int getPosition();
-
-
-    public abstract int size();
-
-
-    public boolean isEmpty() {
-        return size() == 0;
-    }
-
-    public abstract GpxInformation getListSummary();
-
-/*
-    public static final AbsIterator NULL_ITERATOR = new AbsIterator() {
-
-        @Override
-        public void setCursor(Cursor c) {}
-
-        @Override
-        public void setPosition(int index) {}
-
-        @Override
-        public int getPosition() {
-            return 0;
-        }
-
-        @Override
-        public int pixelCount() {
-            return 0;
-        }
-
-        @Override
-        public GpxInformation getListSummary() {
-            return GpxInformation.NULL;
-        }
-
-        @Override
-        public void close() {
-        }
-
-    };
-
-  */
-    @Override
-    public void close() {}
-}
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
index bf8df72f..9df43820 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
@@ -7,10 +7,11 @@ import android.database.sqlite.SQLiteCantOpenDatabaseException;
 
 import java.io.IOException;
 
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
+import ch.bailu.aat.util.fs.AFile;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
 
 public class DirectoryService extends VirtualService implements OnSharedPreferenceChangeListener{
@@ -26,7 +27,7 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
         sdirectory = new SolidDirectoryQuery(getContext());
         sdirectory.getStorage().register(this);
 
-        openDir();
+        openDir(sdirectory.getValueAsFile());
     }
 
 
@@ -34,39 +35,31 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
     @Override
     public void onSharedPreferenceChanged(SharedPreferences sp, String key) {
         if (sdirectory.hasKey(key)) {
-            openDir();
+            openDir(sdirectory.getValueAsFile());
         }
     }
 
 
 
-    private void openDir() {
-        AppLog.d(this, sdirectory.getValueAsString());
-        AppLog.d(this, sdirectory.getValueAsFile().toString());
+    private void openDir(Foc dir) {
+
+        AppLog.d(this, dir.getPathName());
 
-        if (isDirReadable()) {
+        if (dir.canRead()) {
+            open(dir);
 
-            open();
         } else {
-            logNoAccess();
+            AFile.logErrorNoAccess(getContext(), dir);
         }
     }
 
 
-    private void logReadOnly() {
-        AppLog.e(getContext(), getDir().toString() + " is read only.*");
-    }
-
 
-    private void logNoAccess() {
-        AppLog.e(getContext(), getDir().toString() + " no access.*");
-    }
 
 
-
-    private void open() {
+    private void open(Foc dir) {
         final String dbPath =
-                SummaryConfig.getWriteableDBPath(getContext(), getDir());
+                SummaryConfig.getWriteableDBPath(getContext(), dir);
 
         try {
             openDataBase(getSContext(), dbPath);
@@ -78,22 +71,6 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
 
-    private Foc getDir() {
-        return sdirectory.getValueAsFile();
-    }
-
-
-    private boolean isDirReadable() {
-        return getDir().canRead();
-    }
-
-    private boolean isDirWriteable() {
-        return getDir().canWrite();
-    }
-
-
-
-
     private void openDataBase(ServiceContext sc, String dbPath) throws IOException, SQLiteCantOpenDatabaseException {
         database.close();
         database = new GpxDatabase(
@@ -110,20 +87,26 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
     public void deleteEntry(Foc file)  {
-        if (isDirWriteable()) {
+        Foc dir = sdirectory.getValueAsFile();
+
+        if (dir.canWrite()) {
             database.deleteEntry(file);
-            rescan();
+            rescan(dir);
         } else {
-            logReadOnly();
+            AFile.logErrorReadOnly(getContext(), dir);
         }
     }
 
 
-
     public void rescan() {
-        if (isDirReadable()) {
+        rescan(sdirectory.getValueAsFile());
+    }
+
+
+    private void rescan(Foc dir) {
+        if (dir.canRead()) {
             stopSynchronizer();
-            synchronizer = new DirectorySynchronizer(getSContext(), sdirectory.getValueAsFile());
+            synchronizer = new DirectorySynchronizer(getSContext(), dir);
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
index d8c71077..ea643ef6 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
@@ -321,16 +321,27 @@ public class DirectorySynchronizer  implements Closeable {
     private class StateLoadPreview extends State {
 
         public void start() {
+
             Foc gpxFile = FocAndroid.factory(scontext.getContext(), pendingHandle.toString());
 
             Foc previewImageFile = SummaryConfig.getWriteablePreviewFile(scontext.getContext(), gpxFile);
             GpxInformation info =
                     new GpxFileWrapper(gpxFile, pendingHandle.getGpxList());
 
-            MapsForgePreview p = new MapsForgePreview(scontext, info, previewImageFile);
 
-            setPendingPreviewGenerator(p);
-            state.ping();
+            try {
+                MapsForgePreview p = new MapsForgePreview(scontext, info, previewImageFile);
+
+                setPendingPreviewGenerator(p);
+                state.ping();
+
+            } catch (Exception e) {
+                AppLog.d(this, e.toString());
+
+                AppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DB_SYNC_CHANGED);
+                setState(new StateLoadNextGpx());
+            }
+
 
 
         }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
index 3321da87..34c79ed0 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
@@ -4,6 +4,7 @@ import android.database.Cursor;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
 
 public class GpxInformationDbEntry extends GpxInformation {
@@ -24,7 +25,9 @@ public class GpxInformationDbEntry extends GpxInformation {
 
     @Override
     public String getPath() {
-        return parent.child(getName()).toString();
+        String result =  parent.child(getName()).toString();
+        AppLog.d(this, result);
+        return result;
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
index e4be5384..2917dc0f 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
@@ -8,16 +8,16 @@ import ch.bailu.simpleio.foc.Foc;
 
 public class AFile extends JFile {
     public static void logErrorExists(Context c, Foc f) {
-        AppLog.e(c, f.toString() + c.getString(R.string.file_exists));
+        AppLog.e(c, f.getPathName() + c.getString(R.string.file_exists));
     }
 
 
     public static void logErrorReadOnly(Context c, Foc f) {
-        AppLog.e(c, f.toString() + " is read only.*");
+        AppLog.e(c, f.getPathName() + " is read only.*");
     }
 
     public static void logErrorNoAccess(Context c, Foc f) {
-        AppLog.e(c, f.toString() + " no access.*");
+        AppLog.e(c, f.getPathName() + " no access.*");
     }
 
 
@@ -29,7 +29,7 @@ public class AFile extends JFile {
             msg = " is read only.*";
         }
 
-        AppLog.i(c, f.toString() + msg);
+        AppLog.i(c, f.getPathName() + msg);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java b/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
index b9e46d9e..173dc930 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
@@ -145,9 +145,7 @@ public class AndroidVolumes {
     }
 
     public void askForPermission(Activity c, Foc f) {
-        AFile.logInfoAcess(c,f);
-
-        if (Build.VERSION.SDK_INT >= 24) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             askForPermissionSDK24(c, f);
         }
     }
@@ -194,26 +192,4 @@ public class AndroidVolumes {
         }
     }
 
-
-    private static final String PROVIDER_PART =
-            "content://com.android.externalstorage.documents/tree/";
-
-    public Foc toScopedContentHack(Context c, Foc file) {
-        String volPart = volumePathFromFile(file);
-
-        if (volPart != null) {
-            String docPart = file.toString().replace(volPart, "");
-
-            if (docPart != null) {
-
-                String volName = new File(volPart).getName();
-
-                if (volName != null) {
-                    return FocAndroid.factory(c, PROVIDER_PART + volName + docPart);
-                }
-            }
-        }
-
-        return null;
-    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
index 3285b6d1..cfe23537 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentData.java
@@ -3,6 +3,8 @@ package ch.bailu.aat.util.fs.foc;
 import android.database.Cursor;
 import android.provider.DocumentsContract.Document;
 
+import ch.bailu.aat.util.ui.AppLog;
+
 
 public class DocumentData  {
     final public String documentId;
@@ -35,6 +37,8 @@ public class DocumentData  {
 
         if (mimeType.equals(Document.MIME_TYPE_DIR)) type = FocContent.TREE;
         else type = FocContent.DOCUMENT;
+
+        log();
     }
 
     @Override
@@ -42,4 +46,9 @@ public class DocumentData  {
         return documentId;
     }
 
+
+    public void log() {
+        AppLog.d(this, documentId);
+        AppLog.d(this, mimeType);
+    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java
new file mode 100644
index 00000000..2a9f4188
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/DocumentId.java
@@ -0,0 +1,51 @@
+package ch.bailu.aat.util.fs.foc;
+
+public class DocumentId {
+    final private String documentId;
+
+    public DocumentId(String did) {
+        documentId = did;
+    }
+
+    @Override
+    public String toString() {
+        return documentId;
+    }
+
+    public DocumentId parent() {
+        int lastIndex = documentId.length();
+        while (lastIndex > 0) {
+            lastIndex--;
+            if (documentId.charAt(lastIndex) == '/' || documentId.charAt(lastIndex) == ':')
+                return new DocumentId(documentId.substring(0, lastIndex));
+        }
+        return this;
+    }
+
+
+    public DocumentId child(String child) {
+        if (child.length() == 0)
+            return this;
+
+        if (child.charAt(0) == '/')
+            return new DocumentId(documentId + child);
+
+        else
+            return new DocumentId(documentId + "/" + child);
+    }
+
+
+    public String getName() {
+        int beginIndex = documentId.length()-1;
+
+        while (beginIndex > 0) {
+            beginIndex--;
+
+            if (documentId.charAt(beginIndex) == '/' || documentId.charAt(beginIndex) == ':') {
+                return documentId.substring(beginIndex+1);
+            }
+        }
+
+        return documentId;
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
index 16d2f15a..a85ffde2 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
@@ -1,16 +1,16 @@
 package ch.bailu.aat.util.fs.foc;
 
+import android.content.ContentResolver;
 import android.content.Context;
 import android.net.Uri;
 import android.os.Build;
-import android.provider.DocumentsContract;
 
 import java.io.File;
 import java.util.List;
 
-import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.foc.FocFile;
+import ch.bailu.simpleio.foc.FocName;
 
 public class FocAndroid {
     public static Foc factory(Context c, String id) {
@@ -18,27 +18,88 @@ public class FocAndroid {
     }
 
     public static Foc factory(Context c, Uri uri) {
-        AppLog.d(uri, "factory()");
-        AppLog.d(uri, uri.toString());
-
         String scheme = uri.getScheme();
 
-        if (scheme == null || scheme.equals("file")) {
+        Foc result = factoryFocName(scheme, uri);
+
+        if (result == null) {
+            result = factoryFocFile(scheme, uri);
+        }
+
+        if (result == null) {
+            result = factoryFocContent(scheme, uri, c.getContentResolver());
+        }
+
+        if (result == null) {
+            result = new FocUri(c.getContentResolver(), uri);
+        }
+
+        return result;
+    }
+
+    private static Foc factoryFocName(String scheme, Uri uri) {
+        String name = uri.toString();
+
+
+        if (scheme == null && (name.length() == 0 || name.charAt(0) != '/')) {
+            return new FocName(name);
+        }
+
+        return null;
+    }
+
+
+    private static Foc factoryFocFile(String scheme, Uri uri) {
+        if (scheme == null || "file".equals(scheme)) {
             return new FocFile(new File(uri.getPath()));
+        }
+
+        return null;
+    }
+
+    // [content]://[authority]/[uri type]/[document ID]/[document type]/[document ID]
+    private static Foc factoryFocContent(String scheme, Uri uri, ContentResolver r) {
+        if ("content".equals(scheme) &&
+                Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
 
-        } else if (scheme.equals("content"))  {
             List<String> segments = uri.getPathSegments();
 
-            if (segments.size() >= 1) {
-                if (segments.get(0).equals(FocContent.TREE)) {
-                    return new FocContent(c.getContentResolver(), uri, FocContent.TREE);
-                } else if (segments.get(0).equals(FocContent.DOCUMENT)) {
-                    return new FocContent(c.getContentResolver(), uri, FocContent.DOCUMENT);
-                }
 
+            if (segments.size() == 2) {
+                Uri permission = uri;
+                DocumentId documentId = new DocumentId(Uri.decode(segments.get(1)));
+
+                if (FocContent.TREE.equals(segments.get(0)))
+                    return new FocContent(r, permission, documentId, FocContent.TREE);
+                else if (FocContent.DOCUMENT.equals(segments.get(0)))
+                    return new FocContent(r, permission, documentId, FocContent.DOCUMENT);
+
+            } else if (segments.size() == 4) {
+                Uri permission =
+                        new Uri.Builder().
+                                scheme(scheme).
+                                authority(uri.getAuthority()).
+                                appendPath(segments.get(0)).
+                                appendPath(segments.get(1)).
+                                build();
+
+                DocumentId documentId = new DocumentId(Uri.decode(segments.get(3)));
+
+
+                Foc foc =  new FocContent(r, permission, documentId, FocContent.UNKNOWN);
+
+                /*
+                AppLog.d(foc, foc.getName());
+                AppLog.d(foc, foc.getPathName());
+                AppLog.d(foc, foc.getPath());
+                AppLog.d(foc, permission.toString());
+                */
+
+                return foc;
             }
-        }
 
-        return new FocUri(c.getContentResolver(), uri);
+        }
+        return null;
     }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java
index 75370426..352ae4d5 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java
@@ -68,6 +68,11 @@ public class FocAsset extends Foc {
         return asset;
     }
 
+    @Override
+    public String getPath() {
+        return asset;
+    }
+
     @Override
     public long length() {
         return 0;
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
index f81de848..b4e78f17 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
@@ -10,7 +10,6 @@ import android.provider.DocumentsContract;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.List;
 
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.simpleio.foc.Foc;
@@ -29,142 +28,125 @@ import ch.bailu.simpleio.foc.Foc;
 
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class FocContent extends Foc {
-    final static String TREE="tree";
-    final static String DOCUMENT="document";
-    final static String UNKNOWN="unknown";
+    public final static String TREE= "tree";
+    public final static String DOCUMENT="document";
+    public final static String UNKNOWN="unknown";
 
     private String type;
+    private DocumentData data = null;
 
-    final String authority;
-    final Uri tree, document, child, parent;
-    final String encodedDocumentId;
-    final String documentId;
+    private final ContentResolver resolver;
+    private final LazyUris uris;
 
-    DocumentData data;
 
-    final ContentResolver resolver;
 
-    public FocContent(ContentResolver r, Uri uri, DocumentData d) {
-        this (r,uri, d.type);
+
+    // called from parent
+    private FocContent(ContentResolver r, LazyUris u, DocumentData d) {
+        this (r, u, d.type);
         data = d;
     }
 
 
-    public FocContent(ContentResolver r, Uri uri, String t) {
+    // called from child
+    private FocContent(ContentResolver r, LazyUris u, String t) {
         resolver = r;
+        uris = u;
         type = t;
+    }
+
 
+    // called from factory
+    public FocContent(ContentResolver r, Uri per, DocumentId id , String t) {
+        type = t;
+        resolver = r;
 
-        authority = uri.getAuthority();
-        encodedDocumentId = getDocumentId(uri);
-        documentId = Uri.decode(encodedDocumentId);
+        uris = new LazyUris(per, id);
+    }
 
-        tree = DocumentsContract.buildTreeDocumentUri(authority, documentId);
-        document = DocumentsContract.buildDocumentUri(authority, documentId);
-        child = DocumentsContract.buildChildDocumentsUriUsingTree(tree, documentId);
 
-        parent = DocumentsContract.buildTreeDocumentUri(authority, getParentId(documentId));
 
 
-    }
 
-    private String getDocumentId(Uri uri) {
-        List <String> s = uri.getPathSegments();
-        if (s.size()>1) {
-            return s.get(1);
-        }
-        return "";
-    }
 
-    private String getParentId(String doc) {
-        if (doc != null) {
-            int lastIndex = doc.length();
-            while (lastIndex > 0) {
-                lastIndex--;
-                if (doc.charAt(lastIndex) == '/')
-                    return doc.substring(0, lastIndex);
-            }
+
+    @Override
+    public boolean move(Foc dest) throws IOException, SecurityException {
+        boolean ok = false;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&
+                dest instanceof FocContent) {
+            FocContent target = (FocContent) dest;
+
+            ok = target.uris.hasParent()
+                    && uris.hasParent()
+                    && (DocumentsContract.renameDocument(resolver, uris.getDocument(), target.getName()) != null)
+                    && (DocumentsContract.moveDocument(resolver, uris.getDocument(), uris.getParent(), target.uris.getParent()) != null);
+
+
         }
-        return doc;
-    }
+        return ok || super.move(dest);
 
+    }
 
     @Override
     public boolean remove() throws IOException, SecurityException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            return DocumentsContract.deleteDocument(resolver, uris.getDocument());
+        }
         return false;
     }
 
     @Override
     public boolean mkdir() {
-        return false;
+        return uris.hasParent() && DocumentsContract.createDocument(
+                resolver,
+                uris.getParent(),
+                DocumentsContract.Document.MIME_TYPE_DIR,
+                getName()) != null;
     }
 
     @Override
     public Foc parent() {
-        if (parent.equals(tree))
-            return null;
-
-        return new FocContent(resolver, parent, TREE);
-    }
-
-    @Override
-    public Foc child(String name) {
-        String u = tree.toString() + Uri.encode("/" + name);
-        return new FocContent(resolver, Uri.parse(u), UNKNOWN);
+        if (uris.hasParent()) return new FocContent(resolver, uris.parent(), TREE);
+        return null;
     }
 
 
     @Override
-    public String getName() {
-        return documentId;
+    public Foc child(String name) {
+        return new FocContent(resolver, uris.child(uris.getDocumentId().child(name)), UNKNOWN);
     }
 
 
 
-    private void querySelf() {
-        if (data != null) return;
 
-        Cursor cursor = null;
-        try {
-            cursor = resolver.query(document,null, null, null, null);
-            if (cursor != null && cursor.moveToFirst()) {
-                data = new DocumentData(cursor);
-                type = data.type;
-
-                AppLog.d(this, data.toString());
-            }
-        } catch(Exception e) {
-            data = new DocumentData(documentId);
-        }
-        if (cursor != null) cursor.close();
-    }
 
 
     @Override
     public void foreach(Execute exec) {
-
         if (isFile()) return;
 
         Cursor cursor = null;
         try {
-            cursor = resolver.query(child,null, null, null, null);
+            cursor = resolver.query(uris.getChild(),null, null, null, null);
             if (cursor != null && cursor.moveToFirst()) {
                 type = TREE;
 
                 do {
                     DocumentData data = new DocumentData(cursor);
                     AppLog.d(this, data.mimeType);
-                    Uri child=DocumentsContract.buildTreeDocumentUri(authority, data.documentId);
-                    exec.execute(new FocContent(resolver, child, data));
+                    exec.execute(new FocContent(resolver, uris.child(new DocumentId(data.documentId)), data));
 
                 } while (cursor.moveToNext());
             }
-        } catch(Exception e) {}
+        } catch(Exception e) {
+            AppLog.d(this, e.toString());
+        }
 
         if (cursor != null) cursor.close();
-
     }
 
+
     @Override
     public void foreachFile(final Execute e) {
         foreach(new Execute() {
@@ -188,11 +170,13 @@ public class FocContent extends Foc {
 
     @Override
     public boolean isDir() {
+        if (type == UNKNOWN) querySelf();
         return type == TREE;
     }
 
     @Override
     public boolean isFile() {
+        if (type == UNKNOWN) querySelf();
         return type == DOCUMENT;
     }
 
@@ -211,7 +195,6 @@ public class FocContent extends Foc {
     @Override
     public boolean canWrite() {
         querySelf();
-
         return (data.flags & DocumentsContract.Document.FLAG_SUPPORTS_WRITE) == data.flags;
     }
 
@@ -223,27 +206,68 @@ public class FocContent extends Foc {
         return data.size;
     }
 
+
     @Override
-    public String toString() {
-        if (type == DOCUMENT) return document.toString();
-        return tree.toString();
+    public String getPath() {
+        return uris.getDocument().toString();
     }
 
+
     @Override
     public long lastModified() {
-
         querySelf();
         return data.lastModified;
     }
 
 
     @Override
-    public InputStream openR() throws IOException {
-        return resolver.openInputStream(document);
+    public InputStream openR() throws IOException, SecurityException {
+        return resolver.openInputStream(uris.getDocument());
+    }
+
+    @Override
+    public OutputStream openW() throws IOException, SecurityException {
+        return resolver.openOutputStream(uris.getDocument());
+    }
+
+
+    private void querySelf() {
+        AppLog.d(this, "querySelf() " + uris.getDocumentId());
+
+        if (data != null) return;
+
+
+        Cursor cursor = null;
+        try {
+            cursor = resolver.query(uris.getDocument(),null, null, null, null);
+            if (cursor != null && cursor.moveToFirst()) {
+                data = new DocumentData(cursor);
+
+                type = data.type;
+            } else {
+                if (cursor ==  null) AppLog.d(this, "null cursor");
+                AppLog.d(this, uris.getDocument().toString());
+
+                data = new DocumentData(uris.getDocumentId().toString());
+            }
+
+        } catch(Exception e) {
+            AppLog.d(this, e.toString());
+            data = new DocumentData(uris.getDocumentId().toString());
+        }
+        Foc.close(cursor);
+    }
+
+
+    @Override
+    public String getName() {
+        return uris.getDocumentId().getName();
     }
 
     @Override
-    public OutputStream openW() throws IOException {
-        return resolver.openOutputStream(document);
+    public String getPathName() {
+        return uris.getDocumentId().toString();
     }
+
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocUri.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocUri.java
index bbd903ef..c725699d 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocUri.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocUri.java
@@ -45,7 +45,7 @@ public class FocUri extends Foc {
     }
 
     @Override
-    public String toString() {
+    public String getPath() {
         return uri.toString();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java
new file mode 100644
index 00000000..42dd3ff2
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/LazyUris.java
@@ -0,0 +1,74 @@
+package ch.bailu.aat.util.fs.foc;
+
+import android.annotation.TargetApi;
+import android.net.Uri;
+import android.os.Build;
+import android.provider.DocumentsContract;
+
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
+public class LazyUris {
+    private final Uri permission;
+
+    private Uri parent, document, child;
+
+    private final DocumentId documentId;
+    private DocumentId parentId;
+
+
+
+    public LazyUris(Uri per, DocumentId id) {
+        permission = per;
+        documentId = id;
+    }
+
+    public LazyUris parent() {
+       return new LazyUris(permission, getParentId());
+    }
+
+    public LazyUris child(DocumentId childId) {
+        LazyUris r = new LazyUris(permission, childId);
+        r.parentId = documentId;
+        r.parent = document;
+        return r;
+    }
+
+
+    public Uri getParent() {
+        if (parent == null) {
+            if (hasParent()) {
+                parent = DocumentsContract.buildDocumentUriUsingTree(permission, getParentId().toString());
+            } else {
+                parent = document;
+            }
+        }
+        return parent;
+    }
+
+
+    public Uri getChild() {
+        if (child == null) {
+            child = DocumentsContract.buildChildDocumentsUriUsingTree(permission, documentId.toString());
+        }
+        return child;
+    }
+
+    public Uri getDocument() {
+        if (document == null) {
+            document = DocumentsContract.buildDocumentUriUsingTree(permission, documentId.toString());
+        }
+        return document;
+    }
+
+    public DocumentId getParentId() {
+        if (parentId == null) parentId = documentId.parent();
+        return parentId;
+    }
+
+    public DocumentId getDocumentId() {
+        return documentId;
+    }
+
+    public boolean hasParent() {
+        return (getParentId() != getDocumentId());
+    }
+}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
index 8d4173cc..af771b17 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
@@ -123,6 +123,11 @@ public abstract class Foc {
     public abstract Foc child(String name);
     public abstract String getName();
 
+    public abstract String getPath();
+    public String getPathName() {
+        return getPath();
+    }
+
     public abstract static class Execute {
         public abstract void execute(Foc child);
     }
@@ -145,8 +150,8 @@ public abstract class Foc {
     public abstract long length();
     public abstract long lastModified();
 
-    public abstract InputStream openR() throws IOException;
-    public abstract OutputStream openW() throws IOException;
+    public abstract InputStream openR() throws IOException, SecurityException;
+    public abstract OutputStream openW() throws IOException, SecurityException;
 
     public static void close(Closeable toClose) {
         try {
@@ -158,8 +163,25 @@ public abstract class Foc {
     }
 
 
+    @Override
+    public boolean equals(Object o)  {
+        return o instanceof Foc && equals(getPath(), ((Foc) o).getPath());
+
+    }
+
+    private static boolean equals(String s1, String s2) {
+        return s1 == s2 || (s1 != null && s1.equals(s2));
+    }
+
+
+    @Override
+    public String toString() {
+        return getPath();
+    }
+
+
     @Override
     public int hashCode() {
-        return toString().hashCode();
+        return getPath().hashCode();
     }
 }
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
index 6928772f..d7186a2d 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
@@ -72,11 +72,16 @@ public class FocFile extends Foc {
 
 
     @Override
-    public String toString() {
-        return file.toString();
+    public String getPath() {
+        try {
+            return file.getCanonicalPath();
+        } catch (Exception e) {
+            return file.getPath();
+        }
     }
 
 
+
     @Override
     public void foreach(final Execute e) {
         file.listFiles(new FileFilter() {
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java
new file mode 100644
index 00000000..1e0d9d68
--- /dev/null
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocName.java
@@ -0,0 +1,104 @@
+package ch.bailu.simpleio.foc;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public class FocName extends Foc {
+
+    private final String name;
+
+    public FocName(String n) {
+        name = n;
+    }
+
+    @Override
+    public boolean remove() throws IOException, SecurityException {
+        return false;
+    }
+
+    @Override
+    public boolean mkdir() {
+        return false;
+    }
+
+    @Override
+    public Foc parent() {
+        return null;
+    }
+
+    @Override
+    public Foc child(String child_name) {
+        return new FocName(name + "/" + child_name);
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public String getPath() {
+        return name;
+    }
+
+    @Override
+    public void foreach(Execute e) {
+
+    }
+
+    @Override
+    public void foreachFile(Execute e) {
+
+    }
+
+    @Override
+    public void foreachDir(Execute e) {
+
+    }
+
+    @Override
+    public boolean isDir() {
+        return false;
+    }
+
+    @Override
+    public boolean isFile() {
+        return false;
+    }
+
+    @Override
+    public boolean exists() {
+        return false;
+    }
+
+    @Override
+    public boolean canRead() {
+        return false;
+    }
+
+    @Override
+    public boolean canWrite() {
+        return false;
+    }
+
+    @Override
+    public long length() {
+        return 0;
+    }
+
+    @Override
+    public long lastModified() {
+        return System.currentTimeMillis();
+    }
+
+    @Override
+    public InputStream openR() throws IOException, SecurityException {
+        return null;
+    }
+
+    @Override
+    public OutputStream openW() throws IOException, SecurityException {
+        return null;
+    }
+}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java b/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
index a2f64311..c9694c55 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
@@ -18,9 +18,7 @@ public class Stream implements Closeable {
     private final Reader reader;
     private int c=0;
 
-    public Stream(Foc foc) throws IOException {
-
-
+    public Stream(Foc foc) throws IOException, SecurityException {
         InputStream istream = foc.openR();
         Reader ireader = new InputStreamReader(istream, CHARSET);
         reader = new BufferedReader(ireader, BUFFER_BYTES);
