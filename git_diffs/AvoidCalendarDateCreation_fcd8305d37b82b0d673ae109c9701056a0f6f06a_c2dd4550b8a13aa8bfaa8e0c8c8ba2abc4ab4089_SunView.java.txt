diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/util/Utils.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/util/Utils.java
index c9e15e667..246c8a3d9 100644
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/util/Utils.java
+++ b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/util/Utils.java
@@ -323,28 +323,28 @@ public class Utils {
                     .calculate(new Date(), coordinate);
         }
 
-        if (prayTimes.get(PrayTime.FAJR).getInt() > clock.getInt()) {
+        if (prayTimes.get(PrayTime.FAJR).toInt() > clock.toInt()) {
             return context.getString(R.string.azan1) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.FAJR));
 
-        } else if (prayTimes.get(PrayTime.SUNRISE).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.SUNRISE).toInt() > clock.toInt()) {
             return context.getString(R.string.aftab1) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.SUNRISE));
 
-        } else if (prayTimes.get(PrayTime.DHUHR).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.DHUHR).toInt() > clock.toInt()) {
             return context.getString(R.string.azan2) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.DHUHR));
 
-        } else if (prayTimes.get(PrayTime.ASR).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.ASR).toInt() > clock.toInt()) {
             return context.getString(R.string.azan3) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.ASR));
 
-        } else if (prayTimes.get(PrayTime.SUNSET).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.SUNSET).toInt() > clock.toInt()) {
             return context.getString(R.string.aftab2) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.SUNSET));
 
-        } else if (prayTimes.get(PrayTime.MAGHRIB).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.MAGHRIB).toInt() > clock.toInt()) {
             return context.getString(R.string.azan4) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.MAGHRIB));
 
-        } else if (prayTimes.get(PrayTime.ISHA).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.ISHA).toInt() > clock.toInt()) {
             return context.getString(R.string.azan5) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.ISHA));
 
-        } else if (prayTimes.get(PrayTime.MIDNIGHT).getInt() > clock.getInt()) {
+        } else if (prayTimes.get(PrayTime.MIDNIGHT).toInt() > clock.toInt()) {
             return context.getString(R.string.aftab3) + ": " + UIUtils.getFormattedClock(prayTimes.get(PrayTime.MIDNIGHT));
 
         } else {
diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/fragment/CalendarFragment.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/fragment/CalendarFragment.java
index 4af991b1d..9608c8589 100644
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/fragment/CalendarFragment.java
+++ b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/fragment/CalendarFragment.java
@@ -41,13 +41,11 @@ import com.byagowi.persiancalendar.util.UIUtils;
 import com.byagowi.persiancalendar.util.Utils;
 import com.byagowi.persiancalendar.view.activity.MainActivity;
 import com.byagowi.persiancalendar.view.dialog.SelectDayDialog;
-import com.byagowi.persiancalendar.view.sunrisesunset.SunCalculator;
 import com.github.praytimes.Clock;
 import com.github.praytimes.Coordinate;
 import com.github.praytimes.PrayTime;
 import com.github.praytimes.PrayTimesCalculator;
 
-import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.HashSet;
@@ -141,41 +139,11 @@ public class CalendarFragment extends Fragment implements View.OnClickListener {
             Utils.startAthan(getContext(), "FAJR");
             return true;
         });
-        initTime(new SunCalculator(Utils.getCoordinate(getContext()), TimeZone.getDefault()));
 
         return binding.getRoot();
 
     }
 
-    //SunView
-    @SuppressLint("SimpleDateFormat")
-    private void initTime(SunCalculator calculator) {
-
-        binding.tvSunrise.setText(Utils.formatNumber(calculator.getOfficialSunriseForDate(Calendar.getInstance())));
-        binding.tvSunset.setText(Utils.formatNumber(calculator.getOfficialSunsetForDate(Calendar.getInstance())));
-        binding.svPlot.setSunriseSunsetCalculator(calculator);
-
-        Calendar currentCal = Calendar.getInstance();
-        currentCal.setFirstDayOfWeek(Calendar.SATURDAY);
-        int currentDay = currentCal.get(Calendar.DAY_OF_WEEK);
-
-        if (currentDay == Calendar.FRIDAY) {
-            binding.tvNextSunTime.setText(getString(R.string.is_friday) + " " + Utils.formatNumber(calculator.getOfficialSunsetForDate(Calendar.getInstance())));
-
-        } else {
-
-            Calendar nextFriday = currentCal;
-            int currentWeek = nextFriday.get(Calendar.WEEK_OF_YEAR);
-            nextFriday.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);
-            nextFriday.set(Calendar.HOUR_OF_DAY, 12);
-            nextFriday.set(Calendar.WEEK_OF_YEAR, currentWeek);
-
-            nextFriday = calculator.getOfficialSunsetCalendarForDate(nextFriday);
-            binding.tvNextSunTime.setText(UIUtils.getFormattedClock(new Clock(nextFriday)));
-
-        }
-    }
-
     public boolean firstTime = true;
 
     ViewPager.OnPageChangeListener changeListener = new ViewPager.SimpleOnPageChangeListener() {
@@ -396,13 +364,16 @@ public class CalendarFragment extends Fragment implements View.OnClickListener {
         binding.maghrib.setText(UIUtils.getFormattedClock(maghribClock));
         binding.isgha.setText(UIUtils.getFormattedClock(prayTimes.get(PrayTime.ISHA)));
         binding.midnight.setText(UIUtils.getFormattedClock(prayTimes.get(PrayTime.MIDNIGHT)));
-        binding.svLayout.setVisibility(View.VISIBLE);
+//        binding.svLayout.setVisibility(View.VISIBLE);
+        binding.svPlot.setSunriseSunsetCalculator(prayTimes);
+        binding.svPlot.startAnimate();
 
-        //if (isToday) {
-        //    binding.svLayout.setVisibility(View.VISIBLE);
-        //} else {
-        //    binding.svLayout.setVisibility(View.GONE);
-        //}
+
+        if (isToday) {
+            binding.svPlot.setVisibility(View.VISIBLE);
+        } else {
+            binding.svPlot.setVisibility(View.GONE);
+        }
     }
 
     private boolean isOwghatOpen = false;
diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SolarCalculator.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SolarCalculator.java
deleted file mode 100644
index 235ff2a84..000000000
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SolarCalculator.java
+++ /dev/null
@@ -1,281 +0,0 @@
-package com.byagowi.persiancalendar.view.sunrisesunset;
-
-import com.github.praytimes.Coordinate;
-
-import java.math.BigDecimal;
-import java.math.MathContext;
-import java.math.RoundingMode;
-import java.util.Calendar;
-import java.util.TimeZone;
-
-/**
- * @author MEHDI DIMYADI
- * MEHDIMYADI
- */
-
-public class SolarCalculator {
-    final private Coordinate coordinate;
-    final private TimeZone timeZone;
-
-    public SolarCalculator(Coordinate coordinate, TimeZone timeZone) {
-        this.coordinate = coordinate;
-        this.timeZone = timeZone;
-    }
-
-    public String computeSunriseTime(Zen solarZen, Calendar date) {
-        return getLocalTimeAsString(computeSolarEventTime(solarZen, date, true));
-    }
-
-    public Calendar computeSunriseCalendar(Zen solarZen, Calendar date) {
-        return getLocalTimeAsCalendar(computeSolarEventTime(solarZen, date, true), date);
-    }
-
-    public String computeSunsetTime(Zen solarZen, Calendar date) {
-        return getLocalTimeAsString(computeSolarEventTime(solarZen, date, false));
-    }
-
-    public Calendar computeSunsetCalendar(Zen solarZen, Calendar date) {
-        return getLocalTimeAsCalendar(computeSolarEventTime(solarZen, date, false), date);
-    }
-
-    private BigDecimal computeSolarEventTime(Zen solarZen, Calendar date, boolean isSunrise) {
-        date.setTimeZone(this.timeZone);
-        BigDecimal longitudeHour = getLongitudeHour(date, isSunrise);
-
-        BigDecimal meanAnomaly = getMeanAnomaly(longitudeHour);
-        BigDecimal sunTrueLong = getSunTrueLongitude(meanAnomaly);
-        BigDecimal cosineSunLocalHour = getCosineSunLocalHour(sunTrueLong, solarZen);
-        if ((cosineSunLocalHour.doubleValue() < -1.0) || (cosineSunLocalHour.doubleValue() > 1.0)) {
-            return null;
-        }
-
-        BigDecimal sunLocalHour = getSunLocalHour(cosineSunLocalHour, isSunrise);
-        BigDecimal localMeanTime = getLocalMeanTime(sunTrueLong, longitudeHour, sunLocalHour);
-        return getLocalTime(localMeanTime, date);
-    }
-
-    private BigDecimal getBaseLongitudeHour() {
-        return divideBy(new BigDecimal(coordinate.getLongitude()), BigDecimal.valueOf(15));
-    }
-
-    private BigDecimal getLongitudeHour(Calendar date, Boolean isSunrise) {
-        int offset = 18;
-        if (isSunrise) {
-            offset = 6;
-        }
-        BigDecimal dividend = BigDecimal.valueOf(offset).subtract(getBaseLongitudeHour());
-        BigDecimal addend = divideBy(dividend, BigDecimal.valueOf(24));
-        BigDecimal longHour = getDayOfYear(date).add(addend);
-        return setScale(longHour);
-    }
-
-    private BigDecimal getMeanAnomaly(BigDecimal longitudeHour) {
-        BigDecimal meanAnomaly = multiplyBy(new BigDecimal("0.9856"), longitudeHour).subtract(new BigDecimal("3.289"));
-        return setScale(meanAnomaly);
-    }
-
-    private BigDecimal getSunTrueLongitude(BigDecimal meanAnomaly) {
-        BigDecimal sinMeanAnomaly = new BigDecimal(Math.sin(convertDegreesToRadians(meanAnomaly).doubleValue()));
-        BigDecimal sinDoubleMeanAnomaly = new BigDecimal(Math.sin(multiplyBy(convertDegreesToRadians(meanAnomaly), BigDecimal.valueOf(2))
-                .doubleValue()));
-
-        BigDecimal firstPart = meanAnomaly.add(multiplyBy(sinMeanAnomaly, new BigDecimal("1.916")));
-        BigDecimal secondPart = multiplyBy(sinDoubleMeanAnomaly, new BigDecimal("0.020")).add(new BigDecimal("282.634"));
-        BigDecimal trueLongitude = firstPart.add(secondPart);
-
-        if (trueLongitude.doubleValue() > 360) {
-            trueLongitude = trueLongitude.subtract(BigDecimal.valueOf(360));
-        }
-        return setScale(trueLongitude);
-    }
-
-    private BigDecimal getRightAscension(BigDecimal sunTrueLong) {
-        BigDecimal tanL = new BigDecimal(Math.tan(convertDegreesToRadians(sunTrueLong).doubleValue()));
-
-        BigDecimal innerParent = multiplyBy(convertRadiansToDegrees(tanL), new BigDecimal("0.91764"));
-        BigDecimal rightAscension = new BigDecimal(Math.atan(convertDegreesToRadians(innerParent).doubleValue()));
-        rightAscension = setScale(convertRadiansToDegrees(rightAscension));
-
-        if (rightAscension.doubleValue() < 0) {
-            rightAscension = rightAscension.add(BigDecimal.valueOf(360));
-        } else if (rightAscension.doubleValue() > 360) {
-            rightAscension = rightAscension.subtract(BigDecimal.valueOf(360));
-        }
-
-        BigDecimal ninety = BigDecimal.valueOf(90);
-        BigDecimal longitudeQuadrant = sunTrueLong.divide(ninety, 0, RoundingMode.FLOOR);
-        longitudeQuadrant = longitudeQuadrant.multiply(ninety);
-
-        BigDecimal rightAscensionQuadrant = rightAscension.divide(ninety, 0, RoundingMode.FLOOR);
-        rightAscensionQuadrant = rightAscensionQuadrant.multiply(ninety);
-
-        BigDecimal agenda = longitudeQuadrant.subtract(rightAscensionQuadrant);
-        return divideBy(rightAscension.add(agenda), BigDecimal.valueOf(15));
-    }
-
-    private BigDecimal getCosineSunLocalHour(BigDecimal sunTrueLong, Zen zen) {
-        BigDecimal sinSunDeclination = getSinOfSunDeclination(sunTrueLong);
-        BigDecimal cosineSunDeclination = getCosineOfSunDeclination(sinSunDeclination);
-
-        BigDecimal zenithInRads = convertDegreesToRadians(zen.degrees());
-        BigDecimal cosineZenith = BigDecimal.valueOf(Math.cos(zenithInRads.doubleValue()));
-        BigDecimal sinLatitude = BigDecimal.valueOf(Math.sin(convertDegreesToRadians(new BigDecimal(coordinate.getLatitude())).doubleValue()));
-        BigDecimal cosLatitude = BigDecimal.valueOf(Math.cos(convertDegreesToRadians(new BigDecimal(coordinate.getLatitude())).doubleValue()));
-
-        BigDecimal sinDeclinationTimesSinLat = sinSunDeclination.multiply(sinLatitude);
-        BigDecimal dividend = cosineZenith.subtract(sinDeclinationTimesSinLat);
-        BigDecimal divisor = cosineSunDeclination.multiply(cosLatitude);
-
-        return setScale(divideBy(dividend, divisor));
-    }
-
-    private BigDecimal getSinOfSunDeclination(BigDecimal sunTrueLong) {
-        BigDecimal sinTrueLongitude = BigDecimal.valueOf(Math.sin(convertDegreesToRadians(sunTrueLong).doubleValue()));
-        BigDecimal sinOfDeclination = sinTrueLongitude.multiply(new BigDecimal("0.39782"));
-        return setScale(sinOfDeclination);
-    }
-
-    private BigDecimal getCosineOfSunDeclination(BigDecimal sinSunDeclination) {
-        BigDecimal arcSinOfSinDeclination = BigDecimal.valueOf(Math.asin(sinSunDeclination.doubleValue()));
-        BigDecimal cosDeclination = BigDecimal.valueOf(Math.cos(arcSinOfSinDeclination.doubleValue()));
-        return setScale(cosDeclination);
-    }
-
-    private BigDecimal getSunLocalHour(BigDecimal cosineSunLocalHour, Boolean isSunrise) {
-        BigDecimal arcCosineOfCosineHourAngle = getArcCosineFor(cosineSunLocalHour);
-        BigDecimal localHour = convertRadiansToDegrees(arcCosineOfCosineHourAngle);
-        if (isSunrise) {
-            localHour = BigDecimal.valueOf(360).subtract(localHour);
-        }
-        return divideBy(localHour, BigDecimal.valueOf(15));
-    }
-
-    private BigDecimal getLocalMeanTime(BigDecimal sunTrueLong, BigDecimal longitudeHour, BigDecimal sunLocalHour) {
-        BigDecimal rightAscension = this.getRightAscension(sunTrueLong);
-        BigDecimal innerParent = longitudeHour.multiply(new BigDecimal("0.06571"));
-        BigDecimal localMeanTime = sunLocalHour.add(rightAscension).subtract(innerParent);
-        localMeanTime = localMeanTime.subtract(new BigDecimal("6.622"));
-
-        if (localMeanTime.doubleValue() < 0) {
-            localMeanTime = localMeanTime.add(BigDecimal.valueOf(24));
-        } else if (localMeanTime.doubleValue() > 24) {
-            localMeanTime = localMeanTime.subtract(BigDecimal.valueOf(24));
-        }
-        return setScale(localMeanTime);
-    }
-
-    private BigDecimal getLocalTime(BigDecimal localMeanTime, Calendar date) {
-        BigDecimal utcTime = localMeanTime.subtract(getBaseLongitudeHour());
-        BigDecimal utcOffSet = getUTCOffSet(date);
-        BigDecimal utcOffSetTime = utcTime.add(utcOffSet);
-        return adjustForDST(utcOffSetTime, date);
-    }
-
-    private BigDecimal adjustForDST(BigDecimal localMeanTime, Calendar date) {
-        BigDecimal localTime = localMeanTime;
-        if (timeZone.inDaylightTime(date.getTime())) {
-            localTime = localTime.add(BigDecimal.ONE);
-        }
-        if (localTime.doubleValue() > 24.0) {
-            localTime = localTime.subtract(BigDecimal.valueOf(24));
-        }
-        return localTime;
-    }
-
-    private String getLocalTimeAsString(BigDecimal localTimeParam) {
-        if (localTimeParam == null) {
-            return "99:99";
-        }
-
-        BigDecimal localTime = localTimeParam;
-        if (localTime.compareTo(BigDecimal.ZERO) < 0) {
-            localTime = localTime.add(BigDecimal.valueOf(24.0D));
-        }
-        String[] timeComponents = localTime.toPlainString().split("\\.");
-        int hour = Integer.parseInt(timeComponents[0]);
-
-        BigDecimal minutes = new BigDecimal("0." + timeComponents[1]);
-        minutes = minutes.multiply(BigDecimal.valueOf(60)).setScale(0, RoundingMode.HALF_EVEN);
-        if (minutes.intValue() == 60) {
-            minutes = BigDecimal.ZERO;
-            hour += 1;
-        }
-        if (hour == 24) {
-            hour = 0;
-        }
-
-        String minuteString = minutes.intValue() < 10 ? "0" + minutes.toPlainString() : minutes.toPlainString();
-        String hourString = (hour < 10) ? "0" + String.valueOf(hour) : String.valueOf(hour);
-        return hourString + ":" + minuteString;
-    }
-
-    private Calendar getLocalTimeAsCalendar(BigDecimal localTimeParam, Calendar date) {
-        if (localTimeParam == null) {
-            return null;
-        }
-
-        // Create a clone of the input calendar so we get locale/timezone information.
-        Calendar resultTime = (Calendar) date.clone();
-
-        BigDecimal localTime = localTimeParam;
-        if (localTime.compareTo(BigDecimal.ZERO) < 0) {
-            localTime = localTime.add(BigDecimal.valueOf(24.0D));
-            resultTime.add(Calendar.HOUR_OF_DAY, -24);
-        }
-        String[] timeComponents = localTime.toPlainString().split("\\.");
-        int hour = Integer.parseInt(timeComponents[0]);
-
-        BigDecimal minutes = new BigDecimal("0." + timeComponents[1]);
-        minutes = minutes.multiply(BigDecimal.valueOf(60)).setScale(0, RoundingMode.HALF_EVEN);
-        if (minutes.intValue() == 60) {
-            minutes = BigDecimal.ZERO;
-            hour += 1;
-        }
-        if (hour == 24) {
-            hour = 0;
-        }
-
-        // Set the local time
-        resultTime.set(Calendar.HOUR_OF_DAY, hour);
-        resultTime.set(Calendar.MINUTE, minutes.intValue());
-        resultTime.set(Calendar.SECOND, 0);
-        resultTime.set(Calendar.MILLISECOND, 0);
-        resultTime.setTimeZone(date.getTimeZone());
-
-        return resultTime;
-    }
-
-    private BigDecimal getDayOfYear(Calendar date) {
-        return new BigDecimal(date.get(Calendar.DAY_OF_YEAR));
-    }
-
-    private BigDecimal getUTCOffSet(Calendar date) {
-        BigDecimal offSetInMillis = new BigDecimal(date.get(Calendar.ZONE_OFFSET));
-        return offSetInMillis.divide(new BigDecimal(3600000), new MathContext(2));
-    }
-
-    private BigDecimal getArcCosineFor(BigDecimal radians) {
-        BigDecimal arcCosine = BigDecimal.valueOf(Math.acos(radians.doubleValue()));
-        return setScale(arcCosine);
-    }
-
-    private BigDecimal convertRadiansToDegrees(BigDecimal radians) {
-        return multiplyBy(radians, new BigDecimal(180 / Math.PI));
-    }
-
-    private BigDecimal convertDegreesToRadians(BigDecimal degrees) {
-        return multiplyBy(degrees, BigDecimal.valueOf(Math.PI / 180.0));
-    }
-
-    private BigDecimal multiplyBy(BigDecimal multiplicand, BigDecimal multiplier) {
-        return setScale(multiplicand.multiply(multiplier));
-    }
-
-    private BigDecimal divideBy(BigDecimal dividend, BigDecimal divisor) {
-        return dividend.divide(divisor, 4, RoundingMode.HALF_EVEN);
-    }
-
-    private BigDecimal setScale(BigDecimal number) {
-        return number.setScale(4, RoundingMode.HALF_EVEN);
-    }
-}
diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunCalculator.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunCalculator.java
deleted file mode 100644
index f5d605d67..000000000
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunCalculator.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.byagowi.persiancalendar.view.sunrisesunset;
-
-import com.github.praytimes.Coordinate;
-
-import java.util.Calendar;
-import java.util.TimeZone;
-
-/**
- * @author MEHDI DIMYADI
- * MEHDIMYADI
- */
-
-public class SunCalculator {
-
-    private SolarCalculator calculator;
-
-    public SunCalculator(Coordinate coordinate, TimeZone timeZone) {
-        this.calculator = new SolarCalculator(coordinate, timeZone);
-    }
-
-    public String getOfficialSunriseForDate(Calendar date) {
-        return calculator.computeSunriseTime(Zen.OFFICIAL, date);
-    }
-
-    public Calendar getOfficialSunriseCalendarForDate(Calendar date) {
-        return calculator.computeSunriseCalendar(Zen.OFFICIAL, date);
-    }
-
-    public String getOfficialSunsetForDate(Calendar date) {
-        return calculator.computeSunsetTime(Zen.OFFICIAL, date);
-    }
-
-    public Calendar getOfficialSunsetCalendarForDate(Calendar date) {
-        return calculator.computeSunsetCalendar(Zen.OFFICIAL, date);
-    }
-
-}
diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunView.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunView.java
index 8f1288793..9e5e6bb87 100644
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunView.java
+++ b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/SunView.java
@@ -1,5 +1,6 @@
 package com.byagowi.persiancalendar.view.sunrisesunset;
 
+import android.animation.ObjectAnimator;
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.TypedArray;
@@ -12,10 +13,15 @@ import android.graphics.Region;
 import android.os.Build;
 import android.util.AttributeSet;
 import android.view.View;
+import android.view.animation.DecelerateInterpolator;
 
 import com.byagowi.persiancalendar.R;
+import com.github.praytimes.Clock;
+import com.github.praytimes.PrayTime;
 
 import java.util.Calendar;
+import java.util.Locale;
+import java.util.Map;
 
 import androidx.core.content.ContextCompat;
 
@@ -45,7 +51,7 @@ public class SunView extends View {
     Path nightPath;
     double segmentByPixel;
 
-    SunCalculator mSSCalculator;
+    Map<PrayTime, Clock> prayTime;
 
     public SunView(Context context) {
         super(context);
@@ -128,12 +134,18 @@ public class SunView extends View {
         nightPath.close();
     }
 
+    float current = 0;
+
+    @androidx.annotation.Keep
+    public void setRatio(float ratio) {
+        current = ratio;
+        postInvalidate();
+    }
+
     @Override
     protected void onDraw(Canvas canvas) {
         super.onDraw(canvas);
 
-        float current = getCurrentTime();
-
         mPaint.setStyle(Paint.Style.FILL);
 
         // draw fill of day
@@ -179,43 +191,45 @@ public class SunView extends View {
         return height - (height * (float) cos) + (height * 0.1f);
     }
 
-    public void setSunriseSunsetCalculator(SunCalculator calculator) {
-        this.mSSCalculator = calculator;
+    public void setSunriseSunsetCalculator(Map<PrayTime, Clock> prayTime) {
+        this.prayTime = prayTime;
         postInvalidate();
     }
 
-    private float getCurrentTime() {
-        if (mSSCalculator == null)
-            return 0;
-
-        Calendar cCurrent = Calendar.getInstance();
-        Calendar cSunrise = mSSCalculator.getOfficialSunriseCalendarForDate(cCurrent);
-        Calendar cSunset = mSSCalculator.getOfficialSunsetCalendarForDate(cCurrent);
-
-        long sunrise = cSunrise.getTimeInMillis();
-        long sunset = cSunset.getTimeInMillis();
-
-        long noon = sunrise + ((sunset - sunrise) / 2);
-        long start = noon - (12 * 60 * 60 * 1000);
-
-        // recalculate from cero
-        sunrise = sunrise - start;
-        noon = noon - start;
-        sunset = sunset - start;
-        long end = noon + (12 * 60 * 60 * 1000);
-
-        long current = cCurrent.getTimeInMillis() - start;
-
-        float c = 0;
-
-        if (current <= sunrise) {
-            c = ((float) current / sunrise) * 0.17f;
-        } else if (current <= sunset) {
-            c = (((float) (current - sunrise) / (sunset - sunrise)) * 0.66f) + 0.17f;
-        } else if (current <= end) {
-            c = (((float) (current - sunset) / (end - sunset)) * 0.17f) + 0.17f + 0.66f;
-        }
-
-        return c;
+    private final float FULL_DAY = new Clock(24, 0).toInt();
+    private final float HALF_DAY = new Clock(12, 0).toInt();
+
+    public void startAnimate() {
+        if (prayTime == null)
+            return;
+//
+//        int sunset = prayTime.get(PrayTime.SUNSET).toInt();
+//        if (midnight < HALF_DAY) midnight += FULL_DAY;
+//        int sunrise = prayTime.get(PrayTime.SUNRISE).toInt();
+//
+//        // recalculate from cero
+//        int noon = prayTime.get(PrayTime.DHUHR).toInt();
+//        int end = noon + new Clock(24, 0).toInt() / 2;
+//
+//
+//        float c = 0;
+
+//        if (current <= sunrise) {
+//            c = ((float) current / sunrise) * 0.17f;
+//        } else if (current <= sunset) {
+//            c = (((float) (current - sunrise) / (sunset - sunrise)) * 0.66f) + 0.17f;
+//        } else if (current <= end) {
+//            c = (((float) (current - sunset) / (end - sunset)) * 0.17f) + 0.17f + 0.66f;
+//        }
+
+        float midnight = prayTime.get(PrayTime.MIDNIGHT).toInt();
+//        if (midnight > HALF_DAY) midnight = FULL_DAY - midnight;
+        float current = new Clock(Calendar.getInstance(Locale.getDefault())).toInt();
+        float ratio = (current - midnight) / FULL_DAY;
+
+        ObjectAnimator animator = ObjectAnimator.ofFloat(this, "ratio", 0, ratio);
+        animator.setDuration(1500L);
+        animator.setInterpolator(new DecelerateInterpolator());
+        animator.start();
     }
 }
diff --git a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/Zen.java b/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/Zen.java
deleted file mode 100644
index b5ebec56a..000000000
--- a/PersianCalendar/src/main/java/com/byagowi/persiancalendar/view/sunrisesunset/Zen.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.byagowi.persiancalendar.view.sunrisesunset;
-
-import java.math.BigDecimal;
-
-/**
- * @author MEHDI DIMYADI
- * MEHDIMYADI
- */
-
-public class Zen {
-    private final BigDecimal degrees;
-
-    public static final Zen ASTRONOMICAL = new Zen(108);
-    public static final Zen NAUTICAL = new Zen(102);
-    public static final Zen CIVIL = new Zen(96);
-    public static final Zen OFFICIAL = new Zen(90.8333);
-
-    private Zen(double degrees) {
-        this.degrees = BigDecimal.valueOf(degrees);
-    }
-
-    public BigDecimal degrees() {
-        return degrees;
-    }
-}
diff --git a/PersianCalendar/src/main/java/com/github/praytimes/Clock.java b/PersianCalendar/src/main/java/com/github/praytimes/Clock.java
index 73e62ff33..d1112f313 100644
--- a/PersianCalendar/src/main/java/com/github/praytimes/Clock.java
+++ b/PersianCalendar/src/main/java/com/github/praytimes/Clock.java
@@ -32,13 +32,9 @@ public class Clock {
         return minute;
     }
 
-    public int getInt() {
-        return (hour * 100) + minute;
-    }
-
-    public static final int MINUTES_PER_HOUR = 60;
+    private static final int MINUTES_PER_HOUR = 60;
 
-    public int transformToMinutes() {
-        return hour * MINUTES_PER_HOUR + minute;
+    public int toInt() {
+        return (hour * MINUTES_PER_HOUR + minute);
     }
 }
\ No newline at end of file
