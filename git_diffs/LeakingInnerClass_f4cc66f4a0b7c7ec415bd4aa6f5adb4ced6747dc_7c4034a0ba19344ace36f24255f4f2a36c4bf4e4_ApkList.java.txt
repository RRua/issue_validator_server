diff --git a/src/axp/tool/apkextractor/ApkList.java b/src/axp/tool/apkextractor/ApkList.java
deleted file mode 100644
index e49c0c6..0000000
--- a/src/axp/tool/apkextractor/ApkList.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package axp.tool.apkextractor;
-
-import android.app.Activity;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.graphics.drawable.Drawable;
-import android.os.Handler;
-import android.support.v7.widget.RecyclerView;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-
-public class ApkList extends RecyclerView.Adapter<ApkList.ViewHolder> {
-	private ArrayList<ApplicationInfo> list            = new ArrayList<ApplicationInfo>();
-	private ExecutorService            executorService = Executors.newFixedThreadPool(5);
-	private Handler                    handler         = new Handler();
-	public       Activity       mActivity;
-	public final PackageManager pm;
-
-	private Map<String, String>   cache_appName = Collections.synchronizedMap(new LinkedHashMap<String, String>(10, 1.5f, true));
-	private Map<String, Drawable> cache_appIcon = Collections.synchronizedMap(new LinkedHashMap<String, Drawable>(10, 1.5f, true));
-
-	public ApkList(Activity activity) {
-		this.pm = activity.getPackageManager();
-		mActivity = activity;
-	}
-
-	class InfoLoader implements Runnable {
-		private       ViewHolder      viewHolder;
-		private       ApplicationInfo applicationInfo;
-		final private PackageManager  packageManager;
-
-		public InfoLoader(final PackageManager pm, ViewHolder h, ApplicationInfo info) {
-			packageManager = pm;
-			viewHolder = h;
-			applicationInfo = info;
-		}
-
-		@Override
-		public void run() {
-			boolean first = true;
-			do {
-				try {
-					final String appName = (String)applicationInfo.loadLabel(packageManager);
-					final Drawable icon = applicationInfo.loadIcon(packageManager);
-					cache_appName.put(applicationInfo.packageName, appName);
-					cache_appIcon.put(applicationInfo.packageName, icon);
-					handler.post(new Runnable() {
-						@Override
-						public void run() {
-							viewHolder.txtAppName.setText(appName);
-							viewHolder.imgIcon.setImageDrawable(icon);
-						}
-					});
-
-
-				} catch (OutOfMemoryError ex) {
-					cache_appIcon.clear();
-					cache_appName.clear();
-					if (first) {
-						first = false;
-						continue;
-					}
-				}
-				break;
-			} while (true);
-		}
-	}
-
-	static class ViewHolder extends RecyclerView.ViewHolder implements OnClickListener {
-		public  TextView  txtPackageName;
-		public  ImageView imgIcon;
-		public  TextView  txtAppName;
-		private ApkList   adapter;
-
-		public ViewHolder(View v, ApkList adapter) {
-			super(v);
-			this.adapter = adapter;
-			txtPackageName = (TextView)v.findViewById(R.id.txtPackageName);
-			imgIcon = (ImageView)v.findViewById(R.id.imgIcon);
-			txtAppName = (TextView)v.findViewById(R.id.txtAppName);
-			v.setOnClickListener(this);
-		}
-
-		@Override
-		public void onClick(View v) {
-			ApplicationInfo item = adapter.getItem(getPosition());
-			new Extractor(adapter.mActivity).extract(item);
-		}
-	}
-
-	@Override
-	public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
-		return new ViewHolder(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.list_item, viewGroup, false), this);
-	}
-
-	@Override
-	public void onBindViewHolder(ViewHolder holder, int i) {
-		ApplicationInfo item = list.get(i);
-		holder.txtPackageName.setText(item.packageName);
-		if (cache_appIcon.containsKey(item.packageName) && cache_appName.containsKey(item.packageName)) {
-			holder.txtAppName.setText(cache_appName.get(item.packageName));
-			holder.imgIcon.setImageDrawable(cache_appIcon.get(item.packageName));
-		} else {
-			holder.txtAppName.setText(item.packageName);
-			holder.imgIcon.setImageDrawable(null);
-			executorService.submit(new InfoLoader(pm, holder, item));
-		}
-	}
-
-	public ApplicationInfo getItem(int pos) {
-		return list.get(pos);
-	}
-
-	@Override
-	public int getItemCount() {
-		return list.size();
-	}
-
-	public void addItem(ApplicationInfo item) {
-		list.add(item);
-		notifyDataSetChanged();
-	}
-}
\ No newline at end of file
diff --git a/src/axp/tool/apkextractor/ApkListAdapter.java b/src/axp/tool/apkextractor/ApkListAdapter.java
new file mode 100644
index 0000000..c5a8354
--- /dev/null
+++ b/src/axp/tool/apkextractor/ApkListAdapter.java
@@ -0,0 +1,205 @@
+package axp.tool.apkextractor;
+
+import android.app.Activity;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.graphics.Color;
+import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.support.v7.widget.RecyclerView;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.style.ForegroundColorSpan;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class ApkListAdapter extends RecyclerView.Adapter<ApkListAdapter.ViewHolder> {
+	private ArrayList<ApplicationInfo> list                 = new ArrayList<ApplicationInfo>();
+	private ArrayList<ApplicationInfo> list_original        = new ArrayList<ApplicationInfo>();
+	private ExecutorService            executorServiceNames = Executors.newFixedThreadPool(3);
+	private ExecutorService            executorServiceIcons = Executors.newFixedThreadPool(3);
+	private Handler                    handler              = new Handler();
+	public       Activity       mActivity;
+	public final PackageManager packageManager;
+
+	private Map<String, String>   cache_appName = Collections.synchronizedMap(new LinkedHashMap<String, String>(10, 1.5f, true));
+	private Map<String, Drawable> cache_appIcon = Collections.synchronizedMap(new LinkedHashMap<String, Drawable>(10, 1.5f, true));
+
+	private String search_pattern;
+
+	public ApkListAdapter(Activity activity) {
+		this.packageManager = activity.getPackageManager();
+		mActivity = activity;
+	}
+
+	class AppNameLoader implements Runnable {
+		private ApplicationInfo applicationInfo;
+
+		public AppNameLoader(ApplicationInfo info) {
+			applicationInfo = info;
+		}
+
+		@Override
+		public void run() {
+			cache_appName.put(applicationInfo.packageName, (String)applicationInfo.loadLabel(packageManager));
+		}
+	}
+
+	class GuiLoader implements Runnable {
+		private ViewHolder      viewHolder;
+		private ApplicationInfo applicationInfo;
+
+		public GuiLoader(ViewHolder h, ApplicationInfo info) {
+			viewHolder = h;
+			applicationInfo = info;
+		}
+
+		@Override
+		public void run() {
+			boolean first = true;
+			do {
+				try {
+					final String appName = cache_appName.containsKey(applicationInfo.packageName)
+						? cache_appName.get(applicationInfo.packageName)
+						: (String)applicationInfo.loadLabel(packageManager);
+					final Drawable icon = applicationInfo.loadIcon(packageManager);
+					cache_appName.put(applicationInfo.packageName, appName);
+					cache_appIcon.put(applicationInfo.packageName, icon);
+					handler.post(new Runnable() {
+						@Override
+						public void run() {
+							viewHolder.setAppName(appName, search_pattern);
+							viewHolder.imgIcon.setImageDrawable(icon);
+						}
+					});
+
+
+				} catch (OutOfMemoryError ex) {
+					cache_appIcon.clear();
+					cache_appName.clear();
+					if (first) {
+						first = false;
+						continue;
+					}
+				}
+				break;
+			} while (true);
+		}
+	}
+
+	static class ViewHolder extends RecyclerView.ViewHolder implements OnClickListener {
+		private ApkListAdapter adapter;
+		private TextView       txtPackageName;
+		private TextView       txtAppName;
+		public  ImageView      imgIcon;
+
+		public ViewHolder(View v, ApkListAdapter adapter) {
+			super(v);
+			this.adapter = adapter;
+			txtPackageName = (TextView)v.findViewById(R.id.txtPackageName);
+			imgIcon = (ImageView)v.findViewById(R.id.imgIcon);
+			txtAppName = (TextView)v.findViewById(R.id.txtAppName);
+			v.setOnClickListener(this);
+		}
+
+		@Override
+		public void onClick(View v) {
+			ApplicationInfo item = adapter.getItem(getPosition());
+			new Extractor(adapter.mActivity).extract(item);
+		}
+
+		public void setAppName(String name, String highlight) {
+			setAndHighlight(txtAppName, name, highlight);
+		}
+
+		public void setPackageName(String name, String highlight) {
+			setAndHighlight(txtPackageName, name, highlight);
+		}
+
+		private void setAndHighlight(TextView view, String value, String pattern) {
+			view.setText(value);
+			if (pattern == null || pattern.isEmpty()) return;// nothing to highlight
+
+			value = value.toLowerCase();
+			for (int offset = 0, index = value.indexOf(pattern, offset); index >= 0 && offset < value.length(); index = value.indexOf(pattern, offset)) {
+				Spannable span = new SpannableString(view.getText());
+				span.setSpan(new ForegroundColorSpan(Color.BLUE), index, index + pattern.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
+				view.setText(span);
+				offset += index + pattern.length();
+			}
+		}
+	}
+
+	@Override
+	public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
+		return new ViewHolder(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.list_item, viewGroup, false), this);
+	}
+
+	@Override
+	public void onBindViewHolder(ViewHolder holder, int i) {
+		ApplicationInfo item = list.get(i);
+		holder.setPackageName(item.packageName, search_pattern);
+		if (cache_appIcon.containsKey(item.packageName) && cache_appName.containsKey(item.packageName)) {
+			holder.setAppName(cache_appName.get(item.packageName), search_pattern);
+			holder.imgIcon.setImageDrawable(cache_appIcon.get(item.packageName));
+		} else {
+			holder.setAppName(item.packageName, search_pattern);
+			holder.imgIcon.setImageDrawable(null);
+			executorServiceIcons.submit(new GuiLoader(holder, item));
+		}
+	}
+
+	public ApplicationInfo getItem(int pos) {
+		return list.get(pos);
+	}
+
+	@Override
+	public int getItemCount() {
+		return list.size();
+	}
+
+	public void addItem(ApplicationInfo item) {
+		executorServiceNames.submit(new AppNameLoader(item));
+		list_original.add(item);
+		filterListByPattern();
+		notifyDataSetChanged();
+	}
+
+	public void setSearchPattern(String pattern) {
+		search_pattern = pattern.toLowerCase();
+		filterListByPattern();
+		this.notifyDataSetChanged();
+	}
+
+	private void filterListByPattern() {
+		list.clear();
+		for (ApplicationInfo info : list_original) {
+			boolean add = true;
+			do {
+				if (search_pattern == null || search_pattern.isEmpty()) {
+					break;// empty search pattern: add everything
+				}
+				if (info.packageName.toLowerCase().contains(search_pattern)) {
+					break;// search in package name
+				}
+				if (cache_appName.containsKey(info.packageName) && cache_appName.get(info.packageName).toLowerCase().contains(search_pattern)) {
+					break;// search in application name
+				}
+				add = false;
+			} while (false);
+
+			if (add) list.add(info);
+		}
+	}
+}
\ No newline at end of file
diff --git a/src/axp/tool/apkextractor/MainActivity.java b/src/axp/tool/apkextractor/MainActivity.java
index 73a7529..fcb945c 100644
--- a/src/axp/tool/apkextractor/MainActivity.java
+++ b/src/axp/tool/apkextractor/MainActivity.java
@@ -1,19 +1,25 @@
 package axp.tool.apkextractor;
 
 import android.app.ProgressDialog;
+import android.app.SearchManager;
+import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.ActionBarActivity;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.SearchView;
 import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.View;
 
 import java.util.List;
 
 public class MainActivity extends ActionBarActivity {
-	private ApkList adapter;
+	private ApkListAdapter apkListAdapter;
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
@@ -24,15 +30,46 @@ public class MainActivity extends ActionBarActivity {
 
 		RecyclerView listView = (RecyclerView)findViewById(android.R.id.list);
 
-		adapter = new ApkList(this);
+		apkListAdapter = new ApkListAdapter(this);
 		listView.setLayoutManager(new LinearLayoutManager(this));
-		listView.setAdapter(adapter);
+		listView.setAdapter(apkListAdapter);
 
 		new Loader(this).execute();
 	}
 
 	public void addItem(ApplicationInfo item) {
-		adapter.addItem(item);
+		apkListAdapter.addItem(item);
+	}
+
+	@Override
+	public boolean onCreateOptionsMenu(Menu menu) {
+		getMenuInflater().inflate(R.menu.main, menu);
+
+		SearchManager searchManager = (SearchManager)getSystemService(Context.SEARCH_SERVICE);
+		final SearchView searchView = (SearchView) MenuItemCompat.getActionView(menu.findItem(R.id.action_search));
+		searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
+		searchView.setOnQueryTextFocusChangeListener(new View.OnFocusChangeListener() {
+			@Override
+			public void onFocusChange(View view, boolean queryTextFocused) {
+				if(!queryTextFocused && searchView.getQuery().length() < 1) {
+					getSupportActionBar().collapseActionView();
+				}
+			}
+		});
+		searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
+			@Override
+			public boolean onQueryTextSubmit(String s) {
+				return false;
+			}
+
+			@Override
+			public boolean onQueryTextChange(String s) {
+				apkListAdapter.setSearchPattern(s);
+				return true;
+			}
+		});
+
+		return super.onCreateOptionsMenu(menu);
 	}
 
 	class Loader extends AsyncTask<Void, ApplicationInfo, Void> {
@@ -40,19 +77,14 @@ public class MainActivity extends ActionBarActivity {
 		MainActivity   mainActivity;
 
 		public Loader(MainActivity a) {
-			dialog = ProgressDialog.show(a, "Loading", "Loading list of installed applications...");
+			dialog = ProgressDialog.show(a, getString(R.string.dlg_loading_title), getString(R.string.dlg_loading_body));
 			mainActivity = a;
 		}
 
 		@Override
 		protected Void doInBackground(Void... params) {
-			final PackageManager pm = getPackageManager();
-
-			List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
-
+			List<ApplicationInfo> packages = getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
 			for (ApplicationInfo packageInfo : packages) {
-				//Log.d(TAG, "Source dir : " + packageInfo.sourceDir);
-				//Log.d(TAG, "Launch Activity :" + pm.getLaunchIntentForPackage(packageInfo.packageName));
 				publishProgress(packageInfo);
 			}
 			return null;
