diff --git a/src/com/better/alarm/presenter/AlarmKlaxonReceiver.java b/src/com/better/alarm/presenter/AlarmKlaxonReceiver.java
deleted file mode 100644
index 4bf14419..00000000
--- a/src/com/better/alarm/presenter/AlarmKlaxonReceiver.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2007 The Android Open Source Project
- * Copyright (C) 2012 Yuriy Kulikov yuriy.kulikov.87@gmail.com
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.better.alarm.presenter;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-
-import com.better.alarm.model.Intents;
-import com.github.androidutils.wakelock.WakeLockManager;
-
-/**
- * Dispatches intents to the KlaxonService
- */
-public class AlarmKlaxonReceiver extends BroadcastReceiver {
-
-    @Override
-    public void onReceive(final Context context, final Intent intent) {
-        int id = intent.getIntExtra(Intents.EXTRA_ID, -1);
-
-        // Dispatch intent to the service
-        Intent playAlarm = new Intent(intent.getAction());
-        playAlarm.putExtra(Intents.EXTRA_ID, id);
-        WakeLockManager.getWakeLockManager().acquirePartialWakeLock(playAlarm, "ForAlarmKlaxonService");
-        context.startService(playAlarm);
-    }
-}
diff --git a/src/com/better/alarm/presenter/AlarmKlaxonService.java b/src/com/better/alarm/presenter/KlaxonService.java
similarity index 92%
rename from src/com/better/alarm/presenter/AlarmKlaxonService.java
rename to src/com/better/alarm/presenter/KlaxonService.java
index 05e4cc2f..e671d21b 100644
--- a/src/com/better/alarm/presenter/AlarmKlaxonService.java
+++ b/src/com/better/alarm/presenter/KlaxonService.java
@@ -18,6 +18,7 @@
 package com.better.alarm.presenter;
 
 import android.app.Service;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.AssetFileDescriptor;
@@ -28,8 +29,6 @@ import android.media.MediaPlayer.OnErrorListener;
 import android.media.RingtoneManager;
 import android.net.Uri;
 import android.os.IBinder;
-import android.os.Vibrator;
-import android.preference.PreferenceManager;
 import android.telephony.PhoneStateListener;
 import android.telephony.TelephonyManager;
 
@@ -44,16 +43,25 @@ import com.github.androidutils.wakelock.WakeLockManager;
  * Manages alarms and vibe. Runs as a service so that it can continue to play if
  * another activity overrides the AlarmAlert dialog.
  */
-public class AlarmKlaxonService extends Service {
-    private static final long[] sVibratePattern = new long[] { 500, 500 };
-
+public class KlaxonService extends Service {
     private boolean mPlaying = false;
-    private Vibrator mVibrator;
     private MediaPlayer mMediaPlayer;
     private TelephonyManager mTelephonyManager;
 
     private Intent mIntent;
 
+    /**
+     * Dispatches intents to the KlaxonService
+     */
+    public static class Receiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(final Context context, final Intent intent) {
+            intent.setClass(context, KlaxonService.class);
+            WakeLockManager.getWakeLockManager().acquirePartialWakeLock(intent, "KlaxonService");
+            context.startService(intent);
+        }
+    }
+
     private final PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
         @Override
         public void onCallStateChanged(int state, String ignored) {
@@ -67,7 +75,6 @@ public class AlarmKlaxonService extends Service {
     @Override
     public void onCreate() {
         log = Logger.getDefaultLogger();
-        mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
         // Listen for incoming calls to kill the alarm.
         mTelephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);
         mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
@@ -178,15 +185,6 @@ public class AlarmKlaxonService extends Service {
                 }
             }
         }
-
-        /* Start the vibrator after everything is ok with the media player */
-        boolean shouldVibrate = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("vibrate", true);
-        if (shouldVibrate && !prealarm) {
-            mVibrator.vibrate(sVibratePattern, 0);
-        } else {
-            mVibrator.cancel();
-        }
-
         mPlaying = true;
     }
 
@@ -226,9 +224,6 @@ public class AlarmKlaxonService extends Service {
                 mMediaPlayer.release();
                 mMediaPlayer = null;
             }
-
-            // Stop vibrator
-            mVibrator.cancel();
         }
     }
 
diff --git a/src/com/better/alarm/presenter/VibrationService.java b/src/com/better/alarm/presenter/VibrationService.java
new file mode 100644
index 00000000..16afe537
--- /dev/null
+++ b/src/com/better/alarm/presenter/VibrationService.java
@@ -0,0 +1,90 @@
+package com.better.alarm.presenter;
+
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.IBinder;
+import android.os.Vibrator;
+import android.preference.PreferenceManager;
+
+import com.better.alarm.model.Intents;
+import com.github.androidutils.logger.Logger;
+import com.github.androidutils.wakelock.WakeLockManager;
+
+public class VibrationService extends Service {
+    private static final long[] sVibratePattern = new long[] { 500, 500 };
+    private Vibrator mVibrator;
+    private Logger log;
+    private Intent mIntent;
+
+    /**
+     * Dispatches intents to the KlaxonService
+     */
+    public static class Receiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(final Context context, final Intent intent) {
+            intent.setClass(context, VibrationService.class);
+            WakeLockManager.getWakeLockManager().acquirePartialWakeLock(intent, "VibrationService");
+            context.startService(intent);
+        }
+    }
+
+    @Override
+    public void onCreate() {
+        log = Logger.getDefaultLogger();
+        mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
+    }
+
+    @Override
+    public void onDestroy() {
+        stopVibration();
+        WakeLockManager.getWakeLockManager().releasePartialWakeLock(mIntent);
+        log.d("Service destroyed");
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        mIntent = intent;
+        String action = intent.getAction();
+        try {
+            if (action.equals(Intents.ALARM_ALERT_ACTION)) {
+                startVibrationIfShould();
+                return START_STICKY;
+
+            } else if (action.equals(Intents.ALARM_SNOOZE_ACTION)) {
+                stopSelf();
+                return START_NOT_STICKY;
+
+            } else if (action.equals(Intents.ALARM_DISMISS_ACTION)) {
+                stopSelf();
+                return START_NOT_STICKY;
+
+            } else {
+                log.e("unexpected intent " + intent.getAction());
+                stopSelf();
+                return START_NOT_STICKY;
+            }
+        } catch (Exception e) {
+            log.e("Something went wrong" + e.getMessage());
+            stopSelf();
+            return START_NOT_STICKY;
+        }
+    }
+
+    private void startVibrationIfShould() {
+        boolean shouldVibrate = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("vibrate", true);
+        if (shouldVibrate) {
+            mVibrator.vibrate(sVibratePattern, 0);
+        }
+    }
+
+    private void stopVibration() {
+        mVibrator.cancel();
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+}
