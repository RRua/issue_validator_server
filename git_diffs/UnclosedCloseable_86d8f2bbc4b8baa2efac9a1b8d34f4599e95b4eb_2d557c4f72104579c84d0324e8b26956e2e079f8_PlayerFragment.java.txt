diff --git a/app/src/main/java/agersant/polaris/MainActivity.kt b/app/src/main/java/agersant/polaris/MainActivity.kt
index 2191990..4a46db3 100644
--- a/app/src/main/java/agersant/polaris/MainActivity.kt
+++ b/app/src/main/java/agersant/polaris/MainActivity.kt
@@ -1,53 +1,80 @@
 package agersant.polaris
 
 import agersant.polaris.databinding.ActivityMainBinding
+import agersant.polaris.navigation.setupWithNavController
 import android.os.Bundle
 import androidx.appcompat.app.AppCompatActivity
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.observe
 import androidx.navigation.NavController
-import androidx.navigation.fragment.NavHostFragment
 import androidx.navigation.ui.AppBarConfiguration
-import androidx.navigation.ui.setupActionBarWithNavController
 import androidx.navigation.ui.setupWithNavController
-import com.google.android.material.appbar.MaterialToolbar
 
 class MainActivity : AppCompatActivity() {
 
-    companion object {
-        @JvmStatic
-        lateinit var toolbar: MaterialToolbar
-    }
-
-    private lateinit var navController: NavController
+    private lateinit var binding: ActivityMainBinding
+    private var currentController: LiveData<NavController>? = null
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
-        val binding = ActivityMainBinding.inflate(layoutInflater)
-        toolbar = binding.toolbar
+        binding = ActivityMainBinding.inflate(layoutInflater)
 
         setContentView(binding.root)
         setSupportActionBar(binding.toolbar)
+        supportActionBar?.setDisplayShowTitleEnabled(false)
 
-        val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
-        navController = navHostFragment.navController
+        if (savedInstanceState == null) {
+            setupNavigation()
+        }
+    }
 
-        val appBarConfiguration = AppBarConfiguration(
-            setOf(
-                R.id.nav_collection,
-                R.id.nav_queue,
-                R.id.nav_now_playing,
-            )
+    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
+        super.onRestoreInstanceState(savedInstanceState)
+
+        setupNavigation()
+    }
+
+    override fun onSupportNavigateUp(): Boolean {
+        return currentController?.value?.navigateUp() ?: false
+    }
+
+    fun setupNavigation() {
+        val navGraphIds = listOf(
+            R.navigation.collection,
+            R.navigation.queue,
+            R.navigation.now_playing,
+        )
+
+        val navController = binding.bottomNav.setupWithNavController(
+            navGraphIds = navGraphIds,
+            fragmentManager = supportFragmentManager,
+            containerId = R.id.nav_host_fragment,
+            intent = intent,
         )
 
-        setupActionBarWithNavController(navController, appBarConfiguration)
-        binding.bottomNav.setupWithNavController(navController)
+        navController.observe(this) { controller ->
+            val appBarConfiguration = AppBarConfiguration(
+                setOf(
+                    R.id.nav_collection,
+                    R.id.nav_queue,
+                    R.id.nav_now_playing,
+                ),
+                binding.backdropMenu,
+            )
 
-        navController.addOnDestinationChangedListener { _, _, _ ->
-            toolbar.subtitle = ""
+            binding.toolbar.setupWithNavController(controller, appBarConfiguration)
+            binding.backdropNav.setupWithNavController(controller)
+            binding.backdropMenu.setUpWith(controller, binding.toolbar)
+            controller.addOnDestinationChangedListener { _, _, _ ->
+                binding.toolbar.subtitle = ""
+            }
         }
-    }
 
-    override fun onSupportNavigateUp(): Boolean {
-        return navController.navigateUp() || super.onNavigateUp()
+        // The NavigationExtension has no way to check if the deeplink was already handled so we remove the intent after handling.
+        if (intent.hasExtra(NavController.KEY_DEEP_LINK_INTENT)) {
+            intent.removeExtra(NavController.KEY_DEEP_LINK_INTENT)
+            intent.removeExtra("android-support-nav:controller:deepLinkIds")
+        }
     }
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/agersant/polaris/PolarisPlaybackService.java b/app/src/main/java/agersant/polaris/PolarisPlaybackService.java
index 7c8aa7a..7b6923c 100644
--- a/app/src/main/java/agersant/polaris/PolarisPlaybackService.java
+++ b/app/src/main/java/agersant/polaris/PolarisPlaybackService.java
@@ -305,7 +305,7 @@ public class PolarisPlaybackService extends Service {
 
         // On tap action
         PendingIntent tapPendingIntent = new NavDeepLinkBuilder(this)
-            .setGraph(R.navigation.nav_graph)
+            .setGraph(R.navigation.now_playing)
             .setDestination(R.id.nav_now_playing)
             .createPendingIntent();
 
diff --git a/app/src/main/java/agersant/polaris/features/browse/BrowseFragment.java b/app/src/main/java/agersant/polaris/features/browse/BrowseFragment.java
index f9a5970..fc75c97 100644
--- a/app/src/main/java/agersant/polaris/features/browse/BrowseFragment.java
+++ b/app/src/main/java/agersant/polaris/features/browse/BrowseFragment.java
@@ -2,9 +2,6 @@ package agersant.polaris.features.browse;
 
 import android.os.Bundle;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ProgressBar;
@@ -24,8 +21,8 @@ import agersant.polaris.api.ItemsCallback;
 import agersant.polaris.api.remote.ServerAPI;
 import agersant.polaris.databinding.FragmentBrowseBinding;
 import androidx.annotation.NonNull;
+import androidx.appcompat.widget.Toolbar;
 import androidx.fragment.app.Fragment;
-import androidx.navigation.Navigation;
 
 
 public class BrowseFragment extends Fragment {
@@ -39,6 +36,7 @@ public class BrowseFragment extends Fragment {
     private ItemsCallback fetchCallback;
     private NavigationMode navigationMode;
     private SwipyRefreshLayout.OnRefreshListener onRefresh;
+    private Toolbar toolbar;
     private ArrayList<? extends CollectionItem> items;
     private API api;
     private ServerAPI serverAPI;
@@ -57,6 +55,7 @@ public class BrowseFragment extends Fragment {
         errorMessage = binding.browseErrorMessage;
         progressBar = binding.progressBar;
         contentHolder = binding.browseContentHolder;
+        toolbar = getActivity().findViewById(R.id.toolbar);
 
         binding.browseErrorRetry.setOnClickListener((view) -> loadContent());
 
@@ -92,17 +91,22 @@ public class BrowseFragment extends Fragment {
     }
 
     @Override
-    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_main, menu);
-    }
+    public void onResume() {
+        super.onResume();
 
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        if (item.getItemId() == R.id.action_settings) {
-            Navigation.findNavController(binding.getRoot()).navigate(R.id.nav_settings);
-            return true;
-        } else {
-            return super.onOptionsItemSelected(item);
+        switch (navigationMode) {
+            case PATH: {
+                toolbar.setTitle(R.string.collection_browse_directories);
+                break;
+            }
+            case RANDOM: {
+                toolbar.setTitle(R.string.collection_random_albums);
+                break;
+            }
+            case RECENT: {
+                toolbar.setTitle(R.string.collection_recently_added);
+                break;
+            }
         }
     }
 
diff --git a/app/src/main/java/agersant/polaris/features/browse/CollectionFragment.java b/app/src/main/java/agersant/polaris/features/browse/CollectionFragment.java
index a7b01e7..418935a 100644
--- a/app/src/main/java/agersant/polaris/features/browse/CollectionFragment.java
+++ b/app/src/main/java/agersant/polaris/features/browse/CollectionFragment.java
@@ -2,9 +2,6 @@ package agersant.polaris.features.browse;
 
 import android.os.Bundle;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -51,21 +48,6 @@ public class CollectionFragment extends Fragment {
         updateButtons();
     }
 
-    @Override
-    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_main, menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        if (item.getItemId() == R.id.action_settings) {
-            Navigation.findNavController(binding.getRoot()).navigate(R.id.nav_settings);
-            return true;
-        } else {
-            return super.onOptionsItemSelected(item);
-        }
-    }
-
     public void browseDirectories(View view) {
         Bundle args = new Bundle();
         args.putSerializable(BrowseFragment.NAVIGATION_MODE, BrowseFragment.NavigationMode.PATH);
diff --git a/app/src/main/java/agersant/polaris/features/player/PlayerFragment.java b/app/src/main/java/agersant/polaris/features/player/PlayerFragment.java
index d7aa91d..d6d8bb7 100644
--- a/app/src/main/java/agersant/polaris/features/player/PlayerFragment.java
+++ b/app/src/main/java/agersant/polaris/features/player/PlayerFragment.java
@@ -7,9 +7,6 @@ import android.content.IntentFilter;
 import android.os.Bundle;
 import android.os.Handler;
 import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
@@ -17,7 +14,6 @@ import android.widget.SeekBar;
 import android.widget.TextView;
 
 import agersant.polaris.CollectionItem;
-import agersant.polaris.MainActivity;
 import agersant.polaris.PlaybackQueue;
 import agersant.polaris.PolarisApplication;
 import agersant.polaris.PolarisPlayer;
@@ -26,8 +22,8 @@ import agersant.polaris.R;
 import agersant.polaris.api.API;
 import agersant.polaris.databinding.FragmentPlayerBinding;
 import androidx.annotation.NonNull;
+import androidx.appcompat.widget.Toolbar;
 import androidx.fragment.app.Fragment;
-import androidx.navigation.Navigation;
 
 
 public class PlayerFragment extends Fragment {
@@ -43,6 +39,7 @@ public class PlayerFragment extends Fragment {
     private Handler seekBarUpdateHandler;
     private Runnable updateSeekBar;
     private TextView buffering;
+    private Toolbar toolbar;
     private API api;
     private PolarisPlayer player;
     private PlaybackQueue playbackQueue;
@@ -124,6 +121,8 @@ public class PlayerFragment extends Fragment {
         seekBar = binding.seekBar;
         buffering = binding.buffering;
 
+        toolbar = getActivity().findViewById(R.id.toolbar);
+
         seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
             int newPosition = 0;
 
@@ -177,21 +176,6 @@ public class PlayerFragment extends Fragment {
         refresh();
     }
 
-    @Override
-    public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_main, menu);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        if (item.getItemId() == R.id.action_settings) {
-            Navigation.findNavController(binding.getRoot()).navigate(R.id.nav_settings);
-            return true;
-        } else {
-            return super.onOptionsItemSelected(item);
-        }
-    }
-
     private void refresh() {
         updateContent();
         updateControls();
@@ -247,12 +231,12 @@ public class PlayerFragment extends Fragment {
 
         String title = item.getTitle();
         if (title != null) {
-            MainActivity.getToolbar().setTitle(title);
+            toolbar.setTitle(title);
         }
 
         String artist = item.getArtist();
         if (artist != null) {
-            MainActivity.getToolbar().setSubtitle(artist);
+            toolbar.setSubtitle(artist);
         }
 
         String artworkPath = item.getArtwork();
diff --git a/app/src/main/java/agersant/polaris/features/queue/QueueFragment.java b/app/src/main/java/agersant/polaris/features/queue/QueueFragment.java
index 4782d0a..966174b 100644
--- a/app/src/main/java/agersant/polaris/features/queue/QueueFragment.java
+++ b/app/src/main/java/agersant/polaris/features/queue/QueueFragment.java
@@ -14,7 +14,6 @@ import android.view.ViewGroup;
 
 import java.util.Random;
 
-import agersant.polaris.MainActivity;
 import agersant.polaris.PlaybackQueue;
 import agersant.polaris.PolarisApplication;
 import agersant.polaris.PolarisPlayer;
@@ -24,6 +23,7 @@ import agersant.polaris.api.local.OfflineCache;
 import agersant.polaris.api.remote.DownloadQueue;
 import agersant.polaris.databinding.FragmentQueueBinding;
 import androidx.annotation.NonNull;
+import androidx.appcompat.widget.Toolbar;
 import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.DefaultItemAnimator;
 import androidx.recyclerview.widget.ItemTouchHelper;
@@ -37,6 +37,7 @@ public class QueueFragment extends Fragment {
     private BroadcastReceiver receiver;
     private View tutorial;
     private RecyclerView recyclerView;
+    private Toolbar toolbar;
     private PlaybackQueue playbackQueue;
     private PolarisPlayer player;
     private OfflineCache offlineCache;
@@ -113,6 +114,7 @@ public class QueueFragment extends Fragment {
         recyclerView.setItemAnimator(animator);
 
         tutorial = binding.queueTutorial;
+        toolbar = requireActivity().findViewById(R.id.toolbar);
 
         populate();
         updateTutorial();
@@ -151,7 +153,7 @@ public class QueueFragment extends Fragment {
 
     @Override
     public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_queue, menu);
+        inflater.inflate(R.menu.queue, menu);
         updateOrderingIcon();
     }
 
@@ -216,18 +218,18 @@ public class QueueFragment extends Fragment {
     private int getIconForOrdering(PlaybackQueue.Ordering ordering) {
         switch (ordering) {
             case REPEAT_ONE:
-                return R.drawable.ic_repeat_one_white_24dp;
+                return R.drawable.ic_repeat_one_24;
             case REPEAT_ALL:
-                return R.drawable.ic_repeat_white_24dp;
+                return R.drawable.ic_repeat_24;
             case SEQUENCE:
             default:
-                return R.drawable.ic_reorder_white_24dp;
+                return R.drawable.ic_reorder_24;
         }
     }
 
     private void updateOrderingIcon() {
         int icon = getIconForOrdering(playbackQueue.getOrdering());
-        MenuItem orderingItem = MainActivity.getToolbar().getMenu().findItem(R.id.action_ordering);
+        MenuItem orderingItem = toolbar.getMenu().findItem(R.id.action_ordering);
         if (orderingItem != null) {
             orderingItem.setIcon(icon);
         }
diff --git a/app/src/main/java/agersant/polaris/navigation/NavigationExtensions.kt b/app/src/main/java/agersant/polaris/navigation/NavigationExtensions.kt
new file mode 100644
index 0000000..3787c19
--- /dev/null
+++ b/app/src/main/java/agersant/polaris/navigation/NavigationExtensions.kt
@@ -0,0 +1,253 @@
+// https://github.com/android/architecture-components-samples/blob/master/NavigationAdvancedSample/app/src/main/java/com/example/android/navigationadvancedsample/NavigationExtensions.kt
+
+/*
+ * Copyright 2019, The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package agersant.polaris.navigation
+
+import agersant.polaris.R
+import android.content.Intent
+import android.util.SparseArray
+import androidx.core.util.forEach
+import androidx.core.util.set
+import androidx.fragment.app.FragmentManager
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.navigation.NavController
+import androidx.navigation.fragment.NavHostFragment
+import com.google.android.material.bottomnavigation.BottomNavigationView
+
+/**
+ * Manages the various graphs needed for a [BottomNavigationView].
+ *
+ * This sample is a workaround until the Navigation Component supports multiple back stacks.
+ */
+fun BottomNavigationView.setupWithNavController(
+    navGraphIds: List<Int>,
+    fragmentManager: FragmentManager,
+    containerId: Int,
+    intent: Intent
+): LiveData<NavController> {
+
+    // Map of tags
+    val graphIdToTagMap = SparseArray<String>()
+    // Result. Mutable live data with the selected controlled
+    val selectedNavController = MutableLiveData<NavController>()
+
+    var firstFragmentGraphId = 0
+
+    // First create a NavHostFragment for each NavGraph ID
+    navGraphIds.forEachIndexed { index, navGraphId ->
+        val fragmentTag = getFragmentTag(index)
+
+        // Find or create the Navigation host fragment
+        val navHostFragment = obtainNavHostFragment(
+            fragmentManager,
+            fragmentTag,
+            navGraphId,
+            containerId
+        )
+
+        // Obtain its id
+        val graphId = navHostFragment.navController.graph.id
+
+        if (index == 0) {
+            firstFragmentGraphId = graphId
+        }
+
+        // Save to the map
+        graphIdToTagMap[graphId] = fragmentTag
+
+        // Attach or detach nav host fragment depending on whether it's the selected item.
+        if (this.selectedItemId == graphId) {
+            // Update livedata with the selected graph
+            selectedNavController.value = navHostFragment.navController
+            attachNavHostFragment(fragmentManager, navHostFragment, index == 0)
+        } else {
+            detachNavHostFragment(fragmentManager, navHostFragment)
+        }
+    }
+
+    // Now connect selecting an item with swapping Fragments
+    var selectedItemTag = graphIdToTagMap[this.selectedItemId]
+    val firstFragmentTag = graphIdToTagMap[firstFragmentGraphId]
+    var isOnFirstFragment = selectedItemTag == firstFragmentTag
+
+    // When a navigation item is selected
+    setOnNavigationItemSelectedListener { item ->
+        // Don't do anything if the state is state has already been saved.
+        if (fragmentManager.isStateSaved) {
+            false
+        } else {
+            val newlySelectedItemTag = graphIdToTagMap[item.itemId]
+            if (selectedItemTag != newlySelectedItemTag) {
+                // Pop everything above the first fragment (the "fixed start destination")
+                fragmentManager.popBackStack(firstFragmentTag,
+                    FragmentManager.POP_BACK_STACK_INCLUSIVE)
+                val selectedFragment = fragmentManager.findFragmentByTag(newlySelectedItemTag)
+                    as NavHostFragment
+
+                // Exclude the first fragment tag because it's always in the back stack.
+                if (firstFragmentTag != newlySelectedItemTag) {
+                    // Commit a transaction that cleans the back stack and adds the first fragment
+                    // to it, creating the fixed started destination.
+                    fragmentManager.beginTransaction()
+                        .setCustomAnimations(
+                            R.anim.nav_default_enter_anim,
+                            R.anim.nav_default_exit_anim,
+                            R.anim.nav_default_pop_enter_anim,
+                            R.anim.nav_default_pop_exit_anim)
+                        .attach(selectedFragment)
+                        .setPrimaryNavigationFragment(selectedFragment)
+                        .apply {
+                            // Detach all other Fragments
+                            graphIdToTagMap.forEach { _, fragmentTagIter ->
+                                if (fragmentTagIter != newlySelectedItemTag) {
+                                    detach(fragmentManager.findFragmentByTag(firstFragmentTag)!!)
+                                }
+                            }
+                        }
+                        .addToBackStack(firstFragmentTag)
+                        .setReorderingAllowed(true)
+                        .commit()
+                }
+                selectedItemTag = newlySelectedItemTag
+                isOnFirstFragment = selectedItemTag == firstFragmentTag
+                selectedNavController.value = selectedFragment.navController
+                true
+            } else {
+                false
+            }
+        }
+    }
+
+    // Optional: on item reselected, pop back stack to the destination of the graph
+    setupItemReselected(graphIdToTagMap, fragmentManager)
+
+    // Handle deep link
+    setupDeepLinks(navGraphIds, fragmentManager, containerId, intent)
+
+    // Finally, ensure that we update our BottomNavigationView when the back stack changes
+    fragmentManager.addOnBackStackChangedListener {
+        if (!isOnFirstFragment && !fragmentManager.isOnBackStack(firstFragmentTag)) {
+            this.selectedItemId = firstFragmentGraphId
+        }
+
+        // Reset the graph if the currentDestination is not valid (happens when the back
+        // stack is popped after using the back button).
+        selectedNavController.value?.let { controller ->
+            if (controller.currentDestination == null) {
+                controller.navigate(controller.graph.id)
+            }
+        }
+    }
+    return selectedNavController
+}
+
+private fun BottomNavigationView.setupDeepLinks(
+    navGraphIds: List<Int>,
+    fragmentManager: FragmentManager,
+    containerId: Int,
+    intent: Intent
+) {
+    navGraphIds.forEachIndexed { index, navGraphId ->
+        val fragmentTag = getFragmentTag(index)
+
+        // Find or create the Navigation host fragment
+        val navHostFragment = obtainNavHostFragment(
+            fragmentManager,
+            fragmentTag,
+            navGraphId,
+            containerId
+        )
+        // Handle Intent
+        if (navHostFragment.navController.handleDeepLink(intent)
+            && selectedItemId != navHostFragment.navController.graph.id) {
+            this.selectedItemId = navHostFragment.navController.graph.id
+        }
+    }
+}
+
+private fun BottomNavigationView.setupItemReselected(
+    graphIdToTagMap: SparseArray<String>,
+    fragmentManager: FragmentManager
+) {
+    setOnNavigationItemReselectedListener { item ->
+        val newlySelectedItemTag = graphIdToTagMap[item.itemId]
+        val selectedFragment = fragmentManager.findFragmentByTag(newlySelectedItemTag)
+            as NavHostFragment
+        val navController = selectedFragment.navController
+        // Pop the back stack to the start destination of the current navController graph
+        navController.popBackStack(
+            navController.graph.startDestination, false
+        )
+    }
+}
+
+private fun detachNavHostFragment(
+    fragmentManager: FragmentManager,
+    navHostFragment: NavHostFragment
+) {
+    fragmentManager.beginTransaction()
+        .detach(navHostFragment)
+        .commitNow()
+}
+
+private fun attachNavHostFragment(
+    fragmentManager: FragmentManager,
+    navHostFragment: NavHostFragment,
+    isPrimaryNavFragment: Boolean
+) {
+    fragmentManager.beginTransaction()
+        .attach(navHostFragment)
+        .apply {
+            if (isPrimaryNavFragment) {
+                setPrimaryNavigationFragment(navHostFragment)
+            }
+        }
+        .commitNow()
+
+}
+
+private fun obtainNavHostFragment(
+    fragmentManager: FragmentManager,
+    fragmentTag: String,
+    navGraphId: Int,
+    containerId: Int
+): NavHostFragment {
+    // If the Nav Host fragment exists, return it
+    val existingFragment = fragmentManager.findFragmentByTag(fragmentTag) as NavHostFragment?
+    existingFragment?.let { return it }
+
+    // Otherwise, create it and return it.
+    val navHostFragment = NavHostFragment.create(navGraphId)
+    fragmentManager.beginTransaction()
+        .add(containerId, navHostFragment, fragmentTag)
+        .commitNow()
+    return navHostFragment
+}
+
+private fun FragmentManager.isOnBackStack(backStackName: String): Boolean {
+    val backStackCount = backStackEntryCount
+    for (index in 0 until backStackCount) {
+        if (getBackStackEntryAt(index).name == backStackName) {
+            return true
+        }
+    }
+    return false
+}
+
+private fun getFragmentTag(index: Int) = "bottomNavigation#$index"
diff --git a/app/src/main/java/agersant/polaris/ui/Backdrop.kt b/app/src/main/java/agersant/polaris/ui/Backdrop.kt
new file mode 100644
index 0000000..16a0830
--- /dev/null
+++ b/app/src/main/java/agersant/polaris/ui/Backdrop.kt
@@ -0,0 +1,143 @@
+package agersant.polaris.ui
+
+import agersant.polaris.R
+import android.content.Context
+import android.graphics.Outline
+import android.graphics.drawable.Drawable
+import android.util.AttributeSet
+import android.view.*
+import android.view.View
+import android.view.ViewGroup
+import android.widget.LinearLayout
+import androidx.appcompat.widget.Toolbar
+import androidx.constraintlayout.widget.ConstraintLayout
+import androidx.core.content.ContextCompat
+import androidx.customview.widget.Openable
+import androidx.dynamicanimation.animation.DynamicAnimation
+import androidx.dynamicanimation.animation.SpringAnimation
+import androidx.dynamicanimation.animation.SpringForce
+import androidx.navigation.NavController
+
+class BackdropLayout(context: Context, attrs: AttributeSet? = null) : ConstraintLayout(context, attrs) {
+
+    inner class OverlayView(context: Context) : View(context) {
+        init {
+            layoutParams = ViewGroup.LayoutParams(
+                ViewGroup.LayoutParams.MATCH_PARENT,
+                ViewGroup.LayoutParams.MATCH_PARENT,
+            )
+            alpha = 0f
+            visibility = GONE
+            z = 100f
+            background = ContextCompat.getDrawable(context, R.drawable.content_background)
+
+            setOnClickListener { backdropMenu?.close() }
+        }
+    }
+
+    private var backdropMenu: BackdropMenu? = null
+    private var outlineRadius = 0f
+    private val backdropOverlay = OverlayView(context)
+
+
+    init {
+        background = ContextCompat.getDrawable(context, R.drawable.content_background)
+        outlineRadius = resources.getDimension(R.dimen.backdrop_radius)
+        outlineProvider = object : ViewOutlineProvider() {
+            override fun getOutline(view: View, outline: Outline) {
+                outline.setRoundRect(0, 0, width, height + outlineRadius.toInt(), outlineRadius)
+            }
+        }
+        clipToOutline = true
+
+        addView(backdropOverlay)
+    }
+
+    fun attachBackdropMenu(backdropMenu: BackdropMenu) {
+        this.backdropMenu = backdropMenu
+    }
+
+    fun updatePos(interpolatedValue: Float) {
+        backdropOverlay.visibility = if (interpolatedValue == 0f) GONE
+        else VISIBLE
+
+        backdropOverlay.alpha = interpolatedValue * 0.5f
+    }
+}
+
+class BackdropMenu(context: Context, attrs: AttributeSet? = null) : LinearLayout(context, attrs), Openable {
+
+    private var isOpen = false
+    private var toolbar: Toolbar? = null
+    private var toolbarIcon: Drawable? = null
+
+    private var backdropLayoutId: Int? = null
+    private val backdropLayout: BackdropLayout? by lazy {
+        backdropLayoutId ?: return@lazy null
+        val layout: BackdropLayout? = rootView.findViewById(backdropLayoutId!!)
+        layout?.attachBackdropMenu(this)
+        layout
+    }
+
+    init {
+        alpha = 0f
+
+        val arr = context.obtainStyledAttributes(attrs, R.styleable.BackdropMenu)
+        backdropLayoutId = arr.getResourceId(R.styleable.BackdropMenu_backdropLayout, -1)
+        arr.recycle()
+    }
+
+    fun setUpWith(navController: NavController, toolbar: Toolbar) {
+        this.toolbar = toolbar
+        navController.addOnDestinationChangedListener { _, _, _ ->
+            close()
+        }
+    }
+
+    private val springAnim: SpringAnimation by lazy {
+        SpringAnimation(backdropLayout, DynamicAnimation.TRANSLATION_Y, 0f).apply {
+            spring.dampingRatio = SpringForce.DAMPING_RATIO_NO_BOUNCY
+            spring.stiffness = 500f
+            addUpdateListener { _, value, _ -> updatePos(value / measuredHeight) }
+        }
+    }
+
+    override fun isOpen(): Boolean {
+        return isOpen
+    }
+
+    override fun open() {
+        if (isOpen) {
+            animateClose()
+        } else {
+            animateOpen()
+        }
+    }
+
+    override fun close() {
+        if (isOpen) animateClose()
+    }
+
+    private fun animateOpen() {
+        toolbarIcon = toolbar?.navigationIcon
+        toolbar?.setNavigationIcon(R.drawable.ic_close)
+        isOpen = true
+
+        springAnim.animateToFinalPosition(measuredHeight.toFloat())
+    }
+
+    private fun animateClose() {
+        toolbarIcon?.let { toolbar?.navigationIcon = it }
+        isOpen = false
+
+        springAnim.animateToFinalPosition(0f)
+    }
+
+    private fun updatePos(interpolatedValue: Float) {
+        visibility = if (interpolatedValue == 0f) GONE
+        else View.VISIBLE
+
+        alpha = interpolatedValue
+        backdropLayout?.updatePos(interpolatedValue)
+    }
+}
