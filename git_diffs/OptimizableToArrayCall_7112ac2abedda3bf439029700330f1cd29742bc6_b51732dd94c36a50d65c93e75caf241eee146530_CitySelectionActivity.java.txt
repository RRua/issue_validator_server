diff --git a/app/src/main/java/com/best/deskclock/DeskClock.java b/app/src/main/java/com/best/deskclock/DeskClock.java
index bbc094514..a400b4c4e 100644
--- a/app/src/main/java/com/best/deskclock/DeskClock.java
+++ b/app/src/main/java/com/best/deskclock/DeskClock.java
@@ -16,7 +16,6 @@
 
 package com.best.deskclock;
 
-
 import static android.text.format.DateUtils.SECOND_IN_MILLIS;
 import static androidx.viewpager.widget.ViewPager.SCROLL_STATE_DRAGGING;
 import static androidx.viewpager.widget.ViewPager.SCROLL_STATE_IDLE;
@@ -39,13 +38,11 @@ import android.view.MenuItem;
 import android.view.View;
 import android.widget.Button;
 import android.widget.ImageView;
-import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.StringRes;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.widget.Toolbar;
 import androidx.viewpager.widget.ViewPager;
 import androidx.viewpager.widget.ViewPager.OnPageChangeListener;
 
@@ -71,36 +68,45 @@ import com.google.android.material.snackbar.Snackbar;
  */
 public class DeskClock extends AppCompatActivity
         implements FabContainer, LabelDialogFragment.AlarmLabelDialogHandler {
+
     private static final String PERMISSION_POWER_OFF_ALARM = "org.codeaurora.permission.POWER_OFF_ALARM";
     private static final int CODE_FOR_ALARM_PERMISSION = 1;
+
     /**
      * Coordinates handling of context menu items.
      */
     private final OptionsMenuManager mOptionsMenuManager = new OptionsMenuManager();
+
     /**
      * Shrinks the {@link #mFab}, {@link #mLeftButton} and {@link #mRightButton} to nothing.
      */
     private final AnimatorSet mHideAnimation = new AnimatorSet();
+
     /**
      * Grows the {@link #mFab}, {@link #mLeftButton} and {@link #mRightButton} to natural sizes.
      */
     private final AnimatorSet mShowAnimation = new AnimatorSet();
+
     /**
      * Hides, updates, and shows only the {@link #mFab}; the buttons are untouched.
      */
     private final AnimatorSet mUpdateFabOnlyAnimation = new AnimatorSet();
+
     /**
      * Hides, updates, and shows only the {@link #mLeftButton} and {@link #mRightButton}.
      */
     private final AnimatorSet mUpdateButtonsOnlyAnimation = new AnimatorSet();
+
     /**
      * Automatically starts the {@link #mShowAnimation} after {@link #mHideAnimation} ends.
      */
     private final AnimatorListenerAdapter mAutoStartShowListener = new AutoStartShowListener();
+
     /**
      * Updates the user interface to reflect the selected tab from the backing model.
      */
     private final TabListener mTabChangeWatcher = new TabChangeWatcher();
+
     /**
      * Shows/hides a snackbar explaining which setting is suppressing alarms from firing.
      */
@@ -133,42 +139,47 @@ public class DeskClock extends AppCompatActivity
      * Displays a snackbar explaining why alarms may not fire or may fire silently.
      */
     private Runnable mShowSilentSettingSnackbarRunnable;
+
     /**
      * The view to which snackbar items are anchored.
      */
     private View mSnackbarAnchor;
+
     /**
      * The current display state of the {@link #mFab}.
      */
     private FabState mFabState = FabState.SHOWING;
+
     /**
      * The single floating-action button shared across all tabs in the user interface.
      */
     private ImageView mFab;
+
     /**
      * The button left of the {@link #mFab} shared across all tabs in the user interface.
      */
     private Button mLeftButton;
+
     /**
      * The button right of the {@link #mFab} shared across all tabs in the user interface.
      */
     private Button mRightButton;
+
     /**
      * The ViewPager that pages through the fragments representing the content of the tabs.
      */
     private ViewPager mFragmentTabPager;
+
     /**
      * Generates the fragments that are displayed by the {@link #mFragmentTabPager}.
      */
     private FragmentTabPagerAdapter mFragmentTabPagerAdapter;
-    /**
-     * The view that displays the current tab's title
-     */
-    private TextView mTitleView;
+
     /**
      * The bottom navigation bar
      */
     private BottomNavigationView mBottomNavigation;
+
     /**
      * {@code true} when a settings change necessitates recreating this activity.
      */
@@ -186,31 +197,24 @@ public class DeskClock extends AppCompatActivity
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        final ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setDisplayHomeAsUpEnabled(true);
+            actionBar.setDisplayShowHomeEnabled(true);
+        }
+
         setContentView(R.layout.desk_clock);
 
         mSnackbarAnchor = findViewById(R.id.content);
 
         checkPermissions();
 
-        // Configure the toolbar.
-        final Toolbar toolbar = findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        final ActionBar actionBar = getSupportActionBar();
-        if (actionBar != null) {
-            actionBar.setDisplayShowTitleEnabled(false);
-        }
-
         // Configure the menu item controllers add behavior to the toolbar.
         mOptionsMenuManager.addMenuItemController(
                 new NightModeMenuItemController(this), new SettingsMenuItemController(this));
         mOptionsMenuManager.addMenuItemController(
                 MenuItemControllerFactory.getInstance().buildMenuItemControllers(this));
 
-        // Inflate the menu during creation to avoid a double layout pass. Otherwise, the menu
-        // inflation occurs *after* the initial draw and a second layout pass adds in the menu.
-        onCreateOptionsMenu(toolbar.getMenu());
-
         // Configure the buttons shared by the tabs.
         mFab = findViewById(R.id.fab);
         mLeftButton = findViewById(R.id.left_button);
@@ -291,8 +295,6 @@ public class DeskClock extends AppCompatActivity
 
         // Honor changes to the selected tab from outside entities.
         UiDataModel.getUiDataModel().addTabListener(mTabChangeWatcher);
-
-        mTitleView = findViewById(R.id.title_view);
     }
 
     @Override
@@ -355,6 +357,10 @@ public class DeskClock extends AppCompatActivity
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == android.R.id.home) {
+            getOnBackPressedDispatcher().onBackPressed();
+            return true;
+        }
         return mOptionsMenuManager.onOptionsItemSelected(item) || super.onOptionsItemSelected(item);
     }
 
@@ -452,7 +458,10 @@ public class DeskClock extends AppCompatActivity
             }
         }
 
-        mTitleView.setText(selectedTab.getLabelResId());
+        final ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setTitle(selectedTab.getLabelResId());
+        }
     }
 
     /**
diff --git a/app/src/main/java/com/best/deskclock/ringtone/RingtonePickerActivity.java b/app/src/main/java/com/best/deskclock/ringtone/RingtonePickerActivity.java
index 65a894353..681a1d504 100644
--- a/app/src/main/java/com/best/deskclock/ringtone/RingtonePickerActivity.java
+++ b/app/src/main/java/com/best/deskclock/ringtone/RingtonePickerActivity.java
@@ -49,7 +49,6 @@ import android.view.MenuItem;
 import androidx.annotation.NonNull;
 import androidx.annotation.VisibleForTesting;
 import androidx.appcompat.app.AlertDialog;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
@@ -64,6 +63,7 @@ import com.best.deskclock.actionbarmenu.OptionsMenuManager;
 import com.best.deskclock.alarms.AlarmUpdateHandler;
 import com.best.deskclock.data.DataModel;
 import com.best.deskclock.provider.Alarm;
+import com.best.deskclock.widget.CollapsingToolbarBaseActivity;
 
 import java.util.List;
 
@@ -76,7 +76,7 @@ import java.util.List;
  *     <li>user-selected audio files available as ringtones</li>
  * </ul>
  */
-public class RingtonePickerActivity extends AppCompatActivity
+public class RingtonePickerActivity extends CollapsingToolbarBaseActivity
         implements LoaderManager.LoaderCallbacks<List<ItemAdapter.ItemHolder<Uri>>> {
     /**
      * Key to an extra that defines resource id to the title of this activity.
diff --git a/app/src/main/java/com/best/deskclock/settings/SettingsActivity.java b/app/src/main/java/com/best/deskclock/settings/SettingsActivity.java
index fc32d1dc9..e0b06b7f6 100644
--- a/app/src/main/java/com/best/deskclock/settings/SettingsActivity.java
+++ b/app/src/main/java/com/best/deskclock/settings/SettingsActivity.java
@@ -27,7 +27,6 @@ import android.view.Menu;
 import android.view.MenuItem;
 
 import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.preference.ListPreference;
 import androidx.preference.ListPreferenceDialogFragmentCompat;
 import androidx.preference.Preference;
@@ -44,6 +43,7 @@ import com.best.deskclock.data.DataModel;
 import com.best.deskclock.data.TimeZones;
 import com.best.deskclock.data.Weekdays;
 import com.best.deskclock.ringtone.RingtonePickerActivity;
+import com.best.deskclock.widget.CollapsingToolbarBaseActivity;
 
 import java.util.List;
 import java.util.Objects;
@@ -51,7 +51,7 @@ import java.util.Objects;
 /**
  * Settings for the Alarm Clock.
  */
-public final class SettingsActivity extends AppCompatActivity {
+public final class SettingsActivity extends CollapsingToolbarBaseActivity {
 
     public static final String KEY_ALARM_SNOOZE = "snooze_duration";
     public static final String KEY_ALARM_CRESCENDO = "alarm_crescendo_duration";
@@ -87,8 +87,6 @@ public final class SettingsActivity extends AppCompatActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        setContentView(R.layout.settings);
-
         mOptionsMenuManager.addMenuItemController(new NavUpMenuItemController(this))
                 .addMenuItemController(MenuItemControllerFactory.getInstance()
                         .buildMenuItemControllers(this));
@@ -96,7 +94,7 @@ public final class SettingsActivity extends AppCompatActivity {
         // Create the prefs fragment in code to ensure it's created before PreferenceDialogFragment
         if (savedInstanceState == null) {
             getSupportFragmentManager().beginTransaction()
-                    .replace(R.id.main, new PrefsFragment(), PREFS_FRAGMENT_TAG)
+                    .replace(R.id.content_frame, new PrefsFragment(), PREFS_FRAGMENT_TAG)
                     .disallowAddToBackStack()
                     .commit();
         }
diff --git a/app/src/main/java/com/best/deskclock/widget/CollapsingToolbarBaseActivity.java b/app/src/main/java/com/best/deskclock/widget/CollapsingToolbarBaseActivity.java
new file mode 100644
index 000000000..cf280f1de
--- /dev/null
+++ b/app/src/main/java/com/best/deskclock/widget/CollapsingToolbarBaseActivity.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.best.deskclock.widget;
+
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.appcompat.widget.Toolbar;
+import androidx.coordinatorlayout.widget.CoordinatorLayout;
+
+import com.best.deskclock.R;
+import com.google.android.material.appbar.AppBarLayout;
+import com.google.android.material.appbar.CollapsingToolbarLayout;
+
+/**
+ * A base Activity that has a collapsing toolbar layout is used for the activities intending to
+ * enable the collapsing toolbar function.
+ */
+public class CollapsingToolbarBaseActivity extends AppCompatActivity {
+
+    @Nullable
+    private CollapsingToolbarLayout mCollapsingToolbarLayout;
+    @Nullable
+    private AppBarLayout mAppBarLayout;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        super.setContentView(R.layout.collapsing_toolbar_base_layout);
+        mCollapsingToolbarLayout = findViewById(R.id.collapsing_toolbar);
+        mAppBarLayout = findViewById(R.id.app_bar);
+        disableCollapsingToolbarLayoutScrollingBehavior();
+
+        final Toolbar toolbar = findViewById(R.id.action_bar);
+        setSupportActionBar(toolbar);
+
+        // Enable title and home button by default
+        final ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setDisplayHomeAsUpEnabled(true);
+            actionBar.setHomeButtonEnabled(true);
+            actionBar.setDisplayShowTitleEnabled(true);
+        }
+    }
+
+    @Override
+    public void setContentView(int layoutResID) {
+        final ViewGroup parent = findViewById(R.id.content_frame);
+        if (parent != null) {
+            parent.removeAllViews();
+        }
+        LayoutInflater.from(this).inflate(layoutResID, parent);
+    }
+
+    @Override
+    public void setContentView(View view) {
+        final ViewGroup parent = findViewById(R.id.content_frame);
+        if (parent != null) {
+            parent.addView(view);
+        }
+    }
+
+    @Override
+    public void setContentView(View view, ViewGroup.LayoutParams params) {
+        final ViewGroup parent = findViewById(R.id.content_frame);
+        if (parent != null) {
+            parent.addView(view, params);
+        }
+    }
+
+    @Override
+    public void setTitle(CharSequence title) {
+        if (mCollapsingToolbarLayout != null) {
+            mCollapsingToolbarLayout.setTitle(title);
+        } else {
+            super.setTitle(title);
+        }
+    }
+
+    @Override
+    public void setTitle(int titleId) {
+        if (mCollapsingToolbarLayout != null) {
+            mCollapsingToolbarLayout.setTitle(getText(titleId));
+        } else {
+            super.setTitle(titleId);
+        }
+    }
+
+    @Override
+    public boolean onNavigateUp() {
+        if (!super.onNavigateUp()) {
+            finishAfterTransition();
+        }
+        return true;
+    }
+
+    private void disableCollapsingToolbarLayoutScrollingBehavior() {
+        if (mAppBarLayout == null) {
+            return;
+        }
+        final CoordinatorLayout.LayoutParams params = (CoordinatorLayout.LayoutParams) mAppBarLayout.getLayoutParams();
+        final AppBarLayout.Behavior behavior = new AppBarLayout.Behavior();
+        behavior.setDragCallback(new AppBarLayout.Behavior.DragCallback() {
+                    @Override
+                    public boolean canDrag(@NonNull AppBarLayout appBarLayout) {
+                        return false;
+                    }
+                });
+        params.setBehavior(behavior);
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/best/deskclock/worldclock/CitySelectionActivity.java b/app/src/main/java/com/best/deskclock/worldclock/CitySelectionActivity.java
index 185ead4d2..cad040d0d 100644
--- a/app/src/main/java/com/best/deskclock/worldclock/CitySelectionActivity.java
+++ b/app/src/main/java/com/best/deskclock/worldclock/CitySelectionActivity.java
@@ -37,7 +37,6 @@ import android.widget.SectionIndexer;
 import android.widget.TextView;
 
 import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.SearchView;
 
 import com.best.deskclock.R;
@@ -50,6 +49,7 @@ import com.best.deskclock.actionbarmenu.SearchMenuItemController;
 import com.best.deskclock.actionbarmenu.SettingsMenuItemController;
 import com.best.deskclock.data.City;
 import com.best.deskclock.data.DataModel;
+import com.best.deskclock.widget.CollapsingToolbarBaseActivity;
 
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -75,7 +75,7 @@ import java.util.TimeZone;
  * As a result, {@link #onResume()} conservatively refreshes itself from the backing
  * {@link DataModel} which may have changed since this activity was last displayed.
  */
-public final class CitySelectionActivity extends AppCompatActivity {
+public final class CitySelectionActivity extends CollapsingToolbarBaseActivity {
 
     /**
      * Manages all action bar menu display and click handling.
@@ -437,8 +437,8 @@ public final class CitySelectionActivity extends AppCompatActivity {
                     }
                 }
 
-                mSectionHeaders = sections.toArray(new String[sections.size()]);
-                mSectionHeaderPositions = positions.toArray(new Integer[positions.size()]);
+                mSectionHeaders = sections.toArray(new String[0]);
+                mSectionHeaderPositions = positions.toArray(new Integer[0]);
             }
             return mSectionHeaders;
         }
