diff --git a/app/src/main/java/com/lubenard/oring_reminder/MainActivity.java b/app/src/main/java/com/lubenard/oring_reminder/MainActivity.java
index ccccc6b..5084795 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/MainActivity.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/MainActivity.java
@@ -20,7 +20,6 @@ import androidx.preference.PreferenceManager;
 
 import com.lubenard.oring_reminder.ui.EntryDetailsFragment;
 import com.lubenard.oring_reminder.ui.MainFragment;
-import com.lubenard.oring_reminder.ui.NewDesignDetailsFragment;
 import com.lubenard.oring_reminder.utils.Utils;
 
 import java.util.concurrent.Callable;
@@ -148,8 +147,7 @@ public class MainActivity extends AppCompatActivity {
         } else {
             Log.d("Widget", "No given session id");
             // Then switch to the main Fragment
-            fragmentTransaction.replace(android.R.id.content, new NewDesignDetailsFragment());
-            //fragmentTransaction.replace(android.R.id.content, new MainFragment());
+            fragmentTransaction.replace(android.R.id.content, new MainFragment());
         }
         fragmentTransaction.commit();
     }
diff --git a/app/src/main/java/com/lubenard/oring_reminder/custom_components/CustomListAdapter.java b/app/src/main/java/com/lubenard/oring_reminder/custom_components/CustomListAdapter.java
deleted file mode 100644
index 9c4e160..0000000
--- a/app/src/main/java/com/lubenard/oring_reminder/custom_components/CustomListAdapter.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.lubenard.oring_reminder.custom_components;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.lubenard.oring_reminder.DbManager;
-import com.lubenard.oring_reminder.MainActivity;
-import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.ui.MainFragment;
-
-import java.util.ArrayList;
-
-public class CustomListAdapter extends RecyclerView.Adapter<MainListViewHolder> {
-
-    private ArrayList <RingModel> entryList;
-    private Context context;
-    private onListItemClickListener onListItemClickListener;
-
-    public CustomListAdapter(ArrayList<RingModel> datas, onListItemClickListener onListItemClickListener) {
-        entryList = datas;
-        this.onListItemClickListener = onListItemClickListener;
-    }
-
-    @NonNull
-    @Override
-    public MainListViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-        LayoutInflater inflater = LayoutInflater.from(parent.getContext());
-        View view = inflater.inflate(R.layout.custom_entry_list_element, parent, false);
-        context = parent.getContext();
-        return new MainListViewHolder(view, onListItemClickListener);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull MainListViewHolder holder, int position) {
-        holder.updateElementDatas(entryList.get(position), context);
-    }
-
-    @Override
-    public int getItemCount() {
-        return entryList.size();
-    }
-
-    public interface onListItemClickListener {
-        void onListItemClickListener(int position);
-    }
-}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java b/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java
index 29c5f1b..bf0d7a1 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/custom_components/MainListViewHolder.java
@@ -1,49 +1,26 @@
 package com.lubenard.oring_reminder.custom_components;
 
-import android.content.Context;
-import android.view.View;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
 import com.lubenard.oring_reminder.MainActivity;
 import com.lubenard.oring_reminder.R;
 import com.lubenard.oring_reminder.broadcast_receivers.AfterBootBroadcastReceiver;
-import com.lubenard.oring_reminder.ui.MainFragment;
 import com.lubenard.oring_reminder.utils.Utils;
 
 import java.util.Date;
 import java.util.concurrent.TimeUnit;
 
-public class MainListViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
-
-    private TextView weared_from;
-    private TextView weared_to;
-    private TextView weared_during;
-    private Context context;
-    private CustomListAdapter.onListItemClickListener onListItemClickListener;
-
-    public MainListViewHolder(@NonNull View itemView, CustomListAdapter.onListItemClickListener onListItemClickListener) {
-        super(itemView);
-        weared_from = itemView.findViewById(R.id.custom_view_date_weared_from);
-        weared_to = itemView.findViewById(R.id.custom_view_date_weared_to);
-        weared_during = itemView.findViewById(R.id.custom_view_date_time_weared);
-        this.onListItemClickListener = onListItemClickListener;
-        itemView.setOnClickListener(this);
-    }
+public class MainListViewHolder {
 
     /**
      * Convert the timeWeared from a int into a readable hour:minutes format
      * @param timeWeared timeWeared is in minutes
      * @return a string containing the time the user weared the protection
      */
-    private String convertTimeWeared(int timeWeared) {
+    /*private String convertTimeWeared(int timeWeared) {
         if (timeWeared < 60)
-            return timeWeared + context.getString(R.string.minute_with_M_uppercase);
+            return timeWeared + getString(R.string.minute_with_M_uppercase);
         else
             return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
-    }
+    }*/
 
     /**
      * Get the total time pause for one session
@@ -66,35 +43,4 @@ public class MainListViewHolder extends RecyclerView.ViewHolder implements View.
         newValue = (int) (oldTimeBeforeRemove - totalTimePause);
         return (newValue < 0) ? 0 : newValue;
     }
-
-    public void updateElementDatas(RingModel dataModel, Context context) {
-        this.context = context;
-        String[] datePut = dataModel.getDatePut().split(" ");
-        weared_from.setText(datePut[0] + "\n" + datePut[1]);
-
-        if (!dataModel.getDateRemoved().equals("NOT SET YET")) {
-            String[] dateRemoved = dataModel.getDateRemoved().split(" ");
-            weared_to.setText(dateRemoved[0] + "\n" + dateRemoved[1]);
-        } else
-            weared_to.setText(dataModel.getDateRemoved());
-
-        if (dataModel.getIsRunning() == 0) {
-            int totalTimePause = getTotalTimePause(dataModel.getDatePut(), dataModel.getId(), dataModel.getDateRemoved());
-            if (totalTimePause / 60 >= 15)
-                weared_during.setTextColor(context.getResources().getColor(android.R.color.holo_green_dark));
-            else
-                weared_during.setTextColor(context.getResources().getColor(android.R.color.holo_red_dark));
-            weared_during.setText(convertTimeWeared(totalTimePause));
-        }
-        else {
-            long timeBeforeRemove = getTotalTimePause(dataModel.getDatePut(), dataModel.getId(), null);
-            weared_during.setTextColor(context.getResources().getColor(R.color.yellow));
-            weared_during.setText(String.format("%dh%02dm", timeBeforeRemove / 60, timeBeforeRemove % 60));
-        }
-    }
-
-    @Override
-    public void onClick(View view) {
-        onListItemClickListener.onListItemClickListener(getAdapterPosition());
-    }
 }
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/EditEntryFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/EditEntryFragment.java
index f8d5f14..940dde9 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/EditEntryFragment.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/EditEntryFragment.java
@@ -138,8 +138,8 @@ public class EditEntryFragment extends Fragment {
         // We should update listmainview if long click.
         // We could have merged with the condition above, but i wanted to have better granular control
         // if needed
-        if (shouldUpdateMainList)
-            MainFragment.updateElementList(true);
+        /*if (shouldUpdateMainList)
+            OldMainFragment.updateElementList(true);*/
     }
 
     /**
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/EntryDetailsFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/EntryDetailsFragment.java
index 36a20d5..71afff0 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/EntryDetailsFragment.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/EntryDetailsFragment.java
@@ -67,6 +67,7 @@ public class EntryDetailsFragment extends Fragment {
     private FloatingActionButton stopSessionButton;
     private boolean isThereAlreadyARunningPause = false;
     private SharedPreferences sharedPreferences;
+    private static ViewGroup viewGroup;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
@@ -89,6 +90,8 @@ public class EntryDetailsFragment extends Fragment {
         dbManager = MainActivity.getDbManager();
         dataModels = new ArrayList<>();
 
+        viewGroup = view.findViewById(R.id.listview_pauses);
+
         Bundle bundle = this.getArguments();
         entryId = bundle.getLong("entryId", -1);
 
@@ -343,17 +346,65 @@ public class EntryDetailsFragment extends Fragment {
         whenGetItOff.setText(String.format(getString(texteRessourceWhenGetItOff), timeBeforeRemove / 60, timeBeforeRemove % 60));
     }
 
+    /**
+     * Convert the timeWeared from a int into a readable hour:minutes format
+     * @param timeWeared timeWeared is in minutes
+     * @return a string containing the time the user weared the protection
+     */
+    private String convertTimeWeared(int timeWeared) {
+        if (timeWeared < 60)
+            return timeWeared + getContext().getString(R.string.minute_with_M_uppercase);
+        else
+            return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
+    }
+
     /**
      * Update the listView by fetching all elements from the db
      */
     private void updatePauseList() {
-       dataModels.clear();
-       ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
+        viewGroup.removeAllViews();
+        dataModels.clear();
+        ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
+
+        LayoutInflater inflater = (LayoutInflater) getActivity().
+                getSystemService(getContext().LAYOUT_INFLATER_SERVICE);
+
+        for (int i = 0; i != pausesDatas.size(); i++) {
+            View view = inflater.inflate(R.layout.main_history_one_elem, null);
+            view.setTag(Integer.toString((int) pausesDatas.get(i).getId()));
+
+            String[] datePut = pausesDatas.get(i).getDatePut().split(" ");
+
+            TextView textView_date = view.findViewById(R.id.main_history_date);
+            textView_date.setText(datePut[0]);
 
-       dataModels.addAll(pausesDatas);
-       adapter = new CustomListPausesAdapter(dataModels, getContext());
-       listView.setAdapter(adapter);
-        Utils.getListViewSize(listView);
+            TextView textView_hour_from = view.findViewById(R.id.custom_view_date_weared_to);
+            textView_hour_from.setText(datePut[1]);
+
+            TextView textView_hour_to = view.findViewById(R.id.custom_view_date_weared_from);
+
+            TextView textView_worn_for = view.findViewById(R.id.custom_view_date_time_weared);
+
+            if (!pausesDatas.get(i).getDatePut().equals("NOT SET YET")) {
+                String[] dateRemoved = pausesDatas.get(i).getDateRemoved().split(" ");
+                textView_hour_to.setText(dateRemoved[1]);
+                textView_date.setText(textView_date.getText() + " -> " + dateRemoved[0]);
+            } else
+                textView_hour_to.setText("Not set yet");
+
+            if (pausesDatas.get(i).getIsRunning() == 0) {
+                textView_worn_for.setTextColor(getContext().getResources().getColor(android.R.color.holo_green_dark));
+                textView_worn_for.setText(convertTimeWeared(pausesDatas.get(i).getTimeWeared()));
+            } else {
+                long timeBeforeRemove = Utils.getDateDiff(pausesDatas.get(i).getDateRemoved(), Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
+                textView_worn_for.setTextColor(getContext().getResources().getColor(R.color.yellow));
+                textView_worn_for.setText(String.format("%dh%02dm", timeBeforeRemove / 60, timeBeforeRemove % 60));
+            }
+
+            viewGroup.addView(view);
+
+            //view.setOnClickListener(clickInLinearLayout());
+        }
     }
 
     private void updateAllFragmentDatas() {
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
index 8927495..0db8909 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/MainFragment.java
@@ -1,230 +1,91 @@
 package com.lubenard.oring_reminder.ui;
 
-import android.content.Context;
 import android.content.SharedPreferences;
+import android.content.res.ColorStateList;
 import android.os.Bundle;
-
-import com.google.android.material.floatingactionbutton.FloatingActionButton;
-import com.lubenard.oring_reminder.MainActivity;
-import com.lubenard.oring_reminder.custom_components.CustomListAdapter;
-import com.lubenard.oring_reminder.DbManager;
-import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.custom_components.RingModel;
-import com.lubenard.oring_reminder.utils.Utils;
-
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.fragment.app.Fragment;
-import androidx.preference.PreferenceManager;
-import androidx.recyclerview.widget.DividerItemDecoration;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
 import android.view.MenuItem;
 import android.view.View;
-
 import android.view.ViewGroup;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.preference.PreferenceManager;
+
+import com.google.android.material.floatingactionbutton.FloatingActionButton;
+import com.lubenard.oring_reminder.DbManager;
+import com.lubenard.oring_reminder.MainActivity;
+import com.lubenard.oring_reminder.R;
+import com.lubenard.oring_reminder.broadcast_receivers.AfterBootBroadcastReceiver;
+import com.lubenard.oring_reminder.custom_components.RingModel;
+import com.lubenard.oring_reminder.utils.Utils;
+
 import java.util.ArrayList;
-import java.util.Calendar;
 import java.util.Date;
-import java.util.LinkedHashMap;
 import java.util.concurrent.TimeUnit;
 
-public class MainFragment extends Fragment implements CustomListAdapter.onListItemClickListener{
-
-    public static final String TAG = "MainFragment";
-
-    // We can set thoses variables as static, because we know the view is going to be created
-    private static ArrayList<RingModel> dataModels;
-    private static DbManager dbManager;
-    private static CustomListAdapter adapter;
-    private static RecyclerView recyclerView;
-    private static Context context;
+public class MainFragment extends Fragment {
+    ProgressBar progress_bar;
+    TextView progress_bar_text;
+    private FloatingActionButton fab;
+    private View view;
     private static boolean orderEntryByDesc = true;
-    private static TextView statLastDayTextview;
-    private LinearLayoutManager linearLayoutManager;
-    private static CustomListAdapter.onListItemClickListener onListItemClickListener;
+
+    private static ViewGroup viewGroup;
+    private ArrayList<RingModel> dataModels;
+    private DbManager dbManager;
+    private TextView test;
+    private SharedPreferences sharedPreferences;
 
     @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setHasOptionsMenu(true);
-        return inflater.inflate(R.layout.fragment_main, container, false);
+        return inflater.inflate(R.layout.new_design_home_fragment, container, false);
     }
 
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-
-        getActivity().setTitle(R.string.app_name);
-        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
-
-        FloatingActionButton fab = view.findViewById(R.id.fab);
-
-        recyclerView = view.findViewById(R.id.main_list);
-
-        // Add dividers (like listView) to recyclerView
-        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(),
-                DividerItemDecoration.VERTICAL);
-        recyclerView.addItemDecoration(dividerItemDecoration);
-
-        linearLayoutManager = new LinearLayoutManager(getContext());
-        recyclerView.setLayoutManager(linearLayoutManager);
-
-        onListItemClickListener = this;
-
-        dataModels = new ArrayList<>();
-        dbManager = MainActivity.getDbManager();
-        context = getContext();
+    private void updateHistoryList() {
+        viewGroup.removeAllViews();
+        dataModels.clear();
+        ArrayList<RingModel> entrysDatas = dbManager.getHistoryForMainView(orderEntryByDesc);
 
-        Log.d(TAG, "DB version is: " + dbManager.getVersion());
+        LayoutInflater inflater = (LayoutInflater) getActivity().
+                getSystemService(getContext().LAYOUT_INFLATER_SERVICE);
 
-        statLastDayTextview = view.findViewById(R.id.header_last_day);
+        for (int i = 0; i != entrysDatas.size(); i++) {
+            View view = inflater.inflate(R.layout.main_history_one_elem, null);
+            view.setTag(Integer.toString((int) entrysDatas.get(i).getId()));
 
-        fab.setOnClickListener(view12 -> actionOnPlusButton(false));
+            TextView textView_date = view.findViewById(R.id.main_history_date);
+            textView_date.setText(entrysDatas.get(i).getDatePut().split(" ")[0]);
 
-        fab.setOnLongClickListener(view1 -> {
-            actionOnPlusButton(true);
-            return true;
-        });
-    }
+            TextView textView_hour_from = view.findViewById(R.id.custom_view_date_weared_to);
+            textView_hour_from.setText(entrysDatas.get(i).getDatePut().split(" ")[1]);
 
-    /**
-     * Define what action should be done on longClick on the '+' button
-     * @param isLongClick act if it is a long click or not
-     */
-    private void actionOnPlusButton(boolean isLongClick) {
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
-        String action = sharedPreferences.getString("ui_action_on_plus_button", "default");
+            TextView textView_hour_to = view.findViewById(R.id.custom_view_date_weared_from);
+            textView_hour_to.setText(entrysDatas.get(i).getDateRemoved().split(" ")[1]);
 
-        if (isLongClick) {
-            if (action.equals("default")) {
-                createNewEntry();
-            } else {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-            }
-        } else {
-            if (action.equals("default")) {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-            } else {
-                createNewEntry();
-            }
-        }
-    }
+            TextView textView_worn_for = view.findViewById(R.id.custom_view_date_time_weared);
+            int totalTimePause = getTotalTimePause(entrysDatas.get(i).getDatePut(), entrysDatas.get(i).getId(), entrysDatas.get(i).getDateRemoved());
+            if (totalTimePause / 60 >= 15)
+                textView_worn_for.setTextColor(getContext().getResources().getColor(android.R.color.holo_green_dark));
+            else
+                textView_worn_for.setTextColor(getContext().getResources().getColor(android.R.color.holo_red_dark));
+            textView_worn_for.setText(convertTimeWeared(totalTimePause));
 
-    /**
-     * Update the listView by fetching all elements from the db
-     */
-    public static void updateElementList(boolean shouldUpdateHeader) {
-        Log.d(TAG, "Updated main Listview");
-        dataModels.clear();
-        LinkedHashMap<Integer, RingModel> entrysDatas = dbManager.getAllDatasForMainList(orderEntryByDesc);
-        for (LinkedHashMap.Entry<Integer, RingModel> oneElemData : entrysDatas.entrySet())
-            dataModels.add(oneElemData.getValue());
-        adapter = new CustomListAdapter(dataModels, onListItemClickListener);
-        recyclerView.setAdapter(adapter);
-        if (shouldUpdateHeader)
-            recomputeLastWearingTime();
-    }
+            viewGroup.addView(view);
 
-    /**
-     * Recompute last 24 h header according to pauses
-     */
-    private static void recomputeLastWearingTime() {
-        int totalTimeLastDay = 0;
-        int pauseTimeForThisEntry = 0;
-        Calendar calendar = Calendar.getInstance();
-        String todayDate = Utils.getdateFormatted(calendar.getTime());
-        calendar.add(Calendar.HOUR_OF_DAY, -24);
-        String last24Hours = Utils.getdateFormatted(calendar.getTime());
-        Log.d(TAG, "Computing last 24 hours: interval is between: " + last24Hours + " and " + todayDate);
-        RingModel currentModel;
-        for (int i = 0; i != ((dataModels.size() > 5) ? 5 : dataModels.size()); i++) {
-            currentModel = dataModels.get(i);
-            pauseTimeForThisEntry = computeTotalTimePauseForId(dbManager, currentModel.getId(), last24Hours, todayDate);
-            if (currentModel.getIsRunning() == 0) {
-                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0 &&
-                        Utils.getDateDiff(currentModel.getDateRemoved(), todayDate, TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "entry at index " + i + " is added: " + dataModels.get(i).getTimeWeared());
-                    totalTimeLastDay += currentModel.getTimeWeared() - pauseTimeForThisEntry;
-                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0 &&
-                        Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(),  TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.SECONDS));
-                    totalTimeLastDay += Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                }
-            } else {
-                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "running entry at index " + i + " is added: " + Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.SECONDS));
-                    totalTimeLastDay += Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0) {
-                    Log.d(TAG, "running entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
-                    totalTimeLastDay += Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES) - pauseTimeForThisEntry;
-                }
-            }
+            //view.setOnClickListener(clickInLinearLayout());
         }
-        Log.d(TAG, "Computed last 24 hours is: " + totalTimeLastDay + "mn");
-        statLastDayTextview.setText(context.getString(R.string.last_day_string_header) + String.format("%dh%02dm", totalTimeLastDay / 60, totalTimeLastDay % 60));
-    }
-
-    /**
-     * Compute all pause time into interval
-     * @param dbManager The database manager, avoiding to create a new instance
-     * @param entryId entry for the wanted session
-     * @param date24HoursAgo oldest boundaries
-     * @param dateNow interval newest boundaries
-     * @return the time in Minutes of pauses between the interval
-     */
-    public static int computeTotalTimePauseForId(DbManager dbManager, long entryId, String date24HoursAgo, String dateNow) {
-        ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
-        int totalTimePause = 0;
-        for (int i = 0; i < pausesDatas.size(); i++) {
-            RingModel currentBreak = pausesDatas.get(i);
-            if (pausesDatas.get(i).getIsRunning() == 0) {
-                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0 &&
-                        Utils.getDateDiff(currentBreak.getDatePut(), dateNow, TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "pause at index " + i + " is added: " + pausesDatas.get(i).getTimeWeared());
-                    totalTimePause += currentBreak.getTimeWeared();
-                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0 &&
-                        Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS));
-                    totalTimePause += Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.MINUTES);
-                }
-            } else {
-                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0) {
-                    Log.d(TAG, "running pause at index " + i + " is added: " + Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.SECONDS));
-                    totalTimePause += Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.MINUTES);
-                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0) {
-                    Log.d(TAG, "running pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
-                    totalTimePause += Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
-                }
-            }
-        }
-        return totalTimePause;
-    }
-
-    /**
-     * Launch the new Entry fragment, and specify we do not want to update a entry
-     */
-    private void createNewEntry() {
-        EditEntryFragment fragment = new EditEntryFragment(getContext());
-        Bundle bundle = new Bundle();
-        bundle.putLong("entryId", -1);
-        fragment.setArguments(bundle);
-        getActivity().getSupportFragmentManager().beginTransaction()
-                .replace(android.R.id.content, fragment, null)
-                .addToBackStack(null).commit();
     }
 
     /**
@@ -233,7 +94,7 @@ public class MainFragment extends Fragment implements CustomListAdapter.onListIt
     @Override
     public void onResume() {
         super.onResume();
-        updateElementList(true);
+        updateDesign();
     }
 
     @Override
@@ -268,12 +129,13 @@ public class MainFragment extends Fragment implements CustomListAdapter.onListIt
                         .addToBackStack(null).commit();
                 return true;
             case R.id.action_reload_datas:
-                updateElementList(true);
+                updateCurrSessionDatas();
+                updateHistoryList();
                 return true;
             case R.id.action_sort_entrys:
                 orderEntryByDesc = !orderEntryByDesc;
-                Toast.makeText(context, context.getString((orderEntryByDesc) ? R.string.ordered_by_desc : R.string.not_ordered_by_desc),Toast.LENGTH_SHORT).show();
-                updateElementList(false);
+                Toast.makeText(getContext(), getContext().getString((orderEntryByDesc) ? R.string.ordered_by_desc : R.string.not_ordered_by_desc), Toast.LENGTH_SHORT).show();
+                updateHistoryList();
                 return true;
             default:
                 return false;
@@ -281,18 +143,159 @@ public class MainFragment extends Fragment implements CustomListAdapter.onListIt
     }
 
     /**
-     * onClickManager handling clicks on the main List
+     * Launch the new Entry fragment, and specify we do not want to update a entry
      */
-    @Override
-    public void onListItemClickListener(int position) {
-        RingModel dataModel= dataModels.get(position);
-        Log.d(TAG, "Element " + dataModel.getId());
-        EntryDetailsFragment fragment = new EntryDetailsFragment();
+    private void createNewEntry() {
+        EditEntryFragment fragment = new EditEntryFragment(getContext());
         Bundle bundle = new Bundle();
-        bundle.putLong("entryId", dataModel.getId());
+        bundle.putLong("entryId", -1);
         fragment.setArguments(bundle);
         getActivity().getSupportFragmentManager().beginTransaction()
                 .replace(android.R.id.content, fragment, null)
                 .addToBackStack(null).commit();
     }
-}
\ No newline at end of file
+
+    /**
+     * Define what action should be done on longClick on the '+' button
+     * @param isLongClick act if it is a long click or not
+     */
+    private void actionOnPlusButton(boolean isLongClick) {
+        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
+        String action = sharedPreferences.getString("ui_action_on_plus_button", "default");
+
+        if (isLongClick) {
+            if (action.equals("default")) {
+                createNewEntry();
+            } else {
+                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
+                //EditEntryFragment.setUpdateMainList(true);
+                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
+                updateDesign();
+            }
+        } else {
+            if (action.equals("default")) {
+                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
+                //EditEntryFragment.setUpdateMainList(true);
+                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
+                updateDesign();
+            } else {
+                createNewEntry();
+            }
+        }
+    }
+
+    /**
+     * Get the total time pause for one session
+     * @param datePut The datetime the user put the protection
+     * @param entryId the entry id of the session
+     * @param dateRemoved The datetime the user removed the protection
+     * @return the total time in Minutes of new wearing time
+     */
+    private int getTotalTimePause(String datePut, long entryId, String dateRemoved) {
+        long oldTimeBeforeRemove;
+        int newValue;
+        long totalTimePause = 0;
+
+        if (dateRemoved == null)
+            oldTimeBeforeRemove = Utils.getDateDiff(datePut, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
+        else
+            oldTimeBeforeRemove = Utils.getDateDiff(datePut, dateRemoved, TimeUnit.MINUTES);
+
+        totalTimePause = AfterBootBroadcastReceiver.computeTotalTimePause(MainActivity.getDbManager(), entryId);
+        newValue = (int) (oldTimeBeforeRemove - totalTimePause);
+        return (newValue < 0) ? 0 : newValue;
+    }
+
+    /**
+     * Convert the timeWeared from a int into a readable hour:minutes format
+     * @param timeWeared timeWeared is in minutes
+     * @return a string containing the time the user weared the protection
+     */
+    private String convertTimeWeared(int timeWeared) {
+        if (timeWeared < 60)
+            return timeWeared + getContext().getString(R.string.minute_with_M_uppercase);
+        else
+            return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
+    }
+
+    private void updateCurrSessionDatas() {
+        RingModel lastRunningEntry = dbManager.getLastRunningEntry();
+
+        if (lastRunningEntry != null) {
+            sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
+            long timeBeforeRemove = getTotalTimePause(lastRunningEntry.getDatePut(), lastRunningEntry.getId(), null);
+            test.setText(String.format("%dh%02dm", timeBeforeRemove / 60, timeBeforeRemove % 60));
+            Log.d("Main view", "MainView percentage is " + ((float) timeBeforeRemove / (float) (Integer.parseInt(sharedPreferences.getString("myring_wearing_time", "15")) * 60)) * 100);
+            progress_bar.setProgress((int) (((float) timeBeforeRemove / (float) (Integer.parseInt(sharedPreferences.getString("myring_wearing_time", "15")) * 60)) * 100));
+        }
+    }
+
+    private void updateDesign() {
+        // If this return null, mean there is no running session
+        if (dbManager.getLastRunningEntry() == null) {
+
+            LinearLayout linearLayout = view.findViewById(R.id.layout_session_active);
+            linearLayout.setVisibility(View.GONE);
+
+            TextView no_active_session = view.findViewById(R.id.layout_no_session_active);
+            no_active_session.setVisibility(View.VISIBLE);
+
+            ImageButton see_curr_session = view.findViewById(R.id.see_current_session);
+            see_curr_session.setVisibility(View.INVISIBLE);
+
+            fab.setBackgroundTintList(ColorStateList.valueOf(getContext().getResources().getColor(R.color.teal_700)));
+            fab.setImageDrawable(getResources().getDrawable(R.drawable.baseline_add_24));
+
+            fab.setOnClickListener(view12 -> actionOnPlusButton(false));
+
+            fab.setOnLongClickListener(view1 -> {
+                actionOnPlusButton(true);
+                return true;
+            });
+        } else {
+            LinearLayout linearLayout = view.findViewById(R.id.layout_session_active);
+            linearLayout.setVisibility(View.VISIBLE);
+
+            TextView no_active_session = view.findViewById(R.id.layout_no_session_active);
+            no_active_session.setVisibility(View.GONE);
+
+            ImageButton see_curr_session = view.findViewById(R.id.see_current_session);
+            see_curr_session.setVisibility(View.VISIBLE);
+
+            fab.setBackgroundTintList(ColorStateList.valueOf(getContext().getResources().getColor(android.R.color.holo_red_dark)));
+            fab.setImageDrawable(getResources().getDrawable(R.drawable.outline_close_24));
+            fab.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    dbManager.endSession(dbManager.getLastRunningEntry().getId());
+                    updateDesign();
+                }
+            });
+        }
+        updateHistoryList();
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        dbManager = MainActivity.getDbManager();
+        dataModels = new ArrayList<>();
+
+        viewGroup = view.findViewById(R.id.list_history);
+
+        progress_bar = view.findViewById(R.id.progress_bar);
+        progress_bar_text = view.findViewById(R.id.text_view_progress);
+
+        test = view.findViewById(R.id.text_view_progress);
+
+        fab = view.findViewById(R.id.fab);
+
+        this.view = view;
+
+        getActivity().setTitle(R.string.app_name);
+        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
+
+        updateDesign();
+    }
+}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/MySpermogramsFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/MySpermogramsFragment.java
index a3782d0..f102066 100644
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/MySpermogramsFragment.java
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/MySpermogramsFragment.java
@@ -5,7 +5,6 @@ import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -22,9 +21,7 @@ import com.google.android.material.floatingactionbutton.FloatingActionButton;
 import com.lubenard.oring_reminder.DbManager;
 import com.lubenard.oring_reminder.MainActivity;
 import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.custom_components.CustomListAdapter;
 import com.lubenard.oring_reminder.custom_components.CustomSpermoListAdapter;
-import com.lubenard.oring_reminder.custom_components.RingModel;
 import com.lubenard.oring_reminder.custom_components.Spermograms;
 
 import java.io.File;
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/NewDesignDetailsFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/NewDesignDetailsFragment.java
deleted file mode 100644
index 4255c94..0000000
--- a/app/src/main/java/com/lubenard/oring_reminder/ui/NewDesignDetailsFragment.java
+++ /dev/null
@@ -1,292 +0,0 @@
-package com.lubenard.oring_reminder.ui;
-
-import android.content.SharedPreferences;
-import android.content.res.ColorStateList;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.Menu;
-import android.view.MenuInflater;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.LinearLayout;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.fragment.app.Fragment;
-import androidx.preference.PreferenceManager;
-
-import com.google.android.material.floatingactionbutton.FloatingActionButton;
-import com.lubenard.oring_reminder.DbManager;
-import com.lubenard.oring_reminder.MainActivity;
-import com.lubenard.oring_reminder.R;
-import com.lubenard.oring_reminder.broadcast_receivers.AfterBootBroadcastReceiver;
-import com.lubenard.oring_reminder.custom_components.RingModel;
-import com.lubenard.oring_reminder.utils.Utils;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.concurrent.TimeUnit;
-
-public class NewDesignDetailsFragment extends Fragment {
-    ProgressBar progress_bar;
-    TextView progress_bar_text;
-    private FloatingActionButton fab;
-    private View view;
-    private static boolean orderEntryByDesc = true;
-
-    private static ViewGroup viewGroup;
-    private ArrayList<RingModel> dataModels;
-    private DbManager dbManager;
-    private TextView test;
-    private SharedPreferences sharedPreferences;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setHasOptionsMenu(true);
-        return inflater.inflate(R.layout.new_design_home_fragment, container, false);
-    }
-
-    private void updateHistoryList() {
-        viewGroup.removeAllViews();
-        dataModels.clear();
-        ArrayList<RingModel> entrysDatas = dbManager.getHistoryForMainView(orderEntryByDesc);
-
-        LayoutInflater inflater = (LayoutInflater) getActivity().
-                getSystemService(getContext().LAYOUT_INFLATER_SERVICE);
-
-        for (int i = 0; i != entrysDatas.size(); i++) {
-            View view = inflater.inflate(R.layout.main_history_one_elem, null);
-            view.setTag(Integer.toString((int) entrysDatas.get(i).getId()));
-
-            TextView textView_date = view.findViewById(R.id.main_history_date);
-            textView_date.setText(entrysDatas.get(i).getDatePut().split(" ")[0]);
-
-            TextView textView_hour_from = view.findViewById(R.id.custom_view_date_weared_to);
-            textView_hour_from.setText(entrysDatas.get(i).getDatePut().split(" ")[1]);
-
-            TextView textView_hour_to = view.findViewById(R.id.custom_view_date_weared_from);
-            textView_hour_to.setText(entrysDatas.get(i).getDateRemoved().split(" ")[1]);
-
-            TextView textView_worn_for = view.findViewById(R.id.custom_view_date_time_weared);
-            int totalTimePause = getTotalTimePause(entrysDatas.get(i).getDatePut(), entrysDatas.get(i).getId(), entrysDatas.get(i).getDateRemoved());
-            if (totalTimePause / 60 >= 15)
-                textView_worn_for.setTextColor(getContext().getResources().getColor(android.R.color.holo_green_dark));
-            else
-                textView_worn_for.setTextColor(getContext().getResources().getColor(android.R.color.holo_red_dark));
-            textView_worn_for.setText(convertTimeWeared(totalTimePause));
-
-            viewGroup.addView(view);
-
-            //view.setOnClickListener(clickInLinearLayout());
-        }
-    }
-
-    @Override
-    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
-        inflater.inflate(R.menu.menu_main, menu);
-        super.onCreateOptionsMenu(menu,inflater);
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
-        int id = item.getItemId();
-        switch (id) {
-            case R.id.action_my_spermogramms:
-                getActivity().getSupportFragmentManager().beginTransaction()
-                        .replace(android.R.id.content, new MySpermogramsFragment(), null)
-                        .addToBackStack(null).commit();
-                return true;
-            case R.id.action_calculators:
-                getActivity().getSupportFragmentManager().beginTransaction()
-                        .replace(android.R.id.content, new CalculatorsFragment(), null)
-                        .addToBackStack(null).commit();
-                return true;
-            case R.id.action_datas:
-                getActivity().getSupportFragmentManager().beginTransaction()
-                        .replace(android.R.id.content, new DatasFragment(), null)
-                        .addToBackStack(null).commit();
-                return true;
-            case R.id.action_settings:
-                // Navigate to settings screen
-                getActivity().getSupportFragmentManager().beginTransaction()
-                        .replace(android.R.id.content, new SettingsFragment(), null)
-                        .addToBackStack(null).commit();
-                return true;
-            case R.id.action_reload_datas:
-                updateCurrSessionDatas();
-                updateHistoryList();
-                return true;
-            case R.id.action_sort_entrys:
-                orderEntryByDesc = !orderEntryByDesc;
-                Toast.makeText(getContext(), getContext().getString((orderEntryByDesc) ? R.string.ordered_by_desc : R.string.not_ordered_by_desc), Toast.LENGTH_SHORT).show();
-                updateHistoryList();
-                return true;
-            default:
-                return false;
-        }
-    }
-
-    /**
-     * Launch the new Entry fragment, and specify we do not want to update a entry
-     */
-    private void createNewEntry() {
-        EditEntryFragment fragment = new EditEntryFragment(getContext());
-        Bundle bundle = new Bundle();
-        bundle.putLong("entryId", -1);
-        fragment.setArguments(bundle);
-        getActivity().getSupportFragmentManager().beginTransaction()
-                .replace(android.R.id.content, fragment, null)
-                .addToBackStack(null).commit();
-    }
-
-    /**
-     * Define what action should be done on longClick on the '+' button
-     * @param isLongClick act if it is a long click or not
-     */
-    private void actionOnPlusButton(boolean isLongClick) {
-        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
-        String action = sharedPreferences.getString("ui_action_on_plus_button", "default");
-
-        if (isLongClick) {
-            if (action.equals("default")) {
-                createNewEntry();
-            } else {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                //EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-                updateDesign();
-            }
-        } else {
-            if (action.equals("default")) {
-                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
-                //EditEntryFragment.setUpdateMainList(true);
-                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
-                updateDesign();
-            } else {
-                createNewEntry();
-            }
-        }
-    }
-
-    /**
-     * Get the total time pause for one session
-     * @param datePut The datetime the user put the protection
-     * @param entryId the entry id of the session
-     * @param dateRemoved The datetime the user removed the protection
-     * @return the total time in Minutes of new wearing time
-     */
-    private int getTotalTimePause(String datePut, long entryId, String dateRemoved) {
-        long oldTimeBeforeRemove;
-        int newValue;
-        long totalTimePause = 0;
-
-        if (dateRemoved == null)
-            oldTimeBeforeRemove = Utils.getDateDiff(datePut, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
-        else
-            oldTimeBeforeRemove = Utils.getDateDiff(datePut, dateRemoved, TimeUnit.MINUTES);
-
-        totalTimePause = AfterBootBroadcastReceiver.computeTotalTimePause(MainActivity.getDbManager(), entryId);
-        newValue = (int) (oldTimeBeforeRemove - totalTimePause);
-        return (newValue < 0) ? 0 : newValue;
-    }
-
-    /**
-     * Convert the timeWeared from a int into a readable hour:minutes format
-     * @param timeWeared timeWeared is in minutes
-     * @return a string containing the time the user weared the protection
-     */
-    private String convertTimeWeared(int timeWeared) {
-        if (timeWeared < 60)
-            return timeWeared + getContext().getString(R.string.minute_with_M_uppercase);
-        else
-            return String.format("%dh%02dm", timeWeared / 60, timeWeared % 60);
-    }
-
-    private void updateCurrSessionDatas() {
-        RingModel lastRunningEntry = dbManager.getLastRunningEntry();
-
-        if (lastRunningEntry != null) {
-            sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getContext());
-            long timeBeforeRemove = getTotalTimePause(lastRunningEntry.getDatePut(), lastRunningEntry.getId(), null);
-            test.setText(String.format("%dh%02dm", timeBeforeRemove / 60, timeBeforeRemove % 60));
-            Log.d("Main view", "MainView percentage is " + ((float) timeBeforeRemove / (float) (Integer.parseInt(sharedPreferences.getString("myring_wearing_time", "15")) * 60)) * 100);
-            progress_bar.setProgress((int) (((float) timeBeforeRemove / (float) (Integer.parseInt(sharedPreferences.getString("myring_wearing_time", "15")) * 60)) * 100));
-        }
-    }
-
-    private void updateDesign() {
-        // If this return null, mean there is no running session
-        if (dbManager.getLastRunningEntry() == null) {
-
-            LinearLayout linearLayout = view.findViewById(R.id.layout_session_active);
-            linearLayout.setVisibility(View.GONE);
-
-            TextView no_active_session = view.findViewById(R.id.layout_no_session_active);
-            no_active_session.setVisibility(View.VISIBLE);
-
-            ImageButton see_curr_session = view.findViewById(R.id.see_current_session);
-            see_curr_session.setVisibility(View.INVISIBLE);
-
-            fab.setBackgroundTintList(ColorStateList.valueOf(getContext().getResources().getColor(R.color.teal_700)));
-            fab.setImageDrawable(getResources().getDrawable(R.drawable.baseline_add_24));
-
-            fab.setOnClickListener(view12 -> actionOnPlusButton(false));
-
-            fab.setOnLongClickListener(view1 -> {
-                actionOnPlusButton(true);
-                return true;
-            });
-        } else {
-            LinearLayout linearLayout = view.findViewById(R.id.layout_session_active);
-            linearLayout.setVisibility(View.VISIBLE);
-
-            TextView no_active_session = view.findViewById(R.id.layout_no_session_active);
-            no_active_session.setVisibility(View.GONE);
-
-            ImageButton see_curr_session = view.findViewById(R.id.see_current_session);
-            see_curr_session.setVisibility(View.VISIBLE);
-
-            fab.setBackgroundTintList(ColorStateList.valueOf(getContext().getResources().getColor(android.R.color.holo_red_dark)));
-            fab.setImageDrawable(getResources().getDrawable(R.drawable.outline_close_24));
-            fab.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    dbManager.endSession(dbManager.getLastRunningEntry().getId());
-                    updateDesign();
-                }
-            });
-        }
-        updateHistoryList();
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-
-        dbManager = MainActivity.getDbManager();
-        dataModels = new ArrayList<>();
-
-        viewGroup = view.findViewById(R.id.list_history);
-
-        progress_bar = view.findViewById(R.id.progress_bar);
-        progress_bar_text = view.findViewById(R.id.text_view_progress);
-
-        test = view.findViewById(R.id.text_view_progress);
-
-        fab = view.findViewById(R.id.fab);
-
-        this.view = view;
-
-        getActivity().setTitle(R.string.app_name);
-        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
-
-        updateDesign();
-    }
-}
diff --git a/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java b/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java
new file mode 100644
index 0000000..be10f06
--- /dev/null
+++ b/app/src/main/java/com/lubenard/oring_reminder/ui/OldMainFragment.java
@@ -0,0 +1,226 @@
+package com.lubenard.oring_reminder.ui;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+
+import com.google.android.material.floatingactionbutton.FloatingActionButton;
+import com.lubenard.oring_reminder.MainActivity;
+import com.lubenard.oring_reminder.DbManager;
+import com.lubenard.oring_reminder.R;
+import com.lubenard.oring_reminder.custom_components.RingModel;
+import com.lubenard.oring_reminder.utils.Utils;
+
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.fragment.app.Fragment;
+import androidx.preference.PreferenceManager;
+import androidx.recyclerview.widget.DividerItemDecoration;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+
+import android.view.ViewGroup;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.concurrent.TimeUnit;
+
+public class OldMainFragment extends Fragment{
+
+    public static final String TAG = "MainFragment";
+
+    // We can set thoses variables as static, because we know the view is going to be created
+    private static ArrayList<RingModel> dataModels;
+    private static DbManager dbManager;
+    private static RecyclerView recyclerView;
+    private static Context context;
+    private static boolean orderEntryByDesc = true;
+    private static TextView statLastDayTextview;
+    private LinearLayoutManager linearLayoutManager;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setHasOptionsMenu(true);
+        return inflater.inflate(R.layout.fragment_main, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        getActivity().setTitle(R.string.app_name);
+        ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);
+
+        FloatingActionButton fab = view.findViewById(R.id.fab);
+
+        recyclerView = view.findViewById(R.id.main_list);
+
+        // Add dividers (like listView) to recyclerView
+        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(recyclerView.getContext(),
+                DividerItemDecoration.VERTICAL);
+        recyclerView.addItemDecoration(dividerItemDecoration);
+
+        linearLayoutManager = new LinearLayoutManager(getContext());
+        recyclerView.setLayoutManager(linearLayoutManager);
+
+        dataModels = new ArrayList<>();
+        dbManager = MainActivity.getDbManager();
+        context = getContext();
+
+        Log.d(TAG, "DB version is: " + dbManager.getVersion());
+
+        statLastDayTextview = view.findViewById(R.id.header_last_day);
+
+        fab.setOnClickListener(view12 -> actionOnPlusButton(false));
+
+        fab.setOnLongClickListener(view1 -> {
+            actionOnPlusButton(true);
+            return true;
+        });
+    }
+
+    /**
+     * Define what action should be done on longClick on the '+' button
+     * @param isLongClick act if it is a long click or not
+     */
+    private void actionOnPlusButton(boolean isLongClick) {
+        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);
+        String action = sharedPreferences.getString("ui_action_on_plus_button", "default");
+
+        if (isLongClick) {
+            if (action.equals("default")) {
+                createNewEntry();
+            } else {
+                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
+                EditEntryFragment.setUpdateMainList(true);
+                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
+            }
+        } else {
+            if (action.equals("default")) {
+                Toast.makeText(getContext(), "Session started at: " + Utils.getdateFormatted(new Date()), Toast.LENGTH_SHORT).show();
+                EditEntryFragment.setUpdateMainList(true);
+                new EditEntryFragment(getContext()).insertNewEntry(Utils.getdateFormatted(new Date()), false);
+            } else {
+                createNewEntry();
+            }
+        }
+    }
+
+
+    /**
+     * Recompute last 24 h header according to pauses
+     */
+    private static void recomputeLastWearingTime() {
+        int totalTimeLastDay = 0;
+        int pauseTimeForThisEntry = 0;
+        Calendar calendar = Calendar.getInstance();
+        String todayDate = Utils.getdateFormatted(calendar.getTime());
+        calendar.add(Calendar.HOUR_OF_DAY, -24);
+        String last24Hours = Utils.getdateFormatted(calendar.getTime());
+        Log.d(TAG, "Computing last 24 hours: interval is between: " + last24Hours + " and " + todayDate);
+        RingModel currentModel;
+        for (int i = 0; i != ((dataModels.size() > 5) ? 5 : dataModels.size()); i++) {
+            currentModel = dataModels.get(i);
+            pauseTimeForThisEntry = computeTotalTimePauseForId(dbManager, currentModel.getId(), last24Hours, todayDate);
+            if (currentModel.getIsRunning() == 0) {
+                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0 &&
+                        Utils.getDateDiff(currentModel.getDateRemoved(), todayDate, TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "entry at index " + i + " is added: " + dataModels.get(i).getTimeWeared());
+                    totalTimeLastDay += currentModel.getTimeWeared() - pauseTimeForThisEntry;
+                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0 &&
+                        Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(),  TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.SECONDS));
+                    totalTimeLastDay += Utils.getDateDiff(last24Hours, currentModel.getDateRemoved(), TimeUnit.MINUTES) - pauseTimeForThisEntry;
+                }
+            } else {
+                if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "running entry at index " + i + " is added: " + Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.SECONDS));
+                    totalTimeLastDay += Utils.getDateDiff(currentModel.getDatePut(), todayDate, TimeUnit.MINUTES) - pauseTimeForThisEntry;
+                } else if (Utils.getDateDiff(last24Hours, currentModel.getDatePut(), TimeUnit.SECONDS) <= 0) {
+                    Log.d(TAG, "running entry at index " + i + " is between the born: " + Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
+                    totalTimeLastDay += Utils.getDateDiff(last24Hours, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES) - pauseTimeForThisEntry;
+                }
+            }
+        }
+        Log.d(TAG, "Computed last 24 hours is: " + totalTimeLastDay + "mn");
+        statLastDayTextview.setText(context.getString(R.string.last_day_string_header) + String.format("%dh%02dm", totalTimeLastDay / 60, totalTimeLastDay % 60));
+    }
+
+    /**
+     * Compute all pause time into interval
+     * @param dbManager The database manager, avoiding to create a new instance
+     * @param entryId entry for the wanted session
+     * @param date24HoursAgo oldest boundaries
+     * @param dateNow interval newest boundaries
+     * @return the time in Minutes of pauses between the interval
+     */
+    public static int computeTotalTimePauseForId(DbManager dbManager, long entryId, String date24HoursAgo, String dateNow) {
+        ArrayList<RingModel> pausesDatas = dbManager.getAllPausesForId(entryId, true);
+        int totalTimePause = 0;
+        for (int i = 0; i < pausesDatas.size(); i++) {
+            RingModel currentBreak = pausesDatas.get(i);
+            if (pausesDatas.get(i).getIsRunning() == 0) {
+                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0 &&
+                        Utils.getDateDiff(currentBreak.getDatePut(), dateNow, TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "pause at index " + i + " is added: " + pausesDatas.get(i).getTimeWeared());
+                    totalTimePause += currentBreak.getTimeWeared();
+                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0 &&
+                        Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.SECONDS));
+                    totalTimePause += Utils.getDateDiff(date24HoursAgo, currentBreak.getDatePut(), TimeUnit.MINUTES);
+                }
+            } else {
+                if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) > 0) {
+                    Log.d(TAG, "running pause at index " + i + " is added: " + Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.SECONDS));
+                    totalTimePause += Utils.getDateDiff(currentBreak.getDateRemoved(), dateNow, TimeUnit.MINUTES);
+                } else if (Utils.getDateDiff(date24HoursAgo, currentBreak.getDateRemoved(), TimeUnit.SECONDS) <= 0) {
+                    Log.d(TAG, "running pause at index " + i + " is between the born: " + Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES));
+                    totalTimePause += Utils.getDateDiff(date24HoursAgo, Utils.getdateFormatted(new Date()), TimeUnit.MINUTES);
+                }
+            }
+        }
+        return totalTimePause;
+    }
+
+    /**
+     * Launch the new Entry fragment, and specify we do not want to update a entry
+     */
+    private void createNewEntry() {
+        EditEntryFragment fragment = new EditEntryFragment(getContext());
+        Bundle bundle = new Bundle();
+        bundle.putLong("entryId", -1);
+        fragment.setArguments(bundle);
+        getActivity().getSupportFragmentManager().beginTransaction()
+                .replace(android.R.id.content, fragment, null)
+                .addToBackStack(null).commit();
+    }
+
+    /**
+     * onClickManager handling clicks on the main List
+     */
+    /*@Override
+    public void onListItemClickListener(int position) {
+        RingModel dataModel= dataModels.get(position);
+        Log.d(TAG, "Element " + dataModel.getId());
+        EntryDetailsFragment fragment = new EntryDetailsFragment();
+        Bundle bundle = new Bundle();
+        bundle.putLong("entryId", dataModel.getId());
+        fragment.setArguments(bundle);
+        getActivity().getSupportFragmentManager().beginTransaction()
+                .replace(android.R.id.content, fragment, null)
+                .addToBackStack(null).commit();
+    }*/
+}
\ No newline at end of file
