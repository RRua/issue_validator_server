diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java b/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
index adb72e3..d4c2c6f 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/TestUtils.java
@@ -18,13 +18,21 @@ import android.support.test.uiautomator.UiSelector;
 import android.support.v4.content.ContextCompat;
 import android.support.v7.widget.Toolbar;
 
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.utils.CommonUtils;
+
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 import static android.support.test.InstrumentationRegistry.getInstrumentation;
 import static android.support.test.runner.lifecycle.Stage.RESUMED;
 
 public class TestUtils {
 
+    public static String KEY_PREFIX = CommonUtils.charRepeat('A', 21);
+
     private static void rotateToLandscape(ActivityTestRule<? extends Activity> activity) {
         activity.getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
     }
@@ -111,4 +119,24 @@ public class TestUtils {
             System.out.println("There is not permissions dialog to interact with");
         }
     }
+
+    public static List<Favorite> buildFavorites() {
+        final List<Tag> FAVORITE_TAGS = new ArrayList<Tag>() {{
+            add(new Tag("first"));
+            add(new Tag("second"));
+        }};
+        final List<Tag> FAVORITE_TAGS2 = new ArrayList<Tag>() {{
+            addAll(FAVORITE_TAGS);
+            add(new Tag("third"));
+        }};
+        final List<Tag> FAVORITE_TAGS3 = new ArrayList<Tag>() {{
+            addAll(FAVORITE_TAGS2);
+            add(new Tag("fourth"));
+        }};
+        return new ArrayList<Favorite>() {{
+            add(new Favorite(KEY_PREFIX + 'A', "Favorite", FAVORITE_TAGS));
+            add(new Favorite(KEY_PREFIX + 'B', "Favorite #2", FAVORITE_TAGS2));
+            add(new Favorite(KEY_PREFIX + 'C', "Favorite #3", FAVORITE_TAGS3));
+        }};
+    }
 }
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java
index 9d8bf1b..dff90b1 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivityTest.java
@@ -14,6 +14,9 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import java.util.Arrays;
+import java.util.stream.Collectors;
+
 import static android.support.test.espresso.Espresso.onView;
 import static android.support.test.espresso.action.ViewActions.closeSoftKeyboard;
 import static android.support.test.espresso.action.ViewActions.typeText;
@@ -27,8 +30,7 @@ import static org.hamcrest.Matchers.containsString;
 public class AddEditFavoriteActivityTest {
 
     private final String FAVORITE_NAME = "Favorite";
-    // last tag is not completed
-    private final String FAVORITE_TAGS = "first second third";
+    private final String[] FAVORITE_TAGS = new String[]{"first", "second",  "third"};
 
     @Rule
     public ActivityTestRule<AddEditFavoriteActivity> addEditFavoriteActivityTestRule =
@@ -47,13 +49,15 @@ public class AddEditFavoriteActivityTest {
     }
 
     @Test
-    public void orientationChange_EditTextFieldsPersists() throws InterruptedException {
-        fillFavoriteFields(FAVORITE_NAME, FAVORITE_TAGS);
+    public void orientationChange_editTextFieldsPersists() throws InterruptedException {
+        // NOTE: last tag is incomplete if there is no a space at the end
+        String tags = Arrays.stream(FAVORITE_TAGS).collect(Collectors.joining(" "));
+        fillFavoriteFields(FAVORITE_NAME, tags);
 
         TestUtils.rotateOrientation(addEditFavoriteActivityTestRule);
 
         onView(withId(R.id.favorite_name)).check(matches(withText(FAVORITE_NAME)));
-        String uncompletedTag = FAVORITE_TAGS.split(" ")[2];
+        String uncompletedTag = FAVORITE_TAGS[FAVORITE_TAGS.length - 1];
         onView(withId(R.id.favorite_tags)).check(matches(withText(containsString(uncompletedTag))));
     }
 
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderFavoritesTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderFavoritesTest.java
new file mode 100644
index 0000000..78ec72b
--- /dev/null
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderFavoritesTest.java
@@ -0,0 +1,222 @@
+package com.bytesforge.linkasanote.data.source;
+
+import android.content.ContentResolver;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+import android.test.ProviderTestCase2;
+
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.data.source.local.LocalContract;
+import com.bytesforge.linkasanote.utils.CommonUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+@RunWith(AndroidJUnit4.class)
+public class ProviderFavoritesTest extends ProviderTestCase2<Provider> {
+
+    private final String KEY_PREFIX = CommonUtils.charRepeat('A', 21);
+    private final String[] ENTRY_KEYS;
+    private final List<Tag> FAVORITE_TAGS;
+    private final String[] FAVORITE_NAMES;
+
+    private ContentResolver contentResolver;
+    private Provider provider;
+
+    public ProviderFavoritesTest() {
+        super(Provider.class, LocalContract.CONTENT_AUTHORITY);
+
+        ENTRY_KEYS = new String[]{KEY_PREFIX + 'A', KEY_PREFIX + 'B'};
+        FAVORITE_NAMES = new String[]{"Favorite", "Favorite #2"};
+        FAVORITE_TAGS = new ArrayList<Tag>() {{
+            add(new Tag("first"));
+            add(new Tag("second"));
+            add(new Tag("third"));
+        }};
+    }
+
+    @Before
+    @Override
+    public void setUp() throws Exception {
+        setContext(InstrumentationRegistry.getTargetContext());
+        super.setUp();
+
+        contentResolver = getMockContentResolver();
+        provider = getProvider();
+    }
+
+    @Test
+    public void provider_insertFavoriteEntry() {
+        final String favoriteId = ENTRY_KEYS[0];
+        final Favorite favorite = new Favorite(favoriteId, FAVORITE_NAMES[0], FAVORITE_TAGS);
+
+        insertFavoriteOnly(favorite);
+        Favorite savedFavorite = queryFavoriteOnly(favoriteId, FAVORITE_TAGS);
+        assertEquals(favorite, savedFavorite);
+    }
+
+    @Test
+    public void provider_insertFavoriteEntryWithTags() {
+        final String favoriteId = ENTRY_KEYS[0];
+        final Favorite favorite = new Favorite(favoriteId, FAVORITE_NAMES[0], FAVORITE_TAGS);
+
+        insertFavoriteWithTags(favorite);
+        Favorite savedFavorite = queryFavoriteWithTags(favoriteId);
+        assertEquals(favorite, savedFavorite);
+    }
+
+    @Test
+    public void provider_deleteFavoriteButLeaveTags() {
+        final String favoriteId = ENTRY_KEYS[0];
+        final Favorite favorite = new Favorite(favoriteId, FAVORITE_NAMES[0], FAVORITE_TAGS);
+
+        insertFavoriteWithTags(favorite);
+        List<Tag> tags = queryAllTags();
+        assertEquals(FAVORITE_TAGS, tags);
+
+        int numRows = deleteFavorite(favoriteId);
+        assertThat(numRows, equalTo(1));
+
+        tags = queryAllTags();
+        assertEquals(FAVORITE_TAGS, tags);
+    }
+
+    @Test
+    public void provider_updateFavoriteEntry() {
+        final String favoriteId = ENTRY_KEYS[0];
+        final Favorite favorite = new Favorite(favoriteId, FAVORITE_NAMES[0], FAVORITE_TAGS);
+        insertFavoriteWithTags(favorite);
+
+        FAVORITE_TAGS.add(new Tag("four"));
+        final Favorite updatedFavorite = new Favorite(favoriteId, FAVORITE_NAMES[1], FAVORITE_TAGS);
+        insertFavoriteWithTags(updatedFavorite);
+
+        Favorite savedFavorite = queryFavoriteWithTags(favoriteId);
+        assertEquals(updatedFavorite, savedFavorite);
+
+        List<Tag> tags = queryAllTags();
+        assertEquals(FAVORITE_TAGS, tags);
+    }
+
+    private int deleteFavorite(String favoriteId) {
+        final Uri favoriteUri = LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId);
+
+        String selection = LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID + " = ?";
+        String[] selectionArgs = new String[]{favoriteId};
+        return contentResolver.delete(favoriteUri, selection, selectionArgs);
+    }
+
+    @NonNull
+    private String insertFavoriteOnly(Favorite favorite) {
+        final Uri favoritesUri = LocalContract.FavoriteEntry.buildFavoritesUri();
+
+        Uri newFavoriteUri = contentResolver.insert(favoritesUri, favorite.getContentValues());
+        assertNotNull(newFavoriteUri);
+
+        String newFavoriteRowId = LocalContract.FavoriteEntry.getFavoriteId(newFavoriteUri);
+        assertNotNull(newFavoriteRowId);
+        assertTrue(Long.parseLong(newFavoriteRowId) > 0);
+        return newFavoriteRowId;
+    }
+
+    @NonNull
+    private String insertFavoriteTag(String favoriteRowId, Tag tag) {
+        final Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(favoriteRowId);
+
+        ContentValues values = tag.getContentValues();
+        Uri newTagUri = contentResolver.insert(favoriteTagsUri, values);
+        assertNotNull(newTagUri);
+
+        String newTagRowId = LocalContract.TagEntry.getTagId(newTagUri);
+        assertNotNull(newTagRowId);
+        assertTrue(Long.parseLong(newTagRowId) > 0);
+        return newTagRowId;
+    }
+
+    @NonNull
+    private String insertFavoriteWithTags(Favorite favorite) {
+        String favoriteRowId = insertFavoriteOnly(favorite);
+        List<Tag> tags = favorite.getTags();
+        assertNotNull(tags);
+        for (Tag tag : tags) insertFavoriteTag(favoriteRowId, tag);
+
+        List<Tag> savedTags = queryFavoriteTags(favoriteRowId);
+        assertEquals(tags, savedTags);
+
+        return favoriteRowId;
+    }
+
+
+    @NonNull
+    private Favorite queryFavoriteOnly(String favoriteId, List<Tag> tags) {
+        assertNotNull(favoriteId);
+        assertNotNull(tags);
+        final Uri favoriteUri = LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId);
+
+        Cursor cursor = provider.query(favoriteUri, null, null, new String[]{}, null);
+        assertNotNull(cursor);
+        assertThat(cursor.getCount(), equalTo(1));
+        try {
+            cursor.moveToLast();
+            return Favorite.from(cursor, tags);
+        } finally {
+            cursor.close();
+        }
+    }
+
+    @NonNull
+    private Favorite queryFavoriteWithTags(String favoriteId) {
+        assertNotNull(favoriteId);
+        final Uri favoriteUri = LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId);
+
+        Cursor cursor = provider.query(favoriteUri, null, null, new String[]{}, null);
+        assertNotNull(cursor);
+        assertThat(cursor.getCount(), equalTo(1));
+        try {
+            cursor.moveToLast();
+            long rowId = Favorite.rowIdFrom(cursor);
+            return Favorite.from(cursor, queryFavoriteTags(Long.toString(rowId)));
+        } finally {
+            cursor.close();
+        }
+    }
+
+    @NonNull
+    private List<Tag> queryFavoriteTags(String favoriteRowId) {
+        final Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(favoriteRowId);
+
+        Cursor cursor = provider.query(favoriteTagsUri, null, null, new String[]{}, null);
+        assertNotNull(cursor);
+
+        List<Tag> tags = new ArrayList<>();
+        while (cursor.moveToNext()) tags.add(Tag.from(cursor));
+        cursor.close();
+
+        return tags;
+    }
+
+    @NonNull
+    private List<Tag> queryAllTags() {
+        final Uri tagsUri = LocalContract.TagEntry.buildTagsUri();
+        Cursor cursor = provider.query(tagsUri, null, null, new String[]{}, null);
+        assertNotNull(cursor);
+
+        List<Tag> tags = new ArrayList<>();
+        while (cursor.moveToNext()) tags.add(Tag.from(cursor));
+        cursor.close();
+
+        return tags;
+    }
+}
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderLinksTest.java
similarity index 50%
rename from app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java
rename to app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderLinksTest.java
index 53093fe..b7e6e22 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/ProviderLinksTest.java
@@ -1,16 +1,13 @@
 package com.bytesforge.linkasanote.data.source;
 
 import android.content.ContentResolver;
-import android.content.ContentValues;
 import android.database.Cursor;
 import android.net.Uri;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.runner.AndroidJUnit4;
 import android.test.ProviderTestCase2;
 
-import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Link;
-import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.local.LocalContract;
 import com.bytesforge.linkasanote.utils.CommonUtils;
 
@@ -18,31 +15,21 @@ import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 @RunWith(AndroidJUnit4.class)
-public class ProviderTest extends ProviderTestCase2<Provider> {
+public class ProviderLinksTest extends ProviderTestCase2<Provider> {
 
     private final String ENTRY_KEY = CommonUtils.charRepeat('A', 22);
-    private final List<Tag> TAGS;
     private final String LINK_VALUE = "http://laano.net/link";
     private final String LINK_TITLE = "Title of the Link";
-    private final String FAVORITE_NAME = "Favorite";
 
     private ContentResolver contentResolver;
     private Provider provider;
 
-    public ProviderTest() {
+    public ProviderLinksTest() {
         super(Provider.class, LocalContract.CONTENT_AUTHORITY);
-
-        TAGS = new ArrayList<>();
-        TAGS.add(new Tag("first"));
-        TAGS.add(new Tag("second"));
-        TAGS.add(new Tag("third"));
     }
 
     @Before
@@ -72,36 +59,4 @@ public class ProviderTest extends ProviderTestCase2<Provider> {
 
         // TODO: complete the test
     }
-
-    @Test
-    public void provider_insertsValidFavoriteEntryWithTags() {
-        final Uri insertUri = LocalContract.FavoriteEntry.buildFavoritesUri();
-        final Favorite favorite = new Favorite(ENTRY_KEY, FAVORITE_NAME, TAGS);
-
-        // Favorite
-        Uri newFavoriteUri = contentResolver.insert(insertUri, favorite.getContentValues());
-        assertNotNull(newFavoriteUri);
-        assertTrue(Long.parseLong(LocalContract.FavoriteEntry.getFavoriteId(newFavoriteUri)) > 0);
-
-        Uri favoriteUri = LocalContract.FavoriteEntry.buildFavoritesUriWith(favorite.getId());
-        Cursor cursor = provider.query(favoriteUri, null, null, new String[]{}, null);
-        assertNotNull(cursor);
-        assertThat(cursor.getCount(), equalTo(1));
-        cursor.close();
-
-        // Tags
-        Uri tagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(
-                LocalContract.FavoriteEntry.getFavoriteId(newFavoriteUri));
-        for (Tag tag : favorite.getTags()) {
-            ContentValues values = tag.getContentValues();
-            Uri newTagUri = contentResolver.insert(tagsUri, values);
-            assertNotNull(newTagUri);
-            assertTrue(Long.parseLong(LocalContract.TagEntry.getTagId(newTagUri)) > 0);
-        }
-
-        cursor = provider.query(tagsUri, null, null, new String[]{}, null);
-        assertNotNull(cursor);
-        assertThat(cursor.getCount(), equalTo(TAGS.size()));
-        cursor.close();
-    }
 }
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/local/LocalDataSourceTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/local/LocalDataSourceTest.java
new file mode 100644
index 0000000..1fe4627
--- /dev/null
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/data/source/local/LocalDataSourceTest.java
@@ -0,0 +1,112 @@
+package com.bytesforge.linkasanote.data.source.local;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.filters.LargeTest;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.bytesforge.linkasanote.TestUtils;
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
+import com.bytesforge.linkasanote.utils.schedulers.ImmediateSchedulerProvider;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import io.reactivex.observers.TestObserver;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class LocalDataSourceTest {
+
+    private final Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();
+    private final BaseSchedulerProvider schedulerProvider;
+    private final ContentResolver contentResolver;
+    private LocalDataSource localDataSource;
+
+    private List<Favorite> FAVORITES;
+    private TestObserver<List<Favorite>> testFavoritesObserver;
+    private TestObserver<Favorite> testFavoriteObserver;
+
+    public LocalDataSourceTest() {
+        schedulerProvider = new ImmediateSchedulerProvider();
+        contentResolver = context.getContentResolver();
+    }
+
+    @Before
+    public void setupLocalDataSource() {
+        FAVORITES = TestUtils.buildFavorites();
+        localDataSource = new LocalDataSource(contentResolver);
+        cleanupLocalDataSource();
+    }
+
+    @After
+    public void cleanupLocalDataSource() {
+        localDataSource.deleteAllLinks();
+        localDataSource.deleteAllFavorites();
+        localDataSource.deleteAllNotes();
+        localDataSource.deleteAllTags();
+    }
+
+    @Test
+    public void saveFavorite_retrievesFavorite() {
+        Favorite favorite = FAVORITES.get(0);
+        // Preconditions
+        testFavoriteObserver = localDataSource.getFavorite(favorite.getId()).test();
+        testFavoriteObserver.assertError(NoSuchElementException.class);
+        // Test
+        localDataSource.saveFavorite(favorite);
+        testFavoriteObserver = localDataSource.getFavorite(favorite.getId()).test();
+        testFavoriteObserver.assertValue(favorite);
+
+    }
+
+    @Test
+    public void getFavorites_retrievesSavedFavorites() {
+        // Preconditions
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(Collections.emptyList());
+        for (Favorite favorite : FAVORITES) {
+            localDataSource.saveFavorite(favorite);
+        }
+        // Test
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(FAVORITES);
+    }
+
+    @Test
+    public void deleteAllFavorites_emptyListOfRetrievedFavorites() {
+        // Preconditions
+        for (Favorite favorite : FAVORITES) {
+            localDataSource.saveFavorite(favorite);
+        }
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(FAVORITES);
+        // Test
+        localDataSource.deleteAllFavorites();
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(Collections.emptyList());
+    }
+
+    @Test
+    public void deleteFavorite_remainsListOfOtherFavorites() {
+        // Preconditions
+        for (Favorite favorite : FAVORITES) {
+            localDataSource.saveFavorite(favorite);
+        }
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(FAVORITES);
+        // Test
+        Favorite favorite = FAVORITES.remove(0);
+        localDataSource.deleteFavorite(favorite.getId());
+        testFavoritesObserver = localDataSource.getFavorites().test();
+        testFavoritesObserver.assertValue(FAVORITES);
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/ApplicationNavigationTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/ApplicationNavigationTest.java
index 57319fd..85416f1 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/ApplicationNavigationTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/ApplicationNavigationTest.java
@@ -34,9 +34,9 @@ import static android.support.test.espresso.matcher.ViewMatchers.withResourceNam
 import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static com.bytesforge.linkasanote.EspressoMatchers.withItemTextId;
 import static com.bytesforge.linkasanote.TestUtils.getToolbarNavigationContentDescription;
+import static junit.framework.Assert.assertNotNull;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.Matchers.allOf;
-import static org.hamcrest.Matchers.notNullValue;
 
 @RunWith(AndroidJUnit4.class)
 @LargeTest
@@ -58,10 +58,10 @@ public class ApplicationNavigationTest {
     @Before
     public void setupActivity() {
         activity = laanoActivityTestRule.getActivity();
-        assertThat(activity, notNullValue());
+        assertNotNull(activity);
 
         Resources resources = activity.getResources();
-        assertThat(resources, notNullValue());
+        assertNotNull(resources);
 
         LINKS_TITLE = resources.getString(R.string.laano_tab_links_title);
         FAVORITES_TITLE = resources.getString(R.string.laano_tab_favorites_title);
@@ -69,7 +69,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void clickOnAndroidHomeIcon_OpensNavigation() {
+    public void clickOnAndroidHomeIcon_opensNavigation() {
         onView(withId(R.id.drawer_layout)).check(matches(isClosed(Gravity.START)));
 
         onView(withContentDescription(getToolbarNavigationContentDescription(
@@ -79,7 +79,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void swipeLeftViewPager_SwitchesTab() {
+    public void swipeLeftViewPager_switchesTab() {
         // Links
         onView(withId(R.id.laano_view_pager)).check(matches(isDisplayed()));
         assertThat((activity.getCurrentFragment()).getTitle(), Matchers.equalTo(LINKS_TITLE));
@@ -95,7 +95,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void clickOnTab_SwitchesTab() {
+    public void clickOnTab_switchesTab() {
         // Links
         onView(withItemTextId(LINKS_TITLE, R.id.tab_layout))
             .perform(click())
@@ -117,7 +117,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void clickOnSettingsNavigationItem_ShowsSettingsScreen_And_ClickOnHomeIcon_ClosesIt() {
+    public void clickOnSettingsNavigationItem_showsSettingsScreenAndClickOnHomeIcon_closesIt() {
         // Open
         onView(withId(R.id.drawer_layout))
                 .check(matches(isClosed(Gravity.START)))
@@ -133,7 +133,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void clickOnAddAccountNavigationItem_ShowsAddAccountScreen() {
+    public void clickOnAddAccountNavigationItem_showsAddAccountScreen() {
         onView(withId(R.id.drawer_layout))
                 .check(matches(isClosed(Gravity.START)))
                 .perform(DrawerActions.open());
@@ -143,7 +143,7 @@ public class ApplicationNavigationTest {
     }
 
     @Test
-    public void clickOnManageAccounts_ShowsManageAccountsScreen_And_ClickOnHomeIcon_ClosesIt() {
+    public void clickOnManageAccounts_showsManageAccountsScreenAndClickOnHomeIconClosesIt() {
         // Open
         onView(withId(R.id.drawer_layout))
                 .check(matches(isClosed(Gravity.START)))
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
index 16801b4..ce34018 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/FavoritesTabTest.java
@@ -1,83 +1,143 @@
 package com.bytesforge.linkasanote.laano;
 
+import android.content.Context;
 import android.content.res.Resources;
 import android.support.test.InstrumentationRegistry;
 import android.support.test.espresso.Espresso;
+import android.support.test.espresso.contrib.RecyclerViewActions;
 import android.support.test.filters.LargeTest;
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 
+import com.bytesforge.linkasanote.ApplicationComponent;
+import com.bytesforge.linkasanote.ApplicationModule;
+import com.bytesforge.linkasanote.DaggerApplicationComponent;
 import com.bytesforge.linkasanote.LaanoApplication;
 import com.bytesforge.linkasanote.R;
 import com.bytesforge.linkasanote.TestUtils;
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.source.Cloud;
+import com.bytesforge.linkasanote.data.source.DataSource;
+import com.bytesforge.linkasanote.data.source.Local;
+import com.bytesforge.linkasanote.data.source.ProviderModule;
 import com.bytesforge.linkasanote.data.source.Repository;
+import com.bytesforge.linkasanote.data.source.RepositoryModule;
 import com.bytesforge.linkasanote.laano.favorites.FavoritesFragment;
+import com.bytesforge.linkasanote.settings.SettingsModule;
+import com.bytesforge.linkasanote.utils.schedulers.SchedulerProviderModule;
 
 import org.hamcrest.Matchers;
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import io.reactivex.Single;
+
 import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;
 import static android.support.test.espresso.action.ViewActions.click;
-import static android.support.test.espresso.action.ViewActions.closeSoftKeyboard;
-import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.action.ViewActions.longClick;
+import static android.support.test.espresso.assertion.ViewAssertions.doesNotExist;
 import static android.support.test.espresso.assertion.ViewAssertions.matches;
 import static android.support.test.espresso.matcher.ViewMatchers.assertThat;
+import static android.support.test.espresso.matcher.ViewMatchers.isChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.isNotChecked;
 import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
 import static com.bytesforge.linkasanote.EspressoMatchers.withItemTextId;
 import static com.bytesforge.linkasanote.EspressoMatchers.withItemTextRV;
+import static junit.framework.Assert.assertNotNull;
 import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.Matchers.notNullValue;
+import static org.mockito.Mockito.when;
 
 @RunWith(AndroidJUnit4.class)
 @LargeTest
 public class FavoritesTabTest {
 
-    private final List<String> FAVORITE_NAMES;
-    // last space to complete tag and close suggestions
-    private final String TAGS = "first second third ";
+    private Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();
+    private LaanoApplication laanoApplication = (LaanoApplication) context.getApplicationContext();
+
+    private String LINKS_TITLE;
+    private String FAVORITES_TITLE;
 
-    private Repository repository;
+    @Mock
+    Repository mockRepository;
 
     @Rule
     public ActivityTestRule<LaanoActivity> laanoActivityTestRule =
-            new ActivityTestRule<LaanoActivity>(LaanoActivity.class) {
+            new ActivityTestRule<LaanoActivity>(LaanoActivity.class, false, false) {
+                private ApplicationComponent applicationComponent;
 
                 @Override
                 protected void beforeActivityLaunched() {
                     super.beforeActivityLaunched();
-                    // TODO: fix data loss on non-test DB; testApplicationId is not enough
-                    repository = ((LaanoApplication) InstrumentationRegistry
-                            .getInstrumentation()
-                            .getTargetContext().getApplicationContext())
-                            .getApplicationComponent().getRepository();
-                    repository.deleteAllFavorites();
-                    repository.deleteAllTags();
+                    applicationComponent = setupMockApplicationComponent(mockRepository);
+                }
+
+                @Override
+                protected void afterActivityLaunched() {
+                    super.afterActivityLaunched();
+                    setupTab();
+                    registerIdlingResource();
+                }
+
+                @Override
+                protected void afterActivityFinished() {
+                    super.afterActivityFinished();
+                    unregisterIdlingResource();
+                    restoreApplicationComponent(applicationComponent);
                 }
             };
 
+    private final List<Favorite> FAVORITES;
+
     public FavoritesTabTest() {
-        FAVORITE_NAMES = new ArrayList<>();
-        FAVORITE_NAMES.add("Favorite");
-        FAVORITE_NAMES.add("Favorite #2");
+        MockitoAnnotations.initMocks(this);
+        FAVORITES = TestUtils.buildFavorites();
     }
 
-    @Before
-    public void setupTab() {
+    private ApplicationComponent setupMockApplicationComponent(Repository repository) {
+        ApplicationComponent oldApplicationComponent = laanoApplication.getApplicationComponent();
+        /*RepositoryModule repositoryModule = Mockito.spy(new RepositoryModule());
+        Mockito.doReturn(repository).when(repositoryModule)
+                .provideRepository(any(DataSource.class), any(DataSource.class));*/
+        ApplicationComponent applicationComponent = DaggerApplicationComponent.builder()
+                .applicationModule(new ApplicationModule(laanoApplication))
+                .settingsModule(new SettingsModule())
+                .repositoryModule(new RepositoryModule() {
+                    @Override
+                    public Repository provideRepository(
+                            @Local DataSource localDataSource,
+                            @Cloud DataSource cloudDataSource) {
+                        return repository;
+                    }
+                })
+                .providerModule(new ProviderModule())
+                .schedulerProviderModule(new SchedulerProviderModule())
+                .build();
+        laanoApplication.setApplicationComponent(applicationComponent);
+        return oldApplicationComponent;
+    }
+
+    private void restoreApplicationComponent(ApplicationComponent applicationComponent) {
+        laanoApplication.setApplicationComponent(applicationComponent);
+    }
+
+    private void setupTab() { // @Before
         // Activity
         LaanoActivity laanoActivity = laanoActivityTestRule.getActivity();
-        assertThat(laanoActivity, notNullValue());
+        assertNotNull(laanoActivity);
 
         Resources resources = laanoActivity.getResources();
-        assertThat(resources, notNullValue());
-        String FAVORITES_TITLE = resources.getString(R.string.laano_tab_favorites_title);
+        assertNotNull(resources);
+        LINKS_TITLE = resources.getString(R.string.laano_tab_links_title);
+        FAVORITES_TITLE = resources.getString(R.string.laano_tab_favorites_title);
 
         // Tab
         onView(withItemTextId(FAVORITES_TITLE, R.id.tab_layout))
@@ -87,40 +147,102 @@ public class FavoritesTabTest {
         assertThat(laanoActivity.getCurrentFragment(), instanceOf(FavoritesFragment.class));
     }
 
-    @Before
-    public void registerIdlingResource() {
+    private void registerIdlingResource() { // @Before
         Espresso.registerIdlingResources(
                 laanoActivityTestRule.getActivity().getCountingIdlingResource());
     }
 
-    @After
-    public void unregisterIdlingResource() {
+    private void unregisterIdlingResource() { // @After
         Espresso.unregisterIdlingResources(
                 laanoActivityTestRule.getActivity().getCountingIdlingResource());
     }
 
     @Test
-    public void addFavoritesToFavoritesRecyclerView_checkIfPersistOnOrientationChange() {
-        repository.cacheIsDirty = true;
-        for (String name : FAVORITE_NAMES) {
-            createFavorite(name, TAGS);
-        }
-        for (String name : FAVORITE_NAMES) {
-            onView(withItemTextRV(name)).check(matches(isDisplayed()));
+    public void addFavoritesToFavoritesRecyclerView_CheckIfPersistOnOrientationChange() {
+        when(mockRepository.getFavorites()).thenReturn(Single.just(FAVORITES));
+        laanoActivityTestRule.launchActivity(null);
+
+        for (Favorite favorite : FAVORITES) {
+            onView(withItemTextRV(favorite.getName())).check(matches(isDisplayed()));
         }
         TestUtils.rotateOrientation(laanoActivityTestRule);
-        for (String name : FAVORITE_NAMES) {
-            onView(withItemTextRV(name)).check(matches(isDisplayed()));
+        for (Favorite favorite : FAVORITES) {
+            onView(withItemTextRV(favorite.getName())).check(matches(isDisplayed()));
         }
     }
 
-    private void createFavorite(String name, String tags) {
-        onView(withId(R.id.fab_add)).perform(click());
-        onView(withId(R.id.favorite_name)).check(matches(isDisplayed()));
+    @Test
+    public void clickOnActionModeMenuItem_switchesToActionMode() {
+        List<Favorite> favorites = new ArrayList<>();
+        favorites.add(FAVORITES.get(0));
+        when(mockRepository.getFavorites()).thenReturn(Single.just(favorites));
+        laanoActivityTestRule.launchActivity(null);
+
+        openActionBarOverflowOrOptionsMenu(context);
+        // NOTE: R.id.toolbar_favorite_action_mode does not work
+        onView(withText(R.string.toolbar_item_action_mode)).perform(click());
+        onView(withText(context.getResources()
+                .getString(R.string.laano_favorites_action_mode_selected, 0)))
+                .check(matches(isDisplayed()));
+        onView(withId(R.id.favorites_delete)).check(matches(isDisplayed()));
+        onView(withId(R.id.favorite_checkbox)).check(matches(isNotChecked()));
+        onView(withId(R.id.favorite_edit)).check(matches(isDisplayed()));
+    }
+
+    @Test
+    public void longClickOnRecyclerViewItem_switchesToActionModeAndSelectCurrentOne() {
+        List<Favorite> favorites = new ArrayList<>();
+        favorites.add(FAVORITES.get(0));
+        when(mockRepository.getFavorites()).thenReturn(Single.just(favorites));
+        laanoActivityTestRule.launchActivity(null);
+
+        onView(withId(R.id.rv_favorites))
+                .perform(RecyclerViewActions.actionOnItemAtPosition(0, longClick()));
+        onView(withText(context.getResources()
+                .getString(R.string.laano_favorites_action_mode_selected, 1)))
+                .check(matches(isDisplayed()));
+        onView(withId(R.id.favorites_delete)).check(matches(isDisplayed()));
+        onView(withId(R.id.favorite_checkbox)).check(matches(isChecked()));
+        onView(withId(R.id.favorite_edit)).check(matches(isDisplayed()));
+    }
+
+    @Test
+    public void actionMode_persistsOnOrientationChange() {
+        List<Favorite> favorites = new ArrayList<>();
+        favorites.add(FAVORITES.get(0));
+        when(mockRepository.getFavorites()).thenReturn(Single.just(favorites));
+        laanoActivityTestRule.launchActivity(null);
+
+        onView(withId(R.id.rv_favorites))
+                .perform(RecyclerViewActions.actionOnItemAtPosition(0, longClick()));
+        TestUtils.rotateOrientation(laanoActivityTestRule);
+        onView(withText(context.getResources()
+                .getString(R.string.laano_favorites_action_mode_selected, 1)))
+                .check(matches(isDisplayed()));
+        onView(withId(R.id.favorites_delete)).check(matches(isDisplayed()));
+        onView(withId(R.id.favorite_checkbox)).check(matches(isChecked()));
+        onView(withId(R.id.favorite_edit)).check(matches(isDisplayed()));
+    }
 
-        onView(withId(R.id.favorite_name)).perform(typeText(name), closeSoftKeyboard());
-        onView(withId(R.id.favorite_tags)).perform(typeText(tags), closeSoftKeyboard());
+    @Test
+    public void tagChange_disablesActionMode() {
+        List<Favorite> favorites = new ArrayList<>();
+        favorites.add(FAVORITES.get(0));
+        when(mockRepository.getFavorites()).thenReturn(Single.just(favorites));
+        laanoActivityTestRule.launchActivity(null);
+
+        onView(withId(R.id.rv_favorites))
+                .perform(RecyclerViewActions.actionOnItemAtPosition(0, longClick()));
+        onView(withItemTextId(LINKS_TITLE, R.id.tab_layout))
+                .perform(click())
+                .check(matches(isDisplayed()));
+        //onView(withId(laano_view_pager)).perform(swipeRight());
+        onView(withId(R.id.favorites_delete)).check(doesNotExist());
 
-        onView(withId(R.id.add_button)).perform(click());
+        onView(withItemTextId(FAVORITES_TITLE, R.id.tab_layout))
+                .perform(click())
+                .check(matches(isDisplayed()));
+        //onView(withId(laano_view_pager)).perform(swipeLeft());
+        onView(withId(R.id.favorites_delete)).check(doesNotExist());
     }
 }
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/laano/LaanoActivityTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/LaanoActivityTest.java
new file mode 100644
index 0000000..1aeb949
--- /dev/null
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/laano/LaanoActivityTest.java
@@ -0,0 +1,128 @@
+package com.bytesforge.linkasanote.laano;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.espresso.Espresso;
+import android.support.test.filters.LargeTest;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+
+import com.bytesforge.linkasanote.LaanoApplication;
+import com.bytesforge.linkasanote.R;
+import com.bytesforge.linkasanote.TestUtils;
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.data.source.Repository;
+import com.bytesforge.linkasanote.laano.favorites.FavoritesFragment;
+
+import org.hamcrest.Matchers;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.action.ViewActions.click;
+import static android.support.test.espresso.action.ViewActions.closeSoftKeyboard;
+import static android.support.test.espresso.action.ViewActions.typeText;
+import static android.support.test.espresso.assertion.ViewAssertions.matches;
+import static android.support.test.espresso.matcher.ViewMatchers.assertThat;
+import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static com.bytesforge.linkasanote.EspressoMatchers.withItemTextId;
+import static com.bytesforge.linkasanote.EspressoMatchers.withItemTextRV;
+import static junit.framework.Assert.assertNotNull;
+import static org.hamcrest.CoreMatchers.instanceOf;
+
+@RunWith(AndroidJUnit4.class)
+@LargeTest
+public class LaanoActivityTest {
+
+    private Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();
+    private Repository repository;
+
+    private final List<Favorite> FAVORITES;
+
+    @Rule
+    public ActivityTestRule<LaanoActivity> laanoActivityTestRule =
+            new ActivityTestRule<LaanoActivity>(LaanoActivity.class) {
+
+                @Override
+                protected void beforeActivityLaunched() {
+                    super.beforeActivityLaunched();
+                    repository = ((LaanoApplication) context.getApplicationContext())
+                            .getApplicationComponent().getRepository();
+                    cleanupRepository(repository);
+                }
+            };
+
+    public LaanoActivityTest() {
+        FAVORITES = TestUtils.buildFavorites();
+    }
+
+    private void cleanupRepository(Repository repository) {
+        // TODO: fix data loss on non-test DB
+        repository.deleteAllFavorites();
+        repository.deleteAllTags();
+    }
+
+    @Before
+    public void registerIdlingResource() {
+        Espresso.registerIdlingResources(
+                laanoActivityTestRule.getActivity().getCountingIdlingResource());
+    }
+
+    @After
+    public void unregisterIdlingResource() {
+        Espresso.unregisterIdlingResources(
+                laanoActivityTestRule.getActivity().getCountingIdlingResource());
+    }
+
+    @Test
+    public void fabButton_addFavoritesToFavoritesRecyclerView() {
+        repository.cacheIsDirty = true;
+        setupFavoritesTab();
+        FAVORITES.forEach(this::createFavorite);
+        for (Favorite favorite : FAVORITES) {
+            onView(withItemTextRV(favorite.getName())).check(matches(isDisplayed()));
+        }
+    }
+
+    private void setupFavoritesTab() {
+        // Activity
+        LaanoActivity laanoActivity = laanoActivityTestRule.getActivity();
+        assertNotNull(laanoActivity);
+
+        Resources resources = laanoActivity.getResources();
+        assertNotNull(resources);
+        String FAVORITES_TITLE = resources.getString(R.string.laano_tab_favorites_title);
+
+        // Tab
+        onView(withItemTextId(FAVORITES_TITLE, R.id.tab_layout))
+                .perform(click())
+                .check(matches(isDisplayed()));
+        assertThat((laanoActivity.getCurrentFragment()).getTitle(), Matchers.equalTo(FAVORITES_TITLE));
+        assertThat(laanoActivity.getCurrentFragment(), instanceOf(FavoritesFragment.class));
+    }
+
+    private void createFavorite(Favorite favorite) {
+        assertNotNull(favorite);
+        List<Tag> tags = favorite.getTags();
+        assertNotNull(tags);
+        String name = favorite.getName();
+        assertNotNull(name);
+        // NOTE: last tag complete if there is a space at the end
+        String tagLine = tags.stream().map(Tag::getName).collect(Collectors.joining(" ")) + " ";
+        //String tagLine = Arrays.stream(tags).collect(Collectors.joining(" ")) + " ";
+        onView(withId(R.id.fab_add)).perform(click());
+        onView(withId(R.id.favorite_name)).check(matches(isDisplayed()));
+        onView(withId(R.id.favorite_name)).perform(typeText(name), closeSoftKeyboard());
+        onView(withId(R.id.favorite_tags)).perform(typeText(tagLine), closeSoftKeyboard());
+        onView(withId(R.id.add_button)).perform(click());
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java b/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
index b9c8518..5ef6c0c 100644
--- a/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
+++ b/app/src/androidTest/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivityTest.java
@@ -79,23 +79,23 @@ public class ManageAccountsActivityTest {
     private static Account[] ACCOUNTS;
 
     @Mock
-    private AccountManager mockAccountManager;
+    AccountManager mockAccountManager;
 
     public ManageAccountsActivityTest() {
         ACCOUNT_TYPE = getAccountType(context);
         ACCOUNTS = new Account[]{new Account(USER_NAME + "@demo.nextcloud.com", ACCOUNT_TYPE)};
     }
 
-    public void setupManageAccountsActivity() { // @Before
+    private void setupManageAccountsActivity() { // @Before
         TestUtils.allowPermissionIfNeeded(Manifest.permission.GET_ACCOUNTS);
     }
 
-    public void registerIdlingResource() { // @Before
+    private void registerIdlingResource() { // @Before
         Espresso.registerIdlingResources(
                 manageAccountsActivityTestRule.getActivity().getCountingIdlingResource());
     }
 
-    public void unregisterIdlingResource() { // @After
+    private void unregisterIdlingResource() { // @After
         Espresso.unregisterIdlingResources(
                 manageAccountsActivityTestRule.getActivity().getCountingIdlingResource());
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java b/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
index 4cb30a1..9efb5bd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/ApplicationComponent.java
@@ -20,7 +20,6 @@ import com.bytesforge.linkasanote.manageaccounts.ManageAccountsPresenterModule;
 import com.bytesforge.linkasanote.settings.SettingsModule;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.bytesforge.linkasanote.utils.schedulers.SchedulerProviderModule;
-import com.squareup.sqlbrite.BriteContentResolver;
 
 import javax.inject.Singleton;
 
@@ -39,7 +38,6 @@ public interface ApplicationComponent {
     SharedPreferences getSharedPreferences();
     Repository getRepository();
     ContentResolver getContentResolver();
-    BriteContentResolver getBriteContentResolver();
     BaseSchedulerProvider getSchedulerProvider();
 
     // Subcomponents
diff --git a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
index 2b1eace..c70c2c4 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/LaanoApplication.java
@@ -15,7 +15,7 @@ import java.lang.ref.WeakReference;
 
 public class LaanoApplication extends Application {
 
-    ApplicationComponent applicationComponent;
+    private ApplicationComponent applicationComponent;
     private static WeakReference<Context> context;
 
     private static String applicationId;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
index 9a938e0..2733584 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudContract.java
@@ -38,7 +38,7 @@ public interface NextcloudContract {
     interface ViewModel extends BaseView<Presenter> {
 
         void setInstanceState(@Nullable Bundle savedInstanceState);
-        void loadInstanceState(@NonNull Bundle outState);
+        void saveInstanceState(@NonNull Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
         Bundle getDefaultInstanceState();
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
index 4464976..7f3ef2b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudFragment.java
@@ -133,7 +133,7 @@ public class NextcloudFragment extends Fragment implements
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        viewModel.loadInstanceState(outState);
+        viewModel.saveInstanceState(outState);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
index 8c997ac..f905166 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudPresenter.java
@@ -144,7 +144,7 @@ public final class NextcloudPresenter implements NextcloudContract.Presenter {
     @Override
     public Bundle getInstanceState() {
         Bundle state = new Bundle();
-        viewModel.loadInstanceState(state);
+        viewModel.saveInstanceState(state);
 
         return state;
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
index 4f25ef9..7cd5442 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditaccount/nextcloud/NextcloudViewModel.java
@@ -78,7 +78,7 @@ public class NextcloudViewModel extends BaseObservable implements NextcloudContr
     }
 
     @Override
-    public void loadInstanceState(@NonNull Bundle outState) {
+    public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
 
         outState.putBoolean(STATE_SERVER_URL, serverUrl.get());
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
index 2514a45..16a24e8 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteActivity.java
@@ -52,8 +52,9 @@ public class AddEditFavoriteActivity extends AppCompatActivity {
         }
         // Presenter
         LaanoApplication application = (LaanoApplication) getApplication();
-        application.getApplicationComponent().getAddEditFavoriteComponent(
-                new AddEditFavoritePresenterModule(this, fragment, favoriteId))
+        application.getApplicationComponent()
+                .getAddEditFavoriteComponent(
+                        new AddEditFavoritePresenterModule(this, fragment, favoriteId))
                 .inject(this);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
index 18cbdb4..da95968 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteContract.java
@@ -26,12 +26,13 @@ public interface AddEditFavoriteContract {
     interface ViewModel extends BaseView<Presenter> {
 
         void setInstanceState(@Nullable Bundle savedInstanceState);
-        void loadInstanceState(Bundle outState);
+        void saveInstanceState(Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
         Bundle getDefaultInstanceState();
 
         void setTagsCompletionView(@NonNull FavoriteTagsCompletionView completionView);
         void showEmptyFavoriteSnackbar();
+        void showFavoriteNotFoundSnackbar();
         void showDuplicateKeyError();
 
         boolean isValid();
@@ -48,6 +49,7 @@ public interface AddEditFavoriteContract {
     interface Presenter extends BasePresenter {
 
         boolean isNewFavorite();
+        void loadTags();
         void saveFavorite(String name, List<Tag> tags);
         void populateFavorite();
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
index 62235fa..2397f7a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteFragment.java
@@ -164,7 +164,7 @@ public class AddEditFavoriteFragment extends Fragment implements AddEditFavorite
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        viewModel.loadInstanceState(outState);
+        viewModel.saveInstanceState(outState);
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
index 4136b08..576cfd2 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenter.java
@@ -7,18 +7,19 @@ import android.support.annotation.Nullable;
 import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.Repository;
-import com.bytesforge.linkasanote.sync.SyncState;
 import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 import com.tokenautocomplete.TokenCompleteTextView;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import javax.inject.Inject;
 
-import rx.Observer;
-import rx.Subscription;
-import rx.subscriptions.CompositeSubscription;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
+
+import static com.google.common.base.Preconditions.checkNotNull;
 
 public final class AddEditFavoritePresenter implements
         AddEditFavoriteContract.Presenter, TokenCompleteTextView.TokenListener<Tag> {
@@ -27,10 +28,11 @@ public final class AddEditFavoritePresenter implements
     private final AddEditFavoriteContract.View view;
     private final AddEditFavoriteContract.ViewModel viewModel;
     private final BaseSchedulerProvider schedulerProvider;
-    private final String favoriteId;
+
+    private String favoriteId; // NOTE: can be reset to null if NoSuchElementException
 
     @NonNull
-    private final CompositeSubscription subscription;
+    private final CompositeDisposable disposable;
 
     @Inject
     AddEditFavoritePresenter(
@@ -44,7 +46,7 @@ public final class AddEditFavoritePresenter implements
         this.schedulerProvider = schedulerProvider;
         this.favoriteId = favoriteId;
 
-        subscription = new CompositeSubscription();
+        disposable = new CompositeDisposable();
     }
 
     @Inject
@@ -61,36 +63,27 @@ public final class AddEditFavoritePresenter implements
 
     @Override
     public void unsubscribe() {
-        subscription.clear();
+        disposable.clear();
     }
 
-    private void loadTags() {
+    @Override
+    public void loadTags() {
         EspressoIdlingResource.increment();
-        //subscription.clear(); // NOTE: stop all other subscriptions
+        //disposable.clear(); // NOTE: stop all other subscriptions
 
-        Subscription subscription = repository.getTags()
+        Disposable disposable = repository.getTags()
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doOnTerminate(() -> {
+                .doOnError(throwable -> view.swapTagsCompletionViewItems(new ArrayList<>()))
+                .doFinally(() -> {
                     if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
                         EspressoIdlingResource.decrement();
                     }
                 })
-                .subscribe(new Observer<List<Tag>>() {
-                    @Override
-                    public void onCompleted() {
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                    }
-
-                    @Override
-                    public void onNext(List<Tag> tags) {
-                        view.swapTagsCompletionViewItems(tags);
-                    }
+                .subscribe((tags, throwable) -> {
+                    if (tags != null) view.swapTagsCompletionViewItems(tags);
                 });
-        this.subscription.add(subscription);
+        this.disposable.add(disposable);
     }
 
     @Override
@@ -105,30 +98,25 @@ public final class AddEditFavoritePresenter implements
         }
         EspressoIdlingResource.increment();
 
-        Subscription subscription = repository.getFavorite(favoriteId)
+        Disposable disposable = repository.getFavorite(favoriteId)
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doOnTerminate(() -> {
+                .doOnError(throwable -> {
+                    favoriteId = null;
+                    viewModel.showFavoriteNotFoundSnackbar();
+                })
+                .doFinally(() -> {
                     if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
                         EspressoIdlingResource.decrement();
                     }
                 })
-                .subscribe(new Observer<Favorite>() {
-                    @Override
-                    public void onCompleted() {
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                    }
-
-                    @Override
-                    public void onNext(Favorite favorite) {
+                .subscribe((favorite, throwable) -> {
+                    if (favorite != null) {
                         view.setupFavoriteState(favorite);
                         viewModel.checkAddButton();
                     }
                 });
-        this.subscription.add(subscription);
+        this.disposable.add(disposable);
     }
 
     @Override
@@ -142,17 +130,7 @@ public final class AddEditFavoritePresenter implements
 
     private void createFavorite(String name, List<Tag> tags) {
         Favorite favorite = new Favorite(name, tags);
-        if (favorite.isEmpty()) {
-            viewModel.showEmptyFavoriteSnackbar();
-            return;
-        }
-        favorite.setSyncState(SyncState.State.UNSYNCED);
-        try {
-            repository.saveFavorite(favorite);
-            view.finishActivity();
-        } catch (SQLiteConstraintException e) {
-            viewModel.showDuplicateKeyError();
-        }
+        saveFavorite(favorite);
     }
 
     private void updateFavorite(String name, List<Tag> tags) {
@@ -160,11 +138,16 @@ public final class AddEditFavoritePresenter implements
             throw new RuntimeException("updateFavorite() was called but favoriteId is null");
         }
         Favorite favorite = new Favorite(favoriteId, name, tags);
+        saveFavorite(favorite);
+    }
+
+    private void saveFavorite(@NonNull final Favorite favorite) {
+        checkNotNull(favorite);
+
         if (favorite.isEmpty()) {
             viewModel.showEmptyFavoriteSnackbar();
             return;
         }
-        favorite.setSyncState(SyncState.State.UNSYNCED);
         try {
             repository.saveFavorite(favorite);
             view.finishActivity();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
index 0edc6ff..af41ecd 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoriteViewModel.java
@@ -38,7 +38,7 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     private Context context;
     private AddEditFavoriteContract.Presenter presenter;
 
-    public enum SnackbarId {FAVORITE_EMPTY};
+    public enum SnackbarId {FAVORITE_EMPTY, FAVORITE_NOT_FOUND};
 
     @Bindable
     public SnackbarId snackbarId;
@@ -60,7 +60,7 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
     }
 
     @Override
-    public void loadInstanceState(@NonNull Bundle outState) {
+    public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
 
         outState.putString(STATE_FAVORITE_NAME, favoriteName.get());
@@ -114,6 +114,11 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
                         R.string.add_edit_favorite_warning_empty,
                         Snackbar.LENGTH_LONG).show();
                 break;
+            case FAVORITE_NOT_FOUND:
+                Snackbar.make(view,
+                        R.string.add_edit_favorite_warning_not_existed,
+                        Snackbar.LENGTH_LONG).show();
+                break;
         }
     }
 
@@ -168,6 +173,12 @@ public class AddEditFavoriteViewModel extends BaseObservable implements
         notifyPropertyChanged(BR.snackbarId);
     }
 
+    @Override
+    public void showFavoriteNotFoundSnackbar() {
+        snackbarId = SnackbarId.FAVORITE_NOT_FOUND;
+        notifyPropertyChanged(BR.snackbarId);
+    }
+
     @Override
     public void showDuplicateKeyError() {
         nameErrorText = context.getResources().getString(
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
index 1cba83c..5a559b0 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/Favorite.java
@@ -71,6 +71,10 @@ public final class Favorite extends SyncState {
         this.tags = tags;
     }
 
+    public static long rowIdFrom(Cursor cursor) {
+        return cursor.getLong(cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID));
+    }
+
     public static Favorite from(Cursor cursor, List<Tag> tags) {
         String id = cursor.getString(cursor.getColumnIndexOrThrow(
                 LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID));
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
index a6aeef7..d9dcfaa 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/DataSource.java
@@ -9,28 +9,28 @@ import com.bytesforge.linkasanote.data.Tag;
 
 import java.util.List;
 
-import rx.Observable;
+import io.reactivex.Single;
 
 public interface DataSource {
 
-    Observable<List<Link>> getLinks();
-    Observable<Link> getLink(@NonNull String linkId);
+    Single<List<Link>> getLinks();
+    Single<Link> getLink(@NonNull String linkId);
     void saveLink(@NonNull Link link);
     void deleteAllLinks();
 
-    Observable<List<Note>> getNotes();
-    Observable<Note> getNote(@NonNull String noteId);
+    Single<List<Note>> getNotes();
+    Single<Note> getNote(@NonNull String noteId);
     void saveNote(@NonNull Note note);
     void deleteAllNotes();
 
-    Observable<List<Favorite>> getFavorites();
-    Observable<Favorite> getFavorite(@NonNull String favoriteId);
+    Single<List<Favorite>> getFavorites();
+    Single<Favorite> getFavorite(@NonNull String favoriteId);
     void saveFavorite(@NonNull Favorite favorite);
     void deleteAllFavorites();
     void deleteFavorite(@NonNull String favoriteId);
 
-    Observable<List<Tag>> getTags();
-    Observable<Tag> getTag(@NonNull String tagId);
+    Single<List<Tag>> getTags();
+    Single<Tag> getTag(@NonNull String tagId);
     void saveTag(@NonNull Tag tag);
     void deleteAllTags();
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
index dea7767..37ac9ff 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Provider.java
@@ -248,6 +248,11 @@ public class Provider extends ContentProvider {
             case FAVORITE:
                 tableName = LocalContract.FavoriteEntry.TABLE_NAME;
                 break;
+            case FAVORITE_ITEM:
+                tableName = LocalContract.FavoriteEntry.TABLE_NAME;
+                selection = LocalContract.FavoriteEntry.COLUMN_NAME_ENTRY_ID + " = ?";
+                selectionArgs = new String[]{LocalContract.FavoriteEntry.getFavoriteId(uri)};
+                break;
             case TAG:
                 tableName = LocalContract.TagEntry.TABLE_NAME;
                 break;
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/ProviderModule.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/ProviderModule.java
index da1fe08..d20189b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/ProviderModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/ProviderModule.java
@@ -3,10 +3,6 @@ package com.bytesforge.linkasanote.data.source;
 import android.content.ContentResolver;
 import android.content.Context;
 
-import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
-import com.squareup.sqlbrite.BriteContentResolver;
-import com.squareup.sqlbrite.SqlBrite;
-
 import javax.inject.Singleton;
 
 import dagger.Module;
@@ -17,22 +13,7 @@ public class ProviderModule {
 
     @Provides
     @Singleton
-    SqlBrite provideSqlBrite() {
-        return new SqlBrite.Builder().build();
-    }
-
-    @Provides
-    @Singleton
-    ContentResolver provideContentResolver(Context context) {
+    public ContentResolver provideContentResolver(Context context) {
         return context.getContentResolver();
     }
-
-    @Provides
-    @Singleton
-    BriteContentResolver provideBriteResolver(
-            SqlBrite sqlBrite,
-            ContentResolver contentResolver,
-            BaseSchedulerProvider schedulerProvider) {
-        return sqlBrite.wrapContentProvider(contentResolver, schedulerProvider.io());
-    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
index 9a73165..3bc659e 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/Repository.java
@@ -16,10 +16,10 @@ import java.util.List;
 import java.util.Map;
 import java.util.NoSuchElementException;
 
-import javax.inject.Inject;
 import javax.inject.Singleton;
 
-import rx.Observable;
+import io.reactivex.Observable;
+import io.reactivex.Single;
 
 import static com.bytesforge.linkasanote.utils.UuidUtils.isKeyValidUuid;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -50,10 +50,8 @@ public class Repository implements DataSource {
     @VisibleForTesting
     public boolean cacheIsDirty = false;
 
-    @Inject
-    public Repository(
-            @Local DataSource localDataSource,
-            @Cloud DataSource cloudDataSource) {
+    //@Inject NOTE: @Provides is needed for testing to mock Repository
+    public Repository(DataSource localDataSource, DataSource cloudDataSource) {
         this.localDataSource = localDataSource;
         this.cloudDataSource = cloudDataSource;
     }
@@ -61,37 +59,37 @@ public class Repository implements DataSource {
     // Links
 
     @Override
-    public Observable<List<Link>> getLinks() {
+    public Single<List<Link>> getLinks() {
         if (cachedLinks != null && !cacheIsDirty) {
-            return Observable.from(cachedLinks.values()).toList();
-        } else if (cachedLinks == null) {
-            cachedLinks = new LinkedHashMap<>();
+            return Observable.fromIterable(cachedLinks.values()).toList();
         }
         return getAndCacheLocalLinks();
     }
 
-    private Observable<List<Link>> getAndCacheLocalLinks() {
+    private Single<List<Link>> getAndCacheLocalLinks() {
+        if (cachedLinks == null) {
+            cachedLinks = new LinkedHashMap<>();
+        }
         return localDataSource.getLinks()
-                .flatMap(links -> Observable.from(links)
+                .flatMap(links -> Observable.fromIterable(links)
                         .doOnNext(link -> cachedLinks.put(link.getId(), link))
                         .toList());
     }
 
     @Override
-    public Observable<Link> getLink(@NonNull String linkId) {
+    public Single<Link> getLink(@NonNull String linkId) {
         checkNotNull(linkId);
 
         final Link cachedLink = getCachedLink(linkId);
         if (cachedLink != null) {
-            return Observable.just(cachedLink);
+            return Single.just(cachedLink);
         }
 
         if (cachedLinks == null) {
             cachedLinks = new LinkedHashMap<>();
         }
         return localDataSource.getLink(linkId)
-                .doOnNext(link -> cachedLinks.put(linkId, link))
-                .first();
+                .doOnSuccess(link -> cachedLinks.put(linkId, link));
     }
 
     @Nullable
@@ -100,9 +98,8 @@ public class Repository implements DataSource {
 
         if (cachedLinks == null || cachedLinks.isEmpty()) {
             return null;
-        } else {
-            return cachedLinks.get(id);
         }
+        return cachedLinks.get(id);
     }
 
     @Override
@@ -132,12 +129,12 @@ public class Repository implements DataSource {
     // Notes
 
     @Override
-    public Observable<List<Note>> getNotes() {
+    public Single<List<Note>> getNotes() {
         return null;
     }
 
     @Override
-    public Observable<Note> getNote(@NonNull String noteId) {
+    public Single<Note> getNote(@NonNull String noteId) {
         return null;
     }
 
@@ -160,22 +157,22 @@ public class Repository implements DataSource {
 
     // TODO: implement cloudFavorites
     @Override
-    public Observable<List<Favorite>> getFavorites() {
+    public Single<List<Favorite>> getFavorites() {
         if (cachedFavorites != null && !cacheIsDirty) {
-            return Observable.from(cachedFavorites.values()).toList();
+            return Observable.fromIterable(cachedFavorites.values()).toList();
         }
 
-        Observable<List<Favorite>> localFavorites = getAndCacheLocalFavorites();
+        Single<List<Favorite>> localFavorites = getAndCacheLocalFavorites();
 
-        Observable<List<Favorite>> cloudFavorites =
-                Observable.just(Collections.<Favorite>emptyList());
+        Single<List<Favorite>> cloudFavorites =
+                Single.just(Collections.<Favorite>emptyList());
 
-        return Observable.concat(localFavorites, cloudFavorites)
+        return Single.concat(localFavorites, cloudFavorites)
                 .filter(favorites -> !favorites.isEmpty())
-                .first();
+                .firstOrError();
     }
 
-    private Observable<List<Favorite>> getAndCacheLocalFavorites() {
+    private Single<List<Favorite>> getAndCacheLocalFavorites() {
         if (cachedFavorites == null) {
             cachedFavorites = new LinkedHashMap<>();
         }
@@ -183,7 +180,7 @@ public class Repository implements DataSource {
             cachedTags = new LinkedHashMap<>();
         }
         return localDataSource.getFavorites()
-                .flatMap(favorites -> Observable.from(favorites)
+                .flatMap(favorites -> Observable.fromIterable(favorites)
                         .doOnNext(favorite -> {
                             // NOTE: cache invalidation required when all items are requested
                             cachedFavorites.put(favorite.getId(), favorite);
@@ -196,9 +193,8 @@ public class Repository implements DataSource {
     }
 
     @Override
-    public Observable<Favorite> getFavorite(@NonNull String favoriteId) {
+    public Single<Favorite> getFavorite(@NonNull String favoriteId) {
         checkNotNull(favoriteId);
-
         if (!isKeyValidUuid(favoriteId)) {
             throw new InvalidParameterException(
                     "getFavorite() called with invalid UUID ID [" + favoriteId + "]");
@@ -206,7 +202,7 @@ public class Repository implements DataSource {
 
         final Favorite cachedFavorite = getCachedFavorite(favoriteId);
         if (cachedFavorite != null) {
-            return Observable.just(cachedFavorite);
+            return Single.just(cachedFavorite);
         }
 
         if (cachedFavorites == null) {
@@ -215,21 +211,18 @@ public class Repository implements DataSource {
         if (cachedTags == null) {
             cachedTags = new LinkedHashMap<>();
         }
-        Observable<Favorite> localFavorite = localDataSource.getFavorite(favoriteId)
-                .doOnNext(favorite -> {
+        Single<Favorite> localFavorite = localDataSource.getFavorite(favoriteId)
+                .doOnSuccess(favorite -> {
                     cachedFavorites.put(favoriteId, favorite);
                     List<Tag> tags = favorite.getTags();
                     if (tags != null) {
                         for (Tag tag : tags) cachedTags.put(tag.getName(), tag);
                     }
-                })
-                .first();
-
-        Observable<Favorite> cloudFavorite =
-                Observable.<Favorite>just(null).concatWith(Observable.<Favorite>never());
-
-        return Observable.concat(localFavorite, cloudFavorite)
-                .first()
+                });
+        Single<Favorite> cloudFavorite = Single.never();
+        // TODO: check if it possible to throw own exception, and if null still possible here
+        return Single.concat(localFavorite, cloudFavorite)
+                .firstOrError()
                 .map(favorite -> {
                     if (favorite == null) {
                         throw new NoSuchElementException(
@@ -301,37 +294,37 @@ public class Repository implements DataSource {
     // Tags: tag is part of the object and should be bound with the object
 
     @Override
-    public Observable<List<Tag>> getTags() {
+    public Single<List<Tag>> getTags() {
         if (cachedTags != null && !cacheIsDirty) {
-            return Observable.from(cachedTags.values()).toList();
-        } else if (cachedTags == null) {
-            cachedTags = new LinkedHashMap<>();
+            return Observable.fromIterable(cachedTags.values()).toList();
         }
         return getAndCacheLocalTags();
     }
 
-    private Observable<List<Tag>> getAndCacheLocalTags() {
+    private Single<List<Tag>> getAndCacheLocalTags() {
+        if (cachedTags == null) {
+            cachedTags = new LinkedHashMap<>();
+        }
         return localDataSource.getTags()
-                .flatMap(tags -> Observable.from(tags)
+                .flatMap(tags -> Observable.fromIterable(tags)
                         .doOnNext(tag -> cachedTags.put(tag.getName(), tag))
                         .toList());
     }
 
     @Override
-    public Observable<Tag> getTag(@NonNull String tagName) {
+    public Single<Tag> getTag(@NonNull String tagName) {
         checkNotNull(tagName);
 
         final Tag cachedTag = getCachedTag(tagName);
         if (cachedTag != null) {
-            return Observable.just(cachedTag);
+            return Single.just(cachedTag);
         }
 
         if (cachedTags == null) {
             cachedTags = new LinkedHashMap<>();
         }
         return localDataSource.getTag(tagName)
-                .doOnNext(tag -> cachedTags.put(tagName, tag))
-                .first();
+                .doOnSuccess(tag -> cachedTags.put(tagName, tag));
     }
 
     @Nullable
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
index 1acbc41..4fc1a73 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/RepositoryModule.java
@@ -6,7 +6,6 @@ import android.content.SharedPreferences;
 
 import com.bytesforge.linkasanote.data.source.cloud.CloudDataSource;
 import com.bytesforge.linkasanote.data.source.local.LocalDataSource;
-import com.squareup.sqlbrite.BriteContentResolver;
 
 import javax.inject.Singleton;
 
@@ -19,16 +18,21 @@ public class RepositoryModule {
     @Provides
     @Singleton
     @Local
-    DataSource provideLocalDataSource(
-            ContentResolver contentResolver,
-            BriteContentResolver briteResolver) {
-        return new LocalDataSource(contentResolver, briteResolver);
+    public DataSource provideLocalDataSource(ContentResolver contentResolver) {
+        return new LocalDataSource(contentResolver);
     }
 
     @Provides
     @Singleton
     @Cloud
-    DataSource provideCloudDataSource(Context context, SharedPreferences sharedPreferences) {
+    public DataSource provideCloudDataSource(Context context, SharedPreferences sharedPreferences) {
         return new CloudDataSource(context, sharedPreferences);
     }
+
+    @Provides
+    @Singleton
+    public Repository provideRepository(
+            @Local DataSource localDataSource, @Cloud DataSource cloudDataSource) {
+        return new Repository(localDataSource, cloudDataSource);
+    }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
index dc47ec3..afcfa91 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/cloud/CloudDataSource.java
@@ -31,7 +31,7 @@ import java.util.List;
 
 import javax.inject.Singleton;
 
-import rx.Observable;
+import io.reactivex.Single;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -53,12 +53,12 @@ public class CloudDataSource implements DataSource {
     }
 
     @Override
-    public Observable<List<Link>> getLinks() {
+    public Single<List<Link>> getLinks() {
         return null;
     }
 
     @Override
-    public Observable<Link> getLink(@NonNull String linkId) {
+    public Single<Link> getLink(@NonNull String linkId) {
         return null;
     }
 
@@ -73,12 +73,12 @@ public class CloudDataSource implements DataSource {
     // Notes
 
     @Override
-    public Observable<List<Note>> getNotes() {
+    public Single<List<Note>> getNotes() {
         return null;
     }
 
     @Override
-    public Observable<Note> getNote(@NonNull String noteId) {
+    public Single<Note> getNote(@NonNull String noteId) {
         return null;
     }
 
@@ -93,12 +93,12 @@ public class CloudDataSource implements DataSource {
     // Favorites
 
     @Override
-    public Observable<List<Favorite>> getFavorites() {
+    public Single<List<Favorite>> getFavorites() {
         return null;
     }
 
     @Override
-    public Observable<Favorite> getFavorite(@NonNull String favoriteId) {
+    public Single<Favorite> getFavorite(@NonNull String favoriteId) {
         return null;
     }
 
@@ -151,12 +151,12 @@ public class CloudDataSource implements DataSource {
     // Tags
 
     @Override
-    public Observable<List<Tag>> getTags() {
+    public Single<List<Tag>> getTags() {
         throw new RuntimeException("getTags() was called but this operation cannot be applied to the cloud");
     }
 
     @Override
-    public Observable<Tag> getTag(@NonNull String tagId) {
+    public Single<Tag> getTag(@NonNull String tagId) {
         throw new RuntimeException("getTag() was called but this operation cannot be applied to the cloud");
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
index 3bb8cbf..a930d7a 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalContract.java
@@ -3,9 +3,12 @@ package com.bytesforge.linkasanote.data.source.local;
 import android.content.ContentUris;
 import android.net.Uri;
 import android.provider.BaseColumns;
+import android.support.annotation.NonNull;
 
 import com.bytesforge.linkasanote.BuildConfig;
 
+import static com.google.common.base.Preconditions.checkNotNull;
+
 public final class LocalContract {
 
     public static final String CONTENT_AUTHORITY = BuildConfig.APPLICATION_ID + ".provider";
@@ -14,7 +17,6 @@ public final class LocalContract {
 
     public static final String MANY_TO_MANY_COMMON_NAME_ADDED = "added";
     public static final String COMMON_NAME_ETAG = "etag";
-    // NOTE: there is a conflict with a cloud version
     public static final String COMMON_NAME_CONFLICTED = "conflicted";
     public static final String COMMON_NAME_DELETED = "deleted";
     public static final String COMMON_NAME_SYNCED = "synced";
@@ -66,8 +68,8 @@ public final class LocalContract {
             return CONTENT_URI.buildUpon().appendPath(id).build();
         }
 
-        public static String getLinkId(Uri uri) {
-            return uri.getPathSegments().get(1);
+        public static String getLinkId(@NonNull Uri uri) {
+            return checkNotNull(uri).getPathSegments().get(1);
         }
     }
 
@@ -111,8 +113,8 @@ public final class LocalContract {
             return CONTENT_URI.buildUpon().appendPath(id).build();
         }
 
-        public static String getNoteId(Uri uri) {
-            return uri.getPathSegments().get(1);
+        public static String getNoteId(@NonNull Uri uri) {
+            return checkNotNull(uri).getPathSegments().get(1);
         }
     }
 
@@ -168,8 +170,8 @@ public final class LocalContract {
                     .appendPath(id).appendEncodedPath(TagEntry.TABLE_NAME).build();
         }
 
-        public static String getFavoriteId(Uri uri) {
-            return uri.getPathSegments().get(1);
+        public static String getFavoriteId(@NonNull Uri uri) {
+            return checkNotNull(uri).getPathSegments().get(1);
         }
     }
 
@@ -206,8 +208,8 @@ public final class LocalContract {
             return CONTENT_URI.buildUpon().appendPath(name).build();
         }
 
-        public static String getTagId(Uri uri) {
-            return uri.getPathSegments().get(1);
+        public static String getTagId(@NonNull Uri uri) {
+            return checkNotNull(uri).getPathSegments().get(1);
         }
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
index 453ae06..31b86f9 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/data/source/local/LocalDataSource.java
@@ -13,14 +13,14 @@ import com.bytesforge.linkasanote.data.Note;
 import com.bytesforge.linkasanote.data.Tag;
 import com.bytesforge.linkasanote.data.source.DataSource;
 import com.bytesforge.linkasanote.sync.SyncState;
-import com.squareup.sqlbrite.BriteContentResolver;
 
-import java.util.ArrayList;
 import java.util.List;
+import java.util.NoSuchElementException;
 
 import javax.inject.Singleton;
 
-import rx.Observable;
+import io.reactivex.Observable;
+import io.reactivex.Single;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -30,34 +30,47 @@ public class LocalDataSource implements DataSource {
     private static final String TAG = LocalDataSource.class.getSimpleName();
 
     private ContentResolver contentResolver;
-    private BriteContentResolver briteResolver;
 
-    public LocalDataSource(ContentResolver contentResolver, BriteContentResolver briteResolver) {
+    public LocalDataSource(ContentResolver contentResolver) {
         this.contentResolver = contentResolver;
-        this.briteResolver = briteResolver;
     }
 
     // Links
 
     @Override
-    public Observable<List<Link>> getLinks() {
-        return briteResolver.createQuery(
-                LocalContract.LinkEntry.buildLinksUri(),
-                LocalContract.LinkEntry.LINK_COLUMNS,
-                null, null, null, false)
-                .mapToList(Link::from);
+    public Single<List<Link>> getLinks() {
+        final String selection = LocalContract.LinkEntry.COLUMN_NAME_DELETED + " = ?";
+        final String[] selectionArgs = {"0"};
+
+        Observable<Link> linkObservable = Observable.generate(() -> {
+            return contentResolver.query(
+                    LocalContract.LinkEntry.buildLinksUri(),
+                    LocalContract.LinkEntry.LINK_COLUMNS,
+                    selection, selectionArgs, null);
+        }, (cursor, listEmitter) -> {
+            if (cursor == null) {
+                listEmitter.onError(new NullPointerException("An error while retrieving the cursor"));
+                return null;
+            }
+            if (cursor.moveToNext()) {
+                listEmitter.onNext(Link.from(cursor));
+            } else {
+                listEmitter.onComplete();
+            }
+            return cursor;
+        }, Cursor::close);
+        // TODO: find why cast cannot be applied without variable
+        return linkObservable.toList();
     }
 
     @Override
-    public Observable<Link> getLink(@NonNull String linkId) {
+    public Single<Link> getLink(@NonNull String linkId) {
         return null;
     }
 
     @Override
     public void saveLink(@NonNull Link link) {
-        checkNotNull(link);
-
-        ContentValues values = link.getContentValues();
+        ContentValues values = checkNotNull(link).getContentValues();
         contentResolver.insert(LocalContract.LinkEntry.buildLinksUri(), values);
     }
 
@@ -69,12 +82,12 @@ public class LocalDataSource implements DataSource {
     // Notes
 
     @Override
-    public Observable<List<Note>> getNotes() {
+    public Single<List<Note>> getNotes() {
         return null;
     }
 
     @Override
-    public Observable<Note> getNote(@NonNull String noteId) {
+    public Single<Note> getNote(@NonNull String noteId) {
         return null;
     }
 
@@ -90,73 +103,80 @@ public class LocalDataSource implements DataSource {
     // Favorites
 
     @Override
-    public Observable<List<Favorite>> getFavorites() {
+    public Single<List<Favorite>> getFavorites() {
+        // TODO: maybe 'OR conflicted' records are required
         final String selection = LocalContract.FavoriteEntry.COLUMN_NAME_DELETED + " = ?";
         final String[] selectionArgs = {"0"};
-        return briteResolver.createQuery(
-                LocalContract.FavoriteEntry.buildFavoritesUri(),
-                LocalContract.FavoriteEntry.FAVORITE_COLUMNS,
-                selection, selectionArgs, null, false)
-                .map(query -> {
-                    Cursor cursor = query.run();
-                    if (cursor == null) return null;
-
-                    List<Favorite> favorites = new ArrayList<>();
-                    int rowIdIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
-                    while (cursor.moveToNext()) {
-                        String rowId = cursor.getString(rowIdIndex);
-                        Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
-                        List<Tag> tags = getTagsFrom(favoriteTagsUri)
-                                .toBlocking()
-                                .single();
-                        favorites.add(Favorite.from(cursor, tags));
-                    }
-                    return favorites;
-                })
-                .first();
-    }
-
-    @Override
-    public Observable<Favorite> getFavorite(@NonNull String favoriteId) {
+
+        Observable<Favorite> favoriteObservable = Observable.generate(() -> {
+            return contentResolver.query(
+                    LocalContract.FavoriteEntry.buildFavoritesUri(),
+                    LocalContract.FavoriteEntry.FAVORITE_COLUMNS,
+                    selection, selectionArgs, null);
+        }, (cursor, favoriteEmitter) -> {
+            if (cursor == null) {
+                favoriteEmitter.onError(new NullPointerException("An error while retrieving the cursor"));
+                return null;
+            }
+            if (!cursor.moveToNext()) {
+                favoriteEmitter.onComplete();
+                return cursor;
+            }
+            int rowIdIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
+            String rowId = cursor.getString(rowIdIndex);
+            Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
+            List<Tag> tags = getTagsFrom(favoriteTagsUri).blockingGet();
+            favoriteEmitter.onNext(Favorite.from(cursor, tags));
+
+            return cursor;
+        }, Cursor::close);
+
+        return favoriteObservable.toList(); // NOTE: when no Items it returns empty List
+    }
+
+    @Override
+    public Single<Favorite> getFavorite(final @NonNull String favoriteId) {
         checkNotNull(favoriteId);
 
         return Observable.fromCallable(() -> {
             Cursor cursor = contentResolver.query(
                     LocalContract.FavoriteEntry.buildFavoritesUriWith(favoriteId),
                     LocalContract.FavoriteEntry.FAVORITE_COLUMNS, null, null, null);
-            if (cursor == null) {
-                return null;
-            } else if (cursor.getCount() <= 0) {
+            if (cursor == null) return null; // NOTE: NullPointerException
+            else if (!cursor.moveToLast()) {
                 cursor.close();
-                return null;
+                throw new NoSuchElementException("The requested favorite was not found");
             }
-            cursor.moveToFirst();
             int rowIndex = cursor.getColumnIndexOrThrow(LocalContract.FavoriteEntry._ID);
             String rowId = cursor.getString(rowIndex);
             Uri favoriteTagsUri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
-            List<Tag> tags = getTagsFrom(favoriteTagsUri)
-                    .toBlocking().single();
-            Favorite favorite = Favorite.from(cursor, tags);
-            cursor.close();
-
-            return favorite;
-        });
+            List<Tag> tags = getTagsFrom(favoriteTagsUri).blockingGet();
+            try {
+                return Favorite.from(cursor, tags);
+            } finally {
+                cursor.close();
+            }
+        }).firstOrError();
     }
 
     @Override
-    public void saveFavorite(@NonNull Favorite favorite) {
+    public void saveFavorite(final @NonNull Favorite favorite) {
         checkNotNull(favorite);
 
+        favorite.setSyncState(SyncState.State.UNSYNCED);
         ContentValues values = favorite.getContentValues();
         Uri favoriteUri = contentResolver.insert(
                 LocalContract.FavoriteEntry.buildFavoritesUri(), values);
+        if (favoriteUri == null) {
+            throw new NullPointerException("Provider must return URI or throw exception");
+        }
 
         // OPTIMIZATION: just add "/tag" to favoriteUri
         String rowId = LocalContract.FavoriteEntry.getFavoriteId(favoriteUri);
         Uri uri = LocalContract.FavoriteEntry.buildTagsDirUriWith(rowId);
         List<Tag> tags = favorite.getTags();
         if (tags != null) {
-            for (Tag tag : tags) saveTagTo(tag, uri);
+            for (Tag tag : tags) insertTag(tag, uri);
         }
     }
 
@@ -181,37 +201,63 @@ public class LocalDataSource implements DataSource {
     // Tags
 
     @Override
-    public Observable<List<Tag>> getTags() {
+    public Single<List<Tag>> getTags() {
         return getTagsFrom(LocalContract.TagEntry.buildTagsUri());
     }
 
-    private Observable<List<Tag>> getTagsFrom(@NonNull Uri uri) {
-        return briteResolver.createQuery(
-                uri, LocalContract.TagEntry.TAG_COLUMNS,
-                null, null, null, false)
-                .mapToList(Tag::from)
-                .first(); // Otherwise observable not always be completed
+    private Single<List<Tag>> getTagsFrom(@NonNull Uri uri) {
+        checkNotNull(uri);
+
+        Observable<Tag> tagObservable = Observable.generate(() -> {
+            return contentResolver.query(
+                    uri, LocalContract.TagEntry.TAG_COLUMNS,
+                    null, null, null);
+        }, (cursor, tagEmitter) -> {
+            if (cursor == null) {
+                tagEmitter.onError(new NullPointerException("An error while retrieving the cursor"));
+                return null;
+            }
+            if (cursor.moveToNext()) {
+                tagEmitter.onNext(Tag.from(cursor));
+            } else {
+                tagEmitter.onComplete();
+            }
+            return cursor;
+        }, Cursor::close);
+
+        return tagObservable.toList();
     }
 
     @Override
-    public Observable<Tag> getTag(@NonNull String tagName) {
+    public Single<Tag> getTag(@NonNull String tagName) {
         checkNotNull(tagName);
 
-        return briteResolver.createQuery(
-                LocalContract.TagEntry.buildTagsUriWith(tagName),
-                LocalContract.TagEntry.TAG_COLUMNS,
-                null, null, null, false)
-                .mapToOneOrDefault(Tag::from, null);
+        return Observable.fromCallable(() -> {
+            Cursor cursor = contentResolver.query(
+                    LocalContract.TagEntry.buildTagsUriWith(tagName),
+                    LocalContract.TagEntry.TAG_COLUMNS,
+                    null, null, null);
+            if (cursor == null) return null;
+            else if (!cursor.moveToLast()) {
+                cursor.close();
+                throw new NoSuchElementException("The requested tag was not found");
+            }
+            try {
+                return Tag.from(cursor);
+            } finally {
+                cursor.close();
+            }
+        }).firstOrError();
     }
 
     @Override
     public void saveTag(@NonNull Tag tag) {
         checkNotNull(tag);
 
-        saveTagTo(tag, LocalContract.TagEntry.buildTagsUri());
+        insertTag(tag, LocalContract.TagEntry.buildTagsUri());
     }
 
-    private void saveTagTo(@NonNull Tag tag, @NonNull Uri uri) {
+    private void insertTag(@NonNull Tag tag, @NonNull Uri uri) {
         checkNotNull(tag);
         checkNotNull(uri);
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
index 66a0fe0..e8ccdde 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoActivity.java
@@ -57,6 +57,8 @@ public class LaanoActivity extends AppCompatActivity implements
 
     private static final String TAG = LaanoActivity.class.getSimpleName();
 
+    private static final String STATE_CURRENT_TAB = "CURRENT_TAB";
+
     private static final int REQUEST_GET_ACCOUNTS = 0;
     private static final String PERMISSION_GET_ACCOUNTS = Manifest.permission.GET_ACCOUNTS;
     private static String[] PERMISSIONS_GET_ACCOUNTS = {PERMISSION_GET_ACCOUNTS};
@@ -72,13 +74,17 @@ public class LaanoActivity extends AppCompatActivity implements
     @Inject
     NotesPresenter notesPresenter;
 
-    private ActivityLaanoBinding binding;
-    // TODO: restore on orientation change
     private int viewPagerCurrentTab;
+    private ActivityLaanoBinding binding;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        if (savedInstanceState == null) {
+            applyInstanceState(getDefaultInstanceState());
+        } else {
+            applyInstanceState(savedInstanceState);
+        }
         binding = DataBindingUtil.setContentView(this, R.layout.activity_laano);
 
         // Toolbar
@@ -95,21 +101,15 @@ public class LaanoActivity extends AppCompatActivity implements
         if (binding.navView != null) {
             setupDrawerContent(binding.navView);
         }
-        // Fragments
+        // ViewPager
         LaanoFragmentPagerAdapter adapter = new LaanoFragmentPagerAdapter(
                 getSupportFragmentManager(), getApplicationContext());
         if (binding.laanoViewPager != null) {
             ViewPager viewPager = binding.laanoViewPager;
-            viewPager.setAdapter(adapter);
-            // NOTE: Fragments are needed immediately to build Presenters
-            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.LINKS_TAB);
-            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.FAVORITES_TAB);
-            adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.NOTES_TAB);
-            adapter.finishUpdate(viewPager);
-            setupViewPagerListener(viewPager);
-            viewPagerCurrentTab = viewPager.getCurrentItem();
+            setupViewPager(viewPager, adapter);
+            // TabLayout
             if (binding.tabLayout != null) {
-                setupTabsContent(binding.tabLayout, viewPager);
+                setupTabLayout(binding.tabLayout, viewPager);
             }
         }
         // Presenters
@@ -126,6 +126,23 @@ public class LaanoActivity extends AppCompatActivity implements
         }
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(STATE_CURRENT_TAB, viewPagerCurrentTab);
+    }
+
+    private void applyInstanceState(@NonNull Bundle state) {
+        checkNotNull(state);
+        viewPagerCurrentTab = state.getInt(STATE_CURRENT_TAB);
+    }
+
+    private Bundle getDefaultInstanceState() {
+        Bundle defaultState = new Bundle();
+        defaultState.putInt(STATE_CURRENT_TAB, 0);
+        return defaultState;
+    }
+
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         DrawerLayout drawerLayout = binding.drawerLayout;
@@ -226,7 +243,15 @@ public class LaanoActivity extends AppCompatActivity implements
 
     // Setup
 
-    private void setupViewPagerListener(ViewPager viewPager) {
+    private void setupViewPager(ViewPager viewPager, LaanoFragmentPagerAdapter adapter) {
+        viewPager.setAdapter(adapter);
+        // NOTE: Fragments are needed immediately to build Presenters
+        adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.LINKS_TAB);
+        adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.FAVORITES_TAB);
+        adapter.instantiateItem(viewPager, LaanoFragmentPagerAdapter.NOTES_TAB);
+        adapter.finishUpdate(viewPager);
+        viewPager.setCurrentItem(viewPagerCurrentTab);
+        // Listener
         viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
 
             @Override
@@ -309,7 +334,7 @@ public class LaanoActivity extends AppCompatActivity implements
         );
     }
 
-    private void setupTabsContent(@NonNull TabLayout tabLayout, @NonNull ViewPager viewPager) {
+    private void setupTabLayout(@NonNull TabLayout tabLayout, @NonNull ViewPager viewPager) {
         checkNotNull(tabLayout);
         checkNotNull(viewPager);
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoTabPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoTabPresenter.java
new file mode 100644
index 0000000..c8091cd
--- /dev/null
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/LaanoTabPresenter.java
@@ -0,0 +1,9 @@
+package com.bytesforge.linkasanote.laano;
+
+import com.bytesforge.linkasanote.BasePresenter;
+
+public interface LaanoTabPresenter extends BasePresenter {
+
+    void onTabSelected();
+    void onTabDeselected();
+}
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
index 929676e..994fb05 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesAdapter.java
@@ -78,7 +78,9 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
         return favorite;
     }
 
-    public void swapItems(List<Favorite> favorites) {
+    public void swapItems(@NonNull List<Favorite> favorites) {
+        checkNotNull(favorites);
+
         final FavoritesDiffCallback diffCallback =
                 new FavoritesDiffCallback(this.favorites, favorites);
         final DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(diffCallback);
@@ -119,8 +121,7 @@ public class FavoritesAdapter extends RecyclerView.Adapter<FavoritesAdapter.View
             Favorite oldFavorite = oldList.get(oldItemPosition);
             Favorite newFavorite = newList.get(newItemPosition);
 
-            return oldFavorite.getName().equals(newFavorite.getName())
-                    && oldFavorite.getTagsAsString().equals(newFavorite.getTagsAsString());
+            return oldFavorite.equals(newFavorite);
         }
-    }
+    } // class
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
index 3917a0f..6122917 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesContract.java
@@ -3,11 +3,10 @@ package com.bytesforge.linkasanote.laano.favorites;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.util.SparseBooleanArray;
 
-import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
 import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.laano.LaanoTabPresenter;
 
 import java.util.List;
 
@@ -20,17 +19,17 @@ public interface FavoritesContract {
 
         void showAddFavorite();
         void showEditFavorite(@NonNull String favoriteId);
-        void showFavorites(List<Favorite> favorites);
+        void showFavorites(@NonNull List<Favorite> favorites);
         void enableActionMode();
         void disableActionMode();
         void selectionChanged(int position);
-        Favorite removeFavorite(int position);
+        String removeFavorite(int position);
     }
 
     interface ViewModel extends BaseView<Presenter> {
 
         void setInstanceState(@Nullable Bundle savedInstanceState);
-        void loadInstanceState(@NonNull Bundle outState);
+        void saveInstanceState(@NonNull Bundle outState);
         void applyInstanceState(@NonNull Bundle state);
 
         void setFavoriteListSize(int favoriteListSize);
@@ -43,10 +42,10 @@ public interface FavoritesContract {
         void removeSelection();
         void removeSelection(int position);
         int getSelectedCount();
-        SparseBooleanArray getSelectedIds();
+        int[] getSelectedIds();
     }
 
-    interface Presenter extends BasePresenter {
+    interface Presenter extends LaanoTabPresenter {
 
         void addFavorite();
         void loadFavorites(boolean forceUpdate);
@@ -59,8 +58,5 @@ public interface FavoritesContract {
         void onToLinksClick(@NonNull String favoriteId);
         void onToNotesClick(@NonNull String favoriteId);
         void onDeleteClick();
-
-        void onTabSelected();
-        void onTabDeselected();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
index 240128e..ca44117 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesFragment.java
@@ -7,9 +7,9 @@ import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.view.ActionMode;
+import android.support.v7.widget.DividerItemDecoration;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
-import android.util.SparseBooleanArray;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -47,9 +47,6 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     public void onResume() {
         super.onResume();
         presenter.subscribe();
-        if (viewModel.isActionMode()) {
-            enableActionMode();
-        }
     }
 
     @Override
@@ -114,7 +111,7 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        viewModel.loadInstanceState(outState);
+        viewModel.saveInstanceState(outState);
     }
 
     @Override
@@ -131,9 +128,12 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     }
 
     @Override
-    public void showFavorites(List<Favorite> favorites) {
+    public void showFavorites(@NonNull List<Favorite> favorites) {
+        checkNotNull(favorites);
+
         adapter.swapItems(favorites);
         viewModel.setFavoriteListSize(favorites.size());
+        if (viewModel.isActionMode()) enableActionMode();
     }
 
     @Override
@@ -154,7 +154,11 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
         List<Favorite> favorites = new ArrayList<>(0);
         adapter = new FavoritesAdapter(favorites, presenter, (FavoritesViewModel) viewModel);
         rvFavorites.setAdapter(adapter);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());
         rvFavorites.setLayoutManager(new LinearLayoutManager(getContext()));
+        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(
+                rvFavorites.getContext(), layoutManager.getOrientation());
+        rvFavorites.addItemDecoration(dividerItemDecoration);
     }
 
     @Override
@@ -178,18 +182,14 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
 
     private void destroyActionMode() {
         if (viewModel.isActionMode()) {
-            SparseBooleanArray selected = viewModel.getSelectedIds().clone();
+            int[] selectedIds = viewModel.getSelectedIds().clone();
             viewModel.removeSelection();
-            for (int i = 0; i < selected.size(); i++) {
-                if (selected.valueAt(i)) {
-                    adapter.notifyItemChanged(selected.keyAt(i));
-                }
+            for (int selectedId : selectedIds) {
+                adapter.notifyItemChanged(selectedId);
             }
             viewModel.disableActionMode();
         }
-        if (actionMode != null) {
-            actionMode = null;
-        }
+        if (actionMode != null) actionMode = null;
     }
 
     @Override
@@ -209,12 +209,11 @@ public class FavoritesFragment extends BaseFragment implements FavoritesContract
     }
 
     @Override
-    public Favorite removeFavorite(int position) {
+    public String removeFavorite(int position) {
         Favorite favorite = adapter.removeItem(position);
         selectionChanged(position);
         viewModel.setFavoriteListSize(adapter.getItemCount());
-
-        return favorite;
+        return favorite.getId();
     }
 
     public class FavoritesActionModeCallback implements ActionMode.Callback {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
index 3034d16..12689fb 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenter.java
@@ -1,20 +1,17 @@
 package com.bytesforge.linkasanote.laano.favorites;
 
 import android.support.annotation.NonNull;
-import android.util.SparseBooleanArray;
 
-import com.bytesforge.linkasanote.data.Favorite;
 import com.bytesforge.linkasanote.data.source.Repository;
 import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
-import java.util.List;
+import java.util.ArrayList;
 
 import javax.inject.Inject;
 
-import rx.Observer;
-import rx.Subscription;
-import rx.subscriptions.CompositeSubscription;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
 
 public final class FavoritesPresenter implements FavoritesContract.Presenter {
 
@@ -26,7 +23,7 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
     private final BaseSchedulerProvider schedulerProvider;
 
     @NonNull
-    private final CompositeSubscription subscription;
+    private final CompositeDisposable disposable;
 
     private boolean firstLoad = true;
 
@@ -39,8 +36,7 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
         this.view = view;
         this.viewModel = viewModel;
         this.schedulerProvider = schedulerProvider;
-
-        subscription = new CompositeSubscription();
+        disposable = new CompositeDisposable();
     }
 
     @Inject
@@ -57,12 +53,11 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
 
     @Override
     public void unsubscribe() {
-        subscription.clear();
+        disposable.clear();
     }
 
     @Override
     public void onTabSelected() {
-
     }
 
     @Override
@@ -84,40 +79,32 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
     private void loadFavorites(boolean forceUpdate, final boolean showLoading) {
         // TODO: implement SwipeRefreshLayout and cache invalidation
         EspressoIdlingResource.increment();
-        subscription.clear();
+        disposable.clear();
 
-        Subscription subscription = repository.getFavorites()
+        Disposable disposable = repository.getFavorites()
                 // TODO: implement filter
                 //.flatMap(Observable::from)
                 //.filter(favorite -> {...})
                 //.toList()
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doOnTerminate(() -> {
+                // NoSuchElementException, NullPointerException
+                .doOnError(throwable -> view.showFavorites(new ArrayList<>()))
+                .doFinally(() -> {
                     if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
                         EspressoIdlingResource.decrement();
                     }
                 })
-                .subscribe(new Observer<List<Favorite>>() {
-
-                    @Override
-                    public void onCompleted() {
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                    }
-
-                    @Override
-                    public void onNext(List<Favorite> favorites) {
-                        view.showFavorites(favorites);
-                    }
+                // NOTE: BiConsumer must be here or OnErrorNotImplementedException
+                .subscribe((favorites, throwable) -> {
+                    if (favorites != null) view.showFavorites(favorites);
                 });
-        this.subscription.add(subscription);
+        this.disposable.add(disposable);
     }
 
     @Override
     public void onFavoriteClick(int position) {
+        // TODO: normal mode selection must highlight current favorite filter
         if (viewModel.isActionMode()) {
             onFavoriteSelected(position);
         }
@@ -155,12 +142,10 @@ public final class FavoritesPresenter implements FavoritesContract.Presenter {
 
     @Override
     public void onDeleteClick() {
-        SparseBooleanArray selectedIds = viewModel.getSelectedIds();
-        int size = selectedIds.size();
-        for (int i = size - 1; i >= 0; i--) {
-            int key = selectedIds.keyAt(i);
-            viewModel.removeSelection(key);
-            String favoriteId = view.removeFavorite(key).getId();
+        int[] selectedIds = viewModel.getSelectedIds();
+        for (int selectedId : selectedIds) {
+            viewModel.removeSelection(selectedId);
+            String favoriteId = view.removeFavorite(selectedId);
             repository.deleteFavorite(favoriteId);
         }
     } // onDeleteClick
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
index 471f178..f46b4fb 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterModule.java
@@ -8,7 +8,7 @@ import dagger.Provides;
 @Module
 public class FavoritesPresenterModule {
 
-    private final Context context;
+    private final Context context; // NOTE: Activity context
     private final FavoritesContract.View view;
 
     public FavoritesPresenterModule(Context context, FavoritesContract.View view) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
index ba213e4..6593ab1 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/favorites/FavoritesViewModel.java
@@ -13,6 +13,9 @@ import android.util.SparseBooleanArray;
 import com.bytesforge.linkasanote.BR;
 import com.bytesforge.linkasanote.utils.SparseBooleanParcelableArray;
 
+import java.util.LinkedList;
+import java.util.List;
+
 import static com.google.common.base.Preconditions.checkNotNull;
 
 // NOTE: global viewModel, applied to fragment and every Item
@@ -49,7 +52,7 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
     }
 
     @Override
-    public void loadInstanceState(@NonNull Bundle outState) {
+    public void saveInstanceState(@NonNull Bundle outState) {
         checkNotNull(outState);
 
         outState.putBoolean(STATE_ACTION_MODE, actionMode.get());
@@ -137,7 +140,13 @@ public class FavoritesViewModel extends BaseObservable implements FavoritesContr
     }
 
     @Override
-    public SparseBooleanArray getSelectedIds() {
-        return selectedIds;
+    public int[] getSelectedIds() {
+        List<Integer> ids = new LinkedList<>();
+        for (int i = 0; i < selectedIds.size(); i++) {
+            if (selectedIds.valueAt(i)) {
+                ids.add(selectedIds.keyAt(i));
+            }
+        }
+        return ids.stream().mapToInt(i -> i).toArray();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
index a470f8f..21a701d 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksContract.java
@@ -1,7 +1,7 @@
 package com.bytesforge.linkasanote.laano.links;
 
-import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
+import com.bytesforge.linkasanote.laano.LaanoTabPresenter;
 
 public interface LinksContract {
 
@@ -10,7 +10,7 @@ public interface LinksContract {
         boolean isActive();
     }
 
-    interface Presenter extends BasePresenter {
+    interface Presenter extends LaanoTabPresenter {
 
         void addLink();
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
index a29333a..f3b1227 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/links/LinksPresenter.java
@@ -26,6 +26,16 @@ public final class LinksPresenter implements LinksContract.Presenter {
 
     }
 
+    @Override
+    public void onTabSelected() {
+
+    }
+
+    @Override
+    public void onTabDeselected() {
+
+    }
+
     @Override
     public void addLink() {
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
index ca8b8e9..04f12e7 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesContract.java
@@ -1,7 +1,7 @@
 package com.bytesforge.linkasanote.laano.notes;
 
-import com.bytesforge.linkasanote.BasePresenter;
 import com.bytesforge.linkasanote.BaseView;
+import com.bytesforge.linkasanote.laano.LaanoTabPresenter;
 
 public interface NotesContract {
 
@@ -10,7 +10,7 @@ public interface NotesContract {
         boolean isActive();
     }
 
-    interface Presenter extends BasePresenter {
+    interface Presenter extends LaanoTabPresenter {
 
         void addNote();
     }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
index 7336446..d77e2f6 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/laano/notes/NotesPresenter.java
@@ -26,6 +26,16 @@ public final class NotesPresenter implements NotesContract.Presenter {
 
     }
 
+    @Override
+    public void onTabSelected() {
+
+    }
+
+    @Override
+    public void onTabDeselected() {
+
+    }
+
     @Override
     public void addNote() {
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java
index 8f0b261..e2e5a2f 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/AccountsAdapter.java
@@ -81,7 +81,9 @@ public class AccountsAdapter extends RecyclerView.Adapter<AccountsAdapter.ViewHo
         return accountItems.get(position).getType();
     }
 
-    public void swapItems(List<AccountItem> accountItems) {
+    public void swapItems(@NonNull List<AccountItem> accountItems) {
+        checkNotNull(accountItems);
+
         final AccountItemDiffCallback diffCallback =
                 new AccountItemDiffCallback(this.accountItems, accountItems);
         final DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(diffCallback);
@@ -124,6 +126,7 @@ public class AccountsAdapter extends RecyclerView.Adapter<AccountsAdapter.ViewHo
 
         @Override
         public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
+            // TODO: override equal to AccountItem
             String oldAccountName = oldList.get(oldItemPosition).getAccountName();
             String newAccountName = newList.get(newItemPosition).getAccountName();
             String oldDisplayName = oldList.get(oldItemPosition).getDisplayName();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
index d7663a6..3f2aa52 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsActivity.java
@@ -56,8 +56,8 @@ public class ManageAccountsActivity extends AppCompatActivity {
         view = fragment;
         // Presenter
         LaanoApplication application = (LaanoApplication) getApplication();
-        application.getApplicationComponent().getManageAccountsComponent(
-                new ManageAccountsPresenterModule(this, fragment))
+        application.getApplicationComponent()
+                .getManageAccountsComponent(new ManageAccountsPresenterModule(this, fragment))
                 .inject(this);
         // Accounts
         if (savedInstanceState != null) {
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
index 244af3b..9a33ca4 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsContract.java
@@ -10,7 +10,7 @@ import com.bytesforge.linkasanote.BaseView;
 
 import java.util.List;
 
-import rx.Observable;
+import io.reactivex.Single;
 
 public interface ManageAccountsContract {
 
@@ -26,8 +26,8 @@ public interface ManageAccountsContract {
         void confirmAccountRemoval(Account account);
 
         @Nullable Account[] getAccountsWithPermissionCheck();
-        Observable<AccountItem> loadAccountItems();
-        void swapItems(List<AccountItem> accountItems);
+        Single<List<AccountItem>> loadAccountItems();
+        void swapItems(@NonNull List<AccountItem> accountItems);
 
         void showSuccessfullyUpdatedSnackbar();
         void showNotEnoughPermissionsSnackbar();
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
index 66c565d..5b1eb00 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsFragment.java
@@ -35,13 +35,11 @@ import com.owncloud.android.lib.common.accounts.AccountUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
-import rx.Observable;
-import rx.Observer;
-import rx.observables.SyncOnSubscribe;
+import io.reactivex.Observable;
+import io.reactivex.Single;
 
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountType;
 import static com.bytesforge.linkasanote.utils.CloudUtils.getAccountUsername;
@@ -126,48 +124,28 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
     }
 
     @Override
-    public Observable<AccountItem> loadAccountItems() {
-        return Observable.create(new SyncOnSubscribe<Iterator<AccountItem>, AccountItem>() {
-            @Override
-            protected Iterator<AccountItem> generateState() {
-                Account[] accounts = getAccountsWithPermissionCheck();
-                if (accounts == null) return null;
-
-                List<AccountItem> accountItems = new LinkedList<>();
-                for (Account account : accounts) {
-                    accountItems.add(new AccountItem(account));
-                }
-                if (getResources().getBoolean(R.bool.multiaccount_support) || accounts.length <= 0) {
-                    accountItems.add(new AccountItem());
-                }
-                return accountItems.iterator();
+    public Single<List<AccountItem>> loadAccountItems() {
+        return Observable.fromCallable(() -> {
+            Account[] accounts = getAccountsWithPermissionCheck();
+            if (accounts == null) {
+                throw new NullPointerException("Required permission was not granted");
             }
-
-            @Override
-            protected Iterator<AccountItem> next(
-                    Iterator<AccountItem> state, Observer<? super AccountItem> observer) {
-                if (state == null) {
-                    observer.onError(new NullPointerException());
-                } else if (state.hasNext()) {
-                    AccountItem accountItem = state.next();
-                    Account account = accountItem.getAccount();
-                    if (account != null) {
-                        try {
-                            OwnCloudAccount ocAccount = new OwnCloudAccount(account, getContext());
-                            accountItem.setDisplayName(ocAccount.getDisplayName());
-                        } catch (AccountUtils.AccountNotFoundException e) {
-                            accountItem.setDisplayName(getAccountUsername(account.name));
-                        }
-                        observer.onNext(accountItem);
-                    } else {
-                        observer.onNext(new AccountItem());
-                    }
-                } else {
-                    observer.onCompleted();
+            List<AccountItem> accountItems = new LinkedList<>();
+            for (Account account : accounts) {
+                AccountItem accountItem = new AccountItem(account);
+                try {
+                    OwnCloudAccount ocAccount = new OwnCloudAccount(account, getContext());
+                    accountItem.setDisplayName(ocAccount.getDisplayName());
+                } catch (AccountUtils.AccountNotFoundException e) {
+                    accountItem.setDisplayName(getAccountUsername(account.name));
                 }
-                return state;
+                accountItems.add(accountItem);
+            }
+            if (getResources().getBoolean(R.bool.multiaccount_support) || accounts.length <= 0) {
+                accountItems.add(new AccountItem());
             }
-        });
+            return accountItems;
+        }).firstOrError();
     }
 
     @Override
@@ -285,7 +263,8 @@ public class ManageAccountsFragment extends Fragment implements ManageAccountsCo
     }
 
     @Override
-    public void swapItems(List<AccountItem> accountItems) {
+    public void swapItems(@NonNull List<AccountItem> accountItems) {
+        checkNotNull(accountItems);
         adapter.swapItems(accountItems);
     }
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
index 0a2cee8..85a7dd7 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/manageaccounts/ManageAccountsPresenter.java
@@ -9,12 +9,10 @@ import com.bytesforge.linkasanote.addeditaccount.AddEditAccountActivity;
 import com.bytesforge.linkasanote.utils.EspressoIdlingResource;
 import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
 
-import java.util.List;
-
 import javax.inject.Inject;
 
-import rx.Observer;
-import rx.subscriptions.CompositeSubscription;
+import io.reactivex.disposables.CompositeDisposable;
+import io.reactivex.disposables.Disposable;
 
 public final class ManageAccountsPresenter implements ManageAccountsContract.Presenter {
 
@@ -25,7 +23,7 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
     private final BaseSchedulerProvider schedulerProvider;
 
     @NonNull
-    private final CompositeSubscription subscription;
+    private final CompositeDisposable disposable;
 
     @Inject
     public ManageAccountsPresenter(
@@ -34,7 +32,7 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
         this.view = view;
         this.accountManager = accountManager;
         this.schedulerProvider = schedulerProvider;
-        subscription = new CompositeSubscription();
+        disposable = new CompositeDisposable();
     }
 
     @Inject
@@ -50,41 +48,29 @@ public final class ManageAccountsPresenter implements ManageAccountsContract.Pre
 
     @Override
     public void loadAccountItems(final boolean showLoading) {
-        // TODO: implement SwipeRefreshLayout
+        // TODO: implement showLoading
         EspressoIdlingResource.increment();
-        subscription.clear();
+        disposable.clear();
 
-        view.loadAccountItems()
-                .toList()
+        Disposable disposable = view.loadAccountItems()
                 .subscribeOn(schedulerProvider.computation())
                 .observeOn(schedulerProvider.ui())
-                .doOnTerminate(() -> {
+                .doFinally(() -> {
                     if (!EspressoIdlingResource.getIdlingResource().isIdleNow()) {
                         EspressoIdlingResource.decrement();
                     }
                 })
-                .subscribe(new Observer<List<AccountItem>>() {
-
-                    @Override
-                    public void onCompleted() {
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        view.showNotEnoughPermissionsSnackbar();
-                    }
-
-                    @Override
-                    public void onNext(List<AccountItem> accountItems) {
-                        view.swapItems(accountItems);
-                    }
+                // NullPointerException
+                .doOnError(throwable -> view.showNotEnoughPermissionsSnackbar())
+                .subscribe((accountItems, throwable) -> {
+                    if (accountItems != null) view.swapItems(accountItems);
                 });
-        this.subscription.add(subscription);
+        this.disposable.add(disposable);
     }
 
     @Override
     public void unsubscribe() {
-        subscription.clear();
+        disposable.clear();
     }
 
     @Override
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/UuidUtils.java b/app/src/main/java/com/bytesforge/linkasanote/utils/UuidUtils.java
index 95830f5..9c5f9a2 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/UuidUtils.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/UuidUtils.java
@@ -1,41 +1,47 @@
 package com.bytesforge.linkasanote.utils;
 
 
+import android.support.annotation.Nullable;
+import android.support.annotation.VisibleForTesting;
 import android.util.Base64;
+import android.util.Log;
 
 import java.nio.ByteBuffer;
 import java.util.UUID;
 
 public class UuidUtils {
 
+    private static final String TAG = UuidUtils.class.getSimpleName();
     private static final int KEY_LENGTH = 22;
 
+    @VisibleForTesting
+    public static int FLAGS = Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE;
+
     public static String generateKey() {
         UUID uuid = UUID.randomUUID();
-
         return keyFromUuid(uuid);
     }
 
     public static String keyFromUuid(UUID uuid) {
         ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[16]);
-
         byteBuffer.putLong(uuid.getMostSignificantBits());
         byteBuffer.putLong(uuid.getLeastSignificantBits());
-
-        return Base64.encodeToString(
-                byteBuffer.array(), Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE);
+        return Base64.encodeToString(byteBuffer.array(), FLAGS);
     }
 
+    @Nullable
     public static UUID uuidFromKey(String key) {
-        byte[] bytes = Base64.decode(key, Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE);
-
-        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
-
-        return new UUID(byteBuffer.getLong(), byteBuffer.getLong());
+        try {
+            byte[] bytes = Base64.decode(key, FLAGS);
+            ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
+            return new UUID(byteBuffer.getLong(), byteBuffer.getLong());
+        } catch (IllegalArgumentException e) {
+            Log.e(TAG, "Invalid UUID key was detected [" + key + "]", e);
+            return null;
+        }
     }
 
     public static boolean isKeyValidUuid(String key) {
-        // TODO: find a better solution
-        return key.length() == KEY_LENGTH;
+        return key.length() == KEY_LENGTH && uuidFromKey(key) != null;
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/BaseSchedulerProvider.java b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/BaseSchedulerProvider.java
index fe768d7..441e755 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/BaseSchedulerProvider.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/BaseSchedulerProvider.java
@@ -2,7 +2,7 @@ package com.bytesforge.linkasanote.utils.schedulers;
 
 import android.support.annotation.NonNull;
 
-import rx.Scheduler;
+import io.reactivex.Scheduler;
 
 public interface BaseSchedulerProvider {
 
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/ImmediateSchedulerProvider.java b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/ImmediateSchedulerProvider.java
index 18908ff..c80bac6 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/ImmediateSchedulerProvider.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/ImmediateSchedulerProvider.java
@@ -4,8 +4,8 @@ import android.support.annotation.NonNull;
 
 import javax.inject.Singleton;
 
-import rx.Scheduler;
-import rx.schedulers.Schedulers;
+import io.reactivex.Scheduler;
+import io.reactivex.schedulers.Schedulers;
 
 @Singleton
 public class ImmediateSchedulerProvider implements BaseSchedulerProvider {
@@ -13,18 +13,18 @@ public class ImmediateSchedulerProvider implements BaseSchedulerProvider {
     @NonNull
     @Override
     public Scheduler computation() {
-        return Schedulers.immediate();
+        return Schedulers.trampoline();
     }
 
     @NonNull
     @Override
     public Scheduler io() {
-        return Schedulers.immediate();
+        return Schedulers.trampoline();
     }
 
     @NonNull
     @Override
     public Scheduler ui() {
-        return Schedulers.immediate();
+        return Schedulers.trampoline();
     }
 }
diff --git a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/SchedulerProvider.java b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/SchedulerProvider.java
index 17e976d..ae9424b 100644
--- a/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/SchedulerProvider.java
+++ b/app/src/main/java/com/bytesforge/linkasanote/utils/schedulers/SchedulerProvider.java
@@ -4,9 +4,9 @@ import android.support.annotation.NonNull;
 
 import javax.inject.Singleton;
 
-import rx.Scheduler;
-import rx.android.schedulers.AndroidSchedulers;
-import rx.schedulers.Schedulers;
+import io.reactivex.Scheduler;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.schedulers.Schedulers;
 
 @Singleton
 public class SchedulerProvider implements BaseSchedulerProvider {
diff --git a/app/src/test/java/com/bytesforge/linkasanote/TestUtils.java b/app/src/test/java/com/bytesforge/linkasanote/TestUtils.java
new file mode 100644
index 0000000..f44d9a8
--- /dev/null
+++ b/app/src/test/java/com/bytesforge/linkasanote/TestUtils.java
@@ -0,0 +1,42 @@
+package com.bytesforge.linkasanote;
+
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.Link;
+import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.utils.CommonUtils;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TestUtils {
+
+    public static String KEY_PREFIX = CommonUtils.charRepeat('A', 21);
+
+    public static List<Favorite> buildFavorites() {
+        final List<Tag> FAVORITE_TAGS = new ArrayList<Tag>() {{
+            add(new Tag("first"));
+            add(new Tag("second"));
+        }};
+        final List<Tag> FAVORITE_TAGS2 = new ArrayList<Tag>() {{
+            addAll(FAVORITE_TAGS);
+            add(new Tag("third"));
+        }};
+        final List<Tag> FAVORITE_TAGS3 = new ArrayList<Tag>() {{
+            addAll(FAVORITE_TAGS2);
+            add(new Tag("fourth"));
+        }};
+        return new ArrayList<Favorite>() {{
+            add(new Favorite(KEY_PREFIX + 'A', "Favorite", FAVORITE_TAGS));
+            add(new Favorite(KEY_PREFIX + 'B', "Favorite #2", FAVORITE_TAGS2));
+            add(new Favorite(KEY_PREFIX + 'C', "Favorite #3", FAVORITE_TAGS3));
+        }};
+    }
+
+    public static List<Link> buildLinks() {
+        return new ArrayList<Link>() {{
+            add(new Link(KEY_PREFIX + 'A', "http://laano.net/link", "Title for Link"));
+            add(new Link(KEY_PREFIX + 'B', "http://laano.net/link2", "Title for Link #2"));
+            add(new Link(KEY_PREFIX + 'C', "http://laano.net/link3", "Title for Link #3"));
+        }};
+    }
+}
diff --git a/app/src/test/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterTest.java b/app/src/test/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterTest.java
new file mode 100644
index 0000000..f6e13db
--- /dev/null
+++ b/app/src/test/java/com/bytesforge/linkasanote/addeditfavorite/AddEditFavoritePresenterTest.java
@@ -0,0 +1,144 @@
+package com.bytesforge.linkasanote.addeditfavorite;
+
+import android.database.sqlite.SQLiteConstraintException;
+
+import com.bytesforge.linkasanote.TestUtils;
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.Tag;
+import com.bytesforge.linkasanote.data.source.Repository;
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
+import com.bytesforge.linkasanote.utils.schedulers.ImmediateSchedulerProvider;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import io.reactivex.Single;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+public class AddEditFavoritePresenterTest {
+
+    @Mock
+    private Repository repository;
+
+    @Mock
+    private AddEditFavoriteContract.View view;
+
+    @Mock
+    private AddEditFavoriteContract.ViewModel viewModel;
+
+    private BaseSchedulerProvider schedulerProvider;
+    private AddEditFavoritePresenter presenter;
+
+    @Captor
+    ArgumentCaptor<List<Tag>> tagListCaptor;
+
+    private final List<Favorite> FAVORITES;
+    private Favorite defaultFavorite;
+
+    public AddEditFavoritePresenterTest() {
+        FAVORITES = TestUtils.buildFavorites();
+        defaultFavorite = FAVORITES.get(0);
+    }
+
+    @Before
+    public void setLinksPresenter() throws Exception {
+        MockitoAnnotations.initMocks(this);
+        schedulerProvider = new ImmediateSchedulerProvider();
+        when(view.isActive()).thenReturn(true);
+        presenter = new AddEditFavoritePresenter(
+                repository, view, viewModel, schedulerProvider, null);
+    }
+
+    @Test
+    public void loadAllTagsFromRepository_loadsItIntoView() {
+        List<Tag> tags = FAVORITES.get(FAVORITES.size() - 1).getTags();
+        assertNotNull(tags);
+        when(repository.getTags()).thenReturn(Single.just(tags));
+        presenter.loadTags();
+        verify(view).swapTagsCompletionViewItems(tags);
+    }
+
+    @Test
+    public void loadEmptyListOfTags_loadsEmptyListIntoView() {
+        when(repository.getTags()).thenReturn(Single.just(Collections.emptyList()));
+        presenter.loadTags();
+        verify(view).swapTagsCompletionViewItems(tagListCaptor.capture());
+        assertEquals(tagListCaptor.getValue().size(), 0);
+    }
+
+    @Test
+    public void saveNewFavoriteToRepository_finishesActivity() {
+        presenter.saveFavorite(defaultFavorite.getName(), defaultFavorite.getTags());
+        verify(repository).saveFavorite(any(Favorite.class));
+        verify(view).finishActivity();
+    }
+
+    @Test
+    public void saveEmptyFavorite_showsEmptyError() {
+        presenter.saveFavorite(defaultFavorite.getName(), new ArrayList<>());
+        presenter.saveFavorite("", new ArrayList<>());
+        presenter.saveFavorite("", defaultFavorite.getTags());
+        verify(viewModel, times(3)).showEmptyFavoriteSnackbar();
+    }
+
+    @Test
+    public void saveExistingFavorite_finishesActivity() {
+        // Edit Favorite Presenter
+        AddEditFavoritePresenter presenter = new AddEditFavoritePresenter(
+                repository, view, viewModel, schedulerProvider, defaultFavorite.getId());
+        presenter.saveFavorite(defaultFavorite.getName(), defaultFavorite.getTags());
+        verify(repository).saveFavorite(any(Favorite.class));
+        verify(view).finishActivity();
+    }
+
+    @Test
+    public void saveFavoriteWithExistedName_showsDuplicateError() {
+        doThrow(new SQLiteConstraintException()).when(repository).saveFavorite(any(Favorite.class));
+        presenter.saveFavorite(defaultFavorite.getName(), defaultFavorite.getTags());
+        verify(view, never()).finishActivity();
+        verify(viewModel).showDuplicateKeyError();
+    }
+
+    @Test
+    public void populateFavorite_callsRepositoryAndUpdateViewOnSuccess() {
+        final String favoriteId = defaultFavorite.getId();
+        when(repository.getFavorite(favoriteId)).thenReturn(Single.just(defaultFavorite));
+        // Edit Favorite Presenter
+        AddEditFavoritePresenter presenter = new AddEditFavoritePresenter(
+                repository, view, viewModel, schedulerProvider, favoriteId);
+        presenter.populateFavorite();
+        verify(repository).getFavorite(favoriteId);
+        verify(view).setupFavoriteState(any(Favorite.class));
+        verify(viewModel).checkAddButton();
+    }
+
+    @Test
+    public void populateFavorite_callsRepositoryAndShowsWarningOnError() {
+        final String favoriteId = defaultFavorite.getId();
+        when(repository.getFavorite(favoriteId)).thenReturn(Single.error(new NoSuchElementException()));
+        // Edit Favorite Presenter
+        AddEditFavoritePresenter presenter = new AddEditFavoritePresenter(
+                repository, view, viewModel, schedulerProvider, favoriteId);
+        presenter.populateFavorite();
+        verify(repository).getFavorite(favoriteId);
+        verify(view, never()).setupFavoriteState(any(Favorite.class));
+        verify(viewModel).showFavoriteNotFoundSnackbar();
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
index 36e1717..b73df74 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryFavoriteTest.java
@@ -1,20 +1,19 @@
 package com.bytesforge.linkasanote.data.source;
 
+import com.bytesforge.linkasanote.TestUtils;
 import com.bytesforge.linkasanote.data.Favorite;
-import com.bytesforge.linkasanote.data.Tag;
-import com.bytesforge.linkasanote.utils.CommonUtils;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.NoSuchElementException;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Single;
+import io.reactivex.observers.TestObserver;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
@@ -24,13 +23,8 @@ import static org.mockito.Mockito.when;
 
 public class RepositoryFavoriteTest {
 
-    private final List<Tag> TAGS;
-    private final List<String> FAVORITE_NAMES;
     private final List<Favorite> FAVORITES;
 
-    private final TestSubscriber<List<Favorite>> testFavoritesSubscriber;
-    private final TestSubscriber<Favorite> testFavoriteSubscriber;
-
     private Repository repository;
 
     @Mock
@@ -39,26 +33,11 @@ public class RepositoryFavoriteTest {
     @Mock
     private DataSource cloudDataSource;
 
-    public RepositoryFavoriteTest() {
-        String keyPrefix = CommonUtils.charRepeat('A', 21);
-
-        TAGS = new ArrayList<>();
-        TAGS.add(new Tag("first"));
-        TAGS.add(new Tag("second"));
-        TAGS.add(new Tag("third"));
-
-        FAVORITE_NAMES = new ArrayList<>();
-        FAVORITE_NAMES.add("Favorite");
-        FAVORITE_NAMES.add("Favorite #2");
-        FAVORITE_NAMES.add("Favorite #3");
+    private TestObserver<List<Favorite>> testFavoritesObserver;
+    private TestObserver<Favorite> testFavoriteObserver;
 
-        FAVORITES = new ArrayList<>();
-        FAVORITES.add(new Favorite(keyPrefix + 'A', FAVORITE_NAMES.get(0), TAGS));
-        FAVORITES.add(new Favorite(keyPrefix + 'B', FAVORITE_NAMES.get(1), TAGS));
-        FAVORITES.add(new Favorite(keyPrefix + 'C', FAVORITE_NAMES.get(2), TAGS));
-
-        testFavoritesSubscriber = new TestSubscriber<>();
-        testFavoriteSubscriber = new TestSubscriber<>();
+    public RepositoryFavoriteTest() {
+        FAVORITES = TestUtils.buildFavorites();
     }
 
     @Before
@@ -72,10 +51,9 @@ public class RepositoryFavoriteTest {
         setFavoritesAvailable(localDataSource, FAVORITES);
         setFavoritesNotAvailable(cloudDataSource);
 
-        repository.getFavorites().subscribe(testFavoritesSubscriber);
-
+        testFavoritesObserver = repository.getFavorites().test();
         verify(localDataSource).getFavorites();
-        testFavoritesSubscriber.assertValue(FAVORITES);
+        testFavoritesObserver.assertValue(FAVORITES);
     }
 
     @Test
@@ -85,9 +63,9 @@ public class RepositoryFavoriteTest {
         setFavoriteAvailable(localDataSource, favorite);
         setFavoriteNotAvailable(cloudDataSource, favorite.getId());
 
-        repository.getFavorite(favorite.getId()).subscribe(testFavoriteSubscriber);
+        testFavoriteObserver = repository.getFavorite(favorite.getId()).test();
         verify(localDataSource).getFavorite(eq(favorite.getId()));
-        testFavoriteSubscriber.assertValue(favorite);
+        testFavoriteObserver.assertValue(favorite);
     }
 
     @Test
@@ -95,7 +73,6 @@ public class RepositoryFavoriteTest {
         Favorite favorite = FAVORITES.get(0);
 
         repository.saveFavorite(favorite);
-
         verify(localDataSource).saveFavorite(favorite);
         verify(cloudDataSource).saveFavorite(favorite);
         assertThat(repository.cachedFavorites.size(), is(1));
@@ -117,21 +94,19 @@ public class RepositoryFavoriteTest {
     // Data setup
 
     private void setFavoritesAvailable(DataSource dataSource, List<Favorite> favorites) {
-        when(dataSource.getFavorites()).
-                thenReturn(Observable.just(favorites).concatWith(Observable.<List<Favorite>>never()));
+        when(dataSource.getFavorites()).thenReturn(Single.just(favorites));
     }
 
     private void setFavoritesNotAvailable(DataSource dataSource) {
-        when(dataSource.getFavorites()).thenReturn(Observable.just(Collections.<Favorite>emptyList()));
+        when(dataSource.getFavorites()).thenReturn(Single.just(Collections.emptyList()));
     }
 
     private void setFavoriteAvailable(DataSource dataSource, Favorite favorite) {
-        when(dataSource.getFavorite(eq(favorite.getId())))
-                .thenReturn(Observable.just(favorite).concatWith(Observable.<Favorite>never()));
+        when(dataSource.getFavorite(eq(favorite.getId()))).thenReturn(Single.just(favorite));
     }
 
     private void setFavoriteNotAvailable(DataSource dataSource, String favoriteId) {
-        when(dataSource.getFavorite(eq(favoriteId)))
-                .thenReturn(Observable.<Favorite>just(null).concatWith(Observable.<Favorite>never()));
+        when(dataSource.getFavorite(eq(favoriteId))).thenReturn(
+                Single.error(new NoSuchElementException()));
     }
 }
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
index f4aee15..f494b2c 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryLinkTest.java
@@ -1,5 +1,6 @@
 package com.bytesforge.linkasanote.data.source;
 
+import com.bytesforge.linkasanote.TestUtils;
 import com.bytesforge.linkasanote.data.Link;
 import com.bytesforge.linkasanote.utils.CommonUtils;
 
@@ -8,12 +9,12 @@ import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.NoSuchElementException;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Single;
+import io.reactivex.observers.TestObserver;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
@@ -23,13 +24,9 @@ import static org.mockito.Mockito.when;
 
 public class RepositoryLinkTest {
 
-    private final List<String> LINK_VALUES;
-    private final List<String> LINK_TITLES;
+    private final String KEY_PREFIX = CommonUtils.charRepeat('A', 21);
     private final List<Link> LINKS;
 
-    private TestSubscriber<List<Link>> testLinksSubscriber;
-    private TestSubscriber<Link> testLinkSubscriber;
-
     private Repository repository;
 
     @Mock
@@ -39,24 +36,7 @@ public class RepositoryLinkTest {
     private DataSource cloudDataSource;
 
     public RepositoryLinkTest() {
-        LINK_VALUES = new ArrayList<>();
-        LINK_VALUES.add("http://laano.net/link");
-        LINK_VALUES.add("http://laano.net/link2");
-        LINK_VALUES.add("http://laano.net/link3");
-
-        LINK_TITLES = new ArrayList<>();
-        LINK_TITLES.add("Title for Link");
-        LINK_TITLES.add("Title for Link #2");
-        LINK_TITLES.add("Title for Link #3");
-
-        String keyPrefix = CommonUtils.charRepeat('A', 21);
-        LINKS = new ArrayList<>();
-        LINKS.add(new Link(keyPrefix + 'A', LINK_VALUES.get(0), LINK_TITLES.get(0)));
-        LINKS.add(new Link(keyPrefix + 'B', LINK_VALUES.get(1), LINK_TITLES.get(1)));
-        LINKS.add(new Link(keyPrefix + 'C', LINK_VALUES.get(2), LINK_TITLES.get(2)));
-
-        testLinksSubscriber = new TestSubscriber<>();
-        testLinkSubscriber = new TestSubscriber<>();
+        LINKS = TestUtils.buildLinks();
     }
 
     @Before
@@ -70,10 +50,9 @@ public class RepositoryLinkTest {
         setLinksAvailable(localDataSource, LINKS);
         setLinksNotAvailable(cloudDataSource);
 
-        repository.getLinks().subscribe(testLinksSubscriber);
-
+        TestObserver<List<Link>> testLinksObserver = repository.getLinks().test();
         verify(localDataSource).getLinks();
-        testLinksSubscriber.assertValue(LINKS);
+        testLinksObserver.assertValue(LINKS);
     }
 
     @Test
@@ -83,9 +62,9 @@ public class RepositoryLinkTest {
         setLinkAvailable(localDataSource, link);
         setLinkNotAvailable(cloudDataSource, link.getId());
 
-        repository.getLink(link.getId()).subscribe(testLinkSubscriber);
+        TestObserver<Link> testLinkObserver = repository.getLink(link.getId()).test();
         verify(localDataSource).getLink(eq(link.getId()));
-        testLinkSubscriber.assertValue(link);
+        testLinkObserver.assertValue(link);
     }
 
     @Test
@@ -100,21 +79,18 @@ public class RepositoryLinkTest {
     }
 
     private void setLinksAvailable(DataSource dataSource, List<Link> links) {
-        when(dataSource.getLinks()).
-                thenReturn(Observable.just(links).concatWith(Observable.<List<Link>>never()));
+        when(dataSource.getLinks()).thenReturn(Single.just(links));
     }
 
     private void setLinksNotAvailable(DataSource dataSource) {
-        when(dataSource.getLinks()).thenReturn(Observable.just(Collections.<Link>emptyList()));
+        when(dataSource.getLinks()).thenReturn(Single.just(Collections.emptyList()));
     }
 
     private void setLinkAvailable(DataSource dataSource, Link link) {
-        when(dataSource.getLink(eq(link.getId())))
-                .thenReturn(Observable.just(link).concatWith(Observable.<Link>never()));
+        when(dataSource.getLink(eq(link.getId()))).thenReturn(Single.just(link));
     }
 
     private void setLinkNotAvailable(DataSource dataSource, String linkId) {
-        when(dataSource.getLink(eq(linkId)))
-                .thenReturn(Observable.<Link>just(null).concatWith(Observable.<Link>never()));
+        when(dataSource.getLink(eq(linkId))).thenReturn(Single.error(new NoSuchElementException()));
     }
 }
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryTagTest.java b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryTagTest.java
index 80d5a13..e8791d7 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryTagTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/data/source/RepositoryTagTest.java
@@ -10,9 +10,10 @@ import org.mockito.MockitoAnnotations;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.NoSuchElementException;
 
-import rx.Observable;
-import rx.observers.TestSubscriber;
+import io.reactivex.Single;
+import io.reactivex.observers.TestObserver;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertThat;
@@ -22,12 +23,8 @@ import static org.mockito.Mockito.when;
 
 public class RepositoryTagTest {
 
-    private final List<String> TAG_NAMES;
     private final List<Tag> TAGS;
 
-    private TestSubscriber<List<Tag>> testTagsSubscriber;
-    private TestSubscriber<Tag> testTagSubscriber;
-
     private Repository repository;
 
     @Mock
@@ -37,18 +34,11 @@ public class RepositoryTagTest {
     private DataSource cloudDataSource;
 
     public RepositoryTagTest() {
-        TAG_NAMES = new ArrayList<>();
-        TAG_NAMES.add("first");
-        TAG_NAMES.add("second");
-        TAG_NAMES.add("third");
-
-        TAGS = new ArrayList<>();
-        TAGS.add(new Tag(TAG_NAMES.get(0)));
-        TAGS.add(new Tag(TAG_NAMES.get(1)));
-        TAGS.add(new Tag(TAG_NAMES.get(2)));
-
-        testTagsSubscriber = new TestSubscriber<>();
-        testTagSubscriber = new TestSubscriber<>();
+        TAGS = new ArrayList<Tag>() {{
+            add(new Tag("first"));
+            add(new Tag("second"));
+            add(new Tag("third"));
+        }};
     }
 
     @Before
@@ -62,10 +52,11 @@ public class RepositoryTagTest {
         setTagsAvailable(localDataSource, TAGS);
         setTagsNotAvailable(cloudDataSource);
 
-        repository.getTags().subscribe(testTagsSubscriber);
+
+        TestObserver<List<Tag>> testTagsObserver = repository.getTags().test();
 
         verify(localDataSource).getTags();
-        testTagsSubscriber.assertValue(TAGS);
+        testTagsObserver.assertValue(TAGS);
     }
 
     @Test
@@ -74,9 +65,9 @@ public class RepositoryTagTest {
 
         setTagAvailable(localDataSource, tag);
 
-        repository.getTag(tag.getName()).subscribe(testTagSubscriber);
+        TestObserver<Tag> testTagObserver = repository.getTag(tag.getName()).test();
         verify(localDataSource).getTag(eq(tag.getName()));
-        testTagSubscriber.assertValue(tag);
+        testTagObserver.assertValue(tag);
     }
 
     @Test
@@ -103,21 +94,18 @@ public class RepositoryTagTest {
     // Data setup
 
     private void setTagsAvailable(DataSource dataSource, List<Tag> tags) {
-        when(dataSource.getTags()).
-                thenReturn(Observable.just(tags).concatWith(Observable.<List<Tag>>never()));
+        when(dataSource.getTags()).thenReturn(Single.just(tags));
     }
 
     private void setTagsNotAvailable(DataSource dataSource) {
-        when(dataSource.getTags()).thenReturn(Observable.just(Collections.<Tag>emptyList()));
+        when(dataSource.getTags()).thenReturn(Single.just(Collections.emptyList()));
     }
 
     private void setTagAvailable(DataSource dataSource, Tag tag) {
-        when(dataSource.getTag(eq(tag.getName())))
-                .thenReturn(Observable.just(tag).concatWith(Observable.<Tag>never()));
+        when(dataSource.getTag(eq(tag.getName()))).thenReturn(Single.just(tag));
     }
 
-    private void setTagNotAvailable(DataSource dataSource, String tagId) {
-        when(dataSource.getTag(eq(tagId)))
-                .thenReturn(Observable.<Tag>just(null).concatWith(Observable.<Tag>never()));
+    private void setTagNotAvailable(DataSource dataSource, String tagName) {
+        when(dataSource.getTag(eq(tagName))).thenReturn(Single.error(new NoSuchElementException()));
     }
 }
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/laano/LinksPresenterTest.java b/app/src/test/java/com/bytesforge/linkasanote/laano/LinksPresenterTest.java
deleted file mode 100644
index d377adb..0000000
--- a/app/src/test/java/com/bytesforge/linkasanote/laano/LinksPresenterTest.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.bytesforge.linkasanote.laano;
-
-import com.bytesforge.linkasanote.laano.links.LinksContract;
-import com.bytesforge.linkasanote.laano.links.LinksPresenter;
-
-import org.junit.Before;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import static org.mockito.Mockito.when;
-
-public class LinksPresenterTest {
-
-    @Mock
-    private LinksContract.View linksView;
-
-    private LinksPresenter linksPresenter;
-
-    @Before
-    public void setUp() throws Exception {
-        MockitoAnnotations.initMocks(this);
-
-        linksPresenter = new LinksPresenter(linksView);
-
-        when(linksView.isActive()).thenReturn(true);
-    }
-}
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterTest.java b/app/src/test/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterTest.java
new file mode 100644
index 0000000..0b40f24
--- /dev/null
+++ b/app/src/test/java/com/bytesforge/linkasanote/laano/favorites/FavoritesPresenterTest.java
@@ -0,0 +1,101 @@
+package com.bytesforge.linkasanote.laano.favorites;
+
+import com.bytesforge.linkasanote.TestUtils;
+import com.bytesforge.linkasanote.data.Favorite;
+import com.bytesforge.linkasanote.data.source.Repository;
+import com.bytesforge.linkasanote.utils.schedulers.BaseSchedulerProvider;
+import com.bytesforge.linkasanote.utils.schedulers.ImmediateSchedulerProvider;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import java.util.Collections;
+import java.util.List;
+
+import io.reactivex.Single;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+public class FavoritesPresenterTest {
+
+    @Mock
+    private Repository repository;
+
+    @Mock
+    private FavoritesContract.View view;
+
+    @Mock
+    private FavoritesContract.ViewModel viewModel;
+
+    private BaseSchedulerProvider schedulerProvider;
+    private FavoritesPresenter presenter;
+
+    @Captor
+    ArgumentCaptor<List<Favorite>> favoriteListCaptor;
+
+    private final List<Favorite> FAVORITES;
+
+    public FavoritesPresenterTest() {
+        FAVORITES = TestUtils.buildFavorites();
+    }
+
+    @Before
+    public void setupFavoritesPresenter() {
+        MockitoAnnotations.initMocks(this);
+        schedulerProvider = new ImmediateSchedulerProvider();
+        // TODO: check if it's needed at all
+        when(view.isActive()).thenReturn(true);
+
+        presenter = new FavoritesPresenter(repository, view, viewModel, schedulerProvider);
+    }
+
+    @Test
+    public void loadAllFavoritesFromRepository_loadsItIntoView() {
+        when(repository.getFavorites()).thenReturn(Single.just(FAVORITES));
+        presenter.loadFavorites(true);
+        verify(view).showFavorites(FAVORITES);
+    }
+
+    @Test
+    public void loadEmptyListOfFavorites_showsEmptyList() {
+        when(repository.getFavorites()).thenReturn(Single.just(Collections.emptyList()));
+        presenter.loadFavorites(true);
+        verify(view).showFavorites(favoriteListCaptor.capture());
+        assertEquals(favoriteListCaptor.getValue().size(), 0);
+    }
+
+    @Test
+    public void clickOnAddFavorite_showAddFavoriteUi() {
+        presenter.addFavorite();
+        verify(view).showAddFavorite();
+    }
+
+    @Test
+    public void clickOnEditFavorite_showEditFavoriteUi() {
+        final String favoriteId = FAVORITES.get(0).getId();
+        presenter.onEditClick(favoriteId);
+        verify(view).showEditFavorite(favoriteId);
+    }
+
+    @Test
+    public void clickOnDeleteFavorite_removesSelectedFavorites() {
+        int[] selectedIds = new int[]{0, 5, 10};
+        String favoriteId = TestUtils.KEY_PREFIX + 'A';
+        when(viewModel.getSelectedIds()).thenReturn(selectedIds);
+        when(view.removeFavorite(anyInt())).thenReturn(favoriteId);
+        presenter.onDeleteClick();
+        for (int selectedId : selectedIds) {
+            verify(viewModel).removeSelection(selectedId);
+            verify(view).removeFavorite(selectedId);
+        }
+        verify(repository, times(selectedIds.length)).deleteFavorite(favoriteId);
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/bytesforge/linkasanote/laano/links/LinksPresenterTest.java b/app/src/test/java/com/bytesforge/linkasanote/laano/links/LinksPresenterTest.java
new file mode 100644
index 0000000..6535270
--- /dev/null
+++ b/app/src/test/java/com/bytesforge/linkasanote/laano/links/LinksPresenterTest.java
@@ -0,0 +1,24 @@
+package com.bytesforge.linkasanote.laano.links;
+
+import org.junit.Before;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.mockito.Mockito.when;
+
+public class LinksPresenterTest {
+
+    @Mock
+    private LinksContract.View view;
+
+    private LinksPresenter presenter;
+
+    @Before
+    public void setLinksPresenter() throws Exception {
+        MockitoAnnotations.initMocks(this);
+
+        presenter = new LinksPresenter(view);
+
+        when(view.isActive()).thenReturn(true);
+    }
+}
diff --git a/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java b/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
index d8a4654..a66ea65 100644
--- a/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
+++ b/app/src/test/java/com/bytesforge/linkasanote/utils/UuidUtilsTest.java
@@ -1,33 +1,24 @@
 package com.bytesforge.linkasanote.utils;
 
-import android.util.Base64;
-
-import org.junit.Before;
 import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
 
 import java.util.Arrays;
 import java.util.UUID;
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.IsEqual.equalTo;
-import static org.mockito.Mockito.when;
 
-@RunWith(PowerMockRunner.class)
-@PrepareForTest(Base64.class)
+//@RunWith(PowerMockRunner.class)
+//@PrepareForTest(Base64.class)
 public class UuidUtilsTest {
 
-    @Before
+    /*@Before
     public void setupUuidUtils() {
         PowerMockito.mockStatic(Base64.class);
-    }
+    }*/
 
     @Test
     public void checkConversionBetweenUuidAndKey() {
-        int flags = Base64.NO_PADDING | Base64.NO_WRAP | Base64.URL_SAFE;
         String keyUUID = "00000000-0000-0000-0000-000000000000";
         byte[] bytesUUID = new byte[16];
         Arrays.fill(bytesUUID, (byte) 0x00);
@@ -36,12 +27,12 @@ public class UuidUtilsTest {
         byte[] bytesBase64 = new byte[22];
         Arrays.fill(bytesBase64, (byte) 0x41);
 
-        when(Base64.encodeToString(bytesUUID, flags)).thenReturn(keyBase64);
+        //when(Base64.encodeToString(bytesUUID, UuidUtils.FLAGS)).thenReturn(keyBase64);
         UUID uuid = UUID.fromString(keyUUID);
         String key = UuidUtils.keyFromUuid(uuid);
         assertThat(key, equalTo(keyBase64));
 
-        when(Base64.decode(keyBase64, flags)).thenReturn(bytesUUID);
+        //when(Base64.decode(keyBase64, UuidUtils.FLAGS)).thenReturn(bytesUUID);
         UUID uuidResult = UuidUtils.uuidFromKey(key);
         assertThat(uuidResult, equalTo(uuid));
     }
diff --git a/third_party/base64/src/main/java/android/util/Base64.java b/third_party/base64/src/main/java/android/util/Base64.java
new file mode 100644
index 0000000..1f2a5a7
--- /dev/null
+++ b/third_party/base64/src/main/java/android/util/Base64.java
@@ -0,0 +1,741 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package android.util;
+
+import java.io.UnsupportedEncodingException;
+
+/**
+ * Utilities for encoding and decoding the Base64 representation of
+ * binary data.  See RFCs <a
+ * href="http://www.ietf.org/rfc/rfc2045.txt">2045</a> and <a
+ * href="http://www.ietf.org/rfc/rfc3548.txt">3548</a>.
+ */
+public class Base64 {
+    /**
+     * Default values for encoder/decoder flags.
+     */
+    public static final int DEFAULT = 0;
+
+    /**
+     * Encoder flag bit to omit the padding '=' characters at the end
+     * of the output (if any).
+     */
+    public static final int NO_PADDING = 1;
+
+    /**
+     * Encoder flag bit to omit all line terminators (i.e., the output
+     * will be on one long line).
+     */
+    public static final int NO_WRAP = 2;
+
+    /**
+     * Encoder flag bit to indicate lines should be terminated with a
+     * CRLF pair instead of just an LF.  Has no effect if {@code
+     * NO_WRAP} is specified as well.
+     */
+    public static final int CRLF = 4;
+
+    /**
+     * Encoder/decoder flag bit to indicate using the "URL and
+     * filename safe" variant of Base64 (see RFC 3548 section 4) where
+     * {@code -} and {@code _} are used in place of {@code +} and
+     * {@code /}.
+     */
+    public static final int URL_SAFE = 8;
+
+    /**
+     * Flag to pass to {@link Base64OutputStream} to indicate that it
+     * should not close the output stream it is wrapping when it
+     * itself is closed.
+     */
+    public static final int NO_CLOSE = 16;
+
+    //  --------------------------------------------------------
+    //  shared code
+    //  --------------------------------------------------------
+
+    /* package */ static abstract class Coder {
+        public byte[] output;
+        public int op;
+
+        /**
+         * Encode/decode another block of input data.  this.output is
+         * provided by the caller, and must be big enough to hold all
+         * the coded data.  On exit, this.opwill be set to the length
+         * of the coded data.
+         *
+         * @param finish true if this is the final call to process for
+         *        this object.  Will finalize the coder state and
+         *        include any final bytes in the output.
+         *
+         * @return true if the input so far is good; false if some
+         *         error has been detected in the input stream..
+         */
+        public abstract boolean process(byte[] input, int offset, int len, boolean finish);
+
+        /**
+         * @return the maximum number of bytes a call to process()
+         * could produce for the given number of input bytes.  This may
+         * be an overestimate.
+         */
+        public abstract int maxOutputSize(int len);
+    }
+
+    //  --------------------------------------------------------
+    //  decoding
+    //  --------------------------------------------------------
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param str    the input String to decode, which is converted to
+     *               bytes using the default charset
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(String str, int flags) {
+        return decode(str.getBytes(), flags);
+    }
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param input the input array to decode
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(byte[] input, int flags) {
+        return decode(input, 0, input.length, flags);
+    }
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param input  the data to decode
+     * @param offset the position within the input array at which to start
+     * @param len    the number of bytes of input to decode
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(byte[] input, int offset, int len, int flags) {
+        // Allocate space for the most data the input could represent.
+        // (It could contain less if it contains whitespace, etc.)
+        Decoder decoder = new Decoder(flags, new byte[len*3/4]);
+
+        if (!decoder.process(input, offset, len, true)) {
+            throw new IllegalArgumentException("bad base-64");
+        }
+
+        // Maybe we got lucky and allocated exactly enough output space.
+        if (decoder.op == decoder.output.length) {
+            return decoder.output;
+        }
+
+        // Need to shorten the array, so allocate a new one of the
+        // right size and copy.
+        byte[] temp = new byte[decoder.op];
+        System.arraycopy(decoder.output, 0, temp, 0, decoder.op);
+        return temp;
+    }
+
+    /* package */ static class Decoder extends Coder {
+        /**
+         * Lookup table for turning bytes into their position in the
+         * Base64 alphabet.
+         */
+        private static final int DECODE[] = {
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
+            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
+            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        };
+
+        /**
+         * Decode lookup table for the "web safe" variant (RFC 3548
+         * sec. 4) where - and _ replace + and /.
+         */
+        private static final int DECODE_WEBSAFE[] = {
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
+            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
+            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        };
+
+        /** Non-data values in the DECODE arrays. */
+        private static final int SKIP = -1;
+        private static final int EQUALS = -2;
+
+        /**
+         * States 0-3 are reading through the next input tuple.
+         * State 4 is having read one '=' and expecting exactly
+         * one more.
+         * State 5 is expecting no more data or padding characters
+         * in the input.
+         * State 6 is the error state; an error has been detected
+         * in the input and no future input can "fix" it.
+         */
+        private int state;   // state number (0 to 6)
+        private int value;
+
+        final private int[] alphabet;
+
+        public Decoder(int flags, byte[] output) {
+            this.output = output;
+
+            alphabet = ((flags & URL_SAFE) == 0) ? DECODE : DECODE_WEBSAFE;
+            state = 0;
+            value = 0;
+        }
+
+        /**
+         * @return an overestimate for the number of bytes {@code
+         * len} bytes could decode to.
+         */
+        public int maxOutputSize(int len) {
+            return len * 3/4 + 10;
+        }
+
+        /**
+         * Decode another block of input data.
+         *
+         * @return true if the state machine is still healthy.  false if
+         *         bad base-64 data has been detected in the input stream.
+         */
+        public boolean process(byte[] input, int offset, int len, boolean finish) {
+            if (this.state == 6) return false;
+
+            int p = offset;
+            len += offset;
+
+            // Using local variables makes the decoder about 12%
+            // faster than if we manipulate the member variables in
+            // the loop.  (Even alphabet makes a measurable
+            // difference, which is somewhat surprising to me since
+            // the member variable is final.)
+            int state = this.state;
+            int value = this.value;
+            int op = 0;
+            final byte[] output = this.output;
+            final int[] alphabet = this.alphabet;
+
+            while (p < len) {
+                // Try the fast path:  we're starting a new tuple and the
+                // next four bytes of the input stream are all data
+                // bytes.  This corresponds to going through states
+                // 0-1-2-3-0.  We expect to use this method for most of
+                // the data.
+                //
+                // If any of the next four bytes of input are non-data
+                // (whitespace, etc.), value will end up negative.  (All
+                // the non-data values in decode are small negative
+                // numbers, so shifting any of them up and or'ing them
+                // together will result in a value with its top bit set.)
+                //
+                // You can remove this whole block and the output should
+                // be the same, just slower.
+                if (state == 0) {
+                    while (p+4 <= len &&
+                           (value = ((alphabet[input[p] & 0xff] << 18) |
+                                     (alphabet[input[p+1] & 0xff] << 12) |
+                                     (alphabet[input[p+2] & 0xff] << 6) |
+                                     (alphabet[input[p+3] & 0xff]))) >= 0) {
+                        output[op+2] = (byte) value;
+                        output[op+1] = (byte) (value >> 8);
+                        output[op] = (byte) (value >> 16);
+                        op += 3;
+                        p += 4;
+                    }
+                    if (p >= len) break;
+                }
+
+                // The fast path isn't available -- either we've read a
+                // partial tuple, or the next four input bytes aren't all
+                // data, or whatever.  Fall back to the slower state
+                // machine implementation.
+
+                int d = alphabet[input[p++] & 0xff];
+
+                switch (state) {
+                case 0:
+                    if (d >= 0) {
+                        value = d;
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 1:
+                    if (d >= 0) {
+                        value = (value << 6) | d;
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 2:
+                    if (d >= 0) {
+                        value = (value << 6) | d;
+                        ++state;
+                    } else if (d == EQUALS) {
+                        // Emit the last (partial) output tuple;
+                        // expect exactly one more padding character.
+                        output[op++] = (byte) (value >> 4);
+                        state = 4;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 3:
+                    if (d >= 0) {
+                        // Emit the output triple and return to state 0.
+                        value = (value << 6) | d;
+                        output[op+2] = (byte) value;
+                        output[op+1] = (byte) (value >> 8);
+                        output[op] = (byte) (value >> 16);
+                        op += 3;
+                        state = 0;
+                    } else if (d == EQUALS) {
+                        // Emit the last (partial) output tuple;
+                        // expect no further data or padding characters.
+                        output[op+1] = (byte) (value >> 2);
+                        output[op] = (byte) (value >> 10);
+                        op += 2;
+                        state = 5;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 4:
+                    if (d == EQUALS) {
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 5:
+                    if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+                }
+            }
+
+            if (!finish) {
+                // We're out of input, but a future call could provide
+                // more.
+                this.state = state;
+                this.value = value;
+                this.op = op;
+                return true;
+            }
+
+            // Done reading input.  Now figure out where we are left in
+            // the state machine and finish up.
+
+            switch (state) {
+            case 0:
+                // Output length is a multiple of three.  Fine.
+                break;
+            case 1:
+                // Read one extra input byte, which isn't enough to
+                // make another output byte.  Illegal.
+                this.state = 6;
+                return false;
+            case 2:
+                // Read two extra input bytes, enough to emit 1 more
+                // output byte.  Fine.
+                output[op++] = (byte) (value >> 4);
+                break;
+            case 3:
+                // Read three extra input bytes, enough to emit 2 more
+                // output bytes.  Fine.
+                output[op++] = (byte) (value >> 10);
+                output[op++] = (byte) (value >> 2);
+                break;
+            case 4:
+                // Read one padding '=' when we expected 2.  Illegal.
+                this.state = 6;
+                return false;
+            case 5:
+                // Read all the padding '='s we expected and no more.
+                // Fine.
+                break;
+            }
+
+            this.state = state;
+            this.op = op;
+            return true;
+        }
+    }
+
+    //  --------------------------------------------------------
+    //  encoding
+    //  --------------------------------------------------------
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * String with the result.
+     *
+     * @param input  the data to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static String encodeToString(byte[] input, int flags) {
+        try {
+            return new String(encode(input, flags), "US-ASCII");
+        } catch (UnsupportedEncodingException e) {
+            // US-ASCII is guaranteed to be available.
+            throw new AssertionError(e);
+        }
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * String with the result.
+     *
+     * @param input  the data to encode
+     * @param offset the position within the input array at which to
+     *               start
+     * @param len    the number of bytes of input to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static String encodeToString(byte[] input, int offset, int len, int flags) {
+        try {
+            return new String(encode(input, offset, len, flags), "US-ASCII");
+        } catch (UnsupportedEncodingException e) {
+            // US-ASCII is guaranteed to be available.
+            throw new AssertionError(e);
+        }
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * byte[] with the result.
+     *
+     * @param input  the data to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static byte[] encode(byte[] input, int flags) {
+        return encode(input, 0, input.length, flags);
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * byte[] with the result.
+     *
+     * @param input  the data to encode
+     * @param offset the position within the input array at which to
+     *               start
+     * @param len    the number of bytes of input to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static byte[] encode(byte[] input, int offset, int len, int flags) {
+        Encoder encoder = new Encoder(flags, null);
+
+        // Compute the exact length of the array we will produce.
+        int output_len = len / 3 * 4;
+
+        // Account for the tail of the data and the padding bytes, if any.
+        if (encoder.do_padding) {
+            if (len % 3 > 0) {
+                output_len += 4;
+            }
+        } else {
+            switch (len % 3) {
+                case 0: break;
+                case 1: output_len += 2; break;
+                case 2: output_len += 3; break;
+            }
+        }
+
+        // Account for the newlines, if any.
+        if (encoder.do_newline && len > 0) {
+            output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *
+                (encoder.do_cr ? 2 : 1);
+        }
+
+        encoder.output = new byte[output_len];
+        encoder.process(input, offset, len, true);
+
+        assert encoder.op == output_len;
+
+        return encoder.output;
+    }
+
+    /* package */ static class Encoder extends Coder {
+        /**
+         * Emit a new line every this many output tuples.  Corresponds to
+         * a 76-character line length (the maximum allowable according to
+         * <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>).
+         */
+        public static final int LINE_GROUPS = 19;
+
+        /**
+         * Lookup table for turning Base64 alphabet positions (6 bits)
+         * into output bytes.
+         */
+        private static final byte ENCODE[] = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
+            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
+            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
+            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
+        };
+
+        /**
+         * Lookup table for turning Base64 alphabet positions (6 bits)
+         * into output bytes.
+         */
+        private static final byte ENCODE_WEBSAFE[] = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
+            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
+            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
+            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_',
+        };
+
+        final private byte[] tail;
+        /* package */ int tailLen;
+        private int count;
+
+        final public boolean do_padding;
+        final public boolean do_newline;
+        final public boolean do_cr;
+        final private byte[] alphabet;
+
+        public Encoder(int flags, byte[] output) {
+            this.output = output;
+
+            do_padding = (flags & NO_PADDING) == 0;
+            do_newline = (flags & NO_WRAP) == 0;
+            do_cr = (flags & CRLF) != 0;
+            alphabet = ((flags & URL_SAFE) == 0) ? ENCODE : ENCODE_WEBSAFE;
+
+            tail = new byte[2];
+            tailLen = 0;
+
+            count = do_newline ? LINE_GROUPS : -1;
+        }
+
+        /**
+         * @return an overestimate for the number of bytes {@code
+         * len} bytes could encode to.
+         */
+        public int maxOutputSize(int len) {
+            return len * 8/5 + 10;
+        }
+
+        public boolean process(byte[] input, int offset, int len, boolean finish) {
+            // Using local variables makes the encoder about 9% faster.
+            final byte[] alphabet = this.alphabet;
+            final byte[] output = this.output;
+            int op = 0;
+            int count = this.count;
+
+            int p = offset;
+            len += offset;
+            int v = -1;
+
+            // First we need to concatenate the tail of the previous call
+            // with any input bytes available now and see if we can empty
+            // the tail.
+
+            switch (tailLen) {
+                case 0:
+                    // There was no tail.
+                    break;
+
+                case 1:
+                    if (p+2 <= len) {
+                        // A 1-byte tail with at least 2 bytes of
+                        // input available now.
+                        v = ((tail[0] & 0xff) << 16) |
+                            ((input[p++] & 0xff) << 8) |
+                            (input[p++] & 0xff);
+                        tailLen = 0;
+                    };
+                    break;
+
+                case 2:
+                    if (p+1 <= len) {
+                        // A 2-byte tail with at least 1 byte of input.
+                        v = ((tail[0] & 0xff) << 16) |
+                            ((tail[1] & 0xff) << 8) |
+                            (input[p++] & 0xff);
+                        tailLen = 0;
+                    }
+                    break;
+            }
+
+            if (v != -1) {
+                output[op++] = alphabet[(v >> 18) & 0x3f];
+                output[op++] = alphabet[(v >> 12) & 0x3f];
+                output[op++] = alphabet[(v >> 6) & 0x3f];
+                output[op++] = alphabet[v & 0x3f];
+                if (--count == 0) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                    count = LINE_GROUPS;
+                }
+            }
+
+            // At this point either there is no tail, or there are fewer
+            // than 3 bytes of input available.
+
+            // The main loop, turning 3 input bytes into 4 output bytes on
+            // each iteration.
+            while (p+3 <= len) {
+                v = ((input[p] & 0xff) << 16) |
+                    ((input[p+1] & 0xff) << 8) |
+                    (input[p+2] & 0xff);
+                output[op] = alphabet[(v >> 18) & 0x3f];
+                output[op+1] = alphabet[(v >> 12) & 0x3f];
+                output[op+2] = alphabet[(v >> 6) & 0x3f];
+                output[op+3] = alphabet[v & 0x3f];
+                p += 3;
+                op += 4;
+                if (--count == 0) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                    count = LINE_GROUPS;
+                }
+            }
+
+            if (finish) {
+                // Finish up the tail of the input.  Note that we need to
+                // consume any bytes in tail before any bytes
+                // remaining in input; there should be at most two bytes
+                // total.
+
+                if (p-tailLen == len-1) {
+                    int t = 0;
+                    v = ((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 4;
+                    tailLen -= t;
+                    output[op++] = alphabet[(v >> 6) & 0x3f];
+                    output[op++] = alphabet[v & 0x3f];
+                    if (do_padding) {
+                        output[op++] = '=';
+                        output[op++] = '=';
+                    }
+                    if (do_newline) {
+                        if (do_cr) output[op++] = '\r';
+                        output[op++] = '\n';
+                    }
+                } else if (p-tailLen == len-2) {
+                    int t = 0;
+                    v = (((tailLen > 1 ? tail[t++] : input[p++]) & 0xff) << 10) |
+                        (((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 2);
+                    tailLen -= t;
+                    output[op++] = alphabet[(v >> 12) & 0x3f];
+                    output[op++] = alphabet[(v >> 6) & 0x3f];
+                    output[op++] = alphabet[v & 0x3f];
+                    if (do_padding) {
+                        output[op++] = '=';
+                    }
+                    if (do_newline) {
+                        if (do_cr) output[op++] = '\r';
+                        output[op++] = '\n';
+                    }
+                } else if (do_newline && op > 0 && count != LINE_GROUPS) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                }
+
+                assert tailLen == 0;
+                assert p == len;
+            } else {
+                // Save the leftovers in tail to be consumed on the next
+                // call to encodeInternal.
+
+                if (p == len-1) {
+                    tail[tailLen++] = input[p];
+                } else if (p == len-2) {
+                    tail[tailLen++] = input[p];
+                    tail[tailLen++] = input[p+1];
+                }
+            }
+
+            this.op = op;
+            this.count = count;
+
+            return true;
+        }
+    }
+
+    private Base64() { }   // don't instantiate
+}
