diff --git a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
index 0312f9611..24603db16 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/AppsAdapter.java
@@ -40,6 +40,7 @@ import android.widget.TextView;
 import android.widget.Toast;
 
 import com.afollestad.materialdialogs.MaterialDialog;
+import com.amaze.filemanager.GlideApp;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.asynchronous.asynctasks.DeleteTask;
@@ -48,6 +49,7 @@ import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.RootHelper;
 import com.amaze.filemanager.fragments.AppsListFragment;
 import com.amaze.filemanager.ui.LayoutElementParcelable;
+import com.amaze.filemanager.ui.icons.Icons;
 import com.amaze.filemanager.utils.OpenMode;
 import com.amaze.filemanager.utils.ServiceWatcherUtil;
 import com.amaze.filemanager.utils.Utils;
@@ -123,8 +125,10 @@ public class AppsAdapter extends ArrayAdapter<LayoutElementParcelable> {
 
         final ViewHolder holder = (ViewHolder) view.getTag();
         holder.apkIcon.setImageDrawable(rowItem.getImageId());
-        app.ic.cancelLoad(holder.apkIcon);
-        app.ic.loadDrawable(holder.apkIcon,(rowItem.getDesc()),null);
+        GlideApp.with(app).clear(holder.apkIcon);
+        GlideApp.with(app).load(rowItem.getDesc()).into(holder.apkIcon)
+                .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
+
         if (holder.about != null) {
             if(utilsProvider.getAppTheme().equals(AppTheme.LIGHT))
                 holder.about.setColorFilter(Color.parseColor("#ff666666"));
diff --git a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
index 63243f6e4..f04334522 100644
--- a/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
+++ b/app/src/main/java/com/amaze/filemanager/adapters/RecyclerAdapter.java
@@ -18,6 +18,7 @@ import android.view.animation.AnimationUtils;
 import android.widget.ImageView;
 import android.widget.PopupMenu;
 
+import com.amaze.filemanager.GlideApp;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.adapters.holders.EmptyViewHolder;
 import com.amaze.filemanager.adapters.holders.ItemViewHolder;
@@ -493,13 +494,15 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                                 holder.apkIcon.setVisibility(View.GONE);
                                 holder.pictureIcon.setVisibility(View.VISIBLE);
                                 holder.pictureIcon.setImageDrawable(mainFrag.DARK_IMAGE);
-                                mainFrag.iconHolder.cancelLoad(holder.pictureIcon);
-                                mainFrag.iconHolder.loadDrawable(holder.pictureIcon, (rowItem.getDesc()), null);
+                                GlideApp.with(mainFrag).clear(holder.pictureIcon);
+                                GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.pictureIcon)
+                                        .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             } else {
                                 holder.apkIcon.setVisibility(View.VISIBLE);
                                 holder.apkIcon.setImageDrawable(mainFrag.DARK_IMAGE);
-                                mainFrag.iconHolder.cancelLoad(holder.apkIcon);
-                                mainFrag.iconHolder.loadDrawable(holder.apkIcon, (rowItem.getDesc()), null);
+                                GlideApp.with(mainFrag).clear(holder.apkIcon);
+                                GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
+                                        .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             }
                         }
                         break;
@@ -509,8 +512,9 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             holder.pictureIcon.setVisibility(View.GONE);
                             holder.apkIcon.setVisibility(View.VISIBLE);
                             holder.apkIcon.setImageDrawable(mainFrag.apk);
-                            mainFrag.iconHolder.cancelLoad(holder.apkIcon);
-                            mainFrag.iconHolder.loadDrawable(holder.apkIcon, (rowItem.getDesc()), null);
+                            GlideApp.with(mainFrag).clear(holder.apkIcon);
+                            GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
+                                    .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                         }
                         break;
                     case VIDEO_FILETYPE:
@@ -519,13 +523,15 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             if (mainFrag.CIRCULAR_IMAGES) {
                                 holder.pictureIcon.setVisibility(View.VISIBLE);
                                 holder.pictureIcon.setImageDrawable(mainFrag.DARK_VIDEO);
-                                mainFrag.iconHolder.cancelLoad(holder.pictureIcon);
-                                mainFrag.iconHolder.loadDrawable(holder.pictureIcon, (rowItem.getDesc()), null);
+                                GlideApp.with(mainFrag).clear(holder.pictureIcon);
+                                GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.pictureIcon)
+                                        .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             } else {
                                 holder.apkIcon.setVisibility(View.VISIBLE);
                                 holder.apkIcon.setImageDrawable(mainFrag.DARK_VIDEO);
-                                mainFrag.iconHolder.cancelLoad(holder.apkIcon);
-                                mainFrag.iconHolder.loadDrawable(holder.apkIcon, (rowItem.getDesc()), null);
+                                GlideApp.with(mainFrag).clear(holder.apkIcon);
+                                GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
+                                        .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                             }
                         }
                         break;
@@ -555,8 +561,9 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                             holder.pictureIcon.setVisibility(View.GONE);
                             holder.apkIcon.setVisibility(View.GONE);
                             holder.genericIcon.setImageDrawable(lockBitmapDrawable);
-                            //main.ic.cancelLoad(holder.apkIcon);
-                            //main.ic.loadDrawable(holder.apkIcon, (rowItem.getDesc()), null);
+                            //GlideApp.with(mainFrag).clear(holder.apkIcon);
+                            //GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.apkIcon)
+                            //       .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                         }
                         break;
                     default:
@@ -642,12 +649,14 @@ public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolde
                     holder.imageView1.setImageDrawable(null);
                     if (utilsProvider.getAppTheme().equals(AppTheme.DARK))
                         holder.imageView1.setBackgroundColor(Color.BLACK);
-                    mainFrag.iconHolder.cancelLoad(holder.imageView1);
-                    mainFrag.iconHolder.loadDrawable(holder.imageView1, (rowItem.getDesc()), null);
+                    GlideApp.with(mainFrag).clear(holder.imageView1);
+                    GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.imageView1)
+                            .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                 } else if (Icons.isApk((rowItem.getDesc()))) {
                     holder.genericIcon.setColorFilter(null);
-                    mainFrag.iconHolder.cancelLoad(holder.genericIcon);
-                    mainFrag.iconHolder.loadDrawable(holder.genericIcon, (rowItem.getDesc()), null);
+                    GlideApp.with(mainFrag).clear(holder.genericIcon);
+                    GlideApp.with(mainFrag).load(rowItem.getDesc()).into(holder.genericIcon)
+                            .onLoadFailed(Icons.loadFailedThumbForFile(context, rowItem.getDesc()));
                 }
 
                 if (rowItem.isDirectory()) {
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
index 9912ab703..597c8dcc0 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/AppsListFragment.java
@@ -32,12 +32,11 @@ import android.widget.ListView;
 import android.widget.Toast;
 
 import com.amaze.filemanager.R;
-import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.activities.MainActivity;
+import com.amaze.filemanager.activities.superclasses.ThemedActivity;
 import com.amaze.filemanager.adapters.AppsAdapter;
 import com.amaze.filemanager.asynchronous.loaders.AppListLoader;
 import com.amaze.filemanager.ui.LayoutElementParcelable;
-import com.amaze.filemanager.ui.icons.IconHolder;
 import com.amaze.filemanager.utils.Utils;
 import com.amaze.filemanager.utils.provider.UtilitiesProviderInterface;
 import com.amaze.filemanager.utils.theme.AppTheme;
@@ -52,7 +51,6 @@ public class AppsListFragment extends ListFragment implements LoaderManager.Load
 
     public SharedPreferences Sp;
     ListView vl;
-    public IconHolder ic;
     int asc, sortby;
 
     int index = 0, top = 0;
@@ -65,8 +63,6 @@ public class AppsListFragment extends ListFragment implements LoaderManager.Load
         utilsProvider = (UtilitiesProviderInterface) getActivity();
 
         setHasOptionsMenu(false);
-        ic = new IconHolder(getActivity(), true, true);
-
     }
 
     @Override
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index 183449ea5..789c0b4e7 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -85,7 +85,6 @@ import com.amaze.filemanager.filesystem.PasteHelper;
 import com.amaze.filemanager.fragments.preference_fragments.PrefFrag;
 import com.amaze.filemanager.ui.LayoutElementParcelable;
 import com.amaze.filemanager.ui.dialogs.GeneralDialogCreation;
-import com.amaze.filemanager.ui.icons.IconHolder;
 import com.amaze.filemanager.ui.icons.Icons;
 import com.amaze.filemanager.ui.icons.MimeTypes;
 import com.amaze.filemanager.ui.views.DividerItemDecoration;
@@ -133,7 +132,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
      * {@link MainFragment#IS_LIST} boolean to identify if the view is a list or grid
      */
     public boolean IS_LIST = true;
-    public IconHolder iconHolder;
     public SwipeRefreshLayout mSwipeRefreshLayout;
     public int file_count, folder_count, columns;
     public String smbPath;
@@ -285,7 +283,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
         HybridFile f = new HybridFile(OpenMode.UNKNOWN, CURRENT_PATH);
         f.generateMode(getActivity());
         getMainActivity().getAppbar().getBottomBar().setClickListener();
-        iconHolder = new IconHolder(getActivity(), SHOW_THUMBS, !IS_LIST);
 
         if (utilsProvider.getAppTheme().equals(AppTheme.LIGHT) && !IS_LIST) {
             listView.setBackgroundColor(Utils.getColor(getContext(), R.color.grid_background_light));
@@ -362,7 +359,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
     void switchToGrid() {
         IS_LIST = false;
 
-        iconHolder = new IconHolder(getActivity(), SHOW_THUMBS, !IS_LIST);
         folder = new BitmapDrawable(res, mFolderBitmap);
         fixIcons(true);
 
@@ -390,7 +386,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
             listView.setBackgroundDrawable(null);
         }
 
-        iconHolder = new IconHolder(getActivity(), SHOW_THUMBS, !IS_LIST);
         folder = new BitmapDrawable(res, mFolderBitmap);
         fixIcons(true);
         if (mLayoutManager == null)
@@ -1420,7 +1415,6 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
 
     public void updateList() {
         computeScroll();
-        iconHolder.cleanup();
         loadlist((CURRENT_PATH), true, openMode);
     }
 
diff --git a/app/src/main/java/com/amaze/filemanager/ui/icons/IconHolder.java b/app/src/main/java/com/amaze/filemanager/ui/icons/IconHolder.java
deleted file mode 100644
index be9db792c..000000000
--- a/app/src/main/java/com/amaze/filemanager/ui/icons/IconHolder.java
+++ /dev/null
@@ -1,361 +0,0 @@
-/*
- * Copyright (C) 2014 Arpit Khurana <arpitkh96@gmail.com>
- *
- * This file is part of Amaze File Manager.
- *
- * Amaze File Manager is free software: you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation, either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
- */
-
-package com.amaze.filemanager.ui.icons;
-
-
-import android.content.Context;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.res.Resources;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.media.ThumbnailUtils;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-import android.provider.MediaStore;
-import android.support.v4.content.ContextCompat;
-import android.widget.ImageView;
-
-import com.amaze.filemanager.R;
-import com.amaze.filemanager.database.CloudHandler;
-import com.amaze.filemanager.utils.DataUtils;
-import com.amaze.filemanager.utils.OTGUtil;
-import com.amaze.filemanager.utils.OpenMode;
-import com.amaze.filemanager.utils.Utils;
-import com.amaze.filemanager.utils.cloud.CloudUtil;
-import com.cloudrail.si.interfaces.CloudStorage;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-import jcifs.smb.SmbFileInputStream;
-
-/**
- * A class that holds icons for a more efficient access.
- */
-public class IconHolder {
-
-    private static final int MAX_CACHE = 500;
-
-    private static final int MSG_LOAD = 1;
-    private static final int MSG_LOADED = 2;
-    private static final int MSG_DESTROY = 3;
-
-    private final Map<String, Bitmap> mIcons;     // Themes based
-    private final Map<String, Bitmap> mAppIcons;  // App based
-    private DataUtils dataUtils = DataUtils.getInstance();
-
-    private final Map<ImageView, String> mRequests;
-
-    private final Context mContext;
-    private final boolean mUseThumbs;
-    private HandlerThread mWorkerThread;
-    private Handler mWorkerHandler;
-
-    private static class LoadResult {
-        String fso;
-        Bitmap result;
-    }
-
-    private Handler mHandler = new Handler() {
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case MSG_LOADED:
-                    processResult((LoadResult) msg.obj);
-                    sendEmptyMessageDelayed(MSG_DESTROY, 3000);
-                    break;
-                case MSG_DESTROY:
-                    shutdownWorker();
-                    break;
-            }
-        }
-
-        private synchronized void processResult(LoadResult result) {
-            // Cache the new drawable
-            final String filePath =(result.fso);
-
-            synchronized (mAppIcons) {
-
-                mAppIcons.put(filePath, result.result);
-            }
-
-            // find the request for it
-            synchronized (mRequests) {
-                for (Map.Entry<ImageView, String> entry : mRequests.entrySet()) {
-                    final ImageView imageView = entry.getKey();
-                    final String fso = entry.getValue();
-
-                    if (fso != null && fso.equals(result.fso)) {
-                        imageView.setImageBitmap(result.result);
-                        mRequests.remove(imageView);
-                        break;
-                    }
-                }
-            }
-        }
-    };
-
-    /**
-     * Constructor of <code>IconHolder</code>.
-     *
-     * @param useThumbs If thumbs of images, videos, apps, ... should be returned
-     * instead of the default icon.
-     */
-    int px;
-    public IconHolder(Context context, boolean useThumbs,boolean grid) {
-        super();
-        this.mContext = context;
-        this.mUseThumbs = useThumbs;
-        this.mRequests = Collections.synchronizedMap(new HashMap<>());
-        this.mIcons = new HashMap<>();
-        this.mAppIcons = new LinkedHashMap<String, Bitmap>(MAX_CACHE, .75F, true) {
-            private static final long serialVersionUID = 1L;
-            @Override
-            protected boolean removeEldestEntry(Map.Entry<String, Bitmap> eldest) {
-                return size() > MAX_CACHE;
-            }
-        };
-        Resources res=mContext.getResources();
-        int dp=50;
-        if(grid){dp=150;}
-        px = (int)(dp * (res.getDisplayMetrics().densityDpi / 160));
-
-    }
-
-    /**
-     * Method that returns a drawable reference of a icon.
-     *
-     * @param resid The resource identifier
-     * @return Drawable The drawable icon reference
-     */
-
-    /**
-     * Method that returns a drawable reference of a FileSystemObject.
-     *
-     * @param iconView View to load the drawable into
-     * @param fso The FileSystemObject reference
-     * @param defaultIcon Drawable to be used in case no specific one could be found
-     * @return Drawable The drawable reference
-     */
-    public void loadDrawable(final ImageView iconView, final String fso, Drawable defaultIcon) {
-        if (!mUseThumbs) {
-            return;
-        }
-
-        // Is cached?
-        final String filePath = fso;
-        if (this.mAppIcons.containsKey(filePath)) {
-            iconView.setImageBitmap(this.mAppIcons.get(filePath));
-            return;
-        }
-        new Thread(() -> {
-            mHandler.removeMessages(MSG_DESTROY);
-            if (mWorkerThread == null || mWorkerHandler==null) {
-                mWorkerThread = new HandlerThread("IconHolderLoader");
-                mWorkerThread.start();
-                mWorkerHandler = new WorkerHandler(mWorkerThread.getLooper());
-            }
-
-            mRequests.put(iconView, fso);
-            Message msg = mWorkerHandler.obtainMessage(MSG_LOAD, fso);
-            msg.sendToTarget();
-
-        }).start();
-    }
-
-    /**
-     * Cancel loading of a drawable for a certain ImageView.
-     */
-    public void cancelLoad(ImageView view) {
-        synchronized (mRequests) {
-            String fso = mRequests.get(view);
-            if (fso != null && mWorkerHandler != null) {
-                mWorkerHandler.removeMessages(MSG_LOAD, fso);
-            }
-            mRequests.remove(view);
-        }
-    }
-
-    private class WorkerHandler extends Handler {
-        WorkerHandler(Looper looper) {
-            super(looper);
-        }
-
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case MSG_LOAD:
-                    String fso = (String) msg.obj;
-                    Bitmap d = loadDrawable(fso);
-                    if (d != null) {
-                        LoadResult result = new LoadResult();
-                        result.fso = fso;
-                        result.result = d;
-                        mHandler.obtainMessage(MSG_LOADED, result).sendToTarget();
-                    }
-                    break;
-            }
-        }
-    }
-    private Bitmap loadDrawable(String fso) {
-        final String filePath = (fso);
-
-        try {
-            if (Icons.isApk(filePath)) {
-                return getAppDrawable(fso);
-            }else if(Icons.isPicture(filePath)){
-                return	loadImage(fso);
-            }else if(Icons.isVideo(filePath))
-                return getVideoDrawable(fso);
-        } catch (OutOfMemoryError outOfMemoryError) {
-            cleanup();
-            shutdownWorker();
-        }
-
-        return null;
-    }
-    private Bitmap getVideoDrawable(String path) throws OutOfMemoryError {
-
-        try {
-            Bitmap thumb = ThumbnailUtils.createVideoThumbnail(path,
-                    MediaStore.Images.Thumbnails.MINI_KIND);
-            return thumb;
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        }
-    }
-
-    private Bitmap getAppDrawable(String path) throws OutOfMemoryError {
-        Bitmap bitsat;
-        try {
-            PackageManager pm = mContext.getPackageManager();
-            PackageInfo pi = pm.getPackageArchiveInfo(path, 0);
-            // // the secret are these two lines....
-            pi.applicationInfo.sourceDir = path;
-            pi.applicationInfo.publicSourceDir = path;
-            // //
-            Drawable d = pi.applicationInfo.loadIcon(pm);
-
-            Bitmap d1 = null;
-            d1 = ((BitmapDrawable) d).getBitmap();
-            bitsat = d1;
-        } catch (Exception e) {
-            Drawable apk = ContextCompat.getDrawable(mContext, R.drawable.ic_doc_apk_grid);
-            Bitmap apk1 = ((BitmapDrawable) apk).getBitmap();
-            bitsat = apk1;
-        }
-        return bitsat;
-    }
-
-    private Bitmap loadImage(String path) throws OutOfMemoryError {
-
-        Bitmap bitsat;
-
-        try {
-            BitmapFactory.Options options = new BitmapFactory.Options();
-            options.inPreferredConfig= Bitmap.Config.ARGB_8888;
-            options.inJustDecodeBounds = true;
-            Bitmap b = BitmapFactory.decodeFile(path, options);
-
-            options.inSampleSize = Utils.calculateInSampleSize(options, px, px);
-
-            // Decode bitmap with inSampleSize set
-            options.inJustDecodeBounds = false;
-
-            Bitmap bit;
-            if(path.startsWith("smb:/")) {
-                bit = BitmapFactory.decodeStream(new SmbFileInputStream(path));
-            } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_DROPBOX)) {
-
-                CloudStorage cloudStorageDropbox = dataUtils.getAccount(OpenMode.DROPBOX);
-
-                bit = BitmapFactory.decodeStream(cloudStorageDropbox.getThumbnail(CloudUtil
-                        .stripPath(OpenMode.DROPBOX, path)));
-            } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_BOX)) {
-
-                CloudStorage cloudStorageBox = dataUtils.getAccount(OpenMode.BOX);
-
-                bit = BitmapFactory.decodeStream(cloudStorageBox.getThumbnail(CloudUtil
-                        .stripPath(OpenMode.BOX, path)));
-            } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_GOOGLE_DRIVE)) {
-
-                CloudStorage cloudStorageGDrive = dataUtils.getAccount(OpenMode.GDRIVE);
-
-                bit = BitmapFactory.decodeStream(cloudStorageGDrive.getThumbnail(CloudUtil
-                        .stripPath(OpenMode.GDRIVE, path)));
-            } else if (path.startsWith(CloudHandler.CLOUD_PREFIX_ONE_DRIVE)) {
-
-                CloudStorage cloudStorageOneDrive = dataUtils.getAccount(OpenMode.ONEDRIVE);
-
-                bit = BitmapFactory.decodeStream(cloudStorageOneDrive.getThumbnail(CloudUtil
-                        .stripPath(OpenMode.ONEDRIVE, path)));
-            } else if (path.startsWith(OTGUtil.PREFIX_OTG)) {
-                bit = BitmapFactory.decodeStream(OTGUtil.getDocumentFilesList(path, mContext).get(0).getInputStream(mContext));
-            }
-            else bit= BitmapFactory.decodeFile(path, options);
-
-            bitsat = bit;// decodeFile(path);//.createScaledBitmap(bits,imageViewReference.get().getHeight(),imageViewReference.get().getWidth(),true);
-        } catch (Exception e) {
-            Drawable img = ContextCompat.getDrawable(mContext, R.drawable.ic_doc_image);
-            Bitmap img1 = ((BitmapDrawable) img).getBitmap();
-            bitsat = img1;
-        }return bitsat;
-    }
-
-    /**
-     * Method that returns a thumbnail of the album folder
-     *
-     * @param albumId The album identifier
-     * @return Drawable The drawable or null if cannot be extracted
-     */
-
-
-    /**
-     * Shut down worker thread
-     */
-    private void shutdownWorker() {
-        if (mWorkerThread != null) {
-            mWorkerThread.getLooper().quit();
-            mWorkerHandler = null;
-            mWorkerThread = null;
-        }
-    }
-
-    /**
-     * Free any resources used by this instance
-     */
-    public void cleanup() {
-        this.mRequests.clear();
-        this.mIcons.clear();
-        this.mAppIcons.clear();
-
-        shutdownWorker();
-    }
-
-}
-
diff --git a/app/src/main/java/com/amaze/filemanager/ui/icons/Icons.java b/app/src/main/java/com/amaze/filemanager/ui/icons/Icons.java
index 5eff39855..1853ace4f 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/icons/Icons.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/icons/Icons.java
@@ -19,8 +19,11 @@
 
 package com.amaze.filemanager.ui.icons;
 
+import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.drawable.Drawable;
+import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
 import android.util.SparseArray;
 
 import com.amaze.filemanager.R;
@@ -402,4 +405,15 @@ public class Icons {
         }
         return drawable;
     }
+
+    public static Drawable loadFailedThumbForFile(@NonNull final Context context, String filePath) {
+        if (Icons.isApk((filePath))) {
+            return ContextCompat.getDrawable(context, R.drawable.ic_doc_apk_grid);
+        } else if (Icons.isPicture((filePath))) {
+            return ContextCompat.getDrawable(context, R.drawable.ic_doc_image);
+        } else {
+            return null;
+        }
+    }
+
 }
