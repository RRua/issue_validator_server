diff --git a/app/src/main/java/com/intervigil/micdroid/AudioController.java b/app/src/main/java/com/intervigil/micdroid/AudioController.java
index a347f0d..42946ee 100644
--- a/app/src/main/java/com/intervigil/micdroid/AudioController.java
+++ b/app/src/main/java/com/intervigil/micdroid/AudioController.java
@@ -47,6 +47,10 @@ public class AudioController {
         sharedPrefs.registerOnSharedPreferenceChangeListener(mPrefListener);
     }
 
+    public int getSampleRate() {
+        return mInputSampleRate;
+    }
+
     public boolean isLive() {
         return mIsLive;
     }
diff --git a/app/src/main/java/com/intervigil/micdroid/AutotalentAsyncTask.java b/app/src/main/java/com/intervigil/micdroid/AutotalentAsyncTask.java
new file mode 100644
index 0000000..48e3219
--- /dev/null
+++ b/app/src/main/java/com/intervigil/micdroid/AutotalentAsyncTask.java
@@ -0,0 +1,160 @@
+package com.intervigil.micdroid;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.os.AsyncTask;
+import android.widget.Toast;
+
+import com.intervigil.micdroid.helper.ApplicationHelper;
+import com.intervigil.micdroid.helper.DialogHelper;
+import com.intervigil.wave.WaveReader;
+import com.intervigil.wave.WaveWriter;
+
+import net.sourceforge.autotalent.Autotalent;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+
+public class AutotalentAsyncTask extends AsyncTask<String, Void, Void> {
+
+    private static final int AUTOTALENT_CHUNK_SIZE = 8192;
+
+    private final Context mContext;
+    private ProgressDialog mBusySpinner;
+    private boolean mIsLive;
+
+    public AutotalentAsyncTask(Context context, boolean isLive) {
+        mContext = context;
+        mBusySpinner = new ProgressDialog(mContext);
+        mBusySpinner.setCancelable(false);
+        mIsLive = isLive;
+    }
+
+    @Override
+    protected void onCancelled(Void result) {
+        DialogHelper.showWarning(mContext,
+                R.string.recording_io_error_title,
+                R.string.recording_io_error_warning);
+    }
+
+    @Override
+    protected void onPreExecute() {
+        if (mIsLive) {
+            mBusySpinner.setMessage(mContext.getString(R.string.saving_recording_progress_msg));
+        } else {
+            mBusySpinner.setMessage(mContext.getString(R.string.autotalent_progress_msg));
+        }
+        mBusySpinner.show();
+    }
+
+    @Override
+    protected Void doInBackground(String... params) {
+        // maybe ugly but we only pass one string in anyway
+        String fileName = params[0];
+
+        if (mIsLive) {
+            try {
+                // do a file copy since renameTo doesn't work
+                moveFile(fileName);
+            } catch (IOException e) {
+                e.printStackTrace();
+                cancel(true);
+            }
+        } else {
+            try {
+                processPitchCorrection(fileName);
+            } catch (IOException e) {
+                e.printStackTrace();
+                cancel(true);
+            }
+        }
+        return null;
+    }
+
+    private void processPitchCorrection(String file) throws IOException {
+        WaveReader reader = null;
+        WaveWriter writer = null;
+        short[] buf = new short[AUTOTALENT_CHUNK_SIZE];
+        try {
+            FileInputStream in = mContext.openFileInput(
+                    mContext.getString(R.string.default_recording_name));
+            FileOutputStream out = mContext.openFileOutput(file, Context.MODE_WORLD_READABLE);
+            reader = new WaveReader(in);
+            reader.openWave();
+            writer = new WaveWriter(out, reader.getSampleRate(), reader.getChannels(),
+                    reader.getPcmFormat());
+            writer.createWaveFile();
+            while (true) {
+                int samplesRead = reader.read(buf, AUTOTALENT_CHUNK_SIZE);
+                if (samplesRead > 0) {
+                    Autotalent.processSamples(buf, samplesRead);
+                    writer.write(buf, 0, samplesRead);
+                } else {
+                    break;
+                }
+            }
+        } catch (IOException e) {
+            throw e;
+        } finally {
+            try {
+                if (reader != null) {
+                    reader.closeWaveFile();
+                }
+                if (writer != null) {
+                    writer.closeWaveFile();
+                    mContext.deleteFile(mContext.getString(R.string.default_recording_name));
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void moveFile(String file) throws IOException {
+        int len;
+        InputStream in = null;
+        OutputStream out = null;
+        byte[] buf = new byte[1024];
+        // TODO: Refactor this to use app local storage
+        File src = new File(
+                mContext.getCacheDir().getAbsolutePath()
+                        + File.separator
+                        + mContext.getString(R.string.default_recording_name));
+        File dst = new File(
+                ApplicationHelper.getLibraryDirectory()
+                        + File.separator
+                        + file);
+        try {
+            in = new FileInputStream(src);
+            out = new FileOutputStream(dst);
+            while ((len = in.read(buf)) > 0) {
+                out.write(buf, 0, len);
+            }
+        } catch (IOException e) {
+            throw e;
+        } finally {
+            try {
+                if (in != null) {
+                    in.close();
+                }
+                if (out != null) {
+                    out.close();
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    @Override
+    protected void onPostExecute(Void result) {
+        mBusySpinner.dismiss();
+        Toast.makeText(mContext, R.string.recording_save_success,
+                Toast.LENGTH_SHORT).show();
+    }
+}
diff --git a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java b/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
deleted file mode 100644
index 81a0526..0000000
--- a/app/src/main/java/com/intervigil/micdroid/AutotalentTask.java
+++ /dev/null
@@ -1,190 +0,0 @@
-package com.intervigil.micdroid;
-
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.os.AsyncTask;
-import android.os.Handler;
-import android.os.Message;
-
-import com.intervigil.micdroid.helper.ApplicationHelper;
-import com.intervigil.micdroid.helper.DialogHelper;
-import com.intervigil.micdroid.helper.PreferenceHelper;
-import com.intervigil.micdroid.interfaces.DependentTask;
-import com.intervigil.wave.WaveReader;
-import com.intervigil.wave.WaveWriter;
-
-import net.sourceforge.autotalent.Autotalent;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-
-public class AutotalentTask {
-
-    private static final int AUTOTALENT_CHUNK_SIZE = 8192;
-
-    public static final int AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR = 48105;
-
-    private final Context mContext;
-    private final DependentTask mDependentTask;
-
-    public AutotalentTask(Context context, DependentTask task) {
-        mContext = context;
-        mDependentTask = task;
-    }
-
-    public void runAutotalentTask(String file) {
-        new ProcessAutotalentTask().execute(file);
-    }
-
-    private Handler autotalentTaskHandler = new Handler() {
-        // use the handler to receive error messages from the recorder object
-        @Override
-        public void handleMessage(Message msg) {
-            switch (msg.what) {
-                case AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR:
-                    // received error that the writer couldn't create the recording
-                    DialogHelper.showWarning(mContext,
-                            R.string.recording_io_error_title,
-                            R.string.recording_io_error_warning);
-                    mDependentTask.handleError();
-                    break;
-            }
-        }
-    };
-
-    private class ProcessAutotalentTask extends AsyncTask<String, Void, Void> {
-        private ProgressDialog mBusySpinner;
-        private boolean mIsLive;
-
-        public ProcessAutotalentTask() {
-            mBusySpinner = new ProgressDialog(mContext);
-            mBusySpinner.setCancelable(false);
-            mIsLive = PreferenceHelper.getLiveMode(mContext);
-        }
-
-        @Override
-        protected void onPreExecute() {
-            if (mIsLive) {
-                mBusySpinner.setMessage(mContext.getString(R.string.saving_recording_progress_msg));
-            } else {
-                mBusySpinner.setMessage(mContext.getString(R.string.autotalent_progress_msg));
-            }
-            mBusySpinner.show();
-        }
-
-        @Override
-        protected Void doInBackground(String... params) {
-            // maybe ugly but we only pass one string in anyway
-            String fileName = params[0];
-            Message msg = null;
-
-            if (mIsLive) {
-                try {
-                    // do a file copy since renameTo doesn't work
-                    moveFile(fileName);
-                } catch (IOException e) {
-                    e.printStackTrace();
-                    msg = autotalentTaskHandler.obtainMessage(
-                            AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
-                }
-            } else {
-                try {
-                    processPitchCorrection(fileName);
-                } catch (IOException e) {
-                    e.printStackTrace();
-                    msg = autotalentTaskHandler.obtainMessage(
-                            AUTOTALENT_TASK_MESSAGE_RECORDING_IO_ERROR);
-                }
-            }
-            if (msg != null) {
-                autotalentTaskHandler.sendMessage(msg);
-            }
-            return null;
-        }
-
-        private void processPitchCorrection(String file) throws IOException {
-            WaveReader reader = null;
-            WaveWriter writer = null;
-            short[] buf = new short[AUTOTALENT_CHUNK_SIZE];
-            try {
-                FileInputStream in = mContext.openFileInput(
-                        mContext.getString(R.string.default_recording_name));
-                FileOutputStream out = mContext.openFileOutput(file, Context.MODE_WORLD_READABLE);
-                reader = new WaveReader(in);
-                reader.openWave();
-                writer = new WaveWriter(out, reader.getSampleRate(), reader.getChannels(),
-                        reader.getPcmFormat());
-                writer.createWaveFile();
-                while (true) {
-                    int samplesRead = reader.read(buf, AUTOTALENT_CHUNK_SIZE);
-                    if (samplesRead > 0) {
-                        Autotalent.processSamples(buf, samplesRead);
-                        writer.write(buf, 0, samplesRead);
-                    } else {
-                        break;
-                    }
-                }
-            } catch (IOException e) {
-                throw e;
-            } finally {
-                try {
-                    if (reader != null) {
-                        reader.closeWaveFile();
-                    }
-                    if (writer != null) {
-                        writer.closeWaveFile();
-                        mContext.deleteFile(mContext.getString(R.string.default_recording_name));
-                    }
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-
-        private void moveFile(String file) throws IOException {
-            int len;
-            InputStream in = null;
-            OutputStream out = null;
-            byte[] buf = new byte[1024];
-            File src = new File(
-                    mContext.getCacheDir().getAbsolutePath()
-                            + File.separator
-                            + mContext.getString(R.string.default_recording_name));
-            File dst = new File(
-                    ApplicationHelper.getLibraryDirectory()
-                            + File.separator
-                            + file);
-            try {
-                in = new FileInputStream(src);
-                out = new FileOutputStream(dst);
-                while ((len = in.read(buf)) > 0) {
-                    out.write(buf, 0, len);
-                }
-            } catch (IOException e) {
-                throw e;
-            } finally {
-                try {
-                    if (in != null) {
-                        in.close();
-                    }
-                    if (out != null) {
-                        out.close();
-                    }
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-
-        @Override
-        protected void onPostExecute(Void unused) {
-            mBusySpinner.dismiss();
-            mDependentTask.doTask();
-        }
-    }
-}
diff --git a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java b/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
deleted file mode 100644
index a017a80..0000000
--- a/app/src/main/java/com/intervigil/micdroid/FileNameEntry.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/* FileNameEntry.java
-
-   Copyright (c) 2010 Ethan Chen
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License along
-   with this program; if not, write to the Free Software Foundation, Inc.,
-   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-package com.intervigil.micdroid;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.WindowManager;
-import android.widget.Button;
-import android.widget.EditText;
-
-import com.intervigil.micdroid.model.Recording;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-public class FileNameEntry extends Activity {
-
-    private AlertDialog mInvalidNameAlert;
-
-    /**
-     * Called when the activity is starting. This is where most initialization
-     * should go: calling setContentView(int) to inflate the activity's UI, etc.
-     *
-     * @param icicle Activity's saved state, if any.
-     */
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-        setContentView(R.layout.filename_entry);
-        getWindow().setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,
-                WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
-
-        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd-HH.mm.ss");
-        String defaultName = formatter.format(new Date());
-        ((EditText) findViewById(R.id.filename_entry_field))
-                .setText(defaultName);
-
-        mInvalidNameAlert = new AlertDialog.Builder(this).setTitle(
-                getString(R.string.invalid_name_alert_title)).setMessage(
-                getString(R.string.invalid_name_alert_message))
-                .setNeutralButton("ok", new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int which) {
-                        mInvalidNameAlert.dismiss();
-                    }
-                }).create();
-
-        findViewById(R.id.filename_entry_btn_ok)
-                .setOnClickListener(mOkBtnListener);
-    }
-
-    private OnClickListener mOkBtnListener = new OnClickListener() {
-        public void onClick(View v) {
-            EditText fileNameInput = (EditText) findViewById(R.id.filename_entry_field);
-            String fileName = fileNameInput.getText().toString();
-            Intent result = new Intent();
-            result.putExtra(Constants.INTENT_EXTRA_FILE_NAME, fileName);
-
-            Bundle data = getIntent().getExtras();
-            if (data != null) {
-                Recording r = data
-                        .getParcelable(Constants.INTENT_EXTRA_RECORDING);
-                result.putExtra(Constants.INTENT_EXTRA_RECORDING, r);
-            }
-
-            if (fileName == null || fileName.length() == 0) {
-                mInvalidNameAlert.show();
-            } else {
-                setResult(Activity.RESULT_OK, result);
-                finish();
-            }
-        }
-    };
-}
diff --git a/app/src/main/java/com/intervigil/micdroid/MainActivity.java b/app/src/main/java/com/intervigil/micdroid/MainActivity.java
index 7437071..a6f672f 100644
--- a/app/src/main/java/com/intervigil/micdroid/MainActivity.java
+++ b/app/src/main/java/com/intervigil/micdroid/MainActivity.java
@@ -20,35 +20,62 @@
 
 package com.intervigil.micdroid;
 
+import android.app.DialogFragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.net.Uri;
 import android.os.Bundle;
+import android.preference.PreferenceManager;
 import android.support.design.widget.NavigationView;
 import android.support.v4.widget.DrawerLayout;
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.view.MenuItem;
+import android.view.WindowManager;
 import android.widget.Toast;
 
 import com.intervigil.micdroid.helper.DialogHelper;
+import com.intervigil.micdroid.helper.HeadsetHelper;
+import com.intervigil.micdroid.helper.PreferenceHelper;
 import com.intervigil.micdroid.helper.RecordingOptionsHelper;
+import com.intervigil.micdroid.helper.UpdateHelper;
 import com.intervigil.micdroid.model.Recording;
 
+import net.sourceforge.autotalent.Autotalent;
+
 import java.io.File;
 
 public class MainActivity extends AppCompatActivity
-        implements RecordingOptionsDialogFragment.RecordingOptionsDialogListener {
+        implements RecordingOptionsDialogFragment.RecordingOptionsDialogListener,
+        NameEntryDialogFragment.NameEntryDialogListener,
+        MicFragment.MicListener,
+        SipdroidRecorder.RecorderStoppedListener {
 
     private static final String TAG = "MainActivity";
 
+    private static final float CONCERT_A = 440.0f;
+
+    private static final int DEFAULT_SCALE_ROTATE = 0;
+    private static final float DEFAULT_FIXED_PITCH = 0.0f;
+    private static final float DEFAULT_LFO_DEPTH = 0.0f;
+    private static final float DEFAULT_LFO_RATE = 5.0f;
+    private static final float DEFAULT_LFO_SHAPE = 0.0f;
+    private static final float DEFAULT_LFO_SYM = 0.0f;
+    private static final int DEFAULT_LFO_QUANT = 0;
+
     private Context mContext;
+
     private DrawerLayout mDrawerLayout;
     private ActionBarDrawerToggle mDrawerToggle;
 
+    private SipdroidRecorder mRecorder;
+    private AudioController mAudioControl;
+    private boolean mIsLive;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -56,6 +83,8 @@ public class MainActivity extends AppCompatActivity
 
         mContext = this;
 
+        mAudioControl = new AudioController(mContext);
+
         mDrawerLayout = (DrawerLayout) findViewById(R.id.main_drawer_layout);
 
         Toolbar actionBar = (Toolbar) findViewById(R.id.main_action_bar);
@@ -72,6 +101,24 @@ public class MainActivity extends AppCompatActivity
         getFragmentManager().beginTransaction()
                 .replace(R.id.main_content_frame, new MicFragment())
                 .commit();
+
+        SharedPreferences sharedPrefs =
+                PreferenceManager.getDefaultSharedPreferences(mContext);
+        sharedPrefs.registerOnSharedPreferenceChangeListener(mPreferenceListener);
+
+        loadPreferences();
+
+        if (UpdateHelper.isAppUpdated(mContext)) {
+            UpdateHelper.onAppUpdate(mContext);
+        } else {
+            mAudioControl.configureRecorder();
+        }
+    }
+
+    @Override
+    public void onStop() {
+        Autotalent.destroyAutotalent();
+        super.onStop();
     }
 
     @Override
@@ -94,6 +141,66 @@ public class MainActivity extends AppCompatActivity
         mDrawerToggle.onConfigurationChanged(newConfig);
     }
 
+    /* From MicListener */
+    @Override
+    public boolean onMicStart() {
+        if (!mAudioControl.isValidRecorder()) {
+            DialogHelper.showWarning(mContext,
+                    R.string.unconfigured_audio_title,
+                    R.string.unconfigured_audio_warning);
+            return false;
+        }
+        if (mIsLive) {
+            if (!HeadsetHelper.isHeadsetPluggedIn(mContext)) {
+                DialogHelper.showWarning(mContext,
+                        R.string.no_headset_plugged_in_title,
+                        R.string.no_headset_plugged_in_warning);
+                return false;
+            }
+            updateAutotalentSettings();
+        }
+
+        if (mRecorder == null) {
+            mRecorder = new SipdroidRecorder(mContext, mAudioControl);
+            mRecorder.registerRecorderStoppedListener(this);
+        }
+        mRecorder.start();
+
+        return true;
+    }
+
+    @Override
+    public void onMicStop() {
+        // mRecorder will trigger onRecorderStopped when it is finished
+        mRecorder.stop();
+
+        Toast.makeText(mContext,
+                R.string.recording_finished_toast,
+                Toast.LENGTH_SHORT).show();
+    }
+
+    /* From SipdroidRecorder */
+    @Override
+    public void onRecorderStopped() {
+        DialogFragment nameEntryFragment = new NameEntryDialogFragment();
+        nameEntryFragment.show(getFragmentManager(), "nameEntry");
+    }
+
+    /* From NameEntryDialogListener */
+    @Override
+    public void onSave(String name) {
+        String fullName = name.trim() + ".wav";
+        updateAutotalentSettings();
+        // TODO: disallow interaction while async task is proceeding
+        new AutotalentAsyncTask(mContext, mIsLive).execute(fullName);
+    }
+
+    @Override
+    public void onCancel() {
+        Toast.makeText(mContext, R.string.recording_save_canceled,
+                Toast.LENGTH_SHORT).show();
+    }
+
     /* From RecordingOptionsDialogListener */
     @Override
     public void onPlay(Recording r) {
@@ -130,12 +237,15 @@ public class MainActivity extends AppCompatActivity
 
     @Override
     public void onRename(Recording r) {
-        Intent renameFileIntent = new Intent(getBaseContext(), FileNameEntry.class);
+        /*
+        TODO: Allow this again
+        Intent renameFileIntent = new Intent(getBaseContext(), NameEntryDialogFragment.class);
         Bundle recordingData = new Bundle();
         recordingData.putParcelable(Constants.INTENT_EXTRA_RECORDING, r);
         renameFileIntent.putExtras(recordingData);
 
         startActivityForResult(renameFileIntent, Constants.INTENT_FILENAME_ENTRY);
+        */
     }
 
     @Override
@@ -170,6 +280,68 @@ public class MainActivity extends AppCompatActivity
         RecordingOptionsHelper.shareRecording(mContext, r);
     }
 
+    private void updateAutotalentSettings() {
+        // TODO: Refactor to use loadPreferences/SharedPreferenceListener
+        char key = PreferenceHelper.getKey(mContext);
+        float fixedPull = PreferenceHelper.getPullToFixedPitch(mContext);
+        float pitchShift = PreferenceHelper.getPitchShift(mContext);
+        float strength = PreferenceHelper.getCorrectionStrength(mContext);
+        float smooth = PreferenceHelper.getCorrectionSmoothness(mContext);
+        int formantCorrection = PreferenceHelper.getFormantCorrection(mContext) ? 1 : 0;
+        float formantWarp = PreferenceHelper.getFormantWarp(mContext);
+        float mix = PreferenceHelper.getMix(mContext);
+
+        Autotalent.instantiateAutotalent(PreferenceHelper.getSampleRate(mContext));
+        Autotalent.setKey(key);
+        Autotalent.setConcertA(CONCERT_A);
+        Autotalent.setFixedPitch(DEFAULT_FIXED_PITCH);
+        Autotalent.setFixedPull(fixedPull);
+        Autotalent.setCorrectionStrength(strength);
+        Autotalent.setCorrectionSmoothness(smooth);
+        Autotalent.setPitchShift(pitchShift);
+        Autotalent.setScaleRotate(DEFAULT_SCALE_ROTATE);
+        Autotalent.setLfoDepth(DEFAULT_LFO_DEPTH);
+        Autotalent.setLfoRate(DEFAULT_LFO_RATE);
+        Autotalent.setLfoShape(DEFAULT_LFO_SHAPE);
+        Autotalent.setLfoSymmetric(DEFAULT_LFO_SYM);
+        Autotalent.setLfoQuantization(DEFAULT_LFO_QUANT);
+        Autotalent.setFormantCorrection(formantCorrection);
+        Autotalent.setFormantWarp(formantWarp);
+        Autotalent.setMix(mix);
+    }
+
+    private void onLiveModeUpdate(boolean isLive) {
+        mIsLive = isLive;
+    }
+
+    private void onScreenLockUpdate(boolean isLocked) {
+        if (isLocked) {
+            getWindow().addFlags(
+                    WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+        } else {
+            getWindow().clearFlags(
+                    WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+        }
+    }
+
+    private void loadPreferences() {
+        onLiveModeUpdate(PreferenceHelper.getLiveMode(mContext));
+        onScreenLockUpdate(PreferenceHelper.getScreenLock(mContext));
+    }
+
+    private SharedPreferences.OnSharedPreferenceChangeListener mPreferenceListener =
+            new SharedPreferences.OnSharedPreferenceChangeListener() {
+                @Override
+                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
+                                                      String key) {
+                    if (getString(R.string.prefs_live_mode_key).equals(key)) {
+                        onLiveModeUpdate(PreferenceHelper.getLiveMode(mContext));
+                    } else if (getString(R.string.prefs_prevent_screen_lock_key).equals(key)) {
+                        onScreenLockUpdate(PreferenceHelper.getScreenLock(mContext));
+                    }
+                }
+            };
+
     private NavigationView.OnNavigationItemSelectedListener mDrawerClickListener =
             new NavigationView.OnNavigationItemSelectedListener() {
                 @Override
diff --git a/app/src/main/java/com/intervigil/micdroid/MicFragment.java b/app/src/main/java/com/intervigil/micdroid/MicFragment.java
index c90aad5..2881613 100644
--- a/app/src/main/java/com/intervigil/micdroid/MicFragment.java
+++ b/app/src/main/java/com/intervigil/micdroid/MicFragment.java
@@ -2,64 +2,39 @@ package com.intervigil.micdroid;
 
 import android.app.Activity;
 import android.app.Fragment;
-import android.content.Intent;
-import android.content.SharedPreferences;
 import android.graphics.Typeface;
 import android.os.Bundle;
-import android.os.Environment;
-import android.preference.PreferenceManager;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.WindowManager;
 import android.widget.CompoundButton;
 import android.widget.TextView;
-import android.widget.Toast;
 import android.widget.ToggleButton;
 
-import com.intervigil.micdroid.helper.DialogHelper;
-import com.intervigil.micdroid.helper.HeadsetHelper;
-import com.intervigil.micdroid.helper.PreferenceHelper;
-import com.intervigil.micdroid.helper.UpdateHelper;
-import com.intervigil.micdroid.interfaces.DependentTask;
-import com.intervigil.micdroid.interfaces.Recorder;
-import com.intervigil.micdroid.recorder.SipdroidRecorder;
+public class MicFragment extends Fragment {
 
-import net.sourceforge.autotalent.Autotalent;
+    private static final String TAG = "Mic";
 
-public class MicFragment extends Fragment {
-    private static final float CONCERT_A = 440.0f;
+    public interface MicListener {
+        boolean onMicStart();
 
-    private static final int DEFAULT_SCALE_ROTATE = 0;
-    private static final float DEFAULT_FIXED_PITCH = 0.0f;
-    private static final float DEFAULT_LFO_DEPTH = 0.0f;
-    private static final float DEFAULT_LFO_RATE = 5.0f;
-    private static final float DEFAULT_LFO_SHAPE = 0.0f;
-    private static final float DEFAULT_LFO_SYM = 0.0f;
-    private static final int DEFAULT_LFO_QUANT = 0;
+        void onMicStop();
+    }
 
+    private MicListener mListener;
     private TimerDisplay mTimerDisplay;
-    private ToggleButton mRecordButton;
-
-    private Recorder mRecorder;
-    private AutotalentTask mAutotalentTask;
-    private AudioController mAudioControl;
 
     public MicFragment() {
     }
 
     @Override
-    public void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-
-        mAutotalentTask = new AutotalentTask(getActivity(), postAutotalentTask);
-
-        mAudioControl = new AudioController(getActivity());
-
-        if (UpdateHelper.isAppUpdated(getActivity())) {
-            UpdateHelper.onAppUpdate(getActivity());
-        } else {
-            mAudioControl.configureRecorder();
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        try {
+            mListener = (MicListener) activity;
+        } catch (ClassCastException e) {
+            throw new ClassCastException(activity.toString()
+                    + " must implement MicListener");
         }
     }
 
@@ -72,198 +47,32 @@ public class MicFragment extends Fragment {
     public void onActivityCreated(Bundle icicle) {
         super.onActivityCreated(icicle);
 
-        SharedPreferences sharedPrefs =
-                PreferenceManager.getDefaultSharedPreferences(getActivity());
-        sharedPrefs.registerOnSharedPreferenceChangeListener(mScreenLockListener);
-
-        mRecordButton = ((ToggleButton) getView().findViewById(R.id.recording_button));
+        ToggleButton mRecordButton = ((ToggleButton) getView().findViewById(R.id.recording_button));
         mRecordButton.setChecked(false);
         mRecordButton.setOnCheckedChangeListener(recordBtnListener);
 
         Typeface timerFont = Typeface.createFromAsset(getActivity().getAssets(),
                 "fonts/Clockopia.ttf");
-        TextView timerDisplay = (TextView) getView().findViewById(R.id.recording_timer);
-        timerDisplay.setTypeface(timerFont);
+        TextView timerText = (TextView) getView().findViewById(R.id.recording_timer);
+        timerText.setTypeface(timerFont);
 
         mTimerDisplay = new TimerDisplay();
-        mTimerDisplay.registerDisplay(timerDisplay);
-
-        if (PreferenceHelper.getScreenLock(getActivity())) {
-            getActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        Autotalent.destroyAutotalent();
-
-        SharedPreferences sharedPrefs =
-                PreferenceManager.getDefaultSharedPreferences(getActivity());
-        sharedPrefs.unregisterOnSharedPreferenceChangeListener(mScreenLockListener);
-
-        super.onDestroy();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-
-        switch (requestCode) {
-            case Constants.INTENT_FILENAME_ENTRY:
-                if (resultCode == Activity.RESULT_OK) {
-                    String fileName = data.getStringExtra(
-                            Constants.INTENT_EXTRA_FILE_NAME).trim()
-                            + ".wav";
-                    updateAutoTalentPreferences();
-                    mAutotalentTask.runAutotalentTask(fileName);
-                } else if (resultCode == Activity.RESULT_CANCELED) {
-                    Toast.makeText(getActivity(), R.string.recording_save_canceled,
-                            Toast.LENGTH_SHORT).show();
-                }
-                break;
-            case Constants.INTENT_PREFERENCES:
-                if (mRecorder != null && !mRecorder.isRunning()) {
-                    mRecorder.cleanup();
-                    mRecorder = null;
-                }
-                break;
-            default:
-                break;
-        }
+        mTimerDisplay.registerDisplay(timerText);
     }
 
-    private void updateAutoTalentPreferences() {
-        char key = PreferenceHelper.getKey(getActivity());
-        float fixedPull = PreferenceHelper.getPullToFixedPitch(getActivity());
-        float pitchShift = PreferenceHelper.getPitchShift(getActivity());
-        float strength = PreferenceHelper.getCorrectionStrength(getActivity());
-        float smooth = PreferenceHelper.getCorrectionSmoothness(getActivity());
-        int formantCorrection = PreferenceHelper.getFormantCorrection(getActivity()) ? 1 : 0;
-        float formantWarp = PreferenceHelper.getFormantWarp(getActivity());
-        float mix = PreferenceHelper.getMix(getActivity());
-
-        Autotalent.instantiateAutotalent(PreferenceHelper.getSampleRate(getActivity()));
-        Autotalent.setKey(key);
-        Autotalent.setConcertA(CONCERT_A);
-        Autotalent.setFixedPitch(DEFAULT_FIXED_PITCH);
-        Autotalent.setFixedPull(fixedPull);
-        Autotalent.setCorrectionStrength(strength);
-        Autotalent.setCorrectionSmoothness(smooth);
-        Autotalent.setPitchShift(pitchShift);
-        Autotalent.setScaleRotate(DEFAULT_SCALE_ROTATE);
-        Autotalent.setLfoDepth(DEFAULT_LFO_DEPTH);
-        Autotalent.setLfoRate(DEFAULT_LFO_RATE);
-        Autotalent.setLfoShape(DEFAULT_LFO_SHAPE);
-        Autotalent.setLfoSymmetric(DEFAULT_LFO_SYM);
-        Autotalent.setLfoQuantization(DEFAULT_LFO_QUANT);
-        Autotalent.setFormantCorrection(formantCorrection);
-        Autotalent.setFormantWarp(formantWarp);
-        Autotalent.setMix(mix);
-    }
-
-    private DependentTask postAutotalentTask = new DependentTask() {
-        @Override
-        public void handleError() {
-            Autotalent.destroyAutotalent();
-        }
-
-        @Override
-        public void doTask() {
-            Autotalent.destroyAutotalent();
-            Toast.makeText(getActivity(), R.string.recording_save_success,
-                    Toast.LENGTH_SHORT).show();
-        }
-    };
-
-    private DependentTask postRecordTask = new DependentTask() {
-        @Override
-        public void doTask() {
-            if (PreferenceHelper.getLiveMode(getActivity())) {
-                Autotalent.destroyAutotalent();
-            }
-            Toast.makeText(getActivity(),
-                    R.string.recording_finished_toast,
-                    Toast.LENGTH_SHORT).show();
-            Intent saveFileIntent = new Intent(getActivity(),
-                    FileNameEntry.class);
-            startActivityForResult(saveFileIntent,
-                    Constants.INTENT_FILENAME_ENTRY);
-        }
-
-        @Override
-        public void handleError() {
-            if (PreferenceHelper.getLiveMode(getActivity())) {
-                Autotalent.destroyAutotalent();
-            }
-            mRecordButton.setOnCheckedChangeListener(null);
-            mRecordButton.setChecked(false);
-            mRecordButton.setOnCheckedChangeListener(recordBtnListener);
-        }
-    };
-
     private CompoundButton.OnCheckedChangeListener recordBtnListener =
             new CompoundButton.OnCheckedChangeListener() {
                 public void onCheckedChanged(CompoundButton btn, boolean isChecked) {
-                    if (!canWriteToSdCard()) {
-                        btn.setChecked(false);
-                        DialogHelper.showWarning(getActivity(),
-                                R.string.no_external_storage_title,
-                                R.string.no_external_storage_warning);
-                    } else if (!mAudioControl.isValidRecorder()) {
-                        btn.setChecked(false);
-                        DialogHelper.showWarning(getActivity(),
-                                R.string.unconfigured_audio_title,
-                                R.string.unconfigured_audio_warning);
-                    } else {
-                        if (btn.isChecked()) {
-                            boolean isLiveMode = PreferenceHelper.getLiveMode(getActivity());
-                            if (isLiveMode
-                                    && !HeadsetHelper.isHeadsetPluggedIn(getActivity())) {
-                                btn.setChecked(false);
-                                DialogHelper.showWarning(getActivity(),
-                                        R.string.no_headset_plugged_in_title,
-                                        R.string.no_headset_plugged_in_warning);
-                            } else {
-                                mTimerDisplay.reset();
-                                if (isLiveMode) {
-                                    updateAutoTalentPreferences();
-                                }
-                                if (mRecorder == null) {
-                                    mRecorder = new SipdroidRecorder(getActivity(), postRecordTask,
-                                            mAudioControl);
-                                }
-                                mRecorder.start();
-                                mTimerDisplay.start();
-                            }
-                        } else {
-                            if (mRecorder != null && mRecorder.isRunning()) {
-                                // only do this if it was running, otherwise an error
-                                // message triggered the check state change
-                                mRecorder.stop();
-                                mTimerDisplay.stop();
-                            }
-                        }
-                    }
-                }
-            };
-
-    private static boolean canWriteToSdCard() {
-        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
-    }
-
-    private SharedPreferences.OnSharedPreferenceChangeListener mScreenLockListener =
-            new SharedPreferences.OnSharedPreferenceChangeListener() {
-                @Override
-                public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
-                                                      String key) {
-                    if (getString(R.string.prefs_prevent_screen_lock_key).equals(key)) {
-                        if (PreferenceHelper.getScreenLock(getActivity())) {
-                            getActivity().getWindow().addFlags(
-                                    WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                    if (btn.isChecked()) {
+                        if (mListener.onMicStart()) {
+                            mTimerDisplay.start();
                         } else {
-                            getActivity().getWindow().clearFlags(
-                                    WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
+                            // Failed to start correctly, reset fragment state
+                            btn.setChecked(false);
                         }
+                    } else {
+                        mListener.onMicStop();
+                        mTimerDisplay.stop();
                     }
                 }
             };
diff --git a/app/src/main/java/com/intervigil/micdroid/NameEntryDialogFragment.java b/app/src/main/java/com/intervigil/micdroid/NameEntryDialogFragment.java
new file mode 100644
index 0000000..fe55d6b
--- /dev/null
+++ b/app/src/main/java/com/intervigil/micdroid/NameEntryDialogFragment.java
@@ -0,0 +1,92 @@
+/* FileNameEntry.java
+
+   Copyright (c) 2010 Ethan Chen
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License along
+   with this program; if not, write to the Free Software Foundation, Inc.,
+   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+package com.intervigil.micdroid;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.widget.EditText;
+
+import com.intervigil.micdroid.model.Recording;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+public class NameEntryDialogFragment extends DialogFragment {
+
+    private static final String TAG = "NameEntryDialog";
+
+    public interface NameEntryDialogListener {
+        void onSave(String name);
+
+        void onCancel();
+    }
+
+    private NameEntryDialogListener mListener;
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        try {
+            mListener = (NameEntryDialogListener) activity;
+        } catch (ClassCastException e) {
+            throw new ClassCastException(activity.toString()
+                    + " must implement NameEntryDialogListener");
+        }
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle icicle) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+
+        builder.setView(inflater.inflate(R.layout.name_entry_fragment, null))
+                .setPositiveButton(R.string.name_entry_btn_ok, mBtnListener)
+                .setNegativeButton(R.string.name_entry_btn_cancel, mBtnListener)
+                .setTitle(R.string.name_entry_title);
+        return builder.create();
+    }
+
+    @Override
+    public void onCreate(Bundle icicle) {
+        super.onCreate(icicle);
+    }
+
+    private DialogInterface.OnClickListener mBtnListener = new DialogInterface.OnClickListener() {
+        @Override
+        public void onClick(DialogInterface dialog, int which) {
+            switch (which) {
+                case DialogInterface.BUTTON_POSITIVE:
+                    EditText nameEditText = (EditText) getDialog().findViewById(R.id.name_entry_input);
+                    mListener.onSave(nameEditText.getText().toString());
+                    break;
+                case DialogInterface.BUTTON_NEGATIVE:
+                    getDialog().cancel();
+                    mListener.onCancel();
+                    break;
+            }
+        }
+    };
+}
diff --git a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java b/app/src/main/java/com/intervigil/micdroid/SipdroidRecorder.java
similarity index 90%
rename from app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
rename to app/src/main/java/com/intervigil/micdroid/SipdroidRecorder.java
index 9fbedb4..91a2533 100644
--- a/app/src/main/java/com/intervigil/micdroid/recorder/SipdroidRecorder.java
+++ b/app/src/main/java/com/intervigil/micdroid/SipdroidRecorder.java
@@ -18,7 +18,7 @@
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
 
-package com.intervigil.micdroid.recorder;
+package com.intervigil.micdroid;
 
 import android.content.Context;
 import android.media.AudioManager;
@@ -36,35 +36,41 @@ import com.intervigil.micdroid.R;
 import com.intervigil.micdroid.helper.AudioHelper;
 import com.intervigil.micdroid.helper.DialogHelper;
 import com.intervigil.micdroid.helper.PreferenceHelper;
-import com.intervigil.micdroid.interfaces.DependentTask;
-import com.intervigil.micdroid.interfaces.Recorder;
 import com.intervigil.wave.WaveWriter;
 
 import net.sourceforge.autotalent.Autotalent;
 
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
-public class SipdroidRecorder implements Recorder {
+public class SipdroidRecorder {
 
     private static final String TAG = "SipdroidRecorder";
 
+    public interface RecorderStoppedListener {
+        void onRecorderStopped();
+    }
+
     private static final int RECORDER_MESSAGE_IO_ERROR = 8675308;
     private static final int RECORDER_MESSAGE_RECORD_ERROR = 8675310;
     private static final int RECORDER_MESSAGE_FINISHED = 8675307;
 
     private final Context mContext;
     private RecordThread mWriterThread;
-    private final int mSampleRate;
-    private DependentTask mPostRecordTask;
     private AudioController mAudioControl;
+    private List<RecorderStoppedListener> mListeners;
 
-    public SipdroidRecorder(Context context, DependentTask postRecordTask,
+    public SipdroidRecorder(Context context,
                             AudioController audioControl) {
         mContext = context;
-        mSampleRate = PreferenceHelper.getSampleRate(mContext);
-        mPostRecordTask = postRecordTask;
         mAudioControl = audioControl;
+        mListeners = new ArrayList<>();
+    }
+
+    public void registerRecorderStoppedListener(RecorderStoppedListener listener) {
+        mListeners.add(listener);
     }
 
     public void start() {
@@ -78,7 +84,6 @@ public class SipdroidRecorder implements Recorder {
             DialogHelper.showWarning(mContext,
                     R.string.audio_record_exception_title,
                     R.string.audio_record_exception_warning);
-            mPostRecordTask.handleError();
         }
     }
 
@@ -94,10 +99,6 @@ public class SipdroidRecorder implements Recorder {
         }
     }
 
-    public void cleanup() {
-        stop();
-    }
-
     public boolean isRunning() {
         return (mWriterThread != null
                 && mWriterThread.getState() != Thread.State.NEW && mWriterThread
@@ -112,16 +113,16 @@ public class SipdroidRecorder implements Recorder {
                     DialogHelper.showWarning(mContext,
                             R.string.audio_record_exception_title,
                             R.string.audio_record_exception_warning);
-                    mPostRecordTask.handleError();
                     break;
                 case RECORDER_MESSAGE_IO_ERROR:
                     DialogHelper.showWarning(mContext,
                             R.string.recording_io_error_title,
                             R.string.recording_io_error_warning);
-                    mPostRecordTask.handleError();
                     break;
                 case RECORDER_MESSAGE_FINISHED:
-                    mPostRecordTask.doTask();
+                    for (RecorderStoppedListener l : mListeners) {
+                        l.onRecorderStopped();
+                    }
                     break;
             }
         }
@@ -139,15 +140,15 @@ public class SipdroidRecorder implements Recorder {
 
         public RecordThread() {
             mFrameSize = 160;
-            mFramePeriod = 1000 / (mSampleRate / mFrameSize);
-            mFrameRate = (int) (mSampleRate / mFrameSize * 1.5);
+            mFramePeriod = 1000 / (mAudioControl.getSampleRate() / mFrameSize);
+            mFrameRate = (int) (mAudioControl.getSampleRate() / mFrameSize * 1.5);
             mBufSize = mFrameSize * (mFrameRate + 1);
             mRunning = false;
             mAudioRecord = mAudioControl.getRecorder();
             try {
                 FileOutputStream out = mContext.openFileOutput(
                         mContext.getString(R.string.default_recording_name), Context.MODE_PRIVATE);
-                mWavWriter = new WaveWriter(out, mSampleRate,
+                mWavWriter = new WaveWriter(out, mAudioRecord.getSampleRate(),
                         AudioHelper.getChannelConfig(Constants.DEFAULT_CHANNEL_CONFIG),
                         AudioHelper.getPcmEncoding(Constants.DEFAULT_PCM_FORMAT));
                 if (mAudioControl.isLive()) {
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java b/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
deleted file mode 100644
index 232cfff..0000000
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/DependentTask.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.intervigil.micdroid.interfaces;
-
-public interface DependentTask {
-
-    void doTask();
-
-    void handleError();
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java b/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
deleted file mode 100644
index 8a08117..0000000
--- a/app/src/main/java/com/intervigil/micdroid/interfaces/Recorder.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package com.intervigil.micdroid.interfaces;
-
-public interface Recorder {
-
-    void start();
-
-    void stop();
-
-    void cleanup();
-
-    boolean isRunning();
-}
