diff --git a/app/src/main/java/cf/playhi/freezeyou/AccessibilityService.java b/app/src/main/java/cf/playhi/freezeyou/AccessibilityService.java
index dace3689..a5fd4f61 100644
--- a/app/src/main/java/cf/playhi/freezeyou/AccessibilityService.java
+++ b/app/src/main/java/cf/playhi/freezeyou/AccessibilityService.java
@@ -1,7 +1,6 @@
 package cf.playhi.freezeyou;
 
 import android.annotation.SuppressLint;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.os.PowerManager;
@@ -80,7 +79,7 @@ public class AccessibilityService extends android.accessibilityservice.Accessibi
                     if (enabled == 1 && "onApplicationsForeground".equals(tg) && ("".equals(tgExtra) || Arrays.asList(tgExtra.split(",")).contains(pkgNameString))) {
                         String task = cursor.getString(cursor.getColumnIndex("task"));
                         if (task != null && !"".equals(task)) {
-                            Support.runTask(task.toLowerCase(), this, null);
+                            TasksUtils.runTask(task.toLowerCase(), this, null);
                         }
                     }
                     cursor.moveToNext();
@@ -110,7 +109,7 @@ public class AccessibilityService extends android.accessibilityservice.Accessibi
                     if (enabled == 1 && "onLeaveApplications".equals(tg) && ("".equals(tgExtra) || Arrays.asList(tgExtra.split(",")).contains(previousPkg))) {
                         String task = cursor.getString(cursor.getColumnIndex("task"));
                         if (task != null && !"".equals(task)) {
-                            Support.runTask(task.toLowerCase(), this, null);
+                            TasksUtils.runTask(task.toLowerCase(), this, null);
                         }
                     }
                     cursor.moveToNext();
diff --git a/app/src/main/java/cf/playhi/freezeyou/AccessibilityUtils.java b/app/src/main/java/cf/playhi/freezeyou/AccessibilityUtils.java
new file mode 100644
index 00000000..b65df4cd
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/AccessibilityUtils.java
@@ -0,0 +1,55 @@
+package cf.playhi.freezeyou;
+
+import android.content.Context;
+import android.content.Intent;
+import android.provider.Settings;
+import android.text.TextUtils;
+
+import static cf.playhi.freezeyou.ToastUtils.showToast;
+
+final class AccessibilityUtils {
+
+    static void openAccessibilitySettings(Context context) {
+        try {
+            Intent accessibilityIntent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
+            context.startActivity(accessibilityIntent);
+        } catch (Exception e) {
+            e.printStackTrace();
+            showToast(context, R.string.failed);
+        }
+    }
+
+    //https://stackoverflow.com/questions/18094982/detect-if-my-accessibility-service-is-enabled
+    static boolean isAccessibilitySettingsOn(Context mContext) {
+        int accessibilityEnabled = 0;
+        final String service = mContext.getPackageName() + "/" + AccessibilityService.class.getCanonicalName();
+        try {
+            accessibilityEnabled = Settings.Secure.getInt(
+                    mContext.getApplicationContext().getContentResolver(),
+                    android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);
+        } catch (Settings.SettingNotFoundException e) {
+            e.printStackTrace();
+        }
+
+        TextUtils.SimpleStringSplitter mStringColonSplitter = new TextUtils.SimpleStringSplitter(':');
+
+        if (accessibilityEnabled == 1) {
+            String settingValue = Settings.Secure.getString(
+                    mContext.getApplicationContext().getContentResolver(),
+                    Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
+            if (settingValue != null) {
+                mStringColonSplitter.setString(settingValue);
+                while (mStringColonSplitter.hasNext()) {
+                    String accessibilityService = mStringColonSplitter.next();
+                    if (accessibilityService.equalsIgnoreCase(service)) {
+                        return true;
+                    }
+                }
+            }
+        } else {
+            return false;
+        }
+        return false;
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/ApplicationIconUtils.java b/app/src/main/java/cf/playhi/freezeyou/ApplicationIconUtils.java
new file mode 100644
index 00000000..6dfa7d3f
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/ApplicationIconUtils.java
@@ -0,0 +1,105 @@
+package cf.playhi.freezeyou;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.support.annotation.Nullable;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+
+final class ApplicationIconUtils {
+
+    private static Drawable drawable;
+    private static Bitmap bitmap;
+
+    //最初参考 http://www.cnblogs.com/zhou2016/p/6281678.html
+
+    /**
+     * Drawable转Bitmap
+     *
+     * @param drawable drawable
+     * @return Bitmap
+     */
+    static Bitmap getBitmapFromDrawable(Drawable drawable) {
+        try {
+            return ((BitmapDrawable) drawable).getBitmap();
+        } catch (Exception e) {
+            Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
+            Canvas canvas = new Canvas(bitmap);
+            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
+            drawable.draw(canvas);
+            return bitmap;
+        }
+    }
+
+    static Drawable getApplicationIcon(Context context, String pkgName, @Nullable ApplicationInfo applicationInfo, boolean resize) {
+        String path = context.getFilesDir() + "/icon/" + pkgName + ".png";
+        if (new File(path).exists()) {
+            drawable = BitmapDrawable.createFromPath(path);
+        } else if (applicationInfo != null) {
+            drawable = applicationInfo.loadIcon(context.getPackageManager());
+            folderCheck(context.getFilesDir() + "/icon");
+            writeBitmapToFile(path, getBitmapFromDrawable(drawable));
+        } else if (!"".equals(pkgName)) {
+            try {
+                drawable = context.getPackageManager().getApplicationIcon(pkgName);
+                folderCheck(context.getFilesDir() + "/icon");
+                writeBitmapToFile(path, getBitmapFromDrawable(drawable));
+            } catch (PackageManager.NameNotFoundException e) {
+                drawable = context.getResources().getDrawable(android.R.drawable.ic_menu_delete);
+            } catch (Exception e) {
+                drawable = context.getResources().getDrawable(android.R.drawable.sym_def_app_icon);
+            }
+        }
+        if ((drawable == null) || (drawable.getIntrinsicWidth() <= 0) || (drawable.getIntrinsicHeight() <= 0)) {
+            drawable = context.getResources().getDrawable(R.mipmap.ic_launcher_round);
+        }
+        if (resize) {
+            bitmap = getBitmapFromDrawable(drawable);
+            int width = bitmap.getWidth();
+            int height = bitmap.getHeight();
+            Matrix matrix = new Matrix();
+            float scaleWidth = ((float) 72) / width;
+            float scaleHeight = ((float) 72) / height;
+            matrix.postScale(scaleWidth, scaleHeight);
+            return new BitmapDrawable(Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true));
+        } else {
+            return drawable;
+        }
+    }
+
+    private static void writeBitmapToFile(String filePath, Bitmap b) {
+        try {
+            File file = new File(filePath);
+            FileOutputStream fos = new FileOutputStream(file);
+            BufferedOutputStream bos = new BufferedOutputStream(fos);
+            b.compress(Bitmap.CompressFormat.PNG, 100, bos);
+            bos.flush();
+            bos.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static void folderCheck(String path) {
+        try {
+            File file = new File(path);
+            if (!file.isDirectory()) {
+                file.delete();
+            }
+            if (!file.exists()) {
+                file.mkdirs();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/ApplicationLabelUtils.java b/app/src/main/java/cf/playhi/freezeyou/ApplicationLabelUtils.java
new file mode 100644
index 00000000..50d7fcb0
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/ApplicationLabelUtils.java
@@ -0,0 +1,40 @@
+package cf.playhi.freezeyou;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.support.annotation.Nullable;
+
+import static android.content.Context.MODE_PRIVATE;
+import static android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES;
+
+final class ApplicationLabelUtils {
+
+    static String getApplicationLabel(Context context, @Nullable PackageManager packageManager, @Nullable ApplicationInfo applicationInfo, String pkgName) {
+        SharedPreferences sharedPreferences = context.getSharedPreferences("NameOfPackages", MODE_PRIVATE);
+        String name = sharedPreferences.getString(pkgName, "");
+        if (!"".equals(name)) {
+            return name;
+        }
+        PackageManager pm = packageManager == null ? context.getPackageManager() : packageManager;
+        if (applicationInfo != null) {
+            name = applicationInfo.loadLabel(pm).toString();
+            sharedPreferences.edit().putString(pkgName, name).apply();
+            return name;
+        } else {
+            try {
+                name = pm.getApplicationInfo(pkgName, GET_UNINSTALLED_PACKAGES).loadLabel(pm).toString();
+                sharedPreferences.edit().putString(pkgName, name).apply();
+                return name;
+            } catch (PackageManager.NameNotFoundException e) {
+                e.printStackTrace();
+                return context.getString(R.string.uninstalled);
+            } catch (Exception e) {
+                e.printStackTrace();
+                return pkgName;
+            }
+        }
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/AskRunActivity.java b/app/src/main/java/cf/playhi/freezeyou/AskRunActivity.java
index d3d9f712..9ceb9f4c 100644
--- a/app/src/main/java/cf/playhi/freezeyou/AskRunActivity.java
+++ b/app/src/main/java/cf/playhi/freezeyou/AskRunActivity.java
@@ -7,7 +7,7 @@ import android.support.annotation.Nullable;
 
 import static cf.playhi.freezeyou.AlertDialogUtils.buildAlertDialog;
 import static cf.playhi.freezeyou.Support.checkAndStartApp;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
 import static cf.playhi.freezeyou.ThemeUtils.processAddTranslucent;
 import static cf.playhi.freezeyou.ThemeUtils.processSetTheme;
 
diff --git a/app/src/main/java/cf/playhi/freezeyou/BootCompletedReceiver.java b/app/src/main/java/cf/playhi/freezeyou/BootCompletedReceiver.java
index 3f8467a3..9e809db2 100644
--- a/app/src/main/java/cf/playhi/freezeyou/BootCompletedReceiver.java
+++ b/app/src/main/java/cf/playhi/freezeyou/BootCompletedReceiver.java
@@ -15,10 +15,10 @@ import net.grandcentrix.tray.AppPreferences;
 import static android.content.Context.MODE_PRIVATE;
 import static cf.playhi.freezeyou.Support.checkMRootFrozen;
 import static cf.playhi.freezeyou.Support.checkRootFrozen;
-import static cf.playhi.freezeyou.Support.createNotification;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
-import static cf.playhi.freezeyou.Support.getBitmapFromDrawable;
-import static cf.playhi.freezeyou.Support.publishTask;
+import static cf.playhi.freezeyou.NotificationUtils.createNotification;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getBitmapFromDrawable;
+import static cf.playhi.freezeyou.TasksUtils.publishTask;
 
 public class BootCompletedReceiver extends BroadcastReceiver {
     @Override
@@ -129,12 +129,12 @@ public class BootCompletedReceiver extends BroadcastReceiver {
                     }
                     switch (tg) {
                         case "onScreenOn":
-                            Support.startService(context,
+                            ServiceUtils.startService(context,
                                     new Intent(context, TriggerTasksService.class)
                                             .putExtra("OnScreenOn", true));
                             break;
                         case "onScreenOff":
-                            Support.startService(context,
+                            ServiceUtils.startService(context,
                                     new Intent(context, TriggerTasksService.class)
                                             .putExtra("OnScreenOff", true));
                             break;
diff --git a/app/src/main/java/cf/playhi/freezeyou/FUFLauncherShortcutCreator.java b/app/src/main/java/cf/playhi/freezeyou/FUFLauncherShortcutCreator.java
index 57cbe5cc..48c854a0 100644
--- a/app/src/main/java/cf/playhi/freezeyou/FUFLauncherShortcutCreator.java
+++ b/app/src/main/java/cf/playhi/freezeyou/FUFLauncherShortcutCreator.java
@@ -33,9 +33,9 @@ import java.util.Map;
 
 import static cf.playhi.freezeyou.Support.checkMRootFrozen;
 import static cf.playhi.freezeyou.Support.checkRootFrozen;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
-import static cf.playhi.freezeyou.Support.getApplicationLabel;
-import static cf.playhi.freezeyou.Support.getBitmapFromDrawable;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationLabelUtils.getApplicationLabel;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getBitmapFromDrawable;
 import static cf.playhi.freezeyou.ThemeUtils.getThemeDot;
 import static cf.playhi.freezeyou.ThemeUtils.processSetTheme;
 
diff --git a/app/src/main/java/cf/playhi/freezeyou/Freeze.java b/app/src/main/java/cf/playhi/freezeyou/Freeze.java
index e807ca3d..9bd57175 100644
--- a/app/src/main/java/cf/playhi/freezeyou/Freeze.java
+++ b/app/src/main/java/cf/playhi/freezeyou/Freeze.java
@@ -11,9 +11,9 @@ import net.grandcentrix.tray.AppPreferences;
 
 import static cf.playhi.freezeyou.Support.checkMRootFrozen;
 import static cf.playhi.freezeyou.Support.checkRootFrozen;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
-import static cf.playhi.freezeyou.Support.getApplicationLabel;
-import static cf.playhi.freezeyou.Support.getBitmapFromDrawable;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationLabelUtils.getApplicationLabel;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getBitmapFromDrawable;
 import static cf.playhi.freezeyou.ThemeUtils.processAddTranslucent;
 import static cf.playhi.freezeyou.ThemeUtils.processSetTheme;
 import static cf.playhi.freezeyou.Support.shortcutMakeDialog;
diff --git a/app/src/main/java/cf/playhi/freezeyou/LauncherShortcutUtils.java b/app/src/main/java/cf/playhi/freezeyou/LauncherShortcutUtils.java
new file mode 100644
index 00000000..c0a33c06
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/LauncherShortcutUtils.java
@@ -0,0 +1,95 @@
+package cf.playhi.freezeyou;
+
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ShortcutInfo;
+import android.content.pm.ShortcutManager;
+import android.graphics.Bitmap;
+import android.graphics.Matrix;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.Icon;
+import android.os.Build;
+
+import static cf.playhi.freezeyou.ApplicationIconUtils.getBitmapFromDrawable;
+import static cf.playhi.freezeyou.ToastUtils.showToast;
+
+final class LauncherShortcutUtils {
+
+    static void createShortCut(String title, String pkgName, Drawable icon, Class<?> cls, String id, Context context) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
+            createShortCutOldApi(title, pkgName, icon, cls, context);
+        } else {
+            ShortcutManager mShortcutManager =
+                    context.getSystemService(ShortcutManager.class);
+            if (mShortcutManager != null) {
+                if (mShortcutManager.isRequestPinShortcutSupported()) {
+                    ShortcutInfo.Builder shortcutInfoBuilder =
+                            new ShortcutInfo.Builder(context, id);
+                    shortcutInfoBuilder.setIcon(Icon.createWithBitmap(getBitmapFromDrawable(icon)));
+                    shortcutInfoBuilder.setIntent(
+                            new Intent(context, cls)
+                                    .setAction(Intent.ACTION_MAIN)
+                                    .putExtra("pkgName", pkgName)
+                    );
+                    shortcutInfoBuilder.setShortLabel(title);
+                    shortcutInfoBuilder.setLongLabel(title);
+
+                    ShortcutInfo pinShortcutInfo = shortcutInfoBuilder.build();
+                    // Create the PendingIntent object only if your app needs to be notified
+                    // that the user allowed the shortcut to be pinned. Note that, if the
+                    // pinning operation fails, your app isn't notified. We assume here that the
+                    // app has implemented a method called createShortcutResultIntent() that
+                    // returns a broadcast intent.
+                    Intent pinnedShortcutCallbackIntent =
+                            mShortcutManager.createShortcutResultIntent(pinShortcutInfo);
+
+                    // Configure the intent so that your app's broadcast receiver gets
+                    // the callback successfully.
+                    PendingIntent successCallback = PendingIntent.getBroadcast(context, id.hashCode(),
+                            pinnedShortcutCallbackIntent, 0);
+
+                    mShortcutManager.requestPinShortcut(pinShortcutInfo,
+                            successCallback.getIntentSender());
+                    showToast(context, R.string.requested);
+                } else {
+                    createShortCutOldApi(title, pkgName, icon, cls, context);
+                }
+            } else {
+                createShortCutOldApi(title, pkgName, icon, cls, context);
+            }
+        }
+    }
+
+    private static void createShortCutOldApi(String title, String pkgName, Drawable icon, Class<?> cls, Context context) {
+        Intent addShortCut = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
+        Intent intent = new Intent(context, cls);
+        intent.putExtra("pkgName", pkgName);
+        addShortCut.putExtra(Intent.EXTRA_SHORTCUT_NAME, title);
+        addShortCut.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intent);
+        try {
+            Bitmap bitmap = getBitmapFromDrawable(icon);
+            float size = context.getResources().getDimension(android.R.dimen.app_icon_size);
+            if (size < 1) {
+                size = 72;
+            }
+            if (bitmap.getHeight() > size) {
+                Matrix matrix = new Matrix();
+                float scaleWidth = (size) / bitmap.getWidth();
+                float scaleHeight = (size) / bitmap.getHeight();
+                matrix.postScale(scaleWidth, scaleHeight);
+                addShortCut.putExtra(Intent.EXTRA_SHORTCUT_ICON,
+                        Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true));
+                context.sendBroadcast(addShortCut);
+            } else {
+                addShortCut.putExtra(Intent.EXTRA_SHORTCUT_ICON, bitmap);
+                context.sendBroadcast(addShortCut);
+            }
+            showToast(context, R.string.requested);
+        } catch (Exception e) {
+            e.printStackTrace();
+            showToast(context, context.getString(R.string.requestFailed) + e.getMessage());
+        }
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/Main.java b/app/src/main/java/cf/playhi/freezeyou/Main.java
index 1920f214..e637fe4c 100644
--- a/app/src/main/java/cf/playhi/freezeyou/Main.java
+++ b/app/src/main/java/cf/playhi/freezeyou/Main.java
@@ -60,9 +60,9 @@ import static cf.playhi.freezeyou.Support.checkMRootFrozen;
 import static cf.playhi.freezeyou.Support.checkRootFrozen;
 import static cf.playhi.freezeyou.VersionUtils.checkUpdate;
 import static cf.playhi.freezeyou.MoreUtils.copyToClipboard;
-import static cf.playhi.freezeyou.Support.createShortCut;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
-import static cf.playhi.freezeyou.Support.getApplicationLabel;
+import static cf.playhi.freezeyou.LauncherShortcutUtils.createShortCut;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationLabelUtils.getApplicationLabel;
 import static cf.playhi.freezeyou.Support.getDevicePolicyManager;
 import static cf.playhi.freezeyou.ThemeUtils.getThemeDot;
 import static cf.playhi.freezeyou.VersionUtils.getVersionCode;
diff --git a/app/src/main/java/cf/playhi/freezeyou/NotificationUtils.java b/app/src/main/java/cf/playhi/freezeyou/NotificationUtils.java
new file mode 100644
index 00000000..691e85d1
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/NotificationUtils.java
@@ -0,0 +1,99 @@
+package cf.playhi.freezeyou;
+
+import android.annotation.SuppressLint;
+import android.app.Notification;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.support.annotation.Nullable;
+
+import net.grandcentrix.tray.AppPreferences;
+
+import cf.playhi.freezeyou.receiver.NotificationDeletedReceiver;
+
+import static cf.playhi.freezeyou.ApplicationLabelUtils.getApplicationLabel;
+
+final class NotificationUtils {
+
+    @SuppressLint("ApplySharedPref")
+    static void createNotification(Context context, String pkgName, int iconResId, @Nullable Bitmap bitmap) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            AppPreferences preferenceManager = new AppPreferences(context);
+            boolean notificationBarFreezeImmediately = preferenceManager.getBoolean("notificationBarFreezeImmediately", true);
+            String description = notificationBarFreezeImmediately ? context.getString(R.string.freezeImmediately) : context.getString(R.string.disableAEnable);
+            Notification.Builder mBuilder = new Notification.Builder(context);
+            int mId = pkgName.hashCode();
+            String name = getApplicationLabel(context, null, null, pkgName);
+            if (!context.getString(R.string.uninstalled).equals(name)) {
+                mBuilder.setSmallIcon(iconResId);
+                mBuilder.setLargeIcon(bitmap);
+                mBuilder.setContentTitle(name);
+                mBuilder.setContentText(description);
+                mBuilder.setAutoCancel(!preferenceManager.getBoolean("notificationBarDisableClickDisappear", true));
+                mBuilder.setOngoing(preferenceManager.getBoolean("notificationBarDisableSlideOut", false));
+
+                Intent intent = new Intent(context, NotificationDeletedReceiver.class).putExtra("pkgName", pkgName);
+                PendingIntent pendingIntent = PendingIntent.getBroadcast(context, mId, intent, 0);
+                mBuilder.setDeleteIntent(pendingIntent);
+
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+                    String CHANNEL_ID = "FAUf";
+                    int importance = NotificationManager.IMPORTANCE_LOW;
+                    NotificationChannel channel = new NotificationChannel(CHANNEL_ID, description, importance);
+                    channel.setDescription(description);
+                    // Register the channel with the system; you can't change the importance
+                    // or other notification behaviors after this
+                    NotificationManager notificationManager = context.getSystemService(NotificationManager.class);
+                    if (notificationManager != null)
+                        notificationManager.createNotificationChannel(channel);
+                    mBuilder.setChannelId(CHANNEL_ID);
+                }
+                // Create an Intent for the activity you want to start
+                Intent resultIntent;
+                PendingIntent resultPendingIntent;
+                if (notificationBarFreezeImmediately) {
+                    resultIntent = new Intent(context, FUFService.class)
+                            .putExtra("pkgName", pkgName)
+                            .putExtra("single", true)
+                            .putExtra("freeze", true);
+                    resultPendingIntent = PendingIntent.getService(context, mId, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                } else {
+                    resultIntent = new Intent(context, Freeze.class).putExtra("pkgName", pkgName).putExtra("auto", false);
+                    resultPendingIntent = PendingIntent.getActivity(context, mId, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                }
+                mBuilder.setContentIntent(resultPendingIntent);
+                NotificationManager mNotificationManager =
+                        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+                if (mNotificationManager != null) {
+                    mNotificationManager.notify(mId, mBuilder.build());
+                    AppPreferences appPreferences = new AppPreferences(context);
+                    String notifying = appPreferences.getString("notifying", "");
+                    if (notifying != null && !notifying.contains(pkgName + ",")) {
+                        appPreferences.put("notifying", notifying + pkgName + ",");
+                    }
+                }
+            }
+        }
+    }
+
+    @SuppressLint("ApplySharedPref")
+    static void deleteNotification(Context context, String pkgName) {
+        NotificationManager mNotificationManager =
+                (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+        if (mNotificationManager != null) {
+            mNotificationManager.cancel(pkgName.hashCode());
+            deleteNotifying(context, pkgName);
+        }
+    }
+
+    static boolean deleteNotifying(Context context, String pkgName) {
+        AppPreferences defaultSharedPreferences = new AppPreferences(context);
+        String notifying = defaultSharedPreferences.getString("notifying", "");
+        return notifying == null || !notifying.contains(pkgName + ",") || defaultSharedPreferences.put("notifying", notifying.replace(pkgName + ",", ""));
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/ProcessUtils.java b/app/src/main/java/cf/playhi/freezeyou/ProcessUtils.java
new file mode 100644
index 00000000..5e6922b2
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/ProcessUtils.java
@@ -0,0 +1,37 @@
+package cf.playhi.freezeyou;
+
+import android.support.annotation.Nullable;
+
+import java.io.DataOutputStream;
+
+final class ProcessUtils {
+
+    static void destroyProcess(@Nullable DataOutputStream dataOutputStream, @Nullable Process process1) {
+        try {
+            if (dataOutputStream != null) {
+                dataOutputStream.close();
+            }
+            if (process1 != null) {
+                process1.destroy();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    static int fAURoot(String pkgName, Boolean enable) throws Exception {
+        Process process = Runtime.getRuntime().exec("su");
+        DataOutputStream outputStream = new DataOutputStream(process.getOutputStream());
+        if (enable) {
+            outputStream.writeBytes("pm enable " + pkgName + "\n");
+        } else {
+            outputStream.writeBytes("pm disable " + pkgName + "\n");
+        }
+        outputStream.writeBytes("exit\n");
+        outputStream.flush();
+        int i = process.waitFor();
+        destroyProcess(outputStream, process);
+        return i;
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/STAATriggerFragment.java b/app/src/main/java/cf/playhi/freezeyou/STAATriggerFragment.java
index ccfaa7f9..7d199720 100644
--- a/app/src/main/java/cf/playhi/freezeyou/STAATriggerFragment.java
+++ b/app/src/main/java/cf/playhi/freezeyou/STAATriggerFragment.java
@@ -33,9 +33,9 @@ public class STAATriggerFragment extends PreferenceFragment implements SharedPre
         switch (s) {
             case "stma_add_trigger":
                 String stma_add_trigger = sharedPreferences.getString("stma_add_trigger", "");
-                if ("onApplicationsForeground".equals(stma_add_trigger) && !Support.isAccessibilitySettingsOn(getActivity())) {
+                if ("onApplicationsForeground".equals(stma_add_trigger) && !AccessibilityUtils.isAccessibilitySettingsOn(getActivity())) {
                     showToast(getActivity(), R.string.needActiveAccessibilityService);
-                    Support.openAccessibilitySettings(getActivity());
+                    AccessibilityUtils.openAccessibilitySettings(getActivity());
                 }
                 break;
             default:
diff --git a/app/src/main/java/cf/playhi/freezeyou/ScheduledTasksAddActivity.java b/app/src/main/java/cf/playhi/freezeyou/ScheduledTasksAddActivity.java
index 4efc5578..bb5e5416 100644
--- a/app/src/main/java/cf/playhi/freezeyou/ScheduledTasksAddActivity.java
+++ b/app/src/main/java/cf/playhi/freezeyou/ScheduledTasksAddActivity.java
@@ -24,7 +24,7 @@ import java.util.Set;
 import static cf.playhi.freezeyou.ThemeUtils.getThemeDot;
 import static cf.playhi.freezeyou.ThemeUtils.processActionBar;
 import static cf.playhi.freezeyou.ThemeUtils.processSetTheme;
-import static cf.playhi.freezeyou.Support.publishTask;
+import static cf.playhi.freezeyou.TasksUtils.publishTask;
 import static cf.playhi.freezeyou.ToastUtils.showToast;
 
 public class ScheduledTasksAddActivity extends Activity {
@@ -254,19 +254,19 @@ public class ScheduledTasksAddActivity extends Activity {
         if (enabled == 1 && trigger != null) {
             switch (trigger) {
                 case "onScreenOn":
-                    Support.startService(this,
+                    ServiceUtils.startService(this,
                             new Intent(this, TriggerTasksService.class)
                                     .putExtra("OnScreenOn", true));
                     break;
                 case "onScreenOff":
-                    Support.startService(this,
+                    ServiceUtils.startService(this,
                             new Intent(this, TriggerTasksService.class)
                                     .putExtra("OnScreenOff", true));
                     break;
                 case "onApplicationsForeground":
-                    if (!Support.isAccessibilitySettingsOn(this)) {
+                    if (!AccessibilityUtils.isAccessibilitySettingsOn(this)) {
                         showToast(this, R.string.needActiveAccessibilityService);
-                        Support.openAccessibilitySettings(this);
+                        AccessibilityUtils.openAccessibilitySettings(this);
                     }
                     break;
                 default:
diff --git a/app/src/main/java/cf/playhi/freezeyou/ScreenLockListener.java b/app/src/main/java/cf/playhi/freezeyou/ScreenLockListener.java
index 3f82fe83..525f9c5a 100644
--- a/app/src/main/java/cf/playhi/freezeyou/ScreenLockListener.java
+++ b/app/src/main/java/cf/playhi/freezeyou/ScreenLockListener.java
@@ -25,7 +25,7 @@ class ScreenLockListener {
                 switch (action) {
                     case Intent.ACTION_SCREEN_OFF:
                         if (new AppPreferences(context).getBoolean("onekeyFreezeWhenLockScreen", false)) {
-                            Support.startService(context,
+                            ServiceUtils.startService(context,
                                     new Intent(context, OneKeyFreezeService.class)
                                             .putExtra("autoCheckAndLockScreen", false)
                             );
diff --git a/app/src/main/java/cf/playhi/freezeyou/SelectOperation.java b/app/src/main/java/cf/playhi/freezeyou/SelectOperation.java
index bf5c5dfc..08e4093f 100644
--- a/app/src/main/java/cf/playhi/freezeyou/SelectOperation.java
+++ b/app/src/main/java/cf/playhi/freezeyou/SelectOperation.java
@@ -21,12 +21,12 @@ import net.grandcentrix.tray.AppPreferences;
 
 import static cf.playhi.freezeyou.Support.addToOneKeyList;
 import static cf.playhi.freezeyou.MoreUtils.copyToClipboard;
-import static cf.playhi.freezeyou.Support.createShortCut;
+import static cf.playhi.freezeyou.LauncherShortcutUtils.createShortCut;
 import static cf.playhi.freezeyou.Support.existsInOneKeyList;
-import static cf.playhi.freezeyou.Support.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
 import static cf.playhi.freezeyou.Support.getApplicationInfoFromPkgName;
-import static cf.playhi.freezeyou.Support.isAccessibilitySettingsOn;
-import static cf.playhi.freezeyou.Support.openAccessibilitySettings;
+import static cf.playhi.freezeyou.AccessibilityUtils.isAccessibilitySettingsOn;
+import static cf.playhi.freezeyou.AccessibilityUtils.openAccessibilitySettings;
 import static cf.playhi.freezeyou.Support.removeFromOneKeyList;
 import static cf.playhi.freezeyou.ToastUtils.showToast;
 
diff --git a/app/src/main/java/cf/playhi/freezeyou/ServiceUtils.java b/app/src/main/java/cf/playhi/freezeyou/ServiceUtils.java
new file mode 100644
index 00000000..7164cb02
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/ServiceUtils.java
@@ -0,0 +1,17 @@
+package cf.playhi.freezeyou;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Build;
+
+final class ServiceUtils {
+
+    static void startService(Context context, Intent intent) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            context.startForegroundService(intent);
+        } else {
+            context.startService(intent);
+        }
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/SettingsFragment.java b/app/src/main/java/cf/playhi/freezeyou/SettingsFragment.java
index 9928e3a7..9b2a37f7 100644
--- a/app/src/main/java/cf/playhi/freezeyou/SettingsFragment.java
+++ b/app/src/main/java/cf/playhi/freezeyou/SettingsFragment.java
@@ -24,8 +24,8 @@ import static cf.playhi.freezeyou.PreferenceSupport.updatePrefSummary;
 import static cf.playhi.freezeyou.AlertDialogUtils.buildAlertDialog;
 import static cf.playhi.freezeyou.VersionUtils.checkUpdate;
 import static cf.playhi.freezeyou.Support.getDevicePolicyManager;
-import static cf.playhi.freezeyou.Support.isAccessibilitySettingsOn;
-import static cf.playhi.freezeyou.Support.openAccessibilitySettings;
+import static cf.playhi.freezeyou.AccessibilityUtils.isAccessibilitySettingsOn;
+import static cf.playhi.freezeyou.AccessibilityUtils.openAccessibilitySettings;
 import static cf.playhi.freezeyou.Support.openDevicePolicyManager;
 import static cf.playhi.freezeyou.MoreUtils.requestOpenWebSite;
 import static cf.playhi.freezeyou.ToastUtils.showToast;
diff --git a/app/src/main/java/cf/playhi/freezeyou/Support.java b/app/src/main/java/cf/playhi/freezeyou/Support.java
index 122e3c27..e129202f 100644
--- a/app/src/main/java/cf/playhi/freezeyou/Support.java
+++ b/app/src/main/java/cf/playhi/freezeyou/Support.java
@@ -1,69 +1,38 @@
 package cf.playhi.freezeyou;
 
-import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
-import android.app.AlarmManager;
 import android.app.AlertDialog;
-import android.app.Notification;
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
 import android.app.admin.DevicePolicyManager;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
-import android.content.pm.ShortcutInfo;
-import android.content.pm.ShortcutManager;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.graphics.Bitmap;
-import android.graphics.Canvas;
-import android.graphics.Matrix;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.Drawable;
-import android.graphics.drawable.Icon;
-import android.net.ConnectivityManager;
-import android.net.Uri;
-import android.net.wifi.WifiManager;
 import android.os.Build;
 import android.os.PowerManager;
-import android.os.SystemClock;
-import android.provider.Settings;
-import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.Log;
 
 import net.grandcentrix.tray.AppPreferences;
 
-import java.io.BufferedOutputStream;
 import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.lang.reflect.Method;
 import java.util.Arrays;
-import java.util.Calendar;
-import java.util.Date;
 
-import cf.playhi.freezeyou.receiver.NotificationDeletedReceiver;
-
-import static android.content.Context.ALARM_SERVICE;
-import static android.content.Context.MODE_PRIVATE;
 import static android.content.Context.POWER_SERVICE;
 import static android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES;
 import static cf.playhi.freezeyou.AlertDialogUtils.buildAlertDialog;
-import static cf.playhi.freezeyou.MoreUtils.requestOpenWebSite;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getApplicationIcon;
+import static cf.playhi.freezeyou.ApplicationIconUtils.getBitmapFromDrawable;
+import static cf.playhi.freezeyou.NotificationUtils.createNotification;
+import static cf.playhi.freezeyou.NotificationUtils.deleteNotification;
+import static cf.playhi.freezeyou.ProcessUtils.destroyProcess;
+import static cf.playhi.freezeyou.ProcessUtils.fAURoot;
+import static cf.playhi.freezeyou.ServiceUtils.startService;
+import static cf.playhi.freezeyou.TasksUtils.onUFApplications;
 import static cf.playhi.freezeyou.ToastUtils.showToast;
 
 class Support {
-    private static Drawable drawable;
-    private static Bitmap bitmap;
 
     private static void makeDialog(final String title, final String message, final Context context, @Nullable final ApplicationInfo applicationInfo, final String pkgName, final boolean enabled, @Nullable final Activity activity, final boolean finish) {
         AlertDialog.Builder builder =
@@ -104,19 +73,6 @@ class Support {
         builder.create().show();
     }
 
-    private static void destroyProcess(@Nullable DataOutputStream dataOutputStream, @Nullable Process process1) {
-        try {
-            if (dataOutputStream != null) {
-                dataOutputStream.close();
-            }
-            if (process1 != null) {
-                process1.destroy();
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
     static boolean isDeviceOwner(Context context) {
         return Build.VERSION.SDK_INT >= 18 && getDevicePolicyManager(context).isDeviceOwnerApp(context.getPackageName());
     }
@@ -171,283 +127,6 @@ class Support {
         }
     }
 
-    //最初参考 http://www.cnblogs.com/zhou2016/p/6281678.html
-
-    /**
-     * Drawable转Bitmap
-     *
-     * @param drawable drawable
-     * @return Bitmap
-     */
-    static Bitmap getBitmapFromDrawable(Drawable drawable) {
-        try {
-            return ((BitmapDrawable) drawable).getBitmap();
-        } catch (Exception e) {
-            Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
-            Canvas canvas = new Canvas(bitmap);
-            drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
-            drawable.draw(canvas);
-            return bitmap;
-        }
-    }
-
-    static Drawable getApplicationIcon(Context context, String pkgName, @Nullable ApplicationInfo applicationInfo, boolean resize) {
-        String path = context.getFilesDir() + "/icon/" + pkgName + ".png";
-        if (new File(path).exists()) {
-            drawable = BitmapDrawable.createFromPath(path);
-        } else if (applicationInfo != null) {
-            drawable = applicationInfo.loadIcon(context.getPackageManager());
-            folderCheck(context.getFilesDir() + "/icon");
-            writeBitmapToFile(path, getBitmapFromDrawable(drawable));
-        } else if (!"".equals(pkgName)) {
-            try {
-                drawable = context.getPackageManager().getApplicationIcon(pkgName);
-                folderCheck(context.getFilesDir() + "/icon");
-                writeBitmapToFile(path, getBitmapFromDrawable(drawable));
-            } catch (PackageManager.NameNotFoundException e) {
-                drawable = context.getResources().getDrawable(android.R.drawable.ic_menu_delete);
-            } catch (Exception e) {
-                drawable = context.getResources().getDrawable(android.R.drawable.sym_def_app_icon);
-            }
-        }
-        if ((drawable == null) || (drawable.getIntrinsicWidth() <= 0) || (drawable.getIntrinsicHeight() <= 0)) {
-            drawable = context.getResources().getDrawable(R.mipmap.ic_launcher_round);
-        }
-        if (resize) {
-            bitmap = getBitmapFromDrawable(drawable);
-            int width = bitmap.getWidth();
-            int height = bitmap.getHeight();
-            Matrix matrix = new Matrix();
-            float scaleWidth = ((float) 72) / width;
-            float scaleHeight = ((float) 72) / height;
-            matrix.postScale(scaleWidth, scaleHeight);
-            return new BitmapDrawable(Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true));
-        } else {
-            return drawable;
-        }
-    }
-
-    private static void writeBitmapToFile(String filePath, Bitmap b) {
-        try {
-            File file = new File(filePath);
-            FileOutputStream fos = new FileOutputStream(file);
-            BufferedOutputStream bos = new BufferedOutputStream(fos);
-            b.compress(Bitmap.CompressFormat.PNG, 100, bos);
-            bos.flush();
-            bos.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    private static void folderCheck(String path) {
-        try {
-            File file = new File(path);
-            if (!file.isDirectory()) {
-                file.delete();
-            }
-            if (!file.exists()) {
-                file.mkdirs();
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-    }
-
-    static String getApplicationLabel(Context context, @Nullable PackageManager packageManager, @Nullable ApplicationInfo applicationInfo, String pkgName) {
-        SharedPreferences sharedPreferences = context.getSharedPreferences("NameOfPackages", MODE_PRIVATE);
-        String name = sharedPreferences.getString(pkgName, "");
-        if (!"".equals(name)) {
-            return name;
-        }
-        PackageManager pm = packageManager == null ? context.getPackageManager() : packageManager;
-        if (applicationInfo != null) {
-            name = applicationInfo.loadLabel(pm).toString();
-            sharedPreferences.edit().putString(pkgName, name).apply();
-            return name;
-        } else {
-            try {
-                name = pm.getApplicationInfo(pkgName, GET_UNINSTALLED_PACKAGES).loadLabel(pm).toString();
-                sharedPreferences.edit().putString(pkgName, name).apply();
-                return name;
-            } catch (PackageManager.NameNotFoundException e) {
-                e.printStackTrace();
-                return context.getString(R.string.uninstalled);
-            } catch (Exception e) {
-                e.printStackTrace();
-                return pkgName;
-            }
-        }
-    }
-
-    private static int fAURoot(String pkgName, Boolean enable) throws Exception {
-        Process process = Runtime.getRuntime().exec("su");
-        DataOutputStream outputStream = new DataOutputStream(process.getOutputStream());
-        if (enable) {
-            outputStream.writeBytes("pm enable " + pkgName + "\n");
-        } else {
-            outputStream.writeBytes("pm disable " + pkgName + "\n");
-        }
-        outputStream.writeBytes("exit\n");
-        outputStream.flush();
-        int i = process.waitFor();
-        destroyProcess(outputStream, process);
-        return i;
-    }
-
-    static void createShortCut(String title, String pkgName, Drawable icon, Class<?> cls, String id, Context context) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
-            createShortCutOldApi(title, pkgName, icon, cls, context);
-        } else {
-            ShortcutManager mShortcutManager =
-                    context.getSystemService(ShortcutManager.class);
-            if (mShortcutManager != null) {
-                if (mShortcutManager.isRequestPinShortcutSupported()) {
-                    ShortcutInfo.Builder shortcutInfoBuilder =
-                            new ShortcutInfo.Builder(context, id);
-                    shortcutInfoBuilder.setIcon(Icon.createWithBitmap(getBitmapFromDrawable(icon)));
-                    shortcutInfoBuilder.setIntent(
-                            new Intent(context, cls)
-                                    .setAction(Intent.ACTION_MAIN)
-                                    .putExtra("pkgName", pkgName)
-                    );
-                    shortcutInfoBuilder.setShortLabel(title);
-                    shortcutInfoBuilder.setLongLabel(title);
-
-                    ShortcutInfo pinShortcutInfo = shortcutInfoBuilder.build();
-                    // Create the PendingIntent object only if your app needs to be notified
-                    // that the user allowed the shortcut to be pinned. Note that, if the
-                    // pinning operation fails, your app isn't notified. We assume here that the
-                    // app has implemented a method called createShortcutResultIntent() that
-                    // returns a broadcast intent.
-                    Intent pinnedShortcutCallbackIntent =
-                            mShortcutManager.createShortcutResultIntent(pinShortcutInfo);
-
-                    // Configure the intent so that your app's broadcast receiver gets
-                    // the callback successfully.
-                    PendingIntent successCallback = PendingIntent.getBroadcast(context, id.hashCode(),
-                            pinnedShortcutCallbackIntent, 0);
-
-                    mShortcutManager.requestPinShortcut(pinShortcutInfo,
-                            successCallback.getIntentSender());
-                    showToast(context, R.string.requested);
-                } else {
-                    createShortCutOldApi(title, pkgName, icon, cls, context);
-                }
-            } else {
-                createShortCutOldApi(title, pkgName, icon, cls, context);
-            }
-        }
-    }
-
-    private static void createShortCutOldApi(String title, String pkgName, Drawable icon, Class<?> cls, Context context) {
-        Intent addShortCut = new Intent("com.android.launcher.action.INSTALL_SHORTCUT");
-        Intent intent = new Intent(context, cls);
-        intent.putExtra("pkgName", pkgName);
-        addShortCut.putExtra(Intent.EXTRA_SHORTCUT_NAME, title);
-        addShortCut.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intent);
-        try {
-            Bitmap bitmap = getBitmapFromDrawable(icon);
-            float size = context.getResources().getDimension(android.R.dimen.app_icon_size);
-            if (size < 1) {
-                size = 72;
-            }
-            if (bitmap.getHeight() > size) {
-                Matrix matrix = new Matrix();
-                float scaleWidth = (size) / bitmap.getWidth();
-                float scaleHeight = (size) / bitmap.getHeight();
-                matrix.postScale(scaleWidth, scaleHeight);
-                addShortCut.putExtra(Intent.EXTRA_SHORTCUT_ICON,
-                        Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true));
-                context.sendBroadcast(addShortCut);
-            } else {
-                addShortCut.putExtra(Intent.EXTRA_SHORTCUT_ICON, bitmap);
-                context.sendBroadcast(addShortCut);
-            }
-            showToast(context, R.string.requested);
-        } catch (Exception e) {
-            e.printStackTrace();
-            showToast(context, context.getString(R.string.requestFailed) + e.getMessage());
-        }
-    }
-
-    @SuppressLint("ApplySharedPref")
-    static void createNotification(Context context, String pkgName, int iconResId, @Nullable Bitmap bitmap) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            AppPreferences preferenceManager = new AppPreferences(context);
-            boolean notificationBarFreezeImmediately = preferenceManager.getBoolean("notificationBarFreezeImmediately", true);
-            String description = notificationBarFreezeImmediately ? context.getString(R.string.freezeImmediately) : context.getString(R.string.disableAEnable);
-            Notification.Builder mBuilder = new Notification.Builder(context);
-            int mId = pkgName.hashCode();
-            String name = getApplicationLabel(context, null, null, pkgName);
-            if (!context.getString(R.string.uninstalled).equals(name)) {
-                mBuilder.setSmallIcon(iconResId);
-                mBuilder.setLargeIcon(bitmap);
-                mBuilder.setContentTitle(name);
-                mBuilder.setContentText(description);
-                mBuilder.setAutoCancel(!preferenceManager.getBoolean("notificationBarDisableClickDisappear", true));
-                mBuilder.setOngoing(preferenceManager.getBoolean("notificationBarDisableSlideOut", false));
-
-                Intent intent = new Intent(context, NotificationDeletedReceiver.class).putExtra("pkgName", pkgName);
-                PendingIntent pendingIntent = PendingIntent.getBroadcast(context, mId, intent, 0);
-                mBuilder.setDeleteIntent(pendingIntent);
-
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-                    String CHANNEL_ID = "FAUf";
-                    int importance = NotificationManager.IMPORTANCE_LOW;
-                    NotificationChannel channel = new NotificationChannel(CHANNEL_ID, description, importance);
-                    channel.setDescription(description);
-                    // Register the channel with the system; you can't change the importance
-                    // or other notification behaviors after this
-                    NotificationManager notificationManager = context.getSystemService(NotificationManager.class);
-                    if (notificationManager != null)
-                        notificationManager.createNotificationChannel(channel);
-                    mBuilder.setChannelId(CHANNEL_ID);
-                }
-                // Create an Intent for the activity you want to start
-                Intent resultIntent;
-                PendingIntent resultPendingIntent;
-                if (notificationBarFreezeImmediately) {
-                    resultIntent = new Intent(context, FUFService.class)
-                            .putExtra("pkgName", pkgName)
-                            .putExtra("single", true)
-                            .putExtra("freeze", true);
-                    resultPendingIntent = PendingIntent.getService(context, mId, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-                } else {
-                    resultIntent = new Intent(context, Freeze.class).putExtra("pkgName", pkgName).putExtra("auto", false);
-                    resultPendingIntent = PendingIntent.getActivity(context, mId, resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-                }
-                mBuilder.setContentIntent(resultPendingIntent);
-                NotificationManager mNotificationManager =
-                        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-                if (mNotificationManager != null) {
-                    mNotificationManager.notify(mId, mBuilder.build());
-                    AppPreferences appPreferences = new AppPreferences(context);
-                    String notifying = appPreferences.getString("notifying", "");
-                    if (notifying != null && !notifying.contains(pkgName + ",")) {
-                        appPreferences.put("notifying", notifying + pkgName + ",");
-                    }
-                }
-            }
-        }
-    }
-
-    @SuppressLint("ApplySharedPref")
-    private static void deleteNotification(Context context, String pkgName) {
-        NotificationManager mNotificationManager =
-                (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-        if (mNotificationManager != null) {
-            mNotificationManager.cancel(pkgName.hashCode());
-            deleteNotifying(context, pkgName);
-        }
-    }
-
-    static boolean deleteNotifying(Context context, String pkgName) {
-        AppPreferences defaultSharedPreferences = new AppPreferences(context);
-        String notifying = defaultSharedPreferences.getString("notifying", "");
-        return notifying == null || !notifying.contains(pkgName + ",") || defaultSharedPreferences.put("notifying", notifying.replace(pkgName + ",", ""));
-    }
-
     static void processRootAction(final String pkgName, final Context context, final boolean enable, final boolean askRun, boolean runImmediately, @Nullable Activity activity, boolean finish) {
         String currentPackage = " ";
         if (new AppPreferences(context).getBoolean("avoidFreezeForegroundApplications", false)) {
@@ -740,324 +419,6 @@ class Support {
         }
     }
 
-
-    static void openAccessibilitySettings(Context context) {
-        try {
-            Intent accessibilityIntent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
-            context.startActivity(accessibilityIntent);
-        } catch (Exception e) {
-            e.printStackTrace();
-            showToast(context, R.string.failed);
-        }
-    }
-
-    //https://stackoverflow.com/questions/18094982/detect-if-my-accessibility-service-is-enabled
-    static boolean isAccessibilitySettingsOn(Context mContext) {
-        int accessibilityEnabled = 0;
-        final String service = mContext.getPackageName() + "/" + AccessibilityService.class.getCanonicalName();
-        try {
-            accessibilityEnabled = Settings.Secure.getInt(
-                    mContext.getApplicationContext().getContentResolver(),
-                    android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);
-        } catch (Settings.SettingNotFoundException e) {
-            e.printStackTrace();
-        }
-
-        TextUtils.SimpleStringSplitter mStringColonSplitter = new TextUtils.SimpleStringSplitter(':');
-
-        if (accessibilityEnabled == 1) {
-            String settingValue = Settings.Secure.getString(
-                    mContext.getApplicationContext().getContentResolver(),
-                    Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
-            if (settingValue != null) {
-                mStringColonSplitter.setString(settingValue);
-                while (mStringColonSplitter.hasNext()) {
-                    String accessibilityService = mStringColonSplitter.next();
-                    if (accessibilityService.equalsIgnoreCase(service)) {
-                        return true;
-                    }
-                }
-            }
-        } else {
-            return false;
-        }
-        return false;
-    }
-
-    static void publishTask(Context context, int id, int hour, int minute, String repeat, String task) {
-        AlarmManager alarmMgr = (AlarmManager) context.getSystemService(ALARM_SERVICE);
-        Intent intent = new Intent(context, TasksNeedExecuteReceiver.class)
-                .putExtra("id", id)
-                .putExtra("task", task)
-                .putExtra("repeat", repeat)
-                .putExtra("hour", hour)
-                .putExtra("minute", minute);
-        PendingIntent alarmIntent = PendingIntent.getBroadcast(context, id, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-
-        Calendar calendar = Calendar.getInstance();
-        long systemTime = System.currentTimeMillis();
-        calendar.setTimeInMillis(systemTime);
-        calendar.set(Calendar.HOUR_OF_DAY, hour);
-        calendar.set(Calendar.MINUTE, minute);
-        calendar.set(Calendar.SECOND, 0);
-        calendar.set(Calendar.MILLISECOND, 0);
-
-        if (alarmMgr != null) {
-            if ("0".equals(repeat)) {
-                if (systemTime >= calendar.getTimeInMillis()) {
-                    calendar.add(Calendar.DAY_OF_MONTH, 1);
-                }
-                setTask(alarmMgr, calendar.getTimeInMillis(), alarmIntent);
-            } else {
-                long timeInterval = Long.MAX_VALUE;
-                long timeTmp;
-                for (int i = 0; i < repeat.length(); i++) {
-                    switch (repeat.substring(i, i + 1)) {
-                        case "1":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
-                            break;
-                        case "2":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
-                            break;
-                        case "3":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);
-                            break;
-                        case "4":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);
-                            break;
-                        case "5":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
-                            break;
-                        case "6":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);
-                            break;
-                        case "7":
-                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);
-                            break;
-                        default:
-                            break;
-                    }
-                    timeTmp = calculateTimeInterval(systemTime, calendar.getTimeInMillis());
-                    if (timeTmp <= 0) {
-                        timeTmp = timeTmp + 604800000;
-                    }
-                    if (timeTmp > 0 && timeTmp < timeInterval) {
-                        timeInterval = timeTmp;
-                    }
-                }
-                setTask(alarmMgr, systemTime + timeInterval, alarmIntent);
-            }
-        } else {
-            showToast(context, R.string.requestFailedPlsRetry);
-        }
-    }
-
-    private static void setTask(@NonNull AlarmManager alarmManager, long triggerAtMillis, PendingIntent operation) {//RTC
-        if (Build.VERSION.SDK_INT >= 23) {
-            alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
-        } else if (Build.VERSION.SDK_INT >= 19) {
-            alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
-        } else {
-            alarmManager.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
-        }
-    }
-
-    private static void setRealTimeTask(@NonNull AlarmManager alarmManager, long triggerAtMillis, PendingIntent operation) {
-        if (Build.VERSION.SDK_INT >= 23) {
-            alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
-        } else if (Build.VERSION.SDK_INT >= 19) {
-            alarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
-        } else {
-            alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
-        }
-    }
-
-    private static long calculateTimeInterval(long first, long last) {
-        return last - first;
-    }
-
-    static void startService(Context context, Intent intent) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            context.startForegroundService(intent);
-        } else {
-            context.startService(intent);
-        }
-    }
-
-    static void runTask(@NonNull String task, Context context, @Nullable String taskTrigger) {
-        String[] sTasks = task.split(";");
-        for (String asTasks : sTasks) {
-            if (asTasks.startsWith("okff")) {
-                if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                    startService(context, new Intent(context, OneKeyFreezeService.class).putExtra("autoCheckAndLockScreen", false));
-            } else if (asTasks.startsWith("okuf")) {
-                if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                    startService(context, new Intent(context, OneKeyUFService.class));
-            } else if (asTasks.length() >= 4) {
-                String string = asTasks.substring(0, 2);
-                String[] tasks = asTasks.substring(3).split(",");
-                switch (string) {
-                    case "ff":
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            startService(
-                                    context,
-                                    new Intent(context, FUFService.class)
-                                            .putExtra("packages", tasks)
-                                            .putExtra("freeze", true)
-                            );
-                        break;
-                    case "uf":
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            startService(
-                                    context,
-                                    new Intent(context, FUFService.class)
-                                            .putExtra("packages", tasks)
-                                            .putExtra("freeze", false)
-                            );
-                        break;
-                    case "es": //enableSettings
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            enableAndDisableSysSettings(tasks, context, true);
-                        break;
-                    case "ds": //disableSettings
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            enableAndDisableSysSettings(tasks, context, false);
-                        break;
-                    case "st"://showToast
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            showToast(context, asTasks.substring(3));
-                        break;
-                    case "lg"://LOG.E
-                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
-                            Log.e("TasksLogE", asTasks.substring(3));
-                        break;
-                    default:
-                        break;
-                }
-            }
-        }
-    }
-
-    private static void enableAndDisableSysSettings(String[] tasks, Context context, boolean enable) {
-        for (String aTask : tasks) {
-            switch (aTask) {
-                case "wifi"://WiFi
-                    WifiManager wifiManager = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
-                    if (wifiManager != null)
-                        wifiManager.setWifiEnabled(enable);
-                    break;
-                case "cd"://CellularData
-                    setMobileDataEnabled(context, enable);
-                    break;
-                default:
-                    break;
-            }
-        }
-    }
-
-    private static boolean parseTaskAndReturnIfNeedExecuteImmediately(Context context, String task, @Nullable String taskTrigger) {
-        String[] splitTask = task.split(" ");
-        int splitTaskLength = splitTask.length;
-        for (int i = 0; i < splitTaskLength; i++) {
-            switch (splitTask[i]) {
-                case "-d":
-                    if (splitTaskLength >= i + 1) {
-                        long delayAtSeconds = Long.valueOf(splitTask[i + 1]);
-                        AlarmManager alarmMgr = (AlarmManager) context.getSystemService(ALARM_SERVICE);
-                        Intent intent = new Intent(context, TasksNeedExecuteReceiver.class)
-                                .putExtra("id", -6)
-                                .putExtra("task", task.replace(" -d " + splitTask[i + 1], ""))
-                                .putExtra("repeat", "-1")
-                                .putExtra("hour", -1)
-                                .putExtra("minute", -1);
-                        int requestCode = (task + new Date().toString()).hashCode();
-                        PendingIntent pendingIntent =
-                                PendingIntent.getBroadcast(
-                                        context,
-                                        requestCode,
-                                        intent,
-                                        PendingIntent.FLAG_UPDATE_CURRENT);
-                        createDelayTasks(alarmMgr, delayAtSeconds, pendingIntent);
-                        if (taskTrigger != null) {//定时或无撤回判断能力或目前不计划实现撤销的任务直接null
-                            AppPreferences appPreferences = new AppPreferences(context);
-                            appPreferences.put(taskTrigger, appPreferences.getString(taskTrigger, "") + Integer.toString(requestCode) + ",");
-                        }
-                        return false;
-                    }
-                    break;
-                default:
-                    break;
-            }
-        }
-        return true;
-    }
-
-    private static void createDelayTasks(AlarmManager alarmManager, long delayAtSeconds, PendingIntent pendingIntent) {
-
-        setRealTimeTask(alarmManager, SystemClock.elapsedRealtime() + delayAtSeconds * 1000, pendingIntent);
-
-    }
-
-    private static void onUFApplications(Context context, @NonNull String pkgNameString) {
-        final SQLiteDatabase db = context.openOrCreateDatabase("scheduledTriggerTasks", MODE_PRIVATE, null);
-        db.execSQL(
-                "create table if not exists tasks(_id integer primary key autoincrement,tg varchar,tgextra varchar,enabled integer(1),label varchar,task varchar,column1 varchar,column2 varchar)"
-        );
-        Cursor cursor = db.query("tasks", null, null, null, null, null, null);
-        if (cursor.moveToFirst()) {
-            for (int i = 0; i < cursor.getCount(); i++) {
-                String tgExtra = cursor.getString(cursor.getColumnIndex("tgextra"));
-                if (tgExtra == null) {
-                    tgExtra = "";
-                }
-                String tg = cursor.getString(cursor.getColumnIndex("tg"));
-                int enabled = cursor.getInt(cursor.getColumnIndex("enabled"));
-                if (enabled == 1 && "onUFApplications".equals(tg) && ("".equals(tgExtra) || Arrays.asList(tgExtra.split(",")).contains(pkgNameString))) {
-                    String task = cursor.getString(cursor.getColumnIndex("task"));
-                    if (task != null && !"".equals(task)) {
-                        Support.runTask(task.toLowerCase(), context, null);
-                    }
-                }
-                cursor.moveToNext();
-            }
-        }
-        cursor.close();
-        db.close();
-    }
-
-    private static void setMobileDataEnabled(Context context, boolean enable) {
-        //https://stackoverflow.com/questions/21511216/toggle-mobile-data-programmatically-on-android-4-4-2
-        try {//4.4及以下
-            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
-            Class aClass = mConnectivityManager.getClass();
-            Class[] argsClass = new Class[1];
-            argsClass[0] = boolean.class;
-            Method method = aClass.getMethod("setMobileDataEnabled", argsClass);
-            method.invoke(mConnectivityManager, enable);
-        } catch (Exception e) {
-            e.printStackTrace();
-            try {//pri-app方法
-                TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-                Method methodSet = Class.forName(tm.getClass().getName()).getDeclaredMethod("setDataEnabled", Boolean.TYPE);
-                methodSet.invoke(tm, true);
-            } catch (Exception ee) {
-                ee.printStackTrace();
-                try {//Root方法
-                    Process process = Runtime.getRuntime().exec("su");
-                    DataOutputStream outputStream = new DataOutputStream(process.getOutputStream());
-                    outputStream.writeBytes("svc data " + (enable ? "enable" : "disable") + "\n");
-                    outputStream.writeBytes("exit\n");
-                    outputStream.flush();
-                    process.waitFor();
-                    destroyProcess(outputStream, process);
-                } catch (Exception eee) {//暂时无计可施……
-                    eee.printStackTrace();
-                    showToast(context, R.string.failed);
-                }
-            }
-        }
-    }
-
 //    static void checkLanguage(Context context) {
 //        Resources resources = context.getResources();
 //        DisplayMetrics dm = resources.getDisplayMetrics();
diff --git a/app/src/main/java/cf/playhi/freezeyou/TasksNeedExecuteReceiver.java b/app/src/main/java/cf/playhi/freezeyou/TasksNeedExecuteReceiver.java
index e6d55717..bb095082 100644
--- a/app/src/main/java/cf/playhi/freezeyou/TasksNeedExecuteReceiver.java
+++ b/app/src/main/java/cf/playhi/freezeyou/TasksNeedExecuteReceiver.java
@@ -18,11 +18,11 @@ public class TasksNeedExecuteReceiver extends BroadcastReceiver {
             if ("0".equals(repeat) && id != -5) {
                 db.execSQL("UPDATE tasks SET enabled = 0 WHERE _id = " + Integer.toString(id) + ";");
             } else {
-                Support.publishTask(context, id, hour, minute, repeat, task);
+                TasksUtils.publishTask(context, id, hour, minute, repeat, task);
             }
         }
         if (task != null && !"".equals(task)) {
-            Support.runTask(task.toLowerCase(), context, null);//全部转小写
+            TasksUtils.runTask(task.toLowerCase(), context, null);//全部转小写
         }
     }
 }
diff --git a/app/src/main/java/cf/playhi/freezeyou/TasksUtils.java b/app/src/main/java/cf/playhi/freezeyou/TasksUtils.java
new file mode 100644
index 00000000..908c14c7
--- /dev/null
+++ b/app/src/main/java/cf/playhi/freezeyou/TasksUtils.java
@@ -0,0 +1,300 @@
+package cf.playhi.freezeyou;
+
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.net.ConnectivityManager;
+import android.net.wifi.WifiManager;
+import android.os.Build;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.telephony.TelephonyManager;
+import android.util.Log;
+
+import net.grandcentrix.tray.AppPreferences;
+
+import java.io.DataOutputStream;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
+
+import static android.content.Context.ALARM_SERVICE;
+import static android.content.Context.MODE_PRIVATE;
+import static cf.playhi.freezeyou.ServiceUtils.startService;
+import static cf.playhi.freezeyou.ProcessUtils.destroyProcess;
+import static cf.playhi.freezeyou.ToastUtils.showToast;
+
+final class TasksUtils {
+
+    static void publishTask(Context context, int id, int hour, int minute, String repeat, String task) {
+        AlarmManager alarmMgr = (AlarmManager) context.getSystemService(ALARM_SERVICE);
+        Intent intent = new Intent(context, TasksNeedExecuteReceiver.class)
+                .putExtra("id", id)
+                .putExtra("task", task)
+                .putExtra("repeat", repeat)
+                .putExtra("hour", hour)
+                .putExtra("minute", minute);
+        PendingIntent alarmIntent = PendingIntent.getBroadcast(context, id, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+        Calendar calendar = Calendar.getInstance();
+        long systemTime = System.currentTimeMillis();
+        calendar.setTimeInMillis(systemTime);
+        calendar.set(Calendar.HOUR_OF_DAY, hour);
+        calendar.set(Calendar.MINUTE, minute);
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
+
+        if (alarmMgr != null) {
+            if ("0".equals(repeat)) {
+                if (systemTime >= calendar.getTimeInMillis()) {
+                    calendar.add(Calendar.DAY_OF_MONTH, 1);
+                }
+                setTask(alarmMgr, calendar.getTimeInMillis(), alarmIntent);
+            } else {
+                long timeInterval = Long.MAX_VALUE;
+                long timeTmp;
+                for (int i = 0; i < repeat.length(); i++) {
+                    switch (repeat.substring(i, i + 1)) {
+                        case "1":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
+                            break;
+                        case "2":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
+                            break;
+                        case "3":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.TUESDAY);
+                            break;
+                        case "4":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.WEDNESDAY);
+                            break;
+                        case "5":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.THURSDAY);
+                            break;
+                        case "6":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.FRIDAY);
+                            break;
+                        case "7":
+                            calendar.set(Calendar.DAY_OF_WEEK, Calendar.SATURDAY);
+                            break;
+                        default:
+                            break;
+                    }
+                    timeTmp = calculateTimeInterval(systemTime, calendar.getTimeInMillis());
+                    if (timeTmp <= 0) {
+                        timeTmp = timeTmp + 604800000;
+                    }
+                    if (timeTmp > 0 && timeTmp < timeInterval) {
+                        timeInterval = timeTmp;
+                    }
+                }
+                setTask(alarmMgr, systemTime + timeInterval, alarmIntent);
+            }
+        } else {
+            showToast(context, R.string.requestFailedPlsRetry);
+        }
+    }
+
+    private static void setTask(@NonNull AlarmManager alarmManager, long triggerAtMillis, PendingIntent operation) {//RTC
+        if (Build.VERSION.SDK_INT >= 23) {
+            alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
+        } else if (Build.VERSION.SDK_INT >= 19) {
+            alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
+        } else {
+            alarmManager.set(AlarmManager.RTC_WAKEUP, triggerAtMillis, operation);
+        }
+    }
+
+    private static void setRealTimeTask(@NonNull AlarmManager alarmManager, long triggerAtMillis, PendingIntent operation) {
+        if (Build.VERSION.SDK_INT >= 23) {
+            alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
+        } else if (Build.VERSION.SDK_INT >= 19) {
+            alarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
+        } else {
+            alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, operation);
+        }
+    }
+
+    private static long calculateTimeInterval(long first, long last) {
+        return last - first;
+    }
+
+    static void runTask(@NonNull String task, Context context, @Nullable String taskTrigger) {
+        String[] sTasks = task.split(";");
+        for (String asTasks : sTasks) {
+            if (asTasks.startsWith("okff")) {
+                if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                    startService(context, new Intent(context, OneKeyFreezeService.class).putExtra("autoCheckAndLockScreen", false));
+            } else if (asTasks.startsWith("okuf")) {
+                if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                    startService(context, new Intent(context, OneKeyUFService.class));
+            } else if (asTasks.length() >= 4) {
+                String string = asTasks.substring(0, 2);
+                String[] tasks = asTasks.substring(3).split(",");
+                switch (string) {
+                    case "ff":
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            startService(
+                                    context,
+                                    new Intent(context, FUFService.class)
+                                            .putExtra("packages", tasks)
+                                            .putExtra("freeze", true)
+                            );
+                        break;
+                    case "uf":
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            startService(
+                                    context,
+                                    new Intent(context, FUFService.class)
+                                            .putExtra("packages", tasks)
+                                            .putExtra("freeze", false)
+                            );
+                        break;
+                    case "es": //enableSettings
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            enableAndDisableSysSettings(tasks, context, true);
+                        break;
+                    case "ds": //disableSettings
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            enableAndDisableSysSettings(tasks, context, false);
+                        break;
+                    case "st"://showToast
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            showToast(context, asTasks.substring(3));
+                        break;
+                    case "lg"://LOG.E
+                        if (parseTaskAndReturnIfNeedExecuteImmediately(context, asTasks, taskTrigger))
+                            Log.e("TasksLogE", asTasks.substring(3));
+                        break;
+                    default:
+                        break;
+                }
+            }
+        }
+    }
+
+    private static void enableAndDisableSysSettings(String[] tasks, Context context, boolean enable) {
+        for (String aTask : tasks) {
+            switch (aTask) {
+                case "wifi"://WiFi
+                    WifiManager wifiManager = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
+                    if (wifiManager != null)
+                        wifiManager.setWifiEnabled(enable);
+                    break;
+                case "cd"://CellularData
+                    setMobileDataEnabled(context, enable);
+                    break;
+                default:
+                    break;
+            }
+        }
+    }
+
+    private static boolean parseTaskAndReturnIfNeedExecuteImmediately(Context context, String task, @Nullable String taskTrigger) {
+        String[] splitTask = task.split(" ");
+        int splitTaskLength = splitTask.length;
+        for (int i = 0; i < splitTaskLength; i++) {
+            switch (splitTask[i]) {
+                case "-d":
+                    if (splitTaskLength >= i + 1) {
+                        long delayAtSeconds = Long.valueOf(splitTask[i + 1]);
+                        AlarmManager alarmMgr = (AlarmManager) context.getSystemService(ALARM_SERVICE);
+                        Intent intent = new Intent(context, TasksNeedExecuteReceiver.class)
+                                .putExtra("id", -6)
+                                .putExtra("task", task.replace(" -d " + splitTask[i + 1], ""))
+                                .putExtra("repeat", "-1")
+                                .putExtra("hour", -1)
+                                .putExtra("minute", -1);
+                        int requestCode = (task + new Date().toString()).hashCode();
+                        PendingIntent pendingIntent =
+                                PendingIntent.getBroadcast(
+                                        context,
+                                        requestCode,
+                                        intent,
+                                        PendingIntent.FLAG_UPDATE_CURRENT);
+                        createDelayTasks(alarmMgr, delayAtSeconds, pendingIntent);
+                        if (taskTrigger != null) {//定时或无撤回判断能力或目前不计划实现撤销的任务直接null
+                            AppPreferences appPreferences = new AppPreferences(context);
+                            appPreferences.put(taskTrigger, appPreferences.getString(taskTrigger, "") + Integer.toString(requestCode) + ",");
+                        }
+                        return false;
+                    }
+                    break;
+                default:
+                    break;
+            }
+        }
+        return true;
+    }
+
+    private static void createDelayTasks(AlarmManager alarmManager, long delayAtSeconds, PendingIntent pendingIntent) {
+
+        setRealTimeTask(alarmManager, SystemClock.elapsedRealtime() + delayAtSeconds * 1000, pendingIntent);
+
+    }
+
+    static void onUFApplications(Context context, @NonNull String pkgNameString) {
+        final SQLiteDatabase db = context.openOrCreateDatabase("scheduledTriggerTasks", MODE_PRIVATE, null);
+        db.execSQL(
+                "create table if not exists tasks(_id integer primary key autoincrement,tg varchar,tgextra varchar,enabled integer(1),label varchar,task varchar,column1 varchar,column2 varchar)"
+        );
+        Cursor cursor = db.query("tasks", null, null, null, null, null, null);
+        if (cursor.moveToFirst()) {
+            for (int i = 0; i < cursor.getCount(); i++) {
+                String tgExtra = cursor.getString(cursor.getColumnIndex("tgextra"));
+                if (tgExtra == null) {
+                    tgExtra = "";
+                }
+                String tg = cursor.getString(cursor.getColumnIndex("tg"));
+                int enabled = cursor.getInt(cursor.getColumnIndex("enabled"));
+                if (enabled == 1 && "onUFApplications".equals(tg) && ("".equals(tgExtra) || Arrays.asList(tgExtra.split(",")).contains(pkgNameString))) {
+                    String task = cursor.getString(cursor.getColumnIndex("task"));
+                    if (task != null && !"".equals(task)) {
+                        runTask(task.toLowerCase(), context, null);
+                    }
+                }
+                cursor.moveToNext();
+            }
+        }
+        cursor.close();
+        db.close();
+    }
+
+    private static void setMobileDataEnabled(Context context, boolean enable) {
+        //https://stackoverflow.com/questions/21511216/toggle-mobile-data-programmatically-on-android-4-4-2
+        try {//4.4及以下
+            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
+            Class aClass = mConnectivityManager.getClass();
+            Class[] argsClass = new Class[1];
+            argsClass[0] = boolean.class;
+            Method method = aClass.getMethod("setMobileDataEnabled", argsClass);
+            method.invoke(mConnectivityManager, enable);
+        } catch (Exception e) {
+            e.printStackTrace();
+            try {//pri-app方法
+                TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+                Method methodSet = Class.forName(tm.getClass().getName()).getDeclaredMethod("setDataEnabled", Boolean.TYPE);
+                methodSet.invoke(tm, true);
+            } catch (Exception ee) {
+                ee.printStackTrace();
+                try {//Root方法
+                    Process process = Runtime.getRuntime().exec("su");
+                    DataOutputStream outputStream = new DataOutputStream(process.getOutputStream());
+                    outputStream.writeBytes("svc data " + (enable ? "enable" : "disable") + "\n");
+                    outputStream.writeBytes("exit\n");
+                    outputStream.flush();
+                    process.waitFor();
+                    destroyProcess(outputStream, process);
+                } catch (Exception eee) {//暂时无计可施……
+                    eee.printStackTrace();
+                    showToast(context, R.string.failed);
+                }
+            }
+        }
+    }
+
+}
diff --git a/app/src/main/java/cf/playhi/freezeyou/TriggerTasksService.java b/app/src/main/java/cf/playhi/freezeyou/TriggerTasksService.java
index cc003f59..195e20c9 100644
--- a/app/src/main/java/cf/playhi/freezeyou/TriggerTasksService.java
+++ b/app/src/main/java/cf/playhi/freezeyou/TriggerTasksService.java
@@ -105,7 +105,7 @@ class TriggerScreenLockListener {
                             if (enabled == 1 && "onScreenOff".equals(tg)) {
                                 String task = cursor.getString(cursor.getColumnIndex("task"));
                                 if (task != null && !"".equals(task)) {
-                                    Support.runTask(task.toLowerCase(), context, "onScreenOff");
+                                    TasksUtils.runTask(task.toLowerCase(), context, "onScreenOff");
                                 }
                             }
                             cursor.moveToNext();
@@ -119,7 +119,7 @@ class TriggerScreenLockListener {
                             if (enabled == 1 && "onScreenOn".equals(tg)) {
                                 String task = cursor.getString(cursor.getColumnIndex("task"));
                                 if (task != null && !"".equals(task)) {
-                                    Support.runTask(task.toLowerCase(), context, "onScreenOn");
+                                    TasksUtils.runTask(task.toLowerCase(), context, "onScreenOn");
                                 }
                             }
                             cursor.moveToNext();
diff --git a/app/src/main/java/cf/playhi/freezeyou/UninstallReceiver.java b/app/src/main/java/cf/playhi/freezeyou/UninstallReceiver.java
index 3bc4bd19..e694fd57 100644
--- a/app/src/main/java/cf/playhi/freezeyou/UninstallReceiver.java
+++ b/app/src/main/java/cf/playhi/freezeyou/UninstallReceiver.java
@@ -6,7 +6,7 @@ import android.content.Intent;
 
 import java.io.File;
 
-import static cf.playhi.freezeyou.Support.deleteNotifying;
+import static cf.playhi.freezeyou.NotificationUtils.deleteNotifying;
 import static cf.playhi.freezeyou.Support.removeFromOneKeyList;
 
 public class UninstallReceiver extends BroadcastReceiver {
