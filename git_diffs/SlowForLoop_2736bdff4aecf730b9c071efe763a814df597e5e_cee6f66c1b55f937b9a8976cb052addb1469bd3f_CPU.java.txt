diff --git a/app/src/main/java/com/dkanada/chip/core/CPU.java b/app/src/main/java/com/dkanada/chip/core/CPU.java
index b22b3ee..0a6a447 100644
--- a/app/src/main/java/com/dkanada/chip/core/CPU.java
+++ b/app/src/main/java/com/dkanada/chip/core/CPU.java
@@ -1,9 +1,29 @@
 package com.dkanada.chip.core;
 
-import java.util.Random;
+import com.dkanada.chip.core.instructions.Instruction;
+import com.dkanada.chip.core.instructions.Instruction_0x0000;
+import com.dkanada.chip.core.instructions.Instruction_0x1000;
+import com.dkanada.chip.core.instructions.Instruction_0x2000;
+import com.dkanada.chip.core.instructions.Instruction_0x3000;
+import com.dkanada.chip.core.instructions.Instruction_0x4000;
+import com.dkanada.chip.core.instructions.Instruction_0x5000;
+import com.dkanada.chip.core.instructions.Instruction_0x6000;
+import com.dkanada.chip.core.instructions.Instruction_0x7000;
+import com.dkanada.chip.core.instructions.Instruction_0x8000;
+import com.dkanada.chip.core.instructions.Instruction_0x9000;
+import com.dkanada.chip.core.instructions.Instruction_0xA000;
+import com.dkanada.chip.core.instructions.Instruction_0xB000;
+import com.dkanada.chip.core.instructions.Instruction_0xC000;
+import com.dkanada.chip.core.instructions.Instruction_0xD000;
+import com.dkanada.chip.core.instructions.Instruction_0xE000;
+import com.dkanada.chip.core.instructions.Instruction_0xF000;
+
+import java.util.HashMap;
+import java.util.Map;
 
 public class CPU {
-    public Core core;
+    private Map<Integer, Instruction> map;
+    private Core core;
 
     public char[] v;
 
@@ -19,216 +39,29 @@ public class CPU {
         pc = 0x200;
         sp = 0x000;
         index = 0x200;
+
+        map = new HashMap<>();
+        map.put(0x0000, new Instruction_0x0000());
+        map.put(0x1000, new Instruction_0x1000());
+        map.put(0x2000, new Instruction_0x2000());
+        map.put(0x3000, new Instruction_0x3000());
+        map.put(0x4000, new Instruction_0x4000());
+        map.put(0x5000, new Instruction_0x5000());
+        map.put(0x6000, new Instruction_0x6000());
+        map.put(0x7000, new Instruction_0x7000());
+        map.put(0x8000, new Instruction_0x8000());
+        map.put(0x9000, new Instruction_0x9000());
+        map.put(0xA000, new Instruction_0xA000());
+        map.put(0xB000, new Instruction_0xB000());
+        map.put(0xC000, new Instruction_0xC000());
+        map.put(0xD000, new Instruction_0xD000());
+        map.put(0xE000, new Instruction_0xE000());
+        map.put(0xF000, new Instruction_0xF000());
     }
 
     public void cycle() {
-        char opcode = core.memory.getWord(pc);
-        switch (opcode & 0xF000) {
-            case 0x0000:
-                switch (opcode & 0x000F) {
-                    case 0x0000:
-                        core.display.setDisplay(new byte[64][32]);
-                        core.updateDisplay(core.display.getDisplay());
-                        pc += 2;
-                        break;
-                    case 0x000E:
-                        pc = core.memory.getWord((char) (sp - 2));
-                        sp -= 2;
-                        core.memory.setWord(sp, (char) 0x0);
-                        break;
-                }
-                break;
-            case 0x1000:
-                pc = getNNN(opcode);
-                break;
-            case 0x2000:
-                core.memory.setWord(sp, (char) (pc + 2));
-                sp += 2;
-                pc = getNNN(opcode);
-                break;
-            case 0x3000:
-                pc += v[getX(opcode)] == getNN(opcode) ? 4 : 2;
-                break;
-            case 0x4000:
-                pc += v[getX(opcode)] != getNN(opcode) ? 4 : 2;
-                break;
-            case 0x5000:
-                pc += v[getX(opcode)] == v[getY(opcode)] ? 4 : 2;
-                break;
-            case 0x6000:
-                v[getX(opcode)] = getNN(opcode);
-                pc += 2;
-                break;
-            case 0x7000:
-                v[getX(opcode)] += getNN(opcode);
-                v[getX(opcode)] &= 0xFF;
-                pc += 2;
-                break;
-            case 0x8000:
-                switch (opcode & 0x000F) {
-                    case 0x0000:
-                        v[getX(opcode)] = v[getY(opcode)];
-                        pc += 2;
-                        break;
-                    case 0x0001:
-                        v[getX(opcode)] = (char) (v[getX(opcode)] | v[getY(opcode)]);
-                        pc += 2;
-                        break;
-                    case 0x0002:
-                        v[getX(opcode)] = (char) (v[getX(opcode)] & v[getY(opcode)]);
-                        pc += 2;
-                        break;
-                    case 0x0003:
-                        v[getX(opcode)] = (char) (v[getX(opcode)] ^ v[getY(opcode)]);
-                        pc += 2;
-                        break;
-                    case 0x0004:
-                        int add = v[getX(opcode)] + v[getY(opcode)];
-                        // set v[f] = 1 if carry
-                        if (add > 255) {
-                            v[0xF] = 1;
-                        } else {
-                            v[0xF] = 0;
-                        }
-                        v[getX(opcode)] = (char) add;
-                        v[getX(opcode)] &= 0xFF;
-                        pc += 2;
-                        break;
-                    case 0x0005:
-                        int subtract = v[getX(opcode)] - v[getY(opcode)];
-                        // set v[f] = 1 if not borrow
-                        if (subtract < 0) {
-                            v[0xF] = 0;
-                        } else {
-                            v[0xF] = 1;
-                        }
-                        v[getX(opcode)] = (char) subtract;
-                        v[getX(opcode)] &= 0xFF;
-                        pc += 2;
-                        break;
-                    case 0x0006:
-                        v[0xF] = (char) (v[getY(opcode)] & 0x000F);
-                        v[getY(opcode)] >>= 1;
-                        v[getX(opcode)] = v[getY(opcode)];
-                        pc += 2;
-                        break;
-                    case 0x0007:
-                        int subInverse = v[getY(opcode)] - v[getX(opcode)];
-                        // set v[f] = 1 if not borrow
-                        if (subInverse < 0) {
-                            v[0xF] = 0;
-                        } else {
-                            v[0xF] = 1;
-                        }
-                        v[getX(opcode)] = (char) subInverse;
-                        v[getX(opcode)] &= 0xFF;
-                        pc += 2;
-                        break;
-                    case 0x000E:
-                        v[0xF] = (char) (v[getY(opcode)] >> 7);
-                        v[getY(opcode)] <<= 1;
-                        v[getX(opcode)] = v[getY(opcode)];
-                        pc += 2;
-                        break;
-                }
-                break;
-            case 0x9000:
-                pc += v[getX(opcode)] != v[getY(opcode)] ? 4 : 2;
-                break;
-            case 0xA000:
-                index = getNNN(opcode);
-                pc += 2;
-                break;
-            case 0xB000:
-                pc = (char) (v[0] + getNNN(opcode));
-                break;
-            case 0xC000:
-                Random random = new Random();
-                int r = random.nextInt(255);
-                v[getX(opcode)] = (char) (r & getNN(opcode));
-                pc += 2;
-                break;
-            case 0xD000:
-                char startX = v[getX(opcode)];
-                char startY = v[getY(opcode)];
-                v[0xF] = 0;
-                for (int y = 0; y < getN(opcode); y++) {
-                    char line = core.memory.getByte((char) (index + y));
-                    for (int x = 0; x < 8; x++) {
-                        char pixel = (char) (line & (0x80 >> x));
-                        if (pixel != 0) {
-                            if (core.display.getPixel((startX + x) % 64, (startY + y) % 32) != 0) {
-                                v[0xF] = 1;
-                            }
-                            core.display.setPixel((startX + x) % 64, (startY + y) % 32, (byte) 1);
-                        }
-                    }
-                }
-                core.updateDisplay(core.display.getDisplay());
-                pc += 2;
-                break;
-            case 0xE000:
-                switch (opcode & 0x00FF) {
-                    case 0x009E:
-                        pc += core.keypad.getKey() == v[getX(opcode)] ? 4 : 2;
-                        break;
-                    case 0x00A1:
-                        pc += core.keypad.getKey() != v[getX(opcode)] ? 4 : 2;
-                        break;
-                }
-                break;
-            case 0xF000:
-                switch (opcode & 0x00FF) {
-                    case 0x0007:
-                        v[getX(opcode)] = core.delay;
-                        pc += 2;
-                        break;
-                    case 0x000A:
-                        if (core.keypad.getKey() != 1000) {
-                            v[getX(opcode)] = core.keypad.getKey();
-                            pc += 2;
-                        }
-                        break;
-                    case 0x0015:
-                        core.delay = v[getX(opcode)];
-                        pc += 2;
-                        break;
-                    case 0x0018:
-                        core.sound = v[getX(opcode)];
-                        pc += 2;
-                        break;
-                    case 0x001E:
-                        index += v[getX(opcode)];
-                        pc += 2;
-                        break;
-                    case 0x0029:
-                        char offset = (char) (v[getX(opcode)] * 0x5);
-                        index = (char) (core.memory.getFontAddress() + offset);
-                        pc += 2;
-                        break;
-                    case 0x0033:
-                        int num = v[getX(opcode)];
-                        for (int i = 2; i >= 0; i--) {
-                            core.memory.setByte((char) (index + i), (char) (num % 10));
-                            num /= 10;
-                        }
-                        pc += 2;
-                        break;
-                    case 0x0055:
-                        for (int x = 0; x <= getX(opcode); x++) {
-                            core.memory.setByte(index++, v[x]);
-                        }
-                        pc += 2;
-                        break;
-                    case 0x0065:
-                        for (int x = 0; x <= getX(opcode); x++) {
-                            v[x] = core.memory.getByte(index++);
-                        }
-                        pc += 2;
-                        break;
-                }
-                break;
-        }
+        OPCode opcode = new OPCode(core.memory.getWord(pc));
+        map.get(opcode.opcode & 0xF000).execute(core, this, opcode);
     }
 
     public char getNNN(char opcode) {
diff --git a/app/src/main/java/com/dkanada/chip/core/Core.java b/app/src/main/java/com/dkanada/chip/core/Core.java
index 68ac1a9..90835ed 100644
--- a/app/src/main/java/com/dkanada/chip/core/Core.java
+++ b/app/src/main/java/com/dkanada/chip/core/Core.java
@@ -30,6 +30,10 @@ public class Core extends Thread implements DisplayListener, KeypadListener {
         reset();
     }
 
+    public Core() {
+        reset();
+    }
+
     public void reset() {
         load = false;
 
@@ -137,8 +141,10 @@ public class Core extends Thread implements DisplayListener, KeypadListener {
 
     @Override
     public void updateDisplay(byte[][] array) {
-        displayView.setDisplay(array);
-        displayView.postInvalidate();
+        if (displayView != null) {
+            displayView.setDisplay(array);
+            displayView.postInvalidate();
+        }
     }
 
     @Override
diff --git a/app/src/main/java/com/dkanada/chip/core/OPCode.java b/app/src/main/java/com/dkanada/chip/core/OPCode.java
index 15fc8fc..2503000 100644
--- a/app/src/main/java/com/dkanada/chip/core/OPCode.java
+++ b/app/src/main/java/com/dkanada/chip/core/OPCode.java
@@ -1,7 +1,7 @@
 package com.dkanada.chip.core;
 
 public class OPCode {
-    private char opcode;
+    public char opcode;
 
     public OPCode(char value) {
         opcode = value;
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0x8000.java b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0x8000.java
new file mode 100644
index 0000000..869bfe7
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0x8000.java
@@ -0,0 +1,39 @@
+package com.dkanada.chip.core.instructions;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8FF0;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x800E;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8001;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8002;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8003;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8004;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8005;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8006;
+import com.dkanada.chip.core.instructions.x8000.Instruction_0x8007;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class Instruction_0x8000 implements Instruction {
+    private Map<Integer, Instruction> map;
+
+    public Instruction_0x8000() {
+        map = new HashMap<>();
+        map.put(0x0000, new Instruction_0x8FF0());
+        map.put(0x000E, new Instruction_0x800E());
+        map.put(0x0001, new Instruction_0x8001());
+        map.put(0x0002, new Instruction_0x8002());
+        map.put(0x0003, new Instruction_0x8003());
+        map.put(0x0004, new Instruction_0x8004());
+        map.put(0x0005, new Instruction_0x8005());
+        map.put(0x0006, new Instruction_0x8006());
+        map.put(0x0007, new Instruction_0x8007());
+    }
+
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        map.get(opcode.opcode & 0x000F).execute(core, cpu, opcode);
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xE000.java b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xE000.java
index a6d9ab6..61ff29c 100644
--- a/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xE000.java
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xE000.java
@@ -3,8 +3,8 @@ package com.dkanada.chip.core.instructions;
 import com.dkanada.chip.core.CPU;
 import com.dkanada.chip.core.Core;
 import com.dkanada.chip.core.OPCode;
-import com.dkanada.chip.core.instructions.xE000.Instruction_0xE09E;
 import com.dkanada.chip.core.instructions.xE000.Instruction_0xE0A1;
+import com.dkanada.chip.core.instructions.xE000.Instruction_0xE09E;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xF000.java b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xF000.java
index 08b1e18..9d2900e 100644
--- a/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xF000.java
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/Instruction_0xF000.java
@@ -3,11 +3,11 @@ package com.dkanada.chip.core.instructions;
 import com.dkanada.chip.core.CPU;
 import com.dkanada.chip.core.Core;
 import com.dkanada.chip.core.OPCode;
-import com.dkanada.chip.core.instructions.xF000.Instruction_0xF007;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF00A;
+import com.dkanada.chip.core.instructions.xF000.Instruction_0xF01E;
+import com.dkanada.chip.core.instructions.xF000.Instruction_0xF007;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF015;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF018;
-import com.dkanada.chip.core.instructions.xF000.Instruction_0xF01E;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF029;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF033;
 import com.dkanada.chip.core.instructions.xF000.Instruction_0xF055;
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8001.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8001.java
new file mode 100644
index 0000000..ab0cc18
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8001.java
@@ -0,0 +1,14 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8001 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[opcode.getX()] = (char) (cpu.v[opcode.getX()] | cpu.v[opcode.getY()]);
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8002.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8002.java
new file mode 100644
index 0000000..604448d
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8002.java
@@ -0,0 +1,14 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8002 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[opcode.getX()] = (char) (cpu.v[opcode.getX()] & cpu.v[opcode.getY()]);
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8003.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8003.java
new file mode 100644
index 0000000..d85d8d0
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8003.java
@@ -0,0 +1,14 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8003 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[opcode.getX()] = (char) (cpu.v[opcode.getX()] ^ cpu.v[opcode.getY()]);
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8004.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8004.java
new file mode 100644
index 0000000..ef482d8
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8004.java
@@ -0,0 +1,22 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8004 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        int result = cpu.v[opcode.getX()] + cpu.v[opcode.getY()];
+        // set v[f] = 1 if carry
+        if (result > 255) {
+            cpu.v[0xF] = 1;
+        } else {
+            cpu.v[0xF] = 0;
+        }
+        cpu.v[opcode.getX()] = (char) result;
+        cpu.v[opcode.getX()] &= 0xFF;
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8005.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8005.java
new file mode 100644
index 0000000..92d2b9b
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8005.java
@@ -0,0 +1,22 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8005 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        int result = cpu.v[opcode.getX()] - cpu.v[opcode.getY()];
+        // set v[f] = 0 if borrow
+        if (result < 0) {
+            cpu.v[0xF] = 0;
+        } else {
+            cpu.v[0xF] = 1;
+        }
+        cpu.v[opcode.getX()] = (char) result;
+        cpu.v[opcode.getX()] &= 0xFF;
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8006.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8006.java
new file mode 100644
index 0000000..b0cda6a
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8006.java
@@ -0,0 +1,16 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8006 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[0xF] = (char) (cpu.v[opcode.getY()] & 0x000F);
+        cpu.v[opcode.getY()] >>= 1;
+        cpu.v[opcode.getX()] = cpu.v[opcode.getY()];
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8007.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8007.java
new file mode 100644
index 0000000..bcfc54f
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8007.java
@@ -0,0 +1,22 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8007 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        int result = cpu.v[opcode.getY()] - cpu.v[opcode.getX()];
+        // set v[f] = 0 if borrow
+        if (result < 0) {
+            cpu.v[0xF] = 0;
+        } else {
+            cpu.v[0xF] = 1;
+        }
+        cpu.v[opcode.getX()] = (char) result;
+        cpu.v[opcode.getX()] &= 0xFF;
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x800E.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x800E.java
new file mode 100644
index 0000000..211edef
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x800E.java
@@ -0,0 +1,16 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x800E implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[0xF] = (char) (cpu.v[opcode.getY()] >> 7);
+        cpu.v[opcode.getY()] <<= 1;
+        cpu.v[opcode.getX()] = cpu.v[opcode.getY()];
+        cpu.pc += 2;
+    }
+}
diff --git a/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8FF0.java b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8FF0.java
new file mode 100644
index 0000000..7812a49
--- /dev/null
+++ b/app/src/main/java/com/dkanada/chip/core/instructions/x8000/Instruction_0x8FF0.java
@@ -0,0 +1,14 @@
+package com.dkanada.chip.core.instructions.x8000;
+
+import com.dkanada.chip.core.CPU;
+import com.dkanada.chip.core.Core;
+import com.dkanada.chip.core.OPCode;
+import com.dkanada.chip.core.instructions.Instruction;
+
+public class Instruction_0x8FF0 implements Instruction {
+    @Override
+    public void execute(Core core, CPU cpu, OPCode opcode) {
+        cpu.v[opcode.getX()] = cpu.v[opcode.getY()];
+        cpu.pc += 2;
+    }
+}
