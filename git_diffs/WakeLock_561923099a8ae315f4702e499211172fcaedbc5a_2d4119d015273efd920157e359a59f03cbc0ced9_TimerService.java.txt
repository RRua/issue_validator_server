diff --git a/app/src/main/java/com/apps/adrcotfas/goodtime/TimerService.java b/app/src/main/java/com/apps/adrcotfas/goodtime/TimerService.java
index 328bcf6e..9450df62 100644
--- a/app/src/main/java/com/apps/adrcotfas/goodtime/TimerService.java
+++ b/app/src/main/java/com/apps/adrcotfas/goodtime/TimerService.java
@@ -9,15 +9,11 @@ import android.media.AudioManager;
 import android.net.wifi.WifiManager;
 import android.os.Binder;
 import android.os.IBinder;
-import android.os.PowerManager;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
 
 import java.util.Timer;
 
-import static android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP;
-import static android.os.PowerManager.ON_AFTER_RELEASE;
-import static android.os.PowerManager.PARTIAL_WAKE_LOCK;
 import static com.apps.adrcotfas.goodtime.TimerActivity.NOTIFICATION_TAG;
 import static com.apps.adrcotfas.goodtime.Notifications.createCompletionNotification;
 import static com.apps.adrcotfas.goodtime.Notifications.createForegroundNotification;
@@ -46,7 +42,6 @@ public class TimerService extends Service {
     private boolean mIsOnForeground;
     private Preferences mPref;
     private SessionType mCurrentSession;
-    private PowerManager.WakeLock mWakeLock;
 
     @Override
     public void onCreate() {
@@ -71,15 +66,12 @@ public class TimerService extends Service {
     @Override
     public void onDestroy() {
         super.onDestroy();
-        releaseWakelock();
     }
 
     public void startSession(long delay, SessionType sessionType) {
         mRemainingTime = calculateSessionDurationFor(sessionType);
         Log.i(TAG, "Starting new timer for " + sessionType + ", duration " + mRemainingTime);
 
-        acquirePartialWakelock();
-
         saveCurrentStateOfSound();
         saveCurrentStateOfWifi();
 
@@ -103,15 +95,6 @@ public class TimerService extends Service {
         }
     }
 
-    private void acquirePartialWakelock() {
-        mWakeLock = ((PowerManager) getSystemService(POWER_SERVICE)).newWakeLock(
-                PARTIAL_WAKE_LOCK | ON_AFTER_RELEASE | ACQUIRE_CAUSES_WAKEUP,
-                "starting partial wake lock"
-        );
-        mWakeLock.acquire();
-    }
-
-
     private void saveCurrentStateOfSound() {
         AudioManager aManager = (AudioManager) getSystemService(AUDIO_SERVICE);
         mPreviousRingerMode = aManager.getRingerMode();
@@ -131,7 +114,6 @@ public class TimerService extends Service {
 
         sendToBackground();
 
-        releaseWakelock();
         removeTimer();
 
         restoreSoundIfPreferred();
@@ -143,7 +125,6 @@ public class TimerService extends Service {
     private void onCountdownFinished() {
         Log.d(TAG, "Countdown finished");
 
-        releaseWakelock();
         removeTimer();
 
         restoreSoundIfPreferred();
@@ -155,17 +136,6 @@ public class TimerService extends Service {
         sendToBackground();
     }
 
-
-    private void releaseWakelock() {
-        if (mWakeLock != null) {
-            try {
-                mWakeLock.release();
-            } catch (Throwable th) {
-                // ignoring this exception, probably wakeLock was already released
-            }
-        }
-    }
-
     private void restoreSoundIfPreferred() {
         if (mPref.getDisableSoundAndVibration()) {
             Log.d(TAG, "Restoring sound mode");
@@ -198,7 +168,6 @@ public class TimerService extends Service {
     public void pauseTimer() {
         mTimerState = PAUSED;
         removeTimer();
-        releaseWakelock();
     }
 
     public void removeTimer() {
