diff --git a/src/com/boztalay/puppyframe/configuration/albums/AlbumsActivity.java b/src/com/boztalay/puppyframe/configuration/albums/AlbumsActivity.java
index 2f182db..b078435 100644
--- a/src/com/boztalay/puppyframe/configuration/albums/AlbumsActivity.java
+++ b/src/com/boztalay/puppyframe/configuration/albums/AlbumsActivity.java
@@ -19,6 +19,7 @@ import com.boztalay.puppyframe.configuration.editalbum.EditAlbumActivity;
 import com.boztalay.puppyframe.persistence.Album;
 import com.boztalay.puppyframe.persistence.PuppyFramePersistenceManager;
 import com.boztalay.puppyframe.widget.PuppyFrameWidgetProvider;
+import com.boztalay.puppyframe.widget.WidgetUpdater;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
@@ -41,13 +42,34 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_albums);
 
+        Log.d("PuppyFrame", "AlbumsActivity: onCreate called");
+
 		persistenceManager = new PuppyFramePersistenceManager(this);
         appWidgetId = getAppWidgetId();
 
+        Log.d("PuppyFrame", "AlbumsActivity: Showing preferences for AppWidgetId: " + appWidgetId);
+
         initializeUniversalImageLoader();
         setUpViewsAndTitle();
         prepareResult();
 	}
+
+    private void initializeUniversalImageLoader() {
+        Log.d("PuppyFrame", "AlbumsActivity: Initializing the universal image loader");
+
+        DisplayImageOptions displayOptions = new DisplayImageOptions.Builder()
+                .cacheInMemory()
+                .displayer(new FadeInBitmapDisplayer(FADE_DURATION_MILLIS))
+                .showImageForEmptyUri(R.drawable.missing_picture_default)
+                .showImageOnFail(R.drawable.missing_picture_default)
+                .build();
+
+        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
+                .defaultDisplayImageOptions(displayOptions)
+                .build();
+
+        ImageLoader.getInstance().init(config);
+    }
 	
 	private void setUpViewsAndTitle() {
         ActionBar actionBar = getActionBar();
@@ -58,8 +80,10 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
         View currentAlbumView = findViewById(R.id.current_album);
 
 		if(persistenceManager.getAlbumIds().size() == 0) {
+            Log.d("PuppyFrame", "AlbumsActivity: No albums found, setting the screen up for no albums");
 			setUpViewsForNoAlbums(currentAlbumView);
 		} else {
+            Log.d("PuppyFrame", "AlbumsActivity: Found albums, setting up the screen to display them");
 			setUpViewsForAlbums(currentAlbumView);
 		}
 
@@ -83,7 +107,7 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 		currentAlbumThumbnail.setImageResource(R.drawable.missing_picture_default);
 		
 		TextView currentAlbumTitle = (TextView)currentAlbumView.findViewById(R.id.album_title);
-		currentAlbumTitle.setText("Couldn't find any albums!");
+		currentAlbumTitle.setText("Make an album!");
 	}
 	
 	private void startEditAlbumActivity() {
@@ -91,14 +115,20 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
         editAlbumIntent.putExtra(EditAlbumActivity.APP_WIDGET_ID_KEY, appWidgetId);
 
 		if(currentAlbum != null) {
+            Log.d("PuppyFrame", "AlbumsActivity: Starting the Edit activity to edit an album");
+
 			editAlbumIntent.putExtra(EditAlbumActivity.ALBUM_ID_KEY, currentAlbum.getId());
             startActivityForResult(editAlbumIntent, EDIT_ALBUM_ACTIVITY_EDIT_REQUEST_CODE);
 		} else {
+            Log.d("PuppyFrame", "AlbumsActivity: Starting the Edit activity to create an album");
+
             startActivityForResult(editAlbumIntent, EDIT_ALBUM_ACTIVITY_ADD_REQUEST_CODE);
         }
 	}
 
     private void startEditAlbumActivityForNewAlbum() {
+        Log.d("PuppyFrame", "AlbumsActivity: Starting the Edit activity to create an album");
+
         Intent editAlbumIntent = new Intent(AlbumsActivity.this, EditAlbumActivity.class);
         startActivityForResult(editAlbumIntent, EDIT_ALBUM_ACTIVITY_ADD_REQUEST_CODE);
     }
@@ -110,7 +140,16 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 	
 	private void setUpViewsForAlbums(View currentAlbumView) {
 		String currentAlbumId = persistenceManager.getCurrentAlbumIdForAppWidgetId(appWidgetId);
-        currentAlbum = persistenceManager.getAlbumWithId(currentAlbumId);
+        if(currentAlbumId == null) {
+            Log.d("PuppyFrame", "AlbumsActivity: Couldn't find an album associated with this AppWidgetId, setting it to the default album");
+
+            currentAlbum = persistenceManager.getDefaultAlbum();
+            persistenceManager.setCurrentAlbumForAppWidgetId(currentAlbum, appWidgetId);
+        } else {
+            Log.d("PuppyFrame", "AlbumsActivity: Found an album associated with this AppWidgetId: " + currentAlbumId);
+
+            currentAlbum = persistenceManager.getAlbumWithId(currentAlbumId);
+        }
 
         ImageView currentAlbumThumbnail = (ImageView)currentAlbumView.findViewById(R.id.album_thumbnail);
         ImageLoader.getInstance().displayImage(currentAlbum.getThumbnailPath(), currentAlbumThumbnail);
@@ -146,21 +185,6 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 		return configurationResult;
 	}
 	
-	private void initializeUniversalImageLoader() {
-		DisplayImageOptions displayOptions = new DisplayImageOptions.Builder()
-																	.cacheInMemory()
-																	.displayer(new FadeInBitmapDisplayer(FADE_DURATION_MILLIS))
-                                                                    .showImageForEmptyUri(R.drawable.missing_picture_default)
-																	.showImageOnFail(R.drawable.missing_picture_default)
-																	.build();
-		
-		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
-																	  .defaultDisplayImageOptions(displayOptions)
-																	  .build();
-		
-		ImageLoader.getInstance().init(config);
-	}
-	
 	@Override
 	public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.albums_menu, menu);
@@ -196,8 +220,10 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         if(resultCode == RESULT_OK) {
             if(requestCode == EDIT_ALBUM_ACTIVITY_ADD_REQUEST_CODE) {
+                Log.d("PuppyFrame", "AlbumsActivity: Just came back from creating an album, refreshing everything");
                 refreshAndUpdateEverything();
             } else if(requestCode == EDIT_ALBUM_ACTIVITY_EDIT_REQUEST_CODE) {
+                Log.d("PuppyFrame", "AlbumsActivity: Just came back from editing an album, refreshing everything");
                 setUpViewsForAlbums();
             }
         }
@@ -205,42 +231,10 @@ public class AlbumsActivity extends Activity implements AdapterView.OnItemClickL
 
     @Override
     public void onStop() {
-        Log.d("PuppyFrame", "AlbumsActivity: Stopping, updating all widgets with their first images");
+        Log.d("PuppyFrame", "AlbumsActivity: AlbumsActivity is stopping, updating all widgets with their first images");
 
-        updateAllWidgets();
+        WidgetUpdater.updateAllWidgets(this);
 
         super.onStop();
     }
-
-    private void updateAllWidgets() {
-        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this);
-        int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(this, PuppyFrameWidgetProvider.class));
-
-        for(int i = 0; i < appWidgetIds.length; i++) {
-            int appWidgetId = appWidgetIds[i];
-            Log.d("PuppyFrame", "Updating widget with id: " + appWidgetId);
-
-            String currentAlbumId = persistenceManager.getCurrentAlbumIdForAppWidgetId(appWidgetId);
-            Log.d("PuppyFrame", "Widget has album id: " + currentAlbumId);
-
-            if(currentAlbumId != null) {
-                RemoteViews remoteViews = new RemoteViews(getPackageName(), R.layout.puppyframe_widget);
-                Intent configIntent = new Intent(this, AlbumsActivity.class);
-
-                Uri.withAppendedPath(Uri.parse("pw" + i + "://widget/id/"), String.valueOf(appWidgetId));
-                configIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
-
-                PendingIntent configPendingIntent = PendingIntent.getActivity(this, 0, configIntent, 0);
-                remoteViews.setOnClickPendingIntent(R.id.picture_widget_parent, configPendingIntent);
-
-                Log.d("PuppyFrame", "Album id wasn't null");
-                Album currentAlbum = persistenceManager.getAlbumWithId(currentAlbumId);
-                Uri imageUri = Uri.parse(currentAlbum.getImagePaths().get(0));
-                Log.d("PuppyFrame", "Widget imageUri: " + imageUri.toString());
-                remoteViews.setImageViewUri(R.id.the_picture, imageUri);
-
-                appWidgetManager.updateAppWidget(appWidgetId, remoteViews);
-            }
-        }
-    }
 }
diff --git a/src/com/boztalay/puppyframe/configuration/editalbum/EditAlbumActivity.java b/src/com/boztalay/puppyframe/configuration/editalbum/EditAlbumActivity.java
index 8cbc4f7..7b4f99f 100644
--- a/src/com/boztalay/puppyframe/configuration/editalbum/EditAlbumActivity.java
+++ b/src/com/boztalay/puppyframe/configuration/editalbum/EditAlbumActivity.java
@@ -7,6 +7,7 @@ import android.app.ProgressDialog;
 import android.content.DialogInterface;
 import android.os.Bundle;
 import android.text.Editable;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -19,7 +20,7 @@ import com.boztalay.puppyframe.configuration.views.SelectableImageView;
 import com.boztalay.puppyframe.persistence.Album;
 import com.boztalay.puppyframe.persistence.PuppyFramePersistenceManager;
 
-public class EditAlbumActivity extends Activity implements AdapterView.OnItemClickListener, ImageResizer.ImageResizingListener {
+public class EditAlbumActivity extends Activity implements AdapterView.OnItemClickListener, ImageCacher.ImageResizingListener {
 	public static final String ALBUM_ID_KEY = "albumId";
     public static final String APP_WIDGET_ID_KEY = "appWidgetId";
 
@@ -34,17 +35,19 @@ public class EditAlbumActivity extends Activity implements AdapterView.OnItemCli
 	
 	private StoredImagesAdapter storedImagesAdapter;
 
-    private ImageResizer imageResizer;
+    private ImageCacher imageCacher;
 
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.activity_edit_album);
 
+        Log.d("PuppyFrame", "EditActivity: onCreate called");
+
 		determineEditModeAndLoadAlbum();
 		setUpViewsAndTitle();
 
-        imageResizer = new ImageResizer(this);
+        imageCacher = new ImageCacher(this);
 	}
 
 	private void determineEditModeAndLoadAlbum() {
@@ -52,14 +55,19 @@ public class EditAlbumActivity extends Activity implements AdapterView.OnItemCli
 
 		String editingAlbumId = getIntent().getStringExtra(ALBUM_ID_KEY);
 		if(editingAlbumId != null) {
+            Log.d("PuppyFrame", "EditActivity: Started in edit mode");
+
 			editingMode = EditMode.EDITING;
 			album = persistenceManager.getAlbumWithId(editingAlbumId);
 		} else {
+            Log.d("PuppyFrame", "EditActivity: Started in add mode");
+
 			editingMode = EditMode.ADDING;
 			album = persistenceManager.createNewAlbum("Untitled Album");
 		}
 
         appWidgetId = getIntent().getIntExtra(APP_WIDGET_ID_KEY, -1);
+        Log.d("PuppyFrame", "EditActivity: AppWidgetId: " + appWidgetId);
 	}
 
 	private void setUpViewsAndTitle() {
@@ -106,9 +114,11 @@ public class EditAlbumActivity extends Activity implements AdapterView.OnItemCli
     public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
         String pathOfImageClicked = (String) parent.getAdapter().getItem(position);
         if(album.getImagePaths().contains(pathOfImageClicked) || album.isImageCached(pathOfImageClicked)) {
+            Log.d("PuppyFrame", "EditActivity: Image in album clicked, removing it");
             album.removeImagePath(pathOfImageClicked);
             ((SelectableImageView)view).setChecked(false);
         } else {
+            Log.d("PuppyFrame", "EditActivity: Image not in album clicked, adding it");
             album.addImagePath(pathOfImageClicked);
             ((SelectableImageView)view).setChecked(true);
         }
@@ -154,10 +164,10 @@ public class EditAlbumActivity extends Activity implements AdapterView.OnItemCli
 	}
 
     private void saveAlbumAndExit() {
-        imageResizer.resizeAndCacheLargeImagesInAlbum(album, this);
+        imageCacher.resizeAndCacheLargeImagesInAlbum(album, this);
 
         ProgressDialog loadingDialog = new ProgressDialog(this);
-        loadingDialog.setMessage("Caching images...");
+        loadingDialog.setMessage("Resizing large images...");
         loadingDialog.setCancelable(false);
         loadingDialog.show();
     }
diff --git a/src/com/boztalay/puppyframe/configuration/editalbum/ImageResizer.java b/src/com/boztalay/puppyframe/configuration/editalbum/ImageCacher.java
similarity index 98%
rename from src/com/boztalay/puppyframe/configuration/editalbum/ImageResizer.java
rename to src/com/boztalay/puppyframe/configuration/editalbum/ImageCacher.java
index 77b3306..b295af5 100644
--- a/src/com/boztalay/puppyframe/configuration/editalbum/ImageResizer.java
+++ b/src/com/boztalay/puppyframe/configuration/editalbum/ImageCacher.java
@@ -17,7 +17,7 @@ import java.io.FileOutputStream;
 import java.util.HashMap;
 import java.util.Map;
 
-public class ImageResizer {
+public class ImageCacher {
     private static final float MAX_IMAGE_SIZE_SCALE_FACTOR = 0.75f;
     public static final String FILE_PROTOCOL = "file://";
 
@@ -27,7 +27,7 @@ public class ImageResizer {
     private Album currentAlbum;
     private ImageResizingListener currentListener;
 
-    public ImageResizer(Context context) {
+    public ImageCacher(Context context) {
         this.context = context;
 
         determineMaxImageDimensions();
diff --git a/src/com/boztalay/puppyframe/persistence/PuppyFramePersistenceManager.java b/src/com/boztalay/puppyframe/persistence/PuppyFramePersistenceManager.java
index f8cc8ba..f5cb89d 100644
--- a/src/com/boztalay/puppyframe/persistence/PuppyFramePersistenceManager.java
+++ b/src/com/boztalay/puppyframe/persistence/PuppyFramePersistenceManager.java
@@ -69,6 +69,13 @@ public class PuppyFramePersistenceManager implements SharedPreferences.OnSharedP
 		return album;
 	}
 
+    public Album getDefaultAlbum() {
+        loadAlbumIdsFromSharedPrefsIfNeeded();
+
+        String defaultAlbumId = (String)albumIds.toArray()[0];
+        return loadAlbumWithIdFromSharedPrefsAndUpdateWorkingCopy(defaultAlbumId);
+    }
+
 	public void saveAlbum(Album album) {
 		loadAlbumIdsFromSharedPrefsIfNeeded();
 
diff --git a/src/com/boztalay/puppyframe/widget/PuppyFrameWidgetProvider.java b/src/com/boztalay/puppyframe/widget/PuppyFrameWidgetProvider.java
index bbe7387..24b7a60 100644
--- a/src/com/boztalay/puppyframe/widget/PuppyFrameWidgetProvider.java
+++ b/src/com/boztalay/puppyframe/widget/PuppyFrameWidgetProvider.java
@@ -25,41 +25,18 @@ public class PuppyFrameWidgetProvider extends AppWidgetProvider {
         context.startService(serviceIntent);
     }
 
+    @Override
+    public void onDisabled(Context context) {
+        Log.d("PuppyFrame", "onDisabled called, stopping ScreenOnService");
+
+        Intent serviceIntent = new Intent(context, ScreenOnService.class);
+        context.stopService(serviceIntent);
+    }
+
 	@Override
 	public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
 		super.onUpdate(context, appWidgetManager, appWidgetIds);
 
         Log.d("PuppyFrame", "onUpdate called");
-
-//        updateAllWidgets(context, appWidgetManager, appWidgetIds);
 	}
-
-    private void updateAllWidgets(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
-        PuppyFramePersistenceManager persistenceManager = new PuppyFramePersistenceManager(context);
-
-        for(int i = 0; i < appWidgetIds.length; i++) {
-            int appWidgetId = appWidgetIds[i];
-            Log.d("PuppyFrame", "Updating widget with id: " + appWidgetId);
-
-            RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.puppyframe_widget);
-            Intent configIntent = new Intent(context, AlbumsActivity.class);
-
-            Uri.withAppendedPath(Uri.parse("pw" + i + "://widget/id/"), String.valueOf(appWidgetId));
-            configIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
-
-            PendingIntent configPendingIntent = PendingIntent.getActivity(context, 0, configIntent, 0);
-            remoteViews.setOnClickPendingIntent(R.id.picture_widget_parent, configPendingIntent);
-
-            String currentAlbumId = persistenceManager.getCurrentAlbumIdForAppWidgetId(appWidgetId);
-            Log.d("PuppyFrame", "Widget has album id: " + currentAlbumId);
-            if(currentAlbumId != null) {
-                Log.d("PuppyFrame", "Album id wasn't null");
-                Uri imageUri = Uri.parse(persistenceManager.getAlbumWithId(currentAlbumId).getImagePaths().get(0));
-                Log.d("PuppyFrame", "Widget imageUri: " + imageUri.toString());
-                remoteViews.setImageViewUri(R.id.the_picture, imageUri);
-            }
-
-            appWidgetManager.updateAppWidget(appWidgetId, remoteViews);
-        }
-    }
 }
diff --git a/src/com/boztalay/puppyframe/widget/ScreenOnService.java b/src/com/boztalay/puppyframe/widget/ScreenOnService.java
index 5c14829..8532f87 100644
--- a/src/com/boztalay/puppyframe/widget/ScreenOnService.java
+++ b/src/com/boztalay/puppyframe/widget/ScreenOnService.java
@@ -41,44 +41,12 @@ public class ScreenOnService extends Service {
             public void onReceive(Context context, Intent intent) {
                 if(intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {
                     Log.d("PuppyFrame", "ScreenOnService: Screen on intent received, updating widgets");
-                    updateAllWidgets();
+                    WidgetUpdater.updateAllWidgets(context);
                 }
             }
         }, screenOnFilter);
     }
 
-    private void updateAllWidgets() {
-        int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(this, PuppyFrameWidgetProvider.class));
-        for(int i = 0; i < appWidgetIds.length; i++) {
-            int appWidgetId = appWidgetIds[i];
-            Log.d("PuppyFrame", "Updating widget with id: " + appWidgetId);
-
-            String currentAlbumId = persistenceManager.getCurrentAlbumIdForAppWidgetId(appWidgetId);
-            Log.d("PuppyFrame", "Widget has album id: " + currentAlbumId);
-
-            if(currentAlbumId != null) {
-                RemoteViews remoteViews = new RemoteViews(getPackageName(), R.layout.puppyframe_widget);
-                Intent configIntent = new Intent(this, AlbumsActivity.class);
-
-                Uri.withAppendedPath(Uri.parse("pw" + i + "://widget/id/"), String.valueOf(appWidgetId));
-                configIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
-
-                PendingIntent configPendingIntent = PendingIntent.getActivity(this, 0, configIntent, 0);
-                remoteViews.setOnClickPendingIntent(R.id.picture_widget_parent, configPendingIntent);
-
-                Log.d("PuppyFrame", "Album id wasn't null");
-                Album currentAlbum = persistenceManager.getAlbumWithId(currentAlbumId);
-                int randomIndex = rand.nextInt(currentAlbum.getImagePaths().size());
-                Log.d("PuppyFrame", "Getting image at index " + randomIndex);
-                Uri imageUri = Uri.parse(currentAlbum.getImagePaths().get(randomIndex));
-                Log.d("PuppyFrame", "Widget imageUri: " + imageUri.toString());
-                remoteViews.setImageViewUri(R.id.the_picture, imageUri);
-
-                appWidgetManager.updateAppWidget(appWidgetId, remoteViews);
-            }
-        }
-    }
-
     @Override
     public IBinder onBind(Intent intent) {
         return null;
diff --git a/src/com/boztalay/puppyframe/widget/WidgetUpdater.java b/src/com/boztalay/puppyframe/widget/WidgetUpdater.java
new file mode 100644
index 0000000..fd3ff6b
--- /dev/null
+++ b/src/com/boztalay/puppyframe/widget/WidgetUpdater.java
@@ -0,0 +1,60 @@
+package com.boztalay.puppyframe.widget;
+
+import android.app.PendingIntent;
+import android.appwidget.AppWidgetManager;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.util.Log;
+import android.widget.RemoteViews;
+import com.boztalay.puppyframe.R;
+import com.boztalay.puppyframe.configuration.albums.AlbumsActivity;
+import com.boztalay.puppyframe.persistence.Album;
+import com.boztalay.puppyframe.persistence.PuppyFramePersistenceManager;
+
+import java.util.Random;
+
+public class WidgetUpdater {
+
+    public static void updateAllWidgets(Context context) {
+        Random rand = new Random();
+
+        PuppyFramePersistenceManager persistenceManager = new PuppyFramePersistenceManager(context);
+        AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
+
+        int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context, PuppyFrameWidgetProvider.class));
+
+        for(int i = 0; i < appWidgetIds.length; i++) {
+            int appWidgetId = appWidgetIds[i];
+            Log.d("PuppyFrame", "WidgetUpdater: Updating widget with id: " + appWidgetId);
+
+            String currentAlbumId = persistenceManager.getCurrentAlbumIdForAppWidgetId(appWidgetId);
+            Log.d("PuppyFrame", "WidgetUpdater: Widget has album id: " + currentAlbumId);
+
+            if(currentAlbumId != null) {
+                Log.d("PuppyFrame", "WidgetUpdater: Album id wasn't null, choosing a new image and updating the widget");
+
+                Intent configIntent = new Intent(context, AlbumsActivity.class);
+                configIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
+                configIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                configIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
+                configIntent.setData(Uri.parse(configIntent.toUri(Intent.URI_INTENT_SCHEME)));
+
+                RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.puppyframe_widget);
+                PendingIntent configPendingIntent = PendingIntent.getActivity(context, 0, configIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                remoteViews.setOnClickPendingIntent(R.id.picture_widget_parent, configPendingIntent);
+
+                Album currentAlbum = persistenceManager.getAlbumWithId(currentAlbumId);
+                int randomIndex = rand.nextInt(currentAlbum.getImagePaths().size());
+                Log.d("PuppyFrame", "WidgetUpdater: Getting image at index " + randomIndex);
+
+                Uri imageUri = Uri.parse(currentAlbum.getImagePaths().get(randomIndex));
+                Log.d("PuppyFrame", "WidgetUpdater: Widget imageUri: " + imageUri.toString());
+                remoteViews.setImageViewUri(R.id.the_picture, imageUri);
+
+                appWidgetManager.updateAppWidget(appWidgetId, remoteViews);
+            }
+        }
+    }
+}
