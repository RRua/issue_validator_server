diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/FileUtil.java b/app/src/main/java/com/amaze/filemanager/filesystem/FileUtil.java
index 8cf6d180c..f166655c8 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/FileUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/FileUtil.java
@@ -45,6 +45,7 @@ import java.net.MalformedURLException;
 import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.regex.Pattern;
 
 import jcifs.smb.SmbException;
 import jcifs.smb.SmbFile;
@@ -58,6 +59,8 @@ public abstract class FileUtil {
 
     private static final String LOG = "AmazeFileUtils";
 
+    private static final Pattern FILENAME_REGEX = Pattern.compile("[\\\\\\/:\\*\\?\"<>\\|\\x01-\\x1F\\x7F]", Pattern.CASE_INSENSITIVE);
+
     /**
      * Determine the camera folder. There seems to be no Android API to work for real devices, so this is a best guess.
      *
@@ -1216,4 +1219,17 @@ public abstract class FileUtil {
 
     }
 
+
+    /**
+     * Validate given text is a valid filename.
+     *
+     * @param text
+     * @return true if given text is a valid filename
+     */
+    public static boolean isValidFilename(String text) {
+        //It's not easy to use regex to detect single/double dot while leaving valid values (filename.zip) behind...
+        //So we simply use equality to check them
+        return (!FILENAME_REGEX.matcher(text).find())
+                && !".".equals(text) && !"..".equals(text);
+    }
 }
diff --git a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
index 5fd13bdb2..2a15f2b29 100644
--- a/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
+++ b/app/src/main/java/com/amaze/filemanager/fragments/MainFragment.java
@@ -80,6 +80,7 @@ import com.amaze.filemanager.database.CryptHandler;
 import com.amaze.filemanager.database.models.EncryptedEntry;
 import com.amaze.filemanager.database.models.Tab;
 import com.amaze.filemanager.filesystem.CustomFileObserver;
+import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.MediaStoreHack;
@@ -1264,7 +1265,7 @@ public class MainFragment extends android.support.v4.app.Fragment implements Bot
                 getMainActivity().mainActivityHelper.rename(openMode, f.getPath(),
                         CURRENT_PATH + "/" + name1, getActivity(), ThemedActivity.rootMode);
             }, (text)-> {
-                    boolean isValidFilename = Utils.isValidFilename(text);
+                    boolean isValidFilename = FileUtil.isValidFilename(text);
 
                     if (!isValidFilename) {
                         return new WarnableTextInputValidator.ReturnState(
diff --git a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
index 39393782a..6bb071f81 100644
--- a/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
+++ b/app/src/main/java/com/amaze/filemanager/ui/dialogs/GeneralDialogCreation.java
@@ -41,6 +41,7 @@ import com.amaze.filemanager.asynchronous.asynctasks.CountItemsOrAndSizeTask;
 import com.amaze.filemanager.asynchronous.asynctasks.GenerateHashesTask;
 import com.amaze.filemanager.asynchronous.asynctasks.LoadFolderSpaceDataTask;
 import com.amaze.filemanager.exceptions.ShellNotRunningException;
+import com.amaze.filemanager.filesystem.FileUtil;
 import com.amaze.filemanager.filesystem.HybridFile;
 import com.amaze.filemanager.filesystem.HybridFileParcelable;
 import com.amaze.filemanager.filesystem.RootHelper;
@@ -865,7 +866,7 @@ public class GeneralDialogCreation {
         new WarnableTextInputValidator(a.getContext(), etFilename, tilFilename,
                         materialDialog.getActionButton(DialogAction.POSITIVE),
                         (text) -> {
-                    boolean isValidFilename = Utils.isValidFilename(text);
+                    boolean isValidFilename = FileUtil.isValidFilename(text);
 
                     if (isValidFilename && text.length() > 0 && !text.toLowerCase().endsWith(".zip")) {
                         return new WarnableTextInputValidator.ReturnState(
diff --git a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
index bb1dd3a9f..843787408 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/MainActivityHelper.java
@@ -19,7 +19,6 @@ import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.afollestad.materialdialogs.DialogAction;
 import com.afollestad.materialdialogs.MaterialDialog;
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
@@ -114,12 +113,12 @@ public class MainActivityHelper {
      * @param ma       {@link MainFragment} current fragment
      */
     void mkdir(final OpenMode openMode, final String path, final MainFragment ma) {
-        mk(R.string.newfolder, (dialog, which) -> {
+        mk(R.string.newfolder, "", (dialog, which) -> {
             EditText textfield = dialog.getCustomView().findViewById(R.id.singleedittext_input);
             mkDir(new HybridFile(openMode, path + "/" + textfield.getText().toString()), ma);
             dialog.dismiss();
         }, (text) -> {
-            boolean isValidFilename = Utils.isValidFilename(text);
+            boolean isValidFilename = FileUtil.isValidFilename(text);
 
             if (!isValidFilename) {
                 return new WarnableTextInputValidator.ReturnState(
@@ -141,12 +140,12 @@ public class MainActivityHelper {
      * @param ma       {@link MainFragment} current fragment
      */
     void mkfile(final OpenMode openMode, final String path, final MainFragment ma) {
-        mk(R.string.newfile, (dialog, which) -> {
+        mk(R.string.newfile, ".txt", (dialog, which) -> {
             EditText textfield = dialog.getCustomView().findViewById(R.id.singleedittext_input);
             mkFile(new HybridFile(openMode, path + "/" + textfield.getText().toString()), ma);
             dialog.dismiss();
         }, (text) -> {
-            boolean isValidFilename = Utils.isValidFilename(text);
+            boolean isValidFilename = FileUtil.isValidFilename(text);
 
             if (isValidFilename && text.length() > 0 && !text.toLowerCase().endsWith(".txt")) {
                 return new WarnableTextInputValidator.ReturnState(
@@ -165,11 +164,11 @@ public class MainActivityHelper {
         });
     }
 
-    private void mk(@StringRes int newText, final MaterialDialog.SingleButtonCallback onPositiveAction,
+    private void mk(@StringRes int newText, String prefill, final MaterialDialog.SingleButtonCallback onPositiveAction,
                     final WarnableTextInputValidator.OnTextValidate validator) {
         GeneralDialogCreation.showNameDialog(mainActivity,
             mainActivity.getResources().getString(R.string.entername),
-            "",
+            prefill,
             mainActivity.getResources().getString(newText),
             mainActivity.getResources().getString(R.string.create),
             mainActivity.getResources().getString(R.string.cancel),
diff --git a/app/src/main/java/com/amaze/filemanager/utils/Utils.java b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
index 4e8013026..157727c76 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/Utils.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/Utils.java
@@ -21,7 +21,6 @@ import com.amaze.filemanager.filesystem.HybridFileParcelable;
 
 import java.io.File;
 import java.text.SimpleDateFormat;
-import java.util.regex.Pattern;
 
 /**
  * Contains useful functions and methods (NOTHING HERE DEALS WITH FILES)
@@ -39,8 +38,6 @@ public class Utils {
     private static final String INPUT_INTENT_BLACKLIST_PIPE = "\\|";
     private static final String INPUT_INTENT_BLACKLIST_AMP = "&&";
     private static final String INPUT_INTENT_BLACKLIST_DOTS = "\\.\\.\\.";
-    private static final Pattern FILENAME_REGEX = Pattern.compile("[\\\\\\/:\\*\\?\"<>\\|\\x01-\\x1F\\x7F]", Pattern.CASE_INSENSITIVE);
-
 
     //methods for fastscroller
     public static float clamp(float min, float max, float value) {
@@ -232,17 +229,4 @@ public class Utils {
         }
         return -1;
     }
-
-    /**
-     * Validate given text is a valid filename.
-     *
-     * @param text
-     * @return true if given text is a valid filename
-     */
-    public static boolean isValidFilename(String text) {
-        //It's not easy to use regex to detect single/double dot while leaving valid values (filename.zip) behind...
-        //So we simply use equality to check them
-        return (!FILENAME_REGEX.matcher(text).find())
-                && !".".equals(text) && !"..".equals(text);
-    }
 }
