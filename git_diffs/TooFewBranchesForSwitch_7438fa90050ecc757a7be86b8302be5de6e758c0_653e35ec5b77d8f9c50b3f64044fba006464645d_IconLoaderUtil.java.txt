diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
index 12ab0b945..98279ede8 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/AbstractProgressiveService.java
@@ -7,7 +7,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.support.v4.app.NotificationCompat;
 import android.text.format.Formatter;
-import android.util.Log;
 
 import com.amaze.filemanager.R;
 import com.amaze.filemanager.activities.MainActivity;
@@ -124,7 +123,7 @@ public abstract class AbstractProgressiveService extends Service implements Serv
                 isNotificationTitleSet = true;
             }
 
-            if (ServiceWatcherUtil.STATE != ServiceWatcherUtil.ServiceWatcherInteractionInterface.STATE_HALTED) {
+            if (ServiceWatcherUtil.state != ServiceWatcherUtil.ServiceWatcherInteractionInterface.STATE_HALTED) {
 
                 getNotificationBuilder().setContentText(fileName + " " + Formatter.formatFileSize(context, writtenSize) + "/" +
                         Formatter.formatFileSize(context, totalSize));
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
index d594e4ba8..002ff1e64 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/CopyService.java
@@ -403,7 +403,7 @@ public class CopyService extends AbstractProgressiveService {
                 try {
                     if (!move) RootUtils.copy(sourceFile.getPath(), targetFile.getPath());
                     else if (move) RootUtils.move(sourceFile.getPath(), targetFile.getPath());
-                    ServiceWatcherUtil.POSITION += sourceFile.getSize();
+                    ServiceWatcherUtil.position += sourceFile.getSize();
                 } catch (ShellNotRunningException e) {
                     failedFOps.add(sourceFile);
                     e.printStackTrace();
diff --git a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
index 25b23418a..64a2e88d5 100644
--- a/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
+++ b/app/src/main/java/com/amaze/filemanager/asynchronous/services/ZipService.java
@@ -251,7 +251,7 @@ public class ZipService extends AbstractProgressiveService {
                 zos.putNextEntry(new ZipEntry(path + "/" + file.getName()));
                 while ((len = in.read(buf)) > 0) {
                     zos.write(buf, 0, len);
-                    ServiceWatcherUtil.POSITION += len;
+                    ServiceWatcherUtil.position += len;
                 }
                 in.close();
                 return;
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/GzipExtractor.java b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/GzipExtractor.java
index 872907da6..4374fee20 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/GzipExtractor.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/GzipExtractor.java
@@ -77,7 +77,7 @@ public class GzipExtractor extends Extractor {
             byte buf[] = new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
             while ((len = inputStream.read(buf)) != -1) {
                 outputStream.write(buf, 0, len);
-                ServiceWatcherUtil.POSITION += len;
+                ServiceWatcherUtil.position += len;
             }
         } finally {
             outputStream.close();
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/RarExtractor.java b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/RarExtractor.java
index 74b73c03e..de0306c05 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/RarExtractor.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/RarExtractor.java
@@ -77,7 +77,7 @@ public class RarExtractor extends Extractor {
             while ((len = inputStream.read(buf)) != -1) {
 
                 outputStream.write(buf, 0, len);
-                ServiceWatcherUtil.POSITION += len;
+                ServiceWatcherUtil.position += len;
             }
         } finally {
             outputStream.close();
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/TarExtractor.java b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/TarExtractor.java
index 6cd18f268..5cb017b85 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/TarExtractor.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/TarExtractor.java
@@ -75,7 +75,7 @@ public class TarExtractor extends Extractor {
             byte buf[] = new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
             while ((len = inputStream.read(buf)) != -1) {
                 outputStream.write(buf, 0, len);
-                ServiceWatcherUtil.POSITION += len;
+                ServiceWatcherUtil.position += len;
             }
         } finally {
             outputStream.close();
diff --git a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/ZipExtractor.java b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/ZipExtractor.java
index 4abbb6ff6..ce0d1890b 100644
--- a/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/ZipExtractor.java
+++ b/app/src/main/java/com/amaze/filemanager/filesystem/compressed/extractcontents/helpers/ZipExtractor.java
@@ -80,7 +80,7 @@ public class ZipExtractor extends Extractor {
             byte buf[] = new byte[GenericCopyUtil.DEFAULT_BUFFER_SIZE];
             while ((len = inputStream.read(buf)) != -1) {
                 outputStream.write(buf, 0, len);
-                ServiceWatcherUtil.POSITION += len;
+                ServiceWatcherUtil.position += len;
             }
         } finally {
             outputStream.close();
diff --git a/app/src/main/java/com/amaze/filemanager/utils/ServiceWatcherUtil.java b/app/src/main/java/com/amaze/filemanager/utils/ServiceWatcherUtil.java
index 539aeb4ff..1804d786a 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/ServiceWatcherUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/ServiceWatcherUtil.java
@@ -9,7 +9,6 @@ package com.amaze.filemanager.utils;
  */
 
 import android.app.NotificationManager;
-import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Handler;
@@ -19,15 +18,20 @@ import android.text.format.Formatter;
 import android.util.Log;
 
 import com.amaze.filemanager.R;
-import com.amaze.filemanager.asynchronous.services.DecryptService;
-import com.amaze.filemanager.asynchronous.services.EncryptService;
 import com.amaze.filemanager.ui.notifications.NotificationConstants;
 
-import java.util.ArrayList;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
+import static com.amaze.filemanager.utils.ServiceWatcherUtil.ServiceWatcherInteractionInterface.*;
+import static com.amaze.filemanager.utils.ServiceWatcherUtil.ServiceWatcherInteractionInterface.STATE_UNSET;
+
 public class ServiceWatcherUtil {
 
+    public static int state = STATE_UNSET;
+
+    // position of byte in total byte size to be copied
+    public static volatile long position = 0L;
+
     private Handler handler;
     private static HandlerThread handlerThread;
     private ProgressHandler progressHandler;
@@ -38,14 +42,9 @@ public class ServiceWatcherUtil {
     private static NotificationManager notificationManager;
     private static NotificationCompat.Builder builder;
 
-    public static int STATE = -1;
-
     private static ConcurrentLinkedQueue<Intent> pendingIntents = new ConcurrentLinkedQueue<>();
 
-    // position of byte in total byte size to be copied
-    public static volatile long POSITION = 0L;
-
-    private static int HALT_COUNTER = -1;
+    private static int haltCounter = -1;
 
     /**
      *
@@ -53,8 +52,8 @@ public class ServiceWatcherUtil {
      */
     public ServiceWatcherUtil(ProgressHandler progressHandler) {
         this.progressHandler = progressHandler;
-        POSITION = 0L;
-        HALT_COUNTER = -1;
+        position = 0L;
+        haltCounter = -1;
 
         handlerThread = new HandlerThread("service_progress_watcher");
         handlerThread.start();
@@ -73,9 +72,9 @@ public class ServiceWatcherUtil {
                 // we don't have a file name yet, wait for service to set
                 if (progressHandler.getFileName()==null) handler.postDelayed(this, 1000);
 
-                if (POSITION == progressHandler.getWrittenSize() &&
-                        (STATE != ServiceWatcherInteractionInterface.STATE_HALTED
-                                && ++HALT_COUNTER>5)) {
+                if (position == progressHandler.getWrittenSize() &&
+                        (state != STATE_HALTED
+                                && ++haltCounter >5)) {
 
                     // new position is same as the last second position, and halt counter is past threshold
 
@@ -96,29 +95,29 @@ public class ServiceWatcherUtil {
                         return;
                     }
 
-                    HALT_COUNTER = 0;
-                    STATE = ServiceWatcherInteractionInterface.STATE_HALTED;
+                    haltCounter = 0;
+                    state = STATE_HALTED;
                     interactionInterface.progressHalted();
-                } else if (POSITION != progressHandler.getWrittenSize()) {
+                } else if (position != progressHandler.getWrittenSize()) {
 
-                    if (STATE == ServiceWatcherInteractionInterface.STATE_HALTED) {
+                    if (state == STATE_HALTED) {
 
-                        STATE = ServiceWatcherInteractionInterface.STATE_RESUMED;
-                        HALT_COUNTER = 0;
+                        state = STATE_RESUMED;
+                        haltCounter = 0;
                         interactionInterface.progressResumed();
                     } else {
 
                         // reset the halt counter everytime there is a progress
                         // so that it increments only when
                         // progress was halted for consecutive time period
-                        STATE = -1;
-                        HALT_COUNTER = 0;
+                        state = STATE_UNSET;
+                        haltCounter = 0;
                     }
                 }
 
-                progressHandler.addWrittenLength(POSITION);
+                progressHandler.addWrittenLength(position);
 
-                if (POSITION == progressHandler.getTotalSize() || progressHandler.getCancelled()) {
+                if (position == progressHandler.getTotalSize() || progressHandler.getCancelled()) {
                     // process complete, free up resources
                     // we've finished the work or process cancelled
                     pendingIntents.remove();
@@ -216,6 +215,7 @@ public class ServiceWatcherUtil {
 
     public interface ServiceWatcherInteractionInterface {
 
+        int STATE_UNSET = -1;
         int STATE_HALTED = 0;
         int STATE_RESUMED = 1;
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java b/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
index 5764d1e32..94213b000 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
@@ -299,7 +299,7 @@ public class CryptUtil {
             while ((count = inputStream.read(buffer)) != -1) {
 
                 cipherOutputStream.write(buffer, 0, count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         } finally {
 
@@ -332,7 +332,7 @@ public class CryptUtil {
             while ((count = cipherInputStream.read(buffer)) != -1) {
 
                 outputStream.write(buffer, 0, count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         } finally {
 
@@ -395,7 +395,7 @@ public class CryptUtil {
             while ((count = inputStream.read(buffer)) != -1) {
 
                 cipherOutputStream.write(buffer, 0, count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         } finally {
 
@@ -424,7 +424,7 @@ public class CryptUtil {
             while ((count = cipherInputStream.read(buffer)) != -1) {
 
                 outputStream.write(buffer, 0, count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         } finally {
 
diff --git a/app/src/main/java/com/amaze/filemanager/utils/files/GenericCopyUtil.java b/app/src/main/java/com/amaze/filemanager/utils/files/GenericCopyUtil.java
index 2b02c3a9a..9852b6fbc 100644
--- a/app/src/main/java/com/amaze/filemanager/utils/files/GenericCopyUtil.java
+++ b/app/src/main/java/com/amaze/filemanager/utils/files/GenericCopyUtil.java
@@ -296,7 +296,7 @@ public class GenericCopyUtil {
             if (count!=-1) {
 
                 byteBuffer.put(buffer, 0, count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         }
     }
@@ -321,7 +321,7 @@ public class GenericCopyUtil {
             if (count!=-1) {
 
                 bufferedOutputStream.write(buffer, 0 , count);
-                ServiceWatcherUtil.POSITION+=count;
+                ServiceWatcherUtil.position +=count;
             }
         }
         bufferedOutputStream.flush();
@@ -359,7 +359,7 @@ public class GenericCopyUtil {
             if (count != -1) {
 
                 bufferedOutputStream.write(buffer, 0, count);
-                ServiceWatcherUtil.POSITION = inBuffer.position();
+                ServiceWatcherUtil.position = inBuffer.position();
             }
 
         }
@@ -383,7 +383,7 @@ public class GenericCopyUtil {
             int bytes;
             if (((bytes = byteChannel.read(dst))>0)) {
 
-                ServiceWatcherUtil.POSITION += bytes;
+                ServiceWatcherUtil.position += bytes;
                 return bytes;
 
             }
