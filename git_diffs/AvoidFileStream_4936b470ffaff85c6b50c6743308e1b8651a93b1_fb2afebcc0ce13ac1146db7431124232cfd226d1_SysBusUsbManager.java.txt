diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
index 4a6bf15..a917d5c 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/AndroidUsbInfoFragment.java
@@ -35,7 +35,7 @@ import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
-import uk.co.alt236.usbdeviceenumerator.UsbConstants;
+import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 
 public class AndroidUsbInfoFragment extends BaseInfoFragment {
     public final static int TYPE_ANDROID_INFO = 0;
@@ -113,7 +113,7 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
     private void populateDataTable(LayoutInflater inflater) {
         final String vid = CommonLogic.padLeft(Integer.toHexString(device.getVendorId()), "0", 4);
         final String pid = CommonLogic.padLeft(Integer.toHexString(device.getProductId()), "0", 4);
-        final String deviceClass = UsbConstants.resolveUsbClass(device.getDeviceClass());
+        final String deviceClass = UsbConstantResolver.resolveUsbClass(device.getDeviceClass());
 
         viewHolder.getLogo().setImageResource(R.drawable.no_image);
 
@@ -135,7 +135,7 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
             iFace = device.getInterface(i);
             if (iFace != null) {
                 final TableLayout bottomTable = viewHolder.getBottomTable();
-                final String usbClass = UsbConstants.resolveUsbClass((iFace.getInterfaceClass()));
+                final String usbClass = UsbConstantResolver.resolveUsbClass((iFace.getInterfaceClass()));
 
                 CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.interface_) + i, "");
                 CommonLogic.addDataRow(inflater, bottomTable, getString(R.string.class_), usbClass);
@@ -167,8 +167,8 @@ public class AndroidUsbInfoFragment extends BaseInfoFragment {
         String endpointText = "#" + index + "\n";
         endpointText += getString(R.string.address_) + "0x" + addressInHex + " (" + addressInBinary + ")\n";
         endpointText += getString(R.string.number_) + endpoint.getEndpointNumber() + "\n";
-        endpointText += getString(R.string.direction_) + UsbConstants.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";
-        endpointText += getString(R.string.type_) + UsbConstants.resolveUsbEndpointType(endpoint.getType()) + "\n";
+        endpointText += getString(R.string.direction_) + UsbConstantResolver.resolveUsbEndpointDirection(endpoint.getDirection()) + "\n";
+        endpointText += getString(R.string.type_) + UsbConstantResolver.resolveUsbEndpointType(endpoint.getType()) + "\n";
         endpointText += getString(R.string.poll_interval_) + endpoint.getInterval() + "\n";
         endpointText += getString(R.string.max_packet_size_) + endpoint.getMaxPacketSize() + "\n";
         endpointText += getString(R.string.attributes_) + attributesInBinary;
diff --git a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
index d81272a..2423117 100644
--- a/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
+++ b/app/src/main/java/aws/apps/usbDeviceEnumerator/ui/usbinfo/LinuxUsbInfoFragment.java
@@ -30,7 +30,7 @@ import aws.apps.usbDeviceEnumerator.R;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyInfo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderCompanyLogo;
 import aws.apps.usbDeviceEnumerator.data.DataProviderUsbInfo;
-import uk.co.alt236.usbdeviceenumerator.UsbConstants;
+import uk.co.alt236.usbdeviceenumerator.UsbConstantResolver;
 import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
 
 public class LinuxUsbInfoFragment extends BaseInfoFragment {
@@ -91,9 +91,9 @@ public class LinuxUsbInfoFragment extends BaseInfoFragment {
     }
 
     private void populateDataTable(LayoutInflater inflater) {
-        final String vid = CommonLogic.padLeft(device.getVID(), "0", 4);
-        final String pid = CommonLogic.padLeft(device.getPID(), "0", 4);
-        final String deviceClass = UsbConstants.resolveUsbClass(device.getDeviceClass());
+        final String vid = CommonLogic.padLeft(device.getVid(), "0", 4);
+        final String pid = CommonLogic.padLeft(device.getPid(), "0", 4);
+        final String deviceClass = UsbConstantResolver.resolveUsbClass(device);
 
         viewHolder.getLogo().setImageResource(R.drawable.no_image);
 
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstants.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
similarity index 95%
rename from usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstants.java
rename to usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
index 9eb7661..8a6a1d6 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstants.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/UsbConstantResolver.java
@@ -15,7 +15,11 @@
  ******************************************************************************/
 package uk.co.alt236.usbdeviceenumerator;
 
-public class UsbConstants {
+import javax.annotation.Nonnull;
+
+import uk.co.alt236.usbdeviceenumerator.sysbususb.SysBusUsbDevice;
+
+public class UsbConstantResolver {
 
     private final static int USB_CLASS_PER_INTERFACE = 0x00;
     private final static int USB_CLASS_AUDIO = 0x01;
@@ -91,9 +95,9 @@ public class UsbConstants {
         }
     }
 
-    public static String resolveUsbClass(String usbClass) {
+    public static String resolveUsbClass(@Nonnull SysBusUsbDevice device) {
         try {
-            return resolveUsbClass(Integer.parseInt(usbClass));
+            return resolveUsbClass(Integer.parseInt(device.getServiceClass()));
         } catch (Exception e) {
             return "";
         }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java
new file mode 100644
index 0000000..b524a98
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ShellSysBusDumper.java
@@ -0,0 +1,31 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+import javax.annotation.Nonnull;
+
+/*package*/ class ShellSysBusDumper {
+    private static final String DEVICE_START = "__DEV_START__";
+    private static final String DEVICE_END = "__DEV_END__";
+    private static final String COMMAND_GET_USB_INFO = "for DEVICE in /sys/bus/usb/devices/*; do " +
+            " echo " + DEVICE_START + ";" +
+            " [ -f $DEVICE/idProduct ] && echo PID: $(cat $DEVICE/idProduct);" +
+            " [ -f $DEVICE/idVendor ] && echo BUSNUM: $(cat $DEVICE/busnum);" +
+            " [ -f $DEVICE/idVendor ] && echo DEVCLASS: $(cat $DEVICE/bDeviceClass);" +
+            " [ -f $DEVICE/idVendor ] && echo DEVNUM: $(cat $DEVICE/devnum);" +
+            " [ -f $DEVICE/idVendor ] && echo DEVPROTOCOL: $(cat $DEVICE/bDeviceProtocol);" +
+            " [ -f $DEVICE/idVendor ] && echo DEVSUBCLASS: $(cat $DEVICE/bDeviceSubClass);" +
+            " [ -f $DEVICE/idVendor ] && echo MAXPOWER: $(cat $DEVICE/bMaxPower);" +
+            " [ -f $DEVICE/idVendor ] && echo SERIAL: $(cat $DEVICE/serial);" +
+            " [ -f $DEVICE/idVendor ] && echo SPEED: $(cat $DEVICE/speed);" +
+            " [ -f $DEVICE/idVendor ] && echo VERSION: $(cat $DEVICE/version);" +
+            " [ -f $DEVICE/idVendor ] && echo VID: $(cat $DEVICE/idVendor);" +
+            " [ -f $DEVICE/product ] && echo MANUFACTURER: $(cat $DEVICE/manufacturer);" +
+            " [ -f $DEVICE/product ] && echo PRODUCT: $(cat $DEVICE/product);" +
+            " echo " + DEVICE_END + ";" +
+            " done";
+
+    @Nonnull
+    public static String getDump() {
+        final String dump = (new ExecTerminal()).exec(COMMAND_GET_USB_INFO);
+        return dump.replace(DEVICE_START + "\n" + DEVICE_END + "\n", "");
+    }
+}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbConstantsResolver.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbConstantsResolver.java
deleted file mode 100644
index 6929f8f..0000000
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbConstantsResolver.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*******************************************************************************
- * Copyright 2011 Alexandros Schillings
- * <p/>
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- ******************************************************************************/
-package uk.co.alt236.usbdeviceenumerator.sysbususb;
-
-/*package*/ class SysBusUsbConstantsResolver {
-
-    private final static int USB_CLASS_PER_INTERFACE = 0x00;
-    private final static int USB_CLASS_AUDIO = 0x01;
-    private final static int USB_CLASS_COMM = 0x02;
-    private final static int USB_CLASS_HID = 0x03;
-    private final static int USB_CLASS_PHYSICAL = 0x05;
-    private final static int USB_CLASS_STILL_IMAGE = 0x06;
-    private final static int USB_CLASS_PRINTER = 0x07;
-    private final static int USB_CLASS_MASS_STORAGE = 0x08;
-    private final static int USB_CLASS_HUB = 0x09;
-    private final static int USB_CLASS_CDC_DATA = 0x0a;
-    private final static int USB_CLASS_CSCID = 0x0b; /* chip + smart card */
-    private final static int USB_CLASS_CONTENT_SEC = 0x0d; /* content security */
-    private final static int USB_CLASS_VIDEO = 0x0e;
-    private final static int USB_CLASS_PERSONAL_HEALTH = 0x0f;
-    private final static int USB_CLASS_DIAGNOSTICS = 0xdc;
-    private final static int USB_CLASS_WIRELESS_CONTROLLER = 0xe0;
-    private final static int USB_CLASS_MISC = 0xef;
-    private final static int USB_CLASS_APP_SPEC = 0xfe;
-    private final static int USB_CLASS_VENDOR_SPEC = 0xff;
-
-    private final static int USB_DIR_OUT = 0;
-    private final static int USB_DIR_IN = 128;
-
-    private final static int USB_ENDPOINT_XFER_CONTROL = 0;
-    private final static int USB_ENDPOINT_XFER_ISOC = 1;
-    private final static int USB_ENDPOINT_XFER_BULK = 2;
-    private final static int USB_ENDPOINT_XFER_INT = 3;
-
-    protected static String resolveUsbClass(int usbClass) {
-        switch (usbClass) {
-            case USB_CLASS_PER_INTERFACE:
-                return "Use class information in the Interface Descriptors (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_AUDIO:
-                return "Audio Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_COMM:
-                return "Communication Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_HID:
-                return "Human Interaction Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_PHYSICAL:
-                return "Physical Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_STILL_IMAGE:
-                return "Still Image Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_PRINTER:
-                return "Printer (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_MASS_STORAGE:
-                return "Mass Storage Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_HUB:
-                return "USB Hub (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_CDC_DATA:
-                return "Communication Device Class (CDC) (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_CSCID:
-                return "Content SmartCard Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_CONTENT_SEC:
-                return "Content Security Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_APP_SPEC:
-                return "Application Specific (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_VENDOR_SPEC:
-                return "Vendor Specific (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_VIDEO:
-                return "Video Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_PERSONAL_HEALTH:
-                return "Personal Healthcare Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_DIAGNOSTICS:
-                return "Diagnostics Device (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_WIRELESS_CONTROLLER:
-                return "Wireless Controller (0x" + Integer.toHexString(usbClass) + ")";
-            case USB_CLASS_MISC:
-                return "Miscellaneous (0x" + Integer.toHexString(usbClass) + ")";
-            default:
-                return "Unknown (0x" + Integer.toHexString(usbClass) + ")";
-        }
-    }
-
-    protected static String resolveUsbEndpointDirection(int usbEndpointDirection) {
-
-        switch (usbEndpointDirection) {
-            case USB_DIR_OUT:
-                return "Outbound (0x" + Integer.toHexString(usbEndpointDirection) + ")";
-            case USB_DIR_IN:
-                return "Inbound (0x" + Integer.toHexString(usbEndpointDirection) + ")";
-            default:
-                return "Unknown (0x" + Integer.toHexString(usbEndpointDirection) + ")";
-        }
-    }
-
-    protected static String resolveUsbEndpointType(int usbEndpointType) {
-
-        switch (usbEndpointType) {
-            case USB_ENDPOINT_XFER_CONTROL:
-                return "Control (0x" + Integer.toHexString(usbEndpointType) + ")";
-            case USB_ENDPOINT_XFER_ISOC:
-                return "Isochronous (0x" + Integer.toHexString(usbEndpointType) + ")";
-            case USB_ENDPOINT_XFER_BULK:
-                return "Bulk (0x" + Integer.toHexString(usbEndpointType) + ")";
-            case USB_ENDPOINT_XFER_INT:
-                return "Intrrupt (0x" + Integer.toHexString(usbEndpointType) + ")";
-            default:
-                return "Unknown (0x" + Integer.toHexString(usbEndpointType) + ")";
-        }
-    }
-}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
index 4e315f0..9ff9da6 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDevice.java
@@ -18,8 +18,10 @@ package uk.co.alt236.usbdeviceenumerator.sysbususb;
 import android.os.Parcel;
 import android.os.Parcelable;
 
-public class SysBusUsbDevice implements Parcelable {
-    public static final Parcelable.Creator<SysBusUsbDevice> CREATOR = new Parcelable.Creator<SysBusUsbDevice>() {
+import javax.annotation.Nonnull;
+
+public final class SysBusUsbDevice implements Parcelable {
+    public static final Creator<SysBusUsbDevice> CREATOR = new Creator<SysBusUsbDevice>() {
         public SysBusUsbDevice createFromParcel(Parcel in) {
             return new SysBusUsbDevice(in);
         }
@@ -28,39 +30,53 @@ public class SysBusUsbDevice implements Parcelable {
             return new SysBusUsbDevice[size];
         }
     };
-    private String VID;
-    private String PID;
-    private String ReportedProductName;
-    private String ReportedVendorName;
-    private String SerialNumber;
-    private String Speed;
-    private String DeviceClass;
-    private String DeviceProtocol;
-    private String MaxPower;
-    private String DeviceSubClass;
-    private String BusNumber;
-    private String DeviceNumber;
-    private String UsbVersion;
-    private String DevicePath;
-
-    public SysBusUsbDevice() {
-    }
+    private final String vid;
+    private final String pid;
+    private final String reportedProductName;
+    private final String reportedVendorName;
+    private final String serialNumber;
+    private final String speed;
+    private final String serviceClass;
+    private final String deviceProtocol;
+    private final String maxPower;
+    private final String deviceSubClass;
+    private final String busNumber;
+    private final String deviceNumber;
+    private final String usbVersion;
+    private final String devicePath;
 
     public SysBusUsbDevice(Parcel in) {
-        VID = in.readString();
-        PID = in.readString();
-        ReportedProductName = in.readString();
-        ReportedVendorName = in.readString();
-        SerialNumber = in.readString();
-        Speed = in.readString();
-        DeviceClass = in.readString();
-        DeviceProtocol = in.readString();
-        MaxPower = in.readString();
-        DeviceSubClass = in.readString();
-        BusNumber = in.readString();
-        DeviceNumber = in.readString();
-        UsbVersion = in.readString();
-        DevicePath = in.readString();
+        this.vid = in.readString();
+        this.pid = in.readString();
+        this.reportedProductName = in.readString();
+        this.reportedVendorName = in.readString();
+        this.serialNumber = in.readString();
+        this.speed = in.readString();
+        this.serviceClass = in.readString();
+        this.deviceProtocol = in.readString();
+        this.maxPower = in.readString();
+        this.deviceSubClass = in.readString();
+        this.busNumber = in.readString();
+        this.deviceNumber = in.readString();
+        this.usbVersion = in.readString();
+        this.devicePath = in.readString();
+    }
+
+    private SysBusUsbDevice(final Builder builder) {
+        this.vid = builder.vid;
+        this.pid = builder.pid;
+        this.reportedProductName = builder.reportedProductName;
+        this.reportedVendorName = builder.reportedVendorName;
+        this.serialNumber = builder.serialNumber;
+        this.speed = builder.speed;
+        this.serviceClass = builder.serviceClass;
+        this.deviceProtocol = builder.deviceProtocol;
+        this.maxPower = builder.maxPower;
+        this.deviceSubClass = builder.deviceSubClass;
+        this.busNumber = builder.busNumber;
+        this.deviceNumber = builder.deviceNumber;
+        this.usbVersion = builder.usbVersion;
+        this.devicePath = builder.devicePath;
     }
 
     @Override
@@ -69,132 +85,185 @@ public class SysBusUsbDevice implements Parcelable {
     }
 
     public String getBusNumber() {
-        return BusNumber;
+        return busNumber;
     }
 
-    public void setBusNumber(String busNumber) {
-        BusNumber = busNumber;
+    public String getServiceClass() {
+        return serviceClass;
     }
 
-    public String getDeviceClass() {
-        return DeviceClass;
+    public String getDeviceNumber() {
+        return deviceNumber;
     }
 
-    public void setDeviceClass(String deviceClass) {
-        DeviceClass = deviceClass;
+    public String getDevicePath() {
+        return devicePath;
     }
 
-    public String getDeviceNumber() {
-        return DeviceNumber;
+    public String getDeviceProtocol() {
+        return deviceProtocol;
     }
 
-    public void setDeviceNumber(String deviceNumber) {
-        DeviceNumber = deviceNumber;
+    public String getDeviceSubClass() {
+        return deviceSubClass;
     }
 
-    public String getDevicePath() {
-        return DevicePath;
+    public String getMaxPower() {
+        return maxPower;
     }
 
-    public void setDevicePath(String devicePath) {
-        DevicePath = devicePath;
+    public String getPid() {
+        return pid;
     }
 
-    public String getDeviceProtocol() {
-        return DeviceProtocol;
+    public String getReportedProductName() {
+        return reportedProductName;
     }
 
-    public void setDeviceProtocol(String deviceProtocol) {
-        DeviceProtocol = deviceProtocol;
+    public String getReportedVendorName() {
+        return reportedVendorName;
     }
 
-    public String getDeviceSubClass() {
-        return DeviceSubClass;
+    public String getSerialNumber() {
+        return serialNumber;
     }
 
-    public void setDeviceSubClass(String deviceSubClass) {
-        DeviceSubClass = deviceSubClass;
+    public String getSpeed() {
+        return speed;
     }
 
-    public String getMaxPower() {
-        return MaxPower;
+    public String getUsbVersion() {
+        return usbVersion;
     }
 
-    public void setMaxPower(String maxPower) {
-        MaxPower = maxPower;
+    public String getVid() {
+        return vid;
     }
 
-    public String getPID() {
-        return PID;
-    }
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(vid);
+        dest.writeString(pid);
+        dest.writeString(reportedProductName);
+        dest.writeString(reportedVendorName);
+        dest.writeString(serialNumber);
+        dest.writeString(speed);
+        dest.writeString(serviceClass);
+        dest.writeString(deviceProtocol);
+        dest.writeString(maxPower);
+        dest.writeString(deviceSubClass);
+        dest.writeString(busNumber);
+        dest.writeString(deviceNumber);
+        dest.writeString(usbVersion);
+        dest.writeString(devicePath);
+    }
+
+    public static final class Builder {
+        private String vid;
+        private String pid;
+        private String reportedProductName;
+        private String reportedVendorName;
+        private String serialNumber;
+        private String speed;
+        private String serviceClass;
+        private String deviceProtocol;
+        private String maxPower;
+        private String deviceSubClass;
+        private String busNumber;
+        private String deviceNumber;
+        private String usbVersion;
+        private String devicePath;
+
+        public Builder() {
+        }
 
-    public void setPID(String pID) {
-        PID = pID;
-    }
+        @Nonnull
+        public Builder withVid(@Nonnull final String val) {
+            vid = val;
+            return this;
+        }
 
-    public String getReportedProductName() {
-        return ReportedProductName;
-    }
+        @Nonnull
+        public Builder withPid(@Nonnull final String val) {
+            pid = val;
+            return this;
+        }
 
-    public void setReportedProductName(String reportedProductName) {
-        ReportedProductName = reportedProductName;
-    }
+        @Nonnull
+        public Builder withReportedProductName(@Nonnull final String val) {
+            reportedProductName = val;
+            return this;
+        }
 
-    public String getReportedVendorName() {
-        return ReportedVendorName;
-    }
+        @Nonnull
+        public Builder withReportedVendorName(@Nonnull final String val) {
+            reportedVendorName = val;
+            return this;
+        }
 
-    public void setReportedVendorName(String reportedVendorName) {
-        ReportedVendorName = reportedVendorName;
-    }
+        @Nonnull
+        public Builder withSerialNumber(@Nonnull final String val) {
+            serialNumber = val;
+            return this;
+        }
 
-    public String getSerialNumber() {
-        return SerialNumber;
-    }
+        @Nonnull
+        public Builder withSpeed(@Nonnull final String val) {
+            speed = val;
+            return this;
+        }
 
-    public void setSerialNumber(String serial) {
-        SerialNumber = serial;
-    }
+        @Nonnull
+        public Builder withServiceClass(@Nonnull final String val) {
+            serviceClass = val;
+            return this;
+        }
 
-    public String getSpeed() {
-        return Speed;
-    }
+        @Nonnull
+        public Builder withDeviceProtocol(@Nonnull final String val) {
+            deviceProtocol = val;
+            return this;
+        }
 
-    public void setSpeed(String speed) {
-        Speed = speed;
-    }
+        @Nonnull
+        public Builder withMaxPower(@Nonnull final String val) {
+            maxPower = val;
+            return this;
+        }
 
-    public String getUsbVersion() {
-        return UsbVersion;
-    }
+        @Nonnull
+        public Builder withDeviceSubClass(@Nonnull final String val) {
+            deviceSubClass = val;
+            return this;
+        }
 
-    public void setUsbVersion(String usbVersion) {
-        UsbVersion = usbVersion;
-    }
+        @Nonnull
+        public Builder withBusNumber(@Nonnull final String val) {
+            busNumber = val;
+            return this;
+        }
 
-    public String getVID() {
-        return VID;
-    }
+        @Nonnull
+        public Builder withDeviceNumber(@Nonnull final String val) {
+            deviceNumber = val;
+            return this;
+        }
 
-    public void setVID(String vID) {
-        VID = vID;
-    }
+        @Nonnull
+        public Builder withUsbVersion(@Nonnull final String val) {
+            usbVersion = val;
+            return this;
+        }
 
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(VID);
-        dest.writeString(PID);
-        dest.writeString(ReportedProductName);
-        dest.writeString(ReportedVendorName);
-        dest.writeString(SerialNumber);
-        dest.writeString(Speed);
-        dest.writeString(DeviceClass);
-        dest.writeString(DeviceProtocol);
-        dest.writeString(MaxPower);
-        dest.writeString(DeviceSubClass);
-        dest.writeString(BusNumber);
-        dest.writeString(DeviceNumber);
-        dest.writeString(UsbVersion);
-        dest.writeString(DevicePath);
+        @Nonnull
+        public Builder withDevicePath(@Nonnull final String val) {
+            devicePath = val;
+            return this;
+        }
+
+        @Nonnull
+        public SysBusUsbDevice build() {
+            return new SysBusUsbDevice(this);
+        }
     }
 }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
new file mode 100644
index 0000000..bdca8df
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbDeviceFactory.java
@@ -0,0 +1,100 @@
+/*******************************************************************************
+ * Copyright 2011 Alexandros Schillings
+ * <p/>
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ ******************************************************************************/
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+/*package*/ class SysBusUsbDeviceFactory {
+
+    @Nullable
+    public SysBusUsbDevice create(final File usbDeviceDir) {
+        final String devicePath = usbDeviceDir.getAbsolutePath() + File.separator;
+
+        final String busNumber = readFileContents(devicePath + "busnum");
+        final String deviceNumber = readFileContents(devicePath + "devnum");
+
+        final SysBusUsbDevice retVal;
+
+        if (!busNumber.isEmpty() && !deviceNumber.isEmpty()) {
+            retVal = new SysBusUsbDevice.Builder()
+                    .withDevicePath(devicePath)
+                    .withBusNumber(busNumber)
+                    .withDeviceNumber(deviceNumber)
+                    .withServiceClass(readFileContents(devicePath + "bDeviceClass"))
+                    .withDeviceProtocol(readFileContents(devicePath + "bDeviceProtocol"))
+                    .withDeviceSubClass(readFileContents(devicePath + "bDeviceSubClass"))
+                    .withMaxPower(readFileContents(devicePath + "bMaxPower"))
+                    .withPid(readFileContents(devicePath + "idProduct"))
+                    .withReportedProductName(readFileContents(devicePath + "product"))
+                    .withReportedVendorName(readFileContents(devicePath + "manufacturer"))
+                    .withSerialNumber(readFileContents(devicePath + "serial"))
+                    .withSpeed(readFileContents(devicePath + "speed"))
+                    .withVid(readFileContents(devicePath + "idVendor"))
+                    .withUsbVersion(readFileContents(devicePath + "version"))
+                    .build();
+        } else {
+            retVal = null;
+        }
+
+        return retVal;
+    }
+
+    @Nonnull
+    private String readFileContents(String filePath) {
+        final File file = new File(filePath);
+        final StringBuilder fileContents = new StringBuilder(1000);
+        final int bufferSize = 1024;
+
+        if (file.exists() && !file.isDirectory()) {
+            BufferedReader reader = null;
+            try {
+                reader = new BufferedReader(new FileReader(filePath));
+
+                char[] buf = new char[bufferSize];
+                int numRead = 0;
+
+                while ((numRead = reader.read(buf)) != -1) {
+                    String readData = String.valueOf(buf, 0, numRead);
+                    fileContents.append(readData);
+                    buf = new char[bufferSize];
+                }
+            } catch (FileNotFoundException e) {
+                fileContents.setLength(0);
+                e.printStackTrace();
+            } catch (IOException e) {
+                fileContents.setLength(0);
+                e.printStackTrace();
+            } finally {
+                if (reader != null) {
+                    try {
+                        reader.close();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+
+        return fileContents.toString().trim();
+    }
+}
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
index 7ca03ab..3e2b11e 100644
--- a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/SysBusUsbManager.java
@@ -15,133 +15,53 @@
  ******************************************************************************/
 package uk.co.alt236.usbdeviceenumerator.sysbususb;
 
-import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.Map;
+
+import javax.annotation.Nonnull;
 
 public class SysBusUsbManager {
     private static final String PATH_SYS_BUS_USB = "/sys/bus/usb/devices/";
-    private static final String DEVICE_START = "__DEV_START__";
-    private static final String DEVICE_END = "__DEV_END__";
-    private static final String COMMAND_GET_USB_INFO = "for DEVICE in /sys/bus/usb/devices/*; do " +
-            " echo " + DEVICE_START + ";" +
-            " [ -f $DEVICE/idProduct ] && echo PID: $(cat $DEVICE/idProduct);" +
-            " [ -f $DEVICE/idVendor ] && echo BUSNUM: $(cat $DEVICE/busnum);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVCLASS: $(cat $DEVICE/bDeviceClass);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVNUM: $(cat $DEVICE/devnum);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVPROTOCOL: $(cat $DEVICE/bDeviceProtocol);" +
-            " [ -f $DEVICE/idVendor ] && echo DEVSUBCLASS: $(cat $DEVICE/bDeviceSubClass);" +
-            " [ -f $DEVICE/idVendor ] && echo MAXPOWER: $(cat $DEVICE/bMaxPower);" +
-            " [ -f $DEVICE/idVendor ] && echo SERIAL: $(cat $DEVICE/serial);" +
-            " [ -f $DEVICE/idVendor ] && echo SPEED: $(cat $DEVICE/speed);" +
-            " [ -f $DEVICE/idVendor ] && echo VERSION: $(cat $DEVICE/version);" +
-            " [ -f $DEVICE/idVendor ] && echo VID: $(cat $DEVICE/idVendor);" +
-            " [ -f $DEVICE/product ] && echo MANUFACTURER: $(cat $DEVICE/manufacturer);" +
-            " [ -f $DEVICE/product ] && echo PRODUCT: $(cat $DEVICE/product);" +
-            " echo " + DEVICE_END + ";" +
-            " done";
-    //final String TAG =  this.getClass().getName();
-    private HashMap<String, SysBusUsbDevice> myUsbDevices;
-
-    public SysBusUsbManager() {
-        myUsbDevices = new HashMap<String, SysBusUsbDevice>();
-    }
 
-    public static String getUsbInfoViaShell() {
-        String res = (new ExecTerminal()).exec(COMMAND_GET_USB_INFO);
+    private final HashMap<String, SysBusUsbDevice> myUsbDevices;
+    private final SysBusUsbDeviceFactory mSysBusUsbDeviceFactory;
+    private final Validation validation;
 
-        res = res.replace(DEVICE_START + "\n" + DEVICE_END + "\n", "");
-        return res;
+    public SysBusUsbManager() {
+        myUsbDevices = new HashMap<>();
+        mSysBusUsbDeviceFactory = new SysBusUsbDeviceFactory();
+        validation = new Validation();
     }
 
-    public HashMap<String, SysBusUsbDevice> getUsbDevices() {
+    @Nonnull
+    public Map<String, SysBusUsbDevice> getUsbDevices() {
         populateList(PATH_SYS_BUS_USB);
-
-        return myUsbDevices;
+        return Collections.unmodifiableMap(myUsbDevices);
     }
 
-    private void populateList(String path) {
-        SysBusUsbDevice usb;
-
+    private void populateList(@Nonnull String path) {
         myUsbDevices.clear();
 
-        File dir = new File(path);
-
-        if (!dir.isDirectory()) {
-            return;
-        }
-
-        for (File child : dir.listFiles()) {
-
-            if (".".equals(child.getName()) || "..".equals(child.getName())) {
-                continue;  // Ignore the self and parent aliases.
-            }
-
-            String parentPath = child.getAbsolutePath() + File.separator;
+        final File pathAsFile = new File(path);
+        final File[] children = validation.getListOfChildren(pathAsFile);
 
-            usb = new SysBusUsbDevice();
-            usb.setDevicePath(parentPath);
-            usb.setBusNumber(readFileContents(parentPath + "busnum"));
-            usb.setDeviceClass(readFileContents(parentPath + "bDeviceClass"));
-            usb.setDeviceNumber(readFileContents(parentPath + "devnum"));
-            usb.setDeviceProtocol(readFileContents(parentPath + "bDeviceProtocol"));
-            usb.setDeviceSubClass(readFileContents(parentPath + "bDeviceSubClass"));
-            usb.setMaxPower(readFileContents(parentPath + "bMaxPower"));
-            usb.setPID(readFileContents(parentPath + "idProduct"));
-            usb.setReportedProductName(readFileContents(parentPath + "product"));
-            usb.setReportedVendorName(readFileContents(parentPath + "manufacturer"));
-            usb.setSerialNumber(readFileContents(parentPath + "serial"));
-            usb.setSpeed(readFileContents(parentPath + "speed"));
-            usb.setVID(readFileContents(parentPath + "idVendor"));
-            usb.setUsbVersion(readFileContents(parentPath + "version"));
-
-            if (usb.getBusNumber().length() > 0 && usb.getDeviceNumber().length() > 0) {
-                String key = child.getName();
-                myUsbDevices.put(key, usb);
+        SysBusUsbDevice usb;
+        for (File child : children) {
+            if (validation.isValidUsbDeviceCandidate(child)) {
+                usb = mSysBusUsbDeviceFactory.create(child.getAbsoluteFile());
+
+                if (usb != null) {
+                    final String key = child.getName();
+                    myUsbDevices.put(key, usb);
+                }
             }
         }
     }
 
-    private String readFileContents(String filePath) {
-        File file = new File(filePath);
-        if (!file.exists()) {
-            return "";
-        }
-        if (file.isDirectory()) {
-            return "";
-        }
-
-        StringBuffer fileData = new StringBuffer(1000);
-        BufferedReader reader;
-        try {
-            reader = new BufferedReader(new FileReader(filePath));
-
-            char[] buf = new char[1024];
-            int numRead = 0;
-
-            while ((numRead = reader.read(buf)) != -1) {
-                String readData = String.valueOf(buf, 0, numRead);
-                fileData.append(readData);
-                buf = new char[1024];
-            }
-
-            reader.close();
-
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-            return "";
-        } catch (IOException e) {
-            e.printStackTrace();
-            return "";
-        }
-
-        String res = fileData.toString();
-        if (res == null) {
-            res = "";
-        }
-        return res.trim();
+    @Nonnull
+    public static String getUsbInfoViaShell() {
+        return ShellSysBusDumper.getDump();
     }
 }
diff --git a/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Validation.java b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Validation.java
new file mode 100644
index 0000000..de3d029
--- /dev/null
+++ b/usbdeviceenumerator/src/main/java/uk/co/alt236/usbdeviceenumerator/sysbususb/Validation.java
@@ -0,0 +1,39 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+import java.io.File;
+
+import javax.annotation.Nonnull;
+
+/*package*/ class Validation {
+
+    public boolean isValidUsbDeviceCandidate(@Nonnull final File file) {
+        final boolean retVal;
+
+        if (!file.exists()) {
+            retVal = false;
+        } else if (!file.isDirectory()) {
+            retVal = false;
+        } else if (".".equals(file.getName()) || "..".equals(file.getName())) {
+            retVal = false;
+        } else {
+            retVal = true;
+        }
+
+        return retVal;
+    }
+
+    @Nonnull
+    public File[] getListOfChildren(@Nonnull final File path) {
+        final File[] retVal;
+
+        if (path.exists()
+                && path.isDirectory()
+                && path.listFiles() != null) {
+            retVal = path.listFiles();
+        } else {
+            retVal = new File[0];
+        }
+
+        return retVal;
+    }
+}
diff --git a/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
new file mode 100644
index 0000000..776b171
--- /dev/null
+++ b/usbdeviceenumerator/src/test/java/uk/co/alt236/usbdeviceenumerator/sysbususb/ValidationTest.java
@@ -0,0 +1,136 @@
+package uk.co.alt236.usbdeviceenumerator.sysbususb;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.mockito.runners.MockitoJUnitRunner;
+
+import java.io.File;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@RunWith(MockitoJUnitRunner.class)
+public class ValidationTest {
+    private Validation cut;
+
+    @Before
+    public void setUp() {
+        cut = new Validation();
+    }
+
+    @Test
+    public void isValidUsbDeviceCandidate_not_existent() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(false);
+
+        assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
+    }
+
+    @Test
+    public void isValidUsbDeviceCandidate_not_directory() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(false);
+
+        assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
+    }
+
+    @Test
+    public void isValidUsbDeviceCandidate_is_current_dir() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.getName()).thenReturn(".");
+
+        assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
+    }
+
+    @Test
+    public void isValidUsbDeviceCandidate_is_parent_dir() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.getName()).thenReturn("..");
+
+        assertFalse(cut.isValidUsbDeviceCandidate(mockFile));
+    }
+
+    @Test
+    public void isValidUsbDeviceCandidate_is_valid() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.getName()).thenReturn("foo");
+
+        assertTrue(cut.isValidUsbDeviceCandidate(mockFile));
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void isValidUsbDeviceCandidate_is_null() throws Exception {
+        final File mockFile = null;
+        cut.isValidUsbDeviceCandidate(mockFile);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void getListOfChildren_is_null() throws Exception {
+        final File mockFile = null;
+        cut.getListOfChildren(mockFile);
+    }
+
+    @Test
+    public void getListOfChildren_not_existent() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(false);
+
+        final File[] result = cut.getListOfChildren(mockFile);
+        Assert.assertEquals(0, result.length);
+    }
+
+    @Test
+    public void getListOfChildren_not_directory() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(false);
+
+        final File[] result = cut.getListOfChildren(mockFile);
+        Assert.assertEquals(0, result.length);
+    }
+
+    @Test
+    public void getListOfChildren_null_children() throws Exception {
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.listFiles()).thenReturn(null);
+
+        final File[] result = cut.getListOfChildren(mockFile);
+        Assert.assertEquals(0, result.length);
+    }
+
+    @Test
+    public void getListOfChildren_no_children() throws Exception {
+        final File[] children = new File[0];
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.listFiles()).thenReturn(children);
+
+        final File[] result = cut.getListOfChildren(mockFile);
+        Assert.assertSame(children, result);
+    }
+
+    @Test
+    public void getListOfChildren_valid_children() throws Exception {
+        final File[] children = new File[5];
+        final File mockFile = Mockito.mock(File.class);
+        Mockito.when(mockFile.exists()).thenReturn(true);
+        Mockito.when(mockFile.isDirectory()).thenReturn(true);
+        Mockito.when(mockFile.listFiles()).thenReturn(children);
+
+        final File[] result = cut.getListOfChildren(mockFile);
+        Assert.assertSame(children, result);
+    }
+}
\ No newline at end of file
