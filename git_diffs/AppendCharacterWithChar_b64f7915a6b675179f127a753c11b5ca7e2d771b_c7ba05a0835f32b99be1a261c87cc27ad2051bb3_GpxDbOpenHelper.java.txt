diff --git a/aat-android/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/aat-android/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index e637cf7e..13ac6a06 100644
--- a/aat-android/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/aat-android/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -15,10 +15,10 @@ import ch.bailu.aat.factory.AndroidFocFactory;
 import ch.bailu.aat.map.MapFactory;
 import ch.bailu.aat.map.To;
 import ch.bailu.aat.map.layer.control.FileControlBarLayer;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat.services.directory.Iterator;
-import ch.bailu.aat.services.directory.IteratorSimple;
+import ch.bailu.aat_lib.service.directory.Iterator;
+import ch.bailu.aat_lib.service.directory.IteratorSimple;
 import ch.bailu.aat.util.ui.AppLayout;
 import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.util.ui.UiTheme;
@@ -76,8 +76,8 @@ public abstract class AbsGpxListActivity extends ActivityContext implements OnIt
     }
 
     private void createDispatcher() {
-        addSource(new IteratorSource.Summary(getServiceContext()));
-        addSource(new OverlaySource(getServiceContext()));
+        addSource(new IteratorSource.Summary(getAppContext()));
+        addSource(new OverlaySource(getAppContext()));
         addSource(new CurrentLocationSource(getServiceContext(),getBroadcaster()));
 
         addTarget(busyControl, InfoID.OVERLAY, InfoID.OVERLAY+1,InfoID.OVERLAY+2,InfoID.OVERLAY+3);
@@ -88,7 +88,7 @@ public abstract class AbsGpxListActivity extends ActivityContext implements OnIt
     @Override
     public void onResumeWithService() {
 
-        iteratorSimple = new IteratorSimple(getServiceContext());
+        iteratorSimple = new IteratorSimple(getAppContext());
         listView.setIterator(this, iteratorSimple);
         fileControlBar.setIterator(iteratorSimple);
         listView.setSelection(sdirectory.getPosition().getValue());
diff --git a/aat-android/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java b/aat-android/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
index 952f5d47..7e254a6b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
@@ -7,10 +7,10 @@ import android.content.Intent;
 import ch.bailu.aat_lib.gpx.GpxFileWrapper;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjGpx;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat.services.cache.ObjGpxStatic;
-import ch.bailu.aat.services.cache.ObjNull;
+import ch.bailu.aat_lib.service.cache.ObjNull;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
diff --git a/aat-android/src/main/java/ch/bailu/aat/dispatcher/IteratorSource.java b/aat-android/src/main/java/ch/bailu/aat/dispatcher/IteratorSource.java
index 33cd3d08..a26d5a1d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/dispatcher/IteratorSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/dispatcher/IteratorSource.java
@@ -1,32 +1,26 @@
 package ch.bailu.aat.dispatcher;
 
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
 
-import ch.bailu.aat.factory.AndroidFocFactory;
-import ch.bailu.aat_lib.gpx.GpxFileWrapper;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat_lib.service.InsideContext;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjGpx;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat.services.cache.ObjGpxStatic;
-import ch.bailu.aat.services.cache.ObjNull;
-import ch.bailu.aat.services.directory.Iterator;
-import ch.bailu.aat.services.directory.Iterator.OnCursorChangedListener;
-import ch.bailu.aat.services.directory.IteratorFollowFile;
-import ch.bailu.aat.services.directory.IteratorSummary;
-import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.OldAppBroadcaster;
+import ch.bailu.aat_lib.service.directory.Iterator;
+import ch.bailu.aat_lib.service.directory.Iterator.OnCursorChangedListener;
+import ch.bailu.aat_lib.service.directory.IteratorFollowFile;
+import ch.bailu.aat_lib.service.directory.IteratorSummary;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.dispatcher.BroadcastReceiver;
 import ch.bailu.aat_lib.dispatcher.ContentSource;
+import ch.bailu.aat_lib.gpx.GpxFileWrapper;
 import ch.bailu.aat_lib.gpx.GpxInformation;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
+import ch.bailu.aat_lib.service.InsideContext;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjNull;
 
 public abstract class IteratorSource extends ContentSource implements OnCursorChangedListener {
 
-    private final ServiceContext scontext;
+    private final AppContext appContext;
     private final SolidDirectoryQuery sdirectory;
 
     private Iterator iterator = Iterator.NULL;
@@ -39,9 +33,9 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
     }
 
 
-    public IteratorSource(ServiceContext sc) {
-        scontext = sc;
-        sdirectory = new SolidDirectoryQuery(new Storage(sc.getContext()), new AndroidFocFactory(sc.getContext()));
+    public IteratorSource(AppContext appContext) {
+        this.appContext = appContext;
+        sdirectory = new SolidDirectoryQuery(appContext.getStorage(), appContext.getFocFactory());
     }
 
 
@@ -70,13 +64,13 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
 
     @Override
     public void onResume() {
-        iterator = factoryIterator(scontext);
+        iterator = factoryIterator(appContext);
         iterator.moveToPosition(sdirectory.getPosition().getValue());
         iterator.setOnCursorChangedLinsener(this);
     }
 
 
-    public abstract Iterator factoryIterator(ServiceContext scontext);
+    public abstract Iterator factoryIterator(AppContext appContext);
 
     @Override
     public GpxInformation getInfo() {
@@ -103,35 +97,30 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
 
 
     public static class FollowFile extends IteratorSource {
-        private final Context context;
-        private final ServiceContext scontext;
+        private final AppContext appContext;
         private Obj handle = ObjNull.NULL;
 
-
-        public FollowFile(ServiceContext sc) {
-            super(sc);
-            context = sc.getContext();
-            scontext = sc;
+        public FollowFile(AppContext appContext) {
+            super(appContext);
+            this.appContext = appContext;
         }
 
         @Override
-        public Iterator factoryIterator(ServiceContext scontext) {
-            return new IteratorFollowFile(scontext);
+        public Iterator factoryIterator(AppContext appContext) {
+            return new IteratorFollowFile(appContext);
         }
 
 
-        private final BroadcastReceiver  onChangedInCache = new BroadcastReceiver () {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                if (AppIntent.hasFile(intent, getID())) {
-                    requestUpdate();
-                }
+        private final BroadcastReceiver onChangedInCache = objs -> {
+            if (getID().equals(objs[0])) {
+                requestUpdate();
             }
+
         };
 
         @Override
         public void onPause() {
-            context.unregisterReceiver(onChangedInCache);
+            appContext.getBroadcaster().unregister(onChangedInCache);
 
             handle.free();
             handle = ObjNull.NULL;
@@ -141,7 +130,7 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
 
         @Override
         public void onResume() {
-            OldAppBroadcaster.register(context, onChangedInCache, AppBroadcaster.FILE_CHANGED_INCACHE);
+            appContext.getBroadcaster().register(onChangedInCache, AppBroadcaster.FILE_CHANGED_INCACHE);
             super.onResume();
         }
 
@@ -149,10 +138,10 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
         public GpxInformation getInfo() {
             final GpxInformation[] info = {super.getInfo()};
 
-            new InsideContext(scontext) {
+            new InsideContext(appContext.getServices()) {
                 @Override
                 public void run() {
-                    Obj h = scontext.getCacheService().getObject(getID(),
+                    Obj h = appContext.getServices().getCacheService().getObject(getID(),
                             new ObjGpxStatic.Factory());
 
                     if (h instanceof ObjGpx) {
@@ -180,13 +169,13 @@ public abstract class IteratorSource extends ContentSource implements OnCursorCh
 
 
     public static class Summary extends IteratorSource {
-        public Summary(ServiceContext sc) {
-            super(sc);
+        public Summary(AppContext appContext) {
+            super(appContext);
         }
 
         @Override
-        public Iterator factoryIterator(ServiceContext scontext) {
-            return new IteratorSummary(scontext);
+        public Iterator factoryIterator(AppContext appContext) {
+            return new IteratorSummary(appContext);
         }
     }
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/dispatcher/OverlaySource.java b/aat-android/src/main/java/ch/bailu/aat/dispatcher/OverlaySource.java
index 13cb951c..e613bfb3 100644
--- a/aat-android/src/main/java/ch/bailu/aat/dispatcher/OverlaySource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/dispatcher/OverlaySource.java
@@ -11,8 +11,8 @@ import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat_lib.preferences.map.SolidOverlayFile;
 import ch.bailu.aat_lib.preferences.map.SolidOverlayFileList;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjGpx;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat.services.cache.ObjGpxStatic;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java b/aat-android/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
index 9a33b38f..f2a7e671 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
@@ -7,10 +7,10 @@ import ch.bailu.aat.activities.AbsGpxListActivity;
 import ch.bailu.aat.factory.AndroidFocFactory;
 import ch.bailu.aat.map.To;
 import ch.bailu.aat.menus.FileMenu;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat_lib.preferences.map.SolidOverlayFile;
-import ch.bailu.aat.services.directory.Iterator;
+import ch.bailu.aat_lib.service.directory.Iterator;
 import ch.bailu.aat.util.fs.FileAction;
 import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.util.ui.ToolTip;
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java b/aat-android/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
index e1d83798..26ee3365 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
@@ -39,9 +39,10 @@ import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.gpx.InfoID;
 import ch.bailu.aat_lib.logger.AppLog;
 import ch.bailu.aat_lib.map.layer.gpx.GpxDynLayer;
+import ch.bailu.aat_lib.service.directory.MapPreviewInterface;
 import ch.bailu.foc.Foc;
 
-public class MapsForgePreview extends MapsForgeViewBase {
+public class MapsForgePreview extends MapsForgeViewBase implements MapPreviewInterface {
     private static final int BITMAP_SIZE=128;
     private static final Dimension DIM = new Dimension(BITMAP_SIZE, BITMAP_SIZE);
     private static final Source MAPNIK = new CacheOnlySource(DownloadSource.MAPNIK);
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/TileProvider.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
index 5e1061b5..bac337a2 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/TileProvider.java
@@ -18,7 +18,7 @@ import ch.bailu.aat_lib.map.Attachable;
 import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.ObjTile;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CacheOnlySource.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CacheOnlySource.java
index d2af985a..5bb429df 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CacheOnlySource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CacheOnlySource.java
@@ -5,7 +5,7 @@ import android.content.Context;
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.preferences.map.AndroidSolidTileCacheDirectory;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.ObjTileCacheOnly;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
index 4e4620a7..7ab13773 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/CachedSource.java
@@ -5,7 +5,7 @@ import android.content.Context;
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.cache.ObjTileCached;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public class CachedSource extends Source {
     private final Source source;
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DoubleSource.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DoubleSource.java
index e3c2d96a..f8985956 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DoubleSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DoubleSource.java
@@ -6,7 +6,7 @@ import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public class DoubleSource extends Source {
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
index 5aed9731..45fa6c96 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
@@ -8,7 +8,7 @@ import java.util.Random;
 
 import ch.bailu.aat.map.tile.TileFlags;
 import ch.bailu.aat.preferences.map.AndroidSolidTileCacheDirectory;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.ObjTileDownloadable;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
index 3baf79e7..fe8217f7 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/MapsForgeSource.java
@@ -7,7 +7,7 @@ import org.mapsforge.map.rendertheme.InternalRenderTheme;
 
 import ch.bailu.aat.preferences.map.SolidRenderTheme;
 import ch.bailu.aat.services.cache.ObjTileMapsForge;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public class MapsForgeSource extends Source {
     public final static Source MAPSFORGE = new MapsForgeSource(InternalRenderTheme.DEFAULT.name());
diff --git a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/Source.java b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/Source.java
index e83477b0..b8f77e59 100644
--- a/aat-android/src/main/java/ch/bailu/aat/map/tile/source/Source.java
+++ b/aat-android/src/main/java/ch/bailu/aat/map/tile/source/Source.java
@@ -4,7 +4,7 @@ import android.content.Context;
 
 import org.mapsforge.core.model.Tile;
 
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.elevation.ObjTileElevationColor;
 import ch.bailu.aat.services.cache.elevation.ObjTileHillshade;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/menus/EditorMenu.java b/aat-android/src/main/java/ch/bailu/aat/menus/EditorMenu.java
index 991ffd3f..bc068b08 100644
--- a/aat-android/src/main/java/ch/bailu/aat/menus/EditorMenu.java
+++ b/aat-android/src/main/java/ch/bailu/aat/menus/EditorMenu.java
@@ -10,8 +10,8 @@ import ch.bailu.aat_lib.preferences.map.SolidOverlayFileList;
 import ch.bailu.aat.preferences.system.AndroidSolidDataDirectory;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjGpx;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat.services.editor.EditorInterface;
 import ch.bailu.aat.util.ui.AppSelectDirectoryDialog;
 import ch.bailu.aat.views.preferences.AbsSelectOverlayDialog;
diff --git a/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidDem3Directory.java b/aat-android/src/main/java/ch/bailu/aat/preferences/map/AndroidSolidDem3Directory.java
similarity index 51%
rename from aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidDem3Directory.java
rename to aat-android/src/main/java/ch/bailu/aat/preferences/map/AndroidSolidDem3Directory.java
index a5172ff7..38f95702 100644
--- a/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidDem3Directory.java
+++ b/aat-android/src/main/java/ch/bailu/aat/preferences/map/AndroidSolidDem3Directory.java
@@ -7,62 +7,21 @@ import java.util.ArrayList;
 import ch.bailu.aat.factory.AndroidFocFactory;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat.util.fs.AndroidVolumes;
-import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
-import ch.bailu.aat_lib.preferences.SolidFile;
-import ch.bailu.aat_lib.resources.ToDo;
+import ch.bailu.aat_lib.preferences.map.SolidDem3Directory;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 import ch.bailu.foc.Foc;
 
-public class SolidDem3Directory extends SolidFile {
-
-    public final static String DEM3_DIR = "dem3";
-
-    public SolidDem3Directory(Context c) {
-        super(new Storage(c), SolidDem3Directory.class.getSimpleName(), new AndroidFocFactory(c));
-        context = c;
-    }
-
-
+public class AndroidSolidDem3Directory extends SolidDem3Directory {
     private final Context context;
 
-
-    public Context getContext() {
-        return context;
-    }
-    @Override
-    public String getLabel() {
-        return ToDo.translate("Location of dem3 tiles");
-    }
-
-    @Override
-    public String getValueAsString() {
-        String r = super.getValueAsString();
-
-        if (getStorage().isDefaultString(r)) {
-            r = getDefaultValue();
-
-            setValue(r);
-        }
-        return r;
-    }
-
-
-
-    public String getDefaultValue() {
-        ArrayList<String> list = new ArrayList<>(5);
-
-        list = buildSelection(list);
-
-        if (list.size()>0) {
-            return list.get(0);
-        }
-        return "";
+    public AndroidSolidDem3Directory(Context c) {
+        super(new Storage(c), new AndroidFocFactory(c));
+        context = c;
     }
 
-
     @Override
     public ArrayList<String> buildSelection(ArrayList<String> list) {
-        AndroidVolumes volumes = new AndroidVolumes(getContext());
+        AndroidVolumes volumes = new AndroidVolumes(context);
 
         // exists and is writeable
         for (Foc vol : volumes.getVolumes()) {
@@ -102,19 +61,4 @@ public class SolidDem3Directory extends SolidFile {
 
         return list;
     }
-
-    /**
-     *
-     * @return a complete file path for a dem3 tile. The base path is taken from configuration.
-     * Example: /sdcard/aat_data/dem3/N16/N16E077.hgt.zip
-     */
-    public Foc toFile(Dem3Coordinates dem3Coordinates) {
-        return toFile(dem3Coordinates, getValueAsFile());
-    }
-
-
-    private Foc toFile(Dem3Coordinates dem3Coordinates, Foc base) {
-        return base.descendant(dem3Coordinates.toExtString() + ".hgt.zip");
-    }
-
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidRendererThreads.java b/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidRendererThreads.java
index 1108b878..bca00229 100644
--- a/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidRendererThreads.java
+++ b/aat-android/src/main/java/ch/bailu/aat/preferences/map/SolidRendererThreads.java
@@ -1,12 +1,11 @@
 package ch.bailu.aat.preferences.map;
 
-import android.content.Context;
 import android.os.Build;
 
 import org.mapsforge.core.util.Parameters;
 
-import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat_lib.preferences.SolidIndexList;
+import ch.bailu.aat_lib.preferences.StorageInterface;
 import ch.bailu.aat_lib.resources.Res;
 
 public class SolidRendererThreads extends SolidIndexList {
@@ -18,8 +17,8 @@ public class SolidRendererThreads extends SolidIndexList {
      * This does not has to be user configurable.
      * Use numberOfBackgroundThreads() instead.
      */
-    private SolidRendererThreads(Context c) {
-        super(new Storage(c), KEY);
+    private SolidRendererThreads(StorageInterface storageInterface) {
+        super(storageInterface, KEY);
         if (values[0] == 0) values[0] = numberOfBackgroundThreats();
     }
 
@@ -59,12 +58,6 @@ public class SolidRendererThreads extends SolidIndexList {
         return values[getIndex()];
     }
 
-    /*
-    public void set() {
-        Parameters.NUMBER_OF_THREADS = getValue();
-    }
-    */
-
     public static void set() {
         Parameters.NUMBER_OF_THREADS = numberOfBackgroundThreats();
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/OneService.java b/aat-android/src/main/java/ch/bailu/aat/services/OneService.java
index 383258a8..2f0324c0 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/OneService.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/OneService.java
@@ -3,31 +3,41 @@ package ch.bailu.aat.services;
 import android.content.Context;
 
 import ch.bailu.aat.dispatcher.AndroidBroadcaster;
+import ch.bailu.aat.factory.AndroidFocFactory;
+import ch.bailu.aat.map.mapsforge.MapsForgePreview;
+import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat.preferences.location.AndroidSolidLocationProvider;
+import ch.bailu.aat.preferences.map.SolidRendererThreads;
 import ch.bailu.aat.preferences.system.AndroidSolidDataDirectory;
 import ch.bailu.aat.services.background.BackgroundService;
 import ch.bailu.aat.services.cache.CacheService;
-import ch.bailu.aat.services.directory.DirectoryService;
+import ch.bailu.aat.services.directory.AndroidSummaryConfig;
+import ch.bailu.aat_lib.service.directory.DirectoryService;
 import ch.bailu.aat.services.elevation.ElevationService;
 import ch.bailu.aat.services.icons.IconMapService;
 import ch.bailu.aat.services.render.RenderService;
 import ch.bailu.aat.services.sensor.SensorService;
 import ch.bailu.aat.services.tileremover.TileRemoverService;
 import ch.bailu.aat.services.tracker.StatusIcon;
+import ch.bailu.aat.util.sql.AndroidDatabase;
 import ch.bailu.aat_lib.service.IconMapServiceInterface;
-import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundServiceInterface;
+import ch.bailu.aat_lib.service.cache.CacheServiceInterface;
+import ch.bailu.aat_lib.service.directory.DirectoryServiceInterface;
 import ch.bailu.aat_lib.service.location.LocationService;
+import ch.bailu.aat_lib.service.location.LocationServiceInterface;
 import ch.bailu.aat_lib.service.sensor.SensorServiceInterface;
 import ch.bailu.aat_lib.service.tracker.TrackerService;
+import ch.bailu.aat_lib.service.tracker.TrackerServiceInterface;
 import ch.bailu.aat_lib.util.WithStatusText;
 
-public final class OneService extends AbsService  implements ServiceContext, ServicesInterface {
+public final class OneService extends AbsService  implements ServiceContext {
 
     private LocationService location;
     private TrackerService tracker;
-    private BackgroundService background;
+    private BackgroundServiceInterface background;
     private IconMapService iconMap;
-    private CacheService   cache;
+    private CacheServiceInterface cache;
     private DirectoryService directory;
     private ElevationService elevation;
     private TileRemoverService tileRemover;
@@ -35,7 +45,6 @@ public final class OneService extends AbsService  implements ServiceContext, Ser
     private SensorService ble;
 
 
-
     @Override
     public  void onCreate() {
         super.onCreate();
@@ -111,7 +120,7 @@ public final class OneService extends AbsService  implements ServiceContext, Ser
 
 
     @Override
-    public  synchronized LocationService getLocationService() {
+    public  synchronized LocationServiceInterface getLocationService() {
         if (location == null) {
             location = new LocationService(new AndroidSolidLocationProvider(this), new AndroidBroadcaster(this));
         }
@@ -119,15 +128,15 @@ public final class OneService extends AbsService  implements ServiceContext, Ser
     }
 
     @Override
-    public  synchronized BackgroundService getBackgroundService() {
+    public  synchronized BackgroundServiceInterface getBackgroundService() {
         if (background == null) {
-            background = new BackgroundService(this);
+            background = new BackgroundService(this, new AndroidBroadcaster(this), SolidRendererThreads.numberOfBackgroundThreats());
         }
         return background;
     }
 
     @Override
-    public synchronized CacheService getCacheService() {
+    public synchronized CacheServiceInterface getCacheService() {
         if (cache == null) {
             cache = new CacheService(this);
             getElevationService();
@@ -166,14 +175,21 @@ public final class OneService extends AbsService  implements ServiceContext, Ser
     }
 
     @Override
-    public synchronized  DirectoryService getDirectoryService() {
+    public synchronized DirectoryServiceInterface getDirectoryService() {
         if (directory == null)
-            directory = new DirectoryService(this);
+            directory = new DirectoryService(
+                    this,
+                    new Storage(getContext()),
+                    new AndroidFocFactory(getContext()),
+                    new AndroidSummaryConfig(getContext()),
+                    () -> new AndroidDatabase(getContext()),
+                    new AndroidBroadcaster(getContext()),
+                    (info, previewImageFile) -> new MapsForgePreview(OneService.this, info, previewImageFile));
         return directory;
     }
 
     @Override
-    public synchronized  TrackerService getTrackerService() {
+    public synchronized TrackerServiceInterface getTrackerService() {
         if (tracker == null)
             tracker = new TrackerService(
                     new AndroidSolidDataDirectory(this),
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/ServiceContext.java b/aat-android/src/main/java/ch/bailu/aat/services/ServiceContext.java
index 13abe60f..7b576006 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/ServiceContext.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/ServiceContext.java
@@ -2,18 +2,13 @@ package ch.bailu.aat.services;
 
 import android.app.Notification;
 
-import ch.bailu.aat.services.background.BackgroundService;
-import ch.bailu.aat.services.cache.CacheService;
-import ch.bailu.aat.services.directory.DirectoryService;
 import ch.bailu.aat.services.elevation.ElevationService;
 import ch.bailu.aat.services.render.RenderService;
 import ch.bailu.aat.services.tileremover.TileRemoverService;
 import ch.bailu.aat.util.ContextWrapperInterface;
 import ch.bailu.aat_lib.service.IconMapServiceInterface;
 import ch.bailu.aat_lib.service.ServicesInterface;
-import ch.bailu.aat_lib.service.location.LocationServiceInterface;
 import ch.bailu.aat_lib.service.sensor.SensorServiceInterface;
-import ch.bailu.aat_lib.service.tracker.TrackerServiceInterface;
 
 public interface ServiceContext extends ContextWrapperInterface, ServicesInterface {
 
@@ -23,13 +18,8 @@ public interface ServiceContext extends ContextWrapperInterface, ServicesInterfa
     boolean lock();
     void    free();
 
-    LocationServiceInterface getLocationService();
-    TrackerServiceInterface getTrackerService();
-    BackgroundService getBackgroundService();
-    CacheService getCacheService();
     ElevationService getElevationService();
     IconMapServiceInterface getIconMapService();
-    DirectoryService getDirectoryService();
     TileRemoverService getTileRemoverService();
     RenderService getRenderService();
     SensorServiceInterface getSensorService();
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/ServiceLink.java b/aat-android/src/main/java/ch/bailu/aat/services/ServiceLink.java
index 7c00ea2e..10de14f8 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/ServiceLink.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/ServiceLink.java
@@ -11,7 +11,7 @@ import java.io.Closeable;
 
 import ch.bailu.aat.services.background.BackgroundService;
 import ch.bailu.aat.services.cache.CacheService;
-import ch.bailu.aat.services.directory.DirectoryService;
+import ch.bailu.aat_lib.service.directory.DirectoryService;
 import ch.bailu.aat.services.elevation.ElevationService;
 import ch.bailu.aat.services.render.RenderService;
 import ch.bailu.aat.services.tileremover.TileRemoverService;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundService.java b/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
index 0a1e5a79..8789512f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundService.java
@@ -3,40 +3,43 @@ package ch.bailu.aat.services.background;
 import java.net.URL;
 import java.util.HashMap;
 
-import ch.bailu.aat.preferences.map.SolidRendererThreads;
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.service.ServicesInterface;
 import ch.bailu.aat_lib.service.VirtualService;
+import ch.bailu.aat_lib.service.background.BackgroundServiceInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.background.DownloadTask;
+import ch.bailu.aat_lib.service.background.FileTask;
+import ch.bailu.aat_lib.service.background.Tasks;
 import ch.bailu.aat_lib.util.WithStatusText;
 import ch.bailu.foc.Foc;
 
-public final class BackgroundService extends VirtualService implements WithStatusText {
+public final class BackgroundService extends VirtualService implements BackgroundServiceInterface, WithStatusText {
 
     final static int FILE_LOADER_BASE_DIRECTORY_DEPTH = 4;
 
-    private final Tasks tasks = new Tasks();
+    private final Tasks tasks;
 
     private final HashMap<String, DownloaderThread> downloaders = new HashMap<>(5);
     private final HashMap<String, LoaderThread> loaders = new HashMap<>(5);
 
 
     private final HandleStack queue;
+    private final WorkerThread[] workers;
+    private final ServicesInterface scontext;
 
 
-    private final WorkerThread[] workers =
-            new WorkerThread[SolidRendererThreads.numberOfBackgroundThreats()];
-
-
-    private final ServiceContext scontext;
-
-    public BackgroundService(final ServiceContext sc) {
+    public BackgroundService(final ServicesInterface sc, Broadcaster broadcaster, int threads) {
         scontext = sc;
-        queue = new HandleStack(sc.getContext());
-        for (int i=0; i< workers.length; i++)
+        tasks = new Tasks(broadcaster);
+        queue = new HandleStack();
+        workers = new WorkerThread[threads];
+        for (int i=0; i< workers.length; i++) {
             workers[i] = new WorkerThread("WT_" + i, sc, queue);
-
-
+        }
     }
 
+
     public void process(BackgroundTask handle) {
         if (handle instanceof DownloadTask) {
             download((DownloadTask) handle);
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/DownloadTask.java b/aat-android/src/main/java/ch/bailu/aat/services/background/DownloadTask.java
deleted file mode 100644
index 396f82fb..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/DownloadTask.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package ch.bailu.aat.services.background;
-
-import android.content.Context;
-
-import androidx.annotation.NonNull;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.URL;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.ContextWrapperInterface;
-import ch.bailu.aat.util.OldAppBroadcaster;
-import ch.bailu.aat.util.net.URX;
-import ch.bailu.aat.app.AndroidAppConfig;
-import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
-import ch.bailu.aat_lib.logger.AppLog;
-import ch.bailu.foc.Foc;
-
-public class DownloadTask extends FileTask implements ContextWrapperInterface{
-
-
-    private final static int TIMEOUT = 30 * 1000;
-    private final static String USER_AGENT_KEY = "User-Agent";
-    private final static String USER_AGENT_VALUE = AndroidAppConfig.getInstance().getUserAgent();
-
-    private final static int IO_BUFFER_SIZE=8*1024;
-
-    private final URX urx;
-
-    private final Context context;
-
-    public DownloadTask(Context c, String source, Foc target) {
-        this(c, new URX(source), target);
-    }
-
-
-    public DownloadTask(Context c, URX source, Foc target) {
-        super(target);
-
-        urx = source;
-        context = c;
-    }
-
-
-
-
-    @Override
-    public long bgOnProcess(ServiceContext sc) {
-        long size = 0;
-
-        try {
-            size = bgDownload();
-            OldAppBroadcaster.broadcast(sc.getContext(),
-                    AppBroadcaster.FILE_CHANGED_ONDISK, getFile(), urx);
-
-        } catch (Exception e) {
-            logError(e);
-            setException(e);
-            getFile().rm();
-
-        }
-        return size;
-    }
-
-
-
-    protected long bgDownload() throws IOException {
-        return download(urx.toURL(), getFile());
-    }
-
-
-    protected void logError(Exception e) {
-        AppLog.w(this, getFile().getPathName());
-        AppLog.w(this, e);
-    }
-
-
-    @NonNull
-    @Override
-    public String toString() {
-        return urx.toString();
-    }
-
-
-
-    private long download(URL url, Foc file) throws IOException {
-        int count;
-        long total=0;
-        InputStream input = null;
-        OutputStream output = null;
-        HttpURLConnection connection;
-        byte[] buffer = new byte[IO_BUFFER_SIZE];
-
-
-        try {
-            output = file.openW();
-
-            connection = openConnection(url);
-            input = openInput(connection);
-
-
-            while (( count = input.read(buffer)) != -1) {
-
-                total+=count;
-                output.write(buffer, 0, count);
-            }
-
-
-        } finally {
-            Foc.close(output);
-            Foc.close(input);
-        }
-
-        return total;
-    }
-
-
-
-    private static HttpURLConnection openConnection(URL url) throws IOException {
-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-        connection.setConnectTimeout(TIMEOUT);
-        connection.setReadTimeout(TIMEOUT);
-        connection.setRequestProperty(USER_AGENT_KEY, USER_AGENT_VALUE);
-        return connection;
-
-    }
-
-
-    public static InputStream openInput(HttpURLConnection connection) throws IOException {
-        return connection.getInputStream();
-    }
-
-
-    public URX getSource() {
-        return urx;
-    }
-
-    @Override
-    public Context getContext() {
-        return context;
-    }
-
-
-}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/DownloaderThread.java b/aat-android/src/main/java/ch/bailu/aat/services/background/DownloaderThread.java
index 9bc814ca..31a7f82e 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/DownloaderThread.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/DownloaderThread.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.services.background;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 
 public final class DownloaderThread  extends WorkerThread {
     private final static int DOWNLOAD_QUEUE_SIZE=100;
@@ -11,7 +12,7 @@ public final class DownloaderThread  extends WorkerThread {
 
 
 
-    public DownloaderThread(ServiceContext sc, String s) {
+    public DownloaderThread(ServicesInterface sc, String s) {
         super("DT_" + s, sc, DOWNLOAD_QUEUE_SIZE);
         server = s;
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/HandleStack.java b/aat-android/src/main/java/ch/bailu/aat/services/background/HandleStack.java
index ed9bed54..edbc2bcc 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/HandleStack.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/HandleStack.java
@@ -1,28 +1,24 @@
 package ch.bailu.aat.services.background;
 
-import android.content.Context;
-
 import java.util.concurrent.BlockingDeque;
 import java.util.concurrent.LinkedBlockingDeque;
 
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+
 public final class HandleStack {
     private final static int DEFAULT_LIMIT = 5000;
 
     private final BlockingDeque<BackgroundTask> queue;
     private final int limit;
 
-    private final Context context;
-
-
-    public HandleStack(Context c) {
-        this(c, DEFAULT_LIMIT);
+    public HandleStack() {
+        this(DEFAULT_LIMIT);
     }
 
 
 
 
-    public HandleStack(Context c, int l) {
-        context = c;
+    public HandleStack(int l) {
         limit = l;
         queue = new LinkedBlockingDeque<>(limit);
     }
@@ -50,7 +46,7 @@ public final class HandleStack {
 
 
     private void insert(BackgroundTask handle) {
-        handle.onInsert(context);
+        handle.onInsert();
         queue.offerFirst(handle);
     }
 
@@ -59,7 +55,7 @@ public final class HandleStack {
         BackgroundTask handle = queue.pollLast();
 
         if (handle != null) {
-            handle.onRemove(context);
+            handle.onRemove();
         }
         return handle;
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/LoaderThread.java b/aat-android/src/main/java/ch/bailu/aat/services/background/LoaderThread.java
index 1655b5b4..c08c1d38 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/LoaderThread.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/LoaderThread.java
@@ -1,6 +1,7 @@
 package ch.bailu.aat.services.background;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 
 public final class LoaderThread extends WorkerThread {
     private static final int LOADER_QUEUE_SIZE = 100;
@@ -11,7 +12,7 @@ public final class LoaderThread extends WorkerThread {
     private long total_bytes=0;
 
 
-    public LoaderThread(ServiceContext sc, String d) {
+    public LoaderThread(ServicesInterface sc, String d) {
         super("LT_" + d, sc, LOADER_QUEUE_SIZE);
         directory=d;
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/ProcessThread.java b/aat-android/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
index ff90ac50..60ce85e2 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/ProcessThread.java
@@ -1,9 +1,8 @@
 package ch.bailu.aat.services.background;
 
-import android.content.Context;
-
 import java.io.Closeable;
 
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 import ch.bailu.aat_lib.service.background.ThreadControl;
 
 public abstract class ProcessThread extends Thread implements Closeable, ThreadControl {
@@ -13,19 +12,16 @@ public abstract class ProcessThread extends Thread implements Closeable, ThreadC
 
     private BackgroundTask current = BackgroundTask.NULL;
 
-    private final Context context;
-
 
-    public ProcessThread(String name, Context c, HandleStack q) {
+    public ProcessThread(String name, HandleStack q) {
         super(name);
         queue = q;
-        context = c;
         start();
     }
 
 
-    public ProcessThread(String name, Context c, int limit) {
-        this(name, c, new HandleStack(c, limit));
+    public ProcessThread(String name, int limit) {
+        this(name, new HandleStack(limit));
     }
 
 
@@ -36,7 +32,7 @@ public abstract class ProcessThread extends Thread implements Closeable, ThreadC
             try {
                 current = queue.take();
                 bgProcessHandle(current);
-                current.onRemove(context);
+                current.onRemove();
                 current = BackgroundTask.NULL;
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/WorkerThread.java b/aat-android/src/main/java/ch/bailu/aat/services/background/WorkerThread.java
index 6d46c35e..d0559c3c 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/WorkerThread.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/background/WorkerThread.java
@@ -1,21 +1,22 @@
 package ch.bailu.aat.services.background;
 
 import ch.bailu.aat_lib.service.InsideContext;
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 
 public class WorkerThread extends ProcessThread {
 
-    private final ServiceContext scontext;
+    private final ServicesInterface scontext;
 
 
-    public WorkerThread(String name, ServiceContext sc, int limit) {
-        super(name, sc.getContext(), limit);
+    public WorkerThread(String name, ServicesInterface sc, int limit) {
+        super(name, limit);
         scontext = sc;
     }
 
 
-    public WorkerThread(String name, ServiceContext sc, HandleStack q) {
-        super(name, sc.getContext(), q);
+    public WorkerThread(String name, ServicesInterface sc, HandleStack q) {
+        super(name, q);
         scontext = sc;
     }
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/CacheService.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/CacheService.java
index f47a6eff..16fe924b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/CacheService.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/CacheService.java
@@ -7,6 +7,9 @@ import android.content.Intent;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat_lib.preferences.system.SolidCacheSize;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.cache.CacheServiceInterface;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjBroadcastReceiver;
 import ch.bailu.aat_lib.util.MemSize;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
@@ -16,7 +19,7 @@ import ch.bailu.aat_lib.service.VirtualService;
 import ch.bailu.aat_lib.util.WithStatusText;
 
 
-public final class CacheService extends VirtualService implements OnPreferencesChanged, WithStatusText {
+public final class CacheService extends VirtualService implements CacheServiceInterface, OnPreferencesChanged, WithStatusText {
 
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/LockCache.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/LockCache.java
index fa40487f..4d4449c7 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/LockCache.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/LockCache.java
@@ -2,6 +2,8 @@ package ch.bailu.aat.services.cache;
 
 import java.io.Closeable;
 
+import ch.bailu.aat_lib.service.cache.Obj;
+
 @SuppressWarnings("unchecked")
 public final class LockCache<E extends Obj>  implements Closeable {
     private E[]    objects;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBitmap.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBitmap.java
index 124200c1..8d72735f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBitmap.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBitmap.java
@@ -3,10 +3,11 @@ package ch.bailu.aat.services.cache;
 import org.mapsforge.core.graphics.Bitmap;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.FileTask;
+import ch.bailu.aat_lib.service.background.FileTask;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncBitmap;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 import ch.bailu.foc_android.FocAndroid;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBroadcastReceiver.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBroadcastReceiver.java
deleted file mode 100644
index 42ad8933..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjBroadcastReceiver.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package ch.bailu.aat.services.cache;
-
-import ch.bailu.aat.services.ServiceContext;
-
-public interface ObjBroadcastReceiver {
-    void onDownloaded(String id, String url, ServiceContext sc);
-    void onChanged(String id, ServiceContext sc);
-}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxEditable.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxEditable.java
index b42685c7..dff1faf1 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxEditable.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxEditable.java
@@ -14,6 +14,8 @@ import ch.bailu.aat_lib.gpx.GpxPoint;
 import ch.bailu.aat_lib.gpx.GpxPointNode;
 import ch.bailu.aat_lib.gpx.interfaces.GpxType;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 import ch.bailu.aat_lib.xml.writer.GpxListWriter;
 import ch.bailu.foc.Foc;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxStatic.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxStatic.java
index 22c9e597..a9ca4851 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxStatic.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpxStatic.java
@@ -2,18 +2,17 @@ package ch.bailu.aat.services.cache;
 
 import android.util.SparseArray;
 
-import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
-import ch.bailu.aat_lib.gpx.GpxListWalker;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.FileTask;
-import ch.bailu.aat.services.elevation.tile.Dem3Status;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.background.FileTask;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 import ch.bailu.aat.services.elevation.updater.ElevationUpdaterClient;
 import ch.bailu.aat.util.OldAppBroadcaster;
+import ch.bailu.aat_lib.app.AppContext;
+import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.gpx.GpxList;
+import ch.bailu.aat_lib.gpx.GpxListWalker;
 import ch.bailu.aat_lib.gpx.GpxPoint;
 import ch.bailu.aat_lib.gpx.GpxPointLinkedNode;
 import ch.bailu.aat_lib.gpx.GpxPointNode;
@@ -23,10 +22,12 @@ import ch.bailu.aat_lib.gpx.linked_list.Node;
 import ch.bailu.aat_lib.preferences.SolidAutopause;
 import ch.bailu.aat_lib.preferences.general.SolidPostprocessedAutopause;
 import ch.bailu.aat_lib.preferences.presets.SolidPreset;
+import ch.bailu.aat_lib.service.InsideContext;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
 import ch.bailu.aat_lib.service.elevation.ElevationProvider;
 import ch.bailu.aat_lib.xml.parser.gpx.GpxListReader;
 import ch.bailu.foc.Foc;
-import ch.bailu.foc_android.FocAndroid;
 
 public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient {
 
@@ -38,26 +39,26 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
     private final Foc file;
 
 
-    public ObjGpxStatic(String id, ServiceContext sc) {
+    public ObjGpxStatic(String id, AppContext appContext) {
         super(id);
-        sc.getCacheService().addToBroadcaster(this);
+        appContext.getServices().getCacheService().addToBroadcaster(this);
 
-        file = FocAndroid.factory(sc.getContext(), id);
+        file = appContext.getFocFactory().toFoc(id);
     }
 
 
     @Override
-    public void onInsert(ServiceContext sc) {
-        reload(sc);
+    public void onInsert(AppContext appContext) {
+        reload(appContext);
     }
 
 
     @Override
-    public void onRemove(final ServiceContext sc) {
-        new InsideContext(sc) {
+    public void onRemove(final AppContext appContext) {
+        new InsideContext(appContext) {
             @Override
             public void run() {
-                sc.getElevationService().cancelElevationUpdates(ObjGpxStatic.this);
+                appContext.getServices().getElevationService().cancelElevationUpdates(ObjGpxStatic.this);
             }
         };
     }
@@ -68,8 +69,8 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
         return file;
     }
 
-    private void reload(final ServiceContext sc) {
-        sc.getBackgroundService().process(new FileLoader(file));
+    private void reload(final AppContext appContext) {
+        appContext.getServices().getBackgroundService().process(new FileLoader(file));
     }
 
 
@@ -102,22 +103,22 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
     public static class Factory extends Obj.Factory {
 
         @Override
-        public Obj factory(String id, ServiceContext sc) {
-            return new ObjGpxStatic(id, sc);
+        public Obj factory(String id, AppContext appContext) {
+            return new ObjGpxStatic(id, appContext);
         }
     }
 
 
 
     @Override
-    public void onDownloaded(String id, String url,  ServiceContext sc) {
+    public void onDownloaded(String id, String url,  AppContext appContext) {
         if (id.equals(getID())) {
-            reload(sc);
+            reload(appContext);
         }
     }
 
     @Override
-    public void onChanged(String id, ServiceContext sc) {}
+    public void onChanged(String id, AppContext appContext) {}
 
 
     public Dem3Coordinates[] getSrtmTileCoordinates() {
@@ -135,10 +136,10 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
 
 
     @Override
-    public void updateFromSrtmTile(ServiceContext sc, Dem3Tile srtm) {
+    public void updateFromSrtmTile(ServiceContext appContext, Dem3Tile srtm) {
         new ListUpdater(srtm).walkTrack(gpxList);
 
-        OldAppBroadcaster.broadcast(sc.getContext(), AppBroadcaster.FILE_CHANGED_INCACHE, toString());
+        OldAppBroadcaster.broadcast(appContext.getContext(), AppBroadcaster.FILE_CHANGED_INCACHE, toString());
 
     }
 
@@ -214,21 +215,20 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
         }
 
         @Override
-        public long bgOnProcess(final ServiceContext sc) {
+        public long bgOnProcess(final AppContext appContext) {
             final long[] size = {0};
 
-            new OnObject(sc, getID(), ObjGpxStatic.class) {
+            new OnObject(appContext, getID(), ObjGpxStatic.class) {
                 @Override
                 public void run(Obj handle) {
                     ObjGpxStatic owner = (ObjGpxStatic) handle;
 
-                    size[0] = load(sc, owner);
+                    size[0] = load(appContext, owner);
 
-                    sc.getElevationService().requestElevationUpdates(owner,
+                    appContext.getServices().getElevationService().requestElevationUpdates(owner,
                             owner.getSrtmTileCoordinates());
 
-                    OldAppBroadcaster.broadcast(sc.getContext(),
-                            AppBroadcaster.FILE_CHANGED_INCACHE, getID());
+                    appContext.getBroadcaster().broadcast(AppBroadcaster.FILE_CHANGED_INCACHE, getID());
 
                 }
             };
@@ -237,13 +237,13 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
         }
 
 
-        private long load(ServiceContext sc, ObjGpxStatic handle) {
+        private long load(AppContext appContext, ObjGpxStatic handle) {
             long size = 0;
 
             GpxListReader reader = new GpxListReader(
                     getThreadControl(),
                     getFile(),
-                    getAutoPause(sc, SolidPreset.getPresetFromFile(getFile())));
+                    getAutoPause(appContext, SolidPreset.getPresetFromFile(getFile())));
 
             handle.setException(reader.getException());
 
@@ -257,8 +257,8 @@ public final class ObjGpxStatic extends ObjGpx implements ElevationUpdaterClient
         }
 
 
-        private AutoPause getAutoPause(ServiceContext sc, int preset) {
-            SolidAutopause spause = new SolidPostprocessedAutopause(new Storage(sc.getContext()), preset);
+        private AutoPause getAutoPause(AppContext appContext, int preset) {
+            SolidAutopause spause = new SolidPostprocessedAutopause(appContext.getStorage(), preset);
             return new AutoPause.Time(
                     spause.getTriggerSpeed(),
                     spause.getTriggerLevelMillis());
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjImageAbstract.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjImageAbstract.java
index a29d9ece..fb70bfde 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjImageAbstract.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjImageAbstract.java
@@ -1,9 +1,10 @@
 package ch.bailu.aat.services.cache;
 
 
-import ch.bailu.aat_lib.service.cache.ObjeImageInterface;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjImageInterface;
 
-public abstract class ObjImageAbstract extends Obj implements ObjeImageInterface {
+public abstract class ObjImageAbstract extends Obj implements ObjImageInterface {
     public ObjImageAbstract(String id) {
         super(id);
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjSVGAsset.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjSVGAsset.java
index c189f7ec..57516639 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjSVGAsset.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjSVGAsset.java
@@ -5,10 +5,11 @@ import com.caverock.androidsvg.SVG;
 import org.mapsforge.core.graphics.Bitmap;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public final class ObjSVGAsset extends ObjImageAbstract {
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTile.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTile.java
index 4b5c647e..34d4658d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTile.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTile.java
@@ -7,6 +7,7 @@ import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public abstract class ObjTile extends Obj {
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCacheOnly.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCacheOnly.java
index 7896287e..bface186 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCacheOnly.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCacheOnly.java
@@ -9,10 +9,11 @@ import ch.bailu.aat.map.tile.TileFlags;
 import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat_lib.preferences.map.SolidTileSize;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.FileTask;
+import ch.bailu.aat_lib.service.background.FileTask;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 import ch.bailu.foc_android.FocAndroid;
 import ch.bailu.aat_lib.util.Objects;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCached.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCached.java
index 6de1ab53..596ff123 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCached.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileCached.java
@@ -11,6 +11,7 @@ import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 import ch.bailu.foc_android.FocAndroid;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileDownloadable.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileDownloadable.java
index 91df64c3..d9093198 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileDownloadable.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileDownloadable.java
@@ -4,7 +4,8 @@ import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.map.tile.source.DownloadSource;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.DownloadTask;
+import ch.bailu.aat_lib.service.background.DownloadTask;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 
 public class ObjTileDownloadable extends ObjTileCacheOnly {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileMapsForge.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileMapsForge.java
index 3ee52e6f..573ab1f3 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileMapsForge.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjTileMapsForge.java
@@ -10,6 +10,7 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 public final class ObjTileMapsForge extends ObjTile {
     private static long DEFAULT_SIZE = SolidTileSize.DEFAULT_TILESIZE_BYTES * 4;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectBroadcaster.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectBroadcaster.java
index ffec658d..7977da6f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectBroadcaster.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectBroadcaster.java
@@ -11,6 +11,7 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.service.cache.ObjBroadcastReceiver;
 
 public final class ObjectBroadcaster implements Closeable {
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
index 98bb39f1..81f5da2d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjectTable.java
@@ -5,8 +5,10 @@ import android.content.Intent;
 import java.util.HashMap;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj.Factory;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj.Factory;
 import ch.bailu.aat.util.AppIntent;
+import ch.bailu.aat_lib.service.cache.ObjNull;
 import ch.bailu.aat_lib.util.MemSize;
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/OnObject.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/OnObject.java
index 5b871b16..ef48e01c 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/OnObject.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/OnObject.java
@@ -1,28 +1,29 @@
 package ch.bailu.aat.services.cache;
 
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.service.InsideContext;
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.cache.Obj;
 
 
 public abstract class OnObject {
-    public OnObject(final ServiceContext sc, final String id, final Class c) {
-        this (sc, id, c, null);
+    public OnObject(final AppContext appContext, final String id, final Class c) {
+        this (appContext, id, c, null);
     }
 
 
-    public OnObject(final ServiceContext sc, final String id, final Class c,
+    public OnObject(final AppContext appContext, final String id, final Class c,
                     final Obj.Factory factory) {
 
-        new InsideContext(sc) {
+        new InsideContext(appContext.getServices()) {
             @Override
             public void run() {
                 Obj handle;
 
                 if (factory == null)
-                    handle = sc.getCacheService().getObject(id);
+                    handle = appContext.getServices().getCacheService().getObject(id);
 
                 else
-                    handle = sc.getCacheService().getObject(id, factory);
+                    handle = appContext.getServices().getCacheService().getObject(id, factory);
 
                 try {
                     if (c.isInstance(handle))
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/SaveTileTask.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/SaveTileTask.java
index ecb28aab..7d6edfe5 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/SaveTileTask.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/SaveTileTask.java
@@ -5,10 +5,11 @@ import android.graphics.Bitmap;
 import java.io.OutputStream;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.FileTask;
+import ch.bailu.aat_lib.service.background.FileTask;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 
 public final class SaveTileTask extends FileTask {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjHillshadeColorTable.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjHillshadeColorTable.java
index 68b83d61..62cc3d07 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjHillshadeColorTable.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjHillshadeColorTable.java
@@ -1,8 +1,8 @@
 package ch.bailu.aat.services.cache.elevation;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.elevation.tile.MultiCell;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevation.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevation.java
index 67a8b051..1184d0cf 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevation.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevation.java
@@ -10,13 +10,14 @@ import org.mapsforge.core.model.Tile;
 import ch.bailu.aat_lib.preferences.map.SolidTileSize;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjTile;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
-import ch.bailu.aat.services.elevation.tile.DemDimension;
-import ch.bailu.aat.services.elevation.tile.DemGeoToIndex;
-import ch.bailu.aat.services.elevation.tile.DemProvider;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.elevation.tile.DemDimension;
+import ch.bailu.aat_lib.service.elevation.tile.DemGeoToIndex;
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
 import ch.bailu.aat.services.elevation.tile.DemSplitter;
 import ch.bailu.aat.services.elevation.updater.ElevationUpdaterClient;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
+import ch.bailu.aat_lib.service.ServicesInterface;
 
 public abstract class ObjTileElevation extends ObjTile implements ElevationUpdaterClient {
 
@@ -134,7 +135,7 @@ public abstract class ObjTileElevation extends ObjTile implements ElevationUpdat
 
 
     @Override
-    public void updateFromSrtmTile(ServiceContext sc, Dem3Tile tile) {
+    public void updateFromSrtmTile(ServicesInterface sc, Dem3Tile tile) {
         sc.getBackgroundService().process(new SubTilePainter(sc, getID(), tile));
     }
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevationColor.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevationColor.java
index 48d9b280..bc16f80f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevationColor.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileElevationColor.java
@@ -3,8 +3,8 @@ package ch.bailu.aat.services.cache.elevation;
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.elevation.tile.DemProvider;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
 import ch.bailu.aat_lib.util.color.AltitudeColorTable;
 
 public final class ObjTileElevationColor extends ObjTileElevation {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileHillshade.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileHillshade.java
index 48219266..3381f74a 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileHillshade.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/ObjTileHillshade.java
@@ -3,10 +3,10 @@ package ch.bailu.aat.services.cache.elevation;
 import org.mapsforge.core.model.Tile;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.elevation.tile.DemDimension;
-import ch.bailu.aat.services.elevation.tile.DemGeoToIndex;
-import ch.bailu.aat.services.elevation.tile.DemProvider;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.elevation.tile.DemDimension;
+import ch.bailu.aat_lib.service.elevation.tile.DemGeoToIndex;
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
 import ch.bailu.aat.services.elevation.tile.DemSplitter;
 import ch.bailu.aat.services.elevation.tile.MultiCell;
 import ch.bailu.aat.services.elevation.tile.MultiCell8;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/Raster.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/Raster.java
index 50ed6cd3..18a03b7e 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/Raster.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/Raster.java
@@ -11,7 +11,7 @@ import java.util.ArrayList;
 
 import ch.bailu.aat_lib.preferences.map.SolidTileSize;
 import ch.bailu.aat.services.cache.Span;
-import ch.bailu.aat.services.elevation.tile.DemGeoToIndex;
+import ch.bailu.aat_lib.service.elevation.tile.DemGeoToIndex;
 
 public final class Raster {
     public final int[] toLaRaster = new int[SolidTileSize.DEFAULT_TILESIZE];
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/RasterInitializer.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/RasterInitializer.java
index 946a1b08..edcebfab 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/RasterInitializer.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/RasterInitializer.java
@@ -1,8 +1,8 @@
 package ch.bailu.aat.services.cache.elevation;
 
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.OnObject;
 
 public final class RasterInitializer extends BackgroundTask {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/SubTilePainter.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/SubTilePainter.java
index 1f14dfe0..2a0b4f4f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/SubTilePainter.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/elevation/SubTilePainter.java
@@ -1,14 +1,12 @@
 package ch.bailu.aat.services.cache.elevation;
 
-import android.content.Context;
-
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.service.InsideContext;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.OnObject;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
-import ch.bailu.aat.util.OldAppBroadcaster;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 
 public final class SubTilePainter extends BackgroundTask {
@@ -17,9 +15,9 @@ public final class SubTilePainter extends BackgroundTask {
     private final String iid;
 
 
-    private final ServiceContext scontext;
+    private final ServicesInterface scontext;
 
-    public SubTilePainter(ServiceContext sc, String i, Dem3Tile t) {
+    public SubTilePainter(ServicesInterface sc, String i, Dem3Tile t) {
         scontext = sc;
 
         iid = i;
@@ -28,22 +26,22 @@ public final class SubTilePainter extends BackgroundTask {
 
 
     @Override
-    public void onInsert(Context c) {
+    public void onInsert() {
         tile.lock(this);
     }
 
 
     @Override
-    public long bgOnProcess(final ServiceContext sc) {
+    public long bgOnProcess(final AppContext appContext) {
         final long[] size = {0};
 
-        new OnObject(sc, iid, ObjTileElevation.class) {
+        new OnObject(appContext, iid, ObjTileElevation.class) {
             @Override
             public void run(Obj handle) {
                 ObjTileElevation owner = (ObjTileElevation) handle;
 
                 size[0] = owner.bgOnProcessPainter(tile);
-                OldAppBroadcaster.broadcast(sc.getContext(), AppBroadcaster.FILE_CHANGED_INCACHE, iid);
+                appContext.getBroadcaster().broadcast(AppBroadcaster.FILE_CHANGED_INCACHE, iid);
             }
         };
 
@@ -51,7 +49,7 @@ public final class SubTilePainter extends BackgroundTask {
     }
 
     @Override
-    public void onRemove(Context c) {
+    public void onRemove() {
         tile.free(this);
 
         new InsideContext(scontext) {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/osm_features/ObjMapFeatures.java b/aat-android/src/main/java/ch/bailu/aat/services/cache/osm_features/ObjMapFeatures.java
index dcba47ac..4e28adb2 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/osm_features/ObjMapFeatures.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/cache/osm_features/ObjMapFeatures.java
@@ -8,8 +8,8 @@ import java.util.ArrayList;
 
 import ch.bailu.aat.preferences.map.SolidOsmFeaturesList;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.OnObject;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.filter_list.AbsFilterList;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/AndroidSummaryConfig.java b/aat-android/src/main/java/ch/bailu/aat/services/directory/AndroidSummaryConfig.java
new file mode 100644
index 00000000..21a4aefe
--- /dev/null
+++ b/aat-android/src/main/java/ch/bailu/aat/services/directory/AndroidSummaryConfig.java
@@ -0,0 +1,35 @@
+package ch.bailu.aat.services.directory;
+
+import android.content.Context;
+
+import ch.bailu.aat_lib.service.directory.SummaryConfig;
+import ch.bailu.aat_lib.util.fs.AppDirectory;
+import ch.bailu.foc.Foc;
+import ch.bailu.foc.FocFile;
+
+public final class AndroidSummaryConfig extends SummaryConfig {
+    private final Context context;
+
+    public AndroidSummaryConfig(Context context) {
+        this.context = context;
+    }
+
+     @Override
+    public Foc getSummaryDir(Foc dir) {
+        Foc summaryDir;
+
+        if (dir instanceof FocFile && dir.mkdirs() && dir.canWrite()) {
+            summaryDir = dir.child(AppDirectory.DIR_CACHE);
+
+        } else {
+
+            summaryDir = new FocFile(context.getCacheDir())
+                    .child("summary")
+                    .child(String.valueOf(dir.hashCode()));
+        }
+        summaryDir.mkdirs();
+
+        return summaryDir;
+
+    }
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java b/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
deleted file mode 100644
index 09cdc303..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package ch.bailu.aat.services.directory;
-
-import android.content.ContentValues;
-import android.content.Context;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCantOpenDatabaseException;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-
-import java.io.IOException;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.foc.Foc;
-
-
-public final class GpxDatabase extends AbsDatabase{
-
-    private final Context context;
-
-    private final String[] keys;
-
-    private final SQLiteDatabase database;
-
-
-
-    public GpxDatabase (ServiceContext sc, String path, String[] k)
-            throws IOException, SQLiteCantOpenDatabaseException{
-
-        keys = k;
-        context=sc.getContext();
-        database = openDatabase(path);
-    }
-
-    public GpxDatabase (ServiceContext sc, String path)
-            throws IOException, SQLiteCantOpenDatabaseException {
-
-        this(sc, path, GpxDbConstants.KEY_LIST_NEW);
-    }
-
-
-    private SQLiteDatabase openDatabase(String path) throws SQLiteCantOpenDatabaseException {
-        return new GpxDbOpenHelper(context, path).getReadableDatabase();
-    }
-
-    @Override
-    public Cursor query(String selection) {
-        return database.query(
-                GpxDbConstants.DB_TABLE,
-                keys,
-                selection,
-                null, null, null,
-                GpxDbConstants.KEY_START_TIME+ " DESC");
-    }
-
-
-    @Override
-    public void close() {
-        database.close();
-    }
-
-    @Override
-    public void deleteEntry(Foc file) throws SQLiteException {
-        final String where = GpxDbConstants.KEY_FILENAME + "=?";
-        database.delete(GpxDbConstants.DB_TABLE, where,
-                        new String[]{file.getName()});
-    }
-
-    public void insert(ContentValues content) {
-        database.insert(GpxDbConstants.DB_TABLE, null, content);
-    }
-}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java b/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
deleted file mode 100644
index f7ee9f53..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package ch.bailu.aat.services.directory;
-
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-
-public final class GpxDbOpenHelper extends SQLiteOpenHelper {
-
-
-
-
-    public GpxDbOpenHelper(Context context, String path) {
-        super(context, path, null, GpxDbConstants.DB_VERSION);
-    }
-
-
-
-    @Override
-    public void onCreate(SQLiteDatabase db) {
-        db.execSQL(buildCreateExpression());
-    }
-
-    private String buildCreateExpression() {
-        StringBuilder expression= new StringBuilder();
-        expression
-                .append("CREATE TABLE ")
-                .append(GpxDbConstants.DB_TABLE)
-                .append(" (");
-
-        for (int i = 0; i<GpxDbConstants.KEY_LIST_OLD.length; i++) {
-            if (i> 0) expression.append(", ");
-            expression.append(GpxDbConstants.KEY_LIST_OLD[i]).append(" ").append(GpxDbConstants.TYPE_LIST_OLD[i]);
-        }
-        expression.append(")");
-        return expression.toString();
-    }
-
-    @Override
-    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-        db.execSQL("DROP TABLE IF EXISTS " + GpxDbConstants.DB_TABLE);
-        onCreate(db);
-    }
-
-    @Override
-    public void onOpen(SQLiteDatabase db) {}
-}
-
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java b/aat-android/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java
deleted file mode 100644
index 46e51890..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/SummaryConfig.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package ch.bailu.aat.services.directory;
-
-import android.content.Context;
-
-import ch.bailu.aat_lib.util.fs.AppDirectory;
-import ch.bailu.foc.Foc;
-import ch.bailu.foc.FocFile;
-
-public final class SummaryConfig {
-    public static String getWriteableDBPath(Context context, Foc dir) {
-        return getWriteableSummaryDir(context, dir)
-                .child(AppDirectory.FILE_CACHE_DB)
-                .toString();
-    }
-
-
-    public static Foc getWriteableSummaryDir(Context context, Foc dir) {
-        Foc summaryDir;
-
-        if (dir instanceof FocFile && dir.mkdirs() && dir.canWrite()) {
-            summaryDir = dir.child(AppDirectory.DIR_CACHE);
-
-        } else {
-
-            summaryDir = new FocFile(context.getCacheDir())
-                    .child("summary")
-                    .child(String.valueOf(dir.hashCode()));
-        }
-        summaryDir.mkdirs();
-
-        return summaryDir;
-
-    }
-
-
-    static public Foc getWriteablePreviewFile(Context context, Foc gpxFile)  {
-        String name = gpxFile.getName();
-        Foc dir = gpxFile.parent();
-
-        dir = getWriteableSummaryDir(context, dir);
-
-        return dir.child(name + AppDirectory.PREVIEW_EXTENSION);
-
-    }
-
-    public static Foc getReadablePreviewFile(Context context, Foc gpxFile) {
-        return getWriteablePreviewFile(context, gpxFile);
-    }
-}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java b/aat-android/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
index bf484ac0..2b856a04 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
@@ -1,11 +1,10 @@
 package ch.bailu.aat.services.editor;
 
 import ch.bailu.aat.preferences.system.AndroidSolidDataDirectory;
-import ch.bailu.aat.preferences.system.AndroidSolidDataDirectoryDefault;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjGpxEditable;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjNull;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjNull;
 import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.gpx.InfoID;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Loader.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Loader.java
index 5f0c1279..c9aa87e4 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Loader.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Loader.java
@@ -4,8 +4,8 @@ import java.io.Closeable;
 
 import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.elevation.tile.Dem3Status;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 import ch.bailu.aat_lib.service.elevation.ElevationProvider;
 
 public final class Dem3Loader implements Closeable, ElevationProvider {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3TileLoader.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3TileLoader.java
index 4cc0fdcb..618bffef 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3TileLoader.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3TileLoader.java
@@ -6,11 +6,11 @@ import android.content.Intent;
 
 import java.io.Closeable;
 
-import ch.bailu.aat.preferences.map.SolidDem3Directory;
+import ch.bailu.aat_lib.preferences.map.SolidDem3Directory;
 import ch.bailu.aat.preferences.map.SolidDem3EnableDownload;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.DownloadTask;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.background.DownloadTask;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat.util.Timer;
@@ -123,7 +123,7 @@ public final class Dem3TileLoader implements Closeable {
     private void downloadNow(Dem3Coordinates c) {
         Foc file = new SolidDem3Directory(scontext.getContext()).toFile(c);
         if (!file.exists()) {
-            DownloadTask handle = new DownloadTask(scontext.getContext(), c.toURL(), file);
+            DownloadTask handle = new DownloadTask(c.toURL(), file);
             scontext.getBackgroundService().process(handle);
         }
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Tiles.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Tiles.java
index 5b13b391..4c170716 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Tiles.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/loader/Dem3Tiles.java
@@ -1,8 +1,8 @@
 package ch.bailu.aat.services.elevation.loader;
 
 import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
-import ch.bailu.aat.services.elevation.tile.Dem3Status;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 
 
 public final class Dem3Tiles {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitter.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitter.java
index dc29611a..d650a162 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitter.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitter.java
@@ -1,6 +1,9 @@
 package ch.bailu.aat.services.elevation.tile;
 
 
+import ch.bailu.aat_lib.service.elevation.tile.DemDimension;
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public class DemSplitter implements DemProvider {
     public final DemProvider parent;
     public final int dim, parent_dim;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNE.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNE.java
index 82c92424..599278a9 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNE.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNE.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class DemSplitterNE extends DemSplitter {
 
     public DemSplitterNE(DemProvider p) {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNW.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNW.java
index eaa7524e..172ca789 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNW.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterNW.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class DemSplitterNW extends DemSplitter {
 
     public DemSplitterNW(DemProvider p) {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSE.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSE.java
index d06efe7c..efca7f0d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSE.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSE.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class DemSplitterSE extends DemSplitter {
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSW.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSW.java
index b430899c..199e502f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSW.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemSplitterSW.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class DemSplitterSW extends DemSplitter {
 
     public DemSplitterSW(DemProvider p) {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell.java
index bc3a9ae2..4e517381 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public abstract class MultiCell {
 
     public abstract void set(final int e);
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NE.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NE.java
index 604c8635..9c890e18 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NE.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NE.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class MultiCell4NE extends MultiCell {
     /**
      *      a  b
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NW.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NW.java
index ebaf04bc..fc52b875 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NW.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4NW.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class MultiCell4NW extends MultiCell {
     /*
      *      a  b
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SE.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SE.java
index 947a7a78..329e15f9 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SE.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SE.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class MultiCell4SE extends MultiCell {
     /**
      *      A  b
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SW.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SW.java
index d51ce9f3..b06e0237 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SW.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell4SW.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class MultiCell4SW extends MultiCell {
     /**
      *      a  B
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell8.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell8.java
index 0e2886c2..8ac9ea3b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell8.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/MultiCell8.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.elevation.tile;
 
+import ch.bailu.aat_lib.service.elevation.tile.DemProvider;
+
 public final class MultiCell8 extends MultiCell {
     /**
      *      a  b  c
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdater.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdater.java
index 8b04ce8c..fb8c38ee 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdater.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdater.java
@@ -12,8 +12,8 @@ import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.elevation.loader.Dem3Loader;
 import ch.bailu.aat.services.elevation.loader.Dem3Tiles;
-import ch.bailu.aat.services.elevation.tile.Dem3Status;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdaterClient.java b/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdaterClient.java
index 70bdc539..67cbcf87 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdaterClient.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/elevation/updater/ElevationUpdaterClient.java
@@ -1,11 +1,9 @@
 package ch.bailu.aat.services.elevation.updater;
 
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Tile;
+import ch.bailu.aat_lib.service.ServicesInterface;
 
 public interface ElevationUpdaterClient {
-    //SrtmCoordinates[] getSrtmTileCoordinates();
-
-    void updateFromSrtmTile(ServiceContext cs, Dem3Tile tile);
+    void updateFromSrtmTile(ServicesInterface cs, Dem3Tile tile);
 }
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/icons/IconCache.java b/aat-android/src/main/java/ch/bailu/aat/services/icons/IconCache.java
index 80658af5..c7d26060 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/icons/IconCache.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/icons/IconCache.java
@@ -4,7 +4,7 @@ import java.io.Closeable;
 
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.LockCache;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.ObjImageAbstract;
 import ch.bailu.aat.services.cache.ObjSVGAsset;
 import ch.bailu.aat_lib.util.WithStatusText;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/sensor/SensorService.java b/aat-android/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
index 7f9b98a4..06808e40 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
+++ b/aat-android/src/main/java/ch/bailu/aat/services/sensor/SensorService.java
@@ -45,33 +45,20 @@ public final class SensorService extends VirtualService implements WithStatusTex
     }
 
 
-    final BroadcastReceiver onBluetoothStateChanged = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Object ...args) {
-            Integer state = (Integer) args[0];
-            if (state == BluetoothAdapter.STATE_ON || state == BluetoothAdapter.STATE_OFF) {
-                updateConnections();
-            }
+    final BroadcastReceiver onBluetoothStateChanged = args -> {
+        Integer state = (Integer) args[0];
+        if (state == BluetoothAdapter.STATE_ON || state == BluetoothAdapter.STATE_OFF) {
+            updateConnections();
         }
-
-
     };
 
 
-    final BroadcastReceiver onSensorDisconnected = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Object ...args) {
-            updateConnections();
-        }
-    };
+    final BroadcastReceiver onSensorDisconnected = args -> updateConnections();
 
 
-    final BroadcastReceiver onSensorReconnect = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Object ...args) {
-            updateConnections();
-            scan();                        // rescan to get them in cache if they were not
-        }
+    final BroadcastReceiver onSensorReconnect = args -> {
+        updateConnections();
+        scan();                        // rescan to get them in cache if they were not
     };
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/AbsServiceLink.java b/aat-android/src/main/java/ch/bailu/aat/util/AbsServiceLink.java
index 7887662a..c63f6b59 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/AbsServiceLink.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/AbsServiceLink.java
@@ -5,9 +5,10 @@ import android.os.Bundle;
 
 import ch.bailu.aat.activities.AbsHardwareButtons;
 import ch.bailu.aat.dispatcher.AndroidBroadcaster;
-import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.ServiceLink;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.service.ServicesInterface;
 
 public abstract class AbsServiceLink extends AbsHardwareButtons {
 
@@ -80,7 +81,17 @@ public abstract class AbsServiceLink extends AbsHardwareButtons {
     }
 
 
-    public ServiceContext getServiceContext() {
+    public AppContext getAppContext() {
+        return new AppContext() {
+            @Override
+            public int hashCode() {
+                return super.hashCode();
+            }
+        };
+    }
+
+
+    public ServicesInterface getServiceContext() {
         return serviceLink;
     }
     public Broadcaster getBroadcaster() {return broadcaster;}
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/DownloadApi.java b/aat-android/src/main/java/ch/bailu/aat/util/DownloadApi.java
index 14375518..fb57cf66 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/DownloadApi.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/DownloadApi.java
@@ -6,11 +6,11 @@ import java.io.UnsupportedEncodingException;
 
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundService;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.background.DownloadTask;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.background.DownloadTask;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.service.background.BackgroundServiceInterface;
 import ch.bailu.foc.Foc;
 
 public abstract class DownloadApi extends OsmApiConfiguration {
@@ -61,7 +61,7 @@ public abstract class DownloadApi extends OsmApiConfiguration {
             public void run() {
 
                 try {
-                    BackgroundService background = scontext.getBackgroundService();
+                    BackgroundServiceInterface background = scontext.getBackgroundService();
 
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/OldAppBroadcaster.java b/aat-android/src/main/java/ch/bailu/aat/util/OldAppBroadcaster.java
index 2bfdb76d..41e7ee8b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/OldAppBroadcaster.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/OldAppBroadcaster.java
@@ -5,7 +5,7 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 
-import ch.bailu.aat.util.net.URX;
+import ch.bailu.aat_lib.util.net.URX;
 import ch.bailu.foc.Foc;
 
 public class OldAppBroadcaster {
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/OsmApiConfiguration.java b/aat-android/src/main/java/ch/bailu/aat/util/OsmApiConfiguration.java
index 4b4a02c4..67f708c2 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/OsmApiConfiguration.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/OsmApiConfiguration.java
@@ -5,7 +5,7 @@ import java.io.UnsupportedEncodingException;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.BackgroundService;
-import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 import ch.bailu.foc.Foc;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/PoiApi.java b/aat-android/src/main/java/ch/bailu/aat/util/PoiApi.java
index 65d7f8b3..ec46716a 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/PoiApi.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/PoiApi.java
@@ -20,8 +20,8 @@ import ch.bailu.aat.preferences.map.SolidPoiDatabase;
 import ch.bailu.aat.preferences.system.AndroidSolidDataDirectory;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.background.FileTask;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.background.FileTask;
 import ch.bailu.aat_lib.coordinates.BoundingBoxE6;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/fs/AFile.java b/aat-android/src/main/java/ch/bailu/aat/util/fs/AFile.java
deleted file mode 100644
index 5afbc5c5..00000000
--- a/aat-android/src/main/java/ch/bailu/aat/util/fs/AFile.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package ch.bailu.aat.util.fs;
-
-import android.content.Context;
-
-import ch.bailu.aat.R;
-import ch.bailu.aat_lib.util.MemSize;
-import ch.bailu.aat_lib.logger.AppLog;
-import ch.bailu.foc.Foc;
-
-public class AFile extends MemSize {
-    public static void logErrorExists(Context c, Foc f) {
-        AppLog.e(c, f.getPathName() + c.getString(R.string.file_exists));
-    }
-
-
-    public static void logErrorReadOnly(Context c, Foc f) {
-        AppLog.e(c, f.getPathName() + " is read only.*");
-    }
-
-    public static void logErrorNoAccess(Context c, Foc f) {
-        AppLog.e(c, f.getPathName() + " no access.*");
-    }
-
-
-    public static void logInfoAcess(Context c, Foc f) {
-        String msg = ": no acess.*";
-        if (f.canWrite()) {
-            msg = " is writeable.*";
-        } else if (f.canRead()) {
-            msg = " is read only.*";
-        }
-
-        AppLog.i(c, f.getPathName() + msg);
-    }
-
-
-}
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/fs/FileAction.java b/aat-android/src/main/java/ch/bailu/aat/util/fs/FileAction.java
index 1086dfbc..62204132 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/fs/FileAction.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/fs/FileAction.java
@@ -10,7 +10,7 @@ import java.io.IOException;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.factory.AndroidFocFactory;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat_lib.preferences.location.SolidMockLocationFile;
 import ch.bailu.aat.services.ServiceContext;
@@ -21,6 +21,7 @@ import ch.bailu.aat.util.ui.AppSelectDirectoryDialog;
 import ch.bailu.aat.views.preferences.AddOverlayDialog;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.util.fs.AFile;
 import ch.bailu.aat_lib.util.fs.AppDirectory;
 import ch.bailu.foc.Foc;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncBitmap.java b/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncBitmap.java
index 26d9f76e..a1460703 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncBitmap.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncBitmap.java
@@ -10,7 +10,7 @@ import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 
 public class SyncBitmap {
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java b/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
index 57954b4d..7e6e0b8b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/graphic/SyncTileBitmap.java
@@ -14,7 +14,7 @@ import org.mapsforge.map.android.graphics.AndroidGraphicFactory;
 import java.io.IOException;
 import java.io.InputStream;
 
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.foc.Foc;
 
 public class SyncTileBitmap {
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidDatabase.java b/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidDatabase.java
index 5103383b..49bfd897 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidDatabase.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidDatabase.java
@@ -1,5 +1,6 @@
 package ch.bailu.aat.util.sql;
 
+import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -8,62 +9,124 @@ import android.database.sqlite.SQLiteOpenHelper;
 import androidx.annotation.Nullable;
 
 import ch.bailu.aat_lib.util.sql.Database;
+import ch.bailu.aat_lib.util.sql.DbException;
 import ch.bailu.aat_lib.util.sql.ResultSet;
 
 public class AndroidDatabase implements Database {
 
-    private final SQLiteDatabase database;
+    private SQLiteDatabase database;
+    private boolean needsUpdate = false;
+    private final Context context;
 
-    public AndroidDatabase(Context context, String path, int version, OnModelUpdate update) {
-        database =  new OpenHelper(context, path, null , version, update).getReadableDatabase();
+    public AndroidDatabase(Context context) {
+        this.context = context;
     }
 
 
     @Override
-    public void open(String path, int version, OnModelUpdate update) {}
+    public void open(String path, int version, OnModelUpdate update) {
+        try {
+            close();
+            database = new OpenHelper(context, path, null, version).getReadableDatabase();
+            if (needsUpdate) {
+                update.run(this);
+                needsUpdate = false;
+            }
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
+
+    }
+
+    @Override
+    public void execSQL(String sql) {
+        try {
+            if (isOpen()) {
+                database.execSQL(sql);
+            }
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
+    }
 
     @Override
     public ResultSet query(String table, String[] keys, String selection, String[] selectionArgs, String groupBy, String having, String orderBy) {
-        Cursor cursor = database.query(
-                table,
-                keys,
-                selection,
-                selectionArgs, groupBy, having,
-                orderBy);
-        return new AndroidResultSet(cursor);
+        try {
+            if (isOpen()) {
+                Cursor cursor = database.query(
+                        table,
+                        keys,
+                        selection,
+                        selectionArgs, groupBy, having,
+                        orderBy);
+                return new AndroidResultSet(cursor);
+            }
+            return null;
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
     }
 
     @Override
     public void delete(String table, String where, String[] whereArgs) {
-        database.delete(table, where, whereArgs);
+        try {
+            if (isOpen())
+                database.delete(table, where, whereArgs);
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
     }
 
     @Override
-    public void insert(String table, String[] keys, String[] types, String[] values) {
-
+    public void insert(String table, String[] keys, String[] values) {
+        try {
+            if (isOpen() && keys.length == values.length) {
+                ContentValues contentValues = new ContentValues();
+                for (int i = 0; i < keys.length; i++) {
+                    contentValues.put(keys[i], values[i]);
+                }
+                database.insert(table, null, contentValues);
+            }
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
     }
 
     @Override
     public void close() {
-        database.close();
+        try {
+            if (isOpen()) {
+                database.close();
+                database = null;
+            }
+        } catch (Exception e) {
+            throw new DbException(e);
+        }
     }
 
-     private static class OpenHelper extends SQLiteOpenHelper {
+     private class OpenHelper extends SQLiteOpenHelper {
 
-        private final OnModelUpdate onUpdate;
-        public OpenHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version, OnModelUpdate update) {
+        public OpenHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) {
             super(context, name, factory, version);
-            onUpdate=update;
         }
 
         @Override
         public void onCreate(SQLiteDatabase db) {
-            onUpdate.run();
+            needsUpdate=true;
         }
 
         @Override
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-            onUpdate.run();
+            needsUpdate=true;
         }
+
+         @Override
+         public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+             needsUpdate=true;
+         }
+    }
+
+    private boolean isOpen() {
+        return database != null;
     }
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidResultSet.java b/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidResultSet.java
index da939c36..ff84411f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidResultSet.java
+++ b/aat-android/src/main/java/ch/bailu/aat/util/sql/AndroidResultSet.java
@@ -10,4 +10,64 @@ public class AndroidResultSet implements ResultSet {
     public AndroidResultSet(Cursor cursor) {
         this.cursor = cursor;
     }
+
+    @Override
+    public boolean moveToFirst() {
+        return cursor.moveToFirst();
+    }
+
+    @Override
+    public boolean moveToNext() {
+        return cursor.moveToNext();
+    }
+
+    @Override
+    public void close() {
+        cursor.close();
+    }
+
+    @Override
+    public int getColumnIndex(String keyFilename) {
+        return cursor.getColumnIndex(keyFilename);
+    }
+
+    @Override
+    public String getString(int index) {
+        return cursor.getString(index);
+    }
+
+    @Override
+    public boolean moveToPrevious() {
+        return cursor.moveToPrevious();
+    }
+
+    @Override
+    public boolean moveToPosition(int pos) {
+        return cursor.moveToPosition(pos);
+    }
+
+    @Override
+    public int getCount() {
+        return cursor.getCount();
+    }
+
+    @Override
+    public int getPosition() {
+        return cursor.getPosition();
+    }
+
+    @Override
+    public long getLong(int index) {
+        return cursor.getLong(index);
+    }
+
+    @Override
+    public float getFloat(int index) {
+        return cursor.getFloat(index);
+    }
+
+    @Override
+    public boolean isClosed() {
+        return cursor.isClosed();
+    }
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/ErrorView.java b/aat-android/src/main/java/ch/bailu/aat/views/ErrorView.java
index 17586132..2e21ac74 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/ErrorView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/ErrorView.java
@@ -8,7 +8,7 @@ import android.widget.TextView;
 
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.logger.AppLog;
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/GpxListView.java b/aat-android/src/main/java/ch/bailu/aat/views/GpxListView.java
index 6ad0a7ac..275cd0f4 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/GpxListView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/GpxListView.java
@@ -8,8 +8,8 @@ import android.widget.ListAdapter;
 import android.widget.ListView;
 
 import ch.bailu.aat.activities.ActivityContext;
-import ch.bailu.aat.services.directory.Iterator;
-import ch.bailu.aat.services.directory.Iterator.OnCursorChangedListener;
+import ch.bailu.aat_lib.service.directory.Iterator;
+import ch.bailu.aat_lib.service.directory.Iterator.OnCursorChangedListener;
 import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.util.ui.UiTheme;
 import ch.bailu.aat_lib.description.ContentDescription;
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/ImageObjectView.java b/aat-android/src/main/java/ch/bailu/aat/views/ImageObjectView.java
index de67c029..e496a7b1 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/ImageObjectView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/ImageObjectView.java
@@ -9,7 +9,7 @@ import android.widget.ImageView;
 import ch.bailu.aat.map.AndroidDraw;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.cache.Obj;
+import ch.bailu.aat_lib.service.cache.Obj;
 import ch.bailu.aat.services.cache.ObjBitmap;
 import ch.bailu.aat.services.cache.ObjImageAbstract;
 import ch.bailu.aat.util.AppIntent;
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/PreviewView.java b/aat-android/src/main/java/ch/bailu/aat/views/PreviewView.java
index 5c6f8541..f677ce96 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/PreviewView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/PreviewView.java
@@ -3,7 +3,7 @@ package ch.bailu.aat.views;
 import ch.bailu.aat.R;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ObjBitmap;
-import ch.bailu.aat.services.directory.SummaryConfig;
+import ch.bailu.aat.services.directory.AndroidSummaryConfig;
 import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat_lib.dispatcher.OnContentUpdatedInterface;
 import ch.bailu.aat_lib.gpx.GpxInformation;
@@ -26,7 +26,7 @@ public class PreviewView extends ImageObjectView implements OnContentUpdatedInte
 
 
     public void setFilePath(Foc fileID) {
-        final Foc file = SummaryConfig
+        final Foc file = AndroidSummaryConfig
                 .getReadablePreviewFile(getContext(), fileID);
         setPreviewPath(file);
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java b/aat-android/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
index 4ef5aa7b..f2b1fa62 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/preferences/MapTilePreferencesView.java
@@ -8,7 +8,7 @@ import ch.bailu.aat.map.tile.source.MapsForgeSource;
 import ch.bailu.aat.map.tile.source.Source;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat.preferences.map.AndroidSolidTileCacheDirectory;
-import ch.bailu.aat.preferences.map.SolidDem3Directory;
+import ch.bailu.aat_lib.preferences.map.SolidDem3Directory;
 import ch.bailu.aat.preferences.map.SolidDem3EnableDownload;
 import ch.bailu.aat.preferences.map.SolidEnableTileCache;
 import ch.bailu.aat.preferences.map.SolidMapsForgeDirectory;
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/preferences/SolidBoundingBoxView.java b/aat-android/src/main/java/ch/bailu/aat/views/preferences/SolidBoundingBoxView.java
index 4b804f86..2638c38c 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/preferences/SolidBoundingBoxView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/preferences/SolidBoundingBoxView.java
@@ -2,7 +2,7 @@ package ch.bailu.aat.views.preferences;
 
 import ch.bailu.aat_lib.map.MapContext;
 import ch.bailu.aat.map.To;
-import ch.bailu.aat.preferences.SolidBoundingBox;
+import ch.bailu.aat_lib.preferences.SolidBoundingBox;
 import ch.bailu.aat.util.ui.UiTheme;
 import ch.bailu.aat.views.LabelTextView;
 import ch.bailu.aat_lib.coordinates.BoundingBoxE6;
diff --git a/aat-android/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java b/aat-android/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
index 5bb246a1..8bf5990d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
+++ b/aat-android/src/main/java/ch/bailu/aat/views/preferences/VerticalScrollView.java
@@ -9,7 +9,7 @@ import ch.bailu.aat_lib.dispatcher.DispatcherInterface;
 import ch.bailu.aat.factory.AndroidFocFactory;
 import ch.bailu.aat_lib.map.MapContext;
 import ch.bailu.aat.map.To;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.preferences.Storage;
 import ch.bailu.aat.util.ui.AppTheme;
 import ch.bailu.aat.util.ui.UiTheme;
diff --git a/aat-awt/src/main/java/ch/bailu/aat_awt/services/AwtServices.java b/aat-awt/src/main/java/ch/bailu/aat_awt/services/AwtServices.java
index 970db524..1b9db437 100644
--- a/aat-awt/src/main/java/ch/bailu/aat_awt/services/AwtServices.java
+++ b/aat-awt/src/main/java/ch/bailu/aat_awt/services/AwtServices.java
@@ -11,7 +11,7 @@ import ch.bailu.aat_lib.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat_lib.preferences.StorageInterface;
 import ch.bailu.aat_lib.service.IconMapServiceInterface;
 import ch.bailu.aat_lib.service.ServicesInterface;
-import ch.bailu.aat_lib.service.cache.ObjeImageInterface;
+import ch.bailu.aat_lib.service.cache.ObjImageInterface;
 import ch.bailu.aat_lib.service.elevation.ElevetionServiceInterface;
 import ch.bailu.aat_lib.service.location.LocationService;
 import ch.bailu.aat_lib.service.location.LocationServiceInterface;
@@ -101,7 +101,7 @@ public class AwtServices implements ServicesInterface {
         return new IconMapServiceInterface() {
 
             @Override
-            public ObjeImageInterface getIconSVG(GpxPointInterface point, int icon_size) {
+            public ObjImageInterface getIconSVG(GpxPointInterface point, int icon_size) {
                 return null;
             }
 
diff --git a/aat-gtk/src/main/kotlin/ch/bailu/aat_gtk/service/GtkServices.kt b/aat-gtk/src/main/kotlin/ch/bailu/aat_gtk/service/GtkServices.kt
index 374e5cda..f229784c 100644
--- a/aat-gtk/src/main/kotlin/ch/bailu/aat_gtk/service/GtkServices.kt
+++ b/aat-gtk/src/main/kotlin/ch/bailu/aat_gtk/service/GtkServices.kt
@@ -11,7 +11,7 @@ import ch.bailu.aat_lib.gpx.interfaces.GpxPointInterface
 import ch.bailu.aat_lib.preferences.StorageInterface
 import ch.bailu.aat_lib.service.IconMapServiceInterface
 import ch.bailu.aat_lib.service.ServicesInterface
-import ch.bailu.aat_lib.service.cache.ObjeImageInterface
+import ch.bailu.aat_lib.service.cache.ObjImageInterface
 import ch.bailu.aat_lib.service.elevation.ElevetionServiceInterface
 import ch.bailu.aat_lib.service.location.LocationService
 import ch.bailu.aat_lib.service.location.LocationServiceInterface
@@ -60,7 +60,7 @@ class GtkServices (storage: StorageInterface, broadcaster: Broadcaster) :
 
     override fun getIconMapService(): IconMapServiceInterface {
         return object : IconMapServiceInterface {
-            override fun getIconSVG(point: GpxPointInterface, icon_size: Int): ObjeImageInterface? {
+            override fun getIconSVG(point: GpxPointInterface, icon_size: Int): ObjImageInterface? {
                 return null
             }
 
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/app/AppContext.java b/aat-lib/src/main/java/ch/bailu/aat_lib/app/AppContext.java
new file mode 100644
index 00000000..b140e3b7
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/app/AppContext.java
@@ -0,0 +1,16 @@
+package ch.bailu.aat_lib.app;
+
+import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.factory.FocFactory;
+import ch.bailu.aat_lib.preferences.StorageInterface;
+import ch.bailu.aat_lib.service.ServicesInterface;
+
+public interface AppContext {
+    Broadcaster getBroadcaster();
+
+    ServicesInterface getServices();
+
+    StorageInterface getStorage();
+
+    FocFactory getFocFactory();
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/map/layer/gpx/WayLayer.java b/aat-lib/src/main/java/ch/bailu/aat_lib/map/layer/gpx/WayLayer.java
index 3fe5790c..8066772e 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/map/layer/gpx/WayLayer.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/map/layer/gpx/WayLayer.java
@@ -7,7 +7,7 @@ import ch.bailu.aat_lib.map.TwoNodes;
 import ch.bailu.aat_lib.preferences.StorageInterface;
 import ch.bailu.aat_lib.service.InsideContext;
 import ch.bailu.aat_lib.service.ServicesInterface;
-import ch.bailu.aat_lib.service.cache.ObjeImageInterface;
+import ch.bailu.aat_lib.service.cache.ObjImageInterface;
 
 public final class WayLayer extends GpxLayer {
 
@@ -65,7 +65,7 @@ public final class WayLayer extends GpxLayer {
                 new InsideContext(services) {
                     @Override
                     public void run() {
-                        ObjeImageInterface i = services.getIconMapService().getIconSVG(node.point,
+                        ObjImageInterface i = services.getIconMapService().getIconSVG(node.point,
                                 icon_size);
 
                         if (i != null)
diff --git a/aat-android/src/main/java/ch/bailu/aat/preferences/SolidBoundingBox.java b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidBoundingBox.java
similarity index 90%
rename from aat-android/src/main/java/ch/bailu/aat/preferences/SolidBoundingBox.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidBoundingBox.java
index a6080127..6f6bdad6 100644
--- a/aat-android/src/main/java/ch/bailu/aat/preferences/SolidBoundingBox.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidBoundingBox.java
@@ -1,11 +1,7 @@
-package ch.bailu.aat.preferences;
+package ch.bailu.aat_lib.preferences;
 
-import ch.bailu.aat.services.directory.GpxDbConstants;
 import ch.bailu.aat_lib.coordinates.BoundingBoxE6;
-import ch.bailu.aat_lib.preferences.OnPreferencesChanged;
-import ch.bailu.aat_lib.preferences.SolidInteger;
-import ch.bailu.aat_lib.preferences.SolidTypeInterface;
-import ch.bailu.aat_lib.preferences.StorageInterface;
+import ch.bailu.aat_lib.service.directory.GpxDbConstants;
 
 public class SolidBoundingBox implements SolidTypeInterface {
     private final SolidInteger N, W, S, E;
diff --git a/aat-android/src/main/java/ch/bailu/aat/preferences/SolidDirectoryQuery.java b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidDirectoryQuery.java
similarity index 91%
rename from aat-android/src/main/java/ch/bailu/aat/preferences/SolidDirectoryQuery.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidDirectoryQuery.java
index 9f83343c..9899e434 100644
--- a/aat-android/src/main/java/ch/bailu/aat/preferences/SolidDirectoryQuery.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/SolidDirectoryQuery.java
@@ -1,15 +1,10 @@
-package ch.bailu.aat.preferences;
+package ch.bailu.aat_lib.preferences;
 
 import java.util.ArrayList;
 
-import ch.bailu.aat.services.directory.GpxDbConstants;
 import ch.bailu.aat_lib.factory.FocFactory;
-import ch.bailu.aat_lib.preferences.SolidBoolean;
-import ch.bailu.aat_lib.preferences.SolidDate;
-import ch.bailu.aat_lib.preferences.SolidFile;
-import ch.bailu.aat_lib.preferences.SolidInteger;
-import ch.bailu.aat_lib.preferences.StorageInterface;
 import ch.bailu.aat_lib.resources.Res;
+import ch.bailu.aat_lib.service.directory.GpxDbConstants;
 
 public class SolidDirectoryQuery extends SolidFile {
     private static final String KEY_DIR_DIRECTORY="DIR_DIRECTORY";
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/map/SolidDem3Directory.java b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/map/SolidDem3Directory.java
new file mode 100644
index 00000000..57f2a966
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/preferences/map/SolidDem3Directory.java
@@ -0,0 +1,72 @@
+package ch.bailu.aat_lib.preferences.map;
+
+import java.util.ArrayList;
+
+import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
+import ch.bailu.aat_lib.factory.FocFactory;
+import ch.bailu.aat_lib.preferences.SolidFile;
+import ch.bailu.aat_lib.preferences.StorageInterface;
+import ch.bailu.aat_lib.resources.ToDo;
+import ch.bailu.foc.Foc;
+
+public class SolidDem3Directory extends SolidFile {
+
+    public final static String DEM3_DIR = "dem3";
+
+    public SolidDem3Directory(StorageInterface storageInterface, FocFactory focFactory) {
+        super(storageInterface, SolidDem3Directory.class.getSimpleName(), focFactory);
+    }
+
+
+    @Override
+    public String getLabel() {
+        return ToDo.translate("Location of dem3 tiles");
+    }
+
+    @Override
+    public String getValueAsString() {
+        String r = super.getValueAsString();
+
+        if (getStorage().isDefaultString(r)) {
+            r = getDefaultValue();
+
+            setValue(r);
+        }
+        return r;
+    }
+
+
+
+    public String getDefaultValue() {
+        ArrayList<String> list = new ArrayList<>(5);
+
+        list = buildSelection(list);
+
+        if (list.size()>0) {
+            return list.get(0);
+        }
+        return "";
+    }
+
+
+
+
+    /**
+     *
+     * @return a complete file path for a dem3 tile. The base path is taken from configuration.
+     * Example: /sdcard/aat_data/dem3/N16/N16E077.hgt.zip
+     */
+    public Foc toFile(Dem3Coordinates dem3Coordinates) {
+        return toFile(dem3Coordinates, getValueAsFile());
+    }
+
+
+    private Foc toFile(Dem3Coordinates dem3Coordinates, Foc base) {
+        return base.descendant(dem3Coordinates.toExtString() + ".hgt.zip");
+    }
+
+    @Override
+    public ArrayList<String> buildSelection(ArrayList<String> list) {
+        return list;
+    }
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/IconMapServiceInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/IconMapServiceInterface.java
index 2ce1d3f4..5de294ff 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/service/IconMapServiceInterface.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/IconMapServiceInterface.java
@@ -2,10 +2,10 @@ package ch.bailu.aat_lib.service;
 
 import ch.bailu.aat_lib.gpx.GpxPointNode;
 import ch.bailu.aat_lib.gpx.interfaces.GpxPointInterface;
-import ch.bailu.aat_lib.service.cache.ObjeImageInterface;
+import ch.bailu.aat_lib.service.cache.ObjImageInterface;
 
 public interface IconMapServiceInterface {
-    ObjeImageInterface getIconSVG(GpxPointInterface point, int icon_size);
+    ObjImageInterface getIconSVG(GpxPointInterface point, int icon_size);
 
     String toAssetPath(int key, String value);
 
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/ServicesInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/ServicesInterface.java
index ac960004..2002a174 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/service/ServicesInterface.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/ServicesInterface.java
@@ -1,5 +1,8 @@
 package ch.bailu.aat_lib.service;
 
+import ch.bailu.aat_lib.service.background.BackgroundServiceInterface;
+import ch.bailu.aat_lib.service.cache.CacheServiceInterface;
+import ch.bailu.aat_lib.service.directory.DirectoryServiceInterface;
 import ch.bailu.aat_lib.service.elevation.ElevetionServiceInterface;
 import ch.bailu.aat_lib.service.location.LocationServiceInterface;
 import ch.bailu.aat_lib.service.sensor.SensorServiceInterface;
@@ -10,15 +13,16 @@ public interface ServicesInterface {
     SensorServiceInterface getSensorService();
     TrackerServiceInterface getTrackerService();
     IconMapServiceInterface getIconMapService();
+    BackgroundServiceInterface getBackgroundService();
+    CacheServiceInterface getCacheService();
+    DirectoryServiceInterface getDirectoryService();
 
-    void lock(String simpleName);
 
+    void lock(String simpleName);
     void free(String simpleName);
 
     boolean lock();
     void free();
 
     ElevetionServiceInterface getElevationService();
-
-
 }
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundServiceInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundServiceInterface.java
new file mode 100644
index 00000000..29fece65
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundServiceInterface.java
@@ -0,0 +1,9 @@
+package ch.bailu.aat_lib.service.background;
+
+import ch.bailu.aat_lib.util.WithStatusText;
+
+public interface BackgroundServiceInterface extends WithStatusText {
+    void close();
+
+    void process(BackgroundTask backgroundTask);
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundTask.java
similarity index 67%
rename from aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundTask.java
index 358fc2bc..062577f3 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/BackgroundTask.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/BackgroundTask.java
@@ -1,16 +1,13 @@
-package ch.bailu.aat.services.background;
+package ch.bailu.aat_lib.service.background;
 
-import android.content.Context;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat_lib.service.background.ThreadControl;
+import ch.bailu.aat_lib.app.AppContext;
 
 public abstract class BackgroundTask implements ThreadControl {
 
     public static final BackgroundTask NULL = new BackgroundTask() {
 
         @Override
-        public long bgOnProcess(ServiceContext sc) {
+        public long bgOnProcess(AppContext appContext) {
             return 0;
         }
     };
@@ -18,7 +15,7 @@ public abstract class BackgroundTask implements ThreadControl {
 
     public static final BackgroundTask STOP = new BackgroundTask() {
         @Override
-        public long bgOnProcess(ServiceContext sc) {
+        public long bgOnProcess(AppContext appContext) {
             return 0;
         }
 
@@ -41,7 +38,7 @@ public abstract class BackgroundTask implements ThreadControl {
 
 
 
-    public abstract long bgOnProcess(ServiceContext sc);
+    public abstract long bgOnProcess(AppContext appContext);
 
 
     public synchronized void stopProcessing() {
@@ -54,8 +51,8 @@ public abstract class BackgroundTask implements ThreadControl {
         return this;
     }
 
-    public void onInsert(Context c) {}
-    public void onRemove(Context c) {}
+    public void onInsert() {}
+    public void onRemove() {}
 
     protected void setException(Exception e) {
         exception = e;
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadConfig.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadConfig.java
new file mode 100644
index 00000000..8ee3fcd3
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadConfig.java
@@ -0,0 +1,41 @@
+package ch.bailu.aat_lib.service.background;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+import ch.bailu.aat_lib.app.AppConfig;
+
+public class DownloadConfig {
+
+    private final static int TIMEOUT = 30 * 1000;
+    private final static String USER_AGENT_KEY = "User-Agent";
+    private final String userAgentValue;
+
+    private final static int IO_BUFFER_SIZE=8*1024;
+
+    public DownloadConfig(AppConfig config) {
+        userAgentValue = config.getUserAgent();
+    }
+
+    public byte[] createBuffer() {
+        return new byte[IO_BUFFER_SIZE];
+    }
+
+    public HttpURLConnection openConnection(URL url) throws IOException {
+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+        connection.setConnectTimeout(TIMEOUT);
+        connection.setReadTimeout(TIMEOUT);
+        connection.setRequestProperty(USER_AGENT_KEY, userAgentValue);
+        return connection;
+    }
+
+
+
+
+    public InputStream openInput(HttpURLConnection connection) throws IOException {
+        return connection.getInputStream();
+    }
+
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadTask.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadTask.java
new file mode 100644
index 00000000..ba102c42
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/DownloadTask.java
@@ -0,0 +1,115 @@
+package ch.bailu.aat_lib.service.background;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+import javax.annotation.Nonnull;
+
+import ch.bailu.aat_lib.app.AppContext;
+import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.util.net.URX;
+import ch.bailu.foc.Foc;
+
+public class DownloadTask extends FileTask {
+
+
+
+    private final URX urx;
+    private final DownloadConfig downloadConnection;
+
+
+    public DownloadTask(String source, Foc target, DownloadConfig downloadConnection) {
+        this(new URX(source), target, downloadConnection);
+    }
+
+
+    public DownloadTask(URX source, Foc target, DownloadConfig downloadConnection) {
+        super(target);
+        this.downloadConnection = downloadConnection;
+        urx = source;
+    }
+
+
+
+
+    @Override
+    public long bgOnProcess(AppContext sc) {
+        long size = 0;
+
+        try {
+            size = bgDownload();
+            sc.getBroadcaster().broadcast(
+                    AppBroadcaster.FILE_CHANGED_ONDISK, getFile(), urx);
+
+        } catch (Exception e) {
+            logError(e);
+            setException(e);
+            getFile().rm();
+
+        }
+        return size;
+    }
+
+
+
+    protected long bgDownload() throws IOException {
+        return download(urx.toURL(), getFile());
+    }
+
+
+    protected void logError(Exception e) {
+        AppLog.w(this, getFile().getPathName());
+        AppLog.w(this, e);
+    }
+
+
+    @Nonnull
+    @Override
+    public String toString() {
+        return urx.toString();
+    }
+
+
+
+    private long download(URL url, Foc file) throws IOException {
+        int count;
+        long total=0;
+        InputStream input = null;
+        OutputStream output = null;
+        HttpURLConnection connection;
+        byte[] buffer = downloadConnection.createBuffer();
+
+
+        try {
+            output = file.openW();
+
+            connection = downloadConnection.openConnection(url);
+            input = downloadConnection.openInput(connection);
+
+
+            while (( count = input.read(buffer)) != -1) {
+
+                total+=count;
+                output.write(buffer, 0, count);
+            }
+
+
+        } finally {
+            Foc.close(output);
+            Foc.close(input);
+        }
+
+        return total;
+    }
+
+
+
+
+    public URX getSource() {
+        return urx;
+    }
+ }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/FileTask.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/FileTask.java
similarity index 67%
rename from aat-android/src/main/java/ch/bailu/aat/services/background/FileTask.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/background/FileTask.java
index dc62edd6..ae57061d 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/FileTask.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/FileTask.java
@@ -1,7 +1,6 @@
-package ch.bailu.aat.services.background;
+package ch.bailu.aat_lib.service.background;
 
-import android.content.Context;
-import androidx.annotation.NonNull;
+import javax.annotation.Nonnull;
 
 import ch.bailu.foc.Foc;
 
@@ -16,7 +15,7 @@ public abstract class FileTask extends BackgroundTask {
     }
 
 
-    @NonNull
+    @Nonnull
     @Override
     public String toString() {
         return file.toString();
@@ -38,15 +37,15 @@ public abstract class FileTask extends BackgroundTask {
 
 
     @Override
-    public void onInsert(Context c) {
-        if (tasks != null) tasks.add(c, this);
+    public void onInsert() {
+        if (tasks != null) tasks.add(this);
     }
 
 
     @Override
-    public void onRemove(Context c) {
+    public void onRemove() {
         if (tasks != null) {
-            tasks.remove(c, this);
+            tasks.remove(this);
         }
     }
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/background/Tasks.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/Tasks.java
similarity index 60%
rename from aat-android/src/main/java/ch/bailu/aat/services/background/Tasks.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/background/Tasks.java
index 061b7e54..a34a1e96 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/background/Tasks.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/background/Tasks.java
@@ -1,26 +1,28 @@
-package ch.bailu.aat.services.background;
+package ch.bailu.aat_lib.service.background;
 
 
-import android.content.Context;
-
 import java.util.ArrayList;
 
-import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
-import ch.bailu.foc.Foc;
+import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.service.background.FileTask;
 import ch.bailu.aat_lib.util.Objects;
+import ch.bailu.foc.Foc;
 
 public final class Tasks {
 
     private final ArrayList<FileTask> downloads = new ArrayList<>(10);
 
-    public Tasks() {}
+    private final Broadcaster broadcaster;
 
+    public Tasks(Broadcaster broadcaster) {
+        this.broadcaster = broadcaster;
+    }
 
-    public synchronized void add(Context c, FileTask t) {
+    public synchronized void add(FileTask t) {
         if (!contains(t)) {
             downloads.add(t);
-            changed(c, t);
+            changed(t);
         }
     }
 
@@ -44,23 +46,24 @@ public final class Tasks {
     }
 
 
-    public synchronized void remove(Context c, FileTask t) {
+    public synchronized void remove(FileTask t) {
         if (downloads.remove(t)) {
-            changed(c, t);
+            changed(t);
         }
     }
 
-    private synchronized void changed(Context c, FileTask t) {
+    private synchronized void changed(FileTask t) {
 
         if (t instanceof DownloadTask) {
-            OldAppBroadcaster.broadcast(c,
+            broadcaster.broadcast(
                     AppBroadcaster.FILE_BACKGROND_TASK_CHANGED,
                     t.getFile(),
                     ((DownloadTask) t).getSource());
 
         } else {
-            OldAppBroadcaster.broadcast(c,
-                    AppBroadcaster.FILE_BACKGROND_TASK_CHANGED, t.getFile());
+            broadcaster.broadcast(
+                    AppBroadcaster.FILE_BACKGROND_TASK_CHANGED,
+                    t.getFile());
         }
     }
 }
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/CacheServiceInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/CacheServiceInterface.java
new file mode 100644
index 00000000..5430a0f6
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/CacheServiceInterface.java
@@ -0,0 +1,15 @@
+package ch.bailu.aat_lib.service.cache;
+
+import ch.bailu.aat_lib.util.WithStatusText;
+
+public interface CacheServiceInterface extends WithStatusText {
+    void onLowMemory();
+
+    void close();
+
+    Obj getObject(String path, Obj.Factory factory);
+
+    void addToBroadcaster(Obj obj);
+
+    Obj getObject(String id);
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/Obj.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/Obj.java
similarity index 82%
rename from aat-android/src/main/java/ch/bailu/aat/services/cache/Obj.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/Obj.java
index 13e807ca..d99d9f70 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/Obj.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/Obj.java
@@ -1,8 +1,8 @@
-package ch.bailu.aat.services.cache;
+package ch.bailu.aat_lib.service.cache;
 
-import androidx.annotation.NonNull;
+import javax.annotation.Nonnull;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.logger.AppLog;
 import ch.bailu.foc.Foc;
 import ch.bailu.foc.FocName;
@@ -24,7 +24,7 @@ public abstract class Obj implements ObjBroadcastReceiver {
     }
 
 
-    @NonNull
+    @Nonnull
     @Override
     public String toString() {
         return ID;
@@ -61,11 +61,11 @@ public abstract class Obj implements ObjBroadcastReceiver {
     }
 
 
-    public void onInsert(ServiceContext sc) {}
-    public void onRemove(ServiceContext sc) {}
+    public void onInsert(AppContext appContext) {}
+    public void onRemove(AppContext appContext) {}
 
 
-    public synchronized void lock(ServiceContext sc) {
+    public synchronized void lock(AppContext appContext) {
         lock++;
         access();
     }
@@ -91,10 +91,6 @@ public abstract class Obj implements ObjBroadcastReceiver {
         accessTime=System.currentTimeMillis();
     }
 
-
-
-
-
     public synchronized long getAccessTime() {
         return accessTime;
     }
@@ -105,12 +101,9 @@ public abstract class Obj implements ObjBroadcastReceiver {
         return toString().hashCode();
     }
 
-
-
     public static class Factory {
-        public Obj factory(String id, ServiceContext cs) {
+        public Obj factory(String id, AppContext appContext) {
             return ObjNull.NULL;
         }
     }
-
 }
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjBroadcastReceiver.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjBroadcastReceiver.java
new file mode 100644
index 00000000..2d9d794c
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjBroadcastReceiver.java
@@ -0,0 +1,8 @@
+package ch.bailu.aat_lib.service.cache;
+
+import ch.bailu.aat_lib.service.ServicesInterface;
+
+public interface ObjBroadcastReceiver {
+    void onDownloaded(String id, String url, ServicesInterface sc);
+    void onChanged(String id, ServicesInterface sc);
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpx.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjGpx.java
similarity index 73%
rename from aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpx.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjGpx.java
index 5f693ab1..7aacf2c6 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjGpx.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjGpx.java
@@ -1,6 +1,6 @@
-package ch.bailu.aat.services.cache;
+package ch.bailu.aat_lib.service.cache;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.gpx.GpxList;
 
 
@@ -21,10 +21,10 @@ public abstract class ObjGpx extends Obj {
         }
 
         @Override
-        public void onChanged(String id, ServiceContext sc) {}
+        public void onChanged(String id, AppContext sc) {}
 
         @Override
-        public void onDownloaded(String id, String url, ServiceContext sc) {}
+        public void onDownloaded(String id, String url, AppContext sc) {}
 
         @Override
         public GpxList getGpxList() {
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjeImageInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjImageInterface.java
similarity index 74%
rename from aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjeImageInterface.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjImageInterface.java
index c51f11c6..edcf56fe 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjeImageInterface.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjImageInterface.java
@@ -2,7 +2,7 @@ package ch.bailu.aat_lib.service.cache;
 
 import org.mapsforge.core.graphics.Bitmap;
 
-public interface ObjeImageInterface {
+public interface ObjImageInterface {
 
     Bitmap getBitmap();
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjNull.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjNull.java
similarity index 55%
rename from aat-android/src/main/java/ch/bailu/aat/services/cache/ObjNull.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjNull.java
index bada239f..ec0d69a2 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/cache/ObjNull.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/cache/ObjNull.java
@@ -1,6 +1,6 @@
-package ch.bailu.aat.services.cache;
+package ch.bailu.aat_lib.service.cache;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.service.ServicesInterface;
 
 public final class ObjNull extends Obj {
 
@@ -16,12 +16,8 @@ public final class ObjNull extends Obj {
     }
 
     @Override
-    public void onDownloaded(String id, String url, ServiceContext sc) {
-
-    }
+    public void onDownloaded(String id, String url, ServicesInterface sc) {}
 
     @Override
-    public void onChanged(String id, ServiceContext sc) {
-
-    }
+    public void onChanged(String id, ServicesInterface sc) {}
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/AbsDatabase.java
similarity index 53%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/AbsDatabase.java
index 5d37e589..46f7ff0f 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/AbsDatabase.java
@@ -1,25 +1,24 @@
-package ch.bailu.aat.services.directory;
-
-import android.database.Cursor;
-import android.database.sqlite.SQLiteException;
+package ch.bailu.aat_lib.service.directory;
 
 import java.io.Closeable;
 
+import ch.bailu.aat_lib.util.sql.DbException;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public abstract class AbsDatabase implements Closeable{
 
-    public abstract Cursor query(String selection);
+    public abstract ResultSet query(String selection);
 
 
-    public abstract void deleteEntry(Foc file) throws SQLiteException;
+    public abstract void deleteEntry(Foc file) throws DbException;
 
 
     public static final AbsDatabase NULL_DATABASE = new AbsDatabase(){
 
 
         @Override
-        public Cursor query(String selection) {return null;}
+        public ResultSet query(String selection) {return null;}
 
         @Override
         public void deleteEntry(Foc file) {}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryService.java
similarity index 53%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryService.java
index 8e622c33..c3ef1b98 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryService.java
@@ -1,50 +1,46 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCantOpenDatabaseException;
-
-import java.io.IOException;
-
-import ch.bailu.aat.factory.AndroidFocFactory;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.fs.AFile;
+import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.factory.FocFactory;
 import ch.bailu.aat_lib.preferences.OnPreferencesChanged;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat_lib.preferences.StorageInterface;
+import ch.bailu.aat_lib.service.ServicesInterface;
 import ch.bailu.aat_lib.service.VirtualService;
-import ch.bailu.aat_lib.util.WithStatusText;
+import ch.bailu.aat_lib.util.fs.AFile;
+import ch.bailu.aat_lib.util.sql.DbException;
+import ch.bailu.aat_lib.util.sql.DbFactory;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
-public final class DirectoryService extends VirtualService implements OnPreferencesChanged, WithStatusText {
+public final class DirectoryService extends VirtualService implements OnPreferencesChanged, DirectoryServiceInterface {
 
 
     private AbsDatabase database=AbsDatabase.NULL_DATABASE;
     private final SolidDirectoryQuery sdirectory;
+    private final SummaryConfig summaryConfig;
     private DirectorySynchronizer synchronizer=null;
 
-    private final ServiceContext scontext;
+    private final ServicesInterface scontext;
+    private final DbFactory dbFactory;
+    private final FocFactory focFactory;
+    private final Broadcaster broadcaster;
+    private final MapPreviewFactory mapPreviewFactory;
 
-    public DirectoryService(ServiceContext scontext) {
+
+    public DirectoryService(ServicesInterface scontext, StorageInterface storage, FocFactory focFactory, SummaryConfig summaryConfig, DbFactory dbFactory, Broadcaster broadcaster, MapPreviewFactory mapPreviewFactory) {
+        this.mapPreviewFactory = mapPreviewFactory;
+        this.summaryConfig = summaryConfig;
+        this.broadcaster = broadcaster;
+        this.focFactory = focFactory;
         this.scontext = scontext;
-        sdirectory = new SolidDirectoryQuery(new Storage(getContext()), new AndroidFocFactory(getContext()));
+        this.dbFactory = dbFactory;
+        sdirectory = new SolidDirectoryQuery(storage, focFactory);
         sdirectory.getStorage().register(this);
 
         openDir(sdirectory.getValueAsFile());
     }
 
-    public Context getContext() {
-        return scontext.getContext();
-    }
-
-    public ServiceContext getSContext() {
-        return scontext;
-    }
-
-
     @Override
     public void onPreferencesChanged(StorageInterface s, String key) {
         if (sdirectory.hasKey(key)) {
@@ -52,15 +48,13 @@ public final class DirectoryService extends VirtualService implements OnPreferen
         }
     }
 
-
-
     private void openDir(Foc dir) {
 
         if (dir.mkdirs() && dir.canRead()) {
             open(dir);
 
         } else {
-            AFile.logErrorNoAccess(getContext(), dir);
+            AFile.logErrorNoAccess(dir);
         }
     }
 
@@ -69,11 +63,10 @@ public final class DirectoryService extends VirtualService implements OnPreferen
 
 
     private void open(Foc dir) {
-        final String dbPath =
-                SummaryConfig.getWriteableDBPath(getContext(), dir);
+        final String dbPath = summaryConfig.getDBPath(dir);
 
         try {
-            openDataBase(getSContext(), dbPath);
+            openDataBase(dbPath);
 
         } catch (Exception e) {
             database=AbsDatabase.NULL_DATABASE;
@@ -82,16 +75,14 @@ public final class DirectoryService extends VirtualService implements OnPreferen
 
 
 
-    private void openDataBase(ServiceContext sc, String dbPath) throws IOException, SQLiteCantOpenDatabaseException {
+    private void openDataBase(String dbPath) throws DbException {
         database.close();
-        database = new GpxDatabase(
-                sc,
-                dbPath);
+        database = new GpxDatabase(dbFactory.createDataBase(), dbPath);
     }
 
 
 
-    public Cursor query(String sel) {
+    public ResultSet query(String sel) {
         return database.query(sel);
     }
 
@@ -111,7 +102,7 @@ public final class DirectoryService extends VirtualService implements OnPreferen
     private void rescan(Foc dir) {
         if (dir.canRead()) {
             stopSynchronizer();
-            synchronizer = new DirectorySynchronizer(getSContext(), dir);
+            synchronizer = new DirectorySynchronizer(scontext, broadcaster, focFactory, summaryConfig, dbFactory, mapPreviewFactory,dir);
         }
     }
 
@@ -137,7 +128,4 @@ public final class DirectoryService extends VirtualService implements OnPreferen
         builder.append(sdirectory.getValueAsString());
         builder.append("</p>");
     }
-
-
-
 }
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryServiceInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryServiceInterface.java
new file mode 100644
index 00000000..cd4d2b45
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectoryServiceInterface.java
@@ -0,0 +1,10 @@
+package ch.bailu.aat_lib.service.directory;
+
+import ch.bailu.aat_lib.util.WithStatusText;
+import ch.bailu.aat_lib.util.sql.ResultSet;
+
+public interface DirectoryServiceInterface extends WithStatusText {
+    ResultSet query(String selection);
+
+    void rescan();
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectorySynchronizer.java
similarity index 63%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectorySynchronizer.java
index 593fb8a6..d8c76523 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/DirectorySynchronizer.java
@@ -1,37 +1,33 @@
-package ch.bailu.aat.services.directory;
-
-import android.content.BroadcastReceiver;
-import android.content.ContentValues;
-import android.content.Context;
-import android.content.Intent;
-import android.database.Cursor;
+package ch.bailu.aat_lib.service.directory;
 
 import java.io.Closeable;
 import java.io.File;
 import java.util.ArrayList;
 
-import ch.bailu.aat_lib.gpx.GpxFileWrapper;
-import ch.bailu.aat.map.mapsforge.MapsForgePreview;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
-import ch.bailu.aat.services.cache.Obj;
-import ch.bailu.aat.services.cache.ObjGpx;
-import ch.bailu.aat.services.cache.ObjGpxStatic;
-import ch.bailu.aat.util.OldAppBroadcaster;
 import ch.bailu.aat_lib.coordinates.BoundingBoxE6;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.dispatcher.BroadcastReceiver;
+import ch.bailu.aat_lib.dispatcher.Broadcaster;
+import ch.bailu.aat_lib.factory.FocFactory;
+import ch.bailu.aat_lib.gpx.GpxFileWrapper;
 import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.gpx.GpxList;
 import ch.bailu.aat_lib.gpx.attributes.MaxSpeed;
 import ch.bailu.aat_lib.gpx.interfaces.GpxBigDeltaInterface;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.cache.Obj;
+import ch.bailu.aat_lib.service.cache.ObjGpx;
+import ch.bailu.aat_lib.util.sql.DbFactory;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
-import ch.bailu.foc_android.FocAndroid;
+
 
 public final class DirectorySynchronizer  implements Closeable {
 
     private ObjGpx pendingHandle=null;
-    private MapsForgePreview pendingPreviewGenerator=null;
+    private MapPreviewInterface pendingPreviewGenerator=null;
 
     private FilesInDirectory filesToAdd=null;
     private final ArrayList<String> filesToRemove = new ArrayList<>();
@@ -41,14 +37,26 @@ public final class DirectorySynchronizer  implements Closeable {
     private long dbAccessTime;
 
     private final Foc directory;
-    private final ServiceContext scontext;
+    private final ServicesInterface scontext;
 
     private boolean canContinue=true;
     private State state;
 
-    public DirectorySynchronizer(ServiceContext cs, Foc d) {
+    private final Broadcaster broadcaster;
+    private final FocFactory focFactory;
+    private final SummaryConfig summaryConfig;
+    private final DbFactory dbFactory;
+    private final MapPreviewFactory mapPreviewFactory;
+
+
+    public DirectorySynchronizer(ServicesInterface cs, Broadcaster broadcaster, FocFactory focFactory, SummaryConfig summaryConfig, DbFactory dbFactory, MapPreviewFactory mapPreviewFactory, Foc d) {
         scontext=cs;
         directory=d;
+        this.mapPreviewFactory = mapPreviewFactory;
+        this.dbFactory = dbFactory;
+        this.broadcaster = broadcaster;
+        this.focFactory = focFactory;
+        this.summaryConfig = summaryConfig;
 
         if (scontext.lock()) {
             setState(new StateInit());
@@ -59,7 +67,7 @@ public final class DirectorySynchronizer  implements Closeable {
 
     private final BroadcastReceiver onFileChanged = new BroadcastReceiver () {
         @Override
-        public void onReceive(Context context, Intent intent) {
+        public void onReceive(Object... objs) {
             state.ping();
         }
     };
@@ -103,9 +111,7 @@ public final class DirectorySynchronizer  implements Closeable {
          */
         @Override
         public void start() {
-
-            OldAppBroadcaster.register(scontext.getContext(),
-                    onFileChanged, AppBroadcaster.FILE_CHANGED_INCACHE);
+            broadcaster.register(onFileChanged, AppBroadcaster.FILE_CHANGED_INCACHE);
             try {
                 database = openDatabase();
                 setState(new StatePrepareSync());
@@ -114,15 +120,12 @@ public final class DirectorySynchronizer  implements Closeable {
             }
         }
 
-
-
-
-        private GpxDatabase openDatabase()  throws Exception {
-            final String dbPath = SummaryConfig.getWriteableDBPath(scontext.getContext(), directory);
+        private GpxDatabase openDatabase() {
+            final String dbPath = summaryConfig.getDBPath(directory);
             final String[] query = {GpxDbConstants.KEY_FILENAME};
 
             dbAccessTime = new File(dbPath).lastModified();
-            return new GpxDatabase(scontext, dbPath, query);
+            return new GpxDatabase(dbFactory.createDataBase(), dbPath, query);
         }
 
         @Override
@@ -130,8 +133,6 @@ public final class DirectorySynchronizer  implements Closeable {
     }
 
 
-
-
     /////////////////////////////////////////////////////////////////////////////////////////////
     private final class StatePrepareSync extends State {
         private Exception exception=null;
@@ -139,9 +140,8 @@ public final class DirectorySynchronizer  implements Closeable {
         private BackgroundTask backgroundTask = new BackgroundTask() {
 
             @Override
-            public long bgOnProcess(ServiceContext sc) {
+            public long bgOnProcess(ServicesInterface sc) {
                 try {
-
                     filesToAdd = new FilesInDirectory(directory);
                     compareFileSystemWithDatabase();
                     removeFilesFromDatabase();
@@ -152,21 +152,18 @@ public final class DirectorySynchronizer  implements Closeable {
                 } finally {
                     backgroundTask = null;
 
-                    OldAppBroadcaster.broadcast(sc.getContext(),
-                            AppBroadcaster.FILE_CHANGED_INCACHE, directory);
+                    broadcaster.broadcast(AppBroadcaster.FILE_CHANGED_INCACHE, directory);
                 }
 
                 return 100;
 
             }
-
-
-
         };
 
+
         @Override
         public void start() {
-            OldAppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DBSYNC_START);
+            broadcaster.broadcast(AppBroadcaster.DBSYNC_START);
 
             scontext.getBackgroundService().process(backgroundTask);
         }
@@ -191,7 +188,7 @@ public final class DirectorySynchronizer  implements Closeable {
 
                     removeFileFromDatabase(filesToRemove.get(i));
                 }
-                OldAppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DB_SYNC_CHANGED);
+                broadcaster.broadcast(AppBroadcaster.DB_SYNC_CHANGED);
             }
         }
 
@@ -199,17 +196,17 @@ public final class DirectorySynchronizer  implements Closeable {
         private void removeFileFromDatabase(String name) {
             final Foc file = directory.child(name);
 
-            SummaryConfig.getWriteablePreviewFile(scontext.getContext(), file).rm();
+            summaryConfig.getPreviewFile(file).rm();
             database.deleteEntry(file);
         }
 
 
 
         private void compareFileSystemWithDatabase() {
-            final Cursor cursor = database.query(null);
+            final ResultSet resultSet = database.query(null);
 
-            for (boolean r=cursor.moveToFirst(); canContinue && r; r=cursor.moveToNext()) {
-                final String name = getFileName(cursor);
+            for (boolean r=resultSet.moveToFirst(); canContinue && r; r=resultSet.moveToNext()) {
+                final String name = getFileName(resultSet);
                 final Foc file = filesToAdd.findItem(name);
 
                 if (file == null) {
@@ -222,13 +219,13 @@ public final class DirectorySynchronizer  implements Closeable {
                     filesToRemove.add(name);
                 }
             }
-            cursor.close();
+            resultSet.close();
         }
 
-        private String getFileName(Cursor cursor) {
-            int index = cursor.getColumnIndex(GpxDbConstants.KEY_FILENAME);
+        private String getFileName(ResultSet resultSet) {
+            int index = resultSet.getColumnIndex(GpxDbConstants.KEY_FILENAME);
             if (index > -1) {
-                return cursor.getString(index);
+                return resultSet.getString(index);
             }
             return "";
         }
@@ -295,35 +292,37 @@ public final class DirectorySynchronizer  implements Closeable {
 
 
         private void addGpxSummaryToDatabase(String id, GpxList list) {
-            final Foc file = FocAndroid.factory(scontext.getContext(), id);
+            final Foc file = focFactory.toFoc(id);
 
-            ContentValues content = createContentValues(file.getName(), list.getDelta());
-            database.insert(content);
+            ArrayList<String> keys = new ArrayList<>();
+            ArrayList<String> values = new ArrayList<>();
+
+            createContentValues(file.getName(), list.getDelta(), keys, values);
+            database.insert((String[]) keys.toArray(), (String[]) values.toArray());
         }
 
-        private ContentValues createContentValues(String filename,
-                GpxBigDeltaInterface summary) {
+        private void createContentValues(String filename,
+                GpxBigDeltaInterface summary, ArrayList<String> keys, ArrayList<String> values) {
 
             BoundingBoxE6 bounding = summary.getBoundingBox();
 
-            ContentValues content = new ContentValues();
-            content.put(GpxDbConstants.KEY_FILENAME,   filename);
-            content.put(GpxDbConstants.KEY_AVG_SPEED,  summary.getSpeed());
 
-            content.put(GpxDbConstants.KEY_MAX_SPEED,  summary.getAttributes().get(
+            keys.add(GpxDbConstants.KEY_FILENAME);   values.add(filename);
+            keys.add(GpxDbConstants.KEY_AVG_SPEED);  values.add(String.valueOf(summary.getSpeed()));
+
+            keys.add(GpxDbConstants.KEY_MAX_SPEED);  values.add(summary.getAttributes().get(
                     MaxSpeed.INDEX_MAX_SPEED));
 
-            content.put(GpxDbConstants.KEY_DISTANCE,   summary.getDistance());
-            content.put(GpxDbConstants.KEY_START_TIME, summary.getStartTime());
-            content.put(GpxDbConstants.KEY_TOTAL_TIME, summary.getTimeDelta());
-            content.put(GpxDbConstants.KEY_END_TIME,   summary.getEndTime());
-            content.put(GpxDbConstants.KEY_PAUSE,      summary.getPause());
-            content.put(GpxDbConstants.KEY_TYPE_ID,    summary.getType().toInteger());
-            content.put(GpxDbConstants.KEY_EAST_BOUNDING, bounding.getLonEastE6());
-            content.put(GpxDbConstants.KEY_WEST_BOUNDING, bounding.getLonWestE6());
-            content.put(GpxDbConstants.KEY_NORTH_BOUNDING, bounding.getLatNorthE6());
-            content.put(GpxDbConstants.KEY_SOUTH_BOUNDING, bounding.getLatSouthE6());
-            return content;
+            keys.add(GpxDbConstants.KEY_DISTANCE);   values.add(String.valueOf(summary.getDistance()));
+            keys.add(GpxDbConstants.KEY_START_TIME); values.add(String.valueOf(summary.getStartTime()));
+            keys.add(GpxDbConstants.KEY_TOTAL_TIME); values.add(String.valueOf(summary.getTimeDelta()));
+            keys.add(GpxDbConstants.KEY_END_TIME);   values.add(String.valueOf(summary.getEndTime()));
+            keys.add(GpxDbConstants.KEY_PAUSE);      values.add(String.valueOf(summary.getPause()));
+            keys.add(GpxDbConstants.KEY_TYPE_ID);    values.add(String.valueOf(summary.getType().toInteger()));
+            keys.add(GpxDbConstants.KEY_EAST_BOUNDING); values.add(String.valueOf(bounding.getLonEastE6()));
+            keys.add(GpxDbConstants.KEY_WEST_BOUNDING); values.add(String.valueOf(bounding.getLonWestE6()));
+            keys.add(GpxDbConstants.KEY_NORTH_BOUNDING); values.add(String.valueOf(bounding.getLatNorthE6()));
+            keys.add(GpxDbConstants.KEY_SOUTH_BOUNDING); values.add(String.valueOf(bounding.getLatSouthE6()));
         }
 
     }
@@ -343,18 +342,16 @@ public final class DirectorySynchronizer  implements Closeable {
 
         public void start() {
 
-            Foc gpxFile = FocAndroid.factory(scontext.getContext(), pendingHandle.getID());
+            Foc gpxFile = focFactory.toFoc(pendingHandle.getID());
 
-            Foc previewImageFile = SummaryConfig.getWriteablePreviewFile(
-                    scontext.getContext(),
-                    gpxFile);
+            Foc previewImageFile = summaryConfig.getPreviewFile(gpxFile);
 
             GpxInformation info =
                     new GpxFileWrapper(gpxFile, pendingHandle.getGpxList());
 
 
             try {
-                MapsForgePreview p = new MapsForgePreview(scontext, info, previewImageFile);
+                MapPreviewInterface p = mapPreviewFactory.createMapPreview(info, previewImageFile);
 
                 setPendingPreviewGenerator(p);
                 state.ping();
@@ -362,7 +359,7 @@ public final class DirectorySynchronizer  implements Closeable {
             } catch (Exception e) {
                 AppLog.w(this, e);
 
-                OldAppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DB_SYNC_CHANGED);
+                broadcaster.broadcast(AppBroadcaster.DB_SYNC_CHANGED);
                 setState(new StateLoadNextGpx());
             }
 
@@ -378,14 +375,14 @@ public final class DirectorySynchronizer  implements Closeable {
 
                 pendingPreviewGenerator.generateBitmapFile();
 
-                OldAppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DB_SYNC_CHANGED);
+                broadcaster.broadcast(AppBroadcaster.DB_SYNC_CHANGED);
                 setState(new StateLoadNextGpx());
             }
         }
     }
 
 
-    private void setPendingPreviewGenerator(MapsForgePreview g) {
+    private void setPendingPreviewGenerator(MapPreviewInterface g) {
         if (pendingPreviewGenerator != null) {
             pendingPreviewGenerator.onDestroy();
         }
@@ -399,7 +396,7 @@ public final class DirectorySynchronizer  implements Closeable {
 
         public StateTerminate(Exception e) {
             e.printStackTrace();
-            AppLog.e(scontext.getContext(), e);
+            AppLog.e(e);
         }
 
         public StateTerminate() {}
@@ -409,7 +406,7 @@ public final class DirectorySynchronizer  implements Closeable {
 
         @Override
         public void start() {
-            scontext.getContext().unregisterReceiver(onFileChanged);
+            broadcaster.unregister(onFileChanged);
 
             if (database != null) {
                 database.close();
@@ -418,7 +415,7 @@ public final class DirectorySynchronizer  implements Closeable {
             setPendingGpxHandle(null);
             setPendingPreviewGenerator(null);
 
-            OldAppBroadcaster.broadcast(scontext.getContext(), AppBroadcaster.DBSYNC_DONE);
+            broadcaster.broadcast(AppBroadcaster.DBSYNC_DONE);
 
 
             scontext.free();
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/FilesInDirectory.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/FilesInDirectory.java
similarity index 95%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/FilesInDirectory.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/FilesInDirectory.java
index 69ecc0ef..eef2a916 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/FilesInDirectory.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/FilesInDirectory.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
 import java.util.Map;
 import java.util.NavigableMap;
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDatabase.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDatabase.java
new file mode 100644
index 00000000..b4073039
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDatabase.java
@@ -0,0 +1,72 @@
+package ch.bailu.aat_lib.service.directory;
+
+import ch.bailu.aat_lib.util.sql.Database;
+import ch.bailu.aat_lib.util.sql.DbException;
+import ch.bailu.aat_lib.util.sql.ResultSet;
+import ch.bailu.foc.Foc;
+
+
+public final class GpxDatabase extends AbsDatabase{
+
+    private final String[] keys;
+    private final Database database;
+
+
+    public GpxDatabase (Database database, String path)
+            throws DbException {
+        this(database, path, GpxDbConstants.KEY_LIST_NEW);
+    }
+
+    public GpxDatabase (Database database, String path, String[] k)
+            throws DbException {
+
+        keys = k;
+        this.database = database;
+        database.open(path, GpxDbConstants.DB_VERSION, (db) -> {
+            db.execSQL("DROP TABLE IF EXISTS " + GpxDbConstants.DB_TABLE);
+            db.execSQL(getCreateTableExpression());
+        });
+    }
+
+    private String getCreateTableExpression() {
+        StringBuilder expression= new StringBuilder();
+        expression
+                .append("CREATE TABLE ")
+                .append(GpxDbConstants.DB_TABLE)
+                .append(" (");
+
+        for (int i = 0; i<GpxDbConstants.KEY_LIST_OLD.length; i++) {
+            if (i> 0) expression.append(", ");
+            expression.append(GpxDbConstants.KEY_LIST_OLD[i]).append(" ").append(GpxDbConstants.TYPE_LIST_OLD[i]);
+        }
+        expression.append(")");
+        return expression.toString();
+    }
+
+    @Override
+    public ResultSet query(String selection) {
+        return database.query(
+                GpxDbConstants.DB_TABLE,
+                keys,
+                selection,
+                null, null, null,
+                GpxDbConstants.KEY_START_TIME+ " DESC");
+    }
+
+
+    @Override
+    public void close() {
+        database.close();
+    }
+
+    @Override
+    public void deleteEntry(Foc file) throws DbException {
+        final String where = GpxDbConstants.KEY_FILENAME + "=?";
+        database.delete(GpxDbConstants.DB_TABLE, where,
+                        new String[]{file.getName()});
+    }
+
+    public void insert(String[] keys, String[] values) {
+        database.insert(GpxDbConstants.DB_TABLE, keys, values);
+    }
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDbConstants.java
similarity index 98%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDbConstants.java
index 5be70113..7223ea86 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxDbConstants.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxDbConstants.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
 public final class GpxDbConstants {
     public final static int DB_VERSION=8;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbEntry.java
similarity index 93%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbEntry.java
index c904c23c..02480f6b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbEntry.java
@@ -1,17 +1,16 @@
-package ch.bailu.aat.services.directory;
-
-import android.database.Cursor;
+package ch.bailu.aat_lib.service.directory;
 
 import ch.bailu.aat_lib.coordinates.BoundingBoxE6;
 import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.gpx.interfaces.GpxType;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public final class GpxInformationDbEntry extends GpxInformation {
-    private final Cursor cursor;
+    private final ResultSet cursor;
     private final Foc parent;
 
-    public GpxInformationDbEntry(Cursor c, Foc p) {
+    public GpxInformationDbEntry(ResultSet c, Foc p) {
         parent = p;
         cursor = c;
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbSummary.java
similarity index 93%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbSummary.java
index 9e3bea3c..ed2025f5 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/GpxInformationDbSummary.java
@@ -1,6 +1,5 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
-import android.database.Cursor;
 
 import ch.bailu.aat_lib.gpx.GpxBigDelta;
 import ch.bailu.aat_lib.gpx.GpxInformation;
@@ -12,6 +11,7 @@ import ch.bailu.aat_lib.gpx.attributes.GpxAttributesNull;
 import ch.bailu.aat_lib.gpx.attributes.GpxListAttributes;
 import ch.bailu.aat_lib.gpx.attributes.MaxSpeed;
 import ch.bailu.aat_lib.gpx.interfaces.GpxType;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public final class GpxInformationDbSummary extends GpxInformation {
@@ -21,7 +21,7 @@ public final class GpxInformationDbSummary extends GpxInformation {
     private final MaxSpeed maxSpeed = new MaxSpeed.Raw2();
 
 
-    public GpxInformationDbSummary(Foc dir, Cursor cursor) {
+    public GpxInformationDbSummary(Foc dir, ResultSet cursor) {
         directory = dir;
         list = new GpxList(GpxType.WAY, GpxListAttributes.factoryTrackList());
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/Iterator.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/Iterator.java
similarity index 95%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/Iterator.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/Iterator.java
index 2c441667..92b5ff6a 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/Iterator.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/Iterator.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
 import java.io.Closeable;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorAbstract.java
similarity index 50%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorAbstract.java
index b2cf2b27..3e113f03 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorAbstract.java
@@ -1,36 +1,31 @@
-package ch.bailu.aat.services.directory;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.database.Cursor;
-
-import ch.bailu.aat.factory.AndroidFocFactory;
-import ch.bailu.aat.preferences.SolidDirectoryQuery;
-import ch.bailu.aat.preferences.Storage;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.util.OldAppBroadcaster;
+package ch.bailu.aat_lib.service.directory;
+
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
+import ch.bailu.aat_lib.dispatcher.BroadcastReceiver;
 import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.preferences.OnPreferencesChanged;
+import ch.bailu.aat_lib.preferences.SolidDirectoryQuery;
 import ch.bailu.aat_lib.preferences.StorageInterface;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public abstract class IteratorAbstract extends Iterator implements OnPreferencesChanged {
-    private final ServiceContext scontext;
-
 
     private OnCursorChangedListener onCursorChangedListener = NULL_LISTENER;
-    private Cursor cursor = null;
+    private ResultSet resultSet = null;
     private final SolidDirectoryQuery sdirectory;
     private String selection="";
+    private final BroadcastReceiver onSyncChanged = objs -> query();
 
+    private final AppContext appContext;
 
-    public IteratorAbstract (ServiceContext sc) {
-        sdirectory = new SolidDirectoryQuery(new Storage(sc.getContext()), new AndroidFocFactory(sc.getContext()));
-        scontext = sc;
+
+    public IteratorAbstract (AppContext appContext) {
+        this.appContext = appContext;
+        sdirectory = new SolidDirectoryQuery(appContext.getStorage(), appContext.getFocFactory());
         sdirectory.register(this);
-        OldAppBroadcaster.register(sc.getContext(), onSyncChanged, AppBroadcaster.DB_SYNC_CHANGED);
+        appContext.getBroadcaster().register(onSyncChanged, AppBroadcaster.DB_SYNC_CHANGED);
     }
 
 
@@ -48,45 +43,37 @@ public abstract class IteratorAbstract extends Iterator implements OnPreferences
     }
 
 
-    private final BroadcastReceiver  onSyncChanged = new BroadcastReceiver () {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            query();
-        }
-    };
-
-
     @Override
     public boolean moveToPrevious() {
-        if (cursor!=null) return cursor.moveToPrevious();
+        if (resultSet!=null) return resultSet.moveToPrevious();
         return false;
     }
 
 
     @Override
     public boolean moveToNext() {
-        if (cursor != null) return cursor.moveToNext();
+        if (resultSet != null) return resultSet.moveToNext();
         return false;
     }
 
 
     @Override
     public boolean moveToPosition(int pos) {
-        if (cursor != null) return cursor.moveToPosition(pos);
+        if (resultSet != null) return resultSet.moveToPosition(pos);
         return false;
     }
 
 
     @Override
     public int getCount() {
-        if (cursor != null) return cursor.getCount();
+        if (resultSet != null) return resultSet.getCount();
         return 0;
     }
 
 
     @Override
     public int getPosition() {
-        if (cursor != null) return cursor.getPosition();
+        if (resultSet != null) return resultSet.getPosition();
         return -1;
     }
 
@@ -94,7 +81,7 @@ public abstract class IteratorAbstract extends Iterator implements OnPreferences
     @Override
     public abstract GpxInformation getInfo();
 
-    public abstract void onCursorChanged(Cursor cursor, Foc directory, String fid);
+    public abstract void onCursorChanged(ResultSet resultSet, Foc directory, String fid);
 
 
     @Override
@@ -103,18 +90,18 @@ public abstract class IteratorAbstract extends Iterator implements OnPreferences
         int oldPosition=0;
 
         selection = sdirectory.createSelectionString();
-        if (cursor != null) {
-            oldPosition = cursor.getPosition();
+        if (resultSet != null) {
+            oldPosition = resultSet.getPosition();
             fileOnOldPosition = getInfo().getFile().getPath();
-            cursor.close();
+            resultSet.close();
         }
 
-        cursor = scontext.getDirectoryService().query(selection);
+        resultSet = appContext.getServices().getDirectoryService().query(selection);
 
-        if (cursor != null) {
-            cursor.moveToPosition(oldPosition);
+        if (resultSet != null) {
+            resultSet.moveToPosition(oldPosition);
 
-            onCursorChanged(cursor, sdirectory.getValueAsFile(), fileOnOldPosition);
+            onCursorChanged(resultSet, sdirectory.getValueAsFile(), fileOnOldPosition);
             onCursorChangedListener.onCursorChanged();
         }
     }
@@ -122,9 +109,9 @@ public abstract class IteratorAbstract extends Iterator implements OnPreferences
 
     @Override
     public void close() {
-        if (cursor!= null) cursor.close();
+        if (resultSet!= null) resultSet.close();
         sdirectory.unregister(this);
-        scontext.getContext().unregisterReceiver(onSyncChanged);
+        appContext.getBroadcaster().unregister(onSyncChanged);
         onCursorChangedListener = NULL_LISTENER;
     }
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorFollowFile.java
similarity index 65%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorFollowFile.java
index 5b054653..85f05a63 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorFollowFile.java
@@ -1,16 +1,15 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
-import android.database.Cursor;
-
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.gpx.GpxInformation;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public final class IteratorFollowFile extends IteratorAbstract {
     private GpxInformation info = GpxInformation.NULL;
 
-    public IteratorFollowFile(ServiceContext sc) {
-        super(sc);
+    public IteratorFollowFile(AppContext appContext) {
+        super(appContext);
         query();
     }
 
@@ -22,8 +21,8 @@ public final class IteratorFollowFile extends IteratorAbstract {
 
 
     @Override
-    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
-        info = new GpxInformationDbEntry(cursor, directory);
+    public void onCursorChanged(ResultSet resultSet, Foc directory, String fid) {
+        info = new GpxInformationDbEntry(resultSet, directory);
 
         findFile(fid);
     }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSimple.java
similarity index 62%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSimple.java
index 55fa0dd9..40940ce9 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSimple.java
@@ -1,17 +1,16 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
-import android.database.Cursor;
-
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.gpx.GpxInformation;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public final class IteratorSimple extends IteratorAbstract {
     private GpxInformation info = GpxInformation.NULL;
 
 
-    public IteratorSimple(ServiceContext sc) {
-        super(sc);
+    public IteratorSimple(AppContext appContext) {
+        super(appContext);
         query();
     }
 
@@ -23,7 +22,7 @@ public final class IteratorSimple extends IteratorAbstract {
 
 
     @Override
-    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
+    public void onCursorChanged(ResultSet cursor, Foc directory, String fid) {
         if (cursor.getCount()>0) {
             info = new GpxInformationDbEntry(cursor, directory);
         } else {
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSummary.java
similarity index 64%
rename from aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSummary.java
index 851de6b8..4a48866e 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/IteratorSummary.java
@@ -1,18 +1,18 @@
-package ch.bailu.aat.services.directory;
+package ch.bailu.aat_lib.service.directory;
 
-import android.database.Cursor;
 
-import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.gpx.GpxInformation;
 import ch.bailu.aat_lib.gpx.InfoID;
+import ch.bailu.aat_lib.util.sql.ResultSet;
 import ch.bailu.foc.Foc;
 
 public final class IteratorSummary extends IteratorAbstract {
 
     private GpxInformation info = GpxInformation.NULL;
 
-    public IteratorSummary(ServiceContext sc) {
-        super(sc);
+    public IteratorSummary(AppContext appContext) {
+        super(appContext);
         query();
     }
 
@@ -28,7 +28,7 @@ public final class IteratorSummary extends IteratorAbstract {
     }
 
     @Override
-    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
+    public void onCursorChanged(ResultSet cursor, Foc directory, String fid) {
             info = new GpxInformationDbSummary(directory, cursor);
     }
 
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewFactory.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewFactory.java
new file mode 100644
index 00000000..d1e2c43e
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewFactory.java
@@ -0,0 +1,8 @@
+package ch.bailu.aat_lib.service.directory;
+
+import ch.bailu.aat_lib.gpx.GpxInformation;
+import ch.bailu.foc.Foc;
+
+public interface MapPreviewFactory {
+    MapPreviewInterface createMapPreview(GpxInformation info, Foc previewImageFile);
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewInterface.java
new file mode 100644
index 00000000..cbc6b870
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/MapPreviewInterface.java
@@ -0,0 +1,9 @@
+package ch.bailu.aat_lib.service.directory;
+
+public interface MapPreviewInterface {
+    boolean isReady();
+
+    void generateBitmapFile();
+
+    void onDestroy();
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/SummaryConfig.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/SummaryConfig.java
new file mode 100644
index 00000000..120f0aea
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/directory/SummaryConfig.java
@@ -0,0 +1,26 @@
+package ch.bailu.aat_lib.service.directory;
+
+import ch.bailu.aat_lib.util.fs.AppDirectory;
+import ch.bailu.foc.Foc;
+
+public class SummaryConfig {
+
+    public Foc getSummaryDir(Foc dir) {
+        return dir.child(AppDirectory.DIR_CACHE);
+    }
+
+    public String getDBPath(Foc dir) {
+        return getSummaryDir(dir)
+                .child(AppDirectory.FILE_CACHE_DB)
+                .toString();
+    }
+
+    public Foc getPreviewFile(Foc gpxFile) {
+        String name = gpxFile.getName();
+        Foc dir = gpxFile.parent();
+
+        dir = getSummaryDir(dir);
+
+        return dir.child(name + AppDirectory.PREVIEW_EXTENSION);
+    }
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Lock.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Lock.java
similarity index 88%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Lock.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Lock.java
index 4b0a8d3b..77025f09 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Lock.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Lock.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation;
 
 import ch.bailu.aat_lib.logger.AppLog;
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Status.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Status.java
similarity index 91%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Status.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Status.java
index d5f1242c..dbbc2193 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Status.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/Dem3Status.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation;
 
 public final class Dem3Status {
 
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/ElevetionServiceInterface.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/ElevetionServiceInterface.java
index 5b878e1d..a32f49d2 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/ElevetionServiceInterface.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/ElevetionServiceInterface.java
@@ -1,5 +1,11 @@
 package ch.bailu.aat_lib.service.elevation;
 
+import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
+
 public interface ElevetionServiceInterface {
     short getElevation(int latitudeE6, int longitudeE6);
+
+    void requestElevationUpdates(ElevationUpdaterClient owner, Dem3Coordinates[] srtmTileCoordinates);
+
+    void cancelElevationUpdates(ElevationUpdaterClient objGpxStatic);
 }
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Array.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Array.java
similarity index 93%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Array.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Array.java
index 7904f98f..0f75a674 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Array.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Array.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 public final class Dem3Array {
     private static final int DEM3_BUFFER_DIM=1201;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Coordinates.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Coordinates.java
similarity index 95%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Coordinates.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Coordinates.java
index 9d503a51..aeff9f22 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Coordinates.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Coordinates.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 import org.mapsforge.core.model.LatLong;
 import org.mapsforge.core.util.LatLongUtils;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3LoaderTask.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3LoaderTask.java
similarity index 83%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3LoaderTask.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3LoaderTask.java
index 47e00b2d..e0fc3f41 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3LoaderTask.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3LoaderTask.java
@@ -1,12 +1,13 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 import java.util.zip.ZipInputStream;
 
-import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileTask;
-import ch.bailu.aat.util.OldAppBroadcaster;
+import ch.bailu.aat_lib.app.AppContext;
 import ch.bailu.aat_lib.dispatcher.AppBroadcaster;
 import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
+import ch.bailu.aat_lib.service.elevation.tile.Dem3Array;
 import ch.bailu.foc.Foc;
 
 public final class Dem3LoaderTask extends FileTask {
@@ -22,7 +23,7 @@ public final class Dem3LoaderTask extends FileTask {
 
 
     @Override
-    public long bgOnProcess(ServiceContext sc) {
+    public long bgOnProcess(AppContext appContext) {
         ZipInputStream zip = null;
 
 
@@ -60,7 +61,7 @@ public final class Dem3LoaderTask extends FileTask {
 
 
         if (status.getStatus() == Dem3Status.VALID || status.getStatus() == Dem3Status.EMPTY) {
-            OldAppBroadcaster.broadcast(sc.getContext(),
+            appContext.getBroadcaster().broadcast(
                     AppBroadcaster.FILE_CHANGED_INCACHE, getFile());
 
             return array.data.length;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Tile.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Tile.java
similarity index 87%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Tile.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Tile.java
index 3dcaf95b..68e33f27 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/Dem3Tile.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/Dem3Tile.java
@@ -1,11 +1,13 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
-import androidx.annotation.NonNull;
+import javax.annotation.Nonnull;
 
 import ch.bailu.aat.preferences.map.SolidDem3Directory;
 import ch.bailu.aat_lib.coordinates.Dem3Coordinates;
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.background.BackgroundTask;
+import ch.bailu.aat_lib.service.ServicesInterface;
+import ch.bailu.aat_lib.service.background.BackgroundTask;
+import ch.bailu.aat_lib.service.elevation.Dem3Lock;
+import ch.bailu.aat_lib.service.elevation.Dem3Status;
 import ch.bailu.aat_lib.service.elevation.ElevationProvider;
 import ch.bailu.foc.Foc;
 
@@ -49,14 +51,16 @@ public final class Dem3Tile implements ElevationProvider, DemProvider {
      */
 
 
-    private final ch.bailu.aat.services.elevation.tile.Dem3Coordinates coordinates = new ch.bailu.aat.services.elevation.tile.Dem3Coordinates();
+    private final ch.bailu.aat_lib.service.elevation.tile.Dem3Coordinates coordinates = new ch.bailu.aat_lib.service.elevation.tile.Dem3Coordinates();
     private final Dem3Status status = new Dem3Status();
-    private final Dem3Array  array = new Dem3Array();
+    private final Dem3Array array = new Dem3Array();
     private final Dem3Lock lock = new Dem3Lock();
 
+
+
     private BackgroundTask loader = BackgroundTask.NULL;
 
-    @NonNull
+    @Nonnull
     @Override
     public String toString() {
         return coordinates.coordinates.toString();
@@ -70,12 +74,12 @@ public final class Dem3Tile implements ElevationProvider, DemProvider {
 
 
 
-    public void reload(ServiceContext sc) {
+    public void reload(ServicesInterface sc) {
         load(sc, coordinates.coordinates);
     }
 
 
-    public  synchronized void load(ServiceContext sc, Dem3Coordinates c) {
+    public  synchronized void load(ServicesInterface sc, Dem3Coordinates c) {
 
         if (!lock.isLocked()) {
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemDimension.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemDimension.java
similarity index 79%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemDimension.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemDimension.java
index 40e59824..abf38e91 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemDimension.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemDimension.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 
 
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemGeoToIndex.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemGeoToIndex.java
similarity index 96%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemGeoToIndex.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemGeoToIndex.java
index 74098cbd..a6b3153c 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemGeoToIndex.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemGeoToIndex.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 public final class DemGeoToIndex {
     private final int DOFFSET;
diff --git a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemProvider.java b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemProvider.java
similarity index 93%
rename from aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemProvider.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemProvider.java
index 3a96f304..72ef646b 100644
--- a/aat-android/src/main/java/ch/bailu/aat/services/elevation/tile/DemProvider.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/service/elevation/tile/DemProvider.java
@@ -1,4 +1,4 @@
-package ch.bailu.aat.services.elevation.tile;
+package ch.bailu.aat_lib.service.elevation.tile;
 
 public interface DemProvider {
 
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/util/fs/AFile.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/fs/AFile.java
new file mode 100644
index 00000000..1449b3ad
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/fs/AFile.java
@@ -0,0 +1,34 @@
+package ch.bailu.aat_lib.util.fs;
+
+import ch.bailu.aat_lib.logger.AppLog;
+import ch.bailu.aat_lib.resources.Res;
+import ch.bailu.foc.Foc;
+
+public class AFile {
+    public static void logErrorExists(Foc f) {
+        AppLog.e( f.getPathName() + Res.str().file_exists());
+    }
+
+
+    public static void logErrorReadOnly(Foc f) {
+        AppLog.e(f.getPathName() + " is read only.*");
+    }
+
+    public static void logErrorNoAccess(Foc f) {
+        AppLog.e(f.getPathName() + " no access.*");
+    }
+
+
+    public static void logInfoAcess(Foc f) {
+        String msg = ": no acess.*";
+        if (f.canWrite()) {
+            msg = " is writeable.*";
+        } else if (f.canRead()) {
+            msg = " is read only.*";
+        }
+
+        AppLog.i(f.getPathName() + msg);
+    }
+
+
+}
diff --git a/aat-android/src/main/java/ch/bailu/aat/util/net/URX.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/net/URX.java
similarity index 67%
rename from aat-android/src/main/java/ch/bailu/aat/util/net/URX.java
rename to aat-lib/src/main/java/ch/bailu/aat_lib/util/net/URX.java
index 9c07180b..5c41d0b0 100644
--- a/aat-android/src/main/java/ch/bailu/aat/util/net/URX.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/net/URX.java
@@ -1,14 +1,13 @@
-package ch.bailu.aat.util.net;
+package ch.bailu.aat_lib.util.net;
 
-import android.net.Uri;
-import androidx.annotation.NonNull;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 
+import javax.annotation.Nonnull;
+
 
 public class URX {
-    private Uri uri;
 
     private URL url;
     private MalformedURLException urlException;
@@ -22,22 +21,16 @@ public class URX {
     public URX(String s) {
         string = s;
     }
-    public URX(Uri u) {
-        uri = u;
-    }
 
 
 
-    @NonNull
+    @Nonnull
     @Override
     public String toString() {
         if (string == null) {
-            if (uri != null) {
-                string = uri.toString();
-            } else if (url != null) {
                 string = url.toString();
             }
-        }
+
 
         if (string == null) string = "";
 
@@ -66,10 +59,4 @@ public class URX {
         return url;
     }
 
-    public Uri toUri() {
-        if (uri == null) {
-            uri = Uri.parse(toString());
-        }
-        return uri;
-    }
 }
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/Database.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/Database.java
index 6164090c..2ad15aac 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/Database.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/Database.java
@@ -2,17 +2,19 @@ package ch.bailu.aat_lib.util.sql;
 
 public interface Database {
 
-    void open(String name, int version, OnModelUpdate update);
+    void open(String name, int version, OnModelUpdate update) throws DbException;
+
+    void execSQL(String sql) throws DbException;
 
     interface OnModelUpdate {
-        void run();
+        void run(Database db);
     }
 
-    ResultSet query(String table, String[] keys, String selection, String[] selectionArgs, String groupBy, String having, String orderBy);
+    ResultSet query(String table, String[] keys, String selection, String[] selectionArgs, String groupBy, String having, String orderBy) throws DbException;
 
-    void delete(String table, String where, String[] whereArgs);
+    void delete(String table, String where, String[] whereArgs) throws DbException;
 
-    void insert(String table, String[] keys, String[] types, String[] values);
+    void insert(String table, String[] keys, String[] values) throws DbException;
 
 
     void close();
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbException.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbException.java
new file mode 100644
index 00000000..eec59839
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbException.java
@@ -0,0 +1,7 @@
+package ch.bailu.aat_lib.util.sql;
+
+public class DbException extends RuntimeException {
+    public DbException(Exception e) {
+        super(e);
+    }
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbFactory.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbFactory.java
new file mode 100644
index 00000000..c9a432a4
--- /dev/null
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/DbFactory.java
@@ -0,0 +1,7 @@
+package ch.bailu.aat_lib.util.sql;
+
+public interface DbFactory {
+
+
+    Database createDataBase();
+}
diff --git a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/ResultSet.java b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/ResultSet.java
index ee4c1620..b8230ec8 100644
--- a/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/ResultSet.java
+++ b/aat-lib/src/main/java/ch/bailu/aat_lib/util/sql/ResultSet.java
@@ -1,4 +1,27 @@
 package ch.bailu.aat_lib.util.sql;
 
 public interface ResultSet {
+    boolean moveToFirst();
+
+    boolean moveToNext();
+
+    void close();
+
+    int getColumnIndex(String keyFilename);
+
+    String getString(int index);
+
+    boolean moveToPrevious();
+
+    boolean moveToPosition(int pos);
+
+    int getCount();
+
+    int getPosition();
+
+    long getLong(int index);
+
+    float getFloat(int index);
+
+    boolean isClosed();
 }
