diff --git a/project/app/src/main/java/com/achep/acdisplay/Config.java b/project/app/src/main/java/com/achep/acdisplay/Config.java
index ae444429..5a2d6872 100644
--- a/project/app/src/main/java/com/achep/acdisplay/Config.java
+++ b/project/app/src/main/java/com/achep/acdisplay/Config.java
@@ -105,6 +105,7 @@ public final class Config extends ConfigBase {
     public static final int PRIVACY_HIDE_CONTENT_MASK = 1;
     public static final int PRIVACY_HIDE_ACTIONS_MASK = 2;
     public static final String KEY_DOUBLE_TAP_TO_SLEEP = "double_tap_to_sleep";
+    public static final String KEY_MEDIA_WIDGET = "media_widget";
     public static final String KEY_CORNER_ACTION_LEFT_TOP = "corner_action_left_top";
     public static final String KEY_CORNER_ACTION_RIGHT_TOP = "corner_action_right_top";
     public static final String KEY_CORNER_ACTION_LEFT_BOTTOM = "corner_action_left_bottom";
@@ -147,6 +148,7 @@ public final class Config extends ConfigBase {
     private boolean mEnabledOnlyWhileCharging;
     private boolean mScreenOffAfterLastNotify;
     private boolean mDoubleTapToSleep;
+    private boolean mMediaWidget;
     private boolean mFeelWidgetPinnable;
     private boolean mFeelWidgetReadable;
     private boolean mNotifyWakeUpOn;
@@ -349,6 +351,9 @@ public final class Config extends ConfigBase {
         map.put(KEY_DOUBLE_TAP_TO_SLEEP, new ConfigBase.Option(
                 "mDoubleTapToSleep", null, null, boolean.class)
                 .setDefaultRes(R.bool.config_default_double_tap_to_sleep));
+        map.put(KEY_MEDIA_WIDGET, new ConfigBase.Option(
+                "mMediaWidget", null, null, boolean.class)
+                .setDefaultRes(R.bool.config_default_media_widget));
         map.put(KEY_CORNER_ACTION_LEFT_TOP, new ConfigBase.Option(
                 "mCornerActionLeftTop", null, null, int.class)
                 .setDefaultRes(R.integer.config_default_corner_left_top));
@@ -692,6 +697,10 @@ public final class Config extends ConfigBase {
         return mDoubleTapToSleep;
     }
 
+    public boolean isMediaWidgetEnabled() {
+        return mMediaWidget;
+    }
+
     public boolean isUnlockAnimationEnabled() {
         return mUiUnlockAnimation;
     }
diff --git a/project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsUiListener.java b/project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsHelper.java
similarity index 70%
rename from project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsUiListener.java
rename to project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsHelper.java
index 14f68490..19d67ff7 100644
--- a/project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsUiListener.java
+++ b/project/app/src/main/java/com/achep/acdisplay/services/media/MediaControlsHelper.java
@@ -23,7 +23,9 @@ import android.os.Message;
 import android.support.annotation.NonNull;
 import android.support.v4.media.session.PlaybackStateCompat;
 
+import com.achep.acdisplay.Config;
 import com.achep.base.async.WeakHandler;
+import com.achep.base.content.ConfigBase;
 import com.achep.base.interfaces.ISubscriptable;
 import com.achep.base.tests.Check;
 
@@ -31,11 +33,14 @@ import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Created by Artem Chepurnoy on 30.04.2015.
+ * A helper class for deciding when to show the media controls widget.
+ *
+ * @author Artem Chepurnoy
  */
-public class MediaControlsUiListener implements
+public class MediaControlsHelper implements
         MediaController2.MediaListener,
-        ISubscriptable<MediaControlsUiListener.Callback> {
+        ISubscriptable<MediaControlsHelper.Callback>,
+        ConfigBase.OnConfigChangedListener {
 
     private static final int DELAY = 6000; // 6 sec.
 
@@ -47,12 +52,14 @@ public class MediaControlsUiListener implements
     private final MediaController2 mMediaController;
 
     private boolean mShowing;
+    private boolean mStarted;
+    private boolean mEnabled;
 
     public interface Callback {
         void onStateChanged(boolean showing);
     }
 
-    public MediaControlsUiListener(@NonNull MediaController2 mc) {
+    public MediaControlsHelper(@NonNull MediaController2 mc) {
         mHandler = new H(this);
         mListeners = new ArrayList<>();
         mMediaController = mc;
@@ -60,12 +67,21 @@ public class MediaControlsUiListener implements
     }
 
     public void start() {
+        Config.getInstance().registerListener(this);
         mMediaController.registerListener(this);
+        if (mEnabled) mMediaController.start();
+        mStarted = true;
+
+        // Initialize
+        // FIXME: Do I need to ping the playback state here?
         onPlaybackStateChanged(mMediaController.getPlaybackState());
     }
 
     public void stop() {
+        mStarted = false;
+        if (mEnabled) mMediaController.stop();
         mMediaController.unregisterListener(this);
+        Config.getInstance().unregisterListener(this);
     }
 
     @Override
@@ -118,21 +134,42 @@ public class MediaControlsUiListener implements
         }
     }
 
+    @Override
+    public void onConfigChanged(@NonNull ConfigBase config,
+                                @NonNull String key,
+                                @NonNull Object value) {
+        switch (key) {
+            case Config.KEY_MEDIA_WIDGET:
+                mEnabled = (boolean) value;
+                if (mStarted) {
+                    if (mEnabled) {
+                        mMediaController.start();
+                    } else mMediaController.stop();
+                }
+                break;
+        }
+    }
+
+    @NonNull
+    public MediaController2 getMediaController() {
+        return mMediaController;
+    }
+
     //-- CLASSES --------------------------------------------------------------
 
     /**
      * @author Artem Chepurnoy
      */
-    private static class H extends WeakHandler<MediaControlsUiListener> {
+    private static class H extends WeakHandler<MediaControlsHelper> {
 
         private static final int MSG_HIDE_MEDIA_WIDGET = 1;
 
-        public H(@NonNull MediaControlsUiListener cc) {
+        public H(@NonNull MediaControlsHelper cc) {
             super(cc);
         }
 
         @Override
-        protected void onHandleMassage(@NonNull MediaControlsUiListener cc, Message msg) {
+        protected void onHandleMassage(@NonNull MediaControlsHelper cc, Message msg) {
             switch (msg.what) {
                 case MSG_HIDE_MEDIA_WIDGET:
                     cc.mShowing = false;
diff --git a/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java b/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java
index e6de239e..327daf01 100644
--- a/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java
+++ b/project/app/src/main/java/com/achep/acdisplay/ui/fragments/AcDisplayFragment.java
@@ -31,7 +31,6 @@ import android.os.Message;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.support.v4.media.session.PlaybackStateCompat;
 import android.transition.ChangeBounds;
 import android.transition.Fade;
 import android.transition.Scene;
@@ -62,7 +61,7 @@ import com.achep.acdisplay.notifications.NotificationPresenter;
 import com.achep.acdisplay.notifications.NotificationUtils;
 import com.achep.acdisplay.notifications.OpenNotification;
 import com.achep.acdisplay.services.media.MediaController2;
-import com.achep.acdisplay.services.media.Metadata;
+import com.achep.acdisplay.services.media.MediaControlsHelper;
 import com.achep.acdisplay.ui.CornerHelper;
 import com.achep.acdisplay.ui.DynamicBackground;
 import com.achep.acdisplay.ui.activities.AcDisplayActivity;
@@ -102,7 +101,6 @@ public class AcDisplayFragment extends LeakWatchFragment implements
         View.OnTouchListener,
         Widget.Callback,
         ConfigBase.OnConfigChangedListener,
-        MediaController2.MediaListener,
         CircleView.Callback {
 
     private static final String TAG = "AcDisplayFragment";
@@ -170,7 +168,7 @@ public class AcDisplayFragment extends LeakWatchFragment implements
 
     // Media widget
     private SceneCompat mSceneMainMedia;
-    private MediaController2 mMediaController;
+    private MediaControlsHelper mMediaControlsHelper;
     private MediaWidget mMediaWidget;
     private boolean mMediaWidgetActive;
 
@@ -251,7 +249,16 @@ public class AcDisplayFragment extends LeakWatchFragment implements
                 : new ClockWidget(this, this);
 
         // Media widget
-        mMediaController = MediaController2.newInstance(getActivity()).asyncWrap();
+        MediaController2 mc = MediaController2.newInstance(getActivity()).asyncWrap();
+        mMediaControlsHelper = new MediaControlsHelper(mc);
+        mMediaControlsHelper.registerListener(new MediaControlsHelper.Callback() {
+            @Override
+            public void onStateChanged(boolean showing) {
+                if (showing) {
+                    makeMediaWidgetActive();
+                } else makeMediaWidgetInactive();
+            }
+        });
         mMediaWidget = new MediaWidget(this, this);
 
         // Transitions
@@ -373,9 +380,7 @@ public class AcDisplayFragment extends LeakWatchFragment implements
         mPendingIconsSizeChange = false;
 
         // Media controller.
-        mMediaController.start();
-        mMediaController.registerListener(this);
-        onPlaybackStateChanged(mMediaController.getPlaybackState());
+        mMediaControlsHelper.start();
 
         // Show the notification that is the cause of AcDisplay being shown. This
         // allows user to see that damn notification in no time.
@@ -431,8 +436,7 @@ public class AcDisplayFragment extends LeakWatchFragment implements
         mMediaWidget.stop();
 
         // Media controller.
-        mMediaController.stop();
-        mMediaController.unregisterListener(this);
+        mMediaControlsHelper.stop();
         super.onPause();
     }
 
@@ -1051,30 +1055,7 @@ public class AcDisplayFragment extends LeakWatchFragment implements
      */
     @NonNull
     public MediaController2 getMediaController2() {
-        return mMediaController;
-    }
-
-    @Override
-    public void onMetadataChanged(@NonNull Metadata metadata) {
-        // This event is handled by
-        // the media widget.
-    }
-
-    @Override
-    public void onPlaybackStateChanged(int state) {
-        switch (state) {
-            case PlaybackStateCompat.STATE_PLAYING:
-                mHandler.removeMessages(MSG_HIDE_MEDIA_WIDGET);
-                makeMediaWidgetActive();
-                break;
-            default:
-                if (mMediaWidgetActive) {
-                    int delay = 6000; // 6 sec.
-                    if (state == PlaybackStateCompat.STATE_NONE) delay = 500;
-                    mHandler.sendEmptyMessageDelayed(MSG_HIDE_MEDIA_WIDGET, delay);
-                }
-                break;
-        }
+        return mMediaControlsHelper.getMediaController();
     }
 
     private void makeMediaWidgetActive() {
diff --git a/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java b/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java
index 8b3d6a75..127ccaba 100644
--- a/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java
+++ b/project/app/src/main/java/com/achep/acdisplay/ui/fragments/settings/MoreSettings.java
@@ -70,6 +70,7 @@ public class MoreSettings extends BaseSettings implements
         syncPreference(Config.KEY_ONLY_WHILE_CHARGING);
         syncPreference(Config.KEY_FEEL_SCREEN_OFF_AFTER_LAST_NOTIFY);
         syncPreference(Config.KEY_DOUBLE_TAP_TO_SLEEP);
+        syncPreference(Config.KEY_MEDIA_WIDGET);
         syncPreference(Config.KEY_FEEL_WIDGET_PINNABLE);
         syncPreference(Config.KEY_FEEL_WIDGET_READABLE);
         syncPreference(Config.KEY_CORNER_ACTION_LEFT_TOP, mListPreferenceCornerActionSetter);
