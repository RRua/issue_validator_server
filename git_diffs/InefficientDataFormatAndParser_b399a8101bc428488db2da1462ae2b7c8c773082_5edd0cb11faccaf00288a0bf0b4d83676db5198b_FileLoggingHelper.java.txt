diff --git a/GPSLogger/src/com/mendhak/gpslogger/GpsLoggingService.java b/GPSLogger/src/com/mendhak/gpslogger/GpsLoggingService.java
index 8fcd536c..d76a7251 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/GpsLoggingService.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/GpsLoggingService.java
@@ -12,7 +12,7 @@ import com.mendhak.gpslogger.common.Session;
 import com.mendhak.gpslogger.common.Utilities;
 import com.mendhak.gpslogger.loggers.FileLoggerFactory;
 import com.mendhak.gpslogger.loggers.IFileLogger;
-import com.mendhak.gpslogger.loggers.IFileLoggingHelperCallback;
+
 import com.mendhak.gpslogger.senders.AlarmReceiver;
 import com.mendhak.gpslogger.senders.email.AutoEmailHelper;
 
@@ -35,7 +35,7 @@ import android.os.Handler;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
 
-public class GpsLoggingService extends Service implements IFileLoggingHelperCallback
+public class GpsLoggingService extends Service
 {
 	private static NotificationManager gpsNotifyManager;
 	private static int NOTIFICATION_ID;
@@ -702,6 +702,7 @@ public class GpsLoggingService extends Service implements IFileLoggingHelperCall
 			try
 			{
 				logger.Write(loc);
+				Session.setAllowDescription(true);
 			}
 			catch (Exception e)
 			{
diff --git a/GPSLogger/src/com/mendhak/gpslogger/GpsMainActivity.java b/GPSLogger/src/com/mendhak/gpslogger/GpsMainActivity.java
index f7c58b05..f86a4210 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/GpsMainActivity.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/GpsMainActivity.java
@@ -13,16 +13,19 @@ import java.util.Locale;
 import com.mendhak.gpslogger.common.AppSettings;
 import com.mendhak.gpslogger.common.Session;
 import com.mendhak.gpslogger.common.Utilities;
-import com.mendhak.gpslogger.loggers.FileLoggingHelper;
-import com.mendhak.gpslogger.loggers.IFileLoggingHelperCallback;
+import com.mendhak.gpslogger.loggers.FileLoggerFactory;
+import com.mendhak.gpslogger.loggers.IFileLogger;
+//import com.mendhak.gpslogger.loggers.IFileLoggingHelperCallback;
 import com.mendhak.gpslogger.senders.email.AutoEmailActivity;
 import com.mendhak.gpslogger.senders.osm.OSMHelper;
 import com.mendhak.gpslogger.R;
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.Dialog;
 
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.ServiceConnection;
 import android.content.SharedPreferences;
@@ -42,6 +45,7 @@ import android.view.View;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.CompoundButton;
+import android.widget.EditText;
 import android.widget.ListView;
 import android.widget.TableRow;
 import android.widget.TextView;
@@ -50,7 +54,7 @@ import android.widget.AdapterView.OnItemClickListener;
 import android.widget.CompoundButton.OnCheckedChangeListener;
 
 public class GpsMainActivity extends Activity implements OnCheckedChangeListener,
-		IGpsLoggerServiceClient, IFileLoggingHelperCallback
+		IGpsLoggerServiceClient
 {
 
 	/**
@@ -58,7 +62,6 @@ public class GpsMainActivity extends Activity implements OnCheckedChangeListener
 	 */
 	public final Handler handler = new Handler();
 	private static Intent serviceIntent;
-	private FileLoggingHelper fileHelper;
 	private GpsLoggingService loggingService;
 
 	/**
@@ -114,8 +117,6 @@ public class GpsMainActivity extends Activity implements OnCheckedChangeListener
 
 		Utilities.LogInfo("GPSLogger started");
 
-		fileHelper = new FileLoggingHelper(this);
-
 		setContentView(R.layout.main);
 
 		GetPreferences();
@@ -572,13 +573,74 @@ public class GpsMainActivity extends Activity implements OnCheckedChangeListener
 	}
 	
 	
+	
 	/**
 	 * Prompts user for input, then adds text to log file
 	 */
 	private void Annotate()
 	{
 
-		fileHelper.Annotate();
+		if (!AppSettings.shouldLogToGpx() && !AppSettings.shouldLogToKml())
+		{
+			return;
+		}
+		
+		if (!Session.shoulAllowDescription())
+		{
+			Utilities.MsgBox(getString(R.string.not_yet),
+					getString(R.string.cant_add_description_until_next_point),
+					GetActivity());
+
+			return;
+
+		}
+
+		AlertDialog.Builder alert = new AlertDialog.Builder(GpsMainActivity.this);
+
+		alert.setTitle(R.string.add_description);
+		alert.setMessage(R.string.letters_numbers);
+
+		// Set an EditText view to get user input
+		final EditText input = new EditText(getBaseContext());
+		alert.setView(input);
+
+		alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener()
+		{
+			public void onClick(DialogInterface dialog, int whichButton)
+			{
+				final String desc = Utilities.CleanDescription(input.getText().toString());
+				Annotate(desc);
+			}
+
+		});
+		alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener()
+		{
+			public void onClick(DialogInterface dialog, int whichButton)
+			{
+				// Cancelled.
+			}
+		});
+
+		alert.show();
+	}
+	
+	private void Annotate(String description)
+	{
+		List<IFileLogger> loggers = FileLoggerFactory.GetFileLoggers();
+		
+		for(IFileLogger logger : loggers)
+		{
+			try
+			{
+				logger.Annotate(description);
+				SetStatus(getString(R.string.description_added));
+				Session.setAllowDescription(false);
+			}
+			catch (Exception e)
+			{
+				SetStatus(getString(R.string.could_not_write_to_file));
+			}
+		}
 	}
 
 	/**
diff --git a/GPSLogger/src/com/mendhak/gpslogger/common/Session.java b/GPSLogger/src/com/mendhak/gpslogger/common/Session.java
index bbb4d9e2..cbdfecec 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/common/Session.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/common/Session.java
@@ -24,6 +24,7 @@ public class Session extends Application
 	private static Location currentLocationInfo;
 	private static boolean isBound;
 	private static boolean emailReadyToBeSent=false;
+	private static boolean allowDescription = true;
 
 	// ---------------------------------------------------
 	/**
@@ -305,4 +306,14 @@ public class Session extends Application
 		return emailReadyToBeSent;
 	}
 
+	public static boolean shoulAllowDescription()
+	{
+		return allowDescription;
+	}
+
+	public static void setAllowDescription(boolean allowDescription)
+	{
+		Session.allowDescription = allowDescription;
+	}
+
 }
diff --git a/GPSLogger/src/com/mendhak/gpslogger/loggers/FileLoggingHelper.java b/GPSLogger/src/com/mendhak/gpslogger/loggers/FileLoggingHelper.java
deleted file mode 100644
index 5058092e..00000000
--- a/GPSLogger/src/com/mendhak/gpslogger/loggers/FileLoggingHelper.java
+++ /dev/null
@@ -1,544 +0,0 @@
-package com.mendhak.gpslogger.loggers;
-
-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.RandomAccessFile;
-import java.nio.channels.FileLock;
-import java.util.Date;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.location.Location;
-import android.os.Environment;
-import android.util.Log;
-
-import android.widget.EditText;
-
-import com.mendhak.gpslogger.R;
-import com.mendhak.gpslogger.common.AppSettings;
-import com.mendhak.gpslogger.common.Session;
-import com.mendhak.gpslogger.common.Utilities;
-
-
-public class FileLoggingHelper
-{
-
-	private IFileLoggingHelperCallback callingClient;
-	private FileLock gpxLock;
-	private FileLock kmlLock;
-	private static boolean allowDescription = false;
-
-	public FileLoggingHelper(IFileLoggingHelperCallback callback)
-	{
-		callingClient = callback;
-	}
-
-	public void WriteToFile(Location loc)
-	{
-
-
-	
-		if (!AppSettings.shouldLogToGpx() && !AppSettings.shouldLogToKml())
-		{
-			return;
-		}
-
-		try
-		{
-
-			boolean brandNewFile = false;
-
-			File gpxFolder = new File(Environment.getExternalStorageDirectory(), "GPSLogger");
-
-			if (!gpxFolder.exists())
-			{
-				gpxFolder.mkdirs();
-				brandNewFile = true;
-			}
-
-			if (AppSettings.shouldLogToGpx())
-			{
-				WriteToGpxFile(loc, gpxFolder, brandNewFile);
-			}
-
-			if (AppSettings.shouldLogToKml())
-			{
-				WriteToKmlFile(loc, gpxFolder, brandNewFile);
-
-			}
-
-			allowDescription = true;
-
-		}
-		catch (Exception e)
-		{
-			Log.e("Main", "Could not write file " + e.getMessage());
-			callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file)
-					+ e.getMessage());
-		}
-
-	}
-
-	private void WriteToKmlFile(Location loc, File gpxFolder, boolean brandNewFile)
-	{
-
-		try
-		{
-			File kmlFile = new File(gpxFolder.getPath(), Session.getCurrentFileName() + ".kml");
-
-			if (!kmlFile.exists())
-			{
-				kmlFile.createNewFile();
-				brandNewFile = true;
-			}
-
-			Date now;
-
-			if (AppSettings.shouldUseSatelliteTime())
-			{
-				now = new Date(loc.getTime());
-			}
-			else
-			{
-				now = new Date();
-			}
-
-			String dateTimeString = Utilities.GetIsoDateTime(now);
-			// SimpleDateFormat sdf = new
-			// SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
-			// String dateTimeString = sdf.format(now);
-
-			if (brandNewFile)
-			{
-				FileOutputStream initialWriter = new FileOutputStream(kmlFile, true);
-				BufferedOutputStream initialOutput = new BufferedOutputStream(initialWriter);
-
-				String initialXml = "<?xml version=\"1.0\"?>"
-						+ "<kml xmlns=\"http://www.opengis.net/kml/2.2\"><Document>"
-						+"<Placemark><LineString><extrude>1</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode><coordinates></coordinates></LineString></Placemark>"
-						+ "</Document></kml>";
-				initialOutput.write(initialXml.getBytes());
-				// initialOutput.write("\n".getBytes());
-				initialOutput.flush();
-				initialOutput.close();
-			}
-
-			
-			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-			factory.setNamespaceAware(true); 
-			DocumentBuilder builder = factory.newDocumentBuilder();
-			Document doc = builder.parse(kmlFile);
-			
-			NodeList coordinatesList = doc.getElementsByTagName("coordinates");
-			
-			if(coordinatesList.item(0) != null)
-			{
-				Node coordinates = coordinatesList.item(0);
-				Node coordTextNode = coordinates.getFirstChild();
-				
-				if(coordTextNode == null)
-				{
-					coordTextNode = doc.createTextNode("");
-					coordinates.appendChild(coordTextNode);
-				}
-				
-				String coordText = coordinates.getFirstChild().getNodeValue();
-				coordText = coordText + "\n" + String.valueOf(loc.getLongitude()) + ","
-					+ String.valueOf(loc.getLatitude()) + "," + String.valueOf(loc.getAltitude());
-				coordinates.getFirstChild().setNodeValue(coordText);
-				
-			}
-
-			Node documentNode = doc.getElementsByTagName("Document").item(0);
-			Node newPlacemark = doc.createElement("Placemark");
-			
-			Node timeStamp = doc.createElement("TimeStamp");
-			Node whenNode = doc.createElement("when");
-			Node whenNodeText = doc.createTextNode(dateTimeString);
-			whenNode.appendChild(whenNodeText);
-			timeStamp.appendChild(whenNode);
-			newPlacemark.appendChild(timeStamp);
-			
-			Node newPoint = doc.createElement("Point");
-			
-			Node newCoords = doc.createElement("coordinates");
-			Node newCoordTextNode = doc.createTextNode("");
-			newCoords.appendChild(newCoordTextNode);
-			
-			newCoords.getFirstChild().setNodeValue( String.valueOf(loc.getLongitude()) + ","
-					+ String.valueOf(loc.getLatitude()) + "," + String.valueOf(loc.getAltitude()));
-			newPoint.appendChild(newCoords);
-			
-			newPlacemark.appendChild(newPoint);
-			
-			documentNode.appendChild(newPlacemark);
-
-			String newFileContents = getStringFromNode(doc);
-			
-			RandomAccessFile raf = new RandomAccessFile(kmlFile, "rw");
-			kmlLock = raf.getChannel().lock();
-			raf.write(newFileContents.getBytes());
-			kmlLock.release();
-			raf.close();
-		
-		}
-		catch (IOException e)
-		{
-			Log.e("Main", callingClient.getString(R.string.could_not_write_to_file) + e.getMessage());
-			callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file)
-					+ e.getMessage());
-		}
-		catch(Exception e)
-		{
-			System.out.println(e.getMessage());
-			Log.e("Main", callingClient.getString(R.string.could_not_write_to_file) + e.getMessage());
-			callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file)
-					+ e.getMessage());
-		}
-
-	}
-	
-	
-	private static String getStringFromNode(Node root)  {
-
-        StringBuilder result = new StringBuilder();
-
-        if (root.getNodeType() == Node.TEXT_NODE)
-        {
-            result.append(root.getNodeValue());
-        }
-        else 
-        {
-            if (root.getNodeType() != Node.DOCUMENT_NODE) 
-            {
-                StringBuffer attrs = new StringBuffer();
-                for (int k = 0; k < root.getAttributes().getLength(); ++k) 
-                {
-                    attrs.append(" ") 
-                    	.append(root.getAttributes().item(k).getNodeName())
-                    	.append("=\"")
-                    	.append(root.getAttributes().item(k).getNodeValue())
-                    	.append("\" ");
-                }
-                result.append("<")
-                	.append(root.getNodeName());
-                
-                if(attrs.length() > 0)
-                {
-                	result.append(" ")
-                	.append(attrs);
-                }
-                	
-                	result.append(">");
-            } 
-            else 
-            {
-                result.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-            }
-
-            NodeList nodes = root.getChildNodes();
-            for (int i = 0, j = nodes.getLength(); i < j; i++) 
-            {
-                Node node = nodes.item(i);
-                result.append(getStringFromNode(node));
-            }
-
-            if (root.getNodeType() != Node.DOCUMENT_NODE)
-            {
-                result.append("</").append(root.getNodeName()).append(">");
-            }
-        }
-        return result.toString();
-    }
-	
-
-	
-	private void WriteToGpxFile(Location loc, File gpxFolder, boolean brandNewFile)
-	{
-
-		try
-		{
-			File gpxFile = new File(gpxFolder.getPath(), Session.getCurrentFileName() + ".gpx");
-
-			if (!gpxFile.exists())
-			{
-				gpxFile.createNewFile();
-				brandNewFile = true;
-			}
-
-			Date now;
-
-			if (AppSettings.shouldUseSatelliteTime())
-			{
-				now = new Date(loc.getTime());
-			}
-			else
-			{
-				now = new Date();
-			}
-
-			String dateTimeString = Utilities.GetIsoDateTime(now);
-
-			if (brandNewFile)
-			{
-				FileOutputStream initialWriter = new FileOutputStream(gpxFile, true);
-				BufferedOutputStream initialOutput = new BufferedOutputStream(initialWriter);
-
-				String initialXml = "<?xml version=\"1.0\"?>"
-						+ "<gpx version=\"1.0\" creator=\"GPSLogger - http://gpslogger.mendhak.com/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.topografix.com/GPX/1/0\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd\">"
-						+ "<time>" + dateTimeString + "</time>" + "<bounds />" + "<trk></trk></gpx>";
-				initialOutput.write(initialXml.getBytes());
-				// initialOutput.write("\n".getBytes());
-				initialOutput.flush();
-				initialOutput.close();
-			}
-
-			int offsetFromEnd = (Session.shouldAddNewTrackSegment()) ? 12 : 21;
-
-			long startPosition = gpxFile.length() - offsetFromEnd;
-
-			String trackPoint = GetTrackPointXml(loc, dateTimeString);
-
-			Session.setAddNewTrackSegment(false);
-
-			// Leaving this commented code in - may want to give user the choice
-			// to
-			// pick between WPT and TRK. Choice is good.
-			//
-			// String waypoint = "<wpt lat=\"" +
-			// String.valueOf(loc.getLatitude())
-			// + "\" lon=\"" + String.valueOf(loc.getLongitude()) + "\">"
-			// + "<time>" + dateTimeString + "</time>";
-			//
-			// if (loc.hasAltitude()) {
-			// waypoint = waypoint + "<ele>"
-			// + String.valueOf(loc.getAltitude()) + "</ele>";
-			// }
-			//
-			// if (loc.hasBearing()) {
-			// waypoint = waypoint + "<course>"
-			// + String.valueOf(loc.getBearing()) + "</course>";
-			// }
-			//
-			// if (loc.hasSpeed()) {
-			// waypoint = waypoint + "<speed>"
-			// + String.valueOf(loc.getSpeed()) + "</speed>";
-			// }
-			//
-			// waypoint = waypoint + "<src>" + loc.getProvider() + "</src>";
-			//
-			// if (satellites > 0) {
-			// waypoint = waypoint + "<sat>" + String.valueOf(satellites)
-			// + "</sat>";
-			// }
-			//
-			// waypoint = waypoint + "</wpt></gpx>";
-
-			RandomAccessFile raf = new RandomAccessFile(gpxFile, "rw");
-			gpxLock = raf.getChannel().lock();
-			raf.seek(startPosition);
-			raf.write(trackPoint.getBytes());
-			gpxLock.release();
-			raf.close();
-
-		}
-		catch (IOException e)
-		{
-			Log.e("Main", callingClient.getString(R.string.could_not_write_to_file) + e.getMessage());
-			callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file)
-					+ e.getMessage());
-		}
-
-	}
-
-	private String GetTrackPointXml(Location loc, String dateTimeString)
-	{
-		String track = "";
-		if (Session.shouldAddNewTrackSegment())
-		{
-			track = track + "<trkseg>";
-		}
-
-		track = track + "<trkpt lat=\"" + String.valueOf(loc.getLatitude()) + "\" lon=\""
-				+ String.valueOf(loc.getLongitude()) + "\">";
-
-		if (loc.hasAltitude())
-		{
-			track = track + "<ele>" + String.valueOf(loc.getAltitude()) + "</ele>";
-		}
-
-		if (loc.hasBearing())
-		{
-			track = track + "<course>" + String.valueOf(loc.getBearing()) + "</course>";
-		}
-
-		if (loc.hasSpeed())
-		{
-			track = track + "<speed>" + String.valueOf(loc.getSpeed()) + "</speed>";
-		}
-
-		track = track + "<src>" + loc.getProvider() + "</src>";
-
-		if(Session.getSatelliteCount()>0)
-		{
-			track = track + "<sat>" + String.valueOf(Session.getSatelliteCount()) + "</sat>";
-		}
-
-		track = track + "<time>" + dateTimeString + "</time>";
-
-		track = track + "</trkpt>";
-
-		track = track + "</trkseg></trk></gpx>";
-
-		return track;
-	}
-
-	public void Annotate()
-	{
-
-		if (!allowDescription)
-		{
-			Utilities.MsgBox(callingClient.GetContext().getString(R.string.not_yet),
-					callingClient.getString(R.string.cant_add_description_until_next_point),
-					callingClient.GetActivity());
-
-			return;
-
-		}
-
-		AlertDialog.Builder alert = new AlertDialog.Builder(callingClient.GetActivity());
-
-		alert.setTitle(R.string.add_description);
-		alert.setMessage(R.string.letters_numbers);
-
-		// Set an EditText view to get user input
-		final EditText input = new EditText(callingClient.GetContext());
-		alert.setView(input);
-
-		alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener()
-		{
-			public void onClick(DialogInterface dialog, int whichButton)
-			{
-
-				if (!AppSettings.shouldLogToGpx() && !AppSettings.shouldLogToKml())
-				{
-					return;
-				}
-
-				final String desc = Utilities.CleanDescription(input.getText().toString());
-
-				AddNoteToLastPoint(desc);
-
-			}
-
-		});
-		alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener()
-		{
-			public void onClick(DialogInterface dialog, int whichButton)
-			{
-				// Canceled.
-			}
-		});
-
-		alert.show();
-
-	}
-
-	private void AddNoteToLastPoint(String desc)
-	{
-
-		File gpxFolder = new File(Environment.getExternalStorageDirectory(), "GPSLogger");
-
-		if (!gpxFolder.exists())
-		{
-			return;
-		}
-
-		int offsetFromEnd;
-		String description;
-		long startPosition;
-
-		if (AppSettings.shouldLogToGpx())
-		{
-
-			File gpxFile = new File(gpxFolder.getPath(), Session.getCurrentFileName() + ".gpx");
-			//File gpxFile = new File(gpxFolder.getPath(), callingClient.GetCurrentFileName() + ".gpx");
-
-			if (!gpxFile.exists())
-			{
-				return;
-			}
-			offsetFromEnd = 29;
-
-			startPosition = gpxFile.length() - offsetFromEnd;
-
-			description = "<name>" + desc + "</name><desc>" + desc
-					+ "</desc></trkpt></trkseg></trk></gpx>";
-			RandomAccessFile raf = null;
-			try
-			{
-				raf = new RandomAccessFile(gpxFile, "rw");
-				gpxLock = raf.getChannel().lock();
-				raf.seek(startPosition);
-				raf.write(description.getBytes());
-				gpxLock.release();
-				raf.close();
-
-				callingClient.SetStatus(callingClient.getString(R.string.description_added));
-				allowDescription = false;
-
-			}
-			catch (Exception e)
-			{
-				callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file));
-			}
-
-		}
-
-		if (AppSettings.shouldLogToKml())
-		{
-
-			File kmlFile = new File(gpxFolder.getPath(), Session.getCurrentFileName() + ".kml");
-
-			if (!kmlFile.exists())
-			{
-				return;
-			}
-
-			offsetFromEnd = 37;
-
-			description = "<name>" + desc + "</name></Point></Placemark></Document></kml>";
-
-			startPosition = kmlFile.length() - offsetFromEnd;
-			try
-			{
-				RandomAccessFile raf = new RandomAccessFile(kmlFile, "rw");
-				kmlLock = raf.getChannel().lock();
-				raf.seek(startPosition);
-				raf.write(description.getBytes());
-				kmlLock.release();
-				raf.close();
-
-				allowDescription = false;
-			}
-			catch (Exception e)
-			{
-				callingClient.SetStatus(callingClient.getString(R.string.could_not_write_to_file));
-			}
-
-		}
-
-		// </Point></Placemark></Document></kml>
-
-	}
-
-}
diff --git a/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java b/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java
index 38906ece..8556d17e 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/loggers/Gpx10FileLogger.java
@@ -160,5 +160,38 @@ public class Gpx10FileLogger implements IFileLogger
 
 		return track;
 	}
+
+	@Override
+	public void Annotate(String description) throws Exception
+	{
+		if (!gpxFile.exists())
+		{
+			return;
+		}
+		int offsetFromEnd = 29;
+
+		long startPosition = gpxFile.length() - offsetFromEnd;
+
+		description = "<name>" + description + "</name><desc>" + description
+				+ "</desc></trkpt></trkseg></trk></gpx>";
+		RandomAccessFile raf = null;
+		try
+		{
+			raf = new RandomAccessFile(gpxFile, "rw");
+			gpxLock = raf.getChannel().lock();
+			raf.seek(startPosition);
+			raf.write(description.getBytes());
+			gpxLock.release();
+			raf.close();
+		}
+		catch (Exception e)
+		{
+			Utilities.LogError("Gpx10FileLogger.Annotate", e);
+			throw new Exception("Could not annotate GPX file");
+		}
+		
+	}
+
+	
 	
 }
diff --git a/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLogger.java b/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLogger.java
index b1b33935..900df2ef 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLogger.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLogger.java
@@ -5,4 +5,6 @@ import android.location.Location;
 public interface IFileLogger
 {
 	void Write(Location loc) throws Exception;
+	void Annotate(String description) throws Exception;
+
 }
diff --git a/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLoggingHelperCallback.java b/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLoggingHelperCallback.java
deleted file mode 100644
index 89a8fc5f..00000000
--- a/GPSLogger/src/com/mendhak/gpslogger/loggers/IFileLoggingHelperCallback.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.mendhak.gpslogger.loggers;
-
-import android.app.Activity;
-import android.content.Context;
-
-
-public interface IFileLoggingHelperCallback
-{
-
-	void SetStatus(String status);
-
-	Context GetContext();
-	
-	/**
-	 * Gets the current activity if applicable. 
-	 * @return
-	 */
-	Activity GetActivity();
-	
-	String getString(int resId);
-	
-	
-}
diff --git a/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml10FileLogger.java b/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml10FileLogger.java
index 7e2b1fcc..32144136 100644
--- a/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml10FileLogger.java
+++ b/GPSLogger/src/com/mendhak/gpslogger/loggers/Kml10FileLogger.java
@@ -186,6 +186,38 @@ public class Kml10FileLogger implements IFileLogger
         }
         return result.toString();
     }
+
+	@Override
+	public void Annotate(String description) throws Exception
+	{
+
+		if (!kmlFile.exists())
+		{
+			return;
+		}
+
+		int offsetFromEnd = 37;
+
+		description = "<name>" + description + "</name></Point></Placemark></Document></kml>";
+
+		long startPosition = kmlFile.length() - offsetFromEnd;
+		try
+		{
+			RandomAccessFile raf = new RandomAccessFile(kmlFile, "rw");
+			kmlLock = raf.getChannel().lock();
+			raf.seek(startPosition);
+			raf.write(description.getBytes());
+			kmlLock.release();
+			raf.close();
+		}
+		catch (Exception e)
+		{
+			Utilities.LogError("Kml10FileLogger.Annotate", e);
+			throw new Exception("Could not annotate KML file");
+		}
+		
+	}
+
 	
 	
 }
