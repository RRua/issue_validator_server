diff --git a/src/com/ichi2/libanki/Decks.java b/src/com/ichi2/libanki/Decks.java
index dd5d1f2b06..1868abf2f0 100644
--- a/src/com/ichi2/libanki/Decks.java
+++ b/src/com/ichi2/libanki/Decks.java
@@ -235,15 +235,24 @@ public class Decks {
 
 	/** Remove the deck. If cardsToo, delete any cards inside. */
 	public void rem(long did, boolean cardsToo) {
+		rem(did, cardsToo, true);
+	}
+	public void rem(long did, boolean cardsToo, boolean childrenToo) {
 		if (did == 1) {
 			return;
 		}
+		// log the removal regardless of whether we have the deck or not
+		mCol._logRem(new long[] { did }, Sched.REM_DECK);
+		// do nothing else if doesn't exist
 		if (!mDecks.containsKey(did)) {
 			return;
 		}
 		// delete children first
-		for (long id : children(did).values()) {
-			rem(id, cardsToo);
+		if (childrenToo) {
+			// we don't want to delete children when syncing
+			for (long id : children(did).values()) {
+				rem(id, cardsToo);
+			}
 		}
 		// delete cards too?
 		if (cardsToo) {
@@ -251,7 +260,6 @@ public class Decks {
 		}
 		// delete the deck and add a grave
 		mDecks.remove(did);
-		mCol._logRem(new long[] { did }, Sched.REM_DECK);
 		// ensure we have an active deck
 		if (active().contains(did)) {
 			select((long) (mDecks.keySet().iterator().next()));
diff --git a/src/com/ichi2/libanki/sync/Syncer.java b/src/com/ichi2/libanki/sync/Syncer.java
index f95e049776..7421df9aca 100644
--- a/src/com/ichi2/libanki/sync/Syncer.java
+++ b/src/com/ichi2/libanki/sync/Syncer.java
@@ -481,10 +481,10 @@ public class Syncer {
 			mCol._remNotes(Utils.jsonArrayToLongArray(graves.getJSONArray("notes")));
 			// then cards
 			mCol.remCards(Utils.jsonArrayToLongArray(graves.getJSONArray("cards")));
-			// and deck
+			// and decks
 			JSONArray decks = graves.getJSONArray("decks");
 			for (int i = 0; i < decks.length(); i++) {
-				mCol.getDecks().rem(decks.getLong(i));
+				mCol.getDecks().rem(decks.getLong(i), false, false);
 			}
 		} catch (JSONException e) {
 			throw new RuntimeException(e);
