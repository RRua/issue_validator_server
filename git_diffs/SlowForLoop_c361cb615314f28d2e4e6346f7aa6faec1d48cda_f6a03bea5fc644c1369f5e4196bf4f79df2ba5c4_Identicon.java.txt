diff --git a/src/com/germainz/identiconizer/identicons/Identicon.java b/src/com/germainz/identiconizer/identicons/Identicon.java
index 86e10ab..76b0f9a 100644
--- a/src/com/germainz/identiconizer/identicons/Identicon.java
+++ b/src/com/germainz/identiconizer/identicons/Identicon.java
@@ -87,33 +87,29 @@ public abstract class Identicon {
     }
 
     /**
-     * Adds a comment block to the end of a byte array containing a jpg image
+     * Adds a chunk to the end of a byte array containing a png image
      *
-     * @param original The jpg image to add the comment to
-     * @return The same image provided with the added comment block
+     * @param original The png image to add the comment to
+     * @return The same image provided with the added chunk
      */
     protected static byte[] makeTaggedIdenticon(byte[] original) {
         byte[] taggedBlock = makeTextBlock(IDENTICON_MARKER);
         byte[] taggedImage = new byte[original.length + taggedBlock.length];
         ByteBuffer buffer = ByteBuffer.wrap(taggedImage);
-        buffer.put(original, 0, original.length - 2);
+        buffer.put(original);
         buffer.put(taggedBlock);
-        buffer.put(original, original.length - 2, 2);
         return taggedImage;
     }
 
     private static byte[] makeTextBlock(String text) {
-        byte[] block = new byte[text.length() + 5];
+        byte[] block = new byte[text.length() + 1];
         ByteBuffer blockBuffer = ByteBuffer.wrap(block);
-        final int length = text.length();
-        // block type, which is 0xFFFE for comment block
-        blockBuffer.putShort((short) 0xFFFE);
-        // next two bytes is string length
-        blockBuffer.putShort((short) length);
-        // followed by a null
-        blockBuffer.put((byte) 0);
-        // and finally our string
+        // http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html
+        // put the text as the chunk's keyword
         blockBuffer.put(text.getBytes());
+        // followed by a null separator
+        blockBuffer.put((byte) 0);
+        // we leave the chunk's text empty
 
         return block;
     }
@@ -121,17 +117,8 @@ public abstract class Identicon {
     protected static byte[] bitmapToByteArray(Bitmap bmp) {
         if (bmp == null) return null;
         ByteArrayOutputStream stream = new ByteArrayOutputStream();
-        bmp.compress(Bitmap.CompressFormat.JPEG, 100, stream);
+        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
         byte[] bytes = stream.toByteArray();
-        // The transaction buffer's data size (used in e.g. ContentResolver.insert) is limited to
-        // 512K, so we want to make sure one identicon occupies less than that.
-        for (int i = 10; i <= 100; i += 10) {
-            if (bytes.length <= 512000)
-                break;
-            stream = new ByteArrayOutputStream();
-            bmp.compress(Bitmap.CompressFormat.JPEG, 100 - i, stream);
-            bytes = stream.toByteArray();
-        }
         try {
             stream.close();
         } catch (IOException e) {
diff --git a/src/com/germainz/identiconizer/identicons/IdenticonUtils.java b/src/com/germainz/identiconizer/identicons/IdenticonUtils.java
index 0687c79..777c3f7 100644
--- a/src/com/germainz/identiconizer/identicons/IdenticonUtils.java
+++ b/src/com/germainz/identiconizer/identicons/IdenticonUtils.java
@@ -21,16 +21,17 @@ import java.util.Arrays;
 
 public class IdenticonUtils {
 
-    private static final byte[] JPG_HEADER = new byte[] { (byte)0xFF, (byte)0xD8 };
+    private static final byte[] PNG_HEADER = new byte[] { (byte) 137, (byte) 80, (byte) 78,
+            (byte) 71, (byte) 13, (byte) 10, (byte) 26, (byte) 10 };
 
     public static boolean isIdenticon(byte[] data) {
-        if (data == null || !isJpgFormat(data))
+        if (data == null || !isPngFormat(data))
             return false;
 
-        byte[] tag = Arrays.copyOfRange(data, data.length - 18, data.length - 2);
+        byte[] tag = Arrays.copyOfRange(data, data.length - (Identicon.IDENTICON_MARKER.length() + 1), data.length - 1);
         String tagString;
         try {
-            tagString = new String(tag, "US-ASCII");
+            tagString = new String(tag, "ISO-8859-1");
         } catch (UnsupportedEncodingException e) {
             return false;
         }
@@ -38,12 +39,12 @@ public class IdenticonUtils {
         return Identicon.IDENTICON_MARKER.equals(tagString);
     }
 
-    private static boolean isJpgFormat(byte[] data) {
-        if (data.length < JPG_HEADER.length)
+    private static boolean isPngFormat(byte[] data) {
+        if (data.length < PNG_HEADER.length)
             return false;
 
-        for (int i = 0; i < JPG_HEADER.length; i++) {
-            if (data[i] != JPG_HEADER[i])
+        for (int i = 0; i < PNG_HEADER.length; i++) {
+            if (data[i] != PNG_HEADER[i])
                 return false;
         }
 
