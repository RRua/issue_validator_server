diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
index 9d075d5e..cc07f4c0 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
@@ -19,6 +19,7 @@ import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.map.MapViewInterface;
 import ch.bailu.aat.menus.FileMenu;
 import ch.bailu.aat.services.editor.EditorHelper;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat.views.BusyButton;
 import ch.bailu.aat.views.ContentView;
@@ -129,7 +130,7 @@ public abstract class AbsFileContentActivity extends AbsDispatcher implements On
             switchFile(v);
 
         } else if (v == fileOperation) {
-            new FileMenu(this, new File(currentFile.getInfo().getPath())).showAsPopup(this, v);
+            new FileMenu(this, FocAndroid.factory(this, currentFile.getInfo().getPath())).showAsPopup(this, v);
         }
 
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index 348717d2..0db65238 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -26,6 +26,7 @@ import ch.bailu.aat.menus.FileMenu;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.services.directory.Iterator;
 import ch.bailu.aat.services.directory.IteratorSimple;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLayout;
 import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.DbSynchronizerBusyIndicator;
@@ -36,6 +37,7 @@ import ch.bailu.aat.views.description.MultiView;
 import ch.bailu.aat.views.preferences.SolidDirectoryMenuButton;
 import ch.bailu.aat.views.preferences.TitleView;
 import ch.bailu.aat.views.preferences.VerticalScrollView;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItemClickListener {
@@ -53,7 +55,7 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
 
 
     public abstract void                   displayFile();
-    public abstract File                   getDirectory();
+    public abstract Foc                    getDirectory();
     public abstract String                 getLabel();
     public abstract ContentDescription[]   getGpxListItemData();
     public abstract ContentDescription[]   getSummaryData();
@@ -64,7 +66,7 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
         super.onCreate(savedInstanceState);
 
         sdirectory = new SolidDirectoryQuery(this);
-        sdirectory.setValue(getDirectory().getAbsolutePath());
+        sdirectory.setValue(getDirectory().toString());
         solid_key = AbsGpxListActivity.class.getSimpleName() +  "_" + sdirectory.getValueAsString();
 
         setContentView(new Layouter().getContentView());
@@ -134,7 +136,7 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
 
         iteratorSimple.moveToPosition(position);
 
-        fileMenu = new FileMenu(this, new File(iteratorSimple.getInfo().getPath()));
+        fileMenu = new FileMenu(this, FocAndroid.factory(this, iteratorSimple.getInfo().getPath()));
         fileMenu.inflateWithHeader(menu);
         fileMenu.prepare(menu);
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
index 73e2c847..df04b0fe 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsOsmApiActivity.java
@@ -36,6 +36,7 @@ import ch.bailu.aat.views.NodeListView;
 import ch.bailu.aat.views.PercentageLayout;
 import ch.bailu.aat.views.TagEditor;
 import ch.bailu.aat.views.preferences.AddOverlayDialog;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public abstract class AbsOsmApiActivity extends AbsDispatcher implements OnClickListener {
@@ -236,10 +237,12 @@ public abstract class AbsOsmApiActivity extends AbsDispatcher implements OnClick
 
     private void saveCopy() {
         try {
-            final File source = osmApi.getResultFile();
-            final File target = getOverlayFile();
+            final Foc source = osmApi.getResultFile();
+            final Foc target = getOverlayFile();
+
+            source.cp(target);
+
 
-            AppDirectory.copyFile(source, target);
             AppBroadcaster.broadcast(
                     this, 
                     AppBroadcaster.FILE_CHANGED_ONDISK, 
@@ -252,11 +255,11 @@ public abstract class AbsOsmApiActivity extends AbsDispatcher implements OnClick
     }
 
 
-    private File getOverlayFile() throws IOException {
+    private Foc getOverlayFile() throws IOException {
         final String query = TextBackup.read(osmApi.getQueryFile());
         final String prefix = OsmApiHelper.getFilePrefix(query);
         final String extension = osmApi.getFileExtension();
-        final File directory = AppDirectory.getDataDirectory(this, AppDirectory.DIR_OVERLAY);
+        final Foc directory = AppDirectory.getDataDirectory(this, AppDirectory.DIR_OVERLAY);
 
         return AppDirectory.generateUniqueFilePath(directory, prefix, extension);
     }
@@ -273,9 +276,9 @@ public abstract class AbsOsmApiActivity extends AbsDispatcher implements OnClick
 
     private static class ApiQueryHandle extends DownloadHandle {
         private final String queryString;
-        private final File queryFile;
+        private final Foc queryFile;
 
-        public ApiQueryHandle(String source, File target, String qs, File qf) {
+        public ApiQueryHandle(String source, Foc target, String qs, Foc qf) {
             super(source, target);
             queryString = qs;
             queryFile   = qf;
diff --git a/app/src/main/java/ch/bailu/aat/activities/ExternalListActivity.java b/app/src/main/java/ch/bailu/aat/activities/ExternalListActivity.java
index bf1cb277..7a1c5769 100644
--- a/app/src/main/java/ch/bailu/aat/activities/ExternalListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/ExternalListActivity.java
@@ -11,6 +11,7 @@ import ch.bailu.aat.description.DistanceDescription;
 import ch.bailu.aat.description.NameDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.preferences.SolidExternalDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class ExternalListActivity extends AbsGpxListActivity {
 
@@ -40,7 +41,7 @@ public class ExternalListActivity extends AbsGpxListActivity {
 
 
     @Override
-    public File getDirectory() {
+    public Foc getDirectory() {
         return new SolidExternalDirectory(this).getValueAsFile();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
index 25d11dd0..a80aeb1b 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MainActivity.java
@@ -120,7 +120,7 @@ public class MainActivity extends AbsDispatcher {
 
         public void setText() {
 
-            if (JFile.canRead(sdirectory.getValueAsFile())) {
+            if (sdirectory.getValueAsFile().canRead()) {
                 setVisibility(VISIBLE);
             } else {
                 setVisibility(GONE);
@@ -209,7 +209,7 @@ public class MainActivity extends AbsDispatcher {
         }
 
         public void setText() {
-            setText(AppDirectory.getDataDirectory(getContext(), directory).getAbsolutePath());
+            setText(AppDirectory.getDataDirectory(getContext(), directory).toString());
         }
 
         @Override
diff --git a/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java b/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
index 515ca22e..29143d10 100644
--- a/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/MapFeatureListActivity.java
@@ -1,9 +1,10 @@
 package ch.bailu.aat.activities;
 
 import android.content.Intent;
+import android.content.res.AssetManager;
 
 import ch.bailu.aat.util.AppIntent;
-import ch.bailu.aat.util.fs.AssetAccess;
+import ch.bailu.aat.util.fs.foc.FocAsset;
 import ch.bailu.aat.views.FeaturesList;
 
 public class MapFeatureListActivity extends AbsDispatcher {
@@ -18,7 +19,7 @@ public class MapFeatureListActivity extends AbsDispatcher {
             final FeaturesList list = new FeaturesList(this);
 
             list.loadList(
-                    new AssetAccess(this.getAssets(), file),
+                    new FocAsset(this.getAssets(), file),
                     getServiceContext().getIconMapService() );
             setContentView(list);
 
@@ -26,4 +27,6 @@ public class MapFeatureListActivity extends AbsDispatcher {
         }
     }
 
+
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java b/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
index 4b7ffa3b..3408ad9e 100644
--- a/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/OverlayListActivity.java
@@ -11,7 +11,7 @@ import ch.bailu.aat.description.DistanceDescription;
 import ch.bailu.aat.description.NameDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.util.fs.AppDirectory;
-
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class OverlayListActivity extends AbsGpxListActivity {
@@ -41,7 +41,7 @@ public class OverlayListActivity extends AbsGpxListActivity {
 
 
     @Override
-    public File getDirectory() {
+    public Foc getDirectory() {
         return AppDirectory.getDataDirectory(this, AppDirectory.DIR_OVERLAY); 
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java b/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
index 18ff812e..48d4ebb9 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TrackListActivity.java
@@ -14,6 +14,7 @@ import ch.bailu.aat.description.NameDescription;
 import ch.bailu.aat.description.TimeDescription;
 import ch.bailu.aat.description.TrackSizeDescription;
 import ch.bailu.aat.preferences.SolidPreset;
+import ch.bailu.simpleio.foc.Foc;
 
 public class TrackListActivity extends AbsGpxListActivity {
 
@@ -48,7 +49,7 @@ public class TrackListActivity extends AbsGpxListActivity {
 
 
     @Override
-    public File getDirectory() {
+    public Foc getDirectory() {
         return new SolidPreset(this).getDirectory();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
index fe9ee2f0..7cb4a817 100644
--- a/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
+++ b/app/src/main/java/ch/bailu/aat/coordinates/SrtmCoordinates.java
@@ -8,6 +8,7 @@ import java.io.File;
 import java.util.Locale;
 
 import ch.bailu.aat.preferences.SolidDataDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SrtmCoordinates extends Coordinates implements LatLongE6Interface {
     /**
@@ -84,23 +85,23 @@ public class SrtmCoordinates extends Coordinates implements LatLongE6Interface {
 
     
     
-    public File toFile(File base) {
-        File old = toSRTMFile(base);
-        if (old.exists()) return old;
+    public Foc toFile(Foc base) {
+        Foc old = toSRTMFile(base);
+        if (old.isReachable()) return old;
         
-        return new File(base, "/dem3/"+ toExtString() + ".hgt.zip");
+        return base.child("/dem3/"+ toExtString() + ".hgt.zip");
     }
 
     
-    public File toFile(Context context) {
+    public Foc toFile(Context context) {
         return toFile(new SolidDataDirectory(context).getValueAsFile());
     }
 
     
     
     // obsolete location
-    private File toSRTMFile(File base) {
-        return new File(base, "/SRTM/" + toString() + ".SRTMGL3.hgt.zip");
+    private Foc toSRTMFile(Foc base) {
+        return base.child("/SRTM/" + toString() + ".SRTMGL3.hgt.zip");
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java b/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
index b8c010fc..d863bcbb 100644
--- a/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
+++ b/app/src/main/java/ch/bailu/aat/dispatcher/CustomFileSource.java
@@ -44,7 +44,7 @@ public class CustomFileSource extends ContentSource {
         handle=h;
 
         if (GpxObject.class.isInstance(h) && h.isReadyAndLoaded()) {
-            sendUpdate(InfoID.FILEVIEW, new GpxFileWrapper(new File(h.toString()), ((GpxObject)h).getGpxList()));
+            sendUpdate(InfoID.FILEVIEW, new GpxFileWrapper(h.toFile(scontext.getContext()), ((GpxObject)h).getGpxList()));
         }
 
     }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/GpxFileWrapper.java b/app/src/main/java/ch/bailu/aat/gpx/GpxFileWrapper.java
index 85de9723..b6e87927 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/GpxFileWrapper.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/GpxFileWrapper.java
@@ -1,14 +1,14 @@
 package ch.bailu.aat.gpx;
 
-import java.io.File;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class GpxFileWrapper extends GpxInformation {
     private final GpxList list;
-    private final File    file;
+    private final Foc file;
 
 
-    public GpxFileWrapper(File f, GpxList l) {
+    public GpxFileWrapper(Foc f, GpxList l) {
         list = l;
         file = f;
 
@@ -36,6 +36,6 @@ public class GpxFileWrapper extends GpxInformation {
     
     @Override
     public String getPath() {
-        return file.getPath();
+        return file.toString();
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
index 111e1093..539a1789 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/GpxListReader.java
@@ -7,7 +7,7 @@ import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.services.background.ThreadControl;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.parser.OnParsedInterface;
 
 public class GpxListReader {
@@ -20,12 +20,12 @@ public class GpxListReader {
     private final XmlParser parser;
 
 
-    public GpxListReader(Access in) throws IOException {
+    public GpxListReader(Foc in) throws IOException {
         this(ThreadControl.KEEP_ON, in);
     }
 
 
-    public GpxListReader (ThreadControl c, Access in) throws IOException {
+    public GpxListReader (ThreadControl c, Foc in) throws IOException {
         threadControl=c;
 
         parser = new XmlParser(in);
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
index 52f28caa..360208a5 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/XmlParser.java
@@ -8,10 +8,10 @@ import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxAttributesStatic.Tag;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.gpx.parser.scanner.Scanner;
-import ch.bailu.simpleio.parser.OnParsedInterface;
 import ch.bailu.aat.gpx.parser.state.State;
 import ch.bailu.aat.gpx.parser.state.StateXml;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.parser.OnParsedInterface;
 
 public class XmlParser implements Closeable, GpxPointInterface {
 
@@ -21,7 +21,7 @@ public class XmlParser implements Closeable, GpxPointInterface {
 
 
 
-    public XmlParser(Access file) throws IOException {
+    public XmlParser(Foc file) throws IOException {
         scanner = new Scanner(file);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java b/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
index 43420f1d..7a951951 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/scanner/Scanner.java
@@ -7,7 +7,7 @@ import java.util.ArrayList;
 
 import ch.bailu.aat.coordinates.LatLongE6;
 import ch.bailu.aat.gpx.GpxAttributesStatic;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.io.Stream;
 import ch.bailu.simpleio.parser.OnParsedInterface;
 import ch.bailu.simpleio.parser.scanner.DateScanner;
@@ -30,7 +30,7 @@ public class Scanner {
     public final SparseArray<LatLongE6> nodeMap = new SparseArray<>(50);
     public final ArrayList<GpxAttributesStatic.Tag> tagList = new ArrayList<>();
 
-    public Scanner(Access in) throws IOException {
+    public Scanner(Foc in) throws IOException {
         stream = new Stream(in);
 
         latitude = new DoubleScanner(stream,6);
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsm.java b/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsm.java
index 32ead1f7..e0abc8fc 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsm.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsm.java
@@ -48,7 +48,7 @@ public class StateOsm extends State {
     <note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.</note>
     <meta osm_base="2012-11-29T14:56:02Z"/>
     <node id="26860669" lat="47.6437096" lon="8.8589682">
-    <tag k="name" v="Hüttenberg"/>
+    <tag k="getName" v="Hüttenberg"/>
     <tag k="tourism" v="camp_site"/>
     </node>
     </osm> 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsmNode.java b/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsmNode.java
index dce8f259..472a22d6 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsmNode.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/parser/state/StateOsmNode.java
@@ -74,7 +74,7 @@ public class StateOsmNode extends StateOsmPoint {
     <note>The data included in this document is from www.openstreetmap.org. The data is made available under ODbL.</note>
     <meta osm_base="2012-11-29T14:56:02Z"/>
     <node id="26860669" lat="47.6437096" lon="8.8589682">
-    <tag k="name" v="Hüttenberg"/>
+    <tag k="getName" v="Hüttenberg"/>
     <tag k="tourism" v="camp_site"/>
     </node>
     </osm> 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
index e79dcddb..3d9863e6 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxListWriter.java
@@ -6,6 +6,7 @@ import java.io.IOException;
 
 import ch.bailu.aat.gpx.GpxList;
 import ch.bailu.aat.gpx.GpxListIterator;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class GpxListWriter implements  Closeable {
@@ -15,7 +16,7 @@ public class GpxListWriter implements  Closeable {
     private GpxWriter writer;
 
 
-    public GpxListWriter(GpxList track, File file) throws IOException  {
+    public GpxListWriter(GpxList track, Foc file) throws IOException  {
         writer = GpxWriter.factory(file, track.getDelta().getType());
         iterator = new GpxListIterator(track);
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
index 6bb7dde4..27f2f611 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/GpxWriter.java
@@ -11,16 +11,17 @@ import java.util.Locale;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.util.ui.AppTheme;
+import ch.bailu.simpleio.foc.Foc;
 
 public abstract class GpxWriter {
     private BufferedWriter output=null;
 
 
-    public GpxWriter(File file) throws FileNotFoundException {
-        output = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)),8*1024);
+    public GpxWriter(Foc file) throws IOException {
+        output = new BufferedWriter(new OutputStreamWriter(file.openW()),8*1024);
 
     }
-    public static GpxWriter factory(File file, int type) throws FileNotFoundException {
+    public static GpxWriter factory(Foc file, int type) throws IOException {
         if (type == GpxType.TRK) {
             return new TrackWriter(file);
         } else if (type == GpxType.RTE) {
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/RouteWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/RouteWriter.java
index 052d2a19..f48e94fd 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/RouteWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/RouteWriter.java
@@ -1,16 +1,15 @@
 package ch.bailu.aat.gpx.writer;
 
-import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Locale;
 
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.services.dem.tile.ElevationProvider;
+import ch.bailu.simpleio.foc.Foc;
 
 public class RouteWriter extends GpxWriter {
 
-    public RouteWriter(File file) throws FileNotFoundException {
+    public RouteWriter(Foc file) throws IOException {
         super(file);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
index 235924d5..d327a051 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/TrackWriter.java
@@ -6,10 +6,11 @@ import java.io.IOException;
 import java.util.Locale;
 
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
+import ch.bailu.simpleio.foc.Foc;
 
 public class TrackWriter extends GpxWriter {
 
-    public TrackWriter(File file) throws FileNotFoundException {
+    public TrackWriter(Foc file) throws IOException {
         super(file);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/gpx/writer/WayWriter.java b/app/src/main/java/ch/bailu/aat/gpx/writer/WayWriter.java
index fa6eabaa..cdc9b608 100644
--- a/app/src/main/java/ch/bailu/aat/gpx/writer/WayWriter.java
+++ b/app/src/main/java/ch/bailu/aat/gpx/writer/WayWriter.java
@@ -1,16 +1,16 @@
 package ch.bailu.aat.gpx.writer;
 
-import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Locale;
 
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.services.dem.tile.ElevationProvider;
+import ch.bailu.simpleio.foc.Foc;
 
 public class WayWriter extends GpxWriter {
 
-    public WayWriter(File file) throws FileNotFoundException {
+    public WayWriter(Foc file) throws IOException {
         super(file);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java b/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
index d952ecf0..ac3ae9ed 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/control/FileControlBarLayer.java
@@ -25,9 +25,11 @@ import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.services.directory.Iterator;
 import ch.bailu.aat.util.HtmlBuilderGpx;
 import ch.bailu.aat.util.fs.FileAction;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.ToolTip;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.PreviewView;
+import ch.bailu.simpleio.foc.Foc;
 
 public class FileControlBarLayer extends ControlBarLayer {
 
@@ -188,9 +190,9 @@ public class FileControlBarLayer extends ControlBarLayer {
 
         GpxPointNode node =  selector.getSelectedNode();
         if (node != null && selectedFile != null) {
-            File file = new File(selectedFile);
+            Foc file = FocAndroid.factory(acontext,selectedFile);
 
-            if (file.exists()) {
+            if (file.isReachable()) {
                 if        (v == action) {
                     new FileMenu(acontext, file).showAsPopup(acontext, v);
                 } else if (v == overlay) {
diff --git a/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/PointNameWalker.java b/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/PointNameWalker.java
index db257f36..ec3ea1bd 100644
--- a/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/PointNameWalker.java
+++ b/app/src/main/java/ch/bailu/aat/map/layer/gpx/legend/PointNameWalker.java
@@ -45,6 +45,6 @@ public class PointNameWalker extends LegendWalker{
     }
 
     private String getNameFromB() {
-        return c.nodes.nodeB.point.getAttributes().get("name");
+        return c.nodes.nodeB.point.getAttributes().get("getName");
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
index 76cd78b8..544a2db4 100644
--- a/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
+++ b/app/src/main/java/ch/bailu/aat/map/mapsforge/MapsForgePreview.java
@@ -16,6 +16,7 @@ import org.mapsforge.map.view.FrameBuffer;
 
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.OutputStream;
 
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.InfoID;
@@ -28,13 +29,14 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class MapsForgePreview extends MapsForgeViewBase {
     private static final int BITMAP_SIZE=128;
     private static final Dimension DIM = new Dimension(BITMAP_SIZE, BITMAP_SIZE);
     private static final Source SOURCE = DownloadSource.MAPNIK;
 
-    private final File               imageFile;
+    private final Foc               imageFile;
     private final TileProviderStatic provider;
 
 
@@ -43,7 +45,7 @@ public class MapsForgePreview extends MapsForgeViewBase {
     private final BoundingBox bounding;
     private final Point tlPoint;
 
-    public MapsForgePreview(ServiceContext scontext, GpxInformation info, File out) {
+    public MapsForgePreview(ServiceContext scontext, GpxInformation info, Foc out) {
         super(scontext, MapsForgePreview.class.getSimpleName(), new MapDensity());
 
         layout(0, 0, BITMAP_SIZE, BITMAP_SIZE);
@@ -126,12 +128,12 @@ public class MapsForgePreview extends MapsForgeViewBase {
 
 
         try {
-            FileOutputStream outStream = new FileOutputStream(imageFile);
+            OutputStream outStream = imageFile.openW();
             bitmap.getAndroidBitmap().compress(Bitmap.CompressFormat.PNG, 90, outStream);
             outStream.close();
             AppBroadcaster.broadcast(getContext(),
                     AppBroadcaster.FILE_CHANGED_ONDISK,
-                    imageFile.getAbsolutePath(),
+                    imageFile.toString(),
                     getClass().getName());
 
         } catch (Exception e) {
diff --git a/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
index bcbb5c64..10f15590 100644
--- a/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
+++ b/app/src/main/java/ch/bailu/aat/map/tile/source/DownloadSource.java
@@ -53,7 +53,7 @@ public class DownloadSource extends Source {
 
     @Override
     public String getID(Tile tile, Context context) {
-        return AppDirectory.getTileFile(getTileRelativeFilename(tile), context).getAbsolutePath();
+        return AppDirectory.getTileFile(getTileRelativeFilename(tile), context).toString();
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java b/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
index f45b1f21..7b66ae55 100644
--- a/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/DirectoryMenu.java
@@ -56,7 +56,7 @@ public class DirectoryMenu extends AbsMenu {
 
         } else if (item == get) {
             FileIntent.browse(sdirectory.getContext(), new Intent(),
-                    Uri.fromFile(sdirectory.getValueAsFile()));
+                    Uri.parse(sdirectory.getValueAsFile().toString()));
 
         } else if (item == clipboard) {
             new Clipboard(sdirectory.getContext()).setText(sdirectory.getLabel(),
diff --git a/app/src/main/java/ch/bailu/aat/menus/FileMenu.java b/app/src/main/java/ch/bailu/aat/menus/FileMenu.java
index f7b9852a..863992d8 100644
--- a/app/src/main/java/ch/bailu/aat/menus/FileMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/FileMenu.java
@@ -6,22 +6,21 @@ import android.view.ContextMenu;
 import android.view.Menu;
 import android.view.MenuItem;
 
-import java.io.File;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.activities.AbsServiceLink;
 import ch.bailu.aat.util.fs.FileAction;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public class FileMenu extends AbsMenu {
-    private final File file;
+    private final Foc file;
     private final Activity activity;
     private final ServiceContext scontext;
     
     private MenuItem send, view, rename, copy, delete, overlay, reload, mock, clipboard;
     
     
-    public FileMenu(AbsServiceLink a, File f) {
+    public FileMenu(AbsServiceLink a, Foc f) {
         file = f;
         scontext = a.getServiceContext();
         activity = a;
@@ -43,7 +42,7 @@ public class FileMenu extends AbsMenu {
 
     @Override
     public void inflateWithHeader(ContextMenu menu) {
-        menu.setHeaderTitle(file.getName()); 
+        menu.setHeaderTitle(file.getName());
         inflate(menu);
     }
 
@@ -71,13 +70,13 @@ public class FileMenu extends AbsMenu {
             FileAction.useForMockLocation(scontext.getContext(), file);
 
         } else if (item == send) {
-            FileAction.sendTo(scontext.getContext(), Uri.fromFile(file));
+            FileAction.sendTo(scontext.getContext(), Uri.parse(file.toString()));
 
         } else if (item == view) {
             FileAction.view(scontext.getContext(), file);
 
         } else if (item == copy) {
-            FileAction.copyTo(scontext.getContext(), Uri.fromFile(file));
+            FileAction.copyTo(scontext.getContext(), Uri.parse(file.toString()));
 
         } else if (item == clipboard) {
             FileAction.copyToClipboard(scontext.getContext(), file);
diff --git a/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java b/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
index 664e2b9d..c33442d7 100644
--- a/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
+++ b/app/src/main/java/ch/bailu/aat/menus/RemoveTilesMenu.java
@@ -73,12 +73,12 @@ public class RemoveTilesMenu extends AbsMenu {
                     scontext.lock();
                     scontext.getTileRemoverService().getState().removeAll();
                     scontext.free();
-                    AppLog.i(scontext.getContext(), "Removed* " + info.directory.getAbsolutePath());
+                    AppLog.i(scontext.getContext(), "Removed* " + info.directory.toString());
                 }
             }.displayYesNoDialog(
                     acontext,
                     "Empty cache*",
-                    "Remove all files in* " + info.directory.getAbsolutePath());
+                    "Remove all files in* " + info.directory.toString());
         }
 
         return false;
diff --git a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
index c66727a6..f662aeef 100644
--- a/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
+++ b/app/src/main/java/ch/bailu/aat/osm_features/MapFeaturesParser.java
@@ -5,8 +5,8 @@ import android.content.res.AssetManager;
 import java.io.IOException;
 import java.util.ArrayList;
 
-import ch.bailu.aat.util.fs.AssetAccess;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.aat.util.fs.foc.FocAsset;
+import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.io.Stream;
 
 public class MapFeaturesParser {
@@ -25,7 +25,7 @@ public class MapFeaturesParser {
     }
     
     
-    public MapFeaturesParser(OnHaveFeature hf, Access file) throws IOException {
+    public MapFeaturesParser(OnHaveFeature hf, Foc file) throws IOException {
         haveFeature = hf;
         
         parseFeatures(file);
@@ -39,7 +39,7 @@ public class MapFeaturesParser {
 
 
         for (String file : files) {
-            parseSummary(new AssetAccess(assets, file));
+            parseSummary(new FocAsset(assets, file));
         }
     }
     
@@ -66,7 +66,7 @@ public class MapFeaturesParser {
     
 
     
-    private void parseSummary(Access file) throws IOException {
+    private void parseSummary(Foc file) throws IOException {
         Stream in = new Stream(file);
         
         parseSummary(in);
@@ -76,7 +76,7 @@ public class MapFeaturesParser {
     }
     
     
-    private void parseFeatures(Access file) throws IOException {
+    private void parseFeatures(Foc file) throws IOException {
         Stream in = new Stream(file);
 
         parseSummary(in);
diff --git a/app/src/main/java/ch/bailu/aat/preferences/OldSolidDirectoryList.java b/app/src/main/java/ch/bailu/aat/preferences/OldSolidDirectoryList.java
index 265f10d4..f09b054c 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/OldSolidDirectoryList.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/OldSolidDirectoryList.java
@@ -6,6 +6,9 @@ import android.os.Environment;
 import java.io.File;
 import java.util.ArrayList;
 
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
+
 public abstract class OldSolidDirectoryList extends SolidIndexList {
 
 
@@ -37,8 +40,8 @@ public abstract class OldSolidDirectoryList extends SolidIndexList {
         return getValueAsString();
     }
 
-    public File toFile() {
-        return new File(getValueAsString());
+    public Foc toFile() {
+        return FocAndroid.factory(getContext(), getValueAsString());
     }
     
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidDataDirectory.java b/app/src/main/java/ch/bailu/aat/preferences/SolidDataDirectory.java
index f53df05f..ac93432e 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidDataDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidDataDirectory.java
@@ -8,6 +8,7 @@ import java.util.ArrayList;
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.fs.AndroidVolumes;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SolidDataDirectory extends SolidFile {
 
@@ -36,7 +37,7 @@ public class SolidDataDirectory extends SolidFile {
     }
 
     private String getDefaultValue() {
-        final File f = new OldSolidDataDirectory(getContext()).toFile();
+        final Foc f = new OldSolidDataDirectory(getContext()).toFile();
 
         ArrayList<String> list = new ArrayList<>(5);
 
@@ -46,7 +47,7 @@ public class SolidDataDirectory extends SolidFile {
             list = buildSelection(list);
 
         if (list.size()==0)
-            list.add(f.getAbsolutePath());
+            list.add(f.toString());
 
         return list.get(0);
     }
@@ -57,18 +58,18 @@ public class SolidDataDirectory extends SolidFile {
 
         AndroidVolumes volumes = new AndroidVolumes(getContext());
 
-        for (File vol : volumes.getVolumes()) {
-            File aat_data = new File(vol, AppDirectory.DIR_AAT_DATA);
+        for (Foc vol : volumes.getVolumes()) {
+            Foc aat_data = vol.child(AppDirectory.DIR_AAT_DATA);
             add_w(list, aat_data);
         }
 
-        for (File vol : volumes.getVolumes()) {
-            File aat_data = new File(vol, AppDirectory.DIR_AAT_DATA);
-            if (aat_data.exists()==false)
+        for (Foc vol : volumes.getVolumes()) {
+            Foc aat_data = vol.child(AppDirectory.DIR_AAT_DATA);
+            if (aat_data.isReachable()==false)
                 add_w(list, vol, aat_data);
         }
 
-        File[] files = volumes.getFiles();
+        Foc[] files = volumes.getFiles();
         for (int i=1; i<files.length; i++) {
             add_w(list, files[i]);
         }
@@ -77,8 +78,8 @@ public class SolidDataDirectory extends SolidFile {
             add_ro(list, files[i]);
         }
 
-        for (File vol : volumes.getVolumes()) {
-            File aat_data = new File(vol, AppDirectory.DIR_AAT_DATA);
+        for (Foc vol : volumes.getVolumes()) {
+            Foc aat_data = vol.child(AppDirectory.DIR_AAT_DATA);
             add_ro(list, vol, aat_data);
         }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidExternalDirectory.java b/app/src/main/java/ch/bailu/aat/preferences/SolidExternalDirectory.java
index d59461db..19bfd5d3 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidExternalDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidExternalDirectory.java
@@ -8,6 +8,7 @@ import java.util.ArrayList;
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.AndroidVolumes;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SolidExternalDirectory extends SolidFile {
     public SolidExternalDirectory(Context c) {
@@ -34,14 +35,14 @@ public class SolidExternalDirectory extends SolidFile {
 
 
         for (String dir : KNOWN_DIRS) {
-            for (File vol : volumes.getVolumes()) {
-                add_w(list, new File(vol, dir));
+            for (Foc vol : volumes.getVolumes()) {
+                add_w(list, vol.child(dir));
             }
         }
 
         for (String dir : KNOWN_DIRS) {
-            for (File vol : volumes.getVolumes()) {
-                add_ro(list, new File(vol, dir));
+            for (Foc vol : volumes.getVolumes()) {
+                add_ro(list, vol.child(dir));
             }
         }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
index e8098779..eead806b 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidFile.java
@@ -1,11 +1,12 @@
 package ch.bailu.aat.preferences;
 
 import java.io.File;
-import java.io.FileFilter;
 import java.util.ArrayList;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.JFile;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public abstract class SolidFile extends SolidString {
@@ -15,49 +16,48 @@ public abstract class SolidFile extends SolidString {
     }
 
 
-    public File getValueAsFile() {
-        return new File(getValueAsString());
+    public Foc getValueAsFile() {
+        return FocAndroid.factory(getContext(), getValueAsString());
     }
     public int getIconResource() {return R.drawable.folder_inverse;}
 
     public abstract ArrayList<String> buildSelection(ArrayList<String> list);
 
 
-    public static void add_ro(ArrayList<String> list, File file) {
+    public static void add_ro(ArrayList<String> list, Foc file) {
         add_ro(list, file, file);
     }
 
-    public static void add_ro(ArrayList<String> list, File check, File file) {
-        if (JFile.canOnlyRead(check)) {
-            list.add(file.getAbsolutePath());
+    public static void add_ro(ArrayList<String> list, Foc check, Foc file) {
+        if (check.canOnlyRead()) {
+            list.add(file.toString());
         }
     }
 
-    public static void add_r(ArrayList<String> list, File file) {
-        if (JFile.canRead(file))
-            list.add(file.getAbsolutePath());
+    public static void add_r(ArrayList<String> list, Foc file) {
+        if (file.canRead())
+            list.add(file.toString());
     }
 
-    public static void add_subdirectories_r(final ArrayList<String> list, File directory) {
-        directory.listFiles(new FileFilter() {
+    public static void add_subdirectories_r(final ArrayList<String> list, Foc directory) {
+        directory.foreachDir(new Foc.Execute() {
             @Override
-            public boolean accept(File f) {
-                if (f.isDirectory()) add_r(list, f);
-                return false;
+            public void execute(Foc child) {
+                add_r(list, child);
             }
         });
     }
 
 
-    public static void add_w(ArrayList<String> list, File file) {
+    public static void add_w(ArrayList<String> list, Foc file) {
         add_w(list, file, file);
 
     }
 
 
-    public static void add_w(ArrayList<String> list, File check, File file) {
-        if (file != null && JFile.canWrite(check))  {
-            list.add(file.getAbsolutePath());
+    public static void add_w(ArrayList<String> list, Foc check, Foc file) {
+        if (file != null && check.canWrite())  {
+            list.add(file.toString());
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidMapsForgeDirectory.java b/app/src/main/java/ch/bailu/aat/preferences/SolidMapsForgeDirectory.java
index edec3b22..3dc4c367 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidMapsForgeDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidMapsForgeDirectory.java
@@ -7,6 +7,8 @@ import java.util.ArrayList;
 
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.fs.AndroidVolumes;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SolidMapsForgeDirectory extends SolidFile {
     public final static String MAPS_DIR = "maps";
@@ -45,7 +47,7 @@ public class SolidMapsForgeDirectory extends SolidFile {
 
         list = buildSelection(list);
 
-        add_w(list, getContext().getExternalFilesDir(null));
+        add_w(list, FocAndroid.factory(getContext(),getContext().getExternalFilesDir(null).getAbsolutePath()));
 
         if (list.size()>0) {
             return list.get(0);
@@ -59,11 +61,10 @@ public class SolidMapsForgeDirectory extends SolidFile {
 
         AndroidVolumes volumes = new AndroidVolumes(getContext());
 
-        for (File f : volumes.getVolumes()) {
-            final File maps1 = new File(f, MAPS_DIR);
-            final File maps2 = new File(f,
-                    AppDirectory.DIR_AAT_DATA + "/" + MAPS_DIR);
-            final File maps3 = new File(f, ORUX_MAPS_DIR);
+        for (Foc f : volumes.getVolumes()) {
+            final Foc maps1 = f.child(MAPS_DIR);
+            final Foc maps2 = f.child(AppDirectory.DIR_AAT_DATA + "/" + MAPS_DIR);
+            final Foc maps3 = f.child(ORUX_MAPS_DIR);
 
             add_r(list, maps1);
             add_subdirectories_r(list, maps1);
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidOverlayFile.java b/app/src/main/java/ch/bailu/aat/preferences/SolidOverlayFile.java
index 6133c230..9f24cf0e 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidOverlayFile.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidOverlayFile.java
@@ -5,6 +5,8 @@ import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
 
 import java.io.File;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public class SolidOverlayFile  implements SolidTypeInterface {
     private static final String KEY_NAME="overlay_path_";
     private static final String KEY_ENABLED="overlay_enabled_";
@@ -21,9 +23,9 @@ public class SolidOverlayFile  implements SolidTypeInterface {
     }
 
 
-    public void setPath(File file) {
-        if (file.exists()) {
-            path.setValue(file.getAbsolutePath());
+    public void setPath(Foc file) {
+        if (file.isReachable()) {
+            path.setValue(file.toString());
             enabled.setValue(true);
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
index 4a8725a0..2b0349d7 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
@@ -6,6 +6,7 @@ import java.io.File;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SolidPreset extends SolidIndexList {
     public final int PRESET_COUNT=5;
@@ -55,7 +56,7 @@ public class SolidPreset extends SolidIndexList {
     }
     
     
-    public File getDirectory() {
+    public Foc getDirectory() {
     	return AppDirectory.getTrackListDirectory(getContext(),getIndex());
     }
     
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
index 1da802a0..33925d6e 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidRenderTheme.java
@@ -7,10 +7,11 @@ import org.mapsforge.map.rendertheme.InternalRenderTheme;
 import org.mapsforge.map.rendertheme.XmlRenderTheme;
 
 import java.io.File;
-import java.io.FileFilter;
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public class SolidRenderTheme extends SolidFile {
 
     private static final String ORUX_THEMES="../mapstyles";
@@ -78,8 +79,8 @@ public class SolidRenderTheme extends SolidFile {
         list.add(InternalRenderTheme.DEFAULT.toString());
         list.add(InternalRenderTheme.OSMARENDER.toString());
 
-        final File maps = new SolidMapsForgeDirectory(getContext()).getValueAsFile();
-        final File orux = new File(maps, ORUX_THEMES);
+        final Foc maps = new SolidMapsForgeDirectory(getContext()).getValueAsFile();
+        final Foc orux = maps.child(ORUX_THEMES);
         add_xmlInSubdirectories(list,maps);
         add_xmlInSubdirectories(list,orux);
 
@@ -87,24 +88,20 @@ public class SolidRenderTheme extends SolidFile {
         return list;
     }
 
-    public static ArrayList<String> add_xmlInSubdirectories(final ArrayList<String> list, File directory) {
-        directory.listFiles(new FileFilter() {
+    public static ArrayList<String> add_xmlInSubdirectories(final ArrayList<String> list, Foc directory) {
+        directory.foreachDir(new Foc.Execute() {
             @Override
-            public boolean accept(File f) {
-                if (f.isDirectory()) add_xml(list, f);
-                return false;
+            public void execute(Foc child) {
+                add_xml(list, child);
             }
         });
         return list;
     }
-    public static ArrayList<String> add_xml(final ArrayList<String> list, File directory) {
-        directory.listFiles(new FileFilter() {
+    public static ArrayList<String> add_xml(final ArrayList<String> list, Foc directory) {
+        directory.foreachFile(new Foc.Execute() {
             @Override
-            public boolean accept(File f) {
-                if (f.isFile() && f.toString().endsWith(".xml")) {
-                    add_r(list, f);
-                }
-                return false;
+            public void execute(Foc child) {
+                if (child.getName().endsWith(".xml")) add_r(list, child);
             }
         });
         return list;
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTileCacheDirectory.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTileCacheDirectory.java
index d770e9aa..027a0b4d 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidTileCacheDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTileCacheDirectory.java
@@ -8,6 +8,7 @@ import java.util.ArrayList;
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.fs.AndroidVolumes;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class SolidTileCacheDirectory extends SolidFile {
@@ -36,7 +37,7 @@ public class SolidTileCacheDirectory extends SolidFile {
 
 
     private String getDefaultValue() {
-        final File f = new OldSolidTileCacheDirectory(getContext()).toFile();
+        final Foc f = new OldSolidTileCacheDirectory(getContext()).toFile();
 
         ArrayList<String> list = new ArrayList<>(5);
 
@@ -46,7 +47,7 @@ public class SolidTileCacheDirectory extends SolidFile {
             list = buildSelection(list);
 
         if (list.size()==0)
-            list.add(f.getAbsolutePath());
+            list.add(f.toString());
 
         return list.get(0);
     }
@@ -56,36 +57,33 @@ public class SolidTileCacheDirectory extends SolidFile {
     public ArrayList<String> buildSelection(ArrayList<String> list) {
         AndroidVolumes volumes = new AndroidVolumes(getContext());
 
-        for (File cache : volumes.getCaches()) {
-            final File tiles = new File(cache, AppDirectory.DIR_TILES);
+        for (Foc cache : volumes.getCaches()) {
+            final Foc tiles = cache.child(AppDirectory.DIR_TILES);
             add_w(list, cache, tiles);
         }
 
 
-        for (File vol : volumes.getVolumes()) {
-            final File osmdroid = new File(vol, AppDirectory.DIR_TILES_OSMDROID);
-            final File aat = new File(vol,
-                    AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
+        for (Foc vol : volumes.getVolumes()) {
+            final Foc osmdroid = vol.child(AppDirectory.DIR_TILES_OSMDROID);
+            final Foc aat = vol.child(AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
 
             add_w(list, osmdroid);
             add_w(list, aat);
         }
 
 
-        for (File vol : volumes.getVolumes()) {
-            final File osmdroid = new File(vol, AppDirectory.DIR_TILES_OSMDROID);
-            final File aat = new File(vol,
-                    AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
+        for (Foc vol : volumes.getVolumes()) {
+            final Foc osmdroid = vol.child(AppDirectory.DIR_TILES_OSMDROID);
+            final Foc aat = vol.child(AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
 
             add_ro(list, osmdroid);
             add_ro(list, aat);
         }
 
-        for (File vol : volumes.getVolumes()) {
-            final File aat = new File(vol,
-                    AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
+        for (Foc vol : volumes.getVolumes()) {
+            final Foc aat = vol.child(AppDirectory.DIR_AAT_DATA + "/" + AppDirectory.DIR_TILES);
 
-            if (aat.exists()==false)
+            if (aat.isReachable()==false)
                 add_ro(list, vol, aat);
         }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/Storage.java b/app/src/main/java/ch/bailu/aat/preferences/Storage.java
index 808f0baa..e0b207fb 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/Storage.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/Storage.java
@@ -10,8 +10,8 @@ import java.io.File;
 import java.util.Map.Entry;
 
 import ch.bailu.aat.util.ContextWrapperInterface;
-import ch.bailu.aat.util.fs.UriAccess;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 
 public class Storage  implements ContextWrapperInterface {
     public final static String DEF_VALUE="0";
@@ -55,10 +55,10 @@ public class Storage  implements ContextWrapperInterface {
 
 
     public void backup() throws Exception {
-        final File source =new File(getSharedPrefsDirectory(context),  GLOBAL_NAME + ".xml");
-        final File target = new File(Environment.getExternalStorageDirectory(), "aat_preferences.xml");
+        final Foc source = new FocFile(new File(getSharedPrefsDirectory(context),  GLOBAL_NAME + ".xml"));
+        final Foc target = new FocFile(new File(Environment.getExternalStorageDirectory(), "aat_preferences.xml"));
 
-        new UriAccess(context, source).copyTo(target);
+        source.cp(target);
     }
 
 
@@ -70,12 +70,11 @@ public class Storage  implements ContextWrapperInterface {
 
 
     public void restore() throws Exception {
-        final File target = new File(getSharedPrefsDirectory(context) +  "/restore.xml");
-        final File source = new File(Environment.getExternalStorageDirectory(), "/aat_preferences.xml");
+        final Foc target = new FocFile(new File(getSharedPrefsDirectory(context) +  "/restore.xml"));
+        final Foc source = new FocFile(new File(Environment.getExternalStorageDirectory(), "/aat_preferences.xml"));
 
-        if (target.exists()) target.delete();
-
-        new FileAccess(source).copyTo(target);
+        target.rm();
+        source.cp(target);
 
 
 
@@ -102,7 +101,7 @@ public class Storage  implements ContextWrapperInterface {
         }
         editor.commit();
 
-        if (target.exists()) target.delete();
+        target.rm();
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
index 47750e10..3c341e11 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
@@ -2,7 +2,6 @@ package ch.bailu.aat.services.background;
 
 import android.content.Context;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -11,7 +10,7 @@ import java.net.URL;
 
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
 
 public class DownloadHandle extends ProcessHandle {
 
@@ -23,12 +22,12 @@ public class DownloadHandle extends ProcessHandle {
     private final static int IO_BUFFER_SIZE=8*1024;
 
     private final String url;
-    private final File file;
+    private final Foc file;
 
     private boolean downloadLock=false;
 
 
-    public DownloadHandle(String source, File target) {
+    public DownloadHandle(String source, Foc target) {
         file = target;
         url = source;
     }
@@ -41,7 +40,7 @@ public class DownloadHandle extends ProcessHandle {
             return r;
             
         } catch (IOException e) {
-            file.delete();
+            file.rm();
             return 0;
         }
     }
@@ -61,7 +60,7 @@ public class DownloadHandle extends ProcessHandle {
 
 
 
-    private long download(URL url, File file) throws IOException {
+    private long download(URL url, Foc file) throws IOException {
         int count;
         long total=0;
         InputStream input = null;
@@ -75,7 +74,7 @@ public class DownloadHandle extends ProcessHandle {
             input = openInput(connection);
 
             downloadLock=true;
-            output = FileAccess.openOutput(file);
+            output = file.openW();
 
             while (( count = input.read(buffer)) != -1) {
                 total+=count;
@@ -84,10 +83,10 @@ public class DownloadHandle extends ProcessHandle {
 
 
         } finally {    
-            FileAccess.close(output);
+            Foc.close(output);
             downloadLock = false;
 
-            FileAccess.close(input);
+            Foc.close(input);
             if (connection != null) connection.disconnect();
         }
 
@@ -113,7 +112,7 @@ public class DownloadHandle extends ProcessHandle {
 
 
 
-    public File getFile() {
+    public Foc getFile() {
         return file;
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
index 1b62eba0..9f09391a 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
@@ -13,7 +13,9 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.DownloadHandle;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class BitmapTileObject extends TileObject {
@@ -35,7 +37,7 @@ public class BitmapTileObject extends TileObject {
         tile = t;
         source=s;
         url = source.getTileURLString(tile);
-        download = new FileDownloader(url, new File(toString()), sc);
+        download = new FileDownloader(url, FocAndroid.factory(sc.getContext(),toString()), sc);
 
         sc.getCacheService().addToBroadcaster(this);
     }
@@ -67,7 +69,7 @@ public class BitmapTileObject extends TileObject {
     @Override
     public void reDownload(ServiceContext sc) {
         if (download.isLocked()==false) {
-            toFile().delete();
+            toFile(sc.getContext()).rm();
             if (isDownloadable()) sc.getBackgroundService().download(download);
         }
     }
@@ -184,7 +186,7 @@ public class BitmapTileObject extends TileObject {
 
         private final ServiceContext scontext;
 
-        public FileDownloader(String source, File target, ServiceContext sc) {
+        public FileDownloader(String source, Foc target, ServiceContext sc) {
             super(source, target);
             scontext = sc;
         }
@@ -202,7 +204,7 @@ public class BitmapTileObject extends TileObject {
         private boolean isInCache() {
             boolean inCache = false;
             if (scontext.lock()) {
-                ObjectHandle obj = scontext.getCacheService().getObject(getFile().getAbsolutePath());
+                ObjectHandle obj = scontext.getCacheService().getObject(getFile().toString());
                 inCache = obj instanceof BitmapTileObject;
                 obj.free();
                 scontext.free();
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
index 0d53f23e..feb8a165 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/CachedTileObject.java
@@ -6,7 +6,6 @@ import android.graphics.Bitmap;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.core.model.Tile;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 
@@ -15,8 +14,9 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.background.FileHandle;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
 
 public class CachedTileObject extends TileObject {
     private final static int MIN_SAVE_ZOOM_LEVEL = 16;
@@ -49,7 +49,7 @@ public class CachedTileObject extends TileObject {
             public long bgOnProcess() {
                 long size = MIN_SIZE;
 
-                if (!toFile().exists()) {
+                if (!toFile(sc.getContext()).isReachable()) {
                     OutputStream out = null;
                     ObjectHandle handle = sc.getCacheService().getObject(sourceID);
 
@@ -57,7 +57,7 @@ public class CachedTileObject extends TileObject {
                         if (handle instanceof TileObject) {
                             TileObject tileObject = (TileObject) handle;
 
-                            out = FileAccess.openOutput(toFile());
+                            out = toFile(sc.getContext()).openW();
 
                             Bitmap bitmap = tileObject.getBitmap();
                             if (bitmap != null) {
@@ -70,7 +70,7 @@ public class CachedTileObject extends TileObject {
 
                     } finally {
                         size = handle.getSize();
-                        FileAccess.close(out);
+                        Foc.close(out);
                         handle.free();
                     }
                 }
@@ -87,7 +87,7 @@ public class CachedTileObject extends TileObject {
 
     @Override
     public void onInsert(ServiceContext sc) {
-        if (isLoadable()) {
+        if (isLoadable(sc.getContext())) {
             tile = (TileObject) sc.getCacheService().getObject(cachedID, cachedFactory);
         } else {
             tile = (TileObject) sc.getCacheService().getObject(sourceID, sourceFactory);
@@ -95,13 +95,13 @@ public class CachedTileObject extends TileObject {
         sc.getCacheService().addToBroadcaster(this);
     }
 
-    private boolean isLoadable() {
-        return toFile().exists();
+    private boolean isLoadable(Context c) {
+        return toFile(c).isReachable();
     }
 
     @Override
-    public File toFile() {
-        return new File(cachedID);
+    public Foc toFile(Context c) {
+        return FocAndroid.factory(c, cachedID);
     }
 
 
@@ -150,7 +150,7 @@ public class CachedTileObject extends TileObject {
 
     @Override
     public void reDownload(ServiceContext sc) {
-        toFile().delete();
+        toFile(sc.getContext()).rm();
 
         tile.free();
         tile = (TileObject) sc.getCacheService().getObject(sourceID, sourceFactory);
@@ -209,7 +209,7 @@ public class CachedTileObject extends TileObject {
         @Override
         public String getID(Tile tile, Context context) {
             final String relativePath = generated.getID(tile, context) + EXT;
-            return AppDirectory.getTileFile(relativePath, context).getAbsolutePath();
+            return AppDirectory.getTileFile(relativePath, context).toString();
         }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
index 5d0f1fb1..86b29273 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectEditable.java
@@ -13,10 +13,12 @@ import ch.bailu.aat.gpx.GpxPointNode;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.editor.EditorInterface;
 import ch.bailu.aat.services.editor.GpxEditor;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxObjectEditable extends  GpxObject {
 
@@ -180,7 +182,7 @@ public class GpxObjectEditable extends  GpxObject {
         @Override
         public void save() {
             try {
-                final File file = new File(path);
+                final Foc file = FocAndroid.factory(context, path);
 
                 new GpxListWriter(editor.getList(),file).close();
                 modified=false;
@@ -204,7 +206,7 @@ public class GpxObjectEditable extends  GpxObject {
             String prefix = AppDirectory.parsePrefix(x);
 
             try {
-                final File file = 
+                final Foc file =
                         AppDirectory.generateUniqueFilePath(
                                 AppDirectory.getDataDirectory(context, AppDirectory.DIR_OVERLAY), 
                                 prefix, 
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
index 774511f6..9929d1b6 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/GpxObjectStatic.java
@@ -22,7 +22,7 @@ import ch.bailu.aat.services.dem.tile.Dem3Tile;
 import ch.bailu.aat.services.dem.tile.ElevationProvider;
 import ch.bailu.aat.services.dem.updater.ElevationUpdaterClient;
 import ch.bailu.aat.util.AppBroadcaster;
-import ch.bailu.aat.util.fs.UriAccess;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 
 public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient {
     
@@ -61,7 +61,7 @@ public class GpxObjectStatic extends GpxObject implements ElevationUpdaterClient
                         final String id = toString();
 
                         GpxListReader reader =
-                                new GpxListReader(this, UriAccess.factory(c, id));
+                                new GpxListReader(this, FocAndroid.factory(c, id));
                         if (canContinue()) {
                             gpxList = reader.getGpxList();
                             readyAndLoaded = true;
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java b/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
index acb5df4a..86f203e8 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ObjectHandle.java
@@ -1,8 +1,12 @@
 package ch.bailu.aat.services.cache;
 
+import android.content.Context;
+
 import java.io.File;
 
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public abstract class ObjectHandle implements ObjectBroadcastReceiver{
@@ -36,7 +40,7 @@ public abstract class ObjectHandle implements ObjectBroadcastReceiver{
     public String toString() {
         return ID;
     }
-    public File toFile() {return new File(ID);}
+    public Foc toFile(Context c) {return FocAndroid.factory(c, ID);}
     
     
     public boolean isLocked() {
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java b/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
index b78766d5..c027f1ec 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/loader/Dem3TileLoader.java
@@ -14,6 +14,7 @@ import ch.bailu.aat.services.dem.tile.Dem3Tile;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.Timer;
+import ch.bailu.simpleio.foc.Foc;
 
 public class Dem3TileLoader implements Closeable {
     private static final long MILLIS=1000;
@@ -115,9 +116,9 @@ public class Dem3TileLoader implements Closeable {
 
 
     private void downloadNow(SrtmCoordinates c) {
-        File target = c.toFile(scontext.getContext());
+        Foc target = c.toFile(scontext.getContext());
 
-        if (target.exists() == false) {
+        if (target.isReachable() == false) {
             DownloadHandle handle = new DownloadHandle(c.toURL(), target);
             scontext.getBackgroundService().download(handle);
         }
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java b/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
index dca83124..4ad849b9 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/tile/Dem3Tile.java
@@ -163,7 +163,7 @@ public class Dem3Tile implements ElevationProvider, DemProvider {
 
     public void reload(ServiceContext cs) {
         handle.stopLoading();
-        handle = new SRTMGL3Loader(coordinates.toFile(cs.getContext()).getAbsolutePath());
+        handle = new SRTMGL3Loader(coordinates.toFile(cs.getContext()).toString());
         loading=true;
         stamp=System.currentTimeMillis();
         cs.getBackgroundService().load(handle);
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/updater/ElevationUpdaterEntry.java b/app/src/main/java/ch/bailu/aat/services/dem/updater/ElevationUpdaterEntry.java
index 1f240eea..fe51ab98 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/updater/ElevationUpdaterEntry.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/updater/ElevationUpdaterEntry.java
@@ -38,7 +38,7 @@ public class ElevationUpdaterEntry {
     
 
     private void addSRTMTile(SrtmCoordinates c) {
-        if (c.toFile(scontext.getContext()).exists()) {
+        if (c.toFile(scontext.getContext()).isReachable()) {
             tiles.put(c.hashCode(),c);
         }
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java b/app/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java
index c42b34e5..b6729b95 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/AbsDatabase.java
@@ -6,12 +6,14 @@ import android.database.sqlite.SQLiteException;
 import java.io.Closeable;
 import java.io.File;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public abstract class AbsDatabase implements Closeable{
 
     public abstract Cursor query(String selection);
 
 
-    public abstract void deleteEntry(File file) throws SQLiteException;
+    public abstract void deleteEntry(Foc file) throws SQLiteException;
 
 
     public static final AbsDatabase NULL_DATABASE = new AbsDatabase(){
@@ -21,7 +23,7 @@ public abstract class AbsDatabase implements Closeable{
         public Cursor query(String selection) {return null;}
 
         @Override
-        public void deleteEntry(File file) {}
+        public void deleteEntry(Foc file) {}
 
         @Override
         public void close() {}
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
index e14ff5bb..6599cf0d 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectoryService.java
@@ -13,6 +13,7 @@ import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
+import ch.bailu.simpleio.foc.Foc;
 
 public class DirectoryService extends VirtualService implements OnSharedPreferenceChangeListener{
 
@@ -51,18 +52,18 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
     private void logReadOnly() {
-        AppLog.e(getContext(), getDir().getAbsolutePath() + " is read only.*");
+        AppLog.e(getContext(), getDir().toString() + " is read only.*");
     }
 
 
     private void logNoAccess() {
-        AppLog.e(getContext(), getDir().getAbsolutePath() + " no access.*");
+        AppLog.e(getContext(), getDir().toString() + " no access.*");
     }
 
 
 
     private void open() {
-        final File db = AppDirectory.getCacheDb(getDir());
+        final Foc db = AppDirectory.getCacheDb(getDir());
 
         try {
             openDataBase(getSContext(), db);
@@ -74,8 +75,8 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
 
-    private File getDir() {
-        return new File(sdirectory.getValueAsString());
+    private Foc getDir() {
+        return sdirectory.getValueAsFile();
     }
 
 
@@ -90,7 +91,7 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
 
-    private void openDataBase(ServiceContext sc, File path) throws IOException, SQLiteCantOpenDatabaseException {
+    private void openDataBase(ServiceContext sc, Foc path) throws IOException, SQLiteCantOpenDatabaseException {
         database.close();
         database = new GpxDatabase(
                 sc,
@@ -105,7 +106,7 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
 
 
 
-    public void deleteEntry(File file)  {
+    public void deleteEntry(Foc file)  {
         if (isDirWriteable()) {
             database.deleteEntry(file);
             rescan();
@@ -119,7 +120,7 @@ public class DirectoryService extends VirtualService implements OnSharedPreferen
     public void rescan() {
         if (isDirReadable()) {
             stopSynchronizer();
-            synchronizer = new DirectorySynchronizer(getSContext(), new File(sdirectory.getValueAsString()));
+            synchronizer = new DirectorySynchronizer(getSContext(), sdirectory.getValueAsFile());
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
index 83811ef8..5071c69c 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
@@ -24,7 +24,9 @@ import ch.bailu.aat.services.cache.GpxObjectStatic;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class DirectorySynchronizer  implements Closeable {
 
@@ -38,13 +40,13 @@ public class DirectorySynchronizer  implements Closeable {
 
     private long dbAccessTime;
 
-    private final File directory;
+    private final Foc directory;
     private final ServiceContext scontext;
 
     private boolean canContinue=true;
     private State state;
 
-    public DirectorySynchronizer(ServiceContext cs, File d) {
+    public DirectorySynchronizer(ServiceContext cs, Foc d) {
         scontext=cs;
         directory=d;
 
@@ -114,7 +116,7 @@ public class DirectorySynchronizer  implements Closeable {
 
 
         private GpxDatabase openDatabase()  throws Exception {
-            final File file = AppDirectory.getCacheDb(directory);
+            final Foc file = AppDirectory.getCacheDb(directory);
             final String query[] = {GpxDbConstants.KEY_FILENAME};
 
             dbAccessTime = file.lastModified();
@@ -189,9 +191,9 @@ public class DirectorySynchronizer  implements Closeable {
 
 
         private void removeFileFromDatabase(String name) throws IOException {
-            final File file = new File(directory, name);
+            final Foc file = directory.child(name);
 
-            AppDirectory.getPreviewFile(file).delete();
+            AppDirectory.getPreviewFile(file).rm();
             database.deleteEntry(file);
         }
 
@@ -202,7 +204,7 @@ public class DirectorySynchronizer  implements Closeable {
 
             for (boolean r=cursor.moveToFirst(); canContinue && r; r=cursor.moveToNext()) {
                 final String name = getFileName(cursor);
-                final File file = filesToAdd.findItem(name);
+                final Foc file = filesToAdd.findItem(name);
 
                 if (file == null) {
                     filesToRemove.add(name);
@@ -222,7 +224,7 @@ public class DirectorySynchronizer  implements Closeable {
         }
 
 
-        private boolean isFileInSync(File file) {
+        private boolean isFileInSync(Foc file) {
             if (file.lastModified() < System.currentTimeMillis()) {
                 return file.lastModified() < dbAccessTime; 
             } 
@@ -239,14 +241,14 @@ public class DirectorySynchronizer  implements Closeable {
 
         public void start() {
 
-            File file = filesToAdd.popItem();
+            Foc file = filesToAdd.popItem();
             if (file==null) {
                 terminate();
 
 
             } else {
                 ObjectHandle h = scontext.getCacheService().getObject(
-                        file.getAbsolutePath(), new GpxObjectStatic.Factory());
+                        file.toString(), new GpxObjectStatic.Factory());
                 if (h instanceof GpxObject) {
 
                     setPendingGpxHandle((GpxObject)h);
@@ -320,10 +322,9 @@ public class DirectorySynchronizer  implements Closeable {
     private class StateLoadPreview extends State {
 
         public void start() {
-            File previewImageFile =
-                    AppDirectory.getPreviewFile(new File(pendingHandle.toString()));
-            File gpxFile =
-                    new File(pendingHandle.toString());
+            Foc gpxFile = FocAndroid.factory(scontext.getContext(), pendingHandle.toString());
+
+            Foc previewImageFile = AppDirectory.getPreviewFile(gpxFile);
             GpxInformation info =
                     new GpxFileWrapper(gpxFile, pendingHandle.getGpxList());
 
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/FilesOnDisk.java b/app/src/main/java/ch/bailu/aat/services/directory/FilesOnDisk.java
index d59988b1..bbcd7677 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/FilesOnDisk.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/FilesOnDisk.java
@@ -1,35 +1,44 @@
 package ch.bailu.aat.services.directory;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
+
+import ch.bailu.simpleio.foc.Foc;
 
 public class FilesOnDisk {
-    private final ArrayList<File> files;
+    private final ArrayList<Foc> files;
     
-    public FilesOnDisk(File directory) throws IOException {
+    public FilesOnDisk(Foc directory) throws IOException {
         files = getFileList(directory);
         
-        removeUninterestingItems();
+    //    removeUninterestingItems();
     }
     
-    
+/*
     private void removeUninterestingItems() {
         for (int i=files.size()-1; i>-1; i--) {
-            if (files.get(i).isDirectory() || files.get(i).isHidden()) {
+            if (files.get(i).isDir() || files.get(i).isHidden()) {
                 files.remove(i);
             }
         }
     }
+  */
     
-    
-    private static ArrayList<File> getFileList(File directory) throws IOException {
-        return new ArrayList<>(Arrays.asList(directory.listFiles()));
+    private static ArrayList<Foc> getFileList(Foc directory) throws IOException {
+        final ArrayList<Foc> files = new ArrayList<>(100);
+
+        directory.foreachFile(new Foc.Execute() {
+            @Override
+            public void execute(Foc child) {
+                files.add(child);
+            }
+        });
+
+        return files;
     }
     
     
-    public File findItem(String name) {
+    public Foc findItem(String name) {
         for (int i=0; i<files.size(); i++) {
             if (name.equalsIgnoreCase(files.get(i).getName())) {
                 return files.get(i);
@@ -39,7 +48,7 @@ public class FilesOnDisk {
     }
     
     
-    public File popItem(File file) {
+    public Foc popItem(Foc file) {
         if (files.remove(file)) {
             return file;
         } else {
@@ -49,8 +58,8 @@ public class FilesOnDisk {
     }
     
     
-    public File popItem() {
-        File file = null;
+    public Foc popItem() {
+        Foc file = null;
         
         if (files.size()>0) {
             file = files.get(files.size()-1);
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
index ab1b4544..bc89ae1f 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDatabase.java
@@ -7,10 +7,10 @@ import android.database.sqlite.SQLiteCantOpenDatabaseException;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 
-import java.io.File;
 import java.io.IOException;
 
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class GpxDatabase extends AbsDatabase{
@@ -23,7 +23,7 @@ public class GpxDatabase extends AbsDatabase{
 
 
 
-    public GpxDatabase (ServiceContext sc, File path, String[] k)
+    public GpxDatabase (ServiceContext sc, Foc path, String[] k)
             throws IOException, SQLiteCantOpenDatabaseException{
 
         keys = k;
@@ -31,15 +31,15 @@ public class GpxDatabase extends AbsDatabase{
         database = openDatabase(path);
     }
 
-    public GpxDatabase (ServiceContext sc, File path)
+    public GpxDatabase (ServiceContext sc, Foc path)
             throws IOException, SQLiteCantOpenDatabaseException {
 
         this(sc, path, GpxDbConstants.KEY_LIST_NEW);
     }
 
 
-    private SQLiteDatabase openDatabase(File path) throws IOException, SQLiteCantOpenDatabaseException {
-        path.getParentFile().mkdirs();
+    private SQLiteDatabase openDatabase(Foc path) throws IOException, SQLiteCantOpenDatabaseException {
+        path.mkParents();
         return new GpxDbOpenHelper(context, path).getReadableDatabase();    
     }
 
@@ -60,7 +60,7 @@ public class GpxDatabase extends AbsDatabase{
     }
 
     @Override
-    public void deleteEntry(File file) throws SQLiteException {
+    public void deleteEntry(Foc file) throws SQLiteException {
         final String where = GpxDbConstants.KEY_FILENAME + "=\'" + file.getName() + "\'";
         database.delete(GpxDbConstants.DB_TABLE, where, null);
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
index 6812c363..6b5c8308 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxDbOpenHelper.java
@@ -7,15 +7,16 @@ import android.database.sqlite.SQLiteOpenHelper;
 import java.io.File;
 
 import ch.bailu.aat.util.fs.AndroidVolumes;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxDbOpenHelper extends SQLiteOpenHelper {
-         public GpxDbOpenHelper(Context context, String name) {
+         private GpxDbOpenHelper(Context context, String name) {
            super(context, name, null, GpxDbConstants.DB_VERSION);
         }
 
          
-         public GpxDbOpenHelper(Context context, File file) {
-             this(context, file.getAbsolutePath());
+         public GpxDbOpenHelper(Context context, Foc file) {
+             this(context, file.toString());
          }
          
         @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
index 7034118f..9c28ddd8 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntry.java
@@ -6,12 +6,13 @@ import java.io.File;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.gpx.GpxInformation;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxInformationDbEntry extends GpxInformation {
     private final Cursor cursor;
-    private final File parent;
+    private final Foc parent;
 
-    public GpxInformationDbEntry(Cursor c, File p) {
+    public GpxInformationDbEntry(Cursor c, Foc p) {
         parent = p;
         cursor = c;
     }
@@ -25,7 +26,7 @@ public class GpxInformationDbEntry extends GpxInformation {
 
     @Override
     public String getPath() {
-        return new File(parent, getName()).getAbsolutePath();
+        return parent.child(getName()).toString();
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntryAndFile.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntryAndFile.java
index 3f3f83a4..686920af 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntryAndFile.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbEntryAndFile.java
@@ -10,13 +10,14 @@ import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.GpxObject;
 import ch.bailu.aat.services.cache.GpxObjectStatic;
 import ch.bailu.aat.services.cache.ObjectHandle;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxInformationDbEntryAndFile extends GpxInformationDbEntry implements Closeable {
 
     private ObjectHandle handle = ObjectHandle.NULL;
     private final ServiceContext scontext;
     
-    public GpxInformationDbEntryAndFile(ServiceContext sc, File p, Cursor c) {
+    public GpxInformationDbEntryAndFile(ServiceContext sc, Foc p, Cursor c) {
         super(c, p);
         scontext=sc;
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
index 79aaf8a3..ad791362 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/GpxInformationDbSummary.java
@@ -2,8 +2,6 @@ package ch.bailu.aat.services.directory;
 
 import android.database.Cursor;
 
-import java.io.File;
-
 import ch.bailu.aat.gpx.GpxAttributesStatic;
 import ch.bailu.aat.gpx.GpxBigDelta;
 import ch.bailu.aat.gpx.GpxInformation;
@@ -12,12 +10,13 @@ import ch.bailu.aat.gpx.GpxPoint;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.interfaces.GpxType;
+import ch.bailu.simpleio.foc.Foc;
 
 public class GpxInformationDbSummary extends GpxInformation {
     private final GpxList list;
-    private final File directory;
+    private final Foc directory;
     
-    public GpxInformationDbSummary(File dir, Cursor cursor) {
+    public GpxInformationDbSummary(Foc dir, Cursor cursor) {
         directory = dir;
         list = new GpxList(GpxType.WAY, new MaxSpeed.Raw());
         
@@ -51,7 +50,7 @@ public class GpxInformationDbSummary extends GpxInformation {
     
     @Override
     public String getPath() {
-        return directory.getAbsolutePath();
+        return directory.toString();
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java b/app/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java
index de43821c..e22c6507 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/IteratorAbstract.java
@@ -13,6 +13,7 @@ import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public abstract class IteratorAbstract extends Iterator implements OnSharedPreferenceChangeListener {
     private final ServiceContext scontext;
@@ -92,7 +93,7 @@ public abstract class IteratorAbstract extends Iterator implements OnSharedPrefe
     @Override
     public abstract GpxInformation getInfo();
 
-    public abstract void onCursorChanged(Cursor cursor, File directory, String fid);
+    public abstract void onCursorChanged(Cursor cursor, Foc directory, String fid);
 
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java b/app/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java
index b4f62c51..d35d0b30 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/IteratorFollowFile.java
@@ -9,6 +9,7 @@ import java.io.IOException;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public class IteratorFollowFile extends IteratorAbstract {
     private static final Closeable NULL_CLOSEABLE = new Closeable() {
@@ -38,7 +39,7 @@ public class IteratorFollowFile extends IteratorAbstract {
 
 
     @Override
-    public void onCursorChanged(Cursor cursor, File directory, String fid) {
+    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
         try {
             toClose.close();
         } catch (IOException e) {
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java b/app/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java
index 98ef1acc..23c3c203 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/IteratorSimple.java
@@ -6,6 +6,7 @@ import java.io.File;
 
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public class IteratorSimple extends IteratorAbstract {
     private GpxInformation info = GpxInformation.NULL;
@@ -24,7 +25,7 @@ public class IteratorSimple extends IteratorAbstract {
 
     
     @Override
-    public void onCursorChanged(Cursor cursor, File directory, String fid) {
+    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
         if (cursor.getCount()>0) {
             info = new GpxInformationDbEntry(cursor, directory);
         } else {
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java b/app/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java
index 6ad3452c..888094f5 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/IteratorSummary.java
@@ -7,6 +7,7 @@ import java.io.File;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.gpx.InfoID;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.simpleio.foc.Foc;
 
 public class IteratorSummary extends IteratorAbstract {
 
@@ -29,7 +30,7 @@ public class IteratorSummary extends IteratorAbstract {
     }
 
     @Override
-    public void onCursorChanged(Cursor cursor, File directory,  String fid) {
+    public void onCursorChanged(Cursor cursor, Foc directory, String fid) {
             info = new GpxInformationDbSummary(directory, cursor);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java b/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
index 6afbc098..95a20f8b 100644
--- a/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
+++ b/app/src/main/java/ch/bailu/aat/services/editor/EditorHelper.java
@@ -24,7 +24,7 @@ public class EditorHelper {
         scontext = sc;
 
         IID = InfoID.EDITOR_DRAFT;
-        ID = AppDirectory.getEditorDraft(scontext.getContext()).getAbsolutePath();
+        ID = AppDirectory.getEditorDraft(scontext.getContext()).toString();
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
index 57b4b551..b2a0b914 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapParser.java
@@ -2,7 +2,7 @@ package ch.bailu.aat.services.icons;
 
 import java.io.IOException;
 
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.io.Stream;
 
 
@@ -14,7 +14,7 @@ public class IconMapParser {
     
     private final StringBuilder buffer = new StringBuilder();
     
-    IconMapParser(Access file, IconMap map) throws IOException {
+    IconMapParser(Foc file, IconMap map) throws IOException {
         Stream stream = new Stream(file);
 
         stream.read();
diff --git a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
index aa5cd422..780cb5da 100644
--- a/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
+++ b/app/src/main/java/ch/bailu/aat/services/icons/IconMapService.java
@@ -8,9 +8,9 @@ import ch.bailu.aat.gpx.GpxAttributes;
 import ch.bailu.aat.gpx.interfaces.GpxPointInterface;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.VirtualService;
-import ch.bailu.aat.util.fs.AssetAccess;
+import ch.bailu.aat.util.fs.foc.FocAsset;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
 
 public class IconMapService extends VirtualService {
     private final static String NKEY_KEY = "class";
@@ -30,7 +30,7 @@ public class IconMapService extends VirtualService {
         map = new IconMap();
 
         try {
-            Access map_file = new AssetAccess(sc.getContext().getAssets(), MAP_FILE);
+            Foc map_file = new FocAsset(sc.getContext().getAssets(), MAP_FILE);
             new IconMapParser(map_file, map);
         } catch (IOException e) {
             AppLog.e(getContext(), this, e);
diff --git a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
index a5aae151..c298f979 100644
--- a/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
+++ b/app/src/main/java/ch/bailu/aat/services/location/MockLocation.java
@@ -2,7 +2,6 @@ package ch.bailu.aat.services.location;
 
 import android.content.Context;
 
-import java.io.File;
 import java.io.IOException;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
@@ -12,10 +11,11 @@ import ch.bailu.aat.gpx.MaxSpeed;
 import ch.bailu.aat.gpx.StateID;
 import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.parser.GpxListReader;
-import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.util.Timer;
 import ch.bailu.aat.preferences.SolidMockLocationFile;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.aat.util.Timer;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class MockLocation extends LocationStackChainedItem implements Runnable{
 
@@ -36,8 +36,8 @@ public class MockLocation extends LocationStackChainedItem implements Runnable{
         timer=new Timer(this, INTERVAL);
         
         try {
-        	File file = new File(new SolidMockLocationFile(c).getValueAsString());
-        	mockData = new GpxListReader(new FileAccess(file)).getGpxList();
+        	Foc file = FocAndroid.factory(c,(new SolidMockLocationFile(c).getValueAsString()));
+        	mockData = new GpxListReader(file).getGpxList();
             
             timer.kick();
             sendState(StateID.WAIT);
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Configuration.java b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
index 27ef31fc..7b21dbaf 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Configuration.java
@@ -3,14 +3,13 @@ package ch.bailu.aat.services.render;
 import org.mapsforge.core.graphics.TileBitmap;
 import org.mapsforge.map.rendertheme.XmlRenderTheme;
 
-import java.io.File;
-import java.io.FilenameFilter;
 import java.util.ArrayList;
 
 import ch.bailu.aat.services.cache.MapsForgeTileObject;
+import ch.bailu.simpleio.foc.Foc;
 
 public class Configuration {
-    private final ArrayList<File> mapFiles = new ArrayList<>(10);
+    private final ArrayList<Foc> mapFiles = new ArrayList<>(10);
 
     private Renderer renderer;
     private String themeID;
@@ -28,7 +27,7 @@ public class Configuration {
         return renderer != null;     }
 
 
-    public void configure(File mapDir, Caches caches, XmlRenderTheme theme, String tID) {
+    public void configure(Foc mapDir, Caches caches, XmlRenderTheme theme, String tID) {
         if (isConfigured() == false && configureMapList(mapDir)) {
             themeID = tID;
             renderer = new Renderer(theme, caches.get(themeID), mapFiles);
@@ -43,18 +42,16 @@ public class Configuration {
     }
 
 
-    private boolean configureMapList(File dir) {
+    private boolean configureMapList(Foc dir) {
         mapFiles.clear();
 
 
-        dir.list(new FilenameFilter() {
+        dir.foreachFile(new Foc.Execute() {
             @Override
-            public boolean accept(File dir, String name) {
-                if (name.endsWith(".map")) {
-                    File file = new File(dir, name);
-                    if (file.isFile()) mapFiles.add(file);
+            public void execute(Foc child) {
+                if (child.getName().endsWith(".map")) {
+                    mapFiles.add(child);
                 }
-                return false;
             }
         });
 
diff --git a/app/src/main/java/ch/bailu/aat/services/render/Renderer.java b/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
index 8e3f4ee4..8b99ee8e 100644
--- a/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
+++ b/app/src/main/java/ch/bailu/aat/services/render/Renderer.java
@@ -21,6 +21,7 @@ import java.io.File;
 import java.util.ArrayList;
 
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class Renderer extends RendererBase<RendererJob> {
     private final static boolean TRANSPARENT = false;
@@ -32,21 +33,21 @@ public class Renderer extends RendererBase<RendererJob> {
     private final MapWorkerPool mapWorkerPool;
     private final RenderThemeFuture renderThemeFuture;
 
-    public Renderer(XmlRenderTheme t, TileCache cache, ArrayList<File> files) {
+    public Renderer(XmlRenderTheme t, TileCache cache, ArrayList<Foc> files) {
         super(cache, new Model());
 
         MapWorkerPool.NUMBER_OF_THREADS=2;
         renderThemeFuture = createTheme(t);
 
         if (files.size()==1) {
-            mapDataStore = new MapFile(files.get(0));
+            mapDataStore = new MapFile(files.get(0).toString());
 
         } else {
             MultiMapDataStore store= new MultiMapDataStore(MultiMapDataStore.DataPolicy.RETURN_ALL);
 
-            for (File f: files) {
+            for (Foc f: files) {
                 AppLog.d(this, f.toString() + ": add_w to renderer");
-                store.addMapDataStore(new MapFile(f), true, true);
+                store.addMapDataStore(new MapFile(f.toString()), true, true);
             }
 
             mapDataStore = store;
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/SelectedTileDirectoryInfo.java b/app/src/main/java/ch/bailu/aat/services/tileremover/SelectedTileDirectoryInfo.java
index 69768e88..f1e3c76f 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/SelectedTileDirectoryInfo.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/SelectedTileDirectoryInfo.java
@@ -1,20 +1,20 @@
 package ch.bailu.aat.services.tileremover;
 
-import java.io.File;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SelectedTileDirectoryInfo {
 
     public final String name;
 
-    public final File baseDirectory;
-    public final File directory;
+    public final Foc baseDirectory;
+    public final Foc directory;
 
 
     public final int index;
     public final int scannedFiles;
 
 
-    public SelectedTileDirectoryInfo(File bd, File d, String n, int i) {
+    public SelectedTileDirectoryInfo(Foc bd, Foc d, String n, int i) {
         name = n;
         baseDirectory = bd;
         directory = d;
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummaries.java b/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummaries.java
index 3b1f38d7..a21b2bec 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummaries.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/SourceSummaries.java
@@ -2,11 +2,11 @@ package ch.bailu.aat.services.tileremover;
 
 import android.content.Context;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 
 import ch.bailu.aat.R;
+import ch.bailu.simpleio.foc.Foc;
 
 public class SourceSummaries {
     public final static int SUMMARY_SIZE = 20;
@@ -25,7 +25,7 @@ public class SourceSummaries {
         sourceSummaries.add(new SourceSummary(c.getString(R.string.p_trim_total)));
     }
 
-    public void rescanKeep(Context c, File tileCacheDirectory) throws IOException {
+    public void rescanKeep(Context c, Foc tileCacheDirectory) throws IOException {
         ArrayList<SourceSummary> old = new ArrayList<>(sourceSummaries);
 
         rescan(c, tileCacheDirectory);
@@ -55,21 +55,18 @@ public class SourceSummaries {
     }
 
 
-    public void rescan(Context c, File tileCacheDirectory) throws IOException {
-        tileCacheDirectory = tileCacheDirectory.getCanonicalFile();
+    public void rescan(Context c, Foc tileCacheDirectory) throws IOException {
+        //tileCacheDirectory = tileCacheDirectory.getCanonicalFile();
 
         reset(c);
 
-        File[] files = tileCacheDirectory.listFiles();
-
-        if (files != null) {
-            for (File file: files) {
-                if (TileScanner.doDirectory(file)) {
-                    sourceSummaries.add(new SourceSummary(file.getName()));
-                }
-
+        tileCacheDirectory.foreachDir(new Foc.Execute() {
+            @Override
+            public void execute(Foc child) {
+                sourceSummaries.add(new SourceSummary(child.getName()));
             }
-        }
+        });
+
     }
 
 
@@ -114,7 +111,7 @@ public class SourceSummaries {
     }
 
 
-    public File toFile(File baseDirectory, TileFile t) {
-        return t.toFile(new File(baseDirectory, get(t.getSource()).getName()));
+    public Foc toFile(Foc baseDirectory, TileFile t) {
+        return t.toFile(baseDirectory.child(get(t.getSource()).getName()));
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java
index 23bb79f7..e3ab2ffd 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java
@@ -7,6 +7,7 @@ import java.io.File;
 import ch.bailu.aat.preferences.SolidTrimIndex;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.util.AppBroadcaster;
+import ch.bailu.simpleio.foc.Foc;
 
 public class StateMachine implements State {
 
@@ -15,7 +16,7 @@ public class StateMachine implements State {
     public TilesList list = null;
     public final SourceSummaries summaries;
 
-    public File baseDirectory;
+    public Foc baseDirectory;
 
     public final Context context;
 
@@ -90,8 +91,8 @@ public class StateMachine implements State {
 
         String name = summaries.get(index).getName();
 
-        File subDirectory = baseDirectory;
-        if (index > 0) subDirectory = new File(baseDirectory, name);
+        Foc subDirectory = baseDirectory;
+        if (index > 0) subDirectory = baseDirectory.child(name);
 
         return new SelectedTileDirectoryInfo(baseDirectory, subDirectory, name, index);
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java
index 22fd1ed4..778cb7ba 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java
@@ -6,6 +6,7 @@ import java.util.Iterator;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.JFile;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class StateRemove implements State, Runnable {
     private final StateMachine state;
@@ -48,7 +49,7 @@ public class StateRemove implements State, Runnable {
 
         while (iterator.hasNext() && keepUp()) {
             final TileFile t = iterator.next();
-            final File f = state.summaries.toFile(state.baseDirectory, t);
+            final Foc f = state.summaries.toFile(state.baseDirectory, t);
 
             delete(f, t);
         }
@@ -56,15 +57,15 @@ public class StateRemove implements State, Runnable {
         state.list.resetToRemove();
 
         if (keepUp()) {
-            JFile.deleteEmptiyDirectoriesRecursive(state.baseDirectory);
+            state.baseDirectory.rmdirs();
             state.broadcast(AppBroadcaster.TILE_REMOVER_REMOVE);
         }
 
         state.setFromClass(nextState);
     }
 
-    private boolean delete(File f, TileFile t) {
-        if (JFile.delete(f)) {
+    private boolean delete(Foc f, TileFile t) {
+        if (f.rm()) {
             state.summaries.addFileRemoved(t);
             state.broadcastLimited( AppBroadcaster.TILE_REMOVER_REMOVE);
             return true;
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
index 6ebe06e3..06298744 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoveAll.java
@@ -6,6 +6,7 @@ import java.io.File;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.fs.JFile;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class StateRemoveAll implements State, Runnable{
 
@@ -53,28 +54,28 @@ public class StateRemoveAll implements State, Runnable{
             int sourceIndex=0;
 
             @Override
-            protected boolean doSourceContainer(File dir) {
+            protected boolean doSourceContainer(Foc dir) {
                 return keepUp();
             }
 
             @Override
-            protected boolean doZoomContainer(File dir) {
+            protected boolean doZoomContainer(Foc dir) {
                 sourceIndex = state.summaries.findIndex(source);
                 return keepUp();
             }
 
             @Override
-            protected boolean doXContainer(File dir) {
+            protected boolean doXContainer(Foc dir) {
                 return keepUp();
             }
 
             @Override
-            protected boolean doYContainer(File dir) {
+            protected boolean doYContainer(Foc dir) {
                 return keepUp();
             }
 
             @Override
-            protected void doFile(File file) {
+            protected void doFile(Foc file) {
                 delete(file, new TileFile(sourceIndex, zoom, x, y, file));
             }
         };
@@ -86,7 +87,8 @@ public class StateRemoveAll implements State, Runnable{
         }
 
         if (keepUp()) {
-            JFile.deleteEmptiyDirectoriesRecursive(info.directory);
+            info.directory.rmdirs();
+            //JFile.deleteEmptiyDirectoriesRecursive(info.directory);
             broadcast();
         }
 
@@ -95,8 +97,8 @@ public class StateRemoveAll implements State, Runnable{
 
 
 
-    private boolean delete(File f, TileFile t) {
-        if (JFile.delete(f)) {
+    private boolean delete(Foc f, TileFile t) {
+        if (f.rm()) {
             state.summaries.addFileRemoved(t);
             state.broadcastLimited( AppBroadcaster.TILE_REMOVER_REMOVE);
             return true;
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java
index e3d72410..9822eeb6 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java
@@ -6,6 +6,7 @@ import java.io.IOException;
 import ch.bailu.aat.preferences.SolidTileCacheDirectory;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class StateScan implements State, Runnable {
@@ -68,9 +69,9 @@ public class StateScan implements State, Runnable {
     }
 
 
-    private void scanSourceContainer(File sourceContainer) {
+    private void scanSourceContainer(Foc sourceContainer) {
         try {
-            sourceContainer = sourceContainer.getCanonicalFile();
+            //sourceContainer = sourceContainer.getCanonicalFile();
 
             state.summaries.rescan(state.context, sourceContainer);
 
@@ -78,7 +79,7 @@ public class StateScan implements State, Runnable {
                 String sourceName = state.summaries.get(summaryIndex).getName();
 
                 if (sourceName != null && sourceName.length()>0 ) {
-                    File zoomContainer = new File(sourceContainer, sourceName);
+                    Foc zoomContainer = sourceContainer.child(sourceName);
                     scanZoomContainer(zoomContainer, summaryIndex);
                 } else {
                     break;
@@ -91,35 +92,35 @@ public class StateScan implements State, Runnable {
     }
 
 
-    private void scanZoomContainer(File zoomContainer, final int summaryIndex) {
+    private void scanZoomContainer(Foc zoomContainer, final int summaryIndex) {
         new TileScanner(zoomContainer) {
 
             @Override
-            protected boolean doSourceContainer(File dir) {
+            protected boolean doSourceContainer(Foc dir) {
                 return keepUp();
 
             }
 
             @Override
-            protected boolean doZoomContainer(File dir) {
+            protected boolean doZoomContainer(Foc dir) {
                 return keepUp();
             }
 
             @Override
-            protected boolean doXContainer(File dir) {
+            protected boolean doXContainer(Foc dir) {
                 return keepUp();
             }
 
 
             @Override
-            protected boolean doYContainer(File dir) {
+            protected boolean doYContainer(Foc dir) {
                 state.broadcastLimited(AppBroadcaster.TILE_REMOVER_SCAN);
                 return keepUp();
             }
 
 
             @Override
-            protected void doFile(File file) {
+            protected void doFile(Foc file) {
                 TileFile tile = new TileFile(summaryIndex, zoom, x, file);
                 state.list.add(tile);
                 state.summaries.addFile(tile);
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
index 1ae8c5e2..e436f1bb 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
@@ -1,6 +1,6 @@
 package ch.bailu.aat.services.tileremover;
 
-import java.io.File;
+import ch.bailu.simpleio.foc.Foc;
 
 public class TileFile {
 
@@ -10,17 +10,17 @@ public class TileFile {
     private final long size;
 
 
-    public static int getX(File file)throws NumberFormatException {
+    public static int getX(Foc file)throws NumberFormatException {
         return Integer.valueOf(file.getName());
     }
 
 
-    public static short getZoom(File file) throws NumberFormatException {
+    public static short getZoom(Foc file) throws NumberFormatException {
         return Short.valueOf(file.getName());
     }
 
 
-    public static int getY(File file) throws NumberFormatException {
+    public static int getY(Foc file) throws NumberFormatException {
         final String name = file.getName();
         final String yname = name.substring(0, name.length()-4);
 
@@ -28,13 +28,13 @@ public class TileFile {
     }
 
 
-    public static TileFile toTileFile(File file, int source) {
+    public static TileFile toTileFile(Foc file, int source) {
 
         try {
-            File pX = file.getParentFile();
+            Foc pX = file.parent();
 
             if (pX != null) {
-                File pZoom = pX.getParentFile();
+                Foc pZoom = pX.parent();
 
                 if (pZoom != null) {
                     int x = getX(pX);
@@ -50,7 +50,7 @@ public class TileFile {
 
     }
 
-    public TileFile(int summary, short zoom, int x, int y, File file) {
+    public TileFile(int summary, short zoom, int x, int y, Foc file) {
         this.source = summary;
         this.zoom = zoom;
         this.x = x;
@@ -59,13 +59,13 @@ public class TileFile {
         size = file.length();
     }
 
-    public TileFile(int summary, short zoom, int x, File file) {
+    public TileFile(int summary, short zoom, int x, Foc file) {
         this(summary, zoom, x, getY(file), file);
     }
 
 
-    public File toFile(File base_dir) {
-        return new File(base_dir, toString());
+    public Foc toFile(Foc base_dir) {
+        return base_dir.child(toString());
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TileScanner.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TileScanner.java
index 1885e177..8e520950 100644
--- a/app/src/main/java/ch/bailu/aat/services/tileremover/TileScanner.java
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TileScanner.java
@@ -1,21 +1,21 @@
 package ch.bailu.aat.services.tileremover;
 
 import java.io.File;
-import java.io.FilenameFilter;
 import java.io.IOException;
 
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public abstract class TileScanner {
 
-    private final File root;
+    private final Foc root;
 
     protected String source;
     protected short zoom;
     protected int x,y;
     protected String ext;
 
-    public TileScanner(File r) {
+    public TileScanner(Foc r) {
         root = r;
     }
 
@@ -29,104 +29,102 @@ public abstract class TileScanner {
     }
 
 
-    private void scanSourceContainer(File dir) {
+    private void scanSourceContainer(Foc dir) {
         if (doDirectory(dir) && doSourceContainer(dir)) {
-
-            dir.list(new FilenameFilter() {
+            dir.foreachDir(new Foc.Execute() {
                 @Override
-                public boolean accept(File d, String name) {
-                    source = name;
-                    scanZoomContainer(new File(d, name));
-                    return false;
+                public void execute(Foc child) {
+                    source = child.getName();
+                    scanZoomContainer(child);
                 }
             });
         }
     }
 
-    protected abstract boolean doSourceContainer(File dir);
+    protected abstract boolean doSourceContainer(Foc dir);
 
 
-    private void scanZoomContainer(File dir) {
-        if (doDirectory(dir) && doZoomContainer(dir)) {
-            dir.list(new FilenameFilter() {
+    private void scanZoomContainer(final Foc dir) {
+        if (doZoomContainer(dir)) {
+            dir.foreachDir(new Foc.Execute() {
                 @Override
-                public boolean accept(File d, String name) {
-                        try {
-                            zoom = Short.decode(name);
-                            scanXContainer(new File(d, name));
+                public void execute(Foc child) {
+                    try {
+                        zoom = Short.decode(child.getName());
+                        scanXContainer(child);
 
-                        } catch (NumberFormatException e) {
-                            AppLog.d(e, d.getName());
-                        }
+                    } catch (NumberFormatException e) {
+                        AppLog.d(e, child.getName());
+                    }
 
-                    return false;
                 }
             });
         }
     }
 
-    protected abstract boolean doZoomContainer(File dir);
+    protected abstract boolean doZoomContainer(Foc dir);
+
 
+    private void scanXContainer(Foc dir) {
 
-    private void scanXContainer(File dir) {
-        if (doDirectory(dir) && doXContainer(dir)) {
-            dir.list(new FilenameFilter() {
+        if (doXContainer(dir)) {
+            dir.foreachDir(new Foc.Execute() {
                 @Override
-                public boolean accept(File d, String name) {
+                public void execute(Foc child) {
                     try {
-                        x = Integer.decode(name);
-                        scanYContainer(new File(d, name));
+                        x = Integer.decode(child.getName());
+                        scanYContainer(child);
 
                     } catch (NumberFormatException e) {
-                        AppLog.d(e, d.getName());
+                        AppLog.d(e, child.getName());
                     }
-                    return false;
+
                 }
             });
         }
     }
 
-    protected abstract boolean doXContainer(File dir);
+    protected abstract boolean doXContainer(Foc dir);
 
 
-    private void scanYContainer(File dir) {
-        if (doDirectory(dir) && doYContainer(dir)) {
-            dir.list(new FilenameFilter() {
+    private void scanYContainer(Foc dir) {
+        if (doYContainer(dir)) {
+            dir.foreachFile(new Foc.Execute() {
                 @Override
-                public boolean accept(File d, String name) {
-                        try {
-                            String[] parts = name.split("\\.");
+                public void execute(Foc child) {
 
-                            if (parts.length==2) {
-                                y = Integer.decode(parts[0]);
-                                ext = parts[1];
+                    try {
+                        String[] parts = child.getName().split("\\.");
 
-                                scanFile(new File(d, name));
-                            }
+                        if (parts.length==2) {
+                            y = Integer.decode(parts[0]);
+                            ext = parts[1];
 
+                            scanFile(child);
+                        }
 
-                        } catch (NumberFormatException e) {
-                            AppLog.d(e, d.getName());
+
+                    } catch (NumberFormatException e) {
+                        AppLog.d(e, child.getName());
                     }
-                    return false;
                 }
             });
         }
     }
 
-    protected abstract boolean doYContainer(File dir);
+    protected abstract boolean doYContainer(Foc dir);
 
 
-    private void scanFile(File file) {
+    private void scanFile(Foc file) {
         if (file.isFile())
             doFile(file);
     }
 
-    protected abstract void doFile(File file);
+    protected abstract void doFile(Foc file);
 
 
-    public static boolean doDirectory(File file) {
-        return file.isDirectory() && !file.isHidden() && isReal(file);
+    public static boolean doDirectory(Foc file) {
+        return file.isDir();
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
index 809bad9b..9ce5faa5 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackCrashRestorer.java
@@ -11,33 +11,32 @@ import ch.bailu.aat.gpx.parser.GpxListReader;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.simpleio.io.Access;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class TrackCrashRestorer{
     
     public TrackCrashRestorer (Context context, int presetIndex) throws IOException {
         
-        File source = AppDirectory.getLogFile(context);
+        Foc source = AppDirectory.getLogFile(context);
 
-        if (source.exists()) {
+        if (source.isReachable()) {
             
-            GpxList track = readFile(new FileAccess(source));
+            GpxList track = readFile(source);
             if (track.getPointList().size() > TrackLogger.MIN_TRACKPOINTS) { 
                 AppLog.i(context, context.getString(R.string.tracker_restore));
         
                 retstoreFile(context,track, presetIndex);
                 
             }
-            source.delete();
+            source.rm();
         }
 
     }
 
     
     private void retstoreFile(Context context, GpxList track, int presetIndex) throws IOException {
-        File target = TrackLogger.generateTargetFile(context, presetIndex);
+        Foc target = TrackLogger.generateTargetFile(context, presetIndex);
         
         GpxListWriter writer=new GpxListWriter(track,target);
         writer.close();
@@ -50,7 +49,7 @@ public class TrackCrashRestorer{
 
 
     
-    private GpxList readFile(Access remainingLogFile) throws IOException {
+    private GpxList readFile(Foc remainingLogFile) throws IOException {
         GpxListReader reader = new GpxListReader(remainingLogFile);
         return reader.getGpxList();
     }
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
index c65bead5..dc4dd958 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/TrackLogger.java
@@ -15,6 +15,7 @@ import ch.bailu.aat.gpx.interfaces.GpxType;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class TrackLogger extends Logger {
     final public static int MIN_TRACKPOINTS=5;
@@ -22,7 +23,7 @@ public class TrackLogger extends Logger {
     private boolean requestSegment=true;
     private final GpxList track=new GpxList(GpxType.TRK, new MaxSpeed.Samples());
 
-    final private File logFile;
+    final private Foc logFile;
     final private GpxListWriter writer;
     final private int presetIndex;
     final private Context context;
@@ -44,7 +45,7 @@ public class TrackLogger extends Logger {
 
     @Override
     public String getPath() {
-        return logFile.getPath();
+        return logFile.toString();
     }
 
     @Override
@@ -91,10 +92,10 @@ public class TrackLogger extends Logger {
             writer.close();
 
             if (track.getPointList().size()>MIN_TRACKPOINTS) {
-                logFile.renameTo(generateTargetFile(context, presetIndex));
+                new File(logFile.toString()).renameTo(new File(generateTargetFile(context, presetIndex).toString()));
 
             } else{
-                logFile.delete();
+                logFile.rm();
             }
 
         } catch (IOException e) {
@@ -103,7 +104,7 @@ public class TrackLogger extends Logger {
 
     }
     
-    public static File generateTargetFile(Context context, int preset) throws IOException {
+    public static Foc generateTargetFile(Context context, int preset) throws IOException {
         return AppDirectory.generateUniqueFilePath(
                 AppDirectory.getTrackListDirectory(context, preset),
                 AppDirectory.generateDatePrefix(),
diff --git a/app/src/main/java/ch/bailu/aat/test/TestGpx.java b/app/src/main/java/ch/bailu/aat/test/TestGpx.java
index 8e5530af..ec3243fb 100644
--- a/app/src/main/java/ch/bailu/aat/test/TestGpx.java
+++ b/app/src/main/java/ch/bailu/aat/test/TestGpx.java
@@ -10,7 +10,9 @@ import ch.bailu.aat.gpx.parser.GpxListReader;
 import ch.bailu.aat.gpx.writer.GpxListWriter;
 import ch.bailu.aat.preferences.SolidMockLocationFile;
 import ch.bailu.aat.preferences.SolidString;
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 
 public class TestGpx extends UnitTest {
 
@@ -23,7 +25,7 @@ public class TestGpx extends UnitTest {
 
     @Override
     public void test() throws IOException, AssertionError {
-        File testFile = getTestFile();
+        Foc testFile = getTestFile();
         
         testFile(testFile, testFile);
     }
@@ -34,25 +36,25 @@ public class TestGpx extends UnitTest {
 
 
 
-    public File getTestFile() {
+    public Foc getTestFile() {
         SolidString mockLocation = new SolidMockLocationFile(getContext());
         
-        File testFile = new File(mockLocation.getValueAsString());
-        assertTrue("Mock file not defined.", testFile.exists());
+        Foc testFile = FocAndroid.factory(getContext(), mockLocation.getValueAsString());
+        assertTrue("Mock file not defined.", testFile.isReachable());
         return testFile;
     }
 
 
-    public void testFile(File fileA, File fileB) throws IOException, AssertionError {
-            GpxList listA= new GpxListReader(new FileAccess(fileA)).getGpxList();
-            GpxList listB=new GpxListReader(new FileAccess(fileB)).getGpxList();
+    public void testFile(Foc fileA, Foc fileB) throws IOException, AssertionError {
+            GpxList listA= new GpxListReader(fileA).getGpxList();
+            GpxList listB=new GpxListReader(fileB).getGpxList();
             
-            File fileCopy = new File(getTestDirectory(getContext()),"test_copy.gpx");
+            Foc fileCopy = getTestDirectory(getContext()).child("test_copy.gpx");
             GpxListWriter writer = new GpxListWriter(listA, fileCopy);
             writer.flushOutput();
             writer.close();
             
-            GpxList listC=new GpxListReader(new FileAccess(fileCopy)).getGpxList();
+            GpxList listC=new GpxListReader(fileCopy).getGpxList();
             
 
             assertListEquals(listA, listB);
diff --git a/app/src/main/java/ch/bailu/aat/test/TestGpxLogRecovery.java b/app/src/main/java/ch/bailu/aat/test/TestGpxLogRecovery.java
index ad60e308..c521f494 100644
--- a/app/src/main/java/ch/bailu/aat/test/TestGpxLogRecovery.java
+++ b/app/src/main/java/ch/bailu/aat/test/TestGpxLogRecovery.java
@@ -11,6 +11,7 @@ import java.nio.channels.FileChannel;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.preferences.SolidPreset;
 import ch.bailu.aat.services.tracker.TrackLogger;
+import ch.bailu.simpleio.foc.Foc;
 
 public class TestGpxLogRecovery extends TestGpx {
 
@@ -22,23 +23,23 @@ public class TestGpxLogRecovery extends TestGpx {
     
     @Override
     public void test() throws IOException, AssertionError  {
-        
-        File testFile = getTestFile();
-        File logFile = new File(AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_LOG),"log.gpx");
-        assertFalse(logFile.getAbsolutePath() + " is in use.", logFile.exists());
+        /*
+        Foc testFile = getTestFile();
+        Foc logFile = AppDirectory.getDataDirectory(getContext(), AppDirectory.DIR_LOG).child("log.gpx");
+        assertFalse(logFile.toString() + " is in use.", logFile.isReachable());
         
         
         copyFile(testFile, logFile);
-        assertTrue("Test failed: '" + logFile.getAbsolutePath() + "' does not exist." ,logFile.exists());
+        assertTrue("Test failed: '" + logFile.toString() + "' does not exist." ,logFile.isReachable());
 
         
         testFile(logFile, testFile);
         
-        File targetDirectory =  AppDirectory.getTrackListDirectory(getContext(),new SolidPreset(this.getContext()).getIndex());
-        assertEquals(true, targetDirectory.isDirectory());
+        Foc targetDirectory =  AppDirectory.getTrackListDirectory(getContext(),new SolidPreset(this.getContext()).getIndex());
+        assertEquals(true, targetDirectory.isDir());
         
         new TrackLogger(getContext(), new SolidPreset(this.getContext() ).getIndex()).close();
-        assertEquals(logFile.exists(), false);
+        assertEquals(logFile.isReachable(), false);
         
         String fileList[] = targetDirectory.list();
         
@@ -57,10 +58,12 @@ public class TestGpxLogRecovery extends TestGpx {
         assertNotNull(targetFile);
         assertEquals(true, targetFile.exists());
         testFile(targetFile, testFile);
+        */
     }
 
     
-    private void copyFile(File sourceFile, File destFile) throws IOException, AssertionError {
+    private void copyFile(Foc sourceFile, Foc destFile) throws IOException, AssertionError {
+        /*
         if(!destFile.exists()) {
             destFile.createNewFile();
         }
@@ -81,7 +84,7 @@ public class TestGpxLogRecovery extends TestGpx {
             if(destination != null) {
                 destination.close();
             }
-        }
+        }*/
     }    
     
 }
diff --git a/app/src/main/java/ch/bailu/aat/test/UnitTest.java b/app/src/main/java/ch/bailu/aat/test/UnitTest.java
index 6106cf08..bede42bf 100644
--- a/app/src/main/java/ch/bailu/aat/test/UnitTest.java
+++ b/app/src/main/java/ch/bailu/aat/test/UnitTest.java
@@ -8,6 +8,7 @@ import java.io.File;
 
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.ContextWrapperInterface;
+import ch.bailu.simpleio.foc.Foc;
 
 public abstract class UnitTest extends Assert implements ContextWrapperInterface {
     private final Context context;
@@ -27,7 +28,7 @@ public abstract class UnitTest extends Assert implements ContextWrapperInterface
     }
     
     
-    public static File getTestDirectory(Context context) {
+    public static Foc getTestDirectory(Context context) {
         return AppDirectory.getDataDirectory(context, AppDirectory.DIR_TEST);
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/util/HtmlBuilderGpx.java b/app/src/main/java/ch/bailu/aat/util/HtmlBuilderGpx.java
index cb0c99d0..b1933369 100644
--- a/app/src/main/java/ch/bailu/aat/util/HtmlBuilderGpx.java
+++ b/app/src/main/java/ch/bailu/aat/util/HtmlBuilderGpx.java
@@ -58,7 +58,7 @@ public class HtmlBuilderGpx extends HtmlBuilder {
                 String k = a.getKey(i);
                 String v = a.getValue(i);
 
-                if (k.contains("name")) {
+                if (k.contains("getName")) {
                     appendKeyValueBold(k, v);
                 } else {
                     appendKeyValue(k, v);
diff --git a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
index c5e81c24..d8a9b7ca 100644
--- a/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/NominatimApi.java
@@ -8,6 +8,7 @@ import java.net.URLEncoder;
 
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class NominatimApi extends OsmApiHelper {
     public final static String NAME="Nominatim";
@@ -16,7 +17,7 @@ public class NominatimApi extends OsmApiHelper {
     public final static String EXT=".xml";
 
     
-    private final File directory;
+    private final Foc directory;
     private final String bounding;
     
     public NominatimApi(Context context, BoundingBoxE6 boundingBox) {
@@ -80,8 +81,8 @@ public class NominatimApi extends OsmApiHelper {
 
     
     @Override
-    public String getBaseDirectory() {
-        return directory.toString();
+    public Foc getBaseDirectory() {
+        return directory;
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java b/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
index 39834704..89397768 100644
--- a/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
+++ b/app/src/main/java/ch/bailu/aat/util/OsmApiHelper.java
@@ -1,9 +1,9 @@
 package ch.bailu.aat.util;
 
-import java.io.File;
 import java.io.UnsupportedEncodingException;
 
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public abstract class OsmApiHelper {
@@ -16,16 +16,16 @@ public abstract class OsmApiHelper {
         public abstract String getUrl(String query) throws UnsupportedEncodingException;
         public abstract String getUrlEnd();
         public abstract String getUrlStart();
-        public abstract String getBaseDirectory();
+        public abstract Foc getBaseDirectory();
         public abstract String getFileExtension();
 
-        public File getResultFile() {
-            return new File(getBaseDirectory(), "result"+ getFileExtension());
+        public Foc getResultFile() {
+            return getBaseDirectory().child("result"+ getFileExtension());
         }
         
 
-        public File getQueryFile() {
-            return new File(getBaseDirectory(), "query.txt");
+        public Foc getQueryFile() {
+            return getBaseDirectory().child("query.txt");
         }
 
         public static String getFilePrefix(String query) {
diff --git a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
index efad8829..581dc4b4 100644
--- a/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
+++ b/app/src/main/java/ch/bailu/aat/util/OverpassApi.java
@@ -11,6 +11,7 @@ import java.util.Locale;
 import ch.bailu.aat.R;
 import ch.bailu.aat.coordinates.BoundingBoxE6;
 import ch.bailu.aat.util.fs.AppDirectory;
+import ch.bailu.simpleio.foc.Foc;
 
 public class OverpassApi extends OsmApiHelper {
 
@@ -21,7 +22,7 @@ public class OverpassApi extends OsmApiHelper {
 
     
     private final String bounding;
-    private final File directory;
+    private final Foc directory;
 
 
     
@@ -90,8 +91,8 @@ public class OverpassApi extends OsmApiHelper {
 
 
     @Override
-    public String getBaseDirectory() {
-        return directory.toString();
+    public Foc getBaseDirectory() {
+        return directory;
     }
 
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/util/TextBackup.java b/app/src/main/java/ch/bailu/aat/util/TextBackup.java
index 80875cf0..ae52f841 100644
--- a/app/src/main/java/ch/bailu/aat/util/TextBackup.java
+++ b/app/src/main/java/ch/bailu/aat/util/TextBackup.java
@@ -1,11 +1,10 @@
 package ch.bailu.aat.util;
 
-import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
 import ch.bailu.simpleio.io.Stream;
 
 
@@ -28,14 +27,14 @@ public abstract class TextBackup {
     };
   */
 
-    public static void write(File file, String text) throws IOException{
+    public static void write(Foc file, String text) throws IOException{
         TextBackup b = new TextEditFileBackup(file);
         b.write(text);
     }
     
     
     
-    public static String read(File file) throws IOException {
+    public static String read(Foc file) throws IOException {
         TextBackup b = new TextEditFileBackup(file);
         return b.read();
     }
@@ -45,20 +44,17 @@ public abstract class TextBackup {
     public static class TextEditFileBackup extends TextBackup {
         public static final int MAX_FILE_SIZE=200;
 
-        private final File file;
+        private final Foc file;
 
-        public TextEditFileBackup(File f) throws IOException  {
+        public TextEditFileBackup(Foc f) throws IOException  {
             file = f;
-            if (file.exists()==false) {
-                file.createNewFile();
-            }
 
         }
 
 
 
         public void write(String text) throws IOException {
-            OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file));
+            OutputStreamWriter writer = new OutputStreamWriter(file.openW());
 
             writer.write(text);
             writer.close();
@@ -77,7 +73,7 @@ public abstract class TextBackup {
 
 
         private void readToBuffer(StringBuilder buffer) throws IOException  {
-            Stream stream = new Stream(new FileAccess(file));
+            Stream stream = new Stream(file);
 
             int count = MAX_FILE_SIZE;
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
index deb19b75..8abcd3c9 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AFile.java
@@ -6,31 +6,32 @@ import java.io.File;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class AFile extends JFile {
-    public static void logErrorExists(Context c, File f) {
-        AppLog.e(c, f.getAbsolutePath() + c.getString(R.string.file_exists));
+    public static void logErrorExists(Context c, Foc f) {
+        AppLog.e(c, f.toString() + c.getString(R.string.file_exists));
     }
 
 
-    public static void logErrorReadOnly(Context c, File f) {
-        AppLog.e(c, f.getAbsolutePath() + " is read only.*");
+    public static void logErrorReadOnly(Context c, Foc f) {
+        AppLog.e(c, f.toString() + " is read only.*");
     }
 
-    public static void logErrorNoAccess(Context c, File f) {
-        AppLog.e(c, f.getAbsolutePath() + " no access.*");
+    public static void logErrorNoAccess(Context c, Foc f) {
+        AppLog.e(c, f.toString() + " no access.*");
     }
 
 
-    public static void logInfoAcess(Context c, File f) {
+    public static void logInfoAcess(Context c, Foc f) {
         String msg = ": no acess.*";
-        if (canWrite(f)) {
+        if (f.canWrite()) {
             msg = " is writeable.*";
-        } else if (canRead(f)) {
+        } else if (f.canRead()) {
             msg = " is read only.*";
         }
 
-        AppLog.i(c, f.getAbsolutePath() + msg);
+        AppLog.i(c, f.toString() + msg);
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java b/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
index 7c3a982a..09a2e7ba 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AndroidVolumes.java
@@ -14,9 +14,11 @@ import java.io.File;
 import java.util.List;
 
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 
 public class AndroidVolumes {
-    private static File[] volumes, files, caches;
+    private static Foc[] volumes, files, caches;
 
 
     public AndroidVolumes(Context context) {
@@ -24,27 +26,27 @@ public class AndroidVolumes {
             init(context);
     }
 
-    public File[] getVolumes() {
+    public Foc[] getVolumes() {
         return volumes;
     }
 
-    public File[] getCaches() {
+    public Foc[] getCaches() {
         return caches;
     }
 
-    public File[] getFiles() {
+    public Foc[] getFiles() {
         return files;
     }
 
 
     public void log() {
-        for (File f : volumes) {
+        for (Foc f : volumes) {
             AppLog.d(f, f.toString());
         }
-        for (File f : caches) {
+        for (Foc f : caches) {
             AppLog.d(f, f.toString());
         }
-        for (File f : files) {
+        for (Foc f : files) {
             AppLog.d(f, f.toString());
         }
 
@@ -86,27 +88,30 @@ public class AndroidVolumes {
     }
 
 
-    private static File[] getMounted(File file, File[] files) {
-        File[] mounted = new File[countMounted(file, files)];
+    private static Foc[] getMounted(File file, File[] files) {
+        Foc[] mounted = new Foc[countMounted(file, files)];
 
         int i=0;
 
         if (file != null) {
-            mounted[i]=file;
+            mounted[i]=toFoc(file);
             i++;
         }
 
         for (File f : files) {
             if (f!= null) {
-                mounted[i]=f;
+                mounted[i]=toFoc(f);
                 i++;
             }
         }
         return mounted;
     }
 
+    private static Foc toFoc(File file) {
+        return new FocFile(file);
+    }
 
-    private static File[] volumesFromFiles(File externalVolume, File[] files) {
+    private static Foc[] volumesFromFiles(File externalVolume, File[] files) {
         File[] volumes = new File[files.length];
 
         for (int i=0; i<volumes.length; i++) {
@@ -122,6 +127,14 @@ public class AndroidVolumes {
     }
 
 
+    private static Foc getParent(Foc file, int i) {
+        while (i > 0) {
+            i--;
+            if (file != null) file = file.parent();
+        }
+        return file;
+    }
+
     private static File getParent(File file, int i) {
         while (i > 0) {
             i--;
@@ -130,8 +143,7 @@ public class AndroidVolumes {
         return file;
     }
 
-
-    public void askForPermission(Activity c, File f) {
+    public void askForPermission(Activity c, Foc f) {
         AFile.logInfoAcess(c,f);
 
         if (Build.VERSION.SDK_INT >= 24) {
@@ -140,10 +152,10 @@ public class AndroidVolumes {
     }
 
 
-    private static String volumePathFromFile(File f) {
-        for (File v : volumes) {
-            final String sf = f.getAbsolutePath();
-            final String sv = v.getAbsolutePath();
+    private static String volumePathFromFile(Foc f) {
+        for (Foc v : volumes) {
+            final String sf = f.toString();
+            final String sv = v.toString();
 
             if (sf.startsWith(sv)) {
                 return sv;
@@ -154,7 +166,7 @@ public class AndroidVolumes {
 
 
     @TargetApi(24)
-    private void askForPermissionSDK24(Activity c, File f) {
+    private void askForPermissionSDK24(Activity c, Foc f) {
         Object s = c.getSystemService(Context.STORAGE_SERVICE);
 
         if (s != null && s instanceof StorageManager) {
@@ -185,11 +197,11 @@ public class AndroidVolumes {
     private static final String PROVIDER_PART =
             "content://com.android.externalstorage.documents/tree/";
 
-    public Uri toScopedContentUriHack(File file) {
+    public Uri toScopedContentUriHack(Foc file) {
         String volPart = volumePathFromFile(file);
 
         if (volPart != null) {
-            String docPart = file.getAbsolutePath().replace(volPart, "");
+            String docPart = file.toString().replace(volPart, "");
 
             if (docPart != null) {
                 String volName = new File(volPart).getName();
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
index 6eec814e..107809f4 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/AppDirectory.java
@@ -12,6 +12,8 @@ import java.util.Locale;
 
 import ch.bailu.aat.preferences.SolidDataDirectory;
 import ch.bailu.aat.preferences.SolidTileCacheDirectory;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
+import ch.bailu.simpleio.foc.Foc;
 
 public class AppDirectory  {
 
@@ -22,8 +24,8 @@ public class AppDirectory  {
     }*/
 
 
-    public static File getDataDirectory(Context c, String sub) {
-        final File p = new File(new SolidDataDirectory(c).getValueAsString(), sub);
+    public static Foc getDataDirectory(Context c, String sub) {
+        final Foc p = FocAndroid.factory(c, new SolidDataDirectory(c).getValueAsString()).child(sub);
         p.mkdirs();
         return p;
     }
@@ -36,8 +38,8 @@ public class AppDirectory  {
     
     public static final String DIR_LOG = "log/";
     public static final String FILE_LOG = "log.gpx";
-    public static File getLogFile(Context context) {
-        return new File(getDataDirectory(context, DIR_LOG), FILE_LOG);
+    public static Foc getLogFile(Context context) {
+        return getDataDirectory(context, DIR_LOG).child(FILE_LOG);
     }
     
     
@@ -58,18 +60,18 @@ public class AppDirectory  {
     public static final String DIR_CACHE = "cache/";
     public static final String FILE_CACHE_DB="summary.db";
     
-    public static File getCacheDb(File pendingDirectory) {
-        final File p = new File(pendingDirectory, DIR_CACHE);
+    public static Foc getCacheDb(Foc pendingDirectory) {
+        final Foc p = pendingDirectory.child(DIR_CACHE);
         p.mkdirs();
-        return new File(p, FILE_CACHE_DB);
+        return p.child(FILE_CACHE_DB);
     }
     
 
     public static final String DIR_EDIT = "overlay/draft";
     public static final String FILE_DRAFT= "draft.gpx";
 
-    public static File getEditorDraft(Context c) {
-        return new File(AppDirectory.getDataDirectory(c, DIR_EDIT), FILE_DRAFT);
+    public static Foc getEditorDraft(Context c) {
+        return getDataDirectory(c, DIR_EDIT).child(FILE_DRAFT);
     }
 
     //////////////////////////////////////////////////////////////////////////////////////
@@ -78,13 +80,13 @@ public class AppDirectory  {
 
     
     /////////////////////////////////////////////////////////////////////////////////////////////////
-    public static File getTileFile(String tilePath, Context context) {
-        return new File(getTileCacheDirectory(context),tilePath);
+    public static Foc getTileFile(String tilePath, Context context) {
+        return getTileCacheDirectory(context).child(tilePath);
     }
 
 
-    private static File getTileCacheDirectory(Context c) {
-        final File p = new SolidTileCacheDirectory(c).getValueAsFile();
+    private static Foc getTileCacheDirectory(Context c) {
+        final Foc p = new SolidTileCacheDirectory(c).getValueAsFile();
         p.mkdirs();
         return p;
     }
@@ -97,7 +99,7 @@ public class AppDirectory  {
     private static final String PRESET_PREFIX = "activity";
     private static final String PREVIEW_EXTENSION = ".preview";
 
-    static public File getTrackListDirectory(Context c, int i) {
+    static public Foc getTrackListDirectory(Context c, int i) {
         return getDataDirectory(c,getPresetPrefix(i));
     }
     static private String getPresetPrefix(int i) {
@@ -105,19 +107,18 @@ public class AppDirectory  {
     }
     
     
-    public static File getTrackListCacheDb(Context c, int i) {
-        return new File(getDataDirectory(c, getPresetPrefix(i)+ DIR_CACHE), FILE_CACHE_DB);
+    public static Foc getTrackListCacheDb(Context c, int i) {
+        return getDataDirectory(c, getPresetPrefix(i)+ DIR_CACHE).child(FILE_CACHE_DB);
     }
 
 
-    static public File getPreviewFile(File path)  {
+    static public Foc getPreviewFile(Foc path)  {
         String name = path.getName();
-        String directory = path.getParent();
+        Foc directory = path.parent();
 
-
-        File cdir = new File(directory, DIR_CACHE);
+        Foc cdir = directory.child(DIR_CACHE);
         cdir.mkdirs();
-        return new File(cdir, name+ PREVIEW_EXTENSION);
+        return cdir.child(name+ PREVIEW_EXTENSION);
     }
     
     
@@ -131,17 +132,17 @@ public class AppDirectory  {
     public static final String GPX_EXTENSION=".gpx";
     public static final String OSM_EXTENSION=".osm";
 
-    public static File generateUniqueFilePath(File directory, String prefix, String extension) 
+    public static Foc generateUniqueFilePath(Foc directory, String prefix, String extension)
             throws IOException {
-        File file;
+        Foc file;
 
         int x=0;
         do {
-            file = new File(directory, generateFileName(prefix, x, extension));
+            file = directory.child(generateFileName(prefix, x, extension));
             x++;
-        } while (file.exists() && x < 999);
+        } while (file.isReachable() && x < 999);
 
-        if (file.exists()) throw new IOException();
+        if (file.isReachable()) throw new IOException();
 
         return file;
     }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java
deleted file mode 100644
index 4581474f..00000000
--- a/app/src/main/java/ch/bailu/aat/util/fs/AssetAccess.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package ch.bailu.aat.util.fs;
-
-import android.content.res.AssetManager;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
-
-import ch.bailu.simpleio.io.Access;
-
-public class AssetAccess extends Access {
-
-    private final String asset;
-    private final AssetManager manager;
-
-
-    public AssetAccess(AssetManager m, String a) {
-        manager = m;
-        asset = a;
-    }
-
-    @Override
-    public InputStream open_r() throws IOException {
-        return manager.open(asset);
-    }
-
-    @Override
-    public OutputStream open_w() throws IOException {
-        throw new IOException();
-    }
-
-    @Override
-    public long lastModified() {
-        return System.currentTimeMillis();
-    }
-
-
-    public static ArrayList<String> listAssets(AssetManager am, String path) {
-        ArrayList<String> r = new ArrayList();
-
-        try {
-            String [] files = am.list(path);
-            for (String f: files) {
-                r.add(path+ "/" + f);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-
-        return r;
-    }
-
-}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java b/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
index 5e658009..73231bd9 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/FileAction.java
@@ -6,37 +6,37 @@ import android.content.Intent;
 import android.net.Uri;
 import android.widget.EditText;
 
-import java.io.File;
-
 import ch.bailu.aat.R;
-import ch.bailu.aat.util.ui.AppDialog;
-import ch.bailu.aat.util.ui.AppLog;
-import ch.bailu.aat.util.ui.AppSelectDirectoryDialog;
-import ch.bailu.aat.util.Clipboard;
 import ch.bailu.aat.preferences.SolidDirectoryQuery;
 import ch.bailu.aat.preferences.SolidMockLocationFile;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.util.Clipboard;
+import ch.bailu.aat.util.fs.foc.FocContent;
+import ch.bailu.aat.util.ui.AppDialog;
+import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.aat.util.ui.AppSelectDirectoryDialog;
 import ch.bailu.aat.views.preferences.AddOverlayDialog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class FileAction   {
 
-    public static void rescanDirectory(ServiceContext scontext, File file) {
+    public static void rescanDirectory(ServiceContext scontext, Foc file) {
         if (isParentActiveAndWriteable(scontext.getContext(), file)) {
             scontext.getDirectoryService().rescan();
         }
     }
 
 
-    public static void reloadPreview(ServiceContext scontext, File file) {
+    public static void reloadPreview(ServiceContext scontext, Foc file) {
         if (isParentActiveAndWriteable(scontext.getContext(), file)) {
             scontext.getDirectoryService().deleteEntry(file);
         }
     }
 
 
-    public static boolean isParentActiveAndWriteable(Context context, File file) {
-        final File currentDir = new SolidDirectoryQuery(context).getValueAsFile();
-        final File dir = file.getParentFile();
+    public static boolean isParentActiveAndWriteable(Context context, Foc file) {
+        final Foc currentDir = new SolidDirectoryQuery(context).getValueAsFile();
+        final Foc dir = file.parent();
 
         return dir.canWrite() && dir.equals(currentDir);
     }
@@ -44,13 +44,13 @@ public class FileAction   {
 
     public static void delete(final ServiceContext scontext,
                               final Activity activity,
-                              final File file) {
+                              final Foc file) {
 
         if (file.canWrite()) {
             new AppDialog() {
                 @Override
                 protected void onPositiveClick() {
-                    file.delete();
+                    file.rm();
                     rescanDirectory(scontext, file);
                 }
             }.displayYesNoDialog(activity,
@@ -66,8 +66,8 @@ public class FileAction   {
         copyToClipboard(uri.getLastPathSegment(), uri.toString(), context);
     }
 
-    public static void copyToClipboard(Context context, File file) {
-        copyToClipboard(file.getName(), file.getAbsolutePath(), context);
+    public static void copyToClipboard(Context context, Foc file) {
+        copyToClipboard(file.getName(), file.toString(), context);
 
     }
 
@@ -77,11 +77,11 @@ public class FileAction   {
 
     }
 
-    public static void useAsOverlay(Context context, File file) {
+    public static void useAsOverlay(Context context, Foc file) {
         new AddOverlayDialog(context, file);
     }
 
-    public static void  useForMockLocation(Context context, File file) {
+    public static void  useForMockLocation(Context context, Foc file) {
         if (file.canRead())
             new SolidMockLocationFile(context).setValue(file.toString());
         else
@@ -94,11 +94,11 @@ public class FileAction   {
     }
 
 
-    public static void view(Context context, File file) {
+    public static void view(Context context, Foc file) {
         FileIntent.view(context, new Intent(), file);
     }
     
-    public static void sendTo(Context context, File file) {
+    public static void sendTo(Context context, Foc file) {
         FileIntent.send(context, new Intent(), file);
     }
 
@@ -112,14 +112,14 @@ public class FileAction   {
         new AppSelectDirectoryDialog(context, uri);
     }
 
-    public static void copyTo(Context context, Uri uri, File targetDir) throws Exception {
-        final File target = new File(targetDir, uri.getLastPathSegment());
+    public static void copyTo(Context context, Uri uri, Foc targetDir) throws Exception {
+        final Foc target = targetDir.child(uri.getLastPathSegment());
 
-        if (target.exists()) {
+        if (target.isReachable()) {
             AFile.logErrorExists(context, target);
         } else {
-            new UriAccess(context, uri).copyTo(target);
-            AppLog.i(context, target.getAbsolutePath());
+            new FocContent(context.getContentResolver(), uri).cp(target);
+            AppLog.i(context, target.toString());
         }
     }
 
@@ -127,11 +127,11 @@ public class FileAction   {
 
 
 
-    public static void rename(final ServiceContext scontext, final Activity activity, final File file) {
+    public static void rename(final ServiceContext scontext, final Activity activity, final Foc file) {
         final Context context = scontext.getContext();
 
         if (file.canWrite()) {
-            final String directory=file.getParent();
+            final Foc directory=file.parent();
 
             final String title = context.getString(R.string.file_rename) + " " + file.getName();
             final EditText edit = new EditText(context);
@@ -141,14 +141,14 @@ public class FileAction   {
 
                 @Override
                 protected void onPositiveClick() {
-                    File source = new File (directory, file.getName());
-                    File target = new File (directory, edit.getText().toString());
+                    Foc source = directory.child(file.getName());
+                    Foc target = directory.child(edit.getText().toString());
 
-                    if (source.exists()) {
-                        if (target.exists()) {
+                    if (source.isReachable()) {
+                        if (target.isReachable()) {
                             AFile.logErrorExists(activity, target);
                         } else {
-                            source.renameTo(target);
+                            source.mv(target);
                             rescanDirectory(scontext, file);
                         }
                     }
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java b/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
index 3aec9456..aabb62bd 100644
--- a/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
+++ b/app/src/main/java/ch/bailu/aat/util/fs/FileIntent.java
@@ -6,6 +6,8 @@ import android.net.Uri;
 
 import java.io.File;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public class FileIntent {
 
 
@@ -22,13 +24,13 @@ public class FileIntent {
     }
 
 
-    public static void view(Context context, Intent intent, File file) {
+    public static void view(Context context, Intent intent, Foc file) {
         if (file.canRead()) {
             
             intent.setAction(Intent.ACTION_VIEW);
             
-            if (file.isDirectory()) {
-                intent.setData(toUri(file));
+            if (file.isDir() || file.toString().startsWith("content:/")) {
+                intent.setData(Uri.parse(file.toString()));
             } else {
                 intent.setData(toContentUri(file));
             }
@@ -49,12 +51,12 @@ public class FileIntent {
     }
     
     
-    public static Uri toContentUri(File file) {
-        return Uri.parse("content://ch.bailu.aat.gpx" + file.getAbsolutePath());
+    public static Uri toContentUri(Foc file) {
+        return Uri.parse("content://ch.bailu.aat.gpx" + file.toString());
     }
 
     
-   public static void send(Context context, Intent intent, File file) {
+   public static void send(Context context, Intent intent, Foc file) {
         /*
           This is the correct implementation for sending one file as an e-mail attachment.
           It does, however, not work with private files.
@@ -65,7 +67,7 @@ public class FileIntent {
         
         intent.setAction(Intent.ACTION_SEND);
         intent.putExtra(Intent.EXTRA_SUBJECT, file.getName());
-        intent.putExtra(Intent.EXTRA_TEXT, file.getAbsolutePath());
+        intent.putExtra(Intent.EXTRA_TEXT, file.toString());
         intent.putExtra(Intent.EXTRA_STREAM, uri);
         setType(intent, file); // only works with type setCopy (gmail and android mail)
         
@@ -89,7 +91,7 @@ public class FileIntent {
     }
 
 
-    private static void setType(Intent intent, File file) {
+    private static void setType(Intent intent, Foc file) {
         String type = mimeTypeFromFileName(file.getName());
         
         if (type != null) {
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java b/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java
deleted file mode 100644
index 38f7618e..00000000
--- a/app/src/main/java/ch/bailu/aat/util/fs/UriAccess.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package ch.bailu.aat.util.fs;
-
-import android.content.Context;
-import android.net.Uri;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-import ch.bailu.simpleio.io.Access;
-import ch.bailu.simpleio.io.FileAccess;
-
-public class UriAccess extends Access {
-    private final Uri uri;
-    private final Context context;
-
-    public UriAccess(Context c, Uri u) {
-        uri = u;
-        context = c;
-    }
-
-    public UriAccess(Context c, File f) {
-        this (c, Uri.fromFile(f));
-    }
-
-    public static Access factory(Context c, String id) {
-        if (id.length()>0 && id.charAt(0) == '/') {
-            return new FileAccess(new File(id));
-        } else {
-            return new UriAccess(c, Uri.parse(id));
-        }
-    }
-
-
-    /*
-    public static UriAccess toScopedUri(Context c, File f) {
-
-    }
-    */
-
-
-    @Override
-    public InputStream open_r() throws FileNotFoundException {
-        return context.getContentResolver().openInputStream(uri);
-
-    }
-
-    @Override
-    public OutputStream open_w() throws FileNotFoundException {
-        return context.getContentResolver().openOutputStream(uri);
-    }
-
-    @Override
-    public long lastModified() {
-        return System.currentTimeMillis();
-    }
-
-
-
-}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
new file mode 100644
index 00000000..9ad92cfa
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAndroid.java
@@ -0,0 +1,19 @@
+package ch.bailu.aat.util.fs.foc;
+
+import android.content.Context;
+import android.net.Uri;
+
+import java.io.File;
+
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
+
+public class FocAndroid {
+    public static Foc factory(Context c, String id) {
+        if (id.length()>0 && id.charAt(0) == '/') {
+            return new FocFile(new File(id));
+        } else {
+            return new FocContent(c.getContentResolver(), Uri.parse(id));
+        }
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java
new file mode 100644
index 00000000..8eef614d
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocAsset.java
@@ -0,0 +1,129 @@
+package ch.bailu.aat.util.fs.foc;
+
+import android.content.res.AssetManager;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+
+import ch.bailu.simpleio.foc.Foc;
+
+public class FocAsset extends Foc {
+
+    private final String asset;
+    private final AssetManager manager;
+
+
+    public FocAsset(AssetManager m, String a) {
+        manager = m;
+        asset = a;
+    }
+
+
+    @Override
+    public long lastModified() {
+        return System.currentTimeMillis();
+    }
+
+
+    public static ArrayList<String> listAssets(AssetManager am, String path) {
+        ArrayList<String> r = new ArrayList();
+
+        try {
+            String [] files = am.list(path);
+            for (String f: files) {
+                r.add(path+ "/" + f);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        return r;
+    }
+
+    @Override
+    public boolean rm() {
+        return false;
+    }
+
+    @Override
+    public boolean mkdir() {
+        return false;
+    }
+
+    @Override
+    public Foc parent() {
+        return null;
+    }
+
+    @Override
+    public boolean mv(Foc target) {
+        return false;
+    }
+
+    @Override
+    public Foc child(String name) {
+        return null;
+    }
+
+    @Override
+    public String getName() {
+        return asset;
+    }
+
+    @Override
+    public long length() {
+        return 0;
+    }
+
+    @Override
+    public void foreach(Execute e) {
+
+    }
+
+    @Override
+    public void foreachFile(Execute e) {
+
+    }
+
+    @Override
+    public void foreachDir(Execute e) {
+
+    }
+
+    @Override
+    public boolean isDir() {
+        return false;
+    }
+
+    @Override
+    public boolean isFile() {
+        return false;
+    }
+
+    @Override
+    public boolean isReachable() {
+        return false;
+    }
+
+    @Override
+    public boolean canRead() {
+        return false;
+    }
+
+    @Override
+    public boolean canWrite() {
+        return false;
+    }
+
+    @Override
+    public InputStream openR() throws IOException {
+        return manager.open(asset);
+    }
+
+    @Override
+    public OutputStream openW() throws IOException {
+        throw new IOException();
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
new file mode 100644
index 00000000..f9835e77
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/util/fs/foc/FocContent.java
@@ -0,0 +1,131 @@
+package ch.bailu.aat.util.fs.foc;
+
+import android.content.ContentResolver;
+import android.net.Uri;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URI;
+import java.net.URISyntaxException;
+
+import ch.bailu.simpleio.foc.Foc;
+
+public class FocContent extends Foc {
+    final Uri uri;
+    final ContentResolver resolver;
+
+    public FocContent(ContentResolver r, Uri u) {
+        uri = u;
+        resolver = r;
+    }
+
+
+    @Override
+    public boolean rm() {
+        return resolver.delete(uri,null,null) > 0;
+    }
+
+    @Override
+    public boolean mkdir() {
+        return false;
+    }
+
+    @Override
+    public Foc parent() {
+        URI parent;
+
+        try {
+            URI uri = new URI(this.uri.getPath());
+            if (uri.getPath().endsWith("/"))
+                parent = uri.resolve("..");
+            else {
+                parent = uri.resolve(".");
+            }
+
+            if (parent == null || uri.equals(parent)) {
+                return null;
+            } else {
+                return new FocContent(resolver, Uri.parse(parent.getPath()));
+            }
+        } catch (URISyntaxException e) {
+            return null;
+        }
+    }
+
+    @Override
+    public boolean mv(Foc target) {
+        return false;
+    }
+
+    @Override
+    public Foc child(String name) {
+        return null;
+    }
+
+    @Override
+    public String getName() {
+        return null;
+    }
+
+    @Override
+    public long length() {
+        return 0;
+    }
+
+
+    @Override
+    public void foreach(Execute e) {
+
+    }
+
+    @Override
+    public void foreachFile(Execute e) {
+
+    }
+
+    @Override
+    public void foreachDir(Execute e) {
+
+    }
+
+    @Override
+    public boolean isDir() {
+        return false;
+    }
+
+    @Override
+    public boolean isFile() {
+        return false;
+    }
+
+    @Override
+    public boolean isReachable() {
+        return false;
+    }
+
+    @Override
+    public boolean canRead() {
+        return false;
+    }
+
+    @Override
+    public boolean canWrite() {
+        return false;
+    }
+
+    @Override
+    public long lastModified() {
+        return 0;
+    }
+
+    @Override
+    public InputStream openR() throws IOException {
+        return resolver.openInputStream(uri);
+    }
+
+    @Override
+    public OutputStream openW() throws IOException {
+        return resolver.openOutputStream(uri);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/util/ui/AppSelectDirectoryDialog.java b/app/src/main/java/ch/bailu/aat/util/ui/AppSelectDirectoryDialog.java
index 4aa3795c..299cdff6 100644
--- a/app/src/main/java/ch/bailu/aat/util/ui/AppSelectDirectoryDialog.java
+++ b/app/src/main/java/ch/bailu/aat/util/ui/AppSelectDirectoryDialog.java
@@ -5,23 +5,21 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.net.Uri;
 
-import java.io.File;
-
 import ch.bailu.aat.R;
 import ch.bailu.aat.util.fs.AppDirectory;
 import ch.bailu.aat.util.fs.FileAction;
-import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 public class AppSelectDirectoryDialog  implements  DialogInterface.OnClickListener {
     private final Uri uri;
-    private final File directories[];
+    private final Foc directories[];
 
 
     private final Context context;
     public AppSelectDirectoryDialog (Context c, Uri u) {
         context=c;
         uri = u;
-        directories = new File[] {
+        directories = new Foc[] {
                 AppDirectory.getTrackListDirectory(context, 0),
                 AppDirectory.getTrackListDirectory(context, 1),
                 AppDirectory.getTrackListDirectory(context, 2),
diff --git a/app/src/main/java/ch/bailu/aat/views/FeaturesList.java b/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
index 1c8789d8..092152d7 100644
--- a/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
+++ b/app/src/main/java/ch/bailu/aat/views/FeaturesList.java
@@ -28,12 +28,13 @@ import ch.bailu.aat.osm_features.MapFeaturesParser.OnHaveFeature;
 import ch.bailu.aat.services.icons.IconMapService;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppHtml;
-import ch.bailu.aat.util.fs.AssetAccess;
+import ch.bailu.aat.util.fs.foc.FocAsset;
 import ch.bailu.aat.util.graphic.SyncTileBitmap;
 import ch.bailu.aat.util.ui.AppDensity;
 import ch.bailu.aat.util.ui.AppLog;
 import ch.bailu.aat.util.ui.AppTheme;
-import ch.bailu.simpleio.io.Access;
+import ch.bailu.simpleio.foc.Foc;
+
 
 public class FeaturesList extends ListView  {
 
@@ -86,14 +87,14 @@ public class FeaturesList extends ListView  {
 
 
         public void loadList(AssetManager assets) throws IOException {
-            ArrayList<String> files = AssetAccess.listAssets(assets, MAP_FEATURES_ASSET);
+            ArrayList<String> files = FocAsset.listAssets(assets, MAP_FEATURES_ASSET);
 
             Collections.sort(files);
             new MapFeaturesParser(assets, this, files);
         }
 
 
-        public void loadList(Access file) throws IOException {
+        public void loadList(Foc file) throws IOException {
             new MapFeaturesParser(this, file);
         }
 
@@ -166,7 +167,7 @@ public class FeaturesList extends ListView  {
 
 
 
-    public void loadList(Access file, IconMapService map) {
+    public void loadList(Foc file, IconMapService map) {
         try {
             new ListLoader(map).loadList(file);
             if (observer != null) observer.onChanged();
@@ -232,11 +233,11 @@ public class FeaturesList extends ListView  {
 //                                       long id) {
 //            ListData d = data.get(index);
 //
-//            if (d.name.length()>1) {
+//            if (d.getName.length()>1) {
 //
 //                String file;
 //                try {
-//                    file = MAP_FEATURES_ASSET+ "/"+d.name;
+//                    file = MAP_FEATURES_ASSET+ "/"+d.getName;
 //                    String content = new AssetAccess(file).contentToString();
 //                    ActivitySwitcher.firstPixelIndex(getContext(), HtmlViewActivity.class, content);
 //
diff --git a/app/src/main/java/ch/bailu/aat/views/PreviewView.java b/app/src/main/java/ch/bailu/aat/views/PreviewView.java
index b6ff1aa9..ca71faa5 100644
--- a/app/src/main/java/ch/bailu/aat/views/PreviewView.java
+++ b/app/src/main/java/ch/bailu/aat/views/PreviewView.java
@@ -13,6 +13,8 @@ import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.cache.ImageObject;
 import ch.bailu.aat.services.cache.ObjectHandle;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 
 public class PreviewView extends ImageView {
     private boolean isAttached=false;
@@ -20,7 +22,7 @@ public class PreviewView extends ImageView {
     private final ServiceContext scontext;
 
     private ImageObject imageHandle=ImageObject.NULL;
-    private File        imageToLoad=null;
+    private Foc        imageToLoad=null;
     
     public PreviewView(ServiceContext sc) {
         super(sc.getContext());
@@ -30,14 +32,14 @@ public class PreviewView extends ImageView {
     
     
     public void setFilePath(String fileID) {
-        final File file = AppDirectory.getPreviewFile(new File(fileID));
+        final Foc file = AppDirectory.getPreviewFile(new FocFile(new File(fileID)));
         setPreviewPath(file);
         loadAndDisplayImage();
     }
     
     
 
-    public void setPreviewPath(File file) {
+    public void setPreviewPath(Foc file) {
         imageToLoad = file;
         loadAndDisplayImage();
     }
@@ -59,9 +61,9 @@ public class PreviewView extends ImageView {
     }
 
 
-    private boolean loadImage(File f) {
+    private boolean loadImage(Foc f) {
         if (f.canRead()) {
-            final ObjectHandle  h=scontext.getCacheService().getObject(f.getAbsolutePath(), new ImageObject.Factory());
+            final ObjectHandle  h=scontext.getCacheService().getObject(f.toString(), new ImageObject.Factory());
 
             if (ImageObject.class.isInstance(h)) {
                 imageHandle = (ImageObject) h;
diff --git a/app/src/main/java/ch/bailu/aat/views/TagEditor.java b/app/src/main/java/ch/bailu/aat/views/TagEditor.java
index bd97b024..0ce0d12d 100644
--- a/app/src/main/java/ch/bailu/aat/views/TagEditor.java
+++ b/app/src/main/java/ch/bailu/aat/views/TagEditor.java
@@ -12,14 +12,16 @@ import java.io.IOException;
 import ch.bailu.aat.util.AppBroadcaster;
 import ch.bailu.aat.util.AppIntent;
 import ch.bailu.aat.util.TextBackup;
+import ch.bailu.aat.util.fs.foc.FocAndroid;
 import ch.bailu.aat.util.ui.AppLog;
+import ch.bailu.simpleio.foc.Foc;
 
 
 public class TagEditor extends EditText {
-    private File backup;
+    private Foc backup;
     
     
-    public TagEditor(Context context, String an)  {
+    public TagEditor(Context context, Foc an)  {
         super(context);
         
         createEditor();
@@ -30,8 +32,8 @@ public class TagEditor extends EditText {
                 AppBroadcaster.SELECT_MAP_FEATURE);
     }
 
-    private void createEditorBackup(String directory) {
-        backup = new File(directory,"edit.txt");
+    private void createEditorBackup(Foc directory) {
+        backup = directory.child("edit.txt");
         showFile();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/AddOverlayDialog.java b/app/src/main/java/ch/bailu/aat/views/preferences/AddOverlayDialog.java
index 6d785ce9..8eaeae27 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/AddOverlayDialog.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/AddOverlayDialog.java
@@ -7,14 +7,15 @@ import android.content.DialogInterface;
 import java.io.File;
 
 import ch.bailu.aat.preferences.SolidOverlayFileList;
+import ch.bailu.simpleio.foc.Foc;
 
 public class AddOverlayDialog extends AbsSolidDialog implements  DialogInterface.OnClickListener{
 
     private final SolidOverlayFileList slist;
-    private final File file;
+    private final Foc file;
 
 
-    public AddOverlayDialog (SolidOverlayFileList l, File f) {
+    public AddOverlayDialog (SolidOverlayFileList l, Foc f) {
         slist=l;
         file=f;
 
@@ -25,7 +26,7 @@ public class AddOverlayDialog extends AbsSolidDialog implements  DialogInterface
     }
 
 
-    public AddOverlayDialog(Context context, File f) {
+    public AddOverlayDialog(Context context, Foc f) {
         this(new SolidOverlayFileList(context), f);
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java b/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
index 4d17b025..9ebe8287 100644
--- a/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
+++ b/app/src/main/java/ch/bailu/aat/views/preferences/SolidEnableTileCacheView.java
@@ -27,8 +27,8 @@ public class SolidEnableTileCacheView extends LinearLayout {
         public SolidEmptyCacheButton(final SolidEnableTileCache s) {
             super(s.getContext(), R.drawable.user_trash_inverse);
 
-            final String name = s.getKey();
-            final File file = getCacheDirectory(name);
+            final String getName = s.getKey();
+            final File file = getCacheDirectory(getName);
 
             setOnClickListener(new OnClickListener() {
                 @Override
@@ -51,10 +51,10 @@ public class SolidEnableTileCacheView extends LinearLayout {
 
 
 
-        public File getCacheDirectory(String name) {
+        public File getCacheDirectory(String getName) {
             return new File(
                     new SolidTileCacheDirectory(getContext()).getValueAsFile(),
-                    name);
+                    getName);
         }
 
         public void deleteRecursive(File fileOrDirectory) {
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
new file mode 100644
index 00000000..0aac8a6c
--- /dev/null
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/Foc.java
@@ -0,0 +1,142 @@
+package ch.bailu.simpleio.foc;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public abstract class Foc {
+
+    public abstract boolean rm();
+    public boolean rmdir() {
+        return isDir() && rm();
+    }
+
+    public boolean rmdirs() {
+        foreachDir(new Execute() {
+            @Override
+            public void execute(Foc child) {
+                child.rmdirs();
+            }
+        });
+        return rmdir();
+    }
+
+    public boolean rmRecoursive() {
+        foreach(new Execute() {
+            @Override
+            public void execute(Foc child) {
+                rmRecoursive();
+            }
+        });
+        return rm();
+    }
+
+
+    public abstract boolean mkdir();
+    public boolean mkdirs() {
+        if (isReachable() == false) {
+            Foc parent = parent();
+            if (parent != null && parent.mkdirs())
+                return mkdir();
+        }
+
+        return isDir();
+    }
+
+    public boolean mkParents() {
+        Foc parent = parent();
+        return parent != null && parent.mkdirs();
+    }
+
+    public abstract Foc parent();
+
+    public abstract boolean mv(Foc target);
+
+    public boolean cp(Foc copy) {
+        try {
+            copy(copy);
+        } catch (Exception e) {
+            return false;
+        }
+        return true;
+    }
+
+
+    public void copy(Foc copy) throws Exception {
+        OutputStream out = null;
+
+        try {
+            out = copy.openW();
+            copy(out);
+
+        } finally {
+            if (out != null) out.close();
+        }
+    }
+
+    private void copy(OutputStream out) throws Exception {
+        InputStream in = null;
+
+        try {
+            in = openR();
+            copy(in, out);
+
+        } finally {
+            if (in != null) in.close();
+        }
+    }
+
+
+    private static void copy(InputStream in, OutputStream out) throws IOException {
+        byte[] buffer = new byte[4096];
+        int count;
+        while ((count = in.read(buffer)) > 0) {
+            out.write(buffer,0,count);
+        }
+    }
+
+    public abstract Foc child(String name);
+
+    public abstract String getName();
+
+    public boolean canOnlyRead() {
+        return canRead() && ! canWrite();
+    }
+
+    public abstract long length();
+
+
+
+    public abstract static class Execute {
+        public abstract void execute(Foc child);
+    }
+
+    public abstract void foreach(Execute e);
+    public abstract void foreachFile(Execute e);
+    public abstract void foreachDir(Execute e);
+
+
+    public abstract boolean isDir();
+    public abstract boolean isFile();
+    public abstract boolean isReachable();
+
+    public abstract boolean canRead();
+    public abstract boolean canWrite();
+
+    public abstract long lastModified();
+
+    public abstract InputStream openR() throws IOException;
+    public abstract OutputStream openW() throws IOException;
+
+
+    public static void close(Closeable toClose) {
+        try {
+            if (toClose != null)
+                toClose.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
new file mode 100644
index 00000000..b8efa543
--- /dev/null
+++ b/simpleio/src/main/java/ch/bailu/simpleio/foc/FocFile.java
@@ -0,0 +1,157 @@
+package ch.bailu.simpleio.foc;
+
+import java.io.File;
+import java.io.FileFilter;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public class FocFile extends Foc {
+
+    final protected File file;
+
+
+    public FocFile(String f) {
+        file = new File(f);
+    }
+
+    public FocFile(File f) {
+        file = f;
+    }
+
+
+    @Override
+    public boolean rm() {
+        return file.delete();
+    }
+
+
+    @Override
+    public boolean mkdirs() {
+        return file.mkdirs();
+    }
+
+    @Override
+    public boolean mkdir() {
+        return file.mkdir();
+    }
+
+    @Override
+    public Foc parent() {
+        File p = file.getParentFile();
+
+        if (p != null) return new FocFile(p);
+        return null;
+    }
+
+    @Override
+    public boolean mv(Foc target) {
+        if (target instanceof FocFile) {
+            FocFile targetFile = (FocFile) target;
+
+            return file.renameTo(targetFile.file);
+        }
+        return false;
+    }
+
+    @Override
+    public Foc child(String name) {
+        return new FocFile(new File(file, name));
+    }
+
+    @Override
+    public String getName() {
+        return file.getName();
+    }
+
+    @Override
+    public long length() {
+        return file.length();
+    }
+
+
+    @Override
+    public String toString() {
+        return file.getAbsolutePath();
+    }
+
+
+    @Override
+    public void foreach(final Execute e) {
+        file.listFiles(new FileFilter() {
+            @Override
+            public boolean accept(File file) {
+                e.execute(new FocFile(file));
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public void foreachFile(final Execute e) {
+        file.listFiles(new FileFilter() {
+            @Override
+            public boolean accept(File file) {
+                if (file.isFile())
+                    e.execute(new FocFile(file));
+                return false;
+            }
+        });
+    }
+
+
+    @Override
+    public void foreachDir(final Execute e) {
+        file.listFiles(new FileFilter() {
+            @Override
+            public boolean accept(File file) {
+                if (file.isDirectory())
+                    e.execute(new FocFile(file));
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public boolean isDir() {
+        return file.isDirectory();
+    }
+
+    @Override
+    public boolean isFile() {
+        return file.isFile();
+    }
+
+    @Override
+    public boolean isReachable() {
+        return file.exists();
+    }
+
+    @Override
+    public boolean canRead() {
+        return file.canRead();
+    }
+
+    @Override
+    public boolean canWrite() {
+        return file.canWrite();
+    }
+
+    @Override
+    public long lastModified() {
+        return file.lastModified();
+    }
+
+
+    @Override
+    public InputStream openR() throws IOException {
+        return new FileInputStream(file);
+    }
+
+    @Override
+    public OutputStream openW() throws IOException {
+        return new FileOutputStream(file);
+    }
+}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/io/Access.java b/simpleio/src/main/java/ch/bailu/simpleio/io/Access.java
deleted file mode 100644
index 2e569b29..00000000
--- a/simpleio/src/main/java/ch/bailu/simpleio/io/Access.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package ch.bailu.simpleio.io;
-
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-public abstract class Access {
-    public abstract InputStream open_r() throws IOException;
-    public abstract OutputStream open_w() throws IOException;
-
-    public String contentToString() throws IOException {
-        BufferedInputStream in = new BufferedInputStream(open_r());
-        StringBuilder out = new StringBuilder();
-
-
-        try {
-            int c;
-            while ((c = in.read()) > -1) {
-                out.append((char)c);
-            }
-
-        } finally {
-            in.close();
-
-        }
-        return out.toString();
-    }
-
-
-
-
-    public void copyTo(File fout) throws Exception {
-        OutputStream out = null;
-
-        try {
-            out = new FileOutputStream(fout);
-            copyTo(out);
-
-        } finally {
-            if (out != null) out.close();
-        }
-    }
-
-    public void copyTo(OutputStream out) throws Exception {
-        InputStream in = null;
-
-        try {
-            in = open_r();
-            copy(in, out);
-
-        } finally {
-            if (in != null) in.close();
-        }
-    }
-
-
-    public static void copy(InputStream in, OutputStream out) throws IOException {
-        byte[] buffer = new byte[4096];
-        int count;
-        while ((count = in.read(buffer)) > 0) {
-            out.write(buffer,0,count);
-        }
-    }
-
-
-    public abstract long lastModified();
-}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/io/FileAccess.java b/simpleio/src/main/java/ch/bailu/simpleio/io/FileAccess.java
deleted file mode 100644
index e845d0fe..00000000
--- a/simpleio/src/main/java/ch/bailu/simpleio/io/FileAccess.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package ch.bailu.simpleio.io;
-
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-
-public class FileAccess extends Access {
-    private final File file;
-
-
-    public FileAccess(File f) {
-        file = f;
-    }
-
-
-
-    @Override
-    public InputStream open_r() throws FileNotFoundException {
-        return new FileInputStream(file);
-
-    }
-
-    @Override
-    public OutputStream open_w() throws IOException {
-        return openOutput(file);
-    }
-
-
-    @Override
-    public long lastModified() {
-        return file.lastModified();
-    }
-
-
-    public static OutputStream openOutput(File file) throws IOException {
-        new File(file.getParent()).mkdirs();
-        return new FileOutputStream(file);
-    }
-
-
-    public static void close(Closeable c) {
-        if (c != null) {
-            try {
-                c.close();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-}
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java b/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
index be0997ea..a2f64311 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/io/Stream.java
@@ -8,6 +8,8 @@ import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
 
+import ch.bailu.simpleio.foc.Foc;
+
 public class Stream implements Closeable {
     private final static String CHARSET="UTF-8";
     private final static int BUFFER_BYTES=1024*10;
@@ -16,10 +18,10 @@ public class Stream implements Closeable {
     private final Reader reader;
     private int c=0;
 
-    public Stream(Access file) throws IOException {
+    public Stream(Foc foc) throws IOException {
 
 
-        InputStream istream = file.open_r();
+        InputStream istream = foc.openR();
         Reader ireader = new InputStreamReader(istream, CHARSET);
         reader = new BufferedReader(ireader, BUFFER_BYTES);
     }
diff --git a/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java b/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
index 0b778f33..bfeedbc9 100644
--- a/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
+++ b/simpleio/src/main/java/ch/bailu/simpleio/parser/MapFeaturesPreparser.java
@@ -1,12 +1,11 @@
 package ch.bailu.simpleio.parser;
 
 import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
-import java.io.Writer;
+import java.io.OutputStreamWriter;
 
-import ch.bailu.simpleio.io.FileAccess;
+import ch.bailu.simpleio.foc.Foc;
+import ch.bailu.simpleio.foc.FocFile;
 import ch.bailu.simpleio.io.Stream;
 
 public class MapFeaturesPreparser {
@@ -30,16 +29,16 @@ public class MapFeaturesPreparser {
 
 
 
-    private final File outDir, imageDir;
+    private final Foc outDir, imageDir;
 
     public static void main(String [] args) {
         if (args.length > 2) {
 
             try {
                 new MapFeaturesPreparser(
-                        new File (args[0]),
-                        new File (args[1]),
-                        new File (args[2]));
+                        new FocFile(args[0]),
+                        new FocFile (args[1]),
+                        new FocFile (args[2]));
             } catch (IOException e) {
                 e.printStackTrace();
             }
@@ -49,8 +48,8 @@ public class MapFeaturesPreparser {
 
     }
 
-    public MapFeaturesPreparser(File in, File outDir, File imageDir) throws IOException {
-        this.in = new Stream(new FileAccess(in));
+    public MapFeaturesPreparser(Foc in, Foc outDir, Foc imageDir) throws IOException {
+        this.in = new Stream(in);
         this.outDir = outDir;
         this.imageDir = imageDir;
         parseMapFeatures();
@@ -61,15 +60,11 @@ public class MapFeaturesPreparser {
 
 
     private void openOut(String name) throws SecurityException, IOException {
-        File file = new File(
-                outDir,
-                name
-        );
+        Foc file = outDir.child(name);
 
         closeOut();
 
-        Writer ostream = new FileWriter(file);
-        out = new BufferedWriter(ostream);
+        out = new BufferedWriter(new OutputStreamWriter(file.openW()));
     }
 
 
