diff --git a/app/src/main/java/ch/bailu/aat/activities/AboutActivity.java b/app/src/main/java/ch/bailu/aat/activities/AboutActivity.java
index fe78c3de..122397b9 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AboutActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AboutActivity.java
@@ -25,7 +25,7 @@ public class AboutActivity extends AbsHtmlViewActivity {
 
 
     @Override
-    public void onResumeWithService() {
+    public void onResumeWithServices() {
     }
     
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java b/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
index 533674fc..2250e0ca 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsDispatcher.java
@@ -28,7 +28,7 @@ public abstract class AbsDispatcher extends AbsMenu {
 
 
     @Override
-    public void onResumeWithService() {
+    public void onResumeWithServices() {
         dispatcher.onResume();
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
index c9e85697..de18ff54 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsFileContentActivity.java
@@ -180,8 +180,8 @@ public class AbsFileContentActivity extends AbsDispatcher implements OnClickList
 
 
     @Override
-    public void onResumeWithService() {
-        super.onResumeWithService();
+    public void onResumeWithServices() {
+        super.onResumeWithServices();
         
         if (firstRun) {
             frameCurrentFile();
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
index f8509c41..f2a8fc3a 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsGpxListActivity.java
@@ -182,12 +182,12 @@ public abstract class AbsGpxListActivity extends AbsDispatcher implements OnItem
 
 
     @Override
-    public void onResumeWithService() {
+    public void onResumeWithServices() {
         iteratorSimple = new IteratorSimple(getServiceContext());
         listView.setAdapter(getServiceContext(), iteratorSimple);
         listView.setSelection(sdirectory.getPosition().getValue());
 
-        super.onResumeWithService();
+        super.onResumeWithServices();
     }
 
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsMenu.java b/app/src/main/java/ch/bailu/aat/activities/AbsMenu.java
index 0fc858b8..a586196c 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsMenu.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsMenu.java
@@ -64,7 +64,7 @@ implements DescriptionInterface{
 
 
 
-    private void updateMenuText(State state) {
+    private void updateMenuText(StateMachine state) {
 
 
         start.setTitle(state.getStartStopTextID());
diff --git a/app/src/main/java/ch/bailu/aat/activities/AbsServiceLink.java b/app/src/main/java/ch/bailu/aat/activities/AbsServiceLink.java
index 8e47c296..4bfe7683 100644
--- a/app/src/main/java/ch/bailu/aat/activities/AbsServiceLink.java
+++ b/app/src/main/java/ch/bailu/aat/activities/AbsServiceLink.java
@@ -23,7 +23,7 @@ public abstract class AbsServiceLink extends AbsActivity {
             @Override
             public void onServicesUp() {
                 AbsServiceLink.this.onServicesUp(firstRun);
-                onResumeWithService();
+                onResumeWithServices();
                 firstRun=false;
             }
             
@@ -39,7 +39,7 @@ public abstract class AbsServiceLink extends AbsActivity {
         serviceLink.up();
         
         if (serviceLink.areAllServicesUp()) 
-            onResumeWithService();
+            onResumeWithServices();
     }
 
     
@@ -54,7 +54,7 @@ public abstract class AbsServiceLink extends AbsActivity {
     }
     
     
-    public void onResumeWithService() {}
+    public void onResumeWithServices() {}
     public void onPauseWithService() {}
     public void onServicesUp(boolean firstRun) {}
 
diff --git a/app/src/main/java/ch/bailu/aat/activities/HtmlViewActivity.java b/app/src/main/java/ch/bailu/aat/activities/HtmlViewActivity.java
index 89be1fe6..667484ae 100644
--- a/app/src/main/java/ch/bailu/aat/activities/HtmlViewActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/HtmlViewActivity.java
@@ -26,5 +26,5 @@ public class HtmlViewActivity extends AbsHtmlViewActivity {
 
 
     @Override
-    public void onResumeWithService() {}
+    public void onResumeWithServices() {}
 }
diff --git a/app/src/main/java/ch/bailu/aat/activities/ReadmeActivity.java b/app/src/main/java/ch/bailu/aat/activities/ReadmeActivity.java
index cf9b763c..595cdd40 100644
--- a/app/src/main/java/ch/bailu/aat/activities/ReadmeActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/ReadmeActivity.java
@@ -25,7 +25,7 @@ public class ReadmeActivity extends AbsHtmlViewActivity {
 
 
     @Override
-    public void onResumeWithService() {
+    public void onResumeWithServices() {
         // TODO Auto-generated method stub
         
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/StatusActivity.java b/app/src/main/java/ch/bailu/aat/activities/StatusActivity.java
index 50552f8e..9ea03c40 100644
--- a/app/src/main/java/ch/bailu/aat/activities/StatusActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/StatusActivity.java
@@ -31,7 +31,7 @@ public class StatusActivity extends AbsHtmlViewActivity {
 
 
     @Override
-    public void onResumeWithService() {
+    public void onResumeWithServices() {
         // TODO Auto-generated method stub
         
     }
diff --git a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
index 90045460..5cd976f2 100644
--- a/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
+++ b/app/src/main/java/ch/bailu/aat/activities/TestActivity.java
@@ -1,8 +1,6 @@
 package ch.bailu.aat.activities;
 
 
-import java.util.ArrayList;
-
 import android.content.Context;
 import android.database.DataSetObserver;
 import android.os.Bundle;
@@ -16,7 +14,7 @@ import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
-import org.w3c.dom.NodeList;
+import java.util.ArrayList;
 
 import ch.bailu.aat.R;
 import ch.bailu.aat.description.AccelerationDescription;
@@ -45,13 +43,11 @@ import ch.bailu.aat.description.TrackerStateDescription;
 import ch.bailu.aat.dispatcher.ContentDispatcher;
 import ch.bailu.aat.dispatcher.ContentSource;
 import ch.bailu.aat.dispatcher.CurrentLocationSource;
-import ch.bailu.aat.dispatcher.EditorSource;
 import ch.bailu.aat.dispatcher.OverlaySource;
 import ch.bailu.aat.dispatcher.TrackerSource;
 import ch.bailu.aat.gpx.GpxInformation;
 import ch.bailu.aat.helpers.AppLog;
 import ch.bailu.aat.helpers.AppTheme;
-import ch.bailu.aat.services.editor.EditorHelper;
 import ch.bailu.aat.test.PreferencesFromSdcard;
 import ch.bailu.aat.test.PreferencesToSdcard;
 import ch.bailu.aat.test.TestCoordinates;
@@ -63,7 +59,6 @@ import ch.bailu.aat.views.ContentView;
 import ch.bailu.aat.views.ControlBar;
 import ch.bailu.aat.views.MainControlBar;
 import ch.bailu.aat.views.MultiView;
-import ch.bailu.aat.views.NodeListView;
 import ch.bailu.aat.views.SummaryListView;
 import ch.bailu.aat.views.TrackDescriptionView;
 import ch.bailu.aat.views.ViewWrapper;
@@ -79,24 +74,23 @@ import ch.bailu.aat.views.map.overlay.gpx.GpxDynOverlay;
 import ch.bailu.aat.views.map.overlay.gpx.GpxOverlayListOverlay;
 import ch.bailu.aat.views.map.overlay.gpx.GpxTestOverlay;
 import ch.bailu.aat.views.map.overlay.grid.GridDynOverlay;
+import ch.bailu.aat.views.tileremover.TileRemoverContentView;
 
 public class TestActivity extends AbsDispatcher implements OnClickListener {
-    private static final String SOLID_KEY="test";
-
-    private ImageButton          multiCycleP, multiCycleN;
-    private MultiView            multiView;
+    private static final String SOLID_KEY = "test";
 
-    private OsmInteractiveView   map;
+    private ImageButton multiCycleP, multiCycleN;
+    private MultiView multiView;
 
+    private OsmInteractiveView map;
+    private TileRemoverContentView tileRemover;
 
-    private EditorHelper edit;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        edit = new EditorHelper(getServiceContext());
-        final LinearLayout  contentView = new ContentView(this);
+        final LinearLayout contentView = new ContentView(this);
 
         contentView.addView(createButtonBar());
         multiView = createMultiView();
@@ -104,10 +98,9 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
 
 
         setContentView(contentView);
-        
+
         createDispatcher();
-        
-        
+
     }
 
 
@@ -117,15 +110,11 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
     }
 
 
-
-
     private MultiView createMultiView() {
-        final NodeListView wayList = new NodeListView(getServiceContext(), SOLID_KEY, GpxInformation.ID.INFO_ID_OVERLAY);
-
-        map=new OsmInteractiveView(getServiceContext(), SOLID_KEY);
+        map = new OsmInteractiveView(getServiceContext(), SOLID_KEY);
         ViewWrapper list = new ViewWrapper(new TestList(this));
 
-        ContentDescription gpsData[] = new ContentDescription[] {
+        ContentDescription gpsData[] = new ContentDescription[]{
                 new NameDescription(this),
                 new GpsStateDescription(this),
                 new AltitudeDescription(this),
@@ -137,9 +126,9 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
                 new CurrentSpeedDescription(this),
                 new AccelerationDescription(this),
                 new BearingDescription(this),
-        };   
+        };
 
-        ContentDescription trackData[] = new ContentDescription[] {
+        ContentDescription trackData[] = new ContentDescription[]{
                 new NameDescription(this),
                 new PathDescription(this),
                 new TrackerStateDescription(this),
@@ -160,23 +149,21 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
         final TrackDescriptionView trackSummary = new SummaryListView(
                 this, SOLID_KEY, GpxInformation.ID.INFO_ID_TRACKER, trackData);
 
+        tileRemover = new TileRemoverContentView(getServiceContext());
+
         TrackDescriptionView viewData[] = {
                 map,
                 gpsSummary,
                 trackSummary,
                 list,
-                wayList,
-        };   
+                new ViewWrapper(tileRemover)
+        };
 
 
         return new MultiView(this, SOLID_KEY, GpxInformation.ID.INFO_ID_ALL, viewData);
     }
 
 
-
-
-
-
     private ControlBar createButtonBar() {
         final ControlBar bar = new MainControlBar(getServiceContext());
 
@@ -190,7 +177,7 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
 
     @Override
     public void onClick(View v) {
-        if (v ==multiCycleN) {
+        if (v == multiCycleN) {
             multiView.setNext();
         } else if (v == multiCycleP) {
             multiView.setPrevious();
@@ -198,12 +185,10 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
     }
 
 
-
-    
     private void createDispatcher() {
         OsmOverlay overlayList[] = {
-                new GpxOverlayListOverlay(map,getServiceContext()),
-                new GpxDynOverlay(map, getServiceContext(), GpxInformation.ID.INFO_ID_TRACKER), 
+                new GpxOverlayListOverlay(map, getServiceContext()),
+                new GpxDynOverlay(map, getServiceContext(), GpxInformation.ID.INFO_ID_TRACKER),
                 new GpxTestOverlay(map, GpxInformation.ID.INFO_ID_OVERLAY),
                 new GridDynOverlay(map, getServiceContext()),
                 new CurrentLocationOverlay(map),
@@ -216,26 +201,32 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
         map.setOverlayList(overlayList);
 
 
-        DescriptionInterface[] target = new DescriptionInterface[] {
-                multiView,this
+        DescriptionInterface[] target = new DescriptionInterface[]{
+                multiView, this
         };
 
-        ContentSource[] source = new ContentSource[] {
-                new EditorSource(getServiceContext(), edit),
+        ContentSource[] source = new ContentSource[]{
                 new TrackerSource(getServiceContext()),
                 new CurrentLocationSource(getServiceContext()),
                 new OverlaySource(getServiceContext()),
         };
-        setDispatcher(new ContentDispatcher(this,source, target));
+        setDispatcher(new ContentDispatcher(this, source, target));
     }
 
+    @Override
+    public void onStart() {
+        super.onStart();
+    }
 
+    @Override
+    public void onStop() {
+        super.onStop();
+    }
 
 
-
-    private class TestList extends ListView 
-    implements ListAdapter, android.widget.AdapterView.OnItemClickListener {
-        private final ArrayList<UnitTest>  tests = new ArrayList<>();
+    private class TestList extends ListView
+            implements ListAdapter, AdapterView.OnItemClickListener {
+        private final ArrayList<UnitTest> tests = new ArrayList<>();
 
         public TestList(Context context) {
             super(context);
@@ -304,10 +295,12 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
         }
 
         @Override
-        public void registerDataSetObserver(DataSetObserver observer) {}
+        public void registerDataSetObserver(DataSetObserver observer) {
+        }
 
         @Override
-        public void unregisterDataSetObserver(DataSetObserver observer) {}
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+        }
 
         @Override
         public boolean areAllItemsEnabled() {
@@ -321,7 +314,7 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
 
         @Override
         public void onItemClick(AdapterView<?> arg0, View v, int i,
-                long arg3) {
+                                long arg3) {
             if (i < tests.size()) {
                 try {
                     tests.get(i).test();
@@ -335,8 +328,11 @@ public class TestActivity extends AbsDispatcher implements OnClickListener {
         }
 
     }
-    
+
     @Override
-    public void onServicesUp(boolean firstRun) {}
+    public void onResumeWithServices() {
+        super.onResumeWithServices();
+        tileRemover.updateInfo();
+    }
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/description/GpsStateDescription.java b/app/src/main/java/ch/bailu/aat/description/GpsStateDescription.java
index b911a966..e18cba9f 100644
--- a/app/src/main/java/ch/bailu/aat/description/GpsStateDescription.java
+++ b/app/src/main/java/ch/bailu/aat/description/GpsStateDescription.java
@@ -21,6 +21,6 @@ public class GpsStateDescription extends StateDescription {
     
     @Override
     public String getUnit() {
-        return slock.getString();
+        return slock.getValueAsString();
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/helpers/AppBroadcaster.java b/app/src/main/java/ch/bailu/aat/helpers/AppBroadcaster.java
index d8e401da..0949c231 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/AppBroadcaster.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/AppBroadcaster.java
@@ -9,6 +9,9 @@ public class AppBroadcaster {
     public static final String NAME_SPACE="ch.bailu.aat.";
 
 
+    public static final String TILE_REMOVER_SCAN = NAME_SPACE+"TR_SCAN";
+    public static final String TILE_REMOVER_STOPPED = NAME_SPACE+"TR_STOPED";
+    public static final String TILE_REMOVER_REMOVE = NAME_SPACE +"TR_REMOVE";
 
     public static final String DBSYNC_START=NAME_SPACE+"SYNC_START";
     public static final String DBSYNC_DONE=NAME_SPACE+"SYNC_DONE";
@@ -24,7 +27,7 @@ public class AppBroadcaster {
     
 
     /**
-     *   Make a request to the elevation updater to add missing elevation information
+     *   Make a Request to the elevation updater to add missing elevation information
      *   to a specific file
      */
     public static final String REQUEST_ELEVATION_UPDATE = NAME_SPACE + "REQUEST_ELEVATION_UPDATE";
@@ -45,9 +48,6 @@ public class AppBroadcaster {
     
     
     public static final String SELECT_MAP_FEATURE = NAME_SPACE + "SELECT_MAP_FEATURE";
-    
-
-
 
 
 
@@ -88,9 +88,6 @@ public class AppBroadcaster {
         
         context.sendBroadcast(intent);
     }
-    
- 
 
 
-    
 }
diff --git a/app/src/main/java/ch/bailu/aat/helpers/AppDirectory.java b/app/src/main/java/ch/bailu/aat/helpers/AppDirectory.java
index 659030cf..630fa74c 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/AppDirectory.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/AppDirectory.java
@@ -23,7 +23,7 @@ public class AppDirectory  {
     }
 
     public static File getDataDirectory(Context c, String sub) {
-        final File p = new File(new SolidDataDirectory(c).getString(), sub);
+        final File p = new File(new SolidDataDirectory(c).getValueAsString(), sub);
         p.mkdirs();
         return p;
     }
diff --git a/app/src/main/java/ch/bailu/aat/helpers/AppIntent.java b/app/src/main/java/ch/bailu/aat/helpers/AppIntent.java
index 59a7287d..24349d11 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/AppIntent.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/AppIntent.java
@@ -56,6 +56,4 @@ public class AppIntent {
                 );
     }
 
-
-
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/IndexListPreference.java b/app/src/main/java/ch/bailu/aat/preferences/IndexListPreference.java
index 95044bbc..49e08cb2 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/IndexListPreference.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/IndexListPreference.java
@@ -17,7 +17,7 @@ public class IndexListPreference extends Preference implements OnPreferenceClick
 
         slist=l;
         setTitle(slist.getLabel());
-        setSummary(slist.getString());
+        setSummary(slist.getValueAsString());
 
         setOnPreferenceClickListener(this);
         slist.getStorage().register(this);
@@ -27,9 +27,7 @@ public class IndexListPreference extends Preference implements OnPreferenceClick
     @Override
     public boolean onPreferenceClick(Preference preference) {
         if (slist.length()<3) {
-            if (slist.getIndex()==0)
-                slist.setIndex(1);
-            else slist.setIndex(0);
+            slist.cycle();
         } else {
             new IndexListDialog(getContext(), slist);
         }
@@ -41,7 +39,7 @@ public class IndexListPreference extends Preference implements OnPreferenceClick
     public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,
             String key) {
         if (slist.hasKey(key)) {
-            setSummary(slist.getString());
+            setSummary(slist.getValueAsString());
         }
     }
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidAccuracyFilter.java b/app/src/main/java/ch/bailu/aat/preferences/SolidAccuracyFilter.java
index 62a1cff4..53d9e85e 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidAccuracyFilter.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidAccuracyFilter.java
@@ -47,25 +47,14 @@ public class SolidAccuracyFilter extends SolidIndexList {
         return VALUE_LIST.length;
     }
 
-    private String getString(int i) {
+    @Override
+    public String getValueAsString(int i) {
         if (i==0) return getContext().getString(R.string.off);
         return String.format((Locale)null,"%.3f%s", VALUE_LIST[i] * sunit.getAltitudeFactor(), sunit.getAltitudeUnit());
     }
     
-    @Override
-    public String getString() {
-        return getString(getIndex());
-    }
 
-    @Override
-    public String[] getStringArray() {
-        String[] list = new String[length()];
-        for (int i=0; i<length(); i++){
-            list[i]=getString(i);
-        }
-        
-        return list;
-    }
+
 
     
 
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidAutopause.java b/app/src/main/java/ch/bailu/aat/preferences/SolidAutopause.java
index 23594c2c..62d2e19d 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidAutopause.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidAutopause.java
@@ -59,24 +59,10 @@ public class SolidAutopause extends SolidIndexList {
     }
 
     
-    private String getString(int i) {
+    public String getValueAsString(int i) {
         if (i==0) return getContext().getString(R.string.off);
         
         return String.format((Locale)null,"%.3f%s - %d", SPEED_VALUES[i] * sunit.getSpeedFactor(), sunit.getSpeedUnit(), TRIGGER_VALUES[i]);
     }
     
-    @Override
-    public String getString() {
-        return getString(getIndex());
-    }
-
-    @Override
-    public String[] getStringArray() {
-        String[] list = new String[length()];
-        for (int i=0; i<length(); i++){
-            list[i]=getString(i);
-        }
-        
-        return list;
-    }
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidDirectoryList.java b/app/src/main/java/ch/bailu/aat/preferences/SolidDirectoryList.java
index 4800a367..adf59f93 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidDirectoryList.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidDirectoryList.java
@@ -27,36 +27,22 @@ public abstract class SolidDirectoryList extends SolidIndexList {
     }
 
     @Override
-    public String getString() {
-        final int index = Math.min(list.size()-1, getIndex());
-        return list.get(index);
+    public String getValueAsString(int i) {
+        return list.get(i);
     }
     
     
     @Override
     public String toString() {
-        return getString();
+        return getValueAsString();
     }
 
     public File toFile() {
-        return new File(getString());
+        return new File(getValueAsString());
     }
     
 
-    @Override
-    public String[] getStringArray() {
-        return toStringArray(list);
-    }
-
-    private static String[] toStringArray(ArrayList<String> l) {
-        String[] r = new String[l.size()];
-        for (int i = 0; i<l.size(); i++)
-            r[i]=l.get(i);
 
-        return r;
-    }
-
-    
     public static void fillDirectoryList(ArrayList<String> list, String[] pf) {
         for (int i=0; i<pf.length; i++)
             fillList(list, pf[i]);
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidDistanceFilter.java b/app/src/main/java/ch/bailu/aat/preferences/SolidDistanceFilter.java
index 9719d6fa..76859b12 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidDistanceFilter.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidDistanceFilter.java
@@ -46,8 +46,9 @@ public class SolidDistanceFilter extends SolidIndexList {
         return VALUE_LIST.length;
     }
 
-    
-    private String getString(int i) {
+
+    @Override
+    public String getValueAsString(int i) {
         if (i==0) return getContext().getString(R.string.off);
         if (i==length()-1) getContext().getString(R.string.auto);
         
@@ -57,18 +58,4 @@ public class SolidDistanceFilter extends SolidIndexList {
                 sunit.getAltitudeUnit());
     }
     
-    @Override
-    public String getString() {
-        return getString(getIndex());
-    }
-
-    @Override
-    public String[] getStringArray() {
-        String[] list = new String[length()];
-        for (int i=0; i<length(); i++){
-            list[i]=getString(i);
-        }
-        return list;
-    }
-
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidGPSLock.java b/app/src/main/java/ch/bailu/aat/preferences/SolidGPSLock.java
index 1ec28821..d3b44dad 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidGPSLock.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidGPSLock.java
@@ -8,7 +8,7 @@ public class SolidGPSLock extends SolidBoolean {
     }
 
     @Override
-    public String getString() {
+    public String getValueAsString() {
         if (this.isEnabled()) return "lock*";
         else return "";
     }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidIndexList.java b/app/src/main/java/ch/bailu/aat/preferences/SolidIndexList.java
index 6229fd82..742bd58d 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidIndexList.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidIndexList.java
@@ -12,21 +12,35 @@ public abstract class SolidIndexList extends SolidType {
     
     
     public abstract int length();
+    public abstract String getValueAsString(int i);
 
-    
-    public abstract String getString();
-
-    
+    public String getValueAsString() {
+        return getValueAsString(getIndex());
+    }
     public void setIndex(int i) {
-        sindex.setValue(i);
+        sindex.setValue(validate(i));
     }
 
-    
-    public abstract String[] getStringArray();
+
+    private int validate(int i) {
+        if (i < 0) i = length()-1;
+        else if (i >= length()) i=0;
+        return i;
+    }
+
+
+    public String[] getStringArray() {
+        String[] r = new String[length()];
+
+        for (int i=0; i<r.length; i++) {
+            r[i]=getValueAsString(i);
+        }
+        return r;
+    }
     
     
     public int getIndex() {
-        return sindex.getValue();
+        return validate(sindex.getValue());
     }
 
     
@@ -43,9 +57,7 @@ public abstract class SolidIndexList extends SolidType {
 
 
     public void cycle() {
-        int index=getIndex()+1;
-        if (index == length()) index=0;
-        setIndex(index);
+        setIndex(getIndex()+1);
     }
 
     
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidMET.java b/app/src/main/java/ch/bailu/aat/preferences/SolidMET.java
index c6eaa325..f1c9df0a 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidMET.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidMET.java
@@ -14,7 +14,7 @@ public class SolidMET extends SolidStaticIndexList {
     }
 
     public float getMETValue() {
-        return Float.valueOf(getString().substring(0, 4));
+        return Float.valueOf(getValueAsString().substring(0, 4));
     }
     
     @Override
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidPositionLock.java b/app/src/main/java/ch/bailu/aat/preferences/SolidPositionLock.java
index 442b6989..d0d16f11 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidPositionLock.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidPositionLock.java
@@ -23,7 +23,7 @@ public class SolidPositionLock extends SolidBoolean {
     }
     
     @Override
-    public String getString() {
+    public String getValueAsString() {
         return getContext().getString(R.string.tt_map_home);
     }
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
index 89f26962..82f999cd 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidPreset.java
@@ -16,9 +16,9 @@ public class SolidPreset extends SolidStaticIndexList {
     }
 
     
-    public String getString() {
+    public String getValueAsString() {
         SolidMET smet = new SolidMET(getContext(), getIndex());
-        return smet.getString();
+        return smet.getValueAsString();
     }
     
     @Override
@@ -28,7 +28,7 @@ public class SolidPreset extends SolidStaticIndexList {
         
         for (int i=0; i< array.length; i++) {
             SolidMET smet = new SolidMET(getContext(), i);
-            array[i] = smet.getString(); 
+            array[i] = smet.getValueAsString();
         }
         return array;
     }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidStaticIndexList.java b/app/src/main/java/ch/bailu/aat/preferences/SolidStaticIndexList.java
index 9119fb81..299a4165 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidStaticIndexList.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidStaticIndexList.java
@@ -16,25 +16,15 @@ public class SolidStaticIndexList extends SolidIndexList {
     }
 
     @Override
-    public String getString() {
-        return labelList[getIndex()];
+    public String getValueAsString(int i) {
+        return labelList[i];
     }
 
-    @Override
-    public void setIndex(int i) {
-        if (i < labelList.length) super.setIndex(i);
-    }
 
     @Override
     public String[] getStringArray() {
         return labelList;
     }
     
-    @Override
-    public int getIndex() {
-        if (super.getIndex() < length()) {
-            return super.getIndex();
-        }
-        return 0;
-    }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTileSize.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTileSize.java
index 075b33e2..d696acf3 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidTileSize.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTileSize.java
@@ -46,23 +46,9 @@ public class SolidTileSize extends SolidIndexList {
         return VALUE_LIST.length;
     }
 
-    private String getString(int i) {
-        return String.valueOf(VALUE_LIST[i]);
-    }
-
-    @Override
-    public String getString() {
-        return getString(getIndex());
-    }
-
-
     @Override
-    public String[] getStringArray() {
-        String[] list = new String[length()];
-        for (int i=0; i<length(); i++){
-            list[i]=getString(i);
-        }
-        return list;
+    public String getValueAsString(int i) {
+        return String.valueOf(VALUE_LIST[i]);
     }
 
 }
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimDate.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimDate.java
new file mode 100644
index 00000000..5857cb74
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimDate.java
@@ -0,0 +1,79 @@
+package ch.bailu.aat.preferences;
+
+import android.content.Context;
+import android.text.format.DateUtils;
+
+import java.util.Date;
+
+public class SolidTrimDate extends SolidIndexList {
+
+
+    private static class Entry {
+        public final long age;
+        public final String name;
+
+        private Entry(long s) {
+            age = s;
+            name = describe(s);
+        }
+    }
+
+    public static String describe(long size) {
+        String s;
+
+        if (size >= DateUtils.YEAR_IN_MILLIS) {
+            s="Years*";
+            size=size/ DateUtils.YEAR_IN_MILLIS;
+        } else if (size >= DateUtils.DAY_IN_MILLIS*30) {
+            s="Months*";
+            size =size / (DateUtils.DAY_IN_MILLIS*30);
+
+        } else  {
+            s="Days*";
+            size=size / DateUtils.DAY_IN_MILLIS;
+        }
+
+        return size + " " + s;
+    }
+
+
+    private final Entry[] entries = {
+            new Entry(2 * DateUtils.YEAR_IN_MILLIS),
+            new Entry(1 * DateUtils.YEAR_IN_MILLIS),
+            new Entry(6 * 30 * DateUtils.DAY_IN_MILLIS),
+            new Entry(3 * 30 * DateUtils.DAY_IN_MILLIS),
+            new Entry(2 * 30 * DateUtils.DAY_IN_MILLIS),
+            new Entry(1 * 30 * DateUtils.DAY_IN_MILLIS),
+            new Entry(2 * 7 * DateUtils.DAY_IN_MILLIS),
+            new Entry(1 * 7 * DateUtils.DAY_IN_MILLIS),
+    };
+
+
+
+    public SolidTrimDate(Context context) {
+        super(Storage.global(context), SolidTrimDate.class.getSimpleName());
+    }
+
+
+    @Override
+    public String getLabel() {
+        return "Age*";
+    }
+
+
+    @Override
+    public int length() {
+        return entries.length;
+    }
+
+    @Override
+    public String getValueAsString(int i) {
+        return entries[i].name;
+    }
+
+
+    public long getValue() {
+        return entries[getIndex()].age;
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimIndex.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimIndex.java
new file mode 100644
index 00000000..874d4a96
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimIndex.java
@@ -0,0 +1,9 @@
+package ch.bailu.aat.preferences;
+
+import android.content.Context;
+
+public class SolidTrimIndex extends SolidInteger {
+    public SolidTrimIndex(Context context) {
+        super(Storage.global(context), SolidTrimIndex.class.getSimpleName());
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimMode.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimMode.java
new file mode 100644
index 00000000..7e55eb9c
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimMode.java
@@ -0,0 +1,39 @@
+package ch.bailu.aat.preferences;
+
+import android.content.Context;
+
+public class SolidTrimMode extends SolidIndexList {
+
+    public static final int MODE_TO_SIZE=0;
+    public static final int MODE_TO_SIZE_AND_AGE=1;
+    public static final int MODE_TO_AGE=2;
+    public static final int MODE_TO_SIZE_OR_AGE=3;
+
+    private final String[] modes = {
+            "Trim to size*",
+            "Trim to size and age*",
+            "Trim to age*",
+            "Trim to size or age*"
+    };
+
+    public SolidTrimMode(Context context) {
+        super(Storage.global(context), SolidTrimMode.class.getSimpleName());
+    }
+
+    @Override
+    public int length() {
+        return modes.length;
+    }
+
+
+    @Override
+    public String getLabel() {
+        return "Trim mode*";
+    }
+
+
+    @Override
+    public String getValueAsString(int i) {
+        return modes[i];
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java
new file mode 100644
index 00000000..38619be0
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidTrimSize.java
@@ -0,0 +1,91 @@
+package ch.bailu.aat.preferences;
+
+import android.content.Context;
+
+public class SolidTrimSize extends SolidIndexList {
+
+    public final static long KB=1024;
+    public final static long MB=KB*KB;
+    public final static long GB=MB*MB;
+
+    public final static String sKB="KB";
+    public final static String sMB="MB";
+    public final static String sGB="GB";
+    public final static String sB="B";
+
+
+
+    private static class Entry {
+        public final long size;
+        public final String text;
+
+        private Entry(long s) {
+            size = s;
+            text = buildSizeText(new StringBuilder(10), size).toString();
+        }
+    }
+
+    public static StringBuilder buildSizeText(StringBuilder b, long size) {
+        if (size >= GB) {
+            b.append(size/GB);
+            b.append(' ');
+            b.append(sGB);
+
+        } else if (size >= MB) {
+            b.append(size/MB);
+            b.append(' ');
+            b.append(sMB);
+
+        } else if (size >= KB) {
+            b.append(size/KB);
+            b.append(' ');
+            b.append(sKB);
+
+        } else {
+            b.append(size);
+            b.append(' ');
+            b.append(sB);
+
+        }
+        return b;
+    }
+
+
+    private static final Entry[] entries = {
+            new Entry(16 * GB),
+            new Entry(8 * GB),
+            new Entry(4 * GB),
+            new Entry(2 * GB),
+            new Entry(1 * GB),
+            new Entry(500 * MB),
+            new Entry(200 * MB),
+            new Entry(100 * MB),
+            new Entry(50 * MB),
+    };
+
+
+    public SolidTrimSize(Context context) {
+        super(Storage.global(context), SolidTrimSize.class.getSimpleName());
+    }
+
+    @Override
+    public int length() {
+        return entries.length;
+    }
+
+
+    @Override
+    public String getLabel() {
+        return "Size*";
+    }
+
+    @Override
+    public String getValueAsString(int i) {
+        return entries[i].text;
+    }
+
+    public long getValue() {
+        return entries[getIndex()].size;
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidType.java b/app/src/main/java/ch/bailu/aat/preferences/SolidType.java
index 263df3fc..bb24e491 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidType.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidType.java
@@ -32,4 +32,5 @@ public abstract class SolidType implements SolidTypeInterface {
     public void unregister(OnSharedPreferenceChangeListener listener) {
         getStorage().unregister(listener);
     }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/OneService.java b/app/src/main/java/ch/bailu/aat/services/OneService.java
index 6db7ccab..24ba4878 100644
--- a/app/src/main/java/ch/bailu/aat/services/OneService.java
+++ b/app/src/main/java/ch/bailu/aat/services/OneService.java
@@ -5,6 +5,7 @@ import ch.bailu.aat.services.cache.CacheService;
 import ch.bailu.aat.services.dem.ElevationService;
 import ch.bailu.aat.services.directory.DirectoryService;
 import ch.bailu.aat.services.icons.IconMapService;
+import ch.bailu.aat.services.tileremover.TileRemoverService;
 import ch.bailu.aat.services.tracker.TrackerService;
 
 public class OneService extends AbsService  {
@@ -17,6 +18,8 @@ public class OneService extends AbsService  {
     public CacheService   cache;
     public DirectoryService directory;
     public ElevationService elevation;
+    public TileRemoverService tileRemover;
+
 
     private VirtualServiceLink scontext;
 
@@ -32,6 +35,8 @@ public class OneService extends AbsService  {
         cache = new CacheService(scontext);
         directory = new DirectoryService(scontext);
         elevation = new ElevationService(scontext);
+        tileRemover = new TileRemoverService(scontext);
+
     }
 
 
@@ -43,6 +48,7 @@ public class OneService extends AbsService  {
         cache.close();          cache=null;
         directory.close();      directory=null;
         elevation.close();      elevation=null;
+        tileRemover.close();   tileRemover=null;
 
         scontext=null;
         super.onDestroy();
diff --git a/app/src/main/java/ch/bailu/aat/services/ServiceContext.java b/app/src/main/java/ch/bailu/aat/services/ServiceContext.java
index 7db240e7..29269f93 100644
--- a/app/src/main/java/ch/bailu/aat/services/ServiceContext.java
+++ b/app/src/main/java/ch/bailu/aat/services/ServiceContext.java
@@ -7,6 +7,7 @@ import ch.bailu.aat.services.cache.CacheService;
 import ch.bailu.aat.services.dem.ElevationService;
 import ch.bailu.aat.services.directory.DirectoryService;
 import ch.bailu.aat.services.icons.IconMapService;
+import ch.bailu.aat.services.tileremover.TileRemoverService;
 import ch.bailu.aat.services.tracker.TrackerService;
 
 public abstract class ServiceContext implements ContextWrapperInterface {
@@ -110,9 +111,19 @@ public abstract class ServiceContext implements ContextWrapperInterface {
         }
 
         if (s==null) return new TrackerService.Self();
-        return s.getSelf();    }
+        return s.getSelf();
+    }
 
 
+    public TileRemoverService getTileRemoverService() {
+        try {
+            return getService().tileRemover;
+
+        } catch (Exception e) {
+            return null;
+
+        }
+    }
 
 
     public void appendStatusText(StringBuilder content) {
diff --git a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tiles.java b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tiles.java
index bb04bc06..c40f0e75 100644
--- a/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tiles.java
+++ b/app/src/main/java/ch/bailu/aat/services/dem/Dem3Tiles.java
@@ -47,7 +47,7 @@ public class Dem3Tiles {
         
         
         public void loadIfIdle(SrtmCoordinates c) {
-            if (toLoad == null) { // first request
+            if (toLoad == null) { // first Request
                 timer.close();
                 timer.kick();
             }
diff --git a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
index ad909b63..af275016 100644
--- a/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
+++ b/app/src/main/java/ch/bailu/aat/services/directory/DirectorySynchronizer.java
@@ -132,7 +132,7 @@ public class DirectorySynchronizer  implements Closeable {
 
     /*    
     /////////////////////////////////////////////////////////////////////////////////////////////
-    private class StateIdle extends State {
+    private class StateIdle extends StateMachine {
         @Override
         public void start() {
             AppBroadcaster.broadcast(context, AppBroadcaster.DBSYNC_DONE);
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/State.java b/app/src/main/java/ch/bailu/aat/services/tileremover/State.java
new file mode 100644
index 00000000..7a874629
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/State.java
@@ -0,0 +1,11 @@
+package ch.bailu.aat.services.tileremover;
+
+public interface State {
+
+    void scan();
+    void stop();
+    void reset();
+    void remove();
+    void rescan();
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java
new file mode 100644
index 00000000..9d72c436
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateMachine.java
@@ -0,0 +1,74 @@
+package ch.bailu.aat.services.tileremover;
+
+import android.content.Context;
+
+import java.io.File;
+
+public class StateMachine implements State {
+
+    private State state;
+
+    public final TilesList list = new TilesList();
+    public final TilesSummaries summaries = new TilesSummaries();
+
+    public File tileDirectory;
+
+    public final Context context;
+
+
+    public StateMachine(Context c) {
+        context = c;
+        set(new StateUnscanned(this));
+    }
+
+    public synchronized void set(State s) {
+        state = s;
+    }
+
+
+    @Override
+    public synchronized void scan() {
+        state.scan();
+    }
+
+    @Override
+    public synchronized void stop() {
+        state.stop();
+    }
+
+    @Override
+    public synchronized void reset() {
+        state.reset();
+    }
+
+    @Override
+    public synchronized void remove() {
+        state.remove();
+    }
+
+    @Override
+    public synchronized void rescan() { state.rescan(); }
+
+
+    public synchronized void setFromClass(Class s) {
+        if (s == StateRemoved.class) {
+            set(new StateRemoved(this));
+
+        } else  if (s == StateScanned.class) {
+            set(new StateScanned(this));
+
+        } else if (s == StateUnscanned.class){
+            set(new StateUnscanned(this));
+
+        } else if (s == StateScannedPartial.class) {
+            set(new StateScannedPartial(this));
+
+        } else if (s == StateScanForRemoval.class) {
+            set(new StateScanForRemoval(this));
+
+        } else if (s == StateScan.class) {
+            set(new StateScan(this));
+        }
+
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java
new file mode 100644
index 00000000..03971efe
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemove.java
@@ -0,0 +1,88 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+import java.util.Iterator;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.helpers.AppLog;
+
+public class StateRemove implements State, Runnable {
+    private final StateMachine state;
+    private Class nextState = StateRemoved.class;
+
+
+    public StateRemove(StateMachine s) {
+        state = s;
+
+        new Thread(this).start();
+    }
+
+
+
+
+    @Override
+    public void scan() {}
+
+    @Override
+    public void stop() {
+        nextState = StateScanned.class;
+    }
+
+    @Override
+    public void reset() {
+        nextState = StateScan.class;
+    }
+
+    @Override
+    public void remove() {
+
+    }
+
+    @Override
+    public void rescan() {
+
+    }
+
+    @Override
+    public void run() {
+        final Iterator<TileFile> iterator = state.list.iteratorToRemove();
+
+        int c=0;
+        while (iterator.hasNext() && keepUp()) {
+            final TileFile t = iterator.next();
+            final File f = state.summaries.toFile(state.tileDirectory, t);
+
+            if (c <= 0) {
+                c=50;
+                broadcast();
+            } else {
+                c--;
+
+            }
+            if (f.exists()) {
+                AppLog.d(this, f.toString());
+                state.summaries.inc_removed(t);
+            }
+        }
+
+        state.list.resetToRemove();
+
+
+
+        if(keepUp()) {
+            broadcast();
+        }
+
+        state.setFromClass(nextState);
+    }
+
+
+
+    private boolean keepUp() {
+        return (nextState == StateRemoved.class);
+    }
+
+    private void broadcast() {
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_REMOVE);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoved.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoved.java
new file mode 100644
index 00000000..2f7bc348
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateRemoved.java
@@ -0,0 +1,45 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.preferences.SolidTileCacheDirectory;
+
+public class StateRemoved implements State {
+    private final StateMachine state;
+
+
+
+    public StateRemoved(StateMachine s) {
+        state = s;
+
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_STOPPED);
+    }
+
+
+
+    @Override
+    public void scan() {
+        state.set(new StateScan(state));
+    }
+
+    @Override
+    public void stop() {
+
+    }
+
+    @Override
+    public void reset() {
+
+    }
+
+    @Override
+    public void remove() {
+
+    }
+
+    @Override
+    public void rescan() {
+
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java
new file mode 100644
index 00000000..7b03970b
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScan.java
@@ -0,0 +1,163 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+import java.io.IOException;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.preferences.SolidTileCacheDirectory;
+
+
+public class StateScan implements State, Runnable {
+    private final StateMachine state;
+    private Class nextState = StateScanForRemoval.class;
+
+    public StateScan(StateMachine s) {
+        state = s;
+        state.tileDirectory = new SolidTileCacheDirectory(s.context).toFile();
+
+        state.list.reset();
+        state.summaries.reset();
+
+        new Thread(this).start();
+
+
+    }
+
+
+
+
+    @Override
+    public void scan() {
+        nextState = StateScanForRemoval.class;
+    }
+
+    @Override
+    public void stop() {
+        nextState = StateUnscanned.class;
+
+    }
+
+    @Override
+    public void reset() {
+        nextState = StateScan.class;
+    }
+
+    @Override
+    public void remove() {}
+
+    @Override
+    public void rescan() {}
+
+    @Override
+    public void run() {
+        scanRootDirectory(state.tileDirectory);
+
+        if(keepUp()) {
+            broadcast();
+        }
+
+        state.setFromClass(nextState);
+    }
+
+
+
+    private boolean keepUp() {
+        return (nextState == StateScanForRemoval.class);
+    }
+
+    private void broadcast() {
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_SCAN);
+    }
+
+    private void scanRootDirectory(File file) {
+        final File[] files = file.listFiles();
+
+        if (files != null) {
+            int f = 0;
+            int s = 1;
+
+            while (f < files.length && s < TilesSummaries.SUMMARY_SIZE && keepUp()) {
+                if (doDirectory(files[f]) && keepUp()) {
+
+
+                    state.summaries.setName(s, files[f].getName());
+                    scanSubRootDirectory(files[f], s);
+                    s++;
+                }
+
+                f++;
+            }
+        }
+
+    }
+
+    private void scanSubRootDirectory(File file, int summary) {
+        final File[] files = file.listFiles();
+
+        final int hash=TileFile.getBaseDirHash(file);
+
+
+        if (files != null) {
+            for (int i=0; i<files.length; i++) {
+                if (doDirectory(files[i]) && keepUp() ) {
+                    scanZoomDirectory(files[i], hash, summary);
+                }
+            }
+        }
+
+    }
+
+    private void scanZoomDirectory(File file, int hash, int summary) {
+        final File[] files = file.listFiles();
+
+        final short zoom = TileFile.getZoom(file);
+
+        if (files != null) {
+            for (int i=0; i<files.length; i++) {
+                if (doDirectory(files[i]) && keepUp() ) {
+                    broadcast();
+                    scanTileDirectory(files[i], hash, zoom, summary);
+                }
+            }
+        }
+    }
+
+    private void scanTileDirectory(File file, int hash, short zoom, int summary) {
+
+        final File[] files = file.listFiles();
+        final int x = TileFile.getX(file);
+
+        if (files != null) {
+            for (int i = 0; i < files.length; i++) {
+                processFile(files[i], hash, zoom, x, summary);
+            }
+        }
+    }
+
+
+    private boolean doDirectory(File file) {
+        return file.isDirectory() && !file.isHidden() && isReal(file);
+    }
+
+
+    private boolean isReal(File file) {
+        try {
+            final String c = file.getCanonicalPath();
+            final String a = file.getAbsolutePath();
+
+            return c != null &&  c.equals(a);
+
+        } catch (IOException e) {
+            return false;
+        }
+    }
+
+
+
+    private void processFile(File file, int hash, short zoom, int x, int summary) {
+        final TileFile tile = new TileFile(hash, zoom, x, file);
+        state.list.add(tile);
+        state.summaries.inc(summary, tile);
+
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
new file mode 100644
index 00000000..11d757bb
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanForRemoval.java
@@ -0,0 +1,145 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.util.Iterator;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.preferences.SolidTrimDate;
+import ch.bailu.aat.preferences.SolidTrimIndex;
+import ch.bailu.aat.preferences.SolidTrimMode;
+import ch.bailu.aat.preferences.SolidTrimSize;
+
+public class StateScanForRemoval implements State, Runnable {
+    private final StateMachine state;
+    private Class nextState = StateScanned.class;
+
+
+    private final int trimMode, trimDirectoryHash;
+    private final long trimSize;
+    private final long trimAge;
+
+
+    public StateScanForRemoval(StateMachine s) {
+        state = s;
+
+        trimMode = new SolidTrimMode(s.context).getIndex();
+        trimSize = new SolidTrimSize(s.context).getValue();
+        trimAge = System.currentTimeMillis() - new SolidTrimDate(s.context).getValue();
+
+        int index = new SolidTrimIndex(s.context).getValue();
+
+        if (index > 0) {
+            trimDirectoryHash = state.summaries.hashCode(index);
+        } else {
+            trimDirectoryHash = 0;
+        }
+
+
+
+
+        state.summaries.reset_rm();
+        state.list.resetToRemove();
+
+        new Thread(this).start();
+
+
+    }
+
+
+    @Override
+    public void scan() {
+        nextState = StateScanned.class;
+    }
+
+    @Override
+    public void stop() {
+        nextState = StateScannedPartial.class;
+
+    }
+
+    @Override
+    public void reset() {
+        nextState = StateScan.class;
+    }
+
+    @Override
+    public void remove() {
+
+    }
+
+    @Override
+    public void rescan() {
+        nextState = StateScanForRemoval.class;
+    }
+
+
+    @Override
+    public void run() {
+        final Iterator<TileFile> iterator = state.list.iterator();
+
+        int c=0;
+        while (iterator.hasNext()) {
+            TileFile file = iterator.next();
+
+            if (c > 0) {
+                c--;
+            } else if (keepUp()){
+                c=500;
+                broadcast();
+            } else {
+                break;
+            }
+
+            if (passFilter(file)) {
+                if (passDirectory(file)) addFile(file);
+
+            } else {
+                break;
+            }
+        }
+
+        state.setFromClass(nextState);
+    }
+
+    private void addFile(TileFile file) {
+        state.summaries.inc_rm(file);
+        state.list.addToRemove(file);
+    }
+
+    private boolean passFilter(TileFile file) {
+        if        (trimMode == SolidTrimMode.MODE_TO_SIZE) {
+            return passSize();
+
+        } else if (trimMode == SolidTrimMode.MODE_TO_AGE) {
+            return passAge(file);
+
+        } else if (trimMode == SolidTrimMode.MODE_TO_SIZE_AND_AGE) {
+            return passSize() || passAge(file);
+
+        } else if (trimMode == SolidTrimMode.MODE_TO_SIZE_OR_AGE) {
+            return passSize() && passAge(file);
+        }
+        return false;
+    }
+
+
+    private boolean passDirectory(TileFile file) {
+        return trimDirectoryHash == 0 || file.hashCode() == trimDirectoryHash;
+    }
+
+
+    private boolean passSize() {
+        return state.summaries.getNewSize() > trimSize;
+    }
+
+    private boolean passAge(TileFile file) {
+        return file.lastModified() < trimAge;
+    }
+
+    private boolean keepUp() {
+        return (nextState == StateScanned.class);
+    }
+
+    private void broadcast() {
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_SCAN);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanned.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanned.java
new file mode 100644
index 00000000..ac7cd555
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScanned.java
@@ -0,0 +1,41 @@
+package ch.bailu.aat.services.tileremover;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+
+public class StateScanned implements State {
+    private final StateMachine state;
+
+    public StateScanned(StateMachine s) {
+        state = s;
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_STOPPED);
+
+    }
+
+
+    @Override
+    public void scan() {
+        rescan();
+    }
+
+
+    @Override
+    public void rescan() {
+        state.set(new StateScanForRemoval(state));
+    }
+
+    @Override
+    public void stop() {}
+
+    @Override
+    public void reset() {
+        state.set(new StateScan(state));
+    }
+
+    @Override
+    public void remove() {
+        if (state.summaries.getRemoveCount() > 0) {
+            state.set(new StateRemove(state));
+        }
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateScannedPartial.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScannedPartial.java
new file mode 100644
index 00000000..9a001076
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateScannedPartial.java
@@ -0,0 +1,41 @@
+package ch.bailu.aat.services.tileremover;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+
+public class StateScannedPartial implements State {
+
+    private final StateMachine state;
+
+    public StateScannedPartial(StateMachine s) {
+        state = s;
+
+        state.list.resetToRemove();
+        state.summaries.reset_rm();
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_STOPPED);
+    }
+
+
+    @Override
+    public void scan() {
+        rescan();
+    }
+
+
+    @Override
+    public void rescan() {
+        state.set(new StateScanForRemoval(state));
+    }
+
+
+    @Override
+    public void stop() {}
+
+    @Override
+    public void reset() {
+        state.set(new StateScan(state));
+    }
+
+    @Override
+    public void remove() {}
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/StateUnscanned.java b/app/src/main/java/ch/bailu/aat/services/tileremover/StateUnscanned.java
new file mode 100644
index 00000000..011ec4dd
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/StateUnscanned.java
@@ -0,0 +1,48 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.preferences.SolidTileCacheDirectory;
+
+public class StateUnscanned implements State {
+
+    private final StateMachine state;
+
+
+    public StateUnscanned(StateMachine s) {
+        state = s;
+
+        state.list.reset();
+        state.summaries.reset();
+
+        AppBroadcaster.broadcast(state.context, AppBroadcaster.TILE_REMOVER_STOPPED);
+    }
+
+
+
+    @Override
+    public void scan() {
+        state.set(new StateScan(state));
+    }
+
+    @Override
+    public void stop() {
+
+    }
+
+    @Override
+    public void reset() {
+
+    }
+
+    @Override
+    public void remove() {
+
+    }
+
+    @Override
+    public void rescan() {
+
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
new file mode 100644
index 00000000..35330f12
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TileFile.java
@@ -0,0 +1,66 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+
+public class TileFile {
+
+    private final short zoom;
+    private final int x, y, hash;
+    private final long age;
+    private final long size;
+
+
+    public static int getBaseDirHash(File file) {
+        return file.getName().hashCode();
+    }
+
+
+    public static int getX(File file) {
+        return Integer.valueOf(file.getName());
+    }
+
+
+    public static short getZoom(File file) {
+        return Short.valueOf(file.getName());
+    }
+
+
+    public static int getY(File file) {
+        final String name = file.getName();
+        final String yname = name.substring(0, name.length()-4);
+
+        return Integer.valueOf(yname);
+    }
+
+
+    public TileFile(int hash, short zoom, int x, File file) {
+        this.hash = hash;
+        this.zoom = zoom;
+        this.x = x;
+        this.y = getY(file);
+        this.age = file.lastModified();
+        this.size = file.length();
+    }
+
+
+    public File toFile(File base_dir) {
+        return new File(base_dir,
+                String.valueOf(zoom)+"/" +
+                        String.valueOf(x) +
+                        "/" +
+                        String.valueOf(y)+ ".png");
+    }
+
+    public long lastModified() {
+        return age;
+    }
+
+    public long length() {
+        return size;
+    }
+
+    @Override
+    public int hashCode() {
+        return hash;
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TileRemoverService.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TileRemoverService.java
new file mode 100644
index 00000000..7faf279c
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TileRemoverService.java
@@ -0,0 +1,35 @@
+package ch.bailu.aat.services.tileremover;
+
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.VirtualService;
+
+public class TileRemoverService extends VirtualService {
+
+
+    private StateMachine state;
+
+    public TileRemoverService(ServiceContext sc) {
+        super(sc);
+
+        state = new StateMachine(getContext());
+    }
+
+    @Override
+    public void appendStatusText(StringBuilder builder) {
+
+    }
+
+    @Override
+    public void close() {
+
+    }
+
+    public State getState() {
+        return state;
+    }
+
+
+    public TilesSummaryInterface[] getSummaries() {
+        return state.summaries.getSummaries();
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java
new file mode 100644
index 00000000..d23b3bbb
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesList.java
@@ -0,0 +1,52 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.PriorityQueue;
+
+public class TilesList {
+    public final static int FILES_LIMIT=100000;
+
+
+    private PriorityQueue<TileFile> files = new PriorityQueue<>(
+            FILES_LIMIT,
+            new Comparator<TileFile>() {
+        @Override
+        public int compare(TileFile o1, TileFile o2) {
+            return (int) (o2.lastModified()-o1.lastModified());
+        }
+    });
+
+    private  final ArrayList<TileFile> filesToRemove = new ArrayList<TileFile>(FILES_LIMIT);
+
+    public void reset() {
+        files.clear();
+        resetToRemove();
+    }
+
+    public void resetToRemove() {
+        filesToRemove.clear();
+    }
+
+    public void add(TileFile file) {
+        files.add(file);
+        if (files.size()>= FILES_LIMIT) {
+            files.poll();
+        }
+    }
+
+    public void addToRemove(TileFile file) {
+        filesToRemove.add(file);
+    }
+
+
+    public Iterator<TileFile> iteratorToRemove() {
+        return filesToRemove.iterator();
+    }
+
+
+    public Iterator<TileFile> iterator() {
+        return files.iterator();
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaries.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaries.java
new file mode 100644
index 00000000..0c4ef3e1
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaries.java
@@ -0,0 +1,80 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+
+public class TilesSummaries {
+    public final static int SUMMARY_SIZE = 20;
+    private TilesSummary[] summaries = new TilesSummary[SUMMARY_SIZE];
+
+
+    public void reset() {
+        for(int i = 0; i< summaries.length; i++) {
+            summaries[i] = new TilesSummary();
+            summaries[0].setName("Total*");
+        }
+    }
+
+    public void setName(int s, String name) {
+        summaries[s].setName(name);
+    }
+
+    public void inc(int s, TileFile file) {
+        long length = file.length();
+        summaries[0].inc(length);
+        summaries[s].inc(length);
+    }
+
+    public void reset_rm() {
+        for (int i = 0; i< summaries.length; i++) {
+            summaries[i].clear_rm();
+        }
+    }
+
+    public void inc_rm(TileFile file) {
+        final long length = file.length();
+
+        summaries[0].inc_rm(length);
+        summaries[indexFromHashCode(file.hashCode())].inc_rm(length);
+    }
+
+
+    public void inc_removed(TileFile file) {
+        final long length = file.length();
+
+        summaries[0].inc_removed(length);
+        summaries[indexFromHashCode(file.hashCode())].inc_removed(length);
+    }
+
+    public int indexFromHashCode(int hashCode) {
+        for (int i = summaries.length-1; i>=0; i--) {
+            if (summaries[i].hashCode() == hashCode) {
+                return i;
+            }
+        }
+        return 0;
+    }
+
+    public long getNewSize() {
+        return summaries[0].size_new;
+    }
+
+
+    public TilesSummaryInterface[] getSummaries() {
+        return summaries;
+    }
+
+    public long getRemoveCount() {
+        return summaries[0].count_rm;
+    }
+
+
+    public int hashCode(int i) {
+        return summaries[i].hashCode();
+    }
+
+    public File toFile(File tileDirectory, TileFile t) {
+        final String subDir = summaries[indexFromHashCode(t.hashCode())].getName();
+
+        return t.toFile(new File(tileDirectory, subDir));
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummary.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummary.java
new file mode 100644
index 00000000..202b5e81
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummary.java
@@ -0,0 +1,117 @@
+package ch.bailu.aat.services.tileremover;
+
+import java.io.File;
+
+import ch.bailu.aat.helpers.AppLog;
+import ch.bailu.aat.preferences.SolidTrimSize;
+
+public class TilesSummary implements TilesSummaryInterface{
+    private String name = "";
+    private int hash;
+    public long size, count, size_rm, count_rm, size_new, count_new;
+
+
+
+    public void clear_all() {
+        setName("");
+        clear();
+        clear_rm();
+    }
+
+    public void log() {
+        AppLog.d(this, name + " "+ count + " "+ size / (1024*1024) + "MB");
+    }
+
+
+    public void inc(long length) {
+        size += length;
+        size_new += length;
+        count++;
+        count_new++;
+    }
+
+    public void inc_rm(long length) {
+        size_rm += length;
+        count_rm++;
+
+        size_new -= length;
+        count_new --;
+    }
+
+
+    public void inc_removed(long length) {
+        size -= length;
+        size_rm -= length;
+
+        count --;
+        count_rm --;
+    }
+
+    public void clear_rm() {
+        size_new = size;
+        count_new = count;
+
+        size_rm = 0;
+        count_rm = 0;
+    }
+
+    public void clear() {
+        size = 0;
+        count = 0;
+        clear_rm();
+    }
+
+
+    public synchronized void setName(String n) {
+        name = n;
+        hash = name.hashCode();
+    }
+
+
+    @Override
+    public int hashCode() {
+        return hash;
+    }
+
+
+
+    @Override
+    public synchronized boolean isValid() {
+        return name.length()>0;
+    }
+
+    @Override
+    public synchronized String getName() {
+        return name;
+    }
+
+    @Override
+    public long getSize() {
+        return size;
+    }
+
+    @Override
+    public long getCount() {
+        return count;
+    }
+
+    @Override
+    public StringBuilder buildReport(StringBuilder builder) {
+        builder.append(count);
+        builder.append('-');
+        builder.append(count_rm);
+        builder.append('=');
+        builder.append(count_new);
+
+        builder.append('\n');
+
+        SolidTrimSize.buildSizeText(builder, size);
+        builder.append('-');
+        SolidTrimSize.buildSizeText(builder, size_rm);
+        builder.append('=');
+        SolidTrimSize.buildSizeText(builder, size_new);
+
+        return builder;
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaryInterface.java b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaryInterface.java
new file mode 100644
index 00000000..f7fd48f8
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/tileremover/TilesSummaryInterface.java
@@ -0,0 +1,11 @@
+package ch.bailu.aat.services.tileremover;
+
+public interface TilesSummaryInterface {
+    boolean isValid();
+
+    String getName();
+    long getSize();
+    long getCount();
+
+    StringBuilder buildReport(StringBuilder builder);
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/tracker/StatusIcon.java b/app/src/main/java/ch/bailu/aat/services/tracker/StatusIcon.java
index 661a5d7f..e179cb90 100644
--- a/app/src/main/java/ch/bailu/aat/services/tracker/StatusIcon.java
+++ b/app/src/main/java/ch/bailu/aat/services/tracker/StatusIcon.java
@@ -1,10 +1,18 @@
 package ch.bailu.aat.services.tracker;
 
+import android.annotation.TargetApi;
 import android.app.Notification;
 import android.app.PendingIntent;
+import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
 import ch.bailu.aat.R;
 import ch.bailu.aat.activities.TrackerActivity;
+import ch.bailu.aat.helpers.AppLog;
 import ch.bailu.aat.services.ServiceContext;
 import ch.bailu.aat.services.ServiceContext.ServiceNotUpException;
 
@@ -36,19 +44,97 @@ public class StatusIcon  {
     }
 
 
-    @SuppressWarnings("deprecation")
     private Notification createNotification(PendingIntent intent, int status_id) {
+        if (Build.VERSION.SDK_INT < 11) {
+            return createNotificationSDK1(intent, status_id);
+
+        } else if (Build.VERSION.SDK_INT < 16) {
+            return createNotificationSDK11(intent, status_id);
+
+        } else {
+            return createNotificationSDK16(intent, status_id);
+        }
+    }
+
+
+    @SuppressWarnings("deprecation")
+    private Notification createNotificationSDK1(PendingIntent intent, int status_id) {
         String appName = scontext.getContext().getString(R.string.app_name);
         String appInfo = scontext.getContext().getString(status_id);
 
         Notification notification=new Notification(R.drawable.status,appInfo, System.currentTimeMillis());
         
-        notification.setLatestEventInfo(scontext.getContext(), appName, appInfo, intent);
+        setLatestEventInfoSDK1(notification, scontext.getContext(), appName, appInfo, intent);
         notification.flags |= Notification.FLAG_NO_CLEAR;
         
         return notification;
     }
 
+
+
+
+    private void setLatestEventInfoSDK1(Notification notification,
+                                        Context context,
+                                        String appName,
+                                        String appInfo, PendingIntent intent) {
+
+        try {
+            Method deprecatedMethod = notification.getClass().getMethod(
+                            "setLatestEventInfo",
+                            Context.class,
+                            CharSequence.class,
+                            CharSequence.class,
+                            PendingIntent.class);
+            deprecatedMethod.invoke(notification, context, appName, appInfo, intent);
+        } catch (NoSuchMethodException |
+                IllegalAccessException |
+                IllegalArgumentException |
+                InvocationTargetException e) {
+            AppLog.e(context, "Missing setLatestEventInfo(...)", e);
+        }
+
+    }
+
+
+    @SuppressWarnings("deprecation")
+    @TargetApi(11)
+    private Notification createNotificationSDK11(PendingIntent intent, int status_id) {
+        String appName = scontext.getContext().getString(R.string.app_name);
+        String appInfo = scontext.getContext().getString(status_id);
+
+        Notification.Builder builder = new Notification.Builder(scontext.getContext())
+                .setContentIntent(intent)
+                .setSmallIcon(R.drawable.status)
+                .setContentTitle(appName)
+                .setContentText(appInfo);
+
+        Notification notification = builder.getNotification();
+
+        notification.flags |= Notification.FLAG_NO_CLEAR;
+
+        return notification;
+    }
+
+
+    @TargetApi(16)
+    private Notification createNotificationSDK16(PendingIntent intent, int status_id) {
+        String appName = scontext.getContext().getString(R.string.app_name);
+        String appInfo = scontext.getContext().getString(status_id);
+
+        Notification.Builder builder = new Notification.Builder(scontext.getContext())
+                .setContentIntent(intent)
+                .setSmallIcon(R.drawable.status)
+                .setContentTitle(appName)
+                .setContentText(appInfo);
+
+        Notification notification = builder.build();
+
+        notification.flags |= Notification.FLAG_NO_CLEAR;
+
+        return notification;
+    }
+
+
     public void showAutoPause() {
         
         try {
diff --git a/app/src/main/java/ch/bailu/aat/views/ControlBar.java b/app/src/main/java/ch/bailu/aat/views/ControlBar.java
index 0e7699a7..fde8de1f 100644
--- a/app/src/main/java/ch/bailu/aat/views/ControlBar.java
+++ b/app/src/main/java/ch/bailu/aat/views/ControlBar.java
@@ -109,6 +109,13 @@ public class ControlBar extends LinearLayout {
     }
 
 
+    public View addButton(View button) {
+        canvas.addView(button, controlSize, controlSize);
+        button.setOnClickListener(onClickListener);
+        return button;
+
+    }
+
     public void addViewIgnoreSize(View v) {
         canvas.addView(v);
     }
diff --git a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
index 97c335a1..849ce638 100644
--- a/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
+++ b/app/src/main/java/ch/bailu/aat/views/NodeEntryView.java
@@ -42,7 +42,7 @@ public class NodeEntryView extends ViewGroup {
     @Override
     protected void onMeasure(int wspec, int hspec) {
         final int width  = MeasureSpec.getSize(wspec);
-        final int height = OsmPreviewGenerator.BITMAP_SIZE; // MeasureSpec.getSize(hspec);
+        final int height = OsmPreviewGenerator.BITMAP_SIZE; // MeasureSpec.getNewSize(hspec);
 
         final int wspecText = MeasureSpec.makeMeasureSpec(
                 width-OsmPreviewGenerator.BITMAP_SIZE, MeasureSpec.EXACTLY);
diff --git a/app/src/main/java/ch/bailu/aat/views/SolidImageButton.java b/app/src/main/java/ch/bailu/aat/views/SolidImageButton.java
index 9e38dee3..05f06d17 100644
--- a/app/src/main/java/ch/bailu/aat/views/SolidImageButton.java
+++ b/app/src/main/java/ch/bailu/aat/views/SolidImageButton.java
@@ -23,7 +23,7 @@ public class SolidImageButton extends ImageButton {
     void onPreferencesChanged(String key) {
         if (sList.hasKey(key)) {
             setImage();
-            AppLog.i(getContext(), sList.getString());
+            AppLog.i(getContext(), sList.getValueAsString());
         }
     }
     
diff --git a/app/src/main/java/ch/bailu/aat/views/ViewWrapper.java b/app/src/main/java/ch/bailu/aat/views/ViewWrapper.java
index 65788cd3..ddb01cfc 100644
--- a/app/src/main/java/ch/bailu/aat/views/ViewWrapper.java
+++ b/app/src/main/java/ch/bailu/aat/views/ViewWrapper.java
@@ -20,8 +20,8 @@ public class ViewWrapper extends TrackDescriptionView {
     @Override
     protected void onMeasure(int wSpec, int hSpec) {
         // As big as possible
-        //wSpec  = MeasureSpec.makeMeasureSpec (MeasureSpec.getSize(wSpec),  MeasureSpec.AT_MOST);
-        //hSpec  = MeasureSpec.makeMeasureSpec (MeasureSpec.getSize(hSpec),  MeasureSpec.AT_MOST);
+        //wSpec  = MeasureSpec.makeMeasureSpec (MeasureSpec.getNewSize(wSpec),  MeasureSpec.AT_MOST);
+        //hSpec  = MeasureSpec.makeMeasureSpec (MeasureSpec.getNewSize(hSpec),  MeasureSpec.AT_MOST);
 
         
         view.measure(wSpec, hSpec);
diff --git a/app/src/main/java/ch/bailu/aat/views/tileremover/SolidIndexListView.java b/app/src/main/java/ch/bailu/aat/views/tileremover/SolidIndexListView.java
new file mode 100644
index 00000000..86e50472
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/tileremover/SolidIndexListView.java
@@ -0,0 +1,76 @@
+package ch.bailu.aat.views.tileremover;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import ch.bailu.aat.helpers.AppTheme;
+import ch.bailu.aat.preferences.IndexListDialog;
+import ch.bailu.aat.preferences.SolidIndexList;
+
+public class SolidIndexListView extends LinearLayout implements SharedPreferences.OnSharedPreferenceChangeListener {
+
+    private final TextView label, value;
+
+    private final SolidIndexList solid;
+
+    public SolidIndexListView(final Context context, final SolidIndexList s) {
+        super(context);
+        setOrientation(VERTICAL);
+
+        solid = s;
+
+        label = new TextView(context);
+        label.setText(solid.getLabel());
+        addView(label);
+        AppTheme.themify(label);
+
+        value = new TextView(context);
+        value.setText(solid.getValueAsString());
+        addView(value);
+
+        AppTheme.themify(this);
+
+
+        setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                selectOrCycle();
+            }
+        });
+    }
+
+
+
+    @Override
+    public void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        value.setText(solid.getValueAsString());
+        solid.register(this);
+    }
+
+    private void selectOrCycle() {
+        if (solid.length()<3) {
+            solid.cycle();
+        } else {
+            new IndexListDialog(getContext(), solid);
+        }
+    }
+
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
+        if (solid.hasKey(key)) {
+            value.setText(solid.getValueAsString());
+        }
+    }
+
+
+    @Override
+    public void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        solid.unregister(this);
+    }
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/tileremover/TileRemoverContentView.java b/app/src/main/java/ch/bailu/aat/views/tileremover/TileRemoverContentView.java
new file mode 100644
index 00000000..7b8e1bd7
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/tileremover/TileRemoverContentView.java
@@ -0,0 +1,204 @@
+package ch.bailu.aat.views.tileremover;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.view.View;
+import android.widget.LinearLayout;
+import android.widget.ScrollView;
+
+import ch.bailu.aat.R;
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.preferences.SolidTileCacheDirectory;
+import ch.bailu.aat.preferences.SolidTrimDate;
+import ch.bailu.aat.preferences.SolidTrimMode;
+import ch.bailu.aat.preferences.SolidTrimSize;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.tileremover.TileRemoverService;
+import ch.bailu.aat.views.BusyButton;
+import ch.bailu.aat.views.ContentView;
+import ch.bailu.aat.views.ControlBar;
+
+
+public class TileRemoverContentView
+        extends ContentView
+        implements View.OnClickListener, SharedPreferences.OnSharedPreferenceChangeListener {
+
+
+    private SolidIndexListView sdirectoryView;
+    private TilesSummaryView summaryView;
+    private SolidIndexListView strimsizeView;
+    private SolidIndexListView strimdateView;
+
+
+
+    private BusyButton scan, remove;
+
+    private final SolidTileCacheDirectory sdirectory;
+
+    private final ServiceContext scontext;
+
+
+
+    public TileRemoverContentView(ServiceContext sc) {
+        super(sc.getContext(), HORIZONTAL);
+
+        scontext=sc;
+
+        sdirectory = new SolidTileCacheDirectory(getContext());
+
+        addView(createControlBar(getContext()));
+        addView(createFilterLayout(getContext()));
+    }
+
+
+    private View createFilterLayout(Context context) {
+        final ScrollView scrollView = new ScrollView(context);
+        final LinearLayout filter = new LinearLayout(context);
+
+        filter.setOrientation(LinearLayout.VERTICAL);
+
+        sdirectoryView = new SolidIndexListView(context, sdirectory);
+        filter.addView(sdirectoryView);
+
+        summaryView = new TilesSummaryView(context);
+        filter.addView(summaryView);
+
+        filter.addView(new SolidIndexListView(context, new SolidTrimMode(context)));
+
+        strimsizeView = new SolidIndexListView(context, new SolidTrimSize(context));
+        filter.addView(strimsizeView);
+
+        strimdateView = new SolidIndexListView(context, new SolidTrimDate(context));
+        filter.addView(strimdateView);
+
+
+        scrollView.addView(filter);
+        return scrollView;
+    }
+
+
+    private View createControlBar(Context context) {
+        final ControlBar bar =  new ControlBar(context, LinearLayout.VERTICAL);
+
+        bar.addImageButton(R.drawable.folder_inverse);
+
+
+        scan = new BusyButton(context, R.drawable.view_refresh_inverse);
+        bar.addButton(scan);
+
+        remove = new BusyButton(context, R.drawable.user_trash_inverse);
+        bar.addButton(remove);
+
+        bar.setOnClickListener1(this);
+        return bar;
+    }
+
+
+    @Override
+    public void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        sdirectory.register(this);
+
+        AppBroadcaster.register(getContext(),
+                onTileRemoverStopped,
+                AppBroadcaster.TILE_REMOVER_STOPPED);
+
+
+        AppBroadcaster.register(getContext(),
+                onTileRemoverScan,
+                AppBroadcaster.TILE_REMOVER_SCAN);
+
+        AppBroadcaster.register(getContext(),
+                onTileRemoverRemove,
+                AppBroadcaster.TILE_REMOVER_REMOVE);
+
+    }
+
+
+    private final BroadcastReceiver onTileRemoverStopped = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            scan.stopWaiting();
+            remove.stopWaiting();
+            updateInfo();
+        }
+    };
+
+
+
+    private final BroadcastReceiver onTileRemoverRemove = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            remove.startWaiting();
+            scan.stopWaiting();
+            updateInfo();
+        }
+    };
+
+    private final BroadcastReceiver onTileRemoverScan = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            scan.startWaiting();
+            remove.stopWaiting();
+            updateInfo();
+        }
+    };
+
+
+    public void updateInfo() {
+        final TileRemoverService tr = scontext.getTileRemoverService();
+        if (tr != null) {
+            summaryView.updateInfo(tr.getSummaries());
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        final TileRemoverService tr = scontext.getTileRemoverService();
+        if (tr != null) {
+            if (v == scan && scan.isWaiting()) {
+                tr.getState().stop();
+            } else if (v == scan) {
+                tr.getState().scan();
+            } else if (v == remove && remove.isWaiting()) {
+                tr.getState().stop();
+            } else if (v == remove) {
+                tr.getState().remove();
+            }
+        }
+    }
+
+
+
+
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
+        final TileRemoverService tr = scontext.getTileRemoverService();
+        if (tr != null) {
+            if(sdirectory.hasKey(key)) {
+                tr.getState().reset();
+            } else if (key.contains("SolidTrim")) {
+                tr.getState().rescan();
+            }
+
+        }
+
+
+    }
+
+
+    @Override
+    public void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        sdirectory.unregister(this);
+
+        getContext().unregisterReceiver(onTileRemoverStopped);
+        getContext().unregisterReceiver(onTileRemoverScan);
+        getContext().unregisterReceiver(onTileRemoverRemove);
+
+    }
+
+}
diff --git a/app/src/main/java/ch/bailu/aat/views/tileremover/TilesSummaryView.java b/app/src/main/java/ch/bailu/aat/views/tileremover/TilesSummaryView.java
new file mode 100644
index 00000000..371cd3e7
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/views/tileremover/TilesSummaryView.java
@@ -0,0 +1,77 @@
+package ch.bailu.aat.views.tileremover;
+
+import android.content.Context;
+import android.view.View;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.TextView;
+
+import ch.bailu.aat.preferences.SolidTrimIndex;
+import ch.bailu.aat.services.tileremover.TilesSummaries;
+import ch.bailu.aat.services.tileremover.TilesSummaryInterface;
+
+public class TilesSummaryView extends RadioGroup implements View.OnClickListener {
+
+    private final RadioButton[] radioButtons = new RadioButton[TilesSummaries.SUMMARY_SIZE];
+    private final TextView[] textViews = new TextView[TilesSummaries.SUMMARY_SIZE];
+
+    private final StringBuilder builder = new StringBuilder(100);
+
+
+    public TilesSummaryView(Context context) {
+        super(context);
+        setOrientation(VERTICAL);
+    }
+
+
+    public void updateInfo(final TilesSummaryInterface[] ts) {
+        for (int i = 0; i < ts.length; i++) {
+            if (ts[i].isValid()) {
+                if (textViews[i] == null) {
+                    addViews(i, ts[i].getName());
+                }
+                updateInfo(textViews[i], ts[i]);
+            } else if (textViews[i] != null) {
+                removeViews(i);
+            }
+        }
+    }
+
+
+    private void addViews(int i, String name) {
+        radioButtons[i] = new RadioButton(getContext());
+        radioButtons[i].setText(name);
+
+        radioButtons[i].setOnClickListener(this);
+        radioButtons[i].setId(i);
+
+        addView(radioButtons[i]);
+
+        if (i == new SolidTrimIndex(getContext()).getValue()) {
+            radioButtons[i].setChecked(true);
+        }
+
+        textViews[i] = new TextView(getContext());
+        addView(textViews[i]);
+    }
+
+
+    private void removeViews(int i) {
+        removeView(textViews[i]);
+        textViews[i] = null;
+
+        removeView(radioButtons[i]);
+        radioButtons[i] = null;
+    }
+
+
+    private void updateInfo(TextView sv, TilesSummaryInterface ts) {
+        builder.setLength(0);
+        sv.setText(ts.buildReport(builder).toString());
+    }
+
+    @Override
+    public void onClick(View v) {
+        new SolidTrimIndex(getContext()).setValue(v.getId());
+    }
+}
diff --git a/app/src/main/java/org/osmdroid/views/MapView.java b/app/src/main/java/org/osmdroid/views/MapView.java
index 178b949c..9fb9339b 100644
--- a/app/src/main/java/org/osmdroid/views/MapView.java
+++ b/app/src/main/java/org/osmdroid/views/MapView.java
@@ -893,7 +893,7 @@ public class MapView extends ViewGroup implements IMapView, MapViewConstants {
 			// - probably not a good idea because you'll repeat the animation
 		}
 
-		// reset scale
+		// clear_all scale
 		mMultiTouchScale = 1.0f;
 	}*/
 /*
diff --git a/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java b/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java
index 09cc975e..81d44763 100644
--- a/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java
+++ b/app/src/main/java/org/osmdroid/views/overlay/TilesOverlay.java
@@ -160,7 +160,7 @@ public class TilesOverlay extends Overlay implements IOverlayMenuProvider {
 		/* Draw all the MapTiles (from the upper left to the lower right). */
 		for (int y = upperLeft.y; y <= lowerRight.y; y++) {
 			for (int x = upperLeft.x; x <= lowerRight.x; x++) {
-				// Construct a MapTile to request from the tile provider.
+				// Construct a MapTile to Request from the tile provider.
 				final int tileY = MyMath.mod(y, mapTileUpperBound);
 				final int tileX = MyMath.mod(x, mapTileUpperBound);
 				final MapTile tile = new MapTile(zoomLevel, tileX, tileY);
