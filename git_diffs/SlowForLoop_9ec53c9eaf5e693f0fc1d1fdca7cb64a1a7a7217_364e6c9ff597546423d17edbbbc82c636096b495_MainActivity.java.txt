diff --git a/pmk/src/com/cax/pmk/EmulatorInterface.java b/pmk/app/src/main/java/com/cax/pmk/EmulatorInterface.java
similarity index 100%
rename from pmk/src/com/cax/pmk/EmulatorInterface.java
rename to pmk/app/src/main/java/com/cax/pmk/EmulatorInterface.java
diff --git a/pmk/src/com/cax/pmk/MainActivity.java b/pmk/app/src/main/java/com/cax/pmk/MainActivity.java
similarity index 52%
rename from pmk/src/com/cax/pmk/MainActivity.java
rename to pmk/app/src/main/java/com/cax/pmk/MainActivity.java
index 198c3e6..1275fc8 100644
--- a/pmk/src/com/cax/pmk/MainActivity.java
+++ b/pmk/app/src/main/java/com/cax/pmk/MainActivity.java
@@ -3,7 +3,7 @@ package com.cax.pmk;
 import java.io.IOException;
 import java.util.List;
 
-import com.cax.pmk.R;
+//import com.cax.pmk.R;
 import com.cax.pmk.widget.AutoScaleTextView;
 
 import android.media.AudioManager;
@@ -17,6 +17,7 @@ import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.graphics.Point;
 import android.util.DisplayMetrics;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.MotionEvent;
@@ -32,48 +33,48 @@ import android.widget.TextView;
 
 public class MainActivity extends Activity {
 
-	private final static int BUTTON_SOUNDS_NUMBER = 5; 
-	private static final String SOUND_BUTTON_CLICK_TEMPLATE = "sounds/button_click%d.ogg";
+    private final static int BUTTON_SOUNDS_NUMBER = 5;
+    private static final String SOUND_BUTTON_CLICK_TEMPLATE = "sounds/button_click%d.ogg";
 
-	// slash is an empty comma placeholder in indicator font
-	private static final String EMPTY_INDICATOR = "/ / / / / / / / / / / / //"; 
+    // slash is an empty comma placeholder in indicator font
+    private static final String EMPTY_INDICATOR = "/ / / / / / / / / / / / //";
 
-	
-	private EmulatorInterface emulator = null;
-	void setEmulator(EmulatorInterface emulator) { this.emulator = emulator; }
-	
-	private int angleMode	= 0;
-	private int speedMode	= 0;
-	private int mkModel		= 0; // 0 for MK-61, 1 for MK-54
 
-	private boolean vibrate = true;
-	private boolean vibrateWithMoreIntensity = false;
-	private boolean buttonPressOnTouch = false;
-	private boolean isLandscape = false;
+    private EmulatorInterface emulator = null;
+    void setEmulator(EmulatorInterface emulator) { this.emulator = emulator; }
+
+    private int angleMode	= 0;
+    private int speedMode	= 0;
+    private int mkModel		= 0; // 0 for MK-61, 1 for MK-54
+
+    private boolean vibrate = true;
+    private boolean vibrateWithMoreIntensity = false;
+    private boolean buttonPressOnTouch = false;
+    private boolean isLandscape = false;
     private boolean hideSwitches  = false;
     private boolean grayscale  = false;
     
     private int poweredOn = 0;
-	private Vibrator vibrator = null;
+    private Vibrator vibrator = null;
+
+    private boolean makeSounds = false;
+    private int buttonSoundType = 0;
+    private SoundPool soundPool = null;
+    private int buttonSoundId[] = new int[BUTTON_SOUNDS_NUMBER];
 
-	private boolean makeSounds = false;
-	private int buttonSoundType = 0;
-	private SoundPool soundPool = null; 
-	private int buttonSoundId[] = new int[BUTTON_SOUNDS_NUMBER];
+    private SaveStateManager saveStateManager = null;
 
-	private SaveStateManager saveStateManager = null;
-	
-	// flags that regulate onPause/onResume behavior
-	static boolean splashScreenMode = false;
+    // flags that regulate onPause/onResume behavior
+    static boolean splashScreenMode = false;
 
-	// ----- UI initialization - common for onCreate and onConfigurationChange -----
+    // ----- UI initialization - common for onCreate and onConfigurationChange -----
     private void initializeUI() {
         
-	    List<View> keyboardViews = SkinHelper.getAllChildrenBFS(findViewById(R.id.tableLayoutKeyboard));
-	    for (View view: keyboardViews) {
-	    	if (view instanceof Button)
-	    		((Button)view).setOnTouchListener(onButtonTouchListener);
-	    }
+        List<View> keyboardViews = SkinHelper.getAllChildrenBFS(findViewById(R.id.tableLayoutKeyboard));
+        for (View view: keyboardViews) {
+            if (view instanceof Button)
+                ((Button)view).setOnTouchListener(onButtonTouchListener);
+        }
 
         // let AutoScaleTextView do the work - set font size and fix layout
         TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
@@ -82,7 +83,7 @@ public class MainActivity extends Activity {
         // preferences activation
         activateSettings();
         
-  	  	setIndicatorColor(-1);
+        setIndicatorColor(-1);
 
         // set listeners for slider movement
         SeekBar angleModeSlider	= (SeekBar) findViewById(R.id.angleModeSlider);
@@ -99,53 +100,53 @@ public class MainActivity extends Activity {
             @Override public void onProgressChanged(final SeekBar seekBar, int progress, boolean fromUser) { if (fromUser) onPower(progress); }   	
         });
                 
-   	  	View switches = findViewById(R.id.tableLayoutSwitches);
-       	switches.setVisibility(hideSwitches ? View.GONE : View.VISIBLE);
+        View switches = findViewById(R.id.tableLayoutSwitches);
+        switches.setVisibility(hideSwitches ? View.GONE : View.VISIBLE);
         
         findViewById(R.id.textView_Indicator).setOnLongClickListener(new View.OnLongClickListener() {
             @Override
             public boolean onLongClick(View v) {
-           		toggleSwitchesVisibility();
-				return true;
+                toggleSwitchesVisibility();
+                return true;
             }
         });
 
         findViewById(R.id.TextViewPowerOnOff).setOnLongClickListener(new View.OnLongClickListener() {
             @Override
             public boolean onLongClick(View v) {
-            	openOptionsMenu();
-            	return true;
+                openOptionsMenu();
+                return true;
             }
         });
     
     }
 
     // ----------------------- Activity life cycle handlers --------------------------------
-	@Override
+    @Override
     public void onCreate(Bundle savedInstanceState) {
-		super.onCreate(savedInstanceState);
+        super.onCreate(savedInstanceState);
 
         // preferences initialization
         PreferenceManager.setDefaultValues(this, R.layout.activity_preferences, false);
 
         // sound initialization
-		soundPool = new SoundPool(BUTTON_SOUNDS_NUMBER, AudioManager.STREAM_MUSIC, 0);
-		for (int i=0; i<BUTTON_SOUNDS_NUMBER; i++) {
-			try {
-				buttonSoundId[i] = soundPool.load(
-						getAssets().openFd(String.format(SOUND_BUTTON_CLICK_TEMPLATE, i+1)), 0);
-			} catch (IOException ignore) {}
-		}
-		
-		// UI initialization
+        soundPool = new SoundPool(BUTTON_SOUNDS_NUMBER, AudioManager.STREAM_MUSIC, 0);
+        for (int i=0; i<BUTTON_SOUNDS_NUMBER; i++) {
+            try {
+                buttonSoundId[i] = soundPool.load(
+                        getAssets().openFd(String.format(SOUND_BUTTON_CLICK_TEMPLATE, i+1)), 0);
+            } catch (IOException ignore) {}
+        }
+
+        // UI initialization
         setContentView(R.layout.activity_main);
 
-		saveStateManager = new SaveStateManager(this);
-    	MenuHelper.mainActivity = this;
-    	SkinHelper.mainActivity = this;
+        saveStateManager = new SaveStateManager(this);
+        MenuHelper.mainActivity = this;
+        SkinHelper.mainActivity = this;
+
+        SkinHelper.init();
 
-    	SkinHelper.init();
-    	
         // remember vibrator service
         vibrator = (Vibrator) this.getSystemService(VIBRATOR_SERVICE);
         
@@ -161,71 +162,74 @@ public class MainActivity extends Activity {
         setAngleModeControl(sharedPref.getInt(PreferencesActivity.ANGLE_MODE_PREFERENCE_KEY, PreferencesActivity.DEFAULT_ANGLE_MODE));
         setMkModel(sharedPref.getInt(PreferencesActivity.MK_MODEL_PREFERENCE_KEY, PreferencesActivity.DEFAULT_MK_MODEL), false);
         
-	}
+    }
         
-	@Override
+    @Override
     public void onDestroy() {
-		soundPool.release();
-		
-		saveStateManager.setMainActivity(null);
-    	MenuHelper.mainActivity = null;
-		
-		// remember speed mode, angle mode, mk model, etc. even if calculator was switched off before destroying
+        soundPool.release();
+
+        saveStateManager.setMainActivity(null);
+        MenuHelper.mainActivity = null;
+
+        // remember speed mode, angle mode, mk model, etc. even if calculator was switched off before destroying
         SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
-    	
+
         SharedPreferences.Editor editor = sharedPref.edit();
-    	editor.putInt(PreferencesActivity.SPEED_MODE_PREFERENCE_KEY, speedMode);
-    	editor.putInt(PreferencesActivity.ANGLE_MODE_PREFERENCE_KEY, angleMode);
-    	editor.putInt(PreferencesActivity.MK_MODEL_PREFERENCE_KEY,   mkModel);
-    	editor.putBoolean(PreferencesActivity.HIDE_SWITCHES_PREFERENCE_KEY, hideSwitches);
-    	editor.commit();
-    	
-    	super.onDestroy();
-	}
-	
+        editor.putInt(PreferencesActivity.SPEED_MODE_PREFERENCE_KEY, speedMode);
+        editor.putInt(PreferencesActivity.ANGLE_MODE_PREFERENCE_KEY, angleMode);
+        editor.putInt(PreferencesActivity.MK_MODEL_PREFERENCE_KEY,   mkModel);
+        editor.putBoolean(PreferencesActivity.HIDE_SWITCHES_PREFERENCE_KEY, hideSwitches);
+        editor.commit();
+
+        super.onDestroy();
+    }
+
     @Override
     public void onPause() {
-    	super.onPause();
-    	
-    	if (splashScreenMode) {
-    		splashScreenMode = false;
-    		return;
-    	}
-    	
-       	saveStateManager.saveStateStoppingEmulator(emulator, -1); // save persistence emulation state
-       	emulator = null;
+        super.onPause();
+
+        if (splashScreenMode) {
+            splashScreenMode = false;
+            return;
+        }
+
+        saveStateManager.saveStateStoppingEmulator(emulator, -1); // save persistence emulation state
+        emulator = null;
     }
 
     @Override
     public void onResume() {
-    	super.onResume();
-
-    	if (splashScreenMode) {
-    		return;
-    	}
-    	
-    	activateSettings();
-    	
-      	if (emulator == null) {
-      		saveStateManager.loadState(emulator, -1); // load persistence emulation state
-      	}
+        super.onResume();
+
+        if (splashScreenMode) {
+            return;
+        }
+
+        activateSettings();
+
+        if (emulator == null) {
+            saveStateManager.loadState(emulator, -1); // load persistence emulation state
+        }
     }
     
     // ----------------------- Menu hooks --------------------------------
     public boolean onPrepareOptionsMenu(Menu menu)
     {
-        MenuItem menu_save = menu.findItem(R.id.menu_save);      
+        MenuItem menu_save = menu.findItem(R.id.menu_save);
+        MenuItem menu_export = menu.findItem(R.id.menu_export);
         MenuItem menu_swap = menu.findItem(R.id.menu_swap_model);      
 
         if(poweredOn == 1) 
         {           
-        	menu_swap.setVisible(false);
-        	menu_save.setVisible(true);
+            menu_swap.setVisible(false);
+            menu_save.setVisible(true);
+            menu_export.setVisible(true);
         }
         else
         {
-        	menu_swap.setVisible(true);
-        	menu_save.setVisible(false);
+            menu_swap.setVisible(true);
+            menu_save.setVisible(false);
+            menu_export.setVisible(false);
         }
 
         return true;
@@ -233,39 +237,44 @@ public class MainActivity extends Activity {
     
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
-		getMenuInflater().inflate(R.menu.main, menu);
+        getMenuInflater().inflate(R.menu.main, menu);
         return true;
     }
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
-    	 switch (item.getItemId()) {
-			case R.id.menu_about:
-				MenuHelper.aboutDialog();
-				return true;
-			case R.id.menu_settings:
-				MenuHelper.goSettingsScreen();
-				return true;
-			case R.id.menu_swap_model:
-				MenuHelper.onChooseMkModel(mkModel);
-			    return true;
-			case R.id.menu_save:
-				saveStateManager.chooseAndUseSaveSlot(emulator, true);
-			    return true;
-			case R.id.menu_load:
-				saveStateManager.chooseAndUseSaveSlot(emulator, false);
-			    return true;
-			    
-			default:
-			    return super.onOptionsItemSelected(item);
-			}
+         switch (item.getItemId()) {
+            case R.id.menu_about:
+                MenuHelper.aboutDialog();
+                return true;
+            case R.id.menu_settings:
+                MenuHelper.goSettingsScreen();
+                return true;
+            case R.id.menu_swap_model:
+                MenuHelper.onChooseMkModel(mkModel);
+                return true;
+            case R.id.menu_save:
+                saveStateManager.chooseAndUseSaveSlot(emulator, true);
+                return true;
+            case R.id.menu_load:
+                saveStateManager.chooseAndUseSaveSlot(emulator, false);
+                return true;
+             case R.id.menu_export:
+                 saveStateManager.exportState(emulator);
+                 return true;
+             case R.id.menu_import:
+                 saveStateManager.importState(emulator);
+                 return true;
+            default:
+                return super.onOptionsItemSelected(item);
+            }
     }
     
     // ----------------------- Setting controls state --------------------------------
     void setAngleModeControl(int mode) {
-    	angleMode = mode;
-    	SeekBar angleModeSlider	= (SeekBar) findViewById(R.id.angleModeSlider);
-    	angleModeSlider.setProgress(angleMode);
+        angleMode = mode;
+        SeekBar angleModeSlider	= (SeekBar) findViewById(R.id.angleModeSlider);
+        angleModeSlider.setProgress(angleMode);
 
         ((RadioButton) findViewById(R.id.radioRadians)).setChecked(angleMode == 0);
         ((RadioButton) findViewById(R.id.radioGrads  )).setChecked(angleMode == 1);
@@ -281,95 +290,95 @@ public class MainActivity extends Activity {
     }
 
     void toggleSwitchesVisibility() {
-    	hideSwitches = !hideSwitches;
-		View switches = findViewById(R.id.tableLayoutSwitches);
-		switches.setVisibility(hideSwitches ? View.GONE : View.VISIBLE);
+        hideSwitches = !hideSwitches;
+        View switches = findViewById(R.id.tableLayoutSwitches);
+        switches.setVisibility(hideSwitches ? View.GONE : View.VISIBLE);
     }
 
     // ----------------------- UI update calls, also from other thread --------------------------------
-	// Show string on calculator's indicator 
+    // Show string on calculator's indicator
     public void displayIndicator(final String text) {
-    	runOnUiThread(new Runnable() {
-    	   public void run() {
-    		   TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
-    		   if (calculatorIndicator != null)
-    			   calculatorIndicator.setText(text);
-    	   }
-    	});
+        runOnUiThread(new Runnable() {
+           public void run() {
+               TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
+               if (calculatorIndicator != null)
+                   calculatorIndicator.setText(text);
+           }
+        });
     }
     
     // ----------------------- UI call backs --------------------------------
     // calculator indicator touch callback
     public void onIndicatorTouched(View view) {
         if (emulator != null) {
-        	emulator.setSpeedMode(1 - emulator.getSpeedMode());
-        	setIndicatorColor(emulator.getSpeedMode());
+            emulator.setSpeedMode(1 - emulator.getSpeedMode());
+            setIndicatorColor(emulator.getSpeedMode());
         }
     }
 
     // calculator power switch callback
     public void onPowerCheckBoxTouched(View view) {
-    	onPower(((CheckBox)view).isChecked() ? 1 : 0);
+        onPower(((CheckBox)view).isChecked() ? 1 : 0);
     }
     
     // common code for both power slider callback and power check box callback
     private void onPower(int progress) {
-    	if (poweredOn == progress)
-    		return;
-    	poweredOn = progress;
-    	if (vibrate) vibrator.vibrate(PreferencesActivity.VIBRATE_ON_OFF_SWITCH);
-    	switchOnCalculator(poweredOn == 1);
+        if (poweredOn == progress)
+            return;
+        poweredOn = progress;
+        if (vibrate) vibrator.vibrate(PreferencesActivity.VIBRATE_ON_OFF_SWITCH);
+        switchOnCalculator(poweredOn == 1);
     }
     
     // calculator angle mode switch callback
     public void onAngleModeRadioButtonTouched(View view) {
-    	onAngleMode(Integer.parseInt((String)view.getTag()));
+        onAngleMode(Integer.parseInt((String)view.getTag()));
     }
     
     // common code for both angle slider callback and angle radio boxes callback
     private void onAngleMode(int progress) {
-    	angleMode = progress;
+        angleMode = progress;
         if (emulator != null) {
-        	emulator.setAngleMode(angleMode);
-        	if (vibrate) vibrator.vibrate(PreferencesActivity.VIBRATE_ANGLE_SWITCH);
+            emulator.setAngleMode(angleMode);
+            if (vibrate) vibrator.vibrate(PreferencesActivity.VIBRATE_ANGLE_SWITCH);
         }
     }
 
     // calculator button touch callback
-	private OnTouchListener onButtonTouchListener = new OnTouchListener() {
+    private OnTouchListener onButtonTouchListener = new OnTouchListener() {
         @Override
         public boolean onTouch(View view, MotionEvent event) {
-        	if (buttonPressOnTouch && event.getAction() == MotionEvent.ACTION_DOWN ) {
-            	onKeypadButtonTouched(view);
-            	return true;
+            if (buttonPressOnTouch && event.getAction() == MotionEvent.ACTION_DOWN ) {
+                onKeypadButtonTouched(view);
+                return true;
             } else {
-            	return false;
+                return false;
             }
         }
     };
     
     // calculator button release callback (not just touched, but released !)
     public void onKeypadButtonTouched(View view) {
-    	if (emulator == null || view == null || view.getTag() == null)
-    		return;
-
-    	// buttonSoundType, when selected in Preferences, is 1-based
-    	if (makeSounds && buttonSoundType > 0)
-    		soundPool.play(buttonSoundId[buttonSoundType-1], 1, 1, 0, 0, 1);
-    	
-    	if (vibrate)
-    		vibrator.vibrate(vibrateWithMoreIntensity
-    			? PreferencesActivity.VIBRATE_KEYPAD_MORE
-    			: PreferencesActivity.VIBRATE_KEYPAD);
-    	
-    	int keycode = Integer.parseInt((String)view.getTag());
-    	emulator.keypad(keycode);
+        if (emulator == null || view == null || view.getTag() == null)
+            return;
+
+        // buttonSoundType, when selected in Preferences, is 1-based
+        if (makeSounds && buttonSoundType > 0)
+            soundPool.play(buttonSoundId[buttonSoundType-1], 1, 1, 0, 0, 1);
+
+        if (vibrate)
+            vibrator.vibrate(vibrateWithMoreIntensity
+                ? PreferencesActivity.VIBRATE_KEYPAD_MORE
+                : PreferencesActivity.VIBRATE_KEYPAD);
+
+        int keycode = Integer.parseInt((String)view.getTag());
+        emulator.keypad(keycode);
     }
 
     // ----------------------- Other --------------------------------
     void setIndicatorColor(int mode) {
-    	if (mode >= 0) speedMode = mode;
-    	SkinHelper.styleIndicator(grayscale, mode);
+        if (mode >= 0) speedMode = mode;
+        SkinHelper.styleIndicator(grayscale, mode);
     }
     
     @SuppressLint("NewApi")
@@ -383,61 +392,61 @@ public class MainActivity extends Activity {
     }
     
     void resizeIndicator() {
-    	AutoScaleTextView indicator = (AutoScaleTextView)findViewById(R.id.textView_Indicator);
-    	indicator.setWidth(getScreenSize(this).x);
-    	indicator.refitNow();
+        AutoScaleTextView indicator = (AutoScaleTextView)findViewById(R.id.textView_Indicator);
+        indicator.setWidth(getScreenSize(this).x);
+        indicator.refitNow();
     }
     
     
-	void setMkModel(int mkModel, boolean force) {
-		boolean doNothing = false;
-		if (mkModel == this.mkModel && !force)
-			doNothing = true;
+    void setMkModel(int mkModel, boolean force) {
+        boolean doNothing = false;
+        if (mkModel == this.mkModel && !force)
+            doNothing = true;
+
+        SkinHelper.setMkModelName(mkModel);
 
-		SkinHelper.setMkModelName(mkModel);
-		
         if (doNothing) return;
         
         SkinHelper.setMkModelSkin(mkModel);
-    	
-    	this.mkModel = mkModel;
+
+        this.mkModel = mkModel;
     }
-		
+
     private void activateSettings() {
         // all the default values are set in preferences.xml, so second argument in getters is dummy
-    	
+
         SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
         vibrate = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_VIBRATE,
-        								PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                        PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
         vibrateWithMoreIntensity = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_VIBRATE_KEYPAD_MORE,
-        												 PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                                         PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
         
         makeSounds = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_SOUND,
-				   						   PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                           PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
 
         String buttonSoundTypeString = sharedPref.getString(PreferencesActivity.PREFERENCE_BUTTON_SOUND, 
-        													PreferencesActivity.DEFAULT_DUMMY_STRING);
+                                                            PreferencesActivity.DEFAULT_DUMMY_STRING);
         buttonSoundType = Integer.parseInt(buttonSoundTypeString == null ? "0" : buttonSoundTypeString);
         
         buttonPressOnTouch = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_ON_BUTTON_TOUCH,
-        										   PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
-        		
+                                                   PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+
         grayscale = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_GRAYSCALE,
-										  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                          PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
 
         TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
-  		calculatorIndicator.setKeepScreenOn(
-  				sharedPref.getBoolean(PreferencesActivity.PREFERENCE_SCREEN_ALWAYS_ON,
-  									  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN));
-  		
-	    if (sharedPref.getBoolean(PreferencesActivity.PREFERENCE_FULL_SCREEN, 
-	    						  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN))
-	        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
-	    else
-	        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
-  		
+        calculatorIndicator.setKeepScreenOn(
+                sharedPref.getBoolean(PreferencesActivity.PREFERENCE_SCREEN_ALWAYS_ON,
+                                      PreferencesActivity.DEFAULT_DUMMY_BOOLEAN));
+
+        if (sharedPref.getBoolean(PreferencesActivity.PREFERENCE_FULL_SCREEN,
+                                  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN))
+            getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        else
+            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
         boolean sliderOnOff = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_SLIDER_ON_OFF, 
-													PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                                    PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
         
         SeekBar powerOnOffSlider 	= (SeekBar) findViewById(R.id.powerOnOffSlider);
         if (powerOnOffSlider   != null) powerOnOffSlider  .setVisibility(sliderOnOff ? View.VISIBLE : View.GONE);
@@ -445,7 +454,7 @@ public class MainActivity extends Activity {
         if (powerOnOffCheckBox != null) powerOnOffCheckBox.setVisibility(sliderOnOff ? View.GONE    : View.VISIBLE);
 
         boolean sliderAngle = sharedPref.getBoolean(PreferencesActivity.PREFERENCE_SLIDER_ANGLE, 
-													PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
+                                                    PreferencesActivity.DEFAULT_DUMMY_BOOLEAN);
         
         SeekBar angleModeSlider	= (SeekBar) findViewById(R.id.angleModeSlider);
         angleModeSlider.setVisibility(sliderAngle ? View.VISIBLE : View.GONE);
@@ -456,35 +465,35 @@ public class MainActivity extends Activity {
         // set background color, scale buttons text, set buttons borders, style labels above buttons, etc.
         // all the default values are set in preferences.xml, so second argument in getters is dummy
         SkinHelper.style(grayscale, emulator == null ? -1 : emulator.getSpeedMode(),
-        		Float.parseFloat(sharedPref.getString(PreferencesActivity.PREFERENCE_BUTTON_TEXT_SIZE,
-                							 		  PreferencesActivity.DEFAULT_DUMMY_STRING)),
+                Float.parseFloat(sharedPref.getString(PreferencesActivity.PREFERENCE_BUTTON_TEXT_SIZE,
+                                                      PreferencesActivity.DEFAULT_DUMMY_STRING)),
                 Float.parseFloat(sharedPref.getString(PreferencesActivity.PREFERENCE_LABEL_TEXT_SIZE,
-                									  PreferencesActivity.DEFAULT_DUMMY_STRING)),
+                                                      PreferencesActivity.DEFAULT_DUMMY_STRING)),
                 sharedPref.getBoolean(PreferencesActivity.PREFERENCE_BORDER_BLACK_BUTTONS,
-                					  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN),
+                                      PreferencesActivity.DEFAULT_DUMMY_BOOLEAN),
                 sharedPref.getBoolean(PreferencesActivity.PREFERENCE_BORDER_OTHER_BUTTONS,
-                					  PreferencesActivity.DEFAULT_DUMMY_BOOLEAN)
+                                      PreferencesActivity.DEFAULT_DUMMY_BOOLEAN)
         );
     }
         
     private void switchOnCalculator(boolean enable) {
-    	if (enable) {
-    		if (poweredOn == 1) {
-	            emulator = new com.cax.pmk.emulator.Emulator();
-	    		emulator.setAngleMode(angleMode);
-	    		emulator.setSpeedMode(speedMode);
-	    		emulator.setMkModel(mkModel);
-	    		emulator.initTransient(this);
-	        	setIndicatorColor(speedMode);
-	            emulator.start();
-    		}
-    	} else {
-    		if (emulator != null) {
-    			emulator.stopEmulator(true);
-    			emulator = null;
-    		}
-    		
-    		TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
+        if (enable) {
+            if (poweredOn == 1) {
+                emulator = new com.cax.pmk.emulator.Emulator();
+                emulator.setAngleMode(angleMode);
+                emulator.setSpeedMode(speedMode);
+                emulator.setMkModel(mkModel);
+                emulator.initTransient(this);
+                setIndicatorColor(speedMode);
+                emulator.start();
+            }
+        } else {
+            if (emulator != null) {
+                emulator.stopEmulator(true);
+                emulator = null;
+            }
+
+            TextView calculatorIndicator = (TextView) findViewById(R.id.textView_Indicator);
             calculatorIndicator.setText(EMPTY_INDICATOR);
             
             // just in case...
@@ -494,7 +503,7 @@ public class MainActivity extends Activity {
             saveStateManager.deleteSlot(-1);
 
             setIndicatorColor(-1);
-    	}
+        }
     }
 
 }
diff --git a/pmk/src/com/cax/pmk/MenuHelper.java b/pmk/app/src/main/java/com/cax/pmk/MenuHelper.java
similarity index 100%
rename from pmk/src/com/cax/pmk/MenuHelper.java
rename to pmk/app/src/main/java/com/cax/pmk/MenuHelper.java
diff --git a/pmk/src/com/cax/pmk/PreferencesActivity.java b/pmk/app/src/main/java/com/cax/pmk/PreferencesActivity.java
similarity index 100%
rename from pmk/src/com/cax/pmk/PreferencesActivity.java
rename to pmk/app/src/main/java/com/cax/pmk/PreferencesActivity.java
diff --git a/pmk/src/com/cax/pmk/SaveStateManager.java b/pmk/app/src/main/java/com/cax/pmk/SaveStateManager.java
similarity index 54%
rename from pmk/src/com/cax/pmk/SaveStateManager.java
rename to pmk/app/src/main/java/com/cax/pmk/SaveStateManager.java
index 41e072c..aaf008b 100644
--- a/pmk/src/com/cax/pmk/SaveStateManager.java
+++ b/pmk/app/src/main/java/com/cax/pmk/SaveStateManager.java
@@ -11,10 +11,13 @@ import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.os.Environment;
 import android.text.Editable;
 import android.text.InputFilter;
+import android.util.Log;
 import android.view.ContextThemeWrapper;
 import android.widget.EditText;
+import android.widget.Toast;
 
 public class SaveStateManager {
 	
@@ -82,8 +85,7 @@ public class SaveStateManager {
 		AlertDialog alert = builder.create();
 		alert.show();		
 	}
-	
-    
+
 	// ----------------------- Save/Load emulator state --------------------------------
     private void chooseNameAndSaveState(final EmulatorInterface emulator) {
     	String chosenName = emulator.getSaveStateName();
@@ -158,22 +160,68 @@ public class SaveStateManager {
     	String filename = getSlotFilename(slotNumber);
     	
     	FileOutputStream fileOut = null;
-    	ObjectOutputStream out = null;
+        try {
+            fileOut = mainActivity.openFileOutput(filename, Context.MODE_PRIVATE);
+            return saveStateStoppingEmulatorToFile(emulator, fileOut);
+        } catch(IOException i) {
+            return false;
+        } finally {
+            mainActivity.setEmulator(null);
+            try { if (fileOut != null) fileOut.close(); } catch(IOException i) {}
+        }
+    }
 
-    	emulator.stopEmulator(false);
-    	
-		try {
-			fileOut = mainActivity.openFileOutput(filename, Context.MODE_PRIVATE);
-			out = new ObjectOutputStream(fileOut);
-			out.writeObject(emulator);
-			return true;
-	    } catch(IOException i) {
-			  return false;
-		} finally {
-			mainActivity.setEmulator(null);
-			try { if (out != null)         out.close(); } catch(IOException i) {} 
-			try { if (fileOut != null) fileOut.close(); } catch(IOException i) {}
-		}
+    boolean exportState(final EmulatorInterface emulator) {
+        if (emulator == null) // disable saving when calculator is switched off
+            return false;
+
+        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
+            showErrorMessage(R.string.export_no_sd_card_error);
+            return false;
+        }
+
+        SimpleFileDialog FileOpenDialog =  new SimpleFileDialog(mainActivity, "FileSave",
+                new SimpleFileDialog.SimpleFileDialogListener()
+                {
+                    @Override
+                    public void onChosenDir(String chosenFileName)
+                    {
+                        File file = new File(chosenFileName);
+                        FileOutputStream fileOut = null;
+                        try {
+                            fileOut = new FileOutputStream(file);
+                            if (!saveStateStoppingEmulatorToFile(emulator, fileOut)) {
+                                showErrorMessage(R.string.export_common_error);
+                            }
+                        } catch (IOException e) {
+                            showErrorMessage(R.string.export_common_error);
+                        } finally {
+                            mainActivity.setEmulator(null);
+                            try { if (fileOut != null) fileOut.close(); } catch(IOException i) {}
+                        }
+                    }
+                });
+
+        FileOpenDialog.Default_File_Name = "dump.pmk";
+        FileOpenDialog.chooseFile_or_Dir();
+        return true;
+    }
+
+    private boolean saveStateStoppingEmulatorToFile(EmulatorInterface emulator, FileOutputStream fileOut) {
+        ObjectOutputStream out = null;
+
+        emulator.stopEmulator(false);
+
+        try {
+            out = new ObjectOutputStream(fileOut);
+            out.writeObject(emulator);
+            return true;
+        } catch(IOException i) {
+            return false;
+        } finally {
+            mainActivity.setEmulator(null);
+            try { if (out != null)         out.close(); } catch(IOException i) {}
+        }
     }
 
     boolean loadState(EmulatorInterface emulator, int slotNumber) {
@@ -183,40 +231,78 @@ public class SaveStateManager {
     		return false;
     	
 		FileInputStream fileIn = null;
-		ObjectInputStream in = null;
-
-		EmulatorInterface loadedEmulator = null;
-		try {
-			fileIn = mainActivity.openFileInput(filename);
-			in = new ObjectInputStream(fileIn);
-			loadedEmulator = (com.cax.pmk.emulator.Emulator) in.readObject();
-			in.close();
-			fileIn.close();
-			
-	    } catch(Exception i) {
-			  return false;
-		} finally {
-			try { if (in != null)         in.close(); } catch(IOException i) {} 
-			try { if (fileIn != null) fileIn.close(); } catch(IOException i) {}
-		}
-
-    	if (emulator != null) {
-    		emulator.stopEmulator(false);
-    	}
-    	
-    	mainActivity.setEmulator(loadedEmulator);
-    	emulator = loadedEmulator;
-    	emulator.initTransient(mainActivity);
+        boolean isLoaded = false;
+        try {
+            fileIn = mainActivity.openFileInput(filename);
+            isLoaded = loadStateFromFile(emulator, fileIn);
+        } catch(Exception i) {
+            return false;
+        } finally {
+            try { if (fileIn != null) fileIn.close(); } catch(IOException i) {}
+        }
+        return isLoaded;
+    }
 
-    	mainActivity.setMkModel(emulator.getMkModel(), false);
+    boolean importState(final EmulatorInterface emulator) {
 
-    	mainActivity.setIndicatorColor(emulator.getSpeedMode());
-    	mainActivity.setAngleModeControl(emulator.getAngleMode());
-    	mainActivity.setPowerOnOffControl(1);
-    	
-    	emulator.start();
+        SimpleFileDialog FileOpenDialog =  new SimpleFileDialog(mainActivity, "FileOpen",
+                new SimpleFileDialog.SimpleFileDialogListener()
+                {
+                    @Override
+                    public void onChosenDir(String chosenFileName)
+                    {
+                        File file = new File(chosenFileName);
+                        FileInputStream fileIn = null;
+                        try {
+                            fileIn = new FileInputStream(file);
+                            if (!loadStateFromFile(emulator, fileIn)) {
+                                showErrorMessage(R.string.import_common_error);
+                            }
+                        } catch (Exception e) {
+                            showErrorMessage(R.string.import_common_error);
+                        } finally {
+                            try { if (fileIn != null) fileIn.close(); } catch(IOException i) {}
+                        }
+                    }
+                });
+
+        FileOpenDialog.Default_File_Name = "dump.pmk";
+        FileOpenDialog.chooseFile_or_Dir();
+        return true;
+    }
+
+    private boolean loadStateFromFile(EmulatorInterface emulator, FileInputStream fileIn) {
+        ObjectInputStream in = null;
+        EmulatorInterface loadedEmulator = null;
+        try {
+            in = new ObjectInputStream(fileIn);
+            loadedEmulator = (com.cax.pmk.emulator.Emulator) in.readObject();
+            in.close();
+            fileIn.close();
+
+        } catch(Exception i) {
+            return false;
+        } finally {
+            try { if (in != null)         in.close(); } catch(IOException i) {}
+        }
+
+        if (emulator != null) {
+            emulator.stopEmulator(false);
+        }
 
-		return true;
+        mainActivity.setEmulator(loadedEmulator);
+        emulator = loadedEmulator;
+        emulator.initTransient(mainActivity);
+
+        mainActivity.setMkModel(emulator.getMkModel(), false);
+
+        mainActivity.setIndicatorColor(emulator.getSpeedMode());
+        mainActivity.setAngleModeControl(emulator.getAngleMode());
+        mainActivity.setPowerOnOffControl(1);
+
+        emulator.start();
+
+        return true;
     }
 
     void deleteSlot(int slot) {
@@ -224,5 +310,8 @@ public class SaveStateManager {
         if (file.exists())
         	file.delete();
     }
-    
+
+    private void showErrorMessage(int errorTextID) {
+        Toast.makeText(mainActivity, mainActivity.getString(errorTextID), Toast.LENGTH_SHORT).show();
+    }
 }
diff --git a/pmk/app/src/main/java/com/cax/pmk/SimpleFileDialog.java b/pmk/app/src/main/java/com/cax/pmk/SimpleFileDialog.java
new file mode 100644
index 0000000..7ca4d32
--- /dev/null
+++ b/pmk/app/src/main/java/com/cax/pmk/SimpleFileDialog.java
@@ -0,0 +1,389 @@
+// SimpleFileDialog.java
+//package com.scorchworks.demo;
+
+package com.cax.pmk;
+/*
+* 
+* This file is licensed under The Code Project Open License (CPOL) 1.02 
+* http://www.codeproject.com/info/cpol10.aspx
+* http://www.codeproject.com/info/CPOL.zip
+* 
+* License Preamble:
+* This License governs Your use of the Work. This License is intended to allow developers to use the Source
+* Code and Executable Files provided as part of the Work in any application in any form.
+* 
+* The main points subject to the terms of the License are:
+*    Source Code and Executable Files can be used in commercial applications;
+*    Source Code and Executable Files can be redistributed; and
+*    Source Code can be modified to create derivative works.
+*    No claim of suitability, guarantee, or any warranty whatsoever is provided. The software is provided "as-is".
+*    The Article(s) accompanying the Work may not be distributed or republished without the Author's consent
+* 
+* This License is entered between You, the individual or other entity reading or otherwise making use of
+* the Work licensed pursuant to this License and the individual or other entity which offers the Work
+* under the terms of this License ("Author").
+*  (See Links above for full license text)
+*/
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnClickListener;
+//import android.content.DialogInterface.OnKeyListener;
+import android.os.Environment;
+import android.text.Editable;
+import android.view.Gravity;
+//import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+public class SimpleFileDialog 
+{
+	private int FileOpen     = 0;
+	private int FileSave     = 1;
+	private int FolderChoose = 2;
+	private int Select_type = FileSave;
+	private String m_sdcardDirectory = "";
+	private Context m_context;
+	private TextView m_titleView1;
+	private TextView m_titleView;
+	public String Default_File_Name = "default.txt";
+	private String Selected_File_Name = Default_File_Name;
+	private EditText input_text;
+	
+	private String m_dir = "";
+	private List<String> m_subdirs = null;
+	private SimpleFileDialogListener m_SimpleFileDialogListener = null;
+	private ArrayAdapter<String> m_listAdapter = null;
+
+	//////////////////////////////////////////////////////
+	// Callback interface for selected directory
+	//////////////////////////////////////////////////////
+	public interface SimpleFileDialogListener 
+	{
+		public void onChosenDir(String chosenDir);
+	}
+
+	public SimpleFileDialog(Context context, String file_select_type, SimpleFileDialogListener SimpleFileDialogListener)
+	{
+		if (file_select_type.equals("FileOpen"))          Select_type = FileOpen;
+		else if (file_select_type.equals("FileSave"))     Select_type = FileSave;
+		else if (file_select_type.equals("FolderChoose")) Select_type = FolderChoose;
+		else Select_type = FileOpen;
+		
+		m_context = context;
+		m_sdcardDirectory = Environment.getExternalStorageDirectory().getAbsolutePath();
+		m_SimpleFileDialogListener = SimpleFileDialogListener;
+
+		try
+		{
+			m_sdcardDirectory = new File(m_sdcardDirectory).getCanonicalPath();
+		}
+		catch (IOException ioe)
+		{
+		}
+	}
+
+	///////////////////////////////////////////////////////////////////////
+	// chooseFile_or_Dir() - load directory chooser dialog for initial
+	// default sdcard directory
+	///////////////////////////////////////////////////////////////////////
+	public void chooseFile_or_Dir()
+	{
+		// Initial directory is sdcard directory
+		if (m_dir.equals(""))	chooseFile_or_Dir(m_sdcardDirectory);
+		else chooseFile_or_Dir(m_dir);
+	}
+
+	////////////////////////////////////////////////////////////////////////////////
+	// chooseFile_or_Dir(String dir) - load directory chooser dialog for initial 
+	// input 'dir' directory
+	////////////////////////////////////////////////////////////////////////////////
+	public void chooseFile_or_Dir(String dir)
+	{
+		File dirFile = new File(dir);
+		if (! dirFile.exists() || ! dirFile.isDirectory())
+		{
+			dir = m_sdcardDirectory;
+		}
+
+		try
+		{
+			dir = new File(dir).getCanonicalPath();
+		}
+		catch (IOException ioe)
+		{
+			return;
+		}
+
+		m_dir = dir;
+		m_subdirs = getDirectories(dir);
+
+		class SimpleFileDialogOnClickListener implements DialogInterface.OnClickListener
+		{
+			public void onClick(DialogInterface dialog, int item) 
+			{
+				String m_dir_old = m_dir;
+				String sel = "" + ((AlertDialog) dialog).getListView().getAdapter().getItem(item);
+				if (sel.charAt(sel.length()-1) == '/')	sel = sel.substring(0, sel.length()-1);
+				
+				// Navigate into the sub-directory
+				if (sel.equals(".."))
+				{
+					   m_dir = m_dir.substring(0, m_dir.lastIndexOf("/"));
+				}
+				else
+				{
+					   m_dir += "/" + sel;
+				}
+				Selected_File_Name = Default_File_Name;
+				
+				if ((new File(m_dir).isFile())) // If the selection is a regular file
+				{
+					m_dir = m_dir_old;
+					Selected_File_Name = sel;
+				}
+				
+				updateDirectory();
+			}
+		}
+
+		AlertDialog.Builder dialogBuilder = createDirectoryChooserDialog(dir, m_subdirs, 
+				new SimpleFileDialogOnClickListener());
+
+		dialogBuilder.setPositiveButton(m_context.getString(android.R.string.ok), new OnClickListener()
+		{
+			@Override
+			public void onClick(DialogInterface dialog, int which) 
+			{
+				// Current directory chosen
+				// Call registered listener supplied with the chosen directory
+				if (m_SimpleFileDialogListener != null){
+					{
+						if (Select_type == FileOpen || Select_type == FileSave)
+						{
+							Selected_File_Name= input_text.getText() +"";
+							m_SimpleFileDialogListener.onChosenDir(m_dir + "/" + Selected_File_Name);}
+						else
+						{
+							m_SimpleFileDialogListener.onChosenDir(m_dir);
+						}
+					}
+				}
+			}
+		}).setNegativeButton(m_context.getString(android.R.string.cancel), null);
+
+		final AlertDialog dirsDialog = dialogBuilder.create();
+
+		// Show directory chooser dialog
+		dirsDialog.show();
+	}
+
+	private boolean createSubDir(String newDir)
+	{
+		File newDirFile = new File(newDir);
+		if   (! newDirFile.exists() ) return newDirFile.mkdir();
+		else return false;
+	}
+	
+	private List<String> getDirectories(String dir)
+	{
+		List<String> dirs = new ArrayList<String>();
+		try
+		{
+			File dirFile = new File(dir);
+			
+			// if directory is not the base sd card directory add ".." for going up one directory
+			if (! m_dir.equals(m_sdcardDirectory) ) dirs.add("..");
+			
+			if (! dirFile.exists() || ! dirFile.isDirectory())
+			{
+				return dirs;
+			}
+
+			for (File file : dirFile.listFiles()) 
+			{
+                String fileName = file.getName();
+                if (!fileName.equals("..") && fileName.startsWith(".")) {
+                    continue;   //skip hidden files
+                }
+				if ( file.isDirectory())
+				{
+					// Add "/" to directory names to identify them in the list
+					dirs.add( fileName + "/" );
+				}
+				else if (Select_type == FileSave || Select_type == FileOpen)
+				{
+					// Add file names to the list if we are doing a file save or file open operation
+					dirs.add( fileName );
+				}
+			}
+		}
+		catch (Exception e)	{}
+
+		Collections.sort(dirs, new Comparator<String>()
+		{	
+			public int compare(String o1, String o2) 
+			{
+				return o1.compareTo(o2);
+			}
+		});
+		return dirs;
+	}
+	
+	//////////////////////////////////////////////////////////////////////////////////////////////////////////
+	//////                                   START DIALOG DEFINITION                                    //////
+	//////////////////////////////////////////////////////////////////////////////////////////////////////////
+	private AlertDialog.Builder createDirectoryChooserDialog(String title, List<String> listItems,
+			DialogInterface.OnClickListener onClickListener)
+	{
+		AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(m_context);
+		////////////////////////////////////////////////
+		// Create title text showing file select type // 
+		////////////////////////////////////////////////
+		m_titleView1 = new TextView(m_context);
+		m_titleView1.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+		//m_titleView1.setTextAppearance(m_context, android.R.style.TextAppearance_Large);
+		//m_titleView1.setTextColor( m_context.getResources().getColor(android.R.color.black) );
+				
+		if (Select_type == FileOpen    ) m_titleView1.setText("Open:");
+		if (Select_type == FileSave    ) m_titleView1.setText("Save As:");
+		if (Select_type == FolderChoose) m_titleView1.setText("Folder Select:");
+		
+		//need to make this a variable Save as, Open, Select Directory
+		m_titleView1.setGravity(Gravity.CENTER_VERTICAL);
+		m_titleView1.setBackgroundColor(-12303292); // dark gray 	-12303292
+		m_titleView1.setTextColor( m_context.getResources().getColor(android.R.color.white) );
+
+		// Create custom view for AlertDialog title
+		LinearLayout titleLayout1 = new LinearLayout(m_context);
+		titleLayout1.setOrientation(LinearLayout.VERTICAL);
+		titleLayout1.addView(m_titleView1);
+
+
+		if (Select_type == FolderChoose || Select_type == FileSave)
+		{
+			///////////////////////////////
+			// Create New Folder Button  //
+			///////////////////////////////
+			Button newDirButton = new Button(m_context);
+			newDirButton.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+			newDirButton.setText("New Folder");
+			newDirButton.setOnClickListener(new View.OnClickListener() 
+			{
+				@Override
+				public void onClick(View v) 
+				{
+					final EditText input = new EditText(m_context);
+
+					// Show new folder name input dialog
+					new AlertDialog.Builder(m_context).
+					setTitle("New Folder Name").
+					setView(input).setPositiveButton(m_context.getString(android.R.string.ok), new DialogInterface.OnClickListener()
+					{
+						public void onClick(DialogInterface dialog, int whichButton) 
+						{
+							Editable newDir = input.getText();
+							String newDirName = newDir.toString();
+							// Create new directory
+							if ( createSubDir(m_dir + "/" + newDirName) )
+							{
+								// Navigate into the new directory
+								m_dir += "/" + newDirName;
+								updateDirectory();
+							}
+							else
+							{
+								Toast.makeText(	m_context, "Failed to create '" 
+										+ newDirName + "' folder", Toast.LENGTH_SHORT).show();
+							}
+						}
+					}).setNegativeButton(m_context.getString(android.R.string.cancel), null).show();
+				}
+			}
+					);
+			titleLayout1.addView(newDirButton);
+		}
+
+		/////////////////////////////////////////////////////
+		// Create View with folder path and entry text box // 
+		/////////////////////////////////////////////////////
+		LinearLayout titleLayout = new LinearLayout(m_context);
+		titleLayout.setOrientation(LinearLayout.VERTICAL);
+		
+		m_titleView = new TextView(m_context);
+		m_titleView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+		m_titleView.setBackgroundColor(-12303292); // dark gray -12303292
+		m_titleView.setTextColor( m_context.getResources().getColor(android.R.color.white) );
+		m_titleView.setGravity(Gravity.CENTER_VERTICAL);
+		m_titleView.setText(title);
+
+		titleLayout.addView(m_titleView);
+		
+		if (Select_type == FileOpen || Select_type == FileSave)
+		{
+			input_text = new EditText(m_context);
+			input_text.setText(Default_File_Name);
+            if (Select_type == FileOpen) {
+                input_text.setEnabled(false);
+            }
+			titleLayout.addView(input_text);
+		}
+		//////////////////////////////////////////
+		// Set Views and Finish Dialog builder  //
+		//////////////////////////////////////////
+		dialogBuilder.setView(titleLayout);
+		dialogBuilder.setCustomTitle(titleLayout1);
+		m_listAdapter = createListAdapter(listItems);
+		dialogBuilder.setSingleChoiceItems(m_listAdapter, -1, onClickListener);
+		dialogBuilder.setCancelable(false);
+		return dialogBuilder;
+	}
+
+	private void updateDirectory()
+	{
+		m_subdirs.clear();
+		m_subdirs.addAll( getDirectories(m_dir) );
+		m_titleView.setText(m_dir);
+		m_listAdapter.notifyDataSetChanged();
+		//#scorch
+		if (Select_type == FileSave || Select_type == FileOpen)
+		{
+			input_text.setText(Selected_File_Name);
+		}
+	}
+
+	private ArrayAdapter<String> createListAdapter(List<String> items)
+	{
+		return new ArrayAdapter<String>(m_context, android.R.layout.select_dialog_item, android.R.id.text1, items)
+		{
+			@Override
+			public View getView(int position, View convertView, ViewGroup parent) 
+			{
+				View v = super.getView(position, convertView, parent);
+				if (v instanceof TextView)
+				{
+					// Enable list item (directory) text wrapping
+					TextView tv = (TextView) v;
+					tv.getLayoutParams().height = LayoutParams.WRAP_CONTENT;
+					tv.setEllipsize(null);
+				}
+				return v;
+			}
+		};
+	}
+} 
diff --git a/pmk/app/src/main/java/com/cax/pmk/SkinHelper.java b/pmk/app/src/main/java/com/cax/pmk/SkinHelper.java
new file mode 100644
index 0000000..654ddb7
--- /dev/null
+++ b/pmk/app/src/main/java/com/cax/pmk/SkinHelper.java
@@ -0,0 +1,339 @@
+package com.cax.pmk;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+
+import android.graphics.Typeface;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.RelativeLayout.LayoutParams;
+
+public class SkinHelper {
+    static MainActivity mainActivity;
+    private static int yellowLabelLeftPadding = 0;
+    private static float buttonTextSize = 0;
+    private static float labelTextSize = 0;
+
+    private static final String FONT_INDICATOR_DIGITS	= "fonts/digital-7-mod.ttf";
+    private static final String FONT_MISSING_SYMBOLS	= "fonts/missing-symbols.ttf";
+
+    private static final int [] blackButtons = {
+        R.id.buttonStepBack,	R.id.buttonStepForward, R.id.buttonReturn,	R.id.buttonStopStart,
+        R.id.buttonXToRegister,	R.id.buttonRegisterToX, R.id.buttonGoto,	R.id.buttonSubroutine
+    };
+
+    private static final int[] blueLabels = {
+        R.id.labelFloor,	R.id.labelFrac,	R.id.labelMax,
+        R.id.labelAbs,		R.id.labelSign,	R.id.labelFromHM,	R.id.labelToHM,
+                                            R.id.labelFromHMS,	R.id.labelToHMS,R.id.labelRandom,
+        R.id.labelNOP,		R.id.labelAnd,	R.id.labelOr,		R.id.labelXor,	R.id.labelInv
+    };
+
+    // blue labels text storage for switching between mk61 and mk54 
+    private static final CharSequence[] blueLabelsText = new CharSequence[blueLabels.length];
+    
+    // yellow labels above buttons that have only this label
+    private static final int[] singleYellowLabels = {
+        R.id.labelLessThanZero,	R.id.labelIsZero,	R.id.labelGreaterOrEqualsZero,	R.id.labelIsNotZero,
+        R.id.labelL0,			R.id.labelL1,		R.id.labelL2,					R.id.labelL3,
+                                                                                    R.id.labelXpower2,
+                                                    R.id.labelSquare,				R.id.label1divX,
+        R.id.labelEpowerX,		R.id.labelLg
+    };
+
+    // yellow labels above buttons that have both yellow and blue labels
+    private static final int[] pairedYellowLabels = {
+        R.id.labelSin,		R.id.labelCos,		R.id.labelTg,
+        R.id.labelArcSin,	R.id.labelArcCos,	R.id.labelArcTg,	R.id.labelPi,
+                                                R.id.labelLn,		R.id.labelXpowerY,	R.id.labelBx,
+        R.id.label10powerX,	R.id.labelDot,		R.id.labelAVT,		R.id.labelPRG,		R.id.labelCF
+    };
+
+    static void init() {
+        // remember blue labels text for switching between mk61/54
+        for (int i=0; i < blueLabels.length; i++) {
+            blueLabelsText[i] = ((TextView) mainActivity.findViewById(blueLabels[i])).getText();
+        }
+
+        // remember labels padding for later use
+        yellowLabelLeftPadding = mainActivity.findViewById(R.id.label10powerX).getPaddingLeft();
+        
+        // remember button and label text size for later use
+        buttonTextSize = ((Button)  mainActivity.findViewById(R.id.buttonF    )).getTextSize();
+        labelTextSize  = ((TextView)mainActivity.findViewById(R.id.labelSquare)).getTextSize();
+
+        // style indicator
+        TextView calculatorIndicator = (TextView) mainActivity.findViewById(R.id.textView_Indicator);
+        Typeface tf = Typeface.createFromAsset(mainActivity.getAssets(), FONT_INDICATOR_DIGITS);
+        calculatorIndicator.setTypeface(tf);
+
+        // use manually created symbols for some labels
+        tf = Typeface.createFromAsset(mainActivity.getAssets(), FONT_MISSING_SYMBOLS);
+        for (int viewId : new int[] { R.id.labelSquare, R.id.labelEpowerX, R.id.label10powerX, R.id.labelXpowerY, R.id.labelDot }) {
+            ((TextView)mainActivity.findViewById(viewId)).setTypeface(tf);
+        }
+        
+        // use manually created symbols for some buttons
+        for (int viewId : new int[] { R.id.buttonUpStack, 		R.id.buttonStepBack, 	R.id.buttonStepForward, 
+                                      R.id.buttonRegisterToX, 	R.id.buttonXToRegister, R.id.buttonExchangeXY}) {
+            if (mainActivity.findViewById(viewId) != null)
+                ((Button)mainActivity.findViewById(viewId)).setTypeface(tf, Typeface.NORMAL);
+        }
+
+    }
+
+    static void setMkModelName(int mkModel) {
+        if (mainActivity.findViewById(R.id.TextViewTableCellCalculatorName) != null)
+            ((TextView) mainActivity.findViewById(R.id.TextViewTableCellCalculatorName))
+                .setText(mainActivity.getString(R.string.electronica) + "  MK" + (mkModel==1 ? "-54" : " 61"));
+    }
+
+    static void setMkModelSkin(int mkModel) {
+
+        if (mkModel == 1) { // 1 for MK-54
+
+            for (int i=0; i < blueLabels.length; i++) {
+
+                // remove blue labels
+                TextView blueLabel = (TextView) mainActivity.findViewById(blueLabels[i]);
+                blueLabel.setText("");
+
+                // center yellow labels
+                View modView = mainActivity.findViewById(pairedYellowLabels[i]);
+                modView.setPadding(0, 0, 0, 0);
+
+                LayoutParams params = (LayoutParams) modView.getLayoutParams();
+                params.addRule(RelativeLayout.ALIGN_PARENT_LEFT, 0);
+                params.addRule(RelativeLayout.CENTER_IN_PARENT);
+
+            }
+            // remove "e", add white "НОП", replace "CX" with "Cx"
+            ((TextView) mainActivity.findViewById(R.id.labelE)).setText("");
+            ((TextView) mainActivity.findViewById(R.id.labelNop54)).setText("НОП");
+
+            Button clearButton = (Button)mainActivity.findViewById(R.id.buttonClear);
+            clearButton.setText("Cx");
+            Typeface tf = clearButton.getTypeface();
+            Button b = (Button) mainActivity.findViewById(R.id.buttonRegisterToX);
+            b.setText("ИП");
+            b.setTypeface(tf);
+
+            b = (Button)mainActivity.findViewById(R.id.buttonXToRegister);
+            b.setText("П");
+            b.setTypeface(tf);
+
+            b = (Button)mainActivity.findViewById(R.id.buttonExchangeXY);
+            b.setText("XY");
+            b.setTypeface(tf);
+        } else { // 0 for MK-61
+
+            for (int i=0; i < blueLabels.length; i++) {
+                // align yellow labels on the left side
+                View modView = mainActivity.findViewById(pairedYellowLabels[i]);
+                modView.setPadding(yellowLabelLeftPadding, 0, 0, 0);
+
+                LayoutParams params = (LayoutParams) modView.getLayoutParams();
+                params.addRule(RelativeLayout.CENTER_IN_PARENT, 0);
+                params.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+
+                // add back blue labels
+                TextView blueLabel = (TextView) mainActivity.findViewById(blueLabels[i]);
+                blueLabel.setText(blueLabelsText[i]);
+            }
+
+            // add "e", remove white "НОП", replace "Cx" with "CX"
+            ((TextView) mainActivity.findViewById(R.id.labelE)).setText("e");
+            ((TextView) mainActivity.findViewById(R.id.labelNop54)).setText("");
+            ((Button)mainActivity.findViewById(R.id.buttonClear)).setText("CX");
+
+            // use manually created symbols for some buttons
+            Typeface tf = Typeface.createFromAsset(mainActivity.getAssets(), FONT_MISSING_SYMBOLS);
+            Button b = (Button) mainActivity.findViewById(R.id.buttonRegisterToX);
+            b.setText(mainActivity.getString(R.string.buttonRegisterToX));
+            b.setTypeface(tf, Typeface.NORMAL);
+
+            b = (Button)mainActivity.findViewById(R.id.buttonXToRegister);
+            b.setText(mainActivity.getString(R.string.buttonXToRegister));
+            b.setTypeface(tf, Typeface.NORMAL);
+
+            b = (Button)mainActivity.findViewById(R.id.buttonExchangeXY);
+            b.setText(mainActivity.getString(R.string.buttonExchangeXY));
+            b.setTypeface(tf, Typeface.NORMAL);
+        }
+    }
+
+    static List<View> getAllChildrenBFS(View v) {
+        List<View> visited = new ArrayList<View>();
+        List<View> unvisited = new ArrayList<View>();
+        unvisited.add(v);
+
+        while (!unvisited.isEmpty()) {
+            View child = unvisited.remove(0);
+            visited.add(child);
+            if (!(child instanceof ViewGroup)) continue;
+            ViewGroup group = (ViewGroup) child;
+            final int childCount = group.getChildCount();
+            for (int i=0; i<childCount; i++) unvisited.add(group.getChildAt(i));
+        }
+
+        return visited;
+    }
+
+    static void style(boolean grayscale, int indicatorMode,
+                float prefButtonTextSize, float prefLabelTextSize,
+                boolean borderBlackButtons, boolean borderOtherButtons) {
+        // set background
+        styleScreen(grayscale);
+
+        // style indicator
+        styleIndicator(grayscale, indicatorMode);
+
+        // scale buttons text and set borders
+        SkinHelper.styleButtons(grayscale,
+                prefButtonTextSize, prefLabelTextSize,
+                borderBlackButtons, borderOtherButtons);
+        
+        // style labels above buttons
+        SkinHelper.styleLabels(grayscale);
+    }
+
+    static void styleIndicator(boolean grayscale, int mode) {
+
+        TextView calculatorIndicator = (TextView) mainActivity.findViewById(R.id.textView_Indicator);
+
+        // set indicator digits color
+        calculatorIndicator.setTextColor(mainActivity.getResources().getColor(grayscale
+                        ? R.color.indicatorDigitsGrayscale
+                        : R.color.indicatorDigits
+        ));
+
+        // set indicator background color
+        int color;
+        if (mode < 0) {
+            color = R.color.indicatorOff;
+        } else {
+            color = (mode == 0)
+                    ? (grayscale
+                            ? R.color.indicatorFastSpeedModeGrayscale
+                            : R.color.indicatorFastSpeedMode
+                      )
+                    : (grayscale
+                            ? R.color.indicatorSlowSpeedModeGrayscale
+                            : R.color.indicatorSlowSpeedMode
+                      );
+        }
+
+        calculatorIndicator.setBackgroundColor(mainActivity.getResources().getColor(color));
+    }
+    
+    private static void styleScreen(boolean grayscale) {
+        mainActivity.findViewById(R.id.mainLayout).setBackgroundColor(
+                mainActivity.getResources().getColor(grayscale
+                            ? R.color.commonBackgroundGrayscale
+                            : R.color.commonBackground));
+    }
+
+    private static void styleLabels(boolean grayscale) {
+        for (int i=0; i < singleYellowLabels.length; i++) {
+            ((TextView)mainActivity.findViewById(singleYellowLabels[i])).setTextColor(
+                    (mainActivity.getResources().getColor(grayscale
+                            ? R.color.aboveButtonTextYellowGrayscale
+                            : R.color.aboveButtonTextYellow)));
+        }
+
+        for (int i=0; i < pairedYellowLabels.length; i++) {
+            ((TextView)mainActivity.findViewById(pairedYellowLabels[i])).setTextColor(
+                    (mainActivity.getResources().getColor(grayscale
+                            ? R.color.aboveButtonTextYellowGrayscale
+                            : R.color.aboveButtonTextYellow)));
+        }
+
+        for (int i=0; i < blueLabels.length; i++) {
+            ((TextView)mainActivity.findViewById(blueLabels[i])).setTextColor(
+                    (mainActivity.getResources().getColor(grayscale
+                            ? R.color.aboveButtonTextBlueGrayscale
+                            : R.color.aboveButtonTextBlue)));
+        }
+    }
+    
+    private static void styleButtons(boolean grayscale, 
+            float prefButtonTextSize, float prefLabelTextSize,
+            boolean borderBlackButtons, boolean borderOtherButtons) {
+
+        float chosenButtonTextSize = buttonTextSize * prefButtonTextSize;
+        float chosenLabelTextSize  = labelTextSize  * prefLabelTextSize;
+
+        HashSet<View> set = new HashSet<View>(getAllChildrenBFS(mainActivity.findViewById(R.id.tableLayoutKeyboard)));
+        for (View view: set) {
+            if (view instanceof Button) {
+                Button b = (Button)view;
+                b.setTextSize(TypedValue.COMPLEX_UNIT_PX, chosenButtonTextSize);
+                boolean isBlack = false;
+                for (int j=0; j < blackButtons.length; j++) if (b.getId() == blackButtons[j]) { isBlack = true; break; }
+
+                if (isBlack) {
+                    b.setBackgroundResource(borderBlackButtons
+                            ? R.drawable.button_black_border
+                            : R.drawable.button_black
+                    );
+
+                } else if (b.getId() == R.id.buttonF) {
+                        b.setBackgroundResource(borderOtherButtons
+                                ?	(grayscale
+                                        ? R.drawable.button_yellow_border_grayscale
+                                        : R.drawable.button_yellow_border
+                                    )
+                                :	(grayscale
+                                        ? R.drawable.button_yellow_grayscale
+                                        : R.drawable.button_yellow
+                                    )
+                        );
+
+                } else if (b.getId() == R.id.buttonK) {
+                        b.setBackgroundResource(borderOtherButtons
+                                ?	(grayscale
+                                        ? R.drawable.button_blue_border_grayscale
+                                        : R.drawable.button_blue_border
+                                    )
+                                :	(grayscale
+                                        ? R.drawable.button_blue_grayscale
+                                        : R.drawable.button_blue
+                                    )
+                        );
+
+                } else if (b.getId() == R.id.buttonClear) {
+                        b.setBackgroundResource(borderOtherButtons
+                                ?	(grayscale
+                                        ? R.drawable.button_red_border_grayscale
+                                        : R.drawable.button_red_border
+                                    )
+                                :	(grayscale
+                                        ? R.drawable.button_red_grayscale
+                                        : R.drawable.button_red
+                                    )
+                        );
+
+                } else {
+                        b.setBackgroundResource(borderOtherButtons
+                                ? R.drawable.button_other_border
+                                : R.drawable.button_other
+                        );
+                }
+
+            } else if (view instanceof TextView) {
+                ((TextView)view).setTextSize(TypedValue.COMPLEX_UNIT_PX, chosenLabelTextSize);
+            }
+        }
+
+        float smallerButtonTextSize = (float) (chosenButtonTextSize * 0.8);
+        ((Button)mainActivity.findViewById(R.id.buttonReturn   )).setTextSize(TypedValue.COMPLEX_UNIT_PX, smallerButtonTextSize);
+        ((Button)mainActivity.findViewById(R.id.buttonStopStart)).setTextSize(TypedValue.COMPLEX_UNIT_PX, smallerButtonTextSize);
+    }
+    
+}
diff --git a/pmk/src/com/cax/pmk/SplashScreenActivity.java b/pmk/app/src/main/java/com/cax/pmk/SplashScreenActivity.java
similarity index 100%
rename from pmk/src/com/cax/pmk/SplashScreenActivity.java
rename to pmk/app/src/main/java/com/cax/pmk/SplashScreenActivity.java
diff --git a/pmk/src/com/cax/pmk/emulator/Emulator.java b/pmk/app/src/main/java/com/cax/pmk/emulator/Emulator.java
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/Emulator.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/Emulator.java
diff --git a/pmk/src/com/cax/pmk/emulator/MCU.java b/pmk/app/src/main/java/com/cax/pmk/emulator/MCU.java
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/MCU.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/MCU.java
diff --git a/pmk/src/com/cax/pmk/emulator/MCommands.java b/pmk/app/src/main/java/com/cax/pmk/emulator/MCommands.java
old mode 100755
new mode 100644
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/MCommands.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/MCommands.java
diff --git a/pmk/src/com/cax/pmk/emulator/Memory.java b/pmk/app/src/main/java/com/cax/pmk/emulator/Memory.java
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/Memory.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/Memory.java
diff --git a/pmk/src/com/cax/pmk/emulator/Synchro.java b/pmk/app/src/main/java/com/cax/pmk/emulator/Synchro.java
old mode 100755
new mode 100644
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/Synchro.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/Synchro.java
diff --git a/pmk/src/com/cax/pmk/emulator/UCommands.java b/pmk/app/src/main/java/com/cax/pmk/emulator/UCommands.java
old mode 100755
new mode 100644
similarity index 100%
rename from pmk/src/com/cax/pmk/emulator/UCommands.java
rename to pmk/app/src/main/java/com/cax/pmk/emulator/UCommands.java
diff --git a/pmk/src/com/cax/pmk/widget/AutoScaleTextView.java b/pmk/app/src/main/java/com/cax/pmk/widget/AutoScaleTextView.java
similarity index 100%
rename from pmk/src/com/cax/pmk/widget/AutoScaleTextView.java
rename to pmk/app/src/main/java/com/cax/pmk/widget/AutoScaleTextView.java
diff --git a/pmk/src/com/cax/pmk/widget/Slider.java b/pmk/app/src/main/java/com/cax/pmk/widget/Slider.java
similarity index 100%
rename from pmk/src/com/cax/pmk/widget/Slider.java
rename to pmk/app/src/main/java/com/cax/pmk/widget/Slider.java
diff --git a/pmk/src/com/cax/pmk/SkinHelper.java b/pmk/src/com/cax/pmk/SkinHelper.java
deleted file mode 100644
index 83c623f..0000000
--- a/pmk/src/com/cax/pmk/SkinHelper.java
+++ /dev/null
@@ -1,311 +0,0 @@
-package com.cax.pmk;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-
-import android.graphics.Typeface;
-import android.util.TypedValue;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-import android.widget.RelativeLayout.LayoutParams;
-
-public class SkinHelper {
-	static MainActivity mainActivity;
-	private static int yellowLabelLeftPadding = 0;
-	private static float buttonTextSize = 0;
-	private static float labelTextSize = 0;
-	
-	private static final String FONT_INDICATOR_DIGITS	= "fonts/digital-7-mod.ttf";
-	private static final String FONT_MISSING_SYMBOLS	= "fonts/missing-symbols.ttf";
-	
-	private static final int [] blackButtons = {
-		R.id.buttonStepBack,	R.id.buttonStepForward, R.id.buttonReturn,	R.id.buttonStopStart,
-		R.id.buttonXToRegister,	R.id.buttonRegisterToX, R.id.buttonGoto,	R.id.buttonSubroutine
-	};
-
-    private static final int[] blueLabels = {
-		R.id.labelFloor,	R.id.labelFrac,	R.id.labelMax, 
-		R.id.labelAbs,		R.id.labelSign,	R.id.labelFromHM,	R.id.labelToHM,
-											R.id.labelFromHMS,	R.id.labelToHMS,R.id.labelRandom,
-		R.id.labelNOP,		R.id.labelAnd,	R.id.labelOr,		R.id.labelXor,	R.id.labelInv
-	};
-	
-    // blue labels text storage for switching between mk61 and mk54 
-	private static final CharSequence[] blueLabelsText = new CharSequence[blueLabels.length];
-    
-	// yellow labels above buttons that have only this label
-	private static final int[] singleYellowLabels = {
-		R.id.labelLessThanZero,	R.id.labelIsZero,	R.id.labelGreaterOrEqualsZero,	R.id.labelIsNotZero,
-		R.id.labelL0,			R.id.labelL1,		R.id.labelL2,					R.id.labelL3,
-																					R.id.labelXpower2,
-													R.id.labelSquare,				R.id.label1divX,
-		R.id.labelEpowerX,		R.id.labelLg
-	};
-
-	// yellow labels above buttons that have both yellow and blue labels
-	private static final int[] pairedYellowLabels = {
-		R.id.labelSin,		R.id.labelCos,		R.id.labelTg,
-		R.id.labelArcSin,	R.id.labelArcCos,	R.id.labelArcTg,	R.id.labelPi,
-												R.id.labelLn,		R.id.labelXpowerY,	R.id.labelBx,
-		R.id.label10powerX,	R.id.labelDot,		R.id.labelAVT,		R.id.labelPRG,		R.id.labelCF
-	};
-	
-	static void init() {
-		// remember blue labels text for switching between mk61/54
-		for (int i=0; i < blueLabels.length; i++) {
-	    	blueLabelsText[i] = ((TextView) mainActivity.findViewById(blueLabels[i])).getText(); 
-		}
-
-        // remember labels padding for later use
-        yellowLabelLeftPadding = mainActivity.findViewById(R.id.label10powerX).getPaddingLeft();
-        
-    	// remember button and label text size for later use
-	    buttonTextSize = ((Button)  mainActivity.findViewById(R.id.buttonF    )).getTextSize();
-	    labelTextSize  = ((TextView)mainActivity.findViewById(R.id.labelSquare)).getTextSize();
-
-	    // style indicator
-        TextView calculatorIndicator = (TextView) mainActivity.findViewById(R.id.textView_Indicator);
-        Typeface tf = Typeface.createFromAsset(mainActivity.getAssets(), FONT_INDICATOR_DIGITS);
-        calculatorIndicator.setTypeface(tf);
-
-        // use manually created symbols for some labels
-        tf = Typeface.createFromAsset(mainActivity.getAssets(), FONT_MISSING_SYMBOLS);
-        for (int viewId : new int[] { R.id.labelSquare, R.id.labelEpowerX, R.id.label10powerX, R.id.labelXpowerY, R.id.labelDot }) {
-        	((TextView)mainActivity.findViewById(viewId)).setTypeface(tf);
-        }
-        
-        // use manually created symbols for some buttons
-        for (int viewId : new int[] { R.id.buttonUpStack, 		R.id.buttonStepBack, 	R.id.buttonStepForward, 
-        							  R.id.buttonRegisterToX, 	R.id.buttonXToRegister, R.id.buttonExchangeXY }) {
-        	if (mainActivity.findViewById(viewId) != null)
-        		((Button)mainActivity.findViewById(viewId)).setTypeface(tf, Typeface.NORMAL);
-        }
-
-	}
-	
-	static void setMkModelName(int mkModel) {
-		if (mainActivity.findViewById(R.id.TextViewTableCellCalculatorName) != null)
-			((TextView) mainActivity.findViewById(R.id.TextViewTableCellCalculatorName))
-				.setText(mainActivity.getString(R.string.electronica) + "  MK" + (mkModel==1 ? "-54" : " 61"));
-	}
-	
-	static void setMkModelSkin(int mkModel) {
-
-		if (mkModel == 1) { // 1 for MK-54
-    		
-    		for (int i=0; i < blueLabels.length; i++) {
-
-    			// remove blue labels
-		    	TextView blueLabel = (TextView) mainActivity.findViewById(blueLabels[i]);
-		    	blueLabel.setText("");
-
-		    	// center yellow labels
-		    	View modView = (TextView) mainActivity.findViewById(pairedYellowLabels[i]);
-	    		modView.setPadding(0, 0, 0, 0);
-
-		    	LayoutParams params = (LayoutParams) modView.getLayoutParams();
-		    	params.addRule(RelativeLayout.ALIGN_PARENT_LEFT, 0);
-		    	params.addRule(RelativeLayout.CENTER_IN_PARENT);
-
-    		}
-    		// remove "e", add white "НОП", replace "CX" with "Cx" 
-    		((TextView) mainActivity.findViewById(R.id.labelE)).setText("");
-    		((TextView) mainActivity.findViewById(R.id.labelNop54)).setText("НОП");
-    		((Button)mainActivity.findViewById(R.id.buttonClear)).setText("Cx");
-    		
-    	} else { // 0 for MK-61
-
-    		for (int i=0; i < blueLabels.length; i++) {
-    			// align yellow labels on the left side
-	    		View modView = (TextView) mainActivity.findViewById(pairedYellowLabels[i]);
-	    		modView.setPadding(yellowLabelLeftPadding, 0, 0, 0);
-
-		    	LayoutParams params = (LayoutParams) modView.getLayoutParams();
-		    	params.addRule(RelativeLayout.CENTER_IN_PARENT, 0);
-		    	params.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
-
-		    	// add back blue labels
-		    	TextView blueLabel = (TextView) mainActivity.findViewById(blueLabels[i]);
-		    	blueLabel.setText(blueLabelsText[i]);
-    		}
-
-    		// add "e", remove white "НОП", replace "Cx" with "CX" 
-    		((TextView) mainActivity.findViewById(R.id.labelE)).setText("e");
-    		((TextView) mainActivity.findViewById(R.id.labelNop54)).setText("");
-    		((Button)mainActivity.findViewById(R.id.buttonClear)).setText("CX");
-    	}
-    }
-
-    static List<View> getAllChildrenBFS(View v) {
-        List<View> visited = new ArrayList<View>();
-        List<View> unvisited = new ArrayList<View>();
-        unvisited.add(v);
-
-        while (!unvisited.isEmpty()) {
-            View child = unvisited.remove(0);
-            visited.add(child);
-            if (!(child instanceof ViewGroup)) continue;
-            ViewGroup group = (ViewGroup) child;
-            final int childCount = group.getChildCount();
-            for (int i=0; i<childCount; i++) unvisited.add(group.getChildAt(i));
-        }
-
-        return visited;
-    }
-
-    static void style(boolean grayscale, int indicatorMode,
-	    		float prefButtonTextSize, float prefLabelTextSize,
-	    		boolean borderBlackButtons, boolean borderOtherButtons) {
-		// set background
-		styleScreen(grayscale);
-  		
-		// style indicator
-		styleIndicator(grayscale, indicatorMode);
-		
-		// scale buttons text and set borders
-        SkinHelper.styleButtons(grayscale,
-        		prefButtonTextSize, prefLabelTextSize, 
-        		borderBlackButtons, borderOtherButtons);
-        
-        // style labels above buttons
-        SkinHelper.styleLabels(grayscale);
-	}
-	
-    static void styleIndicator(boolean grayscale, int mode) {
-
-    	TextView calculatorIndicator = (TextView) mainActivity.findViewById(R.id.textView_Indicator);
-
-    	// set indicator digits color
-    	calculatorIndicator.setTextColor(mainActivity.getResources().getColor(grayscale
-    					? R.color.indicatorDigitsGrayscale
-    					: R.color.indicatorDigits
-    	));
-    	
-    	// set indicator background color
-    	int color;
-    	if (mode < 0) {
-    		color = R.color.indicatorOff;
-    	} else {
-			color = (mode == 0)
-    				? (grayscale
-    						? R.color.indicatorFastSpeedModeGrayscale 
-    	    				: R.color.indicatorFastSpeedMode
-    	    		  )
-      				: (grayscale
-    						? R.color.indicatorSlowSpeedModeGrayscale 
-    	    				: R.color.indicatorSlowSpeedMode
-    	    		  );
-    	}
-
-    	calculatorIndicator.setBackgroundColor(mainActivity.getResources().getColor(color));
-    }
-    
-    private static void styleScreen(boolean grayscale) {
-		mainActivity.findViewById(R.id.mainLayout).setBackgroundColor(
-				mainActivity.getResources().getColor(grayscale 
-	    					? R.color.commonBackgroundGrayscale
-	    					: R.color.commonBackground));
-	}
-
-    private static void styleLabels(boolean grayscale) {
-	    for (int i=0; i < singleYellowLabels.length; i++) {
-	    	((TextView)mainActivity.findViewById(singleYellowLabels[i])).setTextColor(
-	    			(mainActivity.getResources().getColor(grayscale 
-	    					? R.color.aboveButtonTextYellowGrayscale
-	    					: R.color.aboveButtonTextYellow)));
-	    }
-	    
-	    for (int i=0; i < pairedYellowLabels.length; i++) {
-	    	((TextView)mainActivity.findViewById(pairedYellowLabels[i])).setTextColor(
-	    			(mainActivity.getResources().getColor(grayscale 
-	    					? R.color.aboveButtonTextYellowGrayscale
-	    					: R.color.aboveButtonTextYellow)));
-	    }
-
-	    for (int i=0; i < blueLabels.length; i++) {
-	    	((TextView)mainActivity.findViewById(blueLabels[i])).setTextColor(
-	    			(mainActivity.getResources().getColor(grayscale 
-	    					? R.color.aboveButtonTextBlueGrayscale
-	    					: R.color.aboveButtonTextBlue)));
-	    }
-    }
-    
-    private static void styleButtons(boolean grayscale, 
-    		float prefButtonTextSize, float prefLabelTextSize,
-    		boolean borderBlackButtons, boolean borderOtherButtons) {
-
-    	float chosenButtonTextSize = buttonTextSize * prefButtonTextSize;
-        float chosenLabelTextSize  = labelTextSize  * prefLabelTextSize;
-    	
-	    HashSet<View> set = new HashSet<View>(getAllChildrenBFS(mainActivity.findViewById(R.id.tableLayoutKeyboard)));
-	    for (View view: set) {
-	    	if (view instanceof Button) {
-	    		Button b = (Button)view;
-	    		b.setTextSize(TypedValue.COMPLEX_UNIT_PX, chosenButtonTextSize);
-	    		boolean isBlack = false;
-	    		for (int j=0; j < blackButtons.length; j++) if (b.getId() == blackButtons[j]) { isBlack = true; break; }
-	    		
-	    		if (isBlack) {
-	    			b.setBackgroundResource(borderBlackButtons
-	    					? R.drawable.button_black_border
-	    					: R.drawable.button_black
-	    			);
-	    			
-	    		} else if (b.getId() == R.id.buttonF) {
-		    			b.setBackgroundResource(borderOtherButtons 
-		    					?	(grayscale 
-		    							? R.drawable.button_yellow_border_grayscale
-		    							: R.drawable.button_yellow_border
-		    						)
-		    					:	(grayscale 
-		    							? R.drawable.button_yellow_grayscale
-		    							: R.drawable.button_yellow
-		    						)
-		    			);
-	    			
-	    		} else if (b.getId() == R.id.buttonK) {
-		    			b.setBackgroundResource(borderOtherButtons 
-		    					?	(grayscale 
-		    							? R.drawable.button_blue_border_grayscale
-		    							: R.drawable.button_blue_border
-		    						)
-		    					:	(grayscale 
-		    							? R.drawable.button_blue_grayscale
-		    							: R.drawable.button_blue
-		    						)
-		    			);
-	    			
-	    		} else if (b.getId() == R.id.buttonClear) {
-		    			b.setBackgroundResource(borderOtherButtons 
-		    					?	(grayscale 
-		    							? R.drawable.button_red_border_grayscale
-		    							: R.drawable.button_red_border
-		    						)
-		    					:	(grayscale 
-		    							? R.drawable.button_red_grayscale
-		    							: R.drawable.button_red
-		    						)
-		    			);
-		    			
-	    		} else { 
-	    				b.setBackgroundResource(borderOtherButtons
-	    						? R.drawable.button_other_border
-	    						: R.drawable.button_other
-	    				);
-	    		}
-	    		
-	    	} else if (view instanceof TextView) {
-	    		((TextView)view).setTextSize(TypedValue.COMPLEX_UNIT_PX, chosenLabelTextSize);
-	    	}
-	    }
-
-    	float smallerButtonTextSize = (float) (chosenButtonTextSize * 0.8);
-	    ((Button)mainActivity.findViewById(R.id.buttonReturn   )).setTextSize(TypedValue.COMPLEX_UNIT_PX, smallerButtonTextSize);
-	    ((Button)mainActivity.findViewById(R.id.buttonStopStart)).setTextSize(TypedValue.COMPLEX_UNIT_PX, smallerButtonTextSize);
-    }
-    
-}
