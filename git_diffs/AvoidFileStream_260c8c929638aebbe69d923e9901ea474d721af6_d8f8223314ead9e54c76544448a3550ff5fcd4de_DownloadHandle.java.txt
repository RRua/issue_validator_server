diff --git a/app/src/main/java/ch/bailu/aat/helpers/file/AbsAccess.java b/app/src/main/java/ch/bailu/aat/helpers/file/AbsAccess.java
index 616d47a4..aa53d9e6 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/file/AbsAccess.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/file/AbsAccess.java
@@ -13,7 +13,7 @@ import java.io.OutputStream;
 
 public abstract class AbsAccess {
     public abstract InputStream open_r() throws FileNotFoundException;
-    public abstract OutputStream open_w() throws FileNotFoundException;
+    public abstract OutputStream open_w() throws IOException;
 
 
     public static AbsAccess factory(Context c, String id) {
diff --git a/app/src/main/java/ch/bailu/aat/helpers/file/FileAccess.java b/app/src/main/java/ch/bailu/aat/helpers/file/FileAccess.java
index e4d101fd..39b68dc4 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/file/FileAccess.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/file/FileAccess.java
@@ -1,9 +1,11 @@
 package ch.bailu.aat.helpers.file;
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 
@@ -24,14 +26,29 @@ public class FileAccess extends AbsAccess {
     }
 
     @Override
-    public OutputStream open_w() throws FileNotFoundException {
-        return new FileOutputStream(file);
+    public OutputStream open_w() throws IOException {
+        return openOutput(file);
     }
 
+    public File toFile() {
+        return file;
+    }
 
+    public static OutputStream openOutput(File file) throws IOException {
+        new File(file.getParent()).mkdirs();
+        return new FileOutputStream(file);
+    }
 
 
-    public File toFile() {
-        return file;
+    public static void close(Closeable c) {
+        if (c != null) {
+            try {
+                c.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
     }
+
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/helpers/file/UriAccess.java b/app/src/main/java/ch/bailu/aat/helpers/file/UriAccess.java
index 44c6ac10..e0d9dbe2 100644
--- a/app/src/main/java/ch/bailu/aat/helpers/file/UriAccess.java
+++ b/app/src/main/java/ch/bailu/aat/helpers/file/UriAccess.java
@@ -35,6 +35,7 @@ public class UriAccess extends AbsAccess {
 
 
 
+
     @Override
     public File toFile() {
         String path = uri.getPath();
diff --git a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
index e3b1f445..5ea4f3e6 100644
--- a/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
+++ b/app/src/main/java/ch/bailu/aat/preferences/SolidMapTileStack.java
@@ -8,209 +8,60 @@ import org.osmdroid.tileprovider.tilesource.OnlineTileSourceBase;
 import ch.bailu.aat.R;
 import ch.bailu.aat.services.cache.BitmapTileObject;
 import ch.bailu.aat.services.cache.ElevationColorTile;
-import ch.bailu.aat.services.cache.Hillshade8;
+import ch.bailu.aat.services.cache.HillShadeCached;
 import ch.bailu.aat.services.cache.NewHillshade;
-import ch.bailu.aat.services.cache.ObjectHandle.Factory;
-import ch.bailu.aat.services.cache.TileBitmapFilter;
 import ch.bailu.aat.services.cache.TileObject.Source;
 
 public class SolidMapTileStack extends SolidCheckList {
 
-    public static final int MIN_ZOOM = 1;
-    public static final int MAX_ZOOM=17; // 18 takes way too much space for the gain. 
-    
-    private final static String KEY = "tile_overlay_";
-
-    /*
-    public final static BitmapTileObject.Source MAPNIK_GRAY = 
-            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.GRAYSCALE_FILTER,
-                    MIN_ZOOM, MAX_ZOOM,
-                    "http://a.tile.openstreetmap.org/",
-                    "http://b.tile.openstreetmap.org/",
-                    "http://c.tile.openstreetmap.org/");
-*/
-    
-    public final static BitmapTileObject.Source MAPNIK = 
-            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.OVERLAY_FILTER,
-                    MIN_ZOOM, MAX_ZOOM,
-                    "http://a.tile.openstreetmap.org/",
-                    "http://b.tile.openstreetmap.org/",
-                    "http://c.tile.openstreetmap.org/");
-
-    
-    public final static Source TRAIL_MTB = 
-            new BitmapTileObject.Source("TrailMTB",  TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
-                    "http://tile.waymarkedtrails.org/mtb/");
-
-    public final static Source TRAIL_SKATING = 
-            new BitmapTileObject.Source("TrailSkating",TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
-                    "http://tile.waymarkedtrails.org/skating/");
-
-
-    public final static Source TRAIL_HIKING = 
-            new BitmapTileObject.Source("TrailHiking", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
-                    "http://tile.waymarkedtrails.org/hiking/");
-
-
-    public final static Source TRAIL_CYCLING = 
-            new BitmapTileObject.Source("TrailCycling", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
-                    "http://tile.waymarkedtrails.org/cycling/");
 
+    private final static String KEY = "tile_overlay_";
 
 
-    public final static Source TRANSPORT_OVERLAY = 
-            new BitmapTileObject.Source("OpenPtMap", TileBitmapFilter.OVERLAY_FILTER, 5, 16,
-                    "http://openptmap.org/tiles/");
-
-
-    public final static Source ELEVATION_COLOR = 
-            new Source() {
-
-        @Override
-        public String getName() {
-            return "ElevationColor*";
-        }
-
-        @Override
-        public String getID(MapTile t, Context x) {
-            return getName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY(); 
-        }
-
-        @Override
-        public int getMinimumZoomLevel() {
-            return 5;
-        }
-
-        @Override
-        public int getMaximumZoomLevel() {
-            return 18;
-        }
-
-        @Override
-        public Factory getFactory(MapTile mt) {
-            return  new ElevationColorTile.Factory(mt);
-        }
-
-        @Override
-        public TileBitmapFilter getBitmapFilter() {
-            return TileBitmapFilter.OVERLAY_FILTER;
-        }
-    };
-    
-
-
-    
-    public final static Source ELEVATION_HILLSHADE4 = 
-            new Source() {
-
-        @Override
-        public String getName() {
-            return "Hillshade 4*";
-        }
-
-        @Override
-        public String getID(MapTile t, Context x) {
-            return NewHillshade.class.getSimpleName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY(); 
-        }
-
-        @Override
-        public int getMinimumZoomLevel() {
-            return 8;
-        }
-
-        @Override
-        public int getMaximumZoomLevel() {
-            return 14;
-        }
-
-        @Override
-        public Factory getFactory(MapTile mt) {
-            return  new NewHillshade.Factory(mt);
-        }
 
-        @Override
-        public TileBitmapFilter getBitmapFilter() {
-            return TileBitmapFilter.COPY_FILTER;
-        }
+    private final static Source[] SOURCES = new Source[] {
+            ElevationColorTile.ELEVATION_COLOR,
+            // MAPNIK_GRAY,
+            BitmapTileObject.MAPNIK,
+            HillShadeCached.ELEVATION_HILLSHADE_CACHED,
+            NewHillshade.ELEVATION_HILLSHADE8,
+            BitmapTileObject.TRANSPORT_OVERLAY,
+            BitmapTileObject.TRAIL_SKATING,
+            BitmapTileObject.TRAIL_HIKING,
+            BitmapTileObject.TRAIL_MTB,
+            BitmapTileObject.TRAIL_CYCLING,
     };
 
-    public final static Source ELEVATION_HILLSHADE8 = 
-            new Source() {
 
-        @Override
-        public String getName() {
-            return "Hillshade 8*";
-        }
 
-        @Override
-        public String getID(MapTile t, Context x) {
-            return Hillshade8.class.getSimpleName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY(); 
-        }
-
-        @Override
-        public int getMinimumZoomLevel() {
-            return 8;
-        }
-
-        @Override
-        public int getMaximumZoomLevel() {
-            return 14;
-        }
-
-        @Override
-        public Factory getFactory(MapTile mt) {
-            return  new Hillshade8.Factory(mt);
-        }
 
-        @Override
-        public TileBitmapFilter getBitmapFilter() {
-            return TileBitmapFilter.COPY_FILTER;
-        }
-    };
-    
-    private final static Source[] SOURCES = new Source[] {
-        ELEVATION_COLOR,    
-  //      MAPNIK_GRAY,
-        MAPNIK,
-        ELEVATION_HILLSHADE4,
-        ELEVATION_HILLSHADE8,
-        TRANSPORT_OVERLAY,
-        TRAIL_SKATING,
-        TRAIL_HIKING,
-        TRAIL_MTB,
-        TRAIL_CYCLING,
-    };
+    private final SolidBoolean[] enabledArray = new SolidBoolean[SOURCES.length];
 
-    
 
-    
-    private final SolidBoolean[] enabledArray = new SolidBoolean[SOURCES.length];
-    
-    
     public SolidMapTileStack (Context context, int preset) {
         Storage s = Storage.global(context);
-        
+
         for (int i=0; i<enabledArray.length; i++) {
             enabledArray[i]=new SolidBoolean(s, KEY+preset+"_"+i);
         }
     }
-    
-    
+
+
     public static boolean isZoomLevelSupported(OnlineTileSourceBase source ,MapTile tile) {
-        return 
+        return
                 tile.getZoomLevel() <= source.getMaximumZoomLevel() &&
-                tile.getZoomLevel() >= source.getMinimumZoomLevel();
+                        tile.getZoomLevel() >= source.getMinimumZoomLevel();
     }
-    
+
     public int getCountOfEnabled() {
         int c = 0;
 
         for (SolidBoolean anEnabledArray : enabledArray) if (anEnabledArray.isEnabled()) c++;
-        
+
         return c;
     }
-    
-    
+
+
     @Override
     public CharSequence[] getStringArray() {
         String[] array = new String[SOURCES.length];
@@ -253,7 +104,7 @@ public class SolidMapTileStack extends SolidCheckList {
         return enabledArray[0].getStorage();
     }
 
-    
+
     @Override
     public boolean hasKey(String s) {
         for (SolidBoolean anEnabledArray : enabledArray) {
@@ -280,5 +131,5 @@ public class SolidMapTileStack extends SolidCheckList {
 
         return array;
     }
-    
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
index cbe8fd30..307dce26 100644
--- a/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
+++ b/app/src/main/java/ch/bailu/aat/services/background/DownloadHandle.java
@@ -2,9 +2,7 @@ package ch.bailu.aat.services.background;
 
 import android.content.Context;
 
-import java.io.Closeable;
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -13,6 +11,7 @@ import java.net.URL;
 
 import ch.bailu.aat.helpers.AppBroadcaster;
 import ch.bailu.aat.helpers.AppTheme;
+import ch.bailu.aat.helpers.file.FileAccess;
 
 public class DownloadHandle extends ProcessHandle {
 
@@ -75,7 +74,7 @@ public class DownloadHandle extends ProcessHandle {
             input = openInput(connection);
 
             downloadLock=true;
-            output = openOutput(file);
+            output = FileAccess.openOutput(file);
 
             while (( count = input.read(buffer)) != -1) {
                 total+=count;
@@ -84,10 +83,10 @@ public class DownloadHandle extends ProcessHandle {
 
 
         } finally {    
-            close(output);
+            FileAccess.close(output);
             downloadLock=false;
 
-            close(input);
+            FileAccess.close(input);
             if (connection!=null) connection.disconnect();
         }
 
@@ -96,15 +95,7 @@ public class DownloadHandle extends ProcessHandle {
 
 
 
-    private static void close(Closeable c) {
-        if (c != null) {
-            try {
-                c.close();
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-    }
+
 
 
     private static HttpURLConnection openConnection(URL url) throws IOException {
@@ -131,15 +122,11 @@ public class DownloadHandle extends ProcessHandle {
 
     }
 
-    private static InputStream openInput(HttpURLConnection connection) throws IOException {
+    public static InputStream openInput(HttpURLConnection connection) throws IOException {
         return connection.getInputStream();
 
     }
 
-    private static OutputStream openOutput(File file) throws IOException {
-        new File(file.getParent()).mkdirs();
-        return new FileOutputStream(file);
-    }
 
 
     public File getFile() {
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
index 0e2b838e..09f2d3b6 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/BitmapTileObject.java
@@ -72,6 +72,11 @@ public class BitmapTileObject extends TileObject {
         }
     }
 
+    @Override
+    public boolean isLoaded() {
+        return bitmap.getDrawable()!=null;
+    }
+
 
     private boolean isLoadable() {
         return new File(toString()).exists();
@@ -189,4 +194,57 @@ public class BitmapTileObject extends TileObject {
             return filter;
         }
     }
+
+
+    public static final int MIN_ZOOM = 1;
+    public static final int MAX_ZOOM=17; // 18 takes way too much space for the gain.
+
+
+    public final static BitmapTileObject.Source MAPNIK_GRAY =
+            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.GRAYSCALE_FILTER,
+                    MIN_ZOOM, MAX_ZOOM,
+                    "http://a.tile.openstreetmap.org/",
+                    "http://b.tile.openstreetmap.org/",
+                    "http://c.tile.openstreetmap.org/");
+
+
+    public final static BitmapTileObject.Source MAPNIK =
+            new BitmapTileObject.Source("Mapnik", TileBitmapFilter.OVERLAY_FILTER,
+                    MIN_ZOOM, MAX_ZOOM,
+                    "http://a.tile.openstreetmap.org/",
+                    "http://b.tile.openstreetmap.org/",
+                    "http://c.tile.openstreetmap.org/");
+
+
+    public final static TileObject.Source TRAIL_MTB =
+            new BitmapTileObject.Source("TrailMTB",  TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+                    "http://tile.waymarkedtrails.org/mtb/");
+
+    public final static TileObject.Source TRAIL_SKATING =
+            new BitmapTileObject.Source("TrailSkating",TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+                    "http://tile.waymarkedtrails.org/skating/");
+
+
+    public final static TileObject.Source TRAIL_HIKING =
+            new BitmapTileObject.Source("TrailHiking", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+                    "http://tile.waymarkedtrails.org/hiking/");
+
+
+    public final static TileObject.Source TRAIL_CYCLING =
+            new BitmapTileObject.Source("TrailCycling", TileBitmapFilter.OVERLAY_FILTER, MIN_ZOOM, MAX_ZOOM,
+                    "http://tile.waymarkedtrails.org/cycling/");
+
+
+
+    public final static TileObject.Source TRANSPORT_OVERLAY =
+            new BitmapTileObject.Source("OpenPtMap", TileBitmapFilter.OVERLAY_FILTER, 5, 16,
+                    "http://openptmap.org/tiles/");
+
+
+    public final static BitmapTileObject.Source HILLSHADE_CACHED =
+            new BitmapTileObject.Source("HillShade", TileBitmapFilter.COPY_FILTER,
+                    NewHillshade.ELEVATION_HILLSHADE8.getMinimumZoomLevel(),
+                    NewHillshade.ELEVATION_HILLSHADE8.getMaximumZoomLevel(),
+                    "http://bailu.ch/");
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
index 6c2ae5a5..3f596a6a 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationColorTile.java
@@ -1,5 +1,7 @@
 package ch.bailu.aat.services.cache;
 
+import android.content.Context;
+
 import org.osmdroid.tileprovider.MapTile;
 
 import ch.bailu.aat.services.ServiceContext;
@@ -79,4 +81,40 @@ public class ElevationColorTile extends ElevationTile {
         }
     }
 
+
+
+    public final static Source ELEVATION_COLOR =
+            new Source() {
+
+                @Override
+                public String getName() {
+                    return "ElevationColor*";
+                }
+
+                @Override
+                public String getID(MapTile t, Context x) {
+                    return getName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY();
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return 5;
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return 18;
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(MapTile mt) {
+                    return  new ElevationColorTile.Factory(mt);
+                }
+
+                @Override
+                public TileBitmapFilter getBitmapFilter() {
+                    return TileBitmapFilter.OVERLAY_FILTER;
+                }
+            };
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java b/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
index 9cc4f32e..2bb507a3 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/ElevationTile.java
@@ -122,6 +122,12 @@ public abstract class ElevationTile extends TileObject implements ElevationUpdat
     }
 
 
+    @Override
+    public boolean isLoaded() {
+        return isReady() && tilePainterList.size() == 0;
+    }
+
+
     /*
     @Override
     public boolean isUpdating() {
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/EmptyTileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/EmptyTileObject.java
index 73d1e134..6ade7b65 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/EmptyTileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/EmptyTileObject.java
@@ -35,4 +35,9 @@ public class EmptyTileObject extends TileObject {
 
     }
 
+    @Override
+    public boolean isLoaded() {
+        return true;
+    }
+
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
new file mode 100644
index 00000000..5699105f
--- /dev/null
+++ b/app/src/main/java/ch/bailu/aat/services/cache/HillShadeCached.java
@@ -0,0 +1,203 @@
+package ch.bailu.aat.services.cache;
+
+
+import android.content.Context;
+import android.graphics.Bitmap;
+
+import org.osmdroid.tileprovider.MapTile;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import ch.bailu.aat.helpers.AppBroadcaster;
+import ch.bailu.aat.helpers.file.FileAccess;
+import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.background.FileHandle;
+
+public class HillShadeCached extends TileObject {
+
+    private final FileHandle save;
+
+    private TileObject tile = null;
+
+    private final ObjectHandle.Factory bitmapFactory, demFactory;
+    private final String bitmapID, demID;
+
+
+
+    public HillShadeCached(String id, ServiceContext cs,  MapTile t) {
+        super(id);
+
+
+
+        demID = NewHillshade.ELEVATION_HILLSHADE8.getID(t, cs.getContext());
+        demFactory = NewHillshade.ELEVATION_HILLSHADE8.getFactory(t);
+
+        bitmapID = BitmapTileObject.HILLSHADE_CACHED.getID(t, cs.getContext());
+        bitmapFactory = BitmapTileObject.HILLSHADE_CACHED.getFactory(t);
+
+        cs.getCacheService().addToBroadcaster(this);
+
+
+        save = new FileHandle(id) {
+
+            @Override
+            public long bgOnProcess() {
+
+                OutputStream out = null;
+
+                try {
+                    out = FileAccess.openOutput(new File(bitmapID));
+                    tile.getBitmap().compress(Bitmap.CompressFormat.PNG, 100, out);
+
+                } catch (IOException e) {
+                    e.printStackTrace();
+
+
+                } finally {
+                    FileAccess.close(out);
+                }
+                return tile.getSize();
+            }
+
+            @Override
+            public void broadcast(Context context) {
+                AppBroadcaster.broadcast(context, AppBroadcaster.FILE_CHANGED_ONDISK,
+                        bitmapID, demID);
+            }
+        };
+
+    }
+
+
+    @Override
+    public void onInsert(ServiceContext sc) {
+        if (isLoadable()) {
+            tile = (TileObject) sc.getCacheService().getObject(bitmapID, bitmapFactory);
+        } else {
+            tile = (TileObject) sc.getCacheService().getObject(demID, demFactory);
+        }
+    }
+
+
+    @Override
+    public void onRemove(ServiceContext cs) {
+        tile.free();
+    }
+
+
+    @Override
+    public void reDownload(ServiceContext sc) {
+        toFile().delete();
+        tile.free();
+        tile = (TileObject) sc.getCacheService().getObject(bitmapID, bitmapFactory);
+    }
+
+
+    @Override
+    public boolean isLoaded() {
+        return tile.isLoaded();
+    }
+
+
+
+    @Override
+    public File toFile() {
+        return new File(bitmapID);
+    }
+
+
+
+    private boolean isLoadable() {
+        return toFile().exists();
+    }
+
+
+    @Override
+    public void onDownloaded(String id, String u, ServiceContext sc) {}
+
+
+    @Override
+    public void onChanged(String id, ServiceContext sc) {
+        if (id.equals(tile.toString())) {
+            AppBroadcaster.broadcast(sc.getContext(),
+                    AppBroadcaster.FILE_CHANGED_INCACHE,
+                    toString());
+
+
+            if (id.equals(demID) && tile.isLoaded() && toFile().exists()==false) {
+                sc.getBackgroundService().process(save);
+            }
+        }
+    }
+
+
+
+    @Override
+    public boolean isReady() {
+        return tile.isReady();
+    }
+
+
+    @Override
+    public long getSize() {
+        return TileObject.MIN_SIZE;
+    }
+
+    @Override
+    public Bitmap getBitmap() {
+        return tile.getBitmap();
+    }
+
+
+
+    public static class Factory extends ObjectHandle.Factory {
+        private final MapTile mapTile;
+
+
+        public Factory(MapTile mt) {
+            mapTile=mt;
+        }
+
+        @Override
+        public ObjectHandle factory(String id, ServiceContext cs) {
+            return new HillShadeCached(id, cs, mapTile);
+        }
+    }
+
+
+    public final static TileObject.Source ELEVATION_HILLSHADE_CACHED =
+            new TileObject.Source() {
+
+                @Override
+                public String getName() {
+                    return "Hillshade Cached*";
+                }
+
+                @Override
+                public String getID(MapTile t, Context x) {
+                    return HillShadeCached.class.getSimpleName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY();
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return NewHillshade.ELEVATION_HILLSHADE8.getMinimumZoomLevel();
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return NewHillshade.ELEVATION_HILLSHADE8.getMaximumZoomLevel();
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(MapTile mt) {
+                    return  new HillShadeCached.Factory(mt);
+                }
+
+                @Override
+                public TileBitmapFilter getBitmapFilter() {
+                    return TileBitmapFilter.COPY_FILTER;
+                }
+            };
+}
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/Hillshade8.java b/app/src/main/java/ch/bailu/aat/services/cache/Hillshade8.java
deleted file mode 100644
index ebdb3ae4..00000000
--- a/app/src/main/java/ch/bailu/aat/services/cache/Hillshade8.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package ch.bailu.aat.services.cache;
-
-import org.osmdroid.tileprovider.MapTile;
-
-import ch.bailu.aat.services.ServiceContext;
-import ch.bailu.aat.services.dem.DemDimension;
-import ch.bailu.aat.services.dem.DemGeoToIndex;
-import ch.bailu.aat.services.dem.DemProvider;
-import ch.bailu.aat.services.dem.DemSplitter;
-import ch.bailu.aat.services.dem.MultiCell;
-import ch.bailu.aat.services.dem.MultiCell8;
-
-public class Hillshade8 extends NewHillshade {
-
-    public Hillshade8(String id, ServiceContext sc, MapTile t) {
-        super(id, sc, t);
-    }
-
-    
-    @Override
-    public DemGeoToIndex factoryGeoToIndex(DemDimension dim) {
-        return new DemGeoToIndex(dim, true);
-    }
-
-    @Override
-    public DemProvider factorySplitter(DemProvider dem) {
-        return new DemSplitter(dem);
-    }
-
-    @Override
-    public MultiCell factoryMultiCell(DemProvider dem) {
-        return new MultiCell8(dem);
-    }
-
-    
-    public static class Factory extends ObjectHandle.Factory {
-        private final MapTile mapTile;
-
-        public Factory(MapTile t) {
-            mapTile=t;
-        }
-
-        @Override
-        public ObjectHandle factory(String id, ServiceContext sc) {
-            return  new Hillshade8(id, sc, mapTile);
-        }
-        
-    } 
-}
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
index bc24a41e..ca2fb3cb 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/NewHillshade.java
@@ -1,45 +1,60 @@
 package ch.bailu.aat.services.cache;
 
+import android.content.Context;
+
 import org.osmdroid.tileprovider.MapTile;
 
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.dem.DemDimension;
+import ch.bailu.aat.services.dem.DemGeoToIndex;
 import ch.bailu.aat.services.dem.DemProvider;
+import ch.bailu.aat.services.dem.DemSplitter;
 import ch.bailu.aat.services.dem.MultiCell;
+import ch.bailu.aat.services.dem.MultiCell8;
 
 public class NewHillshade extends ElevationTile {
 
     private HillshadeColorTable table;
-    
+
     public NewHillshade(String id, ServiceContext sc, MapTile t) {
         super(id, sc, t, splitFromZoom(t.getZoomLevel()));
     }
 
-    
+
     @Override
     public void onInsert(ServiceContext sc) {
         table=(HillshadeColorTable) sc.getCacheService().getObject(HillshadeColorTable.ID, new HillshadeColorTable.Factory());
-        
+
         super.onInsert(sc);
-        
+
     }
-    
-    
+
+
     @Override
     public void onRemove(ServiceContext sc) {
         super.onRemove(sc);
         table.free();
     }
-    
-    
+
+    @Override
+    public DemGeoToIndex factoryGeoToIndex(DemDimension dim) {
+        return new DemGeoToIndex(dim, true);
+    }
+
+
+    @Override
+    public DemProvider factorySplitter(DemProvider dem) {
+        return new DemSplitter(dem);
+    }
     public MultiCell factoryMultiCell(DemProvider dem) {
-        return MultiCell.factory(dem);
+        return new MultiCell8(dem);
     }
-    
-    
-    
+
+
+
     @Override
     public void fillBitmap(int[] bitmap, int[] toLaRaster, int[] toLoRaster,
-            Span laSpan, Span loSpan, DemProvider demtile) {
+                           Span laSpan, Span loSpan, DemProvider demtile) {
         final int demtile_dim = demtile.getDim().DIM;
         final int bitmap_dim = loSpan.size();
 
@@ -48,13 +63,13 @@ public class NewHillshade extends ElevationTile {
         int old_line=-1;
 
         final MultiCell mcell = factoryMultiCell(demtile);
-        
+
         for (int la=laSpan.start(); la< laSpan.end(); la++) {
             final int line = toLaRaster[la]*demtile_dim;
 
             if (old_line != line) {
                 int old_offset = -1;
-                
+
                 for (int lo=loSpan.start(); lo<loSpan.end(); lo++) {
                     final int offset=toLoRaster[lo];
 
@@ -62,9 +77,9 @@ public class NewHillshade extends ElevationTile {
                         old_offset = offset;
 
                         mcell.set(line+offset);
-                        color = table.getColor(mcell); 
+                        color = table.getColor(mcell);
                     }
-                    
+
                     bitmap[index]=color;
                     index++;
                 }
@@ -72,22 +87,22 @@ public class NewHillshade extends ElevationTile {
                 copyLine(bitmap, index-bitmap_dim, index);
                 index+=bitmap_dim;
             }
-            
+
             old_line=line;
-        }                
+        }
     }
 
     private void copyLine(int[] buffer, int cs, int cd) {
         final int next_line=cd;
-        
+
         for (; cs < next_line; cs++) {
             buffer[cd]=buffer[cs];
             cd++;
         }
     }
-    
-    
-   
+
+
+
 
     public static int splitFromZoom(int zoom) {
         int split = 0;
@@ -98,10 +113,10 @@ public class NewHillshade extends ElevationTile {
         if (zoom > 13) {
             split++;
         }
-  */      
+  */
         return split;
     }
-    
+
     public static class Factory extends ObjectHandle.Factory {
         private final MapTile mapTile;
 
@@ -111,9 +126,43 @@ public class NewHillshade extends ElevationTile {
 
         @Override
         public ObjectHandle factory(String id, ServiceContext sc) {
-            
             return  new NewHillshade(id, sc, mapTile);
         }
-        
-    } 
+
+    }
+
+
+    public final static Source ELEVATION_HILLSHADE8 =
+            new Source() {
+
+                @Override
+                public String getName() {
+                    return "Hillshade 8*";
+                }
+
+                @Override
+                public String getID(MapTile t, Context x) {
+                    return NewHillshade.class.getSimpleName() + "/" + t.getZoomLevel() + "/" + t.getX() + "/" + t.getY();
+                }
+
+                @Override
+                public int getMinimumZoomLevel() {
+                    return 8;
+                }
+
+                @Override
+                public int getMaximumZoomLevel() {
+                    return 14;
+                }
+
+                @Override
+                public ObjectHandle.Factory getFactory(MapTile mt) {
+                    return  new NewHillshade.Factory(mt);
+                }
+
+                @Override
+                public TileBitmapFilter getBitmapFilter() {
+                    return TileBitmapFilter.COPY_FILTER;
+                }
+            };
 }
diff --git a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
index 7611c140..43a4375f 100644
--- a/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
+++ b/app/src/main/java/ch/bailu/aat/services/cache/TileObject.java
@@ -20,6 +20,8 @@ public abstract class TileObject extends ObjectHandle{
     public abstract Bitmap getBitmap();
     public abstract void reDownload(ServiceContext sc);
 
+    public abstract boolean isLoaded();
+
     public static abstract class  Source {
         public abstract TileBitmapFilter getBitmapFilter();
         public abstract String getName();
diff --git a/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java b/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
index b105d086..a40475a2 100644
--- a/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
+++ b/app/src/main/java/ch/bailu/aat/views/map/AbsOsmTileProvider.java
@@ -1,10 +1,9 @@
 package ch.bailu.aat.views.map;
 
 import org.osmdroid.tileprovider.MapTile;
-import org.osmdroid.tileprovider.tilesource.ITileSource;
 
-import ch.bailu.aat.preferences.SolidMapTileStack;
 import ch.bailu.aat.services.ServiceContext;
+import ch.bailu.aat.services.cache.BitmapTileObject;
 import ch.bailu.aat.services.cache.ObjectHandle;
 import ch.bailu.aat.services.cache.TileObject.Source;
 import ch.bailu.aat.services.cache.TileStackObject;
@@ -12,7 +11,7 @@ import ch.bailu.aat.services.cache.TileStackObject;
 public abstract class AbsOsmTileProvider extends AbsTileProvider {
 
     private final ServiceContext scontext;
-    private Source sources[] = new Source[]{SolidMapTileStack.MAPNIK};
+    private Source sources[] = new Source[]{BitmapTileObject.MAPNIK};
     private final StringBuilder builder = new StringBuilder();    
 
 
@@ -61,12 +60,12 @@ public abstract class AbsOsmTileProvider extends AbsTileProvider {
 
 
     public int getMinimumZoomLevel() {
-        return SolidMapTileStack.MIN_ZOOM;
+        return BitmapTileObject.MIN_ZOOM;
     }
 
 
     public int getMaximumZoomLevel() {
-        return SolidMapTileStack.MAX_ZOOM;
+        return BitmapTileObject.MAX_ZOOM;
     }
 
 
