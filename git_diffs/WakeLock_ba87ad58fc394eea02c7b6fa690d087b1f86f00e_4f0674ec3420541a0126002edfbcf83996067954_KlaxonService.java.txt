diff --git a/src/main/java/com/better/alarm/background/KlaxonService.java b/src/main/java/com/better/alarm/background/KlaxonService.java
index 97f6c6fa..86bae0f2 100644
--- a/src/main/java/com/better/alarm/background/KlaxonService.java
+++ b/src/main/java/com/better/alarm/background/KlaxonService.java
@@ -20,35 +20,21 @@ package com.better.alarm.background;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.content.res.AssetFileDescriptor;
-import android.content.res.Resources;
-import android.media.AudioManager;
 import android.media.MediaPlayer;
-import android.media.MediaPlayer.OnErrorListener;
 import android.media.RingtoneManager;
 import android.net.Uri;
-import android.os.CountDownTimer;
-import android.os.PowerManager;
-import android.os.PowerManager.WakeLock;
 import android.telephony.PhoneStateListener;
 import android.telephony.TelephonyManager;
 
-import com.better.alarm.R;
 import com.better.alarm.configuration.Prefs;
-import com.better.alarm.interfaces.Alarm;
-import com.better.alarm.interfaces.IAlarmsManager;
-import com.better.alarm.interfaces.Intents;
-import com.better.alarm.logger.Logger;
 import com.better.alarm.util.Service;
-import com.better.alarm.wakelock.WakeLockManager;
-import com.f2prateek.rx.preferences2.Preference;
-import com.f2prateek.rx.preferences2.RxSharedPreferences;
-import com.google.common.base.Optional;
 
 import io.reactivex.Observable;
+import io.reactivex.ObservableEmitter;
+import io.reactivex.ObservableOnSubscribe;
+import io.reactivex.android.schedulers.AndroidSchedulers;
 import io.reactivex.annotations.NonNull;
-import io.reactivex.disposables.CompositeDisposable;
-import io.reactivex.functions.Consumer;
+import io.reactivex.functions.Cancellable;
 import io.reactivex.functions.Function;
 
 import static com.better.alarm.configuration.AlarmApplication.container;
@@ -56,27 +42,14 @@ import static com.better.alarm.configuration.Prefs.DEFAULT_PREALARM_VOLUME;
 import static com.better.alarm.configuration.Prefs.KEY_PREALARM_VOLUME;
 
 /**
- * Manages alarms and vibe. Runs as a service so that it can continue to play if
- * another activity overrides the AlarmAlert dialog.
+ * Delegate everything to a {@link KlaxonDelegate} which will play some awesome music.
  */
-public class KlaxonService extends Service {
-    private Optional<MediaPlayer> mMediaPlayer = Optional.absent();
+public class KlaxonService extends Service implements KlaxonServiceCallback {
+    public interface KlaxonDelegate {
+        void onDestroy();
 
-    private final TelephonyManager mTelephonyManager =  container().telephonyManager();
-    private final Logger log = container().logger();
-    private final PowerManager pm = container().powerManager();
-    private final RxSharedPreferences rxPreferences = container().rxPrefs();
-    private final AudioManager audioManager = container().audioManager();
-    private WakeLockManager wakeLocks = container().wakeLocks();
-    private IAlarmsManager alarms = container().alarms();
-
-    private Observable<Integer> fadeInTimeInSeconds;
-    private boolean lastInCallState;
-    private WakeLock wakeLock;
-    private Alarm alarm;
-    private Volume volume;
-
-    CompositeDisposable disposables = new CompositeDisposable();
+        boolean onStartCommand(@android.support.annotation.NonNull Intent intent);
+    }
 
     /**
      * android.media.AudioManagerDispatches intents to the KlaxonService
@@ -90,186 +63,47 @@ public class KlaxonService extends Service {
         }
     }
 
-    private final PhoneStateListener phoneStateListenerImpl = new PhoneStateListener() {
-        @Override
-        public void onCallStateChanged(int state, String ignored) {
-            boolean newState = state != TelephonyManager.CALL_STATE_IDLE;
-            if (lastInCallState != newState) {
-                lastInCallState = newState;
-                if (lastInCallState) {
-                    log.d("Call has started. Mute.");
-                    volume.mute();
-                } else {
-                    log.d("Call has ended. fadeInFast.");
-                    if (alarm != null && !alarm.isSilent()) {
-                        initializePlayer(getAlertOrDefault(alarm));
-                        volume.fadeInFast();
-                    }
-                }
-            }
-        }
-    };
+    private KlaxonDelegate delegate;
 
-    public enum Type {
-        NORMAL, PREALARM
+    @Override
+    public Uri getDefaultUri(int type) {
+        return RingtoneManager.getDefaultUri(type);
     }
 
-    private class Volume {
-        private static final int FAST_FADE_IN_TIME = 5000;
-
-        private static final int FADE_IN_STEPS = 100;
-
-        // Volume suggested by media team for in-call alarms.
-        private static final float IN_CALL_VOLUME = 0.125f;
-
-        private static final float SILENT = 0f;
-
-        private static final int MAX_VOLUME = 10;
-
-        private Type type = Type.NORMAL;
-
-        private CountDownTimer timer;
-
-        private final Preference<Integer> prealarmVolume;
-
-        Volume() {
-            prealarmVolume = rxPreferences.getInteger(KEY_PREALARM_VOLUME, DEFAULT_PREALARM_VOLUME);
-            disposables.add(
-                    prealarmVolume
-                            .asObservable()
-                            .subscribe(new VolumePrefConsumer(Type.PREALARM)));
-        }
-
-        private final class FadeInTimer extends CountDownTimer {
-            private final long fadeInTime;
-            private final long fadeInStep;
-            private final float targetVolume;
-
-            private final double multiplier;
-
-            private FadeInTimer(long millisInFuture, long countDownInterval) {
-                super(millisInFuture, countDownInterval);
-                fadeInTime = millisInFuture;
-                fadeInStep = countDownInterval;
-                targetVolume = getVolumeFor(type);
-                multiplier = targetVolume / Math.pow(fadeInTime / fadeInStep, 2);
-            }
+    @Override
+    public MediaPlayer createMediaPlayer() {
+        return new MediaPlayer();
+    }
 
-            @Override
-            public void onTick(final long millisUntilFinished) {
-                long elapsed = fadeInTime - millisUntilFinished;
-                float i = elapsed / fadeInStep;
-                float adjustedVolume = (float) (multiplier * (Math.pow(i, 2)));
-                if (mMediaPlayer.isPresent()) {
-                    mMediaPlayer.get().setVolume(adjustedVolume, adjustedVolume);
-                }
-            }
+    @Override
+    public void onCreate() {
+        final TelephonyManager tm = container().telephonyManager();
 
+        Observable<Integer> callState = Observable.create(new ObservableOnSubscribe<Integer>() {
             @Override
-            public void onFinish() {
-                log.d("Fade in completed");
-            }
+            public void subscribe(@NonNull final ObservableEmitter<Integer> emitter) throws Exception {
+                emitter.onNext(tm.getCallState());
 
-        }
-
-        public void setMode(Type type) {
-            this.type = type;
-        }
-
-        /**
-         * Instantly apply the targetVolume. To fade in use
-         * {@link #fadeInAsSetInSettings()}
-         */
-        public void apply() {
-            float volume = getVolumeFor(type);
-            if (mMediaPlayer.isPresent()) {
-                mMediaPlayer.get().setVolume(volume, volume);
-            }
-        }
-
-        /**
-         * Fade in to set targetVolume
-         */
-        public void fadeInAsSetInSettings() {
-            fadeIn(fadeInTimeInSeconds.blockingFirst());
-        }
-
-        public void fadeInFast() {
-            fadeIn(FAST_FADE_IN_TIME);
-        }
-
-        public void cancelFadeIn() {
-            if (timer != null) {
-                timer.cancel();
-            }
-        }
-
-        public void mute() {
-            cancelFadeIn();
-            if (mMediaPlayer.isPresent()) {
-                mMediaPlayer.get().setVolume(SILENT, SILENT);
-            }
-        }
-
-        private void fadeIn(int time) {
-            cancelFadeIn();
-            if (mMediaPlayer.isPresent()) {
-                mMediaPlayer.get().setVolume(SILENT, SILENT);
-            }
-            timer = new FadeInTimer(time, time / FADE_IN_STEPS);
-            timer.start();
-        }
-
-        private float getVolumeFor(Type type) {
-            if (type.equals(Type.NORMAL)) {
-                log.d("fVolume is " + 1f);
-                return 1f;
-            } else {
-                int volume = Math.min(prealarmVolume.get(), MAX_VOLUME);
-                log.d("Volume is " + volume);
-                float fVolume =
-                        //volumes square
-                        (float) (Math.pow(volume + 1, 2)
-                                //by max volume square
-                                / Math.pow(MAX_VOLUME + 1, 2))
-                                //by 2 sqaure
-                                / 4;
-                log.d("fVolume is " + fVolume);
-                return fVolume;
-            }
-        }
-
-        private class VolumePrefConsumer implements Consumer<Integer> {
-            private final Type consumerType;
-
-            VolumePrefConsumer(Type type) {
-                this.consumerType = type;
-            }
+                final PhoneStateListener listener = new PhoneStateListener() {
+                    @Override
+                    public void onCallStateChanged(int state, String ignored) {
+                        emitter.onNext(state);
+                    }
+                };
 
-            @Override
-            public void accept(@NonNull Integer preAlarmVolume) throws Exception {
-                if (mMediaPlayer.isPresent()) {
-                    MediaPlayer player = mMediaPlayer.get();
-                    if (player.isPlaying() && type.equals(consumerType)) {
-                        float volumeFor = getVolumeFor(consumerType);
-                        player.setVolume(volumeFor, volumeFor);
+                emitter.setCancellable(new Cancellable() {
+                    @Override
+                    public void cancel() throws Exception {
+                        // Stop listening for incoming calls.
+                        tm.listen(listener, PhoneStateListener.LISTEN_NONE);
                     }
-                }
-            }
-        }
-    }
+                });
 
-    @Override
-    public void onCreate() {
-        mMediaPlayer = Optional.absent();
-        wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "KlaxonService");
-        wakeLock.acquire();
-        // Listen for incoming calls to kill the alarm.
-        volume = new Volume();
-        lastInCallState = mTelephonyManager.getCallState() != TelephonyManager.CALL_STATE_IDLE;
-        mTelephonyManager.listen(phoneStateListenerImpl, PhoneStateListener.LISTEN_CALL_STATE);
+                tm.listen(listener, PhoneStateListener.LISTEN_CALL_STATE);
+            }
+        });
 
-        fadeInTimeInSeconds = rxPreferences
+        Observable<Integer> fadeInTimeInSeconds = container().rxPrefs()
                 .getString(Prefs.KEY_FADE_IN_TIME_SEC, "30")
                 .asObservable()
                 .map(new Function<String, Integer>() {
@@ -278,188 +112,36 @@ public class KlaxonService extends Service {
                         return Integer.parseInt(s) * 1000;
                     }
                 });
+
+
+        delegate = new KlaxonServiceDelegate(
+                container().logger(),
+                container().powerManager(),
+                container().audioManager(),
+                container().wakeLocks(),
+                container().alarms(),
+                this,
+                getResources(),
+                callState,
+                container().rxPrefs().getInteger(KEY_PREALARM_VOLUME, DEFAULT_PREALARM_VOLUME).asObservable(),
+                fadeInTimeInSeconds,
+                this,
+                AndroidSchedulers.mainThread()
+        );
     }
 
     @Override
     public void onDestroy() {
-        if (mMediaPlayer.isPresent()) {
-            stop(mMediaPlayer.get());
-        }
-        // Stop listening for incoming calls.
-        mTelephonyManager.listen(phoneStateListenerImpl, PhoneStateListener.LISTEN_NONE);
-        disposables.dispose();
-        log.d("Service destroyed");
-        wakeLock.release();
+        delegate.onDestroy();
     }
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent == null) {
             return START_NOT_STICKY;
+        } else {
+            container().wakeLocks().releasePartialWakeLock(intent);
+            return delegate.onStartCommand(intent) ? START_STICKY : START_NOT_STICKY;
         }
-
-        wakeLocks.releasePartialWakeLock(intent);
-
-        String action = intent.getAction();
-
-        log.d(intent.getAction());
-
-        switch (action) {
-            case Intents.ALARM_ALERT_ACTION:
-            case Intents.ALARM_PREALARM_ACTION:
-                alarm = alarms.getAlarm(intent.getIntExtra(Intents.EXTRA_ID, -1));
-                Type type = action.equals(Intents.ALARM_PREALARM_ACTION) ? Type.PREALARM : Type.NORMAL;
-                onAlarm(alarm, type);
-                break;
-            case Intents.ACTION_START_PREALARM_SAMPLE:
-                onStartAlarmSample();
-                break;
-            case Intents.ACTION_MUTE:
-                volume.mute();
-                break;
-            case Intents.ACTION_DEMUTE:
-                volume.fadeInFast();
-                break;
-            default:
-                stopAndCleanup();
-                break;
-        }
-
-        return (action.equals(Intents.ALARM_ALERT_ACTION)
-                || action.equals(Intents.ALARM_PREALARM_ACTION)
-                || action.equals(Intents.ACTION_START_PREALARM_SAMPLE)
-                || action.equals(Intents.ACTION_MUTE)
-                || action.equals(Intents.ACTION_DEMUTE)) ? START_STICKY : START_NOT_STICKY;
-    }
-
-    private void onAlarm(Alarm alarm, Type type) {
-        volume.cancelFadeIn();
-        volume.setMode(type);
-        if (!alarm.isSilent()) {
-            initializePlayer(getAlertOrDefault(alarm));
-            volume.fadeInAsSetInSettings();
-        }
-    }
-
-    private void onStartAlarmSample() {
-        volume.cancelFadeIn();
-        volume.setMode(Type.PREALARM);
-        // if already playing do nothing. In this case signal continues.
-        if (!mMediaPlayer.isPresent() || mMediaPlayer.isPresent() && !mMediaPlayer.get().isPlaying()) {
-            initializePlayer(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM));
-        }
-        volume.apply();
-    }
-
-    /**
-     * Inits player and sets volume to 0
-     *
-     * @param alert
-     */
-    private void initializePlayer(Uri alert) {
-        // stop() checks to see if we are already playing.
-        if (mMediaPlayer.isPresent()) {
-            stop(mMediaPlayer.get());
-        }
-
-        MediaPlayer created = new MediaPlayer();
-        mMediaPlayer = Optional.of(created);
-        created.setOnErrorListener(new OnErrorListener() {
-            @Override
-            public boolean onError(MediaPlayer mp, int what, int extra) {
-                log.e("Error occurred while playing audio.");
-                volume.cancelFadeIn();
-                mp.stop();
-                mp.release();
-                nullifyMediaPlayer();
-                return true;
-            }
-        });
-
-        volume.mute();
-        try {
-            // Check if we are in a call. If we are, use the in-call alarm
-            // resource at a low targetVolume to not disrupt the call.
-            if (mTelephonyManager.getCallState() != TelephonyManager.CALL_STATE_IDLE) {
-                log.d("Using the in-call alarm");
-                setDataSourceFromResource(getResources(), created, R.raw.in_call_alarm);
-            } else {
-                created.setDataSource(this, alert);
-            }
-            startAlarm(created);
-        } catch (Exception ex) {
-            log.w("Using the fallback ringtone");
-            // The alert may be on the sd card which could be busy right
-            // now. Use the fallback ringtone.
-            try {
-                // Must reset the media player to clear the error state.
-                created.reset();
-                setDataSourceFromResource(getResources(), created, R.raw.fallbackring);
-                startAlarm(created);
-            } catch (Exception ex2) {
-                // At this point we just don't play anything.
-                log.e("Failed to play fallback ringtone", ex2);
-            }
-        }
-    }
-
-    private Uri getAlertOrDefault(Alarm alarm) {
-        Uri alert = alarm.getAlert();
-        // Fall back on the default alarm if the database does not have an
-        // alarm stored.
-        if (alert == null) {
-            alert = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);
-            log.d("Using default alarm: " + alert.toString());
-        }
-        return alert;
-    }
-
-    // Do the common stuff when starting the alarm.
-    private void startAlarm(MediaPlayer player) throws java.io.IOException, IllegalArgumentException,
-            IllegalStateException {
-        // do not play alarms if stream targetVolume is 0
-        // (typically because ringer mode is silent).
-        if (audioManager.getStreamVolume(AudioManager.STREAM_ALARM) != 0) {
-            player.setAudioStreamType(AudioManager.STREAM_ALARM);
-            player.setLooping(true);
-            player.prepare();
-            player.start();
-        }
-    }
-
-    private void setDataSourceFromResource(Resources resources, MediaPlayer player, int res)
-            throws java.io.IOException {
-        AssetFileDescriptor afd = resources.openRawResourceFd(res);
-        if (afd != null) {
-            player.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());
-            afd.close();
-        }
-    }
-
-    /**
-     * Stops alarm audio
-     */
-    private void stop(MediaPlayer player) {
-        log.d("stopping media player");
-        // Stop audio playing
-        try {
-            if (player.isPlaying()) {
-                player.stop();
-            }
-            player.release();
-        } catch (IllegalStateException e) {
-            log.e("stop failed with ", e);
-        } finally {
-            nullifyMediaPlayer();
-        }
-    }
-
-    private void stopAndCleanup() {
-        volume.cancelFadeIn();
-        stopSelf();
-    }
-
-    private void nullifyMediaPlayer() {
-        mMediaPlayer = Optional.absent();
     }
 }
diff --git a/src/main/java/com/better/alarm/background/KlaxonServiceCallback.java b/src/main/java/com/better/alarm/background/KlaxonServiceCallback.java
new file mode 100644
index 00000000..d61418d3
--- /dev/null
+++ b/src/main/java/com/better/alarm/background/KlaxonServiceCallback.java
@@ -0,0 +1,12 @@
+package com.better.alarm.background;
+
+import android.media.MediaPlayer;
+import android.net.Uri;
+
+public interface KlaxonServiceCallback {
+    void stopSelf();
+
+    Uri getDefaultUri(int type);
+
+    MediaPlayer createMediaPlayer();
+}
\ No newline at end of file
diff --git a/src/main/java/com/better/alarm/background/KlaxonServiceDelegate.kt b/src/main/java/com/better/alarm/background/KlaxonServiceDelegate.kt
new file mode 100644
index 00000000..2e7a6c34
--- /dev/null
+++ b/src/main/java/com/better/alarm/background/KlaxonServiceDelegate.kt
@@ -0,0 +1,334 @@
+package com.better.alarm.background
+
+import android.content.Context
+import android.content.Intent
+import android.content.res.Resources
+import android.media.AudioManager
+import android.media.MediaPlayer
+import android.media.RingtoneManager
+import android.net.Uri
+import android.os.PowerManager
+import android.telephony.TelephonyManager
+import com.better.alarm.R
+import com.better.alarm.interfaces.Alarm
+import com.better.alarm.interfaces.IAlarmsManager
+import com.better.alarm.interfaces.Intents
+import com.better.alarm.logger.Logger
+import com.better.alarm.wakelock.WakeLockManager
+import io.reactivex.Observable
+import io.reactivex.Scheduler
+import io.reactivex.disposables.CompositeDisposable
+import io.reactivex.disposables.Disposable
+import io.reactivex.disposables.Disposables
+import java.util.concurrent.TimeUnit
+import kotlin.properties.Delegates
+
+/**
+ * Created by Yuriy on 20.08.2017.
+ */
+class KlaxonServiceDelegate(
+        private val log: Logger,
+        private val pm: PowerManager,
+        private val audioManager: AudioManager,
+        private val wakeLocks: WakeLockManager,
+        private val alarms: IAlarmsManager,
+        private val context: Context,
+        private val resources: Resources,
+        val callState: Observable<Int>,
+        private val prealarmVolume: Observable<Int>,
+        private val fadeInTimeInSeconds: Observable<Int>,
+        private val callback: KlaxonServiceCallback,
+        private val scheduler: Scheduler
+) : KlaxonService.KlaxonDelegate {
+    private val disposables = CompositeDisposable()
+    private var volume: Volume by Delegates.notNull()
+    private var wakeLock: PowerManager.WakeLock by Delegates.notNull()
+    private var player: MediaPlayer? = null
+
+    var callStateSub: Disposable = Disposables.disposed()
+
+    init {
+        volume = Volume()
+        player = null
+        wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "KlaxonService")
+        wakeLock.acquire()
+    }
+
+    override fun onDestroy() {
+        player?.stopAndCleanup()
+        disposables.dispose()
+        wakeLock.release()
+        log.d("Service destroyed")
+    }
+
+    override fun onStartCommand(intent: Intent): Boolean {
+        wakeLocks.releasePartialWakeLock(intent)
+
+        val action: String = intent.action
+
+        log.d(intent.action)
+
+        when (action) {
+            Intents.ALARM_ALERT_ACTION, Intents.ALARM_PREALARM_ACTION -> {
+                val alarm = alarms.getAlarm(intent.getIntExtra(Intents.EXTRA_ID, -1))
+                val type = if (action == Intents.ALARM_PREALARM_ACTION) Type.PREALARM else Type.NORMAL
+
+                // Listen for incoming calls to kill the alarm.
+                callStateSub.dispose()
+                callStateSub = callState
+                        .map { it != TelephonyManager.CALL_STATE_IDLE }
+                        .distinctUntilChanged()
+                        .skip(1)//ignore the first one
+                        .subscribe {
+                            callActive ->
+                            if (callActive) {
+                                log.d("Call has started. Mute.")
+                                volume.mute()
+                            } else {
+                                log.d("Call has ended. fadeInFast.")
+                                if (!alarm.isSilent) {
+                                    initializePlayer(alarm.getAlertOrDefault())
+                                    volume.fadeInFast()
+                                }
+                            }
+                        }
+
+                onAlarm(alarm, type)
+            }
+            Intents.ACTION_START_PREALARM_SAMPLE -> onStartAlarmSample()
+            Intents.ACTION_MUTE -> volume.mute()
+            Intents.ACTION_DEMUTE -> volume.fadeInFast()
+            else -> {
+                volume.cancelFadeIn()
+                callback.stopSelf()
+            }
+        }
+
+        return when (action) {
+            Intents.ALARM_ALERT_ACTION,
+            Intents.ALARM_PREALARM_ACTION,
+            Intents.ACTION_START_PREALARM_SAMPLE,
+            Intents.ACTION_MUTE,
+            Intents.ACTION_DEMUTE -> true
+            else -> false
+        }
+    }
+
+    private fun onAlarm(alarm: Alarm, type: Type) {
+        volume.cancelFadeIn()
+        volume.type = type
+        if (!alarm.isSilent) {
+            initializePlayer(alarm.getAlertOrDefault())
+            volume.fadeInAsSetInSettings()
+        }
+    }
+
+    private fun onStartAlarmSample() {
+        volume.cancelFadeIn()
+        volume.type = Type.PREALARM
+        // if already playing do nothing. In this case signal continues.
+
+        if (player == null || !player!!.isPlaying) {
+            initializePlayer(callback.getDefaultUri(RingtoneManager.TYPE_ALARM))
+        }
+
+        volume.apply()
+    }
+
+    /**
+     * Inits player and sets volume to 0
+
+     * @param alert
+     */
+    private fun initializePlayer(alert: Uri) {
+        // stop() checks to see if we are already playing.
+        player?.stopAndCleanup()
+
+        player = callback.createMediaPlayer().apply {
+            setOnErrorListener { mp, what, extra ->
+                log.e("Error occurred while playing audio.")
+                volume.cancelFadeIn()
+                mp.stop()
+                mp.release()
+                player = null
+                true
+            }
+        }
+
+        volume.mute()
+        try {
+            callState.map { it != TelephonyManager.CALL_STATE_IDLE }.firstOrError().subscribe { inCall ->
+                // Check if we are in a call. If we are, use the in-call alarm
+                // resource at a low targetVolume to not disrupt the call.
+                if (inCall) {
+                    log.d("Using the in-call alarm")
+                    player?.setDataSourceFromResource(resources, R.raw.in_call_alarm)
+                } else {
+                    player?.setDataSource(context, alert)
+                }
+            }
+
+            player?.startAlarm()
+        } catch (ex: Exception) {
+            log.w("Using the fallback ringtone")
+            // The alert may be on the sd card which could be busy right
+            // now. Use the fallback ringtone.
+            try {
+                // Must reset the media player to clear the error state.
+                player?.run {
+                    reset()
+                    setDataSourceFromResource(resources, R.raw.fallbackring)
+                    startAlarm()
+                }
+            } catch (ex2: Exception) {
+                // At this point we just don't play anything.
+                log.e("Failed to play fallback ringtone", ex2)
+            }
+        }
+    }
+
+    private fun Alarm.getAlertOrDefault(): Uri {
+        // Fall back on the default alarm if the database does not have an
+        // alarm stored.
+        if (alert == null) {
+            val default: Uri? = callback.getDefaultUri(RingtoneManager.TYPE_ALARM)
+            log.d("Using default alarm: " + default.toString())
+            //TODO("Check this")
+            return default!!
+        } else {
+            return alert
+        }
+    }
+
+    // Do the common stuff when starting the alarm.
+    @Throws(java.io.IOException::class, IllegalArgumentException::class, IllegalStateException::class)
+    private fun MediaPlayer.startAlarm() {
+        // do not play alarms if stream targetVolume is 0
+        // (typically because ringer mode is silent).
+        if (audioManager.getStreamVolume(AudioManager.STREAM_ALARM) != 0) {
+            setAudioStreamType(AudioManager.STREAM_ALARM)
+            isLooping = true
+            prepare()
+            start()
+        }
+    }
+
+    @Throws(java.io.IOException::class)
+    private fun MediaPlayer.setDataSourceFromResource(resources: Resources, res: Int) {
+        resources.openRawResourceFd(res)?.run {
+            setDataSource(fileDescriptor, startOffset, length)
+            close()
+        }
+    }
+
+    /**
+     * Stops alarm audio
+     */
+    private fun MediaPlayer.stopAndCleanup() {
+        log.d("stopping media player")
+        try {
+            if (isPlaying) stop()
+            release()
+        } catch (e: IllegalStateException) {
+            log.e("stop failed with ", e)
+        } finally {
+            player = null
+        }
+    }
+
+    enum class Type {
+        NORMAL, PREALARM
+    }
+
+    private inner class Volume internal constructor() {
+        private val FAST_FADE_IN_TIME = 5000
+
+        private val FADE_IN_STEPS = 100
+
+        // Volume suggested by media team for in-call alarms.
+        private val IN_CALL_VOLUME = 0.125f
+
+        private val SILENT = 0f
+
+        private val MAX_VOLUME = 10
+
+        internal var type = Type.NORMAL
+
+        private var timer: Disposable = Disposables.disposed()
+
+        init {
+            val volumeSub = prealarmVolume
+                    .subscribe {
+                        player?.apply {
+                            if (isPlaying && type == Type.PREALARM) {
+                                val volumeFor = getVolumeFor(Type.PREALARM)
+                                setVolume(volumeFor, volumeFor)
+                            }
+                        }
+                    }
+            disposables.add(volumeSub)
+        }
+
+        /**
+         * Instantly apply the targetVolume. To fade in use [.fadeInAsSetInSettings]
+         */
+        fun apply() {
+            val volume = getVolumeFor(type)
+            player?.setVolume(volume, volume)
+        }
+
+        /**
+         * Fade in to set targetVolume
+         */
+        fun fadeInAsSetInSettings() {
+            fadeInTimeInSeconds.firstOrError().subscribe(this::fadeIn)
+        }
+
+        fun fadeInFast() {
+            fadeIn(FAST_FADE_IN_TIME)
+        }
+
+        fun cancelFadeIn() {
+            timer.dispose()
+        }
+
+        fun mute() {
+            cancelFadeIn()
+            player?.setVolume(SILENT, SILENT)
+        }
+
+        private fun fadeIn(time: Int) {
+            val fadeInTime: Long = time.toLong()
+
+            cancelFadeIn()
+            player?.setVolume(SILENT, SILENT)
+
+            var targetVolume: Float = getVolumeFor(type)
+            val fadeInStep: Long = fadeInTime / FADE_IN_STEPS
+            val divider: Float = (fadeInTime / fadeInStep).squared()
+            var multiplier: Float = targetVolume / divider
+
+            timer = Observable.interval(fadeInStep, TimeUnit.MILLISECONDS, scheduler)
+                    .map { it * fadeInStep }
+                    .takeWhile { it < fadeInTime }
+                    .subscribe { elapsed ->
+                        val fraction: Long = elapsed / fadeInStep
+                        val adjustedVolume: Float = multiplier * fraction.squared()
+                        log.d("Fade in $adjustedVolume")
+                        player?.setVolume(adjustedVolume, adjustedVolume)
+                    }
+        }
+
+        private fun getVolumeFor(type: Type): Float {
+            return if (type == Type.NORMAL) 1f
+            else prealarmVolume.blockingFirst()
+                    .coerceAtMost(MAX_VOLUME).plus(1).squared()
+                    .div(MAX_VOLUME.plus(1).squared())
+                    .div(4)
+
+        }
+    }
+
+    fun Int.squared() = Math.pow(this.toDouble(), 2.0).toFloat()
+    fun Long.squared() = Math.pow(this.toDouble(), 2.0).toFloat()
+}
\ No newline at end of file
diff --git a/src/main/java/com/better/alarm/interfaces/IAlarmsManager.java b/src/main/java/com/better/alarm/interfaces/IAlarmsManager.java
index 47028493..ecd0c3e5 100644
--- a/src/main/java/com/better/alarm/interfaces/IAlarmsManager.java
+++ b/src/main/java/com/better/alarm/interfaces/IAlarmsManager.java
@@ -15,6 +15,8 @@
  */
 package com.better.alarm.interfaces;
 
+import android.support.annotation.NonNull;
+
 import com.better.alarm.model.AlarmValue;
 
 /**
@@ -57,6 +59,7 @@ public interface IAlarmsManager {
      * Return an AlarmCore object representing the alarm id in the database.
      * Returns null if no alarm exists.
      */
+    @NonNull
     Alarm getAlarm(int alarmId);
 
     /**
diff --git a/src/test/java/com/better/alarm/KlaxonTest.java b/src/test/java/com/better/alarm/KlaxonTest.java
new file mode 100644
index 00000000..9fb112d1
--- /dev/null
+++ b/src/test/java/com/better/alarm/KlaxonTest.java
@@ -0,0 +1,71 @@
+package com.better.alarm;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Resources;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.os.PowerManager;
+import android.telephony.TelephonyManager;
+
+import com.better.alarm.background.KlaxonServiceCallback;
+import com.better.alarm.background.KlaxonServiceDelegate;
+import com.better.alarm.interfaces.Alarm;
+import com.better.alarm.interfaces.IAlarmsManager;
+import com.better.alarm.interfaces.Intents;
+import com.better.alarm.logger.Logger;
+import com.better.alarm.wakelock.WakeLockManager;
+
+import org.junit.Test;
+
+import java.util.concurrent.TimeUnit;
+
+import io.reactivex.Observable;
+import io.reactivex.schedulers.TestScheduler;
+
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Created by Yuriy on 20.08.2017.
+ */
+
+public class KlaxonTest {
+    @Test
+    public void smoke() {
+        PowerManager powerManager = mock(PowerManager.class);
+        when(powerManager.newWakeLock(anyInt(), anyString())).thenReturn(mock(PowerManager.WakeLock.class));
+
+        IAlarmsManager alarmsManager = mock(IAlarmsManager.class);
+        when(alarmsManager.getAlarm(anyInt())).thenReturn(mock(Alarm.class));
+
+        KlaxonServiceCallback klaxonServiceCallback = mock(KlaxonServiceCallback.class);
+        when(klaxonServiceCallback.getDefaultUri(anyInt())).thenReturn(mock(Uri.class));
+        when(klaxonServiceCallback.createMediaPlayer()).thenReturn(mock(MediaPlayer.class));
+
+        TestScheduler scheduler = new TestScheduler();
+        KlaxonServiceDelegate delegate = new KlaxonServiceDelegate(
+                new Logger(),
+                powerManager,
+                mock(AudioManager.class),
+                mock(WakeLockManager.class),
+                alarmsManager,
+                mock(Context.class),
+                mock(Resources.class),
+                Observable.just(TelephonyManager.CALL_STATE_IDLE),
+                Observable.just(2),
+                Observable.just(30000),
+                klaxonServiceCallback,
+                scheduler
+        );
+
+        Intent intent = mock(Intent.class);
+        when(intent.getAction()).thenReturn(Intents.ALARM_ALERT_ACTION);
+        delegate.onStartCommand(intent);
+        scheduler.advanceTimeBy(35, TimeUnit.SECONDS);
+        delegate.onDestroy();
+    }
+}
